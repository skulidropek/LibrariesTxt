public class AssemblyStripper.AssemblyStripper : object {
    private AssemblyDefinition assembly;
    private BinaryWriter writer;
    private Image original;
    private Image stripped;
    private ReflectionWriter reflection_writer;
    private MetadataWriter metadata_writer;
    private TablesHeap original_tables;
    private TablesHeap stripped_tables;
    private AssemblyStripper(AssemblyDefinition assembly, BinaryWriter writer);
    private void Strip();
    private void FullLoad();
    private void ClearMethodBodies();
    private static void ClearMethodBodies(ICollection methods);
    private void CopyOriginalImage();
    private static void PatchHeap(MemoryBinaryWriter heap_writer, MetadataHeap heap);
    private void PatchMethods();
    private void PatchFields();
    private void PatchResources();
    private void SortCustomAttributes();
    private void Write();
    internal static void StripAssembly(AssemblyDefinition assembly, string file);
    public static void StripAssembly(string assemblyFile, string outputPath);
}
internal class AssemblyStripper.CustomAttrRowComparer : object {
    public sealed virtual int Compare(object left, object right);
}
internal class CilStrip.Mono.Cecil.AggressiveReflectionReader : ReflectionReader {
    public AggressiveReflectionReader(ModuleDefinition module);
    public virtual void VisitTypeDefinitionCollection(TypeDefinitionCollection types);
    private void ReadGenericParameterConstraints();
    private void ReadClassLayoutInfos();
    private void ReadFieldLayoutInfos();
    private void ReadPInvokeInfos();
    private void ReadProperties();
    private void ReadEvents();
    private void ReadSemantics();
    private void ReadInterfaces();
    private void ReadOverrides();
    private void ReadSecurityDeclarations();
    private void ReadCustomAttributes();
    private void ReadConstants();
    private void ReadExternTypes();
    private void ReadMarshalSpecs();
    private void ReadInitialValues();
}
internal class CilStrip.Mono.Cecil.ArrayDimension : object {
    private int m_lowerBound;
    private int m_upperBound;
    public int LowerBound { get; public set; }
    public int UpperBound { get; public set; }
    public ArrayDimension(int lb, int ub);
    public int get_LowerBound();
    public void set_LowerBound(int value);
    public int get_UpperBound();
    public void set_UpperBound(int value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.ArrayDimensionCollection : CollectionBase {
    private ArrayType m_container;
    public ArrayDimension Item { get; public set; }
    public ArrayType Container { get; }
    public ArrayDimensionCollection(ArrayType container);
    public ArrayDimension get_Item(int index);
    public void set_Item(int index, ArrayDimension value);
    public ArrayType get_Container();
    public void Add(ArrayDimension value);
    public bool Contains(ArrayDimension value);
    public int IndexOf(ArrayDimension value);
    public void Insert(int index, ArrayDimension value);
    public void Remove(ArrayDimension value);
    protected virtual void OnValidate(object o);
}
internal class CilStrip.Mono.Cecil.ArrayMarshalSpec : MarshalSpec {
    private NativeType m_elemType;
    private int m_paramNum;
    private int m_elemMult;
    private int m_numElem;
    public NativeType ElemType { get; public set; }
    public int ParamNum { get; public set; }
    public int ElemMult { get; public set; }
    public int NumElem { get; public set; }
    public ArrayMarshalSpec(IHasMarshalSpec container);
    public NativeType get_ElemType();
    public void set_ElemType(NativeType value);
    public int get_ParamNum();
    public void set_ParamNum(int value);
    public int get_ElemMult();
    public void set_ElemMult(int value);
    public int get_NumElem();
    public void set_NumElem(int value);
    public virtual MarshalSpec CloneInto(IHasMarshalSpec container);
}
internal class CilStrip.Mono.Cecil.ArrayType : TypeSpecification {
    private ArrayDimensionCollection m_dimensions;
    public ArrayDimensionCollection Dimensions { get; }
    public int Rank { get; }
    public bool IsSizedArray { get; }
    public string Name { get; }
    public string FullName { get; }
    internal ArrayType(TypeReference elementType, ArrayShape shape);
    public ArrayType(TypeReference elementType, int rank);
    public ArrayType(TypeReference elementType);
    public ArrayDimensionCollection get_Dimensions();
    public int get_Rank();
    public bool get_IsSizedArray();
    public virtual string get_Name();
    public virtual string get_FullName();
    private string Suffix();
}
internal class CilStrip.Mono.Cecil.AssemblyDefinition : object {
    private MetadataToken m_token;
    private AssemblyNameDefinition m_asmName;
    private ModuleDefinitionCollection m_modules;
    private SecurityDeclarationCollection m_secDecls;
    private CustomAttributeCollection m_customAttrs;
    private MethodDefinition m_ep;
    private TargetRuntime m_runtime;
    private AssemblyKind m_kind;
    private ModuleDefinition m_mainModule;
    private StructureReader m_reader;
    private IAssemblyResolver m_resolver;
    private IDictionary m_annotations;
    public MetadataToken MetadataToken { get; public set; }
    public AssemblyNameDefinition Name { get; }
    public ModuleDefinitionCollection Modules { get; }
    public bool HasSecurityDeclarations { get; }
    public SecurityDeclarationCollection SecurityDeclarations { get; }
    public bool HasCustomAttributes { get; }
    public CustomAttributeCollection CustomAttributes { get; }
    public MethodDefinition EntryPoint { get; public set; }
    public TargetRuntime Runtime { get; public set; }
    public AssemblyKind Kind { get; public set; }
    public ModuleDefinition MainModule { get; }
    internal StructureReader Reader { get; }
    public IAssemblyResolver Resolver { get; public set; }
    private IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.Annotations { get; }
    internal AssemblyDefinition(AssemblyNameDefinition name);
    internal AssemblyDefinition(AssemblyNameDefinition name, StructureReader reader);
    public sealed virtual MetadataToken get_MetadataToken();
    public sealed virtual void set_MetadataToken(MetadataToken value);
    public AssemblyNameDefinition get_Name();
    public ModuleDefinitionCollection get_Modules();
    public sealed virtual bool get_HasSecurityDeclarations();
    public sealed virtual SecurityDeclarationCollection get_SecurityDeclarations();
    public sealed virtual bool get_HasCustomAttributes();
    public sealed virtual CustomAttributeCollection get_CustomAttributes();
    public MethodDefinition get_EntryPoint();
    public void set_EntryPoint(MethodDefinition value);
    public TargetRuntime get_Runtime();
    public void set_Runtime(TargetRuntime value);
    public AssemblyKind get_Kind();
    public void set_Kind(AssemblyKind value);
    public ModuleDefinition get_MainModule();
    internal StructureReader get_Reader();
    public IAssemblyResolver get_Resolver();
    public void set_Resolver(IAssemblyResolver value);
    private sealed virtual override IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.get_Annotations();
    public sealed virtual void Accept(IReflectionStructureVisitor visitor);
    public virtual string ToString();
}
internal class CilStrip.Mono.Cecil.AssemblyFactory : object {
    private static AssemblyDefinition GetAssembly(ImageReader irv, bool manifestOnly);
    private static AssemblyDefinition GetAssembly(ImageReader reader);
    private static AssemblyDefinition GetAssemblyManifest(ImageReader reader);
    public static AssemblyDefinition GetAssembly(string file);
    public static AssemblyDefinition GetAssembly(Byte[] assembly);
    public static AssemblyDefinition GetAssembly(Stream stream);
    public static AssemblyDefinition GetAssemblyManifest(string file);
    public static AssemblyDefinition GetAssemblyManifest(Byte[] assembly);
    public static AssemblyDefinition GetAssemblyManifest(Stream stream);
    private static TargetRuntime CurrentRuntime();
    public static AssemblyDefinition DefineAssembly(string name, AssemblyKind kind);
    public static AssemblyDefinition DefineAssembly(string name, TargetRuntime rt, AssemblyKind kind);
    public static AssemblyDefinition DefineAssembly(string assemblyName, string moduleName, TargetRuntime rt, AssemblyKind kind);
    private static void WriteAssembly(AssemblyDefinition asm, BinaryWriter bw);
    public static void SaveAssembly(AssemblyDefinition asm, string file);
    public static void SaveAssembly(AssemblyDefinition asm, Byte[]& assembly);
    public static void SaveAssembly(AssemblyDefinition asm, Stream stream);
    public static Assembly CreateReflectionAssembly(AssemblyDefinition asm, AppDomain domain);
    public static Assembly CreateReflectionAssembly(AssemblyDefinition asm);
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.AssemblyFlags : Enum {
    public UInt32 value__;
    public static AssemblyFlags PublicKey;
    public static AssemblyFlags SideBySideCompatible;
    public static AssemblyFlags Retargetable;
    public static AssemblyFlags EnableJITcompileTracking;
    public static AssemblyFlags DisableJITcompileOptimizer;
}
internal enum CilStrip.Mono.Cecil.AssemblyHashAlgorithm : Enum {
    public UInt32 value__;
    public static AssemblyHashAlgorithm None;
    public static AssemblyHashAlgorithm Reserved;
    public static AssemblyHashAlgorithm SHA1;
}
internal enum CilStrip.Mono.Cecil.AssemblyKind : Enum {
    public int value__;
    public static AssemblyKind Dll;
    public static AssemblyKind Console;
    public static AssemblyKind Windows;
}
internal class CilStrip.Mono.Cecil.AssemblyLinkedResource : Resource {
    private AssemblyNameReference m_asmRef;
    public AssemblyNameReference Assembly { get; public set; }
    public AssemblyLinkedResource(string name, ManifestResourceAttributes flags, AssemblyNameReference asmRef);
    public AssemblyNameReference get_Assembly();
    public void set_Assembly(AssemblyNameReference value);
    public virtual void Accept(IReflectionStructureVisitor visitor);
}
internal class CilStrip.Mono.Cecil.AssemblyNameDefinition : AssemblyNameReference {
    public Byte[] Hash { get; }
    public AssemblyNameDefinition(string name, string culture, Version version);
    public virtual Byte[] get_Hash();
    public virtual void Accept(IReflectionStructureVisitor visitor);
}
internal class CilStrip.Mono.Cecil.AssemblyNameReference : object {
    private string m_name;
    private string m_culture;
    private Version m_version;
    private AssemblyFlags m_flags;
    private Byte[] m_publicKey;
    private Byte[] m_publicKeyToken;
    private AssemblyHashAlgorithm m_hashAlgo;
    private Byte[] m_hash;
    private MetadataToken m_token;
    private IDictionary m_annotations;
    private bool m_fullNameDiscarded;
    private string m_fullName;
    public string Name { get; public set; }
    public string Culture { get; public set; }
    public Version Version { get; public set; }
    public AssemblyFlags Flags { get; public set; }
    public bool HasPublicKey { get; public set; }
    public bool IsSideBySideCompatible { get; public set; }
    public bool IsRetargetable { get; public set; }
    public Byte[] PublicKey { get; public set; }
    public Byte[] PublicKeyToken { get; public set; }
    public string FullName { get; }
    public AssemblyHashAlgorithm HashAlgorithm { get; public set; }
    public Byte[] Hash { get; public set; }
    public MetadataToken MetadataToken { get; public set; }
    private IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.Annotations { get; }
    public AssemblyNameReference(string name, string culture, Version version);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public string get_Culture();
    public void set_Culture(string value);
    public Version get_Version();
    public void set_Version(Version value);
    public AssemblyFlags get_Flags();
    public void set_Flags(AssemblyFlags value);
    public bool get_HasPublicKey();
    public void set_HasPublicKey(bool value);
    public bool get_IsSideBySideCompatible();
    public void set_IsSideBySideCompatible(bool value);
    public bool get_IsRetargetable();
    public void set_IsRetargetable(bool value);
    public Byte[] get_PublicKey();
    public void set_PublicKey(Byte[] value);
    public Byte[] get_PublicKeyToken();
    public void set_PublicKeyToken(Byte[] value);
    public string get_FullName();
    public static AssemblyNameReference Parse(string fullName);
    public AssemblyHashAlgorithm get_HashAlgorithm();
    public void set_HashAlgorithm(AssemblyHashAlgorithm value);
    public virtual Byte[] get_Hash();
    public virtual void set_Hash(Byte[] value);
    public sealed virtual MetadataToken get_MetadataToken();
    public sealed virtual void set_MetadataToken(MetadataToken value);
    private sealed virtual override IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.get_Annotations();
    public virtual string ToString();
    public virtual void Accept(IReflectionStructureVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.AssemblyNameReferenceCollection : CollectionBase {
    private ModuleDefinition m_container;
    public AssemblyNameReference Item { get; public set; }
    public ModuleDefinition Container { get; }
    public AssemblyNameReferenceCollection(ModuleDefinition container);
    public AssemblyNameReference get_Item(int index);
    public void set_Item(int index, AssemblyNameReference value);
    public ModuleDefinition get_Container();
    public void Add(AssemblyNameReference value);
    public bool Contains(AssemblyNameReference value);
    public int IndexOf(AssemblyNameReference value);
    public void Insert(int index, AssemblyNameReference value);
    public void Remove(AssemblyNameReference value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(IReflectionStructureVisitor visitor);
}
internal abstract class CilStrip.Mono.Cecil.BaseAssemblyResolver : object {
    private ArrayList m_directories;
    private String[] m_monoGacPaths;
    private static String[] _extentions;
    private String[] MonoGacPaths { get; }
    private static BaseAssemblyResolver();
    public void AddSearchDirectory(string directory);
    public void RemoveSearchDirectory(string directory);
    public String[] GetSearchDirectories();
    public virtual AssemblyDefinition Resolve(string fullName);
    public virtual AssemblyDefinition Resolve(AssemblyNameReference name);
    private static AssemblyDefinition SearchDirectory(AssemblyNameReference name, IEnumerable directories);
    private static bool IsZero(Version version);
    private static AssemblyDefinition GetCorlib(AssemblyNameReference reference);
    public static bool OnMono();
    private String[] get_MonoGacPaths();
    private static String[] GetDefaultMonoGacPaths();
    private AssemblyDefinition GetAssemblyInGac(AssemblyNameReference reference);
    private static string GetAssemblyFile(AssemblyNameReference reference, string gac);
    private static string GetCurrentGacPath();
}
internal abstract class CilStrip.Mono.Cecil.BaseReflectionReader : BaseReflectionVisitor {
    public virtual void ReadSemantic(EventDefinition evt);
    public virtual void ReadSemantic(PropertyDefinition prop);
    public virtual void ReadMarshalSpec(ParameterDefinition param);
    public virtual void ReadMarshalSpec(FieldDefinition field);
    public virtual void ReadLayout(TypeDefinition type);
    public virtual void ReadLayout(FieldDefinition field);
    public virtual void ReadConstant(FieldDefinition field);
    public virtual void ReadConstant(PropertyDefinition prop);
    public virtual void ReadConstant(ParameterDefinition param);
    public virtual void ReadInitialValue(FieldDefinition field);
}
internal abstract class CilStrip.Mono.Cecil.BaseReflectionVisitor : object {
    public virtual void VisitModuleDefinition(ModuleDefinition module);
    public virtual void VisitTypeDefinitionCollection(TypeDefinitionCollection types);
    public virtual void VisitTypeDefinition(TypeDefinition type);
    public virtual void VisitTypeReferenceCollection(TypeReferenceCollection refs);
    public virtual void VisitTypeReference(TypeReference type);
    public virtual void VisitMemberReferenceCollection(MemberReferenceCollection members);
    public virtual void VisitMemberReference(MemberReference member);
    public virtual void VisitInterfaceCollection(InterfaceCollection interfaces);
    public virtual void VisitInterface(TypeReference interf);
    public virtual void VisitExternTypeCollection(ExternTypeCollection externs);
    public virtual void VisitExternType(TypeReference externType);
    public virtual void VisitOverrideCollection(OverrideCollection meth);
    public virtual void VisitOverride(MethodReference ov);
    public virtual void VisitNestedTypeCollection(NestedTypeCollection nestedTypes);
    public virtual void VisitNestedType(TypeDefinition nestedType);
    public virtual void VisitParameterDefinitionCollection(ParameterDefinitionCollection parameters);
    public virtual void VisitParameterDefinition(ParameterDefinition parameter);
    public virtual void VisitMethodDefinitionCollection(MethodDefinitionCollection methods);
    public virtual void VisitMethodDefinition(MethodDefinition method);
    public virtual void VisitConstructorCollection(ConstructorCollection ctors);
    public virtual void VisitConstructor(MethodDefinition ctor);
    public virtual void VisitPInvokeInfo(PInvokeInfo pinvk);
    public virtual void VisitEventDefinitionCollection(EventDefinitionCollection events);
    public virtual void VisitEventDefinition(EventDefinition evt);
    public virtual void VisitFieldDefinitionCollection(FieldDefinitionCollection fields);
    public virtual void VisitFieldDefinition(FieldDefinition field);
    public virtual void VisitPropertyDefinitionCollection(PropertyDefinitionCollection properties);
    public virtual void VisitPropertyDefinition(PropertyDefinition property);
    public virtual void VisitSecurityDeclarationCollection(SecurityDeclarationCollection secDecls);
    public virtual void VisitSecurityDeclaration(SecurityDeclaration secDecl);
    public virtual void VisitCustomAttributeCollection(CustomAttributeCollection customAttrs);
    public virtual void VisitCustomAttribute(CustomAttribute customAttr);
    public virtual void VisitGenericParameterCollection(GenericParameterCollection genparams);
    public virtual void VisitGenericParameter(GenericParameter genparam);
    public virtual void VisitMarshalSpec(MarshalSpec marshalSpec);
    public virtual void TerminateModuleDefinition(ModuleDefinition module);
    protected void VisitCollection(ICollection coll);
}
internal abstract class CilStrip.Mono.Cecil.BaseStructureVisitor : object {
    public virtual void VisitAssemblyDefinition(AssemblyDefinition asm);
    public virtual void VisitAssemblyNameDefinition(AssemblyNameDefinition name);
    public virtual void VisitAssemblyNameReferenceCollection(AssemblyNameReferenceCollection names);
    public virtual void VisitAssemblyNameReference(AssemblyNameReference name);
    public virtual void VisitResourceCollection(ResourceCollection resources);
    public virtual void VisitEmbeddedResource(EmbeddedResource res);
    public virtual void VisitLinkedResource(LinkedResource res);
    public virtual void VisitAssemblyLinkedResource(AssemblyLinkedResource res);
    public virtual void VisitModuleDefinition(ModuleDefinition module);
    public virtual void VisitModuleDefinitionCollection(ModuleDefinitionCollection modules);
    public virtual void VisitModuleReference(ModuleReference module);
    public virtual void VisitModuleReferenceCollection(ModuleReferenceCollection modules);
    public virtual void TerminateAssemblyDefinition(AssemblyDefinition asm);
    protected void VisitCollection(ICollection coll);
}
internal abstract class CilStrip.Mono.Cecil.Binary.BaseImageVisitor : object {
    public virtual void VisitImage(Image img);
    public virtual void VisitDOSHeader(DOSHeader header);
    public virtual void VisitPEFileHeader(PEFileHeader header);
    public virtual void VisitPEOptionalHeader(PEOptionalHeader header);
    public virtual void VisitStandardFieldsHeader(StandardFieldsHeader header);
    public virtual void VisitNTSpecificFieldsHeader(NTSpecificFieldsHeader header);
    public virtual void VisitDataDirectoriesHeader(DataDirectoriesHeader header);
    public virtual void VisitSectionCollection(SectionCollection coll);
    public virtual void VisitSection(Section section);
    public virtual void VisitImportAddressTable(ImportAddressTable iat);
    public virtual void VisitDebugHeader(DebugHeader dh);
    public virtual void VisitCLIHeader(CLIHeader header);
    public virtual void VisitImportTable(ImportTable it);
    public virtual void VisitImportLookupTable(ImportLookupTable ilt);
    public virtual void VisitHintNameTable(HintNameTable hnt);
    public virtual void VisitExportTable(ExportTable et);
    public virtual void TerminateImage(Image img);
}
internal class CilStrip.Mono.Cecil.Binary.CLIHeader : object {
    public UInt32 Cb;
    public ushort MajorRuntimeVersion;
    public ushort MinorRuntimeVersion;
    public DataDirectory Metadata;
    public RuntimeImage Flags;
    public UInt32 EntryPointToken;
    public DataDirectory Resources;
    public DataDirectory StrongNameSignature;
    public DataDirectory CodeManagerTable;
    public DataDirectory VTableFixups;
    public DataDirectory ExportAddressTableJumps;
    public DataDirectory ManagedNativeHeader;
    public Byte[] ImageHash;
    public sealed virtual void SetDefaultValues();
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Binary.CopyImageVisitor : BaseImageVisitor {
    private Image m_newImage;
    private Image m_originalImage;
    public CopyImageVisitor(Image originalImage);
    public virtual void VisitImage(Image img);
    public virtual void VisitDebugHeader(DebugHeader dbgHeader);
    public virtual void VisitSectionCollection(SectionCollection sections);
    public virtual void TerminateImage(Image img);
    private ResourceDirectoryTable CloneResourceDirectoryTable(ResourceDirectoryTable old);
    private ResourceDirectoryEntry CloneResourceDirectoryEntry(ResourceDirectoryEntry old);
    private ResourceDataEntry CloneResourceDataEntry(ResourceDataEntry old);
}
internal class CilStrip.Mono.Cecil.Binary.DataDirectory : ValueType {
    public static DataDirectory Zero;
    private RVA m_virtualAddress;
    private UInt32 m_size;
    public RVA VirtualAddress { get; public set; }
    public UInt32 Size { get; public set; }
    public DataDirectory(RVA virtualAddress, UInt32 size);
    private static DataDirectory();
    public RVA get_VirtualAddress();
    public void set_VirtualAddress(RVA value);
    public UInt32 get_Size();
    public void set_Size(UInt32 value);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    public virtual string ToString();
    public static bool op_Equality(DataDirectory one, DataDirectory other);
    public static bool op_Inequality(DataDirectory one, DataDirectory other);
}
internal class CilStrip.Mono.Cecil.Binary.DebugHeader : object {
    public UInt32 Characteristics;
    public UInt32 TimeDateStamp;
    public ushort MajorVersion;
    public ushort MinorVersion;
    public DebugStoreType Type;
    public UInt32 SizeOfData;
    public RVA AddressOfRawData;
    public UInt32 PointerToRawData;
    public UInt32 Magic;
    public Guid Signature;
    public UInt32 Age;
    public string FileName;
    public sealed virtual void SetDefaultValues();
    public UInt32 GetSize();
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
internal enum CilStrip.Mono.Cecil.Binary.DebugStoreType : Enum {
    public UInt32 value__;
    public static DebugStoreType Unknown;
    public static DebugStoreType COFF;
    public static DebugStoreType CodeView;
    public static DebugStoreType FPO;
    public static DebugStoreType Misc;
    public static DebugStoreType Exception;
    public static DebugStoreType Fixup;
    public static DebugStoreType OMAPToSrc;
    public static DebugStoreType OMAPFromSrc;
    public static DebugStoreType Borland;
    public static DebugStoreType Reserved10;
    public static DebugStoreType CLSID;
}
internal class CilStrip.Mono.Cecil.Binary.DOSHeader : object {
    public Byte[] Start;
    public Byte[] End;
    public UInt32 Lfanew;
    public sealed virtual void SetDefaultValues();
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Binary.ExportTable : object {
    public UInt32 Characteristics;
    public UInt32 TimeDateStamp;
    public ushort MajorVersion;
    public ushort MinorVersion;
    public string Name;
    public UInt32 Base;
    public UInt32 NumberOfFunctions;
    public UInt32 NumberOfNames;
    public RVA AddressOfFunctions;
    public RVA AddressOfNames;
    public RVA AddressOfNameOrdinals;
    public RVA[] AddressesOfFunctions;
    public RVA[] AddressesOfNames;
    public UInt16[] NameOrdinals;
    public String[] Names;
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Binary.HintNameTable : object {
    public static string RuntimeMainExe;
    public static string RuntimeMainDll;
    public static string RuntimeCorEE;
    public ushort Hint;
    public string RuntimeMain;
    public string RuntimeLibrary;
    public ushort EntryPoint;
    public RVA RVA;
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.Binary.IBinaryVisitable {
    public abstract virtual void Accept(IBinaryVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.Binary.IBinaryVisitor {
    public abstract virtual void VisitImage(Image img);
    public abstract virtual void VisitDOSHeader(DOSHeader header);
    public abstract virtual void VisitPEFileHeader(PEFileHeader header);
    public abstract virtual void VisitPEOptionalHeader(PEOptionalHeader header);
    public abstract virtual void VisitStandardFieldsHeader(StandardFieldsHeader header);
    public abstract virtual void VisitNTSpecificFieldsHeader(NTSpecificFieldsHeader header);
    public abstract virtual void VisitDataDirectoriesHeader(DataDirectoriesHeader header);
    public abstract virtual void VisitSectionCollection(SectionCollection coll);
    public abstract virtual void VisitSection(Section section);
    public abstract virtual void VisitImportAddressTable(ImportAddressTable iat);
    public abstract virtual void VisitDebugHeader(DebugHeader dh);
    public abstract virtual void VisitCLIHeader(CLIHeader header);
    public abstract virtual void VisitImportTable(ImportTable it);
    public abstract virtual void VisitImportLookupTable(ImportLookupTable ilt);
    public abstract virtual void VisitHintNameTable(HintNameTable hnt);
    public abstract virtual void VisitExportTable(ExportTable et);
    public abstract virtual void TerminateImage(Image img);
}
internal interface CilStrip.Mono.Cecil.Binary.IHeader {
    public abstract virtual void SetDefaultValues();
}
internal class CilStrip.Mono.Cecil.Binary.Image : object {
    private DOSHeader m_dosHeader;
    private PEFileHeader m_peFileHeader;
    private PEOptionalHeader m_peOptionalHeader;
    private SectionCollection m_sections;
    private Section m_textSection;
    private ImportAddressTable m_importAddressTable;
    private CLIHeader m_cliHeader;
    private ImportTable m_importTable;
    private ImportLookupTable m_importLookupTable;
    private HintNameTable m_hintNameTable;
    private ExportTable m_exportTable;
    private DebugHeader m_debugHeader;
    private MetadataRoot m_mdRoot;
    private ResourceDirectoryTable m_rsrcRoot;
    private FileInfo m_img;
    public DOSHeader DOSHeader { get; }
    public PEFileHeader PEFileHeader { get; }
    public PEOptionalHeader PEOptionalHeader { get; }
    public SectionCollection Sections { get; }
    public Section TextSection { get; public set; }
    public ImportAddressTable ImportAddressTable { get; }
    public CLIHeader CLIHeader { get; public set; }
    public DebugHeader DebugHeader { get; public set; }
    public MetadataRoot MetadataRoot { get; }
    public ImportTable ImportTable { get; }
    public ImportLookupTable ImportLookupTable { get; }
    public HintNameTable HintNameTable { get; }
    public ExportTable ExportTable { get; public set; }
    internal ResourceDirectoryTable ResourceDirectoryRoot { get; internal set; }
    public FileInfo FileInformation { get; }
    internal Image(FileInfo img);
    public DOSHeader get_DOSHeader();
    public PEFileHeader get_PEFileHeader();
    public PEOptionalHeader get_PEOptionalHeader();
    public SectionCollection get_Sections();
    public Section get_TextSection();
    public void set_TextSection(Section value);
    public ImportAddressTable get_ImportAddressTable();
    public CLIHeader get_CLIHeader();
    public void set_CLIHeader(CLIHeader value);
    public DebugHeader get_DebugHeader();
    public void set_DebugHeader(DebugHeader value);
    public MetadataRoot get_MetadataRoot();
    public ImportTable get_ImportTable();
    public ImportLookupTable get_ImportLookupTable();
    public HintNameTable get_HintNameTable();
    public ExportTable get_ExportTable();
    public void set_ExportTable(ExportTable value);
    internal ResourceDirectoryTable get_ResourceDirectoryRoot();
    internal void set_ResourceDirectoryRoot(ResourceDirectoryTable value);
    public FileInfo get_FileInformation();
    public long ResolveVirtualAddress(RVA rva);
    internal Section GetSectionAtVirtualAddress(RVA rva);
    public BinaryReader GetReaderAtVirtualAddress(RVA rva);
    public void AddDebugHeader();
    internal void SetFileInfo(FileInfo file);
    public sealed virtual void Accept(IBinaryVisitor visitor);
    private static void AcceptIfNotNull(IBinaryVisitable visitable, IBinaryVisitor visitor);
    public static Image CreateImage();
    public static Image GetImage(string file);
    public static Image GetImage(Byte[] image);
    public static Image GetImage(Stream stream);
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.Binary.ImageCharacteristics : Enum {
    public ushort value__;
    public static ImageCharacteristics RelocsStripped;
    public static ImageCharacteristics ExecutableImage;
    public static ImageCharacteristics LineNumsStripped;
    public static ImageCharacteristics LocalSymsStripped;
    public static ImageCharacteristics AggressiveWSTrim;
    public static ImageCharacteristics LargeAddressAware;
    public static ImageCharacteristics ReservedForFutureUse;
    public static ImageCharacteristics BytesReversedLo;
    public static ImageCharacteristics _32BitsMachine;
    public static ImageCharacteristics DebugStripped;
    public static ImageCharacteristics RemovableRunFromSwap;
    public static ImageCharacteristics NetRunFromSwap;
    public static ImageCharacteristics System;
    public static ImageCharacteristics Dll;
    public static ImageCharacteristics UPSystemOnly;
    public static ImageCharacteristics BytesReversedHI;
    public static ImageCharacteristics __flags;
    public static ImageCharacteristics CILOnlyDll;
    public static ImageCharacteristics CILOnlyExe;
}
internal class CilStrip.Mono.Cecil.Binary.ImageFormatException : Exception {
    internal ImageFormatException(string message);
    internal ImageFormatException(string message, String[] parameters);
    internal ImageFormatException(string message, Exception inner);
}
internal class CilStrip.Mono.Cecil.Binary.ImageInitializer : BaseImageVisitor {
    private Image m_image;
    private MetadataInitializer m_mdinit;
    public Image Image { get; }
    public MetadataInitializer Metadata { get; }
    public ImageInitializer(Image image);
    public Image get_Image();
    public MetadataInitializer get_Metadata();
    public virtual void VisitDOSHeader(DOSHeader header);
    public virtual void VisitPEOptionalHeader(PEOptionalHeader header);
    public virtual void VisitPEFileHeader(PEFileHeader header);
    public virtual void VisitNTSpecificFieldsHeader(NTSpecificFieldsHeader header);
    public virtual void VisitStandardFieldsHeader(StandardFieldsHeader header);
    public virtual void VisitDataDirectoriesHeader(DataDirectoriesHeader header);
    public virtual void VisitSectionCollection(SectionCollection coll);
    public virtual void VisitSection(Section sect);
    public virtual void VisitDebugHeader(DebugHeader dh);
    public virtual void VisitCLIHeader(CLIHeader header);
    public virtual void VisitImportTable(ImportTable it);
    public virtual void VisitHintNameTable(HintNameTable hnt);
    public static UInt32 TimeDateStampFromEpoch();
}
internal class CilStrip.Mono.Cecil.Binary.ImageReader : BaseImageVisitor {
    private MetadataReader m_mdReader;
    private BinaryReader m_binaryReader;
    private Image m_image;
    public MetadataReader MetadataReader { get; }
    public Image Image { get; }
    private ImageReader(Image img, BinaryReader reader);
    public MetadataReader get_MetadataReader();
    public Image get_Image();
    private static ImageReader Read(Image img, Stream stream);
    public static ImageReader Read(string file);
    public static ImageReader Read(Byte[] image);
    public static ImageReader Read(Stream stream);
    public BinaryReader GetReader();
    public virtual void VisitImage(Image img);
    private void SetPositionToAddress(RVA address);
    public virtual void VisitDOSHeader(DOSHeader header);
    public virtual void VisitPEFileHeader(PEFileHeader header);
    private ulong ReadIntOrLong();
    private RVA ReadRVA();
    private DataDirectory ReadDataDirectory();
    public virtual void VisitNTSpecificFieldsHeader(NTSpecificFieldsHeader header);
    public virtual void VisitStandardFieldsHeader(StandardFieldsHeader header);
    public virtual void VisitDataDirectoriesHeader(DataDirectoriesHeader header);
    public virtual void VisitSectionCollection(SectionCollection coll);
    public virtual void VisitSection(Section sect);
    public virtual void VisitImportAddressTable(ImportAddressTable iat);
    public virtual void VisitCLIHeader(CLIHeader header);
    public virtual void VisitDebugHeader(DebugHeader header);
    private string ReadZeroTerminatedString();
    public virtual void VisitImportTable(ImportTable it);
    public virtual void VisitImportLookupTable(ImportLookupTable ilt);
    public virtual void VisitHintNameTable(HintNameTable hnt);
    public virtual void VisitExportTable(ExportTable et);
    private string ReadFunctionName(ExportTable et, int index);
    private UInt16[] ReadArrayOfUInt16(RVA position, UInt32 length);
    private RVA[] ReadArrayOfRVA(RVA position, UInt32 length);
    public virtual void TerminateImage(Image img);
}
internal class CilStrip.Mono.Cecil.Binary.ImageWriter : BaseImageVisitor {
    private Image m_img;
    private AssemblyKind m_kind;
    private MetadataWriter m_mdWriter;
    private BinaryWriter m_binaryWriter;
    private Section m_textSect;
    private MemoryBinaryWriter m_textWriter;
    private Section m_relocSect;
    private MemoryBinaryWriter m_relocWriter;
    private Section m_rsrcSect;
    private MemoryBinaryWriter m_rsrcWriter;
    public ImageWriter(MetadataWriter writer, AssemblyKind kind, BinaryWriter bw);
    public Image GetImage();
    public MemoryBinaryWriter GetTextWriter();
    public UInt32 GetAligned(UInt32 integer, UInt32 alignWith);
    public void Initialize();
    public virtual void VisitDOSHeader(DOSHeader header);
    public virtual void VisitPEFileHeader(PEFileHeader header);
    public virtual void VisitNTSpecificFieldsHeader(NTSpecificFieldsHeader header);
    public virtual void VisitStandardFieldsHeader(StandardFieldsHeader header);
    private void WriteIntOrLong(ulong value);
    public virtual void VisitDataDirectoriesHeader(DataDirectoriesHeader header);
    public virtual void VisitSection(Section sect);
    public virtual void VisitImportAddressTable(ImportAddressTable iat);
    public virtual void VisitCLIHeader(CLIHeader header);
    public virtual void VisitDebugHeader(DebugHeader header);
    public virtual void VisitImportTable(ImportTable it);
    public virtual void VisitImportLookupTable(ImportLookupTable ilt);
    public virtual void VisitHintNameTable(HintNameTable hnt);
    public virtual void TerminateImage(Image img);
    private void WriteSection(Section sect, MemoryBinaryWriter sectWriter);
}
internal class CilStrip.Mono.Cecil.Binary.ImportAddressTable : object {
    public RVA HintNameTableRVA;
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Binary.ImportLookupTable : object {
    public RVA HintNameRVA;
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Binary.ImportTable : object {
    public RVA ImportLookupTable;
    public UInt32 DateTimeStamp;
    public UInt32 ForwardChain;
    public RVA Name;
    public RVA ImportAddressTable;
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Binary.MemoryBinaryWriter : BinaryWriter {
    public MemoryStream MemoryStream { get; }
    public MemoryBinaryWriter(Encoding enc);
    public MemoryStream get_MemoryStream();
    public void Empty();
    public void Write(MemoryBinaryWriter writer);
    public Byte[] ToArray();
    public void QuadAlign();
}
internal class CilStrip.Mono.Cecil.Binary.PEFileHeader : object {
    public ushort Machine;
    public ushort NumberOfSections;
    public UInt32 TimeDateStamp;
    public UInt32 PointerToSymbolTable;
    public UInt32 NumberOfSymbols;
    public ushort OptionalHeaderSize;
    public ImageCharacteristics Characteristics;
    public sealed virtual void SetDefaultValues();
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Binary.PEOptionalHeader : object {
    public StandardFieldsHeader StandardFields;
    public NTSpecificFieldsHeader NTSpecificFields;
    public DataDirectoriesHeader DataDirectories;
    public sealed virtual void SetDefaultValues();
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Binary.ResourceDataEntry : ResourceNode {
    public RVA Data;
    public UInt32 Size;
    public UInt32 Codepage;
    public UInt32 Reserved;
    public Byte[] ResourceData;
    public ResourceDataEntry(int offset);
}
internal class CilStrip.Mono.Cecil.Binary.ResourceDirectoryEntry : ResourceNode {
    private bool m_idByName;
    public int ID;
    public ResourceDirectoryString Name;
    public ResourceNode Child;
    public bool IdentifiedByName { get; }
    public ResourceDirectoryEntry(ResourceDirectoryString name);
    public ResourceDirectoryEntry(ResourceDirectoryString name, int offset);
    public ResourceDirectoryEntry(int id);
    public ResourceDirectoryEntry(int id, int offset);
    public bool get_IdentifiedByName();
}
internal class CilStrip.Mono.Cecil.Binary.ResourceDirectoryString : ResourceNode {
    public string String;
    public ResourceDirectoryString(string str);
    public ResourceDirectoryString(string str, int offset);
}
internal class CilStrip.Mono.Cecil.Binary.ResourceDirectoryTable : ResourceNode {
    private ArrayList m_entries;
    public UInt32 Characteristics;
    public UInt32 TimeDateStamp;
    public ushort MajorVersion;
    public ushort MinorVersion;
    public IList Entries { get; }
    public ResourceDirectoryTable(int offset);
    public IList get_Entries();
}
internal abstract class CilStrip.Mono.Cecil.Binary.ResourceNode : object {
    public int Offset;
    internal ResourceNode(int offset);
}
internal class CilStrip.Mono.Cecil.Binary.ResourceReader : object {
    private Image m_img;
    private Section m_rsrc;
    private BinaryReader m_reader;
    public ResourceReader(Image img);
    public ResourceDirectoryTable Read();
    private Section GetResourceSection();
    private int GetOffset();
    private ResourceDirectoryTable ReadDirectoryTable();
    private ResourceDirectoryEntry ReadDirectoryEntry();
    private ResourceDirectoryString ReadDirectoryString(int offset);
    private ResourceNode ReadDataEntry();
}
internal class CilStrip.Mono.Cecil.Binary.ResourceWriter : object {
    private Image m_img;
    private Section m_rsrc;
    private MemoryBinaryWriter m_writer;
    private ArrayList m_dataEntries;
    private ArrayList m_stringEntries;
    private long m_pos;
    public ResourceWriter(Image img, Section rsrc, MemoryBinaryWriter writer);
    public void Write();
    public void Patch();
    private void ComputeOffset(ResourceDirectoryTable root);
    private void WriteResourceDirectoryTable(ResourceDirectoryTable rdt);
    private ResourceDirectoryEntry[] GetEntries(ResourceDirectoryTable rdt, bool identifiedByName);
    private void WriteResourceDirectoryEntry(ResourceDirectoryEntry rde);
    private void WriteResourceDataEntry(ResourceDataEntry rde);
    private void WriteResourceDirectoryString(ResourceDirectoryString name);
    private void GotoOffset(int offset);
    private void RestoreOffset();
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.Binary.RuntimeImage : Enum {
    public UInt32 value__;
    public static RuntimeImage ILOnly;
    public static RuntimeImage F32BitsRequired;
    public static RuntimeImage StrongNameSigned;
    public static RuntimeImage TrackDebugData;
}
internal class CilStrip.Mono.Cecil.Binary.RVA : ValueType {
    public static RVA Zero;
    private UInt32 m_rva;
    public UInt32 Value { get; public set; }
    public RVA(UInt32 rva);
    private static RVA();
    public UInt32 get_Value();
    public void set_Value(UInt32 value);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    public virtual string ToString();
    public static bool op_Equality(RVA one, RVA other);
    public static bool op_Inequality(RVA one, RVA other);
    public static bool op_LessThan(RVA one, RVA other);
    public static bool op_GreaterThan(RVA one, RVA other);
    public static bool op_LessThanOrEqual(RVA one, RVA other);
    public static bool op_GreaterThanOrEqual(RVA one, RVA other);
    public static RVA op_Addition(RVA rva, UInt32 x);
    public static RVA op_Subtraction(RVA rva, UInt32 x);
    public static RVA op_Implicit(UInt32 val);
    public static UInt32 op_Implicit(RVA rva);
}
internal class CilStrip.Mono.Cecil.Binary.Section : object {
    public static string Text;
    public static string Resources;
    public static string Relocs;
    public static string SData;
    public UInt32 VirtualSize;
    public RVA VirtualAddress;
    public UInt32 SizeOfRawData;
    public RVA PointerToRawData;
    public RVA PointerToRelocations;
    public RVA PointerToLineNumbers;
    public ushort NumberOfRelocations;
    public ushort NumberOfLineNumbers;
    public SectionCharacteristics Characteristics;
    public string Name;
    public Byte[] Data;
    public sealed virtual void SetDefaultValues();
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.Binary.SectionCharacteristics : Enum {
    public UInt32 value__;
    public static SectionCharacteristics TypeNoPad;
    public static SectionCharacteristics ContainsCode;
    public static SectionCharacteristics ContainsInitializedData;
    public static SectionCharacteristics ContainsUninitializedData;
    public static SectionCharacteristics LnkOther;
    public static SectionCharacteristics LnkInfo;
    public static SectionCharacteristics LnkRemove;
    public static SectionCharacteristics LnkCOMDAT;
    public static SectionCharacteristics GPRel;
    public static SectionCharacteristics MemPurgeable;
    public static SectionCharacteristics MemLocked;
    public static SectionCharacteristics MemPreload;
    public static SectionCharacteristics Align1Bytes;
    public static SectionCharacteristics Align2Bytes;
    public static SectionCharacteristics Align4Bytes;
    public static SectionCharacteristics Align8Bytes;
    public static SectionCharacteristics Align16Bytes;
    public static SectionCharacteristics Align32Bytes;
    public static SectionCharacteristics Align64Bytes;
    public static SectionCharacteristics Align128Bytes;
    public static SectionCharacteristics Align256Bytes;
    public static SectionCharacteristics Align512Bytes;
    public static SectionCharacteristics Align1024Bytes;
    public static SectionCharacteristics Align2048Bytes;
    public static SectionCharacteristics Align4096Bytes;
    public static SectionCharacteristics Align8192Bytes;
    public static SectionCharacteristics LnkNRelocOvfl;
    public static SectionCharacteristics MemDiscardable;
    public static SectionCharacteristics MemNotCached;
    public static SectionCharacteristics MemNotPaged;
    public static SectionCharacteristics MemShared;
    public static SectionCharacteristics MemExecute;
    public static SectionCharacteristics MemoryRead;
    public static SectionCharacteristics MemoryWrite;
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Binary.SectionCollection : object {
    private IList m_items;
    public Section Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public Section get_Item(int index);
    public void set_Item(int index, Section value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    internal void Add(Section value);
    internal void Clear();
    public bool Contains(Section value);
    public int IndexOf(Section value);
    internal void Insert(int index, Section value);
    internal void Remove(Section value);
    internal void RemoveAt(int index);
    public sealed virtual void CopyTo(Array ary, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void Accept(IBinaryVisitor visitor);
}
internal enum CilStrip.Mono.Cecil.Binary.SubSystem : Enum {
    public ushort value__;
    public static SubSystem Unknown;
    public static SubSystem Native;
    public static SubSystem WindowsGui;
    public static SubSystem WindowsCui;
    public static SubSystem PosixCui;
    public static SubSystem WindowsCeGui;
    public static SubSystem EfiApplication;
    public static SubSystem EfiBootServiceDriver;
    public static SubSystem EfiRuntimeDriver;
    public static SubSystem EfiRom;
    public static SubSystem Xbox;
    public static SubSystem NexusAgent;
}
internal class CilStrip.Mono.Cecil.CallSite : object {
    private MethodReference m_function;
    public bool HasThis { get; public set; }
    public bool ExplicitThis { get; public set; }
    public MethodCallingConvention CallingConvention { get; public set; }
    public bool HasParameters { get; }
    public ParameterDefinitionCollection Parameters { get; }
    public MethodReturnType ReturnType { get; public set; }
    public MetadataToken MetadataToken { get; public set; }
    private IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.Annotations { get; }
    public CallSite(bool hasThis, bool explicitThis, MethodCallingConvention callConv, MethodReturnType retType);
    public sealed virtual bool get_HasThis();
    public sealed virtual void set_HasThis(bool value);
    public sealed virtual bool get_ExplicitThis();
    public sealed virtual void set_ExplicitThis(bool value);
    public sealed virtual MethodCallingConvention get_CallingConvention();
    public sealed virtual void set_CallingConvention(MethodCallingConvention value);
    public sealed virtual bool get_HasParameters();
    public sealed virtual ParameterDefinitionCollection get_Parameters();
    public sealed virtual MethodReturnType get_ReturnType();
    public void set_ReturnType(MethodReturnType value);
    public sealed virtual MetadataToken get_MetadataToken();
    public sealed virtual void set_MetadataToken(MetadataToken value);
    private sealed virtual override IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.get_Annotations();
    public sealed virtual int GetSentinel();
    public virtual string ToString();
}
internal abstract class CilStrip.Mono.Cecil.Cil.BaseCodeVisitor : object {
    public virtual void VisitMethodBody(MethodBody body);
    public virtual void VisitInstructionCollection(InstructionCollection instructions);
    public virtual void VisitInstruction(Instruction instr);
    public virtual void VisitExceptionHandlerCollection(ExceptionHandlerCollection seh);
    public virtual void VisitExceptionHandler(ExceptionHandler eh);
    public virtual void VisitVariableDefinitionCollection(VariableDefinitionCollection variables);
    public virtual void VisitVariableDefinition(VariableDefinition var);
    public virtual void VisitScopeCollection(ScopeCollection scopes);
    public virtual void VisitScope(Scope s);
    public virtual void TerminateMethodBody(MethodBody body);
}
internal class CilStrip.Mono.Cecil.Cil.CilWorker : object {
    private MethodBody m_mbody;
    private InstructionCollection m_instrs;
    internal CilWorker(MethodBody body);
    public MethodBody GetBody();
    public Instruction Create(OpCode opcode);
    public Instruction Create(OpCode opcode, TypeReference type);
    public Instruction Create(OpCode opcode, CallSite site);
    public Instruction Create(OpCode opcode, MethodReference method);
    public Instruction Create(OpCode opcode, FieldReference field);
    public Instruction Create(OpCode opcode, string str);
    public Instruction Create(OpCode opcode, sbyte b);
    public Instruction Create(OpCode opcode, byte b);
    public Instruction Create(OpCode opcode, int i);
    public Instruction Create(OpCode opcode, long l);
    public Instruction Create(OpCode opcode, float f);
    public Instruction Create(OpCode opcode, double d);
    public Instruction Create(OpCode opcode, Instruction label);
    public Instruction Create(OpCode opcode, Instruction[] labels);
    public Instruction Create(OpCode opcode, VariableDefinition var);
    public Instruction Create(OpCode opcode, ParameterDefinition param);
    private static Instruction FinalCreate(OpCode opcode);
    private static Instruction FinalCreate(OpCode opcode, object operand);
    public Instruction Emit(OpCode opcode);
    public Instruction Emit(OpCode opcode, TypeReference type);
    public Instruction Emit(OpCode opcode, MethodReference meth);
    public Instruction Emit(OpCode opcode, CallSite site);
    public Instruction Emit(OpCode opcode, FieldReference field);
    public Instruction Emit(OpCode opcode, string str);
    public Instruction Emit(OpCode opcode, byte b);
    public Instruction Emit(OpCode opcode, sbyte b);
    public Instruction Emit(OpCode opcode, int i);
    public Instruction Emit(OpCode opcode, long l);
    public Instruction Emit(OpCode opcode, float f);
    public Instruction Emit(OpCode opcode, double d);
    public Instruction Emit(OpCode opcode, Instruction target);
    public Instruction Emit(OpCode opcode, Instruction[] targets);
    public Instruction Emit(OpCode opcode, VariableDefinition var);
    public Instruction Emit(OpCode opcode, ParameterDefinition param);
    public void InsertBefore(Instruction target, Instruction instr);
    public void InsertAfter(Instruction target, Instruction instr);
    public void Append(Instruction instr);
    public void Replace(Instruction old, Instruction instr);
    public void Remove(Instruction instr);
}
internal enum CilStrip.Mono.Cecil.Cil.Code : Enum {
    public int value__;
    public static Code Nop;
    public static Code Break;
    public static Code Ldarg_0;
    public static Code Ldarg_1;
    public static Code Ldarg_2;
    public static Code Ldarg_3;
    public static Code Ldloc_0;
    public static Code Ldloc_1;
    public static Code Ldloc_2;
    public static Code Ldloc_3;
    public static Code Stloc_0;
    public static Code Stloc_1;
    public static Code Stloc_2;
    public static Code Stloc_3;
    public static Code Ldarg_S;
    public static Code Ldarga_S;
    public static Code Starg_S;
    public static Code Ldloc_S;
    public static Code Ldloca_S;
    public static Code Stloc_S;
    public static Code Ldnull;
    public static Code Ldc_I4_M1;
    public static Code Ldc_I4_0;
    public static Code Ldc_I4_1;
    public static Code Ldc_I4_2;
    public static Code Ldc_I4_3;
    public static Code Ldc_I4_4;
    public static Code Ldc_I4_5;
    public static Code Ldc_I4_6;
    public static Code Ldc_I4_7;
    public static Code Ldc_I4_8;
    public static Code Ldc_I4_S;
    public static Code Ldc_I4;
    public static Code Ldc_I8;
    public static Code Ldc_R4;
    public static Code Ldc_R8;
    public static Code Dup;
    public static Code Pop;
    public static Code Jmp;
    public static Code Call;
    public static Code Calli;
    public static Code Ret;
    public static Code Br_S;
    public static Code Brfalse_S;
    public static Code Brtrue_S;
    public static Code Beq_S;
    public static Code Bge_S;
    public static Code Bgt_S;
    public static Code Ble_S;
    public static Code Blt_S;
    public static Code Bne_Un_S;
    public static Code Bge_Un_S;
    public static Code Bgt_Un_S;
    public static Code Ble_Un_S;
    public static Code Blt_Un_S;
    public static Code Br;
    public static Code Brfalse;
    public static Code Brtrue;
    public static Code Beq;
    public static Code Bge;
    public static Code Bgt;
    public static Code Ble;
    public static Code Blt;
    public static Code Bne_Un;
    public static Code Bge_Un;
    public static Code Bgt_Un;
    public static Code Ble_Un;
    public static Code Blt_Un;
    public static Code Switch;
    public static Code Ldind_I1;
    public static Code Ldind_U1;
    public static Code Ldind_I2;
    public static Code Ldind_U2;
    public static Code Ldind_I4;
    public static Code Ldind_U4;
    public static Code Ldind_I8;
    public static Code Ldind_I;
    public static Code Ldind_R4;
    public static Code Ldind_R8;
    public static Code Ldind_Ref;
    public static Code Stind_Ref;
    public static Code Stind_I1;
    public static Code Stind_I2;
    public static Code Stind_I4;
    public static Code Stind_I8;
    public static Code Stind_R4;
    public static Code Stind_R8;
    public static Code Add;
    public static Code Sub;
    public static Code Mul;
    public static Code Div;
    public static Code Div_Un;
    public static Code Rem;
    public static Code Rem_Un;
    public static Code And;
    public static Code Or;
    public static Code Xor;
    public static Code Shl;
    public static Code Shr;
    public static Code Shr_Un;
    public static Code Neg;
    public static Code Not;
    public static Code Conv_I1;
    public static Code Conv_I2;
    public static Code Conv_I4;
    public static Code Conv_I8;
    public static Code Conv_R4;
    public static Code Conv_R8;
    public static Code Conv_U4;
    public static Code Conv_U8;
    public static Code Callvirt;
    public static Code Cpobj;
    public static Code Ldobj;
    public static Code Ldstr;
    public static Code Newobj;
    public static Code Castclass;
    public static Code Isinst;
    public static Code Conv_R_Un;
    public static Code Unbox;
    public static Code Throw;
    public static Code Ldfld;
    public static Code Ldflda;
    public static Code Stfld;
    public static Code Ldsfld;
    public static Code Ldsflda;
    public static Code Stsfld;
    public static Code Stobj;
    public static Code Conv_Ovf_I1_Un;
    public static Code Conv_Ovf_I2_Un;
    public static Code Conv_Ovf_I4_Un;
    public static Code Conv_Ovf_I8_Un;
    public static Code Conv_Ovf_U1_Un;
    public static Code Conv_Ovf_U2_Un;
    public static Code Conv_Ovf_U4_Un;
    public static Code Conv_Ovf_U8_Un;
    public static Code Conv_Ovf_I_Un;
    public static Code Conv_Ovf_U_Un;
    public static Code Box;
    public static Code Newarr;
    public static Code Ldlen;
    public static Code Ldelema;
    public static Code Ldelem_I1;
    public static Code Ldelem_U1;
    public static Code Ldelem_I2;
    public static Code Ldelem_U2;
    public static Code Ldelem_I4;
    public static Code Ldelem_U4;
    public static Code Ldelem_I8;
    public static Code Ldelem_I;
    public static Code Ldelem_R4;
    public static Code Ldelem_R8;
    public static Code Ldelem_Ref;
    public static Code Stelem_I;
    public static Code Stelem_I1;
    public static Code Stelem_I2;
    public static Code Stelem_I4;
    public static Code Stelem_I8;
    public static Code Stelem_R4;
    public static Code Stelem_R8;
    public static Code Stelem_Ref;
    public static Code Ldelem_Any;
    public static Code Stelem_Any;
    public static Code Unbox_Any;
    public static Code Conv_Ovf_I1;
    public static Code Conv_Ovf_U1;
    public static Code Conv_Ovf_I2;
    public static Code Conv_Ovf_U2;
    public static Code Conv_Ovf_I4;
    public static Code Conv_Ovf_U4;
    public static Code Conv_Ovf_I8;
    public static Code Conv_Ovf_U8;
    public static Code Refanyval;
    public static Code Ckfinite;
    public static Code Mkrefany;
    public static Code Ldtoken;
    public static Code Conv_U2;
    public static Code Conv_U1;
    public static Code Conv_I;
    public static Code Conv_Ovf_I;
    public static Code Conv_Ovf_U;
    public static Code Add_Ovf;
    public static Code Add_Ovf_Un;
    public static Code Mul_Ovf;
    public static Code Mul_Ovf_Un;
    public static Code Sub_Ovf;
    public static Code Sub_Ovf_Un;
    public static Code Endfinally;
    public static Code Leave;
    public static Code Leave_S;
    public static Code Stind_I;
    public static Code Conv_U;
    public static Code Arglist;
    public static Code Ceq;
    public static Code Cgt;
    public static Code Cgt_Un;
    public static Code Clt;
    public static Code Clt_Un;
    public static Code Ldftn;
    public static Code Ldvirtftn;
    public static Code Ldarg;
    public static Code Ldarga;
    public static Code Starg;
    public static Code Ldloc;
    public static Code Ldloca;
    public static Code Stloc;
    public static Code Localloc;
    public static Code Endfilter;
    public static Code Unaligned;
    public static Code Volatile;
    public static Code Tail;
    public static Code Initobj;
    public static Code Constrained;
    public static Code Cpblk;
    public static Code Initblk;
    public static Code No;
    public static Code Rethrow;
    public static Code Sizeof;
    public static Code Refanytype;
    public static Code Readonly;
}
internal class CilStrip.Mono.Cecil.Cil.CodeReader : BaseCodeVisitor {
    private ReflectionReader m_reflectReader;
    private MetadataRoot m_root;
    private IDictionary m_instructions;
    public CodeReader(ReflectionReader reflectReader);
    public virtual void VisitMethodBody(MethodBody body);
    public static UInt32 GetRid(int token);
    public static ParameterDefinition GetParameter(MethodBody body, int index);
    public static VariableDefinition GetVariable(MethodBody body, int index);
    private void ReadCilBody(MethodBody body, BinaryReader br);
    private Instruction GetInstruction(MethodBody body, int offset);
    private void ReadSection(MethodBody body, BinaryReader br);
    private void ReadExceptionHandlerEnd(ExceptionHandler eh, BinaryReader br, MethodBody body);
    private CallSite GetCallSiteAt(int token, GenericContext context);
    public virtual void VisitVariableDefinitionCollection(VariableDefinitionCollection variables);
}
internal class CilStrip.Mono.Cecil.Cil.CodeWriter : BaseCodeVisitor {
    private ReflectionWriter m_reflectWriter;
    private MemoryBinaryWriter m_binaryWriter;
    private MemoryBinaryWriter m_codeWriter;
    private IDictionary m_localSigCache;
    private IDictionary m_standaloneSigCache;
    private IDictionary m_stackSizes;
    private bool stripped;
    public bool Stripped { get; public set; }
    public CodeWriter(ReflectionWriter reflectWriter, MemoryBinaryWriter writer);
    public bool get_Stripped();
    public void set_Stripped(bool value);
    public RVA WriteMethodBody(MethodDefinition meth);
    public virtual void VisitMethodBody(MethodBody body);
    private void WriteToken(MetadataToken token);
    private static int GetParameterIndex(MethodBody body, ParameterDefinition p);
    public virtual void VisitInstructionCollection(InstructionCollection instructions);
    private MetadataToken GetTypeToken(TypeReference type);
    private MetadataToken GetCallSiteToken(CallSite cs);
    private static int GetLength(Instruction start, Instruction end, InstructionCollection instructions);
    private static bool IsRangeFat(Instruction start, Instruction end, InstructionCollection instructions);
    private static bool IsFat(ExceptionHandlerCollection seh);
    private void WriteExceptionHandlerCollection(ExceptionHandlerCollection seh);
    private void WriteFatBlockSize(ExceptionHandlerCollection seh);
    private void WriteHandlerSpecific(ExceptionHandler eh);
    public virtual void VisitVariableDefinitionCollection(VariableDefinitionCollection variables);
    public virtual void TerminateMethodBody(MethodBody body);
    public LocalVariable GetLocalVariableSig(VariableDefinition var);
    public LocalVarSig GetLocalVarSig(VariableDefinitionCollection vars);
    private void ComputeMaxStack(InstructionCollection instructions);
    private static int GetPushDelta(Instruction instruction);
    private static int GetPopDelta(MethodDefinition current, Instruction instruction, int height);
    private static bool IsVoid(TypeReference type);
}
internal class CilStrip.Mono.Cecil.Cil.Document : object {
    private string m_url;
    private Guid m_type;
    private DocumentHashAlgorithm m_hashAlgorithm;
    private Guid m_language;
    private Guid m_languageVendor;
    private Byte[] m_hash;
    public string Url { get; public set; }
    public Guid Type { get; public set; }
    public DocumentHashAlgorithm HashAlgorithm { get; public set; }
    public Guid Language { get; public set; }
    public Guid LanguageVendor { get; public set; }
    public Byte[] Hash { get; public set; }
    public Document(string url);
    public string get_Url();
    public void set_Url(string value);
    public Guid get_Type();
    public void set_Type(Guid value);
    public DocumentHashAlgorithm get_HashAlgorithm();
    public void set_HashAlgorithm(DocumentHashAlgorithm value);
    public Guid get_Language();
    public void set_Language(Guid value);
    public Guid get_LanguageVendor();
    public void set_LanguageVendor(Guid value);
    public Byte[] get_Hash();
    public void set_Hash(Byte[] value);
}
internal enum CilStrip.Mono.Cecil.Cil.DocumentHashAlgorithm : Enum {
    public int value__;
    [GuidAttribute("0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0")]
public static DocumentHashAlgorithm None;
    [GuidAttribute("1080993376", "25807", "19586", "182", "240", "66", "212", "129", "114", "167", "153")]
public static DocumentHashAlgorithm MD5;
    [GuidAttribute("4279768812", "43614", "19728", "135", "247", "111", "73", "99", "131", "52", "96")]
public static DocumentHashAlgorithm SHA1;
}
internal abstract class CilStrip.Mono.Cecil.Cil.DocumentLanguage : object {
    public static Guid None;
    public static Guid C;
    public static Guid Cpp;
    public static Guid CSharp;
    public static Guid Basic;
    public static Guid Java;
    public static Guid Cobol;
    public static Guid Pascal;
    public static Guid CIL;
    public static Guid JScript;
    public static Guid SMC;
    public static Guid MCpp;
    private static DocumentLanguage();
}
internal abstract class CilStrip.Mono.Cecil.Cil.DocumentLanguageVendor : object {
    public static Guid Other;
    public static Guid Microsoft;
    private static DocumentLanguageVendor();
}
internal abstract class CilStrip.Mono.Cecil.Cil.DocumentType : object {
    public static Guid Other;
    public static Guid Text;
    private static DocumentType();
}
internal class CilStrip.Mono.Cecil.Cil.ExceptionHandler : object {
    private Instruction m_tryStart;
    private Instruction m_tryEnd;
    private Instruction m_filterStart;
    private Instruction m_filterEnd;
    private Instruction m_handlerStart;
    private Instruction m_handlerEnd;
    private TypeReference m_catchType;
    private ExceptionHandlerType m_type;
    public Instruction TryStart { get; public set; }
    public Instruction TryEnd { get; public set; }
    public Instruction FilterStart { get; public set; }
    public Instruction FilterEnd { get; public set; }
    public Instruction HandlerStart { get; public set; }
    public Instruction HandlerEnd { get; public set; }
    public TypeReference CatchType { get; public set; }
    public ExceptionHandlerType Type { get; public set; }
    public ExceptionHandler(ExceptionHandlerType type);
    public Instruction get_TryStart();
    public void set_TryStart(Instruction value);
    public Instruction get_TryEnd();
    public void set_TryEnd(Instruction value);
    public Instruction get_FilterStart();
    public void set_FilterStart(Instruction value);
    public Instruction get_FilterEnd();
    public void set_FilterEnd(Instruction value);
    public Instruction get_HandlerStart();
    public void set_HandlerStart(Instruction value);
    public Instruction get_HandlerEnd();
    public void set_HandlerEnd(Instruction value);
    public TypeReference get_CatchType();
    public void set_CatchType(TypeReference value);
    public ExceptionHandlerType get_Type();
    public void set_Type(ExceptionHandlerType value);
    public sealed virtual void Accept(ICodeVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Cil.ExceptionHandlerCollection : CollectionBase {
    private MethodBody m_container;
    public ExceptionHandler Item { get; public set; }
    public MethodBody Container { get; }
    public ExceptionHandlerCollection(MethodBody container);
    public ExceptionHandler get_Item(int index);
    public void set_Item(int index, ExceptionHandler value);
    public MethodBody get_Container();
    public void Add(ExceptionHandler value);
    public bool Contains(ExceptionHandler value);
    public int IndexOf(ExceptionHandler value);
    public void Insert(int index, ExceptionHandler value);
    public void Remove(ExceptionHandler value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(ICodeVisitor visitor);
}
internal enum CilStrip.Mono.Cecil.Cil.ExceptionHandlerType : Enum {
    public int value__;
    public static ExceptionHandlerType Catch;
    public static ExceptionHandlerType Filter;
    public static ExceptionHandlerType Finally;
    public static ExceptionHandlerType Fault;
}
internal enum CilStrip.Mono.Cecil.Cil.FlowControl : Enum {
    public int value__;
    public static FlowControl Branch;
    public static FlowControl Break;
    public static FlowControl Call;
    public static FlowControl Cond_Branch;
    public static FlowControl Meta;
    public static FlowControl Next;
    public static FlowControl Phi;
    public static FlowControl Return;
    public static FlowControl Throw;
}
[AttributeUsageAttribute("256")]
internal class CilStrip.Mono.Cecil.Cil.GuidAttribute : Attribute {
    private Guid m_guid;
    public Guid Guid { get; }
    public GuidAttribute(UInt32 a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
    public Guid get_Guid();
    public static int GetValueFromGuid(Guid id, Type enumeration);
    public static Guid GetGuidFromValue(int value, Type enumeration);
    private static GuidAttribute GetGuidAttribute(FieldInfo fi);
}
internal interface CilStrip.Mono.Cecil.Cil.ICodeVisitable {
    public abstract virtual void Accept(ICodeVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.Cil.ICodeVisitor {
    public abstract virtual void VisitMethodBody(MethodBody body);
    public abstract virtual void VisitInstructionCollection(InstructionCollection instructions);
    public abstract virtual void VisitInstruction(Instruction instr);
    public abstract virtual void VisitExceptionHandlerCollection(ExceptionHandlerCollection seh);
    public abstract virtual void VisitExceptionHandler(ExceptionHandler eh);
    public abstract virtual void VisitVariableDefinitionCollection(VariableDefinitionCollection variables);
    public abstract virtual void VisitVariableDefinition(VariableDefinition var);
    public abstract virtual void VisitScopeCollection(ScopeCollection scopes);
    public abstract virtual void VisitScope(Scope scope);
    public abstract virtual void TerminateMethodBody(MethodBody body);
}
internal class CilStrip.Mono.Cecil.Cil.Instruction : object {
    private int m_offset;
    private OpCode m_opCode;
    private object m_operand;
    private Instruction m_previous;
    private Instruction m_next;
    private SequencePoint m_sequencePoint;
    public int Offset { get; public set; }
    public OpCode OpCode { get; public set; }
    public object Operand { get; public set; }
    public Instruction Previous { get; public set; }
    public Instruction Next { get; public set; }
    public SequencePoint SequencePoint { get; public set; }
    internal Instruction(int offset, OpCode opCode, object operand);
    internal Instruction(int offset, OpCode opCode);
    internal Instruction(OpCode opCode, object operand);
    internal Instruction(OpCode opCode);
    public int get_Offset();
    public void set_Offset(int value);
    public OpCode get_OpCode();
    public void set_OpCode(OpCode value);
    public object get_Operand();
    public void set_Operand(object value);
    public Instruction get_Previous();
    public void set_Previous(Instruction value);
    public Instruction get_Next();
    public void set_Next(Instruction value);
    public SequencePoint get_SequencePoint();
    public void set_SequencePoint(SequencePoint value);
    public int GetSize();
    public sealed virtual void Accept(ICodeVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Cil.InstructionCollection : CollectionBase {
    private MethodBody m_container;
    public Instruction Outside;
    public Instruction Item { get; public set; }
    public MethodBody Container { get; }
    public InstructionCollection(MethodBody container);
    public Instruction get_Item(int index);
    public void set_Item(int index, Instruction value);
    public MethodBody get_Container();
    internal void Add(Instruction value);
    public bool Contains(Instruction value);
    public int IndexOf(Instruction value);
    internal void Insert(int index, Instruction value);
    internal void Remove(Instruction value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(ICodeVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.Cil.IScopeProvider {
    public ScopeCollection Scopes { get; }
    public abstract virtual ScopeCollection get_Scopes();
}
internal interface CilStrip.Mono.Cecil.Cil.ISymbolReader {
    public abstract virtual void Read(MethodBody body, IDictionary instructions);
}
internal interface CilStrip.Mono.Cecil.Cil.ISymbolStoreFactory {
    public abstract virtual ISymbolReader CreateReader(ModuleDefinition module, string assemblyFileName);
    public abstract virtual ISymbolWriter CreateWriter(ModuleDefinition module, string assemblyFileName);
}
internal interface CilStrip.Mono.Cecil.Cil.ISymbolWriter {
    public abstract virtual void Write(MethodBody body);
}
internal interface CilStrip.Mono.Cecil.Cil.IVariableDefinitionProvider {
    public VariableDefinitionCollection Variables { get; }
    public abstract virtual VariableDefinitionCollection get_Variables();
}
internal class CilStrip.Mono.Cecil.Cil.MethodBody : object {
    private MethodDefinition m_method;
    private int m_maxStack;
    private int m_codeSize;
    private bool m_initLocals;
    private int m_localVarToken;
    private InstructionCollection m_instructions;
    private ExceptionHandlerCollection m_exceptions;
    private VariableDefinitionCollection m_variables;
    private ScopeCollection m_scopes;
    private CilWorker m_cilWorker;
    public MethodDefinition Method { get; }
    public int MaxStack { get; public set; }
    public int CodeSize { get; public set; }
    public bool InitLocals { get; public set; }
    public int LocalVarToken { get; public set; }
    public CilWorker CilWorker { get; public set; }
    public InstructionCollection Instructions { get; }
    public bool HasExceptionHandlers { get; }
    public ExceptionHandlerCollection ExceptionHandlers { get; }
    public bool HasVariables { get; }
    public VariableDefinitionCollection Variables { get; }
    public bool HasScopes { get; }
    public ScopeCollection Scopes { get; }
    public MethodBody(MethodDefinition meth);
    public MethodDefinition get_Method();
    public int get_MaxStack();
    public void set_MaxStack(int value);
    public int get_CodeSize();
    public void set_CodeSize(int value);
    public bool get_InitLocals();
    public void set_InitLocals(bool value);
    public int get_LocalVarToken();
    public void set_LocalVarToken(int value);
    public CilWorker get_CilWorker();
    public void set_CilWorker(CilWorker value);
    public InstructionCollection get_Instructions();
    public bool get_HasExceptionHandlers();
    public ExceptionHandlerCollection get_ExceptionHandlers();
    public bool get_HasVariables();
    public sealed virtual VariableDefinitionCollection get_Variables();
    public bool get_HasScopes();
    public sealed virtual ScopeCollection get_Scopes();
    internal static Instruction GetInstruction(MethodBody oldBody, MethodBody newBody, Instruction i);
    internal static MethodBody Clone(MethodBody body, MethodDefinition parent, ImportContext context);
    public void Simplify();
    public void Optimize();
    private void OptimizeBranches();
    private static bool OptimizeBranch(Instruction instr);
    private void ComputeOffsets();
    private static void Modify(Instruction i, OpCode op, object operand);
    public sealed virtual void Accept(ICodeVisitor visitor);
}
internal enum CilStrip.Mono.Cecil.Cil.MethodDataSection : Enum {
    public ushort value__;
    public static MethodDataSection EHTable;
    public static MethodDataSection OptILTable;
    public static MethodDataSection FatFormat;
    public static MethodDataSection MoreSects;
}
internal enum CilStrip.Mono.Cecil.Cil.MethodHeader : Enum {
    public ushort value__;
    public static MethodHeader TinyFormat;
    public static MethodHeader FatFormat;
    public static MethodHeader MoreSects;
    public static MethodHeader InitLocals;
}
internal class CilStrip.Mono.Cecil.Cil.OpCode : ValueType {
    private short m_value;
    private byte m_code;
    private byte m_flowControl;
    private byte m_opCodeType;
    private byte m_operandType;
    private byte m_stackBehaviourPop;
    private byte m_stackBehaviourPush;
    public string Name { get; }
    public int Size { get; }
    public byte Op1 { get; }
    public byte Op2 { get; }
    public short Value { get; }
    public Code Code { get; }
    public FlowControl FlowControl { get; }
    public OpCodeType OpCodeType { get; }
    public OperandType OperandType { get; }
    public StackBehaviour StackBehaviourPop { get; }
    public StackBehaviour StackBehaviourPush { get; }
    internal OpCode(byte op1, byte op2, Code code, FlowControl flowControl, OpCodeType opCodeType, OperandType operandType, StackBehaviour pop, StackBehaviour push);
    public string get_Name();
    public int get_Size();
    public byte get_Op1();
    public byte get_Op2();
    public short get_Value();
    public Code get_Code();
    public FlowControl get_FlowControl();
    public OpCodeType get_OpCodeType();
    public OperandType get_OperandType();
    public StackBehaviour get_StackBehaviourPop();
    public StackBehaviour get_StackBehaviourPush();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public bool Equals(OpCode opcode);
    public static bool op_Equality(OpCode one, OpCode other);
    public static bool op_Inequality(OpCode one, OpCode other);
    public virtual string ToString();
}
internal class CilStrip.Mono.Cecil.Cil.OpCodeNames : object {
    internal static String[] names;
    private static OpCodeNames();
}
internal class CilStrip.Mono.Cecil.Cil.OpCodes : object {
    internal static OpCode[] OneByteOpCode;
    internal static OpCode[] TwoBytesOpCode;
    public static OpCode Nop;
    public static OpCode Break;
    public static OpCode Ldarg_0;
    public static OpCode Ldarg_1;
    public static OpCode Ldarg_2;
    public static OpCode Ldarg_3;
    public static OpCode Ldloc_0;
    public static OpCode Ldloc_1;
    public static OpCode Ldloc_2;
    public static OpCode Ldloc_3;
    public static OpCode Stloc_0;
    public static OpCode Stloc_1;
    public static OpCode Stloc_2;
    public static OpCode Stloc_3;
    public static OpCode Ldarg_S;
    public static OpCode Ldarga_S;
    public static OpCode Starg_S;
    public static OpCode Ldloc_S;
    public static OpCode Ldloca_S;
    public static OpCode Stloc_S;
    public static OpCode Ldnull;
    public static OpCode Ldc_I4_M1;
    public static OpCode Ldc_I4_0;
    public static OpCode Ldc_I4_1;
    public static OpCode Ldc_I4_2;
    public static OpCode Ldc_I4_3;
    public static OpCode Ldc_I4_4;
    public static OpCode Ldc_I4_5;
    public static OpCode Ldc_I4_6;
    public static OpCode Ldc_I4_7;
    public static OpCode Ldc_I4_8;
    public static OpCode Ldc_I4_S;
    public static OpCode Ldc_I4;
    public static OpCode Ldc_I8;
    public static OpCode Ldc_R4;
    public static OpCode Ldc_R8;
    public static OpCode Dup;
    public static OpCode Pop;
    public static OpCode Jmp;
    public static OpCode Call;
    public static OpCode Calli;
    public static OpCode Ret;
    public static OpCode Br_S;
    public static OpCode Brfalse_S;
    public static OpCode Brtrue_S;
    public static OpCode Beq_S;
    public static OpCode Bge_S;
    public static OpCode Bgt_S;
    public static OpCode Ble_S;
    public static OpCode Blt_S;
    public static OpCode Bne_Un_S;
    public static OpCode Bge_Un_S;
    public static OpCode Bgt_Un_S;
    public static OpCode Ble_Un_S;
    public static OpCode Blt_Un_S;
    public static OpCode Br;
    public static OpCode Brfalse;
    public static OpCode Brtrue;
    public static OpCode Beq;
    public static OpCode Bge;
    public static OpCode Bgt;
    public static OpCode Ble;
    public static OpCode Blt;
    public static OpCode Bne_Un;
    public static OpCode Bge_Un;
    public static OpCode Bgt_Un;
    public static OpCode Ble_Un;
    public static OpCode Blt_Un;
    public static OpCode Switch;
    public static OpCode Ldind_I1;
    public static OpCode Ldind_U1;
    public static OpCode Ldind_I2;
    public static OpCode Ldind_U2;
    public static OpCode Ldind_I4;
    public static OpCode Ldind_U4;
    public static OpCode Ldind_I8;
    public static OpCode Ldind_I;
    public static OpCode Ldind_R4;
    public static OpCode Ldind_R8;
    public static OpCode Ldind_Ref;
    public static OpCode Stind_Ref;
    public static OpCode Stind_I1;
    public static OpCode Stind_I2;
    public static OpCode Stind_I4;
    public static OpCode Stind_I8;
    public static OpCode Stind_R4;
    public static OpCode Stind_R8;
    public static OpCode Add;
    public static OpCode Sub;
    public static OpCode Mul;
    public static OpCode Div;
    public static OpCode Div_Un;
    public static OpCode Rem;
    public static OpCode Rem_Un;
    public static OpCode And;
    public static OpCode Or;
    public static OpCode Xor;
    public static OpCode Shl;
    public static OpCode Shr;
    public static OpCode Shr_Un;
    public static OpCode Neg;
    public static OpCode Not;
    public static OpCode Conv_I1;
    public static OpCode Conv_I2;
    public static OpCode Conv_I4;
    public static OpCode Conv_I8;
    public static OpCode Conv_R4;
    public static OpCode Conv_R8;
    public static OpCode Conv_U4;
    public static OpCode Conv_U8;
    public static OpCode Callvirt;
    public static OpCode Cpobj;
    public static OpCode Ldobj;
    public static OpCode Ldstr;
    public static OpCode Newobj;
    public static OpCode Castclass;
    public static OpCode Isinst;
    public static OpCode Conv_R_Un;
    public static OpCode Unbox;
    public static OpCode Throw;
    public static OpCode Ldfld;
    public static OpCode Ldflda;
    public static OpCode Stfld;
    public static OpCode Ldsfld;
    public static OpCode Ldsflda;
    public static OpCode Stsfld;
    public static OpCode Stobj;
    public static OpCode Conv_Ovf_I1_Un;
    public static OpCode Conv_Ovf_I2_Un;
    public static OpCode Conv_Ovf_I4_Un;
    public static OpCode Conv_Ovf_I8_Un;
    public static OpCode Conv_Ovf_U1_Un;
    public static OpCode Conv_Ovf_U2_Un;
    public static OpCode Conv_Ovf_U4_Un;
    public static OpCode Conv_Ovf_U8_Un;
    public static OpCode Conv_Ovf_I_Un;
    public static OpCode Conv_Ovf_U_Un;
    public static OpCode Box;
    public static OpCode Newarr;
    public static OpCode Ldlen;
    public static OpCode Ldelema;
    public static OpCode Ldelem_I1;
    public static OpCode Ldelem_U1;
    public static OpCode Ldelem_I2;
    public static OpCode Ldelem_U2;
    public static OpCode Ldelem_I4;
    public static OpCode Ldelem_U4;
    public static OpCode Ldelem_I8;
    public static OpCode Ldelem_I;
    public static OpCode Ldelem_R4;
    public static OpCode Ldelem_R8;
    public static OpCode Ldelem_Ref;
    public static OpCode Stelem_I;
    public static OpCode Stelem_I1;
    public static OpCode Stelem_I2;
    public static OpCode Stelem_I4;
    public static OpCode Stelem_I8;
    public static OpCode Stelem_R4;
    public static OpCode Stelem_R8;
    public static OpCode Stelem_Ref;
    public static OpCode Ldelem_Any;
    public static OpCode Stelem_Any;
    public static OpCode Unbox_Any;
    public static OpCode Conv_Ovf_I1;
    public static OpCode Conv_Ovf_U1;
    public static OpCode Conv_Ovf_I2;
    public static OpCode Conv_Ovf_U2;
    public static OpCode Conv_Ovf_I4;
    public static OpCode Conv_Ovf_U4;
    public static OpCode Conv_Ovf_I8;
    public static OpCode Conv_Ovf_U8;
    public static OpCode Refanyval;
    public static OpCode Ckfinite;
    public static OpCode Mkrefany;
    public static OpCode Ldtoken;
    public static OpCode Conv_U2;
    public static OpCode Conv_U1;
    public static OpCode Conv_I;
    public static OpCode Conv_Ovf_I;
    public static OpCode Conv_Ovf_U;
    public static OpCode Add_Ovf;
    public static OpCode Add_Ovf_Un;
    public static OpCode Mul_Ovf;
    public static OpCode Mul_Ovf_Un;
    public static OpCode Sub_Ovf;
    public static OpCode Sub_Ovf_Un;
    public static OpCode Endfinally;
    public static OpCode Leave;
    public static OpCode Leave_S;
    public static OpCode Stind_I;
    public static OpCode Conv_U;
    public static OpCode Arglist;
    public static OpCode Ceq;
    public static OpCode Cgt;
    public static OpCode Cgt_Un;
    public static OpCode Clt;
    public static OpCode Clt_Un;
    public static OpCode Ldftn;
    public static OpCode Ldvirtftn;
    public static OpCode Ldarg;
    public static OpCode Ldarga;
    public static OpCode Starg;
    public static OpCode Ldloc;
    public static OpCode Ldloca;
    public static OpCode Stloc;
    public static OpCode Localloc;
    public static OpCode Endfilter;
    public static OpCode Unaligned;
    public static OpCode Volatile;
    public static OpCode Tail;
    public static OpCode Initobj;
    public static OpCode Constrained;
    public static OpCode Cpblk;
    public static OpCode Initblk;
    public static OpCode No;
    public static OpCode Rethrow;
    public static OpCode Sizeof;
    public static OpCode Refanytype;
    public static OpCode Readonly;
    private static OpCodes();
    public static OpCode GetOpCode(Code code);
}
internal enum CilStrip.Mono.Cecil.Cil.OpCodeType : Enum {
    public int value__;
    public static OpCodeType Annotation;
    public static OpCodeType Macro;
    public static OpCodeType Nternal;
    public static OpCodeType Objmodel;
    public static OpCodeType Prefix;
    public static OpCodeType Primitive;
}
internal enum CilStrip.Mono.Cecil.Cil.OperandType : Enum {
    public int value__;
    public static OperandType InlineBrTarget;
    public static OperandType InlineField;
    public static OperandType InlineI;
    public static OperandType InlineI8;
    public static OperandType InlineMethod;
    public static OperandType InlineNone;
    public static OperandType InlinePhi;
    public static OperandType InlineR;
    public static OperandType InlineSig;
    public static OperandType InlineString;
    public static OperandType InlineSwitch;
    public static OperandType InlineTok;
    public static OperandType InlineType;
    public static OperandType InlineVar;
    public static OperandType InlineParam;
    public static OperandType ShortInlineBrTarget;
    public static OperandType ShortInlineI;
    public static OperandType ShortInlineR;
    public static OperandType ShortInlineVar;
    public static OperandType ShortInlineParam;
}
internal class CilStrip.Mono.Cecil.Cil.Scope : object {
    private Instruction m_start;
    private Instruction m_end;
    private Scope m_parent;
    private ScopeCollection m_scopes;
    private VariableDefinitionCollection m_variables;
    public Instruction Start { get; public set; }
    public Instruction End { get; public set; }
    public Scope Parent { get; public set; }
    public ScopeCollection Scopes { get; }
    public VariableDefinitionCollection Variables { get; }
    public Instruction get_Start();
    public void set_Start(Instruction value);
    public Instruction get_End();
    public void set_End(Instruction value);
    public Scope get_Parent();
    public void set_Parent(Scope value);
    public sealed virtual ScopeCollection get_Scopes();
    public sealed virtual VariableDefinitionCollection get_Variables();
    public sealed virtual void Accept(ICodeVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Cil.ScopeCollection : CollectionBase {
    private IScopeProvider m_container;
    public Scope Item { get; public set; }
    public IScopeProvider Container { get; }
    public ScopeCollection(IScopeProvider container);
    public Scope get_Item(int index);
    public void set_Item(int index, Scope value);
    public IScopeProvider get_Container();
    public void Add(Scope value);
    public bool Contains(Scope value);
    public int IndexOf(Scope value);
    public void Insert(int index, Scope value);
    public void Remove(Scope value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(ICodeVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Cil.SequencePoint : object {
    private Document m_document;
    private int m_startLine;
    private int m_startColumn;
    private int m_endLine;
    private int m_endColumn;
    public int StartLine { get; public set; }
    public int StartColumn { get; public set; }
    public int EndLine { get; public set; }
    public int EndColumn { get; public set; }
    public Document Document { get; public set; }
    public SequencePoint(Document document);
    public SequencePoint(Document doc, int startLine, int startCol, int endLine, int endCol);
    public int get_StartLine();
    public void set_StartLine(int value);
    public int get_StartColumn();
    public void set_StartColumn(int value);
    public int get_EndLine();
    public void set_EndLine(int value);
    public int get_EndColumn();
    public void set_EndColumn(int value);
    public Document get_Document();
    public void set_Document(Document value);
}
internal enum CilStrip.Mono.Cecil.Cil.StackBehaviour : Enum {
    public int value__;
    public static StackBehaviour Pop0;
    public static StackBehaviour Pop1;
    public static StackBehaviour Pop1_pop1;
    public static StackBehaviour Popi;
    public static StackBehaviour Popi_pop1;
    public static StackBehaviour Popi_popi;
    public static StackBehaviour Popi_popi8;
    public static StackBehaviour Popi_popi_popi;
    public static StackBehaviour Popi_popr4;
    public static StackBehaviour Popi_popr8;
    public static StackBehaviour Popref;
    public static StackBehaviour Popref_pop1;
    public static StackBehaviour Popref_popi;
    public static StackBehaviour Popref_popi_popi;
    public static StackBehaviour Popref_popi_popi8;
    public static StackBehaviour Popref_popi_popr4;
    public static StackBehaviour Popref_popi_popr8;
    public static StackBehaviour Popref_popi_popref;
    public static StackBehaviour PopAll;
    public static StackBehaviour Push0;
    public static StackBehaviour Push1;
    public static StackBehaviour Push1_push1;
    public static StackBehaviour Pushi;
    public static StackBehaviour Pushi8;
    public static StackBehaviour Pushr4;
    public static StackBehaviour Pushr8;
    public static StackBehaviour Pushref;
    public static StackBehaviour Varpop;
    public static StackBehaviour Varpush;
}
internal class CilStrip.Mono.Cecil.Cil.SymbolStoreHelper : object {
    private static ISymbolStoreFactory s_factory;
    public static ISymbolReader GetReader(ModuleDefinition module);
    public static ISymbolWriter GetWriter(ModuleDefinition module, string assemblyFileName);
    private static void InitFactory();
    private static string GetSymbolSupportType(String& assembly);
    private static string GetSymbolKind();
    private static bool OnMono();
}
internal class CilStrip.Mono.Cecil.Cil.VariableDefinition : VariableReference {
    private MethodDefinition m_method;
    public MethodDefinition Method { get; public set; }
    public VariableDefinition(TypeReference variableType);
    public VariableDefinition(string name, int index, MethodDefinition method, TypeReference variableType);
    public MethodDefinition get_Method();
    public void set_Method(MethodDefinition value);
    public virtual VariableDefinition Resolve();
    public virtual void Accept(ICodeVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Cil.VariableDefinitionCollection : CollectionBase {
    private IVariableDefinitionProvider m_container;
    public VariableDefinition Item { get; public set; }
    public IVariableDefinitionProvider Container { get; }
    public VariableDefinitionCollection(IVariableDefinitionProvider container);
    public VariableDefinition get_Item(int index);
    public void set_Item(int index, VariableDefinition value);
    public IVariableDefinitionProvider get_Container();
    public void Add(VariableDefinition value);
    public bool Contains(VariableDefinition value);
    public int IndexOf(VariableDefinition value);
    public void Insert(int index, VariableDefinition value);
    public void Remove(VariableDefinition value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(ICodeVisitor visitor);
}
internal abstract class CilStrip.Mono.Cecil.Cil.VariableReference : object {
    private string m_name;
    private int m_index;
    private TypeReference m_variableType;
    public string Name { get; public set; }
    public int Index { get; public set; }
    public TypeReference VariableType { get; public set; }
    public VariableReference(TypeReference variableType);
    public VariableReference(string name, int index, TypeReference variableType);
    public string get_Name();
    public void set_Name(string value);
    public int get_Index();
    public void set_Index(int value);
    public TypeReference get_VariableType();
    public void set_VariableType(TypeReference value);
    public abstract virtual VariableDefinition Resolve();
    public virtual string ToString();
    public abstract virtual void Accept(ICodeVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Constants : object {
    public static string Corlib;
    public static string ModuleType;
    public static string PrivateImplDetails;
    public static string Deleted;
    public static string Void;
    public static string Object;
    public static string String;
    public static string Boolean;
    public static string Char;
    public static string Single;
    public static string Double;
    public static string SByte;
    public static string Byte;
    public static string Int16;
    public static string UInt16;
    public static string Int32;
    public static string UInt32;
    public static string Int64;
    public static string UInt64;
    public static string IntPtr;
    public static string UIntPtr;
    public static string TypedReference;
    public static string Type;
    public static string ValueType;
    public static string Enum;
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.ConstraintCollection : CollectionBase {
    private GenericParameter m_container;
    public TypeReference Item { get; public set; }
    public GenericParameter Container { get; }
    public ConstraintCollection(GenericParameter container);
    public TypeReference get_Item(int index);
    public void set_Item(int index, TypeReference value);
    public GenericParameter get_Container();
    public void Add(TypeReference value);
    public bool Contains(TypeReference value);
    public int IndexOf(TypeReference value);
    public void Insert(int index, TypeReference value);
    public void Remove(TypeReference value);
    protected virtual void OnValidate(object o);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.ConstructorCollection : CollectionBase {
    private TypeDefinition m_container;
    public MethodDefinition Item { get; public set; }
    public TypeDefinition Container { get; }
    public ConstructorCollection(TypeDefinition container);
    public MethodDefinition get_Item(int index);
    public void set_Item(int index, MethodDefinition value);
    public TypeDefinition get_Container();
    public void Add(MethodDefinition value);
    public void Clear();
    public bool Contains(MethodDefinition value);
    public int IndexOf(MethodDefinition value);
    public void Insert(int index, MethodDefinition value);
    public void Remove(MethodDefinition value);
    public void RemoveAt(int index);
    protected virtual void OnValidate(object o);
    internal MethodDefinition GetConstructorInternal(bool isStatic, IList parameters);
    public MethodDefinition GetConstructor(bool isStatic, Type[] parameters);
    public MethodDefinition GetConstructor(bool isStatic, TypeReference[] parameters);
    public MethodDefinition GetConstructor(bool isStatic, ParameterDefinitionCollection parameters);
    private void Attach(MemberReference member);
    private void Detach(MemberReference member);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
internal class CilStrip.Mono.Cecil.CustomAttribute : object {
    private MethodReference m_ctor;
    private IList m_parameters;
    private IDictionary m_fields;
    private IDictionary m_properties;
    private IDictionary m_fieldTypes;
    private IDictionary m_propTypes;
    private IDictionary m_annotations;
    private bool m_resolved;
    private Byte[] m_blob;
    public MethodReference Constructor { get; public set; }
    public IList ConstructorParameters { get; }
    public IDictionary Fields { get; }
    public IDictionary Properties { get; }
    internal IDictionary FieldTypes { get; }
    internal IDictionary PropertyTypes { get; }
    public bool Resolved { get; public set; }
    public Byte[] Blob { get; public set; }
    private IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.Annotations { get; }
    public CustomAttribute(MethodReference ctor);
    public CustomAttribute(MethodReference ctor, Byte[] blob);
    public MethodReference get_Constructor();
    public void set_Constructor(MethodReference value);
    public IList get_ConstructorParameters();
    public IDictionary get_Fields();
    public IDictionary get_Properties();
    internal IDictionary get_FieldTypes();
    internal IDictionary get_PropertyTypes();
    public sealed virtual bool get_Resolved();
    public void set_Resolved(bool value);
    public sealed virtual Byte[] get_Blob();
    public void set_Blob(Byte[] value);
    private sealed virtual override IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.get_Annotations();
    public TypeReference GetFieldType(string fieldName);
    public TypeReference GetPropertyType(string propertyName);
    public void SetFieldType(string fieldName, TypeReference type);
    public void SetPropertyType(string propertyName, TypeReference type);
    public CustomAttribute Clone();
    private static void Clone(IDictionary original, IDictionary target);
    internal static CustomAttribute Clone(CustomAttribute custattr, ImportContext context);
    private void CopyTo(CustomAttribute target);
    public sealed virtual bool Resolve();
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.CustomAttributeCollection : CollectionBase {
    private ICustomAttributeProvider m_container;
    public CustomAttribute Item { get; public set; }
    public ICustomAttributeProvider Container { get; }
    public CustomAttributeCollection(ICustomAttributeProvider container);
    public CustomAttribute get_Item(int index);
    public void set_Item(int index, CustomAttribute value);
    public ICustomAttributeProvider get_Container();
    public void Add(CustomAttribute value);
    public bool Contains(CustomAttribute value);
    public int IndexOf(CustomAttribute value);
    public void Insert(int index, CustomAttribute value);
    public void Remove(CustomAttribute value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
internal class CilStrip.Mono.Cecil.CustomMarshalerSpec : MarshalSpec {
    private Guid m_guid;
    private string m_unmanagedType;
    private string m_managedType;
    private string m_cookie;
    public Guid Guid { get; public set; }
    public string UnmanagedType { get; public set; }
    public string ManagedType { get; public set; }
    public string Cookie { get; public set; }
    public CustomMarshalerSpec(IHasMarshalSpec container);
    public Guid get_Guid();
    public void set_Guid(Guid value);
    public string get_UnmanagedType();
    public void set_UnmanagedType(string value);
    public string get_ManagedType();
    public void set_ManagedType(string value);
    public string get_Cookie();
    public void set_Cookie(string value);
    public virtual MarshalSpec CloneInto(IHasMarshalSpec container);
}
internal class CilStrip.Mono.Cecil.DefaultAssemblyResolver : BaseAssemblyResolver {
    private IDictionary m_cache;
    public virtual AssemblyDefinition Resolve(AssemblyNameReference name);
    protected void RegisterAssembly(AssemblyDefinition assembly);
}
internal class CilStrip.Mono.Cecil.DefaultImporter : object {
    private ModuleDefinition m_module;
    public ModuleDefinition Module { get; }
    public DefaultImporter(ModuleDefinition module);
    public ModuleDefinition get_Module();
    public AssemblyNameReference ImportAssembly(AssemblyNameReference asm);
    private AssemblyNameReference GetAssemblyNameReference(AssemblyNameReference asm);
    private TypeSpecification GetTypeSpec(TypeSpecification original, ImportContext context);
    private static GenericParameter GetGenericParameter(GenericParameter gp, ImportContext context);
    private TypeReference AdjustReference(TypeReference type, TypeReference reference);
    public virtual TypeReference ImportTypeReference(TypeReference t, ImportContext context);
    public virtual FieldReference ImportFieldReference(FieldReference fr, ImportContext context);
    private MethodReference GetMethodSpec(MethodReference meth, ImportContext context);
    public virtual MethodReference ImportMethodReference(MethodReference mr, ImportContext context);
    private MemberReference GetMemberReference(MemberReference member);
}
internal class CilStrip.Mono.Cecil.EmbeddedResource : Resource {
    private Byte[] m_data;
    public Byte[] Data { get; public set; }
    public EmbeddedResource(string name, ManifestResourceAttributes flags);
    public EmbeddedResource(string name, ManifestResourceAttributes flags, Byte[] data);
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public virtual void Accept(IReflectionStructureVisitor visitor);
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.EventAttributes : Enum {
    public ushort value__;
    public static EventAttributes SpecialName;
    public static EventAttributes RTSpecialName;
}
internal class CilStrip.Mono.Cecil.EventDefinition : EventReference {
    private EventAttributes m_attributes;
    private CustomAttributeCollection m_customAttrs;
    private MethodDefinition m_addMeth;
    private MethodDefinition m_invMeth;
    private MethodDefinition m_remMeth;
    public EventAttributes Attributes { get; public set; }
    public MethodDefinition AddMethod { get; public set; }
    public MethodDefinition InvokeMethod { get; public set; }
    public MethodDefinition RemoveMethod { get; public set; }
    public bool HasCustomAttributes { get; }
    public CustomAttributeCollection CustomAttributes { get; }
    public bool IsSpecialName { get; public set; }
    public bool IsRuntimeSpecialName { get; public set; }
    public TypeDefinition DeclaringType { get; public set; }
    public EventDefinition(string name, TypeReference eventType, EventAttributes attrs);
    public EventAttributes get_Attributes();
    public void set_Attributes(EventAttributes value);
    public MethodDefinition get_AddMethod();
    public void set_AddMethod(MethodDefinition value);
    public MethodDefinition get_InvokeMethod();
    public void set_InvokeMethod(MethodDefinition value);
    public MethodDefinition get_RemoveMethod();
    public void set_RemoveMethod(MethodDefinition value);
    public sealed virtual bool get_HasCustomAttributes();
    public sealed virtual CustomAttributeCollection get_CustomAttributes();
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual void set_IsSpecialName(bool value);
    public sealed virtual bool get_IsRuntimeSpecialName();
    public sealed virtual void set_IsRuntimeSpecialName(bool value);
    public sealed virtual TypeDefinition get_DeclaringType();
    public sealed virtual void set_DeclaringType(TypeDefinition value);
    public virtual EventDefinition Resolve();
    public static MethodDefinition CreateAddMethod(EventDefinition evt);
    public static MethodDefinition CreateRemoveMethod(EventDefinition evt);
    public static MethodDefinition CreateInvokeMethod(EventDefinition evt);
    public EventDefinition Clone();
    internal static EventDefinition Clone(EventDefinition evt, ImportContext context);
    public virtual void Accept(IReflectionVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.EventDefinitionCollection : CollectionBase {
    private TypeDefinition m_container;
    public EventDefinition Item { get; public set; }
    public TypeDefinition Container { get; }
    public EventDefinitionCollection(TypeDefinition container);
    public EventDefinition get_Item(int index);
    public void set_Item(int index, EventDefinition value);
    public TypeDefinition get_Container();
    public void Add(EventDefinition value);
    public void Clear();
    public bool Contains(EventDefinition value);
    public int IndexOf(EventDefinition value);
    public void Insert(int index, EventDefinition value);
    public void Remove(EventDefinition value);
    public void RemoveAt(int index);
    protected virtual void OnValidate(object o);
    public EventDefinition GetEvent(string name);
    private void Attach(MemberReference member);
    private void Detach(MemberReference member);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
internal abstract class CilStrip.Mono.Cecil.EventReference : MemberReference {
    private TypeReference m_eventType;
    public TypeReference EventType { get; public set; }
    public EventReference(string name, TypeReference eventType);
    public TypeReference get_EventType();
    public void set_EventType(TypeReference value);
    public abstract virtual EventDefinition Resolve();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.ExternTypeCollection : NameObjectCollectionBase {
    private ModuleDefinition m_container;
    public TypeReference Item { get; public set; }
    public TypeReference Item { get; public set; }
    public ModuleDefinition Container { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public ExternTypeCollection(ModuleDefinition container);
    public TypeReference get_Item(int index);
    public void set_Item(int index, TypeReference value);
    public TypeReference get_Item(string fullName);
    public void set_Item(string fullName, TypeReference value);
    public ModuleDefinition get_Container();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public void Add(TypeReference value);
    public sealed virtual void Clear();
    public bool Contains(TypeReference value);
    public bool Contains(string fullName);
    public int IndexOf(TypeReference value);
    public void Remove(TypeReference value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void CopyTo(Array ary, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void Accept(IReflectionVisitor visitor);
    private void Check(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.FieldAttributes : Enum {
    public ushort value__;
    public static FieldAttributes FieldAccessMask;
    public static FieldAttributes Compilercontrolled;
    public static FieldAttributes Private;
    public static FieldAttributes FamANDAssem;
    public static FieldAttributes Assembly;
    public static FieldAttributes Family;
    public static FieldAttributes FamORAssem;
    public static FieldAttributes Public;
    public static FieldAttributes Static;
    public static FieldAttributes InitOnly;
    public static FieldAttributes Literal;
    public static FieldAttributes NotSerialized;
    public static FieldAttributes SpecialName;
    public static FieldAttributes PInvokeImpl;
    public static FieldAttributes RTSpecialName;
    public static FieldAttributes HasFieldMarshal;
    public static FieldAttributes HasDefault;
    public static FieldAttributes HasFieldRVA;
}
internal class CilStrip.Mono.Cecil.FieldDefinition : FieldReference {
    private FieldAttributes m_attributes;
    private CustomAttributeCollection m_customAttrs;
    private bool m_hasInfo;
    private UInt32 m_offset;
    private RVA m_rva;
    private Byte[] m_initVal;
    private bool m_hasConstant;
    private object m_const;
    private MarshalSpec m_marshalDesc;
    public bool HasLayoutInfo { get; }
    public UInt32 Offset { get; public set; }
    public RVA RVA { get; public set; }
    public Byte[] InitialValue { get; public set; }
    public FieldAttributes Attributes { get; public set; }
    public bool HasConstant { get; }
    public object Constant { get; public set; }
    public bool HasCustomAttributes { get; }
    public CustomAttributeCollection CustomAttributes { get; }
    public MarshalSpec MarshalSpec { get; public set; }
    public bool IsCompilerControlled { get; public set; }
    public bool IsPrivate { get; public set; }
    public bool IsFamilyAndAssembly { get; public set; }
    public bool IsAssembly { get; public set; }
    public bool IsFamily { get; public set; }
    public bool IsFamilyOrAssembly { get; public set; }
    public bool IsPublic { get; public set; }
    public bool IsStatic { get; public set; }
    public bool IsInitOnly { get; public set; }
    public bool IsLiteral { get; public set; }
    public bool IsNotSerialized { get; public set; }
    public bool IsSpecialName { get; public set; }
    public bool IsPInvokeImpl { get; public set; }
    public bool IsRuntimeSpecialName { get; public set; }
    public bool HasDefault { get; public set; }
    public TypeDefinition DeclaringType { get; public set; }
    public FieldDefinition(string name, TypeReference fieldType, FieldAttributes attrs);
    public bool get_HasLayoutInfo();
    public UInt32 get_Offset();
    public void set_Offset(UInt32 value);
    public RVA get_RVA();
    public void set_RVA(RVA value);
    public Byte[] get_InitialValue();
    public void set_InitialValue(Byte[] value);
    public FieldAttributes get_Attributes();
    public void set_Attributes(FieldAttributes value);
    public sealed virtual bool get_HasConstant();
    public sealed virtual object get_Constant();
    public sealed virtual void set_Constant(object value);
    public sealed virtual bool get_HasCustomAttributes();
    public sealed virtual CustomAttributeCollection get_CustomAttributes();
    public sealed virtual MarshalSpec get_MarshalSpec();
    public sealed virtual void set_MarshalSpec(MarshalSpec value);
    public bool get_IsCompilerControlled();
    public void set_IsCompilerControlled(bool value);
    public bool get_IsPrivate();
    public void set_IsPrivate(bool value);
    public bool get_IsFamilyAndAssembly();
    public void set_IsFamilyAndAssembly(bool value);
    public bool get_IsAssembly();
    public void set_IsAssembly(bool value);
    public bool get_IsFamily();
    public void set_IsFamily(bool value);
    public bool get_IsFamilyOrAssembly();
    public void set_IsFamilyOrAssembly(bool value);
    public bool get_IsPublic();
    public void set_IsPublic(bool value);
    public bool get_IsStatic();
    public void set_IsStatic(bool value);
    public bool get_IsInitOnly();
    public void set_IsInitOnly(bool value);
    public bool get_IsLiteral();
    public void set_IsLiteral(bool value);
    public bool get_IsNotSerialized();
    public void set_IsNotSerialized(bool value);
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual void set_IsSpecialName(bool value);
    public bool get_IsPInvokeImpl();
    public void set_IsPInvokeImpl(bool value);
    public sealed virtual bool get_IsRuntimeSpecialName();
    public sealed virtual void set_IsRuntimeSpecialName(bool value);
    public bool get_HasDefault();
    public void set_HasDefault(bool value);
    public sealed virtual TypeDefinition get_DeclaringType();
    public sealed virtual void set_DeclaringType(TypeDefinition value);
    public virtual FieldDefinition Resolve();
    public FieldDefinition Clone();
    internal static FieldDefinition Clone(FieldDefinition field, ImportContext context);
    public virtual void Accept(IReflectionVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.FieldDefinitionCollection : CollectionBase {
    private TypeDefinition m_container;
    public FieldDefinition Item { get; public set; }
    public TypeDefinition Container { get; }
    public FieldDefinitionCollection(TypeDefinition container);
    public FieldDefinition get_Item(int index);
    public void set_Item(int index, FieldDefinition value);
    public TypeDefinition get_Container();
    public void Add(FieldDefinition value);
    public void Clear();
    public bool Contains(FieldDefinition value);
    public int IndexOf(FieldDefinition value);
    public void Insert(int index, FieldDefinition value);
    public void Remove(FieldDefinition value);
    public void RemoveAt(int index);
    protected virtual void OnValidate(object o);
    public FieldDefinition GetField(string name);
    private void Attach(MemberReference member);
    private void Detach(MemberReference member);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
internal class CilStrip.Mono.Cecil.FieldReference : MemberReference {
    private TypeReference m_fieldType;
    public TypeReference FieldType { get; public set; }
    internal FieldReference(string name, TypeReference fieldType);
    public FieldReference(string name, TypeReference declaringType, TypeReference fieldType);
    public TypeReference get_FieldType();
    public void set_FieldType(TypeReference value);
    public virtual FieldDefinition Resolve();
    public virtual string ToString();
}
internal enum CilStrip.Mono.Cecil.FileAttributes : Enum {
    public UInt32 value__;
    public static FileAttributes ContainsMetaData;
    public static FileAttributes ContainsNoMetaData;
}
internal class CilStrip.Mono.Cecil.FixedArraySpec : MarshalSpec {
    private int m_numElem;
    private NativeType m_elemType;
    public int NumElem { get; public set; }
    public NativeType ElemType { get; public set; }
    public FixedArraySpec(IHasMarshalSpec container);
    public int get_NumElem();
    public void set_NumElem(int value);
    public NativeType get_ElemType();
    public void set_ElemType(NativeType value);
    public virtual MarshalSpec CloneInto(IHasMarshalSpec container);
}
internal class CilStrip.Mono.Cecil.FixedSysStringSpec : MarshalSpec {
    private int m_size;
    public int Size { get; public set; }
    public FixedSysStringSpec(IHasMarshalSpec container);
    public int get_Size();
    public void set_Size(int value);
    public virtual MarshalSpec CloneInto(IHasMarshalSpec container);
}
internal class CilStrip.Mono.Cecil.FunctionPointerType : TypeSpecification {
    private MethodReference m_function;
    public bool HasThis { get; public set; }
    public bool ExplicitThis { get; public set; }
    public MethodCallingConvention CallingConvention { get; public set; }
    public bool HasParameters { get; }
    public ParameterDefinitionCollection Parameters { get; }
    public MethodReturnType ReturnType { get; public set; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public IMetadataScope Scope { get; }
    public string FullName { get; }
    public FunctionPointerType(bool hasThis, bool explicitThis, MethodCallingConvention callConv, MethodReturnType retType);
    public sealed virtual bool get_HasThis();
    public sealed virtual void set_HasThis(bool value);
    public sealed virtual bool get_ExplicitThis();
    public sealed virtual void set_ExplicitThis(bool value);
    public sealed virtual MethodCallingConvention get_CallingConvention();
    public sealed virtual void set_CallingConvention(MethodCallingConvention value);
    public sealed virtual bool get_HasParameters();
    public sealed virtual ParameterDefinitionCollection get_Parameters();
    public sealed virtual MethodReturnType get_ReturnType();
    public void set_ReturnType(MethodReturnType value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Namespace();
    public virtual void set_Namespace(string value);
    public virtual IMetadataScope get_Scope();
    public virtual string get_FullName();
    public sealed virtual int GetSentinel();
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.GenericArgumentCollection : CollectionBase {
    private IGenericInstance m_container;
    public TypeReference Item { get; public set; }
    public IGenericInstance Container { get; }
    public GenericArgumentCollection(IGenericInstance container);
    public TypeReference get_Item(int index);
    public void set_Item(int index, TypeReference value);
    public IGenericInstance get_Container();
    public void Add(TypeReference value);
    public bool Contains(TypeReference value);
    public int IndexOf(TypeReference value);
    public void Insert(int index, TypeReference value);
    public void Remove(TypeReference value);
    protected virtual void OnValidate(object o);
}
internal class CilStrip.Mono.Cecil.GenericContext : object {
    private TypeReference m_type;
    private MethodReference m_method;
    public TypeReference Type { get; public set; }
    public MethodReference Method { get; public set; }
    public bool AllowCreation { get; }
    public bool Null { get; }
    public GenericContext(TypeReference type, MethodReference meth);
    public GenericContext(IGenericParameterProvider provider);
    public TypeReference get_Type();
    public void set_Type(TypeReference value);
    public MethodReference get_Method();
    public void set_Method(MethodReference value);
    public bool get_AllowCreation();
    public bool get_Null();
    internal void CheckProvider(IGenericParameterProvider provider, int count);
    public GenericContext Clone();
}
internal class CilStrip.Mono.Cecil.GenericInstanceMethod : MethodSpecification {
    private GenericArgumentCollection m_genArgs;
    public GenericArgumentCollection GenericArguments { get; }
    public bool HasGenericArguments { get; }
    public GenericInstanceMethod(MethodReference elemMethod);
    public sealed virtual GenericArgumentCollection get_GenericArguments();
    public sealed virtual bool get_HasGenericArguments();
    public virtual string ToString();
}
internal class CilStrip.Mono.Cecil.GenericInstanceType : TypeSpecification {
    private GenericArgumentCollection m_genArgs;
    public GenericArgumentCollection GenericArguments { get; }
    public bool HasGenericArguments { get; }
    public bool IsValueType { get; public set; }
    public string FullName { get; }
    public GenericInstanceType(TypeReference elementType);
    public sealed virtual GenericArgumentCollection get_GenericArguments();
    public sealed virtual bool get_HasGenericArguments();
    public virtual bool get_IsValueType();
    public virtual void set_IsValueType(bool value);
    public virtual string get_FullName();
}
internal class CilStrip.Mono.Cecil.GenericParameter : TypeReference {
    private int m_position;
    private string m_name;
    private GenericParameterAttributes m_attributes;
    private IGenericParameterProvider m_owner;
    private ConstraintCollection m_constraints;
    public int Position { get; public set; }
    public GenericParameterAttributes Attributes { get; public set; }
    public IGenericParameterProvider Owner { get; }
    public bool HasConstraints { get; }
    public ConstraintCollection Constraints { get; }
    public IMetadataScope Scope { get; }
    public ModuleDefinition Module { get; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public string FullName { get; }
    public bool IsNonVariant { get; public set; }
    public bool IsCovariant { get; public set; }
    public bool IsContravariant { get; public set; }
    public bool HasReferenceTypeConstraint { get; public set; }
    public bool HasNotNullableValueTypeConstraint { get; public set; }
    public bool HasDefaultConstructorConstraint { get; public set; }
    internal GenericParameter(int pos, IGenericParameterProvider owner);
    public GenericParameter(string name, IGenericParameterProvider owner);
    public int get_Position();
    public void set_Position(int value);
    public GenericParameterAttributes get_Attributes();
    public void set_Attributes(GenericParameterAttributes value);
    public IGenericParameterProvider get_Owner();
    public bool get_HasConstraints();
    public ConstraintCollection get_Constraints();
    public virtual IMetadataScope get_Scope();
    public virtual ModuleDefinition get_Module();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Namespace();
    public virtual void set_Namespace(string value);
    public virtual string get_FullName();
    public bool get_IsNonVariant();
    public void set_IsNonVariant(bool value);
    public bool get_IsCovariant();
    public void set_IsCovariant(bool value);
    public bool get_IsContravariant();
    public void set_IsContravariant(bool value);
    public bool get_HasReferenceTypeConstraint();
    public void set_HasReferenceTypeConstraint(bool value);
    public bool get_HasNotNullableValueTypeConstraint();
    public void set_HasNotNullableValueTypeConstraint(bool value);
    public bool get_HasDefaultConstructorConstraint();
    public void set_HasDefaultConstructorConstraint(bool value);
    public virtual TypeDefinition Resolve();
    internal static void CloneInto(IGenericParameterProvider old, IGenericParameterProvider np, ImportContext context);
    internal static GenericParameter Clone(GenericParameter gp, ImportContext context);
    private static void CloneConstraints(GenericParameter gp, GenericParameter ngp, ImportContext context);
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.GenericParameterAttributes : Enum {
    public ushort value__;
    public static GenericParameterAttributes VarianceMask;
    public static GenericParameterAttributes NonVariant;
    public static GenericParameterAttributes Covariant;
    public static GenericParameterAttributes Contravariant;
    public static GenericParameterAttributes SpecialConstraintMask;
    public static GenericParameterAttributes ReferenceTypeConstraint;
    public static GenericParameterAttributes NotNullableValueTypeConstraint;
    public static GenericParameterAttributes DefaultConstructorConstraint;
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.GenericParameterCollection : CollectionBase {
    private IGenericParameterProvider m_container;
    public GenericParameter Item { get; public set; }
    public IGenericParameterProvider Container { get; }
    public GenericParameterCollection(IGenericParameterProvider container);
    public GenericParameter get_Item(int index);
    public void set_Item(int index, GenericParameter value);
    public IGenericParameterProvider get_Container();
    public void Add(GenericParameter value);
    public bool Contains(GenericParameter value);
    public int IndexOf(GenericParameter value);
    public void Insert(int index, GenericParameter value);
    public void Remove(GenericParameter value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
internal class CilStrip.Mono.Cecil.HashCodeProvider : object {
    public static HashCodeProvider Instance;
    private static HashCodeProvider();
    public sealed virtual int GetHashCode(object o);
}
internal interface CilStrip.Mono.Cecil.IAnnotationProvider {
    public IDictionary Annotations { get; }
    public abstract virtual IDictionary get_Annotations();
}
internal interface CilStrip.Mono.Cecil.IAssemblyResolver {
    public abstract virtual AssemblyDefinition Resolve(string fullName);
    public abstract virtual AssemblyDefinition Resolve(AssemblyNameReference name);
}
internal interface CilStrip.Mono.Cecil.ICustomAttributeProvider {
    public CustomAttributeCollection CustomAttributes { get; }
    public bool HasCustomAttributes { get; }
    public abstract virtual CustomAttributeCollection get_CustomAttributes();
    public abstract virtual bool get_HasCustomAttributes();
}
internal interface CilStrip.Mono.Cecil.IDetailReader {
    public abstract virtual void ReadSemantic(EventDefinition evt);
    public abstract virtual void ReadSemantic(PropertyDefinition prop);
    public abstract virtual void ReadMarshalSpec(ParameterDefinition param);
    public abstract virtual void ReadMarshalSpec(FieldDefinition field);
    public abstract virtual void ReadLayout(TypeDefinition type);
    public abstract virtual void ReadLayout(FieldDefinition field);
    public abstract virtual void ReadConstant(FieldDefinition field);
    public abstract virtual void ReadConstant(PropertyDefinition prop);
    public abstract virtual void ReadConstant(ParameterDefinition param);
    public abstract virtual void ReadInitialValue(FieldDefinition field);
}
internal interface CilStrip.Mono.Cecil.IGenericInstance {
    public GenericArgumentCollection GenericArguments { get; }
    public bool HasGenericArguments { get; }
    public abstract virtual GenericArgumentCollection get_GenericArguments();
    public abstract virtual bool get_HasGenericArguments();
}
internal interface CilStrip.Mono.Cecil.IGenericParameterProvider {
    public GenericParameterCollection GenericParameters { get; }
    public bool HasGenericParameters { get; }
    public abstract virtual GenericParameterCollection get_GenericParameters();
    public abstract virtual bool get_HasGenericParameters();
}
internal interface CilStrip.Mono.Cecil.IHasConstant {
    public bool HasConstant { get; }
    public object Constant { get; public set; }
    public abstract virtual bool get_HasConstant();
    public abstract virtual object get_Constant();
    public abstract virtual void set_Constant(object value);
}
internal interface CilStrip.Mono.Cecil.IHasMarshalSpec {
    public MarshalSpec MarshalSpec { get; public set; }
    public abstract virtual MarshalSpec get_MarshalSpec();
    public abstract virtual void set_MarshalSpec(MarshalSpec value);
}
internal interface CilStrip.Mono.Cecil.IHasSecurity {
    public SecurityDeclarationCollection SecurityDeclarations { get; }
    public bool HasSecurityDeclarations { get; }
    public abstract virtual SecurityDeclarationCollection get_SecurityDeclarations();
    public abstract virtual bool get_HasSecurityDeclarations();
}
internal interface CilStrip.Mono.Cecil.IImporter {
    public abstract virtual TypeReference ImportTypeReference(TypeReference type, ImportContext context);
    public abstract virtual FieldReference ImportFieldReference(FieldReference field, ImportContext context);
    public abstract virtual MethodReference ImportMethodReference(MethodReference method, ImportContext context);
}
internal interface CilStrip.Mono.Cecil.IMemberDefinition {
    public TypeDefinition DeclaringType { get; public set; }
    public bool IsSpecialName { get; public set; }
    public bool IsRuntimeSpecialName { get; public set; }
    public abstract virtual TypeDefinition get_DeclaringType();
    public abstract virtual void set_DeclaringType(TypeDefinition value);
    public abstract virtual bool get_IsSpecialName();
    public abstract virtual void set_IsSpecialName(bool value);
    public abstract virtual bool get_IsRuntimeSpecialName();
    public abstract virtual void set_IsRuntimeSpecialName(bool value);
}
internal interface CilStrip.Mono.Cecil.IMemberReference {
    public string Name { get; public set; }
    public TypeReference DeclaringType { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual TypeReference get_DeclaringType();
}
internal interface CilStrip.Mono.Cecil.IMetadataScope {
    public string Name { get; public set; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
internal interface CilStrip.Mono.Cecil.IMetadataTokenProvider {
    public MetadataToken MetadataToken { get; public set; }
    public abstract virtual MetadataToken get_MetadataToken();
    public abstract virtual void set_MetadataToken(MetadataToken value);
}
internal interface CilStrip.Mono.Cecil.IMethodSignature {
    public bool HasParameters { get; }
    public bool HasThis { get; public set; }
    public bool ExplicitThis { get; public set; }
    public MethodCallingConvention CallingConvention { get; public set; }
    public ParameterDefinitionCollection Parameters { get; }
    public MethodReturnType ReturnType { get; }
    public abstract virtual bool get_HasParameters();
    public abstract virtual bool get_HasThis();
    public abstract virtual void set_HasThis(bool value);
    public abstract virtual bool get_ExplicitThis();
    public abstract virtual void set_ExplicitThis(bool value);
    public abstract virtual MethodCallingConvention get_CallingConvention();
    public abstract virtual void set_CallingConvention(MethodCallingConvention value);
    public abstract virtual ParameterDefinitionCollection get_Parameters();
    public abstract virtual MethodReturnType get_ReturnType();
    public abstract virtual int GetSentinel();
}
internal class CilStrip.Mono.Cecil.ImportContext : object {
    private GenericContext m_genContext;
    private IImporter m_importer;
    public GenericContext GenericContext { get; public set; }
    public ImportContext(IImporter importer);
    public ImportContext(IImporter importer, IGenericParameterProvider provider);
    public GenericContext get_GenericContext();
    public void set_GenericContext(GenericContext value);
    public TypeReference Import(TypeReference type);
    public MethodReference Import(MethodReference meth);
    public FieldReference Import(FieldReference field);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.InterfaceCollection : CollectionBase {
    private TypeDefinition m_container;
    public TypeReference Item { get; public set; }
    public TypeDefinition Container { get; }
    public InterfaceCollection(TypeDefinition container);
    public TypeReference get_Item(int index);
    public void set_Item(int index, TypeReference value);
    public TypeDefinition get_Container();
    public void Add(TypeReference value);
    public bool Contains(TypeReference value);
    public int IndexOf(TypeReference value);
    public void Insert(int index, TypeReference value);
    public void Remove(TypeReference value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.IReflectionStructureVisitable {
    public abstract virtual void Accept(IReflectionStructureVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.IReflectionStructureVisitor {
    public abstract virtual void VisitAssemblyDefinition(AssemblyDefinition asm);
    public abstract virtual void VisitAssemblyNameDefinition(AssemblyNameDefinition name);
    public abstract virtual void VisitAssemblyNameReferenceCollection(AssemblyNameReferenceCollection names);
    public abstract virtual void VisitAssemblyNameReference(AssemblyNameReference name);
    public abstract virtual void VisitResourceCollection(ResourceCollection resources);
    public abstract virtual void VisitEmbeddedResource(EmbeddedResource res);
    public abstract virtual void VisitLinkedResource(LinkedResource res);
    public abstract virtual void VisitAssemblyLinkedResource(AssemblyLinkedResource res);
    public abstract virtual void VisitModuleDefinition(ModuleDefinition module);
    public abstract virtual void VisitModuleDefinitionCollection(ModuleDefinitionCollection modules);
    public abstract virtual void VisitModuleReference(ModuleReference module);
    public abstract virtual void VisitModuleReferenceCollection(ModuleReferenceCollection modules);
    public abstract virtual void TerminateAssemblyDefinition(AssemblyDefinition asm);
}
internal interface CilStrip.Mono.Cecil.IReflectionVisitable {
    public abstract virtual void Accept(IReflectionVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.IReflectionVisitor {
    public abstract virtual void VisitModuleDefinition(ModuleDefinition module);
    public abstract virtual void VisitTypeDefinitionCollection(TypeDefinitionCollection types);
    public abstract virtual void VisitTypeDefinition(TypeDefinition type);
    public abstract virtual void VisitTypeReferenceCollection(TypeReferenceCollection refs);
    public abstract virtual void VisitTypeReference(TypeReference type);
    public abstract virtual void VisitMemberReferenceCollection(MemberReferenceCollection members);
    public abstract virtual void VisitMemberReference(MemberReference member);
    public abstract virtual void VisitInterfaceCollection(InterfaceCollection interfaces);
    public abstract virtual void VisitInterface(TypeReference interf);
    public abstract virtual void VisitExternTypeCollection(ExternTypeCollection externs);
    public abstract virtual void VisitExternType(TypeReference externType);
    public abstract virtual void VisitOverrideCollection(OverrideCollection meth);
    public abstract virtual void VisitOverride(MethodReference ov);
    public abstract virtual void VisitNestedTypeCollection(NestedTypeCollection nestedTypes);
    public abstract virtual void VisitNestedType(TypeDefinition nestedType);
    public abstract virtual void VisitParameterDefinitionCollection(ParameterDefinitionCollection parameters);
    public abstract virtual void VisitParameterDefinition(ParameterDefinition parameter);
    public abstract virtual void VisitMethodDefinitionCollection(MethodDefinitionCollection methods);
    public abstract virtual void VisitMethodDefinition(MethodDefinition method);
    public abstract virtual void VisitConstructorCollection(ConstructorCollection ctors);
    public abstract virtual void VisitConstructor(MethodDefinition ctor);
    public abstract virtual void VisitPInvokeInfo(PInvokeInfo pinvk);
    public abstract virtual void VisitEventDefinitionCollection(EventDefinitionCollection events);
    public abstract virtual void VisitEventDefinition(EventDefinition evt);
    public abstract virtual void VisitFieldDefinitionCollection(FieldDefinitionCollection fields);
    public abstract virtual void VisitFieldDefinition(FieldDefinition field);
    public abstract virtual void VisitPropertyDefinitionCollection(PropertyDefinitionCollection properties);
    public abstract virtual void VisitPropertyDefinition(PropertyDefinition property);
    public abstract virtual void VisitSecurityDeclarationCollection(SecurityDeclarationCollection secDecls);
    public abstract virtual void VisitSecurityDeclaration(SecurityDeclaration secDecl);
    public abstract virtual void VisitCustomAttributeCollection(CustomAttributeCollection customAttrs);
    public abstract virtual void VisitCustomAttribute(CustomAttribute customAttr);
    public abstract virtual void VisitGenericParameterCollection(GenericParameterCollection genparams);
    public abstract virtual void VisitGenericParameter(GenericParameter genparam);
    public abstract virtual void VisitMarshalSpec(MarshalSpec marshalSpec);
    public abstract virtual void TerminateModuleDefinition(ModuleDefinition module);
}
internal interface CilStrip.Mono.Cecil.IRequireResolving {
    public Byte[] Blob { get; }
    public bool Resolved { get; }
    public abstract virtual Byte[] get_Blob();
    public abstract virtual bool get_Resolved();
    public abstract virtual bool Resolve();
}
internal class CilStrip.Mono.Cecil.LinkedResource : Resource {
    private Byte[] m_hash;
    private string m_file;
    public Byte[] Hash { get; public set; }
    public string File { get; public set; }
    public LinkedResource(string name, ManifestResourceAttributes flags, string file);
    public Byte[] get_Hash();
    public void set_Hash(Byte[] value);
    public string get_File();
    public void set_File(string value);
    public virtual void Accept(IReflectionStructureVisitor visitor);
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.ManifestResourceAttributes : Enum {
    public int value__;
    public static ManifestResourceAttributes VisibilityMask;
    public static ManifestResourceAttributes Public;
    public static ManifestResourceAttributes Private;
}
internal class CilStrip.Mono.Cecil.MarshalSpec : object {
    private NativeType m_natIntr;
    private IHasMarshalSpec m_container;
    public NativeType NativeIntrinsic { get; public set; }
    public IHasMarshalSpec Container { get; public set; }
    public MarshalSpec(NativeType natIntr, IHasMarshalSpec container);
    public NativeType get_NativeIntrinsic();
    public void set_NativeIntrinsic(NativeType value);
    public IHasMarshalSpec get_Container();
    public void set_Container(IHasMarshalSpec value);
    public virtual void Accept(IReflectionVisitor visitor);
    public virtual MarshalSpec CloneInto(IHasMarshalSpec container);
}
internal abstract class CilStrip.Mono.Cecil.MemberReference : object {
    private string m_name;
    private TypeReference m_decType;
    private MetadataToken m_token;
    private IDictionary m_annotations;
    public string Name { get; public set; }
    public TypeReference DeclaringType { get; public set; }
    public MetadataToken MetadataToken { get; public set; }
    private IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.Annotations { get; }
    public MemberReference(string name);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual TypeReference get_DeclaringType();
    public virtual void set_DeclaringType(TypeReference value);
    public sealed virtual MetadataToken get_MetadataToken();
    public sealed virtual void set_MetadataToken(MetadataToken value);
    private sealed virtual override IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.get_Annotations();
    public virtual string ToString();
    public virtual void Accept(IReflectionVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.MemberReferenceCollection : CollectionBase {
    private ModuleDefinition m_container;
    public MemberReference Item { get; public set; }
    public ModuleDefinition Container { get; }
    public MemberReferenceCollection(ModuleDefinition container);
    public MemberReference get_Item(int index);
    public void set_Item(int index, MemberReference value);
    public ModuleDefinition get_Container();
    public void Add(MemberReference value);
    public bool Contains(MemberReference value);
    public int IndexOf(MemberReference value);
    public void Insert(int index, MemberReference value);
    public void Remove(MemberReference value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.AssemblyOSRow : object {
    public UInt32 OSPlatformID;
    public UInt32 OSMajorVersion;
    public UInt32 OSMinorVersion;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.AssemblyOSTable : object {
    public static int RId;
    private RowCollection m_rows;
    public AssemblyOSRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public AssemblyOSRow get_Item(int index);
    public void set_Item(int index, AssemblyOSRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.AssemblyProcessorRow : object {
    public UInt32 Processor;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.AssemblyProcessorTable : object {
    public static int RId;
    private RowCollection m_rows;
    public AssemblyProcessorRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public AssemblyProcessorRow get_Item(int index);
    public void set_Item(int index, AssemblyProcessorRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.AssemblyRefOSRow : object {
    public UInt32 OSPlatformID;
    public UInt32 OSMajorVersion;
    public UInt32 OSMinorVersion;
    public UInt32 AssemblyRef;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.AssemblyRefOSTable : object {
    public static int RId;
    private RowCollection m_rows;
    public AssemblyRefOSRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public AssemblyRefOSRow get_Item(int index);
    public void set_Item(int index, AssemblyRefOSRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.AssemblyRefProcessorRow : object {
    public UInt32 Processor;
    public UInt32 AssemblyRef;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.AssemblyRefProcessorTable : object {
    public static int RId;
    private RowCollection m_rows;
    public AssemblyRefProcessorRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public AssemblyRefProcessorRow get_Item(int index);
    public void set_Item(int index, AssemblyRefProcessorRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.AssemblyRefRow : object {
    public ushort MajorVersion;
    public ushort MinorVersion;
    public ushort BuildNumber;
    public ushort RevisionNumber;
    public AssemblyFlags Flags;
    public UInt32 PublicKeyOrToken;
    public UInt32 Name;
    public UInt32 Culture;
    public UInt32 HashValue;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.AssemblyRefTable : object {
    public static int RId;
    private RowCollection m_rows;
    public AssemblyRefRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public AssemblyRefRow get_Item(int index);
    public void set_Item(int index, AssemblyRefRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.AssemblyRow : object {
    public AssemblyHashAlgorithm HashAlgId;
    public ushort MajorVersion;
    public ushort MinorVersion;
    public ushort BuildNumber;
    public ushort RevisionNumber;
    public AssemblyFlags Flags;
    public UInt32 PublicKey;
    public UInt32 Name;
    public UInt32 Culture;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.AssemblyTable : object {
    public static int RId;
    private RowCollection m_rows;
    public AssemblyRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public AssemblyRow get_Item(int index);
    public void set_Item(int index, AssemblyRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal abstract class CilStrip.Mono.Cecil.Metadata.BaseMetadataRowVisitor : object {
    public virtual void VisitRowCollection(RowCollection coll);
    public virtual void VisitAssemblyRow(AssemblyRow row);
    public virtual void VisitAssemblyOSRow(AssemblyOSRow row);
    public virtual void VisitAssemblyProcessorRow(AssemblyProcessorRow row);
    public virtual void VisitAssemblyRefRow(AssemblyRefRow row);
    public virtual void VisitAssemblyRefOSRow(AssemblyRefOSRow row);
    public virtual void VisitAssemblyRefProcessorRow(AssemblyRefProcessorRow row);
    public virtual void VisitClassLayoutRow(ClassLayoutRow row);
    public virtual void VisitConstantRow(ConstantRow row);
    public virtual void VisitCustomAttributeRow(CustomAttributeRow row);
    public virtual void VisitDeclSecurityRow(DeclSecurityRow row);
    public virtual void VisitEventRow(EventRow row);
    public virtual void VisitEventMapRow(EventMapRow row);
    public virtual void VisitEventPtrRow(EventPtrRow row);
    public virtual void VisitExportedTypeRow(ExportedTypeRow row);
    public virtual void VisitFieldRow(FieldRow row);
    public virtual void VisitFieldLayoutRow(FieldLayoutRow row);
    public virtual void VisitFieldMarshalRow(FieldMarshalRow row);
    public virtual void VisitFieldPtrRow(FieldPtrRow row);
    public virtual void VisitFieldRVARow(FieldRVARow row);
    public virtual void VisitFileRow(FileRow row);
    public virtual void VisitGenericParamRow(GenericParamRow row);
    public virtual void VisitGenericParamConstraintRow(GenericParamConstraintRow row);
    public virtual void VisitImplMapRow(ImplMapRow row);
    public virtual void VisitInterfaceImplRow(InterfaceImplRow row);
    public virtual void VisitManifestResourceRow(ManifestResourceRow row);
    public virtual void VisitMemberRefRow(MemberRefRow row);
    public virtual void VisitMethodRow(MethodRow row);
    public virtual void VisitMethodImplRow(MethodImplRow row);
    public virtual void VisitMethodPtrRow(MethodPtrRow row);
    public virtual void VisitMethodSemanticsRow(MethodSemanticsRow row);
    public virtual void VisitMethodSpecRow(MethodSpecRow row);
    public virtual void VisitModuleRow(ModuleRow row);
    public virtual void VisitModuleRefRow(ModuleRefRow row);
    public virtual void VisitNestedClassRow(NestedClassRow row);
    public virtual void VisitParamRow(ParamRow row);
    public virtual void VisitParamPtrRow(ParamPtrRow row);
    public virtual void VisitPropertyRow(PropertyRow row);
    public virtual void VisitPropertyMapRow(PropertyMapRow row);
    public virtual void VisitPropertyPtrRow(PropertyPtrRow row);
    public virtual void VisitStandAloneSigRow(StandAloneSigRow row);
    public virtual void VisitTypeDefRow(TypeDefRow row);
    public virtual void VisitTypeRefRow(TypeRefRow row);
    public virtual void VisitTypeSpecRow(TypeSpecRow row);
    public virtual void TerminateRowCollection(RowCollection coll);
}
internal abstract class CilStrip.Mono.Cecil.Metadata.BaseMetadataTableVisitor : object {
    public virtual void VisitTableCollection(TableCollection coll);
    public virtual void VisitAssemblyTable(AssemblyTable table);
    public virtual void VisitAssemblyOSTable(AssemblyOSTable table);
    public virtual void VisitAssemblyProcessorTable(AssemblyProcessorTable table);
    public virtual void VisitAssemblyRefTable(AssemblyRefTable table);
    public virtual void VisitAssemblyRefOSTable(AssemblyRefOSTable table);
    public virtual void VisitAssemblyRefProcessorTable(AssemblyRefProcessorTable table);
    public virtual void VisitClassLayoutTable(ClassLayoutTable table);
    public virtual void VisitConstantTable(ConstantTable table);
    public virtual void VisitCustomAttributeTable(CustomAttributeTable table);
    public virtual void VisitDeclSecurityTable(DeclSecurityTable table);
    public virtual void VisitEventTable(EventTable table);
    public virtual void VisitEventMapTable(EventMapTable table);
    public virtual void VisitEventPtrTable(EventPtrTable table);
    public virtual void VisitExportedTypeTable(ExportedTypeTable table);
    public virtual void VisitFieldTable(FieldTable table);
    public virtual void VisitFieldLayoutTable(FieldLayoutTable table);
    public virtual void VisitFieldMarshalTable(FieldMarshalTable table);
    public virtual void VisitFieldPtrTable(FieldPtrTable table);
    public virtual void VisitFieldRVATable(FieldRVATable table);
    public virtual void VisitFileTable(FileTable table);
    public virtual void VisitGenericParamTable(GenericParamTable table);
    public virtual void VisitGenericParamConstraintTable(GenericParamConstraintTable table);
    public virtual void VisitImplMapTable(ImplMapTable table);
    public virtual void VisitInterfaceImplTable(InterfaceImplTable table);
    public virtual void VisitManifestResourceTable(ManifestResourceTable table);
    public virtual void VisitMemberRefTable(MemberRefTable table);
    public virtual void VisitMethodTable(MethodTable table);
    public virtual void VisitMethodImplTable(MethodImplTable table);
    public virtual void VisitMethodPtrTable(MethodPtrTable table);
    public virtual void VisitMethodSemanticsTable(MethodSemanticsTable table);
    public virtual void VisitMethodSpecTable(MethodSpecTable table);
    public virtual void VisitModuleTable(ModuleTable table);
    public virtual void VisitModuleRefTable(ModuleRefTable table);
    public virtual void VisitNestedClassTable(NestedClassTable table);
    public virtual void VisitParamTable(ParamTable table);
    public virtual void VisitParamPtrTable(ParamPtrTable table);
    public virtual void VisitPropertyTable(PropertyTable table);
    public virtual void VisitPropertyMapTable(PropertyMapTable table);
    public virtual void VisitPropertyPtrTable(PropertyPtrTable table);
    public virtual void VisitStandAloneSigTable(StandAloneSigTable table);
    public virtual void VisitTypeDefTable(TypeDefTable table);
    public virtual void VisitTypeRefTable(TypeRefTable table);
    public virtual void VisitTypeSpecTable(TypeSpecTable table);
    public virtual void TerminateTableCollection(TableCollection coll);
    public abstract virtual IMetadataRowVisitor GetRowVisitor();
}
internal abstract class CilStrip.Mono.Cecil.Metadata.BaseMetadataVisitor : object {
    public virtual void VisitMetadataRoot(MetadataRoot root);
    public virtual void VisitMetadataRootHeader(MetadataRootHeader header);
    public virtual void VisitMetadataStreamCollection(MetadataStreamCollection streams);
    public virtual void VisitMetadataStream(MetadataStream stream);
    public virtual void VisitMetadataStreamHeader(MetadataStreamHeader header);
    public virtual void VisitGuidHeap(GuidHeap heap);
    public virtual void VisitStringsHeap(StringsHeap heap);
    public virtual void VisitTablesHeap(TablesHeap heap);
    public virtual void VisitBlobHeap(BlobHeap heap);
    public virtual void VisitUserStringsHeap(UserStringsHeap heap);
    public virtual void TerminateMetadataRoot(MetadataRoot root);
}
internal class CilStrip.Mono.Cecil.Metadata.BlobHeap : MetadataHeap {
    internal BlobHeap(MetadataStream stream);
    public Byte[] Read(UInt32 index);
    public BinaryReader GetReader(UInt32 index);
    public virtual void Accept(IMetadataVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.ByteArrayEqualityComparer : object {
    public static ByteArrayEqualityComparer Instance;
    private static ByteArrayEqualityComparer();
    public sealed virtual int GetHashCode(object obj);
    public sealed virtual int Compare(object a, object b);
}
internal class CilStrip.Mono.Cecil.Metadata.ClassLayoutRow : object {
    public ushort PackingSize;
    public UInt32 ClassSize;
    public UInt32 Parent;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.ClassLayoutTable : object {
    public static int RId;
    private RowCollection m_rows;
    public ClassLayoutRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public ClassLayoutRow get_Item(int index);
    public void set_Item(int index, ClassLayoutRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal enum CilStrip.Mono.Cecil.Metadata.CodedIndex : Enum {
    public int value__;
    public static CodedIndex TypeDefOrRef;
    public static CodedIndex HasConstant;
    public static CodedIndex HasCustomAttribute;
    public static CodedIndex HasFieldMarshal;
    public static CodedIndex HasDeclSecurity;
    public static CodedIndex MemberRefParent;
    public static CodedIndex HasSemantics;
    public static CodedIndex MethodDefOrRef;
    public static CodedIndex MemberForwarded;
    public static CodedIndex Implementation;
    public static CodedIndex CustomAttributeType;
    public static CodedIndex ResolutionScope;
    public static CodedIndex TypeOrMethodDef;
}
internal class CilStrip.Mono.Cecil.Metadata.ConstantRow : object {
    public ElementType Type;
    public MetadataToken Parent;
    public UInt32 Value;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.ConstantTable : object {
    public static int RId;
    private RowCollection m_rows;
    public ConstantRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public ConstantRow get_Item(int index);
    public void set_Item(int index, ConstantRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.CultureUtils : object {
    private static IDictionary m_cultures;
    private static void LoadCultures();
    public static bool IsValid(string culture);
    public static CultureInfo GetCultureInfo(string culture);
}
internal class CilStrip.Mono.Cecil.Metadata.CustomAttributeRow : object {
    public MetadataToken Parent;
    public MetadataToken Type;
    public UInt32 Value;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.CustomAttributeTable : object {
    public static int RId;
    private RowCollection m_rows;
    public CustomAttributeRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public CustomAttributeRow get_Item(int index);
    public void set_Item(int index, CustomAttributeRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.DeclSecurityRow : object {
    public SecurityAction Action;
    public MetadataToken Parent;
    public UInt32 PermissionSet;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.DeclSecurityTable : object {
    public static int RId;
    private RowCollection m_rows;
    public DeclSecurityRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public DeclSecurityRow get_Item(int index);
    public void set_Item(int index, DeclSecurityRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal enum CilStrip.Mono.Cecil.Metadata.ElementType : Enum {
    public int value__;
    public static ElementType End;
    public static ElementType Void;
    public static ElementType Boolean;
    public static ElementType Char;
    public static ElementType I1;
    public static ElementType U1;
    public static ElementType I2;
    public static ElementType U2;
    public static ElementType I4;
    public static ElementType U4;
    public static ElementType I8;
    public static ElementType U8;
    public static ElementType R4;
    public static ElementType R8;
    public static ElementType String;
    public static ElementType Ptr;
    public static ElementType ByRef;
    public static ElementType ValueType;
    public static ElementType Class;
    public static ElementType Var;
    public static ElementType Array;
    public static ElementType GenericInst;
    public static ElementType TypedByRef;
    public static ElementType I;
    public static ElementType U;
    public static ElementType FnPtr;
    public static ElementType Object;
    public static ElementType SzArray;
    public static ElementType MVar;
    public static ElementType CModReqD;
    public static ElementType CModOpt;
    public static ElementType Internal;
    public static ElementType Modifier;
    public static ElementType Sentinel;
    public static ElementType Pinned;
    public static ElementType Type;
    public static ElementType Boxed;
    public static ElementType Enum;
}
internal class CilStrip.Mono.Cecil.Metadata.EventMapRow : object {
    public UInt32 Parent;
    public UInt32 EventList;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.EventMapTable : object {
    public static int RId;
    private RowCollection m_rows;
    public EventMapRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public EventMapRow get_Item(int index);
    public void set_Item(int index, EventMapRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.EventPtrRow : object {
    public UInt32 Event;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.EventPtrTable : object {
    public static int RId;
    private RowCollection m_rows;
    public EventPtrRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public EventPtrRow get_Item(int index);
    public void set_Item(int index, EventPtrRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.EventRow : object {
    public EventAttributes EventFlags;
    public UInt32 Name;
    public MetadataToken EventType;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.EventTable : object {
    public static int RId;
    private RowCollection m_rows;
    public EventRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public EventRow get_Item(int index);
    public void set_Item(int index, EventRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.ExportedTypeRow : object {
    public TypeAttributes Flags;
    public UInt32 TypeDefId;
    public UInt32 TypeName;
    public UInt32 TypeNamespace;
    public MetadataToken Implementation;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.ExportedTypeTable : object {
    public static int RId;
    private RowCollection m_rows;
    public ExportedTypeRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public ExportedTypeRow get_Item(int index);
    public void set_Item(int index, ExportedTypeRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.FieldLayoutRow : object {
    public UInt32 Offset;
    public UInt32 Field;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.FieldLayoutTable : object {
    public static int RId;
    private RowCollection m_rows;
    public FieldLayoutRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public FieldLayoutRow get_Item(int index);
    public void set_Item(int index, FieldLayoutRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.FieldMarshalRow : object {
    public MetadataToken Parent;
    public UInt32 NativeType;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.FieldMarshalTable : object {
    public static int RId;
    private RowCollection m_rows;
    public FieldMarshalRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public FieldMarshalRow get_Item(int index);
    public void set_Item(int index, FieldMarshalRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.FieldPtrRow : object {
    public UInt32 Field;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.FieldPtrTable : object {
    public static int RId;
    private RowCollection m_rows;
    public FieldPtrRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public FieldPtrRow get_Item(int index);
    public void set_Item(int index, FieldPtrRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.FieldRow : object {
    public FieldAttributes Flags;
    public UInt32 Name;
    public UInt32 Signature;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.FieldRVARow : object {
    public RVA RVA;
    public UInt32 Field;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.FieldRVATable : object {
    public static int RId;
    private RowCollection m_rows;
    public FieldRVARow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public FieldRVARow get_Item(int index);
    public void set_Item(int index, FieldRVARow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.FieldTable : object {
    public static int RId;
    private RowCollection m_rows;
    public FieldRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public FieldRow get_Item(int index);
    public void set_Item(int index, FieldRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.FileRow : object {
    public FileAttributes Flags;
    public UInt32 Name;
    public UInt32 HashValue;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.FileTable : object {
    public static int RId;
    private RowCollection m_rows;
    public FileRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public FileRow get_Item(int index);
    public void set_Item(int index, FileRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.GenericParamConstraintRow : object {
    public UInt32 Owner;
    public MetadataToken Constraint;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.GenericParamConstraintTable : object {
    public static int RId;
    private RowCollection m_rows;
    public GenericParamConstraintRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public GenericParamConstraintRow get_Item(int index);
    public void set_Item(int index, GenericParamConstraintRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.GenericParamRow : object {
    public ushort Number;
    public GenericParameterAttributes Flags;
    public MetadataToken Owner;
    public UInt32 Name;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.GenericParamTable : object {
    public static int RId;
    private RowCollection m_rows;
    public GenericParamRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public GenericParamRow get_Item(int index);
    public void set_Item(int index, GenericParamRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.GuidHeap : MetadataHeap {
    private IDictionary m_guids;
    public IDictionary Guids { get; }
    public Guid Item { get; public set; }
    public GuidHeap(MetadataStream stream);
    public IDictionary get_Guids();
    public Guid get_Item(UInt32 index);
    public void set_Item(UInt32 index, Guid value);
    public virtual void Accept(IMetadataVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.Metadata.IMetadataRow {
}
internal interface CilStrip.Mono.Cecil.Metadata.IMetadataRowVisitable {
    public abstract virtual void Accept(IMetadataRowVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.Metadata.IMetadataRowVisitor {
    public abstract virtual void VisitRowCollection(RowCollection coll);
    public abstract virtual void VisitAssemblyRow(AssemblyRow row);
    public abstract virtual void VisitAssemblyOSRow(AssemblyOSRow row);
    public abstract virtual void VisitAssemblyProcessorRow(AssemblyProcessorRow row);
    public abstract virtual void VisitAssemblyRefRow(AssemblyRefRow row);
    public abstract virtual void VisitAssemblyRefOSRow(AssemblyRefOSRow row);
    public abstract virtual void VisitAssemblyRefProcessorRow(AssemblyRefProcessorRow row);
    public abstract virtual void VisitClassLayoutRow(ClassLayoutRow row);
    public abstract virtual void VisitConstantRow(ConstantRow row);
    public abstract virtual void VisitCustomAttributeRow(CustomAttributeRow row);
    public abstract virtual void VisitDeclSecurityRow(DeclSecurityRow row);
    public abstract virtual void VisitEventRow(EventRow row);
    public abstract virtual void VisitEventMapRow(EventMapRow row);
    public abstract virtual void VisitEventPtrRow(EventPtrRow row);
    public abstract virtual void VisitExportedTypeRow(ExportedTypeRow row);
    public abstract virtual void VisitFieldRow(FieldRow row);
    public abstract virtual void VisitFieldLayoutRow(FieldLayoutRow row);
    public abstract virtual void VisitFieldMarshalRow(FieldMarshalRow row);
    public abstract virtual void VisitFieldPtrRow(FieldPtrRow row);
    public abstract virtual void VisitFieldRVARow(FieldRVARow row);
    public abstract virtual void VisitFileRow(FileRow row);
    public abstract virtual void VisitGenericParamRow(GenericParamRow row);
    public abstract virtual void VisitGenericParamConstraintRow(GenericParamConstraintRow row);
    public abstract virtual void VisitImplMapRow(ImplMapRow row);
    public abstract virtual void VisitInterfaceImplRow(InterfaceImplRow row);
    public abstract virtual void VisitManifestResourceRow(ManifestResourceRow row);
    public abstract virtual void VisitMemberRefRow(MemberRefRow row);
    public abstract virtual void VisitMethodRow(MethodRow row);
    public abstract virtual void VisitMethodImplRow(MethodImplRow row);
    public abstract virtual void VisitMethodPtrRow(MethodPtrRow row);
    public abstract virtual void VisitMethodSemanticsRow(MethodSemanticsRow row);
    public abstract virtual void VisitMethodSpecRow(MethodSpecRow row);
    public abstract virtual void VisitModuleRow(ModuleRow row);
    public abstract virtual void VisitModuleRefRow(ModuleRefRow row);
    public abstract virtual void VisitNestedClassRow(NestedClassRow row);
    public abstract virtual void VisitParamRow(ParamRow row);
    public abstract virtual void VisitParamPtrRow(ParamPtrRow row);
    public abstract virtual void VisitPropertyRow(PropertyRow row);
    public abstract virtual void VisitPropertyMapRow(PropertyMapRow row);
    public abstract virtual void VisitPropertyPtrRow(PropertyPtrRow row);
    public abstract virtual void VisitStandAloneSigRow(StandAloneSigRow row);
    public abstract virtual void VisitTypeDefRow(TypeDefRow row);
    public abstract virtual void VisitTypeRefRow(TypeRefRow row);
    public abstract virtual void VisitTypeSpecRow(TypeSpecRow row);
    public abstract virtual void TerminateRowCollection(RowCollection coll);
}
internal interface CilStrip.Mono.Cecil.Metadata.IMetadataTable {
    public int Id { get; }
    public RowCollection Rows { get; public set; }
    public abstract virtual int get_Id();
    public abstract virtual RowCollection get_Rows();
    public abstract virtual void set_Rows(RowCollection value);
}
internal interface CilStrip.Mono.Cecil.Metadata.IMetadataTableVisitable {
    public abstract virtual void Accept(IMetadataTableVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.Metadata.IMetadataTableVisitor {
    public abstract virtual void VisitTableCollection(TableCollection coll);
    public abstract virtual void VisitAssemblyTable(AssemblyTable table);
    public abstract virtual void VisitAssemblyOSTable(AssemblyOSTable table);
    public abstract virtual void VisitAssemblyProcessorTable(AssemblyProcessorTable table);
    public abstract virtual void VisitAssemblyRefTable(AssemblyRefTable table);
    public abstract virtual void VisitAssemblyRefOSTable(AssemblyRefOSTable table);
    public abstract virtual void VisitAssemblyRefProcessorTable(AssemblyRefProcessorTable table);
    public abstract virtual void VisitClassLayoutTable(ClassLayoutTable table);
    public abstract virtual void VisitConstantTable(ConstantTable table);
    public abstract virtual void VisitCustomAttributeTable(CustomAttributeTable table);
    public abstract virtual void VisitDeclSecurityTable(DeclSecurityTable table);
    public abstract virtual void VisitEventTable(EventTable table);
    public abstract virtual void VisitEventMapTable(EventMapTable table);
    public abstract virtual void VisitEventPtrTable(EventPtrTable table);
    public abstract virtual void VisitExportedTypeTable(ExportedTypeTable table);
    public abstract virtual void VisitFieldTable(FieldTable table);
    public abstract virtual void VisitFieldLayoutTable(FieldLayoutTable table);
    public abstract virtual void VisitFieldMarshalTable(FieldMarshalTable table);
    public abstract virtual void VisitFieldPtrTable(FieldPtrTable table);
    public abstract virtual void VisitFieldRVATable(FieldRVATable table);
    public abstract virtual void VisitFileTable(FileTable table);
    public abstract virtual void VisitGenericParamTable(GenericParamTable table);
    public abstract virtual void VisitGenericParamConstraintTable(GenericParamConstraintTable table);
    public abstract virtual void VisitImplMapTable(ImplMapTable table);
    public abstract virtual void VisitInterfaceImplTable(InterfaceImplTable table);
    public abstract virtual void VisitManifestResourceTable(ManifestResourceTable table);
    public abstract virtual void VisitMemberRefTable(MemberRefTable table);
    public abstract virtual void VisitMethodTable(MethodTable table);
    public abstract virtual void VisitMethodImplTable(MethodImplTable table);
    public abstract virtual void VisitMethodPtrTable(MethodPtrTable table);
    public abstract virtual void VisitMethodSemanticsTable(MethodSemanticsTable table);
    public abstract virtual void VisitMethodSpecTable(MethodSpecTable table);
    public abstract virtual void VisitModuleTable(ModuleTable table);
    public abstract virtual void VisitModuleRefTable(ModuleRefTable table);
    public abstract virtual void VisitNestedClassTable(NestedClassTable table);
    public abstract virtual void VisitParamTable(ParamTable table);
    public abstract virtual void VisitParamPtrTable(ParamPtrTable table);
    public abstract virtual void VisitPropertyTable(PropertyTable table);
    public abstract virtual void VisitPropertyMapTable(PropertyMapTable table);
    public abstract virtual void VisitPropertyPtrTable(PropertyPtrTable table);
    public abstract virtual void VisitStandAloneSigTable(StandAloneSigTable table);
    public abstract virtual void VisitTypeDefTable(TypeDefTable table);
    public abstract virtual void VisitTypeRefTable(TypeRefTable table);
    public abstract virtual void VisitTypeSpecTable(TypeSpecTable table);
    public abstract virtual void TerminateTableCollection(TableCollection coll);
    public abstract virtual IMetadataRowVisitor GetRowVisitor();
}
internal interface CilStrip.Mono.Cecil.Metadata.IMetadataVisitable {
    public abstract virtual void Accept(IMetadataVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.Metadata.IMetadataVisitor {
    public abstract virtual void VisitMetadataRoot(MetadataRoot root);
    public abstract virtual void VisitMetadataRootHeader(MetadataRootHeader header);
    public abstract virtual void VisitMetadataStreamCollection(MetadataStreamCollection streams);
    public abstract virtual void VisitMetadataStream(MetadataStream stream);
    public abstract virtual void VisitMetadataStreamHeader(MetadataStreamHeader header);
    public abstract virtual void VisitGuidHeap(GuidHeap heap);
    public abstract virtual void VisitStringsHeap(StringsHeap heap);
    public abstract virtual void VisitTablesHeap(TablesHeap heap);
    public abstract virtual void VisitBlobHeap(BlobHeap heap);
    public abstract virtual void VisitUserStringsHeap(UserStringsHeap heap);
    public abstract virtual void TerminateMetadataRoot(MetadataRoot root);
}
internal class CilStrip.Mono.Cecil.Metadata.ImplMapRow : object {
    public PInvokeAttributes MappingFlags;
    public MetadataToken MemberForwarded;
    public UInt32 ImportName;
    public UInt32 ImportScope;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.ImplMapTable : object {
    public static int RId;
    private RowCollection m_rows;
    public ImplMapRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public ImplMapRow get_Item(int index);
    public void set_Item(int index, ImplMapRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.InterfaceImplRow : object {
    public UInt32 Class;
    public MetadataToken Interface;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.InterfaceImplTable : object {
    public static int RId;
    private RowCollection m_rows;
    public InterfaceImplRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public InterfaceImplRow get_Item(int index);
    public void set_Item(int index, InterfaceImplRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.ManifestResourceRow : object {
    public UInt32 Offset;
    public ManifestResourceAttributes Flags;
    public UInt32 Name;
    public MetadataToken Implementation;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.ManifestResourceTable : object {
    public static int RId;
    private RowCollection m_rows;
    public ManifestResourceRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public ManifestResourceRow get_Item(int index);
    public void set_Item(int index, ManifestResourceRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.MemberRefRow : object {
    public MetadataToken Class;
    public UInt32 Name;
    public UInt32 Signature;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.MemberRefTable : object {
    public static int RId;
    private RowCollection m_rows;
    public MemberRefRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public MemberRefRow get_Item(int index);
    public void set_Item(int index, MemberRefRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.MetadataFormatException : ImageFormatException {
    internal MetadataFormatException(string message);
    internal MetadataFormatException(string message, String[] parameters);
    internal MetadataFormatException(string message, Exception inner);
}
internal abstract class CilStrip.Mono.Cecil.Metadata.MetadataHeap : object {
    private MetadataStream m_stream;
    private string m_name;
    private Byte[] m_data;
    public int IndexSize;
    public string Name { get; }
    public Byte[] Data { get; public set; }
    internal MetadataHeap(MetadataStream stream, string name);
    public string get_Name();
    public Byte[] get_Data();
    public void set_Data(Byte[] value);
    public static MetadataHeap HeapFactory(MetadataStream stream);
    public MetadataStream GetStream();
    protected virtual Byte[] ReadBytesFromStream(UInt32 pos);
    public abstract virtual void Accept(IMetadataVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.MetadataInitializer : BaseMetadataVisitor {
    private MetadataRoot m_root;
    public MetadataInitializer(ImageInitializer init);
    public virtual void VisitMetadataRoot(MetadataRoot root);
    public virtual void VisitMetadataRootHeader(MetadataRootHeader header);
    public virtual void VisitMetadataStreamCollection(MetadataStreamCollection coll);
    public virtual void VisitTablesHeap(TablesHeap th);
}
internal class CilStrip.Mono.Cecil.Metadata.MetadataReader : BaseMetadataVisitor {
    private ImageReader m_ir;
    private BinaryReader m_binaryReader;
    private MetadataTableReader m_tableReader;
    private MetadataRoot m_root;
    public MetadataTableReader TableReader { get; }
    public MetadataReader(ImageReader brv);
    public MetadataTableReader get_TableReader();
    public MetadataRoot GetMetadataRoot();
    public BinaryReader GetDataReader(RVA rva);
    public virtual void VisitMetadataRoot(MetadataRoot root);
    public virtual void VisitMetadataRootHeader(MetadataRootHeader header);
    public virtual void VisitMetadataStreamCollection(MetadataStreamCollection coll);
    public virtual void VisitMetadataStreamHeader(MetadataStreamHeader header);
    public virtual void VisitGuidHeap(GuidHeap heap);
    public virtual void VisitStringsHeap(StringsHeap heap);
    public virtual void VisitTablesHeap(TablesHeap heap);
    public virtual void VisitBlobHeap(BlobHeap heap);
    public virtual void VisitUserStringsHeap(UserStringsHeap heap);
    private void VisitHeap(MetadataHeap heap);
    private void SetHeapIndexSize(MetadataHeap heap, byte flag);
    public virtual void TerminateMetadataRoot(MetadataRoot root);
}
internal class CilStrip.Mono.Cecil.Metadata.MetadataRoot : object {
    private MetadataRootHeader m_header;
    private Image m_image;
    private MetadataStreamCollection m_streams;
    public MetadataRootHeader Header { get; public set; }
    public MetadataStreamCollection Streams { get; public set; }
    internal MetadataRoot(Image img);
    public MetadataRootHeader get_Header();
    public void set_Header(MetadataRootHeader value);
    public MetadataStreamCollection get_Streams();
    public void set_Streams(MetadataStreamCollection value);
    public Image GetImage();
    public sealed virtual void Accept(IMetadataVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.MetadataRowReader : BaseMetadataRowVisitor {
    private MetadataTableReader m_mtrv;
    private BinaryReader m_binaryReader;
    private MetadataRoot m_metadataRoot;
    private TableRowCounter m_counter;
    private Int32[] m_ciCache;
    private int m_blobHeapIdxSz;
    private int m_stringsHeapIdxSz;
    private int m_guidHeapIdxSz;
    public MetadataRowReader(MetadataTableReader mtrv);
    private int GetIndexSize(int rid);
    private int GetCodedIndexSize(CodedIndex ci);
    private UInt32 ReadByIndexSize(int size);
    public virtual void VisitRowCollection(RowCollection coll);
    public virtual void VisitAssemblyRow(AssemblyRow row);
    public virtual void VisitAssemblyOSRow(AssemblyOSRow row);
    public virtual void VisitAssemblyProcessorRow(AssemblyProcessorRow row);
    public virtual void VisitAssemblyRefRow(AssemblyRefRow row);
    public virtual void VisitAssemblyRefOSRow(AssemblyRefOSRow row);
    public virtual void VisitAssemblyRefProcessorRow(AssemblyRefProcessorRow row);
    public virtual void VisitClassLayoutRow(ClassLayoutRow row);
    public virtual void VisitConstantRow(ConstantRow row);
    public virtual void VisitCustomAttributeRow(CustomAttributeRow row);
    public virtual void VisitDeclSecurityRow(DeclSecurityRow row);
    public virtual void VisitEventRow(EventRow row);
    public virtual void VisitEventMapRow(EventMapRow row);
    public virtual void VisitEventPtrRow(EventPtrRow row);
    public virtual void VisitExportedTypeRow(ExportedTypeRow row);
    public virtual void VisitFieldRow(FieldRow row);
    public virtual void VisitFieldLayoutRow(FieldLayoutRow row);
    public virtual void VisitFieldMarshalRow(FieldMarshalRow row);
    public virtual void VisitFieldPtrRow(FieldPtrRow row);
    public virtual void VisitFieldRVARow(FieldRVARow row);
    public virtual void VisitFileRow(FileRow row);
    public virtual void VisitGenericParamRow(GenericParamRow row);
    public virtual void VisitGenericParamConstraintRow(GenericParamConstraintRow row);
    public virtual void VisitImplMapRow(ImplMapRow row);
    public virtual void VisitInterfaceImplRow(InterfaceImplRow row);
    public virtual void VisitManifestResourceRow(ManifestResourceRow row);
    public virtual void VisitMemberRefRow(MemberRefRow row);
    public virtual void VisitMethodRow(MethodRow row);
    public virtual void VisitMethodImplRow(MethodImplRow row);
    public virtual void VisitMethodPtrRow(MethodPtrRow row);
    public virtual void VisitMethodSemanticsRow(MethodSemanticsRow row);
    public virtual void VisitMethodSpecRow(MethodSpecRow row);
    public virtual void VisitModuleRow(ModuleRow row);
    public virtual void VisitModuleRefRow(ModuleRefRow row);
    public virtual void VisitNestedClassRow(NestedClassRow row);
    public virtual void VisitParamRow(ParamRow row);
    public virtual void VisitParamPtrRow(ParamPtrRow row);
    public virtual void VisitPropertyRow(PropertyRow row);
    public virtual void VisitPropertyMapRow(PropertyMapRow row);
    public virtual void VisitPropertyPtrRow(PropertyPtrRow row);
    public virtual void VisitStandAloneSigRow(StandAloneSigRow row);
    public virtual void VisitTypeDefRow(TypeDefRow row);
    public virtual void VisitTypeRefRow(TypeRefRow row);
    public virtual void VisitTypeSpecRow(TypeSpecRow row);
}
internal class CilStrip.Mono.Cecil.Metadata.MetadataRowWriter : BaseMetadataRowVisitor {
    private MetadataRoot m_root;
    private MemoryBinaryWriter m_binaryWriter;
    private TableRowCounter m_counter;
    private Int32[] m_ciCache;
    private int m_blobHeapIdxSz;
    private int m_stringsHeapIdxSz;
    private int m_guidHeapIdxSz;
    public MetadataRowWriter(MetadataTableWriter mtwv);
    private void WriteBlobPointer(UInt32 pointer);
    private void WriteStringPointer(UInt32 pointer);
    private void WriteGuidPointer(UInt32 pointer);
    private void WriteTablePointer(UInt32 pointer, int rid);
    private void WriteMetadataToken(MetadataToken token, CodedIndex ci);
    private int GetNumberOfRows(int rid);
    private void WriteByIndexSize(UInt32 value, int size);
    public AssemblyRow CreateAssemblyRow(AssemblyHashAlgorithm _hashAlgId, ushort _majorVersion, ushort _minorVersion, ushort _buildNumber, ushort _revisionNumber, AssemblyFlags _flags, UInt32 _publicKey, UInt32 _name, UInt32 _culture);
    public AssemblyOSRow CreateAssemblyOSRow(UInt32 _oSPlatformID, UInt32 _oSMajorVersion, UInt32 _oSMinorVersion);
    public AssemblyProcessorRow CreateAssemblyProcessorRow(UInt32 _processor);
    public AssemblyRefRow CreateAssemblyRefRow(ushort _majorVersion, ushort _minorVersion, ushort _buildNumber, ushort _revisionNumber, AssemblyFlags _flags, UInt32 _publicKeyOrToken, UInt32 _name, UInt32 _culture, UInt32 _hashValue);
    public AssemblyRefOSRow CreateAssemblyRefOSRow(UInt32 _oSPlatformID, UInt32 _oSMajorVersion, UInt32 _oSMinorVersion, UInt32 _assemblyRef);
    public AssemblyRefProcessorRow CreateAssemblyRefProcessorRow(UInt32 _processor, UInt32 _assemblyRef);
    public ClassLayoutRow CreateClassLayoutRow(ushort _packingSize, UInt32 _classSize, UInt32 _parent);
    public ConstantRow CreateConstantRow(ElementType _type, MetadataToken _parent, UInt32 _value);
    public CustomAttributeRow CreateCustomAttributeRow(MetadataToken _parent, MetadataToken _type, UInt32 _value);
    public DeclSecurityRow CreateDeclSecurityRow(SecurityAction _action, MetadataToken _parent, UInt32 _permissionSet);
    public EventRow CreateEventRow(EventAttributes _eventFlags, UInt32 _name, MetadataToken _eventType);
    public EventMapRow CreateEventMapRow(UInt32 _parent, UInt32 _eventList);
    public EventPtrRow CreateEventPtrRow(UInt32 _event);
    public ExportedTypeRow CreateExportedTypeRow(TypeAttributes _flags, UInt32 _typeDefId, UInt32 _typeName, UInt32 _typeNamespace, MetadataToken _implementation);
    public FieldRow CreateFieldRow(FieldAttributes _flags, UInt32 _name, UInt32 _signature);
    public FieldLayoutRow CreateFieldLayoutRow(UInt32 _offset, UInt32 _field);
    public FieldMarshalRow CreateFieldMarshalRow(MetadataToken _parent, UInt32 _nativeType);
    public FieldPtrRow CreateFieldPtrRow(UInt32 _field);
    public FieldRVARow CreateFieldRVARow(RVA _rVA, UInt32 _field);
    public FileRow CreateFileRow(FileAttributes _flags, UInt32 _name, UInt32 _hashValue);
    public GenericParamRow CreateGenericParamRow(ushort _number, GenericParameterAttributes _flags, MetadataToken _owner, UInt32 _name);
    public GenericParamConstraintRow CreateGenericParamConstraintRow(UInt32 _owner, MetadataToken _constraint);
    public ImplMapRow CreateImplMapRow(PInvokeAttributes _mappingFlags, MetadataToken _memberForwarded, UInt32 _importName, UInt32 _importScope);
    public InterfaceImplRow CreateInterfaceImplRow(UInt32 _class, MetadataToken _interface);
    public ManifestResourceRow CreateManifestResourceRow(UInt32 _offset, ManifestResourceAttributes _flags, UInt32 _name, MetadataToken _implementation);
    public MemberRefRow CreateMemberRefRow(MetadataToken _class, UInt32 _name, UInt32 _signature);
    public MethodRow CreateMethodRow(RVA _rVA, MethodImplAttributes _implFlags, MethodAttributes _flags, UInt32 _name, UInt32 _signature, UInt32 _paramList);
    public MethodImplRow CreateMethodImplRow(UInt32 _class, MetadataToken _methodBody, MetadataToken _methodDeclaration);
    public MethodPtrRow CreateMethodPtrRow(UInt32 _method);
    public MethodSemanticsRow CreateMethodSemanticsRow(MethodSemanticsAttributes _semantics, UInt32 _method, MetadataToken _association);
    public MethodSpecRow CreateMethodSpecRow(MetadataToken _method, UInt32 _instantiation);
    public ModuleRow CreateModuleRow(ushort _generation, UInt32 _name, UInt32 _mvid, UInt32 _encId, UInt32 _encBaseId);
    public ModuleRefRow CreateModuleRefRow(UInt32 _name);
    public NestedClassRow CreateNestedClassRow(UInt32 _nestedClass, UInt32 _enclosingClass);
    public ParamRow CreateParamRow(ParameterAttributes _flags, ushort _sequence, UInt32 _name);
    public ParamPtrRow CreateParamPtrRow(UInt32 _param);
    public PropertyRow CreatePropertyRow(PropertyAttributes _flags, UInt32 _name, UInt32 _type);
    public PropertyMapRow CreatePropertyMapRow(UInt32 _parent, UInt32 _propertyList);
    public PropertyPtrRow CreatePropertyPtrRow(UInt32 _property);
    public StandAloneSigRow CreateStandAloneSigRow(UInt32 _signature);
    public TypeDefRow CreateTypeDefRow(TypeAttributes _flags, UInt32 _name, UInt32 _namespace, MetadataToken _extends, UInt32 _fieldList, UInt32 _methodList);
    public TypeRefRow CreateTypeRefRow(MetadataToken _resolutionScope, UInt32 _name, UInt32 _namespace);
    public TypeSpecRow CreateTypeSpecRow(UInt32 _signature);
    public virtual void VisitRowCollection(RowCollection coll);
    public virtual void VisitAssemblyRow(AssemblyRow row);
    public virtual void VisitAssemblyOSRow(AssemblyOSRow row);
    public virtual void VisitAssemblyProcessorRow(AssemblyProcessorRow row);
    public virtual void VisitAssemblyRefRow(AssemblyRefRow row);
    public virtual void VisitAssemblyRefOSRow(AssemblyRefOSRow row);
    public virtual void VisitAssemblyRefProcessorRow(AssemblyRefProcessorRow row);
    public virtual void VisitClassLayoutRow(ClassLayoutRow row);
    public virtual void VisitConstantRow(ConstantRow row);
    public virtual void VisitCustomAttributeRow(CustomAttributeRow row);
    public virtual void VisitDeclSecurityRow(DeclSecurityRow row);
    public virtual void VisitEventRow(EventRow row);
    public virtual void VisitEventMapRow(EventMapRow row);
    public virtual void VisitEventPtrRow(EventPtrRow row);
    public virtual void VisitExportedTypeRow(ExportedTypeRow row);
    public virtual void VisitFieldRow(FieldRow row);
    public virtual void VisitFieldLayoutRow(FieldLayoutRow row);
    public virtual void VisitFieldMarshalRow(FieldMarshalRow row);
    public virtual void VisitFieldPtrRow(FieldPtrRow row);
    public virtual void VisitFieldRVARow(FieldRVARow row);
    public virtual void VisitFileRow(FileRow row);
    public virtual void VisitGenericParamRow(GenericParamRow row);
    public virtual void VisitGenericParamConstraintRow(GenericParamConstraintRow row);
    public virtual void VisitImplMapRow(ImplMapRow row);
    public virtual void VisitInterfaceImplRow(InterfaceImplRow row);
    public virtual void VisitManifestResourceRow(ManifestResourceRow row);
    public virtual void VisitMemberRefRow(MemberRefRow row);
    public virtual void VisitMethodRow(MethodRow row);
    public virtual void VisitMethodImplRow(MethodImplRow row);
    public virtual void VisitMethodPtrRow(MethodPtrRow row);
    public virtual void VisitMethodSemanticsRow(MethodSemanticsRow row);
    public virtual void VisitMethodSpecRow(MethodSpecRow row);
    public virtual void VisitModuleRow(ModuleRow row);
    public virtual void VisitModuleRefRow(ModuleRefRow row);
    public virtual void VisitNestedClassRow(NestedClassRow row);
    public virtual void VisitParamRow(ParamRow row);
    public virtual void VisitParamPtrRow(ParamPtrRow row);
    public virtual void VisitPropertyRow(PropertyRow row);
    public virtual void VisitPropertyMapRow(PropertyMapRow row);
    public virtual void VisitPropertyPtrRow(PropertyPtrRow row);
    public virtual void VisitStandAloneSigRow(StandAloneSigRow row);
    public virtual void VisitTypeDefRow(TypeDefRow row);
    public virtual void VisitTypeRefRow(TypeRefRow row);
    public virtual void VisitTypeSpecRow(TypeSpecRow row);
}
internal class CilStrip.Mono.Cecil.Metadata.MetadataStream : object {
    public static string Strings;
    public static string Tables;
    public static string IncrementalTables;
    public static string Blob;
    public static string GUID;
    public static string UserStrings;
    private MetadataStreamHeader m_header;
    private MetadataHeap m_heap;
    public MetadataStreamHeader Header { get; public set; }
    public MetadataHeap Heap { get; public set; }
    public MetadataStreamHeader get_Header();
    public void set_Header(MetadataStreamHeader value);
    public MetadataHeap get_Heap();
    public void set_Heap(MetadataHeap value);
    public sealed virtual void Accept(IMetadataVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.MetadataStreamCollection : object {
    private IList m_items;
    private BlobHeap m_blobHeap;
    private GuidHeap m_guidHeap;
    private StringsHeap m_stringsHeap;
    private UserStringsHeap m_usHeap;
    private TablesHeap m_tablesHeap;
    public MetadataStream Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public BlobHeap BlobHeap { get; }
    public GuidHeap GuidHeap { get; }
    public StringsHeap StringsHeap { get; }
    public TablesHeap TablesHeap { get; }
    public UserStringsHeap UserStringsHeap { get; }
    public MetadataStream get_Item(int index);
    public void set_Item(int index, MetadataStream value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public BlobHeap get_BlobHeap();
    public GuidHeap get_GuidHeap();
    public StringsHeap get_StringsHeap();
    public TablesHeap get_TablesHeap();
    public UserStringsHeap get_UserStringsHeap();
    private MetadataHeap GetHeap(string name);
    internal void Add(MetadataStream value);
    internal void Remove(MetadataStream value);
    public sealed virtual void CopyTo(Array ary, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void Accept(IMetadataVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.MetadataTableReader : BaseMetadataTableVisitor {
    private MetadataRoot m_metadataRoot;
    private TablesHeap m_heap;
    private MetadataRowReader m_mrrv;
    private BinaryReader m_binaryReader;
    private Int32[] m_rows;
    public MetadataTableReader(MetadataReader mrv);
    public MetadataRoot GetMetadataRoot();
    public BinaryReader GetReader();
    public virtual IMetadataRowVisitor GetRowVisitor();
    public int GetNumberOfRows(int rid);
    public AssemblyTable GetAssemblyTable();
    public AssemblyOSTable GetAssemblyOSTable();
    public AssemblyProcessorTable GetAssemblyProcessorTable();
    public AssemblyRefTable GetAssemblyRefTable();
    public AssemblyRefOSTable GetAssemblyRefOSTable();
    public AssemblyRefProcessorTable GetAssemblyRefProcessorTable();
    public ClassLayoutTable GetClassLayoutTable();
    public ConstantTable GetConstantTable();
    public CustomAttributeTable GetCustomAttributeTable();
    public DeclSecurityTable GetDeclSecurityTable();
    public EventTable GetEventTable();
    public EventMapTable GetEventMapTable();
    public EventPtrTable GetEventPtrTable();
    public ExportedTypeTable GetExportedTypeTable();
    public FieldTable GetFieldTable();
    public FieldLayoutTable GetFieldLayoutTable();
    public FieldMarshalTable GetFieldMarshalTable();
    public FieldPtrTable GetFieldPtrTable();
    public FieldRVATable GetFieldRVATable();
    public FileTable GetFileTable();
    public GenericParamTable GetGenericParamTable();
    public GenericParamConstraintTable GetGenericParamConstraintTable();
    public ImplMapTable GetImplMapTable();
    public InterfaceImplTable GetInterfaceImplTable();
    public ManifestResourceTable GetManifestResourceTable();
    public MemberRefTable GetMemberRefTable();
    public MethodTable GetMethodTable();
    public MethodImplTable GetMethodImplTable();
    public MethodPtrTable GetMethodPtrTable();
    public MethodSemanticsTable GetMethodSemanticsTable();
    public MethodSpecTable GetMethodSpecTable();
    public ModuleTable GetModuleTable();
    public ModuleRefTable GetModuleRefTable();
    public NestedClassTable GetNestedClassTable();
    public ParamTable GetParamTable();
    public ParamPtrTable GetParamPtrTable();
    public PropertyTable GetPropertyTable();
    public PropertyMapTable GetPropertyMapTable();
    public PropertyPtrTable GetPropertyPtrTable();
    public StandAloneSigTable GetStandAloneSigTable();
    public TypeDefTable GetTypeDefTable();
    public TypeRefTable GetTypeRefTable();
    public TypeSpecTable GetTypeSpecTable();
    public virtual void VisitTableCollection(TableCollection coll);
    public virtual void VisitAssemblyTable(AssemblyTable table);
    public virtual void VisitAssemblyOSTable(AssemblyOSTable table);
    public virtual void VisitAssemblyProcessorTable(AssemblyProcessorTable table);
    public virtual void VisitAssemblyRefTable(AssemblyRefTable table);
    public virtual void VisitAssemblyRefOSTable(AssemblyRefOSTable table);
    public virtual void VisitAssemblyRefProcessorTable(AssemblyRefProcessorTable table);
    public virtual void VisitClassLayoutTable(ClassLayoutTable table);
    public virtual void VisitConstantTable(ConstantTable table);
    public virtual void VisitCustomAttributeTable(CustomAttributeTable table);
    public virtual void VisitDeclSecurityTable(DeclSecurityTable table);
    public virtual void VisitEventTable(EventTable table);
    public virtual void VisitEventMapTable(EventMapTable table);
    public virtual void VisitEventPtrTable(EventPtrTable table);
    public virtual void VisitExportedTypeTable(ExportedTypeTable table);
    public virtual void VisitFieldTable(FieldTable table);
    public virtual void VisitFieldLayoutTable(FieldLayoutTable table);
    public virtual void VisitFieldMarshalTable(FieldMarshalTable table);
    public virtual void VisitFieldPtrTable(FieldPtrTable table);
    public virtual void VisitFieldRVATable(FieldRVATable table);
    public virtual void VisitFileTable(FileTable table);
    public virtual void VisitGenericParamTable(GenericParamTable table);
    public virtual void VisitGenericParamConstraintTable(GenericParamConstraintTable table);
    public virtual void VisitImplMapTable(ImplMapTable table);
    public virtual void VisitInterfaceImplTable(InterfaceImplTable table);
    public virtual void VisitManifestResourceTable(ManifestResourceTable table);
    public virtual void VisitMemberRefTable(MemberRefTable table);
    public virtual void VisitMethodTable(MethodTable table);
    public virtual void VisitMethodImplTable(MethodImplTable table);
    public virtual void VisitMethodPtrTable(MethodPtrTable table);
    public virtual void VisitMethodSemanticsTable(MethodSemanticsTable table);
    public virtual void VisitMethodSpecTable(MethodSpecTable table);
    public virtual void VisitModuleTable(ModuleTable table);
    public virtual void VisitModuleRefTable(ModuleRefTable table);
    public virtual void VisitNestedClassTable(NestedClassTable table);
    public virtual void VisitParamTable(ParamTable table);
    public virtual void VisitParamPtrTable(ParamPtrTable table);
    public virtual void VisitPropertyTable(PropertyTable table);
    public virtual void VisitPropertyMapTable(PropertyMapTable table);
    public virtual void VisitPropertyPtrTable(PropertyPtrTable table);
    public virtual void VisitStandAloneSigTable(StandAloneSigTable table);
    public virtual void VisitTypeDefTable(TypeDefTable table);
    public virtual void VisitTypeRefTable(TypeRefTable table);
    public virtual void VisitTypeSpecTable(TypeSpecTable table);
}
internal class CilStrip.Mono.Cecil.Metadata.MetadataTableWriter : BaseMetadataTableVisitor {
    private MetadataRoot m_root;
    private TablesHeap m_heap;
    private MetadataRowWriter m_mrrw;
    private MemoryBinaryWriter m_binaryWriter;
    public MetadataTableWriter(MetadataWriter mrv, MemoryBinaryWriter writer);
    public MetadataRoot GetMetadataRoot();
    public virtual IMetadataRowVisitor GetRowVisitor();
    public MemoryBinaryWriter GetWriter();
    private void InitializeTable(IMetadataTable table);
    private void WriteCount(int rid);
    public AssemblyTable GetAssemblyTable();
    public AssemblyOSTable GetAssemblyOSTable();
    public AssemblyProcessorTable GetAssemblyProcessorTable();
    public AssemblyRefTable GetAssemblyRefTable();
    public AssemblyRefOSTable GetAssemblyRefOSTable();
    public AssemblyRefProcessorTable GetAssemblyRefProcessorTable();
    public ClassLayoutTable GetClassLayoutTable();
    public ConstantTable GetConstantTable();
    public CustomAttributeTable GetCustomAttributeTable();
    public DeclSecurityTable GetDeclSecurityTable();
    public EventTable GetEventTable();
    public EventMapTable GetEventMapTable();
    public EventPtrTable GetEventPtrTable();
    public ExportedTypeTable GetExportedTypeTable();
    public FieldTable GetFieldTable();
    public FieldLayoutTable GetFieldLayoutTable();
    public FieldMarshalTable GetFieldMarshalTable();
    public FieldPtrTable GetFieldPtrTable();
    public FieldRVATable GetFieldRVATable();
    public FileTable GetFileTable();
    public GenericParamTable GetGenericParamTable();
    public GenericParamConstraintTable GetGenericParamConstraintTable();
    public ImplMapTable GetImplMapTable();
    public InterfaceImplTable GetInterfaceImplTable();
    public ManifestResourceTable GetManifestResourceTable();
    public MemberRefTable GetMemberRefTable();
    public MethodTable GetMethodTable();
    public MethodImplTable GetMethodImplTable();
    public MethodPtrTable GetMethodPtrTable();
    public MethodSemanticsTable GetMethodSemanticsTable();
    public MethodSpecTable GetMethodSpecTable();
    public ModuleTable GetModuleTable();
    public ModuleRefTable GetModuleRefTable();
    public NestedClassTable GetNestedClassTable();
    public ParamTable GetParamTable();
    public ParamPtrTable GetParamPtrTable();
    public PropertyTable GetPropertyTable();
    public PropertyMapTable GetPropertyMapTable();
    public PropertyPtrTable GetPropertyPtrTable();
    public StandAloneSigTable GetStandAloneSigTable();
    public TypeDefTable GetTypeDefTable();
    public TypeRefTable GetTypeRefTable();
    public TypeSpecTable GetTypeSpecTable();
    public virtual void VisitTableCollection(TableCollection coll);
}
internal class CilStrip.Mono.Cecil.Metadata.MetadataToken : ValueType {
    private UInt32 m_rid;
    private TokenType m_type;
    public static MetadataToken Zero;
    public UInt32 RID { get; }
    public TokenType TokenType { get; }
    public MetadataToken(int token);
    public MetadataToken(TokenType table, UInt32 rid);
    private static MetadataToken();
    public UInt32 get_RID();
    public TokenType get_TokenType();
    internal static MetadataToken FromMetadataRow(TokenType table, int rowIndex);
    public UInt32 ToUInt();
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    private bool Equals(MetadataToken other);
    public static bool op_Equality(MetadataToken one, MetadataToken other);
    public static bool op_Inequality(MetadataToken one, MetadataToken other);
    public virtual string ToString();
}
internal class CilStrip.Mono.Cecil.Metadata.MetadataWriter : BaseMetadataVisitor {
    private AssemblyDefinition m_assembly;
    private MetadataRoot m_root;
    private TargetRuntime m_runtime;
    private ImageWriter m_imgWriter;
    private MetadataTableWriter m_tableWriter;
    private MemoryBinaryWriter m_binaryWriter;
    private IDictionary m_stringCache;
    private MemoryBinaryWriter m_stringWriter;
    private IDictionary m_guidCache;
    private MemoryBinaryWriter m_guidWriter;
    private IDictionary m_usCache;
    private MemoryBinaryWriter m_usWriter;
    private IDictionary m_blobCache;
    private MemoryBinaryWriter m_blobWriter;
    private MemoryBinaryWriter m_tWriter;
    private MemoryBinaryWriter m_cilWriter;
    private MemoryBinaryWriter m_fieldDataWriter;
    private MemoryBinaryWriter m_resWriter;
    private UInt32 m_mdStart;
    private UInt32 m_mdSize;
    private UInt32 m_resStart;
    private UInt32 m_resSize;
    private UInt32 m_snsStart;
    private UInt32 m_snsSize;
    private UInt32 m_debugHeaderStart;
    private UInt32 m_imporTableStart;
    private UInt32 m_entryPointToken;
    private RVA m_cursor;
    public MemoryBinaryWriter CilWriter { get; }
    public MemoryBinaryWriter StringWriter { get; }
    public MemoryBinaryWriter GuidWriter { get; }
    public MemoryBinaryWriter UserStringWriter { get; }
    public MemoryBinaryWriter BlobWriter { get; }
    public UInt32 DebugHeaderPosition { get; }
    public UInt32 ImportTablePosition { get; }
    public UInt32 EntryPointToken { get; public set; }
    public TargetRuntime TargetRuntime { get; }
    public MetadataWriter(AssemblyDefinition asm, MetadataRoot root, AssemblyKind kind, TargetRuntime rt, BinaryWriter writer);
    public MemoryBinaryWriter get_CilWriter();
    public MemoryBinaryWriter get_StringWriter();
    public MemoryBinaryWriter get_GuidWriter();
    public MemoryBinaryWriter get_UserStringWriter();
    public MemoryBinaryWriter get_BlobWriter();
    public UInt32 get_DebugHeaderPosition();
    public UInt32 get_ImportTablePosition();
    public UInt32 get_EntryPointToken();
    public void set_EntryPointToken(UInt32 value);
    public TargetRuntime get_TargetRuntime();
    public MetadataRoot GetMetadataRoot();
    public ImageWriter GetImageWriter();
    public MemoryBinaryWriter GetWriter();
    public MetadataTableWriter GetTableVisitor();
    public void AddData(int length);
    public RVA GetDataCursor();
    public UInt32 AddString(string str);
    public UInt32 AddBlob(Byte[] data);
    public UInt32 AddGuid(Guid g);
    public UInt32 AddUserString(string str);
    private static bool RequiresSpecialHandling(Byte[] chars);
    private static bool InRange(int left, int right, int value);
    private void CreateStream(string name);
    private void SetHeapSize(MetadataHeap heap, MemoryBinaryWriter data, byte flag);
    public UInt32 AddResource(Byte[] data);
    public void AddFieldInitData(Byte[] data);
    private UInt32 GetStrongNameSignatureSize();
    public virtual void VisitMetadataRoot(MetadataRoot root);
    public virtual void VisitMetadataRootHeader(MetadataRootHeader header);
    public virtual void VisitMetadataStreamCollection(MetadataStreamCollection streams);
    private void WriteMemStream(MemoryBinaryWriter writer);
    private void PatchStreamHeaderOffset(MetadataHeap heap);
    public virtual void VisitGuidHeap(GuidHeap heap);
    public virtual void VisitStringsHeap(StringsHeap heap);
    public virtual void VisitTablesHeap(TablesHeap heap);
    public virtual void VisitBlobHeap(BlobHeap heap);
    public virtual void VisitUserStringsHeap(UserStringsHeap heap);
    private void PatchHeader();
    public virtual void TerminateMetadataRoot(MetadataRoot root);
}
internal class CilStrip.Mono.Cecil.Metadata.MethodImplRow : object {
    public UInt32 Class;
    public MetadataToken MethodBody;
    public MetadataToken MethodDeclaration;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.MethodImplTable : object {
    public static int RId;
    private RowCollection m_rows;
    public MethodImplRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public MethodImplRow get_Item(int index);
    public void set_Item(int index, MethodImplRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.MethodPtrRow : object {
    public UInt32 Method;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.MethodPtrTable : object {
    public static int RId;
    private RowCollection m_rows;
    public MethodPtrRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public MethodPtrRow get_Item(int index);
    public void set_Item(int index, MethodPtrRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.MethodRow : object {
    public RVA RVA;
    public MethodImplAttributes ImplFlags;
    public MethodAttributes Flags;
    public UInt32 Name;
    public UInt32 Signature;
    public UInt32 ParamList;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.MethodSemanticsRow : object {
    public MethodSemanticsAttributes Semantics;
    public UInt32 Method;
    public MetadataToken Association;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.MethodSemanticsTable : object {
    public static int RId;
    private RowCollection m_rows;
    public MethodSemanticsRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public MethodSemanticsRow get_Item(int index);
    public void set_Item(int index, MethodSemanticsRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.MethodSpecRow : object {
    public MetadataToken Method;
    public UInt32 Instantiation;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.MethodSpecTable : object {
    public static int RId;
    private RowCollection m_rows;
    public MethodSpecRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public MethodSpecRow get_Item(int index);
    public void set_Item(int index, MethodSpecRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.MethodTable : object {
    public static int RId;
    private RowCollection m_rows;
    public MethodRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public MethodRow get_Item(int index);
    public void set_Item(int index, MethodRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.ModuleRefRow : object {
    public UInt32 Name;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.ModuleRefTable : object {
    public static int RId;
    private RowCollection m_rows;
    public ModuleRefRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public ModuleRefRow get_Item(int index);
    public void set_Item(int index, ModuleRefRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.ModuleRow : object {
    public ushort Generation;
    public UInt32 Name;
    public UInt32 Mvid;
    public UInt32 EncId;
    public UInt32 EncBaseId;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.ModuleTable : object {
    public static int RId;
    private RowCollection m_rows;
    public ModuleRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public ModuleRow get_Item(int index);
    public void set_Item(int index, ModuleRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.NestedClassRow : object {
    public UInt32 NestedClass;
    public UInt32 EnclosingClass;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.NestedClassTable : object {
    public static int RId;
    private RowCollection m_rows;
    public NestedClassRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public NestedClassRow get_Item(int index);
    public void set_Item(int index, NestedClassRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.ParamPtrRow : object {
    public UInt32 Param;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.ParamPtrTable : object {
    public static int RId;
    private RowCollection m_rows;
    public ParamPtrRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public ParamPtrRow get_Item(int index);
    public void set_Item(int index, ParamPtrRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.ParamRow : object {
    public ParameterAttributes Flags;
    public ushort Sequence;
    public UInt32 Name;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.ParamTable : object {
    public static int RId;
    private RowCollection m_rows;
    public ParamRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public ParamRow get_Item(int index);
    public void set_Item(int index, ParamRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.PropertyMapRow : object {
    public UInt32 Parent;
    public UInt32 PropertyList;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.PropertyMapTable : object {
    public static int RId;
    private RowCollection m_rows;
    public PropertyMapRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public PropertyMapRow get_Item(int index);
    public void set_Item(int index, PropertyMapRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.PropertyPtrRow : object {
    public UInt32 Property;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.PropertyPtrTable : object {
    public static int RId;
    private RowCollection m_rows;
    public PropertyPtrRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public PropertyPtrRow get_Item(int index);
    public void set_Item(int index, PropertyPtrRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.PropertyRow : object {
    public PropertyAttributes Flags;
    public UInt32 Name;
    public UInt32 Type;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.PropertyTable : object {
    public static int RId;
    private RowCollection m_rows;
    public PropertyRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public PropertyRow get_Item(int index);
    public void set_Item(int index, PropertyRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.RowCollection : object {
    private ArrayList m_items;
    public IMetadataRow Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal RowCollection(int size);
    public IMetadataRow get_Item(int index);
    public void set_Item(int index, IMetadataRow value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    internal void Add(IMetadataRow value);
    public void Clear();
    public bool Contains(IMetadataRow value);
    public int IndexOf(IMetadataRow value);
    public void Insert(int index, IMetadataRow value);
    public void Remove(IMetadataRow value);
    public void RemoveAt(int index);
    public sealed virtual void CopyTo(Array ary, int index);
    public void Sort(IComparer comp);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.StandAloneSigRow : object {
    public UInt32 Signature;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.StandAloneSigTable : object {
    public static int RId;
    private RowCollection m_rows;
    public StandAloneSigRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public StandAloneSigRow get_Item(int index);
    public void set_Item(int index, StandAloneSigRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.StringsHeap : MetadataHeap {
    private IDictionary m_strings;
    public string Item { get; public set; }
    internal StringsHeap(MetadataStream stream);
    public string get_Item(UInt32 index);
    public void set_Item(UInt32 index, string value);
    private string ReadStringAt(UInt32 index);
    public virtual void Accept(IMetadataVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.TableCollection : object {
    private IMetadataTable[] m_tables;
    private TablesHeap m_heap;
    public IMetadataTable Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public TablesHeap Heap { get; }
    internal TableCollection(TablesHeap heap);
    public IMetadataTable get_Item(int index);
    public void set_Item(int index, IMetadataTable value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public TablesHeap get_Heap();
    internal void Add(IMetadataTable value);
    public bool Contains(IMetadataTable value);
    internal void Remove(IMetadataTable value);
    public sealed virtual void CopyTo(Array array, int index);
    internal IList GetList();
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.TablesHeap : MetadataHeap {
    public UInt32 Reserved;
    public byte MajorVersion;
    public byte MinorVersion;
    public byte HeapSizes;
    public byte Reserved2;
    public long Valid;
    public long Sorted;
    private TableCollection m_tables;
    public static int MaxTableCount;
    public TableCollection Tables { get; public set; }
    public IMetadataTable Item { get; public set; }
    internal TablesHeap(MetadataStream stream);
    public TableCollection get_Tables();
    public void set_Tables(TableCollection value);
    public IMetadataTable get_Item(int id);
    public void set_Item(int id, IMetadataTable value);
    public bool HasTable(int id);
    public virtual void Accept(IMetadataVisitor visitor);
}
internal enum CilStrip.Mono.Cecil.Metadata.TokenType : Enum {
    public UInt32 value__;
    public static TokenType Module;
    public static TokenType TypeRef;
    public static TokenType TypeDef;
    public static TokenType Field;
    public static TokenType Method;
    public static TokenType Param;
    public static TokenType InterfaceImpl;
    public static TokenType MemberRef;
    public static TokenType CustomAttribute;
    public static TokenType Permission;
    public static TokenType Signature;
    public static TokenType Event;
    public static TokenType Property;
    public static TokenType ModuleRef;
    public static TokenType TypeSpec;
    public static TokenType Assembly;
    public static TokenType AssemblyRef;
    public static TokenType File;
    public static TokenType ExportedType;
    public static TokenType ManifestResource;
    public static TokenType GenericParam;
    public static TokenType MethodSpec;
    public static TokenType String;
    public static TokenType Name;
    public static TokenType BaseType;
}
internal class CilStrip.Mono.Cecil.Metadata.TypeDefRow : object {
    public TypeAttributes Flags;
    public UInt32 Name;
    public UInt32 Namespace;
    public MetadataToken Extends;
    public UInt32 FieldList;
    public UInt32 MethodList;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.TypeDefTable : object {
    public static int RId;
    private RowCollection m_rows;
    public TypeDefRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public TypeDefRow get_Item(int index);
    public void set_Item(int index, TypeDefRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.TypeRefRow : object {
    public MetadataToken ResolutionScope;
    public UInt32 Name;
    public UInt32 Namespace;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.TypeRefTable : object {
    public static int RId;
    private RowCollection m_rows;
    public TypeRefRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public TypeRefRow get_Item(int index);
    public void set_Item(int index, TypeRefRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.TypeSpecRow : object {
    public UInt32 Signature;
    public sealed virtual void Accept(IMetadataRowVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.TypeSpecTable : object {
    public static int RId;
    private RowCollection m_rows;
    public TypeSpecRow Item { get; public set; }
    public RowCollection Rows { get; public set; }
    public int Id { get; }
    public TypeSpecRow get_Item(int index);
    public void set_Item(int index, TypeSpecRow value);
    public sealed virtual RowCollection get_Rows();
    public sealed virtual void set_Rows(RowCollection value);
    public sealed virtual int get_Id();
    public sealed virtual void Accept(IMetadataTableVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.Metadata.UserStringsHeap : MetadataHeap {
    private IDictionary m_strings;
    public string Item { get; public set; }
    internal UserStringsHeap(MetadataStream stream);
    public string get_Item(UInt32 offset);
    public void set_Item(UInt32 offset, string value);
    private string ReadStringAt(int offset);
    public virtual void Accept(IMetadataVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Metadata.Utilities : object {
    public static int ReadCompressedInteger(Byte[] data, int pos, Int32& start);
    public static int ReadCompressedSignedInteger(Byte[] data, int pos, Int32& start);
    public static int WriteCompressedInteger(BinaryWriter writer, int value);
    public static MetadataToken GetMetadataToken(CodedIndex cidx, UInt32 data);
    public static UInt32 CompressMetadataToken(CodedIndex cidx, MetadataToken token);
    internal static Type GetCorrespondingTable(TokenType t);
    internal static int GetCodedIndexSize(CodedIndex ci, TableRowCounter rowCounter, Int32[] codedIndexCache);
}
internal class CilStrip.Mono.Cecil.MetadataResolver : object {
    private AssemblyDefinition assembly;
    public IAssemblyResolver AssemblyResolver { get; }
    public MetadataResolver(AssemblyDefinition assembly);
    public IAssemblyResolver get_AssemblyResolver();
    public TypeDefinition Resolve(TypeReference type);
    public FieldDefinition Resolve(FieldReference field);
    private static FieldDefinition GetField(ICollection collection, FieldReference reference);
    public MethodDefinition Resolve(MethodReference method);
    private MethodDefinition GetMethod(TypeDefinition type, MethodReference reference);
    private static MethodDefinition GetMethod(ICollection collection, MethodReference reference);
    private static bool AreSame(ParameterDefinitionCollection a, ParameterDefinitionCollection b);
    private static bool AreSame(ModType a, ModType b);
    private static bool AreSame(TypeSpecification a, TypeSpecification b);
    private static bool AreSame(GenericInstanceType a, GenericInstanceType b);
    private static bool AreSame(GenericParameter a, GenericParameter b);
    private static bool AreSame(TypeReference a, TypeReference b);
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.MethodAttributes : Enum {
    public ushort value__;
    public static MethodAttributes MemberAccessMask;
    public static MethodAttributes Compilercontrolled;
    public static MethodAttributes Private;
    public static MethodAttributes FamANDAssem;
    public static MethodAttributes Assem;
    public static MethodAttributes Family;
    public static MethodAttributes FamORAssem;
    public static MethodAttributes Public;
    public static MethodAttributes Static;
    public static MethodAttributes Final;
    public static MethodAttributes Virtual;
    public static MethodAttributes HideBySig;
    public static MethodAttributes VtableLayoutMask;
    public static MethodAttributes ReuseSlot;
    public static MethodAttributes NewSlot;
    public static MethodAttributes Strict;
    public static MethodAttributes Abstract;
    public static MethodAttributes SpecialName;
    public static MethodAttributes PInvokeImpl;
    public static MethodAttributes UnmanagedExport;
    public static MethodAttributes RTSpecialName;
    public static MethodAttributes HasSecurity;
    public static MethodAttributes RequireSecObject;
}
internal enum CilStrip.Mono.Cecil.MethodCallingConvention : Enum {
    public byte value__;
    public static MethodCallingConvention Default;
    public static MethodCallingConvention C;
    public static MethodCallingConvention StdCall;
    public static MethodCallingConvention ThisCall;
    public static MethodCallingConvention FastCall;
    public static MethodCallingConvention VarArg;
    public static MethodCallingConvention Generic;
}
internal class CilStrip.Mono.Cecil.MethodDefinition : MethodReference {
    public static string Cctor;
    public static string Ctor;
    private MethodAttributes m_attributes;
    private MethodImplAttributes m_implAttrs;
    private MethodSemanticsAttributes m_semAttrs;
    private SecurityDeclarationCollection m_secDecls;
    private CustomAttributeCollection m_customAttrs;
    private MethodBody m_body;
    private RVA m_rva;
    private OverrideCollection m_overrides;
    private PInvokeInfo m_pinvoke;
    private ParameterDefinition m_this;
    public MethodAttributes Attributes { get; public set; }
    public MethodImplAttributes ImplAttributes { get; public set; }
    public MethodSemanticsAttributes SemanticsAttributes { get; public set; }
    public bool HasSecurityDeclarations { get; }
    public SecurityDeclarationCollection SecurityDeclarations { get; }
    public bool HasCustomAttributes { get; }
    public CustomAttributeCollection CustomAttributes { get; }
    public RVA RVA { get; public set; }
    public MethodBody Body { get; public set; }
    public PInvokeInfo PInvokeInfo { get; public set; }
    public bool HasOverrides { get; }
    public OverrideCollection Overrides { get; }
    public ParameterDefinition This { get; }
    public bool IsCompilerControlled { get; public set; }
    public bool IsPrivate { get; public set; }
    public bool IsFamilyAndAssembly { get; public set; }
    public bool IsAssembly { get; public set; }
    public bool IsFamily { get; public set; }
    public bool IsFamilyOrAssembly { get; public set; }
    public bool IsPublic { get; public set; }
    public bool IsStatic { get; public set; }
    public bool IsFinal { get; public set; }
    public bool IsVirtual { get; public set; }
    public bool IsHideBySig { get; public set; }
    public bool IsReuseSlot { get; public set; }
    public bool IsNewSlot { get; public set; }
    public bool IsStrict { get; public set; }
    public bool IsAbstract { get; public set; }
    public bool IsSpecialName { get; public set; }
    public bool IsPInvokeImpl { get; public set; }
    public bool IsUnmanagedExport { get; public set; }
    public bool IsRuntimeSpecialName { get; public set; }
    public bool HasSecurity { get; public set; }
    public bool IsIL { get; public set; }
    public bool IsNative { get; public set; }
    public bool IsRuntime { get; public set; }
    public bool IsUnmanaged { get; public set; }
    public bool IsManaged { get; public set; }
    public bool IsForwardRef { get; public set; }
    public bool IsPreserveSig { get; public set; }
    public bool IsInternalCall { get; public set; }
    public bool IsSynchronized { get; public set; }
    public bool NoInlining { get; public set; }
    public bool IsSetter { get; public set; }
    public bool IsGetter { get; public set; }
    public bool IsOther { get; public set; }
    public bool IsAddOn { get; public set; }
    public bool IsRemoveOn { get; public set; }
    public bool IsFire { get; public set; }
    public bool IsConstructor { get; }
    public bool HasBody { get; }
    public TypeDefinition DeclaringType { get; public set; }
    public MethodDefinition(string name, RVA rva, MethodAttributes attrs, MethodImplAttributes implAttrs, bool hasThis, bool explicitThis, MethodCallingConvention callConv);
    internal MethodDefinition(string name, MethodAttributes attrs);
    public MethodDefinition(string name, MethodAttributes attrs, TypeReference returnType);
    public MethodAttributes get_Attributes();
    public void set_Attributes(MethodAttributes value);
    public MethodImplAttributes get_ImplAttributes();
    public void set_ImplAttributes(MethodImplAttributes value);
    public MethodSemanticsAttributes get_SemanticsAttributes();
    public void set_SemanticsAttributes(MethodSemanticsAttributes value);
    public sealed virtual bool get_HasSecurityDeclarations();
    public sealed virtual SecurityDeclarationCollection get_SecurityDeclarations();
    public sealed virtual bool get_HasCustomAttributes();
    public sealed virtual CustomAttributeCollection get_CustomAttributes();
    public RVA get_RVA();
    public void set_RVA(RVA value);
    public MethodBody get_Body();
    public void set_Body(MethodBody value);
    public PInvokeInfo get_PInvokeInfo();
    public void set_PInvokeInfo(PInvokeInfo value);
    public bool get_HasOverrides();
    public OverrideCollection get_Overrides();
    public ParameterDefinition get_This();
    public bool get_IsCompilerControlled();
    public void set_IsCompilerControlled(bool value);
    public bool get_IsPrivate();
    public void set_IsPrivate(bool value);
    public bool get_IsFamilyAndAssembly();
    public void set_IsFamilyAndAssembly(bool value);
    public bool get_IsAssembly();
    public void set_IsAssembly(bool value);
    public bool get_IsFamily();
    public void set_IsFamily(bool value);
    public bool get_IsFamilyOrAssembly();
    public void set_IsFamilyOrAssembly(bool value);
    public bool get_IsPublic();
    public void set_IsPublic(bool value);
    public bool get_IsStatic();
    public void set_IsStatic(bool value);
    public bool get_IsFinal();
    public void set_IsFinal(bool value);
    public bool get_IsVirtual();
    public void set_IsVirtual(bool value);
    public bool get_IsHideBySig();
    public void set_IsHideBySig(bool value);
    public bool get_IsReuseSlot();
    public void set_IsReuseSlot(bool value);
    public bool get_IsNewSlot();
    public void set_IsNewSlot(bool value);
    public bool get_IsStrict();
    public void set_IsStrict(bool value);
    public bool get_IsAbstract();
    public void set_IsAbstract(bool value);
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual void set_IsSpecialName(bool value);
    public bool get_IsPInvokeImpl();
    public void set_IsPInvokeImpl(bool value);
    public bool get_IsUnmanagedExport();
    public void set_IsUnmanagedExport(bool value);
    public sealed virtual bool get_IsRuntimeSpecialName();
    public sealed virtual void set_IsRuntimeSpecialName(bool value);
    public bool get_HasSecurity();
    public void set_HasSecurity(bool value);
    public bool get_IsIL();
    public void set_IsIL(bool value);
    public bool get_IsNative();
    public void set_IsNative(bool value);
    public bool get_IsRuntime();
    public void set_IsRuntime(bool value);
    public bool get_IsUnmanaged();
    public void set_IsUnmanaged(bool value);
    public bool get_IsManaged();
    public void set_IsManaged(bool value);
    public bool get_IsForwardRef();
    public void set_IsForwardRef(bool value);
    public bool get_IsPreserveSig();
    public void set_IsPreserveSig(bool value);
    public bool get_IsInternalCall();
    public void set_IsInternalCall(bool value);
    public bool get_IsSynchronized();
    public void set_IsSynchronized(bool value);
    public bool get_NoInlining();
    public void set_NoInlining(bool value);
    public bool get_IsSetter();
    public void set_IsSetter(bool value);
    public bool get_IsGetter();
    public void set_IsGetter(bool value);
    public bool get_IsOther();
    public void set_IsOther(bool value);
    public bool get_IsAddOn();
    public void set_IsAddOn(bool value);
    public bool get_IsRemoveOn();
    public void set_IsRemoveOn(bool value);
    public bool get_IsFire();
    public void set_IsFire(bool value);
    public bool get_IsConstructor();
    public bool get_HasBody();
    public sealed virtual TypeDefinition get_DeclaringType();
    public sealed virtual void set_DeclaringType(TypeDefinition value);
    internal void LoadBody();
    public virtual MethodDefinition Resolve();
    public MethodDefinition Clone();
    internal static MethodDefinition Clone(MethodDefinition meth, ImportContext context);
    public virtual void Accept(IReflectionVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.MethodDefinitionCollection : CollectionBase {
    private TypeDefinition m_container;
    public MethodDefinition Item { get; public set; }
    public TypeDefinition Container { get; }
    public MethodDefinitionCollection(TypeDefinition container);
    public MethodDefinition get_Item(int index);
    public void set_Item(int index, MethodDefinition value);
    public TypeDefinition get_Container();
    public void Add(MethodDefinition value);
    public void Clear();
    public bool Contains(MethodDefinition value);
    public int IndexOf(MethodDefinition value);
    public void Insert(int index, MethodDefinition value);
    public void Remove(MethodDefinition value);
    public void RemoveAt(int index);
    protected virtual void OnValidate(object o);
    public MethodDefinition[] GetMethod(string name);
    internal MethodDefinition GetMethodInternal(string name, IList parameters);
    public MethodDefinition GetMethod(string name, Type[] parameters);
    public MethodDefinition GetMethod(string name, TypeReference[] parameters);
    public MethodDefinition GetMethod(string name, ParameterDefinitionCollection parameters);
    private void Attach(MemberReference member);
    private void Detach(MemberReference member);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.MethodImplAttributes : Enum {
    public ushort value__;
    public static MethodImplAttributes CodeTypeMask;
    public static MethodImplAttributes IL;
    public static MethodImplAttributes Native;
    public static MethodImplAttributes OPTIL;
    public static MethodImplAttributes Runtime;
    public static MethodImplAttributes ManagedMask;
    public static MethodImplAttributes Unmanaged;
    public static MethodImplAttributes Managed;
    public static MethodImplAttributes ForwardRef;
    public static MethodImplAttributes PreserveSig;
    public static MethodImplAttributes InternalCall;
    public static MethodImplAttributes Synchronized;
    public static MethodImplAttributes NoInlining;
    public static MethodImplAttributes MaxMethodImplVal;
}
internal class CilStrip.Mono.Cecil.MethodReference : MemberReference {
    private ParameterDefinitionCollection m_parameters;
    private MethodReturnType m_returnType;
    private bool m_hasThis;
    private bool m_explicitThis;
    private MethodCallingConvention m_callConv;
    private GenericParameterCollection m_genparams;
    public bool HasThis { get; public set; }
    public bool ExplicitThis { get; public set; }
    public MethodCallingConvention CallingConvention { get; public set; }
    public bool HasParameters { get; }
    public ParameterDefinitionCollection Parameters { get; }
    public bool HasGenericParameters { get; }
    public GenericParameterCollection GenericParameters { get; }
    public MethodReturnType ReturnType { get; public set; }
    internal MethodReference(string name, bool hasThis, bool explicitThis, MethodCallingConvention callConv);
    internal MethodReference(string name);
    public MethodReference(string name, TypeReference declaringType, TypeReference returnType, bool hasThis, bool explicitThis, MethodCallingConvention callConv);
    public virtual bool get_HasThis();
    public virtual void set_HasThis(bool value);
    public virtual bool get_ExplicitThis();
    public virtual void set_ExplicitThis(bool value);
    public virtual MethodCallingConvention get_CallingConvention();
    public virtual void set_CallingConvention(MethodCallingConvention value);
    public virtual bool get_HasParameters();
    public virtual ParameterDefinitionCollection get_Parameters();
    public sealed virtual bool get_HasGenericParameters();
    public sealed virtual GenericParameterCollection get_GenericParameters();
    public virtual MethodReturnType get_ReturnType();
    public virtual void set_ReturnType(MethodReturnType value);
    public virtual MethodDefinition Resolve();
    public virtual MethodReference GetOriginalMethod();
    public sealed virtual int GetSentinel();
    public virtual string ToString();
}
internal class CilStrip.Mono.Cecil.MethodReturnType : object {
    private MethodReference m_method;
    private ParameterDefinition m_param;
    private TypeReference m_returnType;
    public MethodReference Method { get; public set; }
    public TypeReference ReturnType { get; public set; }
    internal ParameterDefinition Parameter { get; internal set; }
    public MetadataToken MetadataToken { get; public set; }
    public bool HasCustomAttributes { get; }
    public CustomAttributeCollection CustomAttributes { get; }
    public bool HasConstant { get; }
    public object Constant { get; public set; }
    public MarshalSpec MarshalSpec { get; public set; }
    public MethodReturnType(TypeReference retType);
    public MethodReference get_Method();
    public void set_Method(MethodReference value);
    public TypeReference get_ReturnType();
    public void set_ReturnType(TypeReference value);
    internal ParameterDefinition get_Parameter();
    internal void set_Parameter(ParameterDefinition value);
    public sealed virtual MetadataToken get_MetadataToken();
    public sealed virtual void set_MetadataToken(MetadataToken value);
    public sealed virtual bool get_HasCustomAttributes();
    public sealed virtual CustomAttributeCollection get_CustomAttributes();
    public sealed virtual bool get_HasConstant();
    public sealed virtual object get_Constant();
    public sealed virtual void set_Constant(object value);
    public sealed virtual MarshalSpec get_MarshalSpec();
    public sealed virtual void set_MarshalSpec(MarshalSpec value);
    public virtual string ToString();
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.MethodSemanticsAttributes : Enum {
    public ushort value__;
    public static MethodSemanticsAttributes Setter;
    public static MethodSemanticsAttributes Getter;
    public static MethodSemanticsAttributes Other;
    public static MethodSemanticsAttributes AddOn;
    public static MethodSemanticsAttributes RemoveOn;
    public static MethodSemanticsAttributes Fire;
}
internal abstract class CilStrip.Mono.Cecil.MethodSpecification : MethodReference {
    private MethodReference m_elementMethod;
    public MethodReference ElementMethod { get; public set; }
    public string Name { get; public set; }
    public MethodCallingConvention CallingConvention { get; public set; }
    public bool HasThis { get; public set; }
    public bool ExplicitThis { get; public set; }
    public MethodReturnType ReturnType { get; public set; }
    public TypeReference DeclaringType { get; public set; }
    public bool HasParameters { get; }
    public ParameterDefinitionCollection Parameters { get; }
    internal MethodSpecification(MethodReference elemMethod);
    public MethodReference get_ElementMethod();
    public void set_ElementMethod(MethodReference value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual MethodCallingConvention get_CallingConvention();
    public virtual void set_CallingConvention(MethodCallingConvention value);
    public virtual bool get_HasThis();
    public virtual void set_HasThis(bool value);
    public virtual bool get_ExplicitThis();
    public virtual void set_ExplicitThis(bool value);
    public virtual MethodReturnType get_ReturnType();
    public virtual void set_ReturnType(MethodReturnType value);
    public virtual TypeReference get_DeclaringType();
    public virtual void set_DeclaringType(TypeReference value);
    public virtual bool get_HasParameters();
    public virtual ParameterDefinitionCollection get_Parameters();
    public virtual MethodReference GetOriginalMethod();
}
internal class CilStrip.Mono.Cecil.ModifierOptional : ModType {
    protected string ModifierName { get; }
    public ModifierOptional(TypeReference elemType, TypeReference modType);
    protected virtual string get_ModifierName();
}
internal class CilStrip.Mono.Cecil.ModifierRequired : ModType {
    protected string ModifierName { get; }
    public ModifierRequired(TypeReference elemType, TypeReference modType);
    protected virtual string get_ModifierName();
}
internal abstract class CilStrip.Mono.Cecil.ModType : TypeSpecification {
    private TypeReference m_modifierType;
    public TypeReference ModifierType { get; public set; }
    public string Name { get; }
    public string FullName { get; }
    protected string ModifierName { get; }
    public ModType(TypeReference elemType, TypeReference modType);
    public TypeReference get_ModifierType();
    public void set_ModifierType(TypeReference value);
    public virtual string get_Name();
    public virtual string get_FullName();
    private string Suffix();
    protected abstract virtual string get_ModifierName();
}
internal class CilStrip.Mono.Cecil.ModuleDefinition : ModuleReference {
    private Guid m_mvid;
    private bool m_main;
    private bool m_manifestOnly;
    private AssemblyNameReferenceCollection m_asmRefs;
    private ModuleReferenceCollection m_modRefs;
    private ResourceCollection m_res;
    private TypeDefinitionCollection m_types;
    private TypeReferenceCollection m_refs;
    private ExternTypeCollection m_externs;
    private MemberReferenceCollection m_members;
    private CustomAttributeCollection m_customAttrs;
    private AssemblyDefinition m_asm;
    private Image m_image;
    private ImageReader m_imgReader;
    private ReflectionController m_controller;
    private MetadataResolver m_resolver;
    private SecurityDeclarationReader m_secReader;
    public Guid Mvid { get; public set; }
    public bool Main { get; public set; }
    public AssemblyNameReferenceCollection AssemblyReferences { get; }
    public ModuleReferenceCollection ModuleReferences { get; }
    public ResourceCollection Resources { get; }
    public TypeDefinitionCollection Types { get; }
    public TypeReferenceCollection TypeReferences { get; }
    public MemberReferenceCollection MemberReferences { get; }
    public ExternTypeCollection ExternTypes { get; }
    public bool HasCustomAttributes { get; }
    public CustomAttributeCollection CustomAttributes { get; }
    public AssemblyDefinition Assembly { get; }
    internal ReflectionController Controller { get; }
    internal MetadataResolver Resolver { get; }
    internal ImageReader ImageReader { get; }
    public Image Image { get; public set; }
    public ModuleDefinition(string name, AssemblyDefinition asm);
    public ModuleDefinition(string name, AssemblyDefinition asm, bool main);
    internal ModuleDefinition(string name, AssemblyDefinition asm, StructureReader reader, bool main);
    public Guid get_Mvid();
    public void set_Mvid(Guid value);
    public bool get_Main();
    public void set_Main(bool value);
    public AssemblyNameReferenceCollection get_AssemblyReferences();
    public ModuleReferenceCollection get_ModuleReferences();
    public ResourceCollection get_Resources();
    public TypeDefinitionCollection get_Types();
    public TypeReferenceCollection get_TypeReferences();
    public MemberReferenceCollection get_MemberReferences();
    public ExternTypeCollection get_ExternTypes();
    public sealed virtual bool get_HasCustomAttributes();
    public sealed virtual CustomAttributeCollection get_CustomAttributes();
    public AssemblyDefinition get_Assembly();
    internal ReflectionController get_Controller();
    internal MetadataResolver get_Resolver();
    internal ImageReader get_ImageReader();
    public Image get_Image();
    public void set_Image(Image value);
    public IMetadataTokenProvider LookupByToken(MetadataToken token);
    public IMetadataTokenProvider LookupByToken(TokenType table, int rid);
    private void CheckContext(TypeDefinition context);
    private void CheckContext(MethodDefinition context);
    private static void CheckGenericParameterProvider(IGenericParameterProvider context);
    private ImportContext GetContext();
    private static ImportContext GetContext(IImporter importer);
    private ImportContext GetContext(TypeDefinition context);
    private ImportContext GetContext(MethodDefinition context);
    private static ImportContext GetContext(IImporter importer, TypeDefinition context);
    public TypeReference Import(Type type);
    public TypeReference Import(Type type, TypeDefinition context);
    public TypeReference Import(Type type, MethodDefinition context);
    public MethodReference Import(MethodBase meth);
    public MethodReference Import(MethodBase meth, TypeDefinition context);
    public FieldReference Import(FieldInfo field);
    public FieldReference Import(FieldInfo field, TypeDefinition context);
    public FieldReference Import(FieldInfo field, MethodDefinition context);
    public TypeReference Import(TypeReference type);
    public TypeReference Import(TypeReference type, TypeDefinition context);
    public TypeReference Import(TypeReference type, MethodDefinition context);
    public MethodReference Import(MethodReference meth);
    public MethodReference Import(MethodReference meth, TypeDefinition context);
    public MethodReference Import(MethodReference meth, MethodDefinition context);
    public FieldReference Import(FieldReference field);
    public FieldReference Import(FieldReference field, TypeDefinition context);
    public FieldReference Import(FieldReference field, MethodDefinition context);
    private static FieldDefinition ImportFieldDefinition(FieldDefinition field, ImportContext context);
    private static MethodDefinition ImportMethodDefinition(MethodDefinition meth, ImportContext context);
    private static TypeDefinition ImportTypeDefinition(TypeDefinition type, ImportContext context);
    public TypeDefinition Inject(TypeDefinition type);
    public TypeDefinition Inject(TypeDefinition type, IImporter importer);
    public TypeDefinition Inject(TypeDefinition type, TypeDefinition context);
    public TypeDefinition Inject(TypeDefinition type, TypeDefinition context, IImporter importer);
    public MethodDefinition Inject(MethodDefinition meth, TypeDefinition context);
    private void Check(IMemberDefinition definition, TypeDefinition context, IImporter importer);
    public MethodDefinition Inject(MethodDefinition meth, TypeDefinition context, IImporter importer);
    public FieldDefinition Inject(FieldDefinition field, TypeDefinition context);
    public FieldDefinition Inject(FieldDefinition field, TypeDefinition context, IImporter importer);
    public void FullLoad();
    public void LoadSymbols();
    public void LoadSymbols(ISymbolReader reader);
    public void SaveSymbols();
    public void SaveSymbols(ISymbolWriter writer);
    public void SaveSymbols(string outputDirectory);
    public void SaveSymbols(string outputDirectory, ISymbolWriter writer);
    public Byte[] GetAsByteArray(CustomAttribute ca);
    public Byte[] GetAsByteArray(SecurityDeclaration dec);
    public CustomAttribute FromByteArray(MethodReference ctor, Byte[] data);
    public SecurityDeclaration FromByteArray(SecurityAction action, Byte[] declaration);
    public virtual void Accept(IReflectionStructureVisitor visitor);
    public sealed virtual void Accept(IReflectionVisitor visitor);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.ModuleDefinitionCollection : CollectionBase {
    private AssemblyDefinition m_container;
    public ModuleDefinition Item { get; public set; }
    public AssemblyDefinition Container { get; }
    public ModuleDefinitionCollection(AssemblyDefinition container);
    public ModuleDefinition get_Item(int index);
    public void set_Item(int index, ModuleDefinition value);
    public AssemblyDefinition get_Container();
    public void Add(ModuleDefinition value);
    public bool Contains(ModuleDefinition value);
    public int IndexOf(ModuleDefinition value);
    public void Insert(int index, ModuleDefinition value);
    public void Remove(ModuleDefinition value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(IReflectionStructureVisitor visitor);
}
internal class CilStrip.Mono.Cecil.ModuleReference : object {
    private string m_name;
    private MetadataToken m_token;
    private IDictionary m_annotations;
    public string Name { get; public set; }
    public MetadataToken MetadataToken { get; public set; }
    private IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.Annotations { get; }
    public ModuleReference(string name);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual MetadataToken get_MetadataToken();
    public sealed virtual void set_MetadataToken(MetadataToken value);
    private sealed virtual override IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.get_Annotations();
    public virtual void Accept(IReflectionStructureVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.ModuleReferenceCollection : CollectionBase {
    private ModuleDefinition m_container;
    public ModuleReference Item { get; public set; }
    public ModuleDefinition Container { get; }
    public ModuleReferenceCollection(ModuleDefinition container);
    public ModuleReference get_Item(int index);
    public void set_Item(int index, ModuleReference value);
    public ModuleDefinition get_Container();
    public void Add(ModuleReference value);
    public bool Contains(ModuleReference value);
    public int IndexOf(ModuleReference value);
    public void Insert(int index, ModuleReference value);
    public void Remove(ModuleReference value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(IReflectionStructureVisitor visitor);
}
internal enum CilStrip.Mono.Cecil.NativeType : Enum {
    public int value__;
    public static NativeType NONE;
    public static NativeType BOOLEAN;
    public static NativeType I1;
    public static NativeType U1;
    public static NativeType I2;
    public static NativeType U2;
    public static NativeType I4;
    public static NativeType U4;
    public static NativeType I8;
    public static NativeType U8;
    public static NativeType R4;
    public static NativeType R8;
    public static NativeType LPSTR;
    public static NativeType INT;
    public static NativeType UINT;
    public static NativeType FUNC;
    public static NativeType ARRAY;
    public static NativeType CURRENCY;
    public static NativeType BSTR;
    public static NativeType LPWSTR;
    public static NativeType LPTSTR;
    public static NativeType FIXEDSYSSTRING;
    public static NativeType IUNKNOWN;
    public static NativeType IDISPATCH;
    public static NativeType STRUCT;
    public static NativeType INTF;
    public static NativeType SAFEARRAY;
    public static NativeType FIXEDARRAY;
    public static NativeType BYVALSTR;
    public static NativeType ANSIBSTR;
    public static NativeType TBSTR;
    public static NativeType VARIANTBOOL;
    public static NativeType ASANY;
    public static NativeType LPSTRUCT;
    public static NativeType CUSTOMMARSHALER;
    public static NativeType ERROR;
    public static NativeType MAX;
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.NestedTypeCollection : CollectionBase {
    private TypeDefinition m_container;
    public TypeDefinition Item { get; public set; }
    public TypeDefinition Container { get; }
    public NestedTypeCollection(TypeDefinition container);
    public TypeDefinition get_Item(int index);
    public void set_Item(int index, TypeDefinition value);
    public TypeDefinition get_Container();
    public void Add(TypeDefinition value);
    public void Clear();
    public bool Contains(TypeDefinition value);
    public int IndexOf(TypeDefinition value);
    public void Insert(int index, TypeDefinition value);
    public void Remove(TypeDefinition value);
    public void RemoveAt(int index);
    protected virtual void OnValidate(object o);
    private void Attach(MemberReference member);
    private void Detach(MemberReference member);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
internal class CilStrip.Mono.Cecil.NullReferenceImporter : object {
    public static NullReferenceImporter Instance;
    private static NullReferenceImporter();
    public sealed virtual TypeReference ImportTypeReference(TypeReference type, ImportContext context);
    public sealed virtual FieldReference ImportFieldReference(FieldReference field, ImportContext context);
    public sealed virtual MethodReference ImportMethodReference(MethodReference method, ImportContext context);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.OverrideCollection : CollectionBase {
    private MethodDefinition m_container;
    public MethodReference Item { get; public set; }
    public MethodDefinition Container { get; }
    public OverrideCollection(MethodDefinition container);
    public MethodReference get_Item(int index);
    public void set_Item(int index, MethodReference value);
    public MethodDefinition get_Container();
    public void Add(MethodReference value);
    public bool Contains(MethodReference value);
    public int IndexOf(MethodReference value);
    public void Insert(int index, MethodReference value);
    public void Remove(MethodReference value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.ParameterAttributes : Enum {
    public ushort value__;
    public static ParameterAttributes None;
    public static ParameterAttributes In;
    public static ParameterAttributes Out;
    public static ParameterAttributes Lcid;
    public static ParameterAttributes Retval;
    public static ParameterAttributes Optional;
    public static ParameterAttributes HasDefault;
    public static ParameterAttributes HasFieldMarshal;
    public static ParameterAttributes Unused;
}
internal class CilStrip.Mono.Cecil.ParameterDefinition : ParameterReference {
    private ParameterAttributes m_attributes;
    private bool m_hasConstant;
    private object m_const;
    private MethodReference m_method;
    private CustomAttributeCollection m_customAttrs;
    private MarshalSpec m_marshalDesc;
    public ParameterAttributes Attributes { get; public set; }
    public bool HasConstant { get; }
    public object Constant { get; public set; }
    public MethodReference Method { get; public set; }
    public bool HasCustomAttributes { get; }
    public CustomAttributeCollection CustomAttributes { get; }
    public MarshalSpec MarshalSpec { get; public set; }
    public bool IsIn { get; public set; }
    public bool IsOut { get; public set; }
    public bool IsRetval { get; public set; }
    public bool IsLcid { get; public set; }
    public bool IsOptional { get; public set; }
    public bool HasDefault { get; public set; }
    public ParameterDefinition(TypeReference paramType);
    public ParameterDefinition(string name, int seq, ParameterAttributes attrs, TypeReference paramType);
    public ParameterAttributes get_Attributes();
    public void set_Attributes(ParameterAttributes value);
    public sealed virtual bool get_HasConstant();
    public sealed virtual object get_Constant();
    public sealed virtual void set_Constant(object value);
    public MethodReference get_Method();
    public void set_Method(MethodReference value);
    public sealed virtual bool get_HasCustomAttributes();
    public sealed virtual CustomAttributeCollection get_CustomAttributes();
    public sealed virtual MarshalSpec get_MarshalSpec();
    public sealed virtual void set_MarshalSpec(MarshalSpec value);
    public bool get_IsIn();
    public void set_IsIn(bool value);
    public bool get_IsOut();
    public void set_IsOut(bool value);
    public bool get_IsRetval();
    public void set_IsRetval(bool value);
    public bool get_IsLcid();
    public void set_IsLcid(bool value);
    public bool get_IsOptional();
    public void set_IsOptional(bool value);
    public bool get_HasDefault();
    public void set_HasDefault(bool value);
    public virtual ParameterDefinition Resolve();
    public ParameterDefinition Clone();
    internal static ParameterDefinition Clone(ParameterDefinition param, ImportContext context);
    public virtual void Accept(IReflectionVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.ParameterDefinitionCollection : CollectionBase {
    private IMemberReference m_container;
    public ParameterDefinition Item { get; public set; }
    public IMemberReference Container { get; }
    public ParameterDefinitionCollection(IMemberReference container);
    public ParameterDefinition get_Item(int index);
    public void set_Item(int index, ParameterDefinition value);
    public IMemberReference get_Container();
    public void Add(ParameterDefinition value);
    public bool Contains(ParameterDefinition value);
    public int IndexOf(ParameterDefinition value);
    public void Insert(int index, ParameterDefinition value);
    public void Remove(ParameterDefinition value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
internal abstract class CilStrip.Mono.Cecil.ParameterReference : object {
    private string m_name;
    private int m_sequence;
    private TypeReference m_paramType;
    private MetadataToken m_token;
    private IDictionary m_annotations;
    public string Name { get; public set; }
    public int Sequence { get; public set; }
    public TypeReference ParameterType { get; public set; }
    public MetadataToken MetadataToken { get; public set; }
    private IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.Annotations { get; }
    public ParameterReference(string name, int sequence, TypeReference parameterType);
    public string get_Name();
    public void set_Name(string value);
    public int get_Sequence();
    public void set_Sequence(int value);
    public TypeReference get_ParameterType();
    public void set_ParameterType(TypeReference value);
    public sealed virtual MetadataToken get_MetadataToken();
    public sealed virtual void set_MetadataToken(MetadataToken value);
    private sealed virtual override IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.get_Annotations();
    public abstract virtual ParameterDefinition Resolve();
    public virtual string ToString();
    public abstract virtual void Accept(IReflectionVisitor visitor);
}
internal class CilStrip.Mono.Cecil.PinnedType : TypeSpecification {
    public PinnedType(TypeReference pType);
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.PInvokeAttributes : Enum {
    public ushort value__;
    public static PInvokeAttributes NoMangle;
    public static PInvokeAttributes CharSetMask;
    public static PInvokeAttributes CharSetNotSpec;
    public static PInvokeAttributes CharSetAnsi;
    public static PInvokeAttributes CharSetUnicode;
    public static PInvokeAttributes CharSetAuto;
    public static PInvokeAttributes SupportsLastError;
    public static PInvokeAttributes CallConvMask;
    public static PInvokeAttributes CallConvWinapi;
    public static PInvokeAttributes CallConvCdecl;
    public static PInvokeAttributes CallConvStdCall;
    public static PInvokeAttributes CallConvThiscall;
    public static PInvokeAttributes CallConvFastcall;
}
internal class CilStrip.Mono.Cecil.PInvokeInfo : object {
    private MethodDefinition m_meth;
    private PInvokeAttributes m_attributes;
    private string m_entryPoint;
    private ModuleReference m_module;
    public MethodDefinition Method { get; }
    public PInvokeAttributes Attributes { get; public set; }
    public string EntryPoint { get; public set; }
    public ModuleReference Module { get; public set; }
    public bool IsNoMangle { get; public set; }
    public bool IsCharSetNotSpec { get; public set; }
    public bool IsCharSetAnsi { get; public set; }
    public bool IsCharSetUnicode { get; public set; }
    public bool IsCharSetAuto { get; public set; }
    public bool SupportsLastError { get; public set; }
    public bool IsCallConvWinapi { get; public set; }
    public bool IsCallConvCdecl { get; public set; }
    public bool IsCallConvStdCall { get; public set; }
    public bool IsCallConvThiscall { get; public set; }
    public bool IsCallConvFastcall { get; public set; }
    public PInvokeInfo(MethodDefinition meth);
    public PInvokeInfo(MethodDefinition meth, PInvokeAttributes attrs, string entryPoint, ModuleReference mod);
    public MethodDefinition get_Method();
    public PInvokeAttributes get_Attributes();
    public void set_Attributes(PInvokeAttributes value);
    public string get_EntryPoint();
    public void set_EntryPoint(string value);
    public ModuleReference get_Module();
    public void set_Module(ModuleReference value);
    public bool get_IsNoMangle();
    public void set_IsNoMangle(bool value);
    public bool get_IsCharSetNotSpec();
    public void set_IsCharSetNotSpec(bool value);
    public bool get_IsCharSetAnsi();
    public void set_IsCharSetAnsi(bool value);
    public bool get_IsCharSetUnicode();
    public void set_IsCharSetUnicode(bool value);
    public bool get_IsCharSetAuto();
    public void set_IsCharSetAuto(bool value);
    public bool get_SupportsLastError();
    public void set_SupportsLastError(bool value);
    public bool get_IsCallConvWinapi();
    public void set_IsCallConvWinapi(bool value);
    public bool get_IsCallConvCdecl();
    public void set_IsCallConvCdecl(bool value);
    public bool get_IsCallConvStdCall();
    public void set_IsCallConvStdCall(bool value);
    public bool get_IsCallConvThiscall();
    public void set_IsCallConvThiscall(bool value);
    public bool get_IsCallConvFastcall();
    public void set_IsCallConvFastcall(bool value);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
internal class CilStrip.Mono.Cecil.PointerType : TypeSpecification {
    public string Name { get; }
    public string FullName { get; }
    public PointerType(TypeReference pType);
    public virtual string get_Name();
    public virtual string get_FullName();
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.PropertyAttributes : Enum {
    public ushort value__;
    public static PropertyAttributes SpecialName;
    public static PropertyAttributes RTSpecialName;
    public static PropertyAttributes HasDefault;
    public static PropertyAttributes Unused;
}
internal class CilStrip.Mono.Cecil.PropertyDefinition : PropertyReference {
    private PropertyAttributes m_attributes;
    private CustomAttributeCollection m_customAttrs;
    private MethodDefinition m_getMeth;
    private MethodDefinition m_setMeth;
    private bool m_hasConstant;
    private object m_const;
    public PropertyAttributes Attributes { get; public set; }
    public bool HasCustomAttributes { get; }
    public CustomAttributeCollection CustomAttributes { get; }
    public bool HasParameters { get; }
    public ParameterDefinitionCollection Parameters { get; }
    public MethodDefinition GetMethod { get; public set; }
    public MethodDefinition SetMethod { get; public set; }
    public bool HasConstant { get; }
    public object Constant { get; public set; }
    public bool IsSpecialName { get; public set; }
    public bool IsRuntimeSpecialName { get; public set; }
    public bool HasDefault { get; public set; }
    public TypeDefinition DeclaringType { get; public set; }
    public PropertyDefinition(string name, TypeReference propertyType, PropertyAttributes attrs);
    public PropertyAttributes get_Attributes();
    public void set_Attributes(PropertyAttributes value);
    public sealed virtual bool get_HasCustomAttributes();
    public sealed virtual CustomAttributeCollection get_CustomAttributes();
    public virtual bool get_HasParameters();
    public virtual ParameterDefinitionCollection get_Parameters();
    public MethodDefinition get_GetMethod();
    public void set_GetMethod(MethodDefinition value);
    public MethodDefinition get_SetMethod();
    public void set_SetMethod(MethodDefinition value);
    private ParameterDefinitionCollection CloneParameterCollection(ParameterDefinitionCollection original);
    public sealed virtual bool get_HasConstant();
    public sealed virtual object get_Constant();
    public sealed virtual void set_Constant(object value);
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual void set_IsSpecialName(bool value);
    public sealed virtual bool get_IsRuntimeSpecialName();
    public sealed virtual void set_IsRuntimeSpecialName(bool value);
    public bool get_HasDefault();
    public void set_HasDefault(bool value);
    public sealed virtual TypeDefinition get_DeclaringType();
    public sealed virtual void set_DeclaringType(TypeDefinition value);
    public virtual PropertyDefinition Resolve();
    public static MethodDefinition CreateGetMethod(PropertyDefinition prop);
    public static MethodDefinition CreateSetMethod(PropertyDefinition prop);
    public PropertyDefinition Clone();
    internal static PropertyDefinition Clone(PropertyDefinition prop, ImportContext context);
    public virtual string ToString();
    public virtual void Accept(IReflectionVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.PropertyDefinitionCollection : CollectionBase {
    private TypeDefinition m_container;
    public PropertyDefinition Item { get; public set; }
    public TypeDefinition Container { get; }
    public PropertyDefinitionCollection(TypeDefinition container);
    public PropertyDefinition get_Item(int index);
    public void set_Item(int index, PropertyDefinition value);
    public TypeDefinition get_Container();
    public void Add(PropertyDefinition value);
    public void Clear();
    public bool Contains(PropertyDefinition value);
    public int IndexOf(PropertyDefinition value);
    public void Insert(int index, PropertyDefinition value);
    public void Remove(PropertyDefinition value);
    public void RemoveAt(int index);
    protected virtual void OnValidate(object o);
    public PropertyDefinition[] GetProperties(string name);
    private void Attach(MemberReference member);
    private void Detach(MemberReference member);
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
internal abstract class CilStrip.Mono.Cecil.PropertyReference : MemberReference {
    private TypeReference m_propertyType;
    protected ParameterDefinitionCollection m_parameters;
    public TypeReference PropertyType { get; public set; }
    public bool HasParameters { get; }
    public ParameterDefinitionCollection Parameters { get; }
    public PropertyReference(string name, TypeReference propertyType);
    public TypeReference get_PropertyType();
    public void set_PropertyType(TypeReference value);
    public abstract virtual bool get_HasParameters();
    public abstract virtual ParameterDefinitionCollection get_Parameters();
    public abstract virtual PropertyDefinition Resolve();
}
internal class CilStrip.Mono.Cecil.ReferenceType : TypeSpecification {
    public string Name { get; }
    public string FullName { get; }
    public ReferenceType(TypeReference type);
    public virtual string get_Name();
    public virtual string get_FullName();
}
internal class CilStrip.Mono.Cecil.ReflectionController : object {
    private ReflectionReader m_reader;
    private ReflectionWriter m_writer;
    private ReflectionHelper m_helper;
    private DefaultImporter m_importer;
    public ReflectionReader Reader { get; }
    public ReflectionWriter Writer { get; }
    public ReflectionHelper Helper { get; }
    public IImporter Importer { get; }
    public ReflectionController(ModuleDefinition module);
    public ReflectionReader get_Reader();
    public ReflectionWriter get_Writer();
    public ReflectionHelper get_Helper();
    public IImporter get_Importer();
}
internal class CilStrip.Mono.Cecil.ReflectionException : MetadataFormatException {
    internal ReflectionException(string message);
    internal ReflectionException(string message, String[] parameters);
    internal ReflectionException(string message, Exception inner);
}
internal class CilStrip.Mono.Cecil.ReflectionHelper : object {
    private ModuleDefinition m_module;
    public ReflectionHelper(ModuleDefinition module);
    public AssemblyNameReference ImportAssembly(Assembly asm);
    private AssemblyNameReference GetAssemblyNameReference(AssemblyName name);
    public static string GetTypeSignature(Type t);
    private static bool GetProperty(object o, string prop);
    public static bool IsGenericType(Type t);
    private static bool IsGenericParameter(Type t);
    private static bool IsGenericTypeDefinition(Type t);
    private static bool IsGenericTypeSpec(Type t);
    private static Type GetGenericTypeDefinition(Type t);
    private static Type[] GetGenericArguments(Type t);
    private GenericInstanceType GetGenericType(Type t, TypeReference element, ImportContext context);
    private static bool GenericParameterOfMethod(Type t);
    private static GenericParameter GetGenericParameter(Type t, ImportContext context);
    private TypeReference GetTypeSpec(Type t, ImportContext context);
    private TypeReference AdjustReference(Type type, TypeReference reference);
    public TypeReference ImportSystemType(Type t, ImportContext context);
    private static string GetMethodBaseSignature(MethodBase meth, Type declaringType, Type retType);
    private static bool IsGenericMethod(MethodBase mb);
    private static bool IsGenericMethodDefinition(MethodBase mb);
    private static bool IsGenericMethodSpec(MethodBase mb);
    private static Type[] GetGenericArguments(MethodInfo mi);
    private static int GetMetadataToken(MethodInfo mi);
    private MethodReference ImportGenericInstanceMethod(MethodInfo mi, ImportContext context);
    private MethodReference ImportMethodBase(MethodBase mb, Type retType, ImportContext context);
    public MethodReference ImportConstructorInfo(ConstructorInfo ci, ImportContext context);
    public MethodReference ImportMethodInfo(MethodInfo mi, ImportContext context);
    private static string GetFieldSignature(FieldInfo field);
    public FieldReference ImportFieldInfo(FieldInfo fi, ImportContext context);
    private MemberReference GetMemberReference(string signature);
}
internal abstract class CilStrip.Mono.Cecil.ReflectionReader : BaseReflectionReader {
    private ModuleDefinition m_module;
    private ImageReader m_reader;
    private SecurityDeclarationReader m_secReader;
    protected MetadataTableReader m_tableReader;
    protected MetadataRoot m_root;
    protected TablesHeap m_tHeap;
    protected bool m_checkDeleted;
    protected TypeDefinition[] m_typeDefs;
    protected TypeReference[] m_typeRefs;
    protected TypeReference[] m_typeSpecs;
    protected MethodDefinition[] m_meths;
    protected FieldDefinition[] m_fields;
    protected EventDefinition[] m_events;
    protected PropertyDefinition[] m_properties;
    protected MemberReference[] m_memberRefs;
    protected ParameterDefinition[] m_parameters;
    protected GenericParameter[] m_genericParameters;
    protected GenericInstanceMethod[] m_methodSpecs;
    private bool m_isCorlib;
    private AssemblyNameReference m_corlib;
    protected SignatureReader m_sigReader;
    protected CodeReader m_codeReader;
    protected ISymbolReader m_symbolReader;
    internal AssemblyNameReference Corlib { get; }
    public ModuleDefinition Module { get; }
    public SignatureReader SigReader { get; }
    public MetadataTableReader TableReader { get; }
    public CodeReader Code { get; }
    public ISymbolReader SymbolReader { get; public set; }
    public MetadataRoot MetadataRoot { get; }
    public ReflectionReader(ModuleDefinition module);
    internal AssemblyNameReference get_Corlib();
    public ModuleDefinition get_Module();
    public SignatureReader get_SigReader();
    public MetadataTableReader get_TableReader();
    public CodeReader get_Code();
    public ISymbolReader get_SymbolReader();
    public void set_SymbolReader(ISymbolReader value);
    public MetadataRoot get_MetadataRoot();
    public TypeDefinition GetTypeDefAt(UInt32 rid);
    public TypeReference GetTypeRefAt(UInt32 rid);
    public TypeReference GetTypeSpecAt(UInt32 rid, GenericContext context);
    private static bool IsGenericTypeSpec(ElementType etype);
    private TypeReference CreateTypeSpecFromSig(TypeSpec ts, int index, GenericContext context);
    public FieldDefinition GetFieldDefAt(UInt32 rid);
    public MethodDefinition GetMethodDefAt(UInt32 rid);
    protected bool IsDeleted(IMemberDefinition member);
    public MemberReference GetMemberRefAt(UInt32 rid, GenericContext context);
    private MethodReference CreateMethodReferenceFromSig(MethodSig ms, string name, TypeReference declaringType, GenericContext context);
    public static void CreateSentinelIfNeeded(IMethodSignature meth, MethodSig signature);
    public PropertyDefinition GetPropertyDefAt(UInt32 rid);
    public EventDefinition GetEventDefAt(UInt32 rid);
    public ParameterDefinition GetParamDefAt(UInt32 rid);
    public GenericParameter GetGenericParameterAt(UInt32 rid);
    public GenericInstanceMethod GetMethodSpecAt(UInt32 rid, GenericContext context);
    public TypeReference GetTypeDefOrRef(MetadataToken token, GenericContext context);
    public TypeReference SearchCoreType(string fullName);
    public IMetadataTokenProvider LookupByToken(MetadataToken token);
    public CustomAttribute GetCustomAttribute(MethodReference ctor, Byte[] data, bool resolve);
    public CustomAttribute GetCustomAttribute(MethodReference ctor, Byte[] data);
    public virtual void VisitModuleDefinition(ModuleDefinition mod);
    public virtual void VisitTypeDefinitionCollection(TypeDefinitionCollection types);
    private void AddTypeRef(TypeRefTable typesRef, int i);
    private void ReadTypeSpecs();
    private void ReadMethodSpecs();
    private void ReadGenericParameters();
    private void ReadAllFields();
    private void ReadMethods();
    private void CompleteMethods();
    private void ReadMemberReferences();
    public virtual void VisitExternTypeCollection(ExternTypeCollection externs);
    private IMetadataScope GetExportedTypeScope(MetadataToken scope);
    private static object GetFixedArgValue(FixedArg fa);
    private TypeReference GetFixedArgType(FixedArg fa);
    private TypeReference GetNamedArgType(NamedArg na);
    protected CustomAttribute BuildCustomAttribute(MethodReference ctor, Byte[] data, CustomAttrib sig);
    private void CompleteParameter(ParameterDefinition parameter, Param signature, GenericContext context);
    public ParameterDefinition BuildParameterDefinition(int sequence, Param psig, GenericContext context);
    public ParameterDefinition BuildParameterDefinition(string name, int sequence, ParameterAttributes attrs, Param psig, GenericContext context);
    protected SecurityDeclaration BuildSecurityDeclaration(DeclSecurityRow dsRow);
    public SecurityDeclaration BuildSecurityDeclaration(SecurityAction action, Byte[] permset);
    protected MarshalSpec BuildMarshalDesc(MarshalSig ms, IHasMarshalSpec container);
    public TypeReference GetModifierType(CustomMod[] cmods, TypeReference type);
    public MethodReturnType GetMethodReturnType(MethodSig msig, GenericContext context);
    public TypeReference GetTypeRefFromSig(SigType t, GenericContext context);
    private TypeReference GetGenericArg(GenericArg arg, GenericContext context);
    private static bool IsOdd(int i);
    protected object GetConstant(UInt32 pos, ElementType elemType);
    private static object GetConstantLittleEndian(ElementType elemType, Byte[] constant);
    private static object GetConstantBigEndian(ElementType elemType, Byte[] constant);
    protected void SetInitialValue(FieldDefinition field);
}
internal class CilStrip.Mono.Cecil.ReflectionWriter : BaseReflectionVisitor {
    private StructureWriter m_structureWriter;
    private ModuleDefinition m_mod;
    private SignatureWriter m_sigWriter;
    private CodeWriter m_codeWriter;
    private MetadataWriter m_mdWriter;
    private MetadataTableWriter m_tableWriter;
    private MetadataRowWriter m_rowWriter;
    private bool m_saveSymbols;
    private string m_asmOutput;
    private ISymbolWriter m_symbolWriter;
    private ArrayList m_typeDefStack;
    private ArrayList m_methodStack;
    private ArrayList m_fieldStack;
    private ArrayList m_genericParamStack;
    private IDictionary m_typeSpecTokenCache;
    private IDictionary m_memberRefTokenCache;
    private UInt32 m_methodIndex;
    private UInt32 m_fieldIndex;
    private UInt32 m_paramIndex;
    private UInt32 m_eventIndex;
    private UInt32 m_propertyIndex;
    private MemoryBinaryWriter m_constWriter;
    public StructureWriter StructureWriter { get; public set; }
    public CodeWriter CodeWriter { get; }
    public bool SaveSymbols { get; public set; }
    public string OutputFile { get; public set; }
    public ISymbolWriter SymbolWriter { get; public set; }
    public SignatureWriter SignatureWriter { get; }
    public MetadataWriter MetadataWriter { get; }
    public MetadataTableWriter MetadataTableWriter { get; }
    public MetadataRowWriter MetadataRowWriter { get; }
    public ReflectionWriter(ModuleDefinition mod);
    public StructureWriter get_StructureWriter();
    public void set_StructureWriter(StructureWriter value);
    public CodeWriter get_CodeWriter();
    public bool get_SaveSymbols();
    public void set_SaveSymbols(bool value);
    public string get_OutputFile();
    public void set_OutputFile(string value);
    public ISymbolWriter get_SymbolWriter();
    public void set_SymbolWriter(ISymbolWriter value);
    public SignatureWriter get_SignatureWriter();
    public MetadataWriter get_MetadataWriter();
    public MetadataTableWriter get_MetadataTableWriter();
    public MetadataRowWriter get_MetadataRowWriter();
    private void Initialize();
    public TypeReference GetCoreType(string name);
    public static UInt32 GetRidFor(IMetadataTokenProvider tp);
    public UInt32 GetRidFor(AssemblyNameReference asmName);
    public UInt32 GetRidFor(ModuleDefinition mod);
    public UInt32 GetRidFor(ModuleReference modRef);
    private static bool IsTypeSpec(TypeReference type);
    public MetadataToken GetTypeDefOrRefToken(TypeReference type);
    public MetadataToken GetMemberRefToken(MemberReference member);
    public MetadataToken GetMethodSpecToken(GenericInstanceMethod gim);
    public virtual void VisitModuleDefinition(ModuleDefinition mod);
    public virtual void VisitTypeDefinitionCollection(TypeDefinitionCollection types);
    public void CompleteTypeDefinitions();
    public virtual void VisitTypeReferenceCollection(TypeReferenceCollection refs);
    public virtual void VisitGenericParameterCollection(GenericParameterCollection parameters);
    public virtual void VisitInterfaceCollection(InterfaceCollection interfaces);
    public virtual void VisitExternTypeCollection(ExternTypeCollection externs);
    private MetadataToken GetExportedTypeScope(TypeDefinition t);
    public virtual void VisitOverrideCollection(OverrideCollection meths);
    public virtual void VisitNestedTypeCollection(NestedTypeCollection nestedTypes);
    public virtual void VisitParameterDefinitionCollection(ParameterDefinitionCollection parameters);
    private void InsertParameter(ParamTable pTable, ParameterDefinition param, ushort seq);
    private static bool RequiresParameterRow(MethodReturnType mrt);
    public virtual void VisitMethodDefinition(MethodDefinition method);
    public virtual void VisitPInvokeInfo(PInvokeInfo pinvk);
    public virtual void VisitEventDefinitionCollection(EventDefinitionCollection events);
    public virtual void VisitEventDefinition(EventDefinition evt);
    public virtual void VisitFieldDefinition(FieldDefinition field);
    public virtual void VisitPropertyDefinitionCollection(PropertyDefinitionCollection properties);
    public virtual void VisitPropertyDefinition(PropertyDefinition property);
    public virtual void VisitSecurityDeclarationCollection(SecurityDeclarationCollection secDecls);
    public virtual void VisitCustomAttributeCollection(CustomAttributeCollection customAttrs);
    public virtual void VisitMarshalSpec(MarshalSpec marshalSpec);
    private void WriteConstant(IHasConstant hc, TypeReference type);
    private void WriteLayout(FieldDefinition field);
    private void WriteLayout(TypeDefinition type);
    private void WriteSemantic(MethodSemanticsAttributes attrs, IMetadataTokenProvider member, MethodDefinition meth);
    private void SortTables();
    private void CompleteGenericTables();
    public virtual void TerminateModuleDefinition(ModuleDefinition module);
    public static ElementType GetCorrespondingType(string fullName);
    private Byte[] EncodeConstant(ElementType et, object value);
    public SigType GetSigType(TypeReference type);
    public GenericArg GetGenericArgSig(TypeReference type);
    public CustomMod[] GetCustomMods(TypeReference type);
    public Signature GetMemberRefSig(MemberReference member);
    public FieldSig GetFieldSig(FieldReference field);
    private Param[] GetParametersSig(ParameterDefinitionCollection parameters);
    private void CompleteMethodSig(IMethodSignature meth, MethodSig sig);
    private static bool IsByReferenceType(TypeReference type);
    public MethodRefSig GetMethodRefSig(IMethodSignature meth);
    public MethodDefSig GetMethodDefSig(IMethodSignature meth);
    public PropertySig GetPropertySig(PropertyDefinition prop);
    public TypeSpec GetTypeSpecSig(TypeReference type);
    public MethodSpec GetMethodSpecSig(GenericInstanceMethod gim);
    private static string GetObjectTypeName(object o);
    private static Elem CreateElem(TypeReference type, object value);
    private static FixedArg CreateFixedArg(TypeReference type, object value);
    private static NamedArg CreateNamedArg(TypeReference type, string name, object value, bool field);
    public static CustomAttrib GetCustomAttributeSig(CustomAttribute ca);
    private static MarshalSig GetMarshalSig(MarshalSpec mSpec);
    public void WriteSymbols(ModuleDefinition module);
    private void WriteSymbols(MethodDefinition meth);
}
internal abstract class CilStrip.Mono.Cecil.Resource : object {
    private string m_name;
    private ManifestResourceAttributes m_attributes;
    private IDictionary m_annotations;
    public string Name { get; public set; }
    public ManifestResourceAttributes Flags { get; public set; }
    private IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.Annotations { get; }
    public bool IsPublic { get; public set; }
    public bool IsPrivate { get; public set; }
    internal Resource(string name, ManifestResourceAttributes attributes);
    public string get_Name();
    public void set_Name(string value);
    public ManifestResourceAttributes get_Flags();
    public void set_Flags(ManifestResourceAttributes value);
    private sealed virtual override IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.get_Annotations();
    public bool get_IsPublic();
    public void set_IsPublic(bool value);
    public bool get_IsPrivate();
    public void set_IsPrivate(bool value);
    public abstract virtual void Accept(IReflectionStructureVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.ResourceCollection : CollectionBase {
    private ModuleDefinition m_container;
    public Resource Item { get; public set; }
    public ModuleDefinition Container { get; }
    public ResourceCollection(ModuleDefinition container);
    public Resource get_Item(int index);
    public void set_Item(int index, Resource value);
    public ModuleDefinition get_Container();
    public void Add(Resource value);
    public bool Contains(Resource value);
    public int IndexOf(Resource value);
    public void Insert(int index, Resource value);
    public void Remove(Resource value);
    protected virtual void OnValidate(object o);
    public sealed virtual void Accept(IReflectionStructureVisitor visitor);
}
internal class CilStrip.Mono.Cecil.SafeArraySpec : MarshalSpec {
    private VariantType m_elemType;
    public VariantType ElemType { get; public set; }
    public SafeArraySpec(IHasMarshalSpec container);
    public VariantType get_ElemType();
    public void set_ElemType(VariantType value);
    public virtual MarshalSpec CloneInto(IHasMarshalSpec container);
}
internal enum CilStrip.Mono.Cecil.SecurityAction : Enum {
    public short value__;
    public static SecurityAction Request;
    public static SecurityAction Demand;
    public static SecurityAction Assert;
    public static SecurityAction Deny;
    public static SecurityAction PermitOnly;
    public static SecurityAction LinkDemand;
    public static SecurityAction InheritDemand;
    public static SecurityAction RequestMinimum;
    public static SecurityAction RequestOptional;
    public static SecurityAction RequestRefuse;
    public static SecurityAction PreJitGrant;
    public static SecurityAction PreJitDeny;
    public static SecurityAction NonCasDemand;
    public static SecurityAction NonCasLinkDemand;
    public static SecurityAction NonCasInheritance;
}
internal class CilStrip.Mono.Cecil.SecurityDeclaration : object {
    private SecurityAction m_action;
    private SecurityDeclarationReader m_reader;
    private IDictionary m_annotations;
    private PermissionSet m_permSet;
    private bool m_resolved;
    private Byte[] m_blob;
    public SecurityAction Action { get; public set; }
    public PermissionSet PermissionSet { get; public set; }
    public bool Resolved { get; public set; }
    public Byte[] Blob { get; public set; }
    private IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.Annotations { get; }
    public SecurityDeclaration(SecurityAction action);
    internal SecurityDeclaration(SecurityAction action, SecurityDeclarationReader reader);
    public SecurityAction get_Action();
    public void set_Action(SecurityAction value);
    public PermissionSet get_PermissionSet();
    public void set_PermissionSet(PermissionSet value);
    public sealed virtual bool get_Resolved();
    public void set_Resolved(bool value);
    public sealed virtual Byte[] get_Blob();
    public void set_Blob(Byte[] value);
    private sealed virtual override IDictionary CilStrip.Mono.Cecil.IAnnotationProvider.get_Annotations();
    public SecurityDeclaration Clone();
    internal static SecurityDeclaration Clone(SecurityDeclaration sec);
    public sealed virtual bool Resolve();
    public sealed virtual void Accept(IReflectionVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.SecurityDeclarationCollection : object {
    private IDictionary m_items;
    private IHasSecurity m_container;
    public SecurityDeclaration Item { get; public set; }
    public SecurityDeclaration Item { get; public set; }
    public IHasSecurity Container { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public SecurityDeclarationCollection(IHasSecurity container);
    public SecurityDeclaration get_Item(int index);
    public void set_Item(int index, SecurityDeclaration value);
    public SecurityDeclaration get_Item(SecurityAction action);
    public void set_Item(SecurityAction action, SecurityDeclaration value);
    public IHasSecurity get_Container();
    public int get_Count();
    public bool get_IsSynchronized();
    public object get_SyncRoot();
    public void Add(SecurityDeclaration value);
    public void Clear();
    public bool Contains(SecurityAction action);
    public bool Contains(SecurityDeclaration value);
    public void Remove(SecurityAction action);
    public void CopyTo(Array ary, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void Accept(IReflectionVisitor visitor);
    private void SetHasSecurity(bool value);
}
internal class CilStrip.Mono.Cecil.SecurityDeclarationReader : object {
    private SecurityParser m_parser;
    private SignatureReader sr;
    public SecurityParser Parser { get; }
    public SecurityDeclarationReader(MetadataRoot root, ReflectionReader reader);
    public SecurityParser get_Parser();
    public SecurityDeclaration FromByteArray(SecurityAction action, Byte[] declaration);
    private static bool IsEmptyDeclaration(Byte[] declaration);
    public SecurityDeclaration FromByteArray(SecurityAction action, Byte[] declaration, bool resolve);
    private SecurityAttribute CreateSecurityAttribute(SecurityAction action, BinaryReader br, Byte[] permset, int pos, Int32& start, bool resolve);
}
internal class CilStrip.Mono.Cecil.SentinelType : TypeSpecification {
    public SentinelType(TypeReference elementType);
}
internal class CilStrip.Mono.Cecil.Signatures.ARRAY : SigType {
    public CustomMod[] CustomMods;
    public SigType Type;
    public ArrayShape Shape;
}
internal class CilStrip.Mono.Cecil.Signatures.ArrayShape : object {
    public int Rank;
    public int NumSizes;
    public Int32[] Sizes;
    public int NumLoBounds;
    public Int32[] LoBounds;
}
internal abstract class CilStrip.Mono.Cecil.Signatures.BaseSignatureVisitor : object {
    public virtual void VisitMethodDefSig(MethodDefSig methodDef);
    public virtual void VisitMethodRefSig(MethodRefSig methodRef);
    public virtual void VisitFieldSig(FieldSig field);
    public virtual void VisitPropertySig(PropertySig property);
    public virtual void VisitLocalVarSig(LocalVarSig localvar);
}
internal class CilStrip.Mono.Cecil.Signatures.CLASS : SigType {
    public MetadataToken Type;
}
internal enum CilStrip.Mono.Cecil.Signatures.Constraint : Enum {
    public byte value__;
    public static Constraint None;
    public static Constraint Pinned;
}
internal class CilStrip.Mono.Cecil.Signatures.CustomAttrib : object {
    public static ushort StdProlog;
    public MethodReference Constructor;
    public ushort Prolog;
    public FixedArg[] FixedArgs;
    public ushort NumNamed;
    public NamedArg[] NamedArgs;
    public bool Read;
    public CustomAttrib(MethodReference ctor);
}
internal class CilStrip.Mono.Cecil.Signatures.CustomMod : object {
    public static CustomMod[] EmptyCustomMod;
    public CMODType CMOD;
    public MetadataToken TypeDefOrRef;
    private static CustomMod();
}
internal class CilStrip.Mono.Cecil.Signatures.FieldSig : Signature {
    public bool Field;
    public CustomMod[] CustomMods;
    public SigType Type;
    public FieldSig(UInt32 blobIndex);
    public virtual void Accept(ISignatureVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Signatures.FNPTR : SigType {
    public MethodSig Method;
}
internal class CilStrip.Mono.Cecil.Signatures.GenericArg : object {
    public CustomMod[] CustomMods;
    public SigType Type;
    public GenericArg(SigType type);
}
internal class CilStrip.Mono.Cecil.Signatures.GENERICINST : SigType {
    public bool ValueType;
    public MetadataToken Type;
    public GenericInstSignature Signature;
}
internal class CilStrip.Mono.Cecil.Signatures.GenericInstSignature : object {
    public int Arity;
    public GenericArg[] Types;
}
internal abstract class CilStrip.Mono.Cecil.Signatures.InputOutputItem : object {
    public CustomMod[] CustomMods;
    public bool ByRef;
    public SigType Type;
    public bool TypedByRef;
}
internal interface CilStrip.Mono.Cecil.Signatures.ISignatureVisitable {
    public abstract virtual void Accept(ISignatureVisitor visitor);
}
internal interface CilStrip.Mono.Cecil.Signatures.ISignatureVisitor {
    public abstract virtual void VisitMethodDefSig(MethodDefSig methodDef);
    public abstract virtual void VisitMethodRefSig(MethodRefSig methodRef);
    public abstract virtual void VisitFieldSig(FieldSig field);
    public abstract virtual void VisitPropertySig(PropertySig property);
    public abstract virtual void VisitLocalVarSig(LocalVarSig localvar);
}
internal class CilStrip.Mono.Cecil.Signatures.LocalVarSig : Signature {
    public bool Local;
    public int Count;
    public LocalVariable[] LocalVariables;
    public LocalVarSig(UInt32 blobIndex);
    public virtual void Accept(ISignatureVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Signatures.MarshalSig : object {
    public NativeType NativeInstrinsic;
    public IMarshalSigSpec Spec;
    public MarshalSig(NativeType nt);
}
internal class CilStrip.Mono.Cecil.Signatures.MethodDefSig : MethodRefSig {
    public int GenericParameterCount;
    public MethodDefSig(UInt32 blobIndex);
    public virtual void Accept(ISignatureVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Signatures.MethodRefSig : MethodSig {
    public int Sentinel;
    public MethodRefSig(UInt32 blobIndex);
    public virtual void Accept(ISignatureVisitor visitor);
}
internal abstract class CilStrip.Mono.Cecil.Signatures.MethodSig : Signature {
    public bool HasThis;
    public bool ExplicitThis;
    public MethodCallingConvention MethCallConv;
    public int ParamCount;
    public RetType RetType;
    public Param[] Parameters;
    public MethodSig(UInt32 blobIndex);
}
internal class CilStrip.Mono.Cecil.Signatures.MethodSpec : object {
    public GenericInstSignature Signature;
    public MethodSpec(GenericInstSignature sig);
}
internal class CilStrip.Mono.Cecil.Signatures.MVAR : SigType {
    public int Index;
    public MVAR(int index);
}
internal class CilStrip.Mono.Cecil.Signatures.Param : InputOutputItem {
}
internal class CilStrip.Mono.Cecil.Signatures.PropertySig : Signature {
    public bool Property;
    public int ParamCount;
    public CustomMod[] CustomMods;
    public SigType Type;
    public Param[] Parameters;
    public PropertySig(UInt32 blobIndex);
    public virtual void Accept(ISignatureVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Signatures.PTR : SigType {
    public CustomMod[] CustomMods;
    public SigType PtrType;
    public bool Void;
}
internal class CilStrip.Mono.Cecil.Signatures.RetType : InputOutputItem {
    public bool Void;
}
internal abstract class CilStrip.Mono.Cecil.Signatures.Signature : object {
    public byte CallingConvention;
    public UInt32 BlobIndex;
    public Signature(UInt32 blobIndex);
    public abstract virtual void Accept(ISignatureVisitor visitor);
}
internal class CilStrip.Mono.Cecil.Signatures.SignatureReader : BaseSignatureVisitor {
    private MetadataRoot m_root;
    private ReflectionReader m_reflectReader;
    private Byte[] m_blobData;
    private IDictionary m_signatures;
    private IAssemblyResolver AssemblyResolver { get; }
    public SignatureReader(MetadataRoot root, ReflectionReader reflectReader);
    private IAssemblyResolver get_AssemblyResolver();
    public FieldSig GetFieldSig(UInt32 index);
    public PropertySig GetPropSig(UInt32 index);
    public MethodDefSig GetMethodDefSig(UInt32 index);
    public MethodRefSig GetMethodRefSig(UInt32 index);
    public TypeSpec GetTypeSpec(UInt32 index);
    public MethodSpec GetMethodSpec(UInt32 index);
    public LocalVarSig GetLocalVarSig(UInt32 index);
    public CustomAttrib GetCustomAttrib(UInt32 index, MethodReference ctor);
    public CustomAttrib GetCustomAttrib(UInt32 index, MethodReference ctor, bool resolve);
    public CustomAttrib GetCustomAttrib(Byte[] data, MethodReference ctor);
    public CustomAttrib GetCustomAttrib(Byte[] data, MethodReference ctor, bool resolve);
    public Signature GetMemberRefSig(TokenType tt, UInt32 index);
    public MarshalSig GetMarshalSig(UInt32 index);
    public MethodSig GetStandAloneMethodSig(UInt32 index);
    public virtual void VisitMethodDefSig(MethodDefSig methodDef);
    public virtual void VisitMethodRefSig(MethodRefSig methodRef);
    public virtual void VisitFieldSig(FieldSig field);
    public virtual void VisitPropertySig(PropertySig property);
    public virtual void VisitLocalVarSig(LocalVarSig localvar);
    private void ReadMethodDefSig(MethodDefSig methodDef, Byte[] data, int pos, Int32& start);
    private void ReadMethodRefSig(MethodRefSig methodRef, Byte[] data, int pos, Int32& start);
    private LocalVariable[] ReadLocalVariables(int length, Byte[] data, int pos);
    private LocalVariable ReadLocalVariable(Byte[] data, int pos, Int32& start);
    private TypeSpec ReadTypeSpec(Byte[] data, int pos);
    private MethodSpec ReadMethodSpec(Byte[] data, int pos);
    private RetType ReadRetType(Byte[] data, int pos, Int32& start);
    private static CustomMod[] CombineCustomMods(CustomMod[] original, CustomMod[] next);
    private Param[] ReadParameters(int length, Byte[] data, int pos, Int32& start);
    private Param[] ReadParameters(int length, Byte[] data, int pos, Int32& start, Int32& sentinelpos);
    private Param ReadParameter(Byte[] data, int pos, Int32& start);
    private SigType ReadType(Byte[] data, int pos, Int32& start);
    private GenericInstSignature ReadGenericInstSignature(Byte[] data, int pos, Int32& start);
    private GenericArg ReadGenericArg(Byte[] data, int pos, Int32& start);
    private CustomMod[] ReadCustomMods(Byte[] data, int pos, Int32& start);
    private CustomMod ReadCustomMod(Byte[] data, int pos, Int32& start);
    private CustomAttrib ReadCustomAttrib(int pos, MethodReference ctor, bool resolve);
    private CustomAttrib ReadCustomAttrib(BinaryReader br, Byte[] data, MethodReference ctor, bool resolve);
    private FixedArg ReadFixedArg(Byte[] data, BinaryReader br, TypeReference param, Boolean& read, bool resolve);
    private TypeReference CreateEnumTypeReference(string enumName);
    private TypeReference ReadTypeReference(Byte[] data, BinaryReader br, ElementType& elemType);
    private TypeReference TypeReferenceFromElemType(ElementType elemType);
    internal NamedArg ReadNamedArg(Byte[] data, BinaryReader br, Boolean& read, bool resolve);
    private Elem ReadElem(Byte[] data, BinaryReader br, TypeReference elemType, Boolean& read, bool resolve);
    private TypeReference GetEnumUnderlyingType(TypeReference enumType, bool resolve);
    private bool ReadSimpleValue(BinaryReader br, Elem& elem, TypeReference type);
    private MarshalSig ReadMarshalSig(Byte[] data);
    internal static string ReadUTF8String(Byte[] data, BinaryReader br);
    internal static string ReadUTF8String(Byte[] data, int pos, Int32& start);
}
internal class CilStrip.Mono.Cecil.Signatures.SignatureWriter : BaseSignatureVisitor {
    private MetadataWriter m_mdWriter;
    private MemoryBinaryWriter m_sigWriter;
    public SignatureWriter(MetadataWriter mdWriter);
    private UInt32 GetPointer();
    public UInt32 AddMethodDefSig(MethodDefSig methSig);
    public UInt32 AddMethodRefSig(MethodRefSig methSig);
    public UInt32 AddPropertySig(PropertySig ps);
    public UInt32 AddFieldSig(FieldSig fSig);
    public UInt32 AddLocalVarSig(LocalVarSig lvs);
    private UInt32 AddSignature(Signature s);
    public UInt32 AddTypeSpec(TypeSpec ts);
    public UInt32 AddMethodSpec(MethodSpec ms);
    public UInt32 AddMarshalSig(MarshalSig ms);
    public UInt32 AddCustomAttribute(CustomAttrib ca, MethodReference ctor);
    public Byte[] CompressCustomAttribute(CustomAttrib ca, MethodReference ctor);
    public Byte[] CompressFieldSig(FieldSig field);
    public Byte[] CompressLocalVar(LocalVariable var);
    private void CompressCustomAttribute(CustomAttrib ca, MethodReference ctor, MemoryBinaryWriter writer);
    public virtual void VisitMethodDefSig(MethodDefSig methodDef);
    public virtual void VisitMethodRefSig(MethodRefSig methodRef);
    public virtual void VisitFieldSig(FieldSig field);
    public virtual void VisitPropertySig(PropertySig property);
    public virtual void VisitLocalVarSig(LocalVarSig localvar);
    private void Write(LocalVariable[] vars);
    private void Write(LocalVariable var);
    private void Write(RetType retType);
    private void Write(Param[] parameters, int sentinel);
    private void Write(Param[] parameters);
    private void Write(ElementType et);
    private void Write(SigType t);
    private void Write(TypeSpec ts);
    private void Write(MethodSpec ms);
    private void Write(GenericInstSignature gis);
    private void Write(GenericArg arg);
    private void Write(Param p);
    private void Write(CustomMod[] customMods);
    private void Write(CustomMod cm);
    private void Write(MarshalSig ms);
    private void Write(CustomAttrib ca, MethodReference ctor, MemoryBinaryWriter writer);
    private void Write(FixedArg fa, MemoryBinaryWriter writer);
    private static string GetEnumFullName(TypeReference type);
    private void Write(NamedArg na, MemoryBinaryWriter writer);
    private static ElementType GetElementTypeFromTypeCode(TypeCode tc);
    private void Write(Elem elem, MemoryBinaryWriter writer);
    private void Write(string s);
    private void Write(int i);
}
internal class CilStrip.Mono.Cecil.Signatures.SigType : object {
    public ElementType ElementType;
    public SigType(ElementType elem);
}
internal class CilStrip.Mono.Cecil.Signatures.SZARRAY : SigType {
    public CustomMod[] CustomMods;
    public SigType Type;
}
internal class CilStrip.Mono.Cecil.Signatures.TypeSpec : object {
    public CustomMod[] CustomMods;
    public SigType Type;
}
internal class CilStrip.Mono.Cecil.Signatures.VALUETYPE : SigType {
    public MetadataToken Type;
}
internal class CilStrip.Mono.Cecil.Signatures.VAR : SigType {
    public int Index;
    public VAR(int index);
}
internal class CilStrip.Mono.Cecil.StructureReader : BaseStructureVisitor {
    private ImageReader m_ir;
    private Image m_img;
    private bool m_manifestOnly;
    private AssemblyDefinition m_asmDef;
    private ModuleDefinition m_module;
    private MetadataStreamCollection m_streams;
    private TablesHeap m_tHeap;
    private MetadataTableReader m_tableReader;
    public bool ManifestOnly { get; }
    public ImageReader ImageReader { get; }
    public Image Image { get; }
    public StructureReader(ImageReader ir);
    public StructureReader(ImageReader ir, bool manifestOnly);
    public bool get_ManifestOnly();
    public ImageReader get_ImageReader();
    public Image get_Image();
    private Byte[] ReadBlob(UInt32 pointer);
    private string ReadString(UInt32 pointer);
    public virtual void VisitAssemblyDefinition(AssemblyDefinition asm);
    public virtual void VisitAssemblyNameDefinition(AssemblyNameDefinition name);
    public virtual void VisitAssemblyNameReferenceCollection(AssemblyNameReferenceCollection names);
    public virtual void VisitResourceCollection(ResourceCollection resources);
    public virtual void VisitModuleDefinitionCollection(ModuleDefinitionCollection modules);
    public virtual void VisitModuleReferenceCollection(ModuleReferenceCollection modules);
    public virtual void TerminateAssemblyDefinition(AssemblyDefinition asm);
}
internal class CilStrip.Mono.Cecil.StructureWriter : BaseStructureVisitor {
    private MetadataWriter m_mdWriter;
    private MetadataTableWriter m_tableWriter;
    private MetadataRowWriter m_rowWriter;
    private AssemblyDefinition m_asm;
    private BinaryWriter m_binaryWriter;
    public AssemblyDefinition Assembly { get; }
    public StructureWriter(AssemblyDefinition asm, BinaryWriter writer);
    public AssemblyDefinition get_Assembly();
    private static void ResetImage(ModuleDefinition mod);
    public BinaryWriter GetWriter();
    public virtual void VisitAssemblyDefinition(AssemblyDefinition asm);
    public virtual void VisitAssemblyNameDefinition(AssemblyNameDefinition name);
    public virtual void VisitAssemblyNameReferenceCollection(AssemblyNameReferenceCollection references);
    public virtual void VisitAssemblyNameReference(AssemblyNameReference name);
    public virtual void VisitResourceCollection(ResourceCollection resources);
    public virtual void VisitEmbeddedResource(EmbeddedResource res);
    public virtual void VisitLinkedResource(LinkedResource res);
    public virtual void VisitAssemblyLinkedResource(AssemblyLinkedResource res);
    private void AddManifestResource(UInt32 offset, string name, ManifestResourceAttributes flags, MetadataToken impl);
    public virtual void VisitModuleDefinitionCollection(ModuleDefinitionCollection modules);
    public virtual void VisitModuleDefinition(ModuleDefinition module);
    public virtual void VisitModuleReferenceCollection(ModuleReferenceCollection modules);
    public virtual void VisitModuleReference(ModuleReference module);
    public virtual void TerminateAssemblyDefinition(AssemblyDefinition asm);
}
internal class CilStrip.Mono.Cecil.TableComparers : object {
}
internal enum CilStrip.Mono.Cecil.TargetRuntime : Enum {
    public int value__;
    public static TargetRuntime NET_1_0;
    public static TargetRuntime NET_1_1;
    public static TargetRuntime NET_2_0;
    public static TargetRuntime NET_4_0;
}
[FlagsAttribute]
internal enum CilStrip.Mono.Cecil.TypeAttributes : Enum {
    public UInt32 value__;
    public static TypeAttributes VisibilityMask;
    public static TypeAttributes NotPublic;
    public static TypeAttributes Public;
    public static TypeAttributes NestedPublic;
    public static TypeAttributes NestedPrivate;
    public static TypeAttributes NestedFamily;
    public static TypeAttributes NestedAssembly;
    public static TypeAttributes NestedFamANDAssem;
    public static TypeAttributes NestedFamORAssem;
    public static TypeAttributes LayoutMask;
    public static TypeAttributes AutoLayout;
    public static TypeAttributes SequentialLayout;
    public static TypeAttributes ExplicitLayout;
    public static TypeAttributes ClassSemanticMask;
    public static TypeAttributes Class;
    public static TypeAttributes Interface;
    public static TypeAttributes Abstract;
    public static TypeAttributes Sealed;
    public static TypeAttributes SpecialName;
    public static TypeAttributes Import;
    public static TypeAttributes Serializable;
    public static TypeAttributes StringFormatMask;
    public static TypeAttributes AnsiClass;
    public static TypeAttributes UnicodeClass;
    public static TypeAttributes AutoClass;
    public static TypeAttributes BeforeFieldInit;
    public static TypeAttributes RTSpecialName;
    public static TypeAttributes HasSecurity;
    public static TypeAttributes Forwarder;
}
internal class CilStrip.Mono.Cecil.TypeDefinition : TypeReference {
    private TypeAttributes m_attributes;
    private TypeReference m_baseType;
    private bool m_hasInfo;
    private ushort m_packingSize;
    private UInt32 m_classSize;
    private InterfaceCollection m_interfaces;
    private NestedTypeCollection m_nestedTypes;
    private MethodDefinitionCollection m_methods;
    private ConstructorCollection m_ctors;
    private FieldDefinitionCollection m_fields;
    private EventDefinitionCollection m_events;
    private PropertyDefinitionCollection m_properties;
    private SecurityDeclarationCollection m_secDecls;
    public TypeAttributes Attributes { get; public set; }
    public TypeReference BaseType { get; public set; }
    public bool HasLayoutInfo { get; }
    public ushort PackingSize { get; public set; }
    public UInt32 ClassSize { get; public set; }
    public bool HasInterfaces { get; }
    public InterfaceCollection Interfaces { get; }
    public bool HasNestedTypes { get; }
    public NestedTypeCollection NestedTypes { get; }
    public bool HasMethods { get; }
    public MethodDefinitionCollection Methods { get; }
    public bool HasConstructors { get; }
    public ConstructorCollection Constructors { get; }
    public bool HasFields { get; }
    public FieldDefinitionCollection Fields { get; }
    public bool HasEvents { get; }
    public EventDefinitionCollection Events { get; }
    public bool HasProperties { get; }
    public PropertyDefinitionCollection Properties { get; }
    public bool HasSecurityDeclarations { get; }
    public SecurityDeclarationCollection SecurityDeclarations { get; }
    public bool IsNotPublic { get; public set; }
    public bool IsPublic { get; public set; }
    public bool IsNestedPublic { get; public set; }
    public bool IsNestedPrivate { get; public set; }
    public bool IsNestedFamily { get; public set; }
    public bool IsNestedAssembly { get; public set; }
    public bool IsNestedFamilyAndAssembly { get; public set; }
    public bool IsNestedFamilyOrAssembly { get; public set; }
    public bool IsAutoLayout { get; public set; }
    public bool IsSequentialLayout { get; public set; }
    public bool IsExplicitLayout { get; public set; }
    public bool IsClass { get; public set; }
    public bool IsInterface { get; public set; }
    public bool IsAbstract { get; public set; }
    public bool IsSealed { get; public set; }
    public bool IsSpecialName { get; public set; }
    public bool IsImport { get; public set; }
    public bool IsSerializable { get; public set; }
    public bool IsAnsiClass { get; public set; }
    public bool IsUnicodeClass { get; public set; }
    public bool IsAutoClass { get; public set; }
    public bool IsBeforeFieldInit { get; public set; }
    public bool IsRuntimeSpecialName { get; public set; }
    public bool HasSecurity { get; public set; }
    public bool IsEnum { get; }
    public bool IsValueType { get; }
    public TypeDefinition DeclaringType { get; public set; }
    internal TypeDefinition(string name, string ns, TypeAttributes attrs);
    public TypeDefinition(string name, string ns, TypeAttributes attributes, TypeReference baseType);
    public TypeAttributes get_Attributes();
    public void set_Attributes(TypeAttributes value);
    public TypeReference get_BaseType();
    public void set_BaseType(TypeReference value);
    public bool get_HasLayoutInfo();
    public ushort get_PackingSize();
    public void set_PackingSize(ushort value);
    public UInt32 get_ClassSize();
    public void set_ClassSize(UInt32 value);
    public bool get_HasInterfaces();
    public InterfaceCollection get_Interfaces();
    public bool get_HasNestedTypes();
    public NestedTypeCollection get_NestedTypes();
    public bool get_HasMethods();
    public MethodDefinitionCollection get_Methods();
    public bool get_HasConstructors();
    public ConstructorCollection get_Constructors();
    public bool get_HasFields();
    public FieldDefinitionCollection get_Fields();
    public bool get_HasEvents();
    public EventDefinitionCollection get_Events();
    public bool get_HasProperties();
    public PropertyDefinitionCollection get_Properties();
    public sealed virtual bool get_HasSecurityDeclarations();
    public sealed virtual SecurityDeclarationCollection get_SecurityDeclarations();
    public bool get_IsNotPublic();
    public void set_IsNotPublic(bool value);
    public bool get_IsPublic();
    public void set_IsPublic(bool value);
    public bool get_IsNestedPublic();
    public void set_IsNestedPublic(bool value);
    public bool get_IsNestedPrivate();
    public void set_IsNestedPrivate(bool value);
    public bool get_IsNestedFamily();
    public void set_IsNestedFamily(bool value);
    public bool get_IsNestedAssembly();
    public void set_IsNestedAssembly(bool value);
    public bool get_IsNestedFamilyAndAssembly();
    public void set_IsNestedFamilyAndAssembly(bool value);
    public bool get_IsNestedFamilyOrAssembly();
    public void set_IsNestedFamilyOrAssembly(bool value);
    public bool get_IsAutoLayout();
    public void set_IsAutoLayout(bool value);
    public bool get_IsSequentialLayout();
    public void set_IsSequentialLayout(bool value);
    public bool get_IsExplicitLayout();
    public void set_IsExplicitLayout(bool value);
    public bool get_IsClass();
    public void set_IsClass(bool value);
    public bool get_IsInterface();
    public void set_IsInterface(bool value);
    public bool get_IsAbstract();
    public void set_IsAbstract(bool value);
    public bool get_IsSealed();
    public void set_IsSealed(bool value);
    public sealed virtual bool get_IsSpecialName();
    public sealed virtual void set_IsSpecialName(bool value);
    public bool get_IsImport();
    public void set_IsImport(bool value);
    public bool get_IsSerializable();
    public void set_IsSerializable(bool value);
    public bool get_IsAnsiClass();
    public void set_IsAnsiClass(bool value);
    public bool get_IsUnicodeClass();
    public void set_IsUnicodeClass(bool value);
    public bool get_IsAutoClass();
    public void set_IsAutoClass(bool value);
    public bool get_IsBeforeFieldInit();
    public void set_IsBeforeFieldInit(bool value);
    public sealed virtual bool get_IsRuntimeSpecialName();
    public sealed virtual void set_IsRuntimeSpecialName(bool value);
    public bool get_HasSecurity();
    public void set_HasSecurity(bool value);
    public bool get_IsEnum();
    public virtual bool get_IsValueType();
    public sealed virtual TypeDefinition get_DeclaringType();
    public sealed virtual void set_DeclaringType(TypeDefinition value);
    public virtual TypeDefinition Resolve();
    public TypeDefinition Clone();
    internal static TypeDefinition Clone(TypeDefinition type, ImportContext context);
    public virtual void Accept(IReflectionVisitor visitor);
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.TypeDefinitionCollection : NameObjectCollectionBase {
    private ModuleDefinition m_container;
    public TypeDefinition Item { get; public set; }
    public TypeDefinition Item { get; public set; }
    public ModuleDefinition Container { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public TypeDefinitionCollection(ModuleDefinition container);
    public TypeDefinition get_Item(int index);
    public void set_Item(int index, TypeDefinition value);
    public TypeDefinition get_Item(string fullName);
    public void set_Item(string fullName, TypeDefinition value);
    public ModuleDefinition get_Container();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public void Add(TypeDefinition value);
    public sealed virtual void Clear();
    public bool Contains(TypeDefinition value);
    public bool Contains(string fullName);
    public int IndexOf(TypeDefinition value);
    public void Remove(TypeDefinition value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void CopyTo(Array ary, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void Accept(IReflectionVisitor visitor);
    private void Check(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private void Detach(TypeReference type);
    private void Attach(TypeReference type);
}
internal class CilStrip.Mono.Cecil.TypeReference : MemberReference {
    private string m_namespace;
    private bool m_fullNameDiscarded;
    private string m_fullName;
    protected bool m_isValueType;
    private IMetadataScope m_scope;
    private ModuleDefinition m_module;
    private CustomAttributeCollection m_customAttrs;
    private GenericParameterCollection m_genparams;
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public bool IsValueType { get; public set; }
    public ModuleDefinition Module { get; public set; }
    public bool HasCustomAttributes { get; }
    public CustomAttributeCollection CustomAttributes { get; }
    public bool HasGenericParameters { get; }
    public GenericParameterCollection GenericParameters { get; }
    public IMetadataScope Scope { get; }
    public bool IsNested { get; }
    public string FullName { get; }
    protected TypeReference(string name, string ns);
    internal TypeReference(string name, string ns, IMetadataScope scope);
    public TypeReference(string name, string ns, IMetadataScope scope, bool valueType);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Namespace();
    public virtual void set_Namespace(string value);
    public virtual bool get_IsValueType();
    public virtual void set_IsValueType(bool value);
    public virtual ModuleDefinition get_Module();
    public virtual void set_Module(ModuleDefinition value);
    public sealed virtual bool get_HasCustomAttributes();
    public sealed virtual CustomAttributeCollection get_CustomAttributes();
    public sealed virtual bool get_HasGenericParameters();
    public sealed virtual GenericParameterCollection get_GenericParameters();
    public virtual IMetadataScope get_Scope();
    public bool get_IsNested();
    public virtual string get_FullName();
    public virtual TypeDefinition Resolve();
    public virtual TypeReference GetOriginalType();
    internal void AttachToScope(IMetadataScope scope);
    public virtual void Accept(IReflectionVisitor visitor);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class CilStrip.Mono.Cecil.TypeReferenceCollection : NameObjectCollectionBase {
    private ModuleDefinition m_container;
    public TypeReference Item { get; public set; }
    public TypeReference Item { get; public set; }
    public ModuleDefinition Container { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public TypeReferenceCollection(ModuleDefinition container);
    public TypeReference get_Item(int index);
    public void set_Item(int index, TypeReference value);
    public TypeReference get_Item(string fullName);
    public void set_Item(string fullName, TypeReference value);
    public ModuleDefinition get_Container();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public void Add(TypeReference value);
    public sealed virtual void Clear();
    public bool Contains(TypeReference value);
    public bool Contains(string fullName);
    public int IndexOf(TypeReference value);
    public void Remove(TypeReference value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void CopyTo(Array ary, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void Accept(IReflectionVisitor visitor);
    private void Check(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private void Detach(TypeReference type);
    private void Attach(TypeReference type);
}
internal abstract class CilStrip.Mono.Cecil.TypeSpecification : TypeReference {
    private TypeReference m_elementType;
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public bool IsValueType { get; public set; }
    public IMetadataScope Scope { get; }
    public ModuleDefinition Module { get; public set; }
    public TypeReference ElementType { get; public set; }
    public string FullName { get; }
    internal TypeSpecification(TypeReference elementType);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Namespace();
    public virtual void set_Namespace(string value);
    public virtual bool get_IsValueType();
    public virtual void set_IsValueType(bool value);
    public virtual IMetadataScope get_Scope();
    public virtual ModuleDefinition get_Module();
    public virtual void set_Module(ModuleDefinition value);
    public TypeReference get_ElementType();
    public void set_ElementType(TypeReference value);
    public virtual string get_FullName();
    public virtual TypeReference GetOriginalType();
}
internal enum CilStrip.Mono.Cecil.VariantType : Enum {
    public int value__;
    public static VariantType I2;
    public static VariantType I4;
    public static VariantType R4;
    public static VariantType R8;
    public static VariantType CY;
    public static VariantType DATE;
    public static VariantType BSTR;
    public static VariantType DISPATCH;
    public static VariantType ERROR;
    public static VariantType BOOL;
    public static VariantType VARIANT;
    public static VariantType UNKNOWN;
    public static VariantType DECIMAL;
    public static VariantType I1;
    public static VariantType UI1;
    public static VariantType UI2;
    public static VariantType UI4;
    public static VariantType INT;
    public static VariantType UINT;
}
internal class CilStrip.Mono.Xml.DefaultHandler : object {
    public sealed virtual void OnStartParsing(SmallXmlParser parser);
    public sealed virtual void OnEndParsing(SmallXmlParser parser);
    public sealed virtual void OnStartElement(string name, IAttrList attrs);
    public sealed virtual void OnEndElement(string name);
    public sealed virtual void OnChars(string s);
    public sealed virtual void OnIgnorableWhitespace(string s);
    public sealed virtual void OnProcessingInstruction(string name, string text);
}
internal class CilStrip.Mono.Xml.SecurityParser : SmallXmlParser {
    private SecurityElement root;
    private SecurityElement current;
    private Stack stack;
    public void LoadXml(string xml);
    public SecurityElement ToXml();
    public sealed virtual void OnStartParsing(SmallXmlParser parser);
    public sealed virtual void OnProcessingInstruction(string name, string text);
    public sealed virtual void OnIgnorableWhitespace(string s);
    public sealed virtual void OnStartElement(string name, IAttrList attrs);
    public sealed virtual void OnEndElement(string name);
    public sealed virtual void OnChars(string ch);
    public sealed virtual void OnEndParsing(SmallXmlParser parser);
}
internal class CilStrip.Mono.Xml.SmallXmlParser : object {
    private IContentHandler handler;
    private TextReader reader;
    private Stack elementNames;
    private Stack xmlSpaces;
    private string xmlSpace;
    private StringBuilder buffer;
    private Char[] nameBuffer;
    private bool isWhitespace;
    private AttrListImpl attributes;
    private int line;
    private int column;
    private bool resetColumn;
    private Exception Error(string msg);
    private Exception UnexpectedEndError();
    private bool IsNameChar(char c, bool start);
    private bool IsWhitespace(int c);
    public void SkipWhitespaces();
    private void HandleWhitespaces();
    public void SkipWhitespaces(bool expected);
    private int Peek();
    private int Read();
    public void Expect(int c);
    private string ReadUntil(char until, bool handleReferences);
    public string ReadName();
    public void Parse(TextReader input, IContentHandler handler);
    private void Cleanup();
    public void ReadContent();
    private void HandleBufferedContent();
    private void ReadCharacters();
    private void ReadReference();
    private int ReadCharacterReference();
    private void ReadAttribute(AttrListImpl a);
    private void ReadCDATASection();
    private void ReadComment();
}
internal class CilStrip.Mono.Xml.SmallXmlParserException : SystemException {
    private int line;
    private int column;
    public int Line { get; }
    public int Column { get; }
    public SmallXmlParserException(string msg, int line, int column);
    public int get_Line();
    public int get_Column();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
