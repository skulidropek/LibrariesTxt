[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class EmitBundleBase : Task {
    [CompilerGeneratedAttribute]
private CancellationTokenSource <BuildTaskCancelled>k__BackingField;
    private Dictionary`2<string, string> _resourceDataSymbolDictionary;
    private Dictionary`2<string, String[]> _resourcesForDataSymbolDictionary;
    private static string RegisteredName;
    private static int MaxEncodedHashLength;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FilesToBundle>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BundleRegistrationFunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BundleFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <BundledResources>k__BackingField;
    private static Encoding Utf8NoBom;
    private static Byte[] HexToUtf8Lookup;
    private static Byte[] NewLineAndIndentation;
    private static Dictionary`2<string, int> symbolDataLen;
    private CancellationTokenSource BuildTaskCancelled { get; }
    [RequiredAttribute]
public ITaskItem[] FilesToBundle { get; public set; }
    public string BundleRegistrationFunctionName { get; public set; }
    [NullableAttribute("2")]
public string BundleFile { get; public set; }
    [NullableAttribute("2")]
[RequiredAttribute]
public string OutputDirectory { get; public set; }
    [OutputAttribute]
public ITaskItem[] BundledResources { get; public set; }
    private static EmitBundleBase();
    [CompilerGeneratedAttribute]
private CancellationTokenSource get_BuildTaskCancelled();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FilesToBundle();
    [CompilerGeneratedAttribute]
public void set_FilesToBundle(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_BundleRegistrationFunctionName();
    [CompilerGeneratedAttribute]
public void set_BundleRegistrationFunctionName(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_BundleFile();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_BundleFile(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_OutputDirectory();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_OutputDirectory(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_BundledResources();
    [CompilerGeneratedAttribute]
public void set_BundledResources(ITaskItem[] value);
    public virtual bool Execute();
    public sealed virtual void Cancel();
    private static Byte[] InitLookupTable();
    public abstract virtual bool EmitBundleFile(string destinationFile, Action`1<Stream> writeToOutputStream);
    public abstract virtual string GetDestinationFileExtension();
    private string GatherUniqueExportedResourceDataSymbols(List`1<ITaskItem> uniqueDestinationFiles);
    private static void GenerateBundledResourcePreallocationAndRegistration(string resourceSymbols, string bundleRegistrationFunctionName, ICollection`1<ValueTuple`6<string, string, string, string, string, string>> files, StreamWriter outputUtf8Writer);
    private void BundleFileToCSource(string symbolName, FileStream inputStream, StreamWriter outputUtf8Writer);
    private static string ToSafeSymbolName(string destinationFileName, bool filenameOnly);
    private static string TruncateEncodedHash(string encodedHash, int maxEncodedHashLength);
    private static bool IsAlphanumeric(char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EmitBundleObjectFiles : EmitBundleBase {
    [CompilerGeneratedAttribute]
private string <ClangExecutable>k__BackingField;
    [RequiredAttribute]
public string ClangExecutable { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClangExecutable();
    [CompilerGeneratedAttribute]
public void set_ClangExecutable(string value);
    public virtual bool Execute();
    public virtual bool EmitBundleFile(string destinationFile, Action`1<Stream> EmitBundleFile);
    public virtual string GetDestinationFileExtension();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class EmitBundleSourceFiles : EmitBundleBase {
    public virtual bool EmitBundleFile(string destinationFile, Action`1<Stream> EmitBundleFile);
    public virtual string GetDestinationFileExtension();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class ILStrip : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableParallelStripping>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TrimIndividualMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TrimmedAssemblies>k__BackingField;
    private List`1<ITaskItem> _trimmedAssemblies;
    [RequiredAttribute]
public ITaskItem[] Assemblies { get; public set; }
    public bool DisableParallelStripping { get; public set; }
    public bool TrimIndividualMethods { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputAttribute]
public ITaskItem[] TrimmedAssemblies { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_DisableParallelStripping();
    [CompilerGeneratedAttribute]
public void set_DisableParallelStripping(bool value);
    [CompilerGeneratedAttribute]
public bool get_TrimIndividualMethods();
    [CompilerGeneratedAttribute]
public void set_TrimIndividualMethods(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TrimmedAssemblies();
    [CompilerGeneratedAttribute]
public void set_TrimmedAssemblies(ITaskItem[] value);
    public virtual bool Execute();
    private bool StripAssembly(ITaskItem assemblyItem);
    private bool TrimMethods(ITaskItem assemblyItem);
    private static string ComputeTrimmedAssemblyPath(string assemblyFilePath);
    private static string ComputeGuid(MetadataReader mr);
    private Dictionary`2<int, int> ComputeMethodBodyUsage(MetadataReader mr, StreamReader sr, string line, string methodTokenFile);
    private void CreateTrimmedAssembly(PEReader peReader, string trimmedAssemblyFilePath, FileStream fs, Dictionary`2<int, int> methodBodyUses);
    private static int ComputeMethodSize(PEReader peReader, int rva);
    private static int ComputeMethodHash(PEReader peReader, int rva);
    private static int ComputeMethodHeaderSize(MemoryStream memStream, int actualLoc);
    private static void SetCodeSizeToZeroForTiny(MemoryStream& memStream, int actualLoc);
    private static void ZeroOutMethodBody(MemoryStream& memStream, int methodSize, int actualLoc, int headerSize);
    private void AddItemToTrimmedList(string assemblyFilePath, string trimmedAssemblyFilePath);
    [CompilerGeneratedAttribute]
private void <Execute>b__17_0(ITaskItem assemblyItem, ParallelLoopState state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class JsonToItemsTaskFactory.JsonToItemsTaskFactory : object {
    private static string JsonFilePath;
    private TaskPropertyInfo[] _taskProperties;
    private string _taskName;
    private bool _logDebugTask;
    public string FactoryName { get; }
    public Type TaskType { get; }
    public sealed virtual string get_FactoryName();
    public sealed virtual Type get_TaskType();
    public sealed virtual bool Initialize(string taskName, IDictionary`2<string, TaskPropertyInfo> parameterGroup, string taskBody, IBuildEngine taskFactoryLoggingHost);
    public sealed virtual TaskPropertyInfo[] GetTaskParameters();
    public sealed virtual ITask CreateTask(IBuildEngine taskFactoryLoggingHost);
    public sealed virtual void CleanupTask(ITask task);
    internal bool ValidateParameterGroup(IDictionary`2<string, TaskPropertyInfo> parameterGroup, TaskLoggingHelper log);
}
public class LogAsErrorException : Exception {
    [NullableContextAttribute("1")]
public LogAsErrorException(string message);
}
internal enum MonoTargetsTasks.Compatibility : Enum {
    public int value__;
    public static Compatibility Compatible;
    public static Compatibility Incompatible;
    public static Compatibility Inconclusive;
}
internal class MonoTargetsTasks.InconclusiveCompatibilityCollection : object {
    private Dictionary`2<string, HashSet`1<string>> _data;
    public bool IsEmpty { get; }
    public bool get_IsEmpty();
    public void Add(string assyName, string namespaceName, string typeName);
    public HashSet`1<string> EnumerateForAssembly(string assyName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class MonoTargetsTasks.MarshalingPInvokeScanner : Task {
    [CompilerGeneratedAttribute]
private String[] <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <IncompatibleAssemblies>k__BackingField;
    [RequiredAttribute]
public String[] Assemblies { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputAttribute]
public String[] IncompatibleAssemblies { get; private set; }
    [CompilerGeneratedAttribute]
public String[] get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_IncompatibleAssemblies();
    [CompilerGeneratedAttribute]
private void set_IncompatibleAssemblies(String[] value);
    public virtual bool Execute();
    private void ExecuteInternal();
    private String[] ScanAssemblies(String[] assemblies);
    private static string GetMethodName(MetadataReader mr, MethodDefinition md);
    private void ResolveInconclusiveTypes(HashSet`1<string> incompatible, string assyPath, MinimalMarshalingTypeCompatibilityProvider mmtcp);
    private bool IsAssemblyIncompatible(string assyPath, MinimalMarshalingTypeCompatibilityProvider mmtcp);
}
internal class MonoTargetsTasks.MinimalMarshalingTypeCompatibilityProvider : object {
    private TaskLoggingHelper _log;
    private InconclusiveCompatibilityCollection _inconclusive;
    public bool IsSecondPassNeeded { get; }
    internal MinimalMarshalingTypeCompatibilityProvider(TaskLoggingHelper log);
    public bool get_IsSecondPassNeeded();
    public HashSet`1<string> GetInconclusiveTypesForAssembly(string assyName);
    public sealed virtual Compatibility GetArrayType(Compatibility elementType, ArrayShape shape);
    public sealed virtual Compatibility GetByReferenceType(Compatibility elementType);
    public sealed virtual Compatibility GetFunctionPointerType(MethodSignature`1<Compatibility> signature);
    public sealed virtual Compatibility GetGenericInstantiation(Compatibility genericType, ImmutableArray`1<Compatibility> typeArguments);
    public sealed virtual Compatibility GetGenericMethodParameter(object genericContext, int index);
    public sealed virtual Compatibility GetGenericTypeParameter(object genericContext, int index);
    public sealed virtual Compatibility GetModifiedType(Compatibility modifier, Compatibility unmodifiedType, bool isRequired);
    public sealed virtual Compatibility GetPinnedType(Compatibility elementType);
    public sealed virtual Compatibility GetPointerType(Compatibility elementType);
    public sealed virtual Compatibility GetPrimitiveType(PrimitiveTypeCode typeCode);
    public sealed virtual Compatibility GetSZArrayType(Compatibility elementType);
    public sealed virtual Compatibility GetTypeFromDefinition(MetadataReader reader, TypeDefinitionHandle handle, byte rawTypeKind);
    public sealed virtual Compatibility GetTypeFromReference(MetadataReader reader, TypeReferenceHandle handle, byte rawTypeKind);
    public sealed virtual Compatibility GetTypeFromSpecification(MetadataReader reader, object genericContext, TypeSpecificationHandle handle, byte rawTypeKind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class NetTraceToMibcConverter : ToolTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NetTraceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputDir>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MibcFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolExe>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToolName>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Assemblies { get; public set; }
    [RequiredAttribute]
public string NetTraceFilePath { get; public set; }
    [NullableAttribute("2")]
[RequiredAttribute]
public string OutputDir { get; public set; }
    [OutputAttribute]
public string MibcFilePath { get; public set; }
    public string ToolExe { get; public set; }
    protected string ToolName { get; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_NetTraceFilePath();
    [CompilerGeneratedAttribute]
public void set_NetTraceFilePath(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_OutputDir();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_OutputDir(string value);
    [CompilerGeneratedAttribute]
public string get_MibcFilePath();
    [CompilerGeneratedAttribute]
public void set_MibcFilePath(string value);
    [CompilerGeneratedAttribute]
public virtual string get_ToolExe();
    [CompilerGeneratedAttribute]
public virtual void set_ToolExe(string value);
    [CompilerGeneratedAttribute]
protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    protected virtual bool ValidateParameters();
    protected virtual string GenerateCommandLineCommands();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Root : object {
    [CompilerGeneratedAttribute]
private RuntimeOption <RuntimeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ExtensionDataRoot>k__BackingField;
    [JsonPropertyNameAttribute("runtimeOptions")]
public RuntimeOption RuntimeOptions { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> ExtensionDataRoot { get; public set; }
    [CompilerGeneratedAttribute]
public RuntimeOption get_RuntimeOptions();
    [CompilerGeneratedAttribute]
public void set_RuntimeOptions(RuntimeOption value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_ExtensionDataRoot();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataRoot(Dictionary`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RuntimeConfigParserTask : Task {
    [CompilerGeneratedAttribute]
private string <RuntimeConfigFile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RuntimeConfigReservedProperties>k__BackingField;
    [RequiredAttribute]
public string RuntimeConfigFile { get; public set; }
    [RequiredAttribute]
public string OutputFile { get; public set; }
    public ITaskItem[] RuntimeConfigReservedProperties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RuntimeConfigFile();
    [CompilerGeneratedAttribute]
public void set_RuntimeConfigFile(string value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RuntimeConfigReservedProperties();
    [CompilerGeneratedAttribute]
public void set_RuntimeConfigReservedProperties(ITaskItem[] value);
    public virtual bool Execute();
    private bool TryConvertInputToDictionary(string inputFilePath, Dictionary`2& result);
    private static void ConvertDictionaryToBlob(Dictionary`2<string, string> properties, BlobBuilder builder);
    private bool CheckReservedProperties(Dictionary`2<string, string> properties, ITaskItem[] keys);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class RuntimeOption : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <ConfigProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <ExtensionDataSub>k__BackingField;
    [JsonPropertyNameAttribute("configProperties")]
public Dictionary`2<string, string> ConfigProperties { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, object> ExtensionDataSub { get; public set; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_ConfigProperties();
    [CompilerGeneratedAttribute]
public void set_ConfigProperties(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, object> get_ExtensionDataSub();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataSub(Dictionary`2<string, object> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class StringConverter : JsonConverter`1<string> {
    public virtual string Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, string value, JsonSerializerOptions options);
}
internal static class Utils : object {
    public static string WebcilInWasmExtension;
    private static object s_SyncObj;
    private static Utils();
    public static string GetEmbeddedResource(string file);
    public static bool IsNewerThan(string inFile, string outFile);
    public static ValueTuple`2<int, string> RunShellCommand(TaskLoggingHelper logger, string command, IDictionary`2<string, string> envVars, string workingDir, bool silent, bool logStdErrAsMessage, MessageImportance debugMessageImportance, string label);
    public static string RunProcess(TaskLoggingHelper logger, string path, string args, IDictionary`2<string, string> envVars, string workingDir, bool ignoreErrors, bool silent, MessageImportance debugMessageImportance);
    public static ValueTuple`2<int, string> TryRunProcess(TaskLoggingHelper logger, string path, string args, IDictionary`2<string, string> envVars, string workingDir, bool silent, bool logStdErrAsMessage, MessageImportance debugMessageImportance, string label, Action`1<Stream> inputProvider);
    public static bool CopyIfDifferent(string src, string dst, bool useHash);
    private static string ToBase64SafeString(Byte[] data);
    private static Byte[] ComputeHashFromStream(Stream stream, HashAlgorithmType algorithm);
    private static string EncodeHash(Byte[] data, HashEncodingType encoding);
    public static string ComputeHash(string filepath);
    public static string ComputeHashEx(string filepath, HashAlgorithmType algorithm, HashEncodingType encoding);
    public static string ComputeIntegrity(string filepath);
    public static string ComputeIntegrity(Byte[] bytes);
    public static string ComputeTextIntegrity(string str);
    public static void DirectoryCopy(string sourceDir, string destDir, Func`2<string, bool> predicate);
    public static bool IsWindows();
    public static bool IsMacOS();
    public static bool IsLinux();
    public static bool IsManagedAssembly(string filePath);
    public static bool IsManagedAssembly(Byte[] bytes);
    private static bool IsManagedAssembly(PEReader peReader);
    [CompilerGeneratedAttribute]
internal static string <RunShellCommand>g__CreateTemporaryBatchFile|6_0(string command);
}
