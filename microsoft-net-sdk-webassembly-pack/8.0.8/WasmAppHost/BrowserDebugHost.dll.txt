[ExtensionAttribute]
internal static class Microsoft.WebAssembly.Diagnostics.DebugExtensions : object {
    private static HttpClient s_httpClient;
    private static DebugExtensions();
    public static Dictionary`2<string, string> MapValues(Dictionary`2<string, string> response, HttpContext context, Uri debuggerHost);
    [ExtensionAttribute]
public static IApplicationBuilder UseDebugProxy(IApplicationBuilder app, ILogger logger, ProxyOptions options);
    [ExtensionAttribute]
public static IApplicationBuilder UseDebugProxy(IApplicationBuilder app, ILogger logger, ProxyOptions options, Func`4<Dictionary`2<string, string>, HttpContext, Uri, Dictionary`2<string, string>> mapFunc);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DebugExtensions/<ProxyGetJsonAsync>d__4`1")]
private static Task`1<T> ProxyGetJsonAsync(string url);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.WebAssembly.Diagnostics.DebugProxyHost : object {
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DebugProxyHost/<RunDebugProxyAsync>d__0")]
public static Task RunDebugProxyAsync(ProxyOptions options, String[] args, ILoggerFactory loggerFactory, CancellationToken token);
    public static Task RunFirefoxServerLoopAsync(ProxyOptions options, String[] args, ILoggerFactory loggerFactory, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DebugProxyHost/<RunDevToolsProxyAsync>d__2")]
public static Task RunDevToolsProxyAsync(ProxyOptions options, String[] args, ILoggerFactory loggerFactory, CancellationToken token);
}
internal class Microsoft.WebAssembly.Diagnostics.HostConnectionException : Exception {
    public HostConnectionException(string message, Exception innerException);
}
public class Microsoft.WebAssembly.Diagnostics.Program : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.Program/<Main>d__0")]
public static Task Main(String[] args);
    private static void <Main>(String[] args);
}
internal class Microsoft.WebAssembly.Diagnostics.Startup : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    public IConfiguration Configuration { get; }
    public Startup(IConfiguration configuration);
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    public void Configure(IApplicationBuilder app, IOptions`1<ProxyOptions> optionsContainer, ILogger`1<Startup> logger, IHostApplicationLifetime applicationLifetime);
}
