internal class BrowserDebugProxy.GetMembersResult : object {
    [CompilerGeneratedAttribute]
private JArray <Result>k__BackingField;
    [CompilerGeneratedAttribute]
private JArray <PrivateMembers>k__BackingField;
    public JArray Result { get; public set; }
    public JArray PrivateMembers { get; public set; }
    public JObject JObject { get; }
    public GetMembersResult(JArray value, bool sortByAccessLevel);
    [CompilerGeneratedAttribute]
public JArray get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(JArray value);
    [CompilerGeneratedAttribute]
public JArray get_PrivateMembers();
    [CompilerGeneratedAttribute]
public void set_PrivateMembers(JArray value);
    public JObject get_JObject();
    public void CleanUp();
    public static GetMembersResult FromValues(IEnumerable`1<JToken> values, bool splitMembersByAccessLevel);
    public static GetMembersResult FromValues(JArray values, bool splitMembersByAccessLevel);
    private void Split(JToken member);
    public GetMembersResult Clone();
    [IteratorStateMachineAttribute("BrowserDebugProxy.GetMembersResult/<Where>d__17")]
public IEnumerable`1<JToken> Where(Func`2<JToken, bool> predicate);
    internal JToken FirstOrDefault(Func`2<JToken, bool> p);
    internal JArray Flatten();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal static void <CleanUp>g__CleanUpJArray|12_0(JArray arr, <>c__DisplayClass12_0& );
}
internal static class BrowserDebugProxy.MemberObjectsExplorer : object {
    private static bool IsACollectionType(string typeName);
    private static string GetNamePrefixForValues(string memberName, string typeName, bool isOwn, Nullable`1<DebuggerBrowsableState> state);
    [AsyncStateMachineAttribute("BrowserDebugProxy.MemberObjectsExplorer/<ReadFieldValue>d__2")]
private static Task`1<JObject> ReadFieldValue(MonoSDBHelper sdbHelper, MonoBinaryReader reader, FieldTypeClass field, int objectId, TypeInfoWithDebugInformation typeInfo, int fieldValueType, bool isOwn, int parentTypeId, GetObjectCommandOptions getObjectOptions, CancellationToken token);
    [AsyncStateMachineAttribute("BrowserDebugProxy.MemberObjectsExplorer/<GetRootHiddenChildren>d__3")]
private static Task`1<JArray> GetRootHiddenChildren(MonoSDBHelper sdbHelper, JObject root, string rootNamePrefix, string rootTypeName, GetObjectCommandOptions getCommandOptions, bool includeStatic, CancellationToken token);
    public static Task`1<GetMembersResult> GetTypeMemberValues(MonoSDBHelper sdbHelper, DotnetObjectId dotnetObjectId, GetObjectCommandOptions getObjectOptions, CancellationToken token, bool sortByAccessLevel, bool includeStatic);
    [AsyncStateMachineAttribute("BrowserDebugProxy.MemberObjectsExplorer/<ExpandFieldValues>d__5")]
public static Task`1<JArray> ExpandFieldValues(MonoSDBHelper sdbHelper, DotnetObjectId id, int containerTypeId, int parentTypeId, IReadOnlyList`1<FieldTypeClass> fields, GetObjectCommandOptions getCommandOptions, bool isOwn, bool includeStatic, CancellationToken token);
    public static Task`1<GetMembersResult> GetValueTypeMemberValues(MonoSDBHelper sdbHelper, int valueTypeId, GetObjectCommandOptions getCommandOptions, CancellationToken token, bool sortByAccessLevel, bool includeStatic);
    [AsyncStateMachineAttribute("BrowserDebugProxy.MemberObjectsExplorer/<GetExpandedMemberValues>d__7")]
public static Task`1<JArray> GetExpandedMemberValues(MonoSDBHelper sdbHelper, string typeName, string namePrefix, JObject value, Nullable`1<DebuggerBrowsableState> state, bool includeStatic, CancellationToken token);
    [AsyncStateMachineAttribute("BrowserDebugProxy.MemberObjectsExplorer/<ExpandPropertyValues>d__8")]
public static Task`1<Dictionary`2<string, JObject>> ExpandPropertyValues(MonoSDBHelper sdbHelper, int typeId, string typeName, ArraySegment`1<byte> getterParamsBuffer, GetObjectCommandOptions getCommandOptions, DotnetObjectId objectId, bool isValueType, bool isOwn, CancellationToken token, Dictionary`2<string, JObject> allMembers, bool includeStatic, int parentTypeId);
    [AsyncStateMachineAttribute("BrowserDebugProxy.MemberObjectsExplorer/<GetObjectMemberValues>d__9")]
public static Task`1<GetMembersResult> GetObjectMemberValues(MonoSDBHelper sdbHelper, int objectId, GetObjectCommandOptions getCommandType, CancellationToken token, bool sortByAccessLevel, bool includeStatic);
    [CompilerGeneratedAttribute]
internal static JArray <GetExpandedMemberValues>g__GetHiddenElement|7_0(<>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <GetObjectMemberValues>g__AddOnlyNewFieldValuesByNameTo|9_0(JArray namedValues, IDictionary`2<string, JObject> valuesDict, string typeName, bool isOwn);
}
internal class BrowserDebugProxy.ValueTypeClass : object {
    private bool autoExpand;
    private JArray proxy;
    private GetMembersResult _combinedResult;
    private bool propertiesExpanded;
    private bool fieldsExpanded;
    private string className;
    private JArray fields;
    [CompilerGeneratedAttribute]
private List`1<JObject> <InlineArray>k__BackingField;
    [CompilerGeneratedAttribute]
private DotnetObjectId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Buffer>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnum>k__BackingField;
    public List`1<JObject> InlineArray { get; public set; }
    public DotnetObjectId Id { get; public set; }
    public Byte[] Buffer { get; public set; }
    public int TypeId { get; public set; }
    public bool IsEnum { get; public set; }
    public ValueTypeClass(Byte[] buffer, string className, JArray fields, int typeId, bool isEnum, List`1<JObject> inlineArray);
    [CompilerGeneratedAttribute]
public List`1<JObject> get_InlineArray();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InlineArray(List`1<JObject> value);
    [CompilerGeneratedAttribute]
public DotnetObjectId get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(DotnetObjectId value);
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Buffer(Byte[] value);
    [CompilerGeneratedAttribute]
public int get_TypeId();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsEnum();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsEnum(bool value);
    public virtual string ToString();
    [AsyncStateMachineAttribute("BrowserDebugProxy.ValueTypeClass/<CreateFromReader>d__29")]
public static Task`1<ValueTypeClass> CreateFromReader(MonoSDBHelper sdbAgent, MonoBinaryReader cmdReader, long initialPos, string className, int typeId, bool isEnum, bool includeStatic, int inlineArraySize, CancellationToken token);
    [AsyncStateMachineAttribute("BrowserDebugProxy.ValueTypeClass/<ToJObject>d__30")]
public Task`1<JObject> ToJObject(MonoSDBHelper sdbAgent, bool forDebuggerDisplayAttribute, CancellationToken token);
    [AsyncStateMachineAttribute("BrowserDebugProxy.ValueTypeClass/<GetProxy>d__31")]
public Task`1<JArray> GetProxy(MonoSDBHelper sdbHelper, CancellationToken token);
    [AsyncStateMachineAttribute("BrowserDebugProxy.ValueTypeClass/<GetMemberValues>d__32")]
public Task`1<GetMembersResult> GetMemberValues(MonoSDBHelper sdbHelper, GetObjectCommandOptions getObjectOptions, bool sortByAccessLevel, bool includeStatic, CancellationToken token);
    [AsyncStateMachineAttribute("BrowserDebugProxy.ValueTypeClass/<ExpandedFieldValues>d__33")]
public Task ExpandedFieldValues(MonoSDBHelper sdbHelper, bool includeStatic, CancellationToken token);
    [AsyncStateMachineAttribute("BrowserDebugProxy.ValueTypeClass/<ExpandPropertyValues>d__34")]
public Task ExpandPropertyValues(MonoSDBHelper sdbHelper, bool splitMembersByAccessLevel, bool includeStatic, CancellationToken token);
    private static bool ShouldAutoExpand(string className);
    private static bool ShouldAutoInvokeToString(string className);
    [CompilerGeneratedAttribute]
internal static JObject <CreateFromReader>g__GetFieldWithMetadata|29_1(FieldTypeClass field, JObject fieldValue, bool isStatic, <>c__DisplayClass29_0& );
    [CompilerGeneratedAttribute]
internal static void <GetMemberValues>g__RemovePropertiesFrom|32_0(JArray collection);
}
internal class Microsoft.WebAssembly.Diagnostics.ArrayDimensions : object {
    [CompilerGeneratedAttribute]
private int <Rank>k__BackingField;
    [CompilerGeneratedAttribute]
private Int32[] <Bounds>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    internal int Rank { get; }
    internal Int32[] Bounds { get; }
    internal int TotalLength { get; }
    public ArrayDimensions(Int32[] rank);
    [CompilerGeneratedAttribute]
private ArrayDimensions(ArrayDimensions original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
internal int get_Rank();
    [CompilerGeneratedAttribute]
internal Int32[] get_Bounds();
    [CompilerGeneratedAttribute]
internal int get_TotalLength();
    public virtual string ToString();
    internal string GetArrayIndexString(int idx);
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ArrayDimensions left, ArrayDimensions right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ArrayDimensions left, ArrayDimensions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ArrayDimensions other);
    [CompilerGeneratedAttribute]
public ArrayDimensions <Clone>$();
}
internal class Microsoft.WebAssembly.Diagnostics.AssemblyAndPdbData : object {
    [CompilerGeneratedAttribute]
private bool <IsAsmMetadataOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AsmBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PdbBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasDebugInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PdbAge>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PdbGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PdbPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PdbUncompressedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPortableCodeView>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<PdbChecksum> <PdbChecksums>k__BackingField;
    public bool IsAsmMetadataOnly { get; public set; }
    public Byte[] AsmBytes { get; public set; }
    public Byte[] PdbBytes { get; public set; }
    public bool HasDebugInfo { get; public set; }
    public int PdbAge { get; public set; }
    public Guid PdbGuid { get; public set; }
    public string PdbPath { get; public set; }
    public int PdbUncompressedSize { get; public set; }
    public bool IsPortableCodeView { get; public set; }
    public List`1<PdbChecksum> PdbChecksums { get; public set; }
    internal AssemblyAndPdbData(Byte[] asm, Byte[] pdb);
    [CompilerGeneratedAttribute]
public bool get_IsAsmMetadataOnly();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsAsmMetadataOnly(bool value);
    [CompilerGeneratedAttribute]
public Byte[] get_AsmBytes();
    [CompilerGeneratedAttribute]
public void set_AsmBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_PdbBytes();
    [CompilerGeneratedAttribute]
public void set_PdbBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public bool get_HasDebugInfo();
    [CompilerGeneratedAttribute]
public void set_HasDebugInfo(bool value);
    [CompilerGeneratedAttribute]
public int get_PdbAge();
    [CompilerGeneratedAttribute]
public void set_PdbAge(int value);
    [CompilerGeneratedAttribute]
public Guid get_PdbGuid();
    [CompilerGeneratedAttribute]
public void set_PdbGuid(Guid value);
    [CompilerGeneratedAttribute]
public string get_PdbPath();
    [CompilerGeneratedAttribute]
public void set_PdbPath(string value);
    [CompilerGeneratedAttribute]
public int get_PdbUncompressedSize();
    [CompilerGeneratedAttribute]
public void set_PdbUncompressedSize(int value);
    [CompilerGeneratedAttribute]
public bool get_IsPortableCodeView();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsPortableCodeView(bool value);
    [CompilerGeneratedAttribute]
public List`1<PdbChecksum> get_PdbChecksums();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PdbChecksums(List`1<PdbChecksum> value);
}
internal class Microsoft.WebAssembly.Diagnostics.AssemblyInfo : object {
    private static int next_id;
    private int id;
    private ILogger logger;
    private Dictionary`2<int, MethodInfo> methods;
    private Dictionary`2<string, string> sourceLinkMappings;
    private List`1<SourceFile> sources;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    private IDisposable peReaderOrWebcilReader;
    [CompilerGeneratedAttribute]
private MetadataReader <asmMetadataReader>k__BackingField;
    [CompilerGeneratedAttribute]
private MetadataReader <pdbMetadataReader>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal List`1<ValueTuple`2<MetadataReader, MetadataReader>> enCMetadataReader;
    private int debugId;
    [CompilerGeneratedAttribute]
private int <PdbAge>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PdbGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPortableCodeView>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PdbName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TriedToLoadSymbolsOnDemand>k__BackingField;
    private Dictionary`2<int, SourceFile> _documentIdToSourceFileTable;
    [CompilerGeneratedAttribute]
private PdbChecksum[] <PdbChecksums>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, TypeInfo> <TypesByName>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, TypeInfo> <TypesByToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyNameUnqualified>k__BackingField;
    internal string Url { get; }
    internal MetadataReader asmMetadataReader { get; internal set; }
    internal MetadataReader pdbMetadataReader { get; internal set; }
    internal int PdbAge { get; private set; }
    internal Guid PdbGuid { get; private set; }
    internal bool IsPortableCodeView { get; internal set; }
    internal string PdbName { get; internal set; }
    public bool TriedToLoadSymbolsOnDemand { get; public set; }
    public PdbChecksum[] PdbChecksums { get; public set; }
    public IEnumerable`1<SourceFile> Sources { get; }
    public Dictionary`2<int, MethodInfo> Methods { get; }
    public Dictionary`2<string, TypeInfo> TypesByName { get; }
    public Dictionary`2<int, TypeInfo> TypesByToken { get; }
    public int Id { get; }
    public string Name { get; public set; }
    public bool HasSymbols { get; }
    public string AssemblyNameUnqualified { get; }
    private AssemblyInfo(ILogger logger);
    [CompilerGeneratedAttribute]
internal string get_Url();
    [CompilerGeneratedAttribute]
internal MetadataReader get_asmMetadataReader();
    [CompilerGeneratedAttribute]
internal void set_asmMetadataReader(MetadataReader value);
    [CompilerGeneratedAttribute]
internal MetadataReader get_pdbMetadataReader();
    [CompilerGeneratedAttribute]
internal void set_pdbMetadataReader(MetadataReader value);
    [CompilerGeneratedAttribute]
internal int get_PdbAge();
    [CompilerGeneratedAttribute]
private void set_PdbAge(int value);
    [CompilerGeneratedAttribute]
internal Guid get_PdbGuid();
    [CompilerGeneratedAttribute]
private void set_PdbGuid(Guid value);
    [CompilerGeneratedAttribute]
internal bool get_IsPortableCodeView();
    [CompilerGeneratedAttribute]
internal void set_IsPortableCodeView(bool value);
    [CompilerGeneratedAttribute]
internal string get_PdbName();
    [CompilerGeneratedAttribute]
internal void set_PdbName(string value);
    [CompilerGeneratedAttribute]
public bool get_TriedToLoadSymbolsOnDemand();
    [CompilerGeneratedAttribute]
public void set_TriedToLoadSymbolsOnDemand(bool value);
    [CompilerGeneratedAttribute]
public PdbChecksum[] get_PdbChecksums();
    [CompilerGeneratedAttribute]
public void set_PdbChecksums(PdbChecksum[] value);
    public void LoadInfoFromBytes(MonoProxy monoProxy, SessionId sessionId, AssemblyAndPdbData assemblyAndPdbData, CancellationToken token);
    public static AssemblyInfo FromBytes(MonoProxy monoProxy, SessionId sessionId, AssemblyAndPdbData assemblyAndPdbData, ILogger logger, CancellationToken token);
    public static AssemblyInfo WithoutDebugInfo(ILogger logger);
    public static AssemblyInfo WithoutDebugInfo(string name, ILogger logger);
    private void FromAssemblyAndPdbData(Stream _stream, AssemblyAndPdbData assemblyAndPdbData);
    private void FromPEReader(MonoProxy monoProxy, SessionId sessionId, PEReader peReader, Byte[] pdb, ILogger logger, CancellationToken token);
    private void FromWebcilReader(MonoProxy monoProxy, SessionId sessionId, WebcilReader wcReader, Byte[] pdb, ILogger logger, CancellationToken token);
    private static string ReadAssemblyName(MetadataReader asmMetadataReader);
    private void LoadAssemblyInfo(IDisposable owningReader, string name, MetadataReader asmMetadataReader, MetadataDebugSummary summary, ILogger logger);
    public bool TryGetCustomAttributeName(CustomAttributeHandle customAttribute, MetadataReader metadataReader, String& name);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.AssemblyInfo/<GetDebugId>d__56")]
public Task`1<int> GetDebugId(MonoSDBHelper sdbAgent, CancellationToken token);
    public void SetDebugId(int id);
    public bool EnC(MonoSDBHelper sdbAgent, Byte[] meta, Byte[] pdb);
    private static int GetTypeDefIdx(MetadataReader asmMetadataReaderParm, int number);
    private static int GetMethodDebugInformationIdx(MetadataReader pdbMetadataReaderParm, int number);
    public TypeReference EnCGetTypeReference(TypeReferenceHandle methodDefHandle);
    public TypeDefinition EnCGetTypeDefinition(TypeDefinitionHandle methodDefHandle);
    public MethodDefinition EnCGetMethodDefinition(MethodDefinitionHandle methodDefHandle);
    public MemberReference EnCGetMemberReference(MemberReferenceHandle memberHandle);
    public string EnCGetString(StringHandle strHandle);
    private void PopulateEnC(MonoSDBHelper sdbAgent, MetadataReader asmMetadataReaderParm, MetadataReader pdbMetadataReaderParm);
    public SourceFile GetOrAddSourceFile(DocumentHandle doc, string documentName);
    private void Populate();
    private void ProcessSourceLink();
    public TypeInfo CreateTypeInfo(TypeDefinitionHandle typeHandle, TypeDefinition type);
    public TypeInfo CreateTypeInfo(string typeName, int typeToken);
    public IEnumerable`1<SourceFile> get_Sources();
    public Dictionary`2<int, MethodInfo> get_Methods();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, TypeInfo> get_TypesByName();
    [CompilerGeneratedAttribute]
public Dictionary`2<int, TypeInfo> get_TypesByToken();
    public int get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public bool get_HasSymbols();
    [CompilerGeneratedAttribute]
public string get_AssemblyNameUnqualified();
    public SourceFile GetDocById(int document);
    public MethodInfo GetMethodByToken(int token);
    public TypeInfo GetTypeByName(string name);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.AssemblyInfo/<LoadPDBFromSymbolServer>d__96")]
internal Task LoadPDBFromSymbolServer(MonoProxy proxy, MonoSDBHelper sdbHelper, SessionId id, DebugStore debugStore, CancellationToken token);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType2`2<CustomDebugInformationHandle, CustomDebugInformation> <ProcessSourceLink>b__69_0(CustomDebugInformationHandle cdiHandle);
    [CompilerGeneratedAttribute]
private bool <ProcessSourceLink>b__69_1(<>f__AnonymousType2`2<CustomDebugInformationHandle, CustomDebugInformation> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Byte[] <ProcessSourceLink>b__69_2(<>f__AnonymousType2`2<CustomDebugInformationHandle, CustomDebugInformation> <>h__TransparentIdentifier0);
}
internal class Microsoft.WebAssembly.Diagnostics.Breakpoint : object {
    [CompilerGeneratedAttribute]
private SourceLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RemoteId>k__BackingField;
    [CompilerGeneratedAttribute]
private BreakpointState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StackId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConditionAlreadyEvaluatedWithError>k__BackingField;
    public SourceLocation Location { get; private set; }
    public int RemoteId { get; public set; }
    public BreakpointState State { get; public set; }
    public string StackId { get; private set; }
    public string Condition { get; public set; }
    public bool ConditionAlreadyEvaluatedWithError { get; public set; }
    public Breakpoint(string stackId, SourceLocation loc, string condition, BreakpointState state);
    [CompilerGeneratedAttribute]
public SourceLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(SourceLocation value);
    [CompilerGeneratedAttribute]
public int get_RemoteId();
    [CompilerGeneratedAttribute]
public void set_RemoteId(int value);
    [CompilerGeneratedAttribute]
public BreakpointState get_State();
    [CompilerGeneratedAttribute]
public void set_State(BreakpointState value);
    [CompilerGeneratedAttribute]
public string get_StackId();
    [CompilerGeneratedAttribute]
private void set_StackId(string value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
    [CompilerGeneratedAttribute]
public bool get_ConditionAlreadyEvaluatedWithError();
    [CompilerGeneratedAttribute]
public void set_ConditionAlreadyEvaluatedWithError(bool value);
    public static bool TryParseId(string stackId, Int32& id);
}
internal class Microsoft.WebAssembly.Diagnostics.BreakpointRequest : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <File>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Condition>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    private JObject request;
    [CompilerGeneratedAttribute]
private List`1<Breakpoint> <Locations>k__BackingField;
    public string Id { get; private set; }
    public string Assembly { get; private set; }
    public string File { get; private set; }
    public int Line { get; public set; }
    public int Column { get; public set; }
    public string Condition { get; public set; }
    public MethodInfo Method { get; public set; }
    public bool IsResolved { get; }
    public List`1<Breakpoint> Locations { get; public set; }
    public BreakpointRequest(string id, JObject request);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Assembly();
    [CompilerGeneratedAttribute]
private void set_Assembly(string value);
    [CompilerGeneratedAttribute]
public string get_File();
    [CompilerGeneratedAttribute]
private void set_File(string value);
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    [CompilerGeneratedAttribute]
public string get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(string value);
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
    [CompilerGeneratedAttribute]
public void set_Method(MethodInfo value);
    public bool get_IsResolved();
    [CompilerGeneratedAttribute]
public List`1<Breakpoint> get_Locations();
    [CompilerGeneratedAttribute]
public void set_Locations(List`1<Breakpoint> value);
    public virtual string ToString();
    public object AsSetBreakpointByUrlResponse(IEnumerable`1<object> jsloc);
    public static BreakpointRequest Parse(string id, JObject args);
    public BreakpointRequest Clone();
    public bool IsMatch(SourceFile sourceFile);
    public bool TryResolve(SourceFile sourceFile);
    public bool TryResolve(DebugStore store);
    public bool CompareRequest(JObject req);
    public void UpdateCondition(string condition);
}
internal enum Microsoft.WebAssembly.Diagnostics.BreakpointState : Enum {
    public int value__;
    public static BreakpointState Active;
    public static BreakpointState Disabled;
    public static BreakpointState Pending;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdAppDomain : Enum {
    public int value__;
    public static CmdAppDomain GetRootDomain;
    public static CmdAppDomain GetFriendlyName;
    public static CmdAppDomain GetAssemblies;
    public static CmdAppDomain GetEntryAssembly;
    public static CmdAppDomain CreateString;
    public static CmdAppDomain GetCorLib;
    public static CmdAppDomain CreateBoxedValue;
    public static CmdAppDomain CreateByteArray;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdArray : Enum {
    public int value__;
    public static CmdArray GetLength;
    public static CmdArray GetValues;
    public static CmdArray SetValues;
    public static CmdArray RefGetType;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdAssembly : Enum {
    public int value__;
    public static CmdAssembly GetLocation;
    public static CmdAssembly GetEntryPoint;
    public static CmdAssembly GetManifestModule;
    public static CmdAssembly GetObject;
    public static CmdAssembly GetType;
    public static CmdAssembly GetName;
    public static CmdAssembly GetDomain;
    public static CmdAssembly GetMetadataBlob;
    public static CmdAssembly GetIsDynamic;
    public static CmdAssembly GetPdbBlob;
    public static CmdAssembly GetTypeFromToken;
    public static CmdAssembly GetMethodFromToken;
    public static CmdAssembly HasDebugInfo;
    public static CmdAssembly HasDebugInfoLoaded;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdEvent : Enum {
    public int value__;
    public static CmdEvent Composite;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdEventRequest : Enum {
    public int value__;
    public static CmdEventRequest Set;
    public static CmdEventRequest Clear;
    public static CmdEventRequest ClearAllBreakpoints;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdField : Enum {
    public int value__;
    public static CmdField GetInfo;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdFrame : Enum {
    public int value__;
    public static CmdFrame GetValues;
    public static CmdFrame GetThis;
    public static CmdFrame SetValues;
    public static CmdFrame GetDomain;
    public static CmdFrame SetThis;
    public static CmdFrame GetArgument;
    public static CmdFrame GetArguments;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdMethod : Enum {
    public int value__;
    public static CmdMethod GetName;
    public static CmdMethod GetDeclaringType;
    public static CmdMethod GetDebugInfo;
    public static CmdMethod GetParamInfo;
    public static CmdMethod GetLocalsInfo;
    public static CmdMethod GetInfo;
    public static CmdMethod GetBody;
    public static CmdMethod ResolveToken;
    public static CmdMethod GetCattrs;
    public static CmdMethod MakeGenericMethod;
    public static CmdMethod Token;
    public static CmdMethod Assembly;
    public static CmdMethod ClassToken;
    public static CmdMethod AsyncDebugInfo;
    public static CmdMethod GetNameFull;
    public static CmdMethod GetPrettyName;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdModule : Enum {
    public int value__;
    public static CmdModule GetInfo;
    public static CmdModule ApplyChanges;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdObject : Enum {
    public int value__;
    public static CmdObject RefGetType;
    public static CmdObject RefGetValues;
    public static CmdObject RefIsCollected;
    public static CmdObject RefGetAddress;
    public static CmdObject RefGetDomain;
    public static CmdObject RefSetValues;
    public static CmdObject RefGetInfo;
    public static CmdObject GetValuesICorDbg;
    public static CmdObject RefDelegateGetMethod;
    public static CmdObject RefIsDelegate;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdPointer : Enum {
    public int value__;
    public static CmdPointer GetValue;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdString : Enum {
    public int value__;
    public static CmdString GetValue;
    public static CmdString GetLength;
    public static CmdString GetChars;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdThread : Enum {
    public int value__;
    public static CmdThread GetFrameInfo;
    public static CmdThread GetName;
    public static CmdThread GetState;
    public static CmdThread GetInfo;
    public static CmdThread GetId;
    public static CmdThread GetTid;
    public static CmdThread SetIp;
    public static CmdThread GetElapsedTime;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdType : Enum {
    public int value__;
    public static CmdType GetInfo;
    public static CmdType GetMethods;
    public static CmdType GetFields;
    public static CmdType GetValues;
    public static CmdType GetObject;
    public static CmdType GetSourceFiles;
    public static CmdType SetValues;
    public static CmdType IsAssignableFrom;
    public static CmdType GetProperties;
    public static CmdType GetCattrs;
    public static CmdType GetFieldCattrs;
    public static CmdType GetPropertyCattrs;
    public static CmdType GetSourceFiles2;
    public static CmdType GetValues2;
    public static CmdType GetMethodsByNameFlags;
    public static CmdType GetInterfaces;
    public static CmdType GetInterfacesMap;
    public static CmdType IsInitialized;
    public static CmdType CreateInstance;
    public static CmdType GetValueSize;
    public static CmdType GetValuesICorDbg;
    public static CmdType GetParents;
    public static CmdType Initialize;
}
internal enum Microsoft.WebAssembly.Diagnostics.CmdVM : Enum {
    public int value__;
    public static CmdVM Version;
    public static CmdVM AllThreads;
    public static CmdVM Suspend;
    public static CmdVM Resume;
    public static CmdVM Exit;
    public static CmdVM Dispose;
    public static CmdVM InvokeMethod;
    public static CmdVM SetProtocolVersion;
    public static CmdVM AbortInvoke;
    public static CmdVM SetKeepAlive;
    public static CmdVM GetTypesForSourceFile;
    public static CmdVM GetTypes;
    public static CmdVM InvokeMethods;
    public static CmdVM StartBuffering;
    public static CmdVM StopBuffering;
    public static CmdVM VmReadMemory;
    public static CmdVM VmWriteMemory;
    public static CmdVM GetAssemblyByName;
    public static CmdVM GetModuleByGUID;
    public static CmdVM GetAssemblyAndPdbBytes;
}
internal enum Microsoft.WebAssembly.Diagnostics.CommandSet : Enum {
    public int value__;
    public static CommandSet Vm;
    public static CommandSet ObjectRef;
    public static CommandSet StringRef;
    public static CommandSet Thread;
    public static CommandSet ArrayRef;
    public static CommandSet EventRequest;
    public static CommandSet StackFrame;
    public static CommandSet AppDomain;
    public static CommandSet Assembly;
    public static CommandSet Method;
    public static CommandSet Type;
    public static CommandSet Module;
    public static CommandSet Field;
    public static CommandSet Event;
    public static CommandSet Pointer;
}
internal class Microsoft.WebAssembly.Diagnostics.ConcurrentExecutionContextDictionary : object {
    private ConcurrentDictionary`2<SessionId, ConcurrentBag`1<ExecutionContext>> contexts;
    public ExecutionContext GetCurrentContext(SessionId sessionId);
    public bool TryGetCurrentExecutionContextValue(SessionId id, ExecutionContext& executionContext, bool ignoreDestroyedContext);
    public void OnDefaultContextUpdate(SessionId sessionId, ExecutionContext newContext);
    public bool TryGetAndAddContext(SessionId sessionId, ExecutionContext newExecutionContext, ExecutionContext& previousExecutionContext);
    public void CreateWorkerExecutionContext(SessionId workerSessionId, SessionId originSessionId, ILogger logger);
    public void DestroyContext(SessionId sessionId, int id);
    public void ClearContexts(SessionId sessionId);
    public bool ContainsKey(SessionId sessionId);
}
public class Microsoft.WebAssembly.Diagnostics.DebuggerAgentException : Exception {
    [NullableContextAttribute("1")]
public DebuggerAgentException(string message);
    [NullableContextAttribute("2")]
public DebuggerAgentException(string message, Exception innerException);
}
public class Microsoft.WebAssembly.Diagnostics.DebuggerProxy : DebuggerProxyBase {
    [CompilerGeneratedAttribute]
private MonoProxy <MonoProxy>k__BackingField;
    internal MonoProxy MonoProxy { get; }
    public DebuggerProxy(ILoggerFactory loggerFactory, int runtimeId, string loggerId, ProxyOptions options);
    [CompilerGeneratedAttribute]
internal MonoProxy get_MonoProxy();
    public Task Run(Uri browserUri, WebSocket ideSocket, CancellationTokenSource cts);
    public virtual void Shutdown();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.WebAssembly.Diagnostics.DebuggerProxyBase : object {
    [CompilerGeneratedAttribute]
private RunLoopExitState <ExitState>k__BackingField;
    public RunLoopExitState ExitState { get; public set; }
    [CompilerGeneratedAttribute]
public RunLoopExitState get_ExitState();
    [CompilerGeneratedAttribute]
public void set_ExitState(RunLoopExitState value);
    public virtual void Shutdown();
    [NullableContextAttribute("1")]
public virtual void Fail(Exception ex);
}
internal class Microsoft.WebAssembly.Diagnostics.DebugStore : object {
    internal List`1<AssemblyInfo> assemblies;
    private ILogger logger;
    internal MonoProxy monoProxy;
    private ITracer _tracer;
    internal SymbolStore symbolStore;
    public DebugStore(MonoProxy monoProxy, ILogger logger);
    public static IEnumerable`1<MethodInfo> EnC(MonoSDBHelper sdbAgent, AssemblyInfo asm, Byte[] meta_data, Byte[] pdb_data);
    [IteratorStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DebugStore/<GetEnCMethods>d__8")]
public static IEnumerable`1<MethodInfo> GetEnCMethods(AssemblyInfo asm);
    [IteratorStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DebugStore/<Add>d__9")]
public IEnumerable`1<SourceFile> Add(SessionId id, AssemblyAndPdbData assemblyAndPdbData, CancellationToken token);
    [AsyncIteratorStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DebugStore/<Load>d__10")]
public IAsyncEnumerable`1<SourceFile> Load(SessionId id, String[] loaded_files, ExecutionContext context, bool useDebuggerProtocol, CancellationToken token);
    public IEnumerable`1<SourceFile> AllSources();
    public SourceFile GetFileById(SourceId id);
    public AssemblyInfo GetAssemblyByName(string name);
    private static bool Match(SequencePoint sp, SourceLocation start, SourceLocation end);
    public List`1<SourceLocation> FindPossibleBreakpoints(SourceLocation start, SourceLocation end);
    [IteratorStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DebugStore/<FindBreakpointLocations>d__16")]
public static IEnumerable`1<SourceLocation> FindBreakpointLocations(SourceLocation start, SourceLocation end, MethodInfo method);
    private static bool Match(SequencePoint sp, int line, int column);
    [IteratorStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DebugStore/<FindBreakpointLocations>d__18")]
public IEnumerable`1<SourceLocation> FindBreakpointLocations(BreakpointRequest request, bool ifNoneFoundThenFindNext);
    public string ToUrl(SourceLocation location);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DebugStore/<ReloadAllPDBsFromSymbolServersAndSendSources>d__20")]
internal Task ReloadAllPDBsFromSymbolServersAndSendSources(MonoProxy monoProxy, SessionId id, ExecutionContext context, CancellationToken token);
    internal void UpdateSymbolStore(List`1<string> urlSymbolServerList, string cachePathSymbolServer);
    [CompilerGeneratedAttribute]
internal static List`1<MethodInfo> <FindBreakpointLocations>g__FindMethodsContainingLine|18_2(SourceFile sourceFile, int line);
}
internal class Microsoft.WebAssembly.Diagnostics.DevToolsDebuggerConnection : WasmDebuggerConnection {
    [CompilerGeneratedAttribute]
private WebSocket <WebSocket>k__BackingField;
    private ILogger _logger;
    public WebSocket WebSocket { get; public set; }
    public bool IsConnected { get; }
    public DevToolsDebuggerConnection(WebSocket webSocket, string id, ILogger logger);
    [CompilerGeneratedAttribute]
public WebSocket get_WebSocket();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WebSocket(WebSocket value);
    public virtual bool get_IsConnected();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DevToolsDebuggerConnection/<ReadOneAsync>d__8")]
public virtual Task`1<string> ReadOneAsync(CancellationToken token);
    public virtual Task SendAsync(Byte[] bytes, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DevToolsDebuggerConnection/<ShutdownAsync>d__10")]
public virtual Task ShutdownAsync(CancellationToken cancellationToken);
    public virtual void Dispose();
    public virtual string ToString();
}
internal class Microsoft.WebAssembly.Diagnostics.DevToolsProxy : object {
    protected Dictionary`2<MessageId, TaskCompletionSource`1<Result>> pending_cmds;
    protected DevToolsQueue browser;
    protected DevToolsQueue ide;
    private int next_cmd_id;
    protected ILogger logger;
    protected RunLoop _runLoop;
    private string _loggerId;
    [CompilerGeneratedAttribute]
private EventHandler`1<RunLoopExitState> RunLoopStopped;
    protected ProxyOptions _options;
    public bool IsRunning { get; }
    public RunLoopExitState Stopped { get; }
    public DevToolsProxy(ProxyOptions options, ILogger logger, string loggerId);
    [CompilerGeneratedAttribute]
public void add_RunLoopStopped(EventHandler`1<RunLoopExitState> value);
    [CompilerGeneratedAttribute]
public void remove_RunLoopStopped(EventHandler`1<RunLoopExitState> value);
    public bool get_IsRunning();
    public RunLoopExitState get_Stopped();
    protected int GetNewCmdId();
    protected int ResetCmdId();
    protected virtual Task`1<bool> AcceptEvent(SessionId sessionId, JObject args, CancellationToken token);
    protected virtual Task`1<bool> AcceptCommand(MessageId id, JObject args, CancellationToken token);
    protected Task Send(DevToolsQueue queue, JObject o, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DevToolsProxy/<OnEvent>d__21")]
protected virtual Task OnEvent(SessionId sessionId, JObject parms, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DevToolsProxy/<OnCommand>d__22")]
protected virtual Task OnCommand(MessageId id, JObject parms, CancellationToken token);
    protected virtual void OnResponse(MessageId id, Result result);
    protected virtual Task ProcessBrowserMessage(string msg, CancellationToken token);
    protected virtual Task ProcessIdeMessage(string msg, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DevToolsProxy/<SendCommand>d__26")]
public virtual Task`1<Result> SendCommand(SessionId id, string method, JObject args, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DevToolsProxy/<SendCommandInternal>d__27")]
protected virtual Task`1<Result> SendCommandInternal(SessionId sessionId, string method, JObject args, CancellationToken token);
    public virtual Task SendEvent(SessionId sessionId, string method, JObject args, CancellationToken token);
    protected virtual Task SendEventInternal(SessionId sessionId, string method, JObject args, CancellationToken token);
    public virtual void SendResponse(MessageId id, Result result, CancellationToken token);
    protected virtual Task SendResponseInternal(MessageId id, Result result, CancellationToken token);
    public virtual Task ForwardMessageToIde(JObject msg, CancellationToken token);
    public virtual Task ForwardMessageToBrowser(JObject msg, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DevToolsProxy/<RunForDevTools>d__34")]
public Task RunForDevTools(Uri browserUri, WebSocket ideSocket, CancellationTokenSource cts);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.DevToolsProxy/<RunLoopAsync>d__35")]
protected Task RunLoopAsync(WasmDebuggerConnection ideConn, WasmDebuggerConnection browserConn, CancellationTokenSource cts);
    public virtual void Shutdown();
    public void Fail(Exception exception);
    protected virtual string GetFromOrTo(JObject o);
    protected void Log(string priority, string msg);
}
internal class Microsoft.WebAssembly.Diagnostics.DevToolsQueue : object {
    private Task current_send;
    private ConcurrentQueue`1<Byte[]> pending;
    [CompilerGeneratedAttribute]
private WasmDebuggerConnection <Connection>k__BackingField;
    public Task CurrentSend { get; }
    public WasmDebuggerConnection Connection { get; public set; }
    public string Id { get; }
    public DevToolsQueue(WasmDebuggerConnection conn);
    public Task get_CurrentSend();
    [CompilerGeneratedAttribute]
public WasmDebuggerConnection get_Connection();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Connection(WasmDebuggerConnection value);
    public string get_Id();
    public Task Send(Byte[] bytes, CancellationToken token);
    public bool TryPumpIfCurrentCompleted(CancellationToken token, Task& sendTask);
}
internal class Microsoft.WebAssembly.Diagnostics.DotnetObjectId : object {
    private Nullable`1<int> _intValue;
    [CompilerGeneratedAttribute]
private string <Scheme>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SubValue>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <ValueAsJson>k__BackingField;
    public string Scheme { get; }
    public int Value { get; }
    public int SubValue { get; public set; }
    public bool IsValueType { get; }
    public JObject ValueAsJson { get; public set; }
    public DotnetObjectId(string scheme, int value);
    public DotnetObjectId(string scheme, string value);
    [CompilerGeneratedAttribute]
public string get_Scheme();
    public int get_Value();
    [CompilerGeneratedAttribute]
public int get_SubValue();
    [CompilerGeneratedAttribute]
public void set_SubValue(int value);
    public bool get_IsValueType();
    [CompilerGeneratedAttribute]
public JObject get_ValueAsJson();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ValueAsJson(JObject value);
    public static bool TryParse(JToken jToken, DotnetObjectId& objectId);
    public static bool TryParse(string id, DotnetObjectId& objectId);
    public virtual string ToString();
}
internal enum Microsoft.WebAssembly.Diagnostics.ElementType : Enum {
    public int value__;
    public static ElementType End;
    public static ElementType Void;
    public static ElementType Boolean;
    public static ElementType Char;
    public static ElementType I1;
    public static ElementType U1;
    public static ElementType I2;
    public static ElementType U2;
    public static ElementType I4;
    public static ElementType U4;
    public static ElementType I8;
    public static ElementType U8;
    public static ElementType R4;
    public static ElementType R8;
    public static ElementType String;
    public static ElementType Ptr;
    public static ElementType ByRef;
    public static ElementType ValueType;
    public static ElementType Class;
    public static ElementType Var;
    public static ElementType Array;
    public static ElementType GenericInst;
    public static ElementType TypedByRef;
    public static ElementType I;
    public static ElementType U;
    public static ElementType FnPtr;
    public static ElementType Object;
    public static ElementType SzArray;
    public static ElementType MVar;
    public static ElementType CModReqD;
    public static ElementType CModOpt;
    public static ElementType Internal;
    public static ElementType Modifier;
    public static ElementType Sentinel;
    public static ElementType Pinned;
    public static ElementType Type;
    public static ElementType Boxed;
    public static ElementType Enum;
}
internal enum Microsoft.WebAssembly.Diagnostics.EventKind : Enum {
    public int value__;
    public static EventKind VmStart;
    public static EventKind VmDeath;
    public static EventKind ThreadStart;
    public static EventKind ThreadDeath;
    public static EventKind AppDomainCreate;
    public static EventKind AppDomainUnload;
    public static EventKind MethodEntry;
    public static EventKind MethodExit;
    public static EventKind AssemblyLoad;
    public static EventKind AssemblyUnload;
    public static EventKind Breakpoint;
    public static EventKind Step;
    public static EventKind TypeLoad;
    public static EventKind Exception;
    public static EventKind KeepAlive;
    public static EventKind UserBreak;
    public static EventKind UserLog;
    public static EventKind Crash;
    public static EventKind EnC;
    public static EventKind MethodUpdate;
}
internal class Microsoft.WebAssembly.Diagnostics.ExecutionContext : object {
    [CompilerGeneratedAttribute]
private string <DebugId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, BreakpointRequest> <BreakpointRequests>k__BackingField;
    public int breakpointId;
    public TaskCompletionSource`1<DebugStore> ready;
    [CompilerGeneratedAttribute]
private bool <IsSkippingHiddenMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSteppingThroughMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsResumedAfterBp>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionContext <ParentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <FrameworkScriptList>k__BackingField;
    [CompilerGeneratedAttribute]
private SessionId <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PausedOnWasm>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PauseKind>k__BackingField;
    [CompilerGeneratedAttribute]
private object <AuxData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoEvaluateProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private PauseOnExceptionsKind <PauseOnExceptions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Frame> <CallStack>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <LoadedFiles>k__BackingField;
    internal DebugStore store;
    [CompilerGeneratedAttribute]
private MonoSDBHelper <SdbAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<DebugStore> <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<int, PerScopeCache> <perScopeCaches>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TempBreakpointForSetNextIP>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FirstBreakpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Destroyed>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <WasmFunctionIds>k__BackingField;
    public string DebugId { get; public set; }
    public Dictionary`2<string, BreakpointRequest> BreakpointRequests { get; }
    public bool IsRuntimeReady { get; }
    public bool IsSkippingHiddenMethod { get; public set; }
    public bool IsSteppingThroughMethod { get; public set; }
    public bool IsResumedAfterBp { get; public set; }
    public int ThreadId { get; public set; }
    public int Id { get; public set; }
    public ExecutionContext ParentContext { get; private set; }
    public List`1<int> FrameworkScriptList { get; public set; }
    public SessionId SessionId { get; private set; }
    public bool PausedOnWasm { get; public set; }
    public string PauseKind { get; public set; }
    public object AuxData { get; public set; }
    public bool AutoEvaluateProperties { get; public set; }
    public PauseOnExceptionsKind PauseOnExceptions { get; public set; }
    public List`1<Frame> CallStack { get; public set; }
    public String[] LoadedFiles { get; public set; }
    internal MonoSDBHelper SdbAgent { get; private set; }
    public TaskCompletionSource`1<DebugStore> Source { get; private set; }
    private Dictionary`2<int, PerScopeCache> perScopeCaches { get; }
    internal int TempBreakpointForSetNextIP { get; internal set; }
    internal bool FirstBreakpoint { get; internal set; }
    internal bool Destroyed { get; internal set; }
    public DebugStore Store { get; }
    public String[] WasmFunctionIds { get; internal set; }
    public ExecutionContext(MonoSDBHelper sdbAgent, int id, object auxData, PauseOnExceptionsKind pauseOnExceptions);
    public ExecutionContext CreateChildAsyncExecutionContext(SessionId sessionId);
    public bool CopyDataFromParentContext();
    [CompilerGeneratedAttribute]
public string get_DebugId();
    [CompilerGeneratedAttribute]
public void set_DebugId(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, BreakpointRequest> get_BreakpointRequests();
    public bool get_IsRuntimeReady();
    [CompilerGeneratedAttribute]
public bool get_IsSkippingHiddenMethod();
    [CompilerGeneratedAttribute]
public void set_IsSkippingHiddenMethod(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSteppingThroughMethod();
    [CompilerGeneratedAttribute]
public void set_IsSteppingThroughMethod(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsResumedAfterBp();
    [CompilerGeneratedAttribute]
public void set_IsResumedAfterBp(bool value);
    [CompilerGeneratedAttribute]
public int get_ThreadId();
    [CompilerGeneratedAttribute]
public void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public ExecutionContext get_ParentContext();
    [CompilerGeneratedAttribute]
private void set_ParentContext(ExecutionContext value);
    [CompilerGeneratedAttribute]
public List`1<int> get_FrameworkScriptList();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FrameworkScriptList(List`1<int> value);
    [CompilerGeneratedAttribute]
public SessionId get_SessionId();
    [CompilerGeneratedAttribute]
private void set_SessionId(SessionId value);
    [CompilerGeneratedAttribute]
public bool get_PausedOnWasm();
    [CompilerGeneratedAttribute]
public void set_PausedOnWasm(bool value);
    [CompilerGeneratedAttribute]
public string get_PauseKind();
    [CompilerGeneratedAttribute]
public void set_PauseKind(string value);
    [CompilerGeneratedAttribute]
public object get_AuxData();
    [CompilerGeneratedAttribute]
public void set_AuxData(object value);
    [CompilerGeneratedAttribute]
public bool get_AutoEvaluateProperties();
    [CompilerGeneratedAttribute]
public void set_AutoEvaluateProperties(bool value);
    [CompilerGeneratedAttribute]
public PauseOnExceptionsKind get_PauseOnExceptions();
    [CompilerGeneratedAttribute]
public void set_PauseOnExceptions(PauseOnExceptionsKind value);
    [CompilerGeneratedAttribute]
public List`1<Frame> get_CallStack();
    [CompilerGeneratedAttribute]
public void set_CallStack(List`1<Frame> value);
    [CompilerGeneratedAttribute]
public String[] get_LoadedFiles();
    [CompilerGeneratedAttribute]
public void set_LoadedFiles(String[] value);
    [CompilerGeneratedAttribute]
internal MonoSDBHelper get_SdbAgent();
    [CompilerGeneratedAttribute]
private void set_SdbAgent(MonoSDBHelper value);
    [CompilerGeneratedAttribute]
public TaskCompletionSource`1<DebugStore> get_Source();
    [CompilerGeneratedAttribute]
private void set_Source(TaskCompletionSource`1<DebugStore> value);
    [CompilerGeneratedAttribute]
private Dictionary`2<int, PerScopeCache> get_perScopeCaches();
    [CompilerGeneratedAttribute]
internal int get_TempBreakpointForSetNextIP();
    [CompilerGeneratedAttribute]
internal void set_TempBreakpointForSetNextIP(int value);
    [CompilerGeneratedAttribute]
internal bool get_FirstBreakpoint();
    [CompilerGeneratedAttribute]
internal void set_FirstBreakpoint(bool value);
    [CompilerGeneratedAttribute]
internal bool get_Destroyed();
    [CompilerGeneratedAttribute]
internal void set_Destroyed(bool value);
    public DebugStore get_Store();
    [CompilerGeneratedAttribute]
public String[] get_WasmFunctionIds();
    [CompilerGeneratedAttribute]
internal void set_WasmFunctionIds(String[] value);
    public PerScopeCache GetCacheForScope(int scopeId);
    public void ClearState();
}
internal static class Microsoft.WebAssembly.Diagnostics.ExpressionEvaluator : object {
    internal static Script`1<object> script;
    private static ExpressionEvaluator();
    public static string ConvertJSToCSharpLocalVariableAssignment(string idName, JToken variable);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.ExpressionEvaluator/<Resolve>d__3`1")]
private static Task`1<IList`1<JObject>> Resolve(IList`1<T> collectionToResolve, MemberReferenceResolver resolver, Func`4<T, MemberReferenceResolver, CancellationToken, Task`1<JObject>> resolutionFunc, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.ExpressionEvaluator/<ResolveMemberAccessExpression>d__4")]
private static Task`1<JObject> ResolveMemberAccessExpression(MemberAccessExpressionSyntax memberAccess, MemberReferenceResolver resolver, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.ExpressionEvaluator/<ResolveIdentifier>d__5")]
private static Task`1<JObject> ResolveIdentifier(IdentifierNameSyntax identifier, MemberReferenceResolver resolver, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.ExpressionEvaluator/<ResolveMethodCalls>d__6")]
private static Task`1<ValueTuple`3<IList`1<JObject>, IList`1<JObject>, IList`1<JObject>>> ResolveMethodCalls(ExpressionSyntaxReplacer replacer, MemberReferenceResolver resolver, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.ExpressionEvaluator/<ResolveElementAccess>d__7")]
private static Task`1<IList`1<JObject>> ResolveElementAccess(ExpressionSyntaxReplacer replacer, MemberReferenceResolver resolver, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.ExpressionEvaluator/<CompileAndRunTheExpression>d__8")]
internal static Task`1<JObject> CompileAndRunTheExpression(string expression, MemberReferenceResolver resolver, ILogger logger, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.ExpressionEvaluator/<GetVariableDefinitions>d__9")]
internal static Task`1<List`1<string>> GetVariableDefinitions(MemberReferenceResolver resolver, List`1<VariableDefinition> variableDefinitions, bool invokeToStringInObject, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.ExpressionEvaluator/<EvaluateSimpleExpression>d__10")]
internal static Task`1<JObject> EvaluateSimpleExpression(MemberReferenceResolver resolver, string compiledExpression, string originalExpression, List`1<string> variableDefinitions, ILogger logger, CancellationToken token);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<string, string> <ConvertJSToCSharpLocalVariableAssignment>g__GetNullObject|2_0(string className);
}
internal class Microsoft.WebAssembly.Diagnostics.FieldTypeClass : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotPrivate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBackingField>k__BackingField;
    [CompilerGeneratedAttribute]
private FieldAttributes <Attributes>k__BackingField;
    public int Id { get; }
    public string Name { get; }
    public int TypeId { get; }
    public bool IsNotPrivate { get; }
    public bool IsBackingField { get; }
    public FieldAttributes Attributes { get; }
    public FieldTypeClass(int id, string name, int typeId, bool isBackingField, FieldAttributes attributes);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_TypeId();
    [CompilerGeneratedAttribute]
public bool get_IsNotPrivate();
    [CompilerGeneratedAttribute]
public bool get_IsBackingField();
    [CompilerGeneratedAttribute]
public FieldAttributes get_Attributes();
}
internal class Microsoft.WebAssembly.Diagnostics.FirefoxDebuggerConnection : WasmDebuggerConnection {
    [CompilerGeneratedAttribute]
private TcpClient <TcpClient>k__BackingField;
    private ILogger _logger;
    private bool _isDisposed;
    private Byte[] _lengthBuffer;
    public TcpClient TcpClient { get; public set; }
    public bool IsConnected { get; }
    public FirefoxDebuggerConnection(TcpClient tcpClient, string id, ILogger logger);
    [CompilerGeneratedAttribute]
public TcpClient get_TcpClient();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TcpClient(TcpClient value);
    public virtual bool get_IsConnected();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxDebuggerConnection/<ReadOneAsync>d__10")]
public virtual Task`1<string> ReadOneAsync(CancellationToken token);
    public virtual Task SendAsync(Byte[] bytes, CancellationToken token);
    public virtual Task ShutdownAsync(CancellationToken cancellationToken);
    public virtual void Dispose();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool <ReadOneAsync>g__CheckFail|10_0(<>c__DisplayClass10_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.WebAssembly.Diagnostics.FirefoxDebuggerProxy : DebuggerProxyBase {
    private static TcpListener s_tcpListener;
    private static int s_nextId;
    [CompilerGeneratedAttribute]
private FirefoxMonoProxy <FirefoxMonoProxy>k__BackingField;
    [NullableAttribute("2")]
internal FirefoxMonoProxy FirefoxMonoProxy { get; private set; }
    [CompilerGeneratedAttribute]
internal FirefoxMonoProxy get_FirefoxMonoProxy();
    [CompilerGeneratedAttribute]
private void set_FirefoxMonoProxy(FirefoxMonoProxy value);
    [MemberNotNullAttribute("s_tcpListener")]
public static void StartListener(int proxyPort, ILogger logger, int browserPort);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxDebuggerProxy/<RunServerLoopAsync>d__7")]
public static Task RunServerLoopAsync(int browserPort, int proxyPort, ILoggerFactory loggerFactory, ILogger logger, CancellationToken token, ProxyOptions options);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxDebuggerProxy/<RunForTests>d__8")]
public Task RunForTests(int browserPort, int proxyPort, string testId, ILoggerFactory loggerFactory, ILogger logger, CancellationTokenSource cts);
    public virtual void Shutdown();
    public virtual void Fail(Exception ex);
    [CompilerGeneratedAttribute]
private void <RunForTests>b__8_0(object _, RunLoopExitState args);
}
internal class Microsoft.WebAssembly.Diagnostics.FirefoxExecutionContext : ExecutionContext {
    [CompilerGeneratedAttribute]
private string <ActorName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThreadName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GlobalName>k__BackingField;
    [CompilerGeneratedAttribute]
private Task`1<Result> <LastDebuggerAgentBufferReceived>k__BackingField;
    private int evaluateExpressionResultId;
    public string ActorName { get; public set; }
    public string ThreadName { get; public set; }
    public string GlobalName { get; public set; }
    public Task`1<Result> LastDebuggerAgentBufferReceived { get; public set; }
    public FirefoxExecutionContext(MonoSDBHelper sdbAgent, int id, string actorName);
    [CompilerGeneratedAttribute]
public string get_ActorName();
    [CompilerGeneratedAttribute]
public void set_ActorName(string value);
    [CompilerGeneratedAttribute]
public string get_ThreadName();
    [CompilerGeneratedAttribute]
public void set_ThreadName(string value);
    [CompilerGeneratedAttribute]
public string get_GlobalName();
    [CompilerGeneratedAttribute]
public void set_GlobalName(string value);
    [CompilerGeneratedAttribute]
public Task`1<Result> get_LastDebuggerAgentBufferReceived();
    [CompilerGeneratedAttribute]
public void set_LastDebuggerAgentBufferReceived(Task`1<Result> value);
    public int GetResultID();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.WebAssembly.Diagnostics.FirefoxMessageId : MessageId {
    public string toId;
    public FirefoxMessageId(string sessionId, int id, string toId);
    public static SessionId op_Implicit(FirefoxMessageId id);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy : MonoProxy {
    public FirefoxMonoProxy(ILogger logger, string loggerId, ProxyOptions options);
    public FirefoxExecutionContext GetContextFixefox(SessionId sessionId);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<RunForFirefox>d__2")]
public Task RunForFirefox(TcpClient ideClient, int portBrowser, CancellationTokenSource cts);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<OnEvent>d__3")]
protected virtual Task OnEvent(SessionId sessionId, JObject parms, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<OnCommand>d__4")]
protected virtual Task OnCommand(MessageId id, JObject parms, CancellationToken token);
    protected virtual void OnResponse(MessageId id, Result result);
    protected virtual Task ProcessBrowserMessage(string msg, CancellationToken token);
    protected virtual Task ProcessIdeMessage(string msg, CancellationToken token);
    protected virtual string GetFromOrTo(JObject o);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<SendCommandInternal>d__9")]
protected virtual Task`1<Result> SendCommandInternal(SessionId sessionId, string method, JObject args, CancellationToken token);
    protected virtual Task SendEventInternal(SessionId sessionId, string method, JObject args, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<AcceptEvent>d__11")]
protected virtual Task`1<bool> AcceptEvent(SessionId sessionId, JObject args, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<AcceptCommand>d__12")]
protected virtual Task`1<bool> AcceptCommand(MessageId sessionId, JObject args, CancellationToken token);
    internal virtual void SaveLastDebuggerAgentBufferReceivedToContext(SessionId sessionId, Task`1<Result> debuggerAgentBufferTask);
    internal static Result GetLastDebuggerAgentBuffer(JObject args);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<SendPauseToBrowser>d__15")]
private Task`1<bool> SendPauseToBrowser(SessionId sessionId, JObject args, CancellationToken token);
    private static JObject GetPrototype(JObject args);
    private static JObject ConvertToFirefoxContent(ValueOrError`1<GetMembersResult> res);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<SendResume>d__18")]
protected virtual Task SendResume(SessionId id, CancellationToken token);
    internal virtual Task`1<Result> SendMonoCommand(SessionId id, MonoCommands cmd, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<OnSourceFileAdded>d__20")]
internal virtual Task OnSourceFileAdded(SessionId sessionId, SourceFile source, ExecutionContext context, CancellationToken token, bool resolveBreakpoints);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<SendCallStack>d__21")]
protected virtual Task`1<bool> SendCallStack(SessionId sessionId, ExecutionContext context, string reason, int thread_id, Breakpoint bp, JObject data, JObject args, EventKind event_kind, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<GetFrames>d__22")]
private Task`1<bool> GetFrames(SessionId sessionId, ExecutionContext context, JObject args, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<OnGetBreakableLines>d__23")]
internal Task`1<bool> OnGetBreakableLines(MessageId msg_id, string script_id, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.FirefoxMonoProxy/<OnGetScriptSource>d__24")]
internal virtual Task`1<bool> OnGetScriptSource(MessageId msg_id, string script_id, CancellationToken token);
    internal virtual Task`1<DebugStore> LoadStore(SessionId sessionId, bool tryUseDebuggerProtocol, CancellationToken token);
}
internal class Microsoft.WebAssembly.Diagnostics.Frame : object {
    [CompilerGeneratedAttribute]
private MethodInfoWithDebugInformation <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    public MethodInfoWithDebugInformation Method { get; private set; }
    public SourceLocation Location { get; private set; }
    public int Id { get; private set; }
    public Frame(MethodInfoWithDebugInformation method, SourceLocation location, int id);
    [CompilerGeneratedAttribute]
public MethodInfoWithDebugInformation get_Method();
    [CompilerGeneratedAttribute]
private void set_Method(MethodInfoWithDebugInformation value);
    [CompilerGeneratedAttribute]
public SourceLocation get_Location();
    [CompilerGeneratedAttribute]
private void set_Location(SourceLocation value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(int value);
}
[FlagsAttribute]
internal enum Microsoft.WebAssembly.Diagnostics.GetObjectCommandOptions : Enum {
    public int value__;
    public static GetObjectCommandOptions None;
    public static GetObjectCommandOptions WithSetter;
    public static GetObjectCommandOptions AccessorPropertiesOnly;
    public static GetObjectCommandOptions OwnProperties;
    public static GetObjectCommandOptions ForDebuggerProxyAttribute;
    public static GetObjectCommandOptions ForDebuggerDisplayAttribute;
    public static GetObjectCommandOptions WithProperties;
    public static GetObjectCommandOptions JustMyCode;
    public static GetObjectCommandOptions AutoExpandable;
}
internal static class Microsoft.WebAssembly.Diagnostics.HashKinds : object {
    public static Guid SHA1;
    public static Guid SHA256;
    private static HashKinds();
}
[ExtensionAttribute]
internal static class Microsoft.WebAssembly.Diagnostics.HelperExtensions : object {
    private static int MaxLogMessageLineLength;
    private static bool TruncateLogMessages;
    private static HelperExtensions();
    [ExtensionAttribute]
public static string Truncate(string message, int maxLen, string suffix);
    [ExtensionAttribute]
public static string TruncateLogMessage(string message);
    [ExtensionAttribute]
public static void AddRange(JArray arr, JArray addedArr);
    [ExtensionAttribute]
public static bool IsNullValuedObject(JObject obj);
}
public interface Microsoft.WebAssembly.Diagnostics.IDebugMetadataProvider {
    public abstract virtual ImmutableArray`1<DebugDirectoryEntry> ReadDebugDirectory();
    public abstract virtual CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(DebugDirectoryEntry entry);
    public abstract virtual PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(DebugDirectoryEntry entry);
    [NullableContextAttribute("1")]
public abstract virtual MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(DebugDirectoryEntry entry);
}
internal class Microsoft.WebAssembly.Diagnostics.IlLocation : object {
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    public MethodInfo Method { get; }
    public int Offset { get; }
    public IlLocation(MethodInfo method, int offset);
    [CompilerGeneratedAttribute]
public MethodInfo get_Method();
    [CompilerGeneratedAttribute]
public int get_Offset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.WebAssembly.Diagnostics.InternalErrorException : Exception {
    public InternalErrorException(string message);
    public InternalErrorException(string message, Exception innerException);
}
internal class Microsoft.WebAssembly.Diagnostics.InternalUseFieldName : object {
    public static InternalUseFieldName Hidden;
    public static InternalUseFieldName State;
    public static InternalUseFieldName Section;
    public static InternalUseFieldName Owner;
    public static InternalUseFieldName IsStatic;
    public static InternalUseFieldName IsNewSlot;
    public static InternalUseFieldName IsBackingField;
    public static InternalUseFieldName ParentTypeId;
    private static HashSet`1<string> s_names;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static int Count { get; }
    public string Name { get; public set; }
    private InternalUseFieldName(string fieldName);
    private static InternalUseFieldName();
    public static int get_Count();
    public static bool IsKnown(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
}
internal class Microsoft.WebAssembly.Diagnostics.JObjectValueCreator : object {
    private Dictionary`2<int, ValueTypeClass> _valueTypes;
    private Dictionary`2<int, PointerValue> _pointerValues;
    private MonoSDBHelper _sdbAgent;
    private ILogger _logger;
    public JObjectValueCreator(MonoSDBHelper sdbAgent, ILogger logger);
    public static JObject Create(T value, string type, string description, string className, string objectId, string subtype, bool writable, bool isValueType, bool isEnum);
    public static JObject CreateFromPrimitiveType(object v, Nullable`1<int> stringId);
    public static JObject CreateNull(string className);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.JObjectValueCreator/<ReadAsVariableValue>d__8")]
public Task`1<JObject> ReadAsVariableValue(MonoBinaryReader retDebuggerCmdReader, string name, CancellationToken token, bool isOwn, int typeIdForObject, bool forDebuggerDisplayAttribute, bool includeStatic);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.JObjectValueCreator/<ReadAsObjectValue>d__9")]
private Task`1<JObject> ReadAsObjectValue(MonoBinaryReader retDebuggerCmdReader, int typeIdFromAttribute, bool forDebuggerDisplayAttribute, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.JObjectValueCreator/<ReadAsValueType>d__10")]
public Task`1<JObject> ReadAsValueType(MonoBinaryReader retDebuggerCmdReader, string name, long initialPos, bool forDebuggerDisplayAttribute, bool includeStatic, CancellationToken token);
    public void ClearCache();
    public bool TryGetValueTypeById(int valueTypeId, ValueTypeClass& vt);
    public PointerValue GetPointerValue(int pointerId);
    private static JObject CreateJObjectForNumber(T value);
    private static JObject CreateJObjectForChar(int value);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.JObjectValueCreator/<ReadAsPtrValue>d__16")]
private Task`1<JObject> ReadAsPtrValue(ElementType etype, MonoBinaryReader retDebuggerCmdReader, string name, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.JObjectValueCreator/<ReadAsArray>d__17")]
private Task`1<JObject> ReadAsArray(MonoBinaryReader retDebuggerCmdReader, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.JObjectValueCreator/<CreateFixedArrayElement>d__18")]
public Task`1<JObject> CreateFixedArrayElement(MonoBinaryReader retDebuggerCmdReader, ElementType etype, string name, CancellationToken token);
}
internal class Microsoft.WebAssembly.Diagnostics.MemberReferenceResolver : object {
    private static int evaluationResultObjectId;
    private SessionId sessionId;
    private int scopeId;
    private MonoProxy proxy;
    private ExecutionContext context;
    private PerScopeCache scopeCache;
    private ILogger logger;
    private bool localsFetched;
    private int linqTypeId;
    private static String[] primitiveTypes;
    public MemberReferenceResolver(MonoProxy proxy, ExecutionContext ctx, SessionId sessionId, int scopeId, ILogger logger);
    public MemberReferenceResolver(MonoProxy proxy, ExecutionContext ctx, SessionId sessionId, JArray objectValues, ILogger logger);
    private static MemberReferenceResolver();
    public ExecutionContext GetContext();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MemberReferenceResolver/<GetValueFromObject>d__12")]
public Task`1<JObject> GetValueFromObject(JToken objRet, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MemberReferenceResolver/<ResolveStaticMembersInStaticTypes>d__13")]
public Task`1<ValueTuple`2<JObject, ArraySegment`1<string>>> ResolveStaticMembersInStaticTypes(ArraySegment`1<string> expressionParts, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MemberReferenceResolver/<Resolve>d__14")]
public Task`1<JObject> Resolve(string varName, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MemberReferenceResolver/<Resolve>d__15")]
public Task`1<JObject> Resolve(ElementAccessExpressionSyntax elementAccess, Dictionary`2<string, JObject> memberAccessValues, List`1<JObject> nestedIndexObject, List`1<VariableDefinition> variableDefinitions, CancellationToken token);
    private static bool CheckParametersCompatibility(ParameterInfo[] paramInfos, List`1<object> indexObjects);
    private static bool CheckParameterCompatibility(Nullable`1<ElementType> paramTypeCode, JObject value);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MemberReferenceResolver/<ResolveInvocationInfo>d__18")]
public Task`1<ValueTuple`2<JObject, string>> ResolveInvocationInfo(InvocationExpressionSyntax method, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MemberReferenceResolver/<Resolve>d__20")]
public Task`1<JObject> Resolve(InvocationExpressionSyntax method, Dictionary`2<string, JObject> memberAccessValues, CancellationToken token);
    public JObject ConvertCSharpToJSType(object v, Type type);
    private JObject CacheEvaluationResult(JObject value);
    public JObject TryGetEvaluationResult(string id);
    [CompilerGeneratedAttribute]
internal static string <ResolveStaticMembersInStaticTypes>g__StripAsyncPartOfFullName|13_2(string fullName);
    [CompilerGeneratedAttribute]
private JObject <ConvertCSharpToJSType>b__21_0(object val, int idx);
    [CompilerGeneratedAttribute]
private bool <CacheEvaluationResult>g__IsDuplicated|22_0(JObject er, JObject& duplicate);
}
public class Microsoft.WebAssembly.Diagnostics.MessageId : object {
    public string sessionId;
    public int id;
    public MessageId(string sessionId, int id);
    public static SessionId op_Implicit(MessageId id);
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MessageId other);
}
internal class Microsoft.WebAssembly.Diagnostics.MetadataDebugSummary : object {
    [CompilerGeneratedAttribute]
private MetadataReader <PdbMetadataReader>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPortableCodeView>k__BackingField;
    [CompilerGeneratedAttribute]
private PdbChecksum[] <PdbChecksums>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CodeViewDebugDirectoryData> <CodeViewData>k__BackingField;
    internal MetadataReader PdbMetadataReader { get; private set; }
    internal bool IsPortableCodeView { get; private set; }
    internal PdbChecksum[] PdbChecksums { get; private set; }
    internal Nullable`1<CodeViewDebugDirectoryData> CodeViewData { get; private set; }
    private MetadataDebugSummary(MetadataReader pdbMetadataReader, bool isPortableCodeView, PdbChecksum[] pdbChecksums, Nullable`1<CodeViewDebugDirectoryData> codeViewData);
    [CompilerGeneratedAttribute]
internal MetadataReader get_PdbMetadataReader();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PdbMetadataReader(MetadataReader value);
    [CompilerGeneratedAttribute]
internal bool get_IsPortableCodeView();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsPortableCodeView(bool value);
    [CompilerGeneratedAttribute]
internal PdbChecksum[] get_PdbChecksums();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_PdbChecksums(PdbChecksum[] value);
    [CompilerGeneratedAttribute]
internal Nullable`1<CodeViewDebugDirectoryData> get_CodeViewData();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CodeViewData(Nullable`1<CodeViewDebugDirectoryData> value);
    internal static MetadataDebugSummary Create(MonoProxy monoProxy, SessionId sessionId, string name, IDebugMetadataProvider provider, Byte[] pdb, CancellationToken token);
}
internal class Microsoft.WebAssembly.Diagnostics.MethodInfo : object {
    private MethodDefinition methodDef;
    [CompilerGeneratedAttribute]
private SourceFile <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public MethodDebugInformation DebugInformation;
    public MethodDefinitionHandle methodDefHandle;
    internal MetadataReader pdbMetadataReader;
    internal bool hasDebugInformation;
    [CompilerGeneratedAttribute]
private SourceLocation <StartLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceLocation <EndLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private AssemblyInfo <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Token>k__BackingField;
    internal bool IsEnCMethod;
    internal LocalScopeHandleCollection localScopes;
    [CompilerGeneratedAttribute]
private MethodAttributes <Attributes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private DebuggerAttributesInfo <DebuggerAttrInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeInfo <TypeInfo>k__BackingField;
    private ParameterInfo[] _parametersInfo;
    [CompilerGeneratedAttribute]
private int <KickOffMethod>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompilerGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncScopeDebugInformation[] <_asyncScopes>k__BackingField;
    private static SignatureTypeProvider _signatureTypeProvider;
    internal SourceFile Source { get; internal set; }
    public SourceId SourceId { get; }
    public string SourceName { get; }
    public string Name { get; }
    public SourceLocation StartLocation { get; public set; }
    public SourceLocation EndLocation { get; public set; }
    public AssemblyInfo Assembly { get; }
    public int Token { get; }
    public MethodAttributes Attributes { get; }
    public int IsAsync { get; public set; }
    public DebuggerAttributesInfo DebuggerAttrInfo { get; public set; }
    public TypeInfo TypeInfo { get; }
    public bool HasSequencePoints { get; }
    public int KickOffMethod { get; }
    internal bool IsCompilerGenerated { get; }
    private AsyncScopeDebugInformation[] _asyncScopes { get; private set; }
    public MethodInfo(AssemblyInfo assembly, string methodName, int methodToken, TypeInfo type, MethodAttributes attrs);
    public MethodInfo(AssemblyInfo assembly, MethodDefinitionHandle methodDefHandle, int token, SourceFile source, TypeInfo type, MetadataReader asmMetadataReader, MetadataReader pdbMetadataReader, bool fromEnC);
    private static MethodInfo();
    [CompilerGeneratedAttribute]
internal SourceFile get_Source();
    [CompilerGeneratedAttribute]
internal void set_Source(SourceFile value);
    public SourceId get_SourceId();
    public string get_SourceName();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public SourceLocation get_StartLocation();
    [CompilerGeneratedAttribute]
public void set_StartLocation(SourceLocation value);
    [CompilerGeneratedAttribute]
public SourceLocation get_EndLocation();
    [CompilerGeneratedAttribute]
public void set_EndLocation(SourceLocation value);
    [CompilerGeneratedAttribute]
public AssemblyInfo get_Assembly();
    [CompilerGeneratedAttribute]
public int get_Token();
    public bool IsStatic();
    [CompilerGeneratedAttribute]
public MethodAttributes get_Attributes();
    [CompilerGeneratedAttribute]
public int get_IsAsync();
    [CompilerGeneratedAttribute]
public void set_IsAsync(int value);
    [CompilerGeneratedAttribute]
public DebuggerAttributesInfo get_DebuggerAttrInfo();
    [CompilerGeneratedAttribute]
public void set_DebuggerAttrInfo(DebuggerAttributesInfo value);
    [CompilerGeneratedAttribute]
public TypeInfo get_TypeInfo();
    public bool get_HasSequencePoints();
    [CompilerGeneratedAttribute]
public int get_KickOffMethod();
    [CompilerGeneratedAttribute]
internal bool get_IsCompilerGenerated();
    [CompilerGeneratedAttribute]
private AsyncScopeDebugInformation[] get__asyncScopes();
    [CompilerGeneratedAttribute]
private void set__asyncScopes(AsyncScopeDebugInformation[] value);
    public bool ContainsAsyncScope(int oneBasedIdx, int offset);
    public ParameterInfo[] GetParametersInfo();
    public void UpdatePdbInformation(MethodDefinitionHandle methodDefHandleParm);
    public void UpdateEnC(MetadataReader pdbMetadataReaderParm, int methodIdx);
    public SourceLocation GetLocationByIl(int pos);
    public VarInfo[] GetLiveVarsAt(int offset);
    public virtual string ToString();
    public bool IsLexicallyContainedInMethod(MethodInfo containerMethod);
    [CompilerGeneratedAttribute]
private <>f__AnonymousType2`2<CustomDebugInformationHandle, CustomDebugInformation> <UpdatePdbInformation>b__65_0(CustomDebugInformationHandle cdiHandle);
    [CompilerGeneratedAttribute]
private bool <UpdatePdbInformation>b__65_1(<>f__AnonymousType2`2<CustomDebugInformationHandle, CustomDebugInformation> <>h__TransparentIdentifier0);
    [CompilerGeneratedAttribute]
private Byte[] <UpdatePdbInformation>b__65_2(<>f__AnonymousType2`2<CustomDebugInformationHandle, CustomDebugInformation> <>h__TransparentIdentifier0);
}
internal class Microsoft.WebAssembly.Diagnostics.MethodInfoWithDebugInformation : object {
    private ParameterInfo[] _paramsInfo;
    [CompilerGeneratedAttribute]
private MethodInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DebugId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public MethodInfo Info { get; }
    public int DebugId { get; }
    public string Name { get; }
    public MethodInfoWithDebugInformation(MethodInfo info, int debugId, string name);
    [CompilerGeneratedAttribute]
public MethodInfo get_Info();
    [CompilerGeneratedAttribute]
public int get_DebugId();
    [CompilerGeneratedAttribute]
public string get_Name();
    public ParameterInfo[] GetParametersInfo();
}
internal enum Microsoft.WebAssembly.Diagnostics.ModifierKind : Enum {
    public int value__;
    public static ModifierKind Count;
    public static ModifierKind ThreadOnly;
    public static ModifierKind LocationOnly;
    public static ModifierKind ExceptionOnly;
    public static ModifierKind Step;
    public static ModifierKind AssemblyOnly;
    public static ModifierKind SourceFileOnly;
    public static ModifierKind TypeNameOnly;
}
internal class Microsoft.WebAssembly.Diagnostics.MonoBinaryReader : BinaryReader {
    [CompilerGeneratedAttribute]
private bool <HasError>k__BackingField;
    public bool HasError { get; }
    private MonoBinaryReader(Stream stream, bool hasError);
    public MonoBinaryReader(Byte[] data);
    [CompilerGeneratedAttribute]
public bool get_HasError();
    public static MonoBinaryReader From(Result result);
    public virtual string ReadString();
    public virtual sbyte ReadSByte();
    public byte ReadUByte();
    public ushort ReadUShort();
    public virtual int ReadInt32();
    public virtual double ReadDouble();
    public virtual UInt32 ReadUInt32();
    public virtual float ReadSingle();
    public virtual ulong ReadUInt64();
    public virtual long ReadInt64();
    private T ReadBigEndian();
}
internal class Microsoft.WebAssembly.Diagnostics.MonoBinaryWriter : BinaryWriter {
    public virtual void Write(string val);
    public virtual void Write(long val);
    public virtual void Write(int val);
    private void WriteBigEndian(T val);
    internal void Write(ElementType type, T value);
    private void Write(T1 type, T2 value);
    public void WriteObj(DotnetObjectId objectId, MonoSDBHelper SdbHelper);
    public void WriteByteArray(Byte[] bytes);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoBinaryWriter/<WriteConst>d__9")]
public Task`1<bool> WriteConst(Nullable`1<ElementType> type, object value, MonoSDBHelper SdbHelper, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoBinaryWriter/<WriteConst>d__10")]
public Task`1<bool> WriteConst(LiteralExpressionSyntax constValue, MonoSDBHelper SdbHelper, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoBinaryWriter/<WriteJsonValue>d__11")]
public Task`1<bool> WriteJsonValue(JObject objValue, MonoSDBHelper SdbHelper, Nullable`1<ElementType> expectedType, CancellationToken token);
    public ArraySegment`1<byte> GetParameterBuffer();
    public ValueTuple`2<string, int> ToBase64();
}
internal class Microsoft.WebAssembly.Diagnostics.MonoCommands : object {
    [CompilerGeneratedAttribute]
private string <expression>k__BackingField;
    [CompilerGeneratedAttribute]
private string <objectGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <includeCommandLineAPI>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <silent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <returnByValue>k__BackingField;
    public string expression { get; public set; }
    public string objectGroup { get; public set; }
    public bool includeCommandLineAPI { get; public set; }
    public bool silent { get; public set; }
    public bool returnByValue { get; public set; }
    public MonoCommands(string expression);
    [CompilerGeneratedAttribute]
public string get_expression();
    [CompilerGeneratedAttribute]
public void set_expression(string value);
    [CompilerGeneratedAttribute]
public string get_objectGroup();
    [CompilerGeneratedAttribute]
public void set_objectGroup(string value);
    [CompilerGeneratedAttribute]
public bool get_includeCommandLineAPI();
    [CompilerGeneratedAttribute]
public void set_includeCommandLineAPI(bool value);
    [CompilerGeneratedAttribute]
public bool get_silent();
    [CompilerGeneratedAttribute]
public void set_silent(bool value);
    [CompilerGeneratedAttribute]
public bool get_returnByValue();
    [CompilerGeneratedAttribute]
public void set_returnByValue(bool value);
    public static MonoCommands GetDebuggerAgentBufferReceived(int runtimeId);
    public static MonoCommands IsRuntimeReady(int runtimeId);
    public static MonoCommands GetLoadedFiles(int runtimeId);
    public static MonoCommands SetDebuggerAttached(int runtimeId);
    public static MonoCommands SendDebuggerAgentCommand(int runtimeId, int id, int command_set, int command, string command_parameters);
    public static MonoCommands SendDebuggerAgentCommandWithParms(int runtimeId, int id, int command_set, int command, string command_parameters, int len, int type, string parm);
    public static MonoCommands CallFunctionOn(int runtimeId, JToken args);
    public static MonoCommands GetDetails(int runtimeId, int objectId, JToken args);
    public static MonoCommands Resume(int runtimeId);
    public static MonoCommands DetachDebugger(int runtimeId);
    public static MonoCommands ReleaseObject(int runtimeId, DotnetObjectId objectId);
    public static MonoCommands GetWasmFunctionIds(int runtimeId);
}
internal static class Microsoft.WebAssembly.Diagnostics.MonoConstants : object {
    public static string EVENT_RAISED;
}
internal enum Microsoft.WebAssembly.Diagnostics.MonoErrorCodes : Enum {
    public int value__;
    public static MonoErrorCodes BpNotFound;
}
internal class Microsoft.WebAssembly.Diagnostics.MonoProxy : DevToolsProxy {
    [CompilerGeneratedAttribute]
private List`1<string> <UrlSymbolServerList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CachePathSymbolServer>k__BackingField;
    private HashSet`1<SessionId> sessions;
    private static String[] s_executionContextIndependentCDPCommandNames;
    internal ConcurrentExecutionContextDictionary Contexts;
    [CompilerGeneratedAttribute]
private int <RuntimeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JustMyCode>k__BackingField;
    [CompilerGeneratedAttribute]
private PauseOnExceptionsKind <_defaultPauseOnExceptions>k__BackingField;
    internal List`1<string> UrlSymbolServerList { get; private set; }
    internal string CachePathSymbolServer { get; private set; }
    public static HttpClient HttpClient { get; }
    public int RuntimeId { get; private set; }
    public bool JustMyCode { get; private set; }
    private PauseOnExceptionsKind _defaultPauseOnExceptions { get; private set; }
    public MonoProxy(ILogger logger, int runtimeId, string loggerId, ProxyOptions options);
    private static MonoProxy();
    [CompilerGeneratedAttribute]
internal List`1<string> get_UrlSymbolServerList();
    [CompilerGeneratedAttribute]
private void set_UrlSymbolServerList(List`1<string> value);
    [CompilerGeneratedAttribute]
internal string get_CachePathSymbolServer();
    [CompilerGeneratedAttribute]
private void set_CachePathSymbolServer(string value);
    public static HttpClient get_HttpClient();
    [CompilerGeneratedAttribute]
public int get_RuntimeId();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RuntimeId(int value);
    [CompilerGeneratedAttribute]
public bool get_JustMyCode();
    [CompilerGeneratedAttribute]
private void set_JustMyCode(bool value);
    [CompilerGeneratedAttribute]
private PauseOnExceptionsKind get__defaultPauseOnExceptions();
    [CompilerGeneratedAttribute]
private void set__defaultPauseOnExceptions(PauseOnExceptionsKind value);
    internal virtual Task`1<Result> SendMonoCommand(SessionId id, MonoCommands cmd, CancellationToken token);
    internal void SendLog(SessionId sessionId, string message, CancellationToken token, string type);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<AcceptEvent>d__28")]
protected virtual Task`1<bool> AcceptEvent(SessionId sessionId, JObject parms, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnDebuggerPaused>d__29")]
protected Task`1<bool> OnDebuggerPaused(SessionId sessionId, JObject args, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<SendResume>d__30")]
protected virtual Task SendResume(SessionId id, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<IsRuntimeAlreadyReadyAlready>d__31")]
protected Task`1<bool> IsRuntimeAlreadyReadyAlready(SessionId sessionId, CancellationToken token);
    private static PauseOnExceptionsKind GetPauseOnExceptionsStatusFromString(string state);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<AcceptCommand>d__33")]
protected virtual Task`1<bool> AcceptCommand(MessageId id, JObject parms, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<ReloadSymbolsFromSymbolServer>d__34")]
private Task`1<bool> ReloadSymbolsFromSymbolServer(SessionId id, ExecutionContext context, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<ApplyUpdates>d__35")]
private Task`1<bool> ApplyUpdates(MessageId id, JObject args, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<SetJustMyCode>d__36")]
private Task SetJustMyCode(MessageId id, bool isEnabled, ExecutionContext context, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<GetMethodLocation>d__37")]
internal Task`1<Result> GetMethodLocation(MessageId id, JObject args, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<CallOnFunction>d__38")]
private Task`1<bool> CallOnFunction(MessageId id, JObject args, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnSetVariableValue>d__39")]
private Task`1<bool> OnSetVariableValue(MessageId id, int scopeId, string varName, JToken varValue, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<RuntimeGetObjectMembers>d__40")]
internal Task`1<ValueOrError`1<GetMembersResult>> RuntimeGetObjectMembers(SessionId id, DotnetObjectId objectId, JToken args, CancellationToken token, bool sortByAccessLevel);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<EvaluateCondition>d__41")]
protected Task`1<bool> EvaluateCondition(SessionId sessionId, ExecutionContext context, Frame mono_frame, Breakpoint bp, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<ProcessEnC>d__42")]
private Task`1<bool> ProcessEnC(SessionId sessionId, ExecutionContext context, MonoBinaryReader retDebuggerCmdReader, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<SendBreakpointsOfMethodUpdated>d__43")]
private Task`1<bool> SendBreakpointsOfMethodUpdated(SessionId sessionId, ExecutionContext context, MonoBinaryReader retDebuggerCmdReader, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<ShouldSkipMethod>d__44")]
protected virtual Task`1<bool> ShouldSkipMethod(SessionId sessionId, ExecutionContext context, EventKind event_kind, int frameNumber, int totalFrames, MethodInfoWithDebugInformation method, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<SendCallStack>d__45")]
protected virtual Task`1<bool> SendCallStack(SessionId sessionId, ExecutionContext context, string reason, int thread_id, Breakpoint bp, JObject data, JObject args, EventKind event_kind, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<SymbolicateFunctionName>d__46")]
private Task SymbolicateFunctionName(SessionId sessionId, ExecutionContext context, JObject frame, CancellationToken token);
    internal virtual void SaveLastDebuggerAgentBufferReceivedToContext(SessionId sessionId, Task`1<Result> debuggerAgentBufferTask);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<GetLastDebuggerAgentBuffer>d__48")]
internal Task`1<Result> GetLastDebuggerAgentBuffer(SessionId sessionId, JObject args, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnReceiveDebuggerAgentEvent>d__49")]
internal Task`1<bool> OnReceiveDebuggerAgentEvent(SessionId sessionId, JObject args, Result debuggerAgentBuffer, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnDefaultContext>d__50")]
protected Task OnDefaultContext(SessionId sessionId, ExecutionContext context, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnResume>d__51")]
protected Task OnResume(MessageId msg_id, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<TryStepOnManagedCodeAndStepOutIfNotPossible>d__52")]
protected Task`1<bool> TryStepOnManagedCodeAndStepOutIfNotPossible(SessionId sessionId, ExecutionContext context, StepKind kind, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<Step>d__53")]
protected Task`1<bool> Step(MessageId msgId, StepKind kind, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnJSEventRaised>d__54")]
private Task`1<bool> OnJSEventRaised(SessionId sessionId, JObject eventArgs, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnAssemblyLoadedJSEvent>d__55")]
private Task`1<bool> OnAssemblyLoadedJSEvent(SessionId sessionId, JObject eventArgs, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnSetEntrypointBreakpoint>d__56")]
private Task OnSetEntrypointBreakpoint(SessionId sessionId, JObject args, CancellationToken token);
    private Result AddCallStackInfoToException(Result _error, ExecutionContext context, int scopeId);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnEvaluateOnCallFrame>d__58")]
private Task`1<bool> OnEvaluateOnCallFrame(MessageId msg_id, int scopeId, string expression, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<GetScopeProperties>d__59")]
internal Task`1<GetMembersResult> GetScopeProperties(SessionId msg_id, int scopeId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<SetMonoBreakpoint>d__60")]
private Task`1<Breakpoint> SetMonoBreakpoint(SessionId sessionId, string reqId, SourceLocation location, string condition, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnSourceFileAdded>d__61")]
internal virtual Task OnSourceFileAdded(SessionId sessionId, SourceFile source, ExecutionContext context, CancellationToken token, bool resolveBreakpoints);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<LoadStore>d__62")]
internal virtual Task`1<DebugStore> LoadStore(SessionId sessionId, bool tryUseDebuggerProtocol, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<RuntimeReady>d__63")]
protected Task`1<DebugStore> RuntimeReady(SessionId sessionId, CancellationToken token);
    private static IEnumerable`1<IGrouping`2<SourceId, SourceLocation>> GetBPReqLocations(DebugStore store, BreakpointRequest req, bool ifNoneFoundThenFindNext);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<ResetBreakpoint>d__65")]
private Task ResetBreakpoint(SessionId msg_id, DebugStore store, MethodInfo method, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<RemoveBreakpoint>d__66")]
protected Task RemoveBreakpoint(SessionId msg_id, JObject args, bool isEnCReset, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<SetBreakpoint>d__67")]
protected Task SetBreakpoint(SessionId sessionId, DebugStore store, BreakpointRequest req, bool sendResolvedEvent, bool fromEnC, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<GetPossibleBreakpoints>d__68")]
private Task`1<bool> GetPossibleBreakpoints(MessageId msg, SourceLocation start, SourceLocation end, CancellationToken token);
    private void OnCompileDotnetScript(MessageId msg_id, CancellationToken token);
    private static bool IsNestedMethod(DebugStore store, Frame scope, SourceLocation foundLocation, SourceLocation targetLocation);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnSetNextIP>d__71")]
private Task`1<bool> OnSetNextIP(MessageId sessionId, SourceLocation targetLocation, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<OnGetScriptSource>d__72")]
internal virtual Task`1<bool> OnGetScriptSource(MessageId msg_id, string script_id, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<AttachToTarget>d__73")]
private Task AttachToTarget(SessionId sessionId, CancellationToken token);
    private bool JObjectTryParse(string str, JObject& obj, bool log_exception);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoProxy/<<LoadStore>g__GetLoadedFiles|62_0>d")]
[CompilerGeneratedAttribute]
private Task`1<String[]> <LoadStore>g__GetLoadedFiles|62_0(SessionId sessionId, ExecutionContext context, CancellationToken token);
}
internal class Microsoft.WebAssembly.Diagnostics.MonoSDBHelper : object {
    public static string WebcilInWasmExtension;
    private static int debuggerObjectId;
    private static int cmdId;
    private static int MINOR_VERSION;
    private static int MAJOR_VERSION;
    [CompilerGeneratedAttribute]
private int <VmMinorVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VmMajorVersion>k__BackingField;
    private Dictionary`2<int, MethodInfoWithDebugInformation> methods;
    private Dictionary`2<int, AssemblyInfo> assemblies;
    private Dictionary`2<int, TypeInfoWithDebugInformation> types;
    private MonoProxy proxy;
    private DebugStore store;
    private SessionId sessionId;
    internal ILogger logger;
    [CompilerGeneratedAttribute]
private JObjectValueCreator <ValueCreator>k__BackingField;
    private static String[] s_primitiveTypeNames;
    private int VmMinorVersion { get; private set; }
    private int VmMajorVersion { get; private set; }
    public JObjectValueCreator ValueCreator { get; public set; }
    public MonoSDBHelper(MonoProxy proxy, ILogger logger, SessionId sessionId);
    private static MonoSDBHelper();
    [CompilerGeneratedAttribute]
private int get_VmMinorVersion();
    [CompilerGeneratedAttribute]
private void set_VmMinorVersion(int value);
    [CompilerGeneratedAttribute]
private int get_VmMajorVersion();
    [CompilerGeneratedAttribute]
private void set_VmMajorVersion(int value);
    [GeneratedRegexAttribute("\<(?<varName>[^)]*)\>(?<varId>[^)]*)(__)(?<scopeId>\d+)", "16")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
private static Regex RegexForAsyncLocals();
    [GeneratedRegexAttribute("\$VB\$ResumableLocal_(?<varName>[^\$]*)\$(?<scopeId>\d+)", "16")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
private static Regex RegexForVBAsyncLocals();
    [GeneratedRegexAttribute("VB\$StateMachine_(\d+)_(?<methodName>.*)", "16")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
private static Regex RegexForVBAsyncMethodName();
    [GeneratedRegexAttribute("\<([^>]*)\>([d][_][_])([0-9]*)")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
private static Regex RegexForAsyncMethodName();
    [GeneratedRegexAttribute("[`][0-9]+")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
private static Regex RegexForGenericArgs();
    [GeneratedRegexAttribute("^(((?'Open'<)[^<>]*)+((?'Close-Open'>)[^<>]*)+)*(?(Open)(?!))[^<>]*")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
private static Regex RegexForNestedLeftRightAngleBrackets();
    [CompilerGeneratedAttribute]
public JObjectValueCreator get_ValueCreator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ValueCreator(JObjectValueCreator value);
    public static int GetNewId();
    public static int GetNewObjectId();
    public MonoSDBHelper Clone(SessionId sessionId);
    public void ResetStore(DebugStore store);
    public void ResetTypes();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetAssemblyInfo>d__36")]
public Task`1<AssemblyInfo> GetAssemblyInfo(int assemblyId, CancellationToken token);
    public static string GetPrettierMethodName(string methodName);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetMethodInfo>d__38")]
public Task`1<MethodInfoWithDebugInformation> GetMethodInfo(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<CreateMethodInfoFromRuntimeInformation>d__39")]
public Task`1<MethodInfo> CreateMethodInfoFromRuntimeInformation(AssemblyInfo asm, int methodId, string methodName, int methodToken, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypeInfo>d__40")]
public Task`1<TypeInfoWithDebugInformation> GetTypeInfo(int typeId, CancellationToken token);
    public void ClearCache();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetVMVersion>d__42")]
public Task`1<ValueTuple`2<int, int>> GetVMVersion(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<SetProtocolVersion>d__43")]
public Task`1<bool> SetProtocolVersion(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<EnableReceiveRequests>d__44")]
public Task`1<bool> EnableReceiveRequests(EventKind eventKind, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<SendDebuggerAgentCommand>d__45`1")]
internal Task`1<MonoBinaryReader> SendDebuggerAgentCommand(T command, MonoBinaryWriter arguments, CancellationToken token, bool throwOnError);
    private static CommandSet GetCommandSetForCommand(T command);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<SendDebuggerAgentCommandWithParms>d__47`1")]
internal Task`1<MonoBinaryReader> SendDebuggerAgentCommandWithParms(T command, ValueTuple`2<string, int> encoded, int type, string extraParm, CancellationToken token, bool throwOnError);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<CreateString>d__48")]
public Task`1<int> CreateString(string value, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetAttributesFromMethodId>d__49")]
public Task`1<MethodAttributes> GetAttributesFromMethodId(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypeTokenFromMethodId>d__50")]
public Task`1<int> GetTypeTokenFromMethodId(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetMethodToken>d__51")]
public Task`1<int> GetMethodToken(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<MakeGenericMethod>d__52")]
public Task`1<int> MakeGenericMethod(int methodId, List`1<int> genericTypes, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetMethodIdByToken>d__53")]
public Task`1<int> GetMethodIdByToken(int assembly_id, int method_token, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetAssemblyIdFromType>d__54")]
public Task`1<int> GetAssemblyIdFromType(int type_id, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypeParamsOrArgsForGenericType>d__55")]
public Task`1<List`1<int>> GetTypeParamsOrArgsForGenericType(int typeId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetAssemblyIdFromMethod>d__56")]
public Task`1<int> GetAssemblyIdFromMethod(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetAssemblyId>d__57")]
public Task`1<int> GetAssemblyId(string asm_name, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetModuleId>d__58")]
public Task`1<int> GetModuleId(string moduleGuid, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetAssemblyNameFromModule>d__59")]
public Task`1<string> GetAssemblyNameFromModule(int moduleId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetAssemblyName>d__60")]
public Task`1<string> GetAssemblyName(int assembly_id, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetFullAssemblyName>d__61")]
public Task`1<string> GetFullAssemblyName(int assemblyId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetAssemblyFileNameFromId>d__62")]
public Task`1<string> GetAssemblyFileNameFromId(int assemblyId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetMethodName>d__63")]
public Task`1<string> GetMethodName(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetPrettyMethodName>d__64")]
public Task`1<string> GetPrettyMethodName(int methodId, bool isAnonymous, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<MethodIsStatic>d__65")]
public Task`1<bool> MethodIsStatic(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetParamCount>d__66")]
public Task`1<int> GetParamCount(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetReturnType>d__67")]
public Task`1<string> GetReturnType(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetParameters>d__68")]
public Task`1<string> GetParameters(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<SetBreakpointNoThrow>d__69")]
public Task`1<int> SetBreakpointNoThrow(int methodId, long il_offset, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<RemoveBreakpoint>d__70")]
public Task`1<bool> RemoveBreakpoint(int breakpoint_id, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<Step>d__71")]
public Task`1<bool> Step(int thread_id, StepKind kind, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<ClearSingleStep>d__72")]
public Task`1<bool> ClearSingleStep(int req_id, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetFieldValue>d__73")]
public Task`1<JObject> GetFieldValue(int typeId, int fieldId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<TypeIsInitialized>d__74")]
public Task`1<int> TypeIsInitialized(int typeId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<TypeInitialize>d__75")]
public Task`1<int> TypeInitialize(int typeId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypePropertiesReader>d__76")]
public Task`1<MonoBinaryReader> GetTypePropertiesReader(int typeId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypeFields>d__77")]
public Task`1<List`1<FieldTypeClass>> GetTypeFields(int typeId, CancellationToken token);
    private static string ReplaceCommonClassNames(string className);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetCAttrsFromType>d__79")]
internal Task`1<MonoBinaryReader> GetCAttrsFromType(int typeId, string attrName, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetAssemblyFromType>d__80")]
public Task`1<int> GetAssemblyFromType(int type_id, CancellationToken token);
    public JToken GetEvaluationResultProperties(string id);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetValueFromDebuggerDisplayAttribute>d__82")]
public Task`1<string> GetValueFromDebuggerDisplayAttribute(DotnetObjectId dotnetObjectId, int typeId, CancellationToken token);
    [GeneratedRegexAttribute("`\d+")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
private static Regex RegexForGenericArity();
    [GeneratedRegexAttribute("[[, ]+]")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
private static Regex RegexForSquareBrackets();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypeName>d__85")]
public Task`1<string> GetTypeName(int typeId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypeNameOriginal>d__86")]
public Task`1<string> GetTypeNameOriginal(int typeId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypeToken>d__87")]
public Task`1<int> GetTypeToken(int typeId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetStringValue>d__88")]
public Task`1<string> GetStringValue(int string_id, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetArrayDimensions>d__89")]
public Task`1<ArrayDimensions> GetArrayDimensions(int object_id, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypeIdsForObject>d__90")]
public Task`1<List`1<int>> GetTypeIdsForObject(int object_id, bool withParents, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetClassNameFromObject>d__91")]
public Task`1<string> GetClassNameFromObject(int object_id, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypeIdFromToken>d__92")]
public Task`1<int> GetTypeIdFromToken(int assemblyId, int typeToken, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetMethodIdsByName>d__93")]
public Task`1<Int32[]> GetMethodIdsByName(int type_id, string method_name, BindingFlags extraFlags, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<IsDelegate>d__94")]
public Task`1<bool> IsDelegate(int objectId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetDelegateMethod>d__95")]
public Task`1<int> GetDelegateMethod(int objectId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetDelegateMethodDescription>d__96")]
public Task`1<string> GetDelegateMethodDescription(int objectId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<InvokeMethod>d__97")]
public Task`1<JObject> InvokeMethod(ArraySegment`1<byte> argsBuffer, int methodId, CancellationToken token, string name, bool isMethodStatic);
    public Task`1<JObject> InvokeMethod(int objectId, int methodId, bool isValueType, CancellationToken token, bool isMethodStatic);
    public Task`1<JObject> InvokeMethod(DotnetObjectId dotnetObjectId, CancellationToken token, int methodId);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<InvokeToStringAsync>d__100")]
public Task`1<string> InvokeToStringAsync(IEnumerable`1<int> typeIds, bool isValueType, bool isEnum, int objectId, BindingFlags extraFlags, bool invokeToStringInObject, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetPropertyMethodIdByName>d__101")]
public Task`1<int> GetPropertyMethodIdByName(int typeId, string propertyName, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetPointerContent>d__102")]
public Task`1<JObject> GetPointerContent(int pointerId, CancellationToken token);
    public static int GetNextDebuggerObjectId();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetIsAsyncFromMethodId>d__104")]
public Task`1<bool> GetIsAsyncFromMethodId(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypeFromMethodIdAsync>d__105")]
public Task`1<int> GetTypeFromMethodIdAsync(int methodId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<IsAsyncMethod>d__106")]
public Task`1<bool> IsAsyncMethod(int methodId, CancellationToken token);
    private static bool IsClosureReferenceField(string fieldName);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetHoistedLocalVariables>d__108")]
public Task`1<JArray> GetHoistedLocalVariables(MethodInfoWithDebugInformation method, int objectId, IEnumerable`1<JToken> asyncLocals, int offset, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<StackFrameGetValues>d__109")]
public Task`1<JArray> StackFrameGetValues(MethodInfoWithDebugInformation method, int thread_id, int frame_id, VarInfo[] varIds, int offset, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetArrayValues>d__110")]
public Task`1<JArray> GetArrayValues(int arrayId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetArrayValuesProxy>d__111")]
public Task`1<JObject> GetArrayValuesProxy(int arrayId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<EnableExceptions>d__112")]
public Task`1<bool> EnableExceptions(PauseOnExceptionsKind state, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetTypeByName>d__113")]
public Task`1<int> GetTypeByName(string typeToSearch, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetValuesFromDebuggerProxyAttributeForObject>d__114")]
public Task`1<GetMembersResult> GetValuesFromDebuggerProxyAttributeForObject(int objectId, int typeId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetValuesFromDebuggerProxyAttributeForValueTypes>d__115")]
public Task`1<GetMembersResult> GetValuesFromDebuggerProxyAttributeForValueTypes(int valueTypeId, int typeId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<FindDebuggerProxyConstructorIdFor>d__116")]
private Task`1<int> FindDebuggerProxyConstructorIdFor(int typeId, CancellationToken token);
    public ValueTypeClass GetValueTypeClass(int valueTypeId);
    public Task`1<GetMembersResult> GetTypeMemberValues(DotnetObjectId dotnetObjectId, GetObjectCommandOptions getObjectOptions, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetMethodProxy>d__119")]
public Task`1<JObject> GetMethodProxy(JObject objectId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetObjectProxy>d__120")]
public Task`1<JArray> GetObjectProxy(int objectId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<SetVariableValue>d__121")]
public Task`1<bool> SetVariableValue(int thread_id, int frame_id, int varId, string newValue, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<SetNextIP>d__122")]
public Task`1<bool> SetNextIP(MethodInfoWithDebugInformation method, int threadId, IlLocation ilOffset, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<CreateByteArray>d__123")]
public Task`1<int> CreateByteArray(string diff, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<ApplyUpdates>d__124")]
public Task`1<bool> ApplyUpdates(int moduleId, string dmeta, string dil, string dpdb, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<HasDebugInfoLoadedByRuntimeAsync>d__125")]
public Task`1<bool> HasDebugInfoLoadedByRuntimeAsync(string assemblyName, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.MonoSDBHelper/<GetDataFromAssemblyAndPdbAsync>d__126")]
public Task`1<AssemblyAndPdbData> GetDataFromAssemblyAndPdbAsync(string assemblyName, bool ignoreJMC, CancellationToken token);
    public static bool IsPrimitiveType(string simplifiedClassName);
}
internal enum Microsoft.WebAssembly.Diagnostics.MonoTypeNameFormat : Enum {
    public int value__;
    public static MonoTypeNameFormat FormatIL;
    public static MonoTypeNameFormat FormatReflection;
    public static MonoTypeNameFormat FullName;
    public static MonoTypeNameFormat AssemblyQualified;
}
internal class Microsoft.WebAssembly.Diagnostics.ParameterInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ElementType> <TypeCode>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; public set; }
    public Nullable`1<ElementType> TypeCode { get; public set; }
    public object Value { get; public set; }
    public ParameterInfo(string name, ElementType type);
    public ParameterInfo(string name, Nullable`1<ConstantTypeCode> typeCode, Byte[] value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ElementType> get_TypeCode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeCode(Nullable`1<ElementType> value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(object value);
}
internal enum Microsoft.WebAssembly.Diagnostics.PauseOnExceptionsKind : Enum {
    public int value__;
    public static PauseOnExceptionsKind Unset;
    public static PauseOnExceptionsKind None;
    public static PauseOnExceptionsKind Uncaught;
    public static PauseOnExceptionsKind All;
}
internal class Microsoft.WebAssembly.Diagnostics.PerScopeCache : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JObject> <Locals>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JObject> <MemberReferences>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JObject> <ObjectFields>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JObject> <EvaluationResults>k__BackingField;
    public Dictionary`2<string, JObject> Locals { get; }
    public Dictionary`2<string, JObject> MemberReferences { get; }
    public Dictionary`2<string, JObject> ObjectFields { get; }
    public Dictionary`2<string, JObject> EvaluationResults { get; }
    public PerScopeCache(JArray objectValues);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JObject> get_Locals();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JObject> get_MemberReferences();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JObject> get_ObjectFields();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JObject> get_EvaluationResults();
}
internal class Microsoft.WebAssembly.Diagnostics.PointerValue : object {
    public long address;
    public int typeId;
    public string varName;
    private JObject _value;
    public PointerValue(long address, int typeId, string varName);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.PointerValue/<GetValue>d__5")]
public Task`1<JObject> GetValue(MonoSDBHelper sdbHelper, CancellationToken token);
}
internal static class Microsoft.WebAssembly.Diagnostics.PortableCustomDebugInfoKinds : object {
    public static Guid AsyncMethodSteppingInformationBlob;
    public static Guid StateMachineHoistedLocalScopes;
    public static Guid DynamicLocalVariables;
    public static Guid TupleElementNames;
    public static Guid DefaultNamespace;
    public static Guid EncLocalSlotMap;
    public static Guid EncLambdaAndClosureMap;
    public static Guid SourceLink;
    public static Guid EmbeddedSource;
    public static Guid CompilationMetadataReferences;
    public static Guid CompilationOptions;
    private static PortableCustomDebugInfoKinds();
}
public class Microsoft.WebAssembly.Diagnostics.PortableExecutableDebugMetadataProvider : object {
    private PEReader _peReader;
    [NullableContextAttribute("1")]
public PortableExecutableDebugMetadataProvider(PEReader peReader);
    public sealed virtual ImmutableArray`1<DebugDirectoryEntry> ReadDebugDirectory();
    public sealed virtual CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(DebugDirectoryEntry entry);
    public sealed virtual PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(DebugDirectoryEntry entry);
    [NullableContextAttribute("1")]
public sealed virtual MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(DebugDirectoryEntry entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.WebAssembly.Diagnostics.ProxyOptions : object {
    [CompilerGeneratedAttribute]
private Uri <DevToolsUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <OwnerPid>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirefoxProxyPort>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FirefoxDebugPort>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DevToolsProxyPort>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LogPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RunningForBlazor>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreProxyForLocalAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFirefoxDebugging>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <JustMyCode>k__BackingField;
    public Uri DevToolsUrl { get; public set; }
    public Nullable`1<int> OwnerPid { get; public set; }
    public int FirefoxProxyPort { get; public set; }
    public int FirefoxDebugPort { get; public set; }
    public int DevToolsProxyPort { get; public set; }
    public int DevToolsDebugPort { get; public set; }
    [NullableAttribute("2")]
public string LogPath { get; public set; }
    public bool RunningForBlazor { get; public set; }
    public bool IgnoreProxyForLocalAddress { get; public set; }
    public bool IsFirefoxDebugging { get; public set; }
    public bool JustMyCode { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_DevToolsUrl();
    [CompilerGeneratedAttribute]
public void set_DevToolsUrl(Uri value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_OwnerPid();
    [CompilerGeneratedAttribute]
public void set_OwnerPid(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_FirefoxProxyPort();
    [CompilerGeneratedAttribute]
public void set_FirefoxProxyPort(int value);
    [CompilerGeneratedAttribute]
public int get_FirefoxDebugPort();
    [CompilerGeneratedAttribute]
public void set_FirefoxDebugPort(int value);
    [CompilerGeneratedAttribute]
public int get_DevToolsProxyPort();
    [CompilerGeneratedAttribute]
public void set_DevToolsProxyPort(int value);
    public int get_DevToolsDebugPort();
    public void set_DevToolsDebugPort(int value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_LogPath();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LogPath(string value);
    [CompilerGeneratedAttribute]
public bool get_RunningForBlazor();
    [CompilerGeneratedAttribute]
public void set_RunningForBlazor(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreProxyForLocalAddress();
    [CompilerGeneratedAttribute]
public void set_IgnoreProxyForLocalAddress(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFirefoxDebugging();
    [CompilerGeneratedAttribute]
public void set_IsFirefoxDebugging(bool value);
    [CompilerGeneratedAttribute]
public bool get_JustMyCode();
    [CompilerGeneratedAttribute]
public void set_JustMyCode(bool value);
}
public class Microsoft.WebAssembly.Diagnostics.Result : ValueType {
    [CompilerGeneratedAttribute]
private JObject <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <FullContent>k__BackingField;
    public JObject Value { get; private set; }
    public JObject Error { get; private set; }
    public JObject FullContent { get; private set; }
    public bool IsOk { get; }
    private Result(JObject resultOrError, bool isError, JObject fullContent);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public JObject get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(JObject value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public JObject get_Error();
    [CompilerGeneratedAttribute]
private void set_Error(JObject value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public JObject get_FullContent();
    [CompilerGeneratedAttribute]
private void set_FullContent(JObject value);
    public bool get_IsOk();
    public static Result FromJson(JObject obj);
    public static Result FromJsonFirefox(JObject obj);
    public static Result Ok(JObject ok);
    public static Result OkFromObject(object ok);
    public static Result Err(JObject err);
    public static Result Err(string msg);
    public static Result UserVisibleErr(JObject result);
    public static Result Exception(Exception e);
    public JObject ToJObject(MessageId target);
    public virtual string ToString();
}
internal class Microsoft.WebAssembly.Diagnostics.ReturnAsErrorException : Exception {
    private Result _error;
    public Result Error { get; public set; }
    public ReturnAsErrorException(JObject error);
    public ReturnAsErrorException(string message, string className);
    public Result get_Error();
    public void set_Error(Result value);
    public virtual string ToString();
}
internal class Microsoft.WebAssembly.Diagnostics.RunLoop : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<RunLoopExitState> RunLoopStopped;
    [CompilerGeneratedAttribute]
private RunLoopExitState <StoppedState>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<Exception> <_failRequested>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskCompletionSource <_shutdownRequested>k__BackingField;
    private ChannelWriter`1<Task> _channelWriter;
    private ChannelReader`1<Task> _channelReader;
    private DevToolsQueue[] _queues;
    private ILogger _logger;
    public bool IsRunning { get; }
    public RunLoopExitState StoppedState { get; private set; }
    private TaskCompletionSource`1<Exception> _failRequested { get; }
    private TaskCompletionSource _shutdownRequested { get; }
    public RunLoop(DevToolsQueue[] queues, ILogger logger);
    [CompilerGeneratedAttribute]
public void add_RunLoopStopped(EventHandler`1<RunLoopExitState> value);
    [CompilerGeneratedAttribute]
public void remove_RunLoopStopped(EventHandler`1<RunLoopExitState> value);
    public bool get_IsRunning();
    [CompilerGeneratedAttribute]
public RunLoopExitState get_StoppedState();
    [CompilerGeneratedAttribute]
private void set_StoppedState(RunLoopExitState value);
    [CompilerGeneratedAttribute]
private TaskCompletionSource`1<Exception> get__failRequested();
    [CompilerGeneratedAttribute]
private TaskCompletionSource get__shutdownRequested();
    public Task RunAsync(CancellationTokenSource cts);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.RunLoop/<RunActualAsync>d__21")]
private Task`1<RunLoopExitState> RunActualAsync(CancellationTokenSource x);
    public Task Send(Byte[] payload, CancellationToken token, DevToolsQueue queue);
    public void Fail(Exception exception);
    public void Shutdown();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.RunLoop/<ShutdownAsync>d__25")]
public Task ShutdownAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.RunLoop/<<Shutdown>b__24_0>d")]
[CompilerGeneratedAttribute]
private Task <Shutdown>b__24_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.WebAssembly.Diagnostics.RunLoopExitState : object {
    [CompilerGeneratedAttribute]
private RunLoopStopReason <reason>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <exception>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public RunLoopStopReason reason { get; public set; }
    public Exception exception { get; public set; }
    public RunLoopExitState(RunLoopStopReason reason, Exception exception);
    [CompilerGeneratedAttribute]
protected RunLoopExitState(RunLoopExitState original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public RunLoopStopReason get_reason();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_reason(RunLoopStopReason value);
    [CompilerGeneratedAttribute]
public Exception get_exception();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_exception(Exception value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RunLoopExitState left, RunLoopExitState right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RunLoopExitState left, RunLoopExitState right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(RunLoopExitState other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual RunLoopExitState <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(RunLoopStopReason& reason, Exception& exception);
}
public enum Microsoft.WebAssembly.Diagnostics.RunLoopStopReason : Enum {
    public int value__;
    public static RunLoopStopReason Shutdown;
    public static RunLoopStopReason Cancelled;
    public static RunLoopStopReason Exception;
    public static RunLoopStopReason ConnectionClosed;
}
public class Microsoft.WebAssembly.Diagnostics.SessionId : ValueType {
    public string sessionId;
    [CompilerGeneratedAttribute]
private static SessionId <Null>k__BackingField;
    public static SessionId Null { get; }
    public SessionId(string sessionId);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SessionId other);
    public static bool op_Equality(SessionId a, SessionId b);
    public static bool op_Inequality(SessionId a, SessionId b);
    [CompilerGeneratedAttribute]
public static SessionId get_Null();
    public virtual string ToString();
}
internal class Microsoft.WebAssembly.Diagnostics.SignatureTypeProvider : object {
    public sealed virtual ElementType GetPrimitiveType(PrimitiveTypeCode typeCode);
    private sealed virtual override ElementType System.Reflection.Metadata.ISignatureTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType,System.Object>.GetFunctionPointerType(MethodSignature`1<ElementType> signature);
    private sealed virtual override ElementType System.Reflection.Metadata.ISignatureTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType,System.Object>.GetModifiedType(ElementType modifier, ElementType unmodifiedType, bool isRequired);
    private sealed virtual override ElementType System.Reflection.Metadata.ISignatureTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType,System.Object>.GetPinnedType(ElementType elementType);
    private sealed virtual override ElementType System.Reflection.Metadata.IConstructedTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType>.GetArrayType(ElementType elementType, ArrayShape shape);
    private sealed virtual override ElementType System.Reflection.Metadata.IConstructedTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType>.GetByReferenceType(ElementType elementType);
    private sealed virtual override ElementType System.Reflection.Metadata.IConstructedTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType>.GetGenericInstantiation(ElementType genericType, ImmutableArray`1<ElementType> typeArguments);
    private sealed virtual override ElementType System.Reflection.Metadata.IConstructedTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType>.GetPointerType(ElementType elementType);
    private sealed virtual override ElementType System.Reflection.Metadata.ISZArrayTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType>.GetSZArrayType(ElementType elementType);
    private sealed virtual override ElementType System.Reflection.Metadata.ISignatureTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType,System.Object>.GetGenericMethodParameter(object genericContext, int index);
    private sealed virtual override ElementType System.Reflection.Metadata.ISignatureTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType,System.Object>.GetGenericTypeParameter(object genericContext, int index);
    private sealed virtual override ElementType System.Reflection.Metadata.ISignatureTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType,System.Object>.GetTypeFromSpecification(MetadataReader reader, object genericContext, TypeSpecificationHandle handle, byte rawTypeKind);
    private sealed virtual override ElementType System.Reflection.Metadata.ISimpleTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType>.GetTypeFromDefinition(MetadataReader reader, TypeDefinitionHandle handle, byte rawTypeKind);
    private sealed virtual override ElementType System.Reflection.Metadata.ISimpleTypeProvider<Microsoft.WebAssembly.Diagnostics.ElementType>.GetTypeFromReference(MetadataReader reader, TypeReferenceHandle handle, byte rawTypeKind);
}
internal class Microsoft.WebAssembly.Diagnostics.SourceFile : object {
    private Dictionary`2<int, MethodInfo> methods;
    private AssemblyInfo assembly;
    private Document doc;
    private DocumentHandle docHandle;
    [CompilerGeneratedAttribute]
private List`1<int> <BreakableLines>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileUriEscaped>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetUrlEscaped>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <SourceLinkUri>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    private static SHA256 _sha256;
    private string _relativePath;
    internal List`1<int> BreakableLines { get; }
    public string FilePath { get; public set; }
    public string FileUriEscaped { get; public set; }
    public string DotNetUrlEscaped { get; public set; }
    public Uri Url { get; public set; }
    public Uri SourceLinkUri { get; public set; }
    public int Id { get; }
    public string AssemblyName { get; }
    public SourceId SourceId { get; }
    public IEnumerable`1<MethodInfo> Methods { get; }
    internal SourceFile(AssemblyInfo assembly, int id, DocumentHandle docHandle, string documentName, Dictionary`2<string, string> sourceLinkMappings);
    private static SourceFile();
    [GeneratedRegexAttribute("([:/])")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
private static Regex RegexForEscapeFileName();
    [CompilerGeneratedAttribute]
internal List`1<int> get_BreakableLines();
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FilePath(string value);
    [CompilerGeneratedAttribute]
public string get_FileUriEscaped();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FileUriEscaped(string value);
    [CompilerGeneratedAttribute]
public string get_DotNetUrlEscaped();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DotNetUrlEscaped(string value);
    [CompilerGeneratedAttribute]
public Uri get_Url();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Url(Uri value);
    [CompilerGeneratedAttribute]
public Uri get_SourceLinkUri();
    [CompilerGeneratedAttribute]
public void set_SourceLinkUri(Uri value);
    [CompilerGeneratedAttribute]
public int get_Id();
    public string get_AssemblyName();
    public SourceId get_SourceId();
    public IEnumerable`1<MethodInfo> get_Methods();
    private void GetSourceLinkUrl(string document, Dictionary`2<string, string> sourceLinkMappings);
    private static string GetHashOfString(string str);
    private static string EscapePathForUri(string path);
    internal void AddMethod(MethodInfo mi);
    public ValueTuple`4<int, int, int, int> GetExtents();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.SourceFile/<GetDataAsync>d__45")]
private static Task`1<MemoryStream> GetDataAsync(Uri uri, CancellationToken token);
    private static HashAlgorithm GetHashAlgorithm(Guid algorithm);
    private bool CheckPdbHash(Byte[] computedHash);
    private Byte[] ComputePdbHash(Stream sourceStream);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.Diagnostics.SourceFile/<GetSourceAsync>d__49")]
public Task`1<Stream> GetSourceAsync(bool checkHash, CancellationToken token);
    public object ToScriptSource(int executionContextId, object executionContextAuxData);
}
internal class Microsoft.WebAssembly.Diagnostics.SourceId : object {
    private static string Scheme;
    private int assembly;
    private int document;
    public int Assembly { get; }
    public int Document { get; }
    internal SourceId(int assembly, int document);
    public SourceId(string id);
    public int get_Assembly();
    public int get_Document();
    public static bool TryParse(string id, SourceId& source);
    private static bool TryParse(string id, Int32& assembly, Int32& document);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SourceId a, SourceId b);
    public static bool op_Inequality(SourceId a, SourceId b);
}
internal class Microsoft.WebAssembly.Diagnostics.SourceLocation : object {
    private SourceId id;
    private int line;
    private int column;
    private IlLocation ilLocation;
    public SourceId Id { get; }
    public int Line { get; }
    public int Column { get; }
    public IlLocation IlLocation { get; }
    public SourceLocation(SourceId id, int line, int column);
    public SourceLocation(MethodInfo mi, SequencePoint sp);
    public SourceId get_Id();
    public int get_Line();
    public int get_Column();
    public IlLocation get_IlLocation();
    public virtual string ToString();
    public static SourceLocation Parse(JObject obj);
    internal object AsLocation();
}
internal enum Microsoft.WebAssembly.Diagnostics.StepFilter : Enum {
    public int value__;
    public static StepFilter None;
    public static StepFilter StaticCtor;
    public static StepFilter DebuggerHidden;
    public static StepFilter DebuggerStepThrough;
    public static StepFilter DebuggerNonUserCode;
}
internal enum Microsoft.WebAssembly.Diagnostics.StepKind : Enum {
    public int value__;
    public static StepKind Into;
    public static StepKind Over;
    public static StepKind Out;
}
internal enum Microsoft.WebAssembly.Diagnostics.StepSize : Enum {
    public int value__;
    public static StepSize Minimal;
    public static StepSize LineColumn;
}
internal enum Microsoft.WebAssembly.Diagnostics.SuspendPolicy : Enum {
    public int value__;
    public static SuspendPolicy None;
    public static SuspendPolicy EventThread;
    public static SuspendPolicy All;
}
internal enum Microsoft.WebAssembly.Diagnostics.TokenType : Enum {
    public int value__;
    public static TokenType MdtModule;
    public static TokenType MdtTypeRef;
    public static TokenType MdtTypeDef;
    public static TokenType MdtFieldDef;
    public static TokenType MdtMethodDef;
    public static TokenType MdtParamDef;
    public static TokenType MdtInterfaceImpl;
    public static TokenType MdtMemberRef;
    public static TokenType MdtCustomAttribute;
    public static TokenType MdtPermission;
    public static TokenType MdtSignature;
    public static TokenType MdtEvent;
    public static TokenType MdtProperty;
    public static TokenType MdtModuleRef;
    public static TokenType MdtTypeSpec;
    public static TokenType MdtAssembly;
    public static TokenType MdtAssemblyRef;
    public static TokenType MdtFile;
    public static TokenType MdtExportedType;
    public static TokenType MdtManifestResource;
    public static TokenType MdtGenericParam;
    public static TokenType MdtMethodSpec;
    public static TokenType MdtGenericParamConstraint;
    public static TokenType MdtString;
    public static TokenType MdtName;
    public static TokenType MdtBaseType;
}
internal class Microsoft.WebAssembly.Diagnostics.TypeInfo : object {
    private ILogger logger;
    internal AssemblyInfo assembly;
    [CompilerGeneratedAttribute]
private int <Token>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCompilerGenerated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NonUserCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MethodInfo> <Methods>k__BackingField;
    public Dictionary`2<string, Nullable`1<DebuggerBrowsableState>> DebuggerBrowsableFields;
    public Dictionary`2<string, Nullable`1<DebuggerBrowsableState>> DebuggerBrowsableProperties;
    internal int Token { get; }
    internal string Namespace { get; }
    internal bool IsCompilerGenerated { get; }
    private bool NonUserCode { get; }
    public string FullName { get; }
    internal bool IsNonUserCode { get; }
    public List`1<MethodInfo> Methods { get; }
    internal TypeInfo(AssemblyInfo assembly, string typeName, int typeToken, ILogger logger);
    internal TypeInfo(AssemblyInfo assembly, TypeDefinitionHandle typeHandle, TypeDefinition type, MetadataReader metadataReader, ILogger logger);
    [CompilerGeneratedAttribute]
internal int get_Token();
    [CompilerGeneratedAttribute]
internal string get_Namespace();
    [CompilerGeneratedAttribute]
internal bool get_IsCompilerGenerated();
    [CompilerGeneratedAttribute]
private bool get_NonUserCode();
    [CompilerGeneratedAttribute]
public string get_FullName();
    internal bool get_IsNonUserCode();
    [CompilerGeneratedAttribute]
public List`1<MethodInfo> get_Methods();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal static void <.ctor>g__AppendToBrowsable|25_0(Dictionary`2<string, Nullable`1<DebuggerBrowsableState>> dict, CustomAttributeHandleCollection customAttrs, string fieldName, <>c__DisplayClass25_0& );
}
internal class Microsoft.WebAssembly.Diagnostics.TypeInfoWithDebugInformation : object {
    [CompilerGeneratedAttribute]
private TypeInfo <Info>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DebugId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FieldTypeClass> <FieldsList>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <PropertiesBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <TypeParamsOrArgsForGenericType>k__BackingField;
    public TypeInfo Info { get; }
    public int DebugId { get; }
    public string Name { get; }
    public List`1<FieldTypeClass> FieldsList { get; public set; }
    public Byte[] PropertiesBuffer { get; public set; }
    public List`1<int> TypeParamsOrArgsForGenericType { get; public set; }
    public TypeInfoWithDebugInformation(TypeInfo typeInfo, int debugId, string name);
    [CompilerGeneratedAttribute]
public TypeInfo get_Info();
    [CompilerGeneratedAttribute]
public int get_DebugId();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public List`1<FieldTypeClass> get_FieldsList();
    [CompilerGeneratedAttribute]
public void set_FieldsList(List`1<FieldTypeClass> value);
    [CompilerGeneratedAttribute]
public Byte[] get_PropertiesBuffer();
    [CompilerGeneratedAttribute]
public void set_PropertiesBuffer(Byte[] value);
    [CompilerGeneratedAttribute]
public List`1<int> get_TypeParamsOrArgsForGenericType();
    [CompilerGeneratedAttribute]
public void set_TypeParamsOrArgsForGenericType(List`1<int> value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.WebAssembly.Diagnostics.ValueOrError`1 : ValueType {
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Result> <Error>k__BackingField;
    public TValue Value { get; public set; }
    public Nullable`1<Result> Error { get; public set; }
    public bool IsError { get; }
    private ValueOrError`1(TValue value, Nullable`1<Result> error);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public TValue get_Value();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Value(TValue value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Nullable`1<Result> get_Error();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Error(Nullable`1<Result> value);
    public bool get_IsError();
    [NullableContextAttribute("1")]
public static ValueOrError`1<TValue> WithValue(TValue value);
    public static ValueOrError`1<TValue> WithError(Result err);
    [NullableContextAttribute("1")]
public static ValueOrError`1<TValue> WithError(string msg);
}
internal enum Microsoft.WebAssembly.Diagnostics.ValueTypeId : Enum {
    public int value__;
    public static ValueTypeId Null;
    public static ValueTypeId Type;
    public static ValueTypeId VType;
    public static ValueTypeId FixedArray;
}
internal class Microsoft.WebAssembly.Diagnostics.VariableDefinition : object {
    [CompilerGeneratedAttribute]
private string <IdName>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <Obj>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Definition>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string IdName { get; public set; }
    public JObject Obj { get; public set; }
    public string Definition { get; public set; }
    public VariableDefinition(string IdName, JObject Obj, string Definition);
    [CompilerGeneratedAttribute]
private VariableDefinition(VariableDefinition original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_IdName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IdName(string value);
    [CompilerGeneratedAttribute]
public JObject get_Obj();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Obj(JObject value);
    [CompilerGeneratedAttribute]
public string get_Definition();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Definition(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(VariableDefinition left, VariableDefinition right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(VariableDefinition left, VariableDefinition right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(VariableDefinition other);
    [CompilerGeneratedAttribute]
public VariableDefinition <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& IdName, JObject& Obj, String& Definition);
}
internal class Microsoft.WebAssembly.Diagnostics.VarInfo : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    public string Name { get; }
    public int Index { get; }
    public VarInfo(LocalVariable v, MetadataReader pdbReader);
    public VarInfo(Parameter p, MetadataReader pdbReader);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public int get_Index();
    public virtual string ToString();
}
internal abstract class Microsoft.WebAssembly.Diagnostics.WasmDebuggerConnection : object {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, CancellationToken, Task> <OnReadAsync>k__BackingField;
    public string Id { get; public set; }
    public bool IsConnected { get; }
    public Func`3<string, CancellationToken, Task> OnReadAsync { get; public set; }
    protected WasmDebuggerConnection(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Id(string value);
    public abstract virtual bool get_IsConnected();
    [CompilerGeneratedAttribute]
public Func`3<string, CancellationToken, Task> get_OnReadAsync();
    [CompilerGeneratedAttribute]
public void set_OnReadAsync(Func`3<string, CancellationToken, Task> value);
    public abstract virtual Task`1<string> ReadOneAsync(CancellationToken token);
    public abstract virtual Task SendAsync(Byte[] bytes, CancellationToken token);
    public abstract virtual Task ShutdownAsync(CancellationToken cancellationToken);
    public virtual void Dispose();
}
public enum Microsoft.WebAssembly.Diagnostics.WasmHost : Enum {
    public int value__;
    public static WasmHost Chrome;
    public static WasmHost Firefox;
}
public class Microsoft.WebAssembly.Diagnostics.WebcilDebugMetadataProvider : object {
    private WebcilReader _webcilReader;
    [NullableContextAttribute("1")]
public WebcilDebugMetadataProvider(WebcilReader webcilReader);
    public sealed virtual ImmutableArray`1<DebugDirectoryEntry> ReadDebugDirectory();
    public sealed virtual CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(DebugDirectoryEntry entry);
    public sealed virtual PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(DebugDirectoryEntry entry);
    [NullableContextAttribute("1")]
public sealed virtual MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(DebugDirectoryEntry entry);
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForAsyncLocals_2 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForAsyncLocals_2 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForAsyncLocals_2();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForAsyncMethodName_5 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForAsyncMethodName_5 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForAsyncMethodName_5();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForEscapeFileName_0 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForEscapeFileName_0 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForEscapeFileName_0();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForGenericArgs_6 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForGenericArgs_6 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForGenericArgs_6();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForGenericArity_8 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForGenericArity_8 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForGenericArity_8();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForNestedLeftRightAngleBrackets_7 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForNestedLeftRightAngleBrackets_7 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForNestedLeftRightAngleBrackets_7();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForReplaceVarName_1 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForReplaceVarName_1 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForReplaceVarName_1();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForSquareBrackets_9 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForSquareBrackets_9 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForSquareBrackets_9();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForVBAsyncLocals_3 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForVBAsyncLocals_3 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForVBAsyncLocals_3();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForVBAsyncMethodName_4 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForVBAsyncMethodName_4 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__RegexForVBAsyncMethodName_4();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    internal static SearchValues`1<char> s_asciiWordChars;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__Utilities();
    internal static void StackPop(Int32[] stack, Int32& pos, Int32& arg0, Int32& arg1);
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0);
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0, int arg1);
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0, int arg1, int arg2);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|3_0(Int32[]& stack, Int32& pos, int arg0);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|4_0(Int32[]& stack, Int32& pos, int arg0, int arg1);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|5_0(Int32[]& stack, Int32& pos, int arg0, int arg1, int arg2);
}
