internal static class Microsoft.NET.WebAssembly.Webcil.Internal.Constants : object {
    public static int WC_VERSION_MAJOR;
    public static int WC_VERSION_MINOR;
}
internal class Microsoft.NET.WebAssembly.Webcil.WasmModuleReader : object {
    private BinaryReader _reader;
    private Lazy`1<bool> _isWasmModule;
    private static UInt32 WASM_MAGIC;
    public bool IsWasmModule { get; }
    public WasmModuleReader(Stream stream);
    public bool get_IsWasmModule();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual bool VisitSection(Section sec, Boolean& shouldStop);
    private bool GetIsWasmModule();
    public bool Visit();
    private bool DoVisitSection(Boolean& shouldStop);
    protected UInt32 ReadULEB128();
    protected bool TryReadPassiveDataSegment(Int64& segmentLength, Int64& segmentStart);
}
public class Microsoft.NET.WebAssembly.Webcil.WebcilConverter : object {
    private string _inputPath;
    private string _outputPath;
    [CompilerGeneratedAttribute]
private bool <WrapInWebAssembly>k__BackingField;
    [NullableAttribute("1")]
private string InputPath { get; }
    public bool WrapInWebAssembly { get; public set; }
    private WebcilConverter(string inputPath, string outputPath);
    private string get_InputPath();
    [CompilerGeneratedAttribute]
public bool get_WrapInWebAssembly();
    [CompilerGeneratedAttribute]
public void set_WrapInWebAssembly(bool value);
    [NullableContextAttribute("1")]
public static WebcilConverter FromPortableExecutable(string inputPath, string outputPath);
    public void ConvertToWebcil();
    [NullableContextAttribute("1")]
public void WriteConversionTo(Stream outputStream, FileStream inputStream, PEFileInfo peInfo, WCFileInfo wcInfo);
    private static int SizeOfHeader();
    [NullableContextAttribute("1")]
public void GatherInfo(PEReader peReader, WCFileInfo& wcInfo, PEFileInfo& peInfo);
    private static void WriteHeader(Stream s, WebcilHeader webcilHeader);
    private static void WriteSectionHeaders(Stream s, ImmutableArray`1<WebcilSectionHeader> sectionsHeaders);
    private static void WriteSectionHeader(Stream s, WebcilSectionHeader sectionHeader);
    private static void WriteStructure(Stream s, T structure);
    private static void CopySections(Stream outStream, FileStream inputStream, ImmutableArray`1<SectionHeader> peSections);
    private static void ReadExactly(FileStream s, Span`1<byte> buffer);
    private static FilePosition GetPositionOfRelativeVirtualAddress(ImmutableArray`1<WebcilSectionHeader> wcSections, UInt32 relativeVirtualAddress);
    private ValueTuple`2<WebcilSectionHeader, int> GetSectionFromFileOffset(ImmutableArray`1<WebcilSectionHeader> peSections, FilePosition fileOffset);
    private void GetSectionFromFileOffset(ImmutableArray`1<SectionHeader> sections, FilePosition fileOffset);
    private ImmutableArray`1<DebugDirectoryEntry> FixupDebugDirectoryEntries(PEFileInfo peInfo, WCFileInfo wcInfo);
    private static void OverwriteDebugDirectoryEntries(Stream s, WCFileInfo wcInfo, ImmutableArray`1<DebugDirectoryEntry> entries);
    private static void WriteDebugDirectoryEntry(BinaryWriter writer, DebugDirectoryEntry entry);
}
public class Microsoft.NET.WebAssembly.Webcil.WebcilHeader : ValueType {
    [FixedBufferAttribute("System.Byte", "4")]
public <id>e__FixedBuffer id;
    public ushort version_major;
    public ushort version_minor;
    public ushort coff_sections;
    public ushort reserved0;
    public UInt32 pe_cli_header_rva;
    public UInt32 pe_cli_header_size;
    public UInt32 pe_debug_rva;
    public UInt32 pe_debug_size;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.NET.WebAssembly.Webcil.WebcilReader : object {
    private Stream _stream;
    private WebcilHeader _header;
    private DirectoryEntry _corHeaderMetadataDirectory;
    private MetadataReaderProvider _metadataReaderProvider;
    private Nullable`1<ImmutableArray`1<WebcilSectionHeader>> _sections;
    [CompilerGeneratedAttribute]
private string <InputPath>k__BackingField;
    private long _webcilInWasmOffset;
    internal static int DebugDirectoryEntrySize;
    private static UInt32 PortablePdbVersions_DebugDirectoryEmbeddedSignature;
    [NullableAttribute("2")]
private string InputPath { get; }
    private static long SectionDirectoryOffset { get; }
    public WebcilReader(Stream stream);
    public WebcilReader(Stream stream, string inputPath);
    [CompilerGeneratedAttribute]
private string get_InputPath();
    private bool ReadHeader();
    private bool ReadCorHeader();
    public MetadataReaderProvider GetMetadataReaderProvider();
    public MetadataReader GetMetadataReader();
    [NullableContextAttribute("0")]
public ImmutableArray`1<DebugDirectoryEntry> ReadDebugDirectory();
    private static ImmutableArray`1<DebugDirectoryEntry> ReadDebugDirectoryEntries(BlobReader reader);
    public CodeViewDebugDirectoryData ReadCodeViewDebugDirectoryData(DebugDirectoryEntry entry);
    private static CodeViewDebugDirectoryData DecodeCodeViewDebugDirectoryData(BlobReader reader);
    private static string ReadUtf8NullTerminated(BlobReader& reader);
    private static CodeViewDebugDirectoryData MakeCodeViewDebugDirectoryData(Guid guid, int age, string path);
    private static PdbChecksumDebugDirectoryData MakePdbChecksumDebugDirectoryData(string algorithmName, ImmutableArray`1<byte> checksum);
    public MetadataReaderProvider ReadEmbeddedPortablePdbDebugDirectoryData(DebugDirectoryEntry entry);
    private static MetadataReaderProvider DecodeEmbeddedPortablePdbDirectoryData(BlobReader reader);
    public PdbChecksumDebugDirectoryData ReadPdbChecksumDebugDirectoryData(DebugDirectoryEntry entry);
    private static PdbChecksumDebugDirectoryData DecodePdbChecksumDebugDirectoryData(BlobReader reader);
    private long TranslateRVA(UInt32 rva);
    private static long get_SectionDirectoryOffset();
    private ImmutableArray`1<WebcilSectionHeader> ReadSections();
    public sealed virtual void Dispose();
    private bool TryReadWasmWrapper(Int64& webcilInWasmOffset);
}
[IsReadOnlyAttribute]
public class Microsoft.NET.WebAssembly.Webcil.WebcilSectionHeader : ValueType {
    public int VirtualSize;
    public int VirtualAddress;
    public int SizeOfRawData;
    public int PointerToRawData;
    public WebcilSectionHeader(int virtualSize, int virtualAddress, int sizeOfRawData, int pointerToRawData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.NET.WebAssembly.Webcil.WebcilWasmWrapper : object {
    private Stream _webcilPayloadStream;
    private UInt32 _webcilPayloadSize;
    private static ReadOnlyMemory`1<byte> s_wasmWrapperPrefix;
    private static ReadOnlyMemory`1<byte> s_wasmWrapperSuffix;
    private static UInt32 SegmentCodeSize;
    private static UInt32 WebcilPayloadInternalAlignment;
    public WebcilWasmWrapper(Stream webcilPayloadStream);
    private static WebcilWasmWrapper();
    public void WriteWasmWrappedWebcil(Stream outputStream);
    private static void WriteWasmHeader(Stream outputStream);
    private static void WriteWasmSuffix(Stream outputStream);
    private void WriteDataSection(BinaryWriter writer);
    private static Byte[] ULEB128Encode(UInt32 value);
    private static UInt32 PadTo(UInt32 value, UInt32 align);
    private static UInt32 AlignTo(UInt32 value, UInt32 align);
}
