internal class Microsoft.WebAssembly.AppHost.BrowserArguments : object {
    [CompilerGeneratedAttribute]
private string <HTMLPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ForwardConsoleOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <AppArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private CommonConfiguration <CommonConfig>k__BackingField;
    public string HTMLPath { get; private set; }
    public Nullable`1<bool> ForwardConsoleOutput { get; private set; }
    public String[] AppArgs { get; public set; }
    public CommonConfiguration CommonConfig { get; public set; }
    public BrowserArguments(CommonConfiguration commonConfig);
    [CompilerGeneratedAttribute]
public string get_HTMLPath();
    [CompilerGeneratedAttribute]
private void set_HTMLPath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ForwardConsoleOutput();
    [CompilerGeneratedAttribute]
private void set_ForwardConsoleOutput(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_AppArgs();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AppArgs(String[] value);
    [CompilerGeneratedAttribute]
public CommonConfiguration get_CommonConfig();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommonConfig(CommonConfiguration value);
    private OptionSet GetOptions();
    public void ParseJsonProperties(IDictionary`2<string, JsonElement> properties);
    public void Validate();
    [CompilerGeneratedAttribute]
private void <GetOptions>b__17_0(string v);
}
internal class Microsoft.WebAssembly.AppHost.BrowserHost : object {
    private ILogger _logger;
    private BrowserArguments _args;
    public BrowserHost(BrowserArguments args, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.BrowserHost/<InvokeAsync>d__3")]
public static Task`1<int> InvokeAsync(CommonConfiguration commonArgs, ILoggerFactory loggerFactory, ILogger logger, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.BrowserHost/<RunAsync>d__4")]
private Task RunAsync(ILoggerFactory loggerFactory, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.BrowserHost/<StartWebServerAsync>d__5")]
private Task`1<ValueTuple`2<ServerURLs, IWebHost>> StartWebServerAsync(BrowserArguments args, String[] urls, CancellationToken token);
    private static WebServerOptions CreateWebServerOptions(String[] urls, string appPath, Func`2<WebSocket, Task> onConsoleConnected);
    private static DevServerOptions CreateDevServerOptions(BrowserArguments args, String[] urls, Func`2<WebSocket, Task> onConsoleConnected);
    private static DevServerOptions CreateDevServerOptions(String[] urls, string staticWebAssetsPath, Func`2<WebSocket, Task> onConsoleConnected);
    private static string FindFirstFileWithExtension(string directory, string extension);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.BrowserHost/<RunConsoleMessagesPump>d__10")]
private Task RunConsoleMessagesPump(WebSocket socket, WasmTestMessagesProcessor messagesProcessor, CancellationToken token);
    private String[] BuildUrls(ServerURLs serverURLs, IEnumerable`1<string> passThroughArguments);
    private static string BuildUrl(string baseUrl, string htmlFileName, string query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.WebAssembly.AppHost.CommandLineException : Exception {
    public CommandLineException(string message);
    public CommandLineException(string message, Exception inner);
}
internal class Microsoft.WebAssembly.AppHost.CommonConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Debugging>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RemainingArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private WasmHost <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private HostConfig <HostConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private WasmHostProperties <HostProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <HostArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Silent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseStaticWebAssets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeConfigPath>k__BackingField;
    private string hostArg;
    public bool Debugging { get; public set; }
    public string AppPath { get; public set; }
    public String[] RuntimeArguments { get; }
    public IEnumerable`1<string> RemainingArgs { get; public set; }
    public WasmHost Host { get; public set; }
    public HostConfig HostConfig { get; public set; }
    public WasmHostProperties HostProperties { get; public set; }
    public IEnumerable`1<string> HostArguments { get; public set; }
    public bool Silent { get; private set; }
    public bool UseStaticWebAssets { get; private set; }
    public string RuntimeConfigPath { get; private set; }
    private CommonConfiguration(String[] args);
    [CompilerGeneratedAttribute]
public bool get_Debugging();
    [CompilerGeneratedAttribute]
public void set_Debugging(bool value);
    [CompilerGeneratedAttribute]
public string get_AppPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AppPath(string value);
    public String[] get_RuntimeArguments();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_RemainingArgs();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RemainingArgs(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public WasmHost get_Host();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Host(WasmHost value);
    [CompilerGeneratedAttribute]
public HostConfig get_HostConfig();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HostConfig(HostConfig value);
    [CompilerGeneratedAttribute]
public WasmHostProperties get_HostProperties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HostProperties(WasmHostProperties value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_HostArguments();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HostArguments(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_Silent();
    [CompilerGeneratedAttribute]
private void set_Silent(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseStaticWebAssets();
    [CompilerGeneratedAttribute]
private void set_UseStaticWebAssets(bool value);
    [CompilerGeneratedAttribute]
public string get_RuntimeConfigPath();
    [CompilerGeneratedAttribute]
private void set_RuntimeConfigPath(string value);
    public static CommonConfiguration FromCommandLineArguments(String[] args);
    public ProxyOptions ToProxyOptions();
    public static void CheckPathOrInAppPath(string appPath, string path, string argName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__44_1(string _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__44_2(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__44_3(string v);
    [CompilerGeneratedAttribute]
private void <.ctor>b__44_4(string _);
    [CompilerGeneratedAttribute]
private void <.ctor>b__44_5(string _);
}
[ExtensionAttribute]
internal static class Microsoft.WebAssembly.AppHost.ConsoleLoggerExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddPassThroughConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddPassThroughConsole(ILoggingBuilder builder, Action`1<PassThroughConsoleFormatterOptions> configure);
}
[ExtensionAttribute]
internal static class Microsoft.WebAssembly.AppHost.DevServer.ComponentsWebAssemblyApplicationBuilderExtensions : object {
    private static string s_dotnetModifiableAssemblies;
    private static string s_aspnetcoreBrowserTools;
    private static ComponentsWebAssemblyApplicationBuilderExtensions();
    private static string GetNonEmptyEnvironmentVariableValue(string name);
    [ExtensionAttribute]
public static IApplicationBuilder UseBlazorFrameworkFiles(IApplicationBuilder builder, PathString pathPrefix);
    [ExtensionAttribute]
public static IApplicationBuilder UseBlazorFrameworkFiles(IApplicationBuilder applicationBuilder);
    private static StaticFileOptions CreateStaticFilesOptions(IFileProvider webRootFileProvider);
    private static void AddMapping(FileExtensionContentTypeProvider provider, string name, string mimeType);
}
internal class Microsoft.WebAssembly.AppHost.DevServer.ContentEncodingNegotiator : object {
    private static StringSegment[] _preferredEncodings;
    private static Dictionary`2<StringSegment, string> _encodingExtensionMap;
    private RequestDelegate _next;
    private IWebHostEnvironment _webHostEnvironment;
    public ContentEncodingNegotiator(RequestDelegate next, IWebHostEnvironment webHostEnvironment);
    private static ContentEncodingNegotiator();
    public Task InvokeAsync(HttpContext context);
    private void NegotiateEncoding(HttpContext context);
    private bool ResourceExists(HttpContext context, string extension);
    [CompilerGeneratedAttribute]
private StringSegment <NegotiateEncoding>g__PickPreferredEncoding|6_0(HttpContext context, StringSegment selectedEncoding, StringWithQualityHeaderValue encoding);
}
internal static class Microsoft.WebAssembly.AppHost.DevServer.DebugProxyLauncher : object {
    private static object LaunchLock;
    private static TimeSpan DebugProxyLaunchTimeout;
    private static Task`1<string> LaunchedDebugProxyUrl;
    private static Regex NowListeningRegex;
    private static Regex ApplicationStartedRegex;
    private static Regex NowListeningFirefoxRegex;
    private static String[] MessageSuppressionPrefixes;
    private static DebugProxyLauncher();
    public static Task`1<string> EnsureLaunchedAndGetUrl(IServiceProvider serviceProvider, string devToolsHost, bool isFirefox);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.DevServer.DebugProxyLauncher/<LaunchAndGetUrl>d__8")]
private static Task`1<string> LaunchAndGetUrl(IServiceProvider serviceProvider, string devToolsHost, bool isFirefox);
    private static void RemoveUnwantedEnvironmentVariables(IDictionary`2<string, string> environment);
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3000:Avoid accessing Assembly file path when publishing as a single file")]
private static string LocateDebugProxyExecutable(IWebHostEnvironment environment);
    private static void PassThroughConsoleOutput(Process process);
    private static void CompleteTaskWhenServerIsReady(Process aspNetProcess, bool isFirefox, TaskCompletionSource`1<string> taskCompletionSource);
}
internal static class Microsoft.WebAssembly.AppHost.DevServer.DevServer : object {
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.DevServer.DevServer/<StartAsync>d__0")]
internal static Task`1<ValueTuple`2<ServerURLs, IWebHost>> StartAsync(DevServerOptions options, ILogger logger, CancellationToken token);
    private static IConfiguration ConfigureHostConfiguration(DevServerOptions options);
}
internal class Microsoft.WebAssembly.AppHost.DevServer.DevServerOptions : object {
    [CompilerGeneratedAttribute]
private Func`2<WebSocket, Task> <OnConsoleConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StaticWebAssetsPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WebServerUseCors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WebServerUseCrossOriginPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Urls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public Func`2<WebSocket, Task> OnConsoleConnected { get; public set; }
    public string StaticWebAssetsPath { get; public set; }
    public bool WebServerUseCors { get; public set; }
    public bool WebServerUseCrossOriginPolicy { get; public set; }
    public String[] Urls { get; public set; }
    public string DefaultFileName { get; public set; }
    public DevServerOptions(Func`2<WebSocket, Task> OnConsoleConnected, string StaticWebAssetsPath, bool WebServerUseCors, bool WebServerUseCrossOriginPolicy, String[] Urls, string DefaultFileName);
    [CompilerGeneratedAttribute]
private DevServerOptions(DevServerOptions original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Func`2<WebSocket, Task> get_OnConsoleConnected();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OnConsoleConnected(Func`2<WebSocket, Task> value);
    [CompilerGeneratedAttribute]
public string get_StaticWebAssetsPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StaticWebAssetsPath(string value);
    [CompilerGeneratedAttribute]
public bool get_WebServerUseCors();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WebServerUseCors(bool value);
    [CompilerGeneratedAttribute]
public bool get_WebServerUseCrossOriginPolicy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WebServerUseCrossOriginPolicy(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Urls();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Urls(String[] value);
    [CompilerGeneratedAttribute]
public string get_DefaultFileName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DefaultFileName(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(DevServerOptions left, DevServerOptions right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(DevServerOptions left, DevServerOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DevServerOptions other);
    [CompilerGeneratedAttribute]
public DevServerOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Func`2& OnConsoleConnected, String& StaticWebAssetsPath, Boolean& WebServerUseCors, Boolean& WebServerUseCrossOriginPolicy, String[]& Urls, String& DefaultFileName);
}
internal class Microsoft.WebAssembly.AppHost.DevServer.DevServerStartup : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    public IConfiguration Configuration { get; }
    public DevServerStartup(IConfiguration configuration);
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    public static void ConfigureServices(IServiceCollection services);
    public static void Configure(IApplicationBuilder app, IOptions`1<DevServerOptions> optionsContainer, TaskCompletionSource`1<ServerURLs> realUrlsAvailableTcs, ILogger logger, IHostApplicationLifetime applicationLifetime, IConfiguration configuration);
    private static void EnableConfiguredPathbase(IApplicationBuilder app, IConfiguration configuration);
    private static void ApplyCrossOriginPolicyHeaders(HttpContext httpContext);
}
internal class Microsoft.WebAssembly.AppHost.DevServer.TargetPickerUi : object {
    private static JsonSerializerOptions JsonOptions;
    private string _browserHost;
    private string _debugProxyUrl;
    public TargetPickerUi(string debugProxyUrl, string devToolsHost);
    private static TargetPickerUi();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.DevServer.TargetPickerUi/<DisplayFirefox>d__4")]
public Task DisplayFirefox(HttpContext context);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.DevServer.TargetPickerUi/<Display>d__5")]
public Task Display(HttpContext context);
    private string GetDevToolsUrlWithProxy(BrowserTab tabToDebug);
    private string GetLaunchChromeInstructions(string targetApplicationUrl);
    private string GetLaunchEdgeInstructions(string targetApplicationUrl);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.DevServer.TargetPickerUi/<GetOpenedBrowserTabs>d__9")]
private Task`1<IEnumerable`1<BrowserTab>> GetOpenedBrowserTabs();
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.DevServer.TargetPickerUi/<<DisplayFirefox>g__SendMessageToBrowser|4_0>d")]
[CompilerGeneratedAttribute]
internal static Task <DisplayFirefox>g__SendMessageToBrowser|4_0(NetworkStream toStream, ExpandoObject args, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.DevServer.TargetPickerUi/<<DisplayFirefox>g__ReceiveMessageLoop|4_1>d")]
[CompilerGeneratedAttribute]
internal static Task`1<string> <DisplayFirefox>g__ReceiveMessageLoop|4_1(TcpClient browserDebugClientConnect, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.DevServer.TargetPickerUi/<<DisplayFirefox>g__EvaluateOnBrowser|4_2>d")]
[CompilerGeneratedAttribute]
internal static Task <DisplayFirefox>g__EvaluateOnBrowser|4_2(NetworkStream toStream, string to, string text, CancellationToken token);
}
[ExtensionAttribute]
internal static class Microsoft.WebAssembly.AppHost.DevServer.WebAssemblyNetDebugProxyAppBuilderExtensions : object {
    [ExtensionAttribute]
public static void UseWebAssemblyDebugging(IApplicationBuilder app);
}
public static class Microsoft.WebAssembly.AppHost.FileUtils : object {
    private static String[] s_extensions;
    private static FileUtils();
    [NullableContextAttribute("2")]
public static bool TryFindExecutableInPATH(string filename, String& fullPath, String& errorMessage);
}
internal class Microsoft.WebAssembly.AppHost.HostConfig : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HostString>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <HostArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonElement> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string Name { get; public set; }
    [JsonPropertyNameAttribute("host")]
public string HostString { get; public set; }
    [JsonPropertyNameAttribute("host-args")]
public String[] HostArguments { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, JsonElement> Properties { get; public set; }
    public HostConfig(string Name, string HostString);
    [CompilerGeneratedAttribute]
private HostConfig(HostConfig original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_HostString();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HostString(string value);
    [CompilerGeneratedAttribute]
public String[] get_HostArguments();
    [CompilerGeneratedAttribute]
public void set_HostArguments(String[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonElement> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(Dictionary`2<string, JsonElement> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(HostConfig left, HostConfig right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(HostConfig left, HostConfig right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(HostConfig other);
    [CompilerGeneratedAttribute]
public HostConfig <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Name, String& HostString);
}
internal class Microsoft.WebAssembly.AppHost.JSEngineArguments : object {
    [CompilerGeneratedAttribute]
private string <JSPath>k__BackingField;
    [CompilerGeneratedAttribute]
private CommonConfiguration <CommonConfig>k__BackingField;
    public string JSPath { get; public set; }
    public WasmHost Host { get; }
    public CommonConfiguration CommonConfig { get; public set; }
    public IEnumerable`1<string> AppArgs { get; }
    public JSEngineArguments(CommonConfiguration commonConfig);
    [CompilerGeneratedAttribute]
public string get_JSPath();
    [CompilerGeneratedAttribute]
public void set_JSPath(string value);
    public WasmHost get_Host();
    [CompilerGeneratedAttribute]
public CommonConfiguration get_CommonConfig();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommonConfig(CommonConfiguration value);
    public IEnumerable`1<string> get_AppArgs();
    private void ParseJsonProperties(Dictionary`2<string, JsonElement> properties);
    public void Validate();
}
internal class Microsoft.WebAssembly.AppHost.JSEngineHost : object {
    private JSEngineArguments _args;
    private ILogger _logger;
    public JSEngineHost(JSEngineArguments args, ILogger logger);
    public static Task`1<int> InvokeAsync(CommonConfiguration commonArgs, ILoggerFactory _, ILogger logger, CancellationToken _1);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.JSEngineHost/<RunAsync>d__4")]
private Task`1<int> RunAsync();
    [CompilerGeneratedAttribute]
private void <RunAsync>b__4_0(string msg);
    [CompilerGeneratedAttribute]
private void <RunAsync>b__4_1(string msg);
}
[ExtensionAttribute]
internal static class Microsoft.WebAssembly.AppHost.JsonExtensions : object {
    [ExtensionAttribute]
public static bool TryGetPropertyByPath(JsonElement element, string path, JsonElement& outElement);
}
internal class Microsoft.WebAssembly.AppHost.PassThroughConsoleFormatter : ConsoleFormatter {
    private IDisposable _optionsReloadToken;
    private PassThroughConsoleFormatterOptions _formatterOptions;
    public PassThroughConsoleFormatter(IOptionsMonitor`1<PassThroughConsoleFormatterOptions> options);
    private void ReloadLoggerOptions(PassThroughConsoleFormatterOptions options);
    public virtual void Write(LogEntry`1& modreq(System.Runtime.InteropServices.InAttribute) logEntry, IExternalScopeProvider scopeProvider, TextWriter textWriter);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__2_0(PassThroughConsoleFormatterOptions options, string _);
}
internal class Microsoft.WebAssembly.AppHost.PassThroughConsoleFormatterOptions : ConsoleFormatterOptions {
    public string Prefix;
}
internal class Microsoft.WebAssembly.AppHost.RunArgumentsJson : object {
    [CompilerGeneratedAttribute]
private String[] <applicationArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <runtimeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <environmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <forwardConsoleToWS>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <debugging>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonElement> <Extra>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public String[] applicationArguments { get; public set; }
    public String[] runtimeArguments { get; public set; }
    public IDictionary`2<string, string> environmentVariables { get; public set; }
    public bool forwardConsoleToWS { get; public set; }
    public bool debugging { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, JsonElement> Extra { get; public set; }
    public RunArgumentsJson(String[] applicationArguments, String[] runtimeArguments, IDictionary`2<string, string> environmentVariables, bool forwardConsoleToWS, bool debugging);
    [CompilerGeneratedAttribute]
private RunArgumentsJson(RunArgumentsJson original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public String[] get_applicationArguments();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_applicationArguments(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_runtimeArguments();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_runtimeArguments(String[] value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_environmentVariables();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_environmentVariables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public bool get_forwardConsoleToWS();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_forwardConsoleToWS(bool value);
    [CompilerGeneratedAttribute]
public bool get_debugging();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_debugging(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonElement> get_Extra();
    [CompilerGeneratedAttribute]
public void set_Extra(Dictionary`2<string, JsonElement> value);
    public void Save(string file);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RunArgumentsJson left, RunArgumentsJson right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RunArgumentsJson left, RunArgumentsJson right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RunArgumentsJson other);
    [CompilerGeneratedAttribute]
public RunArgumentsJson <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String[]& applicationArguments, String[]& runtimeArguments, IDictionary`2& environmentVariables, Boolean& forwardConsoleToWS, Boolean& debugging);
}
internal class Microsoft.WebAssembly.AppHost.RunConfiguration : object {
    [CompilerGeneratedAttribute]
private WasmHost <Host>k__BackingField;
    [CompilerGeneratedAttribute]
private WasmHostProperties <HostProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private HostConfig <HostConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppPath>k__BackingField;
    public WasmHost Host { get; public set; }
    public WasmHostProperties HostProperties { get; public set; }
    public HostConfig HostConfig { get; public set; }
    public string AppPath { get; public set; }
    public RunConfiguration(string runtimeConfigPath, string hostArg);
    [CompilerGeneratedAttribute]
public WasmHost get_Host();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Host(WasmHost value);
    [CompilerGeneratedAttribute]
public WasmHostProperties get_HostProperties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HostProperties(WasmHostProperties value);
    [CompilerGeneratedAttribute]
public HostConfig get_HostConfig();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HostConfig(HostConfig value);
    [CompilerGeneratedAttribute]
public string get_AppPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AppPath(string value);
    public ProxyOptions ToProxyOptions();
}
internal class Microsoft.WebAssembly.AppHost.RuntimeConfig : object {
    [CompilerGeneratedAttribute]
private RuntimeOptions <RuntimeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public RuntimeOptions RuntimeOptions { get; public set; }
    public RuntimeConfig(RuntimeOptions RuntimeOptions);
    [CompilerGeneratedAttribute]
private RuntimeConfig(RuntimeConfig original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public RuntimeOptions get_RuntimeOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RuntimeOptions(RuntimeOptions value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RuntimeConfig left, RuntimeConfig right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RuntimeConfig left, RuntimeConfig right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RuntimeConfig other);
    [CompilerGeneratedAttribute]
public RuntimeConfig <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(RuntimeOptions& RuntimeOptions);
}
internal class Microsoft.WebAssembly.AppHost.RuntimeOptions : object {
    [CompilerGeneratedAttribute]
private WasmHostProperties <WasmHostProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public WasmHostProperties WasmHostProperties { get; public set; }
    public RuntimeOptions(WasmHostProperties WasmHostProperties);
    [CompilerGeneratedAttribute]
private RuntimeOptions(RuntimeOptions original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public WasmHostProperties get_WasmHostProperties();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WasmHostProperties(WasmHostProperties value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(RuntimeOptions left, RuntimeOptions right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(RuntimeOptions left, RuntimeOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(RuntimeOptions other);
    [CompilerGeneratedAttribute]
public RuntimeOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(WasmHostProperties& WasmHostProperties);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.WebAssembly.AppHost.ServerURLs : object {
    [CompilerGeneratedAttribute]
private string <Http>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Https>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugPath>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [NullableAttribute("1")]
public string Http { get; public set; }
    public string Https { get; public set; }
    public string DebugPath { get; public set; }
    public ServerURLs(string Http, string Https, string DebugPath);
    [CompilerGeneratedAttribute]
protected ServerURLs(ServerURLs original);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Http();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Http(string value);
    [CompilerGeneratedAttribute]
public string get_Https();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Https(string value);
    [CompilerGeneratedAttribute]
public string get_DebugPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DebugPath(string value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ServerURLs left, ServerURLs right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ServerURLs left, ServerURLs right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(ServerURLs other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual ServerURLs <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& Http, String& Https, String& DebugPath);
}
public static class Microsoft.WebAssembly.AppHost.ServerURLsProvider : object {
    [NullableContextAttribute("1")]
public static void ResolveServerUrlsOnApplicationStarted(IApplicationBuilder app, ILogger logger, IHostApplicationLifetime applicationLifetime, TaskCompletionSource`1<ServerURLs> realUrlsAvailableTcs, string debugPath);
    [CompilerGeneratedAttribute]
internal static string <ResolveServerUrlsOnApplicationStarted>g__GetHttpServerAddress|0_1(ICollection`1<string> addresses, bool secure);
}
public class Microsoft.WebAssembly.AppHost.Utils : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.Utils/<TryRunProcess>d__0")]
public static Task`1<int> TryRunProcess(ProcessStartInfo psi, ILogger logger, Action`1<string> logStdOut, Action`1<string> logStdErr, bool silent, string label);
}
internal class Microsoft.WebAssembly.AppHost.WasiEngineArguments : object {
    [CompilerGeneratedAttribute]
private CommonConfiguration <CommonConfig>k__BackingField;
    public WasmHost Host { get; }
    public CommonConfiguration CommonConfig { get; public set; }
    public IEnumerable`1<string> AppArgs { get; }
    public bool IsSingleFileBundle { get; }
    public WasiEngineArguments(CommonConfiguration commonConfig);
    public WasmHost get_Host();
    [CompilerGeneratedAttribute]
public CommonConfiguration get_CommonConfig();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommonConfig(CommonConfiguration value);
    public IEnumerable`1<string> get_AppArgs();
    public bool get_IsSingleFileBundle();
    public void Validate();
}
internal class Microsoft.WebAssembly.AppHost.WasiEngineHost : object {
    private WasiEngineArguments _args;
    private ILogger _logger;
    public WasiEngineHost(WasiEngineArguments args, ILogger logger);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.WasiEngineHost/<InvokeAsync>d__3")]
public static Task`1<int> InvokeAsync(CommonConfiguration commonArgs, ILoggerFactory _, ILogger logger, CancellationToken _1);
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.WasiEngineHost/<RunAsync>d__4")]
private Task`1<int> RunAsync();
    [CompilerGeneratedAttribute]
private void <RunAsync>b__4_0(string msg);
    [CompilerGeneratedAttribute]
private void <RunAsync>b__4_1(string msg);
}
public class Microsoft.WebAssembly.AppHost.WasmAppHost : object {
    private static Dictionary`2<WasmHost, HostHandler> s_hostHandlers;
    private static WasmAppHost();
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.WasmAppHost/<Main>d__2")]
public static Task`1<int> Main(String[] args);
    private static void RegisterHostHandler(WasmHost host, HostHandler handler);
    private static int <Main>(String[] args);
}
internal enum Microsoft.WebAssembly.AppHost.WasmHost : Enum {
    public int value__;
    public static WasmHost V8;
    public static WasmHost JavaScriptCore;
    public static WasmHost SpiderMonkey;
    public static WasmHost NodeJS;
    public static WasmHost Browser;
    public static WasmHost Wasmtime;
}
internal class Microsoft.WebAssembly.AppHost.WasmHostProperties : object {
    [CompilerGeneratedAttribute]
private string <DefaultConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<HostConfig> <HostConfigs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MainAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <RuntimeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <EnvironmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FirefoxProxyPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FirefoxDebuggingPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ChromeProxyPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ChromeDebuggingPort>k__BackingField;
    [CompilerGeneratedAttribute]
private int <WebServerPort>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, JsonElement> <Extra>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string DefaultConfig { get; public set; }
    [JsonPropertyNameAttribute("perHostConfig")]
public List`1<HostConfig> HostConfigs { get; public set; }
    public string MainAssembly { get; public set; }
    public String[] RuntimeArguments { get; public set; }
    public IDictionary`2<string, string> EnvironmentVariables { get; public set; }
    public Nullable`1<int> FirefoxProxyPort { get; public set; }
    public Nullable`1<int> FirefoxDebuggingPort { get; public set; }
    public Nullable`1<int> ChromeProxyPort { get; public set; }
    public Nullable`1<int> ChromeDebuggingPort { get; public set; }
    public int WebServerPort { get; public set; }
    [JsonExtensionDataAttribute]
public Dictionary`2<string, JsonElement> Extra { get; public set; }
    public WasmHostProperties(string DefaultConfig, List`1<HostConfig> HostConfigs, string MainAssembly, String[] RuntimeArguments, IDictionary`2<string, string> EnvironmentVariables, Nullable`1<int> FirefoxProxyPort, Nullable`1<int> FirefoxDebuggingPort, Nullable`1<int> ChromeProxyPort, Nullable`1<int> ChromeDebuggingPort, int WebServerPort);
    [CompilerGeneratedAttribute]
private WasmHostProperties(WasmHostProperties original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_DefaultConfig();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DefaultConfig(string value);
    [CompilerGeneratedAttribute]
public List`1<HostConfig> get_HostConfigs();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_HostConfigs(List`1<HostConfig> value);
    [CompilerGeneratedAttribute]
public string get_MainAssembly();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MainAssembly(string value);
    [CompilerGeneratedAttribute]
public String[] get_RuntimeArguments();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_RuntimeArguments(String[] value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_EnvironmentVariables();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnvironmentVariables(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FirefoxProxyPort();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FirefoxProxyPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FirefoxDebuggingPort();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FirefoxDebuggingPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ChromeProxyPort();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ChromeProxyPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ChromeDebuggingPort();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ChromeDebuggingPort(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_WebServerPort();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WebServerPort(int value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonElement> get_Extra();
    [CompilerGeneratedAttribute]
public void set_Extra(Dictionary`2<string, JsonElement> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(WasmHostProperties left, WasmHostProperties right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(WasmHostProperties left, WasmHostProperties right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(WasmHostProperties other);
    [CompilerGeneratedAttribute]
public WasmHostProperties <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& DefaultConfig, List`1& HostConfigs, String& MainAssembly, String[]& RuntimeArguments, IDictionary`2& EnvironmentVariables, Nullable`1& FirefoxProxyPort, Nullable`1& FirefoxDebuggingPort, Nullable`1& ChromeProxyPort, Nullable`1& ChromeDebuggingPort, Int32& WebServerPort);
}
internal class Microsoft.WebAssembly.AppHost.WasmLogMessage : object {
    [CompilerGeneratedAttribute]
private string <method>k__BackingField;
    [CompilerGeneratedAttribute]
private string <payload>k__BackingField;
    public string method { get; public set; }
    public string payload { get; public set; }
    [CompilerGeneratedAttribute]
public string get_method();
    [CompilerGeneratedAttribute]
public void set_method(string value);
    [CompilerGeneratedAttribute]
public string get_payload();
    [CompilerGeneratedAttribute]
public void set_payload(string value);
}
internal class Microsoft.WebAssembly.AppHost.WasmTestMessagesProcessor : object {
    private ILogger _logger;
    public WasmTestMessagesProcessor(ILogger logger);
    public void Invoke(string message);
}
public class Microsoft.WebAssembly.AppHost.WebServer : object {
    [AsyncStateMachineAttribute("Microsoft.WebAssembly.AppHost.WebServer/<StartAsync>d__0")]
internal static Task`1<ValueTuple`2<ServerURLs, IWebHost>> StartAsync(WebServerOptions options, ILogger logger, CancellationToken token);
}
internal class Microsoft.WebAssembly.AppHost.WebServerOptions : object {
    [CompilerGeneratedAttribute]
private Func`2<WebSocket, Task> <OnConsoleConnected>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WebServerUseCors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WebServerUseCrossOriginPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Urls>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultFileName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public Func`2<WebSocket, Task> OnConsoleConnected { get; public set; }
    public string ContentRootPath { get; public set; }
    public bool WebServerUseCors { get; public set; }
    public bool WebServerUseCrossOriginPolicy { get; public set; }
    public String[] Urls { get; public set; }
    public string DefaultFileName { get; public set; }
    public WebServerOptions(Func`2<WebSocket, Task> OnConsoleConnected, string ContentRootPath, bool WebServerUseCors, bool WebServerUseCrossOriginPolicy, String[] Urls, string DefaultFileName);
    [CompilerGeneratedAttribute]
private WebServerOptions(WebServerOptions original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public Func`2<WebSocket, Task> get_OnConsoleConnected();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_OnConsoleConnected(Func`2<WebSocket, Task> value);
    [CompilerGeneratedAttribute]
public string get_ContentRootPath();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ContentRootPath(string value);
    [CompilerGeneratedAttribute]
public bool get_WebServerUseCors();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WebServerUseCors(bool value);
    [CompilerGeneratedAttribute]
public bool get_WebServerUseCrossOriginPolicy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_WebServerUseCrossOriginPolicy(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Urls();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Urls(String[] value);
    [CompilerGeneratedAttribute]
public string get_DefaultFileName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DefaultFileName(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(WebServerOptions left, WebServerOptions right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(WebServerOptions left, WebServerOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(WebServerOptions other);
    [CompilerGeneratedAttribute]
public WebServerOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Func`2& OnConsoleConnected, String& ContentRootPath, Boolean& WebServerUseCors, Boolean& WebServerUseCrossOriginPolicy, String[]& Urls, String& DefaultFileName);
}
internal class Microsoft.WebAssembly.AppHost.WebServerStartup : object {
    private IWebHostEnvironment _hostingEnvironment;
    private static object LaunchLock;
    private static string LaunchedDebugProxyUrl;
    private ILogger _logger;
    public WebServerStartup(IWebHostEnvironment hostingEnvironment);
    private static WebServerStartup();
    public static int StartDebugProxy(string devToolsHost);
    public void Configure(IApplicationBuilder app, IOptions`1<WebServerOptions> optionsContainer, TaskCompletionSource`1<ServerURLs> realUrlsAvailableTcs, ILogger logger, IHostApplicationLifetime applicationLifetime);
    [CompilerGeneratedAttribute]
internal static int <StartDebugProxy>g__GetNextRandomExcept|5_0(Range range, Int32[] except);
}
public abstract class Mono.Options.ArgumentSource : object {
    public string Description { get; }
    public abstract virtual String[] GetNames();
    public abstract virtual string get_Description();
    public abstract virtual bool GetArguments(string value, IEnumerable`1& replacement);
    public static IEnumerable`1<string> GetArgumentsFromFile(string file);
    public static IEnumerable`1<string> GetArguments(TextReader reader);
    [IteratorStateMachineAttribute("Mono.Options.ArgumentSource/<GetArguments>d__7")]
private static IEnumerable`1<string> GetArguments(TextReader reader, bool close);
}
public class Mono.Options.Command : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Help>k__BackingField;
    [CompilerGeneratedAttribute]
private OptionSet <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<IEnumerable`1<string>> <Run>k__BackingField;
    [CompilerGeneratedAttribute]
private CommandSet <CommandSet>k__BackingField;
    public string Name { get; }
    public string Help { get; }
    public OptionSet Options { get; public set; }
    public Action`1<IEnumerable`1<string>> Run { get; public set; }
    public CommandSet CommandSet { get; internal set; }
    public Command(string name, string help);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public string get_Help();
    [CompilerGeneratedAttribute]
public OptionSet get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(OptionSet value);
    [CompilerGeneratedAttribute]
public Action`1<IEnumerable`1<string>> get_Run();
    [CompilerGeneratedAttribute]
public void set_Run(Action`1<IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public CommandSet get_CommandSet();
    [CompilerGeneratedAttribute]
internal void set_CommandSet(CommandSet value);
    private static string NormalizeCommandName(string name);
    public virtual int Invoke(IEnumerable`1<string> arguments);
}
internal class Mono.Options.CommandOption : Option {
    [CompilerGeneratedAttribute]
private Command <Command>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommandName>k__BackingField;
    public Command Command { get; }
    public string CommandName { get; }
    public CommandOption(Command command, string commandName, bool hidden);
    [CompilerGeneratedAttribute]
public Command get_Command();
    [CompilerGeneratedAttribute]
public string get_CommandName();
    protected virtual void OnParseComplete(OptionContext c);
}
internal class Mono.Options.CommandOptionSet : OptionSet {
    private CommandSet commands;
    public CommandOptionSet(CommandSet commands, Converter`2<string, string> localizer);
    protected virtual void SetItem(int index, Option item);
    private static bool ShouldWrapOption(Option item);
    protected virtual void InsertItem(int index, Option item);
}
public class Mono.Options.CommandSet : KeyedCollection`2<string, Command> {
    private string suite;
    private OptionSet options;
    private TextWriter outWriter;
    private TextWriter errorWriter;
    internal List`1<CommandSet> NestedCommandSets;
    internal HelpCommand help;
    internal bool showHelp;
    internal OptionSet Options { get; }
    public string Suite { get; }
    public TextWriter Out { get; }
    public TextWriter Error { get; }
    public Converter`2<string, string> MessageLocalizer { get; }
    public CommandSet(string suite, Converter`2<string, string> localizer);
    public CommandSet(string suite, TextWriter output, TextWriter error, Converter`2<string, string> localizer);
    internal OptionSet get_Options();
    public string get_Suite();
    public TextWriter get_Out();
    public TextWriter get_Error();
    public Converter`2<string, string> get_MessageLocalizer();
    protected virtual string GetKeyForItem(Command item);
    public CommandSet Add(Command value);
    private void AddCommand(Command value);
    public CommandSet Add(string header);
    public CommandSet Add(Option option);
    public CommandSet Add(string prototype, Action`1<string> action);
    public CommandSet Add(string prototype, string description, Action`1<string> action);
    public CommandSet Add(string prototype, string description, Action`1<string> action, bool hidden);
    public CommandSet Add(string prototype, OptionAction`2<string, string> action);
    public CommandSet Add(string prototype, string description, OptionAction`2<string, string> action);
    public CommandSet Add(string prototype, string description, OptionAction`2<string, string> action, bool hidden);
    public CommandSet Add(string prototype, Action`1<T> action);
    public CommandSet Add(string prototype, string description, Action`1<T> action);
    public CommandSet Add(string prototype, OptionAction`2<TKey, TValue> action);
    public CommandSet Add(string prototype, string description, OptionAction`2<TKey, TValue> action);
    public CommandSet Add(ArgumentSource source);
    public CommandSet Add(CommandSet nestedCommands);
    private bool AlreadyAdded(CommandSet value);
    [IteratorStateMachineAttribute("Mono.Options.CommandSet/<GetCompletions>d__37")]
public IEnumerable`1<string> GetCompletions(string prefix);
    private static void ExtractToken(String& input, String& rest);
    public int Run(IEnumerable`1<string> arguments);
    internal Command GetCommand(List`1<string> extra);
    private Command TryGetLocalCommand(List`1<string> extra);
    private Command TryGetNestedCommand(List`1<string> extra);
    [CompilerGeneratedAttribute]
private void <Run>b__39_0(string v);
}
public class Mono.Options.HelpCommand : Command {
    public virtual int Invoke(IEnumerable`1<string> arguments);
    private List`1<KeyValuePair`2<string, Command>> GetCommands();
    private static void AddNestedCommands(List`1<KeyValuePair`2<string, Command>> commands, string outer, CommandSet value);
    internal void WriteUnknownCommand(string unknownCommand);
}
internal class Mono.Options.HelpOption : Option {
    private Option option;
    private CommandSet commands;
    public HelpOption(CommandSet commands, Option d);
    protected virtual void OnParseComplete(OptionContext c);
}
public abstract class Mono.Options.Option : object {
    private string prototype;
    private string description;
    private String[] names;
    private OptionValueType type;
    private int count;
    private String[] separators;
    private bool hidden;
    private static Char[] NameTerminator;
    public string Prototype { get; }
    public string Description { get; }
    public OptionValueType OptionValueType { get; }
    public int MaxValueCount { get; }
    public bool Hidden { get; }
    internal String[] Names { get; }
    internal String[] ValueSeparators { get; }
    protected Option(string prototype, string description);
    protected Option(string prototype, string description, int maxValueCount);
    protected Option(string prototype, string description, int maxValueCount, bool hidden);
    private static Option();
    public string get_Prototype();
    public string get_Description();
    public OptionValueType get_OptionValueType();
    public int get_MaxValueCount();
    public bool get_Hidden();
    public String[] GetNames();
    public String[] GetValueSeparators();
    protected static T Parse(string value, OptionContext c);
    internal String[] get_Names();
    internal String[] get_ValueSeparators();
    private OptionValueType ParsePrototype();
    private static void AddSeparators(string name, int end, List`1<string> seps);
    public void Invoke(OptionContext c);
    protected abstract virtual void OnParseComplete(OptionContext c);
    internal void InvokeOnParseComplete(OptionContext c);
    public virtual string ToString();
}
public class Mono.Options.OptionAction`2 : MulticastDelegate {
    public OptionAction`2(object object, IntPtr method);
    public virtual void Invoke(TKey key, TValue value);
    public virtual IAsyncResult BeginInvoke(TKey key, TValue value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Mono.Options.OptionContext : object {
    private Option option;
    private string name;
    private int index;
    private OptionSet set;
    private OptionValueCollection c;
    public Option Option { get; public set; }
    public string OptionName { get; public set; }
    public int OptionIndex { get; public set; }
    public OptionSet OptionSet { get; }
    public OptionValueCollection OptionValues { get; }
    public OptionContext(OptionSet set);
    public Option get_Option();
    public void set_Option(Option value);
    public string get_OptionName();
    public void set_OptionName(string value);
    public int get_OptionIndex();
    public void set_OptionIndex(int value);
    public OptionSet get_OptionSet();
    public OptionValueCollection get_OptionValues();
}
public class Mono.Options.OptionException : Exception {
    private string option;
    public string OptionName { get; }
    public OptionException(string message, string optionName);
    public OptionException(string message, string optionName, Exception innerException);
    public string get_OptionName();
}
public class Mono.Options.OptionSet : KeyedCollection`2<string, Option> {
    private Converter`2<string, string> localizer;
    private List`1<ArgumentSource> sources;
    private ReadOnlyCollection`1<ArgumentSource> roSources;
    private static int OptionWidth;
    private static int Description_FirstWidth;
    private static int Description_RemWidth;
    private static string CommandHelpIndentStart;
    private static string CommandHelpIndentRemaining;
    public Converter`2<string, string> MessageLocalizer { get; internal set; }
    public ReadOnlyCollection`1<ArgumentSource> ArgumentSources { get; }
    public OptionSet(Converter`2<string, string> localizer);
    public OptionSet(StringComparer comparer);
    public OptionSet(Converter`2<string, string> localizer, StringComparer comparer);
    private static OptionSet();
    public Converter`2<string, string> get_MessageLocalizer();
    internal void set_MessageLocalizer(Converter`2<string, string> value);
    public ReadOnlyCollection`1<ArgumentSource> get_ArgumentSources();
    protected virtual string GetKeyForItem(Option item);
    [ObsoleteAttribute("Use KeyedCollection.this[string]")]
protected Option GetOptionForName(string option);
    protected virtual void InsertItem(int index, Option item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, Option item);
    private void AddImpl(Option option);
    public OptionSet Add(string header);
    public OptionSet Add(Option option);
    public OptionSet Add(string prototype, Action`1<string> action);
    public OptionSet Add(string prototype, string description, Action`1<string> action);
    public OptionSet Add(string prototype, string description, Action`1<string> action, bool hidden);
    public OptionSet Add(string prototype, OptionAction`2<string, string> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<string, string> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<string, string> action, bool hidden);
    public OptionSet Add(string prototype, Action`1<T> action);
    public OptionSet Add(string prototype, string description, Action`1<T> action);
    public OptionSet Add(string prototype, OptionAction`2<TKey, TValue> action);
    public OptionSet Add(string prototype, string description, OptionAction`2<TKey, TValue> action);
    public OptionSet Add(ArgumentSource source);
    protected virtual OptionContext CreateOptionContext();
    public List`1<string> Parse(IEnumerable`1<string> arguments);
    private bool AddSource(ArgumentEnumerator ae, string argument);
    private static bool Unprocessed(List`1<string> extra, Option def, OptionContext c, string argument);
    [GeneratedRegexAttribute("^(?<flag>--|-|/)(?<name>[^:=]+)((?<sep>[:=])(?<value>.*))?$")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
private static Regex ValueOption();
    protected bool GetOptionParts(string argument, String& flag, String& name, String& sep, String& value);
    protected virtual bool Parse(string argument, OptionContext c);
    private void ParseValue(string option, OptionContext c);
    private bool ParseBool(string option, string n, OptionContext c);
    private bool ParseBundledValue(string f, string n, OptionContext c);
    private static void Invoke(OptionContext c, string name, string value, Option option);
    public void WriteOptionDescriptions(TextWriter o);
    internal void WriteCommandDescription(TextWriter o, Command c, string commandName);
    private void WriteDescription(TextWriter o, string value, string prefix, int firstWidth, int remWidth);
    private bool WriteOptionPrototype(TextWriter o, Option p, Int32& written);
    private static int GetNextOptionIndex(String[] names, int i);
    private static void Write(TextWriter o, Int32& n, string s);
    [GeneratedRegexAttribute("(?<=(?<!\{)\{)[^{}]*(?=\}(?!\}))")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
private static Regex IgnoreDoubleBracesRegex();
    private static string GetArgumentName(int index, int maxIndex, string description);
    private static string GetDescription(string description);
    private static IEnumerable`1<string> GetLines(string description, int firstWidth, int remWidth);
}
[DefaultMemberAttribute("Item")]
public class Mono.Options.OptionValueCollection : object {
    private List`1<string> values;
    private OptionContext c;
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public string Item { get; public set; }
    internal OptionValueCollection(OptionContext c);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void Add(string item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string item);
    public sealed virtual void CopyTo(String[] array, int arrayIndex);
    public sealed virtual bool Remove(string item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public sealed virtual int IndexOf(string item);
    public sealed virtual void Insert(int index, string item);
    public sealed virtual void RemoveAt(int index);
    private void AssertValid(int index);
    public sealed virtual string get_Item(int index);
    public sealed virtual void set_Item(int index, string value);
    public List`1<string> ToList();
    public String[] ToArray();
    public virtual string ToString();
}
public enum Mono.Options.OptionValueType : Enum {
    public int value__;
    public static OptionValueType None;
    public static OptionValueType Optional;
    public static OptionValueType Required;
}
public class Mono.Options.ResponseFileSource : ArgumentSource {
    public string Description { get; }
    public virtual String[] GetNames();
    public virtual string get_Description();
    public virtual bool GetArguments(string value, IEnumerable`1& replacement);
}
internal static class Mono.Options.StringCoda : object {
    public static IEnumerable`1<string> WrappedLines(string self, Int32[] widths);
    public static IEnumerable`1<string> WrappedLines(string self, IEnumerable`1<int> widths);
    [IteratorStateMachineAttribute("Mono.Options.StringCoda/<CreateWrappedLinesIterator>d__2")]
private static IEnumerable`1<string> CreateWrappedLinesIterator(string self, IEnumerable`1<int> widths);
    private static int GetNextWidth(IEnumerator`1<int> ewidths, int curWidth, Nullable`1& eValid);
    private static bool IsEolChar(char c);
    private static int GetLineEnd(int start, int length, string description);
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__IgnoreDoubleBracesRegex_1 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__IgnoreDoubleBracesRegex_1 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__IgnoreDoubleBracesRegex_1();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__Utilities : object {
    internal static TimeSpan s_defaultTimeout;
    internal static bool s_hasTimeout;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__Utilities();
    internal static void StackPop(Int32[] stack, Int32& pos, Int32& arg0, Int32& arg1);
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0);
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0, int arg1);
    internal static void StackPush(Int32[]& stack, Int32& pos, int arg0, int arg1, int arg2);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|3_0(Int32[]& stack, Int32& pos, int arg0);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|4_0(Int32[]& stack, Int32& pos, int arg0, int arg1);
    [CompilerGeneratedAttribute]
internal static void <StackPush>g__WithResize|5_0(Int32[]& stack, Int32& pos, int arg0, int arg1, int arg2);
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.9.8001")]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__ValueOption_0 : Regex {
    internal static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__ValueOption_0 Instance;
    private static <RegexGenerator_g>F6DD43EEA644F37FBD420BF6C4F76D7CBF00A201A3A5DFAA2DE4DAED4B5EFB477__ValueOption_0();
}
