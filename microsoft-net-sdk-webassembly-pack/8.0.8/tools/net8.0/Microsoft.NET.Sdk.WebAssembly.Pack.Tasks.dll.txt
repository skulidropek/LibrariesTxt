[DataContractAttribute]
public class Microsoft.NET.Sdk.WebAssembly.AdditionalAsset : object {
    [CompilerGeneratedAttribute]
private string <hash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <behavior>k__BackingField;
    [DataMemberAttribute]
public string hash { get; public set; }
    [DataMemberAttribute]
public string behavior { get; public set; }
    [CompilerGeneratedAttribute]
public string get_hash();
    [CompilerGeneratedAttribute]
public void set_hash(string value);
    [CompilerGeneratedAttribute]
public string get_behavior();
    [CompilerGeneratedAttribute]
public void set_behavior(string value);
}
public class Microsoft.NET.Sdk.WebAssembly.AssetsComputingHelper : object {
    private static String[] monoPackageIds;
    private static String[] dotnetJsSingleThreadNames;
    private static String[] icuShardsFromRuntimePack;
    private static AssetsComputingHelper();
    public static bool ShouldFilterCandidate(ITaskItem candidate, bool timezoneSupport, bool invariantGlobalization, bool hybridGlobalization, bool loadFullICUData, bool copySymbols, string customIcuCandidateFilename, bool enableThreads, bool emitSourceMap, String& reason);
    private static bool IsFromMonoPackage(ITaskItem candidate);
    public static string GetCandidateRelativePath(ITaskItem candidate);
    public static ITaskItem GetCustomIcuAsset(ITaskItem candidate);
    public static bool TryGetAssetFilename(ITaskItem candidate, String& filename);
}
public class Microsoft.NET.Sdk.WebAssembly.BootJsonBuilderHelper : object {
    [CompilerGeneratedAttribute]
private TaskLoggingHelper <Log>P;
    public BootJsonBuilderHelper(TaskLoggingHelper Log);
    public void ComputeResourcesHash(BootJsonData bootConfig);
    public Dictionary`2<string, string> GetNativeResourceTargetInBootConfig(BootJsonData bootConfig, string resourceName);
    [CompilerGeneratedAttribute]
internal static void <ComputeResourcesHash>g__AddDictionary|2_0(StringBuilder sb, Dictionary`2<string, string> res);
}
public class Microsoft.NET.Sdk.WebAssembly.BootJsonData : object {
    [CompilerGeneratedAttribute]
private string <entryAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private string <mainAssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourcesData <resources>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <cacheBootResources>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <debugBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private int <debugLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <linkerEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <config>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <appsettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GlobalizationMode> <icuDataMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <globalizationMode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <startupMemoryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <runtimeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, object>> <extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private object <environmentVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private object <diagnosticTracing>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <pthreadPoolSize>k__BackingField;
    public string entryAssembly { get; public set; }
    public string mainAssemblyName { get; public set; }
    public ResourcesData resources { get; public set; }
    public Nullable`1<bool> cacheBootResources { get; public set; }
    public Nullable`1<bool> debugBuild { get; public set; }
    public int debugLevel { get; public set; }
    public Nullable`1<bool> linkerEnabled { get; public set; }
    public List`1<string> config { get; public set; }
    public List`1<string> appsettings { get; public set; }
    public Nullable`1<GlobalizationMode> icuDataMode { get; public set; }
    public string globalizationMode { get; public set; }
    public Nullable`1<bool> startupMemoryCache { get; public set; }
    public String[] runtimeOptions { get; public set; }
    public Dictionary`2<string, Dictionary`2<string, object>> extensions { get; public set; }
    public object environmentVariables { get; public set; }
    public object diagnosticTracing { get; public set; }
    public Nullable`1<int> pthreadPoolSize { get; public set; }
    [CompilerGeneratedAttribute]
public string get_entryAssembly();
    [CompilerGeneratedAttribute]
public void set_entryAssembly(string value);
    [CompilerGeneratedAttribute]
public string get_mainAssemblyName();
    [CompilerGeneratedAttribute]
public void set_mainAssemblyName(string value);
    [CompilerGeneratedAttribute]
public ResourcesData get_resources();
    [CompilerGeneratedAttribute]
public void set_resources(ResourcesData value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_cacheBootResources();
    [CompilerGeneratedAttribute]
public void set_cacheBootResources(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_debugBuild();
    [CompilerGeneratedAttribute]
public void set_debugBuild(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public int get_debugLevel();
    [CompilerGeneratedAttribute]
public void set_debugLevel(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_linkerEnabled();
    [CompilerGeneratedAttribute]
public void set_linkerEnabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_config();
    [CompilerGeneratedAttribute]
public void set_config(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_appsettings();
    [CompilerGeneratedAttribute]
public void set_appsettings(List`1<string> value);
    [CompilerGeneratedAttribute]
public Nullable`1<GlobalizationMode> get_icuDataMode();
    [CompilerGeneratedAttribute]
public void set_icuDataMode(Nullable`1<GlobalizationMode> value);
    [CompilerGeneratedAttribute]
public string get_globalizationMode();
    [CompilerGeneratedAttribute]
public void set_globalizationMode(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_startupMemoryCache();
    [CompilerGeneratedAttribute]
public void set_startupMemoryCache(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public String[] get_runtimeOptions();
    [CompilerGeneratedAttribute]
public void set_runtimeOptions(String[] value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Dictionary`2<string, object>> get_extensions();
    [CompilerGeneratedAttribute]
public void set_extensions(Dictionary`2<string, Dictionary`2<string, object>> value);
    [CompilerGeneratedAttribute]
public object get_environmentVariables();
    [CompilerGeneratedAttribute]
public void set_environmentVariables(object value);
    [CompilerGeneratedAttribute]
public object get_diagnosticTracing();
    [CompilerGeneratedAttribute]
public void set_diagnosticTracing(object value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_pthreadPoolSize();
    [CompilerGeneratedAttribute]
public void set_pthreadPoolSize(Nullable`1<int> value);
}
public class Microsoft.NET.Sdk.WebAssembly.ComputeWasmBuildAssets : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Candidates>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <CustomIcuCandidate>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectDebugSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SatelliteAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ProjectSatelliteAssemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetJsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TimeZoneSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InvariantGlobalization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HybridGlobalization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadFullICUData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopySymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FingerprintDotNetJs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmitSourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AssetCandidates>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FilesToRemove>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Candidates { get; public set; }
    public ITaskItem CustomIcuCandidate { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ProjectAssembly { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ProjectDebugSymbols { get; public set; }
    [RequiredAttribute]
public ITaskItem[] SatelliteAssemblies { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ProjectSatelliteAssemblies { get; public set; }
    [RequiredAttribute]
public string DotNetJsVersion { get; public set; }
    [RequiredAttribute]
public string OutputPath { get; public set; }
    [RequiredAttribute]
public bool TimeZoneSupport { get; public set; }
    [RequiredAttribute]
public bool InvariantGlobalization { get; public set; }
    [RequiredAttribute]
public bool HybridGlobalization { get; public set; }
    [RequiredAttribute]
public bool LoadFullICUData { get; public set; }
    [RequiredAttribute]
public bool CopySymbols { get; public set; }
    public bool FingerprintDotNetJs { get; public set; }
    public bool EnableThreads { get; public set; }
    public bool EmitSourceMap { get; public set; }
    [OutputAttribute]
public ITaskItem[] AssetCandidates { get; public set; }
    [OutputAttribute]
public ITaskItem[] FilesToRemove { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Candidates();
    [CompilerGeneratedAttribute]
public void set_Candidates(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_CustomIcuCandidate();
    [CompilerGeneratedAttribute]
public void set_CustomIcuCandidate(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectAssembly();
    [CompilerGeneratedAttribute]
public void set_ProjectAssembly(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectDebugSymbols();
    [CompilerGeneratedAttribute]
public void set_ProjectDebugSymbols(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SatelliteAssemblies();
    [CompilerGeneratedAttribute]
public void set_SatelliteAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ProjectSatelliteAssemblies();
    [CompilerGeneratedAttribute]
public void set_ProjectSatelliteAssemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_DotNetJsVersion();
    [CompilerGeneratedAttribute]
public void set_DotNetJsVersion(string value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public bool get_TimeZoneSupport();
    [CompilerGeneratedAttribute]
public void set_TimeZoneSupport(bool value);
    [CompilerGeneratedAttribute]
public bool get_InvariantGlobalization();
    [CompilerGeneratedAttribute]
public void set_InvariantGlobalization(bool value);
    [CompilerGeneratedAttribute]
public bool get_HybridGlobalization();
    [CompilerGeneratedAttribute]
public void set_HybridGlobalization(bool value);
    [CompilerGeneratedAttribute]
public bool get_LoadFullICUData();
    [CompilerGeneratedAttribute]
public void set_LoadFullICUData(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopySymbols();
    [CompilerGeneratedAttribute]
public void set_CopySymbols(bool value);
    [CompilerGeneratedAttribute]
public bool get_FingerprintDotNetJs();
    [CompilerGeneratedAttribute]
public void set_FingerprintDotNetJs(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableThreads();
    [CompilerGeneratedAttribute]
public void set_EnableThreads(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmitSourceMap();
    [CompilerGeneratedAttribute]
public void set_EmitSourceMap(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AssetCandidates();
    [CompilerGeneratedAttribute]
public void set_AssetCandidates(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FilesToRemove();
    [CompilerGeneratedAttribute]
public void set_FilesToRemove(ITaskItem[] value);
    public virtual bool Execute();
    private static void ApplyUniqueMetadataProperties(ITaskItem candidate);
}
public class Microsoft.NET.Sdk.WebAssembly.ComputeWasmPublishAssets : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResolvedFilesToPublish>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <CustomIcuCandidate>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <WasmAotAssets>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ExistingAssets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TimeZoneSupport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InvariantGlobalization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HybridGlobalization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadFullICUData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CopySymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublishPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DotNetJsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FingerprintDotNetJs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableThreads>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmitSourceMap>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWebCilEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <NewCandidates>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FilesToRemove>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] ResolvedFilesToPublish { get; public set; }
    public ITaskItem CustomIcuCandidate { get; public set; }
    [RequiredAttribute]
public ITaskItem[] WasmAotAssets { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ExistingAssets { get; public set; }
    [RequiredAttribute]
public bool TimeZoneSupport { get; public set; }
    [RequiredAttribute]
public bool InvariantGlobalization { get; public set; }
    [RequiredAttribute]
public bool HybridGlobalization { get; public set; }
    [RequiredAttribute]
public bool LoadFullICUData { get; public set; }
    [RequiredAttribute]
public bool CopySymbols { get; public set; }
    [RequiredAttribute]
public string PublishPath { get; public set; }
    [RequiredAttribute]
public string DotNetJsVersion { get; public set; }
    public bool FingerprintDotNetJs { get; public set; }
    public bool EnableThreads { get; public set; }
    public bool EmitSourceMap { get; public set; }
    public bool IsWebCilEnabled { get; public set; }
    [OutputAttribute]
public ITaskItem[] NewCandidates { get; public set; }
    [OutputAttribute]
public ITaskItem[] FilesToRemove { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResolvedFilesToPublish();
    [CompilerGeneratedAttribute]
public void set_ResolvedFilesToPublish(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_CustomIcuCandidate();
    [CompilerGeneratedAttribute]
public void set_CustomIcuCandidate(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_WasmAotAssets();
    [CompilerGeneratedAttribute]
public void set_WasmAotAssets(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ExistingAssets();
    [CompilerGeneratedAttribute]
public void set_ExistingAssets(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_TimeZoneSupport();
    [CompilerGeneratedAttribute]
public void set_TimeZoneSupport(bool value);
    [CompilerGeneratedAttribute]
public bool get_InvariantGlobalization();
    [CompilerGeneratedAttribute]
public void set_InvariantGlobalization(bool value);
    [CompilerGeneratedAttribute]
public bool get_HybridGlobalization();
    [CompilerGeneratedAttribute]
public void set_HybridGlobalization(bool value);
    [CompilerGeneratedAttribute]
public bool get_LoadFullICUData();
    [CompilerGeneratedAttribute]
public void set_LoadFullICUData(bool value);
    [CompilerGeneratedAttribute]
public bool get_CopySymbols();
    [CompilerGeneratedAttribute]
public void set_CopySymbols(bool value);
    [CompilerGeneratedAttribute]
public string get_PublishPath();
    [CompilerGeneratedAttribute]
public void set_PublishPath(string value);
    [CompilerGeneratedAttribute]
public string get_DotNetJsVersion();
    [CompilerGeneratedAttribute]
public void set_DotNetJsVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_FingerprintDotNetJs();
    [CompilerGeneratedAttribute]
public void set_FingerprintDotNetJs(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableThreads();
    [CompilerGeneratedAttribute]
public void set_EnableThreads(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmitSourceMap();
    [CompilerGeneratedAttribute]
public void set_EmitSourceMap(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsWebCilEnabled();
    [CompilerGeneratedAttribute]
public void set_IsWebCilEnabled(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_NewCandidates();
    [CompilerGeneratedAttribute]
public void set_NewCandidates(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FilesToRemove();
    [CompilerGeneratedAttribute]
public void set_FilesToRemove(ITaskItem[] value);
    public virtual bool Execute();
    private List`1<ITaskItem> ProcessNativeAssets(Dictionary`2<string, ITaskItem> nativeAssets, IDictionary`2<string, ITaskItem> resolvedPublishFilesToRemove, Dictionary`2<string, ITaskItem> resolvedNativeAssetToPublish, Dictionary`2<string, ITaskItem> compressedRepresentations, List`1<ITaskItem> filesToRemove);
    private List`1<ITaskItem> ProcessSymbolAssets(Dictionary`2<string, ITaskItem> symbolAssets, Dictionary`2<string, ITaskItem> compressedRepresentations, Dictionary`2<string, ITaskItem> resolvedPublishFilesToRemove, Dictionary`2<string, ITaskItem> resolvedSymbolAssetToPublish, List`1<ITaskItem> filesToRemove);
    private List`1<ITaskItem> ComputeUpdatedAssemblies(IDictionary`2<ValueTuple`2<string, string>, ITaskItem> satelliteAssemblies, List`1<ITaskItem> filesToRemove, Dictionary`2<string, ITaskItem> resolvedAssembliesToPublish, Dictionary`2<string, ITaskItem> assemblyAssets, Dictionary`2<string, ITaskItem> satelliteAssemblyAssets, Dictionary`2<string, ITaskItem> compressedRepresentations);
    private List`1<ITaskItem> ProcessCompressedAssets(Dictionary`2<string, ITaskItem> compressedRepresentations, Dictionary`2<string, ITaskItem> assetsToUpdate, Dictionary`2<string, ITaskItem> updatedAssets);
    private static void UpdateRelatedAssetProperty(ITaskItem asset, TaskItem newAsset, Dictionary`2<string, ITaskItem> updatedAssetsMap);
    private int OrderByAssetRole(string left, string right);
    private void ApplyPublishProperties(ITaskItem newAsemblyAsset);
    private void GroupExistingStaticWebAssets(Dictionary`2<string, ITaskItem> assemblyAssets, Dictionary`2<string, ITaskItem> nativeAssets, Dictionary`2<string, ITaskItem> satelliteAssemblyAssets, Dictionary`2<string, ITaskItem> symbolAssets, Dictionary`2<string, ITaskItem> compressedRepresentations);
    private void GroupResolvedFilesToPublish(Dictionary`2<string, ITaskItem> resolvedFilesToPublishToRemove, Dictionary`2<string, ITaskItem> resolvedAssemblyToPublish, Dictionary`2<ValueTuple`2<string, string>, ITaskItem> satelliteAssemblyToPublish, Dictionary`2<string, ITaskItem> resolvedSymbolsToPublish, Dictionary`2<string, ITaskItem> resolvedNativeAssetToPublish);
    private static bool IsNativeAsset(string traitValue);
    private static bool IsRuntimeAsset(string traitValue);
    private static bool IsSymbolAsset(string traitValue);
    private static bool IsAlternative(ITaskItem asset);
    private static bool IsCulture(string traitName);
    private static bool IsWebAssemblyResource(string traitName);
    [CompilerGeneratedAttribute]
internal static bool <ProcessNativeAssets>g__IsAnyDotNetJs|69_0(string key);
    [CompilerGeneratedAttribute]
internal static bool <ProcessNativeAssets>g__IsDotNetWasm|69_1(string key);
    [CompilerGeneratedAttribute]
internal static int <OrderByAssetRole>g__GetScore|74_0(string candidate);
    [CompilerGeneratedAttribute]
internal static void <GroupResolvedFilesToPublish>g__ResolveAsNativeAsset|77_0(TaskLoggingHelper log, Dictionary`2<string, ITaskItem> resolvedNativeAssetToPublish, ITaskItem candidate, string extension);
}
public class Microsoft.NET.Sdk.WebAssembly.ConvertDllsToWebCil : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Candidates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IntermediateOutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <WebCilCandidates>k__BackingField;
    protected List`1<string> _fileWrites;
    [RequiredAttribute]
public ITaskItem[] Candidates { get; public set; }
    [RequiredAttribute]
public string OutputPath { get; public set; }
    [RequiredAttribute]
public string IntermediateOutputPath { get; public set; }
    [RequiredAttribute]
public bool IsEnabled { get; public set; }
    [OutputAttribute]
public ITaskItem[] WebCilCandidates { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[OutputAttribute]
public String[] FileWrites { get; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Candidates();
    [CompilerGeneratedAttribute]
public void set_Candidates(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_IntermediateOutputPath();
    [CompilerGeneratedAttribute]
public void set_IntermediateOutputPath(string value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_WebCilCandidates();
    [CompilerGeneratedAttribute]
public void set_WebCilCandidates(ITaskItem[] value);
    public String[] get_FileWrites();
    public virtual bool Execute();
}
public static class Microsoft.NET.Sdk.WebAssembly.FileHasher : object {
    public static string GetFileHash(string filePath);
    private static string ToBase36(Byte[] hash);
}
public class Microsoft.NET.Sdk.WebAssembly.GenerateWasmBootJson : Task {
    private static String[] jiterpreterOptions;
    [CompilerGeneratedAttribute]
private string <AssemblyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Resources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DebugBuild>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DebugLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LinkerEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CacheBootResources>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadFullICUData>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHybridGlobalization>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LoadCustomIcuData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InvariantGlobalization>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ConfigurationFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StartupMemoryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Jiterpreter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RuntimeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetFrameworkVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ModuleAfterConfigLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ModuleAfterRuntimeReady>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <LazyLoadedAssemblies>k__BackingField;
    private Version parsedTargetFrameworkVersion;
    private static Version version80;
    [RequiredAttribute]
public string AssemblyPath { get; public set; }
    [RequiredAttribute]
public ITaskItem[] Resources { get; public set; }
    [RequiredAttribute]
public bool DebugBuild { get; public set; }
    public string DebugLevel { get; public set; }
    [RequiredAttribute]
public bool LinkerEnabled { get; public set; }
    [RequiredAttribute]
public bool CacheBootResources { get; public set; }
    public bool LoadFullICUData { get; public set; }
    public bool IsHybridGlobalization { get; public set; }
    public bool LoadCustomIcuData { get; public set; }
    public string InvariantGlobalization { get; public set; }
    public ITaskItem[] ConfigurationFiles { get; public set; }
    public ITaskItem[] Extensions { get; public set; }
    public string StartupMemoryCache { get; public set; }
    public string Jiterpreter { get; public set; }
    public string RuntimeOptions { get; public set; }
    [RequiredAttribute]
public string TargetFrameworkVersion { get; public set; }
    public ITaskItem[] ModuleAfterConfigLoaded { get; public set; }
    public ITaskItem[] ModuleAfterRuntimeReady { get; public set; }
    [RequiredAttribute]
public string OutputPath { get; public set; }
    public ITaskItem[] LazyLoadedAssemblies { get; public set; }
    private static GenerateWasmBootJson();
    [CompilerGeneratedAttribute]
public string get_AssemblyPath();
    [CompilerGeneratedAttribute]
public void set_AssemblyPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Resources();
    [CompilerGeneratedAttribute]
public void set_Resources(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_DebugBuild();
    [CompilerGeneratedAttribute]
public void set_DebugBuild(bool value);
    [CompilerGeneratedAttribute]
public string get_DebugLevel();
    [CompilerGeneratedAttribute]
public void set_DebugLevel(string value);
    [CompilerGeneratedAttribute]
public bool get_LinkerEnabled();
    [CompilerGeneratedAttribute]
public void set_LinkerEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_CacheBootResources();
    [CompilerGeneratedAttribute]
public void set_CacheBootResources(bool value);
    [CompilerGeneratedAttribute]
public bool get_LoadFullICUData();
    [CompilerGeneratedAttribute]
public void set_LoadFullICUData(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHybridGlobalization();
    [CompilerGeneratedAttribute]
public void set_IsHybridGlobalization(bool value);
    [CompilerGeneratedAttribute]
public bool get_LoadCustomIcuData();
    [CompilerGeneratedAttribute]
public void set_LoadCustomIcuData(bool value);
    [CompilerGeneratedAttribute]
public string get_InvariantGlobalization();
    [CompilerGeneratedAttribute]
public void set_InvariantGlobalization(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ConfigurationFiles();
    [CompilerGeneratedAttribute]
public void set_ConfigurationFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Extensions();
    [CompilerGeneratedAttribute]
public void set_Extensions(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_StartupMemoryCache();
    [CompilerGeneratedAttribute]
public void set_StartupMemoryCache(string value);
    [CompilerGeneratedAttribute]
public string get_Jiterpreter();
    [CompilerGeneratedAttribute]
public void set_Jiterpreter(string value);
    [CompilerGeneratedAttribute]
public string get_RuntimeOptions();
    [CompilerGeneratedAttribute]
public void set_RuntimeOptions(string value);
    [CompilerGeneratedAttribute]
public string get_TargetFrameworkVersion();
    [CompilerGeneratedAttribute]
public void set_TargetFrameworkVersion(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ModuleAfterConfigLoaded();
    [CompilerGeneratedAttribute]
public void set_ModuleAfterConfigLoaded(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ModuleAfterRuntimeReady();
    [CompilerGeneratedAttribute]
public void set_ModuleAfterRuntimeReady(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LazyLoadedAssemblies();
    [CompilerGeneratedAttribute]
public void set_LazyLoadedAssemblies(ITaskItem[] value);
    public virtual bool Execute();
    public void WriteBootJson(Stream output, string entryAssemblyName);
    private GlobalizationMode GetGlobalizationMode();
    private static Nullable`1<bool> ParseOptionalBool(string value);
    private static Nullable`1<int> ParseOptionalInt(string value);
    private void AddToAdditionalResources(ITaskItem resource, Dictionary`2<string, AdditionalAsset> additionalResources, string resourceName, string behavior);
    private bool TryGetLazyLoadedAssembly(string fileName, ITaskItem& lazyLoadedAssembly);
    private bool IsTargeting80OrLater();
    [CompilerGeneratedAttribute]
private void <WriteBootJson>g__AddResourceToList|82_2(ITaskItem resource, Dictionary`2<string, string> resourceList, string resourceKey);
}
public enum Microsoft.NET.Sdk.WebAssembly.GlobalizationMode : Enum {
    public int value__;
    public static GlobalizationMode Sharded;
    public static GlobalizationMode All;
    public static GlobalizationMode Invariant;
    public static GlobalizationMode Custom;
    public static GlobalizationMode Hybrid;
}
public class Microsoft.NET.Sdk.WebAssembly.ResourcesData : object {
    [CompilerGeneratedAttribute]
private string <hash>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <runtime>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <jsModuleWorker>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <jsModuleNative>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <jsModuleRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <wasmNative>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <wasmSymbols>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <icu>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <assembly>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <pdb>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, string>> <satelliteResources>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <lazyAssembly>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <libraryInitializers>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <modulesAfterConfigLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <modulesAfterRuntimeReady>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, string>> <extensions>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, AdditionalAsset> <runtimeAssets>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Dictionary`2<string, string>> <vfs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <remoteSources>k__BackingField;
    public string hash { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> runtime { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> jsModuleWorker { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> jsModuleNative { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> jsModuleRuntime { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> wasmNative { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> wasmSymbols { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> icu { get; public set; }
    public Dictionary`2<string, string> assembly { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> pdb { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> satelliteResources { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> lazyAssembly { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> libraryInitializers { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> modulesAfterConfigLoaded { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, string> modulesAfterRuntimeReady { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> extensions { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, AdditionalAsset> runtimeAssets { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> vfs { get; public set; }
    [DataMemberAttribute]
public List`1<string> remoteSources { get; public set; }
    [CompilerGeneratedAttribute]
public string get_hash();
    [CompilerGeneratedAttribute]
public void set_hash(string value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_runtime();
    [CompilerGeneratedAttribute]
public void set_runtime(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_jsModuleWorker();
    [CompilerGeneratedAttribute]
public void set_jsModuleWorker(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_jsModuleNative();
    [CompilerGeneratedAttribute]
public void set_jsModuleNative(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_jsModuleRuntime();
    [CompilerGeneratedAttribute]
public void set_jsModuleRuntime(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_wasmNative();
    [CompilerGeneratedAttribute]
public void set_wasmNative(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_wasmSymbols();
    [CompilerGeneratedAttribute]
public void set_wasmSymbols(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_icu();
    [CompilerGeneratedAttribute]
public void set_icu(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_assembly();
    [CompilerGeneratedAttribute]
public void set_assembly(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_pdb();
    [CompilerGeneratedAttribute]
public void set_pdb(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> get_satelliteResources();
    [CompilerGeneratedAttribute]
public void set_satelliteResources(Dictionary`2<string, Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_lazyAssembly();
    [CompilerGeneratedAttribute]
public void set_lazyAssembly(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_libraryInitializers();
    [CompilerGeneratedAttribute]
public void set_libraryInitializers(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_modulesAfterConfigLoaded();
    [CompilerGeneratedAttribute]
public void set_modulesAfterConfigLoaded(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, string> get_modulesAfterRuntimeReady();
    [CompilerGeneratedAttribute]
public void set_modulesAfterRuntimeReady(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> get_extensions();
    [CompilerGeneratedAttribute]
public void set_extensions(Dictionary`2<string, Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, AdditionalAsset> get_runtimeAssets();
    [CompilerGeneratedAttribute]
public void set_runtimeAssets(Dictionary`2<string, AdditionalAsset> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Dictionary`2<string, string>> get_vfs();
    [CompilerGeneratedAttribute]
public void set_vfs(Dictionary`2<string, Dictionary`2<string, string>> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_remoteSources();
    [CompilerGeneratedAttribute]
public void set_remoteSources(List`1<string> value);
}
public class Microsoft.WebAssembly.Build.Tasks.WebcilConverter : object {
    private string _inputPath;
    private string _outputPath;
    private WebcilConverter _converter;
    [CompilerGeneratedAttribute]
private TaskLoggingHelper <Log>k__BackingField;
    private TaskLoggingHelper Log { get; }
    private WebcilConverter(WebcilConverter converter, string inputPath, string outputPath, TaskLoggingHelper logger);
    [CompilerGeneratedAttribute]
private TaskLoggingHelper get_Log();
    public static WebcilConverter FromPortableExecutable(string inputPath, string outputPath, TaskLoggingHelper logger);
    public void ConvertToWebcil();
}
internal static class Utils : object {
    public static string WebcilInWasmExtension;
    private static object s_SyncObj;
    private static Utils();
    public static string GetEmbeddedResource(string file);
    public static bool IsNewerThan(string inFile, string outFile);
    public static ValueTuple`2<int, string> RunShellCommand(TaskLoggingHelper logger, string command, IDictionary`2<string, string> envVars, string workingDir, bool silent, bool logStdErrAsMessage, MessageImportance debugMessageImportance, string label);
    public static string RunProcess(TaskLoggingHelper logger, string path, string args, IDictionary`2<string, string> envVars, string workingDir, bool ignoreErrors, bool silent, MessageImportance debugMessageImportance);
    public static ValueTuple`2<int, string> TryRunProcess(TaskLoggingHelper logger, string path, string args, IDictionary`2<string, string> envVars, string workingDir, bool silent, bool logStdErrAsMessage, MessageImportance debugMessageImportance, string label, Action`1<Stream> inputProvider);
    public static bool CopyIfDifferent(string src, string dst, bool useHash);
    private static string ToBase64SafeString(Byte[] data);
    private static Byte[] ComputeHashFromStream(Stream stream, HashAlgorithmType algorithm);
    private static string EncodeHash(Byte[] data, HashEncodingType encoding);
    public static string ComputeHash(string filepath);
    public static string ComputeHashEx(string filepath, HashAlgorithmType algorithm, HashEncodingType encoding);
    public static string ComputeIntegrity(string filepath);
    public static string ComputeIntegrity(Byte[] bytes);
    public static string ComputeTextIntegrity(string str);
    public static void DirectoryCopy(string sourceDir, string destDir, Func`2<string, bool> predicate);
    public static bool IsWindows();
    public static bool IsMacOS();
    public static bool IsLinux();
    public static bool IsManagedAssembly(string filePath);
    public static bool IsManagedAssembly(Byte[] bytes);
    private static bool IsManagedAssembly(PEReader peReader);
    [CompilerGeneratedAttribute]
internal static string <RunShellCommand>g__CreateTemporaryBatchFile|6_0(string command);
}
