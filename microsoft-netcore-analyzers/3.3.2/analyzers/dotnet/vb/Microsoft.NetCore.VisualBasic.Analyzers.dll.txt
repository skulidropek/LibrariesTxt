[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicMarkBooleanPInvokeArgumentsWithMarshalAsAnalyzer : MarkBooleanPInvokeArgumentsWithMarshalAsAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicMarkBooleanPInvokeArgumentsWithMarshalAsFixer : MarkBooleanPInvokeArgumentsWithMarshalAsFixer {
}
[ExportCodeFixProviderAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicSpecifyMarshalingForPInvokeStringArgumentsFixer : SpecifyMarshalingForPInvokeStringArgumentsFixer {
    protected virtual bool IsAttribute(SyntaxNode node);
    protected virtual SyntaxNode FindNamedArgument(IReadOnlyList`1<SyntaxNode> arguments, string argumentName);
    protected virtual bool IsDeclareStatement(SyntaxNode node);
    [AsyncStateMachineAttribute("Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicSpecifyMarshalingForPInvokeStringArgumentsFixer/VB$StateMachine_4_FixDeclareStatement")]
protected virtual Task`1<Document> FixDeclareStatement(Document document, SyntaxNode node, CancellationToken cancellationToken);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicUseManagedEquivalentsOfWin32ApiAnalyzer : UseManagedEquivalentsOfWin32ApiAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.InteropServices.BasicUseManagedEquivalentsOfWin32ApiFixer : UseManagedEquivalentsOfWin32ApiFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicDoNotUseCountWhenAnyCanBeUsedFixer : DoNotUseCountWhenAnyCanBeUsedFixer {
    protected virtual bool TryGetFixer(SyntaxNode node, string operation, bool isAsync, SyntaxNode& expression, IEnumerable`1& arguments);
    private static bool TryGetExpressionAndInvocationArguments(ExpressionSyntax sourceExpression, bool isAsync, SyntaxNode& expression, IEnumerable`1& arguments);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicPreferIsEmptyOverCountFixer : PreferIsEmptyOverCountFixer {
    protected virtual SyntaxNode GetObjectExpressionFromOperation(SyntaxNode node, string operationKey);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Performance.BasicUsePropertyInsteadOfCountMethodWhenAvailableFixer : UsePropertyInsteadOfCountMethodWhenAvailableFixer {
    protected virtual bool TryGetExpression(SyntaxNode invocationNode, SyntaxNode& memberAccessNode, SyntaxNode& nameNode);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Resources.BasicMarkAssembliesWithNeutralResourcesLanguageAnalyzer : MarkAssembliesWithNeutralResourcesLanguageAnalyzer {
    protected virtual void RegisterAttributeAnalyzer(CompilationStartAnalysisContext context, Action onResourceFound);
    private static bool CheckBasicAttribute(SyntaxNode node);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicAvoidZeroLengthArrayAllocationsAnalyzer : AvoidZeroLengthArrayAllocationsAnalyzer {
    protected virtual bool IsAttributeSyntax(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicCallGCSuppressFinalizeCorrectlyFixer : CallGCSuppressFinalizeCorrectlyFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDisposableTypesShouldDeclareFinalizerFixer : DisposableTypesShouldDeclareFinalizerFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDisposeMethodsShouldCallBaseClassDisposeFixer : DisposeMethodsShouldCallBaseClassDisposeFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDoNotUseTimersThatPreventPowerStateChangesAnalyzer : DoNotUseTimersThatPreventPowerStateChangesAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicDoNotUseTimersThatPreventPowerStateChangesFixer : DoNotUseTimersThatPreventPowerStateChangesFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicForwardCancellationTokenToInvocationsAnalyzer : ForwardCancellationTokenToInvocationsAnalyzer {
    protected virtual SyntaxNode GetInvocationMethodNameNode(SyntaxNode invocationNode);
    protected virtual bool ArgumentsImplicitOrNamed(INamedTypeSymbol cancellationTokenType, ImmutableArray`1<IArgumentOperation> arguments);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicForwardCancellationTokenToInvocationsFixer : ForwardCancellationTokenToInvocationsFixer {
    protected virtual bool TryGetInvocation(SemanticModel model, SyntaxNode node, CancellationToken ct, IInvocationOperation& invocation);
    protected virtual bool IsArgumentNamed(IArgumentOperation argumentOperation);
    protected virtual SyntaxNode GetConditionalOperationInvocationExpression(SyntaxNode invocationNode);
    protected virtual bool TryGetExpressionAndArguments(SyntaxNode invocationNode, SyntaxNode& expression, ImmutableArray`1& arguments);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicImplementISerializableCorrectlyAnalyzer : ImplementISerializableCorrectlyAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicImplementISerializableCorrectlyFixer : ImplementISerializableCorrectlyFixer {
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicImplementSerializationMethodsCorrectlyAnalyzer : ImplementSerializationMethodsCorrectlyAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicImplementSerializationMethodsCorrectlyFixer : ImplementSerializationMethodsCorrectlyFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicInitializeStaticFieldsInlineFixer : InitializeStaticFieldsInlineFixer`1<SyntaxKind> {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicMarkAllNonSerializableFieldsFixer : MarkAllNonSerializableFieldsFixer {
    protected virtual SyntaxNode GetFieldDeclarationNode(SyntaxNode node);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicNormalizeStringsToUppercaseFixer : NormalizeStringsToUppercaseFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicPreferStreamAsyncMemoryOverloadsFixer : PreferStreamAsyncMemoryOverloadsFixer {
    protected virtual IArgumentOperation GetArgumentByPositionOrName(ImmutableArray`1<IArgumentOperation> args, int index, string name, Boolean& isNamed);
    protected virtual bool IsSystemNamespaceImported(IReadOnlyList`1<SyntaxNode> importList);
    protected virtual bool IsPassingZeroAndBufferLength(SemanticModel model, SyntaxNode bufferValueNode, SyntaxNode offsetValueNode, SyntaxNode countValueNode);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicProvideDeserializationMethodsForOptionalFieldsAnalyzer : ProvideDeserializationMethodsForOptionalFieldsAnalyzer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicProvideDeserializationMethodsForOptionalFieldsFixer : ProvideDeserializationMethodsForOptionalFieldsFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicSpecifyCultureInfoFixer : SpecifyCultureInfoFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicSpecifyIFormatProviderFixer : SpecifyIFormatProviderFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicSpecifyStringComparisonFixer : SpecifyStringComparisonFixer {
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicTestForEmptyStringsUsingStringLengthFixer : TestForEmptyStringsUsingStringLengthFixer {
    protected virtual SyntaxNode GetBinaryExpression(SyntaxNode node);
    protected virtual bool IsEqualsOperator(SyntaxNode node);
    protected virtual bool IsNotEqualsOperator(SyntaxNode node);
    protected virtual SyntaxNode GetLeftOperand(SyntaxNode binaryExpressionSyntax);
    protected virtual SyntaxNode GetRightOperand(SyntaxNode binaryExpressionSyntax);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicTestForNaNCorrectlyFixer : TestForNaNCorrectlyFixer {
    protected virtual SyntaxNode GetBinaryExpression(SyntaxNode node);
    protected virtual bool IsEqualsOperator(SyntaxNode node);
    protected virtual bool IsNotEqualsOperator(SyntaxNode node);
    protected virtual SyntaxNode GetLeftOperand(SyntaxNode binaryExpressionSyntax);
    protected virtual SyntaxNode GetRightOperand(SyntaxNode binaryExpressionSyntax);
}
[DiagnosticAnalyzerAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicUseOrdinalStringComparisonAnalyzer : UseOrdinalStringComparisonAnalyzer {
    protected virtual Location GetMethodNameLocation(SyntaxNode invocationNode);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicUseOrdinalStringComparisonFixer : UseOrdinalStringComparisonFixerBase {
    protected virtual bool IsInArgumentContext(SyntaxNode node);
    protected virtual Task`1<Document> FixArgument(Document document, SyntaxGenerator generator, SyntaxNode root, SyntaxNode argument);
    protected virtual bool IsInIdentifierNameContext(SyntaxNode node);
    [AsyncStateMachineAttribute("Microsoft.NetCore.VisualBasic.Analyzers.Runtime.BasicUseOrdinalStringComparisonFixer/VB$StateMachine_4_FixIdentifierName")]
protected virtual Task`1<Document> FixIdentifierName(Document document, SyntaxGenerator generator, SyntaxNode root, SyntaxNode identifier, CancellationToken cancellationToken);
}
[ExportCodeFixProviderAttribute("Visual Basic", "Mono.Cecil.CustomAttributeArgument[]")]
[SharedAttribute]
public class Microsoft.NetCore.VisualBasic.Analyzers.Tasks.BasicDoNotCreateTasksWithoutPassingATaskSchedulerFixer : DoNotCreateTasksWithoutPassingATaskSchedulerFixer {
}
[Embedded]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.Conversions : object {
    internal static CultureInfo GetCultureInfo();
}
[Embedded]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.EmbeddedOperators : object {
    public static int CompareString(string Left, string Right, bool TextCompare);
}
[Embedded]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.ProjectData : object {
    public static void SetProjectError(Exception ex);
    public static void ClearProjectError();
}
[Embedded]
[AttributeUsageAttribute("7")]
[EditorBrowsableAttribute("1")]
[CompilerGeneratedAttribute]
internal class Microsoft.VisualBasic.Embedded : Attribute {
}
