internal static class FxResources.Microsoft.Interop.JavaScript.JSImportGenerator.SR : object {
}
internal static class Microsoft.CodeAnalysis.DotnetRuntime.Extensions.DiagnosticDescriptorHelper : object {
    public static DiagnosticDescriptor Create(string id, LocalizableString title, LocalizableString messageFormat, string category, DiagnosticSeverity defaultSeverity, bool isEnabledByDefault, LocalizableString description, String[] customTags);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Microsoft.Interop.Comparers : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static IEqualityComparer`1<ValueTuple`2<MemberDeclarationSyntax, ImmutableArray`1<DiagnosticInfo>>> GeneratedSyntax;
    public static IEqualityComparer`1<ValueTuple`4<MemberDeclarationSyntax, StatementSyntax, AttributeListSyntax, ImmutableArray`1<DiagnosticInfo>>> GeneratedSyntax4;
    private static Comparers();
}
internal class Microsoft.Interop.CustomValueTupleElementComparer`2 : object {
    private IEqualityComparer`1<T> _item1Comparer;
    private IEqualityComparer`1<U> _item2Comparer;
    public CustomValueTupleElementComparer`2(IEqualityComparer`1<T> item1Comparer, IEqualityComparer`1<U> item2Comparer);
    public sealed virtual bool Equals(ValueTuple`2<T, U> x, ValueTuple`2<T, U> y);
    public sealed virtual int GetHashCode(ValueTuple`2<T, U> obj);
}
internal class Microsoft.Interop.CustomValueTupleElementComparer`4 : object {
    private IEqualityComparer`1<T> _item1Comparer;
    private IEqualityComparer`1<U> _item2Comparer;
    private IEqualityComparer`1<V> _item3Comparer;
    private IEqualityComparer`1<W> _item4Comparer;
    public CustomValueTupleElementComparer`4(IEqualityComparer`1<T> item1Comparer, IEqualityComparer`1<U> item2Comparer, IEqualityComparer`1<V> item3Comparer, IEqualityComparer`1<W> item4Comparer);
    public sealed virtual bool Equals(ValueTuple`4<T, U, V, W> x, ValueTuple`4<T, U, V, W> y);
    public sealed virtual int GetHashCode(ValueTuple`4<T, U, V, W> obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Interop.GeneratorDiagnostics : object {
    private static string Category;
    public static DiagnosticDescriptor ConfigurationNotSupported;
    public static DiagnosticDescriptor ConfigurationValueNotSupported;
    public static DiagnosticDescriptor MarshallingAttributeConfigurationNotSupported;
    public static DiagnosticDescriptor ReturnTypeNotSupportedWithDetails;
    public static DiagnosticDescriptor ParameterTypeNotSupported;
    public static DiagnosticDescriptor ReturnTypeNotSupported;
    public static DiagnosticDescriptor ParameterTypeNotSupportedWithDetails;
    public static DiagnosticDescriptor ParameterConfigurationNotSupported;
    public static DiagnosticDescriptor ReturnConfigurationNotSupported;
    public static DiagnosticDescriptor InvalidImportAttributedMethodSignature;
    public static DiagnosticDescriptor InvalidExportAttributedMethodSignature;
    public static DiagnosticDescriptor InvalidImportAttributedMethodContainingTypeMissingModifiers;
    public static DiagnosticDescriptor InvalidExportAttributedMethodContainingTypeMissingModifiers;
    public static DiagnosticDescriptor JSImportRequiresAllowUnsafeBlocks;
    public static DiagnosticDescriptor JSExportRequiresAllowUnsafeBlocks;
    private static GeneratorDiagnostics();
    private static LocalizableResourceString GetResourceString(string resourceName);
}
internal class Microsoft.Interop.ImmutableArraySequenceEqualComparer`1 : object {
    private IEqualityComparer`1<T> _elementComparer;
    public ImmutableArraySequenceEqualComparer`1(IEqualityComparer`1<T> elementComparer);
    public sealed virtual bool Equals(ImmutableArray`1<T> x, ImmutableArray`1<T> y);
    public sealed virtual int GetHashCode(ImmutableArray`1<T> obj);
}
internal class Microsoft.Interop.JavaScript.ArrayJSGenerator : PrimitiveJSGenerator {
    private MarshalerType _elementMarshalerType;
    public ArrayJSGenerator(MarshalerType elementMarshalerType);
    [IteratorStateMachineAttribute("Microsoft.Interop.JavaScript.ArrayJSGenerator/<GenerateBind>d__2")]
public virtual IEnumerable`1<ExpressionSyntax> GenerateBind(TypePositionInfo info, StubCodeContext context);
}
internal class Microsoft.Interop.JavaScript.ArraySegmentJSGenerator : PrimitiveJSGenerator {
    private MarshalerType _elementMarshalerType;
    public ArraySegmentJSGenerator(MarshalerType elementMarshalerType);
    [IteratorStateMachineAttribute("Microsoft.Interop.JavaScript.ArraySegmentJSGenerator/<GenerateBind>d__2")]
public virtual IEnumerable`1<ExpressionSyntax> GenerateBind(TypePositionInfo info, StubCodeContext context);
}
internal abstract class Microsoft.Interop.JavaScript.BaseJSGenerator : object {
    protected IMarshallingGenerator _inner;
    public MarshalerType Type;
    protected BaseJSGenerator(MarshalerType marshalerType, IMarshallingGenerator inner);
    public sealed virtual ManagedTypeInfo AsNativeType(TypePositionInfo info);
    public sealed virtual bool IsSupported(TargetFramework target, Version version);
    public virtual bool UsesNativeIdentifier(TypePositionInfo info, StubCodeContext context);
    public sealed virtual SignatureBehavior GetNativeSignatureBehavior(TypePositionInfo info);
    public sealed virtual ValueBoundaryBehavior GetValueBoundaryBehavior(TypePositionInfo info, StubCodeContext context);
    public sealed virtual ByValueMarshalKindSupport SupportsByValueMarshalKind(ByValueContentsMarshalKind marshalKind, TypePositionInfo info, StubCodeContext context, GeneratorDiagnostic& diagnostic);
    [IteratorStateMachineAttribute("Microsoft.Interop.JavaScript.BaseJSGenerator/<GenerateBind>d__9")]
public virtual IEnumerable`1<ExpressionSyntax> GenerateBind(TypePositionInfo info, StubCodeContext context);
    [IteratorStateMachineAttribute("Microsoft.Interop.JavaScript.BaseJSGenerator/<Generate>d__10")]
public virtual IEnumerable`1<StatementSyntax> Generate(TypePositionInfo info, StubCodeContext context);
    protected static IdentifierNameSyntax MarshalerTypeName(MarshalerType marshalerType);
    protected static IdentifierNameSyntax GetToManagedMethod(MarshalerType marshalerType);
    protected static IdentifierNameSyntax GetToJSMethod(MarshalerType marshalerType);
}
internal static class Microsoft.Interop.JavaScript.Constants : object {
    public static string JSMarshalAsAttribute;
    public static string MarshalUsingAttribute;
    public static string JSImportAttribute;
    public static string JSExportAttribute;
    public static string JavaScriptMarshal;
    public static string DebuggerNonUserCodeAttribute;
    public static string JSFunctionSignatureGlobal;
    public static string JSMarshalerArgumentGlobal;
    public static string ModuleInitializerAttributeGlobal;
    public static string CompilerGeneratedAttributeGlobal;
    public static string DynamicDependencyAttributeGlobal;
    public static string ThreadStaticGlobal;
    public static string TaskGlobal;
    public static string SpanGlobal;
    public static string ArraySegmentGlobal;
    public static string FuncGlobal;
    public static string ActionGlobal;
    public static string ExceptionGlobal;
    public static string OSArchitectureGlobal;
    public static string ArchitectureWasmGlobal;
    public static string ArgumentsBuffer;
    public static string ArgumentException;
    public static string ArgumentReturn;
    public static string ToJSMethod;
    public static string ToJSBigMethod;
    public static string ToManagedMethod;
    public static string ToManagedBigMethod;
    public static string BindJSFunctionMethod;
    public static string BindCSFunctionMethod;
    public static string JSMarshalerTypeGlobal;
    public static string JSMarshalerTypeGlobalDot;
}
internal class Microsoft.Interop.JavaScript.DescriptorProvider : object {
    public DiagnosticDescriptor InvalidMarshallingAttributeInfo { get; }
    public DiagnosticDescriptor ConfigurationNotSupported { get; }
    public DiagnosticDescriptor ConfigurationValueNotSupported { get; }
    public sealed virtual DiagnosticDescriptor get_InvalidMarshallingAttributeInfo();
    public sealed virtual DiagnosticDescriptor get_ConfigurationNotSupported();
    public sealed virtual DiagnosticDescriptor get_ConfigurationValueNotSupported();
    public sealed virtual DiagnosticDescriptor GetDescriptor(GeneratorDiagnostic diagnostic);
}
internal class Microsoft.Interop.JavaScript.EmptyJSGenerator : object {
    public sealed virtual ManagedTypeInfo AsNativeType(TypePositionInfo info);
    public sealed virtual IEnumerable`1<StatementSyntax> Generate(TypePositionInfo info, StubCodeContext context);
    public sealed virtual IEnumerable`1<ExpressionSyntax> GenerateBind(TypePositionInfo info, StubCodeContext context);
    public sealed virtual SignatureBehavior GetNativeSignatureBehavior(TypePositionInfo info);
    public sealed virtual ValueBoundaryBehavior GetValueBoundaryBehavior(TypePositionInfo info, StubCodeContext context);
    public sealed virtual bool IsSupported(TargetFramework target, Version version);
    public sealed virtual ByValueMarshalKindSupport SupportsByValueMarshalKind(ByValueContentsMarshalKind marshalKind, TypePositionInfo info, StubCodeContext context, GeneratorDiagnostic& diagnostic);
    public sealed virtual bool UsesNativeIdentifier(TypePositionInfo info, StubCodeContext context);
}
internal class Microsoft.Interop.JavaScript.FallbackJSMarshallingInfoProvider : object {
    public sealed virtual bool CanProvideMarshallingInfoForType(ITypeSymbol type);
    public sealed virtual MarshallingInfo GetMarshallingInfo(ITypeSymbol type, int indirectionDepth, UseSiteAttributeProvider useSiteAttributes, GetMarshallingInfoCallback marshallingInfoCallback);
}
internal class Microsoft.Interop.JavaScript.FuncJSGenerator : BaseJSGenerator {
    private bool _isAction;
    private MarshalerType[] _argumentMarshalerTypes;
    public FuncJSGenerator(bool isAction, MarshalerType[] argumentMarshalerTypes);
    [IteratorStateMachineAttribute("Microsoft.Interop.JavaScript.FuncJSGenerator/<GenerateBind>d__3")]
public virtual IEnumerable`1<ExpressionSyntax> GenerateBind(TypePositionInfo info, StubCodeContext context);
    [IteratorStateMachineAttribute("Microsoft.Interop.JavaScript.FuncJSGenerator/<Generate>d__4")]
public virtual IEnumerable`1<StatementSyntax> Generate(TypePositionInfo info, StubCodeContext context);
    private ExpressionStatementSyntax ToManagedMethod(string target, ArgumentSyntax source, JSFunctionTypeInfo info);
    private ExpressionStatementSyntax ToJSMethod(string target, ArgumentSyntax source, JSFunctionTypeInfo info);
    private static ArgumentSyntax ArgToJS(int i, TypeSyntax sourceType, MarshalerType marshalerType);
    private static ArgumentSyntax ArgToManaged(int i, TypeSyntax sourceType, MarshalerType marshalerType);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<StatementSyntax> <>n__0(TypePositionInfo info, StubCodeContext context);
}
internal interface Microsoft.Interop.JavaScript.IJSMarshallingGenerator {
    public abstract virtual IEnumerable`1<ExpressionSyntax> GenerateBind(TypePositionInfo info, StubCodeContext context);
}
internal class Microsoft.Interop.JavaScript.JSArraySegmentTypeInfo : JSTypeInfo {
    [CompilerGeneratedAttribute]
private JSSimpleTypeInfo <ElementTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public JSSimpleTypeInfo ElementTypeInfo { get; public set; }
    public JSArraySegmentTypeInfo(JSSimpleTypeInfo ElementTypeInfo);
    [CompilerGeneratedAttribute]
private JSArraySegmentTypeInfo(JSArraySegmentTypeInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public JSSimpleTypeInfo get_ElementTypeInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ElementTypeInfo(JSSimpleTypeInfo value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSArraySegmentTypeInfo left, JSArraySegmentTypeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSArraySegmentTypeInfo left, JSArraySegmentTypeInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSTypeInfo other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSArraySegmentTypeInfo other);
    [CompilerGeneratedAttribute]
public virtual JSTypeInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(JSSimpleTypeInfo& ElementTypeInfo);
}
internal class Microsoft.Interop.JavaScript.JSArrayTypeInfo : JSTypeInfo {
    [CompilerGeneratedAttribute]
private JSSimpleTypeInfo <ElementTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public JSSimpleTypeInfo ElementTypeInfo { get; public set; }
    public JSArrayTypeInfo(JSSimpleTypeInfo ElementTypeInfo);
    [CompilerGeneratedAttribute]
private JSArrayTypeInfo(JSArrayTypeInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public JSSimpleTypeInfo get_ElementTypeInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ElementTypeInfo(JSSimpleTypeInfo value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSArrayTypeInfo left, JSArrayTypeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSArrayTypeInfo left, JSArrayTypeInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSTypeInfo other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSArrayTypeInfo other);
    [CompilerGeneratedAttribute]
public virtual JSTypeInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(JSSimpleTypeInfo& ElementTypeInfo);
}
internal abstract class Microsoft.Interop.JavaScript.JSCodeGenerator : object {
    public static string ReturnIdentifier;
    public static string ReturnNativeIdentifier;
    public static string InvokeSucceededIdentifier;
}
internal class Microsoft.Interop.JavaScript.JSExportCodeContext : JSStubCodeContext {
    [CompilerGeneratedAttribute]
private JSExportData <AttributeData>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public JSExportData AttributeData { get; public set; }
    public JSExportCodeContext(JSExportData attributeData, StubCodeContext inner);
    [CompilerGeneratedAttribute]
private JSExportCodeContext(JSExportCodeContext original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public JSExportData get_AttributeData();
    [CompilerGeneratedAttribute]
public void set_AttributeData(JSExportData value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSExportCodeContext left, JSExportCodeContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSExportCodeContext left, JSExportCodeContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSStubCodeContext other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSExportCodeContext other);
    [CompilerGeneratedAttribute]
public virtual StubCodeContext <Clone>$();
}
internal class Microsoft.Interop.JavaScript.JSExportCodeGenerator : JSCodeGenerator {
    private BoundGenerators _marshallers;
    private JSExportCodeContext _context;
    private JSSignatureContext _signatureContext;
    public JSExportCodeGenerator(TargetFramework targetFramework, Version targetFrameworkVersion, ImmutableArray`1<TypePositionInfo> argTypes, JSExportData attributeData, JSSignatureContext signatureContext, GeneratorDiagnosticsBag diagnosticsBag, IMarshallingGeneratorFactory generatorFactory);
    public BlockSyntax GenerateJSExportBody();
    public static StatementSyntax[] GenerateJSExportArchitectureCheck();
    public StatementSyntax GenerateJSExportRegistration();
    private ArgumentSyntax CreateSignaturesSyntax();
    private void SetupSyntax(List`1<StatementSyntax> statementsToUpdate);
    private List`1<StatementSyntax> InvokeSyntax();
    public ValueTuple`3<ParameterListSyntax, TypeSyntax, AttributeListSyntax> GenerateTargetMethodSignatureData();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExpressionSyntax> <CreateSignaturesSyntax>b__7_0(BoundGenerator p);
}
internal class Microsoft.Interop.JavaScript.JSExportData : object {
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private JSExportData(JSExportData original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSExportData left, JSExportData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSExportData left, JSExportData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSExportData other);
    [CompilerGeneratedAttribute]
public JSExportData <Clone>$();
}
[GeneratorAttribute]
public class Microsoft.Interop.JavaScript.JSExportGenerator : object {
    public sealed virtual void Initialize(IncrementalGeneratorInitializationContext context);
    private static MemberDeclarationSyntax PrintGeneratedSource(ContainingSyntaxContext containingSyntaxContext, BlockSyntax wrapperStatements, string wrapperName);
    private static JSExportData ProcessJSExportAttribute(AttributeData attrData);
    private static IncrementalStubGenerationContext CalculateStubInformation(MethodDeclarationSyntax originalSyntax, IMethodSymbol symbol, StubEnvironment environment, JSGeneratorOptions options, CancellationToken ct);
    private static MarshallingGeneratorFactoryKey`1<ValueTuple`3<TargetFramework, Version, JSGeneratorOptions>> CreateGeneratorFactory(StubEnvironment env, JSGeneratorOptions options);
    private static NamespaceDeclarationSyntax GenerateRegSource(ImmutableArray`1<ValueTuple`2<StatementSyntax, AttributeListSyntax>> methods);
    private static ValueTuple`4<MemberDeclarationSyntax, StatementSyntax, AttributeListSyntax, ImmutableArray`1<DiagnosticInfo>> GenerateSource(IncrementalStubGenerationContext incrementalContext);
    private static Diagnostic GetDiagnosticIfInvalidMethodForGeneration(MethodDeclarationSyntax methodSyntax, IMethodSymbol method);
}
internal class Microsoft.Interop.JavaScript.JSFunctionTypeInfo : JSTypeInfo {
    [CompilerGeneratedAttribute]
private bool <IsAction>k__BackingField;
    [CompilerGeneratedAttribute]
private JSSimpleTypeInfo[] <ArgsTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool IsAction { get; public set; }
    public JSSimpleTypeInfo[] ArgsTypeInfo { get; public set; }
    public JSFunctionTypeInfo(bool IsAction, JSSimpleTypeInfo[] ArgsTypeInfo);
    [CompilerGeneratedAttribute]
private JSFunctionTypeInfo(JSFunctionTypeInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_IsAction();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsAction(bool value);
    [CompilerGeneratedAttribute]
public JSSimpleTypeInfo[] get_ArgsTypeInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ArgsTypeInfo(JSSimpleTypeInfo[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSFunctionTypeInfo left, JSFunctionTypeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSFunctionTypeInfo left, JSFunctionTypeInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSTypeInfo other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSFunctionTypeInfo other);
    [CompilerGeneratedAttribute]
public virtual JSTypeInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& IsAction, JSSimpleTypeInfo[]& ArgsTypeInfo);
}
internal class Microsoft.Interop.JavaScript.JSGeneratorFactory : object {
    public sealed virtual ResolvedGenerator Create(TypePositionInfo info, StubCodeContext context);
    internal static ResolvedGenerator Create(TypePositionInfo info, bool isToJs, KnownManagedType marshaledType, KnownManagedType[] argumentTypes, JSTypeFlags jsType, JSTypeFlags[] jsTypeArguments, Func`2<string, ResolvedGenerator> failWithReason);
}
internal class Microsoft.Interop.JavaScript.JSGeneratorOptions : object {
    [CompilerGeneratedAttribute]
private bool <EnableJSImport>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableJSExport>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public bool EnableJSImport { get; public set; }
    public bool EnableJSExport { get; public set; }
    public JSGeneratorOptions(bool EnableJSImport, bool EnableJSExport);
    public JSGeneratorOptions(AnalyzerConfigOptions options);
    [CompilerGeneratedAttribute]
private JSGeneratorOptions(JSGeneratorOptions original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public bool get_EnableJSImport();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnableJSImport(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableJSExport();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EnableJSExport(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSGeneratorOptions left, JSGeneratorOptions right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSGeneratorOptions left, JSGeneratorOptions right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSGeneratorOptions other);
    [CompilerGeneratedAttribute]
public JSGeneratorOptions <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(Boolean& EnableJSImport, Boolean& EnableJSExport);
}
internal class Microsoft.Interop.JavaScript.JSImportCodeContext : JSStubCodeContext {
    [CompilerGeneratedAttribute]
private JSImportData <AttributeData>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public JSImportData AttributeData { get; public set; }
    public JSImportCodeContext(JSImportData attributeData, StubCodeContext inner);
    [CompilerGeneratedAttribute]
private JSImportCodeContext(JSImportCodeContext original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public JSImportData get_AttributeData();
    [CompilerGeneratedAttribute]
public void set_AttributeData(JSImportData value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSImportCodeContext left, JSImportCodeContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSImportCodeContext left, JSImportCodeContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSStubCodeContext other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSImportCodeContext other);
    [CompilerGeneratedAttribute]
public virtual StubCodeContext <Clone>$();
}
internal class Microsoft.Interop.JavaScript.JSImportCodeGenerator : JSCodeGenerator {
    private BoundGenerators _marshallers;
    private JSImportCodeContext _context;
    private JSSignatureContext _signatureContext;
    public JSImportCodeGenerator(TargetFramework targetFramework, Version targetFrameworkVersion, ImmutableArray`1<TypePositionInfo> argTypes, JSImportData attributeData, JSSignatureContext signatureContext, GeneratorDiagnosticsBag diagnosticsBag, IMarshallingGeneratorFactory generatorFactory);
    public BlockSyntax GenerateJSImportBody();
    private void BindSyntax(List`1<StatementSyntax> statementsToUpdate);
    private ArgumentSyntax CreateSignaturesSyntax();
    private void SetupSyntax(List`1<StatementSyntax> statementsToUpdate);
    private ExpressionStatementSyntax InvokeSyntax();
    public ValueTuple`3<ParameterListSyntax, TypeSyntax, AttributeListSyntax> GenerateTargetMethodSignatureData();
    [CompilerGeneratedAttribute]
private IEnumerable`1<ExpressionSyntax> <CreateSignaturesSyntax>b__6_0(BoundGenerator p);
}
internal class Microsoft.Interop.JavaScript.JSImportData : object {
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModuleName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public string FunctionName { get; public set; }
    public string ModuleName { get; public set; }
    public JSImportData(string FunctionName, string ModuleName);
    [CompilerGeneratedAttribute]
private JSImportData(JSImportData original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public string get_FunctionName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_FunctionName(string value);
    [CompilerGeneratedAttribute]
public string get_ModuleName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModuleName(string value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSImportData left, JSImportData right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSImportData left, JSImportData right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSImportData other);
    [CompilerGeneratedAttribute]
public JSImportData <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(String& FunctionName, String& ModuleName);
}
[GeneratorAttribute]
public class Microsoft.Interop.JavaScript.JSImportGenerator : object {
    public sealed virtual void Initialize(IncrementalGeneratorInitializationContext context);
    private static SyntaxTokenList StripTriviaFromModifiers(SyntaxTokenList tokenList);
    private static MemberDeclarationSyntax PrintGeneratedSource(ContainingSyntax userDeclaredMethod, JSSignatureContext stub, ContainingSyntaxContext containingSyntaxContext, BlockSyntax stubCode);
    private static JSImportData ProcessJSImportAttribute(AttributeData attrData);
    private static IncrementalStubGenerationContext CalculateStubInformation(MethodDeclarationSyntax originalSyntax, IMethodSymbol symbol, StubEnvironment environment, JSGeneratorOptions options, CancellationToken ct);
    private static MarshallingGeneratorFactoryKey`1<ValueTuple`3<TargetFramework, Version, JSGeneratorOptions>> CreateGeneratorFactory(StubEnvironment env, JSGeneratorOptions options);
    private static ValueTuple`2<MemberDeclarationSyntax, ImmutableArray`1<DiagnosticInfo>> GenerateSource(IncrementalStubGenerationContext incrementalContext);
    private static Diagnostic GetDiagnosticIfInvalidMethodForGeneration(MethodDeclarationSyntax methodSyntax, IMethodSymbol method);
}
internal class Microsoft.Interop.JavaScript.JSInvalidTypeInfo : JSSimpleTypeInfo {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private JSInvalidTypeInfo(JSInvalidTypeInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSInvalidTypeInfo left, JSInvalidTypeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSInvalidTypeInfo left, JSInvalidTypeInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSSimpleTypeInfo other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSInvalidTypeInfo other);
    [CompilerGeneratedAttribute]
public virtual JSTypeInfo <Clone>$();
}
internal class Microsoft.Interop.JavaScript.JSMarshalAsAttributeParser : object {
    private INamedTypeSymbol _jsMarshalAsAttribute;
    public JSMarshalAsAttributeParser(Compilation compilation);
    public sealed virtual bool CanParseAttributeType(INamedTypeSymbol attributeType);
    public sealed virtual MarshallingInfo ParseAttribute(AttributeData attributeData, ITypeSymbol type, int indirectionDepth, UseSiteAttributeProvider useSiteAttributes, GetMarshallingInfoCallback marshallingInfoCallback);
    private sealed virtual override UseSiteAttributeData Microsoft.Interop.IUseSiteAttributeParser.ParseAttribute(AttributeData attributeData, IElementInfoProvider elementInfoProvider, GetMarshallingInfoCallback marshallingInfoCallback);
}
internal class Microsoft.Interop.JavaScript.JSMarshallingInfo : MarshallingInfo {
    [CompilerGeneratedAttribute]
private MarshallingInfo <Inner>k__BackingField;
    [CompilerGeneratedAttribute]
private JSTypeInfo <TypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private JSTypeFlags <JSType>k__BackingField;
    [CompilerGeneratedAttribute]
private JSTypeFlags[] <JSTypeArguments>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public MarshallingInfo Inner { get; public set; }
    public JSTypeInfo TypeInfo { get; public set; }
    public JSTypeFlags JSType { get; public set; }
    public JSTypeFlags[] JSTypeArguments { get; public set; }
    public JSMarshallingInfo(MarshallingInfo Inner, JSTypeInfo TypeInfo);
    [CompilerGeneratedAttribute]
protected JSMarshallingInfo(JSMarshallingInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public MarshallingInfo get_Inner();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Inner(MarshallingInfo value);
    [CompilerGeneratedAttribute]
public JSTypeInfo get_TypeInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeInfo(JSTypeInfo value);
    [CompilerGeneratedAttribute]
public JSTypeFlags get_JSType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_JSType(JSTypeFlags value);
    [CompilerGeneratedAttribute]
public JSTypeFlags[] get_JSTypeArguments();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_JSTypeArguments(JSTypeFlags[] value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSMarshallingInfo left, JSMarshallingInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSMarshallingInfo left, JSMarshallingInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(MarshallingInfo other);
    [CompilerGeneratedAttribute]
public virtual bool Equals(JSMarshallingInfo other);
    [CompilerGeneratedAttribute]
public virtual MarshallingInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(MarshallingInfo& Inner, JSTypeInfo& TypeInfo);
}
internal class Microsoft.Interop.JavaScript.JSMissingMarshallingInfo : JSMarshallingInfo {
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public JSMissingMarshallingInfo(JSTypeInfo typeInfo);
    [CompilerGeneratedAttribute]
private JSMissingMarshallingInfo(JSMissingMarshallingInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSMissingMarshallingInfo left, JSMissingMarshallingInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSMissingMarshallingInfo left, JSMissingMarshallingInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSMarshallingInfo other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSMissingMarshallingInfo other);
    [CompilerGeneratedAttribute]
public virtual MarshallingInfo <Clone>$();
}
internal class Microsoft.Interop.JavaScript.JSNullableTypeInfo : JSTypeInfo {
    [CompilerGeneratedAttribute]
private JSSimpleTypeInfo <ResultTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public JSSimpleTypeInfo ResultTypeInfo { get; public set; }
    public JSNullableTypeInfo(JSSimpleTypeInfo ResultTypeInfo);
    [CompilerGeneratedAttribute]
private JSNullableTypeInfo(JSNullableTypeInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public JSSimpleTypeInfo get_ResultTypeInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ResultTypeInfo(JSSimpleTypeInfo value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSNullableTypeInfo left, JSNullableTypeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSNullableTypeInfo left, JSNullableTypeInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSTypeInfo other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSNullableTypeInfo other);
    [CompilerGeneratedAttribute]
public virtual JSTypeInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(JSSimpleTypeInfo& ResultTypeInfo);
}
internal class Microsoft.Interop.JavaScript.JSSignatureContext : object {
    [CompilerGeneratedAttribute]
private static SymbolDisplayFormat <TypeAndContainingTypesStyle>k__BackingField;
    [CompilerGeneratedAttribute]
private static SymbolDisplayFormat <TypeContainingTypesAndNamespacesStyle>k__BackingField;
    internal static string GeneratorName;
    internal static string GeneratorVersion;
    [CompilerGeneratedAttribute]
private SignatureContext <SignatureContext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StubTypeFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TypesHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QualifiedMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BindingName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    private static SymbolDisplayFormat TypeAndContainingTypesStyle { get; }
    private static SymbolDisplayFormat TypeContainingTypesAndNamespacesStyle { get; }
    public SignatureContext SignatureContext { get; private set; }
    public string StubTypeFullName { get; public set; }
    public int TypesHash { get; public set; }
    public string MethodName { get; public set; }
    public string QualifiedMethodName { get; public set; }
    public string BindingName { get; public set; }
    public string AssemblyName { get; public set; }
    [CompilerGeneratedAttribute]
private JSSignatureContext(JSSignatureContext original);
    private static JSSignatureContext();
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
private static SymbolDisplayFormat get_TypeAndContainingTypesStyle();
    [CompilerGeneratedAttribute]
private static SymbolDisplayFormat get_TypeContainingTypesAndNamespacesStyle();
    [CompilerGeneratedAttribute]
public SignatureContext get_SignatureContext();
    [CompilerGeneratedAttribute]
private Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SignatureContext(SignatureContext value);
    public static JSSignatureContext Create(IMethodSymbol method, StubEnvironment env, GeneratorDiagnosticsBag diagnostics, CancellationToken token);
    private static string GetFullyQualifiedMethodName(StubEnvironment env, IMethodSymbol method);
    [CompilerGeneratedAttribute]
public string get_StubTypeFullName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StubTypeFullName(string value);
    [CompilerGeneratedAttribute]
public int get_TypesHash();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypesHash(int value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodName(string value);
    [CompilerGeneratedAttribute]
public string get_QualifiedMethodName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_QualifiedMethodName(string value);
    [CompilerGeneratedAttribute]
public string get_BindingName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_BindingName(string value);
    [CompilerGeneratedAttribute]
public string get_AssemblyName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_AssemblyName(string value);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSSignatureContext left, JSSignatureContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSSignatureContext left, JSSignatureContext right);
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSSignatureContext other);
    [CompilerGeneratedAttribute]
public JSSignatureContext <Clone>$();
}
internal class Microsoft.Interop.JavaScript.JSSimpleTypeInfo : JSTypeInfo {
    [CompilerGeneratedAttribute]
private TypeSyntax <Syntax>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public TypeSyntax Syntax { get; public set; }
    public JSSimpleTypeInfo(KnownManagedType KnownType);
    public JSSimpleTypeInfo(KnownManagedType knownType, TypeSyntax syntax);
    [CompilerGeneratedAttribute]
protected JSSimpleTypeInfo(JSSimpleTypeInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public TypeSyntax get_Syntax();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Syntax(TypeSyntax value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSSimpleTypeInfo left, JSSimpleTypeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSSimpleTypeInfo left, JSSimpleTypeInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSTypeInfo other);
    [CompilerGeneratedAttribute]
public virtual bool Equals(JSSimpleTypeInfo other);
    [CompilerGeneratedAttribute]
public virtual JSTypeInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(KnownManagedType& KnownType);
}
internal class Microsoft.Interop.JavaScript.JSSpanTypeInfo : JSTypeInfo {
    [CompilerGeneratedAttribute]
private JSSimpleTypeInfo <ElementTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public JSSimpleTypeInfo ElementTypeInfo { get; public set; }
    public JSSpanTypeInfo(JSSimpleTypeInfo ElementTypeInfo);
    [CompilerGeneratedAttribute]
private JSSpanTypeInfo(JSSpanTypeInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public JSSimpleTypeInfo get_ElementTypeInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ElementTypeInfo(JSSimpleTypeInfo value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSSpanTypeInfo left, JSSpanTypeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSSpanTypeInfo left, JSSpanTypeInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSTypeInfo other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSSpanTypeInfo other);
    [CompilerGeneratedAttribute]
public virtual JSTypeInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(JSSimpleTypeInfo& ElementTypeInfo);
}
internal abstract class Microsoft.Interop.JavaScript.JSStubCodeContext : StubCodeContext {
    public StubCodeContext _inner;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public bool SingleFrameSpansNativeContext { get; }
    public bool AdditionalTemporaryStateLivesAcrossStages { get; }
    [CompilerGeneratedAttribute]
protected JSStubCodeContext(JSStubCodeContext original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    public virtual bool get_SingleFrameSpansNativeContext();
    public virtual bool get_AdditionalTemporaryStateLivesAcrossStages();
    public virtual ValueTuple`2<string, string> GetIdentifiers(TypePositionInfo info);
    public virtual ValueTuple`2<TargetFramework, Version> GetTargetFramework();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSStubCodeContext left, JSStubCodeContext right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSStubCodeContext left, JSStubCodeContext right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(StubCodeContext other);
    [CompilerGeneratedAttribute]
public virtual bool Equals(JSStubCodeContext other);
    [CompilerGeneratedAttribute]
public abstract virtual StubCodeContext <Clone>$();
}
internal class Microsoft.Interop.JavaScript.JSTaskTypeInfo : JSTypeInfo {
    [CompilerGeneratedAttribute]
private JSSimpleTypeInfo <ResultTypeInfo>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public JSSimpleTypeInfo ResultTypeInfo { get; public set; }
    public JSTaskTypeInfo(JSSimpleTypeInfo ResultTypeInfo);
    [CompilerGeneratedAttribute]
private JSTaskTypeInfo(JSTaskTypeInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public JSSimpleTypeInfo get_ResultTypeInfo();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ResultTypeInfo(JSSimpleTypeInfo value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSTaskTypeInfo left, JSTaskTypeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSTaskTypeInfo left, JSTaskTypeInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSTypeInfo other);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(JSTaskTypeInfo other);
    [CompilerGeneratedAttribute]
public virtual JSTypeInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(JSSimpleTypeInfo& ResultTypeInfo);
}
internal abstract class Microsoft.Interop.JavaScript.JSTypeInfo : object {
    [CompilerGeneratedAttribute]
private KnownManagedType <KnownType>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public KnownManagedType KnownType { get; public set; }
    protected JSTypeInfo(KnownManagedType KnownType);
    [CompilerGeneratedAttribute]
protected JSTypeInfo(JSTypeInfo original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public KnownManagedType get_KnownType();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_KnownType(KnownManagedType value);
    public static JSTypeInfo CreateJSTypeInfoForTypeSymbol(ITypeSymbol type);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(JSTypeInfo left, JSTypeInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(JSTypeInfo left, JSTypeInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public virtual bool Equals(JSTypeInfo other);
    [CompilerGeneratedAttribute]
public abstract virtual JSTypeInfo <Clone>$();
    [CompilerGeneratedAttribute]
public void Deconstruct(KnownManagedType& KnownType);
}
internal enum Microsoft.Interop.JavaScript.KnownManagedType : Enum {
    public int value__;
    public static KnownManagedType None;
    public static KnownManagedType Void;
    public static KnownManagedType Boolean;
    public static KnownManagedType Byte;
    public static KnownManagedType Char;
    public static KnownManagedType Int16;
    public static KnownManagedType Int32;
    public static KnownManagedType Int64;
    public static KnownManagedType Double;
    public static KnownManagedType Single;
    public static KnownManagedType IntPtr;
    public static KnownManagedType JSObject;
    public static KnownManagedType Object;
    public static KnownManagedType String;
    public static KnownManagedType Exception;
    public static KnownManagedType DateTime;
    public static KnownManagedType DateTimeOffset;
    public static KnownManagedType Nullable;
    public static KnownManagedType Task;
    public static KnownManagedType Array;
    public static KnownManagedType ArraySegment;
    public static KnownManagedType Span;
    public static KnownManagedType Action;
    public static KnownManagedType Function;
    public static KnownManagedType Unknown;
}
internal class Microsoft.Interop.JavaScript.NullableJSGenerator : PrimitiveJSGenerator {
    public NullableJSGenerator(MarshalerType resultMarshalerType);
    [IteratorStateMachineAttribute("Microsoft.Interop.JavaScript.NullableJSGenerator/<GenerateBind>d__1")]
public virtual IEnumerable`1<ExpressionSyntax> GenerateBind(TypePositionInfo info, StubCodeContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Interop.JavaScript.OptionsHelper : object {
    public static string EnableJSImportOption;
    public static string EnableJSExportOption;
    [ExtensionAttribute]
private static bool GetBoolOption(AnalyzerConfigOptions options, string key);
    [ExtensionAttribute]
internal static bool EnableJSImport(AnalyzerConfigOptions options);
    [ExtensionAttribute]
internal static bool EnableJSExport(AnalyzerConfigOptions options);
}
internal class Microsoft.Interop.JavaScript.PrimitiveJSGenerator : BaseJSGenerator {
    public PrimitiveJSGenerator(MarshalerType marshalerType, IMarshallingGenerator inner);
    public PrimitiveJSGenerator(MarshalerType marshalerType);
    [IteratorStateMachineAttribute("Microsoft.Interop.JavaScript.PrimitiveJSGenerator/<Generate>d__2")]
public virtual IEnumerable`1<StatementSyntax> Generate(TypePositionInfo info, StubCodeContext context);
    protected virtual ArgumentSyntax ToManagedMethodRefOrOut(ArgumentSyntax argument);
    protected virtual ArgumentSyntax ToJSMethodRefOrOut(ArgumentSyntax argument);
    private ExpressionStatementSyntax ToManagedMethod(string target, ArgumentSyntax source);
    private ExpressionStatementSyntax ToJSMethod(string target, ArgumentSyntax source);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<StatementSyntax> <>n__0(TypePositionInfo info, StubCodeContext context);
}
internal class Microsoft.Interop.JavaScript.SpanJSGenerator : PrimitiveJSGenerator {
    private MarshalerType _elementMarshalerType;
    public SpanJSGenerator(MarshalerType elementMarshalerType);
    [IteratorStateMachineAttribute("Microsoft.Interop.JavaScript.SpanJSGenerator/<GenerateBind>d__2")]
public virtual IEnumerable`1<ExpressionSyntax> GenerateBind(TypePositionInfo info, StubCodeContext context);
}
internal class Microsoft.Interop.JavaScript.TaskJSGenerator : BaseJSGenerator {
    private MarshalerType _resultMarshalerType;
    public TaskJSGenerator(MarshalerType resultMarshalerType);
    [IteratorStateMachineAttribute("Microsoft.Interop.JavaScript.TaskJSGenerator/<GenerateBind>d__2")]
public virtual IEnumerable`1<ExpressionSyntax> GenerateBind(TypePositionInfo info, StubCodeContext context);
    [IteratorStateMachineAttribute("Microsoft.Interop.JavaScript.TaskJSGenerator/<Generate>d__3")]
public virtual IEnumerable`1<StatementSyntax> Generate(TypePositionInfo info, StubCodeContext context);
    private ExpressionStatementSyntax ToManagedMethodVoid(string target, ArgumentSyntax source);
    private ExpressionStatementSyntax ToJSMethodVoid(string target, ArgumentSyntax source);
    private ExpressionStatementSyntax ToManagedMethod(string target, ArgumentSyntax source, TypeSyntax sourceType);
    private ExpressionStatementSyntax ToJSMethod(string target, ArgumentSyntax source, TypeSyntax sourceType);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<StatementSyntax> <>n__0(TypePositionInfo info, StubCodeContext context);
}
internal class Microsoft.Interop.JavaScript.VoidGenerator : BaseJSGenerator {
    public VoidGenerator(MarshalerType marshalerType);
}
internal class Microsoft.Interop.UnreachableException : Exception {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
internal class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[FlagsAttribute]
internal enum System.Runtime.InteropServices.JavaScript.JSTypeFlags : Enum {
    public int value__;
    public static JSTypeFlags None;
    public static JSTypeFlags Void;
    public static JSTypeFlags Boolean;
    public static JSTypeFlags Number;
    public static JSTypeFlags BigInt;
    public static JSTypeFlags Date;
    public static JSTypeFlags String;
    public static JSTypeFlags Function;
    public static JSTypeFlags Array;
    public static JSTypeFlags Object;
    public static JSTypeFlags Promise;
    public static JSTypeFlags Error;
    public static JSTypeFlags MemoryView;
    public static JSTypeFlags Any;
    public static JSTypeFlags Discard;
    public static JSTypeFlags Missing;
}
internal enum System.Runtime.InteropServices.JavaScript.MarshalerType : Enum {
    public int value__;
    public static MarshalerType None;
    public static MarshalerType Void;
    public static MarshalerType Discard;
    public static MarshalerType Boolean;
    public static MarshalerType Byte;
    public static MarshalerType Char;
    public static MarshalerType Int16;
    public static MarshalerType Int32;
    public static MarshalerType Int52;
    public static MarshalerType BigInt64;
    public static MarshalerType Double;
    public static MarshalerType Single;
    public static MarshalerType IntPtr;
    public static MarshalerType JSObject;
    public static MarshalerType Object;
    public static MarshalerType String;
    public static MarshalerType Exception;
    public static MarshalerType DateTime;
    public static MarshalerType DateTimeOffset;
    public static MarshalerType Nullable;
    public static MarshalerType Task;
    public static MarshalerType Array;
    public static MarshalerType ArraySegment;
    public static MarshalerType Span;
    public static MarshalerType Action;
    public static MarshalerType Function;
}
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.ObsoletedOSPlatformAttribute : OSPlatformAttribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public ObsoletedOSPlatformAttribute(string platformName);
    public ObsoletedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
internal abstract class System.Runtime.Versioning.OSPlatformAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PlatformName>k__BackingField;
    public string PlatformName { get; }
    private protected OSPlatformAttribute(string platformName);
    [CompilerGeneratedAttribute]
public string get_PlatformName();
}
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.SupportedOSPlatformAttribute : OSPlatformAttribute {
    public SupportedOSPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.SupportedOSPlatformGuardAttribute : OSPlatformAttribute {
    public SupportedOSPlatformGuardAttribute(string platformName);
}
[AttributeUsageAttribute("1")]
internal class System.Runtime.Versioning.TargetPlatformAttribute : OSPlatformAttribute {
    public TargetPlatformAttribute(string platformName);
}
[AttributeUsageAttribute("2047")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformAttribute : OSPlatformAttribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    public string Message { get; }
    public UnsupportedOSPlatformAttribute(string platformName);
    public UnsupportedOSPlatformAttribute(string platformName, string message);
    [CompilerGeneratedAttribute]
public string get_Message();
}
[AttributeUsageAttribute("448")]
internal class System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute : OSPlatformAttribute {
    public UnsupportedOSPlatformGuardAttribute(string platformName);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ConfigurationNotSupportedTitle { get; }
    internal static string ConfigurationNotSupportedMessage { get; }
    internal static string ConfigurationNotSupportedDescription { get; }
    internal static string ConfigurationNotSupportedMessageValue { get; }
    internal static string ConfigurationNotSupportedMessageMarshallingInfo { get; }
    internal static string TypeNotSupportedTitle { get; }
    internal static string TypeNotSupportedMessageReturnWithDetails { get; }
    internal static string TypeNotSupportedDescription { get; }
    internal static string TypeNotSupportedMessageParameter { get; }
    internal static string TypeNotSupportedMessageReturn { get; }
    internal static string TypeNotSupportedMessageParameterWithDetails { get; }
    internal static string ConfigurationNotSupportedMessageReturn { get; }
    internal static string ConfigurationNotSupportedMessageParameter { get; }
    internal static string InvalidJSImportAttributeUsageTitle { get; }
    internal static string InvalidJSExportAttributeUsageTitle { get; }
    internal static string InvalidJSImportAttributedMethodSignatureMessage { get; }
    internal static string InvalidJSExportAttributedMethodSignatureMessage { get; }
    internal static string InvalidJSImportAttributedMethodDescription { get; }
    internal static string InvalidJSExportAttributedMethodDescription { get; }
    internal static string InvalidAttributedMethodContainingTypeMissingModifiersMessage { get; }
    internal static string DiscardOnlyVoid { get; }
    internal static string FuncArgumentNotSupported { get; }
    internal static string FuncTooManyArgs { get; }
    internal static string FuncWrongArgumentCount { get; }
    internal static string InOutRefNotSupported { get; }
    internal static string SpanAndTaskNotSupported { get; }
    internal static string TypeNotSupportedName { get; }
    internal static string UseJSMarshalAsAttribute { get; }
    internal static string JSImportRequiresAllowUnsafeBlocksDescription { get; }
    internal static string JSImportRequiresAllowUnsafeBlocksMessage { get; }
    internal static string JSImportRequiresAllowUnsafeBlocksTitle { get; }
    internal static string JSExportRequiresAllowUnsafeBlocksDescription { get; }
    internal static string JSExportRequiresAllowUnsafeBlocksMessage { get; }
    internal static string JSExportRequiresAllowUnsafeBlocksTitle { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ConfigurationNotSupportedTitle();
    internal static string get_ConfigurationNotSupportedMessage();
    internal static string get_ConfigurationNotSupportedDescription();
    internal static string get_ConfigurationNotSupportedMessageValue();
    internal static string get_ConfigurationNotSupportedMessageMarshallingInfo();
    internal static string get_TypeNotSupportedTitle();
    internal static string get_TypeNotSupportedMessageReturnWithDetails();
    internal static string get_TypeNotSupportedDescription();
    internal static string get_TypeNotSupportedMessageParameter();
    internal static string get_TypeNotSupportedMessageReturn();
    internal static string get_TypeNotSupportedMessageParameterWithDetails();
    internal static string get_ConfigurationNotSupportedMessageReturn();
    internal static string get_ConfigurationNotSupportedMessageParameter();
    internal static string get_InvalidJSImportAttributeUsageTitle();
    internal static string get_InvalidJSExportAttributeUsageTitle();
    internal static string get_InvalidJSImportAttributedMethodSignatureMessage();
    internal static string get_InvalidJSExportAttributedMethodSignatureMessage();
    internal static string get_InvalidJSImportAttributedMethodDescription();
    internal static string get_InvalidJSExportAttributedMethodDescription();
    internal static string get_InvalidAttributedMethodContainingTypeMissingModifiersMessage();
    internal static string get_DiscardOnlyVoid();
    internal static string get_FuncArgumentNotSupported();
    internal static string get_FuncTooManyArgs();
    internal static string get_FuncWrongArgumentCount();
    internal static string get_InOutRefNotSupported();
    internal static string get_SpanAndTaskNotSupported();
    internal static string get_TypeNotSupportedName();
    internal static string get_UseJSMarshalAsAttribute();
    internal static string get_JSImportRequiresAllowUnsafeBlocksDescription();
    internal static string get_JSImportRequiresAllowUnsafeBlocksMessage();
    internal static string get_JSImportRequiresAllowUnsafeBlocksTitle();
    internal static string get_JSExportRequiresAllowUnsafeBlocksDescription();
    internal static string get_JSExportRequiresAllowUnsafeBlocksMessage();
    internal static string get_JSExportRequiresAllowUnsafeBlocksTitle();
}
