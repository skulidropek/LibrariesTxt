[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public class System.Collections.Concurrent.BlockingCollection`1 : object {
    public int BoundedCapacity { get; }
    public int Count { get; }
    public bool IsAddingCompleted { get; }
    public bool IsCompleted { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public BlockingCollection`1(IProducerConsumerCollection`1<T> collection);
    public BlockingCollection`1(IProducerConsumerCollection`1<T> collection, int boundedCapacity);
    public BlockingCollection`1(int boundedCapacity);
    public int get_BoundedCapacity();
    public sealed virtual int get_Count();
    public bool get_IsAddingCompleted();
    public bool get_IsCompleted();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void Add(T item);
    public void Add(T item, CancellationToken cancellationToken);
    public static int AddToAny(BlockingCollection`1[] collections, T item);
    public static int AddToAny(BlockingCollection`1[] collections, T item, CancellationToken cancellationToken);
    public void CompleteAdding();
    public void CopyTo(T[] array, int index);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public IEnumerable`1<T> GetConsumingEnumerable();
    public IEnumerable`1<T> GetConsumingEnumerable(CancellationToken cancellationToken);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public T Take();
    public T Take(CancellationToken cancellationToken);
    public static int TakeFromAny(BlockingCollection`1[] collections, T& item);
    public static int TakeFromAny(BlockingCollection`1[] collections, T& item, CancellationToken cancellationToken);
    public T[] ToArray();
    public bool TryAdd(T item);
    public bool TryAdd(T item, int millisecondsTimeout);
    public bool TryAdd(T item, int millisecondsTimeout, CancellationToken cancellationToken);
    public bool TryAdd(T item, TimeSpan timeout);
    public static int TryAddToAny(BlockingCollection`1[] collections, T item);
    public static int TryAddToAny(BlockingCollection`1[] collections, T item, int millisecondsTimeout);
    public static int TryAddToAny(BlockingCollection`1[] collections, T item, int millisecondsTimeout, CancellationToken cancellationToken);
    public static int TryAddToAny(BlockingCollection`1[] collections, T item, TimeSpan timeout);
    public bool TryTake(T& item);
    public bool TryTake(T& item, int millisecondsTimeout);
    public bool TryTake(T& item, int millisecondsTimeout, CancellationToken cancellationToken);
    public bool TryTake(T& item, TimeSpan timeout);
    public static int TryTakeFromAny(BlockingCollection`1[] collections, T& item);
    public static int TryTakeFromAny(BlockingCollection`1[] collections, T& item, int millisecondsTimeout);
    public static int TryTakeFromAny(BlockingCollection`1[] collections, T& item, int millisecondsTimeout, CancellationToken cancellationToken);
    public static int TryTakeFromAny(BlockingCollection`1[] collections, T& item, TimeSpan timeout);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Collections.Concurrent.ConcurrentBag`1 : object {
    public int Count { get; }
    public bool IsEmpty { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ConcurrentBag`1(IEnumerable`1<T> collection);
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void Add(T item);
    public void Clear();
    public sealed virtual void CopyTo(T[] array, int index);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T item);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual T[] ToArray();
    public bool TryPeek(T& result);
    public sealed virtual bool TryTake(T& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Collections.Concurrent.ConcurrentDictionary`2 : object {
    public IEqualityComparer`1<TKey> Comparer { get; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    private IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    private IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    [NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    public ICollection`1<TValue> Values { get; }
    public ConcurrentDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection);
    public ConcurrentDictionary`2(IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(int concurrencyLevel, IEnumerable`1<KeyValuePair`2<TKey, TValue>> collection, IEqualityComparer`1<TKey> comparer);
    public ConcurrentDictionary`2(int concurrencyLevel, int capacity);
    public ConcurrentDictionary`2(int concurrencyLevel, int capacity, IEqualityComparer`1<TKey> comparer);
    public IEqualityComparer`1<TKey> get_Comparer();
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override IEnumerable`1<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys();
    private sealed virtual override IEnumerable`1<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    public sealed virtual ICollection`1<TValue> get_Values();
    public TValue AddOrUpdate(TKey key, Func`2<TKey, TValue> addValueFactory, Func`3<TKey, TValue, TValue> updateValueFactory);
    public TValue AddOrUpdate(TKey key, TValue addValue, Func`3<TKey, TValue, TValue> updateValueFactory);
    public TValue AddOrUpdate(TKey key, Func`3<TKey, TArg, TValue> addValueFactory, Func`4<TKey, TValue, TArg, TValue> updateValueFactory, TArg factoryArgument);
    public sealed virtual void Clear();
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    public TValue GetOrAdd(TKey key, Func`2<TKey, TValue> valueFactory);
    public TValue GetOrAdd(TKey key, TValue value);
    public TValue GetOrAdd(TKey key, Func`3<TKey, TArg, TValue> valueFactory, TArg factoryArgument);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> keyValuePair);
    private sealed virtual override void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value);
    private sealed virtual override bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public KeyValuePair`2[] ToArray();
    public bool TryAdd(TKey key, TValue value);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public bool TryRemove(KeyValuePair`2<TKey, TValue> item);
    public bool TryRemove(TKey key, TValue& value);
    public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Collections.Concurrent.ConcurrentQueue`1 : object {
    public int Count { get; }
    public bool IsEmpty { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ConcurrentQueue`1(IEnumerable`1<T> collection);
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void Clear();
    public sealed virtual void CopyTo(T[] array, int index);
    public void Enqueue(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T item);
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T& item);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual T[] ToArray();
    public bool TryDequeue(T& result);
    public bool TryPeek(T& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Collections.Concurrent.ConcurrentStack`1 : object {
    public int Count { get; }
    public bool IsEmpty { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ConcurrentStack`1(IEnumerable`1<T> collection);
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void Clear();
    public sealed virtual void CopyTo(T[] array, int index);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public void Push(T item);
    public void PushRange(T[] items);
    public void PushRange(T[] items, int startIndex, int count);
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T item);
    private sealed virtual override bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T& item);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual T[] ToArray();
    public bool TryPeek(T& result);
    public bool TryPop(T& result);
    public int TryPopRange(T[] items);
    public int TryPopRange(T[] items, int startIndex, int count);
}
[FlagsAttribute]
public enum System.Collections.Concurrent.EnumerablePartitionerOptions : Enum {
    public int value__;
    public static EnumerablePartitionerOptions None;
    public static EnumerablePartitionerOptions NoBuffering;
}
[NullableContextAttribute("1")]
public interface System.Collections.Concurrent.IProducerConsumerCollection`1 {
    public abstract virtual void CopyTo(T[] array, int index);
    public abstract virtual T[] ToArray();
    public abstract virtual bool TryAdd(T item);
    public abstract virtual bool TryTake(T& item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class System.Collections.Concurrent.OrderablePartitioner`1 : Partitioner`1<TSource> {
    public bool KeysNormalized { get; }
    public bool KeysOrderedAcrossPartitions { get; }
    public bool KeysOrderedInEachPartition { get; }
    protected OrderablePartitioner`1(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);
    public bool get_KeysNormalized();
    public bool get_KeysOrderedAcrossPartitions();
    public bool get_KeysOrderedInEachPartition();
    public virtual IEnumerable`1<TSource> GetDynamicPartitions();
    public virtual IEnumerable`1<KeyValuePair`2<long, TSource>> GetOrderableDynamicPartitions();
    public abstract virtual IList`1<IEnumerator`1<KeyValuePair`2<long, TSource>>> GetOrderablePartitions(int partitionCount);
    public virtual IList`1<IEnumerator`1<TSource>> GetPartitions(int partitionCount);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Collections.Concurrent.Partitioner : object {
    public static OrderablePartitioner`1<Tuple`2<int, int>> Create(int fromInclusive, int toExclusive);
    public static OrderablePartitioner`1<Tuple`2<int, int>> Create(int fromInclusive, int toExclusive, int rangeSize);
    public static OrderablePartitioner`1<Tuple`2<long, long>> Create(long fromInclusive, long toExclusive);
    public static OrderablePartitioner`1<Tuple`2<long, long>> Create(long fromInclusive, long toExclusive, long rangeSize);
    public static OrderablePartitioner`1<TSource> Create(IEnumerable`1<TSource> source);
    public static OrderablePartitioner`1<TSource> Create(IEnumerable`1<TSource> source, EnumerablePartitionerOptions partitionerOptions);
    public static OrderablePartitioner`1<TSource> Create(IList`1<TSource> list, bool loadBalance);
    public static OrderablePartitioner`1<TSource> Create(TSource[] array, bool loadBalance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Collections.Concurrent.Partitioner`1 : object {
    public bool SupportsDynamicPartitions { get; }
    public virtual bool get_SupportsDynamicPartitions();
    public virtual IEnumerable`1<TSource> GetDynamicPartitions();
    public abstract virtual IList`1<IEnumerator`1<TSource>> GetPartitions(int partitionCount);
}
