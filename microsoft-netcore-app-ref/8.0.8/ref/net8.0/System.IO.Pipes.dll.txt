public class Microsoft.Win32.SafeHandles.SafePipeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public bool IsInvalid { get; }
    public SafePipeHandle(IntPtr preexistingHandle, bool ownsHandle);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipes.AnonymousPipeClientStream : PipeStream {
    unknown PipeTransmissionMode ReadMode {public set; }
    public PipeTransmissionMode TransmissionMode { get; }
    public AnonymousPipeClientStream(PipeDirection direction, SafePipeHandle safePipeHandle);
    public AnonymousPipeClientStream(PipeDirection direction, string pipeHandleAsString);
    public AnonymousPipeClientStream(string pipeHandleAsString);
    public virtual void set_ReadMode(PipeTransmissionMode value);
    public virtual PipeTransmissionMode get_TransmissionMode();
    protected virtual override void Finalize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipes.AnonymousPipeServerStream : PipeStream {
    public SafePipeHandle ClientSafePipeHandle { get; }
    unknown PipeTransmissionMode ReadMode {public set; }
    public PipeTransmissionMode TransmissionMode { get; }
    public AnonymousPipeServerStream(PipeDirection direction);
    public AnonymousPipeServerStream(PipeDirection direction, SafePipeHandle serverSafePipeHandle, SafePipeHandle clientSafePipeHandle);
    public AnonymousPipeServerStream(PipeDirection direction, HandleInheritability inheritability);
    public AnonymousPipeServerStream(PipeDirection direction, HandleInheritability inheritability, int bufferSize);
    public SafePipeHandle get_ClientSafePipeHandle();
    public virtual void set_ReadMode(PipeTransmissionMode value);
    public virtual PipeTransmissionMode get_TransmissionMode();
    protected virtual void Dispose(bool disposing);
    public void DisposeLocalCopyOfClientHandle();
    protected virtual override void Finalize();
    public string GetClientHandleAsString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipes.NamedPipeClientStream : PipeStream {
    [SupportedOSPlatformAttribute("windows")]
public int NumberOfServerInstances { get; }
    public NamedPipeClientStream(PipeDirection direction, bool isAsync, bool isConnected, SafePipeHandle safePipeHandle);
    public NamedPipeClientStream(string pipeName);
    public NamedPipeClientStream(string serverName, string pipeName);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction, PipeOptions options);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction, PipeOptions options, TokenImpersonationLevel impersonationLevel);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction, PipeOptions options, TokenImpersonationLevel impersonationLevel, HandleInheritability inheritability);
    public int get_NumberOfServerInstances();
    protected internal virtual void CheckPipePropertyOperations();
    public void Connect();
    public void Connect(int timeout);
    public void Connect(TimeSpan timeout);
    public Task ConnectAsync();
    public Task ConnectAsync(int timeout);
    public Task ConnectAsync(int timeout, CancellationToken cancellationToken);
    public Task ConnectAsync(TimeSpan timeout, CancellationToken cancellationToken);
    public Task ConnectAsync(CancellationToken cancellationToken);
    protected virtual override void Finalize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipes.NamedPipeServerStream : PipeStream {
    public static int MaxAllowedServerInstances;
    public NamedPipeServerStream(PipeDirection direction, bool isAsync, bool isConnected, SafePipeHandle safePipeHandle);
    public NamedPipeServerStream(string pipeName);
    public NamedPipeServerStream(string pipeName, PipeDirection direction);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize);
    [NullableContextAttribute("2")]
public IAsyncResult BeginWaitForConnection(AsyncCallback callback, object state);
    public void Disconnect();
    public void EndWaitForConnection(IAsyncResult asyncResult);
    protected virtual override void Finalize();
    public string GetImpersonationUserName();
    public void RunAsClient(PipeStreamImpersonationWorker impersonationWorker);
    public void WaitForConnection();
    public Task WaitForConnectionAsync();
    public Task WaitForConnectionAsync(CancellationToken cancellationToken);
}
public enum System.IO.Pipes.PipeDirection : Enum {
    public int value__;
    public static PipeDirection In;
    public static PipeDirection Out;
    public static PipeDirection InOut;
}
[FlagsAttribute]
public enum System.IO.Pipes.PipeOptions : Enum {
    public int value__;
    public static PipeOptions WriteThrough;
    public static PipeOptions None;
    public static PipeOptions CurrentUserOnly;
    public static PipeOptions Asynchronous;
    public static PipeOptions FirstPipeInstance;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.IO.Pipes.PipeStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public int InBufferSize { get; }
    public bool IsAsync { get; }
    public bool IsConnected { get; protected set; }
    protected bool IsHandleExposed { get; }
    public bool IsMessageComplete { get; }
    public long Length { get; }
    public int OutBufferSize { get; }
    public long Position { get; public set; }
    public PipeTransmissionMode ReadMode { get; public set; }
    public SafePipeHandle SafePipeHandle { get; }
    public PipeTransmissionMode TransmissionMode { get; }
    protected PipeStream(PipeDirection direction, int bufferSize);
    protected PipeStream(PipeDirection direction, PipeTransmissionMode transmissionMode, int outBufferSize);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual int get_InBufferSize();
    public bool get_IsAsync();
    public bool get_IsConnected();
    protected void set_IsConnected(bool value);
    protected bool get_IsHandleExposed();
    public bool get_IsMessageComplete();
    public virtual long get_Length();
    public virtual int get_OutBufferSize();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual PipeTransmissionMode get_ReadMode();
    public virtual void set_ReadMode(PipeTransmissionMode value);
    public SafePipeHandle get_SafePipeHandle();
    public virtual PipeTransmissionMode get_TransmissionMode();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    protected internal virtual void CheckPipePropertyOperations();
    protected internal void CheckReadOperations();
    protected internal void CheckWriteOperations();
    protected virtual void Dispose(bool disposing);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
protected void InitializeHandle(SafePipeHandle handle, bool isExposed, bool isAsync);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    [SupportedOSPlatformAttribute("windows")]
public void WaitForPipeDrain();
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
}
public class System.IO.Pipes.PipeStreamImpersonationWorker : MulticastDelegate {
    public PipeStreamImpersonationWorker(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.IO.Pipes.PipeTransmissionMode : Enum {
    public int value__;
    public static PipeTransmissionMode Byte;
    [SupportedOSPlatformAttribute("windows")]
public static PipeTransmissionMode Message;
}
