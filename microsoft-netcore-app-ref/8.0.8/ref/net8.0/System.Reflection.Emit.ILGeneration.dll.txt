[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.CustomAttributeBuilder : object {
    public CustomAttributeBuilder(ConstructorInfo con, Object[] constructorArgs);
    public CustomAttributeBuilder(ConstructorInfo con, Object[] constructorArgs, FieldInfo[] namedFields, Object[] fieldValues);
    public CustomAttributeBuilder(ConstructorInfo con, Object[] constructorArgs, PropertyInfo[] namedProperties, Object[] propertyValues);
    public CustomAttributeBuilder(ConstructorInfo con, Object[] constructorArgs, PropertyInfo[] namedProperties, Object[] propertyValues, FieldInfo[] namedFields, Object[] fieldValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Reflection.Emit.ILGenerator : object {
    public int ILOffset { get; }
    public abstract virtual int get_ILOffset();
    [NullableContextAttribute("2")]
public abstract virtual void BeginCatchBlock(Type exceptionType);
    public abstract virtual void BeginExceptFilterBlock();
    public abstract virtual Label BeginExceptionBlock();
    public abstract virtual void BeginFaultBlock();
    public abstract virtual void BeginFinallyBlock();
    public abstract virtual void BeginScope();
    public virtual LocalBuilder DeclareLocal(Type localType);
    public abstract virtual LocalBuilder DeclareLocal(Type localType, bool pinned);
    public abstract virtual Label DefineLabel();
    public abstract virtual void Emit(OpCode opcode);
    public abstract virtual void Emit(OpCode opcode, byte arg);
    public abstract virtual void Emit(OpCode opcode, double arg);
    public abstract virtual void Emit(OpCode opcode, short arg);
    public abstract virtual void Emit(OpCode opcode, int arg);
    public abstract virtual void Emit(OpCode opcode, long arg);
    public abstract virtual void Emit(OpCode opcode, ConstructorInfo con);
    public abstract virtual void Emit(OpCode opcode, Label label);
    public abstract virtual void Emit(OpCode opcode, Label[] labels);
    public abstract virtual void Emit(OpCode opcode, LocalBuilder local);
    public abstract virtual void Emit(OpCode opcode, SignatureHelper signature);
    public abstract virtual void Emit(OpCode opcode, FieldInfo field);
    public abstract virtual void Emit(OpCode opcode, MethodInfo meth);
    [CLSCompliantAttribute("False")]
public void Emit(OpCode opcode, sbyte arg);
    public abstract virtual void Emit(OpCode opcode, float arg);
    public abstract virtual void Emit(OpCode opcode, string str);
    public abstract virtual void Emit(OpCode opcode, Type cls);
    public abstract virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes);
    [NullableContextAttribute("2")]
public abstract virtual void EmitCalli(OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes);
    [NullableContextAttribute("2")]
public abstract virtual void EmitCalli(OpCode opcode, CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes);
    public virtual void EmitWriteLine(LocalBuilder localBuilder);
    public virtual void EmitWriteLine(FieldInfo fld);
    public virtual void EmitWriteLine(string value);
    public abstract virtual void EndExceptionBlock();
    public abstract virtual void EndScope();
    public abstract virtual void MarkLabel(Label loc);
    public virtual void ThrowException(Type excType);
    public abstract virtual void UsingNamespace(string usingNamespace);
}
[IsReadOnlyAttribute]
public class System.Reflection.Emit.Label : ValueType {
    private int _dummyPrimitive;
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Label obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Label a, Label b);
    public static bool op_Inequality(Label a, Label b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.LocalBuilder : LocalVariableInfo {
    public bool IsPinned { get; }
    public int LocalIndex { get; }
    public Type LocalType { get; }
    public virtual bool get_IsPinned();
    public virtual int get_LocalIndex();
    public virtual Type get_LocalType();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.Reflection.Emit.ParameterBuilder : object {
    public int Attributes { get; }
    public bool IsIn { get; }
    public bool IsOptional { get; }
    public bool IsOut { get; }
    public string Name { get; }
    public int Position { get; }
    public virtual int get_Attributes();
    public bool get_IsIn();
    public bool get_IsOptional();
    public bool get_IsOut();
    public virtual string get_Name();
    public virtual int get_Position();
    public virtual void SetConstant(object defaultValue);
    [NullableContextAttribute("1")]
public void SetCustomAttribute(ConstructorInfo con, Byte[] binaryAttribute);
    [NullableContextAttribute("1")]
public void SetCustomAttribute(CustomAttributeBuilder customBuilder);
    [NullableContextAttribute("0")]
protected abstract virtual void SetCustomAttributeCore(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Reflection.Emit.SignatureHelper : object {
    public void AddArgument(Type clsArgument);
    public void AddArgument(Type argument, bool pinned);
    public void AddArgument(Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers);
    public void AddArguments(Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);
    public void AddSentinel();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public static SignatureHelper GetFieldSigHelper(Module mod);
    public virtual int GetHashCode();
    public static SignatureHelper GetLocalVarSigHelper();
    public static SignatureHelper GetLocalVarSigHelper(Module mod);
    public static SignatureHelper GetMethodSigHelper(CallingConventions callingConvention, Type returnType);
    [NullableContextAttribute("2")]
public static SignatureHelper GetMethodSigHelper(Module mod, CallingConventions callingConvention, Type returnType);
    [NullableContextAttribute("2")]
public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes);
    [NullableContextAttribute("2")]
public static SignatureHelper GetPropertySigHelper(Module mod, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);
    [NullableContextAttribute("2")]
public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes);
    [NullableContextAttribute("2")]
public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);
    public Byte[] GetSignature();
    public virtual string ToString();
}
