[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.ActionBlock`1 : object {
    public Task Completion { get; }
    public int InputCount { get; }
    public ActionBlock`1(Action`1<TInput> action);
    public ActionBlock`1(Action`1<TInput> action, ExecutionDataflowBlockOptions dataflowBlockOptions);
    public ActionBlock`1(Func`2<TInput, Task> action);
    public ActionBlock`1(Func`2<TInput, Task> action, ExecutionDataflowBlockOptions dataflowBlockOptions);
    public sealed virtual Task get_Completion();
    public int get_InputCount();
    public sealed virtual void Complete();
    public bool Post(TInput item);
    private sealed virtual override void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception exception);
    private sealed virtual override DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock<TInput>.OfferMessage(DataflowMessageHeader messageHeader, TInput messageValue, ISourceBlock`1<TInput> source, bool consumeToAccept);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.BatchBlock`1 : object {
    public int BatchSize { get; }
    public Task Completion { get; }
    public int OutputCount { get; }
    public BatchBlock`1(int batchSize);
    public BatchBlock`1(int batchSize, GroupingDataflowBlockOptions dataflowBlockOptions);
    public int get_BatchSize();
    public sealed virtual Task get_Completion();
    public int get_OutputCount();
    public sealed virtual void Complete();
    public sealed virtual IDisposable LinkTo(ITargetBlock`1<T[]> target, DataflowLinkOptions linkOptions);
    private sealed virtual override void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception exception);
    private sealed virtual override T[] System.Threading.Tasks.Dataflow.ISourceBlock<T[]>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<T[]> target, Boolean& messageConsumed);
    private sealed virtual override void System.Threading.Tasks.Dataflow.ISourceBlock<T[]>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock`1<T[]> target);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.ISourceBlock<T[]>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<T[]> target);
    private sealed virtual override DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock<T>.OfferMessage(DataflowMessageHeader messageHeader, T messageValue, ISourceBlock`1<T> source, bool consumeToAccept);
    public virtual string ToString();
    public void TriggerBatch();
    public sealed virtual bool TryReceive(Predicate`1<T[]> filter, T[]& item);
    public sealed virtual bool TryReceiveAll(IList`1& items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.BatchedJoinBlock`2 : object {
    public int BatchSize { get; }
    public Task Completion { get; }
    public int OutputCount { get; }
    public ITargetBlock`1<T1> Target1 { get; }
    public ITargetBlock`1<T2> Target2 { get; }
    public BatchedJoinBlock`2(int batchSize);
    public BatchedJoinBlock`2(int batchSize, GroupingDataflowBlockOptions dataflowBlockOptions);
    public int get_BatchSize();
    public sealed virtual Task get_Completion();
    public int get_OutputCount();
    public ITargetBlock`1<T1> get_Target1();
    public ITargetBlock`1<T2> get_Target2();
    public sealed virtual void Complete();
    public sealed virtual IDisposable LinkTo(ITargetBlock`1<Tuple`2<IList`1<T1>, IList`1<T2>>> target, DataflowLinkOptions linkOptions);
    private sealed virtual override void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception exception);
    private sealed virtual override Tuple`2<IList`1<T1>, IList`1<T2>> System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>>>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`2<IList`1<T1>, IList`1<T2>>> target, Boolean& messageConsumed);
    private sealed virtual override void System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>>>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`2<IList`1<T1>, IList`1<T2>>> target);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>>>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`2<IList`1<T1>, IList`1<T2>>> target);
    public virtual string ToString();
    public sealed virtual bool TryReceive(Predicate`1<Tuple`2<IList`1<T1>, IList`1<T2>>> filter, Tuple`2& item);
    public sealed virtual bool TryReceiveAll(IList`1& items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.BatchedJoinBlock`3 : object {
    public int BatchSize { get; }
    public Task Completion { get; }
    public int OutputCount { get; }
    public ITargetBlock`1<T1> Target1 { get; }
    public ITargetBlock`1<T2> Target2 { get; }
    public ITargetBlock`1<T3> Target3 { get; }
    public BatchedJoinBlock`3(int batchSize);
    public BatchedJoinBlock`3(int batchSize, GroupingDataflowBlockOptions dataflowBlockOptions);
    public int get_BatchSize();
    public sealed virtual Task get_Completion();
    public int get_OutputCount();
    public ITargetBlock`1<T1> get_Target1();
    public ITargetBlock`1<T2> get_Target2();
    public ITargetBlock`1<T3> get_Target3();
    public sealed virtual void Complete();
    public sealed virtual IDisposable LinkTo(ITargetBlock`1<Tuple`3<IList`1<T1>, IList`1<T2>, IList`1<T3>>> target, DataflowLinkOptions linkOptions);
    private sealed virtual override void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception exception);
    private sealed virtual override Tuple`3<IList`1<T1>, IList`1<T2>, IList`1<T3>> System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>,System.Collections.Generic.IList<T3>>>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`3<IList`1<T1>, IList`1<T2>, IList`1<T3>>> target, Boolean& messageConsumed);
    private sealed virtual override void System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>,System.Collections.Generic.IList<T3>>>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`3<IList`1<T1>, IList`1<T2>, IList`1<T3>>> target);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<System.Collections.Generic.IList<T1>,System.Collections.Generic.IList<T2>,System.Collections.Generic.IList<T3>>>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`3<IList`1<T1>, IList`1<T2>, IList`1<T3>>> target);
    public virtual string ToString();
    public sealed virtual bool TryReceive(Predicate`1<Tuple`3<IList`1<T1>, IList`1<T2>, IList`1<T3>>> filter, Tuple`3& item);
    public sealed virtual bool TryReceiveAll(IList`1& items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.BroadcastBlock`1 : object {
    public Task Completion { get; }
    public BroadcastBlock`1(Func`2<T, T> cloningFunction);
    public BroadcastBlock`1(Func`2<T, T> cloningFunction, DataflowBlockOptions dataflowBlockOptions);
    public sealed virtual Task get_Completion();
    public sealed virtual void Complete();
    public sealed virtual IDisposable LinkTo(ITargetBlock`1<T> target, DataflowLinkOptions linkOptions);
    private sealed virtual override void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception exception);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.IReceivableSourceBlock<T>.TryReceiveAll(IList`1& items);
    private sealed virtual override T System.Threading.Tasks.Dataflow.ISourceBlock<T>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<T> target, Boolean& messageConsumed);
    private sealed virtual override void System.Threading.Tasks.Dataflow.ISourceBlock<T>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock`1<T> target);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.ISourceBlock<T>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<T> target);
    private sealed virtual override DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock<T>.OfferMessage(DataflowMessageHeader messageHeader, T messageValue, ISourceBlock`1<T> source, bool consumeToAccept);
    public virtual string ToString();
    public sealed virtual bool TryReceive(Predicate`1<T> filter, T& item);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.BufferBlock`1 : object {
    public Task Completion { get; }
    public int Count { get; }
    public BufferBlock`1(DataflowBlockOptions dataflowBlockOptions);
    public sealed virtual Task get_Completion();
    public int get_Count();
    public sealed virtual void Complete();
    public sealed virtual IDisposable LinkTo(ITargetBlock`1<T> target, DataflowLinkOptions linkOptions);
    private sealed virtual override void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception exception);
    private sealed virtual override T System.Threading.Tasks.Dataflow.ISourceBlock<T>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<T> target, Boolean& messageConsumed);
    private sealed virtual override void System.Threading.Tasks.Dataflow.ISourceBlock<T>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock`1<T> target);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.ISourceBlock<T>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<T> target);
    private sealed virtual override DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock<T>.OfferMessage(DataflowMessageHeader messageHeader, T messageValue, ISourceBlock`1<T> source, bool consumeToAccept);
    public virtual string ToString();
    public sealed virtual bool TryReceive(Predicate`1<T> filter, T& item);
    public sealed virtual bool TryReceiveAll(IList`1& items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Threading.Tasks.Dataflow.DataflowBlock : object {
    [ExtensionAttribute]
public static IObservable`1<TOutput> AsObservable(ISourceBlock`1<TOutput> source);
    [ExtensionAttribute]
public static IObserver`1<TInput> AsObserver(ITargetBlock`1<TInput> target);
    public static Task`1<int> Choose(ISourceBlock`1<T1> source1, Action`1<T1> action1, ISourceBlock`1<T2> source2, Action`1<T2> action2);
    public static Task`1<int> Choose(ISourceBlock`1<T1> source1, Action`1<T1> action1, ISourceBlock`1<T2> source2, Action`1<T2> action2, DataflowBlockOptions dataflowBlockOptions);
    public static Task`1<int> Choose(ISourceBlock`1<T1> source1, Action`1<T1> action1, ISourceBlock`1<T2> source2, Action`1<T2> action2, ISourceBlock`1<T3> source3, Action`1<T3> action3);
    public static Task`1<int> Choose(ISourceBlock`1<T1> source1, Action`1<T1> action1, ISourceBlock`1<T2> source2, Action`1<T2> action2, ISourceBlock`1<T3> source3, Action`1<T3> action3, DataflowBlockOptions dataflowBlockOptions);
    public static IPropagatorBlock`2<TInput, TOutput> Encapsulate(ITargetBlock`1<TInput> target, ISourceBlock`1<TOutput> source);
    [ExtensionAttribute]
public static IDisposable LinkTo(ISourceBlock`1<TOutput> source, ITargetBlock`1<TOutput> target);
    [ExtensionAttribute]
public static IDisposable LinkTo(ISourceBlock`1<TOutput> source, ITargetBlock`1<TOutput> target, Predicate`1<TOutput> predicate);
    [ExtensionAttribute]
public static IDisposable LinkTo(ISourceBlock`1<TOutput> source, ITargetBlock`1<TOutput> target, DataflowLinkOptions linkOptions, Predicate`1<TOutput> predicate);
    public static ITargetBlock`1<TInput> NullTarget();
    [ExtensionAttribute]
public static Task`1<bool> OutputAvailableAsync(ISourceBlock`1<TOutput> source);
    [ExtensionAttribute]
public static Task`1<bool> OutputAvailableAsync(ISourceBlock`1<TOutput> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool Post(ITargetBlock`1<TInput> target, TInput item);
    [ExtensionAttribute]
public static Task`1<TOutput> ReceiveAsync(ISourceBlock`1<TOutput> source);
    [ExtensionAttribute]
public static Task`1<TOutput> ReceiveAsync(ISourceBlock`1<TOutput> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TOutput> ReceiveAsync(ISourceBlock`1<TOutput> source, TimeSpan timeout);
    [ExtensionAttribute]
public static Task`1<TOutput> ReceiveAsync(ISourceBlock`1<TOutput> source, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TOutput Receive(ISourceBlock`1<TOutput> source);
    [ExtensionAttribute]
public static TOutput Receive(ISourceBlock`1<TOutput> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TOutput Receive(ISourceBlock`1<TOutput> source, TimeSpan timeout);
    [ExtensionAttribute]
public static TOutput Receive(ISourceBlock`1<TOutput> source, TimeSpan timeout, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> SendAsync(ITargetBlock`1<TInput> target, TInput item);
    [ExtensionAttribute]
public static Task`1<bool> SendAsync(ITargetBlock`1<TInput> target, TInput item, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool TryReceive(IReceivableSourceBlock`1<TOutput> source, TOutput& item);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TOutput> ReceiveAllAsync(IReceivableSourceBlock`1<TOutput> source, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.DataflowBlockOptions : object {
    public static int Unbounded;
    public int BoundedCapacity { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    public bool EnsureOrdered { get; public set; }
    public int MaxMessagesPerTask { get; public set; }
    public string NameFormat { get; public set; }
    public TaskScheduler TaskScheduler { get; public set; }
    public int get_BoundedCapacity();
    public void set_BoundedCapacity(int value);
    public CancellationToken get_CancellationToken();
    public void set_CancellationToken(CancellationToken value);
    public bool get_EnsureOrdered();
    public void set_EnsureOrdered(bool value);
    public int get_MaxMessagesPerTask();
    public void set_MaxMessagesPerTask(int value);
    public string get_NameFormat();
    public void set_NameFormat(string value);
    public TaskScheduler get_TaskScheduler();
    public void set_TaskScheduler(TaskScheduler value);
}
public class System.Threading.Tasks.Dataflow.DataflowLinkOptions : object {
    public bool Append { get; public set; }
    public int MaxMessages { get; public set; }
    public bool PropagateCompletion { get; public set; }
    public bool get_Append();
    public void set_Append(bool value);
    public int get_MaxMessages();
    public void set_MaxMessages(int value);
    public bool get_PropagateCompletion();
    public void set_PropagateCompletion(bool value);
}
[IsReadOnlyAttribute]
public class System.Threading.Tasks.Dataflow.DataflowMessageHeader : ValueType {
    private int _dummyPrimitive;
    public long Id { get; }
    public bool IsValid { get; }
    public DataflowMessageHeader(long id);
    public long get_Id();
    public bool get_IsValid();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DataflowMessageHeader other);
    public virtual int GetHashCode();
    public static bool op_Equality(DataflowMessageHeader left, DataflowMessageHeader right);
    public static bool op_Inequality(DataflowMessageHeader left, DataflowMessageHeader right);
}
public enum System.Threading.Tasks.Dataflow.DataflowMessageStatus : Enum {
    public int value__;
    public static DataflowMessageStatus Accepted;
    public static DataflowMessageStatus Declined;
    public static DataflowMessageStatus Postponed;
    public static DataflowMessageStatus NotAvailable;
    public static DataflowMessageStatus DecliningPermanently;
}
public class System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions : DataflowBlockOptions {
    public int MaxDegreeOfParallelism { get; public set; }
    public bool SingleProducerConstrained { get; public set; }
    public int get_MaxDegreeOfParallelism();
    public void set_MaxDegreeOfParallelism(int value);
    public bool get_SingleProducerConstrained();
    public void set_SingleProducerConstrained(bool value);
}
public class System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions : DataflowBlockOptions {
    public bool Greedy { get; public set; }
    public long MaxNumberOfGroups { get; public set; }
    public bool get_Greedy();
    public void set_Greedy(bool value);
    public long get_MaxNumberOfGroups();
    public void set_MaxNumberOfGroups(long value);
}
[NullableContextAttribute("1")]
public interface System.Threading.Tasks.Dataflow.IDataflowBlock {
    public Task Completion { get; }
    public abstract virtual Task get_Completion();
    public abstract virtual void Complete();
    public abstract virtual void Fault(Exception exception);
}
[NullableContextAttribute("2")]
public interface System.Threading.Tasks.Dataflow.IPropagatorBlock`2 {
}
public interface System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1 {
    [NullableContextAttribute("1")]
public abstract virtual bool TryReceive(Predicate`1<TOutput> filter, TOutput& item);
    public abstract virtual bool TryReceiveAll(IList`1& items);
}
[NullableContextAttribute("1")]
public interface System.Threading.Tasks.Dataflow.ISourceBlock`1 {
    public abstract virtual TOutput ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<TOutput> target, Boolean& messageConsumed);
    public abstract virtual IDisposable LinkTo(ITargetBlock`1<TOutput> target, DataflowLinkOptions linkOptions);
    public abstract virtual void ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock`1<TOutput> target);
    public abstract virtual bool ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<TOutput> target);
}
public interface System.Threading.Tasks.Dataflow.ITargetBlock`1 {
    [NullableContextAttribute("1")]
public abstract virtual DataflowMessageStatus OfferMessage(DataflowMessageHeader messageHeader, TInput messageValue, ISourceBlock`1<TInput> source, bool consumeToAccept);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.JoinBlock`2 : object {
    public Task Completion { get; }
    public int OutputCount { get; }
    public ITargetBlock`1<T1> Target1 { get; }
    public ITargetBlock`1<T2> Target2 { get; }
    public JoinBlock`2(GroupingDataflowBlockOptions dataflowBlockOptions);
    public sealed virtual Task get_Completion();
    public int get_OutputCount();
    public ITargetBlock`1<T1> get_Target1();
    public ITargetBlock`1<T2> get_Target2();
    public sealed virtual void Complete();
    public sealed virtual IDisposable LinkTo(ITargetBlock`1<Tuple`2<T1, T2>> target, DataflowLinkOptions linkOptions);
    private sealed virtual override void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception exception);
    private sealed virtual override Tuple`2<T1, T2> System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<T1,T2>>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`2<T1, T2>> target, Boolean& messageConsumed);
    private sealed virtual override void System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<T1,T2>>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`2<T1, T2>> target);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<T1,T2>>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`2<T1, T2>> target);
    public virtual string ToString();
    public sealed virtual bool TryReceive(Predicate`1<Tuple`2<T1, T2>> filter, Tuple`2& item);
    public sealed virtual bool TryReceiveAll(IList`1& items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.JoinBlock`3 : object {
    public Task Completion { get; }
    public int OutputCount { get; }
    public ITargetBlock`1<T1> Target1 { get; }
    public ITargetBlock`1<T2> Target2 { get; }
    public ITargetBlock`1<T3> Target3 { get; }
    public JoinBlock`3(GroupingDataflowBlockOptions dataflowBlockOptions);
    public sealed virtual Task get_Completion();
    public int get_OutputCount();
    public ITargetBlock`1<T1> get_Target1();
    public ITargetBlock`1<T2> get_Target2();
    public ITargetBlock`1<T3> get_Target3();
    public sealed virtual void Complete();
    public sealed virtual IDisposable LinkTo(ITargetBlock`1<Tuple`3<T1, T2, T3>> target, DataflowLinkOptions linkOptions);
    private sealed virtual override void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception exception);
    private sealed virtual override Tuple`3<T1, T2, T3> System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<T1,T2,T3>>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`3<T1, T2, T3>> target, Boolean& messageConsumed);
    private sealed virtual override void System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<T1,T2,T3>>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`3<T1, T2, T3>> target);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.ISourceBlock<System.Tuple<T1,T2,T3>>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<Tuple`3<T1, T2, T3>> target);
    public virtual string ToString();
    public sealed virtual bool TryReceive(Predicate`1<Tuple`3<T1, T2, T3>> filter, Tuple`3& item);
    public sealed virtual bool TryReceiveAll(IList`1& items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.TransformBlock`2 : object {
    public Task Completion { get; }
    public int InputCount { get; }
    public int OutputCount { get; }
    public TransformBlock`2(Func`2<TInput, Task`1<TOutput>> transform);
    public TransformBlock`2(Func`2<TInput, Task`1<TOutput>> transform, ExecutionDataflowBlockOptions dataflowBlockOptions);
    public TransformBlock`2(Func`2<TInput, TOutput> transform);
    public TransformBlock`2(Func`2<TInput, TOutput> transform, ExecutionDataflowBlockOptions dataflowBlockOptions);
    public sealed virtual Task get_Completion();
    public int get_InputCount();
    public int get_OutputCount();
    public sealed virtual void Complete();
    public sealed virtual IDisposable LinkTo(ITargetBlock`1<TOutput> target, DataflowLinkOptions linkOptions);
    private sealed virtual override void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception exception);
    private sealed virtual override TOutput System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<TOutput> target, Boolean& messageConsumed);
    private sealed virtual override void System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock`1<TOutput> target);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<TOutput> target);
    private sealed virtual override DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock<TInput>.OfferMessage(DataflowMessageHeader messageHeader, TInput messageValue, ISourceBlock`1<TInput> source, bool consumeToAccept);
    public virtual string ToString();
    public sealed virtual bool TryReceive(Predicate`1<TOutput> filter, TOutput& item);
    public sealed virtual bool TryReceiveAll(IList`1& items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.TransformManyBlock`2 : object {
    public Task Completion { get; }
    public int InputCount { get; }
    public int OutputCount { get; }
    public TransformManyBlock`2(Func`2<TInput, IEnumerable`1<TOutput>> transform);
    public TransformManyBlock`2(Func`2<TInput, IEnumerable`1<TOutput>> transform, ExecutionDataflowBlockOptions dataflowBlockOptions);
    public TransformManyBlock`2(Func`2<TInput, Task`1<IEnumerable`1<TOutput>>> transform);
    public TransformManyBlock`2(Func`2<TInput, Task`1<IEnumerable`1<TOutput>>> transform, ExecutionDataflowBlockOptions dataflowBlockOptions);
    public TransformManyBlock`2(Func`2<TInput, IAsyncEnumerable`1<TOutput>> transform);
    public TransformManyBlock`2(Func`2<TInput, IAsyncEnumerable`1<TOutput>> transform, ExecutionDataflowBlockOptions dataflowBlockOptions);
    public sealed virtual Task get_Completion();
    public int get_InputCount();
    public int get_OutputCount();
    public sealed virtual void Complete();
    public sealed virtual IDisposable LinkTo(ITargetBlock`1<TOutput> target, DataflowLinkOptions linkOptions);
    private sealed virtual override void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception exception);
    private sealed virtual override TOutput System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<TOutput> target, Boolean& messageConsumed);
    private sealed virtual override void System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock`1<TOutput> target);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<TOutput> target);
    private sealed virtual override DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock<TInput>.OfferMessage(DataflowMessageHeader messageHeader, TInput messageValue, ISourceBlock`1<TInput> source, bool consumeToAccept);
    public virtual string ToString();
    public sealed virtual bool TryReceive(Predicate`1<TOutput> filter, TOutput& item);
    public sealed virtual bool TryReceiveAll(IList`1& items);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Tasks.Dataflow.WriteOnceBlock`1 : object {
    public Task Completion { get; }
    public WriteOnceBlock`1(Func`2<T, T> cloningFunction);
    public WriteOnceBlock`1(Func`2<T, T> cloningFunction, DataflowBlockOptions dataflowBlockOptions);
    public sealed virtual Task get_Completion();
    public sealed virtual void Complete();
    public sealed virtual IDisposable LinkTo(ITargetBlock`1<T> target, DataflowLinkOptions linkOptions);
    private sealed virtual override void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(Exception exception);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.IReceivableSourceBlock<T>.TryReceiveAll(IList`1& items);
    private sealed virtual override T System.Threading.Tasks.Dataflow.ISourceBlock<T>.ConsumeMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<T> target, Boolean& messageConsumed);
    private sealed virtual override void System.Threading.Tasks.Dataflow.ISourceBlock<T>.ReleaseReservation(DataflowMessageHeader messageHeader, ITargetBlock`1<T> target);
    private sealed virtual override bool System.Threading.Tasks.Dataflow.ISourceBlock<T>.ReserveMessage(DataflowMessageHeader messageHeader, ITargetBlock`1<T> target);
    private sealed virtual override DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock<T>.OfferMessage(DataflowMessageHeader messageHeader, T messageValue, ISourceBlock`1<T> source, bool consumeToAccept);
    public virtual string ToString();
    public sealed virtual bool TryReceive(Predicate`1<T> filter, T& item);
}
