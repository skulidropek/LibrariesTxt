public class System.LocalDataStoreSlot : object {
    protected virtual override void Finalize();
}
public enum System.Threading.ApartmentState : Enum {
    public int value__;
    public static ApartmentState STA;
    public static ApartmentState MTA;
    public static ApartmentState Unknown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.CompressedStack : object {
    public static CompressedStack Capture();
    public CompressedStack CreateCopy();
    public static CompressedStack GetCompressedStack();
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public sealed virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public static void Run(CompressedStack compressedStack, ContextCallback callback, object state);
}
public class System.Threading.ParameterizedThreadStart : MulticastDelegate {
    public ParameterizedThreadStart(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual void Invoke(object obj);
    public virtual IAsyncResult BeginInvoke(object obj, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.Thread : CriticalFinalizerObject {
    [ObsoleteAttribute("The ApartmentState property has been deprecated. Use GetApartmentState, SetApartmentState or TrySetApartmentState instead.")]
public ApartmentState ApartmentState { get; public set; }
    public CultureInfo CurrentCulture { get; public set; }
    [NullableAttribute("2")]
public static IPrincipal CurrentPrincipal { get; public set; }
    public static Thread CurrentThread { get; }
    public CultureInfo CurrentUICulture { get; public set; }
    [NullableAttribute("2")]
public ExecutionContext ExecutionContext { get; }
    public bool IsAlive { get; }
    public bool IsBackground { get; public set; }
    public bool IsThreadPoolThread { get; }
    public int ManagedThreadId { get; }
    [NullableAttribute("2")]
public string Name { get; public set; }
    public ThreadPriority Priority { get; public set; }
    public ThreadState ThreadState { get; }
    public Thread(ParameterizedThreadStart start);
    public Thread(ParameterizedThreadStart start, int maxStackSize);
    public Thread(ThreadStart start);
    public Thread(ThreadStart start, int maxStackSize);
    public ApartmentState get_ApartmentState();
    public void set_ApartmentState(ApartmentState value);
    public CultureInfo get_CurrentCulture();
    public void set_CurrentCulture(CultureInfo value);
    [NullableContextAttribute("2")]
public static IPrincipal get_CurrentPrincipal();
    [NullableContextAttribute("2")]
public static void set_CurrentPrincipal(IPrincipal value);
    public static Thread get_CurrentThread();
    public CultureInfo get_CurrentUICulture();
    public void set_CurrentUICulture(CultureInfo value);
    [NullableContextAttribute("2")]
public ExecutionContext get_ExecutionContext();
    public bool get_IsAlive();
    public bool get_IsBackground();
    public void set_IsBackground(bool value);
    public bool get_IsThreadPoolThread();
    public int get_ManagedThreadId();
    [NullableContextAttribute("2")]
public string get_Name();
    [NullableContextAttribute("2")]
public void set_Name(string value);
    public ThreadPriority get_Priority();
    public void set_Priority(ThreadPriority value);
    public ThreadState get_ThreadState();
    [ObsoleteAttribute("Thread.Abort is not supported and throws PlatformNotSupportedException.")]
public void Abort();
    [NullableContextAttribute("2")]
[ObsoleteAttribute("Thread.Abort is not supported and throws PlatformNotSupportedException.")]
public void Abort(object stateInfo);
    public static LocalDataStoreSlot AllocateDataSlot();
    public static LocalDataStoreSlot AllocateNamedDataSlot(string name);
    public static void BeginCriticalRegion();
    public static void BeginThreadAffinity();
    public void DisableComObjectEagerCleanup();
    public static void EndCriticalRegion();
    public static void EndThreadAffinity();
    protected virtual override void Finalize();
    public static void FreeNamedDataSlot(string name);
    public ApartmentState GetApartmentState();
    [ObsoleteAttribute("Code Access Security is not supported or honored by the runtime.")]
public CompressedStack GetCompressedStack();
    public static int GetCurrentProcessorId();
    public static object GetData(LocalDataStoreSlot slot);
    public static AppDomain GetDomain();
    public static int GetDomainID();
    public virtual int GetHashCode();
    public static LocalDataStoreSlot GetNamedDataSlot(string name);
    public void Interrupt();
    public void Join();
    public bool Join(int millisecondsTimeout);
    public bool Join(TimeSpan timeout);
    public static void MemoryBarrier();
    [ObsoleteAttribute("Thread.ResetAbort is not supported and throws PlatformNotSupportedException.")]
public static void ResetAbort();
    [ObsoleteAttribute("Thread.Resume has been deprecated. Use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.")]
public void Resume();
    [SupportedOSPlatformAttribute("windows")]
public void SetApartmentState(ApartmentState state);
    [ObsoleteAttribute("Code Access Security is not supported or honored by the runtime.")]
public void SetCompressedStack(CompressedStack stack);
    public static void SetData(LocalDataStoreSlot slot, object data);
    public static void Sleep(int millisecondsTimeout);
    public static void Sleep(TimeSpan timeout);
    public static void SpinWait(int iterations);
    [UnsupportedOSPlatformAttribute("browser")]
public void Start();
    [NullableContextAttribute("2")]
[UnsupportedOSPlatformAttribute("browser")]
public void Start(object parameter);
    [ObsoleteAttribute("Thread.Suspend has been deprecated. Use other classes in System.Threading, such as Monitor, Mutex, Event, and Semaphore, to synchronize Threads or protect resources.")]
public void Suspend();
    public bool TrySetApartmentState(ApartmentState state);
    [UnsupportedOSPlatformAttribute("browser")]
public void UnsafeStart();
    [NullableContextAttribute("2")]
[UnsupportedOSPlatformAttribute("browser")]
public void UnsafeStart(object parameter);
    public static byte VolatileRead(Byte& address);
    public static double VolatileRead(Double& address);
    public static short VolatileRead(Int16& address);
    public static int VolatileRead(Int32& address);
    public static long VolatileRead(Int64& address);
    public static IntPtr VolatileRead(IntPtr& address);
    [NullableContextAttribute("2")]
public static object VolatileRead(Object& address);
    [CLSCompliantAttribute("False")]
public static sbyte VolatileRead(SByte& address);
    public static float VolatileRead(Single& address);
    [CLSCompliantAttribute("False")]
public static ushort VolatileRead(UInt16& address);
    [CLSCompliantAttribute("False")]
public static UInt32 VolatileRead(UInt32& address);
    [CLSCompliantAttribute("False")]
public static ulong VolatileRead(UInt64& address);
    [CLSCompliantAttribute("False")]
public static UIntPtr VolatileRead(UIntPtr& address);
    public static void VolatileWrite(Byte& address, byte value);
    public static void VolatileWrite(Double& address, double value);
    public static void VolatileWrite(Int16& address, short value);
    public static void VolatileWrite(Int32& address, int value);
    public static void VolatileWrite(Int64& address, long value);
    public static void VolatileWrite(IntPtr& address, IntPtr value);
    [NullableContextAttribute("2")]
public static void VolatileWrite(Object& address, object value);
    [CLSCompliantAttribute("False")]
public static void VolatileWrite(SByte& address, sbyte value);
    public static void VolatileWrite(Single& address, float value);
    [CLSCompliantAttribute("False")]
public static void VolatileWrite(UInt16& address, ushort value);
    [CLSCompliantAttribute("False")]
public static void VolatileWrite(UInt32& address, UInt32 value);
    [CLSCompliantAttribute("False")]
public static void VolatileWrite(UInt64& address, ulong value);
    [CLSCompliantAttribute("False")]
public static void VolatileWrite(UIntPtr& address, UIntPtr value);
    public static bool Yield();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Threading.ThreadAbortException : SystemException {
    public object ExceptionState { get; }
    public object get_ExceptionState();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.ThreadExceptionEventArgs : EventArgs {
    public Exception Exception { get; }
    public ThreadExceptionEventArgs(Exception t);
    public Exception get_Exception();
}
public class System.Threading.ThreadExceptionEventHandler : MulticastDelegate {
    public ThreadExceptionEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ThreadExceptionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ThreadExceptionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Threading.ThreadInterruptedException : SystemException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ThreadInterruptedException(SerializationInfo info, StreamingContext context);
    public ThreadInterruptedException(string message);
    public ThreadInterruptedException(string message, Exception innerException);
}
public enum System.Threading.ThreadPriority : Enum {
    public int value__;
    public static ThreadPriority Lowest;
    public static ThreadPriority BelowNormal;
    public static ThreadPriority Normal;
    public static ThreadPriority AboveNormal;
    public static ThreadPriority Highest;
}
public class System.Threading.ThreadStart : MulticastDelegate {
    public ThreadStart(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Threading.ThreadStartException : SystemException {
}
[FlagsAttribute]
public enum System.Threading.ThreadState : Enum {
    public int value__;
    public static ThreadState Running;
    public static ThreadState StopRequested;
    public static ThreadState SuspendRequested;
    public static ThreadState Background;
    public static ThreadState Unstarted;
    public static ThreadState Stopped;
    public static ThreadState WaitSleepJoin;
    public static ThreadState Suspended;
    public static ThreadState AbortRequested;
    public static ThreadState Aborted;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Threading.ThreadStateException : SystemException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ThreadStateException(SerializationInfo info, StreamingContext context);
    public ThreadStateException(string message);
    public ThreadStateException(string message, Exception innerException);
}
