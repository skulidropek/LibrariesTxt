internal static class FxResources.System.Console.SR : object {
}
internal static class Interop : object {
    private static void ThrowExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirError);
    internal static long CheckIo(long result, string path, bool isDirError);
    internal static int CheckIo(int result, string path, bool isDirError);
    internal static TSafeHandle CheckIo(TSafeHandle handle, string path, bool isDirError);
    internal static Exception GetExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirError);
    internal static Exception GetIOException(ErrorInfo errorInfo, string path);
    [CompilerGeneratedAttribute]
internal static bool <GetExceptionForIoErrno>g__ParentDirectoryExists|11_0(string fullPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Console : object {
    private static object s_syncObject;
    private static TextReader s_in;
    private static TextWriter s_out;
    private static TextWriter s_error;
    private static Encoding s_inputEncoding;
    private static Encoding s_outputEncoding;
    private static bool s_isOutTextWriterRedirected;
    private static bool s_isErrorTextWriterRedirected;
    private static ConsoleCancelEventHandler s_cancelCallbacks;
    private static PosixSignalRegistration s_sigIntRegistration;
    private static PosixSignalRegistration s_sigQuitRegistration;
    private static StrongBox`1<bool> _isStdInRedirected;
    private static StrongBox`1<bool> _isStdOutRedirected;
    private static StrongBox`1<bool> _isStdErrRedirected;
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static TextReader In { get; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static Encoding InputEncoding { get; public set; }
    public static Encoding OutputEncoding { get; public set; }
    public static bool KeyAvailable { get; }
    public static TextWriter Out { get; }
    public static TextWriter Error { get; }
    public static bool IsInputRedirected { get; }
    public static bool IsOutputRedirected { get; }
    public static bool IsErrorRedirected { get; }
    public static int CursorSize { get; public set; }
    [SupportedOSPlatformAttribute("windows")]
public static bool NumberLock { get; }
    [SupportedOSPlatformAttribute("windows")]
public static bool CapsLock { get; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static ConsoleColor BackgroundColor { get; public set; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static ConsoleColor ForegroundColor { get; public set; }
    public static int BufferWidth { get; public set; }
    public static int BufferHeight { get; public set; }
    public static int WindowLeft { get; public set; }
    public static int WindowTop { get; public set; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static int WindowWidth { get; public set; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static int WindowHeight { get; public set; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static int LargestWindowWidth { get; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static int LargestWindowHeight { get; }
    public static bool CursorVisible { get; public set; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static int CursorLeft { get; public set; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static int CursorTop { get; public set; }
    public static string Title { get; public set; }
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static bool TreatControlCAsInput { get; public set; }
    private static Console();
    public static TextReader get_In();
    public static Encoding get_InputEncoding();
    public static void set_InputEncoding(Encoding value);
    public static Encoding get_OutputEncoding();
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void set_OutputEncoding(Encoding value);
    public static bool get_KeyAvailable();
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static ConsoleKeyInfo ReadKey();
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static ConsoleKeyInfo ReadKey(bool intercept);
    public static TextWriter get_Out();
    public static TextWriter get_Error();
    private static TextWriter CreateOutputWriter(Stream outputStream);
    public static bool get_IsInputRedirected();
    public static bool get_IsOutputRedirected();
    public static bool get_IsErrorRedirected();
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static int get_CursorSize();
    [SupportedOSPlatformAttribute("windows")]
public static void set_CursorSize(int value);
    public static bool get_NumberLock();
    public static bool get_CapsLock();
    public static ConsoleColor get_BackgroundColor();
    public static void set_BackgroundColor(ConsoleColor value);
    public static ConsoleColor get_ForegroundColor();
    public static void set_ForegroundColor(ConsoleColor value);
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void ResetColor();
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static int get_BufferWidth();
    [SupportedOSPlatformAttribute("windows")]
public static void set_BufferWidth(int value);
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static int get_BufferHeight();
    [SupportedOSPlatformAttribute("windows")]
public static void set_BufferHeight(int value);
    [SupportedOSPlatformAttribute("windows")]
public static void SetBufferSize(int width, int height);
    public static int get_WindowLeft();
    [SupportedOSPlatformAttribute("windows")]
public static void set_WindowLeft(int value);
    public static int get_WindowTop();
    [SupportedOSPlatformAttribute("windows")]
public static void set_WindowTop(int value);
    public static int get_WindowWidth();
    public static void set_WindowWidth(int value);
    public static int get_WindowHeight();
    public static void set_WindowHeight(int value);
    [SupportedOSPlatformAttribute("windows")]
public static void SetWindowPosition(int left, int top);
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void SetWindowSize(int width, int height);
    public static int get_LargestWindowWidth();
    public static int get_LargestWindowHeight();
    [SupportedOSPlatformAttribute("windows")]
public static bool get_CursorVisible();
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void set_CursorVisible(bool value);
    public static int get_CursorLeft();
    public static void set_CursorLeft(int value);
    public static int get_CursorTop();
    public static void set_CursorTop(int value);
    [NullableContextAttribute("0")]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static ValueTuple`2<int, int> GetCursorPosition();
    [SupportedOSPlatformAttribute("windows")]
public static string get_Title();
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void set_Title(string value);
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Beep();
    [SupportedOSPlatformAttribute("windows")]
public static void Beep(int frequency, int duration);
    [SupportedOSPlatformAttribute("windows")]
public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);
    [SupportedOSPlatformAttribute("windows")]
public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Clear();
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void SetCursorPosition(int left, int top);
    [NullableContextAttribute("2")]
public static void add_CancelKeyPress(ConsoleCancelEventHandler value);
    [NullableContextAttribute("2")]
public static void remove_CancelKeyPress(ConsoleCancelEventHandler value);
    public static bool get_TreatControlCAsInput();
    public static void set_TreatControlCAsInput(bool value);
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static Stream OpenStandardInput();
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
public static Stream OpenStandardInput(int bufferSize);
    public static Stream OpenStandardOutput();
    public static Stream OpenStandardOutput(int bufferSize);
    public static Stream OpenStandardError();
    public static Stream OpenStandardError(int bufferSize);
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void SetIn(TextReader newIn);
    public static void SetOut(TextWriter newOut);
    public static void SetError(TextWriter newError);
    [UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
public static int Read();
    [NullableContextAttribute("2")]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
public static string ReadLine();
    public static void WriteLine();
    public static void WriteLine(bool value);
    public static void WriteLine(char value);
    [NullableContextAttribute("2")]
public static void WriteLine(Char[] buffer);
    public static void WriteLine(Char[] buffer, int index, int count);
    public static void WriteLine(decimal value);
    public static void WriteLine(double value);
    public static void WriteLine(float value);
    public static void WriteLine(int value);
    [CLSCompliantAttribute("False")]
public static void WriteLine(UInt32 value);
    public static void WriteLine(long value);
    [CLSCompliantAttribute("False")]
public static void WriteLine(ulong value);
    [NullableContextAttribute("2")]
public static void WriteLine(object value);
    [NullableContextAttribute("2")]
public static void WriteLine(string value);
    public static void WriteLine(string format, object arg0);
    [NullableContextAttribute("2")]
public static void WriteLine(string format, object arg0, object arg1);
    [NullableContextAttribute("2")]
public static void WriteLine(string format, object arg0, object arg1, object arg2);
    public static void WriteLine(string format, Object[] arg);
    public static void Write(string format, object arg0);
    [NullableContextAttribute("2")]
public static void Write(string format, object arg0, object arg1);
    [NullableContextAttribute("2")]
public static void Write(string format, object arg0, object arg1, object arg2);
    public static void Write(string format, Object[] arg);
    public static void Write(bool value);
    public static void Write(char value);
    [NullableContextAttribute("2")]
public static void Write(Char[] buffer);
    public static void Write(Char[] buffer, int index, int count);
    public static void Write(double value);
    public static void Write(decimal value);
    public static void Write(float value);
    public static void Write(int value);
    [CLSCompliantAttribute("False")]
public static void Write(UInt32 value);
    public static void Write(long value);
    [CLSCompliantAttribute("False")]
public static void Write(ulong value);
    [NullableContextAttribute("2")]
public static void Write(object value);
    [NullableContextAttribute("2")]
public static void Write(string value);
    private static void HandlePosixSignal(PosixSignalContext ctx);
    [CompilerGeneratedAttribute]
internal static TextReader <get_In>g__EnsureInitialized|14_0();
    [CompilerGeneratedAttribute]
internal static TextWriter <get_Out>g__EnsureInitialized|26_0();
    [CompilerGeneratedAttribute]
internal static TextWriter <get_Error>g__EnsureInitialized|28_0();
    [CompilerGeneratedAttribute]
internal static StrongBox`1<bool> <get_IsInputRedirected>g__EnsureInitialized|34_0();
    [CompilerGeneratedAttribute]
internal static StrongBox`1<bool> <get_IsOutputRedirected>g__EnsureInitialized|36_0();
    [CompilerGeneratedAttribute]
internal static StrongBox`1<bool> <get_IsErrorRedirected>g__EnsureInitialized|38_0();
}
public class System.ConsoleCancelEventArgs : EventArgs {
    private ConsoleSpecialKey _type;
    [CompilerGeneratedAttribute]
private bool <Cancel>k__BackingField;
    public bool Cancel { get; public set; }
    public ConsoleSpecialKey SpecialKey { get; }
    internal ConsoleCancelEventArgs(ConsoleSpecialKey type);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
    public ConsoleSpecialKey get_SpecialKey();
}
public class System.ConsoleCancelEventHandler : MulticastDelegate {
    public ConsoleCancelEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ConsoleCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConsoleCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.ConsoleColor : Enum {
    public int value__;
    public static ConsoleColor Black;
    public static ConsoleColor DarkBlue;
    public static ConsoleColor DarkGreen;
    public static ConsoleColor DarkCyan;
    public static ConsoleColor DarkRed;
    public static ConsoleColor DarkMagenta;
    public static ConsoleColor DarkYellow;
    public static ConsoleColor Gray;
    public static ConsoleColor DarkGray;
    public static ConsoleColor Blue;
    public static ConsoleColor Green;
    public static ConsoleColor Cyan;
    public static ConsoleColor Red;
    public static ConsoleColor Magenta;
    public static ConsoleColor Yellow;
    public static ConsoleColor White;
}
public enum System.ConsoleKey : Enum {
    public int value__;
    public static ConsoleKey None;
    public static ConsoleKey Backspace;
    public static ConsoleKey Tab;
    public static ConsoleKey Clear;
    public static ConsoleKey Enter;
    public static ConsoleKey Pause;
    public static ConsoleKey Escape;
    public static ConsoleKey Spacebar;
    public static ConsoleKey PageUp;
    public static ConsoleKey PageDown;
    public static ConsoleKey End;
    public static ConsoleKey Home;
    public static ConsoleKey LeftArrow;
    public static ConsoleKey UpArrow;
    public static ConsoleKey RightArrow;
    public static ConsoleKey DownArrow;
    public static ConsoleKey Select;
    public static ConsoleKey Print;
    public static ConsoleKey Execute;
    public static ConsoleKey PrintScreen;
    public static ConsoleKey Insert;
    public static ConsoleKey Delete;
    public static ConsoleKey Help;
    public static ConsoleKey D0;
    public static ConsoleKey D1;
    public static ConsoleKey D2;
    public static ConsoleKey D3;
    public static ConsoleKey D4;
    public static ConsoleKey D5;
    public static ConsoleKey D6;
    public static ConsoleKey D7;
    public static ConsoleKey D8;
    public static ConsoleKey D9;
    public static ConsoleKey A;
    public static ConsoleKey B;
    public static ConsoleKey C;
    public static ConsoleKey D;
    public static ConsoleKey E;
    public static ConsoleKey F;
    public static ConsoleKey G;
    public static ConsoleKey H;
    public static ConsoleKey I;
    public static ConsoleKey J;
    public static ConsoleKey K;
    public static ConsoleKey L;
    public static ConsoleKey M;
    public static ConsoleKey N;
    public static ConsoleKey O;
    public static ConsoleKey P;
    public static ConsoleKey Q;
    public static ConsoleKey R;
    public static ConsoleKey S;
    public static ConsoleKey T;
    public static ConsoleKey U;
    public static ConsoleKey V;
    public static ConsoleKey W;
    public static ConsoleKey X;
    public static ConsoleKey Y;
    public static ConsoleKey Z;
    public static ConsoleKey LeftWindows;
    public static ConsoleKey RightWindows;
    public static ConsoleKey Applications;
    public static ConsoleKey Sleep;
    public static ConsoleKey NumPad0;
    public static ConsoleKey NumPad1;
    public static ConsoleKey NumPad2;
    public static ConsoleKey NumPad3;
    public static ConsoleKey NumPad4;
    public static ConsoleKey NumPad5;
    public static ConsoleKey NumPad6;
    public static ConsoleKey NumPad7;
    public static ConsoleKey NumPad8;
    public static ConsoleKey NumPad9;
    public static ConsoleKey Multiply;
    public static ConsoleKey Add;
    public static ConsoleKey Separator;
    public static ConsoleKey Subtract;
    public static ConsoleKey Decimal;
    public static ConsoleKey Divide;
    public static ConsoleKey F1;
    public static ConsoleKey F2;
    public static ConsoleKey F3;
    public static ConsoleKey F4;
    public static ConsoleKey F5;
    public static ConsoleKey F6;
    public static ConsoleKey F7;
    public static ConsoleKey F8;
    public static ConsoleKey F9;
    public static ConsoleKey F10;
    public static ConsoleKey F11;
    public static ConsoleKey F12;
    public static ConsoleKey F13;
    public static ConsoleKey F14;
    public static ConsoleKey F15;
    public static ConsoleKey F16;
    public static ConsoleKey F17;
    public static ConsoleKey F18;
    public static ConsoleKey F19;
    public static ConsoleKey F20;
    public static ConsoleKey F21;
    public static ConsoleKey F22;
    public static ConsoleKey F23;
    public static ConsoleKey F24;
    public static ConsoleKey BrowserBack;
    public static ConsoleKey BrowserForward;
    public static ConsoleKey BrowserRefresh;
    public static ConsoleKey BrowserStop;
    public static ConsoleKey BrowserSearch;
    public static ConsoleKey BrowserFavorites;
    public static ConsoleKey BrowserHome;
    public static ConsoleKey VolumeMute;
    public static ConsoleKey VolumeDown;
    public static ConsoleKey VolumeUp;
    public static ConsoleKey MediaNext;
    public static ConsoleKey MediaPrevious;
    public static ConsoleKey MediaStop;
    public static ConsoleKey MediaPlay;
    public static ConsoleKey LaunchMail;
    public static ConsoleKey LaunchMediaSelect;
    public static ConsoleKey LaunchApp1;
    public static ConsoleKey LaunchApp2;
    public static ConsoleKey Oem1;
    public static ConsoleKey OemPlus;
    public static ConsoleKey OemComma;
    public static ConsoleKey OemMinus;
    public static ConsoleKey OemPeriod;
    public static ConsoleKey Oem2;
    public static ConsoleKey Oem3;
    public static ConsoleKey Oem4;
    public static ConsoleKey Oem5;
    public static ConsoleKey Oem6;
    public static ConsoleKey Oem7;
    public static ConsoleKey Oem8;
    public static ConsoleKey Oem102;
    public static ConsoleKey Process;
    public static ConsoleKey Packet;
    public static ConsoleKey Attention;
    public static ConsoleKey CrSel;
    public static ConsoleKey ExSel;
    public static ConsoleKey EraseEndOfFile;
    public static ConsoleKey Play;
    public static ConsoleKey Zoom;
    public static ConsoleKey NoName;
    public static ConsoleKey Pa1;
    public static ConsoleKey OemClear;
}
[IsReadOnlyAttribute]
public class System.ConsoleKeyInfo : ValueType {
    private char _keyChar;
    private ConsoleKey _key;
    private ConsoleModifiers _mods;
    public char KeyChar { get; }
    public ConsoleKey Key { get; }
    public ConsoleModifiers Modifiers { get; }
    public ConsoleKeyInfo(char keyChar, ConsoleKey key, bool shift, bool alt, bool control);
    public char get_KeyChar();
    public ConsoleKey get_Key();
    public ConsoleModifiers get_Modifiers();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(ConsoleKeyInfo obj);
    public static bool op_Equality(ConsoleKeyInfo a, ConsoleKeyInfo b);
    public static bool op_Inequality(ConsoleKeyInfo a, ConsoleKeyInfo b);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum System.ConsoleModifiers : Enum {
    public int value__;
    public static ConsoleModifiers None;
    public static ConsoleModifiers Alt;
    public static ConsoleModifiers Shift;
    public static ConsoleModifiers Control;
}
internal static class System.ConsolePal : object {
    private static int s_cursorVersion;
    private static int s_cursorLeft;
    private static int s_cursorTop;
    private static int s_windowWidth;
    private static int s_windowHeight;
    private static int s_invalidateCachedSettings;
    private static Lazy`1<TerminalFormatStrings> s_terminalFormatStringsInstance;
    private static SyncTextReader s_stdInReader;
    private static ConsoleColor s_trackedForegroundColor;
    private static ConsoleColor s_trackedBackgroundColor;
    private static bool s_everReceivedCursorPositionResponse;
    private static bool s_firstCursorPositionRequest;
    private static String[0...,0...] s_fgbgAndColorStrings;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_initialized;
    internal static byte s_posixDisableValue;
    internal static byte s_veraseCharacter;
    internal static byte s_veolCharacter;
    internal static byte s_veol2Character;
    internal static byte s_veofCharacter;
    public static TerminalFormatStrings TerminalFormatStringsInstance { get; }
    public static Encoding InputEncoding { get; }
    public static Encoding OutputEncoding { get; }
    internal static SyncTextReader StdInReader { get; }
    public static bool KeyAvailable { get; }
    public static bool TreatControlCAsInput { get; public set; }
    public static ConsoleColor ForegroundColor { get; public set; }
    public static ConsoleColor BackgroundColor { get; public set; }
    public static bool NumberLock { get; }
    public static bool CapsLock { get; }
    unknown static int CursorSize {public set; }
    public static string Title { get; public set; }
    public static int BufferWidth { get; public set; }
    public static int BufferHeight { get; public set; }
    public static int LargestWindowWidth { get; }
    public static int LargestWindowHeight { get; }
    unknown static int WindowLeft {public set; }
    unknown static int WindowTop {public set; }
    public static int WindowWidth { get; public set; }
    public static int WindowHeight { get; public set; }
    public static bool CursorVisible { get; public set; }
    private static ConsolePal();
    public static TerminalFormatStrings get_TerminalFormatStringsInstance();
    public static Stream OpenStandardInput();
    public static Stream OpenStandardOutput();
    public static Stream OpenStandardError();
    public static Encoding get_InputEncoding();
    public static Encoding get_OutputEncoding();
    internal static SyncTextReader get_StdInReader();
    internal static TextReader GetOrCreateReader();
    public static bool get_KeyAvailable();
    public static ConsoleKeyInfo ReadKey(bool intercept);
    public static bool get_TreatControlCAsInput();
    public static void set_TreatControlCAsInput(bool value);
    public static ConsoleColor get_ForegroundColor();
    public static void set_ForegroundColor(ConsoleColor value);
    public static ConsoleColor get_BackgroundColor();
    public static void set_BackgroundColor(ConsoleColor value);
    public static void ResetColor();
    public static bool get_NumberLock();
    public static bool get_CapsLock();
    public static void set_CursorSize(int value);
    public static string get_Title();
    public static void set_Title(string value);
    public static void Beep();
    public static void Clear();
    public static void SetCursorPosition(int left, int top);
    private static void SetCachedCursorPosition(int left, int top, Nullable`1<int> version);
    private static void InvalidateCachedCursorPosition();
    private static bool TryGetCachedCursorPosition(Int32& left, Int32& top);
    public static int get_BufferWidth();
    public static void set_BufferWidth(int value);
    public static int get_BufferHeight();
    public static void set_BufferHeight(int value);
    public static int get_LargestWindowWidth();
    public static int get_LargestWindowHeight();
    public static void set_WindowLeft(int value);
    public static void set_WindowTop(int value);
    public static int get_WindowWidth();
    public static void set_WindowWidth(int value);
    public static int get_WindowHeight();
    public static void set_WindowHeight(int value);
    private static void GetWindowSize(Int32& width, Int32& height);
    public static void SetWindowSize(int width, int height);
    public static bool get_CursorVisible();
    public static void set_CursorVisible(bool value);
    public static ValueTuple`2<int, int> GetCursorPosition();
    internal static bool TryGetCursorPosition(Int32& left, Int32& top, bool reinitializeForRead);
    private static bool IsHandleRedirected(SafeFileHandle fd);
    public static bool IsInputRedirectedCore();
    public static bool IsOutputRedirectedCore();
    public static bool IsErrorRedirectedCore();
    private static Encoding GetConsoleEncoding();
    public static void Beep(int frequency, int duration);
    public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
    public static void SetBufferSize(int width, int height);
    public static void SetConsoleInputEncoding(Encoding enc);
    public static void SetConsoleOutputEncoding(Encoding enc);
    public static void SetWindowPosition(int left, int top);
    private static void RefreshColors(ConsoleColor& toChange, ConsoleColor value);
    private static void WriteSetColorString(bool foreground, ConsoleColor color);
    private static void WriteResetColorString();
    internal static void EnsureConsoleInitialized();
    private static void EnsureInitializedCore();
    private static int Read(SafeFileHandle fd, Span`1<byte> buffer);
    internal static void Write(SafeFileHandle fd, ReadOnlySpan`1<byte> buffer, bool mayChangeCursorPosition);
    private static void UpdatedCachedCursorPosition(Byte* bufPtr, int count, int cursorVersion);
    private static void CheckTerminalSettingsInvalidated();
    [UnmanagedCallersOnlyAttribute]
private static void InvalidateTerminalSettings();
    internal static void WriteStdoutAnsiString(string value, bool mayChangeCursorPosition);
    [CompilerGeneratedAttribute]
internal static SyncTextReader <get_StdInReader>g__EnsureInitialized|19_0();
    [CompilerGeneratedAttribute]
internal static bool <TryGetCursorPosition>g__BufferUntil|82_1(byte toFind, Span`1& dst, Int32& dstPos, Int32& foundPos);
    [CompilerGeneratedAttribute]
internal static bool <TryGetCursorPosition>g__AppendToStdInReaderUntil|82_2(byte toFind, StdInReader reader, Span`1<byte> foundByteDst, Int32& foundByteDstPos, Int32& foundPos);
    [CompilerGeneratedAttribute]
internal static void <TryGetCursorPosition>g__ReadRowOrCol|82_3(int startExclusive, int endExclusive, StdInReader reader, ReadOnlySpan`1<byte> source, Int32& result);
    [CompilerGeneratedAttribute]
internal static void <TryGetCursorPosition>g__TransferBytes|82_0(ReadOnlySpan`1<byte> src, StdInReader dst);
}
public enum System.ConsoleSpecialKey : Enum {
    public int value__;
    public static ConsoleSpecialKey ControlC;
    public static ConsoleSpecialKey ControlBreak;
}
internal static class System.ConsoleUtils : object {
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) s_emitAnsiColorCodes;
    public static bool EmitAnsiColorCodes { get; }
    private static ConsoleUtils();
    public static bool get_EmitAnsiColorCodes();
}
internal abstract class System.IO.ConsoleStream : Stream {
    private bool _canRead;
    private bool _canWrite;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal ConsoleStream(FileAccess access);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    protected virtual void Dispose(bool disposing);
    public sealed virtual bool get_CanRead();
    public sealed virtual bool get_CanWrite();
    public sealed virtual bool get_CanSeek();
    public sealed virtual long get_Length();
    public sealed virtual long get_Position();
    public sealed virtual void set_Position(long value);
    public virtual void Flush();
    public sealed virtual void SetLength(long value);
    public sealed virtual long Seek(long offset, SeekOrigin origin);
    protected void ValidateRead(Byte[] buffer, int offset, int count);
    protected void ValidateWrite(Byte[] buffer, int offset, int count);
}
internal static class System.IO.Error : object {
    internal static Exception GetFileNotOpen();
    internal static Exception GetReadNotSupported();
    internal static Exception GetSeekNotSupported();
    internal static Exception GetWriteNotSupported();
}
internal static class System.IO.KeyParser : object {
    internal static ConsoleKeyInfo Parse(Char[] buffer, TerminalFormatStrings terminalFormatStrings, byte posixDisableValue, byte veraseCharacter, Int32& startIndex, int endIndex);
    private static bool TryParseTerminalInputSequence(Char[] buffer, TerminalFormatStrings terminalFormatStrings, ConsoleKeyInfo& parsed, Int32& startIndex, int endIndex);
    private static ConsoleKeyInfo ParseFromSingleChar(char single, bool isAlt);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<ConsoleKey, ConsoleModifiers> <TryParseTerminalInputSequence>g__MapKeyIdOXterm|7_0(char character, bool isRxvt);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<ConsoleKey, ConsoleModifiers> <TryParseTerminalInputSequence>g__MapSCO|7_1(char character);
    [CompilerGeneratedAttribute]
internal static ConsoleKey <TryParseTerminalInputSequence>g__MapEscapeSequenceNumber|7_2(byte number);
    [CompilerGeneratedAttribute]
internal static ConsoleModifiers <TryParseTerminalInputSequence>g__MapXtermModifiers|7_3(char modifier);
    [CompilerGeneratedAttribute]
internal static bool <TryParseTerminalInputSequence>g__IsSequenceEndTag|7_4(char character);
    [CompilerGeneratedAttribute]
internal static bool <TryParseTerminalInputSequence>g__IsRxvtModifier|7_5(char character);
    [CompilerGeneratedAttribute]
internal static ConsoleModifiers <TryParseTerminalInputSequence>g__MapRxvtModifiers|7_6(char modifier);
    [CompilerGeneratedAttribute]
internal static ConsoleKeyInfo <TryParseTerminalInputSequence>g__Create|7_7(char keyChar, ConsoleKey key, ConsoleModifiers modifiers);
    [CompilerGeneratedAttribute]
internal static ConsoleKey <ParseFromSingleChar>g__UppercaseCharacter|8_0(char single, Boolean& isShift);
    [CompilerGeneratedAttribute]
internal static ConsoleKey <ParseFromSingleChar>g__ControlAndLetterPressed|8_1(char single, bool isAlt, Char& keyChar, Boolean& isCtrl);
    [CompilerGeneratedAttribute]
internal static ConsoleKey <ParseFromSingleChar>g__ControlAndDigitPressed|8_2(char single, Char& keyChar, Boolean& isCtrl);
}
internal static class System.IO.PersistedFiles : object {
    internal static string GetHomeDirectory();
    private static bool TryGetHomeDirectoryFromPasswd(Byte* buf, int bufLen, String& path);
}
internal class System.IO.StdInReader : TextReader {
    private static string s_moveLeftString;
    private static string s_clearToEol;
    private StringBuilder _readLineSB;
    private Stack`1<ConsoleKeyInfo> _tmpKeys;
    private Stack`1<ConsoleKeyInfo> _availableKeys;
    private Encoding _encoding;
    private Encoder _bufferReadEncoder;
    private Char[] _unprocessedBufferToBeRead;
    private int _startIndex;
    private int _endIndex;
    internal static bool StdinReady { get; }
    internal StdInReader(Encoding encoding);
    internal bool IsUnprocessedBufferEmpty();
    internal void AppendExtraBuffer(ReadOnlySpan`1<byte> buffer);
    internal static int ReadStdin(Byte* buffer, int bufferSize);
    public virtual string ReadLine();
    public int ReadLine(Span`1<byte> buffer);
    private bool ReadLineCore(bool consumeKeys);
    public virtual int Read();
    public virtual int Peek();
    private int ReadOrPeek(bool peek);
    private static bool IsEol(char c);
    public ConsoleKeyInfo ReadKey(Boolean& previouslyProcessed);
    private ConsoleKeyInfo ReadKey();
    internal static bool get_StdinReady();
}
internal class System.IO.SyncTextReader : TextReader {
    internal TextReader _in;
    internal StdInReader Inner { get; }
    public bool KeyAvailable { get; }
    internal SyncTextReader(TextReader t);
    public static SyncTextReader GetSynchronizedTextReader(TextReader reader);
    protected virtual void Dispose(bool disposing);
    public virtual int Peek();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual int ReadBlock(Char[] buffer, int index, int count);
    public virtual string ReadLine();
    public virtual string ReadToEnd();
    public virtual Task`1<string> ReadLineAsync();
    public virtual ValueTask`1<string> ReadLineAsync(CancellationToken cancellationToken);
    public virtual Task`1<string> ReadToEndAsync();
    public virtual Task`1<string> ReadToEndAsync(CancellationToken cancellationToken);
    public virtual Task`1<int> ReadBlockAsync(Char[] buffer, int index, int count);
    public virtual Task`1<int> ReadAsync(Char[] buffer, int index, int count);
    internal StdInReader get_Inner();
    public ConsoleKeyInfo ReadKey(Boolean& previouslyProcessed);
    public bool get_KeyAvailable();
    public int ReadLine(Span`1<byte> buffer);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string NotSupported_UnseekableStream { get; }
    internal static string ObjectDisposed_FileClosed { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_PathTooLong { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string Arg_InvalidConsoleColor { get; }
    internal static string IO_TermInfoInvalid { get; }
    internal static string InvalidOperation_PrintF { get; }
    internal static string InvalidOperation_ConsoleReadKeyOnFile { get; }
    internal static string InvalidOperation_SetWindowSize { get; }
    internal static string ArgumentOutOfRange_ConsoleKey { get; }
    internal static string ArgumentOutOfRange_ConsoleBufferBoundaries { get; }
    internal static string InvalidOperation_ConsoleKeyAvailableOnFile { get; }
    internal static string IO_PathTooLong_Path { get; }
    internal static string IO_TermInfoInvalidMagicNumber { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_NotSupported_UnseekableStream();
    internal static string get_ObjectDisposed_FileClosed();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_PathTooLong();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_Arg_InvalidConsoleColor();
    internal static string get_IO_TermInfoInvalid();
    internal static string get_InvalidOperation_PrintF();
    internal static string get_InvalidOperation_ConsoleReadKeyOnFile();
    internal static string get_InvalidOperation_SetWindowSize();
    internal static string get_ArgumentOutOfRange_ConsoleKey();
    internal static string get_ArgumentOutOfRange_ConsoleBufferBoundaries();
    internal static string get_InvalidOperation_ConsoleKeyAvailableOnFile();
    internal static string get_IO_PathTooLong_Path();
    internal static string get_IO_TermInfoInvalidMagicNumber();
}
internal class System.TerminalFormatStrings : object {
    public string Foreground;
    public string Background;
    public string Reset;
    public int MaxColors;
    public int Columns;
    public int Lines;
    public string CursorVisible;
    public string CursorInvisible;
    public string Title;
    public string Bell;
    public string Clear;
    public string CursorAddress;
    public string CursorLeft;
    public string ClrEol;
    public Dictionary`2<ReadOnlyMemory`1<char>, ConsoleKeyInfo> KeyFormatToConsoleKey;
    public int MaxKeyFormatLength;
    public int MinKeyFormatLength;
    public string KeypadXmit;
    public bool IsRxvtTerm;
    public TerminalFormatStrings(Database db);
    private static string GetTitle(Database db);
    private void AddKey(Database db, WellKnownStrings keyId, ConsoleKey key);
    private void AddKey(Database db, WellKnownStrings keyId, ConsoleKey key, bool shift, bool alt, bool control);
    private void AddPrefixKey(Database db, string extendedNamePrefix, ConsoleKey key);
    private void AddKey(Database db, string extendedName, ConsoleKey key, bool shift, bool alt, bool control);
}
internal static class System.TermInfo : object {
}
internal class System.Text.ConsoleEncoding : Encoding {
    private Encoding _encoding;
    public int CodePage { get; }
    public bool IsSingleByte { get; }
    public string EncodingName { get; }
    public string WebName { get; }
    internal ConsoleEncoding(Encoding encoding);
    public virtual Byte[] GetPreamble();
    public virtual int get_CodePage();
    public virtual bool get_IsSingleByte();
    public virtual string get_EncodingName();
    public virtual string get_WebName();
    public virtual int GetByteCount(Char[] chars);
    public virtual int GetByteCount(Char* chars, int count);
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(string s);
    public virtual int GetBytes(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual Byte[] GetBytes(Char[] chars);
    public virtual Byte[] GetBytes(Char[] chars, int index, int count);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual Byte[] GetBytes(string s);
    public virtual int GetBytes(string s, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetCharCount(Byte* bytes, int count);
    public virtual int GetCharCount(Byte[] bytes);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte* bytes, int byteCount, Char* chars, int charCount);
    public virtual Char[] GetChars(Byte[] bytes);
    public virtual Char[] GetChars(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual Decoder GetDecoder();
    public virtual Encoder GetEncoder();
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual string GetString(Byte[] bytes);
    public virtual string GetString(Byte[] bytes, int index, int count);
}
[ExtensionAttribute]
internal static class System.Text.EncodingExtensions : object {
    [ExtensionAttribute]
public static Encoding RemovePreamble(Encoding encoding);
}
internal static class System.Text.EncodingHelper : object {
    private static String[] s_localeEnvVars;
    private static EncodingHelper();
    internal static Encoding GetEncodingFromCharset();
    private static string GetCharset();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public virtual string ToString();
    public void Append(char c);
    public void Append(string s);
    private void AppendSlow(string s);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
    internal void AppendSpanFormattable(T value, string format, IFormatProvider provider);
}
