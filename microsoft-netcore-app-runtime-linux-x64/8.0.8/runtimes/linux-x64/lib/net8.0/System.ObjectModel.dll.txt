internal static class FxResources.System.ObjectModel.SR : object {
}
internal static class System.Collections.CollectionHelpers : object {
    internal static void ValidateCopyToArguments(int sourceCount, Array array, int index);
}
internal class System.Collections.Generic.CollectionDebugView`1 : object {
    private ICollection`1<T> _collection;
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public CollectionDebugView`1(ICollection`1<T> collection);
    public T[] get_Items();
}
internal static class System.Collections.ObjectModel.EventArgsCache : object {
    internal static PropertyChangedEventArgs CountPropertyChanged;
    internal static PropertyChangedEventArgs IndexerPropertyChanged;
    internal static NotifyCollectionChangedEventArgs ResetCollectionChanged;
    private static EventArgsCache();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("System.Collections.Generic.CollectionDebugView`1")]
[DebuggerDisplayAttribute("Count = {Count}")]
[TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public abstract class System.Collections.ObjectModel.KeyedCollection`2 : Collection`1<TItem> {
    private IEqualityComparer`1<TKey> comparer;
    private Dictionary`2<TKey, TItem> dict;
    private int keyCount;
    private int threshold;
    private List`1<TItem> Items { get; }
    public IEqualityComparer`1<TKey> Comparer { get; }
    public TItem Item { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
protected IDictionary`2<TKey, TItem> Dictionary { get; }
    protected KeyedCollection`2(IEqualityComparer`1<TKey> comparer);
    protected KeyedCollection`2(IEqualityComparer`1<TKey> comparer, int dictionaryCreationThreshold);
    private List`1<TItem> get_Items();
    public IEqualityComparer`1<TKey> get_Comparer();
    public TItem get_Item(TKey key);
    public bool Contains(TKey key);
    public bool TryGetValue(TKey key, TItem& item);
    private bool ContainsItem(TItem item);
    public bool Remove(TKey key);
    protected IDictionary`2<TKey, TItem> get_Dictionary();
    protected void ChangeItemKey(TItem item, TKey newKey);
    protected virtual void ClearItems();
    protected abstract virtual TKey GetKeyForItem(TItem item);
    protected virtual void InsertItem(int index, TItem item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, TItem item);
    private void AddKey(TKey key, TItem item);
    private void CreateDictionary();
    private void RemoveKey(TKey key);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerTypeProxyAttribute("System.Collections.Generic.CollectionDebugView`1")]
[DebuggerDisplayAttribute("Count = {Count}")]
[TypeForwardedFromAttribute("WindowsBase, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Collections.ObjectModel.ObservableCollection`1 : Collection`1<T> {
    private SimpleMonitor<T> _monitor;
    private int _blockReentrancyCount;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [NullableContextAttribute("1")]
public ObservableCollection`1(IEnumerable`1<T> collection);
    [NullableContextAttribute("1")]
public ObservableCollection`1(List`1<T> list);
    public void Move(int oldIndex, int newIndex);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void ClearItems();
    protected virtual void RemoveItem(int index);
    [NullableContextAttribute("1")]
protected virtual void InsertItem(int index, T item);
    [NullableContextAttribute("1")]
protected virtual void SetItem(int index, T item);
    protected virtual void MoveItem(int oldIndex, int newIndex);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    [CompilerGeneratedAttribute]
protected virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    [NullableContextAttribute("1")]
protected IDisposable BlockReentrancy();
    protected void CheckReentrancy();
    private void OnCountPropertyChanged();
    private void OnIndexerPropertyChanged();
    private void OnCollectionChanged(NotifyCollectionChangedAction action, object item, int index);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, object item, int index, int oldIndex);
    private void OnCollectionChanged(NotifyCollectionChangedAction action, object oldItem, object newItem, int index);
    private void OnCollectionReset();
    private SimpleMonitor<T> EnsureMonitorInitialized();
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
    [OnDeserializedAttribute]
private void OnDeserialized(StreamingContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[DebuggerTypeProxyAttribute("System.Collections.Generic.CollectionDebugView`1")]
[DebuggerDisplayAttribute("Count = {Count}")]
[TypeForwardedFromAttribute("WindowsBase, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Collections.ObjectModel.ReadOnlyObservableCollection`1 : ReadOnlyCollection`1<T> {
    [CompilerGeneratedAttribute]
private static ReadOnlyObservableCollection`1<T> <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [NullableAttribute("1")]
public static ReadOnlyObservableCollection`1<T> Empty { get; }
    [NullableContextAttribute("1")]
public ReadOnlyObservableCollection`1(ObservableCollection`1<T> list);
    private static ReadOnlyObservableCollection`1();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static ReadOnlyObservableCollection`1<T> get_Empty();
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Specialized.INotifyCollectionChanged.remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs args);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
protected virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("1")]
protected virtual void OnPropertyChanged(PropertyChangedEventArgs args);
    private void HandleCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void HandlePropertyChanged(object sender, PropertyChangedEventArgs e);
}
[NullableContextAttribute("2")]
public interface System.Collections.Specialized.INotifyCollectionChanged {
    [CompilerGeneratedAttribute]
public abstract virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
}
public enum System.Collections.Specialized.NotifyCollectionChangedAction : Enum {
    public int value__;
    public static NotifyCollectionChangedAction Add;
    public static NotifyCollectionChangedAction Remove;
    public static NotifyCollectionChangedAction Replace;
    public static NotifyCollectionChangedAction Move;
    public static NotifyCollectionChangedAction Reset;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Collections.Specialized.NotifyCollectionChangedEventArgs : EventArgs {
    private NotifyCollectionChangedAction _action;
    private IList _newItems;
    private IList _oldItems;
    private int _newStartingIndex;
    private int _oldStartingIndex;
    public NotifyCollectionChangedAction Action { get; }
    public IList NewItems { get; }
    public IList OldItems { get; }
    public int NewStartingIndex { get; }
    public int OldStartingIndex { get; }
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int startingIndex);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem, int index);
    [NullableContextAttribute("1")]
public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems);
    [NullableContextAttribute("1")]
public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex);
    public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int index, int oldIndex);
    public NotifyCollectionChangedAction get_Action();
    public IList get_NewItems();
    public IList get_OldItems();
    public int get_NewStartingIndex();
    public int get_OldStartingIndex();
}
public class System.Collections.Specialized.NotifyCollectionChangedEventHandler : MulticastDelegate {
    public NotifyCollectionChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, NotifyCollectionChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NotifyCollectionChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
internal class System.Collections.Specialized.ReadOnlyList : object {
    private IList _list;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object Item { get; public set; }
    public object SyncRoot { get; }
    internal ReadOnlyList(IList list);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual object get_SyncRoot();
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
}
[DefaultMemberAttribute("Item")]
internal class System.Collections.Specialized.SingleItemReadOnlyList : object {
    private object _item;
    public object Item { get; public set; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public SingleItemReadOnlyList(object item);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    [IteratorStateMachineAttribute("System.Collections.Specialized.SingleItemReadOnlyList/<GetEnumerator>d__15")]
public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual void Insert(int index, object value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.DataErrorsChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; }
    public DataErrorsChangedEventArgs(string propertyName);
    [CompilerGeneratedAttribute]
public virtual string get_PropertyName();
}
[NullableContextAttribute("1")]
public interface System.ComponentModel.INotifyDataErrorInfo {
    public bool HasErrors { get; }
    public abstract virtual bool get_HasErrors();
    public abstract virtual IEnumerable GetErrors(string propertyName);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ErrorsChanged(EventHandler`1<DataErrorsChangedEventArgs> value);
}
[NullableContextAttribute("2")]
public interface System.ComponentModel.INotifyPropertyChanged {
    [CompilerGeneratedAttribute]
public abstract virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
}
[NullableContextAttribute("2")]
public interface System.ComponentModel.INotifyPropertyChanging {
    [CompilerGeneratedAttribute]
public abstract virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.PropertyChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; }
    public PropertyChangedEventArgs(string propertyName);
    [CompilerGeneratedAttribute]
public virtual string get_PropertyName();
}
public class System.ComponentModel.PropertyChangedEventHandler : MulticastDelegate {
    public PropertyChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, PropertyChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PropertyChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.PropertyChangingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string PropertyName { get; }
    public PropertyChangingEventArgs(string propertyName);
    [CompilerGeneratedAttribute]
public virtual string get_PropertyName();
}
public class System.ComponentModel.PropertyChangingEventHandler : MulticastDelegate {
    public PropertyChangingEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, PropertyChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PropertyChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.TypeConverterAttribute : Attribute {
    public static TypeConverterAttribute Default;
    [CompilerGeneratedAttribute]
private string <ConverterTypeName>k__BackingField;
    [DynamicallyAccessedMembersAttribute("3")]
public string ConverterTypeName { get; }
    public TypeConverterAttribute(Type type);
    public TypeConverterAttribute(string typeName);
    private static TypeConverterAttribute();
    [CompilerGeneratedAttribute]
public string get_ConverterTypeName();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class System.ComponentModel.TypeDescriptionProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [DynamicallyAccessedMembersAttribute("1")]
public string TypeName { get; }
    public TypeDescriptionProviderAttribute(string typeName);
    public TypeDescriptionProviderAttribute(Type type);
    [CompilerGeneratedAttribute]
public string get_TypeName();
}
[NullableContextAttribute("1")]
public interface System.Reflection.ICustomTypeProvider {
    public abstract virtual Type GetCustomType();
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ArgumentOutOfRange_InvalidThreshold { get; }
    internal static string Argument_ItemNotExist { get; }
    internal static string Argument_AddingDuplicate { get; }
    internal static string Arg_NonZeroLowerBound { get; }
    internal static string Arg_ArrayPlusOffTooSmall { get; }
    internal static string NotSupported_ReadOnlyCollection { get; }
    internal static string ObservableCollectionReentrancyNotAllowed { get; }
    internal static string WrongActionForCtor { get; }
    internal static string MustBeResetAddOrRemoveActionForCtor { get; }
    internal static string ResetActionRequiresNullItem { get; }
    internal static string ResetActionRequiresIndexMinus1 { get; }
    internal static string Arg_RankMultiDimNotSupported { get; }
    internal static string Arg_KeyNotFoundWithKey { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ArgumentOutOfRange_InvalidThreshold();
    internal static string get_Argument_ItemNotExist();
    internal static string get_Argument_AddingDuplicate();
    internal static string get_Arg_NonZeroLowerBound();
    internal static string get_Arg_ArrayPlusOffTooSmall();
    internal static string get_NotSupported_ReadOnlyCollection();
    internal static string get_ObservableCollectionReentrancyNotAllowed();
    internal static string get_WrongActionForCtor();
    internal static string get_MustBeResetAddOrRemoveActionForCtor();
    internal static string get_ResetActionRequiresNullItem();
    internal static string get_ResetActionRequiresIndexMinus1();
    internal static string get_Arg_RankMultiDimNotSupported();
    internal static string get_Arg_KeyNotFoundWithKey();
}
[NullableContextAttribute("2")]
[TypeForwardedFromAttribute("PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[TypeConverterAttribute("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
[ValueSerializerAttribute("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
public interface System.Windows.Input.ICommand {
    [CompilerGeneratedAttribute]
public abstract virtual void add_CanExecuteChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_CanExecuteChanged(EventHandler value);
    public abstract virtual bool CanExecute(object parameter);
    public abstract virtual void Execute(object parameter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1244")]
[TypeForwardedFromAttribute("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Windows.Markup.ValueSerializerAttribute : Attribute {
    [DynamicallyAccessedMembersAttribute("3")]
private Type _valueSerializerType;
    [DynamicallyAccessedMembersAttribute("3")]
private string _valueSerializerTypeName;
    [DynamicallyAccessedMembersAttribute("3")]
public Type ValueSerializerType { get; }
    [DynamicallyAccessedMembersAttribute("3")]
public string ValueSerializerTypeName { get; }
    public ValueSerializerAttribute(Type valueSerializerType);
    public ValueSerializerAttribute(string valueSerializerTypeName);
    public Type get_ValueSerializerType();
    public string get_ValueSerializerTypeName();
}
