internal static class FxResources.System.Transactions.Local.SR : object {
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string AsyncFlowAndESInteropNotSupported { get; }
    internal static string BadAsyncResult { get; }
    internal static string BadResourceManagerId { get; }
    internal static string CannotPromoteSnapshot { get; }
    internal static string CannotSetCurrent { get; }
    internal static string CurrentDelegateSet { get; }
    internal static string DisposeScope { get; }
    internal static string EnlistmentStateException { get; }
    internal static string EsNotSupported { get; }
    internal static string InternalError { get; }
    internal static string InvalidArgument { get; }
    internal static string InvalidIPromotableSinglePhaseNotificationSpecified { get; }
    internal static string InvalidScopeThread { get; }
    internal static string PromotionFailed { get; }
    internal static string PromotedReturnedInvalidValue { get; }
    internal static string PromotedTransactionExists { get; }
    internal static string TooLate { get; }
    internal static string TraceTransactionTimeout { get; }
    internal static string TransactionAborted { get; }
    internal static string TransactionAlreadyCompleted { get; }
    internal static string TransactionIndoubt { get; }
    internal static string TransactionManagerCommunicationException { get; }
    internal static string TransactionScopeComplete { get; }
    internal static string TransactionScopeIncorrectCurrent { get; }
    internal static string TransactionScopeInvalidNesting { get; }
    internal static string TransactionScopeIsolationLevelDifferentFromTransaction { get; }
    internal static string TransactionScopeTimerObjectInvalid { get; }
    internal static string TransactionStateException { get; }
    internal static string UnexpectedFailureOfThreadPool { get; }
    internal static string UnexpectedTimerFailure { get; }
    internal static string UnrecognizedRecoveryInformation { get; }
    internal static string VolEnlistNoRecoveryInfo { get; }
    internal static string DistributedTxIDInTransactionException { get; }
    internal static string PromoterTypeInvalid { get; }
    internal static string PromoterTypeUnrecognized { get; }
    internal static string DistributedNotSupported { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static ResourceManager get_ResourceManager();
    internal static string get_AsyncFlowAndESInteropNotSupported();
    internal static string get_BadAsyncResult();
    internal static string get_BadResourceManagerId();
    internal static string get_CannotPromoteSnapshot();
    internal static string get_CannotSetCurrent();
    internal static string get_CurrentDelegateSet();
    internal static string get_DisposeScope();
    internal static string get_EnlistmentStateException();
    internal static string get_EsNotSupported();
    internal static string get_InternalError();
    internal static string get_InvalidArgument();
    internal static string get_InvalidIPromotableSinglePhaseNotificationSpecified();
    internal static string get_InvalidScopeThread();
    internal static string get_PromotionFailed();
    internal static string get_PromotedReturnedInvalidValue();
    internal static string get_PromotedTransactionExists();
    internal static string get_TooLate();
    internal static string get_TraceTransactionTimeout();
    internal static string get_TransactionAborted();
    internal static string get_TransactionAlreadyCompleted();
    internal static string get_TransactionIndoubt();
    internal static string get_TransactionManagerCommunicationException();
    internal static string get_TransactionScopeComplete();
    internal static string get_TransactionScopeIncorrectCurrent();
    internal static string get_TransactionScopeInvalidNesting();
    internal static string get_TransactionScopeIsolationLevelDifferentFromTransaction();
    internal static string get_TransactionScopeTimerObjectInvalid();
    internal static string get_TransactionStateException();
    internal static string get_UnexpectedFailureOfThreadPool();
    internal static string get_UnexpectedTimerFailure();
    internal static string get_UnrecognizedRecoveryInformation();
    internal static string get_VolEnlistNoRecoveryInfo();
    internal static string get_DistributedTxIDInTransactionException();
    internal static string get_PromoterTypeInvalid();
    internal static string get_PromoterTypeUnrecognized();
    internal static string get_DistributedNotSupported();
}
internal abstract class System.Transactions.ActiveStates : TransactionState {
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void AddOutcomeRegistrant(InternalTransaction tx, TransactionCompletedEventHandler transactionCompletedDelegate);
}
internal class System.Transactions.Bucket : object {
    private bool _timedOut;
    private int _index;
    private int _size;
    private InternalTransaction[] _transactions;
    internal WeakReference nextBucketWeak;
    private Bucket _previous;
    private BucketSet _owningSet;
    internal Bucket(BucketSet owningSet);
    internal bool Add(InternalTransaction tx);
    internal void Remove(InternalTransaction tx);
    internal void TimeoutTransactions();
}
internal class System.Transactions.BucketSet : object {
    internal object nextSetWeak;
    internal BucketSet prevSet;
    private TransactionTable _table;
    private long _absoluteTimeout;
    internal Bucket headBucket;
    internal long AbsoluteTimeout { get; }
    internal BucketSet(TransactionTable table, long absoluteTimeout);
    internal long get_AbsoluteTimeout();
    internal void Add(InternalTransaction newTx);
    internal void TimeoutTransactions();
}
internal static class System.Transactions.CallContextCurrentData : object {
    private static AsyncLocal`1<ContextKey> s_currentTransaction;
    private static ConditionalWeakTable`2<ContextKey, ContextData> s_contextDataTable;
    private static CallContextCurrentData();
    public static ContextData CreateOrGetCurrentData(ContextKey contextKey);
    public static void ClearCurrentData(ContextKey contextKey, bool removeContextData);
    public static bool TryGetCurrentData(ContextData& currentData);
}
internal class System.Transactions.CheapUnfairReaderWriterLock : object {
    private object _writerFinishedEvent;
    private int _readersIn;
    private int _readersOut;
    private bool _writerPresent;
    private object _syncRoot;
    private object SyncRoot { get; }
    private bool ReadersPresent { get; }
    private ManualResetEvent WriterFinishedEvent { get; }
    private object get_SyncRoot();
    private bool get_ReadersPresent();
    private ManualResetEvent get_WriterFinishedEvent();
    public int EnterReadLock();
    public void EnterWriteLock();
    public void ExitReadLock();
    public void ExitWriteLock();
}
[UnsupportedOSPlatformAttribute("browser")]
public class System.Transactions.CommittableTransaction : Transaction {
    [NullableAttribute("2")]
private object System.IAsyncResult.AsyncState { get; }
    private bool System.IAsyncResult.CompletedSynchronously { get; }
    [NullableAttribute("1")]
private WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    private bool System.IAsyncResult.IsCompleted { get; }
    public CommittableTransaction(TimeSpan timeout);
    public CommittableTransaction(TransactionOptions options);
    internal CommittableTransaction(IsolationLevel isoLevel, TimeSpan timeout);
    [NullableContextAttribute("2")]
public IAsyncResult BeginCommit(AsyncCallback asyncCallback, object asyncState);
    public void Commit();
    internal virtual void InternalDispose();
    [NullableContextAttribute("1")]
public void EndCommit(IAsyncResult asyncResult);
    private sealed virtual override object System.IAsyncResult.get_AsyncState();
    private sealed virtual override bool System.IAsyncResult.get_CompletedSynchronously();
    private sealed virtual override WaitHandle System.IAsyncResult.get_AsyncWaitHandle();
    private sealed virtual override bool System.IAsyncResult.get_IsCompleted();
}
internal static class System.Transactions.Configuration.AppSettings : object {
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_settingsInitialized;
    private static object s_appSettingsLock;
    private static bool s_includeDistributedTxIdInExceptionMessage;
    internal static bool IncludeDistributedTxIdInExceptionMessage { get; }
    private static AppSettings();
    private static void EnsureSettingsLoaded();
    internal static bool get_IncludeDistributedTxIdInExceptionMessage();
}
internal class System.Transactions.Configuration.DefaultSettingsSection : object {
    private static DefaultSettingsSection s_section;
    private static TimeSpan s_timeout;
    [CompilerGeneratedAttribute]
private static string <DistributedTransactionManagerName>k__BackingField;
    public static string DistributedTransactionManagerName { get; }
    public static TimeSpan Timeout { get; }
    private static DefaultSettingsSection();
    [CompilerGeneratedAttribute]
public static string get_DistributedTransactionManagerName();
    public static TimeSpan get_Timeout();
}
internal class System.Transactions.Configuration.MachineSettingsSection : object {
    private static MachineSettingsSection s_section;
    private static TimeSpan s_maxTimeout;
    public static TimeSpan MaxTimeout { get; }
    private static MachineSettingsSection();
    public static TimeSpan get_MaxTimeout();
}
internal class System.Transactions.ContextData : object {
    internal TransactionScope CurrentScope;
    internal Transaction CurrentTransaction;
    internal DefaultComContextState DefaultComContextState;
    internal WeakReference WeakDefaultComContext;
    internal bool _asyncFlow;
    [ThreadStaticAttribute]
private static ContextData t_staticData;
    internal static ContextData TLSCurrentData { get; internal set; }
    internal ContextData(bool asyncFlow);
    internal static ContextData get_TLSCurrentData();
    internal static void set_TLSCurrentData(ContextData value);
    internal static ContextData LookupContextData(TxLookup defaultLookup);
}
internal class System.Transactions.ContextKey : object {
}
internal enum System.Transactions.DefaultComContextState : Enum {
    public int value__;
    public static DefaultComContextState Unknown;
    public static DefaultComContextState Unavailable;
    public static DefaultComContextState Available;
}
public enum System.Transactions.DependentCloneOption : Enum {
    public int value__;
    public static DependentCloneOption BlockCommitUntilComplete;
    public static DependentCloneOption RollbackIfNotComplete;
}
public class System.Transactions.DependentTransaction : Transaction {
    private bool _blocking;
    internal DependentTransaction(IsolationLevel isoLevel, InternalTransaction internalTransaction, bool blocking);
    public void Complete();
}
internal class System.Transactions.DurableEnlistmentAborting : DurableEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void Aborted(InternalEnlistment enlistment, Exception e);
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
}
internal class System.Transactions.DurableEnlistmentActive : DurableEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
    internal virtual void InternalAborted(InternalEnlistment enlistment);
    internal virtual void ChangeStateCommitting(InternalEnlistment enlistment);
    internal virtual void ChangeStatePromoted(InternalEnlistment enlistment, IPromotedEnlistment promotedEnlistment);
    internal virtual void ChangeStateDelegated(InternalEnlistment enlistment);
}
internal class System.Transactions.DurableEnlistmentCommitting : DurableEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
    internal virtual void Committed(InternalEnlistment enlistment);
    internal virtual void Aborted(InternalEnlistment enlistment, Exception e);
    internal virtual void InDoubt(InternalEnlistment enlistment, Exception e);
}
internal class System.Transactions.DurableEnlistmentDelegated : DurableEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void Committed(InternalEnlistment enlistment);
    internal virtual void Aborted(InternalEnlistment enlistment, Exception e);
    internal virtual void InDoubt(InternalEnlistment enlistment, Exception e);
}
internal class System.Transactions.DurableEnlistmentEnded : DurableEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void InternalAborted(InternalEnlistment enlistment);
    internal virtual void InDoubt(InternalEnlistment enlistment, Exception e);
}
internal abstract class System.Transactions.DurableEnlistmentState : EnlistmentState {
    private static DurableEnlistmentActive s_durableEnlistmentActive;
    private static DurableEnlistmentAborting s_durableEnlistmentAborting;
    private static DurableEnlistmentCommitting s_durableEnlistmentCommitting;
    private static DurableEnlistmentDelegated s_durableEnlistmentDelegated;
    private static DurableEnlistmentEnded s_durableEnlistmentEnded;
    private static object s_classSyncObject;
    internal static DurableEnlistmentActive DurableEnlistmentActive { get; }
    protected static DurableEnlistmentAborting DurableEnlistmentAborting { get; }
    protected static DurableEnlistmentCommitting DurableEnlistmentCommitting { get; }
    protected static DurableEnlistmentDelegated DurableEnlistmentDelegated { get; }
    protected static DurableEnlistmentEnded DurableEnlistmentEnded { get; }
    internal static DurableEnlistmentActive get_DurableEnlistmentActive();
    protected static DurableEnlistmentAborting get_DurableEnlistmentAborting();
    protected static DurableEnlistmentCommitting get_DurableEnlistmentCommitting();
    protected static DurableEnlistmentDelegated get_DurableEnlistmentDelegated();
    protected static DurableEnlistmentEnded get_DurableEnlistmentEnded();
}
internal class System.Transactions.DurableInternalEnlistment : InternalEnlistment {
    internal Guid _resourceManagerIdentifier;
    internal Guid ResourceManagerIdentifier { get; }
    internal DurableInternalEnlistment(Enlistment enlistment, Guid resourceManagerIdentifier, InternalTransaction transaction, IEnlistmentNotification twoPhaseNotifications, ISinglePhaseNotification singlePhaseNotifications, Transaction atomicTransaction);
    protected DurableInternalEnlistment(Enlistment enlistment, IEnlistmentNotification twoPhaseNotifications);
    internal virtual Guid get_ResourceManagerIdentifier();
}
internal abstract class System.Transactions.EnlistableStates : ActiveStates {
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual void Timeout(InternalTransaction tx);
    internal virtual void CompleteBlockingClone(InternalTransaction tx);
    internal virtual void CompleteAbortingClone(InternalTransaction tx);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
    internal virtual void Promote(InternalTransaction tx);
    internal virtual Byte[] PromotedToken(InternalTransaction tx);
}
public class System.Transactions.Enlistment : object {
    internal InternalEnlistment _internalEnlistment;
    [NullableAttribute("1")]
internal InternalEnlistment InternalEnlistment { get; }
    internal Enlistment(InternalEnlistment internalEnlistment);
    internal Enlistment(Guid resourceManagerIdentifier, InternalTransaction transaction, IEnlistmentNotification twoPhaseNotifications, ISinglePhaseNotification singlePhaseNotifications, Transaction atomicTransaction);
    internal Enlistment(InternalTransaction transaction, IEnlistmentNotification twoPhaseNotifications, ISinglePhaseNotification singlePhaseNotifications, Transaction atomicTransaction, EnlistmentOptions enlistmentOptions);
    internal Enlistment(InternalTransaction transaction, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Transaction atomicTransaction);
    internal Enlistment(IEnlistmentNotification twoPhaseNotifications, InternalTransaction transaction, Transaction atomicTransaction);
    internal Enlistment(IEnlistmentNotification twoPhaseNotifications, object syncRoot);
    public void Done();
    internal InternalEnlistment get_InternalEnlistment();
}
[FlagsAttribute]
public enum System.Transactions.EnlistmentOptions : Enum {
    public int value__;
    public static EnlistmentOptions None;
    public static EnlistmentOptions EnlistDuringPrepareRequired;
}
internal abstract class System.Transactions.EnlistmentState : object {
    internal static EnlistmentStatePromoted _enlistmentStatePromoted;
    private static object s_classSyncObject;
    internal static EnlistmentStatePromoted EnlistmentStatePromoted { get; }
    internal abstract virtual void EnterState(InternalEnlistment enlistment);
    internal static EnlistmentStatePromoted get_EnlistmentStatePromoted();
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
    internal virtual void Prepared(InternalEnlistment enlistment);
    internal virtual void ForceRollback(InternalEnlistment enlistment, Exception e);
    internal virtual void Committed(InternalEnlistment enlistment);
    internal virtual void Aborted(InternalEnlistment enlistment, Exception e);
    internal virtual void InDoubt(InternalEnlistment enlistment, Exception e);
    internal virtual Byte[] RecoveryInformation(InternalEnlistment enlistment);
    internal virtual void InternalAborted(InternalEnlistment enlistment);
    internal virtual void InternalCommitted(InternalEnlistment enlistment);
    internal virtual void InternalIndoubt(InternalEnlistment enlistment);
    internal virtual void ChangeStateCommitting(InternalEnlistment enlistment);
    internal virtual void ChangeStatePromoted(InternalEnlistment enlistment, IPromotedEnlistment promotedEnlistment);
    internal virtual void ChangeStateDelegated(InternalEnlistment enlistment);
    internal virtual void ChangeStatePreparing(InternalEnlistment enlistment);
    internal virtual void ChangeStateSinglePhaseCommit(InternalEnlistment enlistment);
}
internal class System.Transactions.EnlistmentStatePromoted : EnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
    internal virtual void Prepared(InternalEnlistment enlistment);
    internal virtual void ForceRollback(InternalEnlistment enlistment, Exception e);
    internal virtual void Committed(InternalEnlistment enlistment);
    internal virtual void Aborted(InternalEnlistment enlistment, Exception e);
    internal virtual void InDoubt(InternalEnlistment enlistment, Exception e);
    internal virtual Byte[] RecoveryInformation(InternalEnlistment enlistment);
}
[IsReadOnlyAttribute]
internal class System.Transactions.EnlistmentTraceIdentifier : ValueType {
    private Guid _resourceManagerIdentifier;
    private TransactionTraceIdentifier _transactionTraceIdentifier;
    private int _enlistmentIdentifier;
    public static EnlistmentTraceIdentifier Empty { get; }
    public int EnlistmentIdentifier { get; }
    public EnlistmentTraceIdentifier(Guid resourceManagerIdentifier, TransactionTraceIdentifier transactionTraceId, int enlistmentIdentifier);
    public static EnlistmentTraceIdentifier get_Empty();
    public int get_EnlistmentIdentifier();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EnlistmentTraceIdentifier other);
    public static bool op_Equality(EnlistmentTraceIdentifier left, EnlistmentTraceIdentifier right);
}
internal enum System.Transactions.EnlistmentType : Enum {
    public int value__;
    public static EnlistmentType Volatile;
    public static EnlistmentType Durable;
    public static EnlistmentType PromotableSinglePhase;
}
internal static class System.Transactions.EnterpriseServices : object {
    [CompilerGeneratedAttribute]
private static bool <CreatedServiceDomain>k__BackingField;
    internal static bool CreatedServiceDomain { get; }
    internal static void VerifyEnterpriseServicesOk();
    [CompilerGeneratedAttribute]
internal static bool get_CreatedServiceDomain();
    internal static void PushServiceDomain();
    internal static void LeaveServiceDomain();
    private static void ThrowNotSupported();
}
public enum System.Transactions.EnterpriseServicesInteropOption : Enum {
    public int value__;
    public static EnterpriseServicesInteropOption None;
    public static EnterpriseServicesInteropOption Automatic;
    public static EnterpriseServicesInteropOption Full;
}
internal class System.Transactions.FinalizedObject : object {
    private Guid _identifier;
    private InternalTransaction _internalTransaction;
    internal FinalizedObject(InternalTransaction internalTransaction, Guid identifier);
    private void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
}
public class System.Transactions.HostCurrentTransactionCallback : MulticastDelegate {
    public HostCurrentTransactionCallback(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual Transaction Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Transaction EndInvoke(IAsyncResult result);
}
[GuidAttribute("0fb15084-af41-11ce-bd2b-204c4f4f5020")]
[InterfaceTypeAttribute("1")]
public interface System.Transactions.IDtcTransaction {
    public abstract virtual void Commit(int retaining, int commitType, int reserved);
    public abstract virtual void Abort(IntPtr reason, int retaining, int async);
    public abstract virtual void GetTransactionInfo(IntPtr transactionInformation);
}
[NullableContextAttribute("1")]
public interface System.Transactions.IEnlistmentNotification {
    public abstract virtual void Prepare(PreparingEnlistment preparingEnlistment);
    public abstract virtual void Commit(Enlistment enlistment);
    public abstract virtual void Rollback(Enlistment enlistment);
    public abstract virtual void InDoubt(Enlistment enlistment);
}
internal interface System.Transactions.IEnlistmentNotificationInternal {
    public abstract virtual void Prepare(IPromotedEnlistment preparingEnlistment);
    public abstract virtual void Commit(IPromotedEnlistment enlistment);
    public abstract virtual void Rollback(IPromotedEnlistment enlistment);
    public abstract virtual void InDoubt(IPromotedEnlistment enlistment);
}
internal class System.Transactions.InternalEnlistment : object {
    internal EnlistmentState _twoPhaseState;
    protected IEnlistmentNotification _twoPhaseNotifications;
    protected ISinglePhaseNotification _singlePhaseNotifications;
    protected InternalTransaction _transaction;
    private Transaction _atomicTransaction;
    private EnlistmentTraceIdentifier _traceIdentifier;
    private int _enlistmentId;
    private Enlistment _enlistment;
    private PreparingEnlistment _preparingEnlistment;
    private SinglePhaseEnlistment _singlePhaseEnlistment;
    private IPromotedEnlistment _promotedEnlistment;
    internal Guid DistributedTxId { get; }
    internal EnlistmentState State { get; internal set; }
    internal Enlistment Enlistment { get; }
    internal PreparingEnlistment PreparingEnlistment { get; }
    internal SinglePhaseEnlistment SinglePhaseEnlistment { get; }
    internal InternalTransaction Transaction { get; }
    internal object SyncRoot { get; }
    internal IEnlistmentNotification EnlistmentNotification { get; }
    internal ISinglePhaseNotification SinglePhaseNotification { get; }
    internal IPromotableSinglePhaseNotification PromotableSinglePhaseNotification { get; }
    internal IPromotedEnlistment PromotedEnlistment { get; internal set; }
    internal EnlistmentTraceIdentifier EnlistmentTraceId { get; }
    internal Guid ResourceManagerIdentifier { get; }
    protected InternalEnlistment(Enlistment enlistment, IEnlistmentNotification twoPhaseNotifications);
    protected InternalEnlistment(Enlistment enlistment, InternalTransaction transaction, Transaction atomicTransaction);
    internal InternalEnlistment(Enlistment enlistment, InternalTransaction transaction, IEnlistmentNotification twoPhaseNotifications, ISinglePhaseNotification singlePhaseNotifications, Transaction atomicTransaction);
    internal InternalEnlistment(Enlistment enlistment, IEnlistmentNotification twoPhaseNotifications, InternalTransaction transaction, Transaction atomicTransaction);
    internal Guid get_DistributedTxId();
    internal EnlistmentState get_State();
    internal void set_State(EnlistmentState value);
    internal Enlistment get_Enlistment();
    internal PreparingEnlistment get_PreparingEnlistment();
    internal SinglePhaseEnlistment get_SinglePhaseEnlistment();
    internal InternalTransaction get_Transaction();
    internal virtual object get_SyncRoot();
    internal IEnlistmentNotification get_EnlistmentNotification();
    internal ISinglePhaseNotification get_SinglePhaseNotification();
    internal virtual IPromotableSinglePhaseNotification get_PromotableSinglePhaseNotification();
    internal IPromotedEnlistment get_PromotedEnlistment();
    internal void set_PromotedEnlistment(IPromotedEnlistment value);
    internal EnlistmentTraceIdentifier get_EnlistmentTraceId();
    internal virtual void FinishEnlistment();
    internal virtual void CheckComplete();
    internal virtual Guid get_ResourceManagerIdentifier();
    private sealed virtual override void System.Transactions.ISinglePhaseNotificationInternal.SinglePhaseCommit(IPromotedEnlistment singlePhaseEnlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotificationInternal.Prepare(IPromotedEnlistment preparingEnlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotificationInternal.Commit(IPromotedEnlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotificationInternal.Rollback(IPromotedEnlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotificationInternal.InDoubt(IPromotedEnlistment enlistment);
}
internal class System.Transactions.InternalTransaction : object {
    private TransactionState _transactionState;
    internal TransactionState _promoteState;
    internal Guid _promoterType;
    internal Byte[] promotedToken;
    internal Guid _distributedTransactionIdentifierNonMSDTC;
    internal FinalizedObject _finalizedObject;
    internal int _transactionHash;
    internal static int _nextHash;
    private long _absoluteTimeout;
    private long _creationTime;
    internal InternalEnlistment _durableEnlistment;
    internal VolatileEnlistmentSet _phase0Volatiles;
    internal VolatileEnlistmentSet _phase1Volatiles;
    internal int _phase0VolatileWaveCount;
    internal OletxDependentTransaction _phase0WaveDependentClone;
    internal int _phase0WaveDependentCloneCount;
    internal OletxDependentTransaction _abortingDependentClone;
    internal int _abortingDependentCloneCount;
    internal Bucket _tableBucket;
    internal int _bucketIndex;
    internal TransactionCompletedEventHandler _transactionCompletedDelegate;
    private OletxTransaction _promotedTransaction;
    internal Exception _innerException;
    internal int _cloneCount;
    internal int _enlistmentCount;
    internal ManualResetEvent modreq(System.Runtime.CompilerServices.IsVolatile) _asyncResultEvent;
    internal bool _asyncCommit;
    internal AsyncCallback _asyncCallback;
    internal object _asyncState;
    internal bool _needPulse;
    internal TransactionInformation _transactionInformation;
    internal CommittableTransaction _committableTransaction;
    internal Transaction _outcomeSource;
    private static object s_classSyncObject;
    private static string s_instanceIdentifier;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _traceIdentifierInited;
    private TransactionTraceIdentifier _traceIdentifier;
    internal ITransactionPromoter _promoter;
    internal bool _attemptingPSPEPromote;
    internal TransactionState State { get; internal set; }
    internal int TransactionHash { get; }
    internal long AbsoluteTimeout { get; }
    internal long CreationTime { get; internal set; }
    internal OletxTransaction PromotedTransaction { get; internal set; }
    internal Guid DistributedTxId { get; }
    internal static string InstanceIdentifier { get; }
    internal TransactionTraceIdentifier TransactionTraceId { get; }
    internal InternalTransaction(TimeSpan timeout, CommittableTransaction committableTransaction);
    internal InternalTransaction(Transaction outcomeSource, OletxTransaction distributedTx);
    internal InternalTransaction(Transaction outcomeSource, ITransactionPromoter promoter);
    internal TransactionState get_State();
    internal void set_State(TransactionState value);
    internal int get_TransactionHash();
    internal long get_AbsoluteTimeout();
    internal long get_CreationTime();
    internal void set_CreationTime(long value);
    internal OletxTransaction get_PromotedTransaction();
    internal void set_PromotedTransaction(OletxTransaction value);
    internal Guid get_DistributedTxId();
    internal static string get_InstanceIdentifier();
    internal TransactionTraceIdentifier get_TransactionTraceId();
    internal void SetPromoterTypeToMSDTC();
    internal void ThrowIfPromoterTypeIsNotMSDTC();
    internal void SignalAsyncCompletion();
    internal void FireCompletion();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
public interface System.Transactions.IPromotableSinglePhaseNotification {
    public abstract virtual void Initialize();
    public abstract virtual void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
    public abstract virtual void Rollback(SinglePhaseEnlistment singlePhaseEnlistment);
}
internal interface System.Transactions.IPromotedEnlistment {
    public InternalEnlistment InternalEnlistment { get; public set; }
    public abstract virtual void EnlistmentDone();
    public abstract virtual void Prepared();
    public abstract virtual void ForceRollback();
    public abstract virtual void ForceRollback(Exception e);
    public abstract virtual void Committed();
    public abstract virtual void Aborted();
    public abstract virtual void Aborted(Exception e);
    public abstract virtual void InDoubt();
    public abstract virtual void InDoubt(Exception e);
    public abstract virtual Byte[] GetRecoveryInformation();
    public abstract virtual InternalEnlistment get_InternalEnlistment();
    public abstract virtual void set_InternalEnlistment(InternalEnlistment value);
}
public interface System.Transactions.ISimpleTransactionSuperior {
    public abstract virtual void Rollback();
}
public interface System.Transactions.ISinglePhaseNotification {
    [NullableContextAttribute("1")]
public abstract virtual void SinglePhaseCommit(SinglePhaseEnlistment singlePhaseEnlistment);
}
internal interface System.Transactions.ISinglePhaseNotificationInternal {
    public abstract virtual void SinglePhaseCommit(IPromotedEnlistment singlePhaseEnlistment);
}
public enum System.Transactions.IsolationLevel : Enum {
    public int value__;
    public static IsolationLevel Serializable;
    public static IsolationLevel RepeatableRead;
    public static IsolationLevel ReadCommitted;
    public static IsolationLevel ReadUncommitted;
    public static IsolationLevel Snapshot;
    public static IsolationLevel Chaos;
    public static IsolationLevel Unspecified;
}
[NullableContextAttribute("2")]
public interface System.Transactions.ITransactionPromoter {
    public abstract virtual Byte[] Promote();
}
internal enum System.Transactions.NotificationCall : Enum {
    public int value__;
    public static NotificationCall Prepare;
    public static NotificationCall Commit;
    public static NotificationCall Rollback;
    public static NotificationCall InDoubt;
    public static NotificationCall SinglePhaseCommit;
    public static NotificationCall Promote;
}
internal class System.Transactions.Oletx.OletxCommittableTransaction : OletxTransaction {
    internal void BeginCommit(InternalTransaction tx);
}
internal class System.Transactions.Oletx.OletxDependentTransaction : OletxTransaction {
    internal void Complete();
}
internal class System.Transactions.Oletx.OletxTransaction : object {
    [CompilerGeneratedAttribute]
private Exception <InnerException>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Identifier>k__BackingField;
    [CompilerGeneratedAttribute]
private RealOletxTransaction <RealTransaction>k__BackingField;
    [CompilerGeneratedAttribute]
private TransactionTraceIdentifier <TransactionTraceId>k__BackingField;
    [CompilerGeneratedAttribute]
private IsolationLevel <IsolationLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Transaction <SavedLtmPromotedTransaction>k__BackingField;
    internal Exception InnerException { get; }
    internal Guid Identifier { get; }
    internal RealOletxTransaction RealTransaction { get; }
    internal TransactionTraceIdentifier TransactionTraceId { get; }
    internal IsolationLevel IsolationLevel { get; }
    unknown Transaction SavedLtmPromotedTransaction {internal set; }
    protected OletxTransaction(SerializationInfo serializationInfo, StreamingContext context);
    [CompilerGeneratedAttribute]
internal Exception get_InnerException();
    [CompilerGeneratedAttribute]
internal Guid get_Identifier();
    [CompilerGeneratedAttribute]
internal RealOletxTransaction get_RealTransaction();
    [CompilerGeneratedAttribute]
internal TransactionTraceIdentifier get_TransactionTraceId();
    [CompilerGeneratedAttribute]
internal IsolationLevel get_IsolationLevel();
    [CompilerGeneratedAttribute]
internal void set_SavedLtmPromotedTransaction(Transaction value);
    internal IPromotedEnlistment EnlistVolatile(InternalEnlistment internalEnlistment, EnlistmentOptions enlistmentOptions);
    internal IPromotedEnlistment EnlistDurable(Guid resourceManagerIdentifier, DurableInternalEnlistment internalEnlistment, bool v, EnlistmentOptions enlistmentOptions);
    internal void Rollback();
    internal OletxDependentTransaction DependentClone(bool delayCommit);
    internal IPromotedEnlistment EnlistVolatile(VolatileDemultiplexer volatileDemux, EnlistmentOptions enlistmentOptions);
    internal static Byte[] GetExportCookie(Byte[] whereaboutsCopy);
    internal static Byte[] GetTransmitterPropagationToken();
    internal static IDtcTransaction GetDtcTransaction();
    public sealed virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext context);
    internal void Dispose();
    internal static Exception NotSupported();
}
internal class System.Transactions.Oletx.OletxTransactionManager : object {
    internal OletxTransactionManager(string nodeName);
    internal IPromotedEnlistment ReenlistTransaction(Guid resourceManagerIdentifier, Byte[] resourceManagerRecoveryInformation, RecoveringInternalEnlistment internalEnlistment);
    internal OletxCommittableTransaction CreateTransaction(TransactionOptions options);
    internal void ResourceManagerRecoveryComplete(Guid resourceManagerIdentifier);
    internal static Byte[] GetWhereabouts();
    internal static Transaction GetTransactionFromDtcTransaction(IDtcTransaction transactionNative);
    internal static OletxTransaction GetTransactionFromExportCookie(Byte[] cookie, Guid txId);
    internal static OletxTransaction GetOletxTransactionFromTransmitterPropagationToken(Byte[] propagationToken);
    internal static Exception NotSupported();
}
internal class System.Transactions.Phase0VolatileDemultiplexer : VolatileDemultiplexer {
    public Phase0VolatileDemultiplexer(InternalTransaction transaction);
    protected virtual void InternalPrepare();
    protected virtual void InternalCommit();
    protected virtual void InternalRollback();
    protected virtual void InternalInDoubt();
    public virtual void Prepare(IPromotedEnlistment en);
    public virtual void Commit(IPromotedEnlistment en);
    public virtual void Rollback(IPromotedEnlistment en);
    public virtual void InDoubt(IPromotedEnlistment en);
}
internal class System.Transactions.Phase1VolatileDemultiplexer : VolatileDemultiplexer {
    public Phase1VolatileDemultiplexer(InternalTransaction transaction);
    protected virtual void InternalPrepare();
    protected virtual void InternalCommit();
    protected virtual void InternalRollback();
    protected virtual void InternalInDoubt();
    public virtual void Prepare(IPromotedEnlistment en);
    public virtual void Commit(IPromotedEnlistment en);
    public virtual void Rollback(IPromotedEnlistment en);
    public virtual void InDoubt(IPromotedEnlistment en);
}
internal class System.Transactions.Phase1VolatileEnlistment : InternalEnlistment {
    public Phase1VolatileEnlistment(Enlistment enlistment, InternalTransaction transaction, IEnlistmentNotification twoPhaseNotifications, ISinglePhaseNotification singlePhaseNotifications, Transaction atomicTransaction);
    internal virtual void FinishEnlistment();
    internal virtual void CheckComplete();
}
public class System.Transactions.PreparingEnlistment : Enlistment {
    internal PreparingEnlistment(InternalEnlistment enlistment);
    public void Prepared();
    public void ForceRollback();
    [NullableContextAttribute("2")]
public void ForceRollback(Exception e);
    [NullableContextAttribute("1")]
public Byte[] RecoveryInformation();
}
internal class System.Transactions.PromotableInternalEnlistment : InternalEnlistment {
    private IPromotableSinglePhaseNotification _promotableNotificationInterface;
    internal IPromotableSinglePhaseNotification PromotableSinglePhaseNotification { get; }
    internal PromotableInternalEnlistment(Enlistment enlistment, InternalTransaction transaction, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Transaction atomicTransaction);
    internal virtual IPromotableSinglePhaseNotification get_PromotableSinglePhaseNotification();
}
internal class System.Transactions.RecoveringInternalEnlistment : DurableInternalEnlistment {
    private object _syncRoot;
    internal object SyncRoot { get; }
    internal RecoveringInternalEnlistment(Enlistment enlistment, IEnlistmentNotification twoPhaseNotifications, object syncRoot);
    internal virtual object get_SyncRoot();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Transactions.SinglePhaseEnlistment : Enlistment {
    internal SinglePhaseEnlistment(InternalEnlistment enlistment);
    public void Aborted();
    public void Aborted(Exception e);
    public void Committed();
    public void InDoubt();
    public void InDoubt(Exception e);
}
public class System.Transactions.SubordinateTransaction : Transaction {
    [NullableContextAttribute("1")]
public SubordinateTransaction(IsolationLevel isoLevel, ISimpleTransactionSuperior superior);
}
internal enum System.Transactions.TraceSourceType : Enum {
    public int value__;
    public static TraceSourceType TraceSourceBase;
    public static TraceSourceType TraceSourceLtm;
    public static TraceSourceType TraceSourceOleTx;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Transactions.Transaction : object {
    internal IsolationLevel _isoLevel;
    internal bool _complete;
    internal int _cloneId;
    internal int _disposed;
    internal InternalTransaction _internalTransaction;
    internal TransactionTraceIdentifier _traceIdentifier;
    [NullableAttribute("2")]
public static Transaction Current { get; public set; }
    internal bool Disposed { get; }
    internal Guid DistributedTxId { get; }
    public TransactionInformation TransactionInformation { get; }
    public IsolationLevel IsolationLevel { get; }
    public Guid PromoterType { get; }
    internal TransactionTraceIdentifier TransactionTraceId { get; }
    internal Transaction(IsolationLevel isoLevel, InternalTransaction internalTransaction);
    internal Transaction(OletxTransaction distributedTransaction);
    internal Transaction(IsolationLevel isoLevel, ISimpleTransactionSuperior superior);
    internal static EnterpriseServicesInteropOption InteropMode(TransactionScope currentScope);
    internal static Transaction FastGetTransaction(TransactionScope currentScope, ContextData contextData, Transaction& contextTransaction);
    internal static void GetCurrentTransactionAndScope(TxLookup defaultLookup, Transaction& current, TransactionScope& currentScope, Transaction& contextTransaction);
    [NullableContextAttribute("2")]
public static Transaction get_Current();
    [NullableContextAttribute("2")]
public static void set_Current(Transaction value);
    internal bool get_Disposed();
    internal Guid get_DistributedTxId();
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public static bool op_Equality(Transaction x, Transaction y);
    [NullableContextAttribute("2")]
public static bool op_Inequality(Transaction x, Transaction y);
    public TransactionInformation get_TransactionInformation();
    public IsolationLevel get_IsolationLevel();
    public Guid get_PromoterType();
    public Byte[] GetPromotedToken();
    public Enlistment EnlistDurable(Guid resourceManagerIdentifier, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions);
    public Enlistment EnlistDurable(Guid resourceManagerIdentifier, ISinglePhaseNotification singlePhaseNotification, EnlistmentOptions enlistmentOptions);
    public void Rollback();
    [NullableContextAttribute("2")]
public void Rollback(Exception e);
    public Enlistment EnlistVolatile(IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions);
    public Enlistment EnlistVolatile(ISinglePhaseNotification singlePhaseNotification, EnlistmentOptions enlistmentOptions);
    public Transaction Clone();
    internal Transaction InternalClone();
    public DependentTransaction DependentClone(DependentCloneOption cloneOption);
    internal TransactionTraceIdentifier get_TransactionTraceId();
    [NullableContextAttribute("2")]
public void add_TransactionCompleted(TransactionCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_TransactionCompleted(TransactionCompletedEventHandler value);
    public sealed virtual void Dispose();
    internal virtual void InternalDispose();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext context);
    public bool EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification promotableSinglePhaseNotification);
    public bool EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Guid promoterType);
    public Enlistment PromoteAndEnlistDurable(Guid resourceManagerIdentifier, IPromotableSinglePhaseNotification promotableNotification, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions);
    public void SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification promotableNotification, Guid distributedTransactionIdentifier);
    internal OletxTransaction Promote();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Transactions.TransactionAbortedException : TransactionException {
    public TransactionAbortedException(string message);
    public TransactionAbortedException(string message, Exception innerException);
    internal TransactionAbortedException(Exception innerException, Guid distributedTxId);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected TransactionAbortedException(SerializationInfo info, StreamingContext context);
    internal static TransactionAbortedException Create(string message, Exception innerException, Guid distributedTxId);
    internal static TransactionAbortedException Create(string message, Exception innerException);
}
public class System.Transactions.TransactionCompletedEventHandler : MulticastDelegate {
    public TransactionCompletedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TransactionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TransactionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Transactions.TransactionEventArgs : EventArgs {
    internal Transaction _transaction;
    public Transaction Transaction { get; }
    public Transaction get_Transaction();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Transactions.TransactionException : SystemException {
    public TransactionException(string message);
    public TransactionException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected TransactionException(SerializationInfo info, StreamingContext context);
    internal static bool IncludeDistributedTxId(Guid distributedTxId);
    internal static TransactionException Create(string message, Exception innerException);
    internal static Exception CreateEnlistmentStateException(Exception innerException, Guid distributedTxId);
    internal static Exception CreateInvalidOperationException(TraceSourceType traceSource, string message, Exception innerException);
    internal static TransactionException Create(string message, Guid distributedTxId);
    internal static TransactionException Create(string message, Exception innerException, Guid distributedTxId);
    internal static TransactionException CreateTransactionStateException(Exception innerException, Guid distributedTxId);
    internal static Exception CreateTransactionCompletedException(Guid distributedTxId);
    internal static Exception CreateInvalidOperationException(TraceSourceType traceSource, string message, Exception innerException, Guid distributedTxId);
}
internal enum System.Transactions.TransactionExceptionType : Enum {
    public int value__;
    public static TransactionExceptionType InvalidOperationException;
    public static TransactionExceptionType TransactionAbortedException;
    public static TransactionExceptionType TransactionException;
    public static TransactionExceptionType TransactionInDoubtException;
    public static TransactionExceptionType TransactionManagerCommunicationException;
    public static TransactionExceptionType UnrecognizedRecoveryInformation;
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Transactions.TransactionInDoubtException : TransactionException {
    public TransactionInDoubtException(string message);
    public TransactionInDoubtException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected TransactionInDoubtException(SerializationInfo info, StreamingContext context);
    internal static TransactionInDoubtException Create(TraceSourceType traceSource, string message, Exception innerException, Guid distributedTxId);
    internal static TransactionInDoubtException Create(TraceSourceType traceSource, string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Transactions.TransactionInformation : object {
    private InternalTransaction _internalTransaction;
    public string LocalIdentifier { get; }
    public Guid DistributedIdentifier { get; }
    public DateTime CreationTime { get; }
    public TransactionStatus Status { get; }
    internal TransactionInformation(InternalTransaction internalTransaction);
    public string get_LocalIdentifier();
    public Guid get_DistributedIdentifier();
    public DateTime get_CreationTime();
    public TransactionStatus get_Status();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Transactions.TransactionInterop : object {
    public static Guid PromoterTypeDtc;
    private static TransactionInterop();
    internal static OletxTransaction ConvertToOletxTransaction(Transaction transaction);
    public static Byte[] GetExportCookie(Transaction transaction, Byte[] whereabouts);
    public static Transaction GetTransactionFromExportCookie(Byte[] cookie);
    public static Byte[] GetTransmitterPropagationToken(Transaction transaction);
    public static Transaction GetTransactionFromTransmitterPropagationToken(Byte[] propagationToken);
    public static IDtcTransaction GetDtcTransaction(Transaction transaction);
    public static Transaction GetTransactionFromDtcTransaction(IDtcTransaction transactionNative);
    public static Byte[] GetWhereabouts();
    internal static OletxTransaction GetOletxTransactionFromTransmitterPropagationToken(Byte[] propagationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Transactions.TransactionManager : object {
    private static Hashtable s_promotedTransactionTable;
    private static TransactionTable s_transactionTable;
    private static TransactionStartedEventHandler s_distributedTransactionStartedDelegate;
    internal static HostCurrentTransactionCallback s_currentDelegate;
    internal static bool s_currentDelegateSet;
    private static object s_classSyncObject;
    private static bool s_defaultTimeoutValidated;
    private static long s_defaultTimeoutTicks;
    private static bool s_cachedMaxTimeout;
    private static TimeSpan s_maximumTimeout;
    internal static OletxTransactionManager distributedTransactionManager;
    [NullableAttribute("2")]
public static HostCurrentTransactionCallback HostCurrentCallback { get; public set; }
    private static object ClassSyncObject { get; }
    internal static IsolationLevel DefaultIsolationLevel { get; }
    public static TimeSpan DefaultTimeout { get; public set; }
    public static TimeSpan MaximumTimeout { get; public set; }
    public static bool ImplicitDistributedTransactions { get; public set; }
    internal static Hashtable PromotedTransactionTable { get; }
    internal static TransactionTable TransactionTable { get; }
    internal static OletxTransactionManager DistributedTransactionManager { get; }
    [NullableContextAttribute("2")]
public static void add_DistributedTransactionStarted(TransactionStartedEventHandler value);
    [NullableContextAttribute("2")]
public static void remove_DistributedTransactionStarted(TransactionStartedEventHandler value);
    internal static void ProcessExistingTransactions(TransactionStartedEventHandler eventHandler);
    internal static void FireDistributedTransactionStarted(Transaction transaction);
    [NullableContextAttribute("2")]
public static HostCurrentTransactionCallback get_HostCurrentCallback();
    [NullableContextAttribute("2")]
public static void set_HostCurrentCallback(HostCurrentTransactionCallback value);
    public static Enlistment Reenlist(Guid resourceManagerIdentifier, Byte[] recoveryInformation, IEnlistmentNotification enlistmentNotification);
    public static void RecoveryComplete(Guid resourceManagerIdentifier);
    private static object get_ClassSyncObject();
    internal static IsolationLevel get_DefaultIsolationLevel();
    public static TimeSpan get_DefaultTimeout();
    public static void set_DefaultTimeout(TimeSpan value);
    public static TimeSpan get_MaximumTimeout();
    public static void set_MaximumTimeout(TimeSpan value);
    public static bool get_ImplicitDistributedTransactions();
    [SupportedOSPlatformAttribute("windows")]
[RequiresUnreferencedCodeAttribute("Distributed transactions support may not be compatible with trimming. If your program creates a distributed transaction via System.Transactions, the correctness of the application cannot be guaranteed after trimming.")]
public static void set_ImplicitDistributedTransactions(bool value);
    internal static void ValidateIsolationLevel(IsolationLevel transactionIsolationLevel);
    internal static TimeSpan ValidateTimeout(TimeSpan transactionTimeout);
    internal static Transaction FindPromotedTransaction(Guid transactionIdentifier);
    internal static Transaction FindOrCreatePromotedTransaction(Guid transactionIdentifier, OletxTransaction dtx);
    internal static Hashtable get_PromotedTransactionTable();
    internal static TransactionTable get_TransactionTable();
    internal static OletxTransactionManager get_DistributedTransactionManager();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Transactions.TransactionManagerCommunicationException : TransactionException {
    public TransactionManagerCommunicationException(string message);
    public TransactionManagerCommunicationException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected TransactionManagerCommunicationException(SerializationInfo info, StreamingContext context);
}
public class System.Transactions.TransactionOptions : ValueType {
    private TimeSpan _timeout;
    private IsolationLevel _isolationLevel;
    public TimeSpan Timeout { get; public set; }
    public IsolationLevel IsolationLevel { get; public set; }
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public IsolationLevel get_IsolationLevel();
    public void set_IsolationLevel(IsolationLevel value);
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TransactionOptions other);
    public static bool op_Equality(TransactionOptions x, TransactionOptions y);
    public static bool op_Inequality(TransactionOptions x, TransactionOptions y);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System.Transactions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Transactions.TransactionPromotionException : TransactionException {
    public TransactionPromotionException(string message);
    public TransactionPromotionException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected TransactionPromotionException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public class System.Transactions.TransactionScope : object {
    private bool _complete;
    private Transaction _savedCurrent;
    private Transaction _contextTransaction;
    private TransactionScope _savedCurrentScope;
    private ContextData _threadContextData;
    private ContextData _savedTLSContextData;
    private Transaction _expectedCurrent;
    private CommittableTransaction _committableTransaction;
    private DependentTransaction _dependentTransaction;
    private bool _disposed;
    private Timer _scopeTimer;
    private Thread _scopeThread;
    private bool _interopModeSpecified;
    private EnterpriseServicesInteropOption _interopOption;
    [CompilerGeneratedAttribute]
private ContextKey <ContextKey>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AsyncFlowEnabled>k__BackingField;
    internal bool ScopeComplete { get; }
    internal EnterpriseServicesInteropOption InteropMode { get; }
    [NullableAttribute("2")]
internal ContextKey ContextKey { get; private set; }
    internal bool AsyncFlowEnabled { get; private set; }
    public TransactionScope(TransactionScopeOption scopeOption);
    public TransactionScope(TransactionScopeAsyncFlowOption asyncFlowOption);
    public TransactionScope(TransactionScopeOption scopeOption, TransactionScopeAsyncFlowOption asyncFlowOption);
    public TransactionScope(TransactionScopeOption scopeOption, TimeSpan scopeTimeout);
    public TransactionScope(TransactionScopeOption scopeOption, TimeSpan scopeTimeout, TransactionScopeAsyncFlowOption asyncFlowOption);
    public TransactionScope(TransactionScopeOption scopeOption, TransactionOptions transactionOptions);
    public TransactionScope(TransactionScopeOption scopeOption, TransactionOptions transactionOptions, TransactionScopeAsyncFlowOption asyncFlowOption);
    public TransactionScope(TransactionScopeOption scopeOption, TransactionOptions transactionOptions, EnterpriseServicesInteropOption interopOption);
    public TransactionScope(Transaction transactionToUse);
    public TransactionScope(Transaction transactionToUse, TransactionScopeAsyncFlowOption asyncFlowOption);
    public TransactionScope(Transaction transactionToUse, TimeSpan scopeTimeout);
    public TransactionScope(Transaction transactionToUse, TimeSpan scopeTimeout, TransactionScopeAsyncFlowOption asyncFlowOption);
    public TransactionScope(Transaction transactionToUse, TimeSpan scopeTimeout, EnterpriseServicesInteropOption interopOption);
    private bool NeedToCreateTransaction(TransactionScopeOption scopeOption);
    private void Initialize(Transaction transactionToUse, TimeSpan scopeTimeout, bool interopModeSpecified);
    public sealed virtual void Dispose();
    private void InternalDispose();
    public void Complete();
    private static void TimerCallback(object state);
    private void Timeout();
    private void CommonInitialize();
    private void PushScope();
    private void PopScope();
    private void SetCurrent(Transaction newCurrent);
    private void SaveTLSContextData();
    private void RestoreSavedTLSContextData();
    private void RestoreCurrent();
    private static void ValidateInteropOption(EnterpriseServicesInteropOption interopOption);
    private static void ValidateScopeTimeout(string paramName, TimeSpan scopeTimeout);
    private void ValidateAndSetAsyncFlowOption(TransactionScopeAsyncFlowOption asyncFlowOption);
    private void ValidateAsyncFlowOptionAndESInteropOption();
    internal bool get_ScopeComplete();
    internal EnterpriseServicesInteropOption get_InteropMode();
    [CompilerGeneratedAttribute]
internal ContextKey get_ContextKey();
    [CompilerGeneratedAttribute]
private void set_ContextKey(ContextKey value);
    [CompilerGeneratedAttribute]
internal bool get_AsyncFlowEnabled();
    [CompilerGeneratedAttribute]
private void set_AsyncFlowEnabled(bool value);
}
public enum System.Transactions.TransactionScopeAsyncFlowOption : Enum {
    public int value__;
    public static TransactionScopeAsyncFlowOption Suppress;
    public static TransactionScopeAsyncFlowOption Enabled;
}
public enum System.Transactions.TransactionScopeOption : Enum {
    public int value__;
    public static TransactionScopeOption Required;
    public static TransactionScopeOption RequiresNew;
    public static TransactionScopeOption Suppress;
}
internal enum System.Transactions.TransactionScopeResult : Enum {
    public int value__;
    public static TransactionScopeResult CreatedTransaction;
    public static TransactionScopeResult UsingExistingCurrent;
    public static TransactionScopeResult TransactionPassed;
    public static TransactionScopeResult DependentTransactionPassed;
    public static TransactionScopeResult NoTransaction;
}
[EventSourceAttribute]
internal class System.Transactions.TransactionsEtwProvider : EventSource {
    internal static TransactionsEtwProvider Log;
    private static TransactionsEtwProvider();
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
internal void TransactionCreated(TraceSourceType traceSource, TransactionTraceIdentifier txTraceId, string type);
    [EventAttribute("21")]
private void TransactionCreatedLtm(string transactionIdentifier, string type);
    [EventAttribute("11")]
private void TransactionCreatedOleTx(string transactionIdentifier, string type);
    [NonEventAttribute]
internal void TransactionCloneCreate(Transaction transaction, string type);
    [EventAttribute("18")]
private void TransactionCloneCreate(string transactionIdentifier, string type);
    [NonEventAttribute]
internal void TransactionExceptionTrace(TraceSourceType traceSource, TransactionExceptionType type, string message, string innerExceptionStr);
    [NonEventAttribute]
internal void TransactionExceptionTrace(TransactionExceptionType type, string message, string innerExceptionStr);
    [EventAttribute("24")]
private void TransactionExceptionBase(string type, string message, string innerExceptionStr);
    [EventAttribute("23")]
private void TransactionExceptionLtm(string type, string message, string innerExceptionStr);
    [NonEventAttribute]
internal void InvalidOperation(string type, string operation);
    [EventAttribute("26")]
private void TransactionInvalidOperation(string transactionIdentifier, string type, string operation);
    [NonEventAttribute]
internal void TransactionRollback(TraceSourceType traceSource, TransactionTraceIdentifier txTraceId, string type);
    [EventAttribute("28")]
private void TransactionRollbackLtm(string transactionIdentifier, string type);
    [EventAttribute("42")]
private void TransactionRollbackOleTx(string transactionIdentifier, string type);
    [NonEventAttribute]
internal void TransactionDependentCloneComplete(TraceSourceType traceSource, TransactionTraceIdentifier txTraceId, string type);
    [EventAttribute("22")]
private void TransactionDependentCloneCompleteLtm(string transactionIdentifier, string type);
    [EventAttribute("47")]
private void TransactionDependentCloneCompleteOleTx(string transactionIdentifier, string type);
    [NonEventAttribute]
internal void TransactionCommit(TraceSourceType traceSource, TransactionTraceIdentifier txTraceId, string type);
    [EventAttribute("19")]
private void TransactionCommitLtm(string transactionIdentifier, string type);
    [EventAttribute("41")]
private void TransactionCommitOleTx(string transactionIdentifier, string type);
    [NonEventAttribute]
internal void EnlistmentStatus(TraceSourceType traceSource, EnlistmentTraceIdentifier enlistmentTraceId, NotificationCall notificationCall);
    [EventAttribute("5")]
private void EnlistmentStatusLtm(int enlistmentIdentifier, string notificationCall);
    [EventAttribute("52")]
private void EnlistmentStatusOleTx(int enlistmentIdentifier, string notificationCall);
    [NonEventAttribute]
internal void EnlistmentDone(InternalEnlistment enlistment);
    [EventAttribute("4")]
private void EnlistmentDone(int enlistmentIdentifier);
    [NonEventAttribute]
internal void EnlistmentPrepared(InternalEnlistment enlistment);
    [EventAttribute("8")]
private void EnlistmentPrepared(int enlistmentIdentifier);
    [NonEventAttribute]
internal void EnlistmentForceRollback(InternalEnlistment enlistment);
    [EventAttribute("6")]
private void EnlistmentForceRollback(int enlistmentIdentifier);
    [NonEventAttribute]
internal void EnlistmentAborted(InternalEnlistment enlistment);
    [EventAttribute("2")]
private void EnlistmentAborted(int enlistmentIdentifier);
    [NonEventAttribute]
internal void EnlistmentCommitted(InternalEnlistment enlistment);
    [EventAttribute("3")]
private void EnlistmentCommitted(int enlistmentIdentifier);
    [NonEventAttribute]
internal void EnlistmentInDoubt(InternalEnlistment enlistment);
    [EventAttribute("7")]
private void EnlistmentInDoubt(int enlistmentIdentifier);
    [NonEventAttribute]
internal void MethodEnter(TraceSourceType traceSource, object thisOrContextObject, string methodname);
    [NonEventAttribute]
internal void MethodEnter(TraceSourceType traceSource, string methodname);
    [EventAttribute("11")]
private void MethodEnterTraceLtm(string thisOrContextObject, string methodname);
    [EventAttribute("13")]
private void MethodEnterTraceBase(string thisOrContextObject, string methodname);
    [EventAttribute("15")]
private void MethodEnterTraceDistributed(string thisOrContextObject, string methodname);
    [NonEventAttribute]
internal void MethodExit(TraceSourceType traceSource, object thisOrContextObject, string methodname);
    [NonEventAttribute]
internal void MethodExit(TraceSourceType traceSource, string methodname);
    [EventAttribute("12")]
private void MethodExitTraceLtm(string thisOrContextObject, string methodname);
    [EventAttribute("14")]
private void MethodExitTraceBase(string thisOrContextObject, string methodname);
    [EventAttribute("16")]
private void MethodExitTraceDistributed(string thisOrContextObject, string methodname);
    [NonEventAttribute]
internal void ExceptionConsumed(TraceSourceType traceSource, Exception exception);
    [NonEventAttribute]
internal void ExceptionConsumed(Exception exception);
    [EventAttribute("9")]
private void ExceptionConsumedBase(string exceptionStr);
    [EventAttribute("10")]
private void ExceptionConsumedLtm(string exceptionStr);
    [EventAttribute("43")]
private void ExceptionConsumedOleTx(string exceptionStr);
    [NonEventAttribute]
internal void TransactionManagerReenlist(Guid resourceManagerID);
    [EventAttribute("32")]
private void TransactionManagerReenlistTrace(string rmID);
    [NonEventAttribute]
internal void TransactionManagerRecoveryComplete(Guid resourceManagerID);
    [EventAttribute("31")]
private void TransactionManagerRecoveryComplete(string rmID);
    [NonEventAttribute]
internal void ConfiguredDefaultTimeoutAdjusted();
    [EventAttribute("1")]
private void ConfiguredDefaultTimeoutAdjustedTrace();
    [NonEventAttribute]
internal void TransactionScopeCreated(TransactionTraceIdentifier transactionID, TransactionScopeResult transactionScopeResult);
    [EventAttribute("33")]
private void TransactionScopeCreated(string transactionID, TransactionScopeResult transactionScopeResult);
    [NonEventAttribute]
internal void TransactionScopeCurrentChanged(TransactionTraceIdentifier currenttransactionID, TransactionTraceIdentifier newtransactionID);
    [EventAttribute("34")]
private void TransactionScopeCurrentChanged(string currenttransactionID, string newtransactionID);
    [NonEventAttribute]
internal void TransactionScopeNestedIncorrectly(TransactionTraceIdentifier transactionID);
    [EventAttribute("38")]
private void TransactionScopeNestedIncorrectly(string transactionID);
    [NonEventAttribute]
internal void TransactionScopeDisposed(TransactionTraceIdentifier transactionID);
    [EventAttribute("35")]
private void TransactionScopeDisposed(string transactionID);
    [NonEventAttribute]
internal void TransactionScopeIncomplete(TransactionTraceIdentifier transactionID);
    [EventAttribute("36")]
private void TransactionScopeIncomplete(string transactionID);
    [NonEventAttribute]
internal void TransactionScopeTimeout(TransactionTraceIdentifier transactionID);
    [EventAttribute("39")]
private void TransactionScopeTimeout(string transactionID);
    [NonEventAttribute]
internal void TransactionTimeout(TransactionTraceIdentifier transactionID);
    [EventAttribute("30")]
private void TransactionTimeout(string transactionID);
    [NonEventAttribute]
internal void TransactionstateEnlist(EnlistmentTraceIdentifier enlistmentID, EnlistmentType enlistmentType, EnlistmentOptions enlistmentOption);
    [EventAttribute("40")]
private void TransactionstateEnlist(string enlistmentID, string type, string option);
    [NonEventAttribute]
internal void TransactionCommitted(TraceSourceType traceSource, TransactionTraceIdentifier transactionID);
    [EventAttribute("20")]
private void TransactionCommittedLtm(string transactionID);
    [EventAttribute("44")]
private void TransactionCommittedOleTx(string transactionID);
    [NonEventAttribute]
internal void TransactionInDoubt(TraceSourceType traceSource, TransactionTraceIdentifier transactionID);
    [EventAttribute("25")]
private void TransactionInDoubtLtm(string transactionID);
    [EventAttribute("46")]
private void TransactionInDoubtOleTx(string transactionID);
    [NonEventAttribute]
internal void TransactionPromoted(TransactionTraceIdentifier transactionID, TransactionTraceIdentifier distributedTxID);
    [EventAttribute("27")]
private void TransactionPromoted(string transactionID, string distributedTxID);
    [NonEventAttribute]
internal void TransactionAborted(TraceSourceType traceSource, TransactionTraceIdentifier transactionID);
    [EventAttribute("17")]
private void TransactionAbortedLtm(string transactionID);
    [EventAttribute("45")]
private void TransactionAbortedOleTx(string transactionID);
    [NonEventAttribute]
internal void InternalError(string error);
    [EventAttribute("37")]
private void InternalErrorTrace(string error);
    private static void SetActivityId(string str);
}
public class System.Transactions.TransactionStartedEventHandler : MulticastDelegate {
    public TransactionStartedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, TransactionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TransactionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class System.Transactions.TransactionState : object {
    private static TransactionStateActive s_transactionStateActive;
    private static TransactionStateSubordinateActive s_transactionStateSubordinateActive;
    private static TransactionStatePhase0 s_transactionStatePhase0;
    private static TransactionStateVolatilePhase1 s_transactionStateVolatilePhase1;
    private static TransactionStateVolatileSPC s_transactionStateVolatileSPC;
    private static TransactionStateSPC s_transactionStateSPC;
    private static TransactionStateAborted s_transactionStateAborted;
    private static TransactionStateCommitted s_transactionStateCommitted;
    private static TransactionStateInDoubt s_transactionStateInDoubt;
    private static TransactionStatePromoted s_transactionStatePromoted;
    private static TransactionStateNonCommittablePromoted s_transactionStateNonCommittablePromoted;
    private static TransactionStatePromotedP0Wave s_transactionStatePromotedP0Wave;
    private static TransactionStatePromotedCommitting s_transactionStatePromotedCommitting;
    private static TransactionStatePromotedPhase0 s_transactionStatePromotedPhase0;
    private static TransactionStatePromotedPhase1 s_transactionStatePromotedPhase1;
    private static TransactionStatePromotedP0Aborting s_transactionStatePromotedP0Aborting;
    private static TransactionStatePromotedP1Aborting s_transactionStatePromotedP1Aborting;
    private static TransactionStatePromotedAborted s_transactionStatePromotedAborted;
    private static TransactionStatePromotedCommitted s_transactionStatePromotedCommitted;
    private static TransactionStatePromotedIndoubt s_transactionStatePromotedIndoubt;
    private static TransactionStateDelegated s_transactionStateDelegated;
    private static TransactionStateDelegatedSubordinate s_transactionStateDelegatedSubordinate;
    private static TransactionStateDelegatedP0Wave s_transactionStateDelegatedP0Wave;
    private static TransactionStateDelegatedCommitting s_transactionStateDelegatedCommitting;
    private static TransactionStateDelegatedAborting s_transactionStateDelegatedAborting;
    private static TransactionStatePSPEOperation s_transactionStatePSPEOperation;
    private static TransactionStateDelegatedNonMSDTC s_transactionStateDelegatedNonMSDTC;
    private static TransactionStatePromotedNonMSDTCPhase0 s_transactionStatePromotedNonMSDTCPhase0;
    private static TransactionStatePromotedNonMSDTCVolatilePhase1 s_transactionStatePromotedNonMSDTCVolatilePhase1;
    private static TransactionStatePromotedNonMSDTCSinglePhaseCommit s_transactionStatePromotedNonMSDTCSinglePhaseCommit;
    private static TransactionStatePromotedNonMSDTCAborted s_transactionStatePromotedNonMSDTCAborted;
    private static TransactionStatePromotedNonMSDTCCommitted s_transactionStatePromotedNonMSDTCCommitted;
    private static TransactionStatePromotedNonMSDTCIndoubt s_transactionStatePromotedNonMSDTCIndoubt;
    internal static object s_classSyncObject;
    internal static TransactionStateActive TransactionStateActive { get; }
    internal static TransactionStateSubordinateActive TransactionStateSubordinateActive { get; }
    internal static TransactionStatePSPEOperation TransactionStatePSPEOperation { get; }
    protected static TransactionStatePhase0 TransactionStatePhase0 { get; }
    protected static TransactionStateVolatilePhase1 TransactionStateVolatilePhase1 { get; }
    protected static TransactionStateVolatileSPC TransactionStateVolatileSPC { get; }
    protected static TransactionStateSPC TransactionStateSPC { get; }
    protected static TransactionStateAborted TransactionStateAborted { get; }
    protected static TransactionStateCommitted TransactionStateCommitted { get; }
    protected static TransactionStateInDoubt TransactionStateInDoubt { get; }
    internal static TransactionStatePromoted TransactionStatePromoted { get; }
    internal static TransactionStateNonCommittablePromoted TransactionStateNonCommittablePromoted { get; }
    protected static TransactionStatePromotedP0Wave TransactionStatePromotedP0Wave { get; }
    protected static TransactionStatePromotedCommitting TransactionStatePromotedCommitting { get; }
    protected static TransactionStatePromotedPhase0 TransactionStatePromotedPhase0 { get; }
    protected static TransactionStatePromotedPhase1 TransactionStatePromotedPhase1 { get; }
    protected static TransactionStatePromotedP0Aborting TransactionStatePromotedP0Aborting { get; }
    protected static TransactionStatePromotedP1Aborting TransactionStatePromotedP1Aborting { get; }
    protected static TransactionStatePromotedAborted TransactionStatePromotedAborted { get; }
    protected static TransactionStatePromotedCommitted TransactionStatePromotedCommitted { get; }
    protected static TransactionStatePromotedIndoubt TransactionStatePromotedIndoubt { get; }
    protected static TransactionStateDelegated TransactionStateDelegated { get; }
    internal static TransactionStateDelegatedSubordinate TransactionStateDelegatedSubordinate { get; }
    protected static TransactionStateDelegatedP0Wave TransactionStateDelegatedP0Wave { get; }
    protected static TransactionStateDelegatedCommitting TransactionStateDelegatedCommitting { get; }
    protected static TransactionStateDelegatedAborting TransactionStateDelegatedAborting { get; }
    protected static TransactionStateDelegatedNonMSDTC TransactionStateDelegatedNonMSDTC { get; }
    protected static TransactionStatePromotedNonMSDTCPhase0 TransactionStatePromotedNonMSDTCPhase0 { get; }
    protected static TransactionStatePromotedNonMSDTCVolatilePhase1 TransactionStatePromotedNonMSDTCVolatilePhase1 { get; }
    protected static TransactionStatePromotedNonMSDTCSinglePhaseCommit TransactionStatePromotedNonMSDTCSinglePhaseCommit { get; }
    protected static TransactionStatePromotedNonMSDTCAborted TransactionStatePromotedNonMSDTCAborted { get; }
    protected static TransactionStatePromotedNonMSDTCCommitted TransactionStatePromotedNonMSDTCCommitted { get; }
    protected static TransactionStatePromotedNonMSDTCIndoubt TransactionStatePromotedNonMSDTCIndoubt { get; }
    internal static TransactionStateActive get_TransactionStateActive();
    internal static TransactionStateSubordinateActive get_TransactionStateSubordinateActive();
    internal static TransactionStatePSPEOperation get_TransactionStatePSPEOperation();
    protected static TransactionStatePhase0 get_TransactionStatePhase0();
    protected static TransactionStateVolatilePhase1 get_TransactionStateVolatilePhase1();
    protected static TransactionStateVolatileSPC get_TransactionStateVolatileSPC();
    protected static TransactionStateSPC get_TransactionStateSPC();
    protected static TransactionStateAborted get_TransactionStateAborted();
    protected static TransactionStateCommitted get_TransactionStateCommitted();
    protected static TransactionStateInDoubt get_TransactionStateInDoubt();
    internal static TransactionStatePromoted get_TransactionStatePromoted();
    internal static TransactionStateNonCommittablePromoted get_TransactionStateNonCommittablePromoted();
    protected static TransactionStatePromotedP0Wave get_TransactionStatePromotedP0Wave();
    protected static TransactionStatePromotedCommitting get_TransactionStatePromotedCommitting();
    protected static TransactionStatePromotedPhase0 get_TransactionStatePromotedPhase0();
    protected static TransactionStatePromotedPhase1 get_TransactionStatePromotedPhase1();
    protected static TransactionStatePromotedP0Aborting get_TransactionStatePromotedP0Aborting();
    protected static TransactionStatePromotedP1Aborting get_TransactionStatePromotedP1Aborting();
    protected static TransactionStatePromotedAborted get_TransactionStatePromotedAborted();
    protected static TransactionStatePromotedCommitted get_TransactionStatePromotedCommitted();
    protected static TransactionStatePromotedIndoubt get_TransactionStatePromotedIndoubt();
    protected static TransactionStateDelegated get_TransactionStateDelegated();
    internal static TransactionStateDelegatedSubordinate get_TransactionStateDelegatedSubordinate();
    protected static TransactionStateDelegatedP0Wave get_TransactionStateDelegatedP0Wave();
    protected static TransactionStateDelegatedCommitting get_TransactionStateDelegatedCommitting();
    protected static TransactionStateDelegatedAborting get_TransactionStateDelegatedAborting();
    protected static TransactionStateDelegatedNonMSDTC get_TransactionStateDelegatedNonMSDTC();
    protected static TransactionStatePromotedNonMSDTCPhase0 get_TransactionStatePromotedNonMSDTCPhase0();
    protected static TransactionStatePromotedNonMSDTCVolatilePhase1 get_TransactionStatePromotedNonMSDTCVolatilePhase1();
    protected static TransactionStatePromotedNonMSDTCSinglePhaseCommit get_TransactionStatePromotedNonMSDTCSinglePhaseCommit();
    protected static TransactionStatePromotedNonMSDTCAborted get_TransactionStatePromotedNonMSDTCAborted();
    protected static TransactionStatePromotedNonMSDTCCommitted get_TransactionStatePromotedNonMSDTCCommitted();
    protected static TransactionStatePromotedNonMSDTCIndoubt get_TransactionStatePromotedNonMSDTCIndoubt();
    internal void CommonEnterState(InternalTransaction tx);
    internal abstract virtual void EnterState(InternalTransaction tx);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void EndCommit(InternalTransaction tx);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual void CheckForFinishedTransaction(InternalTransaction tx);
    internal virtual Guid get_Identifier(InternalTransaction tx);
    internal abstract virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void AddOutcomeRegistrant(InternalTransaction tx, TransactionCompletedEventHandler transactionCompletedDelegate);
    internal virtual bool EnlistPromotableSinglePhase(InternalTransaction tx, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Transaction atomicTransaction, Guid promoterType);
    internal virtual void CompleteBlockingClone(InternalTransaction tx);
    internal virtual void CompleteAbortingClone(InternalTransaction tx);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
    internal virtual void ChangeStateTransactionCommitted(InternalTransaction tx);
    internal virtual void InDoubtFromEnlistment(InternalTransaction tx);
    internal virtual void ChangeStatePromotedAborted(InternalTransaction tx);
    internal virtual void ChangeStatePromotedCommitted(InternalTransaction tx);
    internal virtual void InDoubtFromDtc(InternalTransaction tx);
    internal virtual void ChangeStatePromotedPhase0(InternalTransaction tx);
    internal virtual void ChangeStatePromotedPhase1(InternalTransaction tx);
    internal virtual void ChangeStateAbortedDuringPromotion(InternalTransaction tx);
    internal virtual void Timeout(InternalTransaction tx);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
    internal virtual void RestartCommitIfNeeded(InternalTransaction tx);
    internal virtual bool ContinuePhase0Prepares();
    internal virtual bool ContinuePhase1Prepares();
    internal virtual void Promote(InternalTransaction tx);
    internal virtual Byte[] PromotedToken(InternalTransaction tx);
    internal virtual Enlistment PromoteAndEnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, IPromotableSinglePhaseNotification promotableNotification, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual void SetDistributedTransactionId(InternalTransaction tx, IPromotableSinglePhaseNotification promotableNotification, Guid distributedTransactionIdentifier);
    internal virtual void DisposeRoot(InternalTransaction tx);
    internal virtual bool IsCompleted(InternalTransaction tx);
    protected static void AddVolatileEnlistment(VolatileEnlistmentSet& enlistments, Enlistment enlistment);
}
internal class System.Transactions.TransactionStateAborted : TransactionStateEnded {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void EndCommit(InternalTransaction tx);
    internal virtual void RestartCommitIfNeeded(InternalTransaction tx);
    internal virtual void Timeout(InternalTransaction tx);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
    internal virtual void ChangeStatePromotedAborted(InternalTransaction tx);
    internal virtual void ChangeStateAbortedDuringPromotion(InternalTransaction tx);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
    internal virtual void CheckForFinishedTransaction(InternalTransaction tx);
    private static TransactionAbortedException CreateTransactionAbortedException(InternalTransaction tx);
}
internal class System.Transactions.TransactionStateActive : EnlistableStates {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual bool EnlistPromotableSinglePhase(InternalTransaction tx, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Transaction atomicTransaction, Guid promoterType);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
    internal virtual void DisposeRoot(InternalTransaction tx);
}
internal class System.Transactions.TransactionStateCommitted : TransactionStateEnded {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual void EndCommit(InternalTransaction tx);
}
internal class System.Transactions.TransactionStateDelegated : TransactionStateDelegatedBase {
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual bool PromoteDurable(InternalTransaction tx);
    internal virtual void RestartCommitIfNeeded(InternalTransaction tx);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
}
internal class System.Transactions.TransactionStateDelegatedAborting : TransactionStatePromotedAborted {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void ChangeStatePromotedAborted(InternalTransaction tx);
}
internal abstract class System.Transactions.TransactionStateDelegatedBase : TransactionStatePromoted {
    internal virtual void EnterState(InternalTransaction tx);
}
internal class System.Transactions.TransactionStateDelegatedCommitting : TransactionStatePromotedCommitting {
    internal virtual void EnterState(InternalTransaction tx);
}
internal class System.Transactions.TransactionStateDelegatedNonMSDTC : TransactionStatePromotedNonMSDTCBase {
    internal virtual void EnterState(InternalTransaction tx);
}
internal class System.Transactions.TransactionStateDelegatedP0Wave : TransactionStatePromotedP0Wave {
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
}
internal class System.Transactions.TransactionStateDelegatedSubordinate : TransactionStateDelegatedBase {
    internal virtual bool PromoteDurable(InternalTransaction tx);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual void ChangeStatePromotedPhase0(InternalTransaction tx);
    internal virtual void ChangeStatePromotedPhase1(InternalTransaction tx);
}
internal abstract class System.Transactions.TransactionStateEnded : TransactionState {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void AddOutcomeRegistrant(InternalTransaction tx, TransactionCompletedEventHandler transactionCompletedDelegate);
    internal virtual bool IsCompleted(InternalTransaction tx);
}
internal class System.Transactions.TransactionStateInDoubt : TransactionStateEnded {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual void EndCommit(InternalTransaction tx);
    internal virtual void CheckForFinishedTransaction(InternalTransaction tx);
}
internal class System.Transactions.TransactionStateNonCommittablePromoted : TransactionStatePromotedBase {
    internal virtual void EnterState(InternalTransaction tx);
}
internal class System.Transactions.TransactionStatePhase0 : EnlistableStates {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual bool EnlistPromotableSinglePhase(InternalTransaction tx, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Transaction atomicTransaction, Guid promoterType);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
    internal virtual void RestartCommitIfNeeded(InternalTransaction tx);
    internal virtual bool ContinuePhase0Prepares();
    internal virtual void Promote(InternalTransaction tx);
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
}
internal class System.Transactions.TransactionStatePromoted : TransactionStatePromotedBase {
    internal virtual void EnterState(InternalTransaction tx);
    protected static bool PromotePhaseVolatiles(InternalTransaction tx, VolatileEnlistmentSet& volatiles, bool phase0);
    internal virtual bool PromoteDurable(InternalTransaction tx);
    internal virtual void PromoteEnlistmentsAndOutcome(InternalTransaction tx);
    internal virtual void DisposeRoot(InternalTransaction tx);
}
internal class System.Transactions.TransactionStatePromotedAborted : TransactionStatePromotedEnded {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
    internal virtual void RestartCommitIfNeeded(InternalTransaction tx);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
    internal virtual void ChangeStatePromotedPhase0(InternalTransaction tx);
    internal virtual void ChangeStatePromotedPhase1(InternalTransaction tx);
    internal virtual void ChangeStatePromotedAborted(InternalTransaction tx);
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
    protected virtual void PromotedTransactionOutcome(InternalTransaction tx);
    internal virtual void CheckForFinishedTransaction(InternalTransaction tx);
    internal virtual void InDoubtFromDtc(InternalTransaction tx);
    internal virtual void InDoubtFromEnlistment(InternalTransaction tx);
}
internal abstract class System.Transactions.TransactionStatePromotedAborting : TransactionStatePromotedBase {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
    internal virtual void ChangeStatePromotedAborted(InternalTransaction tx);
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
    internal virtual void RestartCommitIfNeeded(InternalTransaction tx);
}
internal abstract class System.Transactions.TransactionStatePromotedBase : TransactionState {
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual Guid get_Identifier(InternalTransaction tx);
    internal virtual void AddOutcomeRegistrant(InternalTransaction tx, TransactionCompletedEventHandler transactionCompletedDelegate);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void RestartCommitIfNeeded(InternalTransaction tx);
    internal virtual bool EnlistPromotableSinglePhase(InternalTransaction tx, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Transaction atomicTransaction, Guid promoterType);
    internal virtual void CompleteBlockingClone(InternalTransaction tx);
    internal virtual void CompleteAbortingClone(InternalTransaction tx);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
    internal virtual bool ContinuePhase0Prepares();
    internal virtual void ChangeStatePromotedAborted(InternalTransaction tx);
    internal virtual void ChangeStatePromotedCommitted(InternalTransaction tx);
    internal virtual void InDoubtFromDtc(InternalTransaction tx);
    internal virtual void InDoubtFromEnlistment(InternalTransaction tx);
    internal virtual void ChangeStateAbortedDuringPromotion(InternalTransaction tx);
    internal virtual void Timeout(InternalTransaction tx);
    internal virtual void Promote(InternalTransaction tx);
    internal virtual Byte[] PromotedToken(InternalTransaction tx);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
}
internal class System.Transactions.TransactionStatePromotedCommitted : TransactionStatePromotedEnded {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void ChangeStatePromotedCommitted(InternalTransaction tx);
    protected virtual void PromotedTransactionOutcome(InternalTransaction tx);
    internal virtual void InDoubtFromDtc(InternalTransaction tx);
    internal virtual void InDoubtFromEnlistment(InternalTransaction tx);
}
internal class System.Transactions.TransactionStatePromotedCommitting : TransactionStatePromotedBase {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void ChangeStatePromotedPhase0(InternalTransaction tx);
    internal virtual void ChangeStatePromotedPhase1(InternalTransaction tx);
}
internal abstract class System.Transactions.TransactionStatePromotedEnded : TransactionStateEnded {
    private static WaitCallback s_signalMethod;
    private static WaitCallback SignalMethod { get; }
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void AddOutcomeRegistrant(InternalTransaction tx, TransactionCompletedEventHandler transactionCompletedDelegate);
    internal virtual void EndCommit(InternalTransaction tx);
    internal virtual void CompleteBlockingClone(InternalTransaction tx);
    internal virtual void CompleteAbortingClone(InternalTransaction tx);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
    internal virtual Guid get_Identifier(InternalTransaction tx);
    internal virtual void Promote(InternalTransaction tx);
    protected abstract virtual void PromotedTransactionOutcome(InternalTransaction tx);
    private static WaitCallback get_SignalMethod();
    private static void SignalCallback(object state);
}
internal class System.Transactions.TransactionStatePromotedIndoubt : TransactionStatePromotedEnded {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void RestartCommitIfNeeded(InternalTransaction tx);
    internal virtual void ChangeStatePromotedPhase0(InternalTransaction tx);
    internal virtual void ChangeStatePromotedPhase1(InternalTransaction tx);
    internal virtual void InDoubtFromDtc(InternalTransaction tx);
    internal virtual void InDoubtFromEnlistment(InternalTransaction tx);
    protected virtual void PromotedTransactionOutcome(InternalTransaction tx);
    internal virtual void CheckForFinishedTransaction(InternalTransaction tx);
    internal virtual void ChangeStatePromotedAborted(InternalTransaction tx);
    internal virtual void ChangeStatePromotedCommitted(InternalTransaction tx);
}
internal class System.Transactions.TransactionStatePromotedNonMSDTCAborted : TransactionStatePromotedNonMSDTCEnded {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
    protected virtual void PromotedTransactionOutcome(InternalTransaction tx);
    internal virtual void CheckForFinishedTransaction(InternalTransaction tx);
}
internal abstract class System.Transactions.TransactionStatePromotedNonMSDTCBase : TransactionState {
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual bool EnlistPromotableSinglePhase(InternalTransaction tx, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Transaction atomicTransaction, Guid promoterType);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual Guid get_Identifier(InternalTransaction tx);
    internal virtual void AddOutcomeRegistrant(InternalTransaction tx, TransactionCompletedEventHandler transactionCompletedDelegate);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void CompleteBlockingClone(InternalTransaction tx);
    internal virtual void CompleteAbortingClone(InternalTransaction tx);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
    internal virtual bool ContinuePhase0Prepares();
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
    internal virtual void InDoubtFromEnlistment(InternalTransaction tx);
    internal virtual void ChangeStateAbortedDuringPromotion(InternalTransaction tx);
    internal virtual void Timeout(InternalTransaction tx);
    internal virtual void Promote(InternalTransaction tx);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
    internal virtual Byte[] PromotedToken(InternalTransaction tx);
    internal virtual void DisposeRoot(InternalTransaction tx);
}
internal class System.Transactions.TransactionStatePromotedNonMSDTCCommitted : TransactionStatePromotedNonMSDTCEnded {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    protected virtual void PromotedTransactionOutcome(InternalTransaction tx);
}
internal abstract class System.Transactions.TransactionStatePromotedNonMSDTCEnded : TransactionStateEnded {
    private static WaitCallback s_signalMethod;
    private static WaitCallback SignalMethod { get; }
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void AddOutcomeRegistrant(InternalTransaction tx, TransactionCompletedEventHandler transactionCompletedDelegate);
    internal virtual void EndCommit(InternalTransaction tx);
    internal virtual void CompleteBlockingClone(InternalTransaction tx);
    internal virtual void CompleteAbortingClone(InternalTransaction tx);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
    internal virtual Guid get_Identifier(InternalTransaction tx);
    internal virtual void Promote(InternalTransaction tx);
    protected abstract virtual void PromotedTransactionOutcome(InternalTransaction tx);
    private static WaitCallback get_SignalMethod();
    private static void SignalCallback(object state);
}
internal class System.Transactions.TransactionStatePromotedNonMSDTCIndoubt : TransactionStatePromotedNonMSDTCEnded {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void ChangeStatePromotedPhase0(InternalTransaction tx);
    internal virtual void ChangeStatePromotedPhase1(InternalTransaction tx);
    protected virtual void PromotedTransactionOutcome(InternalTransaction tx);
    internal virtual void CheckForFinishedTransaction(InternalTransaction tx);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
}
internal class System.Transactions.TransactionStatePromotedNonMSDTCPhase0 : TransactionStatePromotedNonMSDTCBase {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
    internal virtual bool ContinuePhase0Prepares();
}
internal class System.Transactions.TransactionStatePromotedNonMSDTCSinglePhaseCommit : TransactionStatePromotedNonMSDTCBase {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual void ChangeStateTransactionCommitted(InternalTransaction tx);
    internal virtual void InDoubtFromEnlistment(InternalTransaction tx);
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
    internal virtual void ChangeStateAbortedDuringPromotion(InternalTransaction tx);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual bool EnlistPromotableSinglePhase(InternalTransaction tx, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Transaction atomicTransaction, Guid promoterType);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
}
internal class System.Transactions.TransactionStatePromotedNonMSDTCVolatilePhase1 : TransactionStatePromotedNonMSDTCBase {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
    internal virtual bool ContinuePhase1Prepares();
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual bool EnlistPromotableSinglePhase(InternalTransaction tx, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Transaction atomicTransaction, Guid promoterType);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
}
internal class System.Transactions.TransactionStatePromotedP0Aborting : TransactionStatePromotedAborting {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
}
internal class System.Transactions.TransactionStatePromotedP0Wave : TransactionStatePromotedBase {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void BeginCommit(InternalTransaction tx, bool asyncCommit, AsyncCallback asyncCallback, object asyncState);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
    internal virtual bool ContinuePhase0Prepares();
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
}
internal class System.Transactions.TransactionStatePromotedP1Aborting : TransactionStatePromotedAborting {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
}
internal class System.Transactions.TransactionStatePromotedPhase0 : TransactionStatePromotedCommitting {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void Phase0VolatilePrepareDone(InternalTransaction tx);
    internal virtual bool ContinuePhase0Prepares();
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
}
internal class System.Transactions.TransactionStatePromotedPhase1 : TransactionStatePromotedCommitting {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
    internal virtual bool ContinuePhase1Prepares();
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
}
internal class System.Transactions.TransactionStatePSPEOperation : TransactionState {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal void PSPEInitialize(InternalTransaction tx, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Guid promoterType);
    internal void Phase0PSPEInitialize(InternalTransaction tx, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Guid promoterType);
    internal OletxTransaction PSPEPromote(InternalTransaction tx);
    internal virtual Enlistment PromoteAndEnlistDurable(InternalTransaction tx, Guid resourceManagerIdentifier, IPromotableSinglePhaseNotification promotableNotification, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual void SetDistributedTransactionId(InternalTransaction tx, IPromotableSinglePhaseNotification promotableNotification, Guid distributedTransactionIdentifier);
}
internal class System.Transactions.TransactionStateSPC : ActiveStates {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void ChangeStateTransactionCommitted(InternalTransaction tx);
    internal virtual void InDoubtFromEnlistment(InternalTransaction tx);
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
}
internal class System.Transactions.TransactionStateSubordinateActive : TransactionStateActive {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, IEnlistmentNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual Enlistment EnlistVolatile(InternalTransaction tx, ISinglePhaseNotification enlistmentNotification, EnlistmentOptions enlistmentOptions, Transaction atomicTransaction);
    internal virtual TransactionStatus get_Status(InternalTransaction tx);
    internal virtual void AddOutcomeRegistrant(InternalTransaction tx, TransactionCompletedEventHandler transactionCompletedDelegate);
    internal virtual bool EnlistPromotableSinglePhase(InternalTransaction tx, IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Transaction atomicTransaction, Guid promoterType);
    internal virtual void CreateBlockingClone(InternalTransaction tx);
    internal virtual void CreateAbortingClone(InternalTransaction tx);
}
internal class System.Transactions.TransactionStateVolatilePhase1 : ActiveStates {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void Rollback(InternalTransaction tx, Exception e);
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
    internal virtual void Phase1VolatilePrepareDone(InternalTransaction tx);
    internal virtual bool ContinuePhase1Prepares();
    internal virtual void Timeout(InternalTransaction tx);
}
internal class System.Transactions.TransactionStateVolatileSPC : ActiveStates {
    internal virtual void EnterState(InternalTransaction tx);
    internal virtual void ChangeStateTransactionCommitted(InternalTransaction tx);
    internal virtual void InDoubtFromEnlistment(InternalTransaction tx);
    internal virtual void ChangeStateTransactionAborted(InternalTransaction tx, Exception e);
}
public enum System.Transactions.TransactionStatus : Enum {
    public int value__;
    public static TransactionStatus Active;
    public static TransactionStatus Committed;
    public static TransactionStatus Aborted;
    public static TransactionStatus InDoubt;
}
internal class System.Transactions.TransactionTable : object {
    private Timer _timer;
    private bool _timerEnabled;
    private int _timerInterval;
    private long _ticks;
    private long _lastTimerTime;
    private BucketSet _headBucketSet;
    private CheapUnfairReaderWriterLock _rwLock;
    private long CurrentTime { get; }
    internal long TimeoutTicks(TimeSpan timeout);
    internal TimeSpan RecalcTimeout(InternalTransaction tx);
    private long get_CurrentTime();
    internal int Add(InternalTransaction txNew);
    private void AddIter(InternalTransaction txNew);
    internal static void Remove(InternalTransaction tx);
    private void ThreadTimer(object state);
}
[IsReadOnlyAttribute]
internal class System.Transactions.TransactionTraceIdentifier : ValueType {
    private string _transactionIdentifier;
    private int _cloneIdentifier;
    public static TransactionTraceIdentifier Empty { get; }
    public string TransactionIdentifier { get; }
    public TransactionTraceIdentifier(string transactionIdentifier, int cloneIdentifier);
    public static TransactionTraceIdentifier get_Empty();
    public string get_TransactionIdentifier();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TransactionTraceIdentifier other);
    public static bool op_Equality(TransactionTraceIdentifier left, TransactionTraceIdentifier right);
}
internal enum System.Transactions.TxLookup : Enum {
    public int value__;
    public static TxLookup Default;
    public static TxLookup DefaultCallContext;
    public static TxLookup DefaultTLS;
}
internal abstract class System.Transactions.VolatileDemultiplexer : object {
    protected InternalTransaction _transaction;
    internal IPromotedEnlistment _promotedEnlistment;
    internal IPromotedEnlistment _preparingEnlistment;
    private static object s_classSyncObject;
    private static WaitCallback s_prepareCallback;
    private static WaitCallback s_commitCallback;
    private static WaitCallback s_rollbackCallback;
    private static WaitCallback s_inDoubtCallback;
    private static WaitCallback PrepareCallback { get; }
    private static WaitCallback CommitCallback { get; }
    private static WaitCallback RollbackCallback { get; }
    private static WaitCallback InDoubtCallback { get; }
    public VolatileDemultiplexer(InternalTransaction transaction);
    internal static void BroadcastCommitted(VolatileEnlistmentSet& volatiles);
    internal static void BroadcastRollback(VolatileEnlistmentSet& volatiles);
    internal static void BroadcastInDoubt(VolatileEnlistmentSet& volatiles);
    private static WaitCallback get_PrepareCallback();
    protected static void PoolablePrepare(object state);
    private static WaitCallback get_CommitCallback();
    protected static void PoolableCommit(object state);
    private static WaitCallback get_RollbackCallback();
    protected static void PoolableRollback(object state);
    private static WaitCallback get_InDoubtCallback();
    protected static void PoolableInDoubt(object state);
    protected abstract virtual void InternalPrepare();
    protected abstract virtual void InternalCommit();
    protected abstract virtual void InternalRollback();
    protected abstract virtual void InternalInDoubt();
    public abstract virtual void Prepare(IPromotedEnlistment en);
    public abstract virtual void Commit(IPromotedEnlistment en);
    public abstract virtual void Rollback(IPromotedEnlistment en);
    public abstract virtual void InDoubt(IPromotedEnlistment en);
}
internal class System.Transactions.VolatileEnlistmentAborting : VolatileEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void ChangeStatePreparing(InternalEnlistment enlistment);
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
    internal virtual void InternalAborted(InternalEnlistment enlistment);
}
internal class System.Transactions.VolatileEnlistmentActive : VolatileEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
    internal virtual void ChangeStatePreparing(InternalEnlistment enlistment);
    internal virtual void ChangeStateSinglePhaseCommit(InternalEnlistment enlistment);
    internal virtual void InternalAborted(InternalEnlistment enlistment);
}
internal class System.Transactions.VolatileEnlistmentCommitting : VolatileEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
}
internal class System.Transactions.VolatileEnlistmentDone : VolatileEnlistmentEnded {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void ChangeStatePreparing(InternalEnlistment enlistment);
}
internal class System.Transactions.VolatileEnlistmentEnded : VolatileEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void ChangeStatePreparing(InternalEnlistment enlistment);
    internal virtual void InternalAborted(InternalEnlistment enlistment);
    internal virtual void InternalCommitted(InternalEnlistment enlistment);
    internal virtual void InternalIndoubt(InternalEnlistment enlistment);
    internal virtual void InDoubt(InternalEnlistment enlistment, Exception e);
}
internal class System.Transactions.VolatileEnlistmentInDoubt : VolatileEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
}
internal class System.Transactions.VolatileEnlistmentPrepared : VolatileEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void InternalAborted(InternalEnlistment enlistment);
    internal virtual void InternalCommitted(InternalEnlistment enlistment);
    internal virtual void InternalIndoubt(InternalEnlistment enlistment);
    internal virtual void ChangeStatePreparing(InternalEnlistment enlistment);
}
internal class System.Transactions.VolatileEnlistmentPreparing : VolatileEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
    internal virtual void Prepared(InternalEnlistment enlistment);
    internal virtual void ForceRollback(InternalEnlistment enlistment, Exception e);
    internal virtual void ChangeStatePreparing(InternalEnlistment enlistment);
    internal virtual void InternalAborted(InternalEnlistment enlistment);
}
internal class System.Transactions.VolatileEnlistmentPreparingAborting : VolatileEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
    internal virtual void Prepared(InternalEnlistment enlistment);
    internal virtual void ForceRollback(InternalEnlistment enlistment, Exception e);
    internal virtual void InternalAborted(InternalEnlistment enlistment);
}
internal class System.Transactions.VolatileEnlistmentSet : ValueType {
    internal InternalEnlistment[] _volatileEnlistments;
    internal int _volatileEnlistmentCount;
    internal int _volatileEnlistmentSize;
    internal int _dependentClones;
    internal int _preparedVolatileEnlistments;
    private VolatileDemultiplexer _volatileDemux;
    internal VolatileDemultiplexer VolatileDemux { get; internal set; }
    internal VolatileDemultiplexer get_VolatileDemux();
    internal void set_VolatileDemux(VolatileDemultiplexer value);
}
internal class System.Transactions.VolatileEnlistmentSPC : VolatileEnlistmentState {
    internal virtual void EnterState(InternalEnlistment enlistment);
    internal virtual void EnlistmentDone(InternalEnlistment enlistment);
    internal virtual void Committed(InternalEnlistment enlistment);
    internal virtual void Aborted(InternalEnlistment enlistment, Exception e);
    internal virtual void InDoubt(InternalEnlistment enlistment, Exception e);
}
internal abstract class System.Transactions.VolatileEnlistmentState : EnlistmentState {
    private static VolatileEnlistmentActive s_volatileEnlistmentActive;
    private static VolatileEnlistmentPreparing s_volatileEnlistmentPreparing;
    private static VolatileEnlistmentPrepared s_volatileEnlistmentPrepared;
    private static VolatileEnlistmentSPC s_volatileEnlistmentSPC;
    private static VolatileEnlistmentPreparingAborting s_volatileEnlistmentPreparingAborting;
    private static VolatileEnlistmentAborting s_volatileEnlistmentAborting;
    private static VolatileEnlistmentCommitting s_volatileEnlistmentCommitting;
    private static VolatileEnlistmentInDoubt s_volatileEnlistmentInDoubt;
    private static VolatileEnlistmentEnded s_volatileEnlistmentEnded;
    private static VolatileEnlistmentDone s_volatileEnlistmentDone;
    private static object s_classSyncObject;
    internal static VolatileEnlistmentActive VolatileEnlistmentActive { get; }
    protected static VolatileEnlistmentPreparing VolatileEnlistmentPreparing { get; }
    protected static VolatileEnlistmentPrepared VolatileEnlistmentPrepared { get; }
    protected static VolatileEnlistmentSPC VolatileEnlistmentSPC { get; }
    protected static VolatileEnlistmentPreparingAborting VolatileEnlistmentPreparingAborting { get; }
    protected static VolatileEnlistmentAborting VolatileEnlistmentAborting { get; }
    protected static VolatileEnlistmentCommitting VolatileEnlistmentCommitting { get; }
    protected static VolatileEnlistmentInDoubt VolatileEnlistmentInDoubt { get; }
    protected static VolatileEnlistmentEnded VolatileEnlistmentEnded { get; }
    protected static VolatileEnlistmentDone VolatileEnlistmentDone { get; }
    internal static VolatileEnlistmentActive get_VolatileEnlistmentActive();
    protected static VolatileEnlistmentPreparing get_VolatileEnlistmentPreparing();
    protected static VolatileEnlistmentPrepared get_VolatileEnlistmentPrepared();
    protected static VolatileEnlistmentSPC get_VolatileEnlistmentSPC();
    protected static VolatileEnlistmentPreparingAborting get_VolatileEnlistmentPreparingAborting();
    protected static VolatileEnlistmentAborting get_VolatileEnlistmentAborting();
    protected static VolatileEnlistmentCommitting get_VolatileEnlistmentCommitting();
    protected static VolatileEnlistmentInDoubt get_VolatileEnlistmentInDoubt();
    protected static VolatileEnlistmentEnded get_VolatileEnlistmentEnded();
    protected static VolatileEnlistmentDone get_VolatileEnlistmentDone();
    internal virtual Byte[] RecoveryInformation(InternalEnlistment enlistment);
}
