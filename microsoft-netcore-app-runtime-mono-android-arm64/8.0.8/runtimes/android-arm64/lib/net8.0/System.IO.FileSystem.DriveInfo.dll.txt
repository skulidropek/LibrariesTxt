internal static class FxResources.System.IO.FileSystem.DriveInfo.SR : object {
}
internal static class Interop : object {
    internal static Exception GetExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirError);
    internal static Exception GetIOException(ErrorInfo errorInfo, string path);
    [CompilerGeneratedAttribute]
internal static bool <GetExceptionForIoErrno>g__ParentDirectoryExists|11_0(string fullPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.DriveInfo : object {
    private string _name;
    public string Name { get; }
    public bool IsReady { get; }
    public DirectoryInfo RootDirectory { get; }
    public string VolumeLabel { get; public set; }
    public DriveType DriveType { get; }
    public string DriveFormat { get; }
    public long AvailableFreeSpace { get; }
    public long TotalFreeSpace { get; }
    public long TotalSize { get; }
    public DriveInfo(string driveName);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_Name();
    public bool get_IsReady();
    public DirectoryInfo get_RootDirectory();
    public virtual string ToString();
    public static DriveInfo[] GetDrives();
    private static string NormalizeDriveName(string driveName);
    public string get_VolumeLabel();
    [SupportedOSPlatformAttribute("windows")]
public void set_VolumeLabel(string value);
    public DriveType get_DriveType();
    public string get_DriveFormat();
    public long get_AvailableFreeSpace();
    public long get_TotalFreeSpace();
    public long get_TotalSize();
    private void CheckStatfsResultAndThrowIfNecessary(int result);
    private static String[] GetMountPoints();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.IO.DriveNotFoundException : IOException {
    public DriveNotFoundException(string message);
    public DriveNotFoundException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected DriveNotFoundException(SerializationInfo info, StreamingContext context);
}
public enum System.IO.DriveType : Enum {
    public int value__;
    public static DriveType Unknown;
    public static DriveType NoRootDirectory;
    public static DriveType Removable;
    public static DriveType Fixed;
    public static DriveType Network;
    public static DriveType CDRom;
    public static DriveType Ram;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Arg_MustBeNonEmptyDriveName { get; }
    internal static string Arg_InvalidDriveChars { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string IO_DriveNotFound { get; }
    internal static string IO_DriveNotFound_Drive { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string IO_PathTooLong_Path { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Arg_MustBeNonEmptyDriveName();
    internal static string get_Arg_InvalidDriveChars();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_IO_DriveNotFound();
    internal static string get_IO_DriveNotFound_Drive();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_IO_PathTooLong_Path();
}
