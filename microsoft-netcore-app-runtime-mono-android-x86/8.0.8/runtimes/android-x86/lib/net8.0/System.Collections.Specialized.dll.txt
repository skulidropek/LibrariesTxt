internal static class FxResources.System.Collections.Specialized.SR : object {
}
internal class System.Collections.CompatibleComparer : object {
    private IHashCodeProvider _hcp;
    private IComparer _comparer;
    internal CompatibleComparer(IHashCodeProvider hashCodeProvider, IComparer comparer);
    public sealed virtual bool Equals(object a, object b);
    public int Compare(object a, object b);
    public sealed virtual int GetHashCode(object obj);
}
[DefaultMemberAttribute("Item")]
public class System.Collections.Specialized.BitVector32 : ValueType {
    private UInt32 _data;
    public bool Item { get; public set; }
    public int Item { get; public set; }
    public int Data { get; }
    public BitVector32(int data);
    public BitVector32(BitVector32 value);
    public bool get_Item(int bit);
    public void set_Item(int bit, bool value);
    public int get_Item(Section section);
    public void set_Item(Section section, int value);
    public int get_Data();
    public static int CreateMask();
    public static int CreateMask(int previous);
    public static Section CreateSection(short maxValue);
    public static Section CreateSection(short maxValue, Section previous);
    private static Section CreateSectionHelper(short maxValue, short priorMask, short priorOffset);
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public sealed virtual bool Equals(BitVector32 other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public static string ToString(BitVector32 value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Collections.Specialized.HybridDictionary : object {
    private ListDictionary list;
    private Hashtable hashtable;
    private bool caseInsensitive;
    [NullableAttribute("2")]
public object Item { get; public set; }
    private ListDictionary List { get; }
    public int Count { get; }
    public ICollection Keys { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ICollection Values { get; }
    public HybridDictionary(int initialSize);
    public HybridDictionary(bool caseInsensitive);
    public HybridDictionary(int initialSize, bool caseInsensitive);
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    private ListDictionary get_List();
    private void ChangeOver();
    public sealed virtual int get_Count();
    public sealed virtual ICollection get_Keys();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual ICollection get_Values();
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Remove(object key);
}
[DefaultMemberAttribute("Item")]
public interface System.Collections.Specialized.IOrderedDictionary {
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableContextAttribute("2")]
public abstract virtual object get_Item(int index);
    [NullableContextAttribute("2")]
public abstract virtual void set_Item(int index, object value);
    [NullableContextAttribute("1")]
public abstract virtual IDictionaryEnumerator GetEnumerator();
    [NullableContextAttribute("1")]
public abstract virtual void Insert(int index, object key, object value);
    public abstract virtual void RemoveAt(int index);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Collections.Specialized.ListDictionary : object {
    private DictionaryNode head;
    private int version;
    private int count;
    private IComparer comparer;
    [NullableAttribute("2")]
public object Item { get; public set; }
    public int Count { get; }
    public ICollection Keys { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ICollection Values { get; }
    [NullableContextAttribute("2")]
public ListDictionary(IComparer comparer);
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual int get_Count();
    public sealed virtual ICollection get_Keys();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual ICollection get_Values();
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object key);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Remove(object key);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class System.Collections.Specialized.NameObjectCollectionBase : object {
    private bool _readOnly;
    private ArrayList _entriesArray;
    private IEqualityComparer _keyComparer;
    private Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) _entriesTable;
    private NameObjectEntry modreq(System.Runtime.CompilerServices.IsVolatile) _nullKeyEntry;
    private KeysCollection _keys;
    private int _version;
    private static StringComparer s_defaultComparer;
    [NullableAttribute("1")]
internal IEqualityComparer Comparer { get; internal set; }
    protected bool IsReadOnly { get; protected set; }
    public int Count { get; }
    [NullableAttribute("1")]
private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [NullableAttribute("1")]
public KeysCollection Keys { get; }
    protected NameObjectCollectionBase(IEqualityComparer equalityComparer);
    protected NameObjectCollectionBase(int capacity, IEqualityComparer equalityComparer);
    [ObsoleteAttribute("This constructor has been deprecated. Use NameObjectCollectionBase(IEqualityComparer) instead.")]
protected NameObjectCollectionBase(IHashCodeProvider hashProvider, IComparer comparer);
    [ObsoleteAttribute("This constructor has been deprecated. Use NameObjectCollectionBase(Int32, IEqualityComparer) instead.")]
protected NameObjectCollectionBase(int capacity, IHashCodeProvider hashProvider, IComparer comparer);
    protected NameObjectCollectionBase(int capacity);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected NameObjectCollectionBase(SerializationInfo info, StreamingContext context);
    private static NameObjectCollectionBase();
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual void OnDeserialization(object sender);
    [MemberNotNullAttribute("_entriesArray")]
[MemberNotNullAttribute("_entriesTable")]
private void Reset();
    [MemberNotNullAttribute("_entriesArray")]
[MemberNotNullAttribute("_entriesTable")]
private void Reset(int capacity);
    private NameObjectEntry FindEntry(string key);
    internal IEqualityComparer get_Comparer();
    internal void set_Comparer(IEqualityComparer value);
    protected bool get_IsReadOnly();
    protected void set_IsReadOnly(bool value);
    protected bool BaseHasKeys();
    protected void BaseAdd(string name, object value);
    protected void BaseRemove(string name);
    protected void BaseRemoveAt(int index);
    protected void BaseClear();
    protected object BaseGet(string name);
    protected void BaseSet(string name, object value);
    protected object BaseGet(int index);
    protected string BaseGetKey(int index);
    protected void BaseSet(int index, object value);
    [NullableContextAttribute("1")]
public virtual IEnumerator GetEnumerator();
    public virtual int get_Count();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    protected String[] BaseGetAllKeys();
    protected Object[] BaseGetAllValues();
    [NullableContextAttribute("1")]
[UnconditionalSuppressMessageAttribute("AotAnalysis", "IL3050:RequiresDynamicCode")]
protected Object[] BaseGetAllValues(Type type);
    [NullableContextAttribute("1")]
public virtual KeysCollection get_Keys();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Collections.Specialized.NameValueCollection : NameObjectCollectionBase {
    private String[] _all;
    private String[] _allKeys;
    public string Item { get; public set; }
    public string Item { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] AllKeys { get; }
    [NullableContextAttribute("1")]
public NameValueCollection(NameValueCollection col);
    [ObsoleteAttribute("This constructor has been deprecated. Use NameValueCollection(IEqualityComparer) instead.")]
public NameValueCollection(IHashCodeProvider hashProvider, IComparer comparer);
    public NameValueCollection(int capacity);
    public NameValueCollection(IEqualityComparer equalityComparer);
    public NameValueCollection(int capacity, IEqualityComparer equalityComparer);
    [NullableContextAttribute("1")]
public NameValueCollection(int capacity, NameValueCollection col);
    [ObsoleteAttribute("This constructor has been deprecated. Use NameValueCollection(Int32, IEqualityComparer) instead.")]
public NameValueCollection(int capacity, IHashCodeProvider hashProvider, IComparer comparer);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected NameValueCollection(SerializationInfo info, StreamingContext context);
    protected void InvalidateCachedArrays();
    private static string GetAsOneString(ArrayList list);
    private static String[] GetAsStringArray(ArrayList list);
    [NullableContextAttribute("1")]
public void Add(NameValueCollection c);
    public virtual void Clear();
    [NullableContextAttribute("1")]
public void CopyTo(Array dest, int index);
    public bool HasKeys();
    internal virtual bool InternalHasKeys();
    public virtual void Add(string name, string value);
    public virtual string Get(string name);
    public virtual String[] GetValues(string name);
    public virtual void Set(string name, string value);
    public virtual void Remove(string name);
    public string get_Item(string name);
    public void set_Item(string name, string value);
    public virtual string Get(int index);
    public virtual String[] GetValues(int index);
    public virtual string GetKey(int index);
    public string get_Item(int index);
    public virtual String[] get_AllKeys();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Collections.Specialized.OrderedDictionary : object {
    private ArrayList _objectsArray;
    private Hashtable _objectsTable;
    private int _initialCapacity;
    private IEqualityComparer _comparer;
    private bool _readOnly;
    private SerializationInfo _siInfo;
    public int Count { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public ICollection Keys { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    public ICollection Values { get; }
    public OrderedDictionary(int capacity);
    [NullableContextAttribute("2")]
public OrderedDictionary(IEqualityComparer comparer);
    [NullableContextAttribute("2")]
public OrderedDictionary(int capacity, IEqualityComparer comparer);
    private OrderedDictionary(OrderedDictionary dictionary);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected OrderedDictionary(SerializationInfo info, StreamingContext context);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual ICollection get_Keys();
    private ArrayList EnsureObjectsArray();
    private Hashtable EnsureObjectsTable();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    [NullableContextAttribute("2")]
public sealed virtual object get_Item(int index);
    [NullableContextAttribute("2")]
public sealed virtual void set_Item(int index, object value);
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual ICollection get_Values();
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    public OrderedDictionary AsReadOnly();
    public sealed virtual bool Contains(object key);
    public sealed virtual void CopyTo(Array array, int index);
    private int IndexOfKey(object key);
    public sealed virtual void Insert(int index, object key, object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Remove(object key);
    public virtual IDictionaryEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
    [NullableContextAttribute("2")]
protected virtual void OnDeserialization(object sender);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Collections.Specialized.StringCollection : object {
    private ArrayList data;
    public string Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    [NullableAttribute("1")]
public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public string get_Item(int index);
    public void set_Item(int index, string value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    public int Add(string value);
    [NullableContextAttribute("1")]
public void AddRange(String[] value);
    public sealed virtual void Clear();
    public bool Contains(string value);
    [NullableContextAttribute("1")]
public void CopyTo(String[] array, int index);
    [NullableContextAttribute("1")]
public StringEnumerator GetEnumerator();
    public int IndexOf(string value);
    public void Insert(int index, string value);
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public void Remove(string value);
    public sealed virtual void RemoveAt(int index);
    [NullableContextAttribute("1")]
public sealed virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[DesignerSerializerAttribute("System.Diagnostics.Design.StringDictionaryCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Collections.Specialized.StringDictionary : object {
    private Hashtable contents;
    public int Count { get; }
    public bool IsSynchronized { get; }
    [NullableAttribute("2")]
public string Item { get; public set; }
    public ICollection Keys { get; }
    public object SyncRoot { get; }
    public ICollection Values { get; }
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual string get_Item(string key);
    public virtual void set_Item(string key, string value);
    public virtual ICollection get_Keys();
    public virtual object get_SyncRoot();
    public virtual ICollection get_Values();
    public virtual void Add(string key, string value);
    public virtual void Clear();
    public virtual bool ContainsKey(string key);
    [NullableContextAttribute("2")]
public virtual bool ContainsValue(string value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    public virtual void Remove(string key);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Collections.Specialized.StringEnumerator : object {
    private IEnumerator _baseEnumerator;
    public string Current { get; }
    internal StringEnumerator(StringCollection mappings);
    public string get_Current();
    public bool MoveNext();
    public void Reset();
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_AddingDuplicate { get; }
    internal static string InvalidOperation_EnumFailedVersion { get; }
    internal static string InvalidOperation_EnumOpCantHappen { get; }
    internal static string Arg_MultiRank { get; }
    internal static string Arg_InsufficientSpace { get; }
    internal static string CollectionReadOnly { get; }
    internal static string BitVectorFull { get; }
    internal static string OrderedDictionary_ReadOnly { get; }
    internal static string Argument_ImplementIComparable { get; }
    internal static string OrderedDictionary_SerializationMismatch { get; }
    internal static string Serialization_InvalidOnDeser { get; }
    internal static string NotSupported_KeyCollectionSet { get; }
    internal static string NotSupported_ValueCollectionSet { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_AddingDuplicate();
    internal static string get_InvalidOperation_EnumFailedVersion();
    internal static string get_InvalidOperation_EnumOpCantHappen();
    internal static string get_Arg_MultiRank();
    internal static string get_Arg_InsufficientSpace();
    internal static string get_CollectionReadOnly();
    internal static string get_BitVectorFull();
    internal static string get_OrderedDictionary_ReadOnly();
    internal static string get_Argument_ImplementIComparable();
    internal static string get_OrderedDictionary_SerializationMismatch();
    internal static string get_Serialization_InvalidOnDeser();
    internal static string get_NotSupported_KeyCollectionSet();
    internal static string get_NotSupported_ValueCollectionSet();
}
