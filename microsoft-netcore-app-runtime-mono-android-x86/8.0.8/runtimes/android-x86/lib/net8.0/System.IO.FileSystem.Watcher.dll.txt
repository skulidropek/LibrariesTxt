internal static class FxResources.System.IO.FileSystem.Watcher.SR : object {
}
internal static class Interop : object {
    private static void ThrowExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirError);
    internal static long CheckIo(long result, string path, bool isDirError);
    internal static int CheckIo(int result, string path, bool isDirError);
    internal static Exception GetExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirError);
    internal static Exception GetIOException(ErrorInfo errorInfo, string path);
    [CompilerGeneratedAttribute]
internal static bool <GetExceptionForIoErrno>g__ParentDirectoryExists|11_0(string fullPath);
}
[ExtensionAttribute]
internal static class InteropErrorExtensions : object {
    [ExtensionAttribute]
public static ErrorInfo Info(Error error);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.ErrorEventArgs : EventArgs {
    private Exception _exception;
    public ErrorEventArgs(Exception exception);
    public virtual Exception GetException();
}
public class System.IO.ErrorEventHandler : MulticastDelegate {
    public ErrorEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.FileSystemEventArgs : EventArgs {
    private WatcherChangeTypes _changeType;
    private string _name;
    private string _fullPath;
    public WatcherChangeTypes ChangeType { get; }
    public string FullPath { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public FileSystemEventArgs(WatcherChangeTypes changeType, string directory, string name);
    internal static string Combine(string directory, string name);
    public WatcherChangeTypes get_ChangeType();
    public string get_FullPath();
    [NullableContextAttribute("2")]
public string get_Name();
}
public class System.IO.FileSystemEventHandler : MulticastDelegate {
    public FileSystemEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, FileSystemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FileSystemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.IO.FileSystemWatcher : Component {
    private NormalizedFilterCollection _filters;
    private string _directory;
    private NotifyFilters _notifyFilters;
    private bool _includeSubdirectories;
    private bool _enabled;
    private bool _initializing;
    private UInt32 _internalBufferSize;
    private bool _disposed;
    private FileSystemEventHandler _onChangedHandler;
    private FileSystemEventHandler _onCreatedHandler;
    private FileSystemEventHandler _onDeletedHandler;
    private RenamedEventHandler _onRenamedHandler;
    private ErrorEventHandler _onErrorHandler;
    [CompilerGeneratedAttribute]
private ISynchronizeInvoke <SynchronizingObject>k__BackingField;
    private CancellationTokenSource _cancellation;
    public NotifyFilters NotifyFilter { get; public set; }
    [NullableAttribute("1")]
public Collection`1<string> Filters { get; }
    public bool EnableRaisingEvents { get; public set; }
    [NullableAttribute("1")]
public string Filter { get; public set; }
    public bool IncludeSubdirectories { get; public set; }
    public int InternalBufferSize { get; public set; }
    [NullableAttribute("1")]
[EditorAttribute("System.Diagnostics.Design.FSWPathEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string Path { get; public set; }
    public ISite Site { get; public set; }
    public ISynchronizeInvoke SynchronizingObject { get; public set; }
    [NullableContextAttribute("1")]
public FileSystemWatcher(string path);
    [NullableContextAttribute("1")]
public FileSystemWatcher(string path, string filter);
    public NotifyFilters get_NotifyFilter();
    public void set_NotifyFilter(NotifyFilters value);
    [NullableContextAttribute("1")]
public Collection`1<string> get_Filters();
    public bool get_EnableRaisingEvents();
    public void set_EnableRaisingEvents(bool value);
    [NullableContextAttribute("1")]
public string get_Filter();
    [NullableContextAttribute("1")]
public void set_Filter(string value);
    public bool get_IncludeSubdirectories();
    public void set_IncludeSubdirectories(bool value);
    public int get_InternalBufferSize();
    public void set_InternalBufferSize(int value);
    private Byte[] AllocateBuffer();
    [NullableContextAttribute("1")]
public string get_Path();
    [NullableContextAttribute("1")]
public void set_Path(string value);
    public void add_Changed(FileSystemEventHandler value);
    public void remove_Changed(FileSystemEventHandler value);
    public void add_Created(FileSystemEventHandler value);
    public void remove_Created(FileSystemEventHandler value);
    public void add_Deleted(FileSystemEventHandler value);
    public void remove_Deleted(FileSystemEventHandler value);
    public void add_Error(ErrorEventHandler value);
    public void remove_Error(ErrorEventHandler value);
    public void add_Renamed(RenamedEventHandler value);
    public void remove_Renamed(RenamedEventHandler value);
    protected virtual void Dispose(bool disposing);
    private static void CheckPathValidity(string path);
    private bool MatchPattern(ReadOnlySpan`1<char> relativePath);
    private void NotifyInternalBufferOverflowEvent();
    private void NotifyRenameEventArgs(WatcherChangeTypes action, ReadOnlySpan`1<char> name, ReadOnlySpan`1<char> oldName);
    private FileSystemEventHandler GetHandler(WatcherChangeTypes changeType);
    private void NotifyFileSystemEventArgs(WatcherChangeTypes changeType, ReadOnlySpan`1<char> name);
    [NullableContextAttribute("1")]
protected void OnChanged(FileSystemEventArgs e);
    [NullableContextAttribute("1")]
protected void OnCreated(FileSystemEventArgs e);
    [NullableContextAttribute("1")]
protected void OnDeleted(FileSystemEventArgs e);
    private void InvokeOn(FileSystemEventArgs e, FileSystemEventHandler handler);
    [NullableContextAttribute("1")]
protected void OnError(ErrorEventArgs e);
    [NullableContextAttribute("1")]
protected void OnRenamed(RenamedEventArgs e);
    public WaitForChangedResult WaitForChanged(WatcherChangeTypes changeType);
    public WaitForChangedResult WaitForChanged(WatcherChangeTypes changeType, int timeout);
    public WaitForChangedResult WaitForChanged(WatcherChangeTypes changeType, TimeSpan timeout);
    private static int ToTimeoutMilliseconds(TimeSpan timeout);
    private void Restart();
    private void StartRaisingEventsIfNotDisposed();
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    [CompilerGeneratedAttribute]
public ISynchronizeInvoke get_SynchronizingObject();
    [CompilerGeneratedAttribute]
public void set_SynchronizingObject(ISynchronizeInvoke value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    private bool IsSuspended();
    private void StartRaisingEvents();
    private void StopRaisingEvents();
    private void FinalizeDispose();
    private static string ReadMaxUserLimit(string path);
    private static NotifyEvents TranslateFilters(NotifyFilters filters);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.IO.InternalBufferOverflowException : SystemException {
    public InternalBufferOverflowException(string message);
    public InternalBufferOverflowException(string message, Exception inner);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected InternalBufferOverflowException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum System.IO.NotifyFilters : Enum {
    public int value__;
    public static NotifyFilters FileName;
    public static NotifyFilters DirectoryName;
    public static NotifyFilters Attributes;
    public static NotifyFilters Size;
    public static NotifyFilters LastWrite;
    public static NotifyFilters LastAccess;
    public static NotifyFilters CreationTime;
    public static NotifyFilters Security;
}
internal static class System.IO.PathInternal : object {
    internal static StringComparison StringComparison { get; }
    internal static bool IsCaseSensitive { get; }
    internal static StringComparison get_StringComparison();
    internal static bool get_IsCaseSensitive();
    internal static bool IsDirectorySeparator(char c);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.IO.RenamedEventArgs : FileSystemEventArgs {
    private string _oldName;
    private string _oldFullPath;
    [NullableAttribute("1")]
public string OldFullPath { get; }
    public string OldName { get; }
    public RenamedEventArgs(WatcherChangeTypes changeType, string directory, string name, string oldName);
    [NullableContextAttribute("1")]
public string get_OldFullPath();
    public string get_OldName();
}
public class System.IO.RenamedEventHandler : MulticastDelegate {
    public RenamedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, RenamedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RenamedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.IO.WaitForChangedResult : ValueType {
    internal static WaitForChangedResult TimedOutResult;
    [CompilerGeneratedAttribute]
private WatcherChangeTypes <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TimedOut>k__BackingField;
    public WatcherChangeTypes ChangeType { get; public set; }
    public string Name { get; public set; }
    public string OldName { get; public set; }
    public bool TimedOut { get; public set; }
    internal WaitForChangedResult(WatcherChangeTypes changeType, string name, string oldName, bool timedOut);
    private static WaitForChangedResult();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public WatcherChangeTypes get_ChangeType();
    [CompilerGeneratedAttribute]
public void set_ChangeType(WatcherChangeTypes value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_OldName();
    [CompilerGeneratedAttribute]
public void set_OldName(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_TimedOut();
    [CompilerGeneratedAttribute]
public void set_TimedOut(bool value);
}
[FlagsAttribute]
public enum System.IO.WatcherChangeTypes : Enum {
    public int value__;
    public static WatcherChangeTypes Created;
    public static WatcherChangeTypes Deleted;
    public static WatcherChangeTypes Changed;
    public static WatcherChangeTypes Renamed;
    public static WatcherChangeTypes All;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string BufferSizeTooLarge { get; }
    internal static string FSW_BufferOverflow { get; }
    internal static string InvalidDirName { get; }
    internal static string InvalidDirName_NotExists { get; }
    internal static string InvalidEnumArgument { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string IOException_INotifyInstanceSystemLimitExceeded { get; }
    internal static string IOException_INotifyInstanceUserLimitExceeded_Value { get; }
    internal static string IOException_INotifyWatchesUserLimitExceeded_Value { get; }
    internal static string IOException_INotifyInstanceUserLimitExceeded { get; }
    internal static string IOException_INotifyWatchesUserLimitExceeded { get; }
    internal static string IO_PathTooLong_Path { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static ResourceManager get_ResourceManager();
    internal static string get_BufferSizeTooLarge();
    internal static string get_FSW_BufferOverflow();
    internal static string get_InvalidDirName();
    internal static string get_InvalidDirName_NotExists();
    internal static string get_InvalidEnumArgument();
    internal static string get_IO_FileExists_Name();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_IOException_INotifyInstanceSystemLimitExceeded();
    internal static string get_IOException_INotifyInstanceUserLimitExceeded_Value();
    internal static string get_IOException_INotifyWatchesUserLimitExceeded_Value();
    internal static string get_IOException_INotifyInstanceUserLimitExceeded();
    internal static string get_IOException_INotifyWatchesUserLimitExceeded();
    internal static string get_IO_PathTooLong_Path();
}
