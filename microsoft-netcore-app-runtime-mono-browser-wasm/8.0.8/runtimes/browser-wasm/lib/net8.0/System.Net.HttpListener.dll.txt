internal static class FxResources.System.Net.HttpListener.SR : object {
}
public class System.Net.AuthenticationSchemeSelector : MulticastDelegate {
    public AuthenticationSchemeSelector(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual AuthenticationSchemes Invoke(HttpListenerRequest httpRequest);
    public virtual IAsyncResult BeginInvoke(HttpListenerRequest httpRequest, AsyncCallback callback, object object);
    public virtual AuthenticationSchemes EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.HttpListener : object {
    public AuthenticationSchemes AuthenticationSchemes { get; public set; }
    [NullableAttribute("2")]
public AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; public set; }
    public ServiceNameCollection DefaultServiceNames { get; }
    public ExtendedProtectionPolicy ExtendedProtectionPolicy { get; public set; }
    [NullableAttribute("2")]
public ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; public set; }
    public bool IgnoreWriteExceptions { get; public set; }
    public bool IsListening { get; }
    public static bool IsSupported { get; }
    public HttpListenerPrefixCollection Prefixes { get; }
    [NullableAttribute("2")]
public string Realm { get; public set; }
    public HttpListenerTimeoutManager TimeoutManager { get; }
    public bool UnsafeConnectionNtlmAuthentication { get; public set; }
    public AuthenticationSchemes get_AuthenticationSchemes();
    public void set_AuthenticationSchemes(AuthenticationSchemes value);
    [NullableContextAttribute("2")]
public AuthenticationSchemeSelector get_AuthenticationSchemeSelectorDelegate();
    [NullableContextAttribute("2")]
public void set_AuthenticationSchemeSelectorDelegate(AuthenticationSchemeSelector value);
    public ServiceNameCollection get_DefaultServiceNames();
    public ExtendedProtectionPolicy get_ExtendedProtectionPolicy();
    public void set_ExtendedProtectionPolicy(ExtendedProtectionPolicy value);
    [NullableContextAttribute("2")]
public ExtendedProtectionSelector get_ExtendedProtectionSelectorDelegate();
    [NullableContextAttribute("2")]
public void set_ExtendedProtectionSelectorDelegate(ExtendedProtectionSelector value);
    public bool get_IgnoreWriteExceptions();
    public void set_IgnoreWriteExceptions(bool value);
    public bool get_IsListening();
    public static bool get_IsSupported();
    public HttpListenerPrefixCollection get_Prefixes();
    [NullableContextAttribute("2")]
public string get_Realm();
    [NullableContextAttribute("2")]
public void set_Realm(string value);
    public HttpListenerTimeoutManager get_TimeoutManager();
    public bool get_UnsafeConnectionNtlmAuthentication();
    public void set_UnsafeConnectionNtlmAuthentication(bool value);
    public void Abort();
    [NullableContextAttribute("2")]
public IAsyncResult BeginGetContext(AsyncCallback callback, object state);
    public void Close();
    public HttpListenerContext EndGetContext(IAsyncResult asyncResult);
    public HttpListenerContext GetContext();
    public Task`1<HttpListenerContext> GetContextAsync();
    public void Start();
    public void Stop();
    private sealed virtual override void System.IDisposable.Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.HttpListenerBasicIdentity : GenericIdentity {
    public string Password { get; }
    public HttpListenerBasicIdentity(string username, string password);
    public virtual string get_Password();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.HttpListenerContext : object {
    public HttpListenerRequest Request { get; }
    public HttpListenerResponse Response { get; }
    [NullableAttribute("2")]
public IPrincipal User { get; }
    public HttpListenerRequest get_Request();
    public HttpListenerResponse get_Response();
    [NullableContextAttribute("2")]
public IPrincipal get_User();
    public Task`1<HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol);
    public Task`1<HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);
    [NullableContextAttribute("0")]
public Task`1<HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment`1<byte> internalBuffer);
    public Task`1<HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol, TimeSpan keepAliveInterval);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.HttpListenerException : Win32Exception {
    public int ErrorCode { get; }
    public HttpListenerException(int errorCode);
    public HttpListenerException(int errorCode, string message);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected HttpListenerException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual int get_ErrorCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.HttpListenerPrefixCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public bool get_IsSynchronized();
    public sealed virtual void Add(string uriPrefix);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string uriPrefix);
    public void CopyTo(Array array, int offset);
    public sealed virtual void CopyTo(String[] array, int offset);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    public sealed virtual bool Remove(string uriPrefix);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.HttpListenerRequest : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] AcceptTypes { get; }
    public int ClientCertificateError { get; }
    public Encoding ContentEncoding { get; }
    public long ContentLength64 { get; }
    [NullableAttribute("2")]
public string ContentType { get; }
    public CookieCollection Cookies { get; }
    public bool HasEntityBody { get; }
    public NameValueCollection Headers { get; }
    public string HttpMethod { get; }
    public Stream InputStream { get; }
    public bool IsAuthenticated { get; }
    public bool IsLocal { get; }
    public bool IsSecureConnection { get; }
    public bool IsWebSocketRequest { get; }
    public bool KeepAlive { get; }
    public IPEndPoint LocalEndPoint { get; }
    public Version ProtocolVersion { get; }
    public NameValueCollection QueryString { get; }
    [NullableAttribute("2")]
public string RawUrl { get; }
    public IPEndPoint RemoteEndPoint { get; }
    public Guid RequestTraceIdentifier { get; }
    [NullableAttribute("2")]
public string ServiceName { get; }
    public TransportContext TransportContext { get; }
    [NullableAttribute("2")]
public Uri Url { get; }
    [NullableAttribute("2")]
public Uri UrlReferrer { get; }
    public string UserAgent { get; }
    public string UserHostAddress { get; }
    public string UserHostName { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] UserLanguages { get; }
    public String[] get_AcceptTypes();
    public int get_ClientCertificateError();
    public Encoding get_ContentEncoding();
    public long get_ContentLength64();
    [NullableContextAttribute("2")]
public string get_ContentType();
    public CookieCollection get_Cookies();
    public bool get_HasEntityBody();
    public NameValueCollection get_Headers();
    public string get_HttpMethod();
    public Stream get_InputStream();
    public bool get_IsAuthenticated();
    public bool get_IsLocal();
    public bool get_IsSecureConnection();
    public bool get_IsWebSocketRequest();
    public bool get_KeepAlive();
    public IPEndPoint get_LocalEndPoint();
    public Version get_ProtocolVersion();
    public NameValueCollection get_QueryString();
    [NullableContextAttribute("2")]
public string get_RawUrl();
    public IPEndPoint get_RemoteEndPoint();
    public Guid get_RequestTraceIdentifier();
    [NullableContextAttribute("2")]
public string get_ServiceName();
    public TransportContext get_TransportContext();
    [NullableContextAttribute("2")]
public Uri get_Url();
    [NullableContextAttribute("2")]
public Uri get_UrlReferrer();
    public string get_UserAgent();
    public string get_UserHostAddress();
    public string get_UserHostName();
    public String[] get_UserLanguages();
    [NullableContextAttribute("2")]
public IAsyncResult BeginGetClientCertificate(AsyncCallback requestCallback, object state);
    public X509Certificate2 EndGetClientCertificate(IAsyncResult asyncResult);
    [NullableContextAttribute("2")]
public X509Certificate2 GetClientCertificate();
    public Task`1<X509Certificate2> GetClientCertificateAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.HttpListenerResponse : object {
    [NullableAttribute("2")]
public Encoding ContentEncoding { get; public set; }
    public long ContentLength64 { get; public set; }
    [NullableAttribute("2")]
public string ContentType { get; public set; }
    public CookieCollection Cookies { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public bool KeepAlive { get; public set; }
    public Stream OutputStream { get; }
    public Version ProtocolVersion { get; public set; }
    [NullableAttribute("2")]
public string RedirectLocation { get; public set; }
    public bool SendChunked { get; public set; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    [NullableContextAttribute("2")]
public Encoding get_ContentEncoding();
    [NullableContextAttribute("2")]
public void set_ContentEncoding(Encoding value);
    public long get_ContentLength64();
    public void set_ContentLength64(long value);
    [NullableContextAttribute("2")]
public string get_ContentType();
    [NullableContextAttribute("2")]
public void set_ContentType(string value);
    public CookieCollection get_Cookies();
    public void set_Cookies(CookieCollection value);
    public WebHeaderCollection get_Headers();
    public void set_Headers(WebHeaderCollection value);
    public bool get_KeepAlive();
    public void set_KeepAlive(bool value);
    public Stream get_OutputStream();
    public Version get_ProtocolVersion();
    public void set_ProtocolVersion(Version value);
    [NullableContextAttribute("2")]
public string get_RedirectLocation();
    [NullableContextAttribute("2")]
public void set_RedirectLocation(string value);
    public bool get_SendChunked();
    public void set_SendChunked(bool value);
    public int get_StatusCode();
    public void set_StatusCode(int value);
    public string get_StatusDescription();
    public void set_StatusDescription(string value);
    public void Abort();
    public void AddHeader(string name, string value);
    public void AppendCookie(Cookie cookie);
    public void AppendHeader(string name, string value);
    public void Close();
    public void Close(Byte[] responseEntity, bool willBlock);
    public void CopyFrom(HttpListenerResponse templateResponse);
    public void Redirect(string url);
    public void SetCookie(Cookie cookie);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Net.HttpListenerTimeoutManager : object {
    public TimeSpan DrainEntityBody { get; public set; }
    public TimeSpan EntityBody { get; public set; }
    public TimeSpan HeaderWait { get; public set; }
    public TimeSpan IdleConnection { get; public set; }
    public long MinSendBytesPerSecond { get; public set; }
    public TimeSpan RequestQueue { get; public set; }
    public TimeSpan get_DrainEntityBody();
    public void set_DrainEntityBody(TimeSpan value);
    public TimeSpan get_EntityBody();
    [SupportedOSPlatformAttribute("windows")]
public void set_EntityBody(TimeSpan value);
    public TimeSpan get_HeaderWait();
    [SupportedOSPlatformAttribute("windows")]
public void set_HeaderWait(TimeSpan value);
    public TimeSpan get_IdleConnection();
    public void set_IdleConnection(TimeSpan value);
    public long get_MinSendBytesPerSecond();
    [SupportedOSPlatformAttribute("windows")]
public void set_MinSendBytesPerSecond(long value);
    public TimeSpan get_RequestQueue();
    [SupportedOSPlatformAttribute("windows")]
public void set_RequestQueue(TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.WebSockets.HttpListenerWebSocketContext : WebSocketContext {
    public CookieCollection CookieCollection { get; }
    public NameValueCollection Headers { get; }
    public bool IsAuthenticated { get; }
    public bool IsLocal { get; }
    public bool IsSecureConnection { get; }
    public string Origin { get; }
    public Uri RequestUri { get; }
    public string SecWebSocketKey { get; }
    public IEnumerable`1<string> SecWebSocketProtocols { get; }
    public string SecWebSocketVersion { get; }
    public IPrincipal User { get; }
    public WebSocket WebSocket { get; }
    public virtual CookieCollection get_CookieCollection();
    public virtual NameValueCollection get_Headers();
    public virtual bool get_IsAuthenticated();
    public virtual bool get_IsLocal();
    public virtual bool get_IsSecureConnection();
    public virtual string get_Origin();
    public virtual Uri get_RequestUri();
    public virtual string get_SecWebSocketKey();
    public virtual IEnumerable`1<string> get_SecWebSocketProtocols();
    public virtual string get_SecWebSocketVersion();
    public virtual IPrincipal get_User();
    public virtual WebSocket get_WebSocket();
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_log_listener_delegate_exception { get; }
    internal static string net_log_listener_unsupported_authentication_scheme { get; }
    internal static string net_log_listener_unmatched_authentication_scheme { get; }
    internal static string net_io_invalidasyncresult { get; }
    internal static string net_io_invalidendcall { get; }
    internal static string net_io_out_range { get; }
    internal static string net_listener_cannot_set_custom_cbt { get; }
    internal static string net_listener_detach_error { get; }
    internal static string net_listener_scheme { get; }
    internal static string net_listener_host { get; }
    internal static string net_listener_not_supported { get; }
    internal static string net_listener_mustcall { get; }
    internal static string net_listener_slash { get; }
    internal static string net_listener_already { get; }
    internal static string net_log_listener_no_cbt_disabled { get; }
    internal static string net_log_listener_no_cbt_http { get; }
    internal static string net_log_listener_no_cbt_trustedproxy { get; }
    internal static string net_log_listener_cbt { get; }
    internal static string net_log_listener_no_spn_kerberos { get; }
    internal static string net_log_listener_no_spn_disabled { get; }
    internal static string net_log_listener_no_spn_cbt { get; }
    internal static string net_log_listener_no_spn_whensupported { get; }
    internal static string net_log_listener_no_spn_loopback { get; }
    internal static string net_log_listener_spn { get; }
    internal static string net_log_listener_spn_passed { get; }
    internal static string net_log_listener_spn_failed { get; }
    internal static string net_log_listener_spn_failed_always { get; }
    internal static string net_log_listener_spn_failed_empty { get; }
    internal static string net_log_listener_spn_failed_dump { get; }
    internal static string net_log_listener_spn_add { get; }
    internal static string net_log_listener_spn_not_add { get; }
    internal static string net_log_listener_spn_remove { get; }
    internal static string net_log_listener_spn_not_remove { get; }
    internal static string net_listener_no_spns { get; }
    internal static string net_ssp_dont_support_cbt { get; }
    internal static string net_PropertyNotImplementedException { get; }
    internal static string net_array_too_small { get; }
    internal static string net_listener_mustcompletecall { get; }
    internal static string net_listener_invalid_cbt_type { get; }
    internal static string net_listener_callinprogress { get; }
    internal static string net_log_listener_cant_create_uri { get; }
    internal static string net_log_listener_cant_convert_raw_path { get; }
    internal static string net_log_listener_cant_convert_percent_value { get; }
    internal static string net_log_listener_cant_convert_to_utf8 { get; }
    internal static string net_log_listener_cant_convert_bytes { get; }
    internal static string net_invalidstatus { get; }
    internal static string net_WebHeaderInvalidControlChars { get; }
    internal static string net_rspsubmitted { get; }
    internal static string net_nochunkuploadonhttp10 { get; }
    internal static string net_cookie_exists { get; }
    internal static string net_wrongversion { get; }
    internal static string net_noseek { get; }
    internal static string net_writeonlystream { get; }
    internal static string net_entitytoobig { get; }
    internal static string net_io_notenoughbyteswritten { get; }
    internal static string net_listener_close_urlgroup_error { get; }
    internal static string net_WebSockets_NativeSendResponseHeaders { get; }
    internal static string net_WebSockets_ClientAcceptingNoProtocols { get; }
    internal static string net_WebSockets_AcceptUnsupportedProtocol { get; }
    internal static string net_WebSockets_AcceptNotAWebSocket { get; }
    internal static string net_WebSockets_AcceptHeaderNotFound { get; }
    internal static string net_WebSockets_AcceptUnsupportedWebSocketVersion { get; }
    internal static string net_WebSockets_InvalidCharInProtocolString { get; }
    internal static string net_WebSockets_ReasonNotNull { get; }
    internal static string net_WebSockets_InvalidCloseStatusCode { get; }
    internal static string net_WebSockets_InvalidCloseStatusDescription { get; }
    internal static string net_WebSockets_UnsupportedPlatform { get; }
    internal static string net_readonlystream { get; }
    internal static string net_WebSockets_InvalidState_ClosedOrAborted { get; }
    internal static string net_WebSockets_ReceiveAsyncDisallowedAfterCloseAsync { get; }
    internal static string net_Websockets_AlreadyOneOutstandingOperation { get; }
    internal static string net_WebSockets_InvalidMessageType { get; }
    internal static string net_WebSockets_InvalidBufferType { get; }
    internal static string net_WebSockets_ArgumentOutOfRange_InternalBuffer { get; }
    internal static string net_WebSockets_Argument_InvalidMessageType { get; }
    internal static string net_securitypackagesupport { get; }
    internal static string net_log_operation_failed_with_error { get; }
    internal static string net_MethodNotImplementedException { get; }
    internal static string net_invalid_enum { get; }
    internal static string net_auth_message_not_encrypted { get; }
    internal static string SSPIInvalidHandleType { get; }
    internal static string net_io_operation_aborted { get; }
    internal static string net_invalid_path { get; }
    internal static string net_listener_auth_errors { get; }
    internal static string net_listener_close { get; }
    internal static string net_invalid_port { get; }
    internal static string net_WebSockets_InvalidState { get; }
    internal static string SystemNetHttpListener_PlatformNotSupported { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_log_listener_delegate_exception();
    internal static string get_net_log_listener_unsupported_authentication_scheme();
    internal static string get_net_log_listener_unmatched_authentication_scheme();
    internal static string get_net_io_invalidasyncresult();
    internal static string get_net_io_invalidendcall();
    internal static string get_net_io_out_range();
    internal static string get_net_listener_cannot_set_custom_cbt();
    internal static string get_net_listener_detach_error();
    internal static string get_net_listener_scheme();
    internal static string get_net_listener_host();
    internal static string get_net_listener_not_supported();
    internal static string get_net_listener_mustcall();
    internal static string get_net_listener_slash();
    internal static string get_net_listener_already();
    internal static string get_net_log_listener_no_cbt_disabled();
    internal static string get_net_log_listener_no_cbt_http();
    internal static string get_net_log_listener_no_cbt_trustedproxy();
    internal static string get_net_log_listener_cbt();
    internal static string get_net_log_listener_no_spn_kerberos();
    internal static string get_net_log_listener_no_spn_disabled();
    internal static string get_net_log_listener_no_spn_cbt();
    internal static string get_net_log_listener_no_spn_whensupported();
    internal static string get_net_log_listener_no_spn_loopback();
    internal static string get_net_log_listener_spn();
    internal static string get_net_log_listener_spn_passed();
    internal static string get_net_log_listener_spn_failed();
    internal static string get_net_log_listener_spn_failed_always();
    internal static string get_net_log_listener_spn_failed_empty();
    internal static string get_net_log_listener_spn_failed_dump();
    internal static string get_net_log_listener_spn_add();
    internal static string get_net_log_listener_spn_not_add();
    internal static string get_net_log_listener_spn_remove();
    internal static string get_net_log_listener_spn_not_remove();
    internal static string get_net_listener_no_spns();
    internal static string get_net_ssp_dont_support_cbt();
    internal static string get_net_PropertyNotImplementedException();
    internal static string get_net_array_too_small();
    internal static string get_net_listener_mustcompletecall();
    internal static string get_net_listener_invalid_cbt_type();
    internal static string get_net_listener_callinprogress();
    internal static string get_net_log_listener_cant_create_uri();
    internal static string get_net_log_listener_cant_convert_raw_path();
    internal static string get_net_log_listener_cant_convert_percent_value();
    internal static string get_net_log_listener_cant_convert_to_utf8();
    internal static string get_net_log_listener_cant_convert_bytes();
    internal static string get_net_invalidstatus();
    internal static string get_net_WebHeaderInvalidControlChars();
    internal static string get_net_rspsubmitted();
    internal static string get_net_nochunkuploadonhttp10();
    internal static string get_net_cookie_exists();
    internal static string get_net_wrongversion();
    internal static string get_net_noseek();
    internal static string get_net_writeonlystream();
    internal static string get_net_entitytoobig();
    internal static string get_net_io_notenoughbyteswritten();
    internal static string get_net_listener_close_urlgroup_error();
    internal static string get_net_WebSockets_NativeSendResponseHeaders();
    internal static string get_net_WebSockets_ClientAcceptingNoProtocols();
    internal static string get_net_WebSockets_AcceptUnsupportedProtocol();
    internal static string get_net_WebSockets_AcceptNotAWebSocket();
    internal static string get_net_WebSockets_AcceptHeaderNotFound();
    internal static string get_net_WebSockets_AcceptUnsupportedWebSocketVersion();
    internal static string get_net_WebSockets_InvalidCharInProtocolString();
    internal static string get_net_WebSockets_ReasonNotNull();
    internal static string get_net_WebSockets_InvalidCloseStatusCode();
    internal static string get_net_WebSockets_InvalidCloseStatusDescription();
    internal static string get_net_WebSockets_UnsupportedPlatform();
    internal static string get_net_readonlystream();
    internal static string get_net_WebSockets_InvalidState_ClosedOrAborted();
    internal static string get_net_WebSockets_ReceiveAsyncDisallowedAfterCloseAsync();
    internal static string get_net_Websockets_AlreadyOneOutstandingOperation();
    internal static string get_net_WebSockets_InvalidMessageType();
    internal static string get_net_WebSockets_InvalidBufferType();
    internal static string get_net_WebSockets_ArgumentOutOfRange_InternalBuffer();
    internal static string get_net_WebSockets_Argument_InvalidMessageType();
    internal static string get_net_securitypackagesupport();
    internal static string get_net_log_operation_failed_with_error();
    internal static string get_net_MethodNotImplementedException();
    internal static string get_net_invalid_enum();
    internal static string get_net_auth_message_not_encrypted();
    internal static string get_SSPIInvalidHandleType();
    internal static string get_net_io_operation_aborted();
    internal static string get_net_invalid_path();
    internal static string get_net_listener_auth_errors();
    internal static string get_net_listener_close();
    internal static string get_net_invalid_port();
    internal static string get_net_WebSockets_InvalidState();
    internal static string get_SystemNetHttpListener_PlatformNotSupported();
}
