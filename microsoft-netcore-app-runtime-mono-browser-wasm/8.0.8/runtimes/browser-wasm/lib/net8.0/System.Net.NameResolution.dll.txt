internal static class FxResources.System.Net.NameResolution.SR : object {
}
public static class System.Net.Dns : object {
    [NullableContextAttribute("1")]
public static string GetHostName();
    public static IAsyncResult BeginGetHostAddresses(string hostNameOrAddress, AsyncCallback requestCallback, object state);
    [ObsoleteAttribute("BeginGetHostByName has been deprecated. Use BeginGetHostEntry instead.")]
public static IAsyncResult BeginGetHostByName(string hostName, AsyncCallback requestCallback, object stateObject);
    public static IAsyncResult BeginGetHostEntry(IPAddress address, AsyncCallback requestCallback, object stateObject);
    public static IAsyncResult BeginGetHostEntry(string hostNameOrAddress, AsyncCallback requestCallback, object stateObject);
    [ObsoleteAttribute("BeginResolve has been deprecated. Use BeginGetHostEntry instead.")]
public static IAsyncResult BeginResolve(string hostName, AsyncCallback requestCallback, object stateObject);
    public static IPAddress[] EndGetHostAddresses(IAsyncResult asyncResult);
    [ObsoleteAttribute("EndGetHostByName has been deprecated. Use EndGetHostEntry instead.")]
public static IPHostEntry EndGetHostByName(IAsyncResult asyncResult);
    public static IPHostEntry EndGetHostEntry(IAsyncResult asyncResult);
    [ObsoleteAttribute("EndResolve has been deprecated. Use EndGetHostEntry instead.")]
public static IPHostEntry EndResolve(IAsyncResult asyncResult);
    public static IPAddress[] GetHostAddresses(string hostNameOrAddress);
    public static IPAddress[] GetHostAddresses(string hostNameOrAddress, AddressFamily family);
    public static Task`1<IPAddress[]> GetHostAddressesAsync(string hostNameOrAddress);
    public static Task`1<IPAddress[]> GetHostAddressesAsync(string hostNameOrAddress, AddressFamily family, CancellationToken cancellationToken);
    public static Task`1<IPAddress[]> GetHostAddressesAsync(string hostNameOrAddress, CancellationToken cancellationToken);
    [ObsoleteAttribute("GetHostByAddress has been deprecated. Use GetHostEntry instead.")]
public static IPHostEntry GetHostByAddress(IPAddress address);
    [ObsoleteAttribute("GetHostByAddress has been deprecated. Use GetHostEntry instead.")]
public static IPHostEntry GetHostByAddress(string address);
    [ObsoleteAttribute("GetHostByName has been deprecated. Use GetHostEntry instead.")]
public static IPHostEntry GetHostByName(string hostName);
    public static IPHostEntry GetHostEntry(IPAddress address);
    public static IPHostEntry GetHostEntry(string hostNameOrAddress);
    public static IPHostEntry GetHostEntry(string hostNameOrAddress, AddressFamily family);
    public static Task`1<IPHostEntry> GetHostEntryAsync(IPAddress address);
    public static Task`1<IPHostEntry> GetHostEntryAsync(string hostNameOrAddress);
    public static Task`1<IPHostEntry> GetHostEntryAsync(string hostNameOrAddress, AddressFamily family, CancellationToken cancellationToken);
    public static Task`1<IPHostEntry> GetHostEntryAsync(string hostNameOrAddress, CancellationToken cancellationToken);
    [ObsoleteAttribute("Resolve has been deprecated. Use GetHostEntry instead.")]
public static IPHostEntry Resolve(string hostName);
}
public class System.Net.IPHostEntry : object {
    public IPAddress[] AddressList { get; public set; }
    public String[] Aliases { get; public set; }
    public string HostName { get; public set; }
    public IPAddress[] get_AddressList();
    public void set_AddressList(IPAddress[] value);
    public String[] get_Aliases();
    public void set_Aliases(String[] value);
    public string get_HostName();
    public void set_HostName(string value);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_toolong { get; }
    internal static string net_completed_result { get; }
    internal static string net_io_invalidasyncresult { get; }
    internal static string net_io_invalidendcall { get; }
    internal static string net_invalid_ip_addr { get; }
    internal static string SystemNetNameResolution_PlatformNotSupported { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_toolong();
    internal static string get_net_completed_result();
    internal static string get_net_io_invalidasyncresult();
    internal static string get_net_io_invalidendcall();
    internal static string get_net_invalid_ip_addr();
    internal static string get_SystemNetNameResolution_PlatformNotSupported();
}
