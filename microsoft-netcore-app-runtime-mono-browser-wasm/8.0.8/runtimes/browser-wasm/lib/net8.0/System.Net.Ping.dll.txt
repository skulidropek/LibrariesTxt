internal static class FxResources.System.Net.Ping.SR : object {
}
public enum System.Net.NetworkInformation.IPStatus : Enum {
    public int value__;
    public static IPStatus Unknown;
    public static IPStatus Success;
    public static IPStatus DestinationNetworkUnreachable;
    public static IPStatus DestinationHostUnreachable;
    public static IPStatus DestinationProhibited;
    public static IPStatus DestinationProtocolUnreachable;
    public static IPStatus DestinationPortUnreachable;
    public static IPStatus NoResources;
    public static IPStatus BadOption;
    public static IPStatus HardwareError;
    public static IPStatus PacketTooBig;
    public static IPStatus TimedOut;
    public static IPStatus BadRoute;
    public static IPStatus TtlExpired;
    public static IPStatus TtlReassemblyTimeExceeded;
    public static IPStatus ParameterProblem;
    public static IPStatus SourceQuench;
    public static IPStatus BadDestination;
    public static IPStatus DestinationUnreachable;
    public static IPStatus TimeExceeded;
    public static IPStatus BadHeader;
    public static IPStatus UnrecognizedNextHeader;
    public static IPStatus IcmpError;
    public static IPStatus DestinationScopeMismatch;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.NetworkInformation.Ping : Component {
    [NullableContextAttribute("2")]
public void add_PingCompleted(PingCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_PingCompleted(PingCompletedEventHandler value);
    protected virtual void Dispose(bool disposing);
    protected void OnPingCompleted(PingCompletedEventArgs e);
    public PingReply Send(IPAddress address);
    public PingReply Send(IPAddress address, int timeout);
    public PingReply Send(IPAddress address, int timeout, Byte[] buffer);
    public PingReply Send(IPAddress address, int timeout, Byte[] buffer, PingOptions options);
    public PingReply Send(string hostNameOrAddress);
    public PingReply Send(string hostNameOrAddress, int timeout);
    public PingReply Send(string hostNameOrAddress, int timeout, Byte[] buffer);
    public PingReply Send(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options);
    public PingReply Send(IPAddress address, TimeSpan timeout, Byte[] buffer, PingOptions options);
    public PingReply Send(string hostNameOrAddress, TimeSpan timeout, Byte[] buffer, PingOptions options);
    public void SendAsync(IPAddress address, int timeout, Byte[] buffer, PingOptions options, object userToken);
    public void SendAsync(IPAddress address, int timeout, Byte[] buffer, object userToken);
    public void SendAsync(IPAddress address, int timeout, object userToken);
    public void SendAsync(IPAddress address, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, Byte[] buffer, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, object userToken);
    public void SendAsync(string hostNameOrAddress, object userToken);
    public void SendAsyncCancel();
    public Task`1<PingReply> SendPingAsync(IPAddress address);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout, Byte[] buffer);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout, Byte[] buffer, PingOptions options);
    public Task`1<PingReply> SendPingAsync(IPAddress address, TimeSpan timeout, Byte[] buffer, PingOptions options, CancellationToken cancellationToken);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, Byte[] buffer);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, TimeSpan timeout, Byte[] buffer, PingOptions options, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.NetworkInformation.PingCompletedEventArgs : AsyncCompletedEventArgs {
    public PingReply Reply { get; }
    public PingReply get_Reply();
}
public class System.Net.NetworkInformation.PingCompletedEventHandler : MulticastDelegate {
    public PingCompletedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, PingCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PingCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.NetworkInformation.PingException : InvalidOperationException {
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected PingException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public PingException(string message);
    public PingException(string message, Exception innerException);
}
public class System.Net.NetworkInformation.PingOptions : object {
    public bool DontFragment { get; public set; }
    public int Ttl { get; public set; }
    public PingOptions(int ttl, bool dontFragment);
    public bool get_DontFragment();
    public void set_DontFragment(bool value);
    public int get_Ttl();
    public void set_Ttl(int value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.NetworkInformation.PingReply : object {
    public IPAddress Address { get; }
    public Byte[] Buffer { get; }
    [NullableAttribute("2")]
public PingOptions Options { get; }
    public long RoundtripTime { get; }
    public IPStatus Status { get; }
    public IPAddress get_Address();
    public Byte[] get_Buffer();
    [NullableContextAttribute("2")]
public PingOptions get_Options();
    public long get_RoundtripTime();
    public IPStatus get_Status();
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_inasync { get; }
    internal static string net_InvalidAddressFamily { get; }
    internal static string net_InvalidSocketAddressSize { get; }
    internal static string net_invalidPingBufferSize { get; }
    internal static string net_invalid_ip_addr { get; }
    internal static string net_ping { get; }
    internal static string net_ping_utility_not_found { get; }
    internal static string net_ipv4_not_installed { get; }
    internal static string net_ipv6_not_installed { get; }
    internal static string SystemNetPing_PlatformNotSupported { get; }
    internal static string net_ping_utility_custom_payload { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_inasync();
    internal static string get_net_InvalidAddressFamily();
    internal static string get_net_InvalidSocketAddressSize();
    internal static string get_net_invalidPingBufferSize();
    internal static string get_net_invalid_ip_addr();
    internal static string get_net_ping();
    internal static string get_net_ping_utility_not_found();
    internal static string get_net_ipv4_not_installed();
    internal static string get_net_ipv6_not_installed();
    internal static string get_SystemNetPing_PlatformNotSupported();
    internal static string get_net_ping_utility_custom_payload();
}
