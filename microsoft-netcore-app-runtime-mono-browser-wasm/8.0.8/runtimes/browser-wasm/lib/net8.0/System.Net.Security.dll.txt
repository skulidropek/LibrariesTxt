internal static class FxResources.System.Net.Security.SR : object {
}
public abstract class System.Net.Security.AuthenticatedStream : Stream {
    protected Stream InnerStream { get; }
    public bool IsAuthenticated { get; }
    public bool IsEncrypted { get; }
    public bool IsMutuallyAuthenticated { get; }
    public bool IsServer { get; }
    public bool IsSigned { get; }
    public bool LeaveInnerStreamOpen { get; }
    protected AuthenticatedStream(Stream innerStream, bool leaveInnerStreamOpen);
    protected Stream get_InnerStream();
    public abstract virtual bool get_IsAuthenticated();
    public abstract virtual bool get_IsEncrypted();
    public abstract virtual bool get_IsMutuallyAuthenticated();
    public abstract virtual bool get_IsServer();
    public abstract virtual bool get_IsSigned();
    public bool get_LeaveInnerStreamOpen();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
}
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("windows")]
public class System.Net.Security.CipherSuitesPolicy : object {
    [CLSCompliantAttribute("False")]
public IEnumerable`1<TlsCipherSuite> AllowedCipherSuites { get; }
    [CLSCompliantAttribute("False")]
public CipherSuitesPolicy(IEnumerable`1<TlsCipherSuite> allowedCipherSuites);
    public IEnumerable`1<TlsCipherSuite> get_AllowedCipherSuites();
}
public enum System.Net.Security.EncryptionPolicy : Enum {
    public int value__;
    public static EncryptionPolicy RequireEncryption;
    [ObsoleteAttribute("EncryptionPolicy.NoEncryption and AllowEncryption significantly reduce security and should not be used in production code.")]
public static EncryptionPolicy AllowNoEncryption;
    [ObsoleteAttribute("EncryptionPolicy.NoEncryption and AllowEncryption significantly reduce security and should not be used in production code.")]
public static EncryptionPolicy NoEncryption;
}
public class System.Net.Security.LocalCertificateSelectionCallback : MulticastDelegate {
    public LocalCertificateSelectionCallback(object object, IntPtr method);
    public virtual X509Certificate Invoke(object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, String[] acceptableIssuers);
    public virtual IAsyncResult BeginInvoke(object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, String[] acceptableIssuers, AsyncCallback callback, object object);
    public virtual X509Certificate EndInvoke(IAsyncResult result);
}
public class System.Net.Security.NegotiateAuthentication : object {
    public TokenImpersonationLevel ImpersonationLevel { get; }
    public bool IsAuthenticated { get; }
    public bool IsEncrypted { get; }
    public bool IsMutuallyAuthenticated { get; }
    public bool IsServer { get; }
    public bool IsSigned { get; }
    public string Package { get; }
    public ProtectionLevel ProtectionLevel { get; }
    public IIdentity RemoteIdentity { get; }
    [NullableAttribute("2")]
public string TargetName { get; }
    public NegotiateAuthentication(NegotiateAuthenticationClientOptions clientOptions);
    public NegotiateAuthentication(NegotiateAuthenticationServerOptions serverOptions);
    public TokenImpersonationLevel get_ImpersonationLevel();
    public bool get_IsAuthenticated();
    public bool get_IsEncrypted();
    public bool get_IsMutuallyAuthenticated();
    public bool get_IsServer();
    public bool get_IsSigned();
    public string get_Package();
    public ProtectionLevel get_ProtectionLevel();
    public IIdentity get_RemoteIdentity();
    [NullableContextAttribute("2")]
public string get_TargetName();
    public sealed virtual void Dispose();
    public Byte[] GetOutgoingBlob(ReadOnlySpan`1<byte> incomingBlob, NegotiateAuthenticationStatusCode& statusCode);
    [NullableContextAttribute("2")]
public string GetOutgoingBlob(string incomingBlob, NegotiateAuthenticationStatusCode& statusCode);
    public NegotiateAuthenticationStatusCode Unwrap(ReadOnlySpan`1<byte> input, IBufferWriter`1<byte> outputWriter, Boolean& wasEncrypted);
    public NegotiateAuthenticationStatusCode UnwrapInPlace(Span`1<byte> input, Int32& unwrappedOffset, Int32& unwrappedLength, Boolean& wasEncrypted);
    public NegotiateAuthenticationStatusCode Wrap(ReadOnlySpan`1<byte> input, IBufferWriter`1<byte> outputWriter, bool requestEncryption, Boolean& isEncrypted);
}
public class System.Net.Security.NegotiateAuthenticationClientOptions : object {
    public TokenImpersonationLevel AllowedImpersonationLevel { get; public set; }
    [NullableAttribute("2")]
public ChannelBinding Binding { get; public set; }
    public NetworkCredential Credential { get; public set; }
    public string Package { get; public set; }
    public ProtectionLevel RequiredProtectionLevel { get; public set; }
    public bool RequireMutualAuthentication { get; public set; }
    [NullableAttribute("2")]
public string TargetName { get; public set; }
    public TokenImpersonationLevel get_AllowedImpersonationLevel();
    public void set_AllowedImpersonationLevel(TokenImpersonationLevel value);
    [NullableContextAttribute("2")]
public ChannelBinding get_Binding();
    [NullableContextAttribute("2")]
public void set_Binding(ChannelBinding value);
    public NetworkCredential get_Credential();
    public void set_Credential(NetworkCredential value);
    public string get_Package();
    public void set_Package(string value);
    public ProtectionLevel get_RequiredProtectionLevel();
    public void set_RequiredProtectionLevel(ProtectionLevel value);
    public bool get_RequireMutualAuthentication();
    public void set_RequireMutualAuthentication(bool value);
    [NullableContextAttribute("2")]
public string get_TargetName();
    [NullableContextAttribute("2")]
public void set_TargetName(string value);
}
public class System.Net.Security.NegotiateAuthenticationServerOptions : object {
    [NullableAttribute("2")]
public ChannelBinding Binding { get; public set; }
    public NetworkCredential Credential { get; public set; }
    public string Package { get; public set; }
    [NullableAttribute("2")]
public ExtendedProtectionPolicy Policy { get; public set; }
    public TokenImpersonationLevel RequiredImpersonationLevel { get; public set; }
    public ProtectionLevel RequiredProtectionLevel { get; public set; }
    [NullableContextAttribute("2")]
public ChannelBinding get_Binding();
    [NullableContextAttribute("2")]
public void set_Binding(ChannelBinding value);
    public NetworkCredential get_Credential();
    public void set_Credential(NetworkCredential value);
    public string get_Package();
    public void set_Package(string value);
    [NullableContextAttribute("2")]
public ExtendedProtectionPolicy get_Policy();
    [NullableContextAttribute("2")]
public void set_Policy(ExtendedProtectionPolicy value);
    public TokenImpersonationLevel get_RequiredImpersonationLevel();
    public void set_RequiredImpersonationLevel(TokenImpersonationLevel value);
    public ProtectionLevel get_RequiredProtectionLevel();
    public void set_RequiredProtectionLevel(ProtectionLevel value);
}
public enum System.Net.Security.NegotiateAuthenticationStatusCode : Enum {
    public int value__;
    public static NegotiateAuthenticationStatusCode Completed;
    public static NegotiateAuthenticationStatusCode ContinueNeeded;
    public static NegotiateAuthenticationStatusCode GenericFailure;
    public static NegotiateAuthenticationStatusCode BadBinding;
    public static NegotiateAuthenticationStatusCode Unsupported;
    public static NegotiateAuthenticationStatusCode MessageAltered;
    public static NegotiateAuthenticationStatusCode ContextExpired;
    public static NegotiateAuthenticationStatusCode CredentialsExpired;
    public static NegotiateAuthenticationStatusCode InvalidCredentials;
    public static NegotiateAuthenticationStatusCode InvalidToken;
    public static NegotiateAuthenticationStatusCode UnknownCredentials;
    public static NegotiateAuthenticationStatusCode QopNotSupported;
    public static NegotiateAuthenticationStatusCode OutOfSequence;
    public static NegotiateAuthenticationStatusCode SecurityQosFailed;
    public static NegotiateAuthenticationStatusCode TargetUnknown;
    public static NegotiateAuthenticationStatusCode ImpersonationValidationFailed;
}
public class System.Net.Security.NegotiateStream : AuthenticatedStream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public TokenImpersonationLevel ImpersonationLevel { get; }
    public bool IsAuthenticated { get; }
    public bool IsEncrypted { get; }
    public bool IsMutuallyAuthenticated { get; }
    public bool IsServer { get; }
    public bool IsSigned { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    public IIdentity RemoteIdentity { get; }
    public int WriteTimeout { get; public set; }
    public NegotiateStream(Stream innerStream);
    public NegotiateStream(Stream innerStream, bool leaveInnerStreamOpen);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual TokenImpersonationLevel get_ImpersonationLevel();
    public virtual bool get_IsAuthenticated();
    public virtual bool get_IsEncrypted();
    public virtual bool get_IsMutuallyAuthenticated();
    public virtual bool get_IsServer();
    public virtual bool get_IsSigned();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public virtual IIdentity get_RemoteIdentity();
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual void AuthenticateAsClient();
    public virtual void AuthenticateAsClient(NetworkCredential credential, ChannelBinding binding, string targetName);
    public virtual void AuthenticateAsClient(NetworkCredential credential, ChannelBinding binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel);
    public virtual void AuthenticateAsClient(NetworkCredential credential, string targetName);
    public virtual void AuthenticateAsClient(NetworkCredential credential, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel);
    public virtual Task AuthenticateAsClientAsync();
    public virtual Task AuthenticateAsClientAsync(NetworkCredential credential, ChannelBinding binding, string targetName);
    public virtual Task AuthenticateAsClientAsync(NetworkCredential credential, ChannelBinding binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel);
    public virtual Task AuthenticateAsClientAsync(NetworkCredential credential, string targetName);
    public virtual Task AuthenticateAsClientAsync(NetworkCredential credential, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel);
    public virtual void AuthenticateAsServer();
    public virtual void AuthenticateAsServer(NetworkCredential credential, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel);
    public virtual void AuthenticateAsServer(NetworkCredential credential, ExtendedProtectionPolicy policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel);
    [NullableContextAttribute("2")]
public virtual void AuthenticateAsServer(ExtendedProtectionPolicy policy);
    public virtual Task AuthenticateAsServerAsync();
    public virtual Task AuthenticateAsServerAsync(NetworkCredential credential, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel);
    public virtual Task AuthenticateAsServerAsync(NetworkCredential credential, ExtendedProtectionPolicy policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel);
    public virtual Task AuthenticateAsServerAsync(ExtendedProtectionPolicy policy);
    [NullableContextAttribute("2")]
public virtual IAsyncResult BeginAuthenticateAsClient(AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginAuthenticateAsClient(NetworkCredential credential, ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginAuthenticateAsClient(NetworkCredential credential, ChannelBinding binding, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginAuthenticateAsClient(NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginAuthenticateAsClient(NetworkCredential credential, string targetName, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    [NullableContextAttribute("2")]
public virtual IAsyncResult BeginAuthenticateAsServer(AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginAuthenticateAsServer(NetworkCredential credential, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    [NullableContextAttribute("2")]
public virtual IAsyncResult BeginAuthenticateAsServer(NetworkCredential credential, ExtendedProtectionPolicy policy, ProtectionLevel requiredProtectionLevel, TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    [NullableContextAttribute("2")]
public virtual IAsyncResult BeginAuthenticateAsServer(ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    public virtual void EndAuthenticateAsClient(IAsyncResult asyncResult);
    public virtual void EndAuthenticateAsServer(IAsyncResult asyncResult);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
}
public enum System.Net.Security.ProtectionLevel : Enum {
    public int value__;
    public static ProtectionLevel None;
    public static ProtectionLevel Sign;
    public static ProtectionLevel EncryptAndSign;
}
public class System.Net.Security.RemoteCertificateValidationCallback : MulticastDelegate {
    public RemoteCertificateValidationCallback(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual bool Invoke(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);
    public virtual IAsyncResult BeginInvoke(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class System.Net.Security.ServerCertificateSelectionCallback : MulticastDelegate {
    public ServerCertificateSelectionCallback(object object, IntPtr method);
    public virtual X509Certificate Invoke(object sender, string hostName);
    public virtual IAsyncResult BeginInvoke(object sender, string hostName, AsyncCallback callback, object object);
    public virtual X509Certificate EndInvoke(IAsyncResult result);
}
public class System.Net.Security.ServerOptionsSelectionCallback : MulticastDelegate {
    public ServerOptionsSelectionCallback(object object, IntPtr method);
    public virtual ValueTask`1<SslServerAuthenticationOptions> Invoke(SslStream stream, SslClientHelloInfo clientHelloInfo, object state, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginInvoke(SslStream stream, SslClientHelloInfo clientHelloInfo, object state, CancellationToken cancellationToken, AsyncCallback callback, object object);
    public virtual ValueTask`1<SslServerAuthenticationOptions> EndInvoke(IAsyncResult result);
}
[IsReadOnlyAttribute]
public class System.Net.Security.SslApplicationProtocol : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public static SslApplicationProtocol Http11;
    public static SslApplicationProtocol Http2;
    public static SslApplicationProtocol Http3;
    public ReadOnlyMemory`1<byte> Protocol { get; }
    public SslApplicationProtocol(Byte[] protocol);
    public SslApplicationProtocol(string protocol);
    public ReadOnlyMemory`1<byte> get_Protocol();
    public sealed virtual bool Equals(SslApplicationProtocol other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(SslApplicationProtocol left, SslApplicationProtocol right);
    public static bool op_Inequality(SslApplicationProtocol left, SslApplicationProtocol right);
    public virtual string ToString();
}
public class System.Net.Security.SslCertificateTrust : object {
    public static SslCertificateTrust CreateForX509Collection(X509Certificate2Collection trustList, bool sendTrustInHandshake);
    public static SslCertificateTrust CreateForX509Store(X509Store store, bool sendTrustInHandshake);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Security.SslClientAuthenticationOptions : object {
    public bool AllowRenegotiation { get; public set; }
    public bool AllowTlsResume { get; public set; }
    public List`1<SslApplicationProtocol> ApplicationProtocols { get; public set; }
    public X509ChainPolicy CertificateChainPolicy { get; public set; }
    public X509RevocationMode CertificateRevocationCheckMode { get; public set; }
    public CipherSuitesPolicy CipherSuitesPolicy { get; public set; }
    public SslStreamCertificateContext ClientCertificateContext { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public SslProtocols EnabledSslProtocols { get; public set; }
    public EncryptionPolicy EncryptionPolicy { get; public set; }
    public LocalCertificateSelectionCallback LocalCertificateSelectionCallback { get; public set; }
    public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    public string TargetHost { get; public set; }
    public bool get_AllowRenegotiation();
    public void set_AllowRenegotiation(bool value);
    public bool get_AllowTlsResume();
    public void set_AllowTlsResume(bool value);
    public List`1<SslApplicationProtocol> get_ApplicationProtocols();
    public void set_ApplicationProtocols(List`1<SslApplicationProtocol> value);
    public X509ChainPolicy get_CertificateChainPolicy();
    public void set_CertificateChainPolicy(X509ChainPolicy value);
    public X509RevocationMode get_CertificateRevocationCheckMode();
    public void set_CertificateRevocationCheckMode(X509RevocationMode value);
    public CipherSuitesPolicy get_CipherSuitesPolicy();
    public void set_CipherSuitesPolicy(CipherSuitesPolicy value);
    public SslStreamCertificateContext get_ClientCertificateContext();
    public void set_ClientCertificateContext(SslStreamCertificateContext value);
    public X509CertificateCollection get_ClientCertificates();
    public void set_ClientCertificates(X509CertificateCollection value);
    public SslProtocols get_EnabledSslProtocols();
    public void set_EnabledSslProtocols(SslProtocols value);
    public EncryptionPolicy get_EncryptionPolicy();
    public void set_EncryptionPolicy(EncryptionPolicy value);
    public LocalCertificateSelectionCallback get_LocalCertificateSelectionCallback();
    public void set_LocalCertificateSelectionCallback(LocalCertificateSelectionCallback value);
    public RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    public void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public string get_TargetHost();
    public void set_TargetHost(string value);
}
[IsReadOnlyAttribute]
public class System.Net.Security.SslClientHelloInfo : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public string ServerName { get; }
    public SslProtocols SslProtocols { get; }
    public SslClientHelloInfo(string serverName, SslProtocols sslProtocols);
    public string get_ServerName();
    public SslProtocols get_SslProtocols();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Security.SslServerAuthenticationOptions : object {
    public bool AllowRenegotiation { get; public set; }
    public bool AllowTlsResume { get; public set; }
    public List`1<SslApplicationProtocol> ApplicationProtocols { get; public set; }
    public X509ChainPolicy CertificateChainPolicy { get; public set; }
    public X509RevocationMode CertificateRevocationCheckMode { get; public set; }
    public CipherSuitesPolicy CipherSuitesPolicy { get; public set; }
    public bool ClientCertificateRequired { get; public set; }
    public SslProtocols EnabledSslProtocols { get; public set; }
    public EncryptionPolicy EncryptionPolicy { get; public set; }
    public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    public X509Certificate ServerCertificate { get; public set; }
    public SslStreamCertificateContext ServerCertificateContext { get; public set; }
    public ServerCertificateSelectionCallback ServerCertificateSelectionCallback { get; public set; }
    public bool get_AllowRenegotiation();
    public void set_AllowRenegotiation(bool value);
    public bool get_AllowTlsResume();
    public void set_AllowTlsResume(bool value);
    public List`1<SslApplicationProtocol> get_ApplicationProtocols();
    public void set_ApplicationProtocols(List`1<SslApplicationProtocol> value);
    public X509ChainPolicy get_CertificateChainPolicy();
    public void set_CertificateChainPolicy(X509ChainPolicy value);
    public X509RevocationMode get_CertificateRevocationCheckMode();
    public void set_CertificateRevocationCheckMode(X509RevocationMode value);
    public CipherSuitesPolicy get_CipherSuitesPolicy();
    public void set_CipherSuitesPolicy(CipherSuitesPolicy value);
    public bool get_ClientCertificateRequired();
    public void set_ClientCertificateRequired(bool value);
    public SslProtocols get_EnabledSslProtocols();
    public void set_EnabledSslProtocols(SslProtocols value);
    public EncryptionPolicy get_EncryptionPolicy();
    public void set_EncryptionPolicy(EncryptionPolicy value);
    public RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    public void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public X509Certificate get_ServerCertificate();
    public void set_ServerCertificate(X509Certificate value);
    public SslStreamCertificateContext get_ServerCertificateContext();
    public void set_ServerCertificateContext(SslStreamCertificateContext value);
    public ServerCertificateSelectionCallback get_ServerCertificateSelectionCallback();
    public void set_ServerCertificateSelectionCallback(ServerCertificateSelectionCallback value);
}
public class System.Net.Security.SslStream : AuthenticatedStream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public bool CheckCertRevocationStatus { get; }
    public CipherAlgorithmType CipherAlgorithm { get; }
    public int CipherStrength { get; }
    public HashAlgorithmType HashAlgorithm { get; }
    public int HashStrength { get; }
    public bool IsAuthenticated { get; }
    public bool IsEncrypted { get; }
    public bool IsMutuallyAuthenticated { get; }
    public bool IsServer { get; }
    public bool IsSigned { get; }
    public ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
    public int KeyExchangeStrength { get; }
    public long Length { get; }
    [NullableAttribute("2")]
public X509Certificate LocalCertificate { get; }
    public SslApplicationProtocol NegotiatedApplicationProtocol { get; }
    [CLSCompliantAttribute("False")]
public TlsCipherSuite NegotiatedCipherSuite { get; }
    public long Position { get; public set; }
    public int ReadTimeout { get; public set; }
    [NullableAttribute("2")]
public X509Certificate RemoteCertificate { get; }
    public SslProtocols SslProtocol { get; }
    public string TargetHostName { get; }
    public TransportContext TransportContext { get; }
    public int WriteTimeout { get; public set; }
    public SslStream(Stream innerStream);
    public SslStream(Stream innerStream, bool leaveInnerStreamOpen);
    public SslStream(Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback);
    [NullableContextAttribute("2")]
public SslStream(Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback, LocalCertificateSelectionCallback userCertificateSelectionCallback);
    [NullableContextAttribute("2")]
public SslStream(Stream innerStream, bool leaveInnerStreamOpen, RemoteCertificateValidationCallback userCertificateValidationCallback, LocalCertificateSelectionCallback userCertificateSelectionCallback, EncryptionPolicy encryptionPolicy);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual bool get_CheckCertRevocationStatus();
    public virtual CipherAlgorithmType get_CipherAlgorithm();
    public virtual int get_CipherStrength();
    public virtual HashAlgorithmType get_HashAlgorithm();
    public virtual int get_HashStrength();
    public virtual bool get_IsAuthenticated();
    public virtual bool get_IsEncrypted();
    public virtual bool get_IsMutuallyAuthenticated();
    public virtual bool get_IsServer();
    public virtual bool get_IsSigned();
    public virtual ExchangeAlgorithmType get_KeyExchangeAlgorithm();
    public virtual int get_KeyExchangeStrength();
    public virtual long get_Length();
    [NullableContextAttribute("2")]
public virtual X509Certificate get_LocalCertificate();
    public SslApplicationProtocol get_NegotiatedApplicationProtocol();
    public virtual TlsCipherSuite get_NegotiatedCipherSuite();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    [NullableContextAttribute("2")]
public virtual X509Certificate get_RemoteCertificate();
    public virtual SslProtocols get_SslProtocol();
    public string get_TargetHostName();
    public TransportContext get_TransportContext();
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public void AuthenticateAsClient(SslClientAuthenticationOptions sslClientAuthenticationOptions);
    public virtual void AuthenticateAsClient(string targetHost);
    public virtual void AuthenticateAsClient(string targetHost, X509CertificateCollection clientCertificates, bool checkCertificateRevocation);
    public virtual void AuthenticateAsClient(string targetHost, X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    public Task AuthenticateAsClientAsync(SslClientAuthenticationOptions sslClientAuthenticationOptions, CancellationToken cancellationToken);
    public virtual Task AuthenticateAsClientAsync(string targetHost);
    public virtual Task AuthenticateAsClientAsync(string targetHost, X509CertificateCollection clientCertificates, bool checkCertificateRevocation);
    public virtual Task AuthenticateAsClientAsync(string targetHost, X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    public void AuthenticateAsServer(SslServerAuthenticationOptions sslServerAuthenticationOptions);
    public virtual void AuthenticateAsServer(X509Certificate serverCertificate);
    public virtual void AuthenticateAsServer(X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation);
    public virtual void AuthenticateAsServer(X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    public Task AuthenticateAsServerAsync(ServerOptionsSelectionCallback optionsCallback, object state, CancellationToken cancellationToken);
    public Task AuthenticateAsServerAsync(SslServerAuthenticationOptions sslServerAuthenticationOptions, CancellationToken cancellationToken);
    public virtual Task AuthenticateAsServerAsync(X509Certificate serverCertificate);
    public virtual Task AuthenticateAsServerAsync(X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation);
    public virtual Task AuthenticateAsServerAsync(X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    public virtual IAsyncResult BeginAuthenticateAsClient(string targetHost, AsyncCallback asyncCallback, object asyncState);
    [NullableContextAttribute("2")]
public virtual IAsyncResult BeginAuthenticateAsClient(string targetHost, X509CertificateCollection clientCertificates, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);
    [NullableContextAttribute("2")]
public virtual IAsyncResult BeginAuthenticateAsClient(string targetHost, X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginAuthenticateAsServer(X509Certificate serverCertificate, AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginAuthenticateAsServer(X509Certificate serverCertificate, bool clientCertificateRequired, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginAuthenticateAsServer(X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    public virtual void EndAuthenticateAsClient(IAsyncResult asyncResult);
    public virtual void EndAuthenticateAsServer(IAsyncResult asyncResult);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    protected virtual override void Finalize();
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    [SupportedOSPlatformAttribute("freebsd")]
[SupportedOSPlatformAttribute("linux")]
[SupportedOSPlatformAttribute("windows")]
public virtual Task NegotiateClientCertificateAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual Task ShutdownAsync();
    public void Write(Byte[] buffer);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
}
public class System.Net.Security.SslStreamCertificateContext : object {
    public ReadOnlyCollection`1<X509Certificate2> IntermediateCertificates { get; }
    public X509Certificate2 TargetCertificate { get; }
    public ReadOnlyCollection`1<X509Certificate2> get_IntermediateCertificates();
    public X509Certificate2 get_TargetCertificate();
    [EditorBrowsableAttribute("1")]
public static SslStreamCertificateContext Create(X509Certificate2 target, X509Certificate2Collection additionalCertificates, bool offline);
    public static SslStreamCertificateContext Create(X509Certificate2 target, X509Certificate2Collection additionalCertificates, bool offline, SslCertificateTrust trust);
}
[CLSCompliantAttribute("False")]
public enum System.Net.Security.TlsCipherSuite : Enum {
    public ushort value__;
    public static TlsCipherSuite TLS_NULL_WITH_NULL_NULL;
    public static TlsCipherSuite TLS_RSA_WITH_NULL_MD5;
    public static TlsCipherSuite TLS_RSA_WITH_NULL_SHA;
    public static TlsCipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5;
    public static TlsCipherSuite TLS_RSA_WITH_RC4_128_MD5;
    public static TlsCipherSuite TLS_RSA_WITH_RC4_128_SHA;
    public static TlsCipherSuite TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5;
    public static TlsCipherSuite TLS_RSA_WITH_IDEA_CBC_SHA;
    public static TlsCipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA;
    public static TlsCipherSuite TLS_RSA_WITH_DES_CBC_SHA;
    public static TlsCipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA;
    public static TlsCipherSuite TLS_DH_DSS_WITH_DES_CBC_SHA;
    public static TlsCipherSuite TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA;
    public static TlsCipherSuite TLS_DH_RSA_WITH_DES_CBC_SHA;
    public static TlsCipherSuite TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_DH_anon_EXPORT_WITH_RC4_40_MD5;
    public static TlsCipherSuite TLS_DH_anon_WITH_RC4_128_MD5;
    public static TlsCipherSuite TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA;
    public static TlsCipherSuite TLS_DH_anon_WITH_DES_CBC_SHA;
    public static TlsCipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_KRB5_WITH_DES_CBC_SHA;
    public static TlsCipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_KRB5_WITH_RC4_128_SHA;
    public static TlsCipherSuite TLS_KRB5_WITH_IDEA_CBC_SHA;
    public static TlsCipherSuite TLS_KRB5_WITH_DES_CBC_MD5;
    public static TlsCipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_MD5;
    public static TlsCipherSuite TLS_KRB5_WITH_RC4_128_MD5;
    public static TlsCipherSuite TLS_KRB5_WITH_IDEA_CBC_MD5;
    public static TlsCipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA;
    public static TlsCipherSuite TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA;
    public static TlsCipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_SHA;
    public static TlsCipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5;
    public static TlsCipherSuite TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5;
    public static TlsCipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_MD5;
    public static TlsCipherSuite TLS_PSK_WITH_NULL_SHA;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_NULL_SHA;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_NULL_SHA;
    public static TlsCipherSuite TLS_RSA_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_DH_DSS_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_DH_RSA_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_RSA_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_DH_DSS_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_DH_RSA_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_RSA_WITH_NULL_SHA256;
    public static TlsCipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_DSS_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_RSA_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_RSA_WITH_CAMELLIA_128_CBC_SHA;
    public static TlsCipherSuite TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA;
    public static TlsCipherSuite TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA;
    public static TlsCipherSuite TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_DSS_WITH_AES_256_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_RSA_WITH_AES_256_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA256;
    public static TlsCipherSuite TLS_RSA_WITH_CAMELLIA_256_CBC_SHA;
    public static TlsCipherSuite TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA;
    public static TlsCipherSuite TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA;
    public static TlsCipherSuite TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA;
    public static TlsCipherSuite TLS_PSK_WITH_RC4_128_SHA;
    public static TlsCipherSuite TLS_PSK_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_PSK_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_PSK_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_RC4_128_SHA;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_RC4_128_SHA;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_RSA_WITH_SEED_CBC_SHA;
    public static TlsCipherSuite TLS_DH_DSS_WITH_SEED_CBC_SHA;
    public static TlsCipherSuite TLS_DH_RSA_WITH_SEED_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_SEED_CBC_SHA;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_SEED_CBC_SHA;
    public static TlsCipherSuite TLS_DH_anon_WITH_SEED_CBC_SHA;
    public static TlsCipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DH_RSA_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DH_RSA_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DH_DSS_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DH_DSS_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DH_anon_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DH_anon_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_PSK_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_PSK_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_PSK_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_PSK_WITH_AES_256_CBC_SHA384;
    public static TlsCipherSuite TLS_PSK_WITH_NULL_SHA256;
    public static TlsCipherSuite TLS_PSK_WITH_NULL_SHA384;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_AES_256_CBC_SHA384;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_NULL_SHA256;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_NULL_SHA384;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_AES_256_CBC_SHA384;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_NULL_SHA256;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_NULL_SHA384;
    public static TlsCipherSuite TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256;
    public static TlsCipherSuite TLS_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_CHACHA20_POLY1305_SHA256;
    public static TlsCipherSuite TLS_AES_128_CCM_SHA256;
    public static TlsCipherSuite TLS_AES_128_CCM_8_SHA256;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_NULL_SHA;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_RC4_128_SHA;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_NULL_SHA;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_RC4_128_SHA;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_NULL_SHA;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_RC4_128_SHA;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_NULL_SHA;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_RC4_128_SHA;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_ECDH_anon_WITH_NULL_SHA;
    public static TlsCipherSuite TLS_ECDH_anon_WITH_RC4_128_SHA;
    public static TlsCipherSuite TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_ECDH_anon_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_ECDH_anon_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_SRP_SHA_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_SRP_SHA_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_RC4_128_SHA;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA256;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_NULL_SHA384;
    public static TlsCipherSuite TLS_RSA_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_RSA_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_DH_anon_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DH_anon_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_RSA_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_RSA_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DH_anon_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DH_anon_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_PSK_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_PSK_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_PSK_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_PSK_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    public static TlsCipherSuite TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    public static TlsCipherSuite TLS_RSA_WITH_AES_128_CCM;
    public static TlsCipherSuite TLS_RSA_WITH_AES_256_CCM;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_AES_128_CCM;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_AES_256_CCM;
    public static TlsCipherSuite TLS_RSA_WITH_AES_128_CCM_8;
    public static TlsCipherSuite TLS_RSA_WITH_AES_256_CCM_8;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_AES_128_CCM_8;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_AES_256_CCM_8;
    public static TlsCipherSuite TLS_PSK_WITH_AES_128_CCM;
    public static TlsCipherSuite TLS_PSK_WITH_AES_256_CCM;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_AES_128_CCM;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_AES_256_CCM;
    public static TlsCipherSuite TLS_PSK_WITH_AES_128_CCM_8;
    public static TlsCipherSuite TLS_PSK_WITH_AES_256_CCM_8;
    public static TlsCipherSuite TLS_PSK_DHE_WITH_AES_128_CCM_8;
    public static TlsCipherSuite TLS_PSK_DHE_WITH_AES_256_CCM_8;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CCM;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CCM;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8;
    public static TlsCipherSuite TLS_ECCPWD_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECCPWD_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECCPWD_WITH_AES_128_CCM_SHA256;
    public static TlsCipherSuite TLS_ECCPWD_WITH_AES_256_CCM_SHA384;
    public static TlsCipherSuite TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256;
    public static TlsCipherSuite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256;
    public static TlsCipherSuite TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256;
    public static TlsCipherSuite TLS_PSK_WITH_CHACHA20_POLY1305_SHA256;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256;
    public static TlsCipherSuite TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256;
    public static TlsCipherSuite TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256;
    public static TlsCipherSuite TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256;
}
internal static class System.Net.UriScheme : object {
    public static string File;
    public static string Ftp;
    public static string Gopher;
    public static string Http;
    public static string Https;
    public static string News;
    public static string NetPipe;
    public static string NetTcp;
    public static string Nntp;
    public static string Mailto;
    public static string Ws;
    public static string Wss;
    public static string SchemeDelimiter;
}
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string SystemTextEncodingUTF7Message;
    internal static string SystemTextEncodingUTF7DiagId;
    internal static string PrincipalPermissionAttributeMessage;
    internal static string PrincipalPermissionAttributeDiagId;
    internal static string CodeAccessSecurityMessage;
    internal static string CodeAccessSecurityDiagId;
    internal static string ConstrainedExecutionRegionMessage;
    internal static string ConstrainedExecutionRegionDiagId;
    internal static string GlobalAssemblyCacheMessage;
    internal static string GlobalAssemblyCacheDiagId;
    internal static string ThreadAbortMessage;
    internal static string ThreadResetAbortMessage;
    internal static string ThreadAbortDiagId;
    internal static string DefaultCryptoAlgorithmsMessage;
    internal static string DefaultCryptoAlgorithmsDiagId;
    internal static string CreatePdbGeneratorMessage;
    internal static string CreatePdbGeneratorDiagId;
    internal static string AuthenticationManagerMessage;
    internal static string AuthenticationManagerDiagId;
    internal static string RemotingApisMessage;
    internal static string RemotingApisDiagId;
    internal static string BinaryFormatterMessage;
    internal static string BinaryFormatterDiagId;
    internal static string CodeBaseMessage;
    internal static string CodeBaseDiagId;
    internal static string EscapeUriStringMessage;
    internal static string EscapeUriStringDiagId;
    internal static string WebRequestMessage;
    internal static string WebRequestDiagId;
    internal static string DisablePrivateReflectionAttributeMessage;
    internal static string DisablePrivateReflectionAttributeDiagId;
    internal static string GetContextInfoMessage;
    internal static string GetContextInfoDiagId;
    internal static string StrongNameKeyPairMessage;
    internal static string StrongNameKeyPairDiagId;
    internal static string ReflectionOnlyLoadingMessage;
    internal static string ReflectionOnlyLoadingDiagId;
    internal static string RuntimeEnvironmentMessage;
    internal static string RuntimeEnvironmentDiagId;
    internal static string JsonSerializerOptionsIgnoreNullValuesMessage;
    internal static string JsonSerializerOptionsIgnoreNullValuesDiagId;
    internal static string DerivedCryptographicTypesMessage;
    internal static string DerivedCryptographicTypesDiagId;
    internal static string RijndaelMessage;
    internal static string RijndaelDiagId;
    internal static string RNGCryptoServiceProviderMessage;
    internal static string RNGCryptoServiceProviderDiagId;
    internal static string AppDomainCreateUnloadMessage;
    internal static string AppDomainCreateUnloadDiagId;
    internal static string SuppressIldasmAttributeMessage;
    internal static string SuppressIldasmAttributeDiagId;
    internal static string X509CertificateImmutableMessage;
    internal static string X509CertificateImmutableDiagId;
    internal static string PublicKeyPropertyMessage;
    internal static string PublicKeyPropertyDiagId;
    internal static string X509CertificatePrivateKeyMessage;
    internal static string X509CertificatePrivateKeyDiagId;
    internal static string ProduceLegacyHmacValuesMessage;
    internal static string ProduceLegacyHmacValuesDiagId;
    internal static string UseManagedSha1Message;
    internal static string UseManagedSha1DiagId;
    internal static string CryptoConfigEncodeOIDMessage;
    internal static string CryptoConfigEncodeOIDDiagId;
    internal static string CorruptedStateRecoveryMessage;
    internal static string CorruptedStateRecoveryDiagId;
    internal static string Rfc2898CryptDeriveKeyMessage;
    internal static string Rfc2898CryptDeriveKeyDiagId;
    internal static string CmsSignerCspParamsCtorMessage;
    internal static string CmsSignerCspParamsCtorDiagId;
    internal static string SignerInfoCounterSigMessage;
    internal static string SignerInfoCounterSigDiagId;
    internal static string RegexCompileToAssemblyMessage;
    internal static string RegexCompileToAssemblyDiagId;
    internal static string AssemblyNameMembersMessage;
    internal static string AssemblyNameMembersDiagId;
    internal static string SystemDataSerializationFormatBinaryMessage;
    internal static string SystemDataSerializationFormatBinaryDiagId;
    internal static string TlsVersion10and11Message;
    internal static string TlsVersion10and11DiagId;
    internal static string EncryptionPolicyMessage;
    internal static string EncryptionPolicyDiagId;
    internal static string Rfc2898OutdatedCtorMessage;
    internal static string Rfc2898OutdatedCtorDiagId;
    internal static string EccXmlExportImportMessage;
    internal static string EccXmlExportImportDiagId;
    internal static string EcDhPublicKeyBlobMessage;
    internal static string EcDhPublicKeyBlobDiagId;
    internal static string AssemblyNameCodeBaseMessage;
    internal static string AssemblyNameCodeBaseDiagId;
    internal static string CryptoStringFactoryMessage;
    internal static string CryptoStringFactoryDiagId;
    internal static string ControlledExecutionRunMessage;
    internal static string ControlledExecutionRunDiagId;
    internal static string XmlSecureResolverMessage;
    internal static string XmlSecureResolverDiagId;
    internal static string RsaEncryptDecryptValueMessage;
    internal static string RsaEncryptDecryptDiagId;
    internal static string JsonSerializerOptionsAddContextMessage;
    internal static string JsonSerializerOptionsAddContextDiagId;
    internal static string LegacyFormatterMessage;
    internal static string LegacyFormatterDiagId;
    internal static string LegacyFormatterImplMessage;
    internal static string LegacyFormatterImplDiagId;
    internal static string RegexExtensibilityImplMessage;
    internal static string RegexExtensibilityDiagId;
    internal static string AesGcmTagConstructorMessage;
    internal static string AesGcmTagConstructorDiagId;
}
public class System.Security.Authentication.AuthenticationException : SystemException {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected AuthenticationException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [NullableContextAttribute("2")]
public AuthenticationException(string message);
    [NullableContextAttribute("2")]
public AuthenticationException(string message, Exception innerException);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy : object {
    private ServiceNameCollection _customServiceNames;
    private PolicyEnforcement _policyEnforcement;
    private ProtectionScenario _protectionScenario;
    private ChannelBinding _customChannelBinding;
    public ServiceNameCollection CustomServiceNames { get; }
    public PolicyEnforcement PolicyEnforcement { get; }
    public ProtectionScenario ProtectionScenario { get; }
    public ChannelBinding CustomChannelBinding { get; }
    public static bool OSSupportsExtendedProtection { get; }
    public ExtendedProtectionPolicy(PolicyEnforcement policyEnforcement, ProtectionScenario protectionScenario, ServiceNameCollection customServiceNames);
    public ExtendedProtectionPolicy(PolicyEnforcement policyEnforcement, ProtectionScenario protectionScenario, ICollection customServiceNames);
    [NullableContextAttribute("1")]
public ExtendedProtectionPolicy(PolicyEnforcement policyEnforcement, ChannelBinding customChannelBinding);
    public ExtendedProtectionPolicy(PolicyEnforcement policyEnforcement);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected ExtendedProtectionPolicy(SerializationInfo info, StreamingContext context);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public ServiceNameCollection get_CustomServiceNames();
    public PolicyEnforcement get_PolicyEnforcement();
    public ProtectionScenario get_ProtectionScenario();
    public ChannelBinding get_CustomChannelBinding();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool get_OSSupportsExtendedProtection();
}
public enum System.Security.Authentication.ExtendedProtection.PolicyEnforcement : Enum {
    public int value__;
    public static PolicyEnforcement Never;
    public static PolicyEnforcement WhenSupported;
    public static PolicyEnforcement Always;
}
public enum System.Security.Authentication.ExtendedProtection.ProtectionScenario : Enum {
    public int value__;
    public static ProtectionScenario TransportSelected;
    public static ProtectionScenario TrustedProxy;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.Authentication.ExtendedProtection.ServiceNameCollection : ReadOnlyCollectionBase {
    public ServiceNameCollection(ICollection items);
    private ServiceNameCollection(IList list, string serviceName);
    private ServiceNameCollection(IList list, IEnumerable serviceNames);
    private ServiceNameCollection(IList list, int additionalCapacity);
    [NullableContextAttribute("2")]
public bool Contains(string searchServiceName);
    public ServiceNameCollection Merge(string serviceName);
    public ServiceNameCollection Merge(IEnumerable serviceNames);
    private void AddIfNew(IEnumerable serviceNames, bool expectStrings);
    private void AddIfNew(List`1<string> serviceNames);
    private void AddIfNew(IList serviceNames);
    private void AddIfNew(string serviceName);
    private static int GetCountOrOne(IEnumerable collection);
    private static string NormalizeServiceName(string inputServiceName);
}
public class System.Security.Authentication.InvalidCredentialException : AuthenticationException {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
protected InvalidCredentialException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [NullableContextAttribute("2")]
public InvalidCredentialException(string message);
    [NullableContextAttribute("2")]
public InvalidCredentialException(string message, Exception innerException);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_noseek { get; }
    internal static string net_securitypackagesupport { get; }
    internal static string net_securityprotocolnotsupported { get; }
    internal static string net_MethodNotImplementedException { get; }
    internal static string net_io_readfailure { get; }
    internal static string net_io_connectionclosed { get; }
    internal static string net_io_invalidnestedcall { get; }
    internal static string net_io_invalidendcall { get; }
    internal static string net_io_must_be_rw_stream { get; }
    internal static string net_io_header_id { get; }
    internal static string net_io_out_range { get; }
    internal static string net_io_encrypt { get; }
    internal static string net_io_decrypt { get; }
    internal static string net_io_read { get; }
    internal static string net_io_write { get; }
    internal static string net_io_eof { get; }
    internal static string net_log_listener_no_cbt_disabled { get; }
    internal static string net_log_listener_no_cbt_http { get; }
    internal static string net_log_listener_no_cbt_trustedproxy { get; }
    internal static string net_log_listener_cbt { get; }
    internal static string net_log_listener_no_spns { get; }
    internal static string net_log_listener_no_spn_kerberos { get; }
    internal static string net_log_listener_no_spn_disabled { get; }
    internal static string net_log_listener_no_spn_cbt { get; }
    internal static string net_log_listener_no_spn_whensupported { get; }
    internal static string net_log_listener_spn { get; }
    internal static string net_log_listener_spn_passed { get; }
    internal static string net_log_listener_spn_failed { get; }
    internal static string net_log_listener_spn_failed_always { get; }
    internal static string net_log_listener_spn_failed_empty { get; }
    internal static string net_log_listener_spn_failed_dump { get; }
    internal static string net_ssl_io_frame { get; }
    internal static string net_ssl_io_renego { get; }
    internal static string net_ssl_io_cert_validation { get; }
    internal static string net_ssl_io_cert_chain_validation { get; }
    internal static string net_ssl_io_cert_custom_validation { get; }
    internal static string net_ssl_io_no_server_cert { get; }
    internal static string net_ssl_io_already_shutdown { get; }
    internal static string net_auth_bad_client_creds { get; }
    internal static string net_auth_bad_client_creds_or_target_mismatch { get; }
    internal static string net_auth_context_expectation { get; }
    internal static string net_auth_context_expectation_remote { get; }
    internal static string net_auth_supported_impl_levels { get; }
    internal static string net_auth_reauth { get; }
    internal static string net_auth_noauth { get; }
    internal static string net_auth_client_server { get; }
    internal static string net_auth_SSPI { get; }
    internal static string net_auth_eof { get; }
    internal static string net_auth_tls_alert { get; }
    internal static string net_auth_alert { get; }
    internal static string net_auth_ephemeral { get; }
    internal static string net_auth_message_not_encrypted { get; }
    internal static string net_auth_must_specify_extended_protection_scheme { get; }
    internal static string net_frame_size { get; }
    internal static string net_frame_read_size { get; }
    internal static string net_frame_max_size { get; }
    internal static string net_invalid_enum { get; }
    internal static string net_log_open_store_failed { get; }
    internal static string net_log_remote_cert_has_errors { get; }
    internal static string net_log_remote_cert_not_available { get; }
    internal static string net_log_remote_cert_name_mismatch { get; }
    internal static string net_log_operation_failed_with_error { get; }
    internal static string SSPIInvalidHandleType { get; }
    internal static string security_ExtendedProtectionPolicy_UseDifferentConstructorForNever { get; }
    internal static string security_ExtendedProtectionPolicy_NoEmptyServiceNameCollection { get; }
    internal static string net_allocate_ssl_context_failed { get; }
    internal static string net_generic_operation_failed { get; }
    internal static string net_ssl_decrypt_failed { get; }
    internal static string net_ssl_encrypt_failed { get; }
    internal static string net_ssl_check_private_key_failed { get; }
    internal static string net_ssl_handshake_failed_error { get; }
    internal static string net_ssl_read_bio_failed_error { get; }
    internal static string net_ssl_use_cert_failed { get; }
    internal static string net_ssl_use_private_key_failed { get; }
    internal static string net_ssl_write_bio_failed_error { get; }
    internal static string net_ssl_get_connection_info_failed { get; }
    internal static string net_ssl_get_channel_binding_token_failed { get; }
    internal static string net_ssl_invalid_certificate { get; }
    internal static string net_ssl_encryptionpolicy_notsupported { get; }
    internal static string net_gssapi_operation_failed_detailed { get; }
    internal static string net_gssapi_operation_failed { get; }
    internal static string net_gssapi_operation_failed_detailed_majoronly { get; }
    internal static string net_gssapi_operation_failed_majoronly { get; }
    internal static string net_gssapi_ntlm_missing_plugin { get; }
    internal static string net_context_buffer_too_small { get; }
    internal static string net_ntlm_not_possible_default_cred { get; }
    internal static string net_nego_server_not_supported { get; }
    internal static string net_nego_protection_level_not_supported { get; }
    internal static string net_nego_not_supported_empty_target_with_defaultcreds { get; }
    internal static string net_security_sslprotocol_contiguous { get; }
    internal static string net_security_sslprotocol_notsupported { get; }
    internal static string net_encryptionpolicy_notsupported { get; }
    internal static string net_alpn_config_failed { get; }
    internal static string net_alpn_failed { get; }
    internal static string net_ssl_app_protocols_invalid { get; }
    internal static string net_ssl_app_protocol_invalid { get; }
    internal static string net_conflicting_options { get; }
    internal static string net_ssl_ciphersuites_policy_not_supported { get; }
    internal static string SystemNetSecurity_PlatformNotSupported { get; }
    internal static string net_ssl_certificate_exist { get; }
    internal static string net_ssl_renegotiate_data { get; }
    internal static string net_ssl_renegotiate_buffer { get; }
    internal static string net_android_ssl_api_level_unsupported { get; }
    internal static string net_ssl_trust_store { get; }
    internal static string net_ssl_trust_collection { get; }
    internal static string net_ssl_trust_handshake { get; }
    internal static string Cryptography_Der_Invalid_Encoding { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_noseek();
    internal static string get_net_securitypackagesupport();
    internal static string get_net_securityprotocolnotsupported();
    internal static string get_net_MethodNotImplementedException();
    internal static string get_net_io_readfailure();
    internal static string get_net_io_connectionclosed();
    internal static string get_net_io_invalidnestedcall();
    internal static string get_net_io_invalidendcall();
    internal static string get_net_io_must_be_rw_stream();
    internal static string get_net_io_header_id();
    internal static string get_net_io_out_range();
    internal static string get_net_io_encrypt();
    internal static string get_net_io_decrypt();
    internal static string get_net_io_read();
    internal static string get_net_io_write();
    internal static string get_net_io_eof();
    internal static string get_net_log_listener_no_cbt_disabled();
    internal static string get_net_log_listener_no_cbt_http();
    internal static string get_net_log_listener_no_cbt_trustedproxy();
    internal static string get_net_log_listener_cbt();
    internal static string get_net_log_listener_no_spns();
    internal static string get_net_log_listener_no_spn_kerberos();
    internal static string get_net_log_listener_no_spn_disabled();
    internal static string get_net_log_listener_no_spn_cbt();
    internal static string get_net_log_listener_no_spn_whensupported();
    internal static string get_net_log_listener_spn();
    internal static string get_net_log_listener_spn_passed();
    internal static string get_net_log_listener_spn_failed();
    internal static string get_net_log_listener_spn_failed_always();
    internal static string get_net_log_listener_spn_failed_empty();
    internal static string get_net_log_listener_spn_failed_dump();
    internal static string get_net_ssl_io_frame();
    internal static string get_net_ssl_io_renego();
    internal static string get_net_ssl_io_cert_validation();
    internal static string get_net_ssl_io_cert_chain_validation();
    internal static string get_net_ssl_io_cert_custom_validation();
    internal static string get_net_ssl_io_no_server_cert();
    internal static string get_net_ssl_io_already_shutdown();
    internal static string get_net_auth_bad_client_creds();
    internal static string get_net_auth_bad_client_creds_or_target_mismatch();
    internal static string get_net_auth_context_expectation();
    internal static string get_net_auth_context_expectation_remote();
    internal static string get_net_auth_supported_impl_levels();
    internal static string get_net_auth_reauth();
    internal static string get_net_auth_noauth();
    internal static string get_net_auth_client_server();
    internal static string get_net_auth_SSPI();
    internal static string get_net_auth_eof();
    internal static string get_net_auth_tls_alert();
    internal static string get_net_auth_alert();
    internal static string get_net_auth_ephemeral();
    internal static string get_net_auth_message_not_encrypted();
    internal static string get_net_auth_must_specify_extended_protection_scheme();
    internal static string get_net_frame_size();
    internal static string get_net_frame_read_size();
    internal static string get_net_frame_max_size();
    internal static string get_net_invalid_enum();
    internal static string get_net_log_open_store_failed();
    internal static string get_net_log_remote_cert_has_errors();
    internal static string get_net_log_remote_cert_not_available();
    internal static string get_net_log_remote_cert_name_mismatch();
    internal static string get_net_log_operation_failed_with_error();
    internal static string get_SSPIInvalidHandleType();
    internal static string get_security_ExtendedProtectionPolicy_UseDifferentConstructorForNever();
    internal static string get_security_ExtendedProtectionPolicy_NoEmptyServiceNameCollection();
    internal static string get_net_allocate_ssl_context_failed();
    internal static string get_net_generic_operation_failed();
    internal static string get_net_ssl_decrypt_failed();
    internal static string get_net_ssl_encrypt_failed();
    internal static string get_net_ssl_check_private_key_failed();
    internal static string get_net_ssl_handshake_failed_error();
    internal static string get_net_ssl_read_bio_failed_error();
    internal static string get_net_ssl_use_cert_failed();
    internal static string get_net_ssl_use_private_key_failed();
    internal static string get_net_ssl_write_bio_failed_error();
    internal static string get_net_ssl_get_connection_info_failed();
    internal static string get_net_ssl_get_channel_binding_token_failed();
    internal static string get_net_ssl_invalid_certificate();
    internal static string get_net_ssl_encryptionpolicy_notsupported();
    internal static string get_net_gssapi_operation_failed_detailed();
    internal static string get_net_gssapi_operation_failed();
    internal static string get_net_gssapi_operation_failed_detailed_majoronly();
    internal static string get_net_gssapi_operation_failed_majoronly();
    internal static string get_net_gssapi_ntlm_missing_plugin();
    internal static string get_net_context_buffer_too_small();
    internal static string get_net_ntlm_not_possible_default_cred();
    internal static string get_net_nego_server_not_supported();
    internal static string get_net_nego_protection_level_not_supported();
    internal static string get_net_nego_not_supported_empty_target_with_defaultcreds();
    internal static string get_net_security_sslprotocol_contiguous();
    internal static string get_net_security_sslprotocol_notsupported();
    internal static string get_net_encryptionpolicy_notsupported();
    internal static string get_net_alpn_config_failed();
    internal static string get_net_alpn_failed();
    internal static string get_net_ssl_app_protocols_invalid();
    internal static string get_net_ssl_app_protocol_invalid();
    internal static string get_net_conflicting_options();
    internal static string get_net_ssl_ciphersuites_policy_not_supported();
    internal static string get_SystemNetSecurity_PlatformNotSupported();
    internal static string get_net_ssl_certificate_exist();
    internal static string get_net_ssl_renegotiate_data();
    internal static string get_net_ssl_renegotiate_buffer();
    internal static string get_net_android_ssl_api_level_unsupported();
    internal static string get_net_ssl_trust_store();
    internal static string get_net_ssl_trust_collection();
    internal static string get_net_ssl_trust_handshake();
    internal static string get_Cryptography_Der_Invalid_Encoding();
}
