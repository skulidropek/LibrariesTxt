internal static class FxResources.System.Net.Sockets.SR : object {
}
public enum System.Net.Sockets.IOControlCode : Enum {
    public long value__;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode EnableCircularQueuing;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode Flush;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode AddressListChange;
    public static IOControlCode DataToRead;
    public static IOControlCode OobDataRead;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode GetBroadcastAddress;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode AddressListQuery;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode QueryTargetPnpHandle;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode AsyncIO;
    public static IOControlCode NonBlockingIO;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode AssociateHandle;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode MultipointLoopback;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode MulticastScope;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode SetQos;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode SetGroupQos;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode RoutingInterfaceChange;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode NamespaceChange;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode ReceiveAll;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode ReceiveAllMulticast;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode ReceiveAllIgmpMulticast;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode KeepAliveValues;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode AbsorbRouterAlert;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode UnicastInterface;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode LimitBroadcasts;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode BindToInterface;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode MulticastInterface;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode AddMulticastGroupOnInterface;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode DeleteMulticastGroupFromInterface;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode GetExtensionFunctionPointer;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode GetQos;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode GetGroupQos;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode TranslateHandle;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode RoutingInterfaceQuery;
    [SupportedOSPlatformAttribute("windows")]
public static IOControlCode AddressListSort;
}
public class System.Net.Sockets.IPPacketInformation : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    [NullableAttribute("1")]
public IPAddress Address { get; }
    public int Interface { get; }
    [NullableContextAttribute("1")]
public IPAddress get_Address();
    public int get_Interface();
    public sealed virtual bool Equals(IPPacketInformation other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public static bool op_Equality(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2);
    public static bool op_Inequality(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2);
}
public enum System.Net.Sockets.IPProtectionLevel : Enum {
    public int value__;
    public static IPProtectionLevel Unspecified;
    public static IPProtectionLevel Unrestricted;
    public static IPProtectionLevel EdgeRestricted;
    public static IPProtectionLevel Restricted;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.IPv6MulticastOption : object {
    public IPAddress Group { get; public set; }
    public long InterfaceIndex { get; public set; }
    public IPv6MulticastOption(IPAddress group);
    public IPv6MulticastOption(IPAddress group, long ifindex);
    public IPAddress get_Group();
    public void set_Group(IPAddress value);
    public long get_InterfaceIndex();
    public void set_InterfaceIndex(long value);
}
public class System.Net.Sockets.LingerOption : object {
    public bool Enabled { get; public set; }
    public int LingerTime { get; public set; }
    public LingerOption(bool enable, int seconds);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_LingerTime();
    public void set_LingerTime(int value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.MulticastOption : object {
    public IPAddress Group { get; public set; }
    public int InterfaceIndex { get; public set; }
    [NullableAttribute("2")]
public IPAddress LocalAddress { get; public set; }
    public MulticastOption(IPAddress group);
    public MulticastOption(IPAddress group, int interfaceIndex);
    public MulticastOption(IPAddress group, IPAddress mcint);
    public IPAddress get_Group();
    public void set_Group(IPAddress value);
    public int get_InterfaceIndex();
    public void set_InterfaceIndex(int value);
    [NullableContextAttribute("2")]
public IPAddress get_LocalAddress();
    [NullableContextAttribute("2")]
public void set_LocalAddress(IPAddress value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.NetworkStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public bool DataAvailable { get; }
    public long Length { get; }
    public long Position { get; public set; }
    protected bool Readable { get; protected set; }
    public int ReadTimeout { get; public set; }
    public Socket Socket { get; }
    protected bool Writeable { get; protected set; }
    public int WriteTimeout { get; public set; }
    public NetworkStream(Socket socket);
    public NetworkStream(Socket socket, bool ownsSocket);
    public NetworkStream(Socket socket, FileAccess access);
    public NetworkStream(Socket socket, FileAccess access, bool ownsSocket);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual bool get_DataAvailable();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected bool get_Readable();
    protected void set_Readable(bool value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public Socket get_Socket();
    protected bool get_Writeable();
    protected void set_Writeable(bool value);
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public void Close(int timeout);
    public void Close(TimeSpan timeout);
    protected virtual void Dispose(bool disposing);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    protected virtual override void Finalize();
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
}
public enum System.Net.Sockets.ProtocolFamily : Enum {
    public int value__;
    public static ProtocolFamily Unknown;
    public static ProtocolFamily Unspecified;
    public static ProtocolFamily Unix;
    public static ProtocolFamily InterNetwork;
    public static ProtocolFamily ImpLink;
    public static ProtocolFamily Pup;
    public static ProtocolFamily Chaos;
    public static ProtocolFamily Ipx;
    public static ProtocolFamily NS;
    public static ProtocolFamily Iso;
    public static ProtocolFamily Osi;
    public static ProtocolFamily Ecma;
    public static ProtocolFamily DataKit;
    public static ProtocolFamily Ccitt;
    public static ProtocolFamily Sna;
    public static ProtocolFamily DecNet;
    public static ProtocolFamily DataLink;
    public static ProtocolFamily Lat;
    public static ProtocolFamily HyperChannel;
    public static ProtocolFamily AppleTalk;
    public static ProtocolFamily NetBios;
    public static ProtocolFamily VoiceView;
    public static ProtocolFamily FireFox;
    public static ProtocolFamily Banyan;
    public static ProtocolFamily Atm;
    public static ProtocolFamily InterNetworkV6;
    public static ProtocolFamily Cluster;
    public static ProtocolFamily Ieee12844;
    public static ProtocolFamily Irda;
    public static ProtocolFamily NetworkDesigners;
    public static ProtocolFamily Max;
    public static ProtocolFamily Packet;
    public static ProtocolFamily ControllerAreaNetwork;
}
public enum System.Net.Sockets.ProtocolType : Enum {
    public int value__;
    public static ProtocolType Unknown;
    public static ProtocolType IP;
    public static ProtocolType IPv6HopByHopOptions;
    public static ProtocolType Unspecified;
    public static ProtocolType Icmp;
    public static ProtocolType Igmp;
    public static ProtocolType Ggp;
    public static ProtocolType IPv4;
    public static ProtocolType Tcp;
    public static ProtocolType Pup;
    public static ProtocolType Udp;
    public static ProtocolType Idp;
    public static ProtocolType IPv6;
    public static ProtocolType IPv6RoutingHeader;
    public static ProtocolType IPv6FragmentHeader;
    public static ProtocolType IPSecEncapsulatingSecurityPayload;
    public static ProtocolType IPSecAuthenticationHeader;
    public static ProtocolType IcmpV6;
    public static ProtocolType IPv6NoNextHeader;
    public static ProtocolType IPv6DestinationOptions;
    public static ProtocolType ND;
    public static ProtocolType Raw;
    public static ProtocolType Ipx;
    public static ProtocolType Spx;
    public static ProtocolType SpxII;
}
public class System.Net.Sockets.SafeSocketHandle : SafeHandleMinusOneIsInvalid {
    public bool IsInvalid { get; }
    public SafeSocketHandle(IntPtr preexistingHandle, bool ownsHandle);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
public enum System.Net.Sockets.SelectMode : Enum {
    public int value__;
    public static SelectMode SelectRead;
    public static SelectMode SelectWrite;
    public static SelectMode SelectError;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.SendPacketsElement : object {
    [NullableAttribute("2")]
public Byte[] Buffer { get; }
    public int Count { get; }
    public bool EndOfPacket { get; }
    [NullableAttribute("2")]
public string FilePath { get; }
    [NullableAttribute("2")]
public FileStream FileStream { get; }
    [NullableAttribute("0")]
public Nullable`1<ReadOnlyMemory`1<byte>> MemoryBuffer { get; }
    public int Offset { get; }
    public long OffsetLong { get; }
    public SendPacketsElement(Byte[] buffer);
    public SendPacketsElement(Byte[] buffer, int offset, int count);
    public SendPacketsElement(Byte[] buffer, int offset, int count, bool endOfPacket);
    public SendPacketsElement(FileStream fileStream);
    public SendPacketsElement(FileStream fileStream, long offset, int count);
    public SendPacketsElement(FileStream fileStream, long offset, int count, bool endOfPacket);
    [NullableContextAttribute("0")]
public SendPacketsElement(ReadOnlyMemory`1<byte> buffer);
    [NullableContextAttribute("0")]
public SendPacketsElement(ReadOnlyMemory`1<byte> buffer, bool endOfPacket);
    public SendPacketsElement(string filepath);
    public SendPacketsElement(string filepath, int offset, int count);
    public SendPacketsElement(string filepath, int offset, int count, bool endOfPacket);
    public SendPacketsElement(string filepath, long offset, int count);
    public SendPacketsElement(string filepath, long offset, int count, bool endOfPacket);
    [NullableContextAttribute("2")]
public Byte[] get_Buffer();
    public int get_Count();
    public bool get_EndOfPacket();
    [NullableContextAttribute("2")]
public string get_FilePath();
    [NullableContextAttribute("2")]
public FileStream get_FileStream();
    [NullableContextAttribute("0")]
public Nullable`1<ReadOnlyMemory`1<byte>> get_MemoryBuffer();
    public int get_Offset();
    public long get_OffsetLong();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.Socket : object {
    public AddressFamily AddressFamily { get; }
    public int Available { get; }
    public bool Blocking { get; public set; }
    public bool Connected { get; }
    public bool DontFragment { get; public set; }
    public bool DualMode { get; public set; }
    public bool EnableBroadcast { get; public set; }
    public bool ExclusiveAddressUse { get; public set; }
    public IntPtr Handle { get; }
    public bool IsBound { get; }
    [NullableAttribute("2")]
public LingerOption LingerState { get; public set; }
    [NullableAttribute("2")]
public EndPoint LocalEndPoint { get; }
    public bool MulticastLoopback { get; public set; }
    public bool NoDelay { get; public set; }
    public static bool OSSupportsIPv4 { get; }
    public static bool OSSupportsIPv6 { get; }
    public static bool OSSupportsUnixDomainSockets { get; }
    public ProtocolType ProtocolType { get; }
    public int ReceiveBufferSize { get; public set; }
    public int ReceiveTimeout { get; public set; }
    [NullableAttribute("2")]
public EndPoint RemoteEndPoint { get; }
    public SafeSocketHandle SafeHandle { get; }
    public int SendBufferSize { get; public set; }
    public int SendTimeout { get; public set; }
    public SocketType SocketType { get; }
    [ObsoleteAttribute("SupportsIPv4 has been deprecated. Use OSSupportsIPv4 instead.")]
public static bool SupportsIPv4 { get; }
    [ObsoleteAttribute("SupportsIPv6 has been deprecated. Use OSSupportsIPv6 instead.")]
public static bool SupportsIPv6 { get; }
    public short Ttl { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("UseOnlyOverlappedIO has been deprecated and is not supported.")]
public bool UseOnlyOverlappedIO { get; public set; }
    public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType);
    public Socket(SafeSocketHandle handle);
    [SupportedOSPlatformAttribute("windows")]
public Socket(SocketInformation socketInformation);
    public Socket(SocketType socketType, ProtocolType protocolType);
    public AddressFamily get_AddressFamily();
    public int get_Available();
    public bool get_Blocking();
    public void set_Blocking(bool value);
    public bool get_Connected();
    public bool get_DontFragment();
    public void set_DontFragment(bool value);
    public bool get_DualMode();
    public void set_DualMode(bool value);
    public bool get_EnableBroadcast();
    public void set_EnableBroadcast(bool value);
    public bool get_ExclusiveAddressUse();
    public void set_ExclusiveAddressUse(bool value);
    public IntPtr get_Handle();
    public bool get_IsBound();
    [NullableContextAttribute("2")]
public LingerOption get_LingerState();
    [NullableContextAttribute("2")]
public void set_LingerState(LingerOption value);
    [NullableContextAttribute("2")]
public EndPoint get_LocalEndPoint();
    public bool get_MulticastLoopback();
    public void set_MulticastLoopback(bool value);
    public bool get_NoDelay();
    public void set_NoDelay(bool value);
    public static bool get_OSSupportsIPv4();
    public static bool get_OSSupportsIPv6();
    public static bool get_OSSupportsUnixDomainSockets();
    public ProtocolType get_ProtocolType();
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    public int get_ReceiveTimeout();
    public void set_ReceiveTimeout(int value);
    [NullableContextAttribute("2")]
public EndPoint get_RemoteEndPoint();
    public SafeSocketHandle get_SafeHandle();
    public int get_SendBufferSize();
    public void set_SendBufferSize(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    public SocketType get_SocketType();
    public static bool get_SupportsIPv4();
    public static bool get_SupportsIPv6();
    public short get_Ttl();
    public void set_Ttl(short value);
    public bool get_UseOnlyOverlappedIO();
    public void set_UseOnlyOverlappedIO(bool value);
    public Socket Accept();
    public Task`1<Socket> AcceptAsync();
    public Task`1<Socket> AcceptAsync(Socket acceptSocket);
    [NullableContextAttribute("2")]
public ValueTask`1<Socket> AcceptAsync(Socket acceptSocket, CancellationToken cancellationToken);
    public bool AcceptAsync(SocketAsyncEventArgs e);
    public ValueTask`1<Socket> AcceptAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public IAsyncResult BeginAccept(AsyncCallback callback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginAccept(int receiveSize, AsyncCallback callback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginAccept(Socket acceptSocket, int receiveSize, AsyncCallback callback, object state);
    public IAsyncResult BeginConnect(EndPoint remoteEP, AsyncCallback callback, object state);
    public IAsyncResult BeginConnect(IPAddress address, int port, AsyncCallback requestCallback, object state);
    public IAsyncResult BeginConnect(IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);
    public IAsyncResult BeginConnect(string host, int port, AsyncCallback requestCallback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginDisconnect(bool reuseSocket, AsyncCallback callback, object state);
    public IAsyncResult BeginReceive(Byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginReceive(Byte[] buffer, int offset, int size, SocketFlags socketFlags, SocketError& errorCode, AsyncCallback callback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginReceive(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, AsyncCallback callback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginReceive(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, SocketError& errorCode, AsyncCallback callback, object state);
    public IAsyncResult BeginReceiveFrom(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint& remoteEP, AsyncCallback callback, object state);
    public IAsyncResult BeginReceiveMessageFrom(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint& remoteEP, AsyncCallback callback, object state);
    public IAsyncResult BeginSend(Byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginSend(Byte[] buffer, int offset, int size, SocketFlags socketFlags, SocketError& errorCode, AsyncCallback callback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginSend(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, AsyncCallback callback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginSend(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, SocketError& errorCode, AsyncCallback callback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginSendFile(string fileName, AsyncCallback callback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginSendFile(string fileName, Byte[] preBuffer, Byte[] postBuffer, TransmitFileOptions flags, AsyncCallback callback, object state);
    public IAsyncResult BeginSendTo(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint remoteEP, AsyncCallback callback, object state);
    public void Bind(EndPoint localEP);
    public static void CancelConnectAsync(SocketAsyncEventArgs e);
    public void Close();
    public void Close(int timeout);
    public void Connect(EndPoint remoteEP);
    public void Connect(IPAddress address, int port);
    public void Connect(IPAddress[] addresses, int port);
    public void Connect(string host, int port);
    public Task ConnectAsync(EndPoint remoteEP);
    public ValueTask ConnectAsync(EndPoint remoteEP, CancellationToken cancellationToken);
    public Task ConnectAsync(IPAddress address, int port);
    public ValueTask ConnectAsync(IPAddress address, int port, CancellationToken cancellationToken);
    public Task ConnectAsync(IPAddress[] addresses, int port);
    public ValueTask ConnectAsync(IPAddress[] addresses, int port, CancellationToken cancellationToken);
    public bool ConnectAsync(SocketAsyncEventArgs e);
    public static bool ConnectAsync(SocketType socketType, ProtocolType protocolType, SocketAsyncEventArgs e);
    public Task ConnectAsync(string host, int port);
    public ValueTask ConnectAsync(string host, int port, CancellationToken cancellationToken);
    public void Disconnect(bool reuseSocket);
    public ValueTask DisconnectAsync(bool reuseSocket, CancellationToken cancellationToken);
    public bool DisconnectAsync(SocketAsyncEventArgs e);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [SupportedOSPlatformAttribute("windows")]
public SocketInformation DuplicateAndClose(int targetProcessId);
    public Socket EndAccept(Byte[]& buffer, IAsyncResult asyncResult);
    public Socket EndAccept(Byte[]& buffer, Int32& bytesTransferred, IAsyncResult asyncResult);
    public Socket EndAccept(IAsyncResult asyncResult);
    public void EndConnect(IAsyncResult asyncResult);
    public void EndDisconnect(IAsyncResult asyncResult);
    public int EndReceive(IAsyncResult asyncResult);
    public int EndReceive(IAsyncResult asyncResult, SocketError& errorCode);
    public int EndReceiveFrom(IAsyncResult asyncResult, EndPoint& endPoint);
    public int EndReceiveMessageFrom(IAsyncResult asyncResult, SocketFlags& socketFlags, EndPoint& endPoint, IPPacketInformation& ipPacketInformation);
    public int EndSend(IAsyncResult asyncResult);
    public int EndSend(IAsyncResult asyncResult, SocketError& errorCode);
    public void EndSendFile(IAsyncResult asyncResult);
    public int EndSendTo(IAsyncResult asyncResult);
    protected virtual override void Finalize();
    [NullableContextAttribute("0")]
public int GetRawSocketOption(int optionLevel, int optionName, Span`1<byte> optionValue);
    [NullableContextAttribute("2")]
public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName);
    public void GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue);
    public Byte[] GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionLength);
    [NullableContextAttribute("2")]
public int IOControl(int ioControlCode, Byte[] optionInValue, Byte[] optionOutValue);
    [NullableContextAttribute("2")]
public int IOControl(IOControlCode ioControlCode, Byte[] optionInValue, Byte[] optionOutValue);
    public void Listen();
    public void Listen(int backlog);
    public bool Poll(int microSeconds, SelectMode mode);
    public bool Poll(TimeSpan timeout, SelectMode mode);
    public int Receive(Byte[] buffer);
    public int Receive(Byte[] buffer, int offset, int size, SocketFlags socketFlags);
    public int Receive(Byte[] buffer, int offset, int size, SocketFlags socketFlags, SocketError& errorCode);
    public int Receive(Byte[] buffer, int size, SocketFlags socketFlags);
    public int Receive(Byte[] buffer, SocketFlags socketFlags);
    public int Receive(IList`1<ArraySegment`1<byte>> buffers);
    public int Receive(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    public int Receive(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, SocketError& errorCode);
    [NullableContextAttribute("0")]
public int Receive(Span`1<byte> buffer);
    [NullableContextAttribute("0")]
public int Receive(Span`1<byte> buffer, SocketFlags socketFlags);
    [NullableContextAttribute("0")]
public int Receive(Span`1<byte> buffer, SocketFlags socketFlags, SocketError& errorCode);
    [NullableContextAttribute("0")]
public Task`1<int> ReceiveAsync(ArraySegment`1<byte> buffer);
    [NullableContextAttribute("0")]
public Task`1<int> ReceiveAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags);
    public Task`1<int> ReceiveAsync(IList`1<ArraySegment`1<byte>> buffers);
    public Task`1<int> ReceiveAsync(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    [NullableContextAttribute("0")]
public ValueTask`1<int> ReceiveAsync(Memory`1<byte> buffer, SocketFlags socketFlags, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<int> ReceiveAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public bool ReceiveAsync(SocketAsyncEventArgs e);
    public int ReceiveFrom(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint& remoteEP);
    public int ReceiveFrom(Byte[] buffer, int size, SocketFlags socketFlags, EndPoint& remoteEP);
    public int ReceiveFrom(Byte[] buffer, EndPoint& remoteEP);
    public int ReceiveFrom(Byte[] buffer, SocketFlags socketFlags, EndPoint& remoteEP);
    [NullableContextAttribute("0")]
public int ReceiveFrom(Span`1<byte> buffer, EndPoint& remoteEP);
    [NullableContextAttribute("0")]
public int ReceiveFrom(Span`1<byte> buffer, SocketFlags socketFlags, EndPoint& remoteEP);
    [NullableContextAttribute("0")]
public int ReceiveFrom(Span`1<byte> buffer, SocketFlags socketFlags, SocketAddress receivedAddress);
    public Task`1<SocketReceiveFromResult> ReceiveFromAsync(ArraySegment`1<byte> buffer, EndPoint remoteEndPoint);
    public Task`1<SocketReceiveFromResult> ReceiveFromAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint);
    [NullableContextAttribute("0")]
public ValueTask`1<SocketReceiveFromResult> ReceiveFromAsync(Memory`1<byte> buffer, EndPoint remoteEndPoint, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<SocketReceiveFromResult> ReceiveFromAsync(Memory`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<int> ReceiveFromAsync(Memory`1<byte> buffer, SocketFlags socketFlags, SocketAddress receivedAddress, CancellationToken cancellationToken);
    public bool ReceiveFromAsync(SocketAsyncEventArgs e);
    public int ReceiveMessageFrom(Byte[] buffer, int offset, int size, SocketFlags& socketFlags, EndPoint& remoteEP, IPPacketInformation& ipPacketInformation);
    [NullableContextAttribute("0")]
public int ReceiveMessageFrom(Span`1<byte> buffer, SocketFlags& socketFlags, EndPoint& remoteEP, IPPacketInformation& ipPacketInformation);
    public Task`1<SocketReceiveMessageFromResult> ReceiveMessageFromAsync(ArraySegment`1<byte> buffer, EndPoint remoteEndPoint);
    public Task`1<SocketReceiveMessageFromResult> ReceiveMessageFromAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint);
    [NullableContextAttribute("0")]
public ValueTask`1<SocketReceiveMessageFromResult> ReceiveMessageFromAsync(Memory`1<byte> buffer, EndPoint remoteEndPoint, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<SocketReceiveMessageFromResult> ReceiveMessageFromAsync(Memory`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint, CancellationToken cancellationToken);
    public bool ReceiveMessageFromAsync(SocketAsyncEventArgs e);
    [NullableContextAttribute("2")]
public static void Select(IList checkRead, IList checkWrite, IList checkError, int microSeconds);
    [NullableContextAttribute("2")]
public static void Select(IList checkRead, IList checkWrite, IList checkError, TimeSpan timeout);
    public int Send(Byte[] buffer);
    public int Send(Byte[] buffer, int offset, int size, SocketFlags socketFlags);
    public int Send(Byte[] buffer, int offset, int size, SocketFlags socketFlags, SocketError& errorCode);
    public int Send(Byte[] buffer, int size, SocketFlags socketFlags);
    public int Send(Byte[] buffer, SocketFlags socketFlags);
    public int Send(IList`1<ArraySegment`1<byte>> buffers);
    public int Send(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    public int Send(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags, SocketError& errorCode);
    [NullableContextAttribute("0")]
public int Send(ReadOnlySpan`1<byte> buffer);
    [NullableContextAttribute("0")]
public int Send(ReadOnlySpan`1<byte> buffer, SocketFlags socketFlags);
    [NullableContextAttribute("0")]
public int Send(ReadOnlySpan`1<byte> buffer, SocketFlags socketFlags, SocketError& errorCode);
    [NullableContextAttribute("0")]
public Task`1<int> SendAsync(ArraySegment`1<byte> buffer);
    [NullableContextAttribute("0")]
public Task`1<int> SendAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags);
    public Task`1<int> SendAsync(IList`1<ArraySegment`1<byte>> buffers);
    public Task`1<int> SendAsync(IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    public bool SendAsync(SocketAsyncEventArgs e);
    [NullableContextAttribute("0")]
public ValueTask`1<int> SendAsync(ReadOnlyMemory`1<byte> buffer, SocketFlags socketFlags, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<int> SendAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public void SendFile(string fileName);
    [NullableContextAttribute("2")]
public void SendFile(string fileName, Byte[] preBuffer, Byte[] postBuffer, TransmitFileOptions flags);
    [NullableContextAttribute("0")]
public void SendFile(string fileName, ReadOnlySpan`1<byte> preBuffer, ReadOnlySpan`1<byte> postBuffer, TransmitFileOptions flags);
    [NullableContextAttribute("0")]
public ValueTask SendFileAsync(string fileName, ReadOnlyMemory`1<byte> preBuffer, ReadOnlyMemory`1<byte> postBuffer, TransmitFileOptions flags, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public ValueTask SendFileAsync(string fileName, CancellationToken cancellationToken);
    public bool SendPacketsAsync(SocketAsyncEventArgs e);
    public int SendTo(Byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint remoteEP);
    public int SendTo(Byte[] buffer, int size, SocketFlags socketFlags, EndPoint remoteEP);
    public int SendTo(Byte[] buffer, EndPoint remoteEP);
    public int SendTo(Byte[] buffer, SocketFlags socketFlags, EndPoint remoteEP);
    [NullableContextAttribute("0")]
public int SendTo(ReadOnlySpan`1<byte> buffer, EndPoint remoteEP);
    [NullableContextAttribute("0")]
public int SendTo(ReadOnlySpan`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEP);
    [NullableContextAttribute("0")]
public int SendTo(ReadOnlySpan`1<byte> buffer, SocketFlags socketFlags, SocketAddress socketAddress);
    public Task`1<int> SendToAsync(ArraySegment`1<byte> buffer, EndPoint remoteEP);
    public Task`1<int> SendToAsync(ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEP);
    public bool SendToAsync(SocketAsyncEventArgs e);
    [NullableContextAttribute("0")]
public ValueTask`1<int> SendToAsync(ReadOnlyMemory`1<byte> buffer, EndPoint remoteEP, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<int> SendToAsync(ReadOnlyMemory`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEP, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<int> SendToAsync(ReadOnlyMemory`1<byte> buffer, SocketFlags socketFlags, SocketAddress socketAddress, CancellationToken cancellationToken);
    [SupportedOSPlatformAttribute("windows")]
public void SetIPProtectionLevel(IPProtectionLevel level);
    [NullableContextAttribute("0")]
public void SetRawSocketOption(int optionLevel, int optionName, ReadOnlySpan`1<byte> optionValue);
    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue);
    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, Byte[] optionValue);
    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue);
    public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, object optionValue);
    public void Shutdown(SocketShutdown how);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.Sockets.SocketAsyncEventArgs : EventArgs {
    public Socket AcceptSocket { get; public set; }
    public Byte[] Buffer { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IList`1<ArraySegment`1<byte>> BufferList { get; public set; }
    public int BytesTransferred { get; }
    public Exception ConnectByNameError { get; }
    public Socket ConnectSocket { get; }
    public int Count { get; }
    public bool DisconnectReuseSocket { get; public set; }
    public SocketAsyncOperation LastOperation { get; }
    [NullableAttribute("0")]
public Memory`1<byte> MemoryBuffer { get; }
    public int Offset { get; }
    public IPPacketInformation ReceiveMessageFromPacketInfo { get; }
    public EndPoint RemoteEndPoint { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public SendPacketsElement[] SendPacketsElements { get; public set; }
    public TransmitFileOptions SendPacketsFlags { get; public set; }
    public int SendPacketsSendSize { get; public set; }
    public SocketError SocketError { get; public set; }
    public SocketFlags SocketFlags { get; public set; }
    public object UserToken { get; public set; }
    public SocketAsyncEventArgs(bool unsafeSuppressExecutionContextFlow);
    public Socket get_AcceptSocket();
    public void set_AcceptSocket(Socket value);
    public Byte[] get_Buffer();
    public IList`1<ArraySegment`1<byte>> get_BufferList();
    public void set_BufferList(IList`1<ArraySegment`1<byte>> value);
    public int get_BytesTransferred();
    public Exception get_ConnectByNameError();
    public Socket get_ConnectSocket();
    public int get_Count();
    public bool get_DisconnectReuseSocket();
    public void set_DisconnectReuseSocket(bool value);
    public SocketAsyncOperation get_LastOperation();
    [NullableContextAttribute("0")]
public Memory`1<byte> get_MemoryBuffer();
    public int get_Offset();
    public IPPacketInformation get_ReceiveMessageFromPacketInfo();
    public EndPoint get_RemoteEndPoint();
    public void set_RemoteEndPoint(EndPoint value);
    public SendPacketsElement[] get_SendPacketsElements();
    public void set_SendPacketsElements(SendPacketsElement[] value);
    public TransmitFileOptions get_SendPacketsFlags();
    public void set_SendPacketsFlags(TransmitFileOptions value);
    public int get_SendPacketsSendSize();
    public void set_SendPacketsSendSize(int value);
    public SocketError get_SocketError();
    public void set_SocketError(SocketError value);
    public SocketFlags get_SocketFlags();
    public void set_SocketFlags(SocketFlags value);
    public object get_UserToken();
    public void set_UserToken(object value);
    public void add_Completed(EventHandler`1<SocketAsyncEventArgs> value);
    public void remove_Completed(EventHandler`1<SocketAsyncEventArgs> value);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    [NullableContextAttribute("1")]
protected virtual void OnCompleted(SocketAsyncEventArgs e);
    public void SetBuffer(Byte[] buffer, int offset, int count);
    public void SetBuffer(int offset, int count);
    [NullableContextAttribute("0")]
public void SetBuffer(Memory`1<byte> buffer);
}
public enum System.Net.Sockets.SocketAsyncOperation : Enum {
    public int value__;
    public static SocketAsyncOperation None;
    public static SocketAsyncOperation Accept;
    public static SocketAsyncOperation Connect;
    public static SocketAsyncOperation Disconnect;
    public static SocketAsyncOperation Receive;
    public static SocketAsyncOperation ReceiveFrom;
    public static SocketAsyncOperation ReceiveMessageFrom;
    public static SocketAsyncOperation Send;
    public static SocketAsyncOperation SendPackets;
    public static SocketAsyncOperation SendTo;
}
[FlagsAttribute]
public enum System.Net.Sockets.SocketFlags : Enum {
    public int value__;
    public static SocketFlags None;
    public static SocketFlags OutOfBand;
    public static SocketFlags Peek;
    public static SocketFlags DontRoute;
    public static SocketFlags Truncated;
    public static SocketFlags ControlDataTruncated;
    public static SocketFlags Broadcast;
    public static SocketFlags Multicast;
    public static SocketFlags Partial;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.SocketInformation : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public SocketInformationOptions Options { get; public set; }
    public Byte[] ProtocolInformation { get; public set; }
    [IsReadOnlyAttribute]
public SocketInformationOptions get_Options();
    public void set_Options(SocketInformationOptions value);
    [IsReadOnlyAttribute]
public Byte[] get_ProtocolInformation();
    public void set_ProtocolInformation(Byte[] value);
}
[FlagsAttribute]
public enum System.Net.Sockets.SocketInformationOptions : Enum {
    public int value__;
    public static SocketInformationOptions NonBlocking;
    public static SocketInformationOptions Connected;
    public static SocketInformationOptions Listening;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("SocketInformationOptions.UseOnlyOverlappedIO has been deprecated and is not supported.")]
public static SocketInformationOptions UseOnlyOverlappedIO;
}
public enum System.Net.Sockets.SocketOptionLevel : Enum {
    public int value__;
    public static SocketOptionLevel IP;
    public static SocketOptionLevel Tcp;
    public static SocketOptionLevel Udp;
    public static SocketOptionLevel IPv6;
    public static SocketOptionLevel Socket;
}
public enum System.Net.Sockets.SocketOptionName : Enum {
    public int value__;
    public static SocketOptionName DontLinger;
    public static SocketOptionName ExclusiveAddressUse;
    public static SocketOptionName Debug;
    public static SocketOptionName IPOptions;
    public static SocketOptionName NoChecksum;
    public static SocketOptionName NoDelay;
    public static SocketOptionName AcceptConnection;
    public static SocketOptionName BsdUrgent;
    public static SocketOptionName Expedited;
    public static SocketOptionName HeaderIncluded;
    public static SocketOptionName TcpKeepAliveTime;
    public static SocketOptionName TypeOfService;
    public static SocketOptionName IpTimeToLive;
    public static SocketOptionName ReuseAddress;
    public static SocketOptionName KeepAlive;
    public static SocketOptionName MulticastInterface;
    public static SocketOptionName MulticastTimeToLive;
    public static SocketOptionName MulticastLoopback;
    public static SocketOptionName AddMembership;
    public static SocketOptionName DropMembership;
    public static SocketOptionName DontFragment;
    public static SocketOptionName AddSourceMembership;
    public static SocketOptionName DontRoute;
    public static SocketOptionName DropSourceMembership;
    public static SocketOptionName TcpKeepAliveRetryCount;
    public static SocketOptionName BlockSource;
    public static SocketOptionName TcpKeepAliveInterval;
    public static SocketOptionName UnblockSource;
    public static SocketOptionName PacketInformation;
    public static SocketOptionName ChecksumCoverage;
    public static SocketOptionName HopLimit;
    public static SocketOptionName IPProtectionLevel;
    public static SocketOptionName IPv6Only;
    public static SocketOptionName Broadcast;
    public static SocketOptionName UseLoopback;
    public static SocketOptionName Linger;
    public static SocketOptionName OutOfBandInline;
    public static SocketOptionName SendBuffer;
    public static SocketOptionName ReceiveBuffer;
    public static SocketOptionName SendLowWater;
    public static SocketOptionName ReceiveLowWater;
    public static SocketOptionName SendTimeout;
    public static SocketOptionName ReceiveTimeout;
    public static SocketOptionName Error;
    public static SocketOptionName Type;
    public static SocketOptionName ReuseUnicastPort;
    public static SocketOptionName UpdateAcceptContext;
    public static SocketOptionName UpdateConnectContext;
    public static SocketOptionName MaxConnections;
}
public class System.Net.Sockets.SocketReceiveFromResult : ValueType {
    public int ReceivedBytes;
    [NullableAttribute("1")]
public EndPoint RemoteEndPoint;
}
public class System.Net.Sockets.SocketReceiveMessageFromResult : ValueType {
    public IPPacketInformation PacketInformation;
    public int ReceivedBytes;
    [NullableAttribute("1")]
public EndPoint RemoteEndPoint;
    public SocketFlags SocketFlags;
}
public enum System.Net.Sockets.SocketShutdown : Enum {
    public int value__;
    public static SocketShutdown Receive;
    public static SocketShutdown Send;
    public static SocketShutdown Both;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.Net.Sockets.SocketTaskExtensions : object {
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task`1<Socket> AcceptAsync(Socket socket);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task`1<Socket> AcceptAsync(Socket socket, Socket acceptSocket);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task ConnectAsync(Socket socket, EndPoint remoteEP);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static ValueTask ConnectAsync(Socket socket, EndPoint remoteEP, CancellationToken cancellationToken);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task ConnectAsync(Socket socket, IPAddress address, int port);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static ValueTask ConnectAsync(Socket socket, IPAddress address, int port, CancellationToken cancellationToken);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task ConnectAsync(Socket socket, IPAddress[] addresses, int port);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static ValueTask ConnectAsync(Socket socket, IPAddress[] addresses, int port, CancellationToken cancellationToken);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task ConnectAsync(Socket socket, string host, int port);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static ValueTask ConnectAsync(Socket socket, string host, int port, CancellationToken cancellationToken);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task`1<int> ReceiveAsync(Socket socket, ArraySegment`1<byte> buffer, SocketFlags socketFlags);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task`1<int> ReceiveAsync(Socket socket, IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static ValueTask`1<int> ReceiveAsync(Socket socket, Memory`1<byte> buffer, SocketFlags socketFlags, CancellationToken cancellationToken);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task`1<SocketReceiveFromResult> ReceiveFromAsync(Socket socket, ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task`1<SocketReceiveMessageFromResult> ReceiveMessageFromAsync(Socket socket, ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEndPoint);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task`1<int> SendAsync(Socket socket, ArraySegment`1<byte> buffer, SocketFlags socketFlags);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task`1<int> SendAsync(Socket socket, IList`1<ArraySegment`1<byte>> buffers, SocketFlags socketFlags);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static ValueTask`1<int> SendAsync(Socket socket, ReadOnlyMemory`1<byte> buffer, SocketFlags socketFlags, CancellationToken cancellationToken);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task`1<int> SendToAsync(Socket socket, ArraySegment`1<byte> buffer, SocketFlags socketFlags, EndPoint remoteEP);
}
public enum System.Net.Sockets.SocketType : Enum {
    public int value__;
    public static SocketType Unknown;
    public static SocketType Stream;
    public static SocketType Dgram;
    public static SocketType Raw;
    public static SocketType Rdm;
    public static SocketType Seqpacket;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.TcpClient : object {
    protected bool Active { get; protected set; }
    public int Available { get; }
    public Socket Client { get; public set; }
    public bool Connected { get; }
    public bool ExclusiveAddressUse { get; public set; }
    [NullableAttribute("2")]
public LingerOption LingerState { get; public set; }
    public bool NoDelay { get; public set; }
    public int ReceiveBufferSize { get; public set; }
    public int ReceiveTimeout { get; public set; }
    public int SendBufferSize { get; public set; }
    public int SendTimeout { get; public set; }
    public TcpClient(IPEndPoint localEP);
    public TcpClient(AddressFamily family);
    public TcpClient(string hostname, int port);
    protected bool get_Active();
    protected void set_Active(bool value);
    public int get_Available();
    public Socket get_Client();
    public void set_Client(Socket value);
    public bool get_Connected();
    public bool get_ExclusiveAddressUse();
    public void set_ExclusiveAddressUse(bool value);
    [NullableContextAttribute("2")]
public LingerOption get_LingerState();
    [NullableContextAttribute("2")]
public void set_LingerState(LingerOption value);
    public bool get_NoDelay();
    public void set_NoDelay(bool value);
    public int get_ReceiveBufferSize();
    public void set_ReceiveBufferSize(int value);
    public int get_ReceiveTimeout();
    public void set_ReceiveTimeout(int value);
    public int get_SendBufferSize();
    public void set_SendBufferSize(int value);
    public int get_SendTimeout();
    public void set_SendTimeout(int value);
    public IAsyncResult BeginConnect(IPAddress address, int port, AsyncCallback requestCallback, object state);
    public IAsyncResult BeginConnect(IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);
    public IAsyncResult BeginConnect(string host, int port, AsyncCallback requestCallback, object state);
    public void Close();
    public void Connect(IPAddress address, int port);
    public void Connect(IPAddress[] ipAddresses, int port);
    public void Connect(IPEndPoint remoteEP);
    public void Connect(string hostname, int port);
    public Task ConnectAsync(IPAddress address, int port);
    public ValueTask ConnectAsync(IPAddress address, int port, CancellationToken cancellationToken);
    public Task ConnectAsync(IPAddress[] addresses, int port);
    public ValueTask ConnectAsync(IPAddress[] addresses, int port, CancellationToken cancellationToken);
    public Task ConnectAsync(IPEndPoint remoteEP);
    public ValueTask ConnectAsync(IPEndPoint remoteEP, CancellationToken cancellationToken);
    public Task ConnectAsync(string host, int port);
    public ValueTask ConnectAsync(string host, int port, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void EndConnect(IAsyncResult asyncResult);
    protected virtual override void Finalize();
    public NetworkStream GetStream();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.TcpListener : object {
    protected bool Active { get; }
    public bool ExclusiveAddressUse { get; public set; }
    public EndPoint LocalEndpoint { get; }
    public Socket Server { get; }
    [ObsoleteAttribute("This constructor has been deprecated. Use TcpListener(IPAddress localaddr, int port) instead.")]
public TcpListener(int port);
    public TcpListener(IPAddress localaddr, int port);
    public TcpListener(IPEndPoint localEP);
    protected bool get_Active();
    public bool get_ExclusiveAddressUse();
    public void set_ExclusiveAddressUse(bool value);
    public EndPoint get_LocalEndpoint();
    public Socket get_Server();
    public Socket AcceptSocket();
    public Task`1<Socket> AcceptSocketAsync();
    public ValueTask`1<Socket> AcceptSocketAsync(CancellationToken cancellationToken);
    public TcpClient AcceptTcpClient();
    public Task`1<TcpClient> AcceptTcpClientAsync();
    public ValueTask`1<TcpClient> AcceptTcpClientAsync(CancellationToken cancellationToken);
    [SupportedOSPlatformAttribute("windows")]
public void AllowNatTraversal(bool allowed);
    [NullableContextAttribute("2")]
public IAsyncResult BeginAcceptSocket(AsyncCallback callback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginAcceptTcpClient(AsyncCallback callback, object state);
    public static TcpListener Create(int port);
    public sealed virtual void Dispose();
    public Socket EndAcceptSocket(IAsyncResult asyncResult);
    public TcpClient EndAcceptTcpClient(IAsyncResult asyncResult);
    public bool Pending();
    public void Start();
    public void Start(int backlog);
    public void Stop();
}
[FlagsAttribute]
public enum System.Net.Sockets.TransmitFileOptions : Enum {
    public int value__;
    public static TransmitFileOptions UseDefaultWorkerThread;
    public static TransmitFileOptions Disconnect;
    public static TransmitFileOptions ReuseSocket;
    [SupportedOSPlatformAttribute("windows")]
public static TransmitFileOptions WriteBehind;
    [SupportedOSPlatformAttribute("windows")]
public static TransmitFileOptions UseSystemThread;
    [SupportedOSPlatformAttribute("windows")]
public static TransmitFileOptions UseKernelApc;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.UdpClient : object {
    protected bool Active { get; protected set; }
    public int Available { get; }
    public Socket Client { get; public set; }
    public bool DontFragment { get; public set; }
    public bool EnableBroadcast { get; public set; }
    public bool ExclusiveAddressUse { get; public set; }
    public bool MulticastLoopback { get; public set; }
    public short Ttl { get; public set; }
    public UdpClient(int port);
    public UdpClient(int port, AddressFamily family);
    public UdpClient(IPEndPoint localEP);
    public UdpClient(AddressFamily family);
    public UdpClient(string hostname, int port);
    protected bool get_Active();
    protected void set_Active(bool value);
    public int get_Available();
    public Socket get_Client();
    public void set_Client(Socket value);
    public bool get_DontFragment();
    public void set_DontFragment(bool value);
    public bool get_EnableBroadcast();
    public void set_EnableBroadcast(bool value);
    public bool get_ExclusiveAddressUse();
    public void set_ExclusiveAddressUse(bool value);
    public bool get_MulticastLoopback();
    public void set_MulticastLoopback(bool value);
    public short get_Ttl();
    public void set_Ttl(short value);
    [SupportedOSPlatformAttribute("windows")]
public void AllowNatTraversal(bool allowed);
    [NullableContextAttribute("2")]
public IAsyncResult BeginReceive(AsyncCallback requestCallback, object state);
    public IAsyncResult BeginSend(Byte[] datagram, int bytes, AsyncCallback requestCallback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginSend(Byte[] datagram, int bytes, IPEndPoint endPoint, AsyncCallback requestCallback, object state);
    [NullableContextAttribute("2")]
public IAsyncResult BeginSend(Byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);
    public void Close();
    public void Connect(IPAddress addr, int port);
    public void Connect(IPEndPoint endPoint);
    public void Connect(string hostname, int port);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void DropMulticastGroup(IPAddress multicastAddr);
    public void DropMulticastGroup(IPAddress multicastAddr, int ifindex);
    public Byte[] EndReceive(IAsyncResult asyncResult, IPEndPoint& remoteEP);
    public int EndSend(IAsyncResult asyncResult);
    public void JoinMulticastGroup(int ifindex, IPAddress multicastAddr);
    public void JoinMulticastGroup(IPAddress multicastAddr);
    public void JoinMulticastGroup(IPAddress multicastAddr, int timeToLive);
    public void JoinMulticastGroup(IPAddress multicastAddr, IPAddress localAddress);
    public Byte[] Receive(IPEndPoint& remoteEP);
    public Task`1<UdpReceiveResult> ReceiveAsync();
    [NullableContextAttribute("0")]
public ValueTask`1<UdpReceiveResult> ReceiveAsync(CancellationToken cancellationToken);
    public int Send(Byte[] dgram, int bytes);
    public int Send(Byte[] dgram, int bytes, IPEndPoint endPoint);
    public int Send(Byte[] dgram, int bytes, string hostname, int port);
    [NullableContextAttribute("0")]
public int Send(ReadOnlySpan`1<byte> datagram);
    [NullableContextAttribute("0")]
public int Send(ReadOnlySpan`1<byte> datagram, IPEndPoint endPoint);
    [NullableContextAttribute("0")]
public int Send(ReadOnlySpan`1<byte> datagram, string hostname, int port);
    public Task`1<int> SendAsync(Byte[] datagram, int bytes);
    public Task`1<int> SendAsync(Byte[] datagram, int bytes, IPEndPoint endPoint);
    public Task`1<int> SendAsync(Byte[] datagram, int bytes, string hostname, int port);
    [NullableContextAttribute("0")]
public ValueTask`1<int> SendAsync(ReadOnlyMemory`1<byte> datagram, IPEndPoint endPoint, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<int> SendAsync(ReadOnlyMemory`1<byte> datagram, string hostname, int port, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public ValueTask`1<int> SendAsync(ReadOnlyMemory`1<byte> datagram, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.UdpReceiveResult : ValueType {
    private object _dummy;
    private int _dummyPrimitive;
    public Byte[] Buffer { get; }
    public IPEndPoint RemoteEndPoint { get; }
    public UdpReceiveResult(Byte[] buffer, IPEndPoint remoteEndPoint);
    public Byte[] get_Buffer();
    public IPEndPoint get_RemoteEndPoint();
    public sealed virtual bool Equals(UdpReceiveResult other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(UdpReceiveResult left, UdpReceiveResult right);
    public static bool op_Inequality(UdpReceiveResult left, UdpReceiveResult right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Sockets.UnixDomainSocketEndPoint : EndPoint {
    public AddressFamily AddressFamily { get; }
    public UnixDomainSocketEndPoint(string path);
    public virtual AddressFamily get_AddressFamily();
    public virtual EndPoint Create(SocketAddress socketAddress);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual SocketAddress Serialize();
    public virtual string ToString();
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Arg_InvalidHandle { get; }
    internal static string net_invalidversion { get; }
    internal static string net_noseek { get; }
    internal static string net_invasync { get; }
    internal static string net_io_timeout_use_gt_zero { get; }
    internal static string net_notconnected { get; }
    internal static string net_notstream { get; }
    internal static string net_stopped { get; }
    internal static string net_udpconnected { get; }
    internal static string net_readonlystream { get; }
    internal static string net_writeonlystream { get; }
    internal static string net_InvalidAddressFamily { get; }
    internal static string net_InvalidEndPointAddressFamily { get; }
    internal static string net_InvalidSocketAddressSize { get; }
    internal static string net_invalidAddressList { get; }
    internal static string net_completed_result { get; }
    internal static string net_protocol_invalid_family { get; }
    internal static string net_protocol_invalid_multicast_family { get; }
    internal static string net_sockets_zerolist { get; }
    internal static string net_sockets_blocking { get; }
    internal static string net_sockets_useblocking { get; }
    internal static string net_sockets_select { get; }
    internal static string net_sockets_toolarge_select { get; }
    internal static string net_sockets_empty_select { get; }
    internal static string net_sockets_mustbind { get; }
    internal static string net_sockets_mustlisten { get; }
    internal static string net_sockets_mustnotlisten { get; }
    internal static string net_sockets_mustnotbebound { get; }
    internal static string net_sockets_namedmustnotbebound { get; }
    internal static string net_sockets_invalid_ipaddress_length { get; }
    internal static string net_sockets_invalid_optionValue { get; }
    internal static string net_sockets_invalid_optionValue_all { get; }
    internal static string net_sockets_invalid_dnsendpoint { get; }
    internal static string net_sockets_disconnectedConnect { get; }
    internal static string net_sockets_disconnectedAccept { get; }
    internal static string net_tcplistener_mustbestopped { get; }
    internal static string net_socketopinprogress { get; }
    internal static string net_buffercounttoosmall { get; }
    internal static string net_multibuffernotsupported { get; }
    internal static string net_ambiguousbuffers { get; }
    internal static string net_io_writefailure { get; }
    internal static string net_io_readfailure { get; }
    internal static string net_io_invalidasyncresult { get; }
    internal static string net_io_invalidendcall { get; }
    internal static string ArgumentOutOfRange_Bounds_Lower_Upper_Named { get; }
    internal static string net_sockets_connect_multiconnect_notsupported { get; }
    internal static string net_sockets_dualmode_receivefrom_notsupported { get; }
    internal static string net_sockets_accept_receive_notsupported { get; }
    internal static string net_sockets_duplicateandclose_notsupported { get; }
    internal static string net_sockets_transmitfileoptions_notsupported { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string ArgumentOutOfRange_PathLengthInvalid { get; }
    internal static string net_io_readwritefailure { get; }
    internal static string PlatformNotSupported_AcceptSocket { get; }
    internal static string PlatformNotSupported_IOControl { get; }
    internal static string PlatformNotSupported_IPProtectionLevel { get; }
    internal static string InvalidOperation_BufferNotExplicitArray { get; }
    internal static string InvalidOperation_IncorrectToken { get; }
    internal static string net_sockets_sendpackelement_FileStreamMustBeAsync { get; }
    internal static string net_sockets_valuetaskmisuse { get; }
    internal static string net_sockets_invalid_socketinformation { get; }
    internal static string net_sockets_asyncoperations_notallowed { get; }
    internal static string InvalidNullArgument { get; }
    internal static string SystemNetSockets_PlatformNotSupported { get; }
    internal static string net_sockets_handle_already_used { get; }
    internal static string net_sockets_address_small { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Arg_InvalidHandle();
    internal static string get_net_invalidversion();
    internal static string get_net_noseek();
    internal static string get_net_invasync();
    internal static string get_net_io_timeout_use_gt_zero();
    internal static string get_net_notconnected();
    internal static string get_net_notstream();
    internal static string get_net_stopped();
    internal static string get_net_udpconnected();
    internal static string get_net_readonlystream();
    internal static string get_net_writeonlystream();
    internal static string get_net_InvalidAddressFamily();
    internal static string get_net_InvalidEndPointAddressFamily();
    internal static string get_net_InvalidSocketAddressSize();
    internal static string get_net_invalidAddressList();
    internal static string get_net_completed_result();
    internal static string get_net_protocol_invalid_family();
    internal static string get_net_protocol_invalid_multicast_family();
    internal static string get_net_sockets_zerolist();
    internal static string get_net_sockets_blocking();
    internal static string get_net_sockets_useblocking();
    internal static string get_net_sockets_select();
    internal static string get_net_sockets_toolarge_select();
    internal static string get_net_sockets_empty_select();
    internal static string get_net_sockets_mustbind();
    internal static string get_net_sockets_mustlisten();
    internal static string get_net_sockets_mustnotlisten();
    internal static string get_net_sockets_mustnotbebound();
    internal static string get_net_sockets_namedmustnotbebound();
    internal static string get_net_sockets_invalid_ipaddress_length();
    internal static string get_net_sockets_invalid_optionValue();
    internal static string get_net_sockets_invalid_optionValue_all();
    internal static string get_net_sockets_invalid_dnsendpoint();
    internal static string get_net_sockets_disconnectedConnect();
    internal static string get_net_sockets_disconnectedAccept();
    internal static string get_net_tcplistener_mustbestopped();
    internal static string get_net_socketopinprogress();
    internal static string get_net_buffercounttoosmall();
    internal static string get_net_multibuffernotsupported();
    internal static string get_net_ambiguousbuffers();
    internal static string get_net_io_writefailure();
    internal static string get_net_io_readfailure();
    internal static string get_net_io_invalidasyncresult();
    internal static string get_net_io_invalidendcall();
    internal static string get_ArgumentOutOfRange_Bounds_Lower_Upper_Named();
    internal static string get_net_sockets_connect_multiconnect_notsupported();
    internal static string get_net_sockets_dualmode_receivefrom_notsupported();
    internal static string get_net_sockets_accept_receive_notsupported();
    internal static string get_net_sockets_duplicateandclose_notsupported();
    internal static string get_net_sockets_transmitfileoptions_notsupported();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_ArgumentOutOfRange_PathLengthInvalid();
    internal static string get_net_io_readwritefailure();
    internal static string get_PlatformNotSupported_AcceptSocket();
    internal static string get_PlatformNotSupported_IOControl();
    internal static string get_PlatformNotSupported_IPProtectionLevel();
    internal static string get_InvalidOperation_BufferNotExplicitArray();
    internal static string get_InvalidOperation_IncorrectToken();
    internal static string get_net_sockets_sendpackelement_FileStreamMustBeAsync();
    internal static string get_net_sockets_valuetaskmisuse();
    internal static string get_net_sockets_invalid_socketinformation();
    internal static string get_net_sockets_asyncoperations_notallowed();
    internal static string get_InvalidNullArgument();
    internal static string get_SystemNetSockets_PlatformNotSupported();
    internal static string get_net_sockets_handle_already_used();
    internal static string get_net_sockets_address_small();
}
