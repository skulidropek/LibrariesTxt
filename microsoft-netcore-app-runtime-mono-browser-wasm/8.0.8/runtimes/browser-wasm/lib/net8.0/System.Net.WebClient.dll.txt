internal static class FxResources.System.Net.WebClient.SR : object {
}
public class System.Net.DownloadDataCompletedEventArgs : AsyncCompletedEventArgs {
    public Byte[] Result { get; }
    public Byte[] get_Result();
}
public class System.Net.DownloadDataCompletedEventHandler : MulticastDelegate {
    public DownloadDataCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DownloadDataCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DownloadDataCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.DownloadProgressChangedEventArgs : ProgressChangedEventArgs {
    public long BytesReceived { get; }
    public long TotalBytesToReceive { get; }
    public long get_BytesReceived();
    public long get_TotalBytesToReceive();
}
public class System.Net.DownloadProgressChangedEventHandler : MulticastDelegate {
    public DownloadProgressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DownloadProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DownloadProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.DownloadStringCompletedEventArgs : AsyncCompletedEventArgs {
    public string Result { get; }
    public string get_Result();
}
public class System.Net.DownloadStringCompletedEventHandler : MulticastDelegate {
    public DownloadStringCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DownloadStringCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DownloadStringCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.OpenReadCompletedEventArgs : AsyncCompletedEventArgs {
    public Stream Result { get; }
    public Stream get_Result();
}
public class System.Net.OpenReadCompletedEventHandler : MulticastDelegate {
    public OpenReadCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OpenReadCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OpenReadCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.OpenWriteCompletedEventArgs : AsyncCompletedEventArgs {
    public Stream Result { get; }
    public Stream get_Result();
}
public class System.Net.OpenWriteCompletedEventHandler : MulticastDelegate {
    public OpenWriteCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OpenWriteCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OpenWriteCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.UploadDataCompletedEventArgs : AsyncCompletedEventArgs {
    public Byte[] Result { get; }
    public Byte[] get_Result();
}
public class System.Net.UploadDataCompletedEventHandler : MulticastDelegate {
    public UploadDataCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UploadDataCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UploadDataCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.UploadFileCompletedEventArgs : AsyncCompletedEventArgs {
    public Byte[] Result { get; }
    public Byte[] get_Result();
}
public class System.Net.UploadFileCompletedEventHandler : MulticastDelegate {
    public UploadFileCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UploadFileCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UploadFileCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.UploadProgressChangedEventArgs : ProgressChangedEventArgs {
    public long BytesReceived { get; }
    public long BytesSent { get; }
    public long TotalBytesToReceive { get; }
    public long TotalBytesToSend { get; }
    public long get_BytesReceived();
    public long get_BytesSent();
    public long get_TotalBytesToReceive();
    public long get_TotalBytesToSend();
}
public class System.Net.UploadProgressChangedEventHandler : MulticastDelegate {
    public UploadProgressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UploadProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UploadProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.UploadStringCompletedEventArgs : AsyncCompletedEventArgs {
    public string Result { get; }
    public string get_Result();
}
public class System.Net.UploadStringCompletedEventHandler : MulticastDelegate {
    public UploadStringCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UploadStringCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UploadStringCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.UploadValuesCompletedEventArgs : AsyncCompletedEventArgs {
    public Byte[] Result { get; }
    public Byte[] get_Result();
}
public class System.Net.UploadValuesCompletedEventHandler : MulticastDelegate {
    public UploadValuesCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UploadValuesCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UploadValuesCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.WebClient : Component {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
public bool AllowReadStreamBuffering { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
public bool AllowWriteStreamBuffering { get; public set; }
    public string BaseAddress { get; public set; }
    [NullableAttribute("2")]
public RequestCachePolicy CachePolicy { get; public set; }
    [NullableAttribute("2")]
public ICredentials Credentials { get; public set; }
    public Encoding Encoding { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public bool IsBusy { get; }
    [NullableAttribute("2")]
public IWebProxy Proxy { get; public set; }
    public NameValueCollection QueryString { get; public set; }
    [NullableAttribute("2")]
public WebHeaderCollection ResponseHeaders { get; }
    public bool UseDefaultCredentials { get; public set; }
    public bool get_AllowReadStreamBuffering();
    public void set_AllowReadStreamBuffering(bool value);
    public bool get_AllowWriteStreamBuffering();
    public void set_AllowWriteStreamBuffering(bool value);
    public string get_BaseAddress();
    public void set_BaseAddress(string value);
    [NullableContextAttribute("2")]
public RequestCachePolicy get_CachePolicy();
    [NullableContextAttribute("2")]
public void set_CachePolicy(RequestCachePolicy value);
    [NullableContextAttribute("2")]
public ICredentials get_Credentials();
    [NullableContextAttribute("2")]
public void set_Credentials(ICredentials value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public WebHeaderCollection get_Headers();
    public void set_Headers(WebHeaderCollection value);
    public bool get_IsBusy();
    [NullableContextAttribute("2")]
public IWebProxy get_Proxy();
    [NullableContextAttribute("2")]
public void set_Proxy(IWebProxy value);
    public NameValueCollection get_QueryString();
    public void set_QueryString(NameValueCollection value);
    [NullableContextAttribute("2")]
public WebHeaderCollection get_ResponseHeaders();
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    [NullableContextAttribute("2")]
public void add_DownloadDataCompleted(DownloadDataCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DownloadDataCompleted(DownloadDataCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void add_DownloadFileCompleted(AsyncCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DownloadFileCompleted(AsyncCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void add_DownloadProgressChanged(DownloadProgressChangedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DownloadProgressChanged(DownloadProgressChangedEventHandler value);
    [NullableContextAttribute("2")]
public void add_DownloadStringCompleted(DownloadStringCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_DownloadStringCompleted(DownloadStringCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void add_OpenReadCompleted(OpenReadCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_OpenReadCompleted(OpenReadCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void add_OpenWriteCompleted(OpenWriteCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_OpenWriteCompleted(OpenWriteCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void add_UploadDataCompleted(UploadDataCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_UploadDataCompleted(UploadDataCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void add_UploadFileCompleted(UploadFileCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_UploadFileCompleted(UploadFileCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void add_UploadProgressChanged(UploadProgressChangedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_UploadProgressChanged(UploadProgressChangedEventHandler value);
    [NullableContextAttribute("2")]
public void add_UploadStringCompleted(UploadStringCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_UploadStringCompleted(UploadStringCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void add_UploadValuesCompleted(UploadValuesCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_UploadValuesCompleted(UploadValuesCompletedEventHandler value);
    [NullableContextAttribute("2")]
public void add_WriteStreamClosed(WriteStreamClosedEventHandler value);
    [NullableContextAttribute("2")]
public void remove_WriteStreamClosed(WriteStreamClosedEventHandler value);
    public void CancelAsync();
    public Byte[] DownloadData(string address);
    public Byte[] DownloadData(Uri address);
    public void DownloadDataAsync(Uri address);
    public void DownloadDataAsync(Uri address, object userToken);
    public Task`1<Byte[]> DownloadDataTaskAsync(string address);
    public Task`1<Byte[]> DownloadDataTaskAsync(Uri address);
    public void DownloadFile(string address, string fileName);
    public void DownloadFile(Uri address, string fileName);
    public void DownloadFileAsync(Uri address, string fileName);
    public void DownloadFileAsync(Uri address, string fileName, object userToken);
    public Task DownloadFileTaskAsync(string address, string fileName);
    public Task DownloadFileTaskAsync(Uri address, string fileName);
    public string DownloadString(string address);
    public string DownloadString(Uri address);
    public void DownloadStringAsync(Uri address);
    public void DownloadStringAsync(Uri address, object userToken);
    public Task`1<string> DownloadStringTaskAsync(string address);
    public Task`1<string> DownloadStringTaskAsync(Uri address);
    protected virtual WebRequest GetWebRequest(Uri address);
    protected virtual WebResponse GetWebResponse(WebRequest request);
    protected virtual WebResponse GetWebResponse(WebRequest request, IAsyncResult result);
    protected virtual void OnDownloadDataCompleted(DownloadDataCompletedEventArgs e);
    protected virtual void OnDownloadFileCompleted(AsyncCompletedEventArgs e);
    protected virtual void OnDownloadProgressChanged(DownloadProgressChangedEventArgs e);
    protected virtual void OnDownloadStringCompleted(DownloadStringCompletedEventArgs e);
    protected virtual void OnOpenReadCompleted(OpenReadCompletedEventArgs e);
    protected virtual void OnOpenWriteCompleted(OpenWriteCompletedEventArgs e);
    protected virtual void OnUploadDataCompleted(UploadDataCompletedEventArgs e);
    protected virtual void OnUploadFileCompleted(UploadFileCompletedEventArgs e);
    protected virtual void OnUploadProgressChanged(UploadProgressChangedEventArgs e);
    protected virtual void OnUploadStringCompleted(UploadStringCompletedEventArgs e);
    protected virtual void OnUploadValuesCompleted(UploadValuesCompletedEventArgs e);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
protected virtual void OnWriteStreamClosed(WriteStreamClosedEventArgs e);
    public Stream OpenRead(string address);
    public Stream OpenRead(Uri address);
    public void OpenReadAsync(Uri address);
    public void OpenReadAsync(Uri address, object userToken);
    public Task`1<Stream> OpenReadTaskAsync(string address);
    public Task`1<Stream> OpenReadTaskAsync(Uri address);
    public Stream OpenWrite(string address);
    public Stream OpenWrite(string address, string method);
    public Stream OpenWrite(Uri address);
    public Stream OpenWrite(Uri address, string method);
    public void OpenWriteAsync(Uri address);
    public void OpenWriteAsync(Uri address, string method);
    [NullableContextAttribute("2")]
public void OpenWriteAsync(Uri address, string method, object userToken);
    public Task`1<Stream> OpenWriteTaskAsync(string address);
    public Task`1<Stream> OpenWriteTaskAsync(string address, string method);
    public Task`1<Stream> OpenWriteTaskAsync(Uri address);
    public Task`1<Stream> OpenWriteTaskAsync(Uri address, string method);
    public Byte[] UploadData(string address, Byte[] data);
    public Byte[] UploadData(string address, string method, Byte[] data);
    public Byte[] UploadData(Uri address, Byte[] data);
    public Byte[] UploadData(Uri address, string method, Byte[] data);
    public void UploadDataAsync(Uri address, Byte[] data);
    public void UploadDataAsync(Uri address, string method, Byte[] data);
    public void UploadDataAsync(Uri address, string method, Byte[] data, object userToken);
    public Task`1<Byte[]> UploadDataTaskAsync(string address, Byte[] data);
    public Task`1<Byte[]> UploadDataTaskAsync(string address, string method, Byte[] data);
    public Task`1<Byte[]> UploadDataTaskAsync(Uri address, Byte[] data);
    public Task`1<Byte[]> UploadDataTaskAsync(Uri address, string method, Byte[] data);
    public Byte[] UploadFile(string address, string fileName);
    public Byte[] UploadFile(string address, string method, string fileName);
    public Byte[] UploadFile(Uri address, string fileName);
    public Byte[] UploadFile(Uri address, string method, string fileName);
    public void UploadFileAsync(Uri address, string fileName);
    public void UploadFileAsync(Uri address, string method, string fileName);
    public void UploadFileAsync(Uri address, string method, string fileName, object userToken);
    public Task`1<Byte[]> UploadFileTaskAsync(string address, string fileName);
    public Task`1<Byte[]> UploadFileTaskAsync(string address, string method, string fileName);
    public Task`1<Byte[]> UploadFileTaskAsync(Uri address, string fileName);
    public Task`1<Byte[]> UploadFileTaskAsync(Uri address, string method, string fileName);
    public string UploadString(string address, string data);
    public string UploadString(string address, string method, string data);
    public string UploadString(Uri address, string data);
    public string UploadString(Uri address, string method, string data);
    public void UploadStringAsync(Uri address, string data);
    public void UploadStringAsync(Uri address, string method, string data);
    public void UploadStringAsync(Uri address, string method, string data, object userToken);
    public Task`1<string> UploadStringTaskAsync(string address, string data);
    public Task`1<string> UploadStringTaskAsync(string address, string method, string data);
    public Task`1<string> UploadStringTaskAsync(Uri address, string data);
    public Task`1<string> UploadStringTaskAsync(Uri address, string method, string data);
    public Byte[] UploadValues(string address, NameValueCollection data);
    public Byte[] UploadValues(string address, string method, NameValueCollection data);
    public Byte[] UploadValues(Uri address, NameValueCollection data);
    public Byte[] UploadValues(Uri address, string method, NameValueCollection data);
    public void UploadValuesAsync(Uri address, NameValueCollection data);
    public void UploadValuesAsync(Uri address, string method, NameValueCollection data);
    public void UploadValuesAsync(Uri address, string method, NameValueCollection data, object userToken);
    public Task`1<Byte[]> UploadValuesTaskAsync(string address, NameValueCollection data);
    public Task`1<Byte[]> UploadValuesTaskAsync(string address, string method, NameValueCollection data);
    public Task`1<Byte[]> UploadValuesTaskAsync(Uri address, NameValueCollection data);
    public Task`1<Byte[]> UploadValuesTaskAsync(Uri address, string method, NameValueCollection data);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[EditorBrowsableAttribute("1")]
public class System.Net.WriteStreamClosedEventArgs : EventArgs {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
public Exception Error { get; }
    public Exception get_Error();
}
[EditorBrowsableAttribute("1")]
public class System.Net.WriteStreamClosedEventHandler : MulticastDelegate {
    public WriteStreamClosedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WriteStreamClosedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WriteStreamClosedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Obsoletions : object {
    internal static string SharedUrlFormat;
    internal static string SystemTextEncodingUTF7Message;
    internal static string SystemTextEncodingUTF7DiagId;
    internal static string PrincipalPermissionAttributeMessage;
    internal static string PrincipalPermissionAttributeDiagId;
    internal static string CodeAccessSecurityMessage;
    internal static string CodeAccessSecurityDiagId;
    internal static string ConstrainedExecutionRegionMessage;
    internal static string ConstrainedExecutionRegionDiagId;
    internal static string GlobalAssemblyCacheMessage;
    internal static string GlobalAssemblyCacheDiagId;
    internal static string ThreadAbortMessage;
    internal static string ThreadResetAbortMessage;
    internal static string ThreadAbortDiagId;
    internal static string DefaultCryptoAlgorithmsMessage;
    internal static string DefaultCryptoAlgorithmsDiagId;
    internal static string CreatePdbGeneratorMessage;
    internal static string CreatePdbGeneratorDiagId;
    internal static string AuthenticationManagerMessage;
    internal static string AuthenticationManagerDiagId;
    internal static string RemotingApisMessage;
    internal static string RemotingApisDiagId;
    internal static string BinaryFormatterMessage;
    internal static string BinaryFormatterDiagId;
    internal static string CodeBaseMessage;
    internal static string CodeBaseDiagId;
    internal static string EscapeUriStringMessage;
    internal static string EscapeUriStringDiagId;
    internal static string WebRequestMessage;
    internal static string WebRequestDiagId;
    internal static string DisablePrivateReflectionAttributeMessage;
    internal static string DisablePrivateReflectionAttributeDiagId;
    internal static string GetContextInfoMessage;
    internal static string GetContextInfoDiagId;
    internal static string StrongNameKeyPairMessage;
    internal static string StrongNameKeyPairDiagId;
    internal static string ReflectionOnlyLoadingMessage;
    internal static string ReflectionOnlyLoadingDiagId;
    internal static string RuntimeEnvironmentMessage;
    internal static string RuntimeEnvironmentDiagId;
    internal static string JsonSerializerOptionsIgnoreNullValuesMessage;
    internal static string JsonSerializerOptionsIgnoreNullValuesDiagId;
    internal static string DerivedCryptographicTypesMessage;
    internal static string DerivedCryptographicTypesDiagId;
    internal static string RijndaelMessage;
    internal static string RijndaelDiagId;
    internal static string RNGCryptoServiceProviderMessage;
    internal static string RNGCryptoServiceProviderDiagId;
    internal static string AppDomainCreateUnloadMessage;
    internal static string AppDomainCreateUnloadDiagId;
    internal static string SuppressIldasmAttributeMessage;
    internal static string SuppressIldasmAttributeDiagId;
    internal static string X509CertificateImmutableMessage;
    internal static string X509CertificateImmutableDiagId;
    internal static string PublicKeyPropertyMessage;
    internal static string PublicKeyPropertyDiagId;
    internal static string X509CertificatePrivateKeyMessage;
    internal static string X509CertificatePrivateKeyDiagId;
    internal static string ProduceLegacyHmacValuesMessage;
    internal static string ProduceLegacyHmacValuesDiagId;
    internal static string UseManagedSha1Message;
    internal static string UseManagedSha1DiagId;
    internal static string CryptoConfigEncodeOIDMessage;
    internal static string CryptoConfigEncodeOIDDiagId;
    internal static string CorruptedStateRecoveryMessage;
    internal static string CorruptedStateRecoveryDiagId;
    internal static string Rfc2898CryptDeriveKeyMessage;
    internal static string Rfc2898CryptDeriveKeyDiagId;
    internal static string CmsSignerCspParamsCtorMessage;
    internal static string CmsSignerCspParamsCtorDiagId;
    internal static string SignerInfoCounterSigMessage;
    internal static string SignerInfoCounterSigDiagId;
    internal static string RegexCompileToAssemblyMessage;
    internal static string RegexCompileToAssemblyDiagId;
    internal static string AssemblyNameMembersMessage;
    internal static string AssemblyNameMembersDiagId;
    internal static string SystemDataSerializationFormatBinaryMessage;
    internal static string SystemDataSerializationFormatBinaryDiagId;
    internal static string TlsVersion10and11Message;
    internal static string TlsVersion10and11DiagId;
    internal static string EncryptionPolicyMessage;
    internal static string EncryptionPolicyDiagId;
    internal static string Rfc2898OutdatedCtorMessage;
    internal static string Rfc2898OutdatedCtorDiagId;
    internal static string EccXmlExportImportMessage;
    internal static string EccXmlExportImportDiagId;
    internal static string EcDhPublicKeyBlobMessage;
    internal static string EcDhPublicKeyBlobDiagId;
    internal static string AssemblyNameCodeBaseMessage;
    internal static string AssemblyNameCodeBaseDiagId;
    internal static string CryptoStringFactoryMessage;
    internal static string CryptoStringFactoryDiagId;
    internal static string ControlledExecutionRunMessage;
    internal static string ControlledExecutionRunDiagId;
    internal static string XmlSecureResolverMessage;
    internal static string XmlSecureResolverDiagId;
    internal static string RsaEncryptDecryptValueMessage;
    internal static string RsaEncryptDecryptDiagId;
    internal static string JsonSerializerOptionsAddContextMessage;
    internal static string JsonSerializerOptionsAddContextDiagId;
    internal static string LegacyFormatterMessage;
    internal static string LegacyFormatterDiagId;
    internal static string LegacyFormatterImplMessage;
    internal static string LegacyFormatterImplDiagId;
    internal static string RegexExtensibilityImplMessage;
    internal static string RegexExtensibilityDiagId;
    internal static string AesGcmTagConstructorMessage;
    internal static string AesGcmTagConstructorDiagId;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_webclient { get; }
    internal static string net_webclient_ContentType { get; }
    internal static string net_webclient_Multipart { get; }
    internal static string net_webclient_no_concurrent_io_allowed { get; }
    internal static string net_webclient_invalid_baseaddress { get; }
    internal static string net_webstatus_MessageLengthLimitExceeded { get; }
    internal static string SystemNetWebClient_PlatformNotSupported { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_webclient();
    internal static string get_net_webclient_ContentType();
    internal static string get_net_webclient_Multipart();
    internal static string get_net_webclient_no_concurrent_io_allowed();
    internal static string get_net_webclient_invalid_baseaddress();
    internal static string get_net_webstatus_MessageLengthLimitExceeded();
    internal static string get_SystemNetWebClient_PlatformNotSupported();
}
