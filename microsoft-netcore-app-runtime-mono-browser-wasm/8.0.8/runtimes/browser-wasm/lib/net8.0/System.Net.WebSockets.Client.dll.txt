internal static class FxResources.System.Net.WebSockets.Client.SR : object {
}
internal static class System.Net.WebSockets.BrowserInterop : object {
    [ThreadStaticAttribute]
private static JSFunctionBinding __signature_WebSocketGetState_1057832756;
    [ThreadStaticAttribute]
private static JSFunctionBinding __signature_WebSocketCreate_1682804011;
    [ThreadStaticAttribute]
private static JSFunctionBinding __signature_WebSocketOpen_1494464773;
    [ThreadStaticAttribute]
private static JSFunctionBinding __signature_WebSocketSend_1236368445;
    [ThreadStaticAttribute]
private static JSFunctionBinding __signature_WebSocketReceive_84757485;
    [ThreadStaticAttribute]
private static JSFunctionBinding __signature_WebSocketClose_1864921350;
    [ThreadStaticAttribute]
private static JSFunctionBinding __signature_WebSocketAbort_1158620782;
    public static string GetProtocol(JSObject webSocket);
    public static int GetReadyState(JSObject webSocket);
    [JSImportAttribute("INTERNAL.ws_get_state")]
[DebuggerNonUserCodeAttribute]
public static int WebSocketGetState(JSObject webSocket);
    [JSImportAttribute("INTERNAL.ws_wasm_create")]
[DebuggerNonUserCodeAttribute]
public static JSObject WebSocketCreate(string uri, String[] subProtocols, IntPtr responseStatusPtr, Action`2<int, string> onClosed);
    public static JSObject UnsafeCreate(string uri, String[] subProtocols, MemoryHandle responseHandle, Action`2<int, string> onClosed);
    [JSImportAttribute("INTERNAL.ws_wasm_open")]
[DebuggerNonUserCodeAttribute]
public static Task WebSocketOpen(JSObject webSocket);
    [JSImportAttribute("INTERNAL.ws_wasm_send")]
[DebuggerNonUserCodeAttribute]
public static Task WebSocketSend(JSObject webSocket, IntPtr bufferPtr, int bufferLength, int messageType, bool endOfMessage);
    public static Task UnsafeSendSync(JSObject jsWs, ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage);
    [JSImportAttribute("INTERNAL.ws_wasm_receive")]
[DebuggerNonUserCodeAttribute]
public static Task WebSocketReceive(JSObject webSocket, IntPtr bufferPtr, int bufferLength);
    public static Task ReceiveUnsafeSync(JSObject jsWs, MemoryHandle pinBuffer, int length);
    [JSImportAttribute("INTERNAL.ws_wasm_close")]
[DebuggerNonUserCodeAttribute]
public static Task WebSocketClose(JSObject webSocket, int code, string reason, bool waitForCloseReceived);
    [JSImportAttribute("INTERNAL.ws_wasm_abort")]
[DebuggerNonUserCodeAttribute]
public static void WebSocketAbort(JSObject webSocket);
}
internal class System.Net.WebSockets.BrowserWebSocket : WebSocket {
    private Nullable`1<WebSocketCloseStatus> _closeStatus;
    private string _closeStatusDescription;
    private JSObject _innerWebSocket;
    private WebSocketState _state;
    private bool _disposed;
    private bool _aborted;
    private bool _closeReceived;
    private bool _closeSent;
    private Int32[] responseStatus;
    private Nullable`1<MemoryHandle> responseStatusHandle;
    public WebSocketState State { get; }
    private WebSocketState FastState { get; private set; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public string SubProtocol { get; }
    public virtual WebSocketState get_State();
    private WebSocketState get_FastState();
    private void set_FastState(WebSocketState value);
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public virtual string get_CloseStatusDescription();
    public virtual string get_SubProtocol();
    internal Task ConnectAsync(Uri uri, List`1<string> requestedSubProtocols, CancellationToken cancellationToken);
    public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual void Abort();
    public virtual void Dispose();
    private void ThrowIfDisposed();
    private static void DisposeCore(BrowserWebSocket self);
    private static void AbortCore(BrowserWebSocket self, WebSocketState currentState);
    private void CreateCore(Uri uri, List`1<string> requestedSubProtocols);
    [AsyncStateMachineAttribute("System.Net.WebSockets.BrowserWebSocket/<ConnectAsyncCore>d__32")]
private Task ConnectAsyncCore(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.BrowserWebSocket/<SendAsyncCore>d__33")]
private Task SendAsyncCore(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.BrowserWebSocket/<ReceiveAsyncCore>d__34")]
private Task`1<WebSocketReceiveResult> ReceiveAsyncCore(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    private static WebSocketReceiveResult ConvertResponse(BrowserWebSocket self);
    [AsyncStateMachineAttribute("System.Net.WebSockets.BrowserWebSocket/<CloseAsyncCore>d__36")]
private Task CloseAsyncCore(WebSocketCloseStatus closeStatus, string statusDescription, bool waitForCloseReceived, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.BrowserWebSocket/<CancelationHelper>d__37")]
private Task CancelationHelper(Task jsTask, CancellationToken cancellationToken, WebSocketState previousState);
    private static WebSocketState GetReadyState(BrowserWebSocket self);
    [CompilerGeneratedAttribute]
private void <CreateCore>b__31_0(int code, string reason);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.WebSockets.ClientWebSocket : WebSocket {
    private int _state;
    private WebSocketHandle _innerWebSocket;
    [CompilerGeneratedAttribute]
private ClientWebSocketOptions <Options>k__BackingField;
    public ClientWebSocketOptions Options { get; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    [NullableAttribute("2")]
public string CloseStatusDescription { get; }
    [NullableAttribute("2")]
public string SubProtocol { get; }
    public WebSocketState State { get; }
    public HttpStatusCode HttpStatusCode { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, IEnumerable`1<string>> HttpResponseHeaders { get; public set; }
    private WebSocket ConnectedWebSocket { get; }
    [CompilerGeneratedAttribute]
public ClientWebSocketOptions get_Options();
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    [NullableContextAttribute("2")]
public virtual string get_CloseStatusDescription();
    [NullableContextAttribute("2")]
public virtual string get_SubProtocol();
    public virtual WebSocketState get_State();
    public HttpStatusCode get_HttpStatusCode();
    public IReadOnlyDictionary`2<string, IEnumerable`1<string>> get_HttpResponseHeaders();
    public void set_HttpResponseHeaders(IReadOnlyDictionary`2<string, IEnumerable`1<string>> value);
    public Task ConnectAsync(Uri uri, CancellationToken cancellationToken);
    public Task ConnectAsync(Uri uri, HttpMessageInvoker invoker, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ClientWebSocket/<ConnectAsyncCore>d__21")]
private Task ConnectAsyncCore(Uri uri, HttpMessageInvoker invoker, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, WebSocketMessageFlags messageFlags, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<ValueWebSocketReceiveResult> ReceiveAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    private WebSocket get_ConnectedWebSocket();
    public virtual void Abort();
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.WebSockets.ClientWebSocketOptions : object {
    private bool _isReadOnly;
    private List`1<string> _requestedSubProtocols;
    [UnsupportedOSPlatformAttribute("browser")]
public bool UseDefaultCredentials { get; public set; }
    public Version HttpVersion { get; public set; }
    public HttpVersionPolicy HttpVersionPolicy { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public ICredentials Credentials { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public IWebProxy Proxy { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public X509CertificateCollection ClientCertificates { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public CookieContainer Cookies { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public bool CollectHttpResponseDetails { get; public set; }
    internal List`1<string> RequestedSubProtocols { get; }
    [UnsupportedOSPlatformAttribute("browser")]
public TimeSpan KeepAliveInterval { get; public set; }
    [NullableAttribute("2")]
[UnsupportedOSPlatformAttribute("browser")]
public WebSocketDeflateOptions DangerousDeflateOptions { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public void SetRequestHeader(string headerName, string headerValue);
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public Version get_HttpVersion();
    [UnsupportedOSPlatformAttribute("browser")]
public void set_HttpVersion(Version value);
    public HttpVersionPolicy get_HttpVersionPolicy();
    [UnsupportedOSPlatformAttribute("browser")]
public void set_HttpVersionPolicy(HttpVersionPolicy value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    public X509CertificateCollection get_ClientCertificates();
    public void set_ClientCertificates(X509CertificateCollection value);
    public RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    public void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public CookieContainer get_Cookies();
    public void set_Cookies(CookieContainer value);
    public bool get_CollectHttpResponseDetails();
    public void set_CollectHttpResponseDetails(bool value);
    public void AddSubProtocol(string subProtocol);
    internal List`1<string> get_RequestedSubProtocols();
    public TimeSpan get_KeepAliveInterval();
    public void set_KeepAliveInterval(TimeSpan value);
    [NullableContextAttribute("2")]
public WebSocketDeflateOptions get_DangerousDeflateOptions();
    [NullableContextAttribute("2")]
public void set_DangerousDeflateOptions(WebSocketDeflateOptions value);
    [UnsupportedOSPlatformAttribute("browser")]
public void SetBuffer(int receiveBufferSize, int sendBufferSize);
    [NullableContextAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public void SetBuffer(int receiveBufferSize, int sendBufferSize, ArraySegment`1<byte> buffer);
    internal void SetToReadOnly();
}
internal class System.Net.WebSockets.WebSocketHandle : object {
    private WebSocketState _state;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IEnumerable`1<string>> <HttpResponseHeaders>k__BackingField;
    [CompilerGeneratedAttribute]
private WebSocket <WebSocket>k__BackingField;
    public HttpStatusCode HttpStatusCode { get; }
    public IReadOnlyDictionary`2<string, IEnumerable`1<string>> HttpResponseHeaders { get; public set; }
    public WebSocket WebSocket { get; private set; }
    public WebSocketState State { get; }
    public HttpStatusCode get_HttpStatusCode();
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, IEnumerable`1<string>> get_HttpResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_HttpResponseHeaders(IReadOnlyDictionary`2<string, IEnumerable`1<string>> value);
    [CompilerGeneratedAttribute]
public WebSocket get_WebSocket();
    [CompilerGeneratedAttribute]
private void set_WebSocket(WebSocket value);
    public WebSocketState get_State();
    public static ClientWebSocketOptions CreateDefaultOptions();
    public void Dispose();
    public void Abort();
    public Task ConnectAsync(Uri uri, HttpMessageInvoker _, CancellationToken cancellationToken, ClientWebSocketOptions options);
}
internal static class System.Net.WebSockets.WebSocketValidate : object {
    private static SearchValues`1<char> s_validSubprotocolChars;
    private static WebSocketValidate();
    internal static void ValidateSubprotocol(string subProtocol);
    internal static void ValidateCloseStatus(WebSocketCloseStatus closeStatus, string statusDescription);
    internal static void ValidateArraySegment(ArraySegment`1<byte> arraySegment, string parameterName);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_webstatus_ConnectFailure { get; }
    internal static string net_uri_NotAbsolute { get; }
    internal static string net_WebSockets_InvalidState { get; }
    internal static string net_WebSockets_Argument_InvalidMessageType { get; }
    internal static string net_WebSockets_InvalidCharInProtocolString { get; }
    internal static string net_WebSockets_ReasonNotNull { get; }
    internal static string net_WebSockets_InvalidCloseStatusCode { get; }
    internal static string net_WebSockets_InvalidCloseStatusDescription { get; }
    internal static string net_WebSockets_Scheme { get; }
    internal static string net_WebSockets_AlreadyStarted { get; }
    internal static string net_WebSockets_NotConnected { get; }
    internal static string net_WebSockets_NoDuplicateProtocol { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_webstatus_ConnectFailure();
    internal static string get_net_uri_NotAbsolute();
    internal static string get_net_WebSockets_InvalidState();
    internal static string get_net_WebSockets_Argument_InvalidMessageType();
    internal static string get_net_WebSockets_InvalidCharInProtocolString();
    internal static string get_net_WebSockets_ReasonNotNull();
    internal static string get_net_WebSockets_InvalidCloseStatusCode();
    internal static string get_net_WebSockets_InvalidCloseStatusDescription();
    internal static string get_net_WebSockets_Scheme();
    internal static string get_net_WebSockets_AlreadyStarted();
    internal static string get_net_WebSockets_NotConnected();
    internal static string get_net_WebSockets_NoDuplicateProtocol();
}
