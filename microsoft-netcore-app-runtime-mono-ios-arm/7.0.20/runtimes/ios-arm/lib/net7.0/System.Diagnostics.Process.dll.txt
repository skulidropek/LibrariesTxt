internal static class FxResources.System.Diagnostics.Process.SR : object {
}
internal static class Interop : object {
}
[ExtensionAttribute]
internal static class InteropErrorExtensions : object {
    [ExtensionAttribute]
public static ErrorInfo Info(Error error);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.Win32.SafeHandles.SafeProcessHandle : SafeHandleZeroOrMinusOneIsInvalid {
    internal static SafeProcessHandle InvalidHandle;
    private SafeWaitHandle _handle;
    private bool _releaseRef;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    internal int ProcessId { get; }
    internal SafeProcessHandle(IntPtr handle);
    public SafeProcessHandle(IntPtr existingHandle, bool ownsHandle);
    internal SafeProcessHandle(int processId, SafeWaitHandle handle);
    private static SafeProcessHandle();
    [CompilerGeneratedAttribute]
internal int get_ProcessId();
    protected virtual bool ReleaseHandle();
}
[DefaultMemberAttribute("Item")]
internal class System.Collections.Specialized.DictionaryWrapper : object {
    private Dictionary`2<string, string> _contents;
    public string Item { get; public set; }
    public object Item { get; public set; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<string> Values { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public bool IsFixedSize { get; }
    public object SyncRoot { get; }
    public DictionaryWrapper(Dictionary`2<string, string> contents);
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<string> get_Values();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void Add(string key, string value);
    public sealed virtual void Add(KeyValuePair`2<string, string> item);
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, string> item);
    public sealed virtual bool Contains(object key);
    public sealed virtual bool ContainsKey(string key);
    public bool ContainsValue(string value);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual bool Remove(string key);
    public sealed virtual void Remove(object key);
    public sealed virtual bool Remove(KeyValuePair`2<string, string> item);
    public sealed virtual bool TryGetValue(string key, String& value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, string>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class System.Collections.Specialized.StringDictionaryWrapper : StringDictionary {
    private DictionaryWrapper _contents;
    public string Item { get; public set; }
    public int Count { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public StringDictionaryWrapper(DictionaryWrapper contents);
    public virtual string get_Item(string key);
    public virtual void set_Item(string key, string value);
    public virtual int get_Count();
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual void Add(string key, string value);
    public virtual void Clear();
    public virtual bool ContainsKey(string key);
    public virtual bool ContainsValue(string value);
    public virtual void CopyTo(Array array, int index);
    [IteratorStateMachineAttribute("System.Collections.Specialized.StringDictionaryWrapper/<GetEnumerator>d__20")]
public virtual IEnumerator GetEnumerator();
    public virtual void Remove(string key);
}
internal class System.Diagnostics.AsyncStreamReader : object {
    private Stream _stream;
    private Decoder _decoder;
    private Byte[] _byteBuffer;
    private Char[] _charBuffer;
    private Action`1<string> _userCallBack;
    private CancellationTokenSource _cts;
    private Task _readToBufferTask;
    private Queue`1<string> _messageQueue;
    private StringBuilder _sb;
    private bool _bLastCarriageReturn;
    private bool _cancelOperation;
    private int _currentLinePos;
    internal Task EOF { get; }
    internal AsyncStreamReader(Stream stream, Action`1<string> callback, Encoding encoding);
    internal void BeginReadLine();
    internal void CancelOperation();
    [AsyncStateMachineAttribute("System.Diagnostics.AsyncStreamReader/<ReadBufferAsync>d__16")]
private Task ReadBufferAsync();
    private void MoveLinesFromStringBuilderToMessageQueue();
    private bool FlushMessageQueue(bool rethrowInNewThread);
    internal Task get_EOF();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Diagnostics.DataReceivedEventArgs : EventArgs {
    private string _data;
    public string Data { get; }
    internal DataReceivedEventArgs(string data);
    public string get_Data();
}
public class System.Diagnostics.DataReceivedEventHandler : MulticastDelegate {
    public DataReceivedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DataReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
public class System.Diagnostics.MonitoringDescriptionAttribute : DescriptionAttribute {
    private bool _replaced;
    public string Description { get; }
    public MonitoringDescriptionAttribute(string description);
    public virtual string get_Description();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Diagnostics.Process : Component {
    private bool _haveProcessId;
    private int _processId;
    private bool _haveProcessHandle;
    private SafeProcessHandle _processHandle;
    private bool _isRemoteMachine;
    private string _machineName;
    private ProcessInfo _processInfo;
    private ProcessThreadCollection _threads;
    private ProcessModuleCollection _modules;
    private bool _haveWorkingSetLimits;
    private IntPtr _minWorkingSet;
    private IntPtr _maxWorkingSet;
    private bool _haveProcessorAffinity;
    private IntPtr _processorAffinity;
    private bool _havePriorityClass;
    private ProcessPriorityClass _priorityClass;
    private ProcessStartInfo _startInfo;
    private bool _watchForExit;
    private bool _watchingForExit;
    private EventHandler _onExited;
    private bool _exited;
    private int _exitCode;
    private Nullable`1<DateTime> _startTime;
    private DateTime _exitTime;
    private bool _haveExitTime;
    private bool _priorityBoostEnabled;
    private bool _havePriorityBoostEnabled;
    private bool _raisedOnExited;
    private RegisteredWaitHandle _registeredWaitHandle;
    private WaitHandle _waitHandle;
    private StreamReader _standardOutput;
    private StreamWriter _standardInput;
    private StreamReader _standardError;
    private bool _disposed;
    private bool _standardInputAccessed;
    private StreamReadMode _outputStreamReadMode;
    private StreamReadMode _errorStreamReadMode;
    [CompilerGeneratedAttribute]
private DataReceivedEventHandler OutputDataReceived;
    [CompilerGeneratedAttribute]
private DataReceivedEventHandler ErrorDataReceived;
    internal AsyncStreamReader _output;
    internal AsyncStreamReader _error;
    internal bool _pendingOutputRead;
    internal bool _pendingErrorRead;
    private static int s_cachedSerializationSwitch;
    [CompilerGeneratedAttribute]
private ISynchronizeInvoke <SynchronizingObject>k__BackingField;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_initialized;
    private static object s_initializedGate;
    private static ReaderWriterLockSlim s_processStartLock;
    private Holder _waitStateHolder;
    public SafeProcessHandle SafeHandle { get; }
    public IntPtr Handle { get; }
    private bool Associated { get; }
    public int BasePriority { get; }
    public int ExitCode { get; }
    public bool HasExited { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public DateTime StartTime { get; }
    public DateTime ExitTime { get; }
    public int Id { get; }
    public string MachineName { get; }
    public IntPtr MaxWorkingSet { get; public set; }
    public IntPtr MinWorkingSet { get; public set; }
    public ProcessModuleCollection Modules { get; }
    public long NonpagedSystemMemorySize64 { get; }
    [ObsoleteAttribute("Process.NonpagedSystemMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.NonpagedSystemMemorySize64 instead.")]
public int NonpagedSystemMemorySize { get; }
    public long PagedMemorySize64 { get; }
    [ObsoleteAttribute("Process.PagedMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PagedMemorySize64 instead.")]
public int PagedMemorySize { get; }
    public long PagedSystemMemorySize64 { get; }
    [ObsoleteAttribute("Process.PagedSystemMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PagedSystemMemorySize64 instead.")]
public int PagedSystemMemorySize { get; }
    public long PeakPagedMemorySize64 { get; }
    [ObsoleteAttribute("Process.PeakPagedMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PeakPagedMemorySize64 instead.")]
public int PeakPagedMemorySize { get; }
    public long PeakWorkingSet64 { get; }
    [ObsoleteAttribute("Process.PeakWorkingSet has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PeakWorkingSet64 instead.")]
public int PeakWorkingSet { get; }
    public long PeakVirtualMemorySize64 { get; }
    [ObsoleteAttribute("Process.PeakVirtualMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PeakVirtualMemorySize64 instead.")]
public int PeakVirtualMemorySize { get; }
    public bool PriorityBoostEnabled { get; public set; }
    public ProcessPriorityClass PriorityClass { get; public set; }
    public long PrivateMemorySize64 { get; }
    [ObsoleteAttribute("Process.PrivateMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.PrivateMemorySize64 instead.")]
public int PrivateMemorySize { get; }
    [SupportedOSPlatformAttribute("windows")]
[SupportedOSPlatformAttribute("linux")]
public IntPtr ProcessorAffinity { get; public set; }
    public int SessionId { get; }
    public ProcessStartInfo StartInfo { get; public set; }
    public ProcessThreadCollection Threads { get; }
    public int HandleCount { get; }
    public long VirtualMemorySize64 { get; }
    [ObsoleteAttribute("Process.VirtualMemorySize has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.VirtualMemorySize64 instead.")]
public int VirtualMemorySize { get; }
    public bool EnableRaisingEvents { get; public set; }
    public StreamWriter StandardInput { get; }
    public StreamReader StandardOutput { get; }
    public StreamReader StandardError { get; }
    public long WorkingSet64 { get; }
    [ObsoleteAttribute("Process.WorkingSet has been deprecated because the type of the property can't represent all valid results. Use System.Diagnostics.Process.WorkingSet64 instead.")]
public int WorkingSet { get; }
    [NullableAttribute("2")]
public ISynchronizeInvoke SynchronizingObject { get; public set; }
    [NullableAttribute("2")]
public ProcessModule MainModule { get; }
    private DateTime ExitTimeCore { get; }
    unknown static bool PriorityBoostEnabledCore {private set; }
    private ProcessPriorityClass PriorityClassCore { get; private set; }
    public IntPtr MainWindowHandle { get; }
    public string MainWindowTitle { get; }
    public bool Responding { get; }
    public string ProcessName { get; }
    private static bool PlatformDoesNotSupportProcessStartAndKill { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan PrivilegedProcessorTime { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
internal static DateTime StartTimeCore { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan TotalProcessorTime { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan UserProcessorTime { get; }
    private static IntPtr ProcessorAffinityCore { get; private set; }
    private Process(string machineName, bool isRemoteMachine, int processId, ProcessInfo processInfo);
    private static Process();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_OutputDataReceived(DataReceivedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_OutputDataReceived(DataReceivedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_ErrorDataReceived(DataReceivedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_ErrorDataReceived(DataReceivedEventHandler value);
    public SafeProcessHandle get_SafeHandle();
    public IntPtr get_Handle();
    private bool get_Associated();
    public int get_BasePriority();
    public int get_ExitCode();
    public bool get_HasExited();
    public DateTime get_StartTime();
    public DateTime get_ExitTime();
    public int get_Id();
    public string get_MachineName();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public IntPtr get_MaxWorkingSet();
    [SupportedOSPlatformAttribute("freebsd")]
[SupportedOSPlatformAttribute("macos")]
[SupportedOSPlatformAttribute("maccatalyst")]
[SupportedOSPlatformAttribute("windows")]
public void set_MaxWorkingSet(IntPtr value);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public IntPtr get_MinWorkingSet();
    [SupportedOSPlatformAttribute("freebsd")]
[SupportedOSPlatformAttribute("macos")]
[SupportedOSPlatformAttribute("maccatalyst")]
[SupportedOSPlatformAttribute("windows")]
public void set_MinWorkingSet(IntPtr value);
    public ProcessModuleCollection get_Modules();
    public long get_NonpagedSystemMemorySize64();
    public int get_NonpagedSystemMemorySize();
    public long get_PagedMemorySize64();
    public int get_PagedMemorySize();
    public long get_PagedSystemMemorySize64();
    public int get_PagedSystemMemorySize();
    public long get_PeakPagedMemorySize64();
    public int get_PeakPagedMemorySize();
    public long get_PeakWorkingSet64();
    public int get_PeakWorkingSet();
    public long get_PeakVirtualMemorySize64();
    public int get_PeakVirtualMemorySize();
    public bool get_PriorityBoostEnabled();
    public void set_PriorityBoostEnabled(bool value);
    public ProcessPriorityClass get_PriorityClass();
    public void set_PriorityClass(ProcessPriorityClass value);
    public long get_PrivateMemorySize64();
    public int get_PrivateMemorySize();
    public IntPtr get_ProcessorAffinity();
    public void set_ProcessorAffinity(IntPtr value);
    public int get_SessionId();
    public ProcessStartInfo get_StartInfo();
    public void set_StartInfo(ProcessStartInfo value);
    public ProcessThreadCollection get_Threads();
    public int get_HandleCount();
    public long get_VirtualMemorySize64();
    public int get_VirtualMemorySize();
    public bool get_EnableRaisingEvents();
    public void set_EnableRaisingEvents(bool value);
    public StreamWriter get_StandardInput();
    public StreamReader get_StandardOutput();
    public StreamReader get_StandardError();
    public long get_WorkingSet64();
    public int get_WorkingSet();
    public void add_Exited(EventHandler value);
    public void remove_Exited(EventHandler value);
    private void CompletionCallback(object waitHandleContext, bool wasSignaled);
    protected virtual void Dispose(bool disposing);
    public bool CloseMainWindow();
    public bool WaitForInputIdle();
    public bool WaitForInputIdle(int milliseconds);
    public bool WaitForInputIdle(TimeSpan timeout);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ISynchronizeInvoke get_SynchronizingObject();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SynchronizingObject(ISynchronizeInvoke value);
    public void Close();
    private void ThrowIfExited(bool refresh);
    private void EnsureState(State state);
    private void EnsureWorkingSetLimits();
    private void SetWorkingSetLimits(Nullable`1<IntPtr> min, Nullable`1<IntPtr> max);
    public static Process GetProcessById(int processId, string machineName);
    public static Process GetProcessById(int processId);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process[] GetProcessesByName(string processName);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process[] GetProcesses();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process[] GetProcesses(string machineName);
    public static Process GetCurrentProcess();
    protected void OnExited();
    private void RaiseOnExited();
    public void Refresh();
    private SafeProcessHandle GetOrOpenProcessHandle();
    private void SetProcessHandle(SafeProcessHandle processHandle);
    private void SetProcessId(int processId);
    private void ConfigureAfterProcessIdSet();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public bool Start();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process Start(string fileName);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process Start(string fileName, string arguments);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process Start(string fileName, IEnumerable`1<string> arguments);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process Start(ProcessStartInfo startInfo);
    private void StopWatchingForExit();
    public virtual string ToString();
    public void WaitForExit();
    public bool WaitForExit(int milliseconds);
    public bool WaitForExit(TimeSpan timeout);
    private static int ToTimeoutMilliseconds(TimeSpan timeout);
    [AsyncStateMachineAttribute("System.Diagnostics.Process/<WaitForExitAsync>d__184")]
public Task WaitForExitAsync(CancellationToken cancellationToken);
    public void BeginOutputReadLine();
    public void BeginErrorReadLine();
    public void CancelOutputRead();
    public void CancelErrorRead();
    internal void OutputReadNotifyUser(string data);
    internal void ErrorReadNotifyUser(string data);
    private void CheckDisposed();
    private static Win32Exception CreateExceptionForErrorStartingProcess(string errorMessage, int errorCode, string fileName, string workingDirectory);
    public static void EnterDebugMode();
    public static void LeaveDebugMode();
    [CLSCompliantAttribute("False")]
[SupportedOSPlatformAttribute("windows")]
public static Process Start(string fileName, string userName, SecureString password, string domain);
    [CLSCompliantAttribute("False")]
[SupportedOSPlatformAttribute("windows")]
public static Process Start(string fileName, string arguments, string userName, SecureString password, string domain);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public void Kill();
    private bool GetHasExited(bool refresh);
    private void CloseCore();
    private void EnsureWatchingForExit();
    private bool WaitForExitCore(int milliseconds);
    [NullableContextAttribute("2")]
public ProcessModule get_MainModule();
    private void UpdateHasExited();
    private DateTime get_ExitTimeCore();
    private static void set_PriorityBoostEnabledCore(bool value);
    private ProcessPriorityClass get_PriorityClassCore();
    private void set_PriorityClassCore(ProcessPriorityClass value);
    private SafeProcessHandle GetProcessHandle();
    private bool StartCore(ProcessStartInfo startInfo);
    private bool ForkAndExecProcess(ProcessStartInfo startInfo, string resolvedFilename, String[] argv, String[] envp, string cwd, bool setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, bool usesTerminal, bool throwOnNoExec);
    private static String[] ParseArgv(ProcessStartInfo psi, string resolvedExe, bool ignoreArguments);
    private static String[] CreateEnvp(ProcessStartInfo psi);
    private static string ResolveExecutableForShellExecute(string filename, string workingDirectory);
    private static string ResolvePath(string filename);
    private static string FindProgramInPath(string program);
    private static bool IsExecutable(string fullPath);
    private static Stream OpenStream(int fd, PipeDirection direction);
    private static void ParseArgumentsIntoList(string arguments, List`1<string> results);
    private static string GetNextArgument(string arguments, Int32& i);
    private ProcessWaitState GetWaitState();
    private SafeWaitHandle GetSafeWaitHandle();
    private static ValueTuple`3<UInt32, UInt32, UInt32[]> GetUserAndGroupIds(ProcessStartInfo startInfo);
    private static ValueTuple`2<Nullable`1<UInt32>, Nullable`1<UInt32>> GetUserAndGroupIds(string userName);
    private static bool TryGetPasswd(string name, Byte* buf, int bufLen, Nullable`1& passwd);
    public IntPtr get_MainWindowHandle();
    public string get_MainWindowTitle();
    public bool get_Responding();
    private static bool WaitForInputIdleCore(int milliseconds);
    private static void EnsureInitialized();
    [UnmanagedCallersOnlyAttribute]
private static int OnSigChild(int reapAll, int configureConsole);
    public string get_ProcessName();
    private static bool get_PlatformDoesNotSupportProcessStartAndKill();
    internal static void ConfigureTerminalForChildProcesses(int increment, bool configureConsole);
    private static void SetDelayedSigChildConsoleConfigurationHandler();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public void Kill(bool entireProcessTree);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public static Process[] GetProcessesByName(string processName, string machineName);
    public TimeSpan get_PrivilegedProcessorTime();
    internal static DateTime get_StartTimeCore();
    public TimeSpan get_TotalProcessorTime();
    public TimeSpan get_UserProcessorTime();
    private static IntPtr get_ProcessorAffinityCore();
    private static void set_ProcessorAffinityCore(IntPtr value);
    private static void GetWorkingSetLimits(IntPtr& minWorkingSet, IntPtr& maxWorkingSet);
    private static void SetWorkingSetLimitsCore(Nullable`1<IntPtr> newMin, Nullable`1<IntPtr> newMax, IntPtr& resultingMin, IntPtr& resultingMax);
    private static string GetPathToOpenFile();
}
internal class System.Diagnostics.ProcessInfo : object {
    internal List`1<ThreadInfo> _threadInfoList;
    [CompilerGeneratedAttribute]
private int <BasePriority>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ProcessId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PoolPagedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PoolNonPagedBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <VirtualBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <VirtualBytesPeak>k__BackingField;
    [CompilerGeneratedAttribute]
private long <WorkingSetPeak>k__BackingField;
    [CompilerGeneratedAttribute]
private long <WorkingSet>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PageFileBytesPeak>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PageFileBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <PrivateBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SessionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <HandleCount>k__BackingField;
    internal int BasePriority { get; }
    internal string ProcessName { get; }
    internal int ProcessId { get; }
    internal long PoolPagedBytes { get; }
    internal long PoolNonPagedBytes { get; }
    internal long VirtualBytes { get; }
    internal long VirtualBytesPeak { get; }
    internal long WorkingSetPeak { get; }
    internal long WorkingSet { get; }
    internal long PageFileBytesPeak { get; }
    internal long PageFileBytes { get; }
    internal long PrivateBytes { get; }
    internal int SessionId { get; }
    internal int HandleCount { get; }
    [CompilerGeneratedAttribute]
internal int get_BasePriority();
    [CompilerGeneratedAttribute]
internal string get_ProcessName();
    [CompilerGeneratedAttribute]
internal int get_ProcessId();
    [CompilerGeneratedAttribute]
internal long get_PoolPagedBytes();
    [CompilerGeneratedAttribute]
internal long get_PoolNonPagedBytes();
    [CompilerGeneratedAttribute]
internal long get_VirtualBytes();
    [CompilerGeneratedAttribute]
internal long get_VirtualBytesPeak();
    [CompilerGeneratedAttribute]
internal long get_WorkingSetPeak();
    [CompilerGeneratedAttribute]
internal long get_WorkingSet();
    [CompilerGeneratedAttribute]
internal long get_PageFileBytesPeak();
    [CompilerGeneratedAttribute]
internal long get_PageFileBytes();
    [CompilerGeneratedAttribute]
internal long get_PrivateBytes();
    [CompilerGeneratedAttribute]
internal int get_SessionId();
    [CompilerGeneratedAttribute]
internal int get_HandleCount();
}
internal static class System.Diagnostics.ProcessManager : object {
    public static bool IsRemoteMachine(string machineName);
    public static bool IsProcessRunning(int processId, string machineName);
    public static bool IsProcessRunning(int processId);
    public static ProcessInfo GetProcessInfo(int processId, string machineName);
    public static int GetProcessIdFromHandle(SafeProcessHandle processHandle);
    private static bool IsRemoteMachineCore(string machineName);
    internal static void ThrowIfRemoteMachine(string machineName);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static ProcessInfo[] GetProcessInfos(string processNameFilter, string machineName);
    internal static ProcessModuleCollection GetModules(int processId);
    private static ProcessInfo CreateProcessInfo(int pid);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DesignerAttribute("System.Diagnostics.Design.ProcessModuleDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Diagnostics.ProcessModule : Component {
    private string _fileName;
    private string _moduleName;
    private FileVersionInfo _fileVersionInfo;
    [CompilerGeneratedAttribute]
private IntPtr <BaseAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ModuleMemorySize>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <EntryPointAddress>k__BackingField;
    public string ModuleName { get; }
    public string FileName { get; }
    public IntPtr BaseAddress { get; }
    public int ModuleMemorySize { get; }
    public IntPtr EntryPointAddress { get; }
    public FileVersionInfo FileVersionInfo { get; }
    public string get_ModuleName();
    public string get_FileName();
    [CompilerGeneratedAttribute]
public IntPtr get_BaseAddress();
    [CompilerGeneratedAttribute]
public int get_ModuleMemorySize();
    [CompilerGeneratedAttribute]
public IntPtr get_EntryPointAddress();
    public FileVersionInfo get_FileVersionInfo();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.ProcessModuleCollection : ReadOnlyCollectionBase {
    public ProcessModule Item { get; }
    public ProcessModuleCollection(ProcessModule[] processModules);
    internal ProcessModuleCollection(int capacity);
    public ProcessModule get_Item(int index);
    public int IndexOf(ProcessModule module);
    public bool Contains(ProcessModule module);
    public void CopyTo(ProcessModule[] array, int index);
    internal void Dispose();
}
public enum System.Diagnostics.ProcessPriorityClass : Enum {
    public int value__;
    public static ProcessPriorityClass Normal;
    public static ProcessPriorityClass Idle;
    public static ProcessPriorityClass High;
    public static ProcessPriorityClass RealTime;
    public static ProcessPriorityClass BelowNormal;
    public static ProcessPriorityClass AboveNormal;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("FileName={FileName}, Arguments={BuildArguments()}, WorkingDirectory={WorkingDirectory}")]
public class System.Diagnostics.ProcessStartInfo : object {
    private string _fileName;
    private string _arguments;
    private string _directory;
    private string _userName;
    private string _verb;
    private Collection`1<string> _argumentList;
    private ProcessWindowStyle _windowStyle;
    internal DictionaryWrapper _environmentVariables;
    [CompilerGeneratedAttribute]
private bool <CreateNoWindow>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedirectStandardInput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedirectStandardOutput>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RedirectStandardError>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <StandardInputEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <StandardErrorEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private Encoding <StandardOutputEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ErrorDialog>k__BackingField;
    [CompilerGeneratedAttribute]
private IntPtr <ErrorDialogParentHandle>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseShellExecute>k__BackingField;
    public string Arguments { get; public set; }
    public Collection`1<string> ArgumentList { get; }
    internal bool HasArgumentList { get; }
    public bool CreateNoWindow { get; public set; }
    [EditorAttribute("System.Diagnostics.Design.StringDictionaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public StringDictionary EnvironmentVariables { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, string> Environment { get; }
    public bool RedirectStandardInput { get; public set; }
    public bool RedirectStandardOutput { get; public set; }
    public bool RedirectStandardError { get; public set; }
    [NullableAttribute("2")]
public Encoding StandardInputEncoding { get; public set; }
    [NullableAttribute("2")]
public Encoding StandardErrorEncoding { get; public set; }
    [NullableAttribute("2")]
public Encoding StandardOutputEncoding { get; public set; }
    [EditorAttribute("System.Diagnostics.Design.StartFileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string FileName { get; public set; }
    [EditorAttribute("System.Diagnostics.Design.WorkingDirectoryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string WorkingDirectory { get; public set; }
    public bool ErrorDialog { get; public set; }
    public IntPtr ErrorDialogParentHandle { get; public set; }
    public string UserName { get; public set; }
    [DefaultValueAttribute("")]
public string Verb { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ProcessWindowStyle WindowStyle { get; public set; }
    [NullableAttribute("2")]
[SupportedOSPlatformAttribute("windows")]
public string PasswordInClearText { get; public set; }
    [SupportedOSPlatformAttribute("windows")]
public string Domain { get; public set; }
    [SupportedOSPlatformAttribute("windows")]
public bool LoadUserProfile { get; public set; }
    public bool UseShellExecute { get; public set; }
    public String[] Verbs { get; }
    [NullableAttribute("2")]
[CLSCompliantAttribute("False")]
[SupportedOSPlatformAttribute("windows")]
public SecureString Password { get; public set; }
    public ProcessStartInfo(string fileName);
    public ProcessStartInfo(string fileName, string arguments);
    public string get_Arguments();
    public void set_Arguments(string value);
    public Collection`1<string> get_ArgumentList();
    internal bool get_HasArgumentList();
    [CompilerGeneratedAttribute]
public bool get_CreateNoWindow();
    [CompilerGeneratedAttribute]
public void set_CreateNoWindow(bool value);
    public StringDictionary get_EnvironmentVariables();
    public IDictionary`2<string, string> get_Environment();
    [CompilerGeneratedAttribute]
public bool get_RedirectStandardInput();
    [CompilerGeneratedAttribute]
public void set_RedirectStandardInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_RedirectStandardOutput();
    [CompilerGeneratedAttribute]
public void set_RedirectStandardOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_RedirectStandardError();
    [CompilerGeneratedAttribute]
public void set_RedirectStandardError(bool value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Encoding get_StandardInputEncoding();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_StandardInputEncoding(Encoding value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Encoding get_StandardErrorEncoding();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_StandardErrorEncoding(Encoding value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Encoding get_StandardOutputEncoding();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_StandardOutputEncoding(Encoding value);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_WorkingDirectory();
    public void set_WorkingDirectory(string value);
    [CompilerGeneratedAttribute]
public bool get_ErrorDialog();
    [CompilerGeneratedAttribute]
public void set_ErrorDialog(bool value);
    [CompilerGeneratedAttribute]
public IntPtr get_ErrorDialogParentHandle();
    [CompilerGeneratedAttribute]
public void set_ErrorDialogParentHandle(IntPtr value);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Verb();
    public void set_Verb(string value);
    public ProcessWindowStyle get_WindowStyle();
    public void set_WindowStyle(ProcessWindowStyle value);
    internal string BuildArguments();
    internal void AppendArgumentsTo(ValueStringBuilder& stringBuilder);
    [NullableContextAttribute("2")]
public string get_PasswordInClearText();
    [NullableContextAttribute("2")]
public void set_PasswordInClearText(string value);
    public string get_Domain();
    public void set_Domain(string value);
    public bool get_LoadUserProfile();
    public void set_LoadUserProfile(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseShellExecute();
    [CompilerGeneratedAttribute]
public void set_UseShellExecute(bool value);
    public String[] get_Verbs();
    [NullableContextAttribute("2")]
public SecureString get_Password();
    [NullableContextAttribute("2")]
public void set_Password(SecureString value);
}
[DesignerAttribute("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Diagnostics.ProcessThread : Component {
    private bool _isRemoteMachine;
    private int _processId;
    private ThreadInfo _threadInfo;
    private Nullable`1<bool> _priorityBoostEnabled;
    private Nullable`1<ThreadPriorityLevel> _priorityLevel;
    public int BasePriority { get; }
    public int CurrentPriority { get; }
    public int Id { get; }
    public bool PriorityBoostEnabled { get; public set; }
    public ThreadPriorityLevel PriorityLevel { get; public set; }
    public IntPtr StartAddress { get; }
    public ThreadState ThreadState { get; }
    public ThreadWaitReason WaitReason { get; }
    [SupportedOSPlatformAttribute("windows")]
[SupportedOSPlatformAttribute("linux")]
public DateTime StartTime { get; }
    unknown int IdealProcessor {public set; }
    unknown static bool PriorityBoostEnabledCore {private set; }
    [SupportedOSPlatformAttribute("windows")]
unknown IntPtr ProcessorAffinity {public set; }
    private static ThreadPriorityLevel PriorityLevelCore { get; private set; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan PrivilegedProcessorTime { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan TotalProcessorTime { get; }
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
[SupportedOSPlatformAttribute("maccatalyst")]
public TimeSpan UserProcessorTime { get; }
    internal ProcessThread(bool isRemoteMachine, int processId, ThreadInfo threadInfo);
    public int get_BasePriority();
    public int get_CurrentPriority();
    public int get_Id();
    public bool get_PriorityBoostEnabled();
    public void set_PriorityBoostEnabled(bool value);
    [SupportedOSPlatformAttribute("windows")]
[SupportedOSPlatformAttribute("linux")]
[SupportedOSPlatformAttribute("freebsd")]
public ThreadPriorityLevel get_PriorityLevel();
    [SupportedOSPlatformAttribute("windows")]
public void set_PriorityLevel(ThreadPriorityLevel value);
    public IntPtr get_StartAddress();
    public ThreadState get_ThreadState();
    public ThreadWaitReason get_WaitReason();
    public DateTime get_StartTime();
    public void set_IdealProcessor(int value);
    public void ResetIdealProcessor();
    private static void set_PriorityBoostEnabledCore(bool value);
    public void set_ProcessorAffinity(IntPtr value);
    private static ThreadPriorityLevel get_PriorityLevelCore();
    private static void set_PriorityLevelCore(ThreadPriorityLevel value);
    public TimeSpan get_PrivilegedProcessorTime();
    private static DateTime GetStartTime();
    public TimeSpan get_TotalProcessorTime();
    public TimeSpan get_UserProcessorTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.ProcessThreadCollection : ReadOnlyCollectionBase {
    public ProcessThread Item { get; }
    public ProcessThreadCollection(ProcessThread[] processThreads);
    public ProcessThread get_Item(int index);
    public int Add(ProcessThread thread);
    public void Insert(int index, ProcessThread thread);
    public int IndexOf(ProcessThread thread);
    public bool Contains(ProcessThread thread);
    public void Remove(ProcessThread thread);
    public void CopyTo(ProcessThread[] array, int index);
    internal void Dispose();
}
internal class System.Diagnostics.ProcessWaitHandle : WaitHandle {
    internal ProcessWaitHandle(ProcessWaitState processWaitState);
    protected virtual void Dispose(bool explicitDisposing);
}
internal class System.Diagnostics.ProcessWaitState : object {
    private static Dictionary`2<int, ProcessWaitState> s_processWaitStates;
    private static Dictionary`2<int, ProcessWaitState> s_childProcessWaitStates;
    private object _gate;
    private int _processId;
    private bool _isChild;
    private bool _usesTerminal;
    private Task _waitInProgress;
    private int _outstandingRefCount;
    private bool _exited;
    private Nullable`1<int> _exitCode;
    private DateTime _exitTime;
    private ManualResetEvent _exitedEvent;
    internal DateTime ExitTime { get; }
    private ProcessWaitState(int processId, bool isChild, bool usesTerminal, DateTime exitTime);
    private static ProcessWaitState();
    internal static ProcessWaitState AddRef(int processId, bool isNewChild, bool usesTerminal);
    internal void ReleaseRef();
    public sealed virtual void Dispose();
    private void SetExited();
    internal ManualResetEvent EnsureExitedEvent();
    internal DateTime get_ExitTime();
    internal bool GetExited(Nullable`1& exitCode, bool refresh);
    private void CheckForNonChildExit();
    internal bool WaitForExit(int millisecondsTimeout);
    private Task WaitForExitAsync(CancellationToken cancellationToken);
    private void ChildReaped(int exitCode, bool configureConsole);
    private bool TryReapChild(bool configureConsole);
    internal static void CheckChildren(bool reapAll, bool configureConsole);
}
public enum System.Diagnostics.ProcessWindowStyle : Enum {
    public int value__;
    public static ProcessWindowStyle Normal;
    public static ProcessWindowStyle Hidden;
    public static ProcessWindowStyle Minimized;
    public static ProcessWindowStyle Maximized;
}
internal class System.Diagnostics.ThreadInfo : object {
    internal ulong _threadId;
    internal int _basePriority;
    internal int _currentPriority;
    internal IntPtr _startAddress;
    internal ThreadState _threadState;
    internal ThreadWaitReason _threadWaitReason;
}
public enum System.Diagnostics.ThreadPriorityLevel : Enum {
    public int value__;
    public static ThreadPriorityLevel Idle;
    public static ThreadPriorityLevel Lowest;
    public static ThreadPriorityLevel BelowNormal;
    public static ThreadPriorityLevel Normal;
    public static ThreadPriorityLevel AboveNormal;
    public static ThreadPriorityLevel Highest;
    public static ThreadPriorityLevel TimeCritical;
}
public enum System.Diagnostics.ThreadState : Enum {
    public int value__;
    public static ThreadState Initialized;
    public static ThreadState Ready;
    public static ThreadState Running;
    public static ThreadState Standby;
    public static ThreadState Terminated;
    public static ThreadState Wait;
    public static ThreadState Transition;
    public static ThreadState Unknown;
}
public enum System.Diagnostics.ThreadWaitReason : Enum {
    public int value__;
    public static ThreadWaitReason Executive;
    public static ThreadWaitReason FreePage;
    public static ThreadWaitReason PageIn;
    public static ThreadWaitReason SystemAllocation;
    public static ThreadWaitReason ExecutionDelay;
    public static ThreadWaitReason Suspended;
    public static ThreadWaitReason UserRequest;
    public static ThreadWaitReason EventPairHigh;
    public static ThreadWaitReason EventPairLow;
    public static ThreadWaitReason LpcReceive;
    public static ThreadWaitReason LpcReply;
    public static ThreadWaitReason VirtualMemory;
    public static ThreadWaitReason PageOut;
    public static ThreadWaitReason Unknown;
}
internal class System.IO.StringParser : ValueType {
    private string _buffer;
    private char _separator;
    private bool _skipEmpty;
    private int _startIndex;
    private int _endIndex;
    public StringParser(string buffer, char separator, bool skipEmpty);
    public bool MoveNext();
    public string ExtractCurrent();
}
internal static class System.PasteArguments : object {
    internal static void AppendArgument(ValueStringBuilder& stringBuilder, string argument);
    private static bool ContainsNoWhitespaceOrQuotes(string s);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.Runtime.Serialization.SerializationGuard : object {
    private static ThrowIfDeserializationInProgressWithSwitchDel s_throwIfDeserializationInProgressWithSwitch;
    private static SerializationGuard();
    private static ThrowIfDeserializationInProgressWithSwitchDel CreateThrowIfDeserializationInProgressWithSwitchDelegate();
    public static void ThrowIfDeserializationInProgress(string switchSuffix, Int32& cachedValue);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string NoAssociatedProcess { get; }
    internal static string ProcessIdRequired { get; }
    internal static string NotSupportedRemote { get; }
    internal static string NoProcessInfo { get; }
    internal static string WaitTillExit { get; }
    internal static string NoProcessHandle { get; }
    internal static string MissingProcess { get; }
    internal static string ProcessHasExited { get; }
    internal static string WaitReasonUnavailable { get; }
    internal static string InputIdleUnknownError { get; }
    internal static string FileNameMissing { get; }
    internal static string NoAsyncOperation { get; }
    internal static string ErrorStartingProcess { get; }
    internal static string StandardOutputEncodingNotAllowed { get; }
    internal static string StandardErrorEncodingNotAllowed { get; }
    internal static string CantGetStandardOut { get; }
    internal static string CantGetStandardIn { get; }
    internal static string CantGetStandardError { get; }
    internal static string CantMixSyncAsyncOperation { get; }
    internal static string CantRedirectStreams { get; }
    internal static string DirectoryNotValidAsInput { get; }
    internal static string PendingAsyncOperation { get; }
    internal static string CantGetProcessStartInfo { get; }
    internal static string CantSetProcessStartInfo { get; }
    internal static string ProcessStartWithPasswordAndDomainNotSupported { get; }
    internal static string ProcessStartSingleFeatureNotSupported { get; }
    internal static string RemoteMachinesNotSupported { get; }
    internal static string StandardInputEncodingNotAllowed { get; }
    internal static string UserDoesNotExist { get; }
    internal static string UserGroupsCannotBeDetermined { get; }
    internal static string ArgumentAndArgumentListInitialized { get; }
    internal static string ArgumentListMayNotContainNull { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static ResourceManager get_ResourceManager();
    internal static string get_NoAssociatedProcess();
    internal static string get_ProcessIdRequired();
    internal static string get_NotSupportedRemote();
    internal static string get_NoProcessInfo();
    internal static string get_WaitTillExit();
    internal static string get_NoProcessHandle();
    internal static string get_MissingProcess();
    internal static string get_ProcessHasExited();
    internal static string get_WaitReasonUnavailable();
    internal static string get_InputIdleUnknownError();
    internal static string get_FileNameMissing();
    internal static string get_NoAsyncOperation();
    internal static string get_ErrorStartingProcess();
    internal static string get_StandardOutputEncodingNotAllowed();
    internal static string get_StandardErrorEncodingNotAllowed();
    internal static string get_CantGetStandardOut();
    internal static string get_CantGetStandardIn();
    internal static string get_CantGetStandardError();
    internal static string get_CantMixSyncAsyncOperation();
    internal static string get_CantRedirectStreams();
    internal static string get_DirectoryNotValidAsInput();
    internal static string get_PendingAsyncOperation();
    internal static string get_CantGetProcessStartInfo();
    internal static string get_CantSetProcessStartInfo();
    internal static string get_ProcessStartWithPasswordAndDomainNotSupported();
    internal static string get_ProcessStartSingleFeatureNotSupported();
    internal static string get_RemoteMachinesNotSupported();
    internal static string get_StandardInputEncodingNotAllowed();
    internal static string get_UserDoesNotExist();
    internal static string get_UserGroupsCannotBeDetermined();
    internal static string get_ArgumentAndArgumentListInitialized();
    internal static string get_ArgumentListMayNotContainNull();
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[CompilerFeatureRequiredAttribute("RefStructs")]
[DefaultMemberAttribute("Item")]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public int get_Length();
    public virtual string ToString();
    public void Append(char c);
    public void Append(string s);
    private void AppendSlow(string s);
    public void Append(char c, int count);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
