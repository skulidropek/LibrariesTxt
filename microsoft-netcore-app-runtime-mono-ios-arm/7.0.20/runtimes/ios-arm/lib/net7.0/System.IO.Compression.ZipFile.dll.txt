internal static class FxResources.System.IO.Compression.ZipFile.SR : object {
}
internal static class Interop : object {
    private static void ThrowExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirError);
    internal static long CheckIo(long result, string path, bool isDirError);
    internal static int CheckIo(int result, string path, bool isDirError);
    internal static Exception GetExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirError);
    internal static Exception GetIOException(ErrorInfo errorInfo, string path);
    [CompilerGeneratedAttribute]
internal static bool <GetExceptionForIoErrno>g__ParentDirectoryExists|7_0(string fullPath);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.IO.ArchivingUtils : object {
    public static string EntryFromPath(string entry, int offset, int length, Char[]& buffer, bool appendPathSeparator);
    public static void EnsureCapacity(Char[]& buffer, int min);
    public static bool IsDirEmpty(DirectoryInfo possiblyEmptyDir);
    public static void AttemptSetLastWriteTime(string destinationFileName, DateTimeOffset lastWriteTime);
    internal static string SanitizeEntryFilePath(string entryPath);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.IO.Compression.ZipFile : object {
    public static ZipArchive OpenRead(string archiveFileName);
    public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode);
    public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode, Encoding entryNameEncoding);
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName);
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory);
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory, Encoding entryNameEncoding);
    private static void DoCreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, Nullable`1<CompressionLevel> compressionLevel, bool includeBaseDirectory, Encoding entryNameEncoding);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, Encoding entryNameEncoding);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, Encoding entryNameEncoding, bool overwriteFiles);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static class System.IO.Compression.ZipFileExtensions : object {
    [ExtensionAttribute]
public static ZipArchiveEntry CreateEntryFromFile(ZipArchive destination, string sourceFileName, string entryName);
    [ExtensionAttribute]
public static ZipArchiveEntry CreateEntryFromFile(ZipArchive destination, string sourceFileName, string entryName, CompressionLevel compressionLevel);
    [ExtensionAttribute]
internal static ZipArchiveEntry DoCreateEntryFromFile(ZipArchive destination, string sourceFileName, string entryName, Nullable`1<CompressionLevel> compressionLevel);
    private static void SetExternalAttributes(FileStream fs, ZipArchiveEntry entry);
    [ExtensionAttribute]
public static void ExtractToDirectory(ZipArchive source, string destinationDirectoryName);
    [ExtensionAttribute]
public static void ExtractToDirectory(ZipArchive source, string destinationDirectoryName, bool overwriteFiles);
    [ExtensionAttribute]
public static void ExtractToFile(ZipArchiveEntry source, string destinationFileName);
    [ExtensionAttribute]
public static void ExtractToFile(ZipArchiveEntry source, string destinationFileName, bool overwrite);
    [ExtensionAttribute]
internal static void ExtractRelativeToDirectory(ZipArchiveEntry source, string destinationDirectoryName, bool overwrite);
}
internal static class System.IO.PathInternal : object {
    internal static StringComparison StringComparison { get; }
    internal static bool IsCaseSensitive { get; }
    internal static StringComparison get_StringComparison();
    internal static bool get_IsCaseSensitive();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string IO_DirectoryNameWithData { get; }
    internal static string IO_ExtractingResultsInOutside { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_PathTooLong { get; }
    internal static string IO_PathTooLong_Path { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_IO_DirectoryNameWithData();
    internal static string get_IO_ExtractingResultsInOutside();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_PathTooLong();
    internal static string get_IO_PathTooLong_Path();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_UnauthorizedAccess_IODenied_Path();
}
