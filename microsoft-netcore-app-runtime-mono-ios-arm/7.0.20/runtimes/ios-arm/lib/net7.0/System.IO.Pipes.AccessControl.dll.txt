internal static class FxResources.System.IO.Pipes.AccessControl.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class System.IO.Pipes.AnonymousPipeServerStreamAcl : object {
    [NullableContextAttribute("1")]
public static AnonymousPipeServerStream Create(PipeDirection direction, HandleInheritability inheritability, int bufferSize, PipeSecurity pipeSecurity);
}
public static class System.IO.Pipes.NamedPipeServerStreamAcl : object {
    [NullableContextAttribute("1")]
public static NamedPipeServerStream Create(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, PipeSecurity pipeSecurity, HandleInheritability inheritability, PipeAccessRights additionalAccessRights);
}
[FlagsAttribute]
public enum System.IO.Pipes.PipeAccessRights : Enum {
    public int value__;
    public static PipeAccessRights ReadData;
    public static PipeAccessRights WriteData;
    public static PipeAccessRights CreateNewInstance;
    public static PipeAccessRights ReadExtendedAttributes;
    public static PipeAccessRights WriteExtendedAttributes;
    public static PipeAccessRights ReadAttributes;
    public static PipeAccessRights WriteAttributes;
    public static PipeAccessRights Write;
    public static PipeAccessRights Delete;
    public static PipeAccessRights ReadPermissions;
    public static PipeAccessRights Read;
    public static PipeAccessRights ReadWrite;
    public static PipeAccessRights ChangePermissions;
    public static PipeAccessRights TakeOwnership;
    public static PipeAccessRights Synchronize;
    public static PipeAccessRights FullControl;
    public static PipeAccessRights AccessSystemSecurity;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipes.PipeAccessRule : AccessRule {
    public PipeAccessRights PipeAccessRights { get; }
    public PipeAccessRule(IdentityReference identity, PipeAccessRights rights, AccessControlType type);
    public PipeAccessRule(string identity, PipeAccessRights rights, AccessControlType type);
    public PipeAccessRights get_PipeAccessRights();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipes.PipeAuditRule : AuditRule {
    public PipeAccessRights PipeAccessRights { get; }
    public PipeAuditRule(IdentityReference identity, PipeAccessRights rights, AuditFlags flags);
    public PipeAuditRule(string identity, PipeAccessRights rights, AuditFlags flags);
    public PipeAccessRights get_PipeAccessRights();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.IO.Pipes.PipesAclExtensions : object {
    [ExtensionAttribute]
public static PipeSecurity GetAccessControl(PipeStream stream);
    [ExtensionAttribute]
public static void SetAccessControl(PipeStream stream, PipeSecurity pipeSecurity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipes.PipeSecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public void AddAccessRule(PipeAccessRule rule);
    public void AddAuditRule(PipeAuditRule rule);
    public sealed virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    protected internal void Persist(SafeHandle handle);
    protected internal void Persist(string name);
    public bool RemoveAccessRule(PipeAccessRule rule);
    public void RemoveAccessRuleSpecific(PipeAccessRule rule);
    public bool RemoveAuditRule(PipeAuditRule rule);
    public void RemoveAuditRuleAll(PipeAuditRule rule);
    public void RemoveAuditRuleSpecific(PipeAuditRule rule);
    public void ResetAccessRule(PipeAccessRule rule);
    public void SetAccessRule(PipeAccessRule rule);
    public void SetAuditRule(PipeAuditRule rule);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string PlatformNotSupported_AccessControl { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_PlatformNotSupported_AccessControl();
}
