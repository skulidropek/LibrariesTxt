internal static class FxResources.System.IO.Compression.Brotli.SR : object {
}
internal static class Interop : object {
}
internal class Microsoft.Win32.SafeHandles.SafeBrotliDecoderHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal class Microsoft.Win32.SafeHandles.SafeBrotliEncoderHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
public class System.IO.Compression.BrotliDecoder : ValueType {
    private SafeBrotliDecoderHandle _state;
    private bool _disposed;
    internal void InitializeDecoder();
    internal void EnsureInitialized();
    public sealed virtual void Dispose();
    private void EnsureNotDisposed();
    public OperationStatus Decompress(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesConsumed, Int32& bytesWritten);
    public static bool TryDecompress(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten);
}
public class System.IO.Compression.BrotliEncoder : ValueType {
    internal SafeBrotliEncoderHandle _state;
    private bool _disposed;
    public BrotliEncoder(int quality, int window);
    internal void InitializeEncoder();
    internal void EnsureInitialized();
    public sealed virtual void Dispose();
    private void EnsureNotDisposed();
    internal void SetQuality(int quality);
    internal void SetWindow(int window);
    public static int GetMaxCompressedLength(int inputSize);
    internal OperationStatus Flush(Memory`1<byte> destination, Int32& bytesWritten);
    public OperationStatus Flush(Span`1<byte> destination, Int32& bytesWritten);
    internal OperationStatus Compress(ReadOnlyMemory`1<byte> source, Memory`1<byte> destination, Int32& bytesConsumed, Int32& bytesWritten, bool isFinalBlock);
    public OperationStatus Compress(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesConsumed, Int32& bytesWritten, bool isFinalBlock);
    internal OperationStatus Compress(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesConsumed, Int32& bytesWritten, BrotliEncoderOperation operation);
    public static bool TryCompress(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten);
    public static bool TryCompress(ReadOnlySpan`1<byte> source, Span`1<byte> destination, Int32& bytesWritten, int quality, int window);
}
internal enum System.IO.Compression.BrotliEncoderOperation : Enum {
    public int value__;
    public static BrotliEncoderOperation Process;
    public static BrotliEncoderOperation Flush;
    public static BrotliEncoderOperation Finish;
    public static BrotliEncoderOperation EmitMetadata;
}
internal enum System.IO.Compression.BrotliEncoderParameter : Enum {
    public int value__;
    public static BrotliEncoderParameter Mode;
    public static BrotliEncoderParameter Quality;
    public static BrotliEncoderParameter LGWin;
    public static BrotliEncoderParameter LGBlock;
    public static BrotliEncoderParameter LCModeling;
    public static BrotliEncoderParameter SizeHint;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Compression.BrotliStream : Stream {
    private BrotliEncoder _encoder;
    private BrotliDecoder _decoder;
    private int _bufferOffset;
    private int _bufferCount;
    private bool _nonEmptyInput;
    private static bool s_useStrictValidation;
    private Stream _stream;
    private Byte[] _buffer;
    private bool _leaveOpen;
    private CompressionMode _mode;
    private int _activeAsyncOperation;
    public Stream BaseStream { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    private bool AsyncOperationIsActive { get; }
    public BrotliStream(Stream stream, CompressionLevel compressionLevel);
    public BrotliStream(Stream stream, CompressionLevel compressionLevel, bool leaveOpen);
    public BrotliStream(Stream stream, CompressionMode mode);
    public BrotliStream(Stream stream, CompressionMode mode, bool leaveOpen);
    private static BrotliStream();
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    internal void WriteCore(ReadOnlySpan`1<byte> buffer, bool isFinalBlock);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.Compression.BrotliStream/<WriteAsyncMemoryCore>d__11")]
private ValueTask WriteAsyncMemoryCore(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken, bool isFinalBlock);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.Compression.BrotliStream/<FlushAsyncCore>d__14")]
private Task FlushAsyncCore(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    private bool TryDecompress(Span`1<byte> destination, Int32& bytesWritten);
    private static void ThrowInvalidStream();
    private static void ThrowTruncatedInvalidData();
    private void EnsureNotDisposed();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("System.IO.Compression.BrotliStream/<DisposeAsync>d__39")]
public virtual ValueTask DisposeAsync();
    private void ReleaseStateForDispose();
    public Stream get_BaseStream();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void SetLength(long value);
    private bool get_AsyncOperationIsActive();
    private void EnsureNoActiveAsyncOperation();
    private void AsyncOperationStarting();
    private void AsyncOperationCompleting();
    private static void ThrowInvalidBeginCall();
    [AsyncStateMachineAttribute("System.IO.Compression.BrotliStream/<<ReadAsync>g__Core|25_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<int> <ReadAsync>g__Core|25_0(Memory`1<byte> buffer, CancellationToken cancellationToken);
}
internal static class System.IO.Compression.BrotliUtils : object {
    internal static int GetQualityFromCompressionLevel(CompressionLevel compressionLevel);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Stream_FalseCanRead { get; }
    internal static string Stream_FalseCanWrite { get; }
    internal static string ArgumentOutOfRange_Enum { get; }
    internal static string InvalidBeginCall { get; }
    internal static string BrotliEncoder_Create { get; }
    internal static string BrotliEncoder_Disposed { get; }
    internal static string BrotliEncoder_Quality { get; }
    internal static string BrotliEncoder_Window { get; }
    internal static string BrotliEncoder_InvalidSetParameter { get; }
    internal static string BrotliDecoder_Create { get; }
    internal static string BrotliDecoder_Disposed { get; }
    internal static string BrotliStream_Compress_UnsupportedOperation { get; }
    internal static string BrotliStream_Compress_InvalidData { get; }
    internal static string BrotliStream_Decompress_UnsupportedOperation { get; }
    internal static string BrotliStream_Decompress_InvalidData { get; }
    internal static string BrotliStream_Decompress_InvalidStream { get; }
    internal static string BrotliStream_Decompress_TruncatedData { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Stream_FalseCanRead();
    internal static string get_Stream_FalseCanWrite();
    internal static string get_ArgumentOutOfRange_Enum();
    internal static string get_InvalidBeginCall();
    internal static string get_BrotliEncoder_Create();
    internal static string get_BrotliEncoder_Disposed();
    internal static string get_BrotliEncoder_Quality();
    internal static string get_BrotliEncoder_Window();
    internal static string get_BrotliEncoder_InvalidSetParameter();
    internal static string get_BrotliDecoder_Create();
    internal static string get_BrotliDecoder_Disposed();
    internal static string get_BrotliStream_Compress_UnsupportedOperation();
    internal static string get_BrotliStream_Compress_InvalidData();
    internal static string get_BrotliStream_Decompress_UnsupportedOperation();
    internal static string get_BrotliStream_Decompress_InvalidData();
    internal static string get_BrotliStream_Decompress_InvalidStream();
    internal static string get_BrotliStream_Decompress_TruncatedData();
}
