internal static class FxResources.System.Linq.Queryable.SR : object {
}
public abstract class System.Linq.EnumerableExecutor : object {
    [RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Enumerating in-memory collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
internal abstract virtual object ExecuteBoxed();
    [RequiresDynamicCodeAttribute("Enumerating in-memory collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
internal static EnumerableExecutor Create(Expression expression);
}
public class System.Linq.EnumerableExecutor`1 : EnumerableExecutor {
    private Expression _expression;
    [NullableContextAttribute("1")]
public EnumerableExecutor`1(Expression expression);
    [RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Enumerating in-memory collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
internal virtual object ExecuteBoxed();
    [RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Enumerating in-memory collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
internal T Execute();
}
public abstract class System.Linq.EnumerableQuery : object {
    [NullableAttribute("1")]
internal Expression Expression { get; }
    [NullableAttribute("2")]
internal IEnumerable Enumerable { get; }
    internal abstract virtual Expression get_Expression();
    internal abstract virtual IEnumerable get_Enumerable();
    [RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Enumerating in-memory collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
internal static IQueryable Create(Type elementType, IEnumerable sequence);
    [RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Enumerating in-memory collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
internal static IQueryable Create(Type elementType, Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[RequiresDynamicCodeAttribute("Enumerating in-memory collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
[RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
public class System.Linq.EnumerableQuery`1 : EnumerableQuery {
    private Expression _expression;
    private IEnumerable`1<T> _enumerable;
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    internal Expression Expression { get; }
    [NullableAttribute("2")]
internal IEnumerable Enumerable { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    public EnumerableQuery`1(IEnumerable`1<T> enumerable);
    public EnumerableQuery`1(Expression expression);
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    internal virtual Expression get_Expression();
    internal virtual IEnumerable get_Enumerable();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override TElement System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private IEnumerator`1<T> GetEnumerator();
    [NullableContextAttribute("2")]
public virtual string ToString();
}
[RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Requires MakeGenericType")]
internal class System.Linq.EnumerableRewriter : ExpressionVisitor {
    private Dictionary`2<LabelTarget, LabelTarget> _targetCache;
    private Dictionary`2<Type, Type> _equivalentTypeCache;
    private static ILookup`2<string, MethodInfo> s_seqMethods;
    protected virtual Expression VisitMethodCall(MethodCallExpression m);
    private static ReadOnlyCollection`1<Expression> FixupQuotedArgs(MethodInfo mi, ReadOnlyCollection`1<Expression> argList);
    private static Expression FixupQuotedExpression(Type type, Expression expression);
    protected virtual Expression VisitLambda(Expression`1<T> node);
    private static Type GetPublicType(Type t);
    private Type GetEquivalentType(Type type);
    protected virtual Expression VisitConstant(ConstantExpression c);
    private static MethodInfo FindEnumerableMethodForQueryable(string name, ReadOnlyCollection`1<Expression> args, Type[] typeArgs);
    [RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Calls System.Reflection.MethodInfo.MakeGenericMethod(params Type[])")]
private static MethodInfo FindMethod(Type type, string name, ReadOnlyCollection`1<Expression> args, Type[] typeArgs);
    private static bool ArgsMatch(MethodInfo m, ReadOnlyCollection`1<Expression> args, Type[] typeArgs);
    [RequiresDynamicCodeAttribute("Calls System.Type.MakeArrayType()")]
private static Type StripExpression(Type type);
    protected virtual Expression VisitConditional(ConditionalExpression c);
    protected virtual Expression VisitBlock(BlockExpression node);
    protected virtual Expression VisitGoto(GotoExpression node);
    protected virtual LabelTarget VisitLabelTarget(LabelTarget node);
    [CompilerGeneratedAttribute]
internal static MethodInfo[] <FindEnumerableMethodForQueryable>g__GetEnumerableStaticMethods|11_2(Type type);
    [CompilerGeneratedAttribute]
internal static MethodInfo <FindEnumerableMethodForQueryable>g__DisambiguateMatches|11_4(MethodInfo[] matchingMethods);
    [CompilerGeneratedAttribute]
internal static bool <FindEnumerableMethodForQueryable>g__AreAssignableFromStrict|11_6(ParameterInfo[] left, ParameterInfo[] right);
    [CompilerGeneratedAttribute]
[RequiresDynamicCodeAttribute("Calls System.Reflection.MethodInfo.MakeGenericMethod(params Type[])")]
internal static ParameterInfo[] <ArgsMatch>g__GetConstrutedGenericParameters|13_0(MethodInfo method, Type[] genericTypes);
}
internal static class System.Linq.Error : object {
    internal static Exception ArgumentNotIEnumerableGeneric(string message);
    internal static Exception ArgumentNotValid(string message);
    internal static Exception ArgumentOutOfRange(string message);
    internal static Exception NoMethodOnType(string name, object type);
    internal static Exception NoMethodOnTypeMatchingArguments(string name, object type);
    internal static Exception EnumeratingNullEnumerableExpression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Linq.Queryable : object {
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Enumerating in-memory collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable`1<TElement> AsQueryable(IEnumerable`1<TElement> source);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Enumerating in-memory collections as IQueryable can require unreferenced code because expressions referencing IQueryable extension methods can get rebound to IEnumerable extension methods. The IEnumerable extension methods could be trimmed causing the application to fail at runtime.")]
[RequiresDynamicCodeAttribute("Enumerating in-memory collections as IQueryable can require creating new generic types or methods, which requires creating code at runtime. This may not work when AOT compiling.")]
public static IQueryable AsQueryable(IEnumerable source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Where`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Where(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Where`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Where(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("OfType`1", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> OfType(IQueryable source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Cast`1", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> Cast(IQueryable source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Select`2", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> Select(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Select`2", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> Select(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, TResult>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SelectMany`2", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TResult>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SelectMany`2", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, IEnumerable`1<TResult>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SelectMany`3", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, IEnumerable`1<TCollection>>> collectionSelector, Expression`1<Func`3<TSource, TCollection, TResult>> resultSelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SelectMany`3", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, IEnumerable`1<TCollection>>> collectionSelector, Expression`1<Func`3<TSource, TCollection, TResult>> resultSelector);
    private static Expression GetSourceExpression(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Join`4", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> Join(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Join`4", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> Join(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("GroupJoin`4", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> GroupJoin(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, IEnumerable`1<TInner>, TResult>> resultSelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("GroupJoin`4", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> GroupJoin(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, IEnumerable`1<TInner>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Order`1", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<T> Order(IQueryable`1<T> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Order`1", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<T> Order(IQueryable`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("OrderBy`2", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<TSource> OrderBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("OrderBy`2", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<TSource> OrderBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("OrderDescending`1", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<T> OrderDescending(IQueryable`1<T> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("OrderDescending`1", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<T> OrderDescending(IQueryable`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("OrderByDescending`2", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("OrderByDescending`2", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<TSource> OrderByDescending(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("ThenBy`2", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<TSource> ThenBy(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("ThenBy`2", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<TSource> ThenBy(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("ThenByDescending`2", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<TSource> ThenByDescending(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("ThenByDescending`2", "System.Linq.Enumerable")]
public static IOrderedQueryable`1<TSource> ThenByDescending(IOrderedQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Take`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Take(IQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Take`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Take(IQueryable`1<TSource> source, Range range);
    [ExtensionAttribute]
[DynamicDependencyAttribute("TakeWhile`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> TakeWhile(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("TakeWhile`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> TakeWhile(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Skip`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Skip(IQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SkipWhile`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> SkipWhile(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SkipWhile`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> SkipWhile(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, int, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("GroupBy`2", "System.Linq.Enumerable")]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("GroupBy`3", "System.Linq.Enumerable")]
public static IQueryable`1<IGrouping`2<TKey, TElement>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("GroupBy`2", "System.Linq.Enumerable")]
public static IQueryable`1<IGrouping`2<TKey, TSource>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("GroupBy`3", "System.Linq.Enumerable")]
public static IQueryable`1<IGrouping`2<TKey, TElement>> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("GroupBy`4", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IEnumerable`1<TElement>, TResult>> resultSelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("GroupBy`3", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IEnumerable`1<TSource>, TResult>> resultSelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("GroupBy`3", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`3<TKey, IEnumerable`1<TSource>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("GroupBy`4", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> GroupBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, Expression`1<Func`2<TSource, TElement>> elementSelector, Expression`1<Func`3<TKey, IEnumerable`1<TElement>, TResult>> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Distinct`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Distinct(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Distinct`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Distinct(IQueryable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("DistinctBy`2", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> DistinctBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("DistinctBy`2", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> DistinctBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Chunk`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource[]> Chunk(IQueryable`1<TSource> source, int size);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Concat`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Concat(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Zip`2", "System.Linq.Enumerable")]
public static IQueryable`1<ValueTuple`2<TFirst, TSecond>> Zip(IQueryable`1<TFirst> source1, IEnumerable`1<TSecond> source2);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Zip`3", "System.Linq.Enumerable")]
public static IQueryable`1<TResult> Zip(IQueryable`1<TFirst> source1, IEnumerable`1<TSecond> source2, Expression`1<Func`3<TFirst, TSecond, TResult>> resultSelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Zip`3", "System.Linq.Enumerable")]
public static IQueryable`1<ValueTuple`3<TFirst, TSecond, TThird>> Zip(IQueryable`1<TFirst> source1, IEnumerable`1<TSecond> source2, IEnumerable`1<TThird> source3);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Union`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Union(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Union`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Union(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("UnionBy`2", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> UnionBy(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("UnionBy`2", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> UnionBy(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Intersect`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Intersect(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Intersect`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Intersect(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("IntersectBy`2", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> IntersectBy(IQueryable`1<TSource> source1, IEnumerable`1<TKey> source2, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("IntersectBy`2", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> IntersectBy(IQueryable`1<TSource> source1, IEnumerable`1<TKey> source2, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Except`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Except(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Except`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Except(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("ExceptBy`2", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> ExceptBy(IQueryable`1<TSource> source1, IEnumerable`1<TKey> source2, Expression`1<Func`2<TSource, TKey>> keySelector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("ExceptBy`2", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> ExceptBy(IQueryable`1<TSource> source1, IEnumerable`1<TKey> source2, Expression`1<Func`2<TSource, TKey>> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("First`1", "System.Linq.Enumerable")]
public static TSource First(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("First`1", "System.Linq.Enumerable")]
public static TSource First(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("FirstOrDefault`1", "System.Linq.Enumerable")]
public static TSource FirstOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("FirstOrDefault`1", "System.Linq.Enumerable")]
public static TSource FirstOrDefault(IQueryable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
[DynamicDependencyAttribute("FirstOrDefault`1", "System.Linq.Enumerable")]
public static TSource FirstOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("FirstOrDefault`1", "System.Linq.Enumerable")]
public static TSource FirstOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, TSource defaultValue);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Last`1", "System.Linq.Enumerable")]
public static TSource Last(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Last`1", "System.Linq.Enumerable")]
public static TSource Last(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("LastOrDefault`1", "System.Linq.Enumerable")]
public static TSource LastOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("LastOrDefault`1", "System.Linq.Enumerable")]
public static TSource LastOrDefault(IQueryable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
[DynamicDependencyAttribute("LastOrDefault`1", "System.Linq.Enumerable")]
public static TSource LastOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("LastOrDefault`1", "System.Linq.Enumerable")]
public static TSource LastOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, TSource defaultValue);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Single`1", "System.Linq.Enumerable")]
public static TSource Single(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Single`1", "System.Linq.Enumerable")]
public static TSource Single(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("SingleOrDefault`1", "System.Linq.Enumerable")]
public static TSource SingleOrDefault(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SingleOrDefault`1", "System.Linq.Enumerable")]
public static TSource SingleOrDefault(IQueryable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SingleOrDefault`1", "System.Linq.Enumerable")]
public static TSource SingleOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SingleOrDefault`1", "System.Linq.Enumerable")]
public static TSource SingleOrDefault(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, TSource defaultValue);
    [ExtensionAttribute]
[DynamicDependencyAttribute("ElementAt`1", "System.Linq.Enumerable")]
public static TSource ElementAt(IQueryable`1<TSource> source, int index);
    [ExtensionAttribute]
[DynamicDependencyAttribute("ElementAt`1", "System.Linq.Enumerable")]
public static TSource ElementAt(IQueryable`1<TSource> source, Index index);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("ElementAtOrDefault`1", "System.Linq.Enumerable")]
public static TSource ElementAtOrDefault(IQueryable`1<TSource> source, int index);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("ElementAtOrDefault`1", "System.Linq.Enumerable")]
public static TSource ElementAtOrDefault(IQueryable`1<TSource> source, Index index);
    [ExtensionAttribute]
[DynamicDependencyAttribute("DefaultIfEmpty`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> DefaultIfEmpty(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("DefaultIfEmpty`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> DefaultIfEmpty(IQueryable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Contains`1", "System.Linq.Enumerable")]
public static bool Contains(IQueryable`1<TSource> source, TSource item);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Contains`1", "System.Linq.Enumerable")]
public static bool Contains(IQueryable`1<TSource> source, TSource item, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Reverse`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Reverse(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SequenceEqual`1", "System.Linq.Enumerable")]
public static bool SequenceEqual(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SequenceEqual`1", "System.Linq.Enumerable")]
public static bool SequenceEqual(IQueryable`1<TSource> source1, IEnumerable`1<TSource> source2, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Any`1", "System.Linq.Enumerable")]
public static bool Any(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Any`1", "System.Linq.Enumerable")]
public static bool Any(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("All`1", "System.Linq.Enumerable")]
public static bool All(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Count`1", "System.Linq.Enumerable")]
public static int Count(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Count`1", "System.Linq.Enumerable")]
public static int Count(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [ExtensionAttribute]
[DynamicDependencyAttribute("LongCount`1", "System.Linq.Enumerable")]
public static long LongCount(IQueryable`1<TSource> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("LongCount`1", "System.Linq.Enumerable")]
public static long LongCount(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("Min`1", "System.Linq.Enumerable")]
public static TSource Min(IQueryable`1<TSource> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("Min`1", "System.Linq.Enumerable")]
public static TSource Min(IQueryable`1<TSource> source, IComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("Min`2", "System.Linq.Enumerable")]
public static TResult Min(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("MinBy`2", "System.Linq.Enumerable")]
public static TSource MinBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("MinBy`2", "System.Linq.Enumerable")]
public static TSource MinBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("Max`1", "System.Linq.Enumerable")]
public static TSource Max(IQueryable`1<TSource> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("Max`1", "System.Linq.Enumerable")]
public static TSource Max(IQueryable`1<TSource> source, IComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("Max`2", "System.Linq.Enumerable")]
public static TResult Max(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("MaxBy`2", "System.Linq.Enumerable")]
public static TSource MaxBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[DynamicDependencyAttribute("MaxBy`2", "System.Linq.Enumerable")]
public static TSource MaxBy(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TKey>> keySelector, IComparer`1<TSource> comparer);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum", "System.Linq.Enumerable")]
public static int Sum(IQueryable`1<int> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum", "System.Linq.Enumerable")]
public static Nullable`1<int> Sum(IQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum", "System.Linq.Enumerable")]
public static long Sum(IQueryable`1<long> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum", "System.Linq.Enumerable")]
public static Nullable`1<long> Sum(IQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum", "System.Linq.Enumerable")]
public static float Sum(IQueryable`1<float> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum", "System.Linq.Enumerable")]
public static Nullable`1<float> Sum(IQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum", "System.Linq.Enumerable")]
public static double Sum(IQueryable`1<double> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum", "System.Linq.Enumerable")]
public static Nullable`1<double> Sum(IQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum", "System.Linq.Enumerable")]
public static decimal Sum(IQueryable`1<decimal> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum", "System.Linq.Enumerable")]
public static Nullable`1<decimal> Sum(IQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum`1", "System.Linq.Enumerable")]
public static int Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum`1", "System.Linq.Enumerable")]
public static Nullable`1<int> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum`1", "System.Linq.Enumerable")]
public static long Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum`1", "System.Linq.Enumerable")]
public static Nullable`1<long> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum`1", "System.Linq.Enumerable")]
public static float Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum`1", "System.Linq.Enumerable")]
public static Nullable`1<float> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum`1", "System.Linq.Enumerable")]
public static double Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum`1", "System.Linq.Enumerable")]
public static Nullable`1<double> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum`1", "System.Linq.Enumerable")]
public static decimal Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Sum`1", "System.Linq.Enumerable")]
public static Nullable`1<decimal> Sum(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average", "System.Linq.Enumerable")]
public static double Average(IQueryable`1<int> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average", "System.Linq.Enumerable")]
public static Nullable`1<double> Average(IQueryable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average", "System.Linq.Enumerable")]
public static double Average(IQueryable`1<long> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average", "System.Linq.Enumerable")]
public static Nullable`1<double> Average(IQueryable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average", "System.Linq.Enumerable")]
public static float Average(IQueryable`1<float> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average", "System.Linq.Enumerable")]
public static Nullable`1<float> Average(IQueryable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average", "System.Linq.Enumerable")]
public static double Average(IQueryable`1<double> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average", "System.Linq.Enumerable")]
public static Nullable`1<double> Average(IQueryable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average", "System.Linq.Enumerable")]
public static decimal Average(IQueryable`1<decimal> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average", "System.Linq.Enumerable")]
public static Nullable`1<decimal> Average(IQueryable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average`1", "System.Linq.Enumerable")]
public static double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average`1", "System.Linq.Enumerable")]
public static Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average`1", "System.Linq.Enumerable")]
public static float Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average`1", "System.Linq.Enumerable")]
public static Nullable`1<float> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average`1", "System.Linq.Enumerable")]
public static double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average`1", "System.Linq.Enumerable")]
public static Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average`1", "System.Linq.Enumerable")]
public static double Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average`1", "System.Linq.Enumerable")]
public static Nullable`1<double> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average`1", "System.Linq.Enumerable")]
public static decimal Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Average`1", "System.Linq.Enumerable")]
public static Nullable`1<decimal> Average(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Aggregate`1", "System.Linq.Enumerable")]
public static TSource Aggregate(IQueryable`1<TSource> source, Expression`1<Func`3<TSource, TSource, TSource>> func);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Aggregate`2", "System.Linq.Enumerable")]
public static TAccumulate Aggregate(IQueryable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> func);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Aggregate`3", "System.Linq.Enumerable")]
public static TResult Aggregate(IQueryable`1<TSource> source, TAccumulate seed, Expression`1<Func`3<TAccumulate, TSource, TAccumulate>> func, Expression`1<Func`2<TAccumulate, TResult>> selector);
    [ExtensionAttribute]
[DynamicDependencyAttribute("SkipLast`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> SkipLast(IQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
[DynamicDependencyAttribute("TakeLast`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> TakeLast(IQueryable`1<TSource> source, int count);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Append`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Append(IQueryable`1<TSource> source, TSource element);
    [ExtensionAttribute]
[DynamicDependencyAttribute("Prepend`1", "System.Linq.Enumerable")]
public static IQueryable`1<TSource> Prepend(IQueryable`1<TSource> source, TSource element);
}
internal static class System.Linq.Strings : object {
    internal static string ArgumentNotIEnumerableGeneric(string message);
    internal static string ArgumentNotValid(string message);
    internal static string NoMethodOnType(string name, object type);
    internal static string NoMethodOnTypeMatchingArguments(string name, object type);
    internal static string EnumeratingNullEnumerableExpression();
}
internal static class System.Linq.TypeHelper : object {
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2070:RequiresUnreferencedCode")]
internal static Type FindGenericType(Type definition, Type type);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ArgumentNotIEnumerableGeneric { get; }
    internal static string ArgumentNotValid { get; }
    internal static string NoMethodOnType { get; }
    internal static string NoMethodOnTypeMatchingArguments { get; }
    internal static string EnumeratingNullEnumerableExpression { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ArgumentNotIEnumerableGeneric();
    internal static string get_ArgumentNotValid();
    internal static string get_NoMethodOnType();
    internal static string get_NoMethodOnTypeMatchingArguments();
    internal static string get_EnumeratingNullEnumerableExpression();
}
