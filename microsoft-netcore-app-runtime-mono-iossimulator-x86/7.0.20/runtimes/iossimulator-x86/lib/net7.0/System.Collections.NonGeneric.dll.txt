internal static class FxResources.System.Collections.NonGeneric.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Collections.CaseInsensitiveComparer : object {
    private CompareInfo _compareInfo;
    private static CaseInsensitiveComparer modreq(System.Runtime.CompilerServices.IsVolatile) s_InvariantCaseInsensitiveComparer;
    public static CaseInsensitiveComparer Default { get; }
    public static CaseInsensitiveComparer DefaultInvariant { get; }
    public CaseInsensitiveComparer(CultureInfo culture);
    public static CaseInsensitiveComparer get_Default();
    public static CaseInsensitiveComparer get_DefaultInvariant();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(object a, object b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("CaseInsensitiveHashCodeProvider has been deprecated. Use StringComparer instead.")]
public class System.Collections.CaseInsensitiveHashCodeProvider : object {
    private static CaseInsensitiveHashCodeProvider modreq(System.Runtime.CompilerServices.IsVolatile) s_invariantCaseInsensitiveHashCodeProvider;
    private CompareInfo _compareInfo;
    public static CaseInsensitiveHashCodeProvider Default { get; }
    public static CaseInsensitiveHashCodeProvider DefaultInvariant { get; }
    public CaseInsensitiveHashCodeProvider(CultureInfo culture);
    public static CaseInsensitiveHashCodeProvider get_Default();
    public static CaseInsensitiveHashCodeProvider get_DefaultInvariant();
    public sealed virtual int GetHashCode(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Collections.CollectionBase : object {
    private ArrayList _list;
    protected ArrayList InnerList { get; }
    protected IList List { get; }
    public int Capacity { get; public set; }
    public int Count { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    [NullableAttribute("2")]
private object System.Collections.IList.Item { get; private set; }
    protected CollectionBase(int capacity);
    protected ArrayList get_InnerList();
    protected IList get_List();
    public int get_Capacity();
    public void set_Capacity(int value);
    public sealed virtual int get_Count();
    public sealed virtual void Clear();
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public sealed virtual IEnumerator GetEnumerator();
    [NullableContextAttribute("2")]
protected virtual void OnSet(int index, object oldValue, object newValue);
    [NullableContextAttribute("2")]
protected virtual void OnInsert(int index, object value);
    protected virtual void OnClear();
    [NullableContextAttribute("2")]
protected virtual void OnRemove(int index, object value);
    protected virtual void OnValidate(object value);
    [NullableContextAttribute("2")]
protected virtual void OnSetComplete(int index, object oldValue, object newValue);
    [NullableContextAttribute("2")]
protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnClearComplete();
    [NullableContextAttribute("2")]
protected virtual void OnRemoveComplete(int index, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Collections.DictionaryBase : object {
    private Hashtable _hashtable;
    protected Hashtable InnerHashtable { get; }
    protected IDictionary Dictionary { get; }
    public int Count { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    [NullableAttribute("2")]
private object System.Collections.IDictionary.Item { get; private set; }
    protected Hashtable get_InnerHashtable();
    protected IDictionary get_Dictionary();
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    public sealed virtual void Clear();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    [NullableContextAttribute("2")]
protected virtual object OnGet(object key, object currentValue);
    [NullableContextAttribute("2")]
protected virtual void OnSet(object key, object oldValue, object newValue);
    protected virtual void OnInsert(object key, object value);
    protected virtual void OnClear();
    protected virtual void OnRemove(object key, object value);
    protected virtual void OnValidate(object key, object value);
    [NullableContextAttribute("2")]
protected virtual void OnSetComplete(object key, object oldValue, object newValue);
    protected virtual void OnInsertComplete(object key, object value);
    protected virtual void OnClearComplete();
    protected virtual void OnRemoveComplete(object key, object value);
}
[DebuggerDisplayAttribute("{_value}")]
internal class System.Collections.KeyValuePairs : object {
    [DebuggerBrowsableAttribute("0")]
private object _key;
    [DebuggerBrowsableAttribute("0")]
private object _value;
    public KeyValuePairs(object key, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerTypeProxyAttribute("System.Collections.Queue/QueueDebugView")]
[DebuggerDisplayAttribute("Count = {Count}")]
[TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Collections.Queue : object {
    private Object[] _array;
    private int _head;
    private int _tail;
    private int _size;
    private int _growFactor;
    private int _version;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public Queue(int capacity);
    public Queue(int capacity, float growFactor);
    public Queue(ICollection col);
    public virtual int get_Count();
    public virtual object Clone();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual void Clear();
    public virtual void CopyTo(Array array, int index);
    [NullableContextAttribute("2")]
public virtual void Enqueue(object obj);
    public virtual IEnumerator GetEnumerator();
    [NullableContextAttribute("2")]
public virtual object Dequeue();
    [NullableContextAttribute("2")]
public virtual object Peek();
    public static Queue Synchronized(Queue queue);
    [NullableContextAttribute("2")]
public virtual bool Contains(object obj);
    internal object GetElement(int i);
    public virtual Object[] ToArray();
    private void SetCapacity(int capacity);
    public virtual void TrimToSize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.Collections.ReadOnlyCollectionBase : object {
    private ArrayList _list;
    protected ArrayList InnerList { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList get_InnerList();
    public virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("System.Collections.SortedList/SortedListDebugView")]
[DebuggerDisplayAttribute("Count = {Count}")]
[TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Collections.SortedList : object {
    private Object[] keys;
    private Object[] values;
    private int _size;
    private int version;
    private IComparer comparer;
    private KeyList keyList;
    private ValueList valueList;
    public int Capacity { get; public set; }
    public int Count { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public bool IsReadOnly { get; }
    public bool IsFixedSize { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    public SortedList(int initialCapacity);
    [NullableContextAttribute("2")]
public SortedList(IComparer comparer);
    [NullableContextAttribute("2")]
public SortedList(IComparer comparer, int capacity);
    public SortedList(IDictionary d);
    public SortedList(IDictionary d, IComparer comparer);
    public virtual void Add(object key, object value);
    public virtual int get_Capacity();
    public virtual void set_Capacity(int value);
    public virtual int get_Count();
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual void Clear();
    public virtual object Clone();
    public virtual bool Contains(object key);
    public virtual bool ContainsKey(object key);
    [NullableContextAttribute("2")]
public virtual bool ContainsValue(object value);
    public virtual void CopyTo(Array array, int arrayIndex);
    internal virtual KeyValuePairs[] ToKeyValuePairsArray();
    private void EnsureCapacity(int min);
    [NullableContextAttribute("2")]
public virtual object GetByIndex(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IDictionaryEnumerator GetEnumerator();
    public virtual object GetKey(int index);
    public virtual IList GetKeyList();
    public virtual IList GetValueList();
    public virtual object get_Item(object key);
    public virtual void set_Item(object key, object value);
    public virtual int IndexOfKey(object key);
    [NullableContextAttribute("2")]
public virtual int IndexOfValue(object value);
    private void Insert(int index, object key, object value);
    public virtual void RemoveAt(int index);
    public virtual void Remove(object key);
    [NullableContextAttribute("2")]
public virtual void SetByIndex(int index, object value);
    public static SortedList Synchronized(SortedList list);
    public virtual void TrimToSize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Collections.Specialized.CollectionsUtil : object {
    public static Hashtable CreateCaseInsensitiveHashtable();
    public static Hashtable CreateCaseInsensitiveHashtable(int capacity);
    public static Hashtable CreateCaseInsensitiveHashtable(IDictionary d);
    public static SortedList CreateCaseInsensitiveSortedList();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerTypeProxyAttribute("System.Collections.Stack/StackDebugView")]
[DebuggerDisplayAttribute("Count = {Count}")]
[TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Collections.Stack : object {
    private Object[] _array;
    private int _size;
    private int _version;
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public Stack(int initialCapacity);
    public Stack(ICollection col);
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual void Clear();
    public virtual object Clone();
    [NullableContextAttribute("2")]
public virtual bool Contains(object obj);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    [NullableContextAttribute("2")]
public virtual object Peek();
    [NullableContextAttribute("2")]
public virtual object Pop();
    [NullableContextAttribute("2")]
public virtual void Push(object obj);
    public static Stack Synchronized(Stack stack);
    public virtual Object[] ToArray();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_AddingDuplicate_OldAndNewKeys { get; }
    internal static string Arg_ArrayPlusOffTooSmall { get; }
    internal static string Arg_RankMultiDimNotSupported { get; }
    internal static string Arg_RemoveArgNotFound { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string ArgumentOutOfRange_IndexMustBeLess { get; }
    internal static string ArgumentOutOfRange_IndexMustBeLessOrEqual { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_SmallCapacity { get; }
    internal static string ArgumentOutOfRange_QueueGrowFactor { get; }
    internal static string InvalidOperation_EmptyQueue { get; }
    internal static string InvalidOperation_EmptyStack { get; }
    internal static string InvalidOperation_EnumEnded { get; }
    internal static string InvalidOperation_EnumFailedVersion { get; }
    internal static string InvalidOperation_EnumNotStarted { get; }
    internal static string InvalidOperation_EnumOpCantHappen { get; }
    internal static string NotSupported_KeyCollectionSet { get; }
    internal static string NotSupported_SortedListNestedWrite { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_AddingDuplicate_OldAndNewKeys();
    internal static string get_Arg_ArrayPlusOffTooSmall();
    internal static string get_Arg_RankMultiDimNotSupported();
    internal static string get_Arg_RemoveArgNotFound();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_ArgumentOutOfRange_IndexMustBeLess();
    internal static string get_ArgumentOutOfRange_IndexMustBeLessOrEqual();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_SmallCapacity();
    internal static string get_ArgumentOutOfRange_QueueGrowFactor();
    internal static string get_InvalidOperation_EmptyQueue();
    internal static string get_InvalidOperation_EmptyStack();
    internal static string get_InvalidOperation_EnumEnded();
    internal static string get_InvalidOperation_EnumFailedVersion();
    internal static string get_InvalidOperation_EnumNotStarted();
    internal static string get_InvalidOperation_EnumOpCantHappen();
    internal static string get_NotSupported_KeyCollectionSet();
    internal static string get_NotSupported_SortedListNestedWrite();
}
