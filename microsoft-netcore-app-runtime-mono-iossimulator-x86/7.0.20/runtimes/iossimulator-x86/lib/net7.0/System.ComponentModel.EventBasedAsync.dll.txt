internal static class FxResources.System.ComponentModel.EventBasedAsync.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.AsyncCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Cancelled>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private object <UserState>k__BackingField;
    public bool Cancelled { get; }
    public Exception Error { get; }
    public object UserState { get; }
    public AsyncCompletedEventArgs(Exception error, bool cancelled, object userState);
    protected void RaiseExceptionIfNecessary();
    [CompilerGeneratedAttribute]
public bool get_Cancelled();
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public object get_UserState();
}
public class System.ComponentModel.AsyncCompletedEventHandler : MulticastDelegate {
    public AsyncCompletedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, AsyncCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AsyncCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ComponentModel.AsyncOperation : object {
    private SynchronizationContext _syncContext;
    private bool _alreadyCompleted;
    [CompilerGeneratedAttribute]
private object <UserSuppliedState>k__BackingField;
    [NullableAttribute("2")]
public object UserSuppliedState { get; }
    public SynchronizationContext SynchronizationContext { get; }
    private AsyncOperation(object userSuppliedState, SynchronizationContext syncContext);
    protected virtual override void Finalize();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_UserSuppliedState();
    public SynchronizationContext get_SynchronizationContext();
    public void Post(SendOrPostCallback d, object arg);
    public void PostOperationCompleted(SendOrPostCallback d, object arg);
    public void OperationCompleted();
    private void PostCore(SendOrPostCallback d, object arg, bool markCompleted);
    private void OperationCompletedCore();
    private void VerifyNotCompleted();
    internal static AsyncOperation CreateOperation(object userSuppliedState, SynchronizationContext syncContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.ComponentModel.AsyncOperationManager : object {
    [EditorBrowsableAttribute("2")]
public static SynchronizationContext SynchronizationContext { get; public set; }
    public static AsyncOperation CreateOperation(object userSuppliedState);
    public static SynchronizationContext get_SynchronizationContext();
    public static void set_SynchronizationContext(SynchronizationContext value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.BackgroundWorker : Component {
    private bool _canCancelWorker;
    private bool _workerReportsProgress;
    private bool _cancellationPending;
    private bool _isRunning;
    private AsyncOperation _asyncOperation;
    private SendOrPostCallback _operationCompleted;
    private SendOrPostCallback _progressReporter;
    [CompilerGeneratedAttribute]
private DoWorkEventHandler DoWork;
    [CompilerGeneratedAttribute]
private ProgressChangedEventHandler ProgressChanged;
    [CompilerGeneratedAttribute]
private RunWorkerCompletedEventHandler RunWorkerCompleted;
    public bool CancellationPending { get; }
    public bool IsBusy { get; }
    public bool WorkerReportsProgress { get; public set; }
    public bool WorkerSupportsCancellation { get; public set; }
    private void AsyncOperationCompleted(object arg);
    public bool get_CancellationPending();
    public void CancelAsync();
    [CompilerGeneratedAttribute]
public void add_DoWork(DoWorkEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DoWork(DoWorkEventHandler value);
    public bool get_IsBusy();
    [NullableContextAttribute("1")]
protected virtual void OnDoWork(DoWorkEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnRunWorkerCompleted(RunWorkerCompletedEventArgs e);
    [NullableContextAttribute("1")]
protected virtual void OnProgressChanged(ProgressChangedEventArgs e);
    [CompilerGeneratedAttribute]
public void add_ProgressChanged(ProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ProgressChanged(ProgressChangedEventHandler value);
    private void ProgressReporter(object arg);
    public void ReportProgress(int percentProgress);
    public void ReportProgress(int percentProgress, object userState);
    public void RunWorkerAsync();
    public void RunWorkerAsync(object argument);
    [CompilerGeneratedAttribute]
public void add_RunWorkerCompleted(RunWorkerCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RunWorkerCompleted(RunWorkerCompletedEventHandler value);
    public bool get_WorkerReportsProgress();
    public void set_WorkerReportsProgress(bool value);
    public bool get_WorkerSupportsCancellation();
    public void set_WorkerSupportsCancellation(bool value);
    private void WorkerThreadStart(object argument);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.DoWorkEventArgs : CancelEventArgs {
    [CompilerGeneratedAttribute]
private object <Argument>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Result>k__BackingField;
    public object Argument { get; }
    public object Result { get; public set; }
    public DoWorkEventArgs(object argument);
    [CompilerGeneratedAttribute]
public object get_Argument();
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(object value);
}
public class System.ComponentModel.DoWorkEventHandler : MulticastDelegate {
    public DoWorkEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, DoWorkEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DoWorkEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.ProgressChangedEventArgs : EventArgs {
    private int _progressPercentage;
    private object _userState;
    public int ProgressPercentage { get; }
    public object UserState { get; }
    public ProgressChangedEventArgs(int progressPercentage, object userState);
    public int get_ProgressPercentage();
    public object get_UserState();
}
public class System.ComponentModel.ProgressChangedEventHandler : MulticastDelegate {
    public ProgressChangedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, ProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.ComponentModel.RunWorkerCompletedEventArgs : AsyncCompletedEventArgs {
    private object _result;
    public object Result { get; }
    [EditorBrowsableAttribute("1")]
public object UserState { get; }
    public RunWorkerCompletedEventArgs(object result, Exception error, bool cancelled);
    public object get_Result();
    public object get_UserState();
}
public class System.ComponentModel.RunWorkerCompletedEventHandler : MulticastDelegate {
    public RunWorkerCompletedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, RunWorkerCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RunWorkerCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Async_OperationAlreadyCompleted { get; }
    internal static string Async_OperationCancelled { get; }
    internal static string Async_ExceptionOccurred { get; }
    internal static string BackgroundWorker_WorkerAlreadyRunning { get; }
    internal static string BackgroundWorker_WorkerDoesntReportProgress { get; }
    internal static string BackgroundWorker_WorkerDoesntSupportCancellation { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Async_OperationAlreadyCompleted();
    internal static string get_Async_OperationCancelled();
    internal static string get_Async_ExceptionOccurred();
    internal static string get_BackgroundWorker_WorkerAlreadyRunning();
    internal static string get_BackgroundWorker_WorkerDoesntReportProgress();
    internal static string get_BackgroundWorker_WorkerDoesntSupportCancellation();
}
