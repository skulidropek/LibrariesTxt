internal static class FxResources.System.IO.IsolatedStorage.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.IO.IsolatedStorage.Helper : object {
    private static string s_machineRootDirectory;
    private static string s_roamingUserRootDirectory;
    private static string s_userRootDirectory;
    internal static string GetRootDirectory(IsolatedStorageScope scope);
    internal static bool IsMachine(IsolatedStorageScope scope);
    internal static bool IsAssembly(IsolatedStorageScope scope);
    internal static bool IsApplication(IsolatedStorageScope scope);
    internal static bool IsRoaming(IsolatedStorageScope scope);
    internal static bool IsDomain(IsolatedStorageScope scope);
    internal static string GetDataDirectory(IsolatedStorageScope scope);
    [UnconditionalSuppressMessageAttribute("SingleFile", "IL3000:Avoid accessing Assembly file path when publishing as a single file")]
internal static void GetDefaultIdentityAndHash(Object& identity, String& hash, char separator);
    internal static string GetRandomDirectory(string rootDirectory, IsolatedStorageScope scope);
    internal static string GetExistingRandomDirectory(string rootDirectory);
    private static Mutex CreateMutexNotOwned(string pathName);
    internal static void CreateDirectory(string path, IsolatedStorageScope scope);
}
[NullableContextAttribute("1")]
public interface System.IO.IsolatedStorage.INormalizeForIsolatedStorage {
    public abstract virtual object Normalize();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.IO.IsolatedStorage.IsolatedStorage : MarshalByRefObject {
    private ulong _quota;
    private bool _validQuota;
    private object _applicationIdentity;
    private object _assemblyIdentity;
    private object _domainIdentity;
    [CompilerGeneratedAttribute]
private IsolatedStorageScope <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <IdentityHash>k__BackingField;
    public object ApplicationIdentity { get; }
    public object AssemblyIdentity { get; }
    public object DomainIdentity { get; }
    [CLSCompliantAttribute("False")]
[ObsoleteAttribute("IsolatedStorage.CurrentSize has been deprecated because it is not CLS Compliant. To get the current size use IsolatedStorage.UsedSize instead.")]
public ulong CurrentSize { get; }
    public long UsedSize { get; }
    public long AvailableFreeSpace { get; }
    [CLSCompliantAttribute("False")]
[ObsoleteAttribute("IsolatedStorage.MaximumSize has been deprecated because it is not CLS Compliant. To get the maximum size use IsolatedStorage.Quota instead.")]
public ulong MaximumSize { get; }
    public long Quota { get; }
    public IsolatedStorageScope Scope { get; private set; }
    protected char SeparatorExternal { get; }
    protected char SeparatorInternal { get; }
    [NullableAttribute("2")]
unknown string IdentityHash {private set; }
    public object get_ApplicationIdentity();
    public object get_AssemblyIdentity();
    public object get_DomainIdentity();
    public virtual ulong get_CurrentSize();
    public virtual long get_UsedSize();
    public virtual long get_AvailableFreeSpace();
    public virtual ulong get_MaximumSize();
    public virtual long get_Quota();
    [CompilerGeneratedAttribute]
public IsolatedStorageScope get_Scope();
    [CompilerGeneratedAttribute]
private void set_Scope(IsolatedStorageScope value);
    protected virtual char get_SeparatorExternal();
    protected virtual char get_SeparatorInternal();
    public virtual bool IncreaseQuotaTo(long newQuotaSize);
    public abstract virtual void Remove();
    [CompilerGeneratedAttribute]
private void set_IdentityHash(string value);
    protected void InitStore(IsolatedStorageScope scope, Type appEvidenceType);
    [NullableContextAttribute("2")]
protected void InitStore(IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType);
    private static void VerifyScope(IsolatedStorageScope scope);
}
[TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.IO.IsolatedStorage.IsolatedStorageException : Exception {
    internal Exception _underlyingException;
    [NullableContextAttribute("2")]
public IsolatedStorageException(string message);
    [NullableContextAttribute("2")]
public IsolatedStorageException(string message, Exception inner);
    [NullableContextAttribute("1")]
protected IsolatedStorageException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.IsolatedStorage.IsolatedStorageFile : IsolatedStorage {
    private bool _disposed;
    private bool _closed;
    private object _internalLock;
    private string _rootDirectory;
    private string RootDirectory { get; }
    internal bool Disposed { get; }
    internal bool IsDeleted { get; }
    public long AvailableFreeSpace { get; }
    [CLSCompliantAttribute("False")]
[ObsoleteAttribute("IsolatedStorageFile.MaximumSize has been deprecated because it is not CLS Compliant. To get the maximum size use IsolatedStorageFile.Quota instead.")]
public ulong MaximumSize { get; }
    public long Quota { get; }
    public long UsedSize { get; }
    [CLSCompliantAttribute("False")]
[ObsoleteAttribute("IsolatedStorageFile.CurrentSize has been deprecated because it is not CLS Compliant. To get the current size use IsolatedStorageFile.UsedSize instead.")]
public ulong CurrentSize { get; }
    public static bool IsEnabled { get; }
    internal IsolatedStorageFile(IsolatedStorageScope scope);
    private string get_RootDirectory();
    internal bool get_Disposed();
    internal bool get_IsDeleted();
    public void Close();
    public void DeleteFile(string file);
    public bool FileExists(string path);
    public bool DirectoryExists(string path);
    public void CreateDirectory(string dir);
    public void DeleteDirectory(string dir);
    public String[] GetFileNames();
    public String[] GetFileNames(string searchPattern);
    public String[] GetDirectoryNames();
    public String[] GetDirectoryNames(string searchPattern);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode, FileAccess access);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public IsolatedStorageFileStream CreateFile(string path);
    public DateTimeOffset GetCreationTime(string path);
    public DateTimeOffset GetLastAccessTime(string path);
    public DateTimeOffset GetLastWriteTime(string path);
    public void CopyFile(string sourceFileName, string destinationFileName);
    public void CopyFile(string sourceFileName, string destinationFileName, bool overwrite);
    public void MoveFile(string sourceFileName, string destinationFileName);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public static IEnumerator GetEnumerator(IsolatedStorageScope scope);
    public virtual long get_AvailableFreeSpace();
    public virtual ulong get_MaximumSize();
    public virtual long get_Quota();
    public virtual long get_UsedSize();
    public virtual ulong get_CurrentSize();
    public static IsolatedStorageFile GetUserStoreForApplication();
    public static IsolatedStorageFile GetUserStoreForAssembly();
    public static IsolatedStorageFile GetUserStoreForDomain();
    public static IsolatedStorageFile GetUserStoreForSite();
    public static IsolatedStorageFile GetMachineStoreForApplication();
    public static IsolatedStorageFile GetMachineStoreForAssembly();
    public static IsolatedStorageFile GetMachineStoreForDomain();
    private static IsolatedStorageFile GetStore(IsolatedStorageScope scope);
    public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, Type applicationEvidenceType);
    public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, object applicationIdentity);
    [NullableContextAttribute("2")]
public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType);
    [NullableContextAttribute("2")]
public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, object domainIdentity, object assemblyIdentity);
    internal string GetFullPath(string partialPath);
    internal void EnsureStoreIsValid();
    public sealed virtual void Dispose();
    internal static Exception GetIsolatedStorageException(string exceptionMsg, Exception rootCause);
    public virtual bool IncreaseQuotaTo(long newQuotaSize);
    public virtual void Remove();
    public static void Remove(IsolatedStorageScope scope);
    public static bool get_IsEnabled();
    private static void VerifyGlobalScope(IsolatedStorageScope scope);
    private bool ContainsUnknownFiles(string directory);
    private bool IsMatchingScopeDirectory(string directory);
    private static bool IsIdFile(string file);
    private static bool IsInfoFile(string file);
    private string GetIsolatedStorageRoot();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.IsolatedStorage.IsolatedStorageFileStream : FileStream {
    private FileStream _fs;
    private IsolatedStorageFile _isf;
    private string _givenPath;
    private string _fullPath;
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public bool IsAsync { get; }
    [ObsoleteAttribute("IsolatedStorageFileStream.Handle has been deprecated. Use IsolatedStorageFileStream's SafeFileHandle property instead.")]
public IntPtr Handle { get; }
    public SafeFileHandle SafeFileHandle { get; }
    public IsolatedStorageFileStream(string path, FileMode mode);
    public IsolatedStorageFileStream(string path, FileMode mode, IsolatedStorageFile isf);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, IsolatedStorageFile isf);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, IsolatedStorageFile isf);
    private IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, InitializationData initializationData);
    private static InitializationData InitializeFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, IsolatedStorageFile isf);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual bool get_IsAsync();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    public virtual void Flush();
    public virtual void Flush(bool flushToDisk);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
    public virtual IAsyncResult BeginRead(Byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);
    public virtual IAsyncResult BeginWrite(Byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual IntPtr get_Handle();
    [UnsupportedOSPlatformAttribute("macos")]
public virtual void Unlock(long position, long length);
    [UnsupportedOSPlatformAttribute("macos")]
public virtual void Lock(long position, long length);
    public virtual SafeFileHandle get_SafeFileHandle();
}
[FlagsAttribute]
public enum System.IO.IsolatedStorage.IsolatedStorageScope : Enum {
    public int value__;
    public static IsolatedStorageScope None;
    public static IsolatedStorageScope User;
    public static IsolatedStorageScope Domain;
    public static IsolatedStorageScope Assembly;
    public static IsolatedStorageScope Roaming;
    public static IsolatedStorageScope Machine;
    public static IsolatedStorageScope Application;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.Security.IdentityHelper : object {
    private static Char[] s_base32Char;
    private static IdentityHelper();
    internal static string GetNormalizedUriHash(Uri uri);
    internal static string GetNormalizedStrongNameHash(AssemblyName name);
    internal static string GetStrongHashSuitableForObjectName(string name);
    internal static string GetStrongHashSuitableForObjectName(Stream stream);
    internal static string ToBase32StringSuitableForDirName(Byte[] buff);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string IsolatedStorage_StoreNotOpen { get; }
    internal static string IsolatedStorage_Operation_ISFS { get; }
    internal static string IsolatedStorage_Path { get; }
    internal static string IsolatedStorage_FileOpenMode { get; }
    internal static string IsolatedStorage_Operation { get; }
    internal static string IsolatedStorage_DeleteFile { get; }
    internal static string IsolatedStorage_CreateDirectory { get; }
    internal static string IsolatedStorage_DeleteDirectory { get; }
    internal static string IsolatedStorage_Exception { get; }
    internal static string IsolatedStorage_Init { get; }
    internal static string IsolatedStorage_QuotaIsUndefined { get; }
    internal static string IsolatedStorage_NotValidOnDesktop { get; }
    internal static string PathNotFound_Path { get; }
    internal static string IsolatedStorage_ApplicationUndefined { get; }
    internal static string IsolatedStorage_AssemblyUndefined { get; }
    internal static string IsolatedStorage_CurrentSizeUndefined { get; }
    internal static string IsolatedStorage_DeleteDirectories { get; }
    internal static string IsolatedStorage_Scope_Invalid { get; }
    internal static string IsolatedStorage_Scope_U_R_M { get; }
    internal static string PlatformNotSupported_CAS { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_IsolatedStorage_StoreNotOpen();
    internal static string get_IsolatedStorage_Operation_ISFS();
    internal static string get_IsolatedStorage_Path();
    internal static string get_IsolatedStorage_FileOpenMode();
    internal static string get_IsolatedStorage_Operation();
    internal static string get_IsolatedStorage_DeleteFile();
    internal static string get_IsolatedStorage_CreateDirectory();
    internal static string get_IsolatedStorage_DeleteDirectory();
    internal static string get_IsolatedStorage_Exception();
    internal static string get_IsolatedStorage_Init();
    internal static string get_IsolatedStorage_QuotaIsUndefined();
    internal static string get_IsolatedStorage_NotValidOnDesktop();
    internal static string get_PathNotFound_Path();
    internal static string get_IsolatedStorage_ApplicationUndefined();
    internal static string get_IsolatedStorage_AssemblyUndefined();
    internal static string get_IsolatedStorage_CurrentSizeUndefined();
    internal static string get_IsolatedStorage_DeleteDirectories();
    internal static string get_IsolatedStorage_Scope_Invalid();
    internal static string get_IsolatedStorage_Scope_U_R_M();
    internal static string get_PlatformNotSupported_CAS();
}
