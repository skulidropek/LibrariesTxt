internal static class FxResources.System.IO.Pipes.SR : object {
}
internal static class Interop : object {
    private static void ThrowExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirError);
    internal static long CheckIo(long result, string path, bool isDirError);
    internal static int CheckIo(int result, string path, bool isDirError);
    internal static Exception GetExceptionForIoErrno(ErrorInfo errorInfo, string path, bool isDirError);
    internal static Exception GetIOException(ErrorInfo errorInfo, string path);
    [CompilerGeneratedAttribute]
internal static bool <GetExceptionForIoErrno>g__ParentDirectoryExists|11_0(string fullPath);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.Win32.SafeHandles.SafePipeHandle : SafeHandleZeroOrMinusOneIsInvalid {
    private Socket _pipeSocket;
    private SafeHandle _pipeSocketHandle;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    [NullableAttribute("1")]
internal Socket PipeSocket { get; }
    [NullableAttribute("2")]
internal SafeHandle PipeSocketHandle { get; }
    public bool IsInvalid { get; }
    public SafePipeHandle(IntPtr preexistingHandle, bool ownsHandle);
    internal SafePipeHandle(Socket namedPipeSocket);
    internal Socket get_PipeSocket();
    internal SafeHandle get_PipeSocketHandle();
    protected virtual void Dispose(bool disposing);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
    private Socket CreatePipeSocket(bool ownsHandle);
    private Socket SetPipeSocketInterlocked(Socket socket, bool ownsHandle);
    internal void SetHandle(IntPtr descriptor, bool ownsHandle);
}
internal static class System.IO.Error : object {
    internal static Exception GetPipeNotOpen();
    internal static Exception GetReadNotSupported();
    internal static Exception GetSeekNotSupported();
    internal static Exception GetWriteNotSupported();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipes.AnonymousPipeClientStream : PipeStream {
    public PipeTransmissionMode TransmissionMode { get; }
    unknown PipeTransmissionMode ReadMode {public set; }
    public AnonymousPipeClientStream(string pipeHandleAsString);
    public AnonymousPipeClientStream(PipeDirection direction, string pipeHandleAsString);
    public AnonymousPipeClientStream(PipeDirection direction, SafePipeHandle safePipeHandle);
    private void Init(PipeDirection direction, SafePipeHandle safePipeHandle);
    protected virtual override void Finalize();
    public virtual PipeTransmissionMode get_TransmissionMode();
    public virtual void set_ReadMode(PipeTransmissionMode value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipes.AnonymousPipeServerStream : PipeStream {
    private SafePipeHandle _clientHandle;
    private bool _clientHandleExposed;
    public SafePipeHandle ClientSafePipeHandle { get; }
    public PipeTransmissionMode TransmissionMode { get; }
    unknown PipeTransmissionMode ReadMode {public set; }
    public AnonymousPipeServerStream(PipeDirection direction);
    public AnonymousPipeServerStream(PipeDirection direction, HandleInheritability inheritability);
    public AnonymousPipeServerStream(PipeDirection direction, SafePipeHandle serverSafePipeHandle, SafePipeHandle clientSafePipeHandle);
    public AnonymousPipeServerStream(PipeDirection direction, HandleInheritability inheritability, int bufferSize);
    protected virtual override void Finalize();
    public string GetClientHandleAsString();
    public SafePipeHandle get_ClientSafePipeHandle();
    public void DisposeLocalCopyOfClientHandle();
    protected virtual void Dispose(bool disposing);
    public virtual PipeTransmissionMode get_TransmissionMode();
    public virtual void set_ReadMode(PipeTransmissionMode value);
    private void Create(PipeDirection direction, HandleInheritability inheritability, int bufferSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipes.NamedPipeClientStream : PipeStream {
    private string _normalizedPipePath;
    private TokenImpersonationLevel _impersonationLevel;
    private PipeOptions _pipeOptions;
    private HandleInheritability _inheritability;
    private PipeDirection _direction;
    [SupportedOSPlatformAttribute("windows")]
public int NumberOfServerInstances { get; }
    public int InBufferSize { get; }
    public int OutBufferSize { get; }
    public NamedPipeClientStream(string pipeName);
    public NamedPipeClientStream(string serverName, string pipeName);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction, PipeOptions options);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction, PipeOptions options, TokenImpersonationLevel impersonationLevel);
    public NamedPipeClientStream(string serverName, string pipeName, PipeDirection direction, PipeOptions options, TokenImpersonationLevel impersonationLevel, HandleInheritability inheritability);
    public NamedPipeClientStream(PipeDirection direction, bool isAsync, bool isConnected, SafePipeHandle safePipeHandle);
    protected virtual override void Finalize();
    public void Connect();
    public void Connect(int timeout);
    public void Connect(TimeSpan timeout);
    private void ConnectInternal(int timeout, CancellationToken cancellationToken, int startTime);
    public Task ConnectAsync();
    public Task ConnectAsync(int timeout);
    public Task ConnectAsync(CancellationToken cancellationToken);
    public Task ConnectAsync(int timeout, CancellationToken cancellationToken);
    public Task ConnectAsync(TimeSpan timeout, CancellationToken cancellationToken);
    private static int ToTimeoutMilliseconds(TimeSpan timeout);
    protected internal virtual void CheckPipePropertyOperations();
    private void CheckConnectOperationsClient();
    private bool TryConnect(int timeout, CancellationToken cancellationToken);
    public int get_NumberOfServerInstances();
    public virtual int get_InBufferSize();
    public virtual int get_OutBufferSize();
    private void ValidateRemotePipeUser(SafePipeHandle handle);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.Pipes.NamedPipeServerStream : PipeStream {
    public static int MaxAllowedServerInstances;
    private SharedServer _instance;
    private PipeDirection _direction;
    private PipeOptions _options;
    private int _inBufferSize;
    private int _outBufferSize;
    private HandleInheritability _inheritability;
    private CancellationTokenSource _internalTokenSource;
    public int InBufferSize { get; }
    public int OutBufferSize { get; }
    public NamedPipeServerStream(string pipeName);
    public NamedPipeServerStream(string pipeName, PipeDirection direction);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options);
    public NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize);
    private NamedPipeServerStream(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, HandleInheritability inheritability);
    public NamedPipeServerStream(PipeDirection direction, bool isAsync, bool isConnected, SafePipeHandle safePipeHandle);
    private void ValidateParameters(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, HandleInheritability inheritability);
    protected virtual override void Finalize();
    public Task WaitForConnectionAsync();
    [NullableContextAttribute("2")]
public IAsyncResult BeginWaitForConnection(AsyncCallback callback, object state);
    public void EndWaitForConnection(IAsyncResult asyncResult);
    private void CheckConnectOperationsServer();
    private void CheckDisconnectOperations();
    private void Create(string pipeName, PipeDirection direction, int maxNumberOfServerInstances, PipeTransmissionMode transmissionMode, PipeOptions options, int inBufferSize, int outBufferSize, HandleInheritability inheritability);
    public void WaitForConnection();
    public Task WaitForConnectionAsync(CancellationToken cancellationToken);
    private void HandleAcceptedSocket(Socket acceptedSocket);
    internal virtual void DisposeCore(bool disposing);
    public void Disconnect();
    public string GetImpersonationUserName();
    public virtual int get_InBufferSize();
    public virtual int get_OutBufferSize();
    public void RunAsClient(PipeStreamImpersonationWorker impersonationWorker);
}
public enum System.IO.Pipes.PipeDirection : Enum {
    public int value__;
    public static PipeDirection In;
    public static PipeDirection Out;
    public static PipeDirection InOut;
}
[FlagsAttribute]
public enum System.IO.Pipes.PipeOptions : Enum {
    public int value__;
    public static PipeOptions None;
    public static PipeOptions WriteThrough;
    public static PipeOptions Asynchronous;
    public static PipeOptions CurrentUserOnly;
}
internal enum System.IO.Pipes.PipeState : Enum {
    public int value__;
    public static PipeState WaitingToConnect;
    public static PipeState Connected;
    public static PipeState Broken;
    public static PipeState Disconnected;
    public static PipeState Closed;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class System.IO.Pipes.PipeStream : Stream {
    private SafePipeHandle _handle;
    private bool _canRead;
    private bool _canWrite;
    private bool _isAsync;
    private bool _isCurrentUserOnly;
    private bool _isMessageComplete;
    private bool _isFromExistingHandle;
    private bool _isHandleExposed;
    private PipeTransmissionMode _readMode;
    private PipeTransmissionMode _transmissionMode;
    private PipeDirection _pipeDirection;
    private UInt32 _outBufferSize;
    private PipeState _state;
    private static Char[] s_invalidFileNameChars;
    private static Char[] s_invalidPathNameChars;
    private static string s_pipePrefix;
    public bool IsConnected { get; protected set; }
    public bool IsAsync { get; }
    public bool IsMessageComplete { get; }
    public SafePipeHandle SafePipeHandle { get; }
    [NullableAttribute("2")]
internal SafePipeHandle InternalHandle { get; }
    protected bool IsHandleExposed { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal PipeState State { get; internal set; }
    internal bool IsCurrentUserOnly { get; internal set; }
    public PipeTransmissionMode TransmissionMode { get; }
    public int InBufferSize { get; }
    public int OutBufferSize { get; }
    public PipeTransmissionMode ReadMode { get; public set; }
    protected PipeStream(PipeDirection direction, int bufferSize);
    protected PipeStream(PipeDirection direction, PipeTransmissionMode transmissionMode, int outBufferSize);
    private static PipeStream();
    private void Init(PipeDirection direction, PipeTransmissionMode transmissionMode, UInt32 outBufferSize);
    [NullableContextAttribute("2")]
protected void InitializeHandle(SafePipeHandle handle, bool isExposed, bool isAsync);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public bool get_IsConnected();
    protected void set_IsConnected(bool value);
    public bool get_IsAsync();
    public bool get_IsMessageComplete();
    internal void UpdateMessageCompletion(bool completion);
    public SafePipeHandle get_SafePipeHandle();
    internal SafePipeHandle get_InternalHandle();
    protected bool get_IsHandleExposed();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void SetLength(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    protected internal virtual void CheckPipePropertyOperations();
    protected internal void CheckReadOperations();
    protected internal void CheckWriteOperations();
    internal PipeState get_State();
    internal void set_State(PipeState value);
    internal bool get_IsCurrentUserOnly();
    internal void set_IsCurrentUserOnly(bool value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> buffer);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void Write(Byte[] buffer, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    internal static string GetPipePath(string serverName, string pipeName);
    internal void ValidateHandleIsPipe(SafePipeHandle safePipeHandle);
    internal virtual void DisposeCore(bool disposing);
    private int ReadCore(Span`1<byte> buffer);
    private void WriteCore(ReadOnlySpan`1<byte> buffer);
    [AsyncStateMachineAttribute("System.IO.Pipes.PipeStream/<ReadAsyncCore>d__82")]
private ValueTask`1<int> ReadAsyncCore(Memory`1<byte> destination, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.Pipes.PipeStream/<WriteAsyncCore>d__83")]
private Task WriteAsyncCore(ReadOnlyMemory`1<byte> source, CancellationToken cancellationToken);
    private IOException GetIOExceptionForSocketException(SocketException e);
    [SupportedOSPlatformAttribute("windows")]
public void WaitForPipeDrain();
    public virtual PipeTransmissionMode get_TransmissionMode();
    public virtual int get_InBufferSize();
    public virtual int get_OutBufferSize();
    public virtual PipeTransmissionMode get_ReadMode();
    public virtual void set_ReadMode(PipeTransmissionMode value);
    internal static void CreateAnonymousPipe(SafePipeHandle& reader, SafePipeHandle& writer);
    private int CheckPipeCall(int result);
    private int GetPipeBufferSize();
    internal static void ConfigureSocket(Socket s, SafePipeHandle pipeHandle, PipeDirection direction, int inBufferSize, int outBufferSize, HandleInheritability inheritability);
    internal static Exception CreateExceptionForLastError(string pipeName);
}
public class System.IO.Pipes.PipeStreamImpersonationWorker : MulticastDelegate {
    public PipeStreamImpersonationWorker(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.IO.Pipes.PipeTransmissionMode : Enum {
    public int value__;
    public static PipeTransmissionMode Byte;
    [SupportedOSPlatformAttribute("windows")]
public static PipeTransmissionMode Message;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string Argument_EmptyServerName { get; }
    internal static string Argument_InvalidHandle { get; }
    internal static string ArgumentOutOfRange_AnonymousReserved { get; }
    internal static string ArgumentOutOfRange_TransmissionModeByteOrMsg { get; }
    internal static string ArgumentOutOfRange_DirectionModeInOutOrInOut { get; }
    internal static string ArgumentOutOfRange_ImpersonationInvalid { get; }
    internal static string ArgumentOutOfRange_OptionsInvalid { get; }
    internal static string ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable { get; }
    internal static string ArgumentOutOfRange_InvalidTimeout { get; }
    internal static string ArgumentOutOfRange_MaxNumServerInstances { get; }
    internal static string InvalidOperation_PipeNotYetConnected { get; }
    internal static string InvalidOperation_PipeDisconnected { get; }
    internal static string InvalidOperation_PipeHandleNotSet { get; }
    internal static string InvalidOperation_PipeReadModeNotMessage { get; }
    internal static string InvalidOperation_PipeAlreadyConnected { get; }
    internal static string InvalidOperation_PipeAlreadyDisconnected { get; }
    internal static string IO_FileNotFound { get; }
    internal static string IO_FileNotFound_FileName { get; }
    internal static string IO_FileExists_Name { get; }
    internal static string IO_SharingViolation_File { get; }
    internal static string IO_SharingViolation_NoFileName { get; }
    internal static string IO_PipeBroken { get; }
    internal static string IO_InvalidPipeHandle { get; }
    internal static string IO_PathNotFound_Path { get; }
    internal static string IO_PathNotFound_NoPathName { get; }
    internal static string IO_PathTooLong { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnseekableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string NotSupported_AnonymousPipeUnidirectional { get; }
    internal static string NotSupported_AnonymousPipeMessagesNotSupported { get; }
    internal static string ObjectDisposed_PipeClosed { get; }
    internal static string UnauthorizedAccess_IODenied_Path { get; }
    internal static string UnauthorizedAccess_IODenied_NoPathName { get; }
    internal static string ArgumentOutOfRange_FileLengthTooBig { get; }
    internal static string PlatformNotSupported_MessageTransmissionMode { get; }
    internal static string PlatformNotSupported_RemotePipes { get; }
    internal static string PlatformNotSupported_InvalidPipeNameChars { get; }
    internal static string PlatformNotSupported_OperatingSystemError { get; }
    internal static string IO_AllPipeInstancesAreBusy { get; }
    internal static string IO_PathTooLong_Path { get; }
    internal static string UnauthorizedAccess_NotOwnedByCurrentUser { get; }
    internal static string UnauthorizedAccess_ClientIsNotCurrentUser { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_Argument_EmptyServerName();
    internal static string get_Argument_InvalidHandle();
    internal static string get_ArgumentOutOfRange_AnonymousReserved();
    internal static string get_ArgumentOutOfRange_TransmissionModeByteOrMsg();
    internal static string get_ArgumentOutOfRange_DirectionModeInOutOrInOut();
    internal static string get_ArgumentOutOfRange_ImpersonationInvalid();
    internal static string get_ArgumentOutOfRange_OptionsInvalid();
    internal static string get_ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable();
    internal static string get_ArgumentOutOfRange_InvalidTimeout();
    internal static string get_ArgumentOutOfRange_MaxNumServerInstances();
    internal static string get_InvalidOperation_PipeNotYetConnected();
    internal static string get_InvalidOperation_PipeDisconnected();
    internal static string get_InvalidOperation_PipeHandleNotSet();
    internal static string get_InvalidOperation_PipeReadModeNotMessage();
    internal static string get_InvalidOperation_PipeAlreadyConnected();
    internal static string get_InvalidOperation_PipeAlreadyDisconnected();
    internal static string get_IO_FileNotFound();
    internal static string get_IO_FileNotFound_FileName();
    internal static string get_IO_FileExists_Name();
    internal static string get_IO_SharingViolation_File();
    internal static string get_IO_SharingViolation_NoFileName();
    internal static string get_IO_PipeBroken();
    internal static string get_IO_InvalidPipeHandle();
    internal static string get_IO_PathNotFound_Path();
    internal static string get_IO_PathNotFound_NoPathName();
    internal static string get_IO_PathTooLong();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnseekableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_NotSupported_AnonymousPipeUnidirectional();
    internal static string get_NotSupported_AnonymousPipeMessagesNotSupported();
    internal static string get_ObjectDisposed_PipeClosed();
    internal static string get_UnauthorizedAccess_IODenied_Path();
    internal static string get_UnauthorizedAccess_IODenied_NoPathName();
    internal static string get_ArgumentOutOfRange_FileLengthTooBig();
    internal static string get_PlatformNotSupported_MessageTransmissionMode();
    internal static string get_PlatformNotSupported_RemotePipes();
    internal static string get_PlatformNotSupported_InvalidPipeNameChars();
    internal static string get_PlatformNotSupported_OperatingSystemError();
    internal static string get_IO_AllPipeInstancesAreBusy();
    internal static string get_IO_PathTooLong_Path();
    internal static string get_UnauthorizedAccess_NotOwnedByCurrentUser();
    internal static string get_UnauthorizedAccess_ClientIsNotCurrentUser();
}
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    public static Task GetTask(IAsyncResult asyncResult);
    [DoesNotReturnAttribute]
private static void ThrowArgumentException(IAsyncResult asyncResult);
}
