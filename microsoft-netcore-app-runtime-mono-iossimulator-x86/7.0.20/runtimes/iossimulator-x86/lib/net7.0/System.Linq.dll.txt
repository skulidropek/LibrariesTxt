internal static class FxResources.System.Linq.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DefaultMemberAttribute("Item")]
internal class System.Collections.Generic.ArrayBuilder`1 : ValueType {
    private T[] _array;
    private int _count;
    public int Capacity { get; }
    public int get_Capacity();
    public void Add(T item);
    public T[] ToArray();
    public void UncheckedAdd(T item);
    private void EnsureCapacity(int minimum);
}
internal static class System.Collections.Generic.EnumerableHelpers : object {
    internal static T[] ToArray(IEnumerable`1<T> source, Int32& length);
    internal static T[] ToArray(IEnumerable`1<T> source);
}
internal class System.Collections.Generic.LargeArrayBuilder`1 : ValueType {
    private ArrayBuilder`1<T> _builder;
    public void AddRange(IEnumerable`1<T> items);
    public T[] ToArray();
}
[IsReadOnlyAttribute]
internal class System.Linq.Buffer`1 : ValueType {
    internal TElement[] _items;
    internal int _count;
    internal Buffer`1(IEnumerable`1<TElement> source);
}
internal abstract class System.Linq.CachingComparer`1 : object {
    internal abstract virtual int Compare(TElement element, bool cacheLower);
    internal abstract virtual void SetElement(TElement element);
}
internal class System.Linq.CachingComparer`2 : CachingComparer`1<TElement> {
    protected Func`2<TElement, TKey> _keySelector;
    protected IComparer`1<TKey> _comparer;
    protected bool _descending;
    protected TKey _lastKey;
    public CachingComparer`2(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
    internal virtual int Compare(TElement element, bool cacheLower);
    internal virtual void SetElement(TElement element);
}
internal class System.Linq.CachingComparerWithChild`2 : CachingComparer`2<TElement, TKey> {
    private CachingComparer`1<TElement> _child;
    public CachingComparerWithChild`2(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending, CachingComparer`1<TElement> child);
    internal virtual int Compare(TElement element, bool cacheLower);
    internal virtual void SetElement(TElement element);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Linq.Enumerable : object {
    public static IEnumerable`1<TResult> Empty();
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SkipIterator>d__1`1")]
private static IEnumerable`1<TSource> SkipIterator(IEnumerable`1<TSource> source, int count);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<TakeIterator>d__2`1")]
private static IEnumerable`1<TSource> TakeIterator(IEnumerable`1<TSource> source, int count);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<TakeRangeIterator>d__3`1")]
private static IEnumerable`1<TSource> TakeRangeIterator(IEnumerable`1<TSource> source, int startIndex, int endIndex);
    [ExtensionAttribute]
public static TSource Aggregate(IEnumerable`1<TSource> source, Func`3<TSource, TSource, TSource> func);
    [ExtensionAttribute]
public static TAccumulate Aggregate(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func);
    [ExtensionAttribute]
public static TResult Aggregate(IEnumerable`1<TSource> source, TAccumulate seed, Func`3<TAccumulate, TSource, TAccumulate> func, Func`2<TAccumulate, TResult> resultSelector);
    [ExtensionAttribute]
public static bool Any(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static bool Any(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static bool All(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Append(IEnumerable`1<TSource> source, TSource element);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Prepend(IEnumerable`1<TSource> source, TSource element);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<int> source);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<long> source);
    [ExtensionAttribute]
public static float Average(IEnumerable`1<float> source);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<double> source);
    [ExtensionAttribute]
public static decimal Average(IEnumerable`1<decimal> source);
    [ExtensionAttribute]
private static TResult Average(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static Nullable`1<float> Average(IEnumerable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Average(IEnumerable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
private static Nullable`1<TResult> Average(IEnumerable`1<Nullable`1<TSource>> source);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static float Average(IEnumerable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static double Average(IEnumerable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static decimal Average(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
private static TResult Average(IEnumerable`1<TSource> source, Func`2<TSource, TSelector> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static Nullable`1<float> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
private static Nullable`1<TResult> Average(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<TSelector>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> OfType(IEnumerable source);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<OfTypeIterator>d__40`1")]
private static IEnumerable`1<TResult> OfTypeIterator(IEnumerable source);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Cast(IEnumerable source);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<CastIterator>d__42`1")]
private static IEnumerable`1<TResult> CastIterator(IEnumerable source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource[]> Chunk(IEnumerable`1<TSource> source, int size);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<ChunkIterator>d__44`1")]
private static IEnumerable`1<TSource[]> ChunkIterator(IEnumerable`1<TSource> source, int size);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Concat(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static bool Contains(IEnumerable`1<TSource> source, TSource value);
    [ExtensionAttribute]
public static bool Contains(IEnumerable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static int Count(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static int Count(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static bool TryGetNonEnumeratedCount(IEnumerable`1<TSource> source, Int32& count);
    [ExtensionAttribute]
public static long LongCount(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static long LongCount(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DefaultIfEmpty(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DefaultIfEmpty(IEnumerable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Distinct(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Distinct(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> DistinctBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<DistinctByIterator>d__63`2")]
private static IEnumerable`1<TSource> DistinctByIterator(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static TSource ElementAt(IEnumerable`1<TSource> source, int index);
    [ExtensionAttribute]
public static TSource ElementAt(IEnumerable`1<TSource> source, Index index);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource ElementAtOrDefault(IEnumerable`1<TSource> source, int index);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource ElementAtOrDefault(IEnumerable`1<TSource> source, Index index);
    private static bool TryGetElement(IEnumerable`1<TSource> source, int index, TSource& element);
    private static bool TryGetElementFromEnd(IEnumerable`1<TSource> source, int indexFromEnd, TSource& element);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> AsEnumerable(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
private static bool TryGetSpan(IEnumerable`1<TSource> source, ReadOnlySpan`1& span);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Except(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> ExceptBy(IEnumerable`1<TSource> first, IEnumerable`1<TKey> second, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> ExceptBy(IEnumerable`1<TSource> first, IEnumerable`1<TKey> second, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<ExceptIterator>d__77`1")]
private static IEnumerable`1<TSource> ExceptIterator(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<ExceptByIterator>d__78`2")]
private static IEnumerable`1<TSource> ExceptByIterator(IEnumerable`1<TSource> first, IEnumerable`1<TKey> second, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static TSource First(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource First(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource FirstOrDefault(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource FirstOrDefault(IEnumerable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
public static TSource FirstOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static TSource FirstOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, TSource defaultValue);
    [ExtensionAttribute]
private static TSource TryGetFirst(IEnumerable`1<TSource> source, Boolean& found);
    [ExtensionAttribute]
private static TSource TryGetFirst(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, Boolean& found);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TSource>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static IEnumerable`1<IGrouping`2<TKey, TElement>> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupJoin(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> GroupJoin(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<GroupJoinIterator>d__97`4")]
private static IEnumerable`1<TResult> GroupJoinIterator(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, IEnumerable`1<TInner>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Intersect(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Intersect(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> IntersectBy(IEnumerable`1<TSource> first, IEnumerable`1<TKey> second, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> IntersectBy(IEnumerable`1<TSource> first, IEnumerable`1<TKey> second, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<IntersectIterator>d__102`1")]
private static IEnumerable`1<TSource> IntersectIterator(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<IntersectByIterator>d__103`2")]
private static IEnumerable`1<TSource> IntersectByIterator(IEnumerable`1<TSource> first, IEnumerable`1<TKey> second, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Join(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Join(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<JoinIterator>d__107`4")]
private static IEnumerable`1<TResult> JoinIterator(IEnumerable`1<TOuter> outer, IEnumerable`1<TInner> inner, Func`2<TOuter, TKey> outerKeySelector, Func`2<TInner, TKey> innerKeySelector, Func`3<TOuter, TInner, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static TSource Last(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource Last(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource LastOrDefault(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource LastOrDefault(IEnumerable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
public static TSource LastOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static TSource LastOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, TSource defaultValue);
    [ExtensionAttribute]
private static TSource TryGetLast(IEnumerable`1<TSource> source, Boolean& found);
    [ExtensionAttribute]
private static TSource TryGetLast(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, Boolean& found);
    [ExtensionAttribute]
public static ILookup`2<TKey, TSource> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static ILookup`2<TKey, TSource> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static ILookup`2<TKey, TElement> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static ILookup`2<TKey, TElement> ToLookup(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static int Max(IEnumerable`1<int> source);
    [ExtensionAttribute]
public static Nullable`1<int> Max(IEnumerable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static long Max(IEnumerable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<long> Max(IEnumerable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
private static T MaxInteger(IEnumerable`1<T> source);
    [ExtensionAttribute]
private static Nullable`1<T> MaxInteger(IEnumerable`1<Nullable`1<T>> source);
    [ExtensionAttribute]
public static double Max(IEnumerable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> Max(IEnumerable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static float Max(IEnumerable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> Max(IEnumerable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
private static T MaxFloat(IEnumerable`1<T> source);
    [ExtensionAttribute]
private static Nullable`1<T> MaxFloat(IEnumerable`1<Nullable`1<T>> source);
    [ExtensionAttribute]
public static decimal Max(IEnumerable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Max(IEnumerable`1<Nullable`1<decimal>> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource Max(IEnumerable`1<TSource> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource Max(IEnumerable`1<TSource> source, IComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MaxBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static int Max(IEnumerable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static Nullable`1<int> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static long Max(IEnumerable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static Nullable`1<long> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
private static TResult MaxInteger(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
private static Nullable`1<TResult> MaxInteger(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<TResult>> selector);
    [ExtensionAttribute]
public static float Max(IEnumerable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static Nullable`1<float> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static double Max(IEnumerable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
private static TResult MaxFloat(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
private static Nullable`1<TResult> MaxFloat(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<TResult>> selector);
    [ExtensionAttribute]
public static decimal Max(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> Max(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TResult Max(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static int Min(IEnumerable`1<int> source);
    [ExtensionAttribute]
public static long Min(IEnumerable`1<long> source);
    [ExtensionAttribute]
public static Nullable`1<int> Min(IEnumerable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static Nullable`1<long> Min(IEnumerable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
private static T MinInteger(IEnumerable`1<T> source);
    [ExtensionAttribute]
private static Nullable`1<T> MinInteger(IEnumerable`1<Nullable`1<T>> source);
    [ExtensionAttribute]
public static float Min(IEnumerable`1<float> source);
    [ExtensionAttribute]
public static Nullable`1<float> Min(IEnumerable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static double Min(IEnumerable`1<double> source);
    [ExtensionAttribute]
public static Nullable`1<double> Min(IEnumerable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
private static T MinFloat(IEnumerable`1<T> source);
    [ExtensionAttribute]
private static Nullable`1<T> MinFloat(IEnumerable`1<Nullable`1<T>> source);
    [ExtensionAttribute]
public static decimal Min(IEnumerable`1<decimal> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Min(IEnumerable`1<Nullable`1<decimal>> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource Min(IEnumerable`1<TSource> source);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource Min(IEnumerable`1<TSource> source, IComparer`1<TSource> comparer);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource MinBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static int Min(IEnumerable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static Nullable`1<int> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static long Min(IEnumerable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static Nullable`1<long> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
private static TResult MinInteger(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
private static Nullable`1<TResult> MinInteger(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<TResult>> selector);
    [ExtensionAttribute]
public static float Min(IEnumerable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static Nullable`1<float> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static double Min(IEnumerable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
private static TResult MinFloat(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
private static Nullable`1<TResult> MinFloat(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<TResult>> selector);
    [ExtensionAttribute]
public static decimal Min(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> Min(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TResult Min(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> Order(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> Order(IEnumerable`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderBy(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> OrderDescending(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<T> OrderDescending(IEnumerable`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescending(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByDescending(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenBy(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenBy(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescending(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> ThenByDescending(IOrderedEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IComparer`1<TKey> comparer);
    public static IEnumerable`1<int> Range(int start, int count);
    public static IEnumerable`1<TResult> Repeat(TResult element, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Reverse(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Select(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Select(IEnumerable`1<TSource> source, Func`3<TSource, int, TResult> selector);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SelectIterator>d__207`2")]
private static IEnumerable`1<TResult> SelectIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, TResult> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TResult>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TResult>> selector);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SelectManyIterator>d__214`2")]
private static IEnumerable`1<TResult> SelectManyIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TResult>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SelectManyIterator>d__216`3")]
private static IEnumerable`1<TResult> SelectManyIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> SelectMany(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SelectManyIterator>d__218`3")]
private static IEnumerable`1<TResult> SelectManyIterator(IEnumerable`1<TSource> source, Func`2<TSource, IEnumerable`1<TCollection>> collectionSelector, Func`3<TSource, TCollection, TResult> resultSelector);
    [ExtensionAttribute]
public static bool SequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static bool SequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static TSource Single(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource Single(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TSource SingleOrDefault(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static TSource SingleOrDefault(IEnumerable`1<TSource> source, TSource defaultValue);
    [ExtensionAttribute]
public static TSource SingleOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static TSource SingleOrDefault(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, TSource defaultValue);
    [ExtensionAttribute]
private static TSource TryGetSingle(IEnumerable`1<TSource> source, Boolean& found);
    [ExtensionAttribute]
private static TSource TryGetSingle(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate, Boolean& found);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Skip(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipWhile(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SkipWhileIterator>d__232`1")]
private static IEnumerable`1<TSource> SkipWhileIterator(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipWhile(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<SkipWhileIterator>d__234`1")]
private static IEnumerable`1<TSource> SkipWhileIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> SkipLast(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static int Sum(IEnumerable`1<int> source);
    [ExtensionAttribute]
public static long Sum(IEnumerable`1<long> source);
    [ExtensionAttribute]
public static float Sum(IEnumerable`1<float> source);
    [ExtensionAttribute]
public static double Sum(IEnumerable`1<double> source);
    [ExtensionAttribute]
public static decimal Sum(IEnumerable`1<decimal> source);
    [ExtensionAttribute]
private static TResult Sum(IEnumerable`1<TSource> source);
    private static TResult Sum(ReadOnlySpan`1<T> span);
    [ExtensionAttribute]
public static Nullable`1<int> Sum(IEnumerable`1<Nullable`1<int>> source);
    [ExtensionAttribute]
public static Nullable`1<long> Sum(IEnumerable`1<Nullable`1<long>> source);
    [ExtensionAttribute]
public static Nullable`1<float> Sum(IEnumerable`1<Nullable`1<float>> source);
    [ExtensionAttribute]
public static Nullable`1<double> Sum(IEnumerable`1<Nullable`1<double>> source);
    [ExtensionAttribute]
public static Nullable`1<decimal> Sum(IEnumerable`1<Nullable`1<decimal>> source);
    [ExtensionAttribute]
private static Nullable`1<TSource> Sum(IEnumerable`1<Nullable`1<TSource>> source);
    [ExtensionAttribute]
public static int Sum(IEnumerable`1<TSource> source, Func`2<TSource, int> selector);
    [ExtensionAttribute]
public static long Sum(IEnumerable`1<TSource> source, Func`2<TSource, long> selector);
    [ExtensionAttribute]
public static float Sum(IEnumerable`1<TSource> source, Func`2<TSource, float> selector);
    [ExtensionAttribute]
public static double Sum(IEnumerable`1<TSource> source, Func`2<TSource, double> selector);
    [ExtensionAttribute]
public static decimal Sum(IEnumerable`1<TSource> source, Func`2<TSource, decimal> selector);
    [ExtensionAttribute]
private static TResult Sum(IEnumerable`1<TSource> source, Func`2<TSource, TResult> selector);
    [ExtensionAttribute]
public static Nullable`1<int> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<int>> selector);
    [ExtensionAttribute]
public static Nullable`1<long> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<long>> selector);
    [ExtensionAttribute]
public static Nullable`1<float> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<float>> selector);
    [ExtensionAttribute]
public static Nullable`1<double> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<double>> selector);
    [ExtensionAttribute]
public static Nullable`1<decimal> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<decimal>> selector);
    [ExtensionAttribute]
private static Nullable`1<TResult> Sum(IEnumerable`1<TSource> source, Func`2<TSource, Nullable`1<TResult>> selector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Take(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Take(IEnumerable`1<TSource> source, Range range);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<TakeRangeFromEndIterator>d__263`1")]
private static IEnumerable`1<TSource> TakeRangeFromEndIterator(IEnumerable`1<TSource> source, bool isStartIndexFromEnd, int startIndex, bool isEndIndexFromEnd, int endIndex);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeWhile(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<TakeWhileIterator>d__265`1")]
private static IEnumerable`1<TSource> TakeWhileIterator(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeWhile(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<TakeWhileIterator>d__267`1")]
private static IEnumerable`1<TSource> TakeWhileIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> TakeLast(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static TSource[] ToArray(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static List`1<TSource> ToList(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TSource> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TSource> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, TSource> ToDictionary(TSource[] source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, TSource> ToDictionary(List`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TElement> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
    [ExtensionAttribute]
public static Dictionary`2<TKey, TElement> ToDictionary(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, TElement> ToDictionary(TSource[] source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    private static Dictionary`2<TKey, TElement> ToDictionary(List`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source);
    [ExtensionAttribute]
public static HashSet`1<TSource> ToHashSet(IEnumerable`1<TSource> source, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Union(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Union(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> UnionBy(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> UnionBy(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<UnionByIterator>d__288`2")]
private static IEnumerable`1<TSource> UnionByIterator(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Where(IEnumerable`1<TSource> source, Func`2<TSource, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TSource> Where(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<WhereIterator>d__294`1")]
private static IEnumerable`1<TSource> WhereIterator(IEnumerable`1<TSource> source, Func`3<TSource, int, bool> predicate);
    [ExtensionAttribute]
public static IEnumerable`1<TResult> Zip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    [ExtensionAttribute]
public static IEnumerable`1<ValueTuple`2<TFirst, TSecond>> Zip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second);
    [ExtensionAttribute]
public static IEnumerable`1<ValueTuple`3<TFirst, TSecond, TThird>> Zip(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, IEnumerable`1<TThird> third);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<ZipIterator>d__304`2")]
private static IEnumerable`1<ValueTuple`2<TFirst, TSecond>> ZipIterator(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<ZipIterator>d__305`3")]
private static IEnumerable`1<TResult> ZipIterator(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, Func`3<TFirst, TSecond, TResult> resultSelector);
    [IteratorStateMachineAttribute("System.Linq.Enumerable/<ZipIterator>d__306`3")]
private static IEnumerable`1<ValueTuple`3<TFirst, TSecond, TThird>> ZipIterator(IEnumerable`1<TFirst> first, IEnumerable`1<TSecond> second, IEnumerable`1<TThird> third);
    [CompilerGeneratedAttribute]
internal static int <TakeRangeFromEndIterator>g__CalculateStartIndex|263_0(bool isStartIndexFromEnd, int startIndex, int count);
    [CompilerGeneratedAttribute]
internal static int <TakeRangeFromEndIterator>g__CalculateEndIndex|263_1(bool isEndIndexFromEnd, int endIndex, int count);
}
internal abstract class System.Linq.EnumerableSorter`1 : object {
    internal static Func`2<TElement, TElement> IdentityFunc;
    private static EnumerableSorter`1();
    internal abstract virtual void ComputeKeys(TElement[] elements, int count);
    internal abstract virtual int CompareAnyKeys(int index1, int index2);
    private Int32[] ComputeMap(TElement[] elements, int count);
    internal Int32[] Sort(TElement[] elements, int count);
    protected abstract virtual void QuickSort(Int32[] map, int left, int right);
}
internal class System.Linq.EnumerableSorter`2 : EnumerableSorter`1<TElement> {
    private Func`2<TElement, TKey> _keySelector;
    private IComparer`1<TKey> _comparer;
    private bool _descending;
    private EnumerableSorter`1<TElement> _next;
    private TKey[] _keys;
    internal EnumerableSorter`2(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending, EnumerableSorter`1<TElement> next);
    internal virtual void ComputeKeys(TElement[] elements, int count);
    internal virtual int CompareAnyKeys(int index1, int index2);
    protected virtual void QuickSort(Int32[] keys, int lo, int hi);
}
internal enum System.Linq.ExceptionArgument : Enum {
    public int value__;
    public static ExceptionArgument collectionSelector;
    public static ExceptionArgument count;
    public static ExceptionArgument elementSelector;
    public static ExceptionArgument enumerable;
    public static ExceptionArgument first;
    public static ExceptionArgument func;
    public static ExceptionArgument index;
    public static ExceptionArgument inner;
    public static ExceptionArgument innerKeySelector;
    public static ExceptionArgument keySelector;
    public static ExceptionArgument outer;
    public static ExceptionArgument outerKeySelector;
    public static ExceptionArgument predicate;
    public static ExceptionArgument resultSelector;
    public static ExceptionArgument second;
    public static ExceptionArgument selector;
    public static ExceptionArgument source;
    public static ExceptionArgument third;
    public static ExceptionArgument size;
}
internal class System.Linq.GroupedEnumerable`2 : object {
    private IEnumerable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private IEqualityComparer`1<TKey> _comparer;
    public GroupedEnumerable`2(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public sealed virtual IEnumerator`1<IGrouping`2<TKey, TSource>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Linq.GroupedEnumerable`3 : object {
    private IEnumerable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private Func`2<TSource, TElement> _elementSelector;
    private IEqualityComparer`1<TKey> _comparer;
    public GroupedEnumerable`3(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    public sealed virtual IEnumerator`1<IGrouping`2<TKey, TElement>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Linq.GroupedResultEnumerable`3 : object {
    private IEnumerable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private IEqualityComparer`1<TKey> _comparer;
    private Func`3<TKey, IEnumerable`1<TSource>, TResult> _resultSelector;
    public GroupedResultEnumerable`3(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`3<TKey, IEnumerable`1<TSource>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    public sealed virtual IEnumerator`1<TResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Linq.GroupedResultEnumerable`4 : object {
    private IEnumerable`1<TSource> _source;
    private Func`2<TSource, TKey> _keySelector;
    private Func`2<TSource, TElement> _elementSelector;
    private IEqualityComparer`1<TKey> _comparer;
    private Func`3<TKey, IEnumerable`1<TElement>, TResult> _resultSelector;
    public GroupedResultEnumerable`4(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector, IEqualityComparer`1<TKey> comparer);
    public sealed virtual IEnumerator`1<TResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Key = {Key}")]
[DebuggerTypeProxyAttribute("System.Linq.SystemLinq_GroupingDebugView`2")]
public class System.Linq.Grouping`2 : object {
    internal TKey _key;
    internal int _hashCode;
    internal TElement[] _elements;
    internal int _count;
    internal Grouping`2<TKey, TElement> _hashNext;
    internal Grouping`2<TKey, TElement> _next;
    public TKey Key { get; }
    private int System.Collections.Generic.ICollection<TElement>.Count { get; }
    private bool System.Collections.Generic.ICollection<TElement>.IsReadOnly { get; }
    private TElement System.Collections.Generic.IList<TElement>.Item { get; private set; }
    internal Grouping`2(TKey key, int hashCode);
    internal void Add(TElement element);
    internal void Trim();
    [IteratorStateMachineAttribute("System.Linq.Grouping`2/<GetEnumerator>d__9")]
public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual TKey get_Key();
    private sealed virtual override int System.Collections.Generic.ICollection<TElement>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<TElement>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<TElement>.Add(TElement item);
    private sealed virtual override void System.Collections.Generic.ICollection<TElement>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<TElement>.Contains(TElement item);
    private sealed virtual override void System.Collections.Generic.ICollection<TElement>.CopyTo(TElement[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<TElement>.Remove(TElement item);
    private sealed virtual override int System.Collections.Generic.IList<TElement>.IndexOf(TElement item);
    private sealed virtual override void System.Collections.Generic.IList<TElement>.Insert(int index, TElement item);
    private sealed virtual override void System.Collections.Generic.IList<TElement>.RemoveAt(int index);
    private sealed virtual override TElement System.Collections.Generic.IList<TElement>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<TElement>.set_Item(int index, TElement value);
}
[NullableContextAttribute("1")]
public interface System.Linq.IGrouping`2 {
    public TKey Key { get; }
    public abstract virtual TKey get_Key();
}
internal interface System.Linq.IIListProvider`1 {
    public abstract virtual TElement[] ToArray();
    public abstract virtual List`1<TElement> ToList();
    public abstract virtual int GetCount(bool onlyIfCheap);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface System.Linq.ILookup`2 {
    public int Count { get; }
    public IEnumerable`1<TElement> Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual IEnumerable`1<TElement> get_Item(TKey key);
    public abstract virtual bool Contains(TKey key);
}
public interface System.Linq.IOrderedEnumerable`1 {
    [NullableContextAttribute("1")]
public abstract virtual IOrderedEnumerable`1<TElement> CreateOrderedEnumerable(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
}
internal interface System.Linq.IPartition`1 {
    public abstract virtual IPartition`1<TElement> Skip(int count);
    public abstract virtual IPartition`1<TElement> Take(int count);
    public abstract virtual TElement TryGetElementAt(int index, Boolean& found);
    public abstract virtual TElement TryGetFirst(Boolean& found);
    public abstract virtual TElement TryGetLast(Boolean& found);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
[DebuggerTypeProxyAttribute("System.Linq.SystemLinq_LookupDebugView`2")]
public class System.Linq.Lookup`2 : object {
    private IEqualityComparer`1<TKey> _comparer;
    private Grouping`2[] _groupings;
    private Grouping`2<TKey, TElement> _lastGrouping;
    private int _count;
    public int Count { get; }
    public IEnumerable`1<TElement> Item { get; }
    private Lookup`2(IEqualityComparer`1<TKey> comparer);
    internal static Lookup`2<TKey, TElement> Create(IEnumerable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer);
    internal static Lookup`2<TKey, TElement> Create(IEnumerable`1<TElement> source, Func`2<TElement, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    internal static Lookup`2<TKey, TElement> CreateForJoin(IEnumerable`1<TElement> source, Func`2<TElement, TKey> keySelector, IEqualityComparer`1<TKey> comparer);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerable`1<TElement> get_Item(TKey key);
    public sealed virtual bool Contains(TKey key);
    [IteratorStateMachineAttribute("System.Linq.Lookup`2/<GetEnumerator>d__13")]
public sealed virtual IEnumerator`1<IGrouping`2<TKey, TElement>> GetEnumerator();
    [IteratorStateMachineAttribute("System.Linq.Lookup`2/<ApplyResultSelector>d__15`1")]
public IEnumerable`1<TResult> ApplyResultSelector(Func`3<TKey, IEnumerable`1<TElement>, TResult> resultSelector);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private int InternalGetHashCode(TKey key);
    internal Grouping`2<TKey, TElement> GetGrouping(TKey key, bool create);
    private void Resize();
}
internal abstract class System.Linq.OrderedEnumerable`1 : object {
    internal IEnumerable`1<TElement> _source;
    protected OrderedEnumerable`1(IEnumerable`1<TElement> source);
    private Int32[] SortedMap(Buffer`1<TElement> buffer);
    [IteratorStateMachineAttribute("System.Linq.OrderedEnumerable`1/<GetEnumerator>d__4")]
public sealed virtual IEnumerator`1<TElement> GetEnumerator();
    private EnumerableSorter`1<TElement> GetEnumerableSorter();
    internal abstract virtual EnumerableSorter`1<TElement> GetEnumerableSorter(EnumerableSorter`1<TElement> next);
    private CachingComparer`1<TElement> GetComparer();
    internal abstract virtual CachingComparer`1<TElement> GetComparer(CachingComparer`1<TElement> childComparer);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IOrderedEnumerable`1<TElement> System.Linq.IOrderedEnumerable<TElement>.CreateOrderedEnumerable(Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending);
    public TElement TryGetLast(Func`2<TElement, bool> predicate, Boolean& found);
}
internal class System.Linq.OrderedEnumerable`2 : OrderedEnumerable`1<TElement> {
    private OrderedEnumerable`1<TElement> _parent;
    private Func`2<TElement, TKey> _keySelector;
    private IComparer`1<TKey> _comparer;
    private bool _descending;
    internal OrderedEnumerable`2(IEnumerable`1<TElement> source, Func`2<TElement, TKey> keySelector, IComparer`1<TKey> comparer, bool descending, OrderedEnumerable`1<TElement> parent);
    internal virtual EnumerableSorter`1<TElement> GetEnumerableSorter(EnumerableSorter`1<TElement> next);
    internal virtual CachingComparer`1<TElement> GetComparer(CachingComparer`1<TElement> childComparer);
}
internal class System.Linq.SingleLinkedNode`1 : object {
    [CompilerGeneratedAttribute]
private TSource <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private SingleLinkedNode`1<TSource> <Linked>k__BackingField;
    public TSource Item { get; }
    public SingleLinkedNode`1<TSource> Linked { get; }
    public SingleLinkedNode`1(TSource item);
    private SingleLinkedNode`1(SingleLinkedNode`1<TSource> linked, TSource item);
    [CompilerGeneratedAttribute]
public TSource get_Item();
    [CompilerGeneratedAttribute]
public SingleLinkedNode`1<TSource> get_Linked();
    public SingleLinkedNode`1<TSource> Add(TSource item);
    public SingleLinkedNode`1<TSource> GetNode(int index);
    public TSource[] ToArray(int count);
}
internal class System.Linq.SystemCore_EnumerableDebugView : object {
    [DebuggerBrowsableAttribute("0")]
private IEnumerable _enumerable;
    [DebuggerBrowsableAttribute("3")]
public Object[] Items { get; }
    public SystemCore_EnumerableDebugView(IEnumerable enumerable);
    public Object[] get_Items();
}
internal class System.Linq.SystemCore_EnumerableDebugView`1 : object {
    [DebuggerBrowsableAttribute("0")]
private IEnumerable`1<T> _enumerable;
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public SystemCore_EnumerableDebugView`1(IEnumerable`1<T> enumerable);
    public T[] get_Items();
}
internal class System.Linq.SystemCore_EnumerableDebugViewEmptyException : Exception {
    public string Empty { get; }
    public string get_Empty();
}
internal class System.Linq.SystemLinq_GroupingDebugView`2 : object {
    private Grouping`2<TKey, TElement> _grouping;
    private TElement[] _cachedValues;
    public TKey Key { get; }
    [DebuggerBrowsableAttribute("3")]
public TElement[] Values { get; }
    public SystemLinq_GroupingDebugView`2(Grouping`2<TKey, TElement> grouping);
    public TKey get_Key();
    public TElement[] get_Values();
}
internal class System.Linq.SystemLinq_LookupDebugView`2 : object {
    private Lookup`2<TKey, TElement> _lookup;
    private IGrouping`2[] _cachedGroupings;
    [DebuggerBrowsableAttribute("3")]
public IGrouping`2[] Groupings { get; }
    public SystemLinq_LookupDebugView`2(Lookup`2<TKey, TElement> lookup);
    public IGrouping`2[] get_Groupings();
}
internal static class System.Linq.ThrowHelper : object {
    [DoesNotReturnAttribute]
internal static void ThrowArgumentNullException(ExceptionArgument argument);
    [DoesNotReturnAttribute]
internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument);
    [DoesNotReturnAttribute]
internal static void ThrowMoreThanOneElementException();
    [DoesNotReturnAttribute]
internal static void ThrowMoreThanOneMatchException();
    [DoesNotReturnAttribute]
internal static void ThrowNoElementsException();
    [DoesNotReturnAttribute]
internal static void ThrowNoMatchException();
    [DoesNotReturnAttribute]
internal static void ThrowNotSupportedException();
    private static string GetArgumentString(ExceptionArgument argument);
}
internal static class System.Linq.Utilities : object {
    public static bool AreEqualityComparersEqual(IEqualityComparer`1<TSource> left, IEqualityComparer`1<TSource> right);
    public static Func`2<TSource, bool> CombinePredicates(Func`2<TSource, bool> predicate1, Func`2<TSource, bool> predicate2);
    public static Func`2<TSource, TResult> CombineSelectors(Func`2<TSource, TMiddle> selector1, Func`2<TMiddle, TResult> selector2);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string EmptyEnumerable { get; }
    internal static string MoreThanOneElement { get; }
    internal static string MoreThanOneMatch { get; }
    internal static string NoElements { get; }
    internal static string NoMatch { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static ResourceManager get_ResourceManager();
    internal static string get_EmptyEnumerable();
    internal static string get_MoreThanOneElement();
    internal static string get_MoreThanOneMatch();
    internal static string get_NoElements();
    internal static string get_NoMatch();
}
