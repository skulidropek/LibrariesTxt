internal static class FxResources.System.Net.Quic.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[FlagsAttribute]
public enum System.Net.Quic.QuicAbortDirection : Enum {
    public int value__;
    public static QuicAbortDirection Read;
    public static QuicAbortDirection Write;
    public static QuicAbortDirection Both;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Quic.QuicClientConnectionOptions : QuicConnectionOptions {
    [CompilerGeneratedAttribute]
private SslClientAuthenticationOptions <ClientAuthenticationOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private EndPoint <RemoteEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <LocalEndPoint>k__BackingField;
    public SslClientAuthenticationOptions ClientAuthenticationOptions { get; public set; }
    public EndPoint RemoteEndPoint { get; public set; }
    [NullableAttribute("2")]
public IPEndPoint LocalEndPoint { get; public set; }
    [CompilerGeneratedAttribute]
public SslClientAuthenticationOptions get_ClientAuthenticationOptions();
    [CompilerGeneratedAttribute]
public void set_ClientAuthenticationOptions(SslClientAuthenticationOptions value);
    [CompilerGeneratedAttribute]
public EndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
public void set_RemoteEndPoint(EndPoint value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IPEndPoint get_LocalEndPoint();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_LocalEndPoint(IPEndPoint value);
    internal virtual void Validate(string argumentName);
}
public class System.Net.Quic.QuicConnection : object {
    public static bool IsSupported { get; }
    public IPEndPoint LocalEndPoint { get; }
    public SslApplicationProtocol NegotiatedApplicationProtocol { get; }
    [NullableAttribute("2")]
public X509Certificate RemoteCertificate { get; }
    public IPEndPoint RemoteEndPoint { get; }
    public static bool get_IsSupported();
    public IPEndPoint get_LocalEndPoint();
    public SslApplicationProtocol get_NegotiatedApplicationProtocol();
    [NullableContextAttribute("2")]
public X509Certificate get_RemoteCertificate();
    public IPEndPoint get_RemoteEndPoint();
    public ValueTask`1<QuicStream> AcceptInboundStreamAsync(CancellationToken cancellationToken);
    public ValueTask CloseAsync(long errorCode, CancellationToken cancellationToken);
    public static ValueTask`1<QuicConnection> ConnectAsync(QuicClientConnectionOptions options, CancellationToken cancellationToken);
    public sealed virtual ValueTask DisposeAsync();
    public ValueTask`1<QuicStream> OpenOutboundStreamAsync(QuicStreamType type, CancellationToken cancellationToken);
    public virtual string ToString();
}
public abstract class System.Net.Quic.QuicConnectionOptions : object {
    [CompilerGeneratedAttribute]
private int <MaxInboundBidirectionalStreams>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxInboundUnidirectionalStreams>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <IdleTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DefaultStreamErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private long <DefaultCloseErrorCode>k__BackingField;
    public int MaxInboundBidirectionalStreams { get; public set; }
    public int MaxInboundUnidirectionalStreams { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public long DefaultStreamErrorCode { get; public set; }
    public long DefaultCloseErrorCode { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxInboundBidirectionalStreams();
    [CompilerGeneratedAttribute]
public void set_MaxInboundBidirectionalStreams(int value);
    [CompilerGeneratedAttribute]
public int get_MaxInboundUnidirectionalStreams();
    [CompilerGeneratedAttribute]
public void set_MaxInboundUnidirectionalStreams(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_IdleTimeout();
    [CompilerGeneratedAttribute]
public void set_IdleTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public long get_DefaultStreamErrorCode();
    [CompilerGeneratedAttribute]
public void set_DefaultStreamErrorCode(long value);
    [CompilerGeneratedAttribute]
public long get_DefaultCloseErrorCode();
    [CompilerGeneratedAttribute]
public void set_DefaultCloseErrorCode(long value);
    internal virtual void Validate(string argumentName);
}
internal static class System.Net.Quic.QuicDefaults : object {
    public static int DefaultListenBacklog;
    public static int DefaultClientMaxInboundBidirectionalStreams;
    public static int DefaultClientMaxInboundUnidirectionalStreams;
    public static int DefaultServerMaxInboundBidirectionalStreams;
    public static int DefaultServerMaxInboundUnidirectionalStreams;
    public static long MaxErrorCodeValue;
}
public enum System.Net.Quic.QuicError : Enum {
    public int value__;
    public static QuicError Success;
    public static QuicError InternalError;
    public static QuicError ConnectionAborted;
    public static QuicError StreamAborted;
    public static QuicError AddressInUse;
    public static QuicError InvalidAddress;
    public static QuicError ConnectionTimeout;
    public static QuicError HostUnreachable;
    public static QuicError ConnectionRefused;
    public static QuicError VersionNegotiationError;
    public static QuicError ConnectionIdle;
    public static QuicError ProtocolError;
    public static QuicError OperationAborted;
}
public class System.Net.Quic.QuicException : IOException {
    public Nullable`1<long> ApplicationErrorCode { get; }
    public QuicError QuicError { get; }
    public QuicException(QuicError error, Nullable`1<long> applicationErrorCode, string message);
    public Nullable`1<long> get_ApplicationErrorCode();
    public QuicError get_QuicError();
}
public class System.Net.Quic.QuicListener : object {
    public static bool IsSupported { get; }
    public IPEndPoint LocalEndPoint { get; }
    public static bool get_IsSupported();
    public IPEndPoint get_LocalEndPoint();
    public ValueTask`1<QuicConnection> AcceptConnectionAsync(CancellationToken cancellationToken);
    public sealed virtual ValueTask DisposeAsync();
    public static ValueTask`1<QuicListener> ListenAsync(QuicListenerOptions options, CancellationToken cancellationToken);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Quic.QuicListenerOptions : object {
    [CompilerGeneratedAttribute]
private IPEndPoint <ListenEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SslApplicationProtocol> <ApplicationProtocols>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ListenBacklog>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<QuicConnection, SslClientHelloInfo, CancellationToken, ValueTask`1<QuicServerConnectionOptions>> <ConnectionOptionsCallback>k__BackingField;
    public IPEndPoint ListenEndPoint { get; public set; }
    public List`1<SslApplicationProtocol> ApplicationProtocols { get; public set; }
    public int ListenBacklog { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`4<QuicConnection, SslClientHelloInfo, CancellationToken, ValueTask`1<QuicServerConnectionOptions>> ConnectionOptionsCallback { get; public set; }
    [CompilerGeneratedAttribute]
public IPEndPoint get_ListenEndPoint();
    [CompilerGeneratedAttribute]
public void set_ListenEndPoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public List`1<SslApplicationProtocol> get_ApplicationProtocols();
    [CompilerGeneratedAttribute]
public void set_ApplicationProtocols(List`1<SslApplicationProtocol> value);
    [CompilerGeneratedAttribute]
public int get_ListenBacklog();
    [CompilerGeneratedAttribute]
public void set_ListenBacklog(int value);
    [CompilerGeneratedAttribute]
public Func`4<QuicConnection, SslClientHelloInfo, CancellationToken, ValueTask`1<QuicServerConnectionOptions>> get_ConnectionOptionsCallback();
    [CompilerGeneratedAttribute]
public void set_ConnectionOptionsCallback(Func`4<QuicConnection, SslClientHelloInfo, CancellationToken, ValueTask`1<QuicServerConnectionOptions>> value);
    internal void Validate(string argumentName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.Quic.QuicServerConnectionOptions : QuicConnectionOptions {
    [CompilerGeneratedAttribute]
private SslServerAuthenticationOptions <ServerAuthenticationOptions>k__BackingField;
    public SslServerAuthenticationOptions ServerAuthenticationOptions { get; public set; }
    [CompilerGeneratedAttribute]
public SslServerAuthenticationOptions get_ServerAuthenticationOptions();
    [CompilerGeneratedAttribute]
public void set_ServerAuthenticationOptions(SslServerAuthenticationOptions value);
    internal virtual void Validate(string argumentName);
}
public class System.Net.Quic.QuicStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanTimeout { get; }
    public bool CanWrite { get; }
    public long Id { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public Task ReadsClosed { get; }
    public int ReadTimeout { get; public set; }
    public QuicStreamType Type { get; }
    public Task WritesClosed { get; }
    public int WriteTimeout { get; public set; }
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public long get_Id();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public Task get_ReadsClosed();
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    public QuicStreamType get_Type();
    public Task get_WritesClosed();
    public virtual int get_WriteTimeout();
    public virtual void set_WriteTimeout(int value);
    public void Abort(QuicAbortDirection abortDirection, long errorCode);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public void CompleteWrites();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int Read(Span`1<byte> buffer);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, bool completeWrites, CancellationToken cancellationToken);
    public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
}
public enum System.Net.Quic.QuicStreamType : Enum {
    public int value__;
    public static QuicStreamType Unidirectional;
    public static QuicStreamType Bidirectional;
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_quic_connectionaborted { get; }
    internal static string net_quic_operationaborted { get; }
    internal static string net_quic_reading_notallowed { get; }
    internal static string net_quic_writing_aborted { get; }
    internal static string net_quic_reading_aborted { get; }
    internal static string net_quic_streamaborted { get; }
    internal static string SystemNetQuic_PlatformNotSupported { get; }
    internal static string net_quic_writing_notallowed { get; }
    internal static string net_quic_in_range { get; }
    internal static string net_quic_not_null_listener { get; }
    internal static string net_quic_not_null_not_empty_listener { get; }
    internal static string net_quic_not_null_open_connection { get; }
    internal static string net_quic_not_null_accept_connection { get; }
    internal static string net_quic_timeout_use_gt_zero { get; }
    internal static string net_quic_unsupported_endpoint_type { get; }
    internal static string net_quic_not_null_not_empty_connection { get; }
    internal static string net_quic_not_null_ceritifcate { get; }
    internal static string net_quic_timeout { get; }
    internal static string net_quic_ssl_option { get; }
    internal static string net_quic_cert_custom_validation { get; }
    internal static string net_quic_cert_chain_validation { get; }
    internal static string net_quic_internal_error { get; }
    internal static string net_quic_tls_version_notsupported { get; }
    internal static string net_quic_empty_cipher_suite { get; }
    internal static string net_quic_accept_not_allowed { get; }
    internal static string net_quic_address_in_use { get; }
    internal static string net_quic_host_unreachable { get; }
    internal static string net_quic_connection_refused { get; }
    internal static string net_quic_protocol_error { get; }
    internal static string net_quic_ver_neg_error { get; }
    internal static string net_quic_alpn_neg_error { get; }
    internal static string net_quic_connection_idle { get; }
    internal static string net_quic_invalid_address { get; }
    internal static string net_quic_auth { get; }
    internal static string net_io_invalidnestedcall { get; }
    internal static string net_auth_tls_alert { get; }
    internal static string net_InvalidAddressFamily { get; }
    internal static string net_InvalidSocketAddressSize { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_quic_connectionaborted();
    internal static string get_net_quic_operationaborted();
    internal static string get_net_quic_reading_notallowed();
    internal static string get_net_quic_writing_aborted();
    internal static string get_net_quic_reading_aborted();
    internal static string get_net_quic_streamaborted();
    internal static string get_SystemNetQuic_PlatformNotSupported();
    internal static string get_net_quic_writing_notallowed();
    internal static string get_net_quic_in_range();
    internal static string get_net_quic_not_null_listener();
    internal static string get_net_quic_not_null_not_empty_listener();
    internal static string get_net_quic_not_null_open_connection();
    internal static string get_net_quic_not_null_accept_connection();
    internal static string get_net_quic_timeout_use_gt_zero();
    internal static string get_net_quic_unsupported_endpoint_type();
    internal static string get_net_quic_not_null_not_empty_connection();
    internal static string get_net_quic_not_null_ceritifcate();
    internal static string get_net_quic_timeout();
    internal static string get_net_quic_ssl_option();
    internal static string get_net_quic_cert_custom_validation();
    internal static string get_net_quic_cert_chain_validation();
    internal static string get_net_quic_internal_error();
    internal static string get_net_quic_tls_version_notsupported();
    internal static string get_net_quic_empty_cipher_suite();
    internal static string get_net_quic_accept_not_allowed();
    internal static string get_net_quic_address_in_use();
    internal static string get_net_quic_host_unreachable();
    internal static string get_net_quic_connection_refused();
    internal static string get_net_quic_protocol_error();
    internal static string get_net_quic_ver_neg_error();
    internal static string get_net_quic_alpn_neg_error();
    internal static string get_net_quic_connection_idle();
    internal static string get_net_quic_invalid_address();
    internal static string get_net_quic_auth();
    internal static string get_net_io_invalidnestedcall();
    internal static string get_net_auth_tls_alert();
    internal static string get_net_InvalidAddressFamily();
    internal static string get_net_InvalidSocketAddressSize();
}
