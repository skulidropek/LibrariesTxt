internal static class FxResources.System.Net.WebSockets.Client.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.WebSockets.ClientWebSocket : WebSocket {
    private int _state;
    private WebSocketHandle _innerWebSocket;
    [CompilerGeneratedAttribute]
private ClientWebSocketOptions <Options>k__BackingField;
    public ClientWebSocketOptions Options { get; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    [NullableAttribute("2")]
public string CloseStatusDescription { get; }
    [NullableAttribute("2")]
public string SubProtocol { get; }
    public WebSocketState State { get; }
    public HttpStatusCode HttpStatusCode { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, IEnumerable`1<string>> HttpResponseHeaders { get; public set; }
    private WebSocket ConnectedWebSocket { get; }
    [CompilerGeneratedAttribute]
public ClientWebSocketOptions get_Options();
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    [NullableContextAttribute("2")]
public virtual string get_CloseStatusDescription();
    [NullableContextAttribute("2")]
public virtual string get_SubProtocol();
    public virtual WebSocketState get_State();
    public HttpStatusCode get_HttpStatusCode();
    public IReadOnlyDictionary`2<string, IEnumerable`1<string>> get_HttpResponseHeaders();
    public void set_HttpResponseHeaders(IReadOnlyDictionary`2<string, IEnumerable`1<string>> value);
    public Task ConnectAsync(Uri uri, CancellationToken cancellationToken);
    public Task ConnectAsync(Uri uri, HttpMessageInvoker invoker, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.Net.WebSockets.ClientWebSocket/<ConnectAsyncCore>d__21")]
private Task ConnectAsyncCore(Uri uri, HttpMessageInvoker invoker, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask SendAsync(ReadOnlyMemory`1<byte> buffer, WebSocketMessageType messageType, WebSocketMessageFlags messageFlags, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<ValueWebSocketReceiveResult> ReceiveAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    private WebSocket get_ConnectedWebSocket();
    public virtual void Abort();
    public virtual void Dispose();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.WebSockets.ClientWebSocketOptions : object {
    private bool _isReadOnly;
    private TimeSpan _keepAliveInterval;
    private bool _useDefaultCredentials;
    private ICredentials _credentials;
    private IWebProxy _proxy;
    private CookieContainer _cookies;
    private int _receiveBufferSize;
    private Nullable`1<ArraySegment`1<byte>> _buffer;
    private RemoteCertificateValidationCallback _remoteCertificateValidationCallback;
    internal X509CertificateCollection _clientCertificates;
    internal WebHeaderCollection _requestHeaders;
    internal List`1<string> _requestedSubProtocols;
    private Version _version;
    private HttpVersionPolicy _versionPolicy;
    private bool _collectHttpResponseDetails;
    [CompilerGeneratedAttribute]
private WebSocketDeflateOptions <DangerousDeflateOptions>k__BackingField;
    [NullableAttribute("1")]
public Version HttpVersion { get; public set; }
    public HttpVersionPolicy HttpVersionPolicy { get; public set; }
    [NullableAttribute("1")]
internal WebHeaderCollection RequestHeaders { get; }
    [NullableAttribute("1")]
internal List`1<string> RequestedSubProtocols { get; }
    [UnsupportedOSPlatformAttribute("browser")]
public bool UseDefaultCredentials { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public ICredentials Credentials { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public IWebProxy Proxy { get; public set; }
    [NullableAttribute("1")]
[UnsupportedOSPlatformAttribute("browser")]
public X509CertificateCollection ClientCertificates { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public CookieContainer Cookies { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public TimeSpan KeepAliveInterval { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public WebSocketDeflateOptions DangerousDeflateOptions { get; public set; }
    [UnsupportedOSPlatformAttribute("browser")]
public bool CollectHttpResponseDetails { get; public set; }
    internal bool AreCompatibleWithCustomInvoker();
    [NullableContextAttribute("1")]
public Version get_HttpVersion();
    [NullableContextAttribute("1")]
[UnsupportedOSPlatformAttribute("browser")]
public void set_HttpVersion(Version value);
    public HttpVersionPolicy get_HttpVersionPolicy();
    [UnsupportedOSPlatformAttribute("browser")]
public void set_HttpVersionPolicy(HttpVersionPolicy value);
    [NullableContextAttribute("1")]
[UnsupportedOSPlatformAttribute("browser")]
public void SetRequestHeader(string headerName, string headerValue);
    internal WebHeaderCollection get_RequestHeaders();
    internal List`1<string> get_RequestedSubProtocols();
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    [NullableContextAttribute("1")]
public X509CertificateCollection get_ClientCertificates();
    [NullableContextAttribute("1")]
public void set_ClientCertificates(X509CertificateCollection value);
    public RemoteCertificateValidationCallback get_RemoteCertificateValidationCallback();
    public void set_RemoteCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public CookieContainer get_Cookies();
    public void set_Cookies(CookieContainer value);
    [NullableContextAttribute("1")]
public void AddSubProtocol(string subProtocol);
    public TimeSpan get_KeepAliveInterval();
    public void set_KeepAliveInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public WebSocketDeflateOptions get_DangerousDeflateOptions();
    [CompilerGeneratedAttribute]
public void set_DangerousDeflateOptions(WebSocketDeflateOptions value);
    [UnsupportedOSPlatformAttribute("browser")]
public void SetBuffer(int receiveBufferSize, int sendBufferSize);
    [NullableContextAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
public void SetBuffer(int receiveBufferSize, int sendBufferSize, ArraySegment`1<byte> buffer);
    public bool get_CollectHttpResponseDetails();
    public void set_CollectHttpResponseDetails(bool value);
    internal void SetToReadOnly();
    private void ThrowIfReadOnly();
}
[DefaultMemberAttribute("Item")]
internal class System.Net.WebSockets.HttpResponseHeadersReadOnlyCollection : object {
    private HttpHeadersNonValidated _headers;
    public IEnumerable`1<string> Item { get; }
    public IEnumerable`1<string> Keys { get; }
    public IEnumerable`1<IEnumerable`1<string>> Values { get; }
    public int Count { get; }
    public HttpResponseHeadersReadOnlyCollection(HttpResponseHeaders headers);
    public sealed virtual IEnumerable`1<string> get_Item(string key);
    [IteratorStateMachineAttribute("System.Net.WebSockets.HttpResponseHeadersReadOnlyCollection/<get_Keys>d__5")]
public sealed virtual IEnumerable`1<string> get_Keys();
    [IteratorStateMachineAttribute("System.Net.WebSockets.HttpResponseHeadersReadOnlyCollection/<get_Values>d__7")]
public sealed virtual IEnumerable`1<IEnumerable`1<string>> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool ContainsKey(string key);
    [IteratorStateMachineAttribute("System.Net.WebSockets.HttpResponseHeadersReadOnlyCollection/<GetEnumerator>d__11")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, IEnumerable`1<string>>> GetEnumerator();
    public sealed virtual bool TryGetValue(string key, IEnumerable`1& value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Net.WebSockets.WebSocketHandle : object {
    private static SocketsHttpHandler s_defaultHandler;
    private CancellationTokenSource _abortSource;
    private WebSocketState _state;
    private WebSocketDeflateOptions _negotiatedDeflateOptions;
    [CompilerGeneratedAttribute]
private WebSocket <WebSocket>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpStatusCode <HttpStatusCode>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, IEnumerable`1<string>> <HttpResponseHeaders>k__BackingField;
    public WebSocket WebSocket { get; private set; }
    public WebSocketState State { get; }
    public HttpStatusCode HttpStatusCode { get; private set; }
    public IReadOnlyDictionary`2<string, IEnumerable`1<string>> HttpResponseHeaders { get; public set; }
    [CompilerGeneratedAttribute]
public WebSocket get_WebSocket();
    [CompilerGeneratedAttribute]
private void set_WebSocket(WebSocket value);
    public WebSocketState get_State();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_HttpStatusCode();
    [CompilerGeneratedAttribute]
private void set_HttpStatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, IEnumerable`1<string>> get_HttpResponseHeaders();
    [CompilerGeneratedAttribute]
public void set_HttpResponseHeaders(IReadOnlyDictionary`2<string, IEnumerable`1<string>> value);
    public static ClientWebSocketOptions CreateDefaultOptions();
    public void Dispose();
    public void Abort();
    [AsyncStateMachineAttribute("System.Net.WebSockets.WebSocketHandle/<ConnectAsync>d__21")]
public Task ConnectAsync(Uri uri, HttpMessageInvoker invoker, CancellationToken cancellationToken, ClientWebSocketOptions options);
    private static SocketsHttpHandler SetupHandler(ClientWebSocketOptions options, Boolean& disposeHandler);
    private static WebSocketDeflateOptions ParseDeflateOptions(ReadOnlySpan`1<char> extension, WebSocketDeflateOptions original);
    private static string AddWebSocketHeaders(HttpRequestMessage request, ClientWebSocketOptions options);
    private static void ValidateResponse(HttpResponseMessage response, string secValue, ClientWebSocketOptions options);
    private static KeyValuePair`2<string, string> CreateSecKeyAndSecWebSocketAccept();
    private static void ValidateHeader(HttpHeaders headers, string name, string expectedValue);
    [CompilerGeneratedAttribute]
internal static int <ParseDeflateOptions>g__ParseWindowBits|23_0(ReadOnlySpan`1<char> value);
    [CompilerGeneratedAttribute]
internal static string <AddWebSocketHeaders>g__GetDeflateOptions|24_0(WebSocketDeflateOptions options);
}
internal static class System.Net.WebSockets.WebSocketValidate : object {
    internal static void ValidateSubprotocol(string subProtocol);
    internal static void ValidateArraySegment(ArraySegment`1<byte> arraySegment, string parameterName);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_webstatus_ConnectFailure { get; }
    internal static string net_uri_NotAbsolute { get; }
    internal static string net_WebSockets_AcceptUnsupportedProtocol { get; }
    internal static string net_WebSockets_ArgumentOutOfRange_TooSmall { get; }
    internal static string net_WebSockets_ConnectStatusExpected { get; }
    internal static string net_WebSockets_MissingResponseHeader { get; }
    internal static string net_WebSockets_InvalidCharInProtocolString { get; }
    internal static string net_WebSockets_InvalidEmptySubProtocol { get; }
    internal static string net_WebSockets_Scheme { get; }
    internal static string net_WebSockets_AlreadyStarted { get; }
    internal static string net_WebSockets_InvalidResponseHeader { get; }
    internal static string net_WebSockets_NotConnected { get; }
    internal static string net_WebSockets_NoDuplicateProtocol { get; }
    internal static string net_WebSockets_ServerWindowBitsNegotiationFailure { get; }
    internal static string net_WebSockets_ClientWindowBitsNegotiationFailure { get; }
    internal static string net_WebSockets_OptionsIncompatibleWithCustomInvoker { get; }
    internal static string net_WebSockets_CustomInvokerRequiredForHttp2 { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_webstatus_ConnectFailure();
    internal static string get_net_uri_NotAbsolute();
    internal static string get_net_WebSockets_AcceptUnsupportedProtocol();
    internal static string get_net_WebSockets_ArgumentOutOfRange_TooSmall();
    internal static string get_net_WebSockets_ConnectStatusExpected();
    internal static string get_net_WebSockets_MissingResponseHeader();
    internal static string get_net_WebSockets_InvalidCharInProtocolString();
    internal static string get_net_WebSockets_InvalidEmptySubProtocol();
    internal static string get_net_WebSockets_Scheme();
    internal static string get_net_WebSockets_AlreadyStarted();
    internal static string get_net_WebSockets_InvalidResponseHeader();
    internal static string get_net_WebSockets_NotConnected();
    internal static string get_net_WebSockets_NoDuplicateProtocol();
    internal static string get_net_WebSockets_ServerWindowBitsNegotiationFailure();
    internal static string get_net_WebSockets_ClientWindowBitsNegotiationFailure();
    internal static string get_net_WebSockets_OptionsIncompatibleWithCustomInvoker();
    internal static string get_net_WebSockets_CustomInvokerRequiredForHttp2();
}
