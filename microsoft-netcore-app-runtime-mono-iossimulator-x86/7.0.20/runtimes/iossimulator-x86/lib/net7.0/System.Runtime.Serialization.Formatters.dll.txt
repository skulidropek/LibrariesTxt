internal static class FxResources.System.Runtime.Serialization.Formatters.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class System.Collections.HashHelpers : object {
    private static Int32[] s_primes;
    private static HashHelpers();
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int ExpandPrime(int oldSize);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal class System.Runtime.Serialization.DeserializationEventHandler : MulticastDelegate {
    public DeserializationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender);
}
internal class System.Runtime.Serialization.FixupHolder : object {
    internal long _id;
    internal object _fixupInfo;
    internal int _fixupType;
    internal FixupHolder(long id, object fixupInfo, int fixupType);
}
internal class System.Runtime.Serialization.FixupHolderList : object {
    internal FixupHolder[] _values;
    internal int _count;
    internal FixupHolderList(int startingSize);
    internal void Add(FixupHolder fixup);
    private void EnlargeArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Serialization.Formatter : object {
    protected ObjectIDGenerator m_idGenerator;
    protected Queue m_objectQueue;
    [NullableAttribute("2")]
public ISurrogateSelector SurrogateSelector { get; public set; }
    [NullableAttribute("2")]
public SerializationBinder Binder { get; public set; }
    public StreamingContext Context { get; public set; }
    [ObsoleteAttribute("BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.")]
[RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the Type of objects being processed cannot be statically discovered.")]
public abstract virtual object Deserialize(Stream serializationStream);
    [NullableContextAttribute("2")]
protected virtual object GetNext(Int64& objID);
    [NullableContextAttribute("2")]
protected virtual long Schedule(object obj);
    [ObsoleteAttribute("BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.")]
[RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the Type of objects being processed cannot be statically discovered.")]
public abstract virtual void Serialize(Stream serializationStream, object graph);
    protected abstract virtual void WriteArray(object obj, string name, Type memberType);
    protected abstract virtual void WriteBoolean(bool val, string name);
    protected abstract virtual void WriteByte(byte val, string name);
    protected abstract virtual void WriteChar(char val, string name);
    protected abstract virtual void WriteDateTime(DateTime val, string name);
    protected abstract virtual void WriteDecimal(decimal val, string name);
    protected abstract virtual void WriteDouble(double val, string name);
    protected abstract virtual void WriteInt16(short val, string name);
    protected abstract virtual void WriteInt32(int val, string name);
    protected abstract virtual void WriteInt64(long val, string name);
    protected abstract virtual void WriteObjectRef(object obj, string name, Type memberType);
    protected virtual void WriteMember(string memberName, object data);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteSByte(sbyte val, string name);
    protected abstract virtual void WriteSingle(float val, string name);
    protected abstract virtual void WriteTimeSpan(TimeSpan val, string name);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteUInt16(ushort val, string name);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteUInt32(UInt32 val, string name);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteUInt64(ulong val, string name);
    protected abstract virtual void WriteValueType(object obj, string name, Type memberType);
    [NullableContextAttribute("2")]
public abstract virtual ISurrogateSelector get_SurrogateSelector();
    [NullableContextAttribute("2")]
public abstract virtual void set_SurrogateSelector(ISurrogateSelector value);
    [NullableContextAttribute("2")]
public abstract virtual SerializationBinder get_Binder();
    [NullableContextAttribute("2")]
public abstract virtual void set_Binder(SerializationBinder value);
    public abstract virtual StreamingContext get_Context();
    public abstract virtual void set_Context(StreamingContext value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Runtime.Serialization.FormatterConverter : object {
    public sealed virtual object Convert(object value, Type type);
    public sealed virtual object Convert(object value, TypeCode typeCode);
    public sealed virtual bool ToBoolean(object value);
    public sealed virtual char ToChar(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual sbyte ToSByte(object value);
    public sealed virtual byte ToByte(object value);
    public sealed virtual short ToInt16(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual ushort ToUInt16(object value);
    public sealed virtual int ToInt32(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual UInt32 ToUInt32(object value);
    public sealed virtual long ToInt64(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual ulong ToUInt64(object value);
    public sealed virtual float ToSingle(object value);
    public sealed virtual double ToDouble(object value);
    public sealed virtual decimal ToDecimal(object value);
    public sealed virtual DateTime ToDateTime(object value);
    public sealed virtual string ToString(object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Runtime.Serialization.Formatters.Binary.BinaryFormatter : object {
    private static ConcurrentDictionary`2<Type, TypeInformation> s_typeNameCache;
    internal ISurrogateSelector _surrogates;
    internal StreamingContext _context;
    internal SerializationBinder _binder;
    internal FormatterTypeStyle _typeFormat;
    internal FormatterAssemblyStyle _assemblyFormat;
    internal TypeFilterLevel _securityLevel;
    public FormatterTypeStyle TypeFormat { get; public set; }
    public FormatterAssemblyStyle AssemblyFormat { get; public set; }
    public TypeFilterLevel FilterLevel { get; public set; }
    public ISurrogateSelector SurrogateSelector { get; public set; }
    public SerializationBinder Binder { get; public set; }
    public StreamingContext Context { get; public set; }
    public BinaryFormatter(ISurrogateSelector selector, StreamingContext context);
    private static BinaryFormatter();
    public FormatterTypeStyle get_TypeFormat();
    public void set_TypeFormat(FormatterTypeStyle value);
    public FormatterAssemblyStyle get_AssemblyFormat();
    public void set_AssemblyFormat(FormatterAssemblyStyle value);
    public TypeFilterLevel get_FilterLevel();
    public void set_FilterLevel(TypeFilterLevel value);
    public sealed virtual ISurrogateSelector get_SurrogateSelector();
    public sealed virtual void set_SurrogateSelector(ISurrogateSelector value);
    public sealed virtual SerializationBinder get_Binder();
    public sealed virtual void set_Binder(SerializationBinder value);
    public sealed virtual StreamingContext get_Context();
    public sealed virtual void set_Context(StreamingContext value);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.")]
[RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the Type of objects being processed cannot be statically discovered.")]
public sealed virtual object Deserialize(Stream serializationStream);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.")]
[RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the Type of objects being processed cannot be statically discovered.")]
public sealed virtual void Serialize(Stream serializationStream, object graph);
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryFormatterWriter : object {
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryParser : object {
}
internal interface System.Runtime.Serialization.Formatters.Binary.IStreamable {
    public abstract virtual void Write(BinaryFormatterWriter output);
    public abstract virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.TypeInformation : object {
}
public enum System.Runtime.Serialization.Formatters.FormatterAssemblyStyle : Enum {
    public int value__;
    public static FormatterAssemblyStyle Simple;
    public static FormatterAssemblyStyle Full;
}
public enum System.Runtime.Serialization.Formatters.FormatterTypeStyle : Enum {
    public int value__;
    public static FormatterTypeStyle TypesWhenNeeded;
    public static FormatterTypeStyle TypesAlways;
    public static FormatterTypeStyle XsdString;
}
public interface System.Runtime.Serialization.Formatters.IFieldInfo {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] FieldNames { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] FieldTypes { get; public set; }
    public abstract virtual String[] get_FieldNames();
    public abstract virtual void set_FieldNames(String[] value);
    public abstract virtual Type[] get_FieldTypes();
    public abstract virtual void set_FieldTypes(Type[] value);
}
public enum System.Runtime.Serialization.Formatters.TypeFilterLevel : Enum {
    public int value__;
    public static TypeFilterLevel Low;
    public static TypeFilterLevel Full;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Runtime.Serialization.FormatterServices : object {
    private static ConcurrentDictionary`2<MemberHolder, MemberInfo[]> s_memberInfoTable;
    private static FormatterServices();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2065:UnrecognizedReflectionPattern")]
private static FieldInfo[] InternalGetSerializableMembers(Type type);
    private static FieldInfo[] GetSerializableFields(Type type);
    private static bool GetParentTypes(Type parentType, Type[]& parentTypes, Int32& parentTypeCount);
    public static MemberInfo[] GetSerializableMembers(Type type);
    public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context);
    public static void CheckTypeSecurity(Type t, TypeFilterLevel securityLevel);
    public static object GetUninitializedObject(Type type);
    public static object GetSafeUninitializedObject(Type type);
    internal static void SerializationSetValue(MemberInfo fi, object target, object value);
    public static object PopulateObjectMembers(object obj, MemberInfo[] members, Object[] data);
    public static Object[] GetObjectData(object obj, MemberInfo[] members);
    public static ISerializationSurrogate GetSurrogateForCyclicalReference(ISerializationSurrogate innerSurrogate);
    [RequiresUnreferencedCodeAttribute("Types might be removed")]
public static Type GetTypeFromAssembly(Assembly assem, string name);
}
[NullableContextAttribute("2")]
public interface System.Runtime.Serialization.IFormatter {
    internal static string RequiresUnreferencedCodeMessage;
    public ISurrogateSelector SurrogateSelector { get; public set; }
    public SerializationBinder Binder { get; public set; }
    public StreamingContext Context { get; public set; }
    [NullableContextAttribute("1")]
[ObsoleteAttribute("BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.")]
[RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the Type of objects being processed cannot be statically discovered.")]
public abstract virtual object Deserialize(Stream serializationStream);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.")]
[RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the Type of objects being processed cannot be statically discovered.")]
public abstract virtual void Serialize(Stream serializationStream, object graph);
    public abstract virtual ISurrogateSelector get_SurrogateSelector();
    public abstract virtual void set_SurrogateSelector(ISurrogateSelector value);
    public abstract virtual SerializationBinder get_Binder();
    public abstract virtual void set_Binder(SerializationBinder value);
    public abstract virtual StreamingContext get_Context();
    public abstract virtual void set_Context(StreamingContext value);
}
[NullableContextAttribute("1")]
public interface System.Runtime.Serialization.ISerializationSurrogate {
    public abstract virtual void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    public abstract virtual object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
[NullableContextAttribute("1")]
public interface System.Runtime.Serialization.ISurrogateSelector {
    public abstract virtual void ChainSelector(ISurrogateSelector selector);
    public abstract virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, ISurrogateSelector& selector);
    [NullableContextAttribute("2")]
public abstract virtual ISurrogateSelector GetNextSelector();
}
internal class System.Runtime.Serialization.LongList : object {
    private Int64[] _values;
    private int _count;
    private int _totalItems;
    private int _currentItem;
    internal int Count { get; }
    internal long Current { get; }
    internal LongList(int startingSize);
    internal void Add(long value);
    internal int get_Count();
    internal void StartEnumeration();
    internal bool MoveNext();
    internal long get_Current();
    internal bool RemoveElement(long value);
    private void EnlargeArray();
}
internal class System.Runtime.Serialization.MemberHolder : object {
    [DynamicallyAccessedMembersAttribute("-1")]
internal Type _memberType;
    internal StreamingContext _context;
    internal MemberHolder(Type type, StreamingContext ctx);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class System.Runtime.Serialization.ObjectHolder : object {
    private object _object;
    internal long _id;
    private int _missingElementsRemaining;
    private int _missingDecendents;
    internal SerializationInfo _serInfo;
    internal ISerializationSurrogate _surrogate;
    internal FixupHolderList _missingElements;
    internal LongList _dependentObjects;
    internal ObjectHolder _next;
    internal int _flags;
    private bool _markForFixupWhenAvailable;
    private ValueTypeFixupInfo _valueFixup;
    private TypeLoadExceptionHolder _typeLoad;
    private bool _reachable;
    internal bool IsIncompleteObjectReference { get; internal set; }
    internal bool RequiresDelayedFixup { get; }
    internal bool RequiresValueTypeFixup { get; }
    internal bool ValueTypeFixupPerformed { get; internal set; }
    internal bool HasISerializable { get; }
    internal bool HasSurrogate { get; }
    internal bool CanSurrogatedObjectValueChange { get; }
    internal bool CanObjectValueChange { get; }
    internal int DirectlyDependentObjects { get; }
    internal int TotalDependentObjects { get; }
    internal bool Reachable { get; internal set; }
    internal bool TypeLoadExceptionReachable { get; }
    internal TypeLoadExceptionHolder TypeLoadException { get; internal set; }
    internal object ObjectValue { get; }
    internal SerializationInfo SerializationInfo { get; internal set; }
    internal ISerializationSurrogate Surrogate { get; }
    internal LongList DependentObjects { get; internal set; }
    internal bool RequiresSerInfoFixup { get; internal set; }
    internal ValueTypeFixupInfo ValueFixup { get; }
    internal bool CompletelyFixed { get; }
    internal long ContainerID { get; }
    internal ObjectHolder(long objID);
    internal ObjectHolder(object obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, Int32[] arrayIndex);
    internal ObjectHolder(string obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, Int32[] arrayIndex);
    private void IncrementDescendentFixups(int amount);
    internal void DecrementFixupsRemaining(ObjectManager manager);
    internal void RemoveDependency(long id);
    internal void AddFixup(FixupHolder fixup, ObjectManager manager);
    private void UpdateDescendentDependencyChain(int amount, ObjectManager manager);
    internal void AddDependency(long dependentObject);
    internal void UpdateData(object obj, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainer, FieldInfo field, Int32[] arrayIndex, ObjectManager manager);
    internal void MarkForCompletionWhenAvailable();
    internal void SetFlags();
    internal bool get_IsIncompleteObjectReference();
    internal void set_IsIncompleteObjectReference(bool value);
    internal bool get_RequiresDelayedFixup();
    internal bool get_RequiresValueTypeFixup();
    internal bool get_ValueTypeFixupPerformed();
    internal void set_ValueTypeFixupPerformed(bool value);
    internal bool get_HasISerializable();
    internal bool get_HasSurrogate();
    internal bool get_CanSurrogatedObjectValueChange();
    internal bool get_CanObjectValueChange();
    internal int get_DirectlyDependentObjects();
    internal int get_TotalDependentObjects();
    internal bool get_Reachable();
    internal void set_Reachable(bool value);
    internal bool get_TypeLoadExceptionReachable();
    internal TypeLoadExceptionHolder get_TypeLoadException();
    internal void set_TypeLoadException(TypeLoadExceptionHolder value);
    internal object get_ObjectValue();
    internal void SetObjectValue(object obj, ObjectManager manager);
    internal SerializationInfo get_SerializationInfo();
    internal void set_SerializationInfo(SerializationInfo value);
    internal ISerializationSurrogate get_Surrogate();
    internal LongList get_DependentObjects();
    internal void set_DependentObjects(LongList value);
    internal bool get_RequiresSerInfoFixup();
    internal void set_RequiresSerInfoFixup(bool value);
    internal ValueTypeFixupInfo get_ValueFixup();
    internal bool get_CompletelyFixed();
    internal long get_ContainerID();
}
internal class System.Runtime.Serialization.ObjectHolderList : object {
    internal ObjectHolder[] _values;
    internal int _count;
    internal int Version { get; }
    internal int Count { get; }
    internal ObjectHolderList(int startingSize);
    internal void Add(ObjectHolder value);
    internal ObjectHolderListEnumerator GetFixupEnumerator();
    private void EnlargeArray();
    internal int get_Version();
    internal int get_Count();
}
internal class System.Runtime.Serialization.ObjectHolderListEnumerator : object {
    private bool _isFixupEnumerator;
    private ObjectHolderList _list;
    private int _startingVersion;
    private int _currPos;
    internal ObjectHolder Current { get; }
    internal ObjectHolderListEnumerator(ObjectHolderList list, bool isFixupEnumerator);
    internal bool MoveNext();
    internal ObjectHolder get_Current();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Runtime.Serialization.ObjectIDGenerator : object {
    internal int _currentCount;
    private int _currentSize;
    private Int64[] _ids;
    private Object[] _objs;
    private int FindElement(object obj, Boolean& found);
    public virtual long GetId(object obj, Boolean& firstTime);
    public virtual long HasId(object obj, Boolean& firstTime);
    private void Rehash();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Runtime.Serialization.ObjectManager : object {
    private static FieldInfo s_nullableValueField;
    private DeserializationEventHandler _onDeserializationHandler;
    private SerializationEventHandler _onDeserializedHandler;
    internal ObjectHolder[] _objects;
    internal object _topObject;
    internal ObjectHolderList _specialFixupObjects;
    internal long _fixupCount;
    internal ISurrogateSelector _selector;
    internal StreamingContext _context;
    [NullableAttribute("2")]
internal object TopObject { get; }
    internal ObjectHolderList SpecialFixupObjects { get; }
    [NullableContextAttribute("2")]
public ObjectManager(ISurrogateSelector selector, StreamingContext context);
    private static ObjectManager();
    private bool CanCallGetType(object obj);
    internal object get_TopObject();
    internal ObjectHolderList get_SpecialFixupObjects();
    internal ObjectHolder FindObjectHolder(long objectID);
    internal ObjectHolder FindOrCreateObjectHolder(long objectID);
    private void AddObjectHolder(ObjectHolder holder);
    private bool GetCompletionInfo(FixupHolder fixup, ObjectHolder& holder, Object& member, bool bThrowIfMissing);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
private void FixupSpecialObject(ObjectHolder holder);
    private bool ResolveObjectReference(ObjectHolder holder);
    private bool DoValueTypeFixup(FieldInfo memberToFix, ObjectHolder holder, object value);
    private static FieldInfo GetNullableValueField(Type type);
    internal void CompleteObject(ObjectHolder holder, bool bObjectFullyComplete);
    private void DoNewlyRegisteredObjectFixups(ObjectHolder holder);
    [NullableContextAttribute("2")]
public virtual object GetObject(long objectID);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
public virtual void RegisterObject(object obj, long objectID);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
public void RegisterObject(object obj, long objectID, SerializationInfo info);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, Int32[] arrayIndex);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
internal void CompleteISerializableObject(object obj, SerializationInfo info, StreamingContext context);
    internal static ConstructorInfo GetDeserializationConstructor(Type t);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
public virtual void DoFixups();
    private void RegisterFixup(FixupHolder fixup, long objectToBeFixed, long objectRequired);
    public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired);
    public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired);
    public virtual void RecordArrayElementFixup(long arrayToBeFixed, int index, long objectRequired);
    public virtual void RecordArrayElementFixup(long arrayToBeFixed, Int32[] indices, long objectRequired);
    public virtual void RaiseDeserializationEvent();
    internal virtual void AddOnDeserialization(DeserializationEventHandler handler);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
internal virtual void AddOnDeserialized(object obj);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
internal virtual void RaiseOnDeserializedEvent(object obj);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
public void RaiseOnDeserializingEvent(object obj);
}
public abstract class System.Runtime.Serialization.SerializationBinder : object {
    [NullableContextAttribute("2")]
public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
    [NullableContextAttribute("1")]
public abstract virtual Type BindToType(string assemblyName, string typeName);
}
public class System.Runtime.Serialization.SerializationEventHandler : MulticastDelegate {
    public SerializationEventHandler(object object, IntPtr method);
    public virtual void Invoke(StreamingContext context);
    public virtual IAsyncResult BeginInvoke(StreamingContext context, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Runtime.Serialization.SerializationEvents : object {
    private List`1<MethodInfo> _onSerializingMethods;
    private List`1<MethodInfo> _onSerializedMethods;
    private List`1<MethodInfo> _onDeserializingMethods;
    private List`1<MethodInfo> _onDeserializedMethods;
    internal bool HasOnSerializingEvents { get; }
    internal SerializationEvents(Type t);
    private List`1<MethodInfo> GetMethodsWithAttribute(Type attribute, Type t);
    internal bool get_HasOnSerializingEvents();
    internal void InvokeOnSerializing(object obj, StreamingContext context);
    internal void InvokeOnDeserializing(object obj, StreamingContext context);
    internal void InvokeOnDeserialized(object obj, StreamingContext context);
    internal SerializationEventHandler AddOnSerialized(object obj, SerializationEventHandler handler);
    internal SerializationEventHandler AddOnDeserialized(object obj, SerializationEventHandler handler);
    private static void InvokeOnDelegate(object obj, StreamingContext context, List`1<MethodInfo> methods);
    private static SerializationEventHandler AddOnDelegate(object obj, SerializationEventHandler handler, List`1<MethodInfo> methods);
}
internal static class System.Runtime.Serialization.SerializationEventsCache : object {
    private static ConcurrentDictionary`2<Type, SerializationEvents> s_cache;
    private static SerializationEventsCache();
    internal static SerializationEvents GetSerializationEventsForType(Type t);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2067:UnrecognizedReflectionPattern")]
private static SerializationEvents CreateSerializationEvents(Type t);
}
internal class System.Runtime.Serialization.SerializationFieldInfo : FieldInfo {
    private FieldInfo m_field;
    private string m_serializationName;
    internal FieldInfo FieldInfo { get; }
    public string Name { get; }
    public Module Module { get; }
    public int MetadataToken { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    public Type FieldType { get; }
    public RuntimeFieldHandle FieldHandle { get; }
    public FieldAttributes Attributes { get; }
    internal SerializationFieldInfo(FieldInfo field, string namePrefix);
    internal FieldInfo get_FieldInfo();
    public virtual string get_Name();
    public virtual Module get_Module();
    public virtual int get_MetadataToken();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual Type get_FieldType();
    public virtual object GetValue(object obj);
    public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
    public virtual RuntimeFieldHandle get_FieldHandle();
    public virtual FieldAttributes get_Attributes();
}
[ExtensionAttribute]
internal static class System.Runtime.Serialization.SerializationInfoExtensions : object {
    private static Action`4<SerializationInfo, string, object, Type> s_updateValue;
    private static SerializationInfoExtensions();
    [ExtensionAttribute]
public static void UpdateValue(SerializationInfo si, string name, object value, Type type);
}
public class System.Runtime.Serialization.SerializationObjectManager : object {
    private Dictionary`2<object, object> _objectSeenTable;
    private StreamingContext _context;
    private SerializationEventHandler _onSerializedHandler;
    public SerializationObjectManager(StreamingContext context);
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("SerializationObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
public void RegisterObject(object obj);
    public void RaiseOnSerializedEvent();
    [RequiresUnreferencedCodeAttribute("SerializationObjectManager is not trim compatible because the Type of objects being managed cannot be statically discovered.")]
private void AddOnSerialized(object obj);
}
internal class System.Runtime.Serialization.SurrogateForCyclicalReference : object {
    private ISerializationSurrogate _innerSurrogate;
    internal SurrogateForCyclicalReference(ISerializationSurrogate innerSurrogate);
    public sealed virtual void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    public sealed virtual object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
internal class System.Runtime.Serialization.SurrogateHashtable : Hashtable {
    internal SurrogateHashtable(int size);
    protected virtual bool KeyEquals(object key, object item);
}
internal class System.Runtime.Serialization.SurrogateKey : object {
    internal Type _type;
    internal StreamingContext _context;
    internal SurrogateKey(Type type, StreamingContext context);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Runtime.Serialization.SurrogateSelector : object {
    internal SurrogateHashtable _surrogates;
    internal ISurrogateSelector _nextSelector;
    public virtual void AddSurrogate(Type type, StreamingContext context, ISerializationSurrogate surrogate);
    private static bool HasCycle(ISurrogateSelector selector);
    public virtual void ChainSelector(ISurrogateSelector selector);
    [NullableContextAttribute("2")]
public virtual ISurrogateSelector GetNextSelector();
    public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, ISurrogateSelector& selector);
    public virtual void RemoveSurrogate(Type type, StreamingContext context);
}
public class System.Runtime.Serialization.TypeLoadExceptionHolder : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [NullableAttribute("2")]
internal string TypeName { get; }
    [CompilerGeneratedAttribute]
internal string get_TypeName();
}
internal class System.Runtime.Serialization.ValueTypeFixupInfo : object {
    private long _containerID;
    private FieldInfo _parentField;
    private Int32[] _parentIndex;
    public long ContainerID { get; }
    public FieldInfo ParentField { get; }
    public Int32[] ParentIndex { get; }
    public ValueTypeFixupInfo(long containerID, FieldInfo member, Int32[] parentIndex);
    public long get_ContainerID();
    public FieldInfo get_ParentField();
    public Int32[] get_ParentIndex();
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Arg_HTCapacityOverflow { get; }
    internal static string Serialization_NonSerType { get; }
    internal static string Argument_DataLengthDifferent { get; }
    internal static string ArgumentNull_NullMember { get; }
    internal static string Serialization_UnknownMemberInfo { get; }
    internal static string Serialization_NoID { get; }
    internal static string Serialization_TooManyElements { get; }
    internal static string Argument_InvalidFieldInfo { get; }
    internal static string Serialization_NeverSeen { get; }
    internal static string Serialization_IORIncomplete { get; }
    internal static string Serialization_ObjectNotSupplied { get; }
    internal static string Serialization_NotCyclicallyReferenceableSurrogate { get; }
    internal static string Serialization_TooManyReferences { get; }
    internal static string Serialization_MissingObject { get; }
    internal static string Serialization_InvalidFixupDiscovered { get; }
    internal static string Serialization_TypeLoadFailure { get; }
    internal static string Serialization_ValueTypeFixup { get; }
    internal static string Serialization_PartialValueTypeFixup { get; }
    internal static string Serialization_UnableToFixup { get; }
    internal static string ArgumentOutOfRange_ObjectID { get; }
    internal static string Serialization_RegisterTwice { get; }
    internal static string Serialization_NotISer { get; }
    internal static string Serialization_ConstructorNotFound { get; }
    internal static string Serialization_IncorrectNumberOfFixups { get; }
    internal static string Serialization_InvalidFixupType { get; }
    internal static string Serialization_IdTooSmall { get; }
    internal static string Serialization_ParentChildIdentical { get; }
    internal static string Serialization_InvalidType { get; }
    internal static string Argument_MustSupplyParent { get; }
    internal static string Argument_MemberAndArray { get; }
    internal static string Argument_MustSupplyContainer { get; }
    internal static string Serialization_SurrogateCycleInArgument { get; }
    internal static string Serialization_SurrogateCycle { get; }
    internal static string BinaryFormatter_SerializationNotSupportedOnThisPlatform { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Arg_HTCapacityOverflow();
    internal static string get_Serialization_NonSerType();
    internal static string get_Argument_DataLengthDifferent();
    internal static string get_ArgumentNull_NullMember();
    internal static string get_Serialization_UnknownMemberInfo();
    internal static string get_Serialization_NoID();
    internal static string get_Serialization_TooManyElements();
    internal static string get_Argument_InvalidFieldInfo();
    internal static string get_Serialization_NeverSeen();
    internal static string get_Serialization_IORIncomplete();
    internal static string get_Serialization_ObjectNotSupplied();
    internal static string get_Serialization_NotCyclicallyReferenceableSurrogate();
    internal static string get_Serialization_TooManyReferences();
    internal static string get_Serialization_MissingObject();
    internal static string get_Serialization_InvalidFixupDiscovered();
    internal static string get_Serialization_TypeLoadFailure();
    internal static string get_Serialization_ValueTypeFixup();
    internal static string get_Serialization_PartialValueTypeFixup();
    internal static string get_Serialization_UnableToFixup();
    internal static string get_ArgumentOutOfRange_ObjectID();
    internal static string get_Serialization_RegisterTwice();
    internal static string get_Serialization_NotISer();
    internal static string get_Serialization_ConstructorNotFound();
    internal static string get_Serialization_IncorrectNumberOfFixups();
    internal static string get_Serialization_InvalidFixupType();
    internal static string get_Serialization_IdTooSmall();
    internal static string get_Serialization_ParentChildIdentical();
    internal static string get_Serialization_InvalidType();
    internal static string get_Argument_MustSupplyParent();
    internal static string get_Argument_MemberAndArray();
    internal static string get_Argument_MustSupplyContainer();
    internal static string get_Serialization_SurrogateCycleInArgument();
    internal static string get_Serialization_SurrogateCycle();
    internal static string get_BinaryFormatter_SerializationNotSupportedOnThisPlatform();
}
