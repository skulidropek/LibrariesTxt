internal static class FxResources.System.Threading.Tasks.Parallel.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Parallel_Invoke_ActionNull { get; }
    internal static string Parallel_ForEach_OrderedPartitionerKeysNotNormalized { get; }
    internal static string Parallel_ForEach_PartitionerNotDynamic { get; }
    internal static string Parallel_ForEach_PartitionerReturnedNull { get; }
    internal static string Parallel_ForEach_NullEnumerator { get; }
    internal static string ParallelState_Break_InvalidOperationException_BreakAfterStop { get; }
    internal static string ParallelState_Stop_InvalidOperationException_StopAfterBreak { get; }
    internal static string ParallelState_NotSupportedException_UnsupportedMethod { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Parallel_Invoke_ActionNull();
    internal static string get_Parallel_ForEach_OrderedPartitionerKeysNotNormalized();
    internal static string get_Parallel_ForEach_PartitionerNotDynamic();
    internal static string get_Parallel_ForEach_PartitionerReturnedNull();
    internal static string get_Parallel_ForEach_NullEnumerator();
    internal static string get_ParallelState_Break_InvalidOperationException_BreakAfterStop();
    internal static string get_ParallelState_Stop_InvalidOperationException_StopAfterBreak();
    internal static string get_ParallelState_NotSupportedException_UnsupportedMethod();
}
internal class System.Threading.Tasks.IndexRange : ValueType {
    internal long _nFromInclusive;
    internal long _nToExclusive;
    internal StrongBox`1 modreq(System.Runtime.CompilerServices.IsVolatile) _nSharedCurrentIndexOffset;
    internal int _bRangeFinished;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class System.Threading.Tasks.Parallel : object {
    internal static int s_forkJoinContextID;
    internal static ParallelOptions s_defaultParallelOptions;
    private static int DefaultDegreeOfParallelism { get; }
    private static Parallel();
    public static void Invoke(Action[] actions);
    public static void Invoke(ParallelOptions parallelOptions, Action[] actions);
    public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action`1<int> body);
    public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action`1<long> body);
    public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action`1<int> body);
    public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action`1<long> body);
    public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action`2<int, ParallelLoopState> body);
    public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action`2<long, ParallelLoopState> body);
    public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action`2<int, ParallelLoopState> body);
    public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action`2<long, ParallelLoopState> body);
    public static ParallelLoopResult For(int fromInclusive, int toExclusive, Func`1<TLocal> localInit, Func`4<int, ParallelLoopState, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    public static ParallelLoopResult For(long fromInclusive, long toExclusive, Func`1<TLocal> localInit, Func`4<long, ParallelLoopState, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Func`1<TLocal> localInit, Func`4<int, ParallelLoopState, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Func`1<TLocal> localInit, Func`4<long, ParallelLoopState, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    private static bool CheckTimeoutReached(int timeoutOccursAt);
    private static int ComputeTimeoutPoint(int timeoutLength);
    private static ParallelLoopResult ForWorker(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action`1<int> body, Action`2<int, ParallelLoopState> bodyWithState, Func`4<int, ParallelLoopState, TLocal, TLocal> bodyWithLocal, Func`1<TLocal> localInit, Action`1<TLocal> localFinally);
    private static ParallelLoopResult ForWorker64(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action`1<long> body, Action`2<long, ParallelLoopState> bodyWithState, Func`4<long, ParallelLoopState, TLocal, TLocal> bodyWithLocal, Func`1<TLocal> localInit, Action`1<TLocal> localFinally);
    public static ParallelLoopResult ForEach(IEnumerable`1<TSource> source, Action`1<TSource> body);
    public static ParallelLoopResult ForEach(IEnumerable`1<TSource> source, ParallelOptions parallelOptions, Action`1<TSource> body);
    public static ParallelLoopResult ForEach(IEnumerable`1<TSource> source, Action`2<TSource, ParallelLoopState> body);
    public static ParallelLoopResult ForEach(IEnumerable`1<TSource> source, ParallelOptions parallelOptions, Action`2<TSource, ParallelLoopState> body);
    public static ParallelLoopResult ForEach(IEnumerable`1<TSource> source, Action`3<TSource, ParallelLoopState, long> body);
    public static ParallelLoopResult ForEach(IEnumerable`1<TSource> source, ParallelOptions parallelOptions, Action`3<TSource, ParallelLoopState, long> body);
    public static ParallelLoopResult ForEach(IEnumerable`1<TSource> source, Func`1<TLocal> localInit, Func`4<TSource, ParallelLoopState, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    public static ParallelLoopResult ForEach(IEnumerable`1<TSource> source, ParallelOptions parallelOptions, Func`1<TLocal> localInit, Func`4<TSource, ParallelLoopState, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    public static ParallelLoopResult ForEach(IEnumerable`1<TSource> source, Func`1<TLocal> localInit, Func`5<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    public static ParallelLoopResult ForEach(IEnumerable`1<TSource> source, ParallelOptions parallelOptions, Func`1<TLocal> localInit, Func`5<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    private static ParallelLoopResult ForEachWorker(IEnumerable`1<TSource> source, ParallelOptions parallelOptions, Action`1<TSource> body, Action`2<TSource, ParallelLoopState> bodyWithState, Action`3<TSource, ParallelLoopState, long> bodyWithStateAndIndex, Func`4<TSource, ParallelLoopState, TLocal, TLocal> bodyWithStateAndLocal, Func`5<TSource, ParallelLoopState, long, TLocal, TLocal> bodyWithEverything, Func`1<TLocal> localInit, Action`1<TLocal> localFinally);
    private static ParallelLoopResult ForEachWorker(TSource[] array, ParallelOptions parallelOptions, Action`1<TSource> body, Action`2<TSource, ParallelLoopState> bodyWithState, Action`3<TSource, ParallelLoopState, long> bodyWithStateAndIndex, Func`4<TSource, ParallelLoopState, TLocal, TLocal> bodyWithStateAndLocal, Func`5<TSource, ParallelLoopState, long, TLocal, TLocal> bodyWithEverything, Func`1<TLocal> localInit, Action`1<TLocal> localFinally);
    private static ParallelLoopResult ForEachWorker(IList`1<TSource> list, ParallelOptions parallelOptions, Action`1<TSource> body, Action`2<TSource, ParallelLoopState> bodyWithState, Action`3<TSource, ParallelLoopState, long> bodyWithStateAndIndex, Func`4<TSource, ParallelLoopState, TLocal, TLocal> bodyWithStateAndLocal, Func`5<TSource, ParallelLoopState, long, TLocal, TLocal> bodyWithEverything, Func`1<TLocal> localInit, Action`1<TLocal> localFinally);
    public static ParallelLoopResult ForEach(Partitioner`1<TSource> source, Action`1<TSource> body);
    public static ParallelLoopResult ForEach(Partitioner`1<TSource> source, Action`2<TSource, ParallelLoopState> body);
    public static ParallelLoopResult ForEach(OrderablePartitioner`1<TSource> source, Action`3<TSource, ParallelLoopState, long> body);
    public static ParallelLoopResult ForEach(Partitioner`1<TSource> source, Func`1<TLocal> localInit, Func`4<TSource, ParallelLoopState, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    public static ParallelLoopResult ForEach(OrderablePartitioner`1<TSource> source, Func`1<TLocal> localInit, Func`5<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    public static ParallelLoopResult ForEach(Partitioner`1<TSource> source, ParallelOptions parallelOptions, Action`1<TSource> body);
    public static ParallelLoopResult ForEach(Partitioner`1<TSource> source, ParallelOptions parallelOptions, Action`2<TSource, ParallelLoopState> body);
    public static ParallelLoopResult ForEach(OrderablePartitioner`1<TSource> source, ParallelOptions parallelOptions, Action`3<TSource, ParallelLoopState, long> body);
    public static ParallelLoopResult ForEach(Partitioner`1<TSource> source, ParallelOptions parallelOptions, Func`1<TLocal> localInit, Func`4<TSource, ParallelLoopState, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    public static ParallelLoopResult ForEach(OrderablePartitioner`1<TSource> source, ParallelOptions parallelOptions, Func`1<TLocal> localInit, Func`5<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action`1<TLocal> localFinally);
    private static ParallelLoopResult PartitionerForEachWorker(Partitioner`1<TSource> source, ParallelOptions parallelOptions, Action`1<TSource> simpleBody, Action`2<TSource, ParallelLoopState> bodyWithState, Action`3<TSource, ParallelLoopState, long> bodyWithStateAndIndex, Func`4<TSource, ParallelLoopState, TLocal, TLocal> bodyWithStateAndLocal, Func`5<TSource, ParallelLoopState, long, TLocal, TLocal> bodyWithEverything, Func`1<TLocal> localInit, Action`1<TLocal> localFinally);
    private static OperationCanceledException ReduceToSingleCancellationException(ICollection exceptions, CancellationToken cancelToken);
    private static void ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException);
    public static Task ForEachAsync(IEnumerable`1<TSource> source, Func`3<TSource, CancellationToken, ValueTask> body);
    public static Task ForEachAsync(IEnumerable`1<TSource> source, CancellationToken cancellationToken, Func`3<TSource, CancellationToken, ValueTask> body);
    public static Task ForEachAsync(IEnumerable`1<TSource> source, ParallelOptions parallelOptions, Func`3<TSource, CancellationToken, ValueTask> body);
    private static Task ForEachAsync(IEnumerable`1<TSource> source, int dop, TaskScheduler scheduler, CancellationToken cancellationToken, Func`3<TSource, CancellationToken, ValueTask> body);
    public static Task ForEachAsync(IAsyncEnumerable`1<TSource> source, Func`3<TSource, CancellationToken, ValueTask> body);
    public static Task ForEachAsync(IAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken, Func`3<TSource, CancellationToken, ValueTask> body);
    public static Task ForEachAsync(IAsyncEnumerable`1<TSource> source, ParallelOptions parallelOptions, Func`3<TSource, CancellationToken, ValueTask> body);
    private static Task ForEachAsync(IAsyncEnumerable`1<TSource> source, int dop, TaskScheduler scheduler, CancellationToken cancellationToken, Func`3<TSource, CancellationToken, ValueTask> body);
    private static int get_DefaultDegreeOfParallelism();
}
[EventSourceAttribute]
internal class System.Threading.Tasks.ParallelEtwProvider : EventSource {
    public static ParallelEtwProvider Log;
    private static ParallelEtwProvider();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:UnrecognizedReflectionPattern")]
[EventAttribute("1")]
public void ParallelLoopBegin(int OriginatingTaskSchedulerID, int OriginatingTaskID, int ForkJoinContextID, ForkJoinOperationType OperationType, long InclusiveFrom, long ExclusiveTo);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:UnrecognizedReflectionPattern")]
[EventAttribute("2")]
public void ParallelLoopEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int ForkJoinContextID, long TotalIterations);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:UnrecognizedReflectionPattern")]
[EventAttribute("3")]
public void ParallelInvokeBegin(int OriginatingTaskSchedulerID, int OriginatingTaskID, int ForkJoinContextID, ForkJoinOperationType OperationType, int ActionCount);
    [EventAttribute("4")]
public void ParallelInvokeEnd(int OriginatingTaskSchedulerID, int OriginatingTaskID, int ForkJoinContextID);
    [EventAttribute("5")]
public void ParallelFork(int OriginatingTaskSchedulerID, int OriginatingTaskID, int ForkJoinContextID);
    [EventAttribute("6")]
public void ParallelJoin(int OriginatingTaskSchedulerID, int OriginatingTaskID, int ForkJoinContextID);
}
public class System.Threading.Tasks.ParallelLoopResult : ValueType {
    internal bool _completed;
    internal Nullable`1<long> _lowestBreakIteration;
    public bool IsCompleted { get; }
    public Nullable`1<long> LowestBreakIteration { get; }
    public bool get_IsCompleted();
    public Nullable`1<long> get_LowestBreakIteration();
}
[DebuggerDisplayAttribute("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")]
public class System.Threading.Tasks.ParallelLoopState : object {
    private ParallelLoopStateFlags _flagsBase;
    internal bool InternalShouldExitCurrentIteration { get; }
    public bool ShouldExitCurrentIteration { get; }
    public bool IsStopped { get; }
    public bool IsExceptional { get; }
    internal Nullable`1<long> InternalLowestBreakIteration { get; }
    public Nullable`1<long> LowestBreakIteration { get; }
    internal ParallelLoopState(ParallelLoopStateFlags fbase);
    internal virtual bool get_InternalShouldExitCurrentIteration();
    public bool get_ShouldExitCurrentIteration();
    public bool get_IsStopped();
    public bool get_IsExceptional();
    internal virtual Nullable`1<long> get_InternalLowestBreakIteration();
    public Nullable`1<long> get_LowestBreakIteration();
    public void Stop();
    internal virtual void InternalBreak();
    public void Break();
    internal static void Break(int iteration, ParallelLoopStateFlags32 pflags);
    internal static void Break(long iteration, ParallelLoopStateFlags64 pflags);
}
internal class System.Threading.Tasks.ParallelLoopState32 : ParallelLoopState {
    private ParallelLoopStateFlags32 _sharedParallelStateFlags;
    private int _currentIteration;
    internal int CurrentIteration { get; internal set; }
    internal bool InternalShouldExitCurrentIteration { get; }
    internal Nullable`1<long> InternalLowestBreakIteration { get; }
    internal ParallelLoopState32(ParallelLoopStateFlags32 sharedParallelStateFlags);
    internal int get_CurrentIteration();
    internal void set_CurrentIteration(int value);
    internal virtual bool get_InternalShouldExitCurrentIteration();
    internal virtual Nullable`1<long> get_InternalLowestBreakIteration();
    internal virtual void InternalBreak();
}
internal class System.Threading.Tasks.ParallelLoopState64 : ParallelLoopState {
    private ParallelLoopStateFlags64 _sharedParallelStateFlags;
    private long _currentIteration;
    internal long CurrentIteration { get; internal set; }
    internal bool InternalShouldExitCurrentIteration { get; }
    internal Nullable`1<long> InternalLowestBreakIteration { get; }
    internal ParallelLoopState64(ParallelLoopStateFlags64 sharedParallelStateFlags);
    internal long get_CurrentIteration();
    internal void set_CurrentIteration(long value);
    internal virtual bool get_InternalShouldExitCurrentIteration();
    internal virtual Nullable`1<long> get_InternalLowestBreakIteration();
    internal virtual void InternalBreak();
}
internal class System.Threading.Tasks.ParallelLoopStateFlags : object {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _loopStateFlags;
    internal int LoopStateFlags { get; }
    internal int get_LoopStateFlags();
    internal bool AtomicLoopStateUpdate(int newState, int illegalStates);
    internal bool AtomicLoopStateUpdate(int newState, int illegalStates, Int32& oldState);
    internal void SetExceptional();
    internal void Stop();
    internal bool Cancel();
}
internal class System.Threading.Tasks.ParallelLoopStateFlags32 : ParallelLoopStateFlags {
    internal Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _lowestBreakIteration;
    internal int LowestBreakIteration { get; }
    internal Nullable`1<long> NullableLowestBreakIteration { get; }
    internal int get_LowestBreakIteration();
    internal Nullable`1<long> get_NullableLowestBreakIteration();
    internal bool ShouldExitLoop(int CallerIteration);
    internal bool ShouldExitLoop();
}
internal class System.Threading.Tasks.ParallelLoopStateFlags64 : ParallelLoopStateFlags {
    internal long _lowestBreakIteration;
    internal long LowestBreakIteration { get; }
    internal Nullable`1<long> NullableLowestBreakIteration { get; }
    internal long get_LowestBreakIteration();
    internal Nullable`1<long> get_NullableLowestBreakIteration();
    internal bool ShouldExitLoop(long CallerIteration);
    internal bool ShouldExitLoop();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Threading.Tasks.ParallelOptions : object {
    private TaskScheduler _scheduler;
    private int _maxDegreeOfParallelism;
    private CancellationToken _cancellationToken;
    public TaskScheduler TaskScheduler { get; public set; }
    [NullableAttribute("1")]
internal TaskScheduler EffectiveTaskScheduler { get; }
    public int MaxDegreeOfParallelism { get; public set; }
    public CancellationToken CancellationToken { get; public set; }
    internal int EffectiveMaxConcurrencyLevel { get; }
    public TaskScheduler get_TaskScheduler();
    public void set_TaskScheduler(TaskScheduler value);
    internal TaskScheduler get_EffectiveTaskScheduler();
    public int get_MaxDegreeOfParallelism();
    public void set_MaxDegreeOfParallelism(int value);
    public CancellationToken get_CancellationToken();
    public void set_CancellationToken(CancellationToken value);
    internal int get_EffectiveMaxConcurrencyLevel();
}
internal class System.Threading.Tasks.RangeManager : object {
    internal IndexRange[] _indexRanges;
    internal bool _use32BitCurrentIndex;
    internal int _nCurrentIndexRangeToAssign;
    internal long _nStep;
    internal RangeManager(long nFromInclusive, long nToExclusive, long nStep, int nNumExpectedWorkers);
    internal RangeWorker RegisterNewWorker();
}
internal class System.Threading.Tasks.RangeWorker : ValueType {
    internal IndexRange[] _indexRanges;
    internal int _nCurrentIndexRange;
    internal long _nStep;
    internal long _nIncrementValue;
    internal long _nMaxIncrementValue;
    internal bool _use32BitCurrentIndex;
    internal bool IsInitialized { get; }
    internal RangeWorker(IndexRange[] ranges, int nInitialRange, long nStep, bool use32BitCurrentIndex);
    internal bool get_IsInitialized();
    internal bool FindNewWork(Int64& nFromInclusiveLocal, Int64& nToExclusiveLocal);
    internal bool FindNewWork32(Int32& nFromInclusiveLocal32, Int32& nToExclusiveLocal32);
}
internal class System.Threading.Tasks.TaskReplicator : object {
    private TaskScheduler _scheduler;
    private bool _stopOnFirstFailure;
    private ConcurrentQueue`1<Replica> _pendingReplicas;
    private ConcurrentQueue`1<Exception> _exceptions;
    private bool _stopReplicating;
    private TaskReplicator(ParallelOptions options, bool stopOnFirstFailure);
    public static void Run(ReplicatableUserAction`1<TState> action, ParallelOptions options, bool stopOnFirstFailure);
    private static int GenerateCooperativeMultitaskingTaskTimeout();
}
