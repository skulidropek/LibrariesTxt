internal static class FxResources.System.Reflection.TypeExtensions.SR : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.AssemblyExtensions : object {
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Types might be removed")]
public static Type[] GetExportedTypes(Assembly assembly);
    [ExtensionAttribute]
public static Module[] GetModules(Assembly assembly);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Types might be removed")]
public static Type[] GetTypes(Assembly assembly);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.EventInfoExtensions : object {
    [ExtensionAttribute]
public static MethodInfo GetAddMethod(EventInfo eventInfo);
    [ExtensionAttribute]
public static MethodInfo GetAddMethod(EventInfo eventInfo, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetRaiseMethod(EventInfo eventInfo);
    [ExtensionAttribute]
public static MethodInfo GetRaiseMethod(EventInfo eventInfo, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetRemoveMethod(EventInfo eventInfo);
    [ExtensionAttribute]
public static MethodInfo GetRemoveMethod(EventInfo eventInfo, bool nonPublic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static bool HasMetadataToken(MemberInfo member);
    [ExtensionAttribute]
public static int GetMetadataToken(MemberInfo member);
    [ExtensionAttribute]
private static int GetMetadataTokenOrZeroOrThrow(MemberInfo member);
}
[ExtensionAttribute]
public static class System.Reflection.MethodInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static MethodInfo GetBaseDefinition(MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.ModuleExtensions : object {
    [ExtensionAttribute]
public static bool HasModuleVersionId(Module module);
    [ExtensionAttribute]
public static Guid GetModuleVersionId(Module module);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static MethodInfo[] GetAccessors(PropertyInfo property);
    [ExtensionAttribute]
public static MethodInfo[] GetAccessors(PropertyInfo property, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetGetMethod(PropertyInfo property);
    [ExtensionAttribute]
public static MethodInfo GetGetMethod(PropertyInfo property, bool nonPublic);
    [ExtensionAttribute]
public static MethodInfo GetSetMethod(PropertyInfo property);
    [ExtensionAttribute]
public static MethodInfo GetSetMethod(PropertyInfo property, bool nonPublic);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Reflection.TypeExtensions : object {
    [ExtensionAttribute]
public static ConstructorInfo GetConstructor(Type type, Type[] types);
    [ExtensionAttribute]
public static ConstructorInfo[] GetConstructors(Type type);
    [ExtensionAttribute]
public static ConstructorInfo[] GetConstructors(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static MemberInfo[] GetDefaultMembers(Type type);
    [ExtensionAttribute]
public static EventInfo GetEvent(Type type, string name);
    [ExtensionAttribute]
public static EventInfo GetEvent(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static EventInfo[] GetEvents(Type type);
    [ExtensionAttribute]
public static EventInfo[] GetEvents(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static FieldInfo GetField(Type type, string name);
    [ExtensionAttribute]
public static FieldInfo GetField(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static FieldInfo[] GetFields(Type type);
    [ExtensionAttribute]
public static FieldInfo[] GetFields(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static Type[] GetGenericArguments(Type type);
    [ExtensionAttribute]
public static Type[] GetInterfaces(Type type);
    [ExtensionAttribute]
public static MemberInfo[] GetMember(Type type, string name);
    [ExtensionAttribute]
public static MemberInfo[] GetMember(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static MemberInfo[] GetMembers(Type type);
    [ExtensionAttribute]
public static MemberInfo[] GetMembers(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static MethodInfo GetMethod(Type type, string name);
    [ExtensionAttribute]
public static MethodInfo GetMethod(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static MethodInfo GetMethod(Type type, string name, Type[] types);
    [ExtensionAttribute]
public static MethodInfo[] GetMethods(Type type);
    [ExtensionAttribute]
public static MethodInfo[] GetMethods(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static Type GetNestedType(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static Type[] GetNestedTypes(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static PropertyInfo[] GetProperties(Type type);
    [ExtensionAttribute]
public static PropertyInfo[] GetProperties(Type type, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static PropertyInfo GetProperty(Type type, string name);
    [ExtensionAttribute]
public static PropertyInfo GetProperty(Type type, string name, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static PropertyInfo GetProperty(Type type, string name, Type returnType);
    [ExtensionAttribute]
public static PropertyInfo GetProperty(Type type, string name, Type returnType, Type[] types);
    [ExtensionAttribute]
public static bool IsAssignableFrom(Type type, Type c);
    [ExtensionAttribute]
public static bool IsInstanceOfType(Type type, object o);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string NoMetadataTokenAvailable { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static ResourceManager get_ResourceManager();
    internal static string get_NoMetadataTokenAvailable();
}
