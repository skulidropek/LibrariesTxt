internal static class FxResources.System.Threading.SR : object {
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string CountdownEvent_Increment_AlreadyZero { get; }
    internal static string CountdownEvent_Increment_AlreadyMax { get; }
    internal static string CountdownEvent_Decrement_BelowZero { get; }
    internal static string Common_OperationCanceled { get; }
    internal static string Barrier_SignalAndWait_InvalidOperation_ZeroTotal { get; }
    internal static string Barrier_SignalAndWait_ArgumentOutOfRange { get; }
    internal static string Barrier_RemoveParticipants_InvalidOperation { get; }
    internal static string Barrier_RemoveParticipants_ArgumentOutOfRange { get; }
    internal static string Barrier_InvalidOperation_CalledFromPHA { get; }
    internal static string Barrier_SignalAndWait_InvalidOperation_ThreadsExceeded { get; }
    internal static string BarrierPostPhaseException { get; }
    internal static string Barrier_AddParticipants_Overflow_ArgumentOutOfRange { get; }
    internal static string Overflow_UInt16 { get; }
    internal static string ReaderWriterLock_Timeout { get; }
    internal static string ReaderWriterLock_NotOwner { get; }
    internal static string ExceptionFromHResult { get; }
    internal static string ReaderWriterLock_InvalidLockCookie { get; }
    internal static string ReaderWriterLock_RestoreLockWithOwnedLocks { get; }
    internal static string HostExecutionContextManager_InvalidOperation_NotNewCaptureContext { get; }
    internal static string HostExecutionContextManager_InvalidOperation_CannotOverrideSetWithoutRevert { get; }
    internal static string HostExecutionContextManager_InvalidOperation_CannotUseSwitcherOtherThread { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_CountdownEvent_Increment_AlreadyZero();
    internal static string get_CountdownEvent_Increment_AlreadyMax();
    internal static string get_CountdownEvent_Decrement_BelowZero();
    internal static string get_Common_OperationCanceled();
    internal static string get_Barrier_SignalAndWait_InvalidOperation_ZeroTotal();
    internal static string get_Barrier_SignalAndWait_ArgumentOutOfRange();
    internal static string get_Barrier_RemoveParticipants_InvalidOperation();
    internal static string get_Barrier_RemoveParticipants_ArgumentOutOfRange();
    internal static string get_Barrier_InvalidOperation_CalledFromPHA();
    internal static string get_Barrier_SignalAndWait_InvalidOperation_ThreadsExceeded();
    internal static string get_BarrierPostPhaseException();
    internal static string get_Barrier_AddParticipants_Overflow_ArgumentOutOfRange();
    internal static string get_Overflow_UInt16();
    internal static string get_ReaderWriterLock_Timeout();
    internal static string get_ReaderWriterLock_NotOwner();
    internal static string get_ExceptionFromHResult();
    internal static string get_ReaderWriterLock_InvalidLockCookie();
    internal static string get_ReaderWriterLock_RestoreLockWithOwnedLocks();
    internal static string get_HostExecutionContextManager_InvalidOperation_NotNewCaptureContext();
    internal static string get_HostExecutionContextManager_InvalidOperation_CannotOverrideSetWithoutRevert();
    internal static string get_HostExecutionContextManager_InvalidOperation_CannotUseSwitcherOtherThread();
}
[DebuggerDisplayAttribute("ParticipantCount = {ParticipantCount}, ParticipantsRemaining = {ParticipantsRemaining}")]
public class System.Threading.Barrier : object {
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _currentTotalCount;
    private long _currentPhase;
    private bool _disposed;
    private ManualResetEventSlim _oddEvent;
    private ManualResetEventSlim _evenEvent;
    private ExecutionContext _ownerThreadContext;
    private static ContextCallback s_invokePostPhaseAction;
    private Action`1<Barrier> _postPhaseAction;
    private Exception _exception;
    private int _actionCallerID;
    public int ParticipantsRemaining { get; }
    public int ParticipantCount { get; }
    public long CurrentPhaseNumber { get; internal set; }
    public Barrier(int participantCount);
    public Barrier(int participantCount, Action`1<Barrier> postPhaseAction);
    public int get_ParticipantsRemaining();
    public int get_ParticipantCount();
    public long get_CurrentPhaseNumber();
    internal void set_CurrentPhaseNumber(long value);
    private static void GetCurrentTotal(int currentTotal, Int32& current, Int32& total, Boolean& sense);
    private bool SetCurrentTotal(int currentTotal, int current, int total, bool sense);
    [UnsupportedOSPlatformAttribute("browser")]
public long AddParticipant();
    [UnsupportedOSPlatformAttribute("browser")]
public long AddParticipants(int participantCount);
    public void RemoveParticipant();
    public void RemoveParticipants(int participantCount);
    [UnsupportedOSPlatformAttribute("browser")]
public void SignalAndWait();
    [UnsupportedOSPlatformAttribute("browser")]
public void SignalAndWait(CancellationToken cancellationToken);
    [UnsupportedOSPlatformAttribute("browser")]
public bool SignalAndWait(TimeSpan timeout);
    [UnsupportedOSPlatformAttribute("browser")]
public bool SignalAndWait(TimeSpan timeout, CancellationToken cancellationToken);
    [UnsupportedOSPlatformAttribute("browser")]
public bool SignalAndWait(int millisecondsTimeout);
    [UnsupportedOSPlatformAttribute("browser")]
public bool SignalAndWait(int millisecondsTimeout, CancellationToken cancellationToken);
    private void FinishPhase(bool observedSense);
    private static void InvokePostPhaseAction(object obj);
    private void SetResetEvents(bool observedSense);
    private void WaitCurrentPhase(ManualResetEventSlim currentPhaseEvent, long observedPhase);
    [UnsupportedOSPlatformAttribute("browser")]
private bool DiscontinuousWait(ManualResetEventSlim currentPhaseEvent, int totalTimeout, CancellationToken token, long observedPhase);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Threading.BarrierPostPhaseException : Exception {
    public BarrierPostPhaseException(Exception innerException);
    public BarrierPostPhaseException(string message);
    public BarrierPostPhaseException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected BarrierPostPhaseException(SerializationInfo info, StreamingContext context);
}
[EventSourceAttribute]
internal class System.Threading.CdsSyncEtwBCLProvider : EventSource {
    public static CdsSyncEtwBCLProvider Log;
    private static CdsSyncEtwBCLProvider();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:UnrecognizedReflectionPattern")]
[EventAttribute("3")]
public void Barrier_PhaseFinished(bool currentSense, long phaseNum);
}
[DebuggerDisplayAttribute("InitialCount = {InitialCount}, CurrentCount = {CurrentCount}")]
public class System.Threading.CountdownEvent : object {
    private int _initialCount;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _currentCount;
    private ManualResetEventSlim _event;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    public int CurrentCount { get; }
    public int InitialCount { get; }
    public bool IsSet { get; }
    [NullableAttribute("1")]
public WaitHandle WaitHandle { get; }
    public CountdownEvent(int initialCount);
    public int get_CurrentCount();
    public int get_InitialCount();
    public bool get_IsSet();
    [NullableContextAttribute("1")]
public WaitHandle get_WaitHandle();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public bool Signal();
    public bool Signal(int signalCount);
    public void AddCount();
    public bool TryAddCount();
    public void AddCount(int signalCount);
    public bool TryAddCount(int signalCount);
    public void Reset();
    public void Reset(int count);
    [UnsupportedOSPlatformAttribute("browser")]
public void Wait();
    [UnsupportedOSPlatformAttribute("browser")]
public void Wait(CancellationToken cancellationToken);
    [UnsupportedOSPlatformAttribute("browser")]
public bool Wait(TimeSpan timeout);
    [UnsupportedOSPlatformAttribute("browser")]
public bool Wait(TimeSpan timeout, CancellationToken cancellationToken);
    [UnsupportedOSPlatformAttribute("browser")]
public bool Wait(int millisecondsTimeout);
    [UnsupportedOSPlatformAttribute("browser")]
public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Threading.HostExecutionContext : object {
    [CompilerGeneratedAttribute]
private object <State>k__BackingField;
    protected internal object State { get; protected internal set; }
    public HostExecutionContext(object state);
    [CompilerGeneratedAttribute]
protected internal object get_State();
    [CompilerGeneratedAttribute]
protected internal void set_State(object value);
    [NullableContextAttribute("1")]
public virtual HostExecutionContext CreateCopy();
    public sealed virtual void Dispose();
    public virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Threading.HostExecutionContextManager : object {
    [ThreadStaticAttribute]
private static HostExecutionContext t_currentContext;
    [NullableContextAttribute("2")]
public virtual HostExecutionContext Capture();
    public virtual object SetHostExecutionContext(HostExecutionContext hostExecutionContext);
    public virtual void Revert(object previousState);
}
public class System.Threading.LockCookie : ValueType {
    internal LockCookieFlags _flags;
    internal ushort _readerLevel;
    internal ushort _writerLevel;
    internal int _threadID;
    public virtual int GetHashCode();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(LockCookie obj);
    public static bool op_Equality(LockCookie a, LockCookie b);
    public static bool op_Inequality(LockCookie a, LockCookie b);
}
[FlagsAttribute]
internal enum System.Threading.LockCookieFlags : Enum {
    public int value__;
    public static LockCookieFlags Upgrade;
    public static LockCookieFlags Release;
    public static LockCookieFlags OwnedNone;
    public static LockCookieFlags OwnedWriter;
    public static LockCookieFlags OwnedReader;
    public static LockCookieFlags Invalid;
}
public class System.Threading.ReaderWriterLock : CriticalFinalizerObject {
    private static int DefaultSpinCount;
    private static long s_mostRecentLockID;
    private ManualResetEventSlim _readerEvent;
    private AutoResetEvent _writerEvent;
    private long _lockID;
    private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _state;
    private int _writerID;
    private int _writerSeqNum;
    private ushort _writerLevel;
    public bool IsReaderLockHeld { get; }
    public bool IsWriterLockHeld { get; }
    public int WriterSeqNum { get; }
    private static ReaderWriterLock();
    public bool get_IsReaderLockHeld();
    public bool get_IsWriterLockHeld();
    public int get_WriterSeqNum();
    public bool AnyWritersSince(int seqNum);
    [UnsupportedOSPlatformAttribute("browser")]
public void AcquireReaderLock(int millisecondsTimeout);
    [UnsupportedOSPlatformAttribute("browser")]
public void AcquireReaderLock(TimeSpan timeout);
    public void AcquireWriterLock(int millisecondsTimeout);
    public void AcquireWriterLock(TimeSpan timeout);
    public void ReleaseReaderLock();
    public void ReleaseWriterLock();
    [UnsupportedOSPlatformAttribute("browser")]
public LockCookie UpgradeToWriterLock(int millisecondsTimeout);
    [UnsupportedOSPlatformAttribute("browser")]
public LockCookie UpgradeToWriterLock(TimeSpan timeout);
    public void DowngradeFromWriterLock(LockCookie& lockCookie);
    public LockCookie ReleaseLock();
    [UnsupportedOSPlatformAttribute("browser")]
public void RestoreLock(LockCookie& lockCookie);
    [UnsupportedOSPlatformAttribute("browser")]
private void RecoverLock(LockCookie& lockCookie, LockCookieFlags flags);
    private static int GetCurrentThreadID();
    private static bool YieldProcessor();
    private ManualResetEventSlim GetOrCreateReaderEvent();
    private AutoResetEvent GetOrCreateWriterEvent();
    private ManualResetEventSlim TryGetOrCreateReaderEvent();
    private AutoResetEvent TryGetOrCreateWriterEvent();
    private void ReleaseEvents();
    private static int ToTimeoutMilliseconds(TimeSpan timeout);
    private static ReaderWriterLockApplicationException GetTimeoutException();
    private static ReaderWriterLockApplicationException GetNotOwnerException();
    private static ReaderWriterLockApplicationException GetInvalidLockCookieException();
}
