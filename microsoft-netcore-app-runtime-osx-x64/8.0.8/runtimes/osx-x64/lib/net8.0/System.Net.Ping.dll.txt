internal static class FxResources.System.Net.Ping.SR : object {
}
internal static class Interop : object {
}
internal enum System.Net.NetworkInformation.IcmpV4DestinationUnreachableCode : Enum {
    public byte value__;
    public static IcmpV4DestinationUnreachableCode DestinationNetworkUnreachable;
    public static IcmpV4DestinationUnreachableCode DestinationHostUnreachable;
    public static IcmpV4DestinationUnreachableCode DestinationProtocolUnreachable;
    public static IcmpV4DestinationUnreachableCode DestinationPortUnreachable;
    public static IcmpV4DestinationUnreachableCode FragmentationRequiredAndDFFlagSet;
    public static IcmpV4DestinationUnreachableCode SourceRouteFailed;
    public static IcmpV4DestinationUnreachableCode DestinationNetworkUnknown;
    public static IcmpV4DestinationUnreachableCode DestinationHostUnknown;
    public static IcmpV4DestinationUnreachableCode SourceHostIsolated;
    public static IcmpV4DestinationUnreachableCode NetworkAdministrativelyProhibited;
    public static IcmpV4DestinationUnreachableCode HostAdministrativelyProhibited;
    public static IcmpV4DestinationUnreachableCode NetworkUnreachableForTos;
    public static IcmpV4DestinationUnreachableCode HostUnreachableForTos;
    public static IcmpV4DestinationUnreachableCode CommunicationAdministrativelyProhibited;
    public static IcmpV4DestinationUnreachableCode HostPrecedenceViolation;
    public static IcmpV4DestinationUnreachableCode PrecedenceCutoffInEffect;
}
internal static class System.Net.NetworkInformation.IcmpV4MessageConstants : object {
    public static IPStatus MapV4TypeToIPStatus(int type, int code);
}
internal enum System.Net.NetworkInformation.IcmpV4MessageType : Enum {
    public byte value__;
    public static IcmpV4MessageType EchoReply;
    public static IcmpV4MessageType DestinationUnreachable;
    public static IcmpV4MessageType SourceQuench;
    public static IcmpV4MessageType RedirectMessage;
    public static IcmpV4MessageType EchoRequest;
    public static IcmpV4MessageType RouterAdvertisement;
    public static IcmpV4MessageType RouterSolicitation;
    public static IcmpV4MessageType TimeExceeded;
    public static IcmpV4MessageType ParameterProblemBadIPHeader;
    public static IcmpV4MessageType Timestamp;
    public static IcmpV4MessageType TimestampReply;
    public static IcmpV4MessageType InformationRequest;
    public static IcmpV4MessageType InformationReply;
    public static IcmpV4MessageType AddressMaskRequest;
    public static IcmpV4MessageType AddressMaskReply;
    public static IcmpV4MessageType Traceroute;
}
internal enum System.Net.NetworkInformation.IcmpV6DestinationUnreachableCode : Enum {
    public byte value__;
    public static IcmpV6DestinationUnreachableCode NoRouteToDestination;
    public static IcmpV6DestinationUnreachableCode CommunicationAdministrativelyProhibited;
    public static IcmpV6DestinationUnreachableCode BeyondScopeOfSourceAddress;
    public static IcmpV6DestinationUnreachableCode AddressUnreachable;
    public static IcmpV6DestinationUnreachableCode PortUnreachable;
    public static IcmpV6DestinationUnreachableCode SourceAddressFailedPolicy;
    public static IcmpV6DestinationUnreachableCode RejectRouteToDestination;
    public static IcmpV6DestinationUnreachableCode SourceRoutingHeaderError;
}
internal static class System.Net.NetworkInformation.IcmpV6MessageConstants : object {
    public static IPStatus MapV6TypeToIPStatus(byte type, byte code);
}
internal enum System.Net.NetworkInformation.IcmpV6MessageType : Enum {
    public byte value__;
    public static IcmpV6MessageType DestinationUnreachable;
    public static IcmpV6MessageType PacketTooBig;
    public static IcmpV6MessageType TimeExceeded;
    public static IcmpV6MessageType ParameterProblem;
    public static IcmpV6MessageType EchoRequest;
    public static IcmpV6MessageType EchoReply;
}
internal enum System.Net.NetworkInformation.IcmpV6ParameterProblemCode : Enum {
    public byte value__;
    public static IcmpV6ParameterProblemCode ErroneousHeaderField;
    public static IcmpV6ParameterProblemCode UnrecognizedNextHeader;
    public static IcmpV6ParameterProblemCode UnrecognizedIpv6Option;
}
internal enum System.Net.NetworkInformation.IcmpV6TimeExceededCode : Enum {
    public byte value__;
    public static IcmpV6TimeExceededCode HopLimitExceeded;
    public static IcmpV6TimeExceededCode FragmentReassemblyTimeExceeded;
}
public enum System.Net.NetworkInformation.IPStatus : Enum {
    public int value__;
    public static IPStatus Success;
    public static IPStatus DestinationNetworkUnreachable;
    public static IPStatus DestinationHostUnreachable;
    public static IPStatus DestinationProtocolUnreachable;
    public static IPStatus DestinationPortUnreachable;
    public static IPStatus DestinationProhibited;
    public static IPStatus NoResources;
    public static IPStatus BadOption;
    public static IPStatus HardwareError;
    public static IPStatus PacketTooBig;
    public static IPStatus TimedOut;
    public static IPStatus BadRoute;
    public static IPStatus TtlExpired;
    public static IPStatus TtlReassemblyTimeExceeded;
    public static IPStatus ParameterProblem;
    public static IPStatus SourceQuench;
    public static IPStatus BadDestination;
    public static IPStatus DestinationUnreachable;
    public static IPStatus TimeExceeded;
    public static IPStatus BadHeader;
    public static IPStatus UnrecognizedNextHeader;
    public static IPStatus IcmpError;
    public static IPStatus DestinationScopeMismatch;
    public static IPStatus Unknown;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.NetworkInformation.Ping : Component {
    private ManualResetEventSlim _lockObject;
    private SendOrPostCallback _onPingCompletedDelegate;
    private bool _disposeRequested;
    private Byte[] _defaultSendBuffer;
    private CancellationTokenSource _timeoutOrCancellationSource;
    private bool _canceled;
    private int _status;
    [CompilerGeneratedAttribute]
private PingCompletedEventHandler PingCompleted;
    private static ushort DontFragment;
    private Byte[] DefaultSendBuffer { get; }
    private static Ping();
    private void CheckArgs(int timeout, Byte[] buffer);
    private void CheckArgs(IPAddress address, int timeout, Byte[] buffer);
    [MemberNotNullAttribute("_timeoutOrCancellationSource")]
private void CheckStart();
    private static IPAddress GetAddressSnapshot(IPAddress address);
    private void Finish();
    private void InternalDispose();
    protected virtual void Dispose(bool disposing);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void add_PingCompleted(PingCompletedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void remove_PingCompleted(PingCompletedEventHandler value);
    protected void OnPingCompleted(PingCompletedEventArgs e);
    public PingReply Send(string hostNameOrAddress);
    public PingReply Send(string hostNameOrAddress, int timeout);
    public PingReply Send(IPAddress address);
    public PingReply Send(IPAddress address, int timeout);
    public PingReply Send(string hostNameOrAddress, int timeout, Byte[] buffer);
    public PingReply Send(IPAddress address, int timeout, Byte[] buffer);
    public PingReply Send(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options);
    public PingReply Send(IPAddress address, int timeout, Byte[] buffer, PingOptions options);
    public PingReply Send(IPAddress address, TimeSpan timeout, Byte[] buffer, PingOptions options);
    public PingReply Send(string hostNameOrAddress, TimeSpan timeout, Byte[] buffer, PingOptions options);
    public void SendAsync(string hostNameOrAddress, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, object userToken);
    public void SendAsync(IPAddress address, object userToken);
    public void SendAsync(IPAddress address, int timeout, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, Byte[] buffer, object userToken);
    public void SendAsync(IPAddress address, int timeout, Byte[] buffer, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options, object userToken);
    public void SendAsync(IPAddress address, int timeout, Byte[] buffer, PingOptions options, object userToken);
    private void TranslateTaskToEap(object userToken, Task`1<PingReply> pingTask);
    public Task`1<PingReply> SendPingAsync(IPAddress address);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout, Byte[] buffer);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, Byte[] buffer);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout, Byte[] buffer, PingOptions options);
    public Task`1<PingReply> SendPingAsync(IPAddress address, TimeSpan timeout, Byte[] buffer, PingOptions options, CancellationToken cancellationToken);
    private Task`1<PingReply> SendPingAsync(IPAddress address, int timeout, Byte[] buffer, PingOptions options, CancellationToken cancellationToken);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, TimeSpan timeout, Byte[] buffer, PingOptions options, CancellationToken cancellationToken);
    private Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options, CancellationToken cancellationToken);
    private static int ToTimeoutMilliseconds(TimeSpan timeout);
    public void SendAsyncCancel();
    private void SetCanceled();
    private PingReply GetAddressAndSend(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options);
    [AsyncStateMachineAttribute("System.Net.NetworkInformation.Ping/<SendPingAsyncInternal>d__61`1")]
private Task`1<PingReply> SendPingAsyncInternal(TArg getAddressArg, Func`3<TArg, CancellationToken, ValueTask`1<IPAddress>> getAddress, int timeout, Byte[] buffer, PingOptions options, CancellationToken cancellationToken);
    private static void TestIsIpSupported(IPAddress ip);
    private Byte[] get_DefaultSendBuffer();
    private static SocketConfig GetSocketConfig(IPAddress address, Byte[] buffer, int timeout, PingOptions options);
    private static Socket GetRawSocket(SocketConfig socketConfig);
    private static bool TryGetPingReply(SocketConfig socketConfig, Byte[] receiveBuffer, int bytesReceived, long startingTimestamp, Int32& ipHeaderLength, PingReply& reply);
    private static PingReply SendIcmpEchoRequestOverRawSocket(IPAddress address, Byte[] buffer, int timeout, PingOptions options);
    [AsyncStateMachineAttribute("System.Net.NetworkInformation.Ping/<SendIcmpEchoRequestOverRawSocketAsync>d__75")]
private Task`1<PingReply> SendIcmpEchoRequestOverRawSocketAsync(IPAddress address, Byte[] buffer, int timeout, PingOptions options);
    private static PingReply CreatePingReply(IPStatus status, IPAddress address, long rtt);
    private static Byte[] CreateSendMessageBuffer(IpHeader ipHeader, IcmpHeader icmpHeader, Byte[] payload, int totalLength);
    private static ushort ComputeBufferChecksum(ReadOnlySpan`1<byte> buffer);
    private static PingReply SendPingCore(IPAddress address, Byte[] buffer, int timeout, PingOptions options);
    private Task`1<PingReply> SendPingAsyncCore(IPAddress address, Byte[] buffer, int timeout, PingOptions options);
    [CompilerGeneratedAttribute]
private void <TranslateTaskToEap>b__44_0(Task`1<PingReply> t, object state);
    [CompilerGeneratedAttribute]
private void <TranslateTaskToEap>b__44_1(object o);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class System.Net.NetworkInformation.PingCompletedEventArgs : AsyncCompletedEventArgs {
    [CompilerGeneratedAttribute]
private PingReply <Reply>k__BackingField;
    public PingReply Reply { get; }
    internal PingCompletedEventArgs(PingReply reply, Exception error, bool cancelled, object userToken);
    [CompilerGeneratedAttribute]
public PingReply get_Reply();
}
public class System.Net.NetworkInformation.PingCompletedEventHandler : MulticastDelegate {
    public PingCompletedEventHandler(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual void Invoke(object sender, PingCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PingCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Net.NetworkInformation.PingException : InvalidOperationException {
    public PingException(string message);
    public PingException(string message, Exception innerException);
    [NullableContextAttribute("1")]
[ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected PingException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.Net.NetworkInformation.PingOptions : object {
    private int _ttl;
    private bool _dontFragment;
    public int Ttl { get; public set; }
    public bool DontFragment { get; public set; }
    public PingOptions(int ttl, bool dontFragment);
    public int get_Ttl();
    public void set_Ttl(int value);
    public bool get_DontFragment();
    public void set_DontFragment(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Net.NetworkInformation.PingReply : object {
    [CompilerGeneratedAttribute]
private IPStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IPAddress <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RoundtripTime>k__BackingField;
    [CompilerGeneratedAttribute]
private PingOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Buffer>k__BackingField;
    public IPStatus Status { get; }
    public IPAddress Address { get; }
    public long RoundtripTime { get; }
    [NullableAttribute("2")]
public PingOptions Options { get; }
    public Byte[] Buffer { get; }
    internal PingReply(IPAddress address, PingOptions options, IPStatus ipStatus, long rtt, Byte[] buffer);
    [CompilerGeneratedAttribute]
public IPStatus get_Status();
    [CompilerGeneratedAttribute]
public IPAddress get_Address();
    [CompilerGeneratedAttribute]
public long get_RoundtripTime();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public PingOptions get_Options();
    [CompilerGeneratedAttribute]
public Byte[] get_Buffer();
}
internal static class System.Net.RawSocketPermissions : object {
    private static Lazy`1<bool> s_canUseRawIPv4Sockets;
    private static Lazy`1<bool> s_canUseRawIPv6Sockets;
    private static RawSocketPermissions();
    public static bool CanUseRawSockets(AddressFamily addressFamily);
    private static bool CheckRawSocketPermissions(AddressFamily addressFamily);
}
internal static class System.Net.SocketProtocolSupportPal : object {
    [CompilerGeneratedAttribute]
private static bool <OSSupportsIPv6>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <OSSupportsIPv4>k__BackingField;
    [CompilerGeneratedAttribute]
private static bool <OSSupportsUnixDomainSockets>k__BackingField;
    public static bool OSSupportsIPv6 { get; }
    public static bool OSSupportsIPv4 { get; }
    private static SocketProtocolSupportPal();
    [CompilerGeneratedAttribute]
public static bool get_OSSupportsIPv6();
    [CompilerGeneratedAttribute]
public static bool get_OSSupportsIPv4();
    private static bool IsIPv6Disabled();
    private static bool IsSupported(AddressFamily af);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_inasync { get; }
    internal static string net_invalidPingBufferSize { get; }
    internal static string net_invalid_ip_addr { get; }
    internal static string net_ping { get; }
    internal static string net_ipv4_not_installed { get; }
    internal static string net_ipv6_not_installed { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_inasync();
    internal static string get_net_invalidPingBufferSize();
    internal static string get_net_invalid_ip_addr();
    internal static string get_net_ping();
    internal static string get_net_ipv4_not_installed();
    internal static string get_net_ipv6_not_installed();
}
