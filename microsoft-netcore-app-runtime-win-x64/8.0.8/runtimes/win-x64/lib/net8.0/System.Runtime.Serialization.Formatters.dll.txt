internal static class FxResources.System.Runtime.Serialization.Formatters.SR : object {
}
internal static class System.Collections.HashHelpers : object {
    internal static ReadOnlySpan`1<int> Primes { get; }
    internal static ReadOnlySpan`1<int> get_Primes();
    public static bool IsPrime(int candidate);
    public static int GetPrime(int min);
    public static int ExpandPrime(int oldSize);
}
internal static class System.LocalAppContextSwitches : object {
    private static int s_binaryFormatterEnabled;
    public static bool BinaryFormatterEnabled { get; }
    public static bool get_BinaryFormatterEnabled();
    internal static bool GetCachedSwitchValue(string switchName, Int32& cachedSwitchValue);
    private static bool GetCachedSwitchValueInternal(string switchName, Int32& cachedSwitchValue);
    private static bool GetSwitchDefaultValue(string switchName);
}
internal class System.Runtime.Serialization.DeserializationEventHandler : MulticastDelegate {
    public DeserializationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender);
}
internal class System.Runtime.Serialization.FixupHolder : object {
    internal long _id;
    internal object _fixupInfo;
    internal int _fixupType;
    internal FixupHolder(long id, object fixupInfo, int fixupType);
}
internal class System.Runtime.Serialization.FixupHolderList : object {
    internal FixupHolder[] _values;
    internal int _count;
    internal FixupHolderList(int startingSize);
    internal void Add(FixupHolder fixup);
    private void EnlargeArray();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[CLSCompliantAttribute("False")]
[ObsoleteAttribute("BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.")]
public abstract class System.Runtime.Serialization.Formatter : object {
    protected ObjectIDGenerator m_idGenerator;
    protected Queue m_objectQueue;
    [NullableAttribute("2")]
public ISurrogateSelector SurrogateSelector { get; public set; }
    [NullableAttribute("2")]
public SerializationBinder Binder { get; public set; }
    public StreamingContext Context { get; public set; }
    [RequiresDynamicCodeAttribute("BinaryFormatter serialization uses dynamic code generation, the type of objects being processed cannot be statically discovered.")]
[RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the type of objects being processed cannot be statically discovered.")]
public abstract virtual object Deserialize(Stream serializationStream);
    [NullableContextAttribute("2")]
protected virtual object GetNext(Int64& objID);
    [NullableContextAttribute("2")]
protected virtual long Schedule(object obj);
    [RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the type of objects being processed cannot be statically discovered.")]
public abstract virtual void Serialize(Stream serializationStream, object graph);
    protected abstract virtual void WriteArray(object obj, string name, Type memberType);
    protected abstract virtual void WriteBoolean(bool val, string name);
    protected abstract virtual void WriteByte(byte val, string name);
    protected abstract virtual void WriteChar(char val, string name);
    protected abstract virtual void WriteDateTime(DateTime val, string name);
    protected abstract virtual void WriteDecimal(decimal val, string name);
    protected abstract virtual void WriteDouble(double val, string name);
    protected abstract virtual void WriteInt16(short val, string name);
    protected abstract virtual void WriteInt32(int val, string name);
    protected abstract virtual void WriteInt64(long val, string name);
    protected abstract virtual void WriteObjectRef(object obj, string name, Type memberType);
    protected virtual void WriteMember(string memberName, object data);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteSByte(sbyte val, string name);
    protected abstract virtual void WriteSingle(float val, string name);
    protected abstract virtual void WriteTimeSpan(TimeSpan val, string name);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteUInt16(ushort val, string name);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteUInt32(UInt32 val, string name);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteUInt64(ulong val, string name);
    protected abstract virtual void WriteValueType(object obj, string name, Type memberType);
    [NullableContextAttribute("2")]
public abstract virtual ISurrogateSelector get_SurrogateSelector();
    [NullableContextAttribute("2")]
public abstract virtual void set_SurrogateSelector(ISurrogateSelector value);
    [NullableContextAttribute("2")]
public abstract virtual SerializationBinder get_Binder();
    [NullableContextAttribute("2")]
public abstract virtual void set_Binder(SerializationBinder value);
    public abstract virtual StreamingContext get_Context();
    public abstract virtual void set_Context(StreamingContext value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public class System.Runtime.Serialization.FormatterConverter : object {
    public sealed virtual object Convert(object value, Type type);
    public sealed virtual object Convert(object value, TypeCode typeCode);
    public sealed virtual bool ToBoolean(object value);
    public sealed virtual char ToChar(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual sbyte ToSByte(object value);
    public sealed virtual byte ToByte(object value);
    public sealed virtual short ToInt16(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual ushort ToUInt16(object value);
    public sealed virtual int ToInt32(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual UInt32 ToUInt32(object value);
    public sealed virtual long ToInt64(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual ulong ToUInt64(object value);
    public sealed virtual float ToSingle(object value);
    public sealed virtual double ToDouble(object value);
    public sealed virtual decimal ToDecimal(object value);
    public sealed virtual DateTime ToDateTime(object value);
    public sealed virtual string ToString(object value);
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryArray : object {
    internal int _objectId;
    internal int _rank;
    internal Int32[] _lengthA;
    internal Int32[] _lowerBoundA;
    internal BinaryTypeEnum _binaryTypeEnum;
    internal object _typeInformation;
    internal int _assemId;
    private BinaryHeaderEnum _binaryHeaderEnum;
    internal BinaryArrayTypeEnum _binaryArrayTypeEnum;
    internal BinaryArray(BinaryHeaderEnum binaryHeaderEnum);
    internal void Set(int objectId, int rank, Int32[] lengthA, Int32[] lowerBoundA, BinaryTypeEnum binaryTypeEnum, object typeInformation, BinaryArrayTypeEnum binaryArrayTypeEnum, int assemId);
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal enum System.Runtime.Serialization.Formatters.Binary.BinaryArrayTypeEnum : Enum {
    public int value__;
    public static BinaryArrayTypeEnum Single;
    public static BinaryArrayTypeEnum Jagged;
    public static BinaryArrayTypeEnum Rectangular;
    public static BinaryArrayTypeEnum SingleOffset;
    public static BinaryArrayTypeEnum JaggedOffset;
    public static BinaryArrayTypeEnum RectangularOffset;
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryAssembly : object {
    internal int _assemId;
    internal string _assemblyString;
    internal void Set(int assemId, string assemblyString);
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo : object {
    internal string _assemblyString;
    private Assembly _assembly;
    internal BinaryAssemblyInfo(string assemblyString);
    internal BinaryAssemblyInfo(string assemblyString, Assembly assembly);
    internal Assembly GetAssembly();
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainAssembly : object {
    internal int _assemId;
    internal int _assemblyIndex;
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainMap : object {
    internal int _crossAppDomainArrayIndex;
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainString : object {
    internal int _objectId;
    internal int _value;
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ObsoleteAttribute("BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.")]
public class System.Runtime.Serialization.Formatters.Binary.BinaryFormatter : object {
    private static ConcurrentDictionary`2<Type, TypeInformation> s_typeNameCache;
    internal ISurrogateSelector _surrogates;
    internal StreamingContext _context;
    internal SerializationBinder _binder;
    internal FormatterTypeStyle _typeFormat;
    internal FormatterAssemblyStyle _assemblyFormat;
    internal TypeFilterLevel _securityLevel;
    internal Object[] _crossAppDomainArray;
    public FormatterTypeStyle TypeFormat { get; public set; }
    public FormatterAssemblyStyle AssemblyFormat { get; public set; }
    public TypeFilterLevel FilterLevel { get; public set; }
    public ISurrogateSelector SurrogateSelector { get; public set; }
    public SerializationBinder Binder { get; public set; }
    public StreamingContext Context { get; public set; }
    public BinaryFormatter(ISurrogateSelector selector, StreamingContext context);
    private static BinaryFormatter();
    public FormatterTypeStyle get_TypeFormat();
    public void set_TypeFormat(FormatterTypeStyle value);
    public FormatterAssemblyStyle get_AssemblyFormat();
    public void set_AssemblyFormat(FormatterAssemblyStyle value);
    public TypeFilterLevel get_FilterLevel();
    public void set_FilterLevel(TypeFilterLevel value);
    public sealed virtual ISurrogateSelector get_SurrogateSelector();
    public sealed virtual void set_SurrogateSelector(ISurrogateSelector value);
    public sealed virtual SerializationBinder get_Binder();
    public sealed virtual void set_Binder(SerializationBinder value);
    public sealed virtual StreamingContext get_Context();
    public sealed virtual void set_Context(StreamingContext value);
    internal static TypeInformation GetTypeInformation(Type type);
    [NullableContextAttribute("1")]
[RequiresDynamicCodeAttribute("BinaryFormatter serialization uses dynamic code generation, the type of objects being processed cannot be statically discovered.")]
[RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the type of objects being processed cannot be statically discovered.")]
public sealed virtual object Deserialize(Stream serializationStream);
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the type of objects being processed cannot be statically discovered.")]
public sealed virtual void Serialize(Stream serializationStream, object graph);
}
[EventSourceAttribute]
internal class System.Runtime.Serialization.Formatters.Binary.BinaryFormatterEventSource : EventSource {
    public static BinaryFormatterEventSource Log;
    private static BinaryFormatterEventSource();
    [EventAttribute("10")]
public void SerializationStart();
    [EventAttribute("11")]
public void SerializationStop();
    [NonEventAttribute]
public void SerializingObject(Type type);
    [EventAttribute("12")]
private void SerializingObject(string typeName);
    [EventAttribute("20")]
public void DeserializationStart();
    [EventAttribute("21")]
public void DeserializationStop();
    [NonEventAttribute]
public void DeserializingObject(Type type);
    [EventAttribute("22")]
private void DeserializingObject(string typeName);
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryFormatterWriter : object {
    private Stream _outputStream;
    private FormatterTypeStyle _formatterTypeStyle;
    private ObjectWriter _objectWriter;
    private BinaryWriter _dataWriter;
    private int _consecutiveNullArrayEntryCount;
    private Dictionary`2<string, ObjectMapInfo> _objectMapTable;
    private BinaryObject _binaryObject;
    private BinaryObjectWithMap _binaryObjectWithMap;
    private BinaryObjectWithMapTyped _binaryObjectWithMapTyped;
    private BinaryObjectString _binaryObjectString;
    private BinaryArray _binaryArray;
    private Byte[] _byteBuffer;
    private MemberPrimitiveUnTyped _memberPrimitiveUnTyped;
    private MemberPrimitiveTyped _memberPrimitiveTyped;
    private ObjectNull _objectNull;
    private MemberReference _memberReference;
    private BinaryAssembly _binaryAssembly;
    internal BinaryFormatterWriter(Stream outputStream, ObjectWriter objectWriter, FormatterTypeStyle formatterTypeStyle);
    internal void WriteBegin();
    internal void WriteEnd();
    internal void WriteBoolean(bool value);
    internal void WriteByte(byte value);
    private void WriteBytes(Byte[] value);
    private void WriteBytes(Byte[] byteA, int offset, int size);
    internal void WriteChar(char value);
    internal void WriteChars(Char[] value);
    internal void WriteDecimal(decimal value);
    internal void WriteSingle(float value);
    internal void WriteDouble(double value);
    internal void WriteInt16(short value);
    internal void WriteInt32(int value);
    internal void WriteInt64(long value);
    internal void WriteSByte(sbyte value);
    internal void WriteString(string value);
    internal void WriteTimeSpan(TimeSpan value);
    internal void WriteDateTime(DateTime value);
    internal void WriteUInt16(ushort value);
    internal void WriteUInt32(UInt32 value);
    internal void WriteUInt64(ulong value);
    internal void WriteObjectEnd(NameInfo memberNameInfo, NameInfo typeNameInfo);
    internal void WriteSerializationHeaderEnd();
    internal void WriteSerializationHeader(int topId, int headerId, int minorVersion, int majorVersion);
    internal void WriteObject(NameInfo nameInfo, NameInfo typeNameInfo, int numMembers, String[] memberNames, Type[] memberTypes, WriteObjectInfo[] memberObjectInfos);
    internal void WriteObjectString(int objectId, string value);
    internal void WriteSingleArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound, Array array);
    private void WriteArrayAsBytes(Array array, int typeLength);
    internal void WriteJaggedArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound);
    internal void WriteRectangleArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int rank, Int32[] lengthA, Int32[] lowerBoundA);
    internal void WriteObjectByteArray(NameInfo memberNameInfo, NameInfo arrayNameInfo, WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, int length, int lowerBound, Byte[] byteA);
    internal void WriteMember(NameInfo memberNameInfo, NameInfo typeNameInfo, object value);
    internal void WriteNullMember(NameInfo memberNameInfo, NameInfo typeNameInfo);
    internal void WriteMemberObjectRef(NameInfo memberNameInfo, int idRef);
    internal void WriteMemberNested(NameInfo memberNameInfo);
    internal void WriteMemberString(NameInfo memberNameInfo, NameInfo typeNameInfo, string value);
    internal void WriteItem(NameInfo itemNameInfo, NameInfo typeNameInfo, object value);
    internal void WriteNullItem(NameInfo itemNameInfo, NameInfo typeNameInfo);
    internal void WriteDelayedNullItem();
    internal void WriteItemEnd();
    private void InternalWriteItemNull();
    internal void WriteItemObjectRef(NameInfo nameInfo, int idRef);
    internal void WriteAssembly(Type type, string assemblyString, int assemId, bool isNew);
    internal void WriteValue(InternalPrimitiveTypeE code, object value);
}
internal enum System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum : Enum {
    public int value__;
    public static BinaryHeaderEnum SerializedStreamHeader;
    public static BinaryHeaderEnum Object;
    public static BinaryHeaderEnum ObjectWithMap;
    public static BinaryHeaderEnum ObjectWithMapAssemId;
    public static BinaryHeaderEnum ObjectWithMapTyped;
    public static BinaryHeaderEnum ObjectWithMapTypedAssemId;
    public static BinaryHeaderEnum ObjectString;
    public static BinaryHeaderEnum Array;
    public static BinaryHeaderEnum MemberPrimitiveTyped;
    public static BinaryHeaderEnum MemberReference;
    public static BinaryHeaderEnum ObjectNull;
    public static BinaryHeaderEnum MessageEnd;
    public static BinaryHeaderEnum Assembly;
    public static BinaryHeaderEnum ObjectNullMultiple256;
    public static BinaryHeaderEnum ObjectNullMultiple;
    public static BinaryHeaderEnum ArraySinglePrimitive;
    public static BinaryHeaderEnum ArraySingleObject;
    public static BinaryHeaderEnum ArraySingleString;
    public static BinaryHeaderEnum CrossAppDomainMap;
    public static BinaryHeaderEnum CrossAppDomainString;
    public static BinaryHeaderEnum CrossAppDomainAssembly;
    public static BinaryHeaderEnum MethodCall;
    public static BinaryHeaderEnum MethodReturn;
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryObject : object {
    internal int _objectId;
    internal int _mapId;
    internal void Set(int objectId, int mapId);
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryObjectString : object {
    internal int _objectId;
    internal string _value;
    internal void Set(int objectId, string value);
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap : object {
    internal BinaryHeaderEnum _binaryHeaderEnum;
    internal int _objectId;
    internal string _name;
    internal int _numMembers;
    internal String[] _memberNames;
    internal int _assemId;
    internal BinaryObjectWithMap(BinaryHeaderEnum binaryHeaderEnum);
    internal void Set(int objectId, string name, int numMembers, String[] memberNames, int assemId);
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped : object {
    internal BinaryHeaderEnum _binaryHeaderEnum;
    internal int _objectId;
    internal string _name;
    internal int _numMembers;
    internal String[] _memberNames;
    internal BinaryTypeEnum[] _binaryTypeEnumA;
    internal Object[] _typeInformationA;
    internal Int32[] _memberAssemIds;
    internal int _assemId;
    internal BinaryObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum);
    internal void Set(int objectId, string name, int numMembers, String[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, Object[] typeInformationA, Int32[] memberAssemIds, int assemId);
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.BinaryParser : object {
    private static Encoding s_encoding;
    internal ObjectReader _objectReader;
    internal Stream _input;
    internal long _topId;
    internal long _headerId;
    internal SizedArray _objectMapIdTable;
    internal SizedArray _assemIdToAssemblyTable;
    internal SerStack _stack;
    internal BinaryTypeEnum _expectedType;
    internal object _expectedTypeInformation;
    internal ParseRecord _prs;
    private BinaryAssemblyInfo _systemAssemblyInfo;
    private BinaryReader _dataReader;
    private SerStack _opPool;
    private BinaryObject _binaryObject;
    private BinaryObjectWithMap _bowm;
    private BinaryObjectWithMapTyped _bowmt;
    internal BinaryObjectString _objectString;
    internal BinaryCrossAppDomainString _crossAppDomainString;
    internal MemberPrimitiveTyped _memberPrimitiveTyped;
    private Byte[] _byteBuffer;
    internal MemberPrimitiveUnTyped memberPrimitiveUnTyped;
    internal MemberReference _memberReference;
    internal ObjectNull _objectNull;
    internal static MessageEnd modreq(System.Runtime.CompilerServices.IsVolatile) _messageEnd;
    internal BinaryAssemblyInfo SystemAssemblyInfo { get; }
    internal SizedArray ObjectMapIdTable { get; }
    internal SizedArray AssemIdToAssemblyTable { get; }
    internal ParseRecord PRs { get; }
    internal BinaryParser(Stream stream, ObjectReader objectReader);
    private static BinaryParser();
    internal BinaryAssemblyInfo get_SystemAssemblyInfo();
    internal SizedArray get_ObjectMapIdTable();
    internal SizedArray get_AssemIdToAssemblyTable();
    internal ParseRecord get_PRs();
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
internal void Run();
    internal void ReadBegin();
    internal void ReadEnd();
    internal bool ReadBoolean();
    internal byte ReadByte();
    internal Byte[] ReadBytes(int length);
    internal void ReadBytes(Byte[] byteA, int offset, int size);
    internal char ReadChar();
    internal Char[] ReadChars(int length);
    internal decimal ReadDecimal();
    internal float ReadSingle();
    internal double ReadDouble();
    internal short ReadInt16();
    internal int ReadInt32();
    internal long ReadInt64();
    internal sbyte ReadSByte();
    internal string ReadString();
    internal TimeSpan ReadTimeSpan();
    internal DateTime ReadDateTime();
    private static DateTime FromBinaryRaw(long dateData);
    internal ushort ReadUInt16();
    internal UInt32 ReadUInt32();
    internal ulong ReadUInt64();
    internal void ReadSerializationHeaderRecord();
    internal void ReadAssembly(BinaryHeaderEnum binaryHeaderEnum);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ReadObject();
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
internal void ReadCrossAppDomainMap();
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
internal void ReadObjectWithMap(BinaryHeaderEnum binaryHeaderEnum);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("Types might be removed")]
private void ReadObjectWithMap(BinaryObjectWithMap record);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("Types might be removed")]
internal void ReadObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("Types might be removed")]
private void ReadObjectWithMapTyped(BinaryObjectWithMapTyped record);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ReadObjectString(BinaryHeaderEnum binaryHeaderEnum);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ReadMemberPrimitiveTyped();
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ReadArray(BinaryHeaderEnum binaryHeaderEnum);
    private void ReadArrayAsBytes(ParseRecord pr);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ReadMemberPrimitiveUnTyped();
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ReadMemberReference();
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ReadObjectNull(BinaryHeaderEnum binaryHeaderEnum);
    private void ReadMessageEnd();
    internal object ReadValue(InternalPrimitiveTypeE code);
    private ObjectProgress GetOp();
    private void PutOp(ObjectProgress op);
}
internal static class System.Runtime.Serialization.Formatters.Binary.BinaryTypeConverter : object {
    internal static BinaryTypeEnum GetBinaryTypeInfo(Type type, WriteObjectInfo objectInfo, string typeName, ObjectWriter objectWriter, Object& typeInformation, Int32& assemId);
    internal static BinaryTypeEnum GetParserBinaryTypeInfo(Type type, Object& typeInformation);
    internal static void WriteTypeInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, int assemId, BinaryFormatterWriter output);
    internal static object ReadTypeInfo(BinaryTypeEnum binaryTypeEnum, BinaryParser input, Int32& assemId);
    [RequiresUnreferencedCodeAttribute("Types might be removed")]
internal static void TypeFromInfo(BinaryTypeEnum binaryTypeEnum, object typeInformation, ObjectReader objectReader, BinaryAssemblyInfo assemblyInfo, InternalPrimitiveTypeE& primitiveTypeEnum, String& typeString, Type& type, Boolean& isVariant);
}
internal enum System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum : Enum {
    public int value__;
    public static BinaryTypeEnum Primitive;
    public static BinaryTypeEnum String;
    public static BinaryTypeEnum Object;
    public static BinaryTypeEnum ObjectUrt;
    public static BinaryTypeEnum ObjectUser;
    public static BinaryTypeEnum ObjectArray;
    public static BinaryTypeEnum StringArray;
    public static BinaryTypeEnum PrimitiveArray;
}
internal static class System.Runtime.Serialization.Formatters.Binary.Converter : object {
    internal static Type s_typeofISerializable;
    internal static Type s_typeofString;
    internal static Type s_typeofConverter;
    internal static Type s_typeofBoolean;
    internal static Type s_typeofByte;
    internal static Type s_typeofChar;
    internal static Type s_typeofDecimal;
    internal static Type s_typeofDouble;
    internal static Type s_typeofInt16;
    internal static Type s_typeofInt32;
    internal static Type s_typeofInt64;
    internal static Type s_typeofSByte;
    internal static Type s_typeofSingle;
    internal static Type s_typeofTimeSpan;
    internal static Type s_typeofDateTime;
    internal static Type s_typeofUInt16;
    internal static Type s_typeofUInt32;
    internal static Type s_typeofUInt64;
    internal static Type s_typeofObject;
    internal static Type s_typeofSystemVoid;
    internal static Assembly s_urtAssembly;
    internal static string s_urtAssemblyString;
    internal static Assembly s_urtAlternativeAssembly;
    internal static string s_urtAlternativeAssemblyString;
    internal static Type s_typeofTypeArray;
    internal static Type s_typeofObjectArray;
    internal static Type s_typeofStringArray;
    internal static Type s_typeofBooleanArray;
    internal static Type s_typeofByteArray;
    internal static Type s_typeofCharArray;
    internal static Type s_typeofDecimalArray;
    internal static Type s_typeofDoubleArray;
    internal static Type s_typeofInt16Array;
    internal static Type s_typeofInt32Array;
    internal static Type s_typeofInt64Array;
    internal static Type s_typeofSByteArray;
    internal static Type s_typeofSingleArray;
    internal static Type s_typeofTimeSpanArray;
    internal static Type s_typeofDateTimeArray;
    internal static Type s_typeofUInt16Array;
    internal static Type s_typeofUInt32Array;
    internal static Type s_typeofUInt64Array;
    internal static Type s_typeofMarshalByRefObject;
    private static Type[] modreq(System.Runtime.CompilerServices.IsVolatile) s_typeA;
    private static Type[] modreq(System.Runtime.CompilerServices.IsVolatile) s_arrayTypeA;
    private static String[] modreq(System.Runtime.CompilerServices.IsVolatile) s_valueA;
    private static TypeCode[] modreq(System.Runtime.CompilerServices.IsVolatile) s_typeCodeA;
    private static InternalPrimitiveTypeE[] modreq(System.Runtime.CompilerServices.IsVolatile) s_codeA;
    private static Converter();
    internal static InternalPrimitiveTypeE ToCode(Type type);
    internal static bool IsWriteAsByteArray(InternalPrimitiveTypeE code);
    internal static int TypeLength(InternalPrimitiveTypeE code);
    internal static Type ToArrayType(InternalPrimitiveTypeE code);
    private static void InitTypeA();
    private static void InitArrayTypeA();
    internal static Type ToType(InternalPrimitiveTypeE code);
    internal static Array CreatePrimitiveArray(InternalPrimitiveTypeE code, int length);
    internal static bool IsPrimitiveArray(Type type, Object& typeInformation);
    private static void InitValueA();
    internal static string ToComType(InternalPrimitiveTypeE code);
    private static void InitTypeCodeA();
    internal static TypeCode ToTypeCode(InternalPrimitiveTypeE code);
    private static void InitCodeA();
    internal static InternalPrimitiveTypeE ToPrimitiveTypeEnum(TypeCode typeCode);
    internal static object FromString(string value, InternalPrimitiveTypeE code);
}
internal enum System.Runtime.Serialization.Formatters.Binary.InternalArrayTypeE : Enum {
    public int value__;
    public static InternalArrayTypeE Empty;
    public static InternalArrayTypeE Single;
    public static InternalArrayTypeE Jagged;
    public static InternalArrayTypeE Rectangular;
    public static InternalArrayTypeE Base64;
}
internal class System.Runtime.Serialization.Formatters.Binary.InternalFE : object {
    internal FormatterTypeStyle _typeFormat;
    internal FormatterAssemblyStyle _assemblyFormat;
    internal TypeFilterLevel _securityLevel;
    internal InternalSerializerTypeE _serializerTypeEnum;
}
internal enum System.Runtime.Serialization.Formatters.Binary.InternalMemberTypeE : Enum {
    public int value__;
    public static InternalMemberTypeE Empty;
    public static InternalMemberTypeE Header;
    public static InternalMemberTypeE Field;
    public static InternalMemberTypeE Item;
}
internal enum System.Runtime.Serialization.Formatters.Binary.InternalMemberValueE : Enum {
    public int value__;
    public static InternalMemberValueE Empty;
    public static InternalMemberValueE InlineValue;
    public static InternalMemberValueE Nested;
    public static InternalMemberValueE Reference;
    public static InternalMemberValueE Null;
}
internal enum System.Runtime.Serialization.Formatters.Binary.InternalObjectPositionE : Enum {
    public int value__;
    public static InternalObjectPositionE Empty;
    public static InternalObjectPositionE Top;
    public static InternalObjectPositionE Child;
    public static InternalObjectPositionE Headers;
}
internal enum System.Runtime.Serialization.Formatters.Binary.InternalObjectTypeE : Enum {
    public int value__;
    public static InternalObjectTypeE Empty;
    public static InternalObjectTypeE Object;
    public static InternalObjectTypeE Array;
}
internal enum System.Runtime.Serialization.Formatters.Binary.InternalParseTypeE : Enum {
    public int value__;
    public static InternalParseTypeE Empty;
    public static InternalParseTypeE SerializedStreamHeader;
    public static InternalParseTypeE Object;
    public static InternalParseTypeE Member;
    public static InternalParseTypeE ObjectEnd;
    public static InternalParseTypeE MemberEnd;
    public static InternalParseTypeE Headers;
    public static InternalParseTypeE HeadersEnd;
    public static InternalParseTypeE SerializedStreamHeaderEnd;
    public static InternalParseTypeE Envelope;
    public static InternalParseTypeE EnvelopeEnd;
    public static InternalParseTypeE Body;
    public static InternalParseTypeE BodyEnd;
}
internal enum System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE : Enum {
    public int value__;
    public static InternalPrimitiveTypeE Invalid;
    public static InternalPrimitiveTypeE Boolean;
    public static InternalPrimitiveTypeE Byte;
    public static InternalPrimitiveTypeE Char;
    public static InternalPrimitiveTypeE Currency;
    public static InternalPrimitiveTypeE Decimal;
    public static InternalPrimitiveTypeE Double;
    public static InternalPrimitiveTypeE Int16;
    public static InternalPrimitiveTypeE Int32;
    public static InternalPrimitiveTypeE Int64;
    public static InternalPrimitiveTypeE SByte;
    public static InternalPrimitiveTypeE Single;
    public static InternalPrimitiveTypeE TimeSpan;
    public static InternalPrimitiveTypeE DateTime;
    public static InternalPrimitiveTypeE UInt16;
    public static InternalPrimitiveTypeE UInt32;
    public static InternalPrimitiveTypeE UInt64;
    public static InternalPrimitiveTypeE Null;
    public static InternalPrimitiveTypeE String;
}
internal enum System.Runtime.Serialization.Formatters.Binary.InternalSerializerTypeE : Enum {
    public int value__;
    public static InternalSerializerTypeE Soap;
    public static InternalSerializerTypeE Binary;
}
[DefaultMemberAttribute("Item")]
internal class System.Runtime.Serialization.Formatters.Binary.IntSizedArray : object {
    internal Int32[] _objects;
    internal Int32[] _negObjects;
    internal int Item { get; internal set; }
    private IntSizedArray(IntSizedArray sizedArray);
    public sealed virtual object Clone();
    internal int get_Item(int index);
    internal void set_Item(int index, int value);
    internal void IncreaseCapacity(int index);
}
internal interface System.Runtime.Serialization.Formatters.Binary.IStreamable {
    public abstract virtual void Write(BinaryFormatterWriter output);
    public abstract virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped : object {
    internal InternalPrimitiveTypeE _primitiveTypeEnum;
    internal object _value;
    internal void Set(InternalPrimitiveTypeE primitiveTypeEnum, object value);
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped : object {
    internal InternalPrimitiveTypeE _typeInformation;
    internal object _value;
    internal void Set(InternalPrimitiveTypeE typeInformation, object value);
    internal void Set(InternalPrimitiveTypeE typeInformation);
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.MemberReference : object {
    internal int _idRef;
    internal void Set(int idRef);
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.MessageEnd : object {
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.NameCache : object {
    private static ConcurrentDictionary`2<string, object> s_ht;
    private string _name;
    private static NameCache();
    internal object GetCachedValue(string name);
    internal void SetCachedValue(object value);
}
internal class System.Runtime.Serialization.Formatters.Binary.NameInfo : object {
    internal string _fullName;
    internal long _objectId;
    internal long _assemId;
    internal InternalPrimitiveTypeE _primitiveTypeEnum;
    internal Type _type;
    internal bool _isSealed;
    internal bool _isArray;
    internal bool _isArrayItem;
    internal bool _transmitTypeOnObject;
    internal bool _transmitTypeOnMember;
    internal bool _isParentTypeOnObject;
    internal InternalArrayTypeE _arrayEnum;
    private bool _sealedStatusChecked;
    public bool IsSealed { get; }
    public string NIname { get; public set; }
    internal void Init();
    public bool get_IsSealed();
    public string get_NIname();
    public void set_NIname(string value);
}
internal class System.Runtime.Serialization.Formatters.Binary.ObjectMap : object {
    internal string _objectName;
    internal Type _objectType;
    internal BinaryTypeEnum[] _binaryTypeEnumA;
    internal Object[] _typeInformationA;
    internal Type[] _memberTypes;
    internal String[] _memberNames;
    internal ReadObjectInfo _objectInfo;
    internal bool _isInitObjectInfo;
    internal ObjectReader _objectReader;
    internal int _objectId;
    internal BinaryAssemblyInfo _assemblyInfo;
    internal ObjectMap(string objectName, Type objectType, String[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo);
    [RequiresUnreferencedCodeAttribute("Types might be removed")]
internal ObjectMap(string objectName, String[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, Object[] typeInformationA, Int32[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable);
    internal ReadObjectInfo CreateObjectInfo(SerializationInfo& si, Object[]& memberData);
    internal static ObjectMap Create(string name, Type objectType, String[] memberNames, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo);
    [RequiresUnreferencedCodeAttribute("Types might be removed")]
internal static ObjectMap Create(string name, String[] memberNames, BinaryTypeEnum[] binaryTypeEnumA, Object[] typeInformationA, Int32[] memberAssemIds, ObjectReader objectReader, int objectId, BinaryAssemblyInfo assemblyInfo, SizedArray assemIdToAssemblyTable);
}
internal class System.Runtime.Serialization.Formatters.Binary.ObjectNull : object {
    internal int _nullCount;
    internal void SetNullCount(int nullCount);
    public sealed virtual void Write(BinaryFormatterWriter output);
    public sealed virtual void Read(BinaryParser input);
    public void Read(BinaryParser input, BinaryHeaderEnum binaryHeaderEnum);
}
internal class System.Runtime.Serialization.Formatters.Binary.ObjectProgress : object {
    internal bool _isInitial;
    internal int _count;
    internal BinaryTypeEnum _expectedType;
    internal object _expectedTypeInformation;
    internal string _name;
    internal InternalObjectTypeE _objectTypeEnum;
    internal InternalMemberTypeE _memberTypeEnum;
    internal InternalMemberValueE _memberValueEnum;
    internal Type _dtType;
    internal int _numItems;
    internal BinaryTypeEnum _binaryTypeEnum;
    internal object _typeInformation;
    internal int _memberLength;
    internal BinaryTypeEnum[] _binaryTypeEnumA;
    internal Object[] _typeInformationA;
    internal String[] _memberNames;
    internal Type[] _memberTypes;
    internal ParseRecord _pr;
    internal void Init();
    internal void ArrayCountIncrement(int value);
    internal bool GetNext(BinaryTypeEnum& outBinaryTypeEnum, Object& outTypeInformation);
}
internal class System.Runtime.Serialization.Formatters.Binary.ObjectReader : object {
    internal Stream _stream;
    internal ISurrogateSelector _surrogates;
    internal StreamingContext _context;
    internal ObjectManager _objectManager;
    internal InternalFE _formatterEnums;
    internal SerializationBinder _binder;
    internal long _topId;
    internal bool _isSimpleAssembly;
    internal object _topObject;
    internal SerObjectInfoInit _serObjectInfoInit;
    internal IFormatterConverter _formatterConverter;
    internal SerStack _stack;
    private SerStack _valueFixupStack;
    internal Object[] _crossAppDomainArray;
    private bool _fullDeserialization;
    private bool _oldFormatDetected;
    private IntSizedArray _valTypeObjectIdTable;
    private NameCache _typeCache;
    private string _previousAssemblyString;
    private string _previousName;
    private Type _previousType;
    private SerStack ValueFixupStack { get; }
    internal object TopObject { get; internal set; }
    internal ObjectReader(Stream stream, ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder);
    private SerStack get_ValueFixupStack();
    internal object get_TopObject();
    internal void set_TopObject(object value);
    [RequiresDynamicCodeAttribute("ObjectReader requires unreferenced code")]
[RequiresUnreferencedCodeAttribute("Types might be removed")]
internal object Deserialize(BinaryParser serParser);
    private bool HasSurrogate(Type t);
    private void CheckSerializable(Type t);
    private void InitFullDeserialization();
    internal object CrossAppDomainArray(int index);
    internal ReadObjectInfo CreateReadObjectInfo(Type objectType);
    internal ReadObjectInfo CreateReadObjectInfo(Type objectType, String[] memberNames, Type[] memberTypes);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
internal void Parse(ParseRecord pr);
    private void ParseError(ParseRecord processing, ParseRecord onStack);
    private void ParseSerializedStreamHeader(ParseRecord pr);
    private void ParseSerializedStreamHeaderEnd(ParseRecord pr);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ParseObject(ParseRecord pr);
    [RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ParseObjectEnd(ParseRecord pr);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ParseArray(ParseRecord pr);
    private void NextRectangleMap(ParseRecord pr);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ParseArrayMember(ParseRecord pr);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ParseArrayMemberEnd(ParseRecord pr);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ParseMember(ParseRecord pr);
    [RequiresDynamicCodeAttribute("ObjectReader requires dynamic code")]
[RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ParseMemberEnd(ParseRecord pr);
    [RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void ParseString(ParseRecord pr, ParseRecord parentPr);
    [RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr);
    [RequiresUnreferencedCodeAttribute("ObjectReader requires unreferenced code")]
private void RegisterObject(object obj, ParseRecord pr, ParseRecord objectPr, bool bIsString);
    internal long GetId(long objectId);
    [RequiresUnreferencedCodeAttribute("Types might be removed")]
internal Type Bind(string assemblyString, string typeString);
    [RequiresUnreferencedCodeAttribute("Types might be removed")]
internal Type FastBindToType(string assemblyName, string typeName);
    private static Assembly ResolveSimpleAssemblyName(AssemblyName assemblyName);
    [RequiresUnreferencedCodeAttribute("Types might be removed")]
private static void GetSimplyNamedTypeFromAssembly(Assembly assm, string typeName, Type& type);
    [RequiresUnreferencedCodeAttribute("Types might be removed")]
internal Type GetType(BinaryAssemblyInfo assemblyInfo, string name);
    private static void CheckTypeForwardedTo(Assembly sourceAssembly, Assembly destAssembly, Type resolvedType);
}
internal class System.Runtime.Serialization.Formatters.Binary.ObjectWriter : object {
    private Queue`1<object> _objectQueue;
    private ObjectIDGenerator _idGenerator;
    private int _currentId;
    private ISurrogateSelector _surrogates;
    private StreamingContext _context;
    private BinaryFormatterWriter _serWriter;
    private SerializationObjectManager _objectManager;
    private long _topId;
    private InternalFE _formatterEnums;
    private SerializationBinder _binder;
    private SerObjectInfoInit _serObjectInfoInit;
    private IFormatterConverter _formatterConverter;
    internal Object[] _crossAppDomainArray;
    private object _previousObj;
    private long _previousId;
    private Type _previousType;
    private InternalPrimitiveTypeE _previousCode;
    private Dictionary`2<string, long> _assemblyToIdTable;
    private SerStack _niPool;
    internal SerializationObjectManager ObjectManager { get; }
    internal ObjectWriter(ISurrogateSelector selector, StreamingContext context, InternalFE formatterEnums, SerializationBinder binder);
    [RequiresUnreferencedCodeAttribute("ObjectWriter requires unreferenced code")]
internal void Serialize(object graph, BinaryFormatterWriter serWriter);
    internal SerializationObjectManager get_ObjectManager();
    [RequiresUnreferencedCodeAttribute("ObjectWriter requires unreferenced code")]
private void Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo);
    [RequiresUnreferencedCodeAttribute("ObjectWriter requires unreferenced code")]
private void Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, String[] memberNames, Type[] memberTypes, Object[] memberData, WriteObjectInfo[] memberObjectInfos);
    [RequiresUnreferencedCodeAttribute("ObjectWriter requires unreferenced code")]
private void WriteMemberSetup(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, string memberName, Type memberType, object memberData, WriteObjectInfo memberObjectInfo);
    [RequiresUnreferencedCodeAttribute("ObjectWriter requires unreferenced code")]
private void WriteMembers(NameInfo memberNameInfo, NameInfo memberTypeNameInfo, object memberData, WriteObjectInfo objectInfo, NameInfo typeNameInfo, WriteObjectInfo memberObjectInfo);
    [RequiresUnreferencedCodeAttribute("ObjectWriter requires unreferenced code")]
private void WriteArray(WriteObjectInfo objectInfo, NameInfo memberNameInfo, WriteObjectInfo memberObjectInfo);
    [RequiresUnreferencedCodeAttribute("ObjectWriter requires unreferenced code")]
private void WriteArrayMember(WriteObjectInfo objectInfo, NameInfo arrayElemTypeNameInfo, object data);
    [RequiresUnreferencedCodeAttribute("ObjectWriter requires unreferenced code")]
private void WriteRectangle(WriteObjectInfo objectInfo, int rank, Int32[] maxA, Array array, NameInfo arrayElemNameTypeInfo, Int32[] lowerBoundA);
    private object GetNext(Int64& objID);
    private long InternalGetId(object obj, bool assignUniqueIdToValueType, Type type, Boolean& isNew);
    private long Schedule(object obj, bool assignUniqueIdToValueType, Type type);
    private long Schedule(object obj, bool assignUniqueIdToValueType, Type type, WriteObjectInfo objectInfo);
    private bool WriteKnownValueClass(NameInfo memberNameInfo, NameInfo typeNameInfo, object data, Boolean& assignUniqueIdToValueType);
    private void WriteObjectRef(NameInfo nameInfo, long objectId);
    private void WriteString(NameInfo memberNameInfo, NameInfo typeNameInfo, object stringObject);
    private bool CheckForNull(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo, object data);
    private void WriteSerializedStreamHeader(long topId, long headerId);
    private NameInfo TypeToNameInfo(Type type, WriteObjectInfo objectInfo, InternalPrimitiveTypeE code, NameInfo nameInfo);
    private NameInfo TypeToNameInfo(Type type);
    private NameInfo TypeToNameInfo(WriteObjectInfo objectInfo);
    private NameInfo TypeToNameInfo(WriteObjectInfo objectInfo, NameInfo nameInfo);
    private void TypeToNameInfo(Type type, NameInfo nameInfo);
    private NameInfo MemberToNameInfo(string name);
    internal InternalPrimitiveTypeE ToCode(Type type);
    private long GetAssemblyId(WriteObjectInfo objectInfo);
    private Type GetType(object obj);
    private NameInfo GetNameInfo();
    private bool CheckTypeFormat(FormatterTypeStyle test, FormatterTypeStyle want);
    private void PutNameInfo(NameInfo nameInfo);
}
internal class System.Runtime.Serialization.Formatters.Binary.ParseRecord : object {
    internal InternalParseTypeE _parseTypeEnum;
    internal InternalObjectTypeE _objectTypeEnum;
    internal InternalArrayTypeE _arrayTypeEnum;
    internal InternalMemberTypeE _memberTypeEnum;
    internal InternalMemberValueE _memberValueEnum;
    internal InternalObjectPositionE _objectPositionEnum;
    internal string _name;
    internal string _value;
    internal object _varValue;
    internal string _keyDt;
    internal Type _dtType;
    internal InternalPrimitiveTypeE _dtTypeCode;
    internal long _objectId;
    internal long _idRef;
    internal string _arrayElementTypeString;
    internal Type _arrayElementType;
    internal bool _isArrayVariant;
    internal InternalPrimitiveTypeE _arrayElementTypeCode;
    internal int _rank;
    internal Int32[] _lengthA;
    internal Int32[] _lowerBoundA;
    internal Int32[] _indexMap;
    internal int _memberIndex;
    internal int _linearlength;
    internal Int32[] _rectangularMap;
    internal bool _isLowerBound;
    internal ReadObjectInfo _objectInfo;
    internal bool _isValueTypeFixup;
    internal object _newObj;
    internal Object[] _objectA;
    internal PrimitiveArray _primitiveArray;
    internal bool _isRegistered;
    internal Object[] _memberData;
    internal SerializationInfo _si;
    internal int _consecutiveNullArrayEntryCount;
    internal void Init();
}
internal class System.Runtime.Serialization.Formatters.Binary.PrimitiveArray : object {
    private InternalPrimitiveTypeE _code;
    private Boolean[] _booleanA;
    private Char[] _charA;
    private Double[] _doubleA;
    private Int16[] _int16A;
    private Int32[] _int32A;
    private Int64[] _int64A;
    private SByte[] _sbyteA;
    private Single[] _singleA;
    private UInt16[] _uint16A;
    private UInt32[] _uint32A;
    private UInt64[] _uint64A;
    internal PrimitiveArray(InternalPrimitiveTypeE code, Array array);
    internal void SetValue(string value, int index);
}
internal class System.Runtime.Serialization.Formatters.Binary.ReadObjectInfo : object {
    internal int _objectInfoId;
    internal static int _readObjectInfoCounter;
    [DynamicallyAccessedMembersAttribute("-1")]
internal Type _objectType;
    internal ObjectManager _objectManager;
    internal int _count;
    internal bool _isSi;
    internal bool _isTyped;
    internal bool _isSimpleAssembly;
    internal SerObjectInfoCache _cache;
    internal String[] _wireMemberNames;
    internal Type[] _wireMemberTypes;
    private int _lastPosition;
    internal ISerializationSurrogate _serializationSurrogate;
    internal StreamingContext _context;
    internal List`1<Type> _memberTypesList;
    internal SerObjectInfoInit _serObjectInfoInit;
    internal IFormatterConverter _formatterConverter;
    internal void ObjectEnd();
    internal void PrepareForReuse();
    internal static ReadObjectInfo Create(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly);
    internal void Init(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly);
    internal static ReadObjectInfo Create(Type objectType, String[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly);
    internal void Init(Type objectType, String[] memberNames, Type[] memberTypes, ISurrogateSelector surrogateSelector, StreamingContext context, ObjectManager objectManager, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, bool bSimpleAssembly);
    private void InitReadConstructor(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context);
    private void InitSiRead();
    private void InitNoMembers();
    private void InitMemberInfo();
    internal MemberInfo GetMemberInfo(string name);
    internal Type GetType(string name);
    internal void AddValue(string name, object value, SerializationInfo& si, Object[]& memberData);
    internal void InitDataStore(SerializationInfo& si, Object[]& memberData);
    internal void RecordFixup(long objectId, string name, long idRef);
    internal void PopulateObjectMembers(object obj, Object[] memberData);
    private int Position(string name);
    internal Type[] GetMemberTypes(String[] inMemberNames, Type objectType);
    internal Type GetMemberType(MemberInfo objMember);
    private static ReadObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit);
}
internal class System.Runtime.Serialization.Formatters.Binary.SerializationHeaderRecord : object {
    internal BinaryHeaderEnum _binaryHeaderEnum;
    internal int _topId;
    internal int _headerId;
    internal int _majorVersion;
    internal int _minorVersion;
    internal SerializationHeaderRecord(BinaryHeaderEnum binaryHeaderEnum, int topId, int headerId, int majorVersion, int minorVersion);
    public sealed virtual void Write(BinaryFormatterWriter output);
    private static int GetInt32(Byte[] buffer, int index);
    public sealed virtual void Read(BinaryParser input);
}
internal class System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache : object {
    internal string _fullTypeName;
    internal string _assemblyString;
    internal bool _hasTypeForwardedFrom;
    internal MemberInfo[] _memberInfos;
    internal String[] _memberNames;
    internal Type[] _memberTypes;
    internal SerObjectInfoCache(string typeName, string assemblyName, bool hasTypeForwardedFrom);
    internal SerObjectInfoCache(Type type);
}
internal class System.Runtime.Serialization.Formatters.Binary.SerObjectInfoInit : object {
    internal Dictionary`2<Type, SerObjectInfoCache> _seenBeforeTable;
    internal int _objectInfoIdCount;
    internal SerStack _oiPool;
}
internal class System.Runtime.Serialization.Formatters.Binary.SerStack : object {
    internal Object[] _objects;
    internal string _stackId;
    internal int _top;
    internal SerStack(string stackId);
    internal void Push(object obj);
    internal object Pop();
    internal void IncreaseCapacity();
    internal object Peek();
    internal object PeekPeek();
    internal bool IsEmpty();
}
[DefaultMemberAttribute("Item")]
internal class System.Runtime.Serialization.Formatters.Binary.SizedArray : object {
    internal Object[] _objects;
    internal Object[] _negObjects;
    internal object Item { get; internal set; }
    internal SizedArray(int length);
    private SizedArray(SizedArray sizedArray);
    public sealed virtual object Clone();
    internal object get_Item(int index);
    internal void set_Item(int index, object value);
    internal void IncreaseCapacity(int index);
}
internal class System.Runtime.Serialization.Formatters.Binary.TypeInformation : object {
    [CompilerGeneratedAttribute]
private string <FullTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssemblyString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasTypeForwardedFrom>k__BackingField;
    internal string FullTypeName { get; }
    internal string AssemblyString { get; }
    internal bool HasTypeForwardedFrom { get; }
    internal TypeInformation(string fullTypeName, string assemblyString, bool hasTypeForwardedFrom);
    [CompilerGeneratedAttribute]
internal string get_FullTypeName();
    [CompilerGeneratedAttribute]
internal string get_AssemblyString();
    [CompilerGeneratedAttribute]
internal bool get_HasTypeForwardedFrom();
}
internal class System.Runtime.Serialization.Formatters.Binary.ValueFixup : object {
    internal ValueFixupEnum _valueFixupEnum;
    internal Array _arrayObj;
    internal Int32[] _indexMap;
    internal object _memberObject;
    internal ReadObjectInfo _objectInfo;
    internal string _memberName;
    internal ValueFixup(Array arrayObj, Int32[] indexMap);
    internal ValueFixup(object memberObject, string memberName, ReadObjectInfo objectInfo);
    internal void Fixup(ParseRecord record, ParseRecord parent);
}
internal enum System.Runtime.Serialization.Formatters.Binary.ValueFixupEnum : Enum {
    public int value__;
    public static ValueFixupEnum Empty;
    public static ValueFixupEnum Array;
    public static ValueFixupEnum Header;
    public static ValueFixupEnum Member;
}
internal class System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo : object {
    internal int _objectInfoId;
    internal object _obj;
    [DynamicallyAccessedMembersAttribute("-1")]
internal Type _objectType;
    internal bool _isSi;
    internal bool _isNamed;
    internal bool _isArray;
    internal SerializationInfo _si;
    internal SerObjectInfoCache _cache;
    internal Object[] _memberData;
    internal ISerializationSurrogate _serializationSurrogate;
    internal StreamingContext _context;
    internal SerObjectInfoInit _serObjectInfoInit;
    internal long _objectId;
    internal long _assemId;
    private string _binderTypeName;
    private string _binderAssemblyString;
    internal void ObjectEnd();
    private void InternalInit();
    [RequiresUnreferencedCodeAttribute("It isn't possible to statically get the Type of object")]
internal static WriteObjectInfo Serialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder);
    [RequiresUnreferencedCodeAttribute("It isn't possible to statically get the Type of object")]
internal void InitSerialize(object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder);
    internal static WriteObjectInfo Serialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder);
    internal void InitSerialize(Type objectType, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, SerializationBinder binder);
    private void InitSiWrite();
    private static void CheckTypeForwardedFrom(SerObjectInfoCache cache, Type objectType, string binderAssemblyString);
    private void InitNoMembers();
    private void InitMemberInfo();
    internal string GetTypeFullName();
    internal string GetAssemblyString();
    private void InvokeSerializationBinder(SerializationBinder binder);
    internal void GetMemberInfo(String[]& outMemberNames, Type[]& outMemberTypes, Object[]& outMemberData);
    private static WriteObjectInfo GetObjectInfo(SerObjectInfoInit serObjectInfoInit);
    private static void PutObjectInfo(SerObjectInfoInit serObjectInfoInit, WriteObjectInfo objectInfo);
}
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public enum System.Runtime.Serialization.Formatters.FormatterAssemblyStyle : Enum {
    public int value__;
    public static FormatterAssemblyStyle Simple;
    public static FormatterAssemblyStyle Full;
}
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public enum System.Runtime.Serialization.Formatters.FormatterTypeStyle : Enum {
    public int value__;
    public static FormatterTypeStyle TypesWhenNeeded;
    public static FormatterTypeStyle TypesAlways;
    public static FormatterTypeStyle XsdString;
}
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public interface System.Runtime.Serialization.Formatters.IFieldInfo {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] FieldNames { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Type[] FieldTypes { get; public set; }
    public abstract virtual String[] get_FieldNames();
    public abstract virtual void set_FieldNames(String[] value);
    public abstract virtual Type[] get_FieldTypes();
    public abstract virtual void set_FieldTypes(Type[] value);
}
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public enum System.Runtime.Serialization.Formatters.TypeFilterLevel : Enum {
    public int value__;
    public static TypeFilterLevel Low;
    public static TypeFilterLevel Full;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public static class System.Runtime.Serialization.FormatterServices : object {
    private static ConcurrentDictionary`2<MemberHolder, MemberInfo[]> s_memberInfoTable;
    private static FormatterServices();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2065:UnrecognizedReflectionPattern")]
private static FieldInfo[] InternalGetSerializableMembers(Type type);
    private static FieldInfo[] GetSerializableFields(Type type);
    private static bool GetParentTypes(Type parentType, Type[]& parentTypes, Int32& parentTypeCount);
    public static MemberInfo[] GetSerializableMembers(Type type);
    public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context);
    public static void CheckTypeSecurity(Type t, TypeFilterLevel securityLevel);
    public static object GetUninitializedObject(Type type);
    public static object GetSafeUninitializedObject(Type type);
    internal static void SerializationSetValue(MemberInfo fi, object target, object value);
    public static object PopulateObjectMembers(object obj, MemberInfo[] members, Object[] data);
    public static Object[] GetObjectData(object obj, MemberInfo[] members);
    public static ISerializationSurrogate GetSurrogateForCyclicalReference(ISerializationSurrogate innerSurrogate);
    [RequiresUnreferencedCodeAttribute("Types might be removed")]
public static Type GetTypeFromAssembly(Assembly assem, string name);
    internal static Assembly LoadAssemblyFromString(string assemblyName);
    internal static Assembly LoadAssemblyFromStringNoThrow(string assemblyName);
    internal static string GetClrAssemblyName(Type type, Boolean& hasTypeForwardedFrom);
    internal static string GetClrTypeFullName(Type type);
    private static string GetClrTypeFullNameForArray(Type type);
    private static string GetClrTypeFullNameForNonArrayTypes(Type type);
}
[NullableContextAttribute("2")]
[ObsoleteAttribute("BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.")]
public interface System.Runtime.Serialization.IFormatter {
    internal static string RequiresDynamicCodeMessage;
    internal static string RequiresUnreferencedCodeMessage;
    public ISurrogateSelector SurrogateSelector { get; public set; }
    public SerializationBinder Binder { get; public set; }
    public StreamingContext Context { get; public set; }
    [NullableContextAttribute("1")]
[RequiresDynamicCodeAttribute("BinaryFormatter serialization uses dynamic code generation, the type of objects being processed cannot be statically discovered.")]
[RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the type of objects being processed cannot be statically discovered.")]
public abstract virtual object Deserialize(Stream serializationStream);
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("BinaryFormatter serialization is not trim compatible because the type of objects being processed cannot be statically discovered.")]
public abstract virtual void Serialize(Stream serializationStream, object graph);
    public abstract virtual ISurrogateSelector get_SurrogateSelector();
    public abstract virtual void set_SurrogateSelector(ISurrogateSelector value);
    public abstract virtual SerializationBinder get_Binder();
    public abstract virtual void set_Binder(SerializationBinder value);
    public abstract virtual StreamingContext get_Context();
    public abstract virtual void set_Context(StreamingContext value);
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public interface System.Runtime.Serialization.ISerializationSurrogate {
    public abstract virtual void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    public abstract virtual object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
[NullableContextAttribute("1")]
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public interface System.Runtime.Serialization.ISurrogateSelector {
    public abstract virtual void ChainSelector(ISurrogateSelector selector);
    public abstract virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, ISurrogateSelector& selector);
    [NullableContextAttribute("2")]
public abstract virtual ISurrogateSelector GetNextSelector();
}
internal class System.Runtime.Serialization.LongList : object {
    private Int64[] _values;
    private int _count;
    private int _totalItems;
    private int _currentItem;
    internal int Count { get; }
    internal long Current { get; }
    internal LongList(int startingSize);
    internal void Add(long value);
    internal int get_Count();
    internal void StartEnumeration();
    internal bool MoveNext();
    internal long get_Current();
    internal bool RemoveElement(long value);
    private void EnlargeArray();
}
internal class System.Runtime.Serialization.MemberHolder : object {
    [DynamicallyAccessedMembersAttribute("-1")]
internal Type _memberType;
    internal StreamingContext _context;
    internal MemberHolder(Type type, StreamingContext ctx);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class System.Runtime.Serialization.ObjectHolder : object {
    private object _object;
    internal long _id;
    private int _missingElementsRemaining;
    private int _missingDecendents;
    internal SerializationInfo _serInfo;
    internal ISerializationSurrogate _surrogate;
    internal FixupHolderList _missingElements;
    internal LongList _dependentObjects;
    internal ObjectHolder _next;
    internal int _flags;
    private bool _markForFixupWhenAvailable;
    private ValueTypeFixupInfo _valueFixup;
    private TypeLoadExceptionHolder _typeLoad;
    private bool _reachable;
    internal bool IsIncompleteObjectReference { get; internal set; }
    internal bool RequiresDelayedFixup { get; }
    internal bool RequiresValueTypeFixup { get; }
    internal bool ValueTypeFixupPerformed { get; internal set; }
    internal bool HasISerializable { get; }
    internal bool HasSurrogate { get; }
    internal bool CanSurrogatedObjectValueChange { get; }
    internal bool CanObjectValueChange { get; }
    internal int DirectlyDependentObjects { get; }
    internal int TotalDependentObjects { get; }
    internal bool Reachable { get; internal set; }
    internal bool TypeLoadExceptionReachable { get; }
    internal TypeLoadExceptionHolder TypeLoadException { get; internal set; }
    internal object ObjectValue { get; }
    internal SerializationInfo SerializationInfo { get; internal set; }
    internal ISerializationSurrogate Surrogate { get; }
    internal LongList DependentObjects { get; internal set; }
    internal bool RequiresSerInfoFixup { get; internal set; }
    internal ValueTypeFixupInfo ValueFixup { get; }
    internal bool CompletelyFixed { get; }
    internal long ContainerID { get; }
    internal ObjectHolder(long objID);
    internal ObjectHolder(object obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, Int32[] arrayIndex);
    internal ObjectHolder(string obj, long objID, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainingObj, FieldInfo field, Int32[] arrayIndex);
    private void IncrementDescendentFixups(int amount);
    internal void DecrementFixupsRemaining(ObjectManager manager);
    internal void RemoveDependency(long id);
    internal void AddFixup(FixupHolder fixup, ObjectManager manager);
    private void UpdateDescendentDependencyChain(int amount, ObjectManager manager);
    internal void AddDependency(long dependentObject);
    internal void UpdateData(object obj, SerializationInfo info, ISerializationSurrogate surrogate, long idOfContainer, FieldInfo field, Int32[] arrayIndex, ObjectManager manager);
    internal void MarkForCompletionWhenAvailable();
    internal void SetFlags();
    internal bool get_IsIncompleteObjectReference();
    internal void set_IsIncompleteObjectReference(bool value);
    internal bool get_RequiresDelayedFixup();
    internal bool get_RequiresValueTypeFixup();
    internal bool get_ValueTypeFixupPerformed();
    internal void set_ValueTypeFixupPerformed(bool value);
    internal bool get_HasISerializable();
    internal bool get_HasSurrogate();
    internal bool get_CanSurrogatedObjectValueChange();
    internal bool get_CanObjectValueChange();
    internal int get_DirectlyDependentObjects();
    internal int get_TotalDependentObjects();
    internal bool get_Reachable();
    internal void set_Reachable(bool value);
    internal bool get_TypeLoadExceptionReachable();
    internal TypeLoadExceptionHolder get_TypeLoadException();
    internal void set_TypeLoadException(TypeLoadExceptionHolder value);
    internal object get_ObjectValue();
    internal void SetObjectValue(object obj, ObjectManager manager);
    internal SerializationInfo get_SerializationInfo();
    internal void set_SerializationInfo(SerializationInfo value);
    internal ISerializationSurrogate get_Surrogate();
    internal LongList get_DependentObjects();
    internal void set_DependentObjects(LongList value);
    internal bool get_RequiresSerInfoFixup();
    internal void set_RequiresSerInfoFixup(bool value);
    internal ValueTypeFixupInfo get_ValueFixup();
    internal bool get_CompletelyFixed();
    internal long get_ContainerID();
}
internal class System.Runtime.Serialization.ObjectHolderList : object {
    internal ObjectHolder[] _values;
    internal int _count;
    internal int Version { get; }
    internal int Count { get; }
    internal ObjectHolderList(int startingSize);
    internal void Add(ObjectHolder value);
    internal ObjectHolderListEnumerator GetFixupEnumerator();
    private void EnlargeArray();
    internal int get_Version();
    internal int get_Count();
}
internal class System.Runtime.Serialization.ObjectHolderListEnumerator : object {
    private bool _isFixupEnumerator;
    private ObjectHolderList _list;
    private int _startingVersion;
    private int _currPos;
    internal ObjectHolder Current { get; }
    internal ObjectHolderListEnumerator(ObjectHolderList list, bool isFixupEnumerator);
    internal bool MoveNext();
    internal ObjectHolder get_Current();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public class System.Runtime.Serialization.ObjectIDGenerator : object {
    internal int _currentCount;
    private int _currentSize;
    private Int64[] _ids;
    private Object[] _objs;
    private int FindElement(object obj, Boolean& found);
    public virtual long GetId(object obj, Boolean& firstTime);
    public virtual long HasId(object obj, Boolean& firstTime);
    private void Rehash();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public class System.Runtime.Serialization.ObjectManager : object {
    private static FieldInfo s_nullableValueField;
    private DeserializationEventHandler _onDeserializationHandler;
    private SerializationEventHandler _onDeserializedHandler;
    internal ObjectHolder[] _objects;
    internal object _topObject;
    internal ObjectHolderList _specialFixupObjects;
    internal long _fixupCount;
    internal ISurrogateSelector _selector;
    internal StreamingContext _context;
    [NullableAttribute("2")]
internal object TopObject { get; internal set; }
    internal ObjectHolderList SpecialFixupObjects { get; }
    [NullableContextAttribute("2")]
public ObjectManager(ISurrogateSelector selector, StreamingContext context);
    private static ObjectManager();
    private bool CanCallGetType(object obj);
    internal object get_TopObject();
    internal void set_TopObject(object value);
    internal ObjectHolderList get_SpecialFixupObjects();
    internal ObjectHolder FindObjectHolder(long objectID);
    internal ObjectHolder FindOrCreateObjectHolder(long objectID);
    private void AddObjectHolder(ObjectHolder holder);
    private bool GetCompletionInfo(FixupHolder fixup, ObjectHolder& holder, Object& member, bool bThrowIfMissing);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
private void FixupSpecialObject(ObjectHolder holder);
    private bool ResolveObjectReference(ObjectHolder holder);
    private bool DoValueTypeFixup(FieldInfo memberToFix, ObjectHolder holder, object value);
    private static FieldInfo GetNullableValueField(Type type);
    internal void CompleteObject(ObjectHolder holder, bool bObjectFullyComplete);
    private void DoNewlyRegisteredObjectFixups(ObjectHolder holder);
    [NullableContextAttribute("2")]
public virtual object GetObject(long objectID);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
public virtual void RegisterObject(object obj, long objectID);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
public void RegisterObject(object obj, long objectID, SerializationInfo info);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member);
    internal void RegisterString(string obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member);
    [NullableContextAttribute("2")]
[RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, Int32[] arrayIndex);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
internal void CompleteISerializableObject(object obj, SerializationInfo info, StreamingContext context);
    internal static ConstructorInfo GetDeserializationConstructor(Type t);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
public virtual void DoFixups();
    private void RegisterFixup(FixupHolder fixup, long objectToBeFixed, long objectRequired);
    public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired);
    public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired);
    public virtual void RecordArrayElementFixup(long arrayToBeFixed, int index, long objectRequired);
    public virtual void RecordArrayElementFixup(long arrayToBeFixed, Int32[] indices, long objectRequired);
    public virtual void RaiseDeserializationEvent();
    internal virtual void AddOnDeserialization(DeserializationEventHandler handler);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
internal virtual void AddOnDeserialized(object obj);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
internal virtual void RaiseOnDeserializedEvent(object obj);
    [RequiresUnreferencedCodeAttribute("ObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
public void RaiseOnDeserializingEvent(object obj);
}
public abstract class System.Runtime.Serialization.SerializationBinder : object {
    [NullableContextAttribute("2")]
public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
    [NullableContextAttribute("1")]
public abstract virtual Type BindToType(string assemblyName, string typeName);
}
public class System.Runtime.Serialization.SerializationEventHandler : MulticastDelegate {
    public SerializationEventHandler(object object, IntPtr method);
    public virtual void Invoke(StreamingContext context);
    public virtual IAsyncResult BeginInvoke(StreamingContext context, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Runtime.Serialization.SerializationEvents : object {
    private List`1<MethodInfo> _onSerializingMethods;
    private List`1<MethodInfo> _onSerializedMethods;
    private List`1<MethodInfo> _onDeserializingMethods;
    private List`1<MethodInfo> _onDeserializedMethods;
    internal bool HasOnSerializingEvents { get; }
    internal SerializationEvents(Type t);
    private List`1<MethodInfo> GetMethodsWithAttribute(Type attribute, Type t);
    internal bool get_HasOnSerializingEvents();
    internal void InvokeOnSerializing(object obj, StreamingContext context);
    internal void InvokeOnDeserializing(object obj, StreamingContext context);
    internal void InvokeOnDeserialized(object obj, StreamingContext context);
    internal SerializationEventHandler AddOnSerialized(object obj, SerializationEventHandler handler);
    internal SerializationEventHandler AddOnDeserialized(object obj, SerializationEventHandler handler);
    private static void InvokeOnDelegate(object obj, StreamingContext context, List`1<MethodInfo> methods);
    private static SerializationEventHandler AddOnDelegate(object obj, SerializationEventHandler handler, List`1<MethodInfo> methods);
}
internal static class System.Runtime.Serialization.SerializationEventsCache : object {
    private static ConcurrentDictionary`2<Type, SerializationEvents> s_cache;
    private static SerializationEventsCache();
    internal static SerializationEvents GetSerializationEventsForType(Type t);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2067:UnrecognizedReflectionPattern")]
private static SerializationEvents CreateSerializationEvents(Type t);
}
internal class System.Runtime.Serialization.SerializationFieldInfo : FieldInfo {
    private FieldInfo m_field;
    private string m_serializationName;
    internal FieldInfo FieldInfo { get; }
    public string Name { get; }
    public Module Module { get; }
    public int MetadataToken { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    public Type FieldType { get; }
    public RuntimeFieldHandle FieldHandle { get; }
    public FieldAttributes Attributes { get; }
    internal SerializationFieldInfo(FieldInfo field, string namePrefix);
    internal FieldInfo get_FieldInfo();
    public virtual string get_Name();
    public virtual Module get_Module();
    public virtual int get_MetadataToken();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual Type get_FieldType();
    public virtual object GetValue(object obj);
    public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
    public virtual RuntimeFieldHandle get_FieldHandle();
    public virtual FieldAttributes get_Attributes();
}
[ExtensionAttribute]
internal static class System.Runtime.Serialization.SerializationInfoExtensions : object {
    private static Action`4<SerializationInfo, string, object, Type> s_updateValue;
    private static SerializationInfoExtensions();
    [ExtensionAttribute]
public static void UpdateValue(SerializationInfo si, string name, object value, Type type);
}
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public class System.Runtime.Serialization.SerializationObjectManager : object {
    private Dictionary`2<object, object> _objectSeenTable;
    private StreamingContext _context;
    private SerializationEventHandler _onSerializedHandler;
    public SerializationObjectManager(StreamingContext context);
    [NullableContextAttribute("1")]
[RequiresUnreferencedCodeAttribute("SerializationObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
public void RegisterObject(object obj);
    public void RaiseOnSerializedEvent();
    [RequiresUnreferencedCodeAttribute("SerializationObjectManager is not trim compatible because the type of objects being managed cannot be statically discovered.")]
private void AddOnSerialized(object obj);
}
internal class System.Runtime.Serialization.SurrogateForCyclicalReference : object {
    private ISerializationSurrogate _innerSurrogate;
    internal SurrogateForCyclicalReference(ISerializationSurrogate innerSurrogate);
    public sealed virtual void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    public sealed virtual object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
internal class System.Runtime.Serialization.SurrogateHashtable : Hashtable {
    internal SurrogateHashtable(int size);
    protected virtual bool KeyEquals(object key, object item);
}
internal class System.Runtime.Serialization.SurrogateKey : object {
    internal Type _type;
    internal StreamingContext _context;
    internal SurrogateKey(Type type, StreamingContext context);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ObsoleteAttribute("Formatter-based serialization is obsolete and should not be used.")]
public class System.Runtime.Serialization.SurrogateSelector : object {
    internal SurrogateHashtable _surrogates;
    internal ISurrogateSelector _nextSelector;
    public virtual void AddSurrogate(Type type, StreamingContext context, ISerializationSurrogate surrogate);
    private static bool HasCycle(ISurrogateSelector selector);
    public virtual void ChainSelector(ISurrogateSelector selector);
    [NullableContextAttribute("2")]
public virtual ISurrogateSelector GetNextSelector();
    public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, ISurrogateSelector& selector);
    public virtual void RemoveSurrogate(Type type, StreamingContext context);
}
public class System.Runtime.Serialization.TypeLoadExceptionHolder : object {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [NullableAttribute("2")]
internal string TypeName { get; }
    internal TypeLoadExceptionHolder(string typeName);
    [CompilerGeneratedAttribute]
internal string get_TypeName();
}
internal class System.Runtime.Serialization.ValueTypeFixupInfo : object {
    private long _containerID;
    private FieldInfo _parentField;
    private Int32[] _parentIndex;
    public long ContainerID { get; }
    public FieldInfo ParentField { get; }
    public Int32[] ParentIndex { get; }
    public ValueTypeFixupInfo(long containerID, FieldInfo member, Int32[] parentIndex);
    public long get_ContainerID();
    public FieldInfo get_ParentField();
    public Int32[] get_ParentIndex();
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Arg_HTCapacityOverflow { get; }
    internal static string Serialization_NonSerType { get; }
    internal static string Argument_DataLengthDifferent { get; }
    internal static string ArgumentNull_NullMember { get; }
    internal static string Serialization_UnknownMemberInfo { get; }
    internal static string Serialization_NoID { get; }
    internal static string Serialization_TooManyElements { get; }
    internal static string Argument_InvalidFieldInfo { get; }
    internal static string Serialization_NeverSeen { get; }
    internal static string Serialization_IORIncomplete { get; }
    internal static string Serialization_ObjectNotSupplied { get; }
    internal static string Serialization_NotCyclicallyReferenceableSurrogate { get; }
    internal static string Serialization_TooManyReferences { get; }
    internal static string Serialization_MissingObject { get; }
    internal static string Serialization_InvalidFixupDiscovered { get; }
    internal static string Serialization_TypeLoadFailure { get; }
    internal static string Serialization_ValueTypeFixup { get; }
    internal static string Serialization_PartialValueTypeFixup { get; }
    internal static string Serialization_UnableToFixup { get; }
    internal static string ArgumentOutOfRange_ObjectID { get; }
    internal static string Serialization_RegisterTwice { get; }
    internal static string Serialization_NotISer { get; }
    internal static string Serialization_ConstructorNotFound { get; }
    internal static string Serialization_IncorrectNumberOfFixups { get; }
    internal static string Serialization_InvalidFixupType { get; }
    internal static string Serialization_IdTooSmall { get; }
    internal static string Serialization_ParentChildIdentical { get; }
    internal static string Serialization_InvalidType { get; }
    internal static string Argument_MustSupplyParent { get; }
    internal static string Argument_MemberAndArray { get; }
    internal static string Serialization_CorruptedStream { get; }
    internal static string Serialization_Stream { get; }
    internal static string Serialization_BinaryHeader { get; }
    internal static string Serialization_TypeExpected { get; }
    internal static string Serialization_StreamEnd { get; }
    internal static string Serialization_CrossAppDomainError { get; }
    internal static string Serialization_Map { get; }
    internal static string Serialization_Assembly { get; }
    internal static string Serialization_ObjectTypeEnum { get; }
    internal static string Serialization_AssemblyId { get; }
    internal static string Serialization_ArrayType { get; }
    internal static string Serialization_TypeCode { get; }
    internal static string Serialization_TypeWrite { get; }
    internal static string Serialization_TypeRead { get; }
    internal static string Serialization_AssemblyNotFound { get; }
    internal static string Serialization_InvalidFormat { get; }
    internal static string Serialization_TopObject { get; }
    internal static string Serialization_XMLElement { get; }
    internal static string Serialization_TopObjectInstantiate { get; }
    internal static string Serialization_ArrayTypeObject { get; }
    internal static string Serialization_TypeMissing { get; }
    internal static string Serialization_ObjNoID { get; }
    internal static string Serialization_SerMemberInfo { get; }
    internal static string Argument_MustSupplyContainer { get; }
    internal static string Serialization_ParseError { get; }
    internal static string Serialization_ISerializableMemberInfo { get; }
    internal static string Serialization_MemberInfo { get; }
    internal static string Serialization_ISerializableTypes { get; }
    internal static string Serialization_MissingMember { get; }
    internal static string Serialization_NoMemberInfo { get; }
    internal static string Serialization_SurrogateCycleInArgument { get; }
    internal static string Serialization_SurrogateCycle { get; }
    internal static string IO_EOF_ReadBeyondEOF { get; }
    internal static string BinaryFormatter_SerializationDisallowed { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Arg_HTCapacityOverflow();
    internal static string get_Serialization_NonSerType();
    internal static string get_Argument_DataLengthDifferent();
    internal static string get_ArgumentNull_NullMember();
    internal static string get_Serialization_UnknownMemberInfo();
    internal static string get_Serialization_NoID();
    internal static string get_Serialization_TooManyElements();
    internal static string get_Argument_InvalidFieldInfo();
    internal static string get_Serialization_NeverSeen();
    internal static string get_Serialization_IORIncomplete();
    internal static string get_Serialization_ObjectNotSupplied();
    internal static string get_Serialization_NotCyclicallyReferenceableSurrogate();
    internal static string get_Serialization_TooManyReferences();
    internal static string get_Serialization_MissingObject();
    internal static string get_Serialization_InvalidFixupDiscovered();
    internal static string get_Serialization_TypeLoadFailure();
    internal static string get_Serialization_ValueTypeFixup();
    internal static string get_Serialization_PartialValueTypeFixup();
    internal static string get_Serialization_UnableToFixup();
    internal static string get_ArgumentOutOfRange_ObjectID();
    internal static string get_Serialization_RegisterTwice();
    internal static string get_Serialization_NotISer();
    internal static string get_Serialization_ConstructorNotFound();
    internal static string get_Serialization_IncorrectNumberOfFixups();
    internal static string get_Serialization_InvalidFixupType();
    internal static string get_Serialization_IdTooSmall();
    internal static string get_Serialization_ParentChildIdentical();
    internal static string get_Serialization_InvalidType();
    internal static string get_Argument_MustSupplyParent();
    internal static string get_Argument_MemberAndArray();
    internal static string get_Serialization_CorruptedStream();
    internal static string get_Serialization_Stream();
    internal static string get_Serialization_BinaryHeader();
    internal static string get_Serialization_TypeExpected();
    internal static string get_Serialization_StreamEnd();
    internal static string get_Serialization_CrossAppDomainError();
    internal static string get_Serialization_Map();
    internal static string get_Serialization_Assembly();
    internal static string get_Serialization_ObjectTypeEnum();
    internal static string get_Serialization_AssemblyId();
    internal static string get_Serialization_ArrayType();
    internal static string get_Serialization_TypeCode();
    internal static string get_Serialization_TypeWrite();
    internal static string get_Serialization_TypeRead();
    internal static string get_Serialization_AssemblyNotFound();
    internal static string get_Serialization_InvalidFormat();
    internal static string get_Serialization_TopObject();
    internal static string get_Serialization_XMLElement();
    internal static string get_Serialization_TopObjectInstantiate();
    internal static string get_Serialization_ArrayTypeObject();
    internal static string get_Serialization_TypeMissing();
    internal static string get_Serialization_ObjNoID();
    internal static string get_Serialization_SerMemberInfo();
    internal static string get_Argument_MustSupplyContainer();
    internal static string get_Serialization_ParseError();
    internal static string get_Serialization_ISerializableMemberInfo();
    internal static string get_Serialization_MemberInfo();
    internal static string get_Serialization_ISerializableTypes();
    internal static string get_Serialization_MissingMember();
    internal static string get_Serialization_NoMemberInfo();
    internal static string get_Serialization_SurrogateCycleInArgument();
    internal static string get_Serialization_SurrogateCycle();
    internal static string get_IO_EOF_ReadBeyondEOF();
    internal static string get_BinaryFormatter_SerializationDisallowed();
}
