internal class FxResources.Microsoft.VisualBasic.Core.SR : object {
}
public enum Microsoft.VisualBasic.AppWinStyle : Enum {
    public short value__;
    public static AppWinStyle Hide;
    public static AppWinStyle NormalFocus;
    public static AppWinStyle MinimizedFocus;
    public static AppWinStyle MaximizedFocus;
    public static AppWinStyle NormalNoFocus;
    public static AppWinStyle MinimizedNoFocus;
}
public enum Microsoft.VisualBasic.CallType : Enum {
    public int value__;
    public static CallType Method;
    public static CallType Get;
    public static CallType Let;
    public static CallType Set;
}
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("Microsoft.VisualBasic.Collection/CollectionDebugView")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.VisualBasic.Collection : object {
    private CultureInfo m_CultureInfo;
    private Dictionary`2<string, Node> m_KeyedNodesHash;
    private FastList m_ItemsList;
    private List`1<object> m_Iterators;
    public object Item { get; }
    public object Item { get; }
    [EditorBrowsableAttribute("2")]
public object Item { get; }
    public int Count { get; }
    private int ICollectionCount { get; }
    private bool ICollectionIsSynchronized { get; }
    private object ICollectionSyncRoot { get; }
    private bool IListIsFixedSize { get; }
    private bool IListIsReadOnly { get; }
    private object IListItem { get; private set; }
    public void Add(object Item, string Key, object Before, object After);
    public void Clear();
    public bool Contains(string Key);
    public void Remove(string Key);
    public void Remove(int Index);
    public object get_Item(int Index);
    public object get_Item(string Key);
    public object get_Item(object Index);
    public int get_Count();
    public IEnumerator GetEnumerator();
    internal void RemoveIterator(WeakReference weakref);
    internal void AddIterator(WeakReference weakref);
    internal Node GetFirstListNode();
    private void Initialize(CultureInfo CultureInfo, int StartingHashCapacity);
    private void AdjustEnumeratorsOnNodeInserted(Node NewNode);
    private void AdjustEnumeratorsOnNodeRemoved(Node RemovedNode);
    private void AdjustEnumeratorsHelper(Node NewOrRemovedNode, AdjustIndexType Type);
    private void IndexCheck(int Index);
    private FastList InternalItemsList();
    private sealed virtual override IEnumerator ICollectionGetEnumerator();
    private sealed virtual override int get_ICollectionCount();
    private sealed virtual override bool get_ICollectionIsSynchronized();
    private sealed virtual override object get_ICollectionSyncRoot();
    private sealed virtual override bool get_IListIsFixedSize();
    private sealed virtual override bool get_IListIsReadOnly();
    private sealed virtual override void ICollectionCopyTo(Array array, int index);
    private sealed virtual override int IListAdd(object value);
    private sealed virtual override void IListInsert(int index, object value);
    private sealed virtual override void IListRemoveAt(int index);
    private sealed virtual override void IListRemove(object value);
    private sealed virtual override void IListClear();
    private sealed virtual override object get_IListItem(int index);
    private sealed virtual override void set_IListItem(int index, object value);
    private sealed virtual override bool IListContains(object value);
    private sealed virtual override int IListIndexOf(object value);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.ComClassAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string _ClassID;
    [CompilerGeneratedAttribute]
private string _InterfaceID;
    [CompilerGeneratedAttribute]
private string _EventID;
    [CompilerGeneratedAttribute]
private bool _InterfaceShadows;
    public string ClassID { get; }
    public string InterfaceID { get; }
    public string EventID { get; }
    public bool InterfaceShadows { get; public set; }
    public ComClassAttribute(string _ClassID);
    public ComClassAttribute(string _ClassID, string _InterfaceID);
    public ComClassAttribute(string _ClassID, string _InterfaceID, string _EventId);
    [CompilerGeneratedAttribute]
public string get_ClassID();
    [CompilerGeneratedAttribute]
public string get_InterfaceID();
    [CompilerGeneratedAttribute]
public string get_EventID();
    [CompilerGeneratedAttribute]
public bool get_InterfaceShadows();
    [CompilerGeneratedAttribute]
public void set_InterfaceShadows(bool AutoPropertyValue);
}
public enum Microsoft.VisualBasic.CompareMethod : Enum {
    public int value__;
    public static CompareMethod Binary;
    public static CompareMethod Text;
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.AssemblyData : object {
    public ArrayList m_Files;
    internal FileSystemInfo[] m_DirFiles;
    internal int m_DirNextFileIndex;
    internal FileAttributes m_DirAttributes;
    internal VB6File GetChannelObj(int lChannel);
    internal void SetChannelObj(int lChannel, VB6File oFile);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.BooleanType : object {
    public static bool FromString(string Value);
    public static bool FromObject(object Value);
    private static bool DecimalToBoolean(IConvertible ValueInterface);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ByteType : object {
    public static byte FromString(string Value);
    public static byte FromObject(object Value);
    private static byte DecimalToByte(IConvertible ValueInterface);
}
internal class Microsoft.VisualBasic.CompilerServices.CacheDict`2 : object {
    private Dictionary`2<TKey, KeyInfo<TKey, TValue>> _dict;
    private LinkedList`1<TKey> _list;
    private int _maxSize;
    internal CacheDict`2(int maxSize);
    internal void Add(TKey key, TValue value);
    internal bool TryGetValue(TKey key, TValue& value);
}
internal class Microsoft.VisualBasic.CompilerServices.CacheSet`1 : object {
    private Dictionary`2<T, LinkedListNode`1<T>> _dict;
    private LinkedList`1<T> _list;
    private int _maxSize;
    internal CacheSet`1(int maxSize);
    internal T GetExistingOrAdd(T key);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.CharArrayType : object {
    public static Char[] FromString(string Value);
    public static Char[] FromObject(object Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.CharType : object {
    public static char FromString(string Value);
    public static char FromObject(object Value);
}
internal class Microsoft.VisualBasic.CompilerServices.ConversionResolution : object {
    private static ConversionClass[][] s_conversionTable;
    internal static Int32[] NumericSpecificityRank;
    internal static TypeCode[][] ForLoopWidestTypeCode;
    private static ConversionResolution();
    [RequiresUnreferencedCodeAttribute("Calls ClassifyUserDefinedConversion and ClassifyPredefinedConversion")]
internal static ConversionClass ClassifyConversion(Type targetType, Type sourceType, Method& operatorMethod);
    internal static ConversionClass ClassifyIntrinsicConversion(TypeCode targetTypeCode, TypeCode sourceTypeCode);
    [RequiresUnreferencedCodeAttribute("Calls GetInterfaceConstraints but does so recursively on various types")]
internal static ConversionClass ClassifyPredefinedCLRConversion(Type targetType, Type sourceType);
    [RequiresUnreferencedCodeAttribute("Calls ClassifyPredefinedCLRConversion")]
private static ConversionClass ClassifyCLRArrayToInterfaceConversion(Type targetInterface, Type sourceArrayType);
    [RequiresUnreferencedCodeAttribute("Calls ClassifyPredefinedCLRConversion")]
private static ConversionClass ClassifyCLRConversionForArrayElementTypes(Type targetElementType, Type sourceElementType);
    [RequiresUnreferencedCodeAttribute("Calls ClassifyPredefinedCLRConversion")]
internal static ConversionClass ClassifyPredefinedConversion(Type targetType, Type sourceType);
    [RequiresUnreferencedCodeAttribute("Calls Operators.CollectOperators")]
private static List`1<Method> CollectConversionOperators(Type targetType, Type sourceType, Boolean& foundTargetTypeOperators, Boolean& foundSourceTypeOperators);
    [RequiresUnreferencedCodeAttribute("Calls ClassifyPredefinedConversion")]
private static bool Encompasses(Type larger, Type smaller);
    [RequiresUnreferencedCodeAttribute("Calls ClassifyPredefinedConversion")]
private static bool NotEncompasses(Type larger, Type smaller);
    [RequiresUnreferencedCodeAttribute("Calls Encompasses")]
private static Type MostEncompassing(List`1<Type> types);
    [RequiresUnreferencedCodeAttribute("Calls Encompasses")]
private static Type MostEncompassed(List`1<Type> types);
    private static void FindBestMatch(Type targetType, Type sourceType, List`1<Method> searchList, List`1<Method> resultList, Boolean& genericMembersExistInList);
    private static void InsertInOperatorListIfLessGenericThanExisting(Method operatorToInsert, List`1<Method> operatorList, Boolean& genericMembersExistInList);
    [RequiresUnreferencedCodeAttribute("Calls ClassifyPredefinedConversion")]
private static List`1<Method> ResolveConversion(Type targetType, Type sourceType, List`1<Method> operatorSet, bool wideningOnly, Boolean& resolutionIsAmbiguous);
    [RequiresUnreferencedCodeAttribute("Calls DoClassifyUserDefinedConversion")]
internal static ConversionClass ClassifyUserDefinedConversion(Type targetType, Type sourceType, Method& operatorMethod);
    [RequiresUnreferencedCodeAttribute("Calls CollectConversionOperators")]
private static ConversionClass DoClassifyUserDefinedConversion(Type targetType, Type sourceType, Method& operatorMethod, Boolean& foundTargetTypeOperators, Boolean& foundSourceTypeOperators);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Conversions : object {
    public static bool ToBoolean(string Value);
    public static bool ToBoolean(object Value);
    public static byte ToByte(string Value);
    public static byte ToByte(object Value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string Value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(object Value);
    public static short ToShort(string Value);
    public static short ToShort(object Value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(string Value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(object Value);
    public static int ToInteger(string Value);
    public static int ToInteger(object Value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(string Value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(object Value);
    public static long ToLong(string Value);
    public static long ToLong(object Value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(string Value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(object Value);
    public static decimal ToDecimal(bool Value);
    public static decimal ToDecimal(string Value);
    internal static decimal ToDecimal(string Value, NumberFormatInfo NumberFormat);
    public static decimal ToDecimal(object Value);
    internal static decimal ToDecimal(object Value, NumberFormatInfo NumberFormat);
    private static decimal ParseDecimal(string Value, NumberFormatInfo NumberFormat);
    private static NumberFormatInfo GetNormalizedNumberFormat(NumberFormatInfo InNumberFormat);
    public static float ToSingle(string Value);
    internal static float ToSingle(string Value, NumberFormatInfo NumberFormat);
    public static float ToSingle(object Value);
    internal static float ToSingle(object Value, NumberFormatInfo NumberFormat);
    public static double ToDouble(string Value);
    internal static double ToDouble(string Value, NumberFormatInfo NumberFormat);
    public static double ToDouble(object Value);
    internal static double ToDouble(object Value, NumberFormatInfo NumberFormat);
    private static double ParseDouble(string Value);
    internal static bool TryParseDouble(string Value, Double& Result);
    private static double ParseDouble(string Value, NumberFormatInfo NumberFormat);
    public static DateTime ToDate(string Value);
    public static DateTime ToDate(object Value);
    internal static bool TryParseDate(string Value, DateTime& Result);
    public static char ToChar(string Value);
    public static char ToChar(object Value);
    public static Char[] ToCharArrayRankOne(string Value);
    public static Char[] ToCharArrayRankOne(object Value);
    public static string ToString(bool Value);
    public static string ToString(byte Value);
    public static string ToString(char Value);
    public static string FromCharArray(Char[] Value);
    public static string FromCharAndCount(char Value, int Count);
    public static string FromCharArraySubset(Char[] Value, int StartIndex, int Length);
    public static string ToString(short Value);
    public static string ToString(int Value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 Value);
    public static string ToString(long Value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong Value);
    public static string ToString(float Value);
    public static string ToString(double Value);
    public static string ToString(float Value, NumberFormatInfo NumberFormat);
    public static string ToString(double Value, NumberFormatInfo NumberFormat);
    public static string ToString(DateTime Value);
    public static string ToString(decimal Value);
    public static string ToString(decimal Value, NumberFormatInfo NumberFormat);
    public static string ToString(object Value);
    public static T ToGenericParameter(object Value);
    private static object CastSByteEnum(sbyte Expression, Type TargetType);
    private static object CastByteEnum(byte Expression, Type TargetType);
    private static object CastInt16Enum(short Expression, Type TargetType);
    private static object CastUInt16Enum(ushort Expression, Type TargetType);
    private static object CastInt32Enum(int Expression, Type TargetType);
    private static object CastUInt32Enum(UInt32 Expression, Type TargetType);
    private static object CastInt64Enum(long Expression, Type TargetType);
    private static object CastUInt64Enum(ulong Expression, Type TargetType);
    internal static object ForceValueCopy(object Expression, Type TargetType);
    private static object ChangeIntrinsicType(object Expression, Type TargetType);
    [RequiresUnreferencedCodeAttribute("The Expression origin object cannot be statically analyzed and may be trimmed")]
public static object ChangeType(object Expression, Type TargetType);
    [RequiresUnreferencedCodeAttribute("Calls ObjectUserDefinedConversion")]
internal static object ChangeType(object Expression, Type TargetType, bool Dynamic);
    [ObsoleteAttribute("FallbackUserDefinedConversion has been deprecated and is not supported.", "True")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("The Expression origin object cannot be statically analyzed and may be trimmed")]
public static object FallbackUserDefinedConversion(object Expression, Type TargetType);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Calls Container.InvokeMethod which is unsafe.")]
private static object ObjectUserDefinedConversion(object Expression, Type TargetType);
    [RequiresUnreferencedCodeAttribute("Calls ClassifyUserDefinedConversion")]
internal static bool CanUserDefinedConvert(object Expression, Type TargetType);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DateType : object {
    public static DateTime FromString(string Value);
    public static DateTime FromString(string Value, CultureInfo culture);
    public static DateTime FromObject(object Value);
    internal static bool TryParse(string Value, DateTime& Result);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DecimalType : object {
    public static decimal FromBoolean(bool Value);
    public static decimal FromString(string Value);
    public static decimal FromString(string Value, NumberFormatInfo NumberFormat);
    public static decimal FromObject(object Value);
    public static decimal FromObject(object Value, NumberFormatInfo NumberFormat);
    public static decimal Parse(string Value, NumberFormatInfo NumberFormat);
    internal static NumberFormatInfo GetNormalizedNumberFormat(NumberFormatInfo InNumberFormat);
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DoubleType : object {
    public static double FromString(string Value);
    public static double FromString(string Value, NumberFormatInfo NumberFormat);
    public static double FromObject(object Value);
    public static double FromObject(object Value, NumberFormatInfo NumberFormat);
    private static double DecimalToDouble(IConvertible ValueInterface);
    public static double Parse(string Value);
    internal static bool TryParse(string Value, Double& Result);
    public static double Parse(string Value, NumberFormatInfo NumberFormat);
}
internal class Microsoft.VisualBasic.CompilerServices.ExceptionUtils : object {
    internal static Exception VbMakeIllegalForException();
    internal static Exception VbMakeObjNotSetException();
    internal static Exception VbMakeException(int hr);
    internal static Exception VbMakeException(Exception ex, int hr);
    internal static Exception VbMakeExceptionEx(int number, string sMsg);
    internal static Exception BuildException(int Number, string Description, Boolean& VBDefinedError);
    internal static ArgumentException GetArgumentExceptionWithArgName(string ArgumentName, string ResourceID, String[] PlaceHolders);
    internal static ArgumentNullException GetArgumentNullException(string ArgumentName);
    internal static ArgumentNullException GetArgumentNullException(string ArgumentName, string ResourceID, String[] PlaceHolders);
    internal static DirectoryNotFoundException GetDirectoryNotFoundException(string ResourceID, String[] PlaceHolders);
    internal static FileNotFoundException GetFileNotFoundException(string FileName, string ResourceID, String[] PlaceHolders);
    internal static InvalidOperationException GetInvalidOperationException(string ResourceID, String[] PlaceHolders);
    internal static IOException GetIOException(string ResourceID, String[] PlaceHolders);
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.GetHandler : object {
    private VB6File m_oFile;
    [RequiresUnreferencedCodeAttribute("This implementation of IRecordEnum is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public GetHandler(VB6File oFile);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public sealed virtual override bool Callback(FieldInfo field_info, Object& vValue);
}
internal class Microsoft.VisualBasic.CompilerServices.IDOBinder : object {
    internal static object missingMemberSentinel;
    private static IDOBinder();
    internal static Boolean[] GetCopyBack();
    [RequiresUnreferencedCodeAttribute("Calls VBCallBinder.ctor")]
internal static object IDOCall(IDynamicMetaObjectProvider instance, string memberName, Object[] arguments, String[] argumentNames, Boolean[] copyBack, bool ignoreReturn);
    [RequiresUnreferencedCodeAttribute("Calls VBGetBinder.ctor")]
internal static object IDOGet(IDynamicMetaObjectProvider instance, string memberName, Object[] arguments, String[] argumentNames, Boolean[] copyBack);
    [RequiresUnreferencedCodeAttribute("Calls IDOUtils.CreateRefCallSiteAndInvoke")]
internal static object IDOInvokeDefault(IDynamicMetaObjectProvider instance, Object[] arguments, String[] argumentNames, bool reportErrors, Boolean[] copyBack);
    [RequiresUnreferencedCodeAttribute("Calls VBInvokeDefaultFallbackBinder.ctor")]
internal static object IDOFallbackInvokeDefault(IDynamicMetaObjectProvider instance, Object[] arguments, String[] argumentNames, bool reportErrors, Boolean[] copyBack);
    [RequiresUnreferencedCodeAttribute("Calls LateIndexSet")]
internal static void IDOSet(IDynamicMetaObjectProvider instance, string memberName, String[] argumentNames, Object[] arguments);
    [RequiresUnreferencedCodeAttribute("Calls LateIndexSetComplex")]
internal static void IDOSetComplex(IDynamicMetaObjectProvider instance, string memberName, Object[] arguments, String[] argumentNames, bool optimisticSet, bool rValueBase);
    [RequiresUnreferencedCodeAttribute("Calls IDOUtils.CreateFuncCallSiteAndInvoke")]
internal static void IDOIndexSet(IDynamicMetaObjectProvider instance, Object[] arguments, String[] argumentNames);
    [RequiresUnreferencedCodeAttribute("Calls IDOUtils.CreateFuncCallSiteAndInvoke")]
internal static void IDOIndexSetComplex(IDynamicMetaObjectProvider instance, Object[] arguments, String[] argumentNames, bool optimisticSet, bool rValueBase);
    [RequiresUnreferencedCodeAttribute("Calls IDOUtils.CreateConvertCallSiteAndInvoke")]
internal static object UserDefinedConversion(IDynamicMetaObjectProvider expression, Type targetType);
    [RequiresUnreferencedCodeAttribute("Calls IDOUtils.CreateFuncCallSiteAndInvoke")]
internal static object InvokeUserDefinedOperator(UserDefinedOperator op, Object[] arguments);
}
internal class Microsoft.VisualBasic.CompilerServices.IDOUtils : object {
    private static CacheSet`1<CallSiteBinder> s_binderCache;
    private static CacheDict`2<int, Func`4<CallSiteBinder, object, Object[], object>> Invokers;
    private static IDOUtils();
    private static CallSiteBinder GetCachedBinder(CallSiteBinder action);
    internal static IDynamicMetaObjectProvider TryCastToIDMOP(object o);
    internal static Nullable`1<ExpressionType> LinqOperator(UserDefinedOperator vbOperator);
    public static void CopyBackArguments(CallInfo callInfo, Object[] packedArgs, Object[] args);
    public static void PackArguments(int valueArgs, String[] argNames, Object[] args, Object[]& packedArgs, CallInfo& callInfo);
    public static void UnpackArguments(DynamicMetaObject[] packedArgs, CallInfo callInfo, Expression[]& args, String[]& argNames, Object[]& argValues);
    public static Expression GetWriteBack(Expression[] arguments, ParameterExpression array);
    public static Expression ConvertToObject(Expression valueExpression);
    [RequiresUnreferencedCodeAttribute("Calls CreateInvoker")]
public static object CreateRefCallSiteAndInvoke(CallSiteBinder action, object instance, Object[] arguments);
    [RequiresUnreferencedCodeAttribute("Calls Type.GetMethod() that cannot be statically analyzed")]
private static Func`4<CallSiteBinder, object, Object[], object> CreateInvoker(int ArgLength);
    [RequiresUnreferencedCodeAttribute("Calls Object.GetType().GetField()")]
public static object CreateFuncCallSiteAndInvoke(CallSiteBinder action, object instance, Object[] arguments);
    [RequiresUnreferencedCodeAttribute("Calls Object.GetType().GetField()")]
public static object CreateConvertCallSiteAndInvoke(ConvertBinder action, object instance);
    internal static BindingRestrictions CreateRestrictions(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject value);
    private static BindingRestrictions CreateRestriction(DynamicMetaObject metaObject);
    internal static bool NeedsDeferral(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject value);
}
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.IncompleteInitialization : Exception {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.IntegerType : object {
    public static int FromString(string Value);
    public static int FromObject(object Value);
    private static int DecimalToInteger(IConvertible ValueInterface);
}
internal class Microsoft.VisualBasic.CompilerServices.InternalErrorException : Exception {
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.IOUtils : object {
    internal static string FindFirstFile(Assembly assem, string PathName, FileAttributes Attributes);
    internal static string FindNextFile(Assembly assem);
    private static string FindFileFilter(AssemblyData oAssemblyData);
}
internal interface Microsoft.VisualBasic.CompilerServices.IRecordEnum {
    public abstract virtual bool Callback(FieldInfo FieldInfo, Object& Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LateBinding : object {
    private static MemberInfo GetMostDerivedMemberInfo(IReflect objIReflect, string name, BindingFlags flags);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateGet(object o, Type objType, string name, Object[] args, String[] paramnames, Boolean[] CopyBack);
    private static bool IsMissingMemberException(Exception ex);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateSetComplex(object o, Type objType, string name, Object[] args, String[] paramnames, bool OptimisticSet, bool RValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateSet(object o, Type objType, string name, Object[] args, String[] paramnames);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static void InternalLateSet(object o, Type& objType, string name, Object[] args, String[] paramnames, bool OptimisticSet, CallType UseCallType);
    private static void CheckForClassExtendingCOMClass(Type objType);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateIndexGet(object o, Object[] args, String[] paramnames);
    private static MemberInfo[] GetDefaultMembers(Type typ, IReflect objIReflect, String& DefaultName);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateIndexSetComplex(object o, Object[] args, String[] paramnames, bool OptimisticSet, bool RValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateIndexSet(object o, Object[] args, String[] paramnames);
    private static BindingFlags GetPropertyPutFlags(object NewValue);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateCall(object o, Type objType, string name, Object[] args, String[] paramnames, Boolean[] CopyBack);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static object InternalLateCall(object o, Type objType, string name, Object[] args, String[] paramnames, Boolean[] CopyBack, bool IgnoreReturn);
    private static bool NoByrefs(ParameterInfo[] parameters);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
private static object FastCall(object o, MethodBase method, ParameterInfo[] Parameters, Object[] args, Type objType, IReflect objIReflect);
    private static MemberInfo[] GetMembersByName(IReflect objIReflect, string name, BindingFlags flags);
    private static bool MemberIsField(MemberInfo[] mi);
    internal static bool DoesTargetObjectMatch(object Value, MemberInfo Member);
    internal static object InvokeMemberOnIReflect(IReflect objIReflect, MemberInfo member, BindingFlags flags, object target, Object[] args);
    private static IReflect GetCorrectIReflect(object o, Type objType);
    internal static void VerifyObjRefPresentForInstanceCall(object Value, MemberInfo Member);
    internal static MemberInfo[] GetNonGenericMembers(MemberInfo[] Members);
    internal static bool LegacyIsGeneric(MemberInfo Member);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LikeOperator : object {
    private static String[] LigatureExpansions;
    private static Byte[] LigatureMap;
    private static LikeOperator();
    private static byte LigatureIndex(char ch);
    private static int CanCharExpand(char ch, Byte[] LocaleSpecificLigatureTable, CompareInfo Comparer, CompareOptions Options);
    private static string GetCharExpansion(char ch, Byte[] LocaleSpecificLigatureTable, CompareInfo Comparer, CompareOptions Options);
    private static void ExpandString(String& Input, Int32& Length, LigatureInfo[]& InputLigatureInfo, Byte[] LocaleSpecificLigatureTable, CompareInfo Comparer, CompareOptions Options, Boolean& WidthChanged, bool UseFullWidth);
    [RequiresUnreferencedCodeAttribute("The types of source and pattern cannot be statically analyzed so the like operator may be trimmed")]
public static object LikeObject(object Source, object Pattern, CompareMethod CompareOption);
    public static bool LikeString(string Source, string Pattern, CompareMethod CompareOption);
    private static void SkipToEndOfExpandedChar(LigatureInfo[] InputLigatureInfo, int Length, Int32& Current);
    private static int CompareChars(string Left, int LeftLength, int LeftStart, Int32& LeftEnd, LigatureInfo[] LeftLigatureInfo, string Right, int RightLength, int RightStart, Int32& RightEnd, LigatureInfo[] RightLigatureInfo, CompareInfo Comparer, CompareOptions Options, bool MatchBothCharsOfExpandedCharInRight, bool UseUnexpandedCharForRight);
    private static int CompareChars(string Left, string Right, CompareInfo Comparer, CompareOptions Options);
    private static int CompareChars(char Left, char Right, CompareInfo Comparer, CompareOptions Options);
    private static void MatchRange(string Source, int SourceLength, Int32& SourceIndex, LigatureInfo[] SourceLigatureInfo, string Pattern, int PatternLength, Int32& PatternIndex, LigatureInfo[] PatternLigatureInfo, Boolean& RangePatternEmpty, Boolean& Mismatch, Boolean& PatternError, CompareInfo Comparer, CompareOptions Options, Boolean& SeenNot, List`1<Range> RangeList, bool ValidatePatternWithoutMatching);
    private static bool ValidateRangePattern(string Pattern, int PatternLength, Int32& PatternIndex, LigatureInfo[] PatternLigatureInfo, CompareInfo Comparer, CompareOptions Options, Boolean& SeenNot, List`1& RangeList);
    private static void BuildPatternGroups(string Source, int SourceLength, Int32& SourceIndex, LigatureInfo[] SourceLigatureInfo, string Pattern, int PatternLength, Int32& PatternIndex, LigatureInfo[] PatternLigatureInfo, Boolean& PatternError, Int32& PGIndexForLastAsterisk, CompareInfo Comparer, CompareOptions Options, PatternGroup[]& PatternGroups);
    private static void MatchAsterisk(string Source, int SourceLength, int SourceIndex, LigatureInfo[] SourceLigatureInfo, string Pattern, int PatternLength, int PatternIndex, LigatureInfo[] PattternLigatureInfo, Boolean& Mismatch, Boolean& PatternError, CompareInfo Comparer, CompareOptions Options);
    private static void MatchAsterisk(string Source, int SourceLength, int SourceIndex, LigatureInfo[] SourceLigatureInfo, string Pattern, LigatureInfo[] PatternLigatureInfo, PatternGroup[] PatternGroups, int PGIndex, Boolean& Mismatch, Boolean& PatternError, CompareInfo Comparer, CompareOptions Options);
    private static bool MatchRangeAfterAsterisk(string Source, int SourceLength, Int32& SourceIndex, LigatureInfo[] SourceLigatureInfo, string Pattern, LigatureInfo[] PatternLigatureInfo, PatternGroup PG, CompareInfo Comparer, CompareOptions Options);
    private static void SubtractChars(string Input, int InputLength, Int32& Current, int CharsToSubtract, LigatureInfo[] InputLigatureInfo, CompareOptions Options);
    private static void SubtractOneCharInTextCompareMode(string Input, int InputLength, Int32& Current, LigatureInfo[] InputLigatureInfo, CompareOptions Options);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LongType : object {
    public static long FromString(string Value);
    public static long FromObject(object Value);
    private static long DecimalToLong(IConvertible ValueInterface);
}
[ComVisibleAttribute("False")]
internal class Microsoft.VisualBasic.CompilerServices.NativeMethods : object {
    internal static int GetVolumeInformation(string lpRootPathName, StringBuilder lpVolumeNameBuffer, int nVolumeNameSize, Int32& lpVolumeSerialNumber, Int32& lpMaximumComponentLength, Int32& lpFileSystemFlags, IntPtr lpFileSystemNameBuffer, int nFileSystemNameSize);
    internal static int SHFileOperation(SHFILEOPSTRUCT& lpFileOp);
    private static int SHFileOperation32(SHFILEOPSTRUCT& lpFileOp);
    private static int SHFileOperation64(SHFILEOPSTRUCT64& lpFileOp);
    internal static void SHChangeNotify(UInt32 wEventId, UInt32 uFlags, IntPtr dwItem1, IntPtr dwItem2);
    internal static bool MoveFileEx(string lpExistingFileName, string lpNewFileName, int dwFlags);
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.NativeTypes : object {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.NewLateBinding : object {
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateCall(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack, bool IgnoreReturn);
    [ObsoleteAttribute("FallbackCall has been deprecated and is not supported.", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object FallbackCall(object Instance, string MemberName, Object[] Arguments, String[] ArgumentNames, bool IgnoreReturn);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
private static object ObjectLateCall(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments, Boolean[] copyBack, bool ignoreReturn);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static bool CanBindCall(object instance, string memberName, Object[] arguments, String[] argumentNames, bool ignoreReturn);
    [EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateCallInvokeDefault(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateGetInvokeDefault(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
private static object InternalLateInvokeDefault(object instance, Object[] arguments, String[] argumentNames, bool reportErrors, Boolean[] copyBack);
    [ObsoleteAttribute("FallbackInvokeDefault1 has been deprecated and is not supported.", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object FallbackInvokeDefault1(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [ObsoleteAttribute("FallbackInvokeDefault2 has been deprecated and is not supported.", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object FallbackInvokeDefault2(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
private static object ObjectLateInvokeDefault(object instance, Object[] arguments, String[] argumentNames, bool reportErrors, Boolean[] copyBack);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateIndexGet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
private static object LateIndexGet(object instance, Object[] arguments, String[] argumentNames, Boolean[] copyBack);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
private static object InternalLateIndexGet(object instance, Object[] arguments, String[] argumentNames, bool reportErrors, ResolutionFailure& failure, Boolean[] copyBack);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static bool CanBindInvokeDefault(object instance, Object[] arguments, String[] argumentNames, bool reportErrors);
    internal static void ResetCopyback(Boolean[] copyBack);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object LateGet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack);
    [ObsoleteAttribute("FallbackGet has been deprecated and is not supported.", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static object FallbackGet(object Instance, string MemberName, Object[] Arguments, String[] ArgumentNames);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
private static object ObjectLateGet(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments, Boolean[] copyBack);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static bool CanBindGet(object instance, string memberName, Object[] arguments, String[] argumentNames);
    internal static bool IsZeroArgumentCall(MemberInfo member);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateIndexSetComplex(object Instance, Object[] Arguments, String[] ArgumentNames, bool OptimisticSet, bool RValueBase);
    [ObsoleteAttribute("FallbackIndexSetComplex has been deprecated and is not supported.", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void FallbackIndexSetComplex(object Instance, Object[] Arguments, String[] ArgumentNames, bool OptimisticSet, bool RValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static void ObjectLateIndexSetComplex(object instance, Object[] arguments, String[] argumentNames, bool optimisticSet, bool rValueBase);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static bool CanIndexSetComplex(object instance, Object[] arguments, String[] argumentNames, bool optimisticSet, bool rValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateIndexSet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [ObsoleteAttribute("FallbackIndexSet has been deprecated and is not supported.", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void FallbackIndexSet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
private static void ObjectLateIndexSet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateSetComplex(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, bool OptimisticSet, bool RValueBase);
    [ObsoleteAttribute("FallbackSetComplex has been deprecated and is not supported.", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void FallbackSetComplex(object Instance, string MemberName, Object[] Arguments, bool OptimisticSet, bool RValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static void ObjectLateSetComplex(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments, bool optimisticSet, bool rValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateSet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments);
    [ObsoleteAttribute("FallbackSet has been deprecated and is not supported.", "True")]
[EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void FallbackSet(object Instance, string MemberName, Object[] Arguments);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static void ObjectLateSet(object instance, Type type, string memberName, Object[] arguments, String[] argumentNames, Type[] typeArguments);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
public static void LateSet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, bool OptimisticSet, bool RValueBase, CallType CallType);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static bool CanBindSet(object instance, string memberName, object value, bool optimisticSet, bool rValueBase);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
private static object CallMethod(Container baseReference, string methodName, Object[] arguments, String[] argumentNames, Type[] typeArguments, Boolean[] copyBack, BindingFlags invocationFlags, bool reportErrors, ResolutionFailure& failure);
    internal static MethodInfo MatchesPropertyRequirements(Method targetProcedure, BindingFlags flags);
    internal static Exception ReportPropertyMismatch(Method targetProcedure, BindingFlags flags);
    private static bool HasIsExternalInitModifier(MethodInfo method);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static Method ResolveCall(Container baseReference, string methodName, MemberInfo[] members, Object[] arguments, String[] argumentNames, Type[] typeArguments, BindingFlags lookupFlags, bool reportErrors, ResolutionFailure& failure);
    internal static MethodBase GetCallTarget(Method targetProcedure, BindingFlags flags);
    [RequiresUnreferencedCodeAttribute("Late binding is dynamic and cannot be statically analyzed. The referenced types and members may be trimmed")]
internal static Object[] ConstructCallArguments(Method targetProcedure, Object[] arguments, BindingFlags lookupFlags);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ObjectFlowControl : object {
    public static void CheckForSyncLockOnValueType(object Expression);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ObjectType : object {
    private static VType[0...,0...] WiderType;
    private static CC[0...,0...] ConversionClassTable;
    private static ObjectType();
    private static VType VTypeFromTypeCode(TypeCode typ);
    private static VType2 VType2FromTypeCode(TypeCode typ);
    private static TypeCode TypeCodeFromVType(VType vartyp);
    internal static Type TypeFromTypeCode(TypeCode vartyp);
    internal static bool IsWiderNumeric(Type Type1, Type Type2);
    internal static bool IsWideningConversion(Type FromType, Type ToType);
    internal static TypeCode GetWidestType(object obj1, object obj2, bool IsAdd);
    public static int ObjTst(object o1, object o2, bool TextCompare);
    private static int ObjTstDateTime(DateTime var1, DateTime var2);
    private static int ObjTstBoolean(bool b1, bool b2);
    private static int ObjTstDouble(double d1, double d2);
    private static int ObjTstChar(char ch1, char ch2);
    private static int ObjTstByte(byte by1, byte by2);
    private static int ObjTstSingle(float d1, float d2);
    private static int ObjTstInt16(short d1, short d2);
    private static int ObjTstInt32(int d1, int d2);
    private static int ObjTstInt64(long d1, long d2);
    private static int ObjTstDecimal(IConvertible i1, IConvertible i2);
    private static int ObjTstString(IConvertible conv1, TypeCode tc1, IConvertible conv2, TypeCode tc2);
    private static int ObjTstStringString(string s1, string s2, bool TextCompare);
    public static object PlusObj(object obj);
    public static object NegObj(object obj);
    private static object InternalNegObj(object obj, IConvertible conv, TypeCode tc);
    public static object NotObj(object obj);
    public static object BitAndObj(object obj1, object obj2);
    public static object BitOrObj(object obj1, object obj2);
    public static object BitXorObj(object obj1, object obj2);
    public static object AddObj(object o1, object o2);
    private static object AddString(IConvertible conv1, TypeCode tc1, IConvertible conv2, TypeCode tc2);
    private static object AddByte(byte i1, byte i2);
    private static object AddInt16(short i1, short i2);
    private static object AddInt32(int i1, int i2);
    private static object AddInt64(long i1, long i2);
    private static object AddSingle(float f1, float f2);
    private static object AddDouble(double d1, double d2);
    private static object AddDecimal(IConvertible conv1, IConvertible conv2);
    private static int ToVBBool(IConvertible conv);
    private static IConvertible ToVBBoolConv(IConvertible conv);
    public static object SubObj(object o1, object o2);
    private static object SubString(IConvertible conv1, TypeCode tc1, IConvertible conv2, TypeCode tc2);
    private static object SubStringString(string s1, string s2);
    private static object SubByte(byte i1, byte i2);
    private static object SubInt16(short i1, short i2);
    private static object SubInt32(int i1, int i2);
    private static object SubInt64(long i1, long i2);
    private static object SubSingle(float f1, float f2);
    private static object SubDouble(double d1, double d2);
    private static object SubDecimal(IConvertible conv1, IConvertible conv2);
    public static object MulObj(object o1, object o2);
    private static object MulString(IConvertible conv1, TypeCode tc1, IConvertible conv2, TypeCode tc2);
    private static object MulStringString(string s1, string s2);
    private static object MulByte(byte i1, byte i2);
    private static object MulInt16(short i1, short i2);
    private static object MulInt32(int i1, int i2);
    private static object MulInt64(long i1, long i2);
    private static object MulSingle(float f1, float f2);
    private static object MulDouble(double d1, double d2);
    private static object MulDecimal(IConvertible conv1, IConvertible conv2);
    public static object DivObj(object o1, object o2);
    private static object DivString(IConvertible conv1, TypeCode tc1, IConvertible conv2, TypeCode tc2);
    private static object DivStringString(string s1, string s2);
    private static object DivDouble(double d1, double d2);
    private static object DivSingle(float sng1, float sng2);
    private static object DivDecimal(IConvertible conv1, IConvertible conv2);
    public static object PowObj(object obj1, object obj2);
    public static object ModObj(object o1, object o2);
    private static object ModString(IConvertible conv1, TypeCode tc1, IConvertible conv2, TypeCode tc2);
    private static object ModStringString(string s1, string s2);
    private static object ModByte(byte i1, byte i2);
    private static object ModInt16(short i1, short i2);
    private static object ModInt32(int i1, int i2);
    private static object ModInt64(long i1, long i2);
    private static object ModSingle(float sng1, float sng2);
    private static object ModDouble(double d1, double d2);
    private static object ModDecimal(IConvertible conv1, IConvertible conv2);
    public static object IDivObj(object o1, object o2);
    private static object IDivideString(IConvertible conv1, TypeCode tc1, IConvertible conv2, TypeCode tc2);
    private static object IDivideStringString(string s1, string s2);
    private static object IDivideByte(byte d1, byte d2);
    private static object IDivideInt16(short d1, short d2);
    private static object IDivideInt32(int d1, int d2);
    private static object IDivideInt64(long d1, long d2);
    public static object ShiftLeftObj(object o1, int amount);
    public static object ShiftRightObj(object o1, int amount);
    public static object XorObj(object obj1, object obj2);
    public static bool LikeObj(object vLeft, object vRight, CompareMethod CompareOption);
    public static object StrCatObj(object vLeft, object vRight);
    internal static object CTypeHelper(object obj, TypeCode toType);
    internal static object CTypeHelper(object obj, Type toType);
    private static Exception GetNoValidOperatorException(object Operand);
    private static Exception GetNoValidOperatorException(object Left, object Right);
    public static object GetObjectValuePrimitive(object o);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Operators : object {
    internal static object Boxed_ZeroDouble;
    internal static object Boxed_ZeroSinge;
    internal static object Boxed_ZeroDecimal;
    internal static object Boxed_ZeroLong;
    internal static object Boxed_ZeroInteger;
    internal static object Boxed_ZeroShort;
    internal static object Boxed_ZeroULong;
    internal static object Boxed_ZeroUInteger;
    internal static object Boxed_ZeroUShort;
    internal static object Boxed_ZeroSByte;
    internal static object Boxed_ZeroByte;
    private static Operators();
    [RequiresUnreferencedCodeAttribute("Calls CollectOverloadCandidates")]
internal static List`1<Method> CollectOperators(UserDefinedOperator op, Type type1, Type type2, Boolean& foundType1Operators, Boolean& foundType2Operators);
    [RequiresUnreferencedCodeAttribute("Calls ResolveOverloadedCall")]
internal static Method ResolveUserDefinedOperator(UserDefinedOperator op, Object[] arguments, bool reportErrors);
    [RequiresUnreferencedCodeAttribute("Calls Container.InvokeMethod")]
internal static object InvokeUserDefinedOperator(Method operatorMethod, bool forceArgumentValidation, Object[] arguments);
    [RequiresUnreferencedCodeAttribute("Calls Return IDOBinder.InvokeUserDefinedOperator")]
internal static object InvokeUserDefinedOperator(UserDefinedOperator op, Object[] arguments);
    [ObsoleteAttribute("FallbackInvokeUserDefinedOperator has been deprecated and is not supported.", "True")]
[DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
[RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object FallbackInvokeUserDefinedOperator(object vbOp, Object[] arguments);
    [RequiresUnreferencedCodeAttribute("Calls InvokeUserDefinedOperator")]
internal static object InvokeObjectUserDefinedOperator(UserDefinedOperator op, Object[] arguments);
    [RequiresUnreferencedCodeAttribute("Calls CanMatchArguments")]
internal static Method GetCallableUserDefinedOperator(UserDefinedOperator op, Object[] arguments);
    private static sbyte ToVBBool(object conv);
    private static TypeCode GetTypeCode(object o);
    private static Type GetEnumResult(object left, object right);
    private static Exception GetNoValidOperatorException(UserDefinedOperator op, object operand);
    private static Exception GetNoValidOperatorException(UserDefinedOperator op, object left, object right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectNotEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectNotEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectLess(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectLess(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectLessEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectLessEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectGreaterEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectGreaterEqual(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object CompareObjectGreater(object Left, object Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static bool ConditionalCompareObjectGreater(object Left, object Right, bool TextCompare);
    private static CompareClass CompareObject2(object left, object right, bool textCompare);
    private static CompareClass CompareBoolean(bool left, bool right);
    private static CompareClass CompareInt32(int left, int right);
    private static CompareClass CompareUInt32(UInt32 left, UInt32 right);
    private static CompareClass CompareInt64(long left, long right);
    private static CompareClass CompareUInt64(ulong left, ulong right);
    private static CompareClass CompareDecimal(object left, object right);
    private static CompareClass CompareSingle(float left, float right);
    private static CompareClass CompareDouble(double left, double right);
    private static CompareClass CompareDate(DateTime left, DateTime right);
    private static CompareClass CompareChar(char left, char right);
    public static int CompareString(string Left, string Right, bool TextCompare);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object PlusObject(object Operand);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object NegateObject(object Operand);
    private static object NegateBoolean(bool operand);
    private static object NegateSByte(sbyte operand);
    private static object NegateByte(byte operand);
    private static object NegateInt16(short operand);
    private static object NegateUInt16(ushort operand);
    private static object NegateInt32(int operand);
    private static object NegateUInt32(UInt32 operand);
    private static object NegateInt64(long operand);
    private static object NegateUInt64(ulong operand);
    private static object NegateDecimal(decimal operand);
    private static object NegateSingle(float operand);
    private static object NegateDouble(double operand);
    private static object NegateString(string operand);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object NotObject(object Operand);
    private static object NotBoolean(bool operand);
    private static object NotSByte(sbyte operand, Type operandType);
    private static object NotByte(byte operand, Type operandType);
    private static object NotInt16(short operand, Type operandType);
    private static object NotUInt16(ushort operand, Type operandType);
    private static object NotInt32(int operand, Type operandType);
    private static object NotUInt32(UInt32 operand, Type operandType);
    private static object NotInt64(long operand);
    private static object NotInt64(long operand, Type operandType);
    private static object NotUInt64(ulong operand, Type operandType);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object AndObject(object Left, object Right);
    private static object AndBoolean(bool left, bool right);
    private static object AndSByte(sbyte left, sbyte right, Type enumType);
    private static object AndByte(byte left, byte right, Type enumType);
    private static object AndInt16(short left, short right, Type enumType);
    private static object AndUInt16(ushort left, ushort right, Type enumType);
    private static object AndInt32(int left, int right, Type enumType);
    private static object AndUInt32(UInt32 left, UInt32 right, Type enumType);
    private static object AndInt64(long left, long right, Type enumType);
    private static object AndUInt64(ulong left, ulong right, Type enumType);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object OrObject(object Left, object Right);
    private static object OrBoolean(bool left, bool right);
    private static object OrSByte(sbyte left, sbyte right, Type enumType);
    private static object OrByte(byte left, byte right, Type enumType);
    private static object OrInt16(short left, short right, Type enumType);
    private static object OrUInt16(ushort left, ushort right, Type enumType);
    private static object OrInt32(int left, int right, Type enumType);
    private static object OrUInt32(UInt32 left, UInt32 right, Type enumType);
    private static object OrInt64(long left, long right, Type enumType);
    private static object OrUInt64(ulong left, ulong right, Type enumType);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object XorObject(object Left, object Right);
    private static object XorBoolean(bool left, bool right);
    private static object XorSByte(sbyte left, sbyte right, Type enumType);
    private static object XorByte(byte left, byte right, Type enumType);
    private static object XorInt16(short left, short right, Type enumType);
    private static object XorUInt16(ushort left, ushort right, Type enumType);
    private static object XorInt32(int left, int right, Type enumType);
    private static object XorUInt32(UInt32 left, UInt32 right, Type enumType);
    private static object XorInt64(long left, long right, Type enumType);
    private static object XorUInt64(ulong left, ulong right, Type enumType);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object AddObject(object Left, object Right);
    private static object AddByte(byte left, byte right);
    private static object AddSByte(sbyte left, sbyte right);
    private static object AddInt16(short left, short right);
    private static object AddUInt16(ushort left, ushort right);
    private static object AddInt32(int left, int right);
    private static object AddUInt32(UInt32 left, UInt32 right);
    private static object AddInt64(long left, long right);
    private static object AddUInt64(ulong left, ulong right);
    private static object AddDecimal(object left, object right);
    private static object AddSingle(float left, float right);
    private static object AddDouble(double left, double right);
    private static object AddString(string left, string right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object SubtractObject(object Left, object Right);
    private static object SubtractByte(byte left, byte right);
    private static object SubtractSByte(sbyte left, sbyte right);
    private static object SubtractInt16(short left, short right);
    private static object SubtractUInt16(ushort left, ushort right);
    private static object SubtractInt32(int left, int right);
    private static object SubtractUInt32(UInt32 left, UInt32 right);
    private static object SubtractInt64(long left, long right);
    private static object SubtractUInt64(ulong left, ulong right);
    private static object SubtractDecimal(object left, object right);
    private static object SubtractSingle(float left, float right);
    private static object SubtractDouble(double left, double right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object MultiplyObject(object Left, object Right);
    private static object MultiplyByte(byte left, byte right);
    private static object MultiplySByte(sbyte left, sbyte right);
    private static object MultiplyInt16(short left, short right);
    private static object MultiplyUInt16(ushort left, ushort right);
    private static object MultiplyInt32(int left, int right);
    private static object MultiplyUInt32(UInt32 left, UInt32 right);
    private static object MultiplyInt64(long left, long right);
    private static object MultiplyUInt64(ulong left, ulong right);
    private static object MultiplyDecimal(object left, object right);
    private static object MultiplySingle(float left, float right);
    private static object MultiplyDouble(double left, double right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object DivideObject(object Left, object Right);
    private static object DivideDecimal(object left, object right);
    private static object DivideSingle(float left, float right);
    private static object DivideDouble(double left, double right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object ExponentObject(object Left, object Right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object ModObject(object Left, object Right);
    private static object ModSByte(sbyte left, sbyte right);
    private static object ModByte(byte left, byte right);
    private static object ModInt16(short left, short right);
    private static object ModUInt16(ushort left, ushort right);
    private static object ModInt32(int left, int right);
    private static object ModUInt32(UInt32 left, UInt32 right);
    private static object ModInt64(long left, long right);
    private static object ModUInt64(ulong left, ulong right);
    private static object ModDecimal(object left, object right);
    private static object ModSingle(float left, float right);
    private static object ModDouble(double left, double right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object IntDivideObject(object Left, object Right);
    private static object IntDivideSByte(sbyte left, sbyte right);
    private static object IntDivideByte(byte left, byte right);
    private static object IntDivideInt16(short left, short right);
    private static object IntDivideUInt16(ushort left, ushort right);
    private static object IntDivideInt32(int left, int right);
    private static object IntDivideUInt32(UInt32 left, UInt32 right);
    private static object IntDivideInt64(long left, long right);
    private static object IntDivideUInt64(ulong left, ulong right);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object LeftShiftObject(object Operand, object Amount);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object RightShiftObject(object Operand, object Amount);
    [RequiresUnreferencedCodeAttribute("The object types cannot be statically analyzed so their operators may be trimmed")]
public static object ConcatenateObject(object Left, object Right);
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.OptionTextAttribute : Attribute {
}
internal class Microsoft.VisualBasic.CompilerServices.OverloadResolution : object {
    private static bool IsExactSignatureMatch(ParameterInfo[] leftSignature, int leftTypeParameterCount, ParameterInfo[] rightSignature, int rightTypeParameterCount);
    private static void CompareNumericTypeSpecificity(Type leftType, Type rightType, Boolean& leftWins, Boolean& rightWins);
    [RequiresUnreferencedCodeAttribute("ClassifyConversion")]
private static void CompareParameterSpecificity(Type argumentType, ParameterInfo leftParameter, MethodBase leftProcedure, bool expandLeftParamArray, ParameterInfo rightParameter, MethodBase rightProcedure, bool expandRightParamArray, Boolean& leftWins, Boolean& rightWins, Boolean& bothLose);
    private static void CompareGenericityBasedOnMethodGenericParams(ParameterInfo leftParameter, ParameterInfo rawLeftParameter, Method leftMember, bool expandLeftParamArray, ParameterInfo rightParameter, ParameterInfo rawRightParameter, Method rightMember, bool expandRightParamArray, Boolean& leftIsLessGeneric, Boolean& rightIsLessGeneric, Boolean& signatureMismatch);
    private static void CompareGenericityBasedOnTypeGenericParams(ParameterInfo leftParameter, ParameterInfo rawLeftParameter, Method leftMember, bool expandLeftParamArray, ParameterInfo rightParameter, ParameterInfo rawRightParameter, Method rightMember, bool expandRightParamArray, Boolean& leftIsLessGeneric, Boolean& rightIsLessGeneric, Boolean& signatureMismatch);
    private static Method LeastGenericProcedure(Method left, Method right, ComparisonType compareGenericity, Boolean& signatureMismatch);
    internal static Method LeastGenericProcedure(Method left, Method right);
    [RequiresUnreferencedCodeAttribute("Calls RejectUncallableProcedure")]
private static void InsertIfMethodAvailable(MemberInfo newCandidate, ParameterInfo[] newCandidateSignature, int newCandidateParamArrayIndex, bool expandNewCandidateParamArray, Object[] arguments, int argumentCount, String[] argumentNames, Type[] typeArguments, bool collectOnlyOperators, List`1<Method> candidates, Container baseReference);
    [RequiresUnreferencedCodeAttribute("Calls InsertIfMethodAvailable")]
internal static List`1<Method> CollectOverloadCandidates(MemberInfo[] members, Object[] arguments, int argumentCount, String[] argumentNames, Type[] typeArguments, bool collectOnlyOperators, Type terminatingScope, Int32& rejectedForArgumentCount, Int32& rejectedForTypeArgumentCount, Container baseReference);
    [RequiresUnreferencedCodeAttribute("Calls ClassifyConversion")]
private static bool CanConvert(Type targetType, Type sourceType, bool rejectNarrowingConversion, List`1<string> errors, string parameterName, bool isByRefCopyBackContext, Boolean& requiresNarrowingConversion, Boolean& allNarrowingIsFromObject);
    [RequiresUnreferencedCodeAttribute("Calls GetInterfaces on argument type recursively")]
private static bool InferTypeArgumentsFromArgument(Type argumentType, Type parameterType, Type[] typeInferenceArguments, MethodBase targetProcedure, bool digThroughToBasesAndImplements);
    [RequiresUnreferencedCodeAttribute("Calls InferTypeArgumentsFromArgument")]
private static bool InferTypeArgumentsFromArgumentDirectly(Type argumentType, Type parameterType, Type[] typeInferenceArguments, MethodBase targetProcedure, bool digThroughToBasesAndImplements);
    [RequiresUnreferencedCodeAttribute("Calls ClassifyConversion")]
private static bool CanPassToParamArray(Method targetProcedure, object argument, ParameterInfo parameter);
    [RequiresUnreferencedCodeAttribute("Calls CanConvert")]
internal static bool CanPassToParameter(Method targetProcedure, object argument, ParameterInfo parameter, bool isExpandedParamArray, bool rejectNarrowingConversions, List`1<string> errors, Boolean& requiresNarrowingConversion, Boolean& allNarrowingIsFromObject);
    [RequiresUnreferencedCodeAttribute("Calls InferTypArgumentsFromArgument")]
internal static bool InferTypeArgumentsFromArgument(Method targetProcedure, object argument, ParameterInfo parameter, bool isExpandedParamArray, List`1<string> errors);
    [RequiresUnreferencedCodeAttribute("Uses Type.GetElementType which cannot be statically analyzed.")]
internal static object PassToParameter(object argument, ParameterInfo parameter, Type parameterType);
    private static bool FindParameterByName(ParameterInfo[] parameters, string name, Int32& index);
    private static Boolean[] CreateMatchTable(int size, int lastPositionalMatchIndex);
    [RequiresUnreferencedCodeAttribute("Calls InstantiateGenericMethod")]
internal static bool CanMatchArguments(Method targetProcedure, Object[] arguments, String[] argumentNames, Type[] typeArguments, bool rejectNarrowingConversions, List`1<string> errors);
    [RequiresUnreferencedCodeAttribute("Calls Method.BindGenericArguments")]
private static bool InstantiateGenericMethod(Method targetProcedure, Type[] typeArguments, List`1<string> errors);
    [RequiresUnreferencedCodeAttribute("Cannot statically analyze the parameter types of the targetProcedure")]
internal static void MatchArguments(Method targetProcedure, Object[] arguments, Object[] matchedArguments);
    [RequiresUnreferencedCodeAttribute("Calls InferTypeArgumentsFromArgument")]
private static bool InferTypeArguments(Method targetProcedure, Object[] arguments, String[] argumentNames, Type[] typeArguments, List`1<string> errors);
    internal static void ReorderArgumentArray(Method targetProcedure, Object[] parameterResults, Object[] arguments, Boolean[] copyBack, BindingFlags lookupFlags);
    [RequiresUnreferencedCodeAttribute("Calls RejectUncallableProcedure")]
private static Method RejectUncallableProcedures(List`1<Method> candidates, Object[] arguments, String[] argumentNames, Type[] typeArguments, Int32& candidateCount, Boolean& someCandidatesAreGeneric);
    [RequiresUnreferencedCodeAttribute("Calls CanMatchArguments")]
private static void RejectUncallableProcedure(Method candidate, Object[] arguments, String[] argumentNames, Type[] typeArguments);
    private static Type GetArgumentType(object argument);
    [RequiresUnreferencedCodeAttribute("Calls Method.RawParametersFromType")]
private static Method MoreSpecificProcedure(Method left, Method right, Object[] arguments, String[] argumentNames, ComparisonType compareGenericity, Boolean& bothLose, bool continueWhenBothLose);
    [RequiresUnreferencedCodeAttribute("Calls MoreSpecificProcedure")]
private static Method MostSpecificProcedure(List`1<Method> candidates, Int32& candidateCount, Object[] arguments, String[] argumentNames);
    [RequiresUnreferencedCodeAttribute("Calls MoreSpecificProcedure")]
private static Method RemoveRedundantGenericProcedures(List`1<Method> candidates, Int32& candidateCount, Object[] arguments, String[] argumentNames);
    private static void ReportError(List`1<string> errors, string resourceID, string substitution1, Type substitution2, Type substitution3);
    private static void ReportError(List`1<string> errors, string resourceID, string substitution1, Method substitution2);
    private static void ReportError(List`1<string> errors, string resourceID, string substitution1);
    private static void ReportError(List`1<string> errors, string resourceID);
    private static Exception ReportOverloadResolutionFailure(string overloadedProcedureName, List`1<Method> candidates, Object[] arguments, String[] argumentNames, Type[] typeArguments, string errorID, ResolutionFailure failure, ArgumentDetector detector, CandidateProperty candidateFilter);
    [RequiresUnreferencedCodeAttribute("Calls CanMatchArguments")]
private static bool DetectArgumentErrors(Method targetProcedure, Object[] arguments, String[] argumentNames, Type[] typeArguments, List`1<string> errors);
    private static bool CandidateIsNotCallable(Method candidate);
    [RequiresUnreferencedCodeAttribute("Calls ReportOverloadResolutionFailure")]
private static Exception ReportUncallableProcedures(string overloadedProcedureName, List`1<Method> candidates, Object[] arguments, String[] argumentNames, Type[] typeArguments, ResolutionFailure failure);
    [RequiresUnreferencedCodeAttribute("Calls CanMatchArguments")]
private static bool DetectArgumentNarrowing(Method targetProcedure, Object[] arguments, String[] argumentNames, Type[] typeArguments, List`1<string> errors);
    private static bool CandidateIsNarrowing(Method candidate);
    [RequiresUnreferencedCodeAttribute("Calls ReportOverloadResolutionFailure")]
private static Exception ReportNarrowingProcedures(string overloadedProcedureName, List`1<Method> candidates, Object[] arguments, String[] argumentNames, Type[] typeArguments, ResolutionFailure failure);
    private static bool DetectUnspecificity(Method targetProcedure, Object[] arguments, String[] argumentNames, Type[] typeArguments, List`1<string> errors);
    private static bool CandidateIsUnspecific(Method candidate);
    private static Exception ReportUnspecificProcedures(string overloadedProcedureName, List`1<Method> candidates, ResolutionFailure failure);
    [RequiresUnreferencedCodeAttribute("Calls MostSpecificProcedure and RemoveRedundantGenericProcedures")]
internal static Method ResolveOverloadedCall(string methodName, List`1<Method> candidates, Object[] arguments, String[] argumentNames, Type[] typeArguments, BindingFlags lookupFlags, bool reportErrors, ResolutionFailure& failure);
    [RequiresUnreferencedCodeAttribute("Calls ResolveOverloadedCall")]
internal static Method ResolveOverloadedCall(string methodName, MemberInfo[] members, Object[] arguments, String[] argumentNames, Type[] typeArguments, BindingFlags lookupFlags, bool reportErrors, ResolutionFailure& failure, Container baseReference);
}
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ProjectData : object {
    internal ErrObject m_Err;
    internal int m_rndSeed;
    internal Byte[] m_numprsPtr;
    internal Byte[] m_DigitArray;
    [ThreadStaticAttribute]
private static ProjectData m_oProject;
    internal Hashtable m_AssemblyData;
    private Assembly m_CachedMSCoreLibAssembly;
    internal AssemblyData GetAssemblyData(Assembly assem);
    internal static ProjectData GetProjectData();
    public static Exception CreateProjectError(int hr);
    public static void SetProjectError(Exception ex);
    public static void SetProjectError(Exception ex, int lErl);
    public static void ClearProjectError();
    public static void EndApp();
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.PutHandler : object {
    public VB6File m_oFile;
    [RequiresUnreferencedCodeAttribute("This implementation of IRecordEnum is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public PutHandler(VB6File oFile);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public sealed virtual override bool Callback(FieldInfo field_info, Object& vValue);
}
[ExtensionAttribute]
[StandardModuleAttribute]
internal class Microsoft.VisualBasic.CompilerServices.ReflectionExtensions : object {
    [ExtensionAttribute]
public static TypeCode GetTypeCode(Type type);
}
[EditorBrowsableAttribute("1")]
[ComVisibleAttribute("False")]
internal class Microsoft.VisualBasic.CompilerServices.SafeNativeMethods : object {
    internal static void GetLocalTime(SystemTime systime);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ShortType : object {
    public static short FromString(string Value);
    public static short FromObject(object Value);
    private static short DecimalToShort(IConvertible ValueInterface);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.SingleType : object {
    public static float FromString(string Value);
    public static float FromString(string Value, NumberFormatInfo NumberFormat);
    public static float FromObject(object Value);
    public static float FromObject(object Value, NumberFormatInfo NumberFormat);
    private static float DecimalToSingle(IConvertible ValueInterface);
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute : Attribute {
}
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag : object {
    public short State;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StringType : object {
    public static string FromBoolean(bool Value);
    public static string FromByte(byte Value);
    public static string FromChar(char Value);
    public static string FromShort(short Value);
    public static string FromInteger(int Value);
    public static string FromLong(long Value);
    public static string FromSingle(float Value);
    public static string FromDouble(double Value);
    public static string FromSingle(float Value, NumberFormatInfo NumberFormat);
    public static string FromDouble(double Value, NumberFormatInfo NumberFormat);
    public static string FromDate(DateTime Value);
    public static string FromDecimal(decimal Value);
    public static string FromDecimal(decimal Value, NumberFormatInfo NumberFormat);
    public static string FromObject(object Value);
    public static int StrCmp(string sLeft, string sRight, bool TextCompare);
    public static bool StrLike(string Source, string Pattern, CompareMethod CompareOption);
    public static bool StrLikeBinary(string Source, string Pattern);
    public static bool StrLikeText(string Source, string Pattern);
    private static bool StrLikeCompareBinary(bool SeenNot, bool Match, char p, char s);
    private static bool StrLikeCompare(CompareInfo ci, bool SeenNot, bool Match, char p, char s, CompareOptions Options);
    private static int AsteriskSkip(string Pattern, string Source, int SourceEndIndex, CompareMethod CompareOption, CompareInfo ci);
    private static int MultipleAsteriskSkip(string Pattern, string Source, int Count, CompareMethod CompareOption);
    public static void MidStmtStr(String& sDest, int StartPosition, int MaxInsertLength, string sInsert);
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.StructUtils : object {
    [RequiresUnreferencedCodeAttribute("Calls Object.GetType which cannot be statically analyzed.")]
internal static object EnumerateUDT(ValueType oStruct, IRecordEnum intfRecEnum, bool fGet);
    [RequiresUnreferencedCodeAttribute("Calls EnumerateUDT which is unsafe.")]
internal static int GetRecordLength(object o, int PackSize);
}
internal class Microsoft.VisualBasic.CompilerServices.Symbols : object {
    internal static Object[] NoArguments;
    internal static String[] NoArgumentNames;
    internal static Type[] NoTypeArguments;
    internal static Type[] NoTypeParameters;
    internal static String[] OperatorCLSNames;
    internal static String[] OperatorNames;
    private static Symbols();
    internal static bool IsUnaryOperator(UserDefinedOperator op);
    internal static bool IsBinaryOperator(UserDefinedOperator op);
    internal static bool IsUserDefinedOperator(MethodBase method);
    internal static bool IsNarrowingConversionOperator(MethodBase method);
    internal static UserDefinedOperator MapToUserDefinedOperator(MethodBase method);
    internal static TypeCode GetTypeCode(Type type);
    internal static Type MapTypeCodeToType(TypeCode typeCode);
    internal static bool IsRootObjectType(Type type);
    internal static bool IsRootEnumType(Type type);
    internal static bool IsValueType(Type type);
    internal static bool IsEnum(Type type);
    internal static bool IsArrayType(Type type);
    internal static bool IsStringType(Type type);
    internal static bool IsCharArrayRankOne(Type type);
    internal static bool IsIntegralType(TypeCode typeCode);
    internal static bool IsNumericType(TypeCode typeCode);
    internal static bool IsNumericType(Type type);
    internal static bool IsIntrinsicType(TypeCode typeCode);
    internal static bool IsIntrinsicType(Type type);
    internal static bool IsClass(Type type);
    internal static bool IsClassOrValueType(Type type);
    internal static bool IsInterface(Type type);
    internal static bool IsClassOrInterface(Type type);
    internal static bool IsReferenceType(Type type);
    internal static bool IsGenericParameter(Type type);
    internal static bool IsCollectionInterface(Type type);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2070:UnrecognizedReflectionPattern")]
internal static bool Implements(Type implementor, Type interface);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2070:UnrecognizedReflectionPattern")]
internal static bool IsOrInheritsFrom(Type derived, Type base);
    internal static bool IsGeneric(Type type);
    internal static bool IsInstantiatedGeneric(Type type);
    internal static bool IsGeneric(MethodBase method);
    internal static bool IsGeneric(MemberInfo member);
    internal static bool IsRawGeneric(MethodBase method);
    internal static Type[] GetTypeParameters(MemberInfo member);
    internal static Type[] GetTypeArguments(Type type);
    internal static Type[] GetInterfaceConstraints(Type genericParameter);
    internal static Type GetClassConstraint(Type genericParameter);
    internal static int IndexIn(Type possibleGenericParameter, MethodBase genericMethodDef);
    internal static bool RefersToGenericParameter(Type referringType, MethodBase method);
    internal static bool RefersToGenericParameterCLRSemantics(Type referringType, Type typ);
    internal static bool AreGenericMethodDefsEqual(MethodBase method1, MethodBase method2);
    internal static bool IsShadows(MethodBase method);
    internal static bool IsShared(MemberInfo member);
    internal static bool IsParamArray(ParameterInfo parameter);
    internal static Type GetElementType(Type type);
    internal static bool AreParametersAndReturnTypesValid(ParameterInfo[] parameters, Type returnType);
    internal static void GetAllParameterCounts(ParameterInfo[] parameters, Int32& requiredParameterCount, Int32& maximumParameterCount, Int32& paramArrayIndex);
    internal static bool IsNonPublicRuntimeMember(MemberInfo member);
    internal static bool HasFlag(BindingFlags flags, BindingFlags flagToTest);
}
[ComVisibleAttribute("False")]
internal class Microsoft.VisualBasic.CompilerServices.UnsafeNativeMethods : object {
    internal static int LCMapStringA(int Locale, int dwMapFlags, Byte[] lpSrcStr, int cchSrc, Byte[] lpDestStr, int cchDest);
    internal static int LCMapString(int Locale, int dwMapFlags, String& lpSrcStr, int cchSrc, String& lpDestStr, int cchDest);
    internal static int VarParseNumFromStr(string str, int lcid, int dwFlags, Byte[] numprsPtr, Byte[] digits);
    [RequiresUnreferencedCodeAttribute("Marshalling COM Objects is not trim safe.")]
internal static object VarNumFromParseNum(Byte[] numprsPtr, Byte[] DigitArray, int dwVtBits);
    [RequiresUnreferencedCodeAttribute("Marshalling COM Objects is not trim safe.")]
internal static void VariantChangeType(Object& dest, Object& Src, short wFlags, short vt);
    internal static int MessageBeep(int uType);
    internal static int SetLocalTime(SystemTime systime);
    internal static int MoveFile(string lpExistingFileName, string lpNewFileName);
    internal static int GetLogicalDrives();
}
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Utils : object {
    internal static Char[] m_achIntlSpace;
    private static Type s_voidType;
    private static Assembly s_VBRuntimeAssembly;
    internal static Assembly VBRuntimeAssembly { get; }
    private static Utils();
    private static string GetFallbackMessage(string name, Object[] args);
    internal static string GetResourceString(vbErrors ResourceId);
    [EditorBrowsableAttribute("1")]
internal static string GetResourceString(string ResourceKey);
    public static string GetResourceString(string ResourceKey, String[] Args);
    internal static string StdFormat(string s);
    internal static string OctFromLong(long Val);
    internal static string OctFromULong(ulong Val);
    internal static CultureInfo GetCultureInfo();
    internal static CultureInfo GetInvariantCultureInfo();
    internal static Assembly get_VBRuntimeAssembly();
    internal static string ToHalfwidthNumbers(string s, CultureInfo culture);
    internal static bool IsHexOrOctValue(string value, Int64& i64Value);
    internal static bool IsHexOrOctValue(string value, UInt64& ui64Value);
    internal static string VBFriendlyName(object obj);
    internal static string VBFriendlyName(Type typ);
    internal static string VBFriendlyName(Type typ, object o);
    internal static string VBFriendlyNameOfType(Type typ, bool fullName);
    private static string GetArraySuffixAndElementType(Type& typ);
    private static string GetGenericArgsSuffix(Type typ);
    internal static string ParameterToString(ParameterInfo parameter);
    internal static string MethodToString(MethodBase method);
    internal static string PropertyToString(PropertyInfo prop);
    internal static string AdjustArraySuffix(string sRank);
    internal static string MemberToString(MemberInfo member);
    internal static string FieldToString(FieldInfo field);
    [DebuggerHiddenAttribute]
internal static void SetTime(DateTime dtTime);
    [DebuggerHiddenAttribute]
internal static void SetDate(DateTime vDate);
    internal static DateTimeFormatInfo GetDateTimeFormatInfo();
    internal static Encoding GetFileIOEncoding();
    internal static int GetLocaleCodePage();
    public static Array CopyArray(Array arySrc, Array aryDest);
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.VB6BinaryFile : VB6RandomFile {
    public VB6BinaryFile(string FileName, OpenAccess access, OpenShare share);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
internal virtual void Lock(long lStart, long lEnd);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
internal virtual void Unlock(long lStart, long lEnd);
    public virtual OpenMode GetMode();
    internal virtual long Seek();
    internal virtual void Seek(long BaseOnePosition);
    internal virtual long LOC();
    internal virtual bool CanInput();
    [RequiresUnreferencedCodeAttribute("Implementation of Vb6InputFile is unsafe.")]
internal virtual void Input(Object& Value);
    internal virtual void Input(String& Value);
    internal virtual void Input(Char& Value);
    internal virtual void Input(Boolean& Value);
    internal virtual void Input(Byte& Value);
    internal virtual void Input(Int16& Value);
    internal virtual void Input(Int32& Value);
    internal virtual void Input(Int64& Value);
    internal virtual void Input(Single& Value);
    internal virtual void Input(Double& Value);
    internal virtual void Input(Decimal& Value);
    internal virtual void Input(DateTime& Value);
    internal virtual void Put(string Value, long RecordNumber, bool StringIsFixedLength);
    internal virtual void Get(String& Value, long RecordNumber, bool StringIsFixedLength);
    protected virtual string InputStr();
}
[EditorBrowsableAttribute("1")]
internal abstract class Microsoft.VisualBasic.CompilerServices.VB6File : object {
    internal int m_lCurrentColumn;
    internal int m_lWidth;
    internal int m_lRecordLen;
    internal long m_lRecordStart;
    internal string m_sFullPath;
    internal OpenShare m_share;
    internal OpenAccess m_access;
    internal bool m_eof;
    internal long m_position;
    internal FileStream m_file;
    internal bool m_fAppend;
    internal bool m_bPrint;
    protected StreamWriter m_sw;
    protected StreamReader m_sr;
    protected BinaryWriter m_bw;
    protected BinaryReader m_br;
    protected Encoding m_Encoding;
    protected VB6File(string sPath, OpenAccess access, OpenShare share, int lRecordLen);
    internal string GetAbsolutePath();
    internal virtual void OpenFile();
    internal virtual void CloseFile();
    protected void CloseTheFile();
    internal int GetColumn();
    internal void SetColumn(int lColumn);
    internal int GetWidth();
    internal void SetWidth(int RecordWidth);
    internal virtual void WriteLine(string s);
    internal virtual void WriteString(string s);
    internal virtual bool EOF();
    internal long LOF();
    internal virtual long LOC();
    internal void SetRecord(long RecordNumber);
    internal virtual void Seek(long BaseOnePosition);
    internal virtual long Seek();
    internal void SeekOffset(long offset);
    internal long GetPos();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
internal virtual void Lock();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
internal virtual void Unlock();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
internal virtual void Lock(long Record);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
internal virtual void Unlock(long Record);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
internal virtual void Lock(long RecordStart, long RecordEnd);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
internal virtual void Unlock(long RecordStart, long RecordEnd);
    internal string LineInput();
    internal virtual bool CanInput();
    protected virtual string InputStr();
    protected virtual object InputNum(VariantType vt);
    public abstract virtual OpenMode GetMode();
    internal string InputString(int lLen);
    internal void SPC(int iCount);
    internal void Tab(int Column);
    internal void SetPrintMode();
    internal static VT VTType(object VarName);
    internal static VT VTFromComType(Type typ);
    [RequiresUnreferencedCodeAttribute("Calls PutArrayData")]
internal void PutFixedArray(long RecordNumber, Array arr, Type ElementType, int FixedStringLength, int FirstBound, int SecondBound);
    [RequiresUnreferencedCodeAttribute("Calls PutArrayData")]
internal void PutDynamicArray(long RecordNumber, Array arr, bool ContainedInVariant, int FixedStringLength);
    internal void LengthCheck(int Length);
    internal void PutFixedLengthString(long RecordNumber, string s, int lengthToWrite);
    internal void PutVariantString(long RecordNumber, string s);
    internal void PutString(long RecordNumber, string s);
    internal void PutStringWithLength(long RecordNumber, string s);
    internal void PutDate(long RecordNumber, DateTime dt, bool ContainedInVariant);
    internal void PutShort(long RecordNumber, short i, bool ContainedInVariant);
    internal void PutInteger(long RecordNumber, int l, bool ContainedInVariant);
    internal void PutLong(long RecordNumber, long l, bool ContainedInVariant);
    internal void PutByte(long RecordNumber, byte byt, bool ContainedInVariant);
    internal void PutChar(long RecordNumber, char ch, bool ContainedInVariant);
    internal void PutSingle(long RecordNumber, float sng, bool ContainedInVariant);
    internal void PutDouble(long RecordNumber, double dbl, bool ContainedInVariant);
    internal void PutEmpty(long RecordNumber);
    internal void PutBoolean(long RecordNumber, bool b, bool ContainedInVariant);
    internal void PutDecimal(long RecordNumber, decimal dec, bool ContainedInVariant);
    internal void PutCurrency(long RecordNumber, decimal dec, bool ContainedInVariant);
    [RequiresUnreferencedCodeAttribute("Calls EnumerateUDT")]
internal void PutRecord(long RecordNumber, ValueType o);
    internal Type ComTypeFromVT(VT vtype);
    [RequiresUnreferencedCodeAttribute("Calls GetArrayData")]
internal void GetFixedArray(long RecordNumber, Array& arr, Type FieldType, int FirstBound, int SecondBound, int FixedStringLength);
    [RequiresUnreferencedCodeAttribute("Calls GetArrayData")]
internal void GetDynamicArray(Array& arr, Type t, int FixedStringLength);
    private void PutArrayDesc(Array arr);
    internal Array GetArrayDesc(Type typ);
    internal virtual string GetLengthPrefixedString(long RecordNumber);
    internal virtual string GetFixedLengthString(long RecordNumber, int ByteLength);
    protected string ReadString(int ByteLength);
    protected string ReadString();
    internal DateTime GetDate(long RecordNumber);
    internal short GetShort(long RecordNumber);
    internal int GetInteger(long RecordNumber);
    internal long GetLong(long RecordNumber);
    internal byte GetByte(long RecordNumber);
    internal char GetChar(long RecordNumber);
    internal float GetSingle(long RecordNumber);
    internal double GetDouble(long RecordNumber);
    internal decimal GetDecimal(long RecordNumber);
    internal decimal GetCurrency(long RecordNumber);
    internal bool GetBoolean(long RecordNumber);
    [RequiresUnreferencedCodeAttribute("Calls EnumerateUDT")]
internal void GetRecord(long RecordNumber, ValueType& o, bool ContainedInVariant);
    [RequiresUnreferencedCodeAttribute("Calls PutObject")]
internal void PutArrayData(Array arr, Type typ, int FixedStringLength, int FirstBound, int SecondBound);
    [RequiresUnreferencedCodeAttribute("Calls GetObject")]
internal void GetArrayData(Array arr, Type typ, int FirstBound, int SecondBound, int FixedStringLength);
    private int GetByteLength(VT vtype);
    private void PrintTab(TabInfo ti);
    private string AddSpaces(string s);
    internal void PrintLine(Object[] Output);
    internal void Print(Object[] Output);
    internal void WriteLineHelper(Object[] Output);
    internal void WriteHelper(Object[] Output);
    private void InternalWriteHelper(Object[] Output);
    private string IOStrFromSingle(float Value, NumberFormatInfo NumberFormat);
    private string IOStrFromDouble(double Value, NumberFormatInfo NumberFormat);
    private string IOStrFromDecimal(decimal Value, NumberFormatInfo NumberFormat);
    internal string FormatUniversalDate(DateTime dt);
    protected string GetQuotedString(string Value);
    [RequiresUnreferencedCodeAttribute("VB6RandomFile implementation is unsafe.")]
internal virtual void GetObject(Object& Value, long RecordNumber, bool ContainedInVariant);
    [RequiresUnreferencedCodeAttribute("VB6RandomFile implementation is unsafe.")]
internal virtual void Get(ValueType& Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("VB6RandomFile implementation is unsafe.")]
internal virtual void Get(Array& Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    internal virtual void Get(Boolean& Value, long RecordNumber);
    internal virtual void Get(Byte& Value, long RecordNumber);
    internal virtual void Get(Int16& Value, long RecordNumber);
    internal virtual void Get(Int32& Value, long RecordNumber);
    internal virtual void Get(Int64& Value, long RecordNumber);
    internal virtual void Get(Char& Value, long RecordNumber);
    internal virtual void Get(Single& Value, long RecordNumber);
    internal virtual void Get(Double& Value, long RecordNumber);
    internal virtual void Get(Decimal& Value, long RecordNumber);
    internal virtual void Get(String& Value, long RecordNumber, bool StringIsFixedLength);
    internal virtual void Get(DateTime& Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("VB6RandomFile implementation is unsafe.")]
internal virtual void PutObject(object Value, long RecordNumber, bool ContainedInVariant);
    [RequiresUnreferencedCodeAttribute("VB6RandomFile implementation is unsafe.")]
internal virtual void Put(ValueType Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("VB6RandomFile implementation is unsafe.")]
internal virtual void Put(Array Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    internal virtual void Put(bool Value, long RecordNumber);
    internal virtual void Put(byte Value, long RecordNumber);
    internal virtual void Put(short Value, long RecordNumber);
    internal virtual void Put(int Value, long RecordNumber);
    internal virtual void Put(long Value, long RecordNumber);
    internal virtual void Put(char Value, long RecordNumber);
    internal virtual void Put(float Value, long RecordNumber);
    internal virtual void Put(double Value, long RecordNumber);
    internal virtual void Put(decimal Value, long RecordNumber);
    internal virtual void Put(string Value, long RecordNumber, bool StringIsFixedLength);
    internal virtual void Put(DateTime Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("Implementation of Vb6InputFile is unsafe.")]
internal virtual void Input(Object& obj);
    internal virtual void Input(Boolean& Value);
    internal virtual void Input(Byte& Value);
    internal virtual void Input(Int16& Value);
    internal virtual void Input(Int32& Value);
    internal virtual void Input(Int64& Value);
    internal virtual void Input(Char& Value);
    internal virtual void Input(Single& Value);
    internal virtual void Input(Double& Value);
    internal virtual void Input(Decimal& Value);
    internal virtual void Input(String& Value);
    internal virtual void Input(DateTime& Value);
    protected int SkipWhiteSpace();
    private string GetFileInTerm(short iTermType);
    protected bool IntlIsSpace(int lch);
    protected bool IntlIsDoubleQuote(int lch);
    protected bool IntlIsComma(int lch);
    protected int SkipWhiteSpaceEOF();
    protected void SkipTrailingWhiteSpace();
    protected string ReadInField(short iTermType);
    protected bool CheckEOF(int lChar);
    private void ValidateReadable();
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.VB6InputFile : VB6File {
    public VB6InputFile(string FileName, OpenShare share);
    internal virtual void OpenFile();
    internal virtual bool CanInput();
    internal virtual bool EOF();
    public virtual OpenMode GetMode();
    internal object ParseInputString(String& sInput);
    [RequiresUnreferencedCodeAttribute("Calls Conversion.ParseInputField")]
internal virtual void Input(Object& obj);
    internal virtual void Input(Boolean& Value);
    internal virtual void Input(Byte& Value);
    internal virtual void Input(Int16& Value);
    internal virtual void Input(Int32& Value);
    internal virtual void Input(Int64& Value);
    internal virtual void Input(Char& Value);
    internal virtual void Input(Single& Value);
    internal virtual void Input(Double& Value);
    internal virtual void Input(Decimal& Value);
    internal virtual void Input(String& Value);
    internal virtual void Input(DateTime& Value);
    internal virtual long LOC();
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.VB6OutputFile : VB6File {
    internal VB6OutputFile(string FileName, OpenShare share, bool fAppend);
    internal virtual void OpenFile();
    internal virtual void WriteLine(string s);
    internal virtual void WriteString(string s);
    public virtual OpenMode GetMode();
    internal virtual bool EOF();
    internal virtual long LOC();
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.CompilerServices.VB6RandomFile : VB6File {
    public VB6RandomFile(string FileName, OpenAccess access, OpenShare share, int lRecordLen);
    private void OpenFileHelper(FileMode fm, OpenAccess fa);
    internal virtual void OpenFile();
    internal virtual void CloseFile();
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
internal virtual void Lock(long lStart, long lEnd);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
internal virtual void Unlock(long lStart, long lEnd);
    public virtual OpenMode GetMode();
    internal virtual bool EOF();
    internal virtual long LOC();
    internal virtual void Seek(long Position);
    internal virtual long Seek();
    [RequiresUnreferencedCodeAttribute("Calls GetRecord")]
internal virtual void GetObject(Object& Value, long RecordNumber, bool ContainedInVariant);
    [RequiresUnreferencedCodeAttribute("Calls GetRecord")]
internal virtual void Get(ValueType& Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("Calls GetFixedArray and GetArrayData")]
internal virtual void Get(Array& Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    internal virtual void Get(Boolean& Value, long RecordNumber);
    internal virtual void Get(Byte& Value, long RecordNumber);
    internal virtual void Get(Int16& Value, long RecordNumber);
    internal virtual void Get(Int32& Value, long RecordNumber);
    internal virtual void Get(Int64& Value, long RecordNumber);
    internal virtual void Get(Char& Value, long RecordNumber);
    internal virtual void Get(Single& Value, long RecordNumber);
    internal virtual void Get(Double& Value, long RecordNumber);
    internal virtual void Get(Decimal& Value, long RecordNumber);
    internal virtual void Get(String& Value, long RecordNumber, bool StringIsFixedLength);
    internal virtual void Get(DateTime& Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("Calls PutRecord")]
internal virtual void PutObject(object Value, long RecordNumber, bool ContainedInVariant);
    [RequiresUnreferencedCodeAttribute("Calls PutRecord")]
internal virtual void Put(ValueType Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("Calls PutFixedArray and PutDynamicArray")]
internal virtual void Put(Array Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    internal virtual void Put(bool Value, long RecordNumber);
    internal virtual void Put(byte Value, long RecordNumber);
    internal virtual void Put(short Value, long RecordNumber);
    internal virtual void Put(int Value, long RecordNumber);
    internal virtual void Put(long Value, long RecordNumber);
    internal virtual void Put(char Value, long RecordNumber);
    internal virtual void Put(float Value, long RecordNumber);
    internal virtual void Put(double Value, long RecordNumber);
    internal virtual void Put(decimal Value, long RecordNumber);
    internal virtual void Put(string Value, long RecordNumber, bool StringIsFixedLength);
    internal virtual void Put(DateTime Value, long RecordNumber);
    protected void ValidateWriteable();
    protected void ValidateReadable();
}
internal class Microsoft.VisualBasic.CompilerServices.VBBinaryOperatorBinder : BinaryOperationBinder {
    private UserDefinedOperator _Op;
    private static int s_hash;
    private static VBBinaryOperatorBinder();
    [RequiresUnreferencedCodeAttribute("This subclass of BinaryOperationBinder is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBBinaryOperatorBinder(UserDefinedOperator op, ExpressionType linqOp);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackBinaryOperation(DynamicMetaObject target, DynamicMetaObject arg, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBBinder : Binder {
    internal string m_BindToName;
    internal Type m_objType;
    private VBBinderState m_state;
    private MemberInfo m_CachedMember;
    private Boolean[] m_ByRefFlags;
    public VBBinder(Boolean[] CopyBack);
    private void ThrowInvalidCast(Type ArgType, Type ParmType, int ParmIndex);
    public virtual void ReorderArgumentArray(Object[]& args, object objState);
    public virtual MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, Object[]& args, ParameterModifier[] modifiers, CultureInfo culture, String[] names, Object& ObjState);
    private int GetPropArgCount(Object[] args, bool IsPropertySet);
    private int GetMostSpecific(MethodBase match0, MethodBase ThisMethod, Int32[] ArgIndexes, Object[] ParamOrder, bool IsPropertySet, int ParamArrayIndex0, int ParamArrayIndex1, Object[] args);
    private bool MatchesParamArraySignature(ParameterInfo[] param0, ParameterInfo[] param1, int ParamArrayIndex1, bool IsPropertySet, int ArgCountUpperBound);
    private bool MethodsDifferOnlyByReturnType(MethodBase match1, MethodBase match2);
    public virtual FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture);
    public virtual MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);
    public virtual PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);
    public virtual object ChangeType(object value, Type typ, CultureInfo culture);
    private BindScore BindingScore(ParameterInfo[] Parameters, Int32[] paramOrder, Type[] ArgTypes, bool IsPropertySet, int ParamArrayIndex);
    private void ReorderParams(Int32[] paramOrder, Object[] vars, VBBinderState state);
    private Exception CreateParamOrder(bool SetProp, Int32[] paramOrder, ParameterInfo[] pars, Object[] args, String[] names);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
internal object InvokeMember(string name, BindingFlags invokeAttr, Type objType, IReflect objIReflect, object target, Object[] args, String[] namedParameters);
    private string GetDefaultMemberName(Type typ);
    private MethodBase[] GetMethodsByName(Type objType, IReflect objIReflect, string name, BindingFlags invokeAttr);
    internal string CalledMethodName();
    internal static void SecurityCheckForLateboundCalls(MemberInfo member, Type objType, IReflect objIReflect);
    private static bool IsMemberPublic(MemberInfo Member);
    internal void CacheMember(MemberInfo member);
}
internal class Microsoft.VisualBasic.CompilerServices.VBCallBinder : InvokeMemberBinder {
    private bool _ignoreReturn;
    private static int s_hash;
    private static VBCallBinder();
    [RequiresUnreferencedCodeAttribute("This subclass is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBCallBinder(string memberName, CallInfo callInfo, bool ignoreReturn);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackInvokeMember(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBConversionBinder : ConvertBinder {
    private static int s_hash;
    private static VBConversionBinder();
    [RequiresUnreferencedCodeAttribute("This subclass is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBConversionBinder(Type t);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2111:ReflectionToDynamicallyAccessedMembers")]
public virtual DynamicMetaObject FallbackConvert(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal enum Microsoft.VisualBasic.CompilerServices.vbErrors : Enum {
    public int value__;
    public static vbErrors None;
    public static vbErrors ReturnWOGoSub;
    public static vbErrors IllegalFuncCall;
    public static vbErrors Overflow;
    public static vbErrors OutOfMemory;
    public static vbErrors OutOfBounds;
    public static vbErrors ArrayLocked;
    public static vbErrors DivByZero;
    public static vbErrors TypeMismatch;
    public static vbErrors OutOfStrSpace;
    public static vbErrors ExprTooComplex;
    public static vbErrors CantContinue;
    public static vbErrors UserInterrupt;
    public static vbErrors ResumeWOErr;
    public static vbErrors OutOfStack;
    public static vbErrors UNDONE;
    public static vbErrors UndefinedProc;
    public static vbErrors TooManyClients;
    public static vbErrors DLLLoadErr;
    public static vbErrors DLLBadCallingConv;
    public static vbErrors InternalError;
    public static vbErrors BadFileNameOrNumber;
    public static vbErrors FileNotFound;
    public static vbErrors BadFileMode;
    public static vbErrors FileAlreadyOpen;
    public static vbErrors IOError;
    public static vbErrors FileAlreadyExists;
    public static vbErrors BadRecordLen;
    public static vbErrors DiskFull;
    public static vbErrors EndOfFile;
    public static vbErrors BadRecordNum;
    public static vbErrors TooManyFiles;
    public static vbErrors DevUnavailable;
    public static vbErrors PermissionDenied;
    public static vbErrors DiskNotReady;
    public static vbErrors DifferentDrive;
    public static vbErrors PathFileAccess;
    public static vbErrors PathNotFound;
    public static vbErrors ObjNotSet;
    public static vbErrors IllegalFor;
    public static vbErrors BadPatStr;
    public static vbErrors CantUseNull;
    public static vbErrors UserDefined;
    public static vbErrors AdviseLimit;
    public static vbErrors BadCallToFriendFunction;
    public static vbErrors CantPassPrivateObject;
    public static vbErrors DLLCallException;
    public static vbErrors DoesntImplementICollection;
    public static vbErrors Abort;
    public static vbErrors InvalidFileFormat;
    public static vbErrors CantCreateTmpFile;
    public static vbErrors InvalidResourceFormat;
    public static vbErrors InvalidPropertyValue;
    public static vbErrors InvalidPropertyArrayIndex;
    public static vbErrors SetNotSupportedAtRuntime;
    public static vbErrors SetNotSupported;
    public static vbErrors NeedPropertyArrayIndex;
    public static vbErrors SetNotPermitted;
    public static vbErrors GetNotSupportedAtRuntime;
    public static vbErrors GetNotSupported;
    public static vbErrors PropertyNotFound;
    public static vbErrors NoSuchControlOrProperty;
    public static vbErrors NotObject;
    public static vbErrors CantCreateObject;
    public static vbErrors OLENotSupported;
    public static vbErrors OLEFileNotFound;
    public static vbErrors OLENoPropOrMethod;
    public static vbErrors OLEAutomationError;
    public static vbErrors LostTLB;
    public static vbErrors OLENoDefault;
    public static vbErrors ActionNotSupported;
    public static vbErrors NamedArgsNotSupported;
    public static vbErrors LocaleSettingNotSupported;
    public static vbErrors NamedParamNotFound;
    public static vbErrors ParameterNotOptional;
    public static vbErrors FuncArityMismatch;
    public static vbErrors NotEnum;
    public static vbErrors InvalidOrdinal;
    public static vbErrors InvalidDllFunctionName;
    public static vbErrors CodeResourceNotFound;
    public static vbErrors CodeResourceLockError;
    public static vbErrors DuplicateKey;
    public static vbErrors InvalidTypeLibVariable;
    public static vbErrors ObjDoesNotSupportEvents;
    public static vbErrors InvalidClipboardFormat;
    public static vbErrors IdentNotMember;
    public static vbErrors ServerNotFound;
    public static vbErrors ObjNotRegistered;
    public static vbErrors InvalidPicture;
    public static vbErrors PrinterError;
    public static vbErrors CantSaveFileToTemp;
    public static vbErrors SearchTextNotFound;
    public static vbErrors ReplacementsTooLong;
    public static vbErrors NotYetImplemented;
    public static vbErrors FileNotFoundWithName;
    public static vbErrors CantFindDllEntryPoint;
    public static vbErrors SeekErr;
    public static vbErrors ReadFault;
    public static vbErrors WriteFault;
    public static vbErrors BadFunctionId;
    public static vbErrors FileLockViolation;
    public static vbErrors ShareRequired;
    public static vbErrors BufferTooSmall;
    public static vbErrors InvDataRead;
    public static vbErrors UnsupFormat;
    public static vbErrors RegistryAccess;
    public static vbErrors LibNotRegistered;
    public static vbErrors Usage;
    public static vbErrors UndefinedType;
    public static vbErrors QualifiedNameDisallowed;
    public static vbErrors InvalidState;
    public static vbErrors WrongTypeKind;
    public static vbErrors ElementNotFound;
    public static vbErrors AmbiguousName;
    public static vbErrors ModNameConflict;
    public static vbErrors UnknownLcid;
    public static vbErrors BadModuleKind;
    public static vbErrors NoContainingLib;
    public static vbErrors BadTypeId;
    public static vbErrors BadLibId;
    public static vbErrors Eof;
    public static vbErrors SizeTooBig;
    public static vbErrors ExpectedFuncNotModule;
    public static vbErrors ExpectedFuncNotRecord;
    public static vbErrors ExpectedFuncNotProject;
    public static vbErrors ExpectedFuncNotVar;
    public static vbErrors ExpectedTypeNotProj;
    public static vbErrors UnsuitableFuncPropMatch;
    public static vbErrors BrokenLibRef;
    public static vbErrors UnsupportedTypeLibFeature;
    public static vbErrors ModuleAsType;
    public static vbErrors InvalidTypeInfoKind;
    public static vbErrors InvalidTypeLibFunction;
    public static vbErrors OperationNotAllowedInDll;
    public static vbErrors CompileError;
    public static vbErrors CantEvalWatch;
    public static vbErrors MissingVbaTypeLib;
    public static vbErrors UserReset;
    public static vbErrors MissingEndBrack;
    public static vbErrors IncorrectTypeChar;
    public static vbErrors InvalidNumLit;
    public static vbErrors IllegalChar;
    public static vbErrors IdTooLong;
    public static vbErrors StatementTooComplex;
    public static vbErrors ExpectedTokens;
    public static vbErrors InconsistentPropFuncs;
    public static vbErrors CircularType;
    public static vbErrors AccessViolation;
    public static vbErrors LastTrappable;
}
internal class Microsoft.VisualBasic.CompilerServices.VBGetBinder : InvokeMemberBinder {
    private static int s_hash;
    private static VBGetBinder();
    [RequiresUnreferencedCodeAttribute("This subclass is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBGetBinder(string memberName, CallInfo callInfo);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackInvokeMember(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBGetMemberBinder : GetMemberBinder {
    private static int s_hash;
    private bool InvokeOnGet { get; }
    private static VBGetMemberBinder();
    public VBGetMemberBinder(string name);
    public virtual DynamicMetaObject FallbackGetMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
    private sealed virtual override bool get_InvokeOnGet();
}
internal class Microsoft.VisualBasic.CompilerServices.VBIndexSetBinder : SetIndexBinder {
    private static int s_hash;
    private static VBIndexSetBinder();
    [RequiresUnreferencedCodeAttribute("This subclass is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBIndexSetBinder(CallInfo callInfo);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackSetIndex(DynamicMetaObject target, DynamicMetaObject[] packedIndexes, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBIndexSetComplexBinder : SetIndexBinder {
    private bool _optimisticSet;
    private bool _rValueBase;
    private static int s_hash;
    private static VBIndexSetComplexBinder();
    [RequiresUnreferencedCodeAttribute("This subclass is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBIndexSetComplexBinder(CallInfo callInfo, bool optimisticSet, bool rValueBase);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackSetIndex(DynamicMetaObject target, DynamicMetaObject[] packedIndexes, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBInvokeBinder : InvokeBinder {
    private bool _lateCall;
    private static int s_hash;
    private static VBInvokeBinder();
    [RequiresUnreferencedCodeAttribute("This subclass is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBInvokeBinder(CallInfo callInfo, bool lateCall);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBInvokeDefaultBinder : InvokeBinder {
    private bool _reportErrors;
    private static int s_hash;
    private static VBInvokeDefaultBinder();
    [RequiresUnreferencedCodeAttribute("This subclass is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBInvokeDefaultBinder(CallInfo callInfo, bool reportErrors);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBInvokeDefaultFallbackBinder : GetIndexBinder {
    private bool _reportErrors;
    private static int s_hash;
    private static VBInvokeDefaultFallbackBinder();
    [RequiresUnreferencedCodeAttribute("This subclass is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBInvokeDefaultFallbackBinder(CallInfo callInfo, bool reportErrors);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackGetIndex(DynamicMetaObject target, DynamicMetaObject[] packedArgs, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBSetBinder : SetMemberBinder {
    private static int s_hash;
    private static VBSetBinder();
    [RequiresUnreferencedCodeAttribute("This subclass is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBSetBinder(string memberName);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBSetComplexBinder : SetMemberBinder {
    private bool _optimisticSet;
    private bool _rValueBase;
    private static int s_hash;
    private static VBSetComplexBinder();
    [RequiresUnreferencedCodeAttribute("This subclass is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBSetComplexBinder(string memberName, bool optimisticSet, bool rValueBase);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
internal class Microsoft.VisualBasic.CompilerServices.VBUnaryOperatorBinder : UnaryOperationBinder {
    private UserDefinedOperator _Op;
    private static int s_hash;
    private static VBUnaryOperatorBinder();
    [RequiresUnreferencedCodeAttribute("This subclass of BinaryOperationBinder is unsafe. Marking ctor unsafe in order to suppress warnings for overridden methods as unsafe.")]
public VBUnaryOperatorBinder(UserDefinedOperator op, ExpressionType linqOp);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public virtual DynamicMetaObject FallbackUnaryOperation(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
    public virtual bool Equals(object _other);
    public virtual int GetHashCode();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Versioned : object {
    [RequiresUnreferencedCodeAttribute("The method name cannot and type cannot be statically analyzed so it may be trimmed")]
public static object CallByName(object Instance, string MethodName, CallType UseCallType, Object[] Arguments);
    public static bool IsNumeric(object Expression);
    public static string TypeName(object Expression);
    public static string SystemTypeName(string VbName);
    public static string VbTypeName(string SystemName);
}
internal enum Microsoft.VisualBasic.CompilerServices.VT : Enum {
    public short value__;
    public static VT Error;
    public static VT Boolean;
    public static VT Byte;
    public static VT Short;
    public static VT Integer;
    public static VT Decimal;
    public static VT Single;
    public static VT Double;
    public static VT String;
    public static VT ByteArray;
    public static VT CharArray;
    public static VT Date;
    public static VT Long;
    public static VT Char;
    public static VT Variant;
    public static VT Array;
    public static VT DBNull;
    public static VT Empty;
    public static VT Structure;
    public static VT Currency;
}
[StandardModuleAttribute]
[DebuggerNonUserCodeAttribute]
public class Microsoft.VisualBasic.Constants : object {
    public static string vbCrLf;
    public static int vbObjectError;
    [ObsoleteAttribute("vbNewLine has been deprecated. For a carriage return and line feed, use vbCrLf. For the current platform's newline, use System.Environment.NewLine.")]
public static string vbNewLine;
    public static string vbCr;
    public static string vbLf;
    public static string vbBack;
    public static string vbFormFeed;
    public static string vbTab;
    public static string vbVerticalTab;
    public static string vbNullChar;
    public static string vbNullString;
    public static AppWinStyle vbHide;
    public static AppWinStyle vbNormalFocus;
    public static AppWinStyle vbMinimizedFocus;
    public static AppWinStyle vbMaximizedFocus;
    public static AppWinStyle vbNormalNoFocus;
    public static AppWinStyle vbMinimizedNoFocus;
    public static CallType vbMethod;
    public static CallType vbGet;
    public static CallType vbLet;
    public static CallType vbSet;
    public static CompareMethod vbBinaryCompare;
    public static CompareMethod vbTextCompare;
    public static DateFormat vbGeneralDate;
    public static DateFormat vbLongDate;
    public static DateFormat vbShortDate;
    public static DateFormat vbLongTime;
    public static DateFormat vbShortTime;
    public static FirstDayOfWeek vbUseSystemDayOfWeek;
    public static FirstDayOfWeek vbSunday;
    public static FirstDayOfWeek vbMonday;
    public static FirstDayOfWeek vbTuesday;
    public static FirstDayOfWeek vbWednesday;
    public static FirstDayOfWeek vbThursday;
    public static FirstDayOfWeek vbFriday;
    public static FirstDayOfWeek vbSaturday;
    public static FileAttribute vbNormal;
    public static FileAttribute vbReadOnly;
    public static FileAttribute vbHidden;
    public static FileAttribute vbSystem;
    public static FileAttribute vbVolume;
    public static FileAttribute vbDirectory;
    public static FileAttribute vbArchive;
    public static FirstWeekOfYear vbUseSystem;
    public static FirstWeekOfYear vbFirstJan1;
    public static FirstWeekOfYear vbFirstFourDays;
    public static FirstWeekOfYear vbFirstFullWeek;
    public static VbStrConv vbUpperCase;
    public static VbStrConv vbLowerCase;
    public static VbStrConv vbProperCase;
    public static VbStrConv vbWide;
    public static VbStrConv vbNarrow;
    public static VbStrConv vbKatakana;
    public static VbStrConv vbHiragana;
    public static VbStrConv vbSimplifiedChinese;
    public static VbStrConv vbTraditionalChinese;
    public static VbStrConv vbLinguisticCasing;
    public static TriState vbUseDefault;
    public static TriState vbTrue;
    public static TriState vbFalse;
    public static VariantType vbEmpty;
    public static VariantType vbNull;
    public static VariantType vbInteger;
    public static VariantType vbLong;
    public static VariantType vbSingle;
    public static VariantType vbDouble;
    public static VariantType vbCurrency;
    public static VariantType vbDate;
    public static VariantType vbString;
    public static VariantType vbObject;
    public static VariantType vbBoolean;
    public static VariantType vbVariant;
    public static VariantType vbDecimal;
    public static VariantType vbByte;
    public static VariantType vbUserDefinedType;
    public static VariantType vbArray;
    public static MsgBoxResult vbOK;
    public static MsgBoxResult vbCancel;
    public static MsgBoxResult vbAbort;
    public static MsgBoxResult vbRetry;
    public static MsgBoxResult vbIgnore;
    public static MsgBoxResult vbYes;
    public static MsgBoxResult vbNo;
    public static MsgBoxStyle vbOKOnly;
    public static MsgBoxStyle vbOKCancel;
    public static MsgBoxStyle vbAbortRetryIgnore;
    public static MsgBoxStyle vbYesNoCancel;
    public static MsgBoxStyle vbYesNo;
    public static MsgBoxStyle vbRetryCancel;
    public static MsgBoxStyle vbCritical;
    public static MsgBoxStyle vbQuestion;
    public static MsgBoxStyle vbExclamation;
    public static MsgBoxStyle vbInformation;
    public static MsgBoxStyle vbDefaultButton1;
    public static MsgBoxStyle vbDefaultButton2;
    public static MsgBoxStyle vbDefaultButton3;
    public static MsgBoxStyle vbApplicationModal;
    public static MsgBoxStyle vbSystemModal;
    public static MsgBoxStyle vbMsgBoxHelp;
    public static MsgBoxStyle vbMsgBoxRight;
    public static MsgBoxStyle vbMsgBoxRtlReading;
    public static MsgBoxStyle vbMsgBoxSetForeground;
}
public class Microsoft.VisualBasic.ControlChars : object {
    public static string CrLf;
    public static string NewLine;
    public static char Cr;
    public static char Lf;
    public static char Back;
    public static char FormFeed;
    public static char Tab;
    public static char VerticalTab;
    public static char NullChar;
    public static char Quote;
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Conversion : object {
    public static string ErrorToString();
    public static string ErrorToString(int ErrorNumber);
    public static short Fix(short Number);
    public static int Fix(int Number);
    public static long Fix(long Number);
    public static double Fix(double Number);
    public static float Fix(float Number);
    public static decimal Fix(decimal Number);
    public static object Fix(object Number);
    public static short Int(short Number);
    public static int Int(int Number);
    public static long Int(long Number);
    public static double Int(double Number);
    public static float Int(float Number);
    public static decimal Int(decimal Number);
    public static object Int(object Number);
    [CLSCompliantAttribute("False")]
public static string Hex(sbyte Number);
    public static string Hex(byte Number);
    public static string Hex(short Number);
    [CLSCompliantAttribute("False")]
public static string Hex(ushort Number);
    public static string Hex(int Number);
    [CLSCompliantAttribute("False")]
public static string Hex(UInt32 Number);
    public static string Hex(long Number);
    [CLSCompliantAttribute("False")]
public static string Hex(ulong Number);
    public static string Hex(object Number);
    [CLSCompliantAttribute("False")]
public static string Oct(sbyte Number);
    public static string Oct(byte Number);
    public static string Oct(short Number);
    [CLSCompliantAttribute("False")]
public static string Oct(ushort Number);
    public static string Oct(int Number);
    [CLSCompliantAttribute("False")]
public static string Oct(UInt32 Number);
    public static string Oct(long Number);
    [CLSCompliantAttribute("False")]
public static string Oct(ulong Number);
    public static string Oct(object Number);
    public static string Str(object Number);
    private static double HexOrOctValue(string InputStr, int i);
    public static double Val(string InputStr);
    public static int Val(char Expression);
    public static double Val(object Expression);
    [RequiresUnreferencedCodeAttribute("Calls UnsafeNativeMethods.VariantChangeType")]
internal static object ParseInputField(object Value, VariantType vtInput);
    private static int ShiftVTBits(int vt);
    [RequiresUnreferencedCodeAttribute("The Expression's underlying type cannot be statically analyzed and its members may be trimmed")]
public static object CTypeDynamic(object Expression, Type TargetType);
    [RequiresUnreferencedCodeAttribute("The Expression's underlying type cannot be statically analyzed and its members may be trimmed")]
public static TargetType CTypeDynamic(object Expression);
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.DateAndTime : object {
    private static String[] AcceptedDateFormatsDBCS;
    private static String[] AcceptedDateFormatsSBCS;
    public static DateTime Today { get; public set; }
    public static DateTime Now { get; }
    public static DateTime TimeOfDay { get; public set; }
    public static string TimeString { get; public set; }
    public static string DateString { get; public set; }
    public static double Timer { get; }
    private static Calendar CurrentCalendar { get; }
    private static DateAndTime();
    public static DateTime get_Today();
    [SupportedOSPlatformAttribute("windows")]
public static void set_Today(DateTime Value);
    public static DateTime get_Now();
    public static DateTime get_TimeOfDay();
    [SupportedOSPlatformAttribute("windows")]
public static void set_TimeOfDay(DateTime Value);
    public static string get_TimeString();
    [SupportedOSPlatformAttribute("windows")]
public static void set_TimeString(string Value);
    private static bool IsDBCSCulture();
    public static string get_DateString();
    [SupportedOSPlatformAttribute("windows")]
public static void set_DateString(string Value);
    public static double get_Timer();
    private static Calendar get_CurrentCalendar();
    public static DateTime DateAdd(DateInterval Interval, double Number, DateTime DateValue);
    public static long DateDiff(DateInterval Interval, DateTime Date1, DateTime Date2, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    private static int GetDayOfWeek(DateTime dt, FirstDayOfWeek weekdayFirst);
    public static int DatePart(DateInterval Interval, DateTime DateValue, FirstDayOfWeek FirstDayOfWeekValue, FirstWeekOfYear FirstWeekOfYearValue);
    public static DateTime DateAdd(string Interval, double Number, object DateValue);
    public static long DateDiff(string Interval, object Date1, object Date2, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    public static int DatePart(string Interval, object DateValue, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    private static DateInterval DateIntervalFromString(string Interval);
    public static DateTime DateSerial(int Year, int Month, int Day);
    public static DateTime TimeSerial(int Hour, int Minute, int Second);
    public static DateTime DateValue(string StringDate);
    public static DateTime TimeValue(string StringTime);
    public static int Year(DateTime DateValue);
    public static int Month(DateTime DateValue);
    public static int Day(DateTime DateValue);
    public static int Hour(DateTime TimeValue);
    public static int Minute(DateTime TimeValue);
    public static int Second(DateTime TimeValue);
    public static int Weekday(DateTime DateValue, FirstDayOfWeek DayOfWeek);
    public static string MonthName(int Month, bool Abbreviate);
    public static string WeekdayName(int Weekday, bool Abbreviate, FirstDayOfWeek FirstDayOfWeekValue);
}
public enum Microsoft.VisualBasic.DateFormat : Enum {
    public int value__;
    public static DateFormat GeneralDate;
    public static DateFormat LongDate;
    public static DateFormat ShortDate;
    public static DateFormat LongTime;
    public static DateFormat ShortTime;
}
public enum Microsoft.VisualBasic.DateInterval : Enum {
    public int value__;
    public static DateInterval Year;
    public static DateInterval Quarter;
    public static DateInterval Month;
    public static DateInterval DayOfYear;
    public static DateInterval Day;
    public static DateInterval WeekOfYear;
    public static DateInterval Weekday;
    public static DateInterval Hour;
    public static DateInterval Minute;
    public static DateInterval Second;
}
public enum Microsoft.VisualBasic.DueDate : Enum {
    public int value__;
    public static DueDate EndOfPeriod;
    public static DueDate BegOfPeriod;
}
public class Microsoft.VisualBasic.ErrObject : object {
    private Exception m_curException;
    private int m_curErl;
    private int m_curNumber;
    private string m_curDescription;
    private bool m_NumberIsSet;
    private bool m_ClearOnCapture;
    private bool m_DescriptionIsSet;
    private string m_curSource;
    private bool m_SourceIsSet;
    private string m_curHelpFile;
    private int m_curHelpContext;
    private bool m_HelpFileIsSet;
    private bool m_HelpContextIsSet;
    public int Erl { get; }
    public int Number { get; public set; }
    public string Source { get; public set; }
    public string Description { get; public set; }
    public string HelpFile { get; public set; }
    public int HelpContext { get; public set; }
    public int LastDllError { get; }
    public int get_Erl();
    public int get_Number();
    public void set_Number(int Value);
    public string get_Source();
    public void set_Source(string Value);
    private string FilterDefaultMessage(string Msg);
    public string get_Description();
    public void set_Description(string Value);
    public string get_HelpFile();
    public void set_HelpFile(string Value);
    private string MakeHelpLink(string HelpFile, int HelpContext);
    private void ParseHelpLink(string HelpLink);
    public int get_HelpContext();
    public void set_HelpContext(int Value);
    public Exception GetException();
    public void Clear();
    public void Raise(int Number, object Source, object Description, object HelpFile, object HelpContext);
    public int get_LastDllError();
    internal void SetUnmappedError(int Number);
    internal Exception CreateException(int Number, string Description);
    internal void CaptureException(Exception ex);
    internal void CaptureException(Exception ex, int lErl);
    private int MapExceptionToNumber(Exception e);
    private Exception MapNumberToException(int Number, string Description);
    internal int MapErrorNumber(int Number);
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.FileAttribute : Enum {
    public int value__;
    public static FileAttribute Normal;
    public static FileAttribute ReadOnly;
    public static FileAttribute Hidden;
    public static FileAttribute System;
    public static FileAttribute Volume;
    public static FileAttribute Directory;
    public static FileAttribute Archive;
}
public enum Microsoft.VisualBasic.FileIO.DeleteDirectoryOption : Enum {
    public int value__;
    public static DeleteDirectoryOption ThrowIfDirectoryNonEmpty;
    public static DeleteDirectoryOption DeleteAllContents;
}
public enum Microsoft.VisualBasic.FileIO.FieldType : Enum {
    public int value__;
    public static FieldType Delimited;
    public static FieldType FixedWidth;
}
public class Microsoft.VisualBasic.FileIO.FileSystem : object {
    private static Char[] m_SeparatorChars;
    public static ReadOnlyCollection`1<DriveInfo> Drives { get; }
    public static string CurrentDirectory { get; public set; }
    private static FileSystem();
    public static ReadOnlyCollection`1<DriveInfo> get_Drives();
    public static string get_CurrentDirectory();
    public static void set_CurrentDirectory(string value);
    public static string CombinePath(string baseDirectory, string relativePath);
    public static bool DirectoryExists(string directory);
    public static bool FileExists(string file);
    public static ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType);
    public static ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType, String[] fileWildcards);
    public static ReadOnlyCollection`1<string> GetDirectories(string directory);
    public static ReadOnlyCollection`1<string> GetDirectories(string directory, SearchOption searchType, String[] wildcards);
    public static DirectoryInfo GetDirectoryInfo(string directory);
    public static DriveInfo GetDriveInfo(string drive);
    public static FileInfo GetFileInfo(string file);
    public static ReadOnlyCollection`1<string> GetFiles(string directory);
    public static ReadOnlyCollection`1<string> GetFiles(string directory, SearchOption searchType, String[] wildcards);
    public static string GetName(string path);
    public static string GetParentPath(string path);
    public static string GetTempFileName();
    public static TextFieldParser OpenTextFieldParser(string file);
    public static TextFieldParser OpenTextFieldParser(string file, String[] delimiters);
    public static TextFieldParser OpenTextFieldParser(string file, Int32[] fieldWidths);
    public static StreamReader OpenTextFileReader(string file);
    public static StreamReader OpenTextFileReader(string file, Encoding encoding);
    public static StreamWriter OpenTextFileWriter(string file, bool append);
    public static StreamWriter OpenTextFileWriter(string file, bool append, Encoding encoding);
    public static Byte[] ReadAllBytes(string file);
    public static string ReadAllText(string file);
    public static string ReadAllText(string file, Encoding encoding);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public static void CopyFile(string sourceFileName, string destinationFileName);
    public static void CopyFile(string sourceFileName, string destinationFileName, bool overwrite);
    public static void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public static void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public static void CreateDirectory(string directory);
    public static void DeleteDirectory(string directory, DeleteDirectoryOption onDirectoryNotEmpty);
    public static void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle);
    public static void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public static void DeleteFile(string file);
    public static void DeleteFile(string file, UIOption showUI, RecycleOption recycle);
    public static void DeleteFile(string file, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public static void MoveFile(string sourceFileName, string destinationFileName);
    public static void MoveFile(string sourceFileName, string destinationFileName, bool overwrite);
    public static void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public static void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public static void RenameDirectory(string directory, string newName);
    public static void RenameFile(string file, string newName);
    public static void WriteAllBytes(string file, Byte[] data, bool append);
    public static void WriteAllText(string file, string text, bool append);
    public static void WriteAllText(string file, string text, bool append, Encoding encoding);
    internal static string NormalizeFilePath(string Path, string ParamName);
    internal static string NormalizePath(string Path);
    internal static void CheckFilePathTrailingSeparator(string path, string paramName);
    private static void AddToStringCollection(Collection`1<string> StrCollection, String[] StrArray);
    private static void CopyOrMoveDirectory(CopyOrMove operation, string sourceDirectoryName, string destinationDirectoryName, bool overwrite, UIOptionInternal showUI, UICancelOption onUserCancel);
    private static void FxCopyOrMoveDirectory(CopyOrMove operation, string sourceDirectoryPath, string targetDirectoryPath, bool overwrite);
    private static void CopyOrMoveDirectoryNode(CopyOrMove Operation, DirectoryNode SourceDirectoryNode, bool Overwrite, ListDictionary Exceptions);
    private static void CopyOrMoveFile(CopyOrMove operation, string sourceFileName, string destinationFileName, bool overwrite, UIOptionInternal showUI, UICancelOption onUserCancel);
    private static void DeleteDirectoryInternal(string directory, DeleteDirectoryOption onDirectoryNotEmpty, UIOptionInternal showUI, RecycleOption recycle, UICancelOption onUserCancel);
    private static void DeleteFileInternal(string file, UIOptionInternal showUI, RecycleOption recycle, UICancelOption onUserCancel);
    private static void EnsurePathNotExist(string Path);
    private static bool FileContainsText(string FilePath, string Text, bool IgnoreCase);
    private static ReadOnlyCollection`1<string> FindFilesOrDirectories(FileOrDirectory FileOrDirectory, string directory, SearchOption searchType, String[] wildcards);
    private static void FindFilesOrDirectories(FileOrDirectory FileOrDirectory, string directory, SearchOption searchType, String[] wildcards, Collection`1<string> Results);
    private static String[] FindPaths(FileOrDirectory FileOrDirectory, string directory, string wildCard);
    private static string GetFullPathFromNewName(string Path, string NewName, string ArgumentName);
    private static string GetLongPath(string FullPath);
    private static bool IsOnSameDrive(string Path1, string Path2);
    private static bool IsRoot(string Path);
    private static string RemoveEndingSeparator(string Path);
    private static void ShellCopyOrMove(CopyOrMove Operation, FileOrDirectory TargetType, string FullSourcePath, string FullTargetPath, UIOptionInternal ShowUI, UICancelOption OnUserCancel);
    private static void ShellDelete(string FullPath, UIOptionInternal ShowUI, RecycleOption recycle, UICancelOption OnUserCancel, FileOrDirectory FileOrDirectory);
    private static void ShellFileOperation(SHFileOperationType OperationType, ShFileOperationFlags OperationFlags, string FullSource, string FullTarget, UICancelOption OnUserCancel, FileOrDirectory FileOrDirectory);
    private static SHFILEOPSTRUCT GetShellOperationInfo(SHFileOperationType OperationType, ShFileOperationFlags OperationFlags, string SourcePath, string TargetPath);
    private static SHFILEOPSTRUCT GetShellOperationInfo(SHFileOperationType OperationType, ShFileOperationFlags OperationFlags, String[] SourcePaths, string TargetPath);
    private static ShFileOperationFlags GetOperationFlags(UIOptionInternal ShowUI);
    private static string GetShellPath(string FullPath);
    private static string GetShellPath(String[] FullPaths);
    private static void ThrowIfDevicePath(string path);
    private static void ThrowWinIOError(int errorCode);
    private static UIOptionInternal ToUIOptionInternal(UIOption showUI);
    private static int ToWinIOErrorCode(int errorCode);
    private static void VerifyDeleteDirectoryOption(string argName, DeleteDirectoryOption argValue);
    private static void VerifyRecycleOption(string argName, RecycleOption argValue);
    private static void VerifySearchOption(string argName, SearchOption argValue);
    private static void VerifyUICancelOption(string argName, UICancelOption argValue);
}
public class Microsoft.VisualBasic.FileIO.MalformedLineException : Exception {
    private long m_LineNumber;
    [EditorBrowsableAttribute("0")]
public long LineNumber { get; public set; }
    public MalformedLineException(string message, long lineNumber);
    public MalformedLineException(string message);
    public MalformedLineException(string message, long lineNumber, Exception innerException);
    public MalformedLineException(string message, Exception innerException);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
protected MalformedLineException(SerializationInfo info, StreamingContext context);
    public long get_LineNumber();
    public void set_LineNumber(long value);
    [ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called or extended by application code.")]
[EditorBrowsableAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
}
internal class Microsoft.VisualBasic.FileIO.QuoteDelimitedFieldBuilder : object {
    private StringBuilder m_Field;
    private bool m_FieldFinished;
    private int m_Index;
    private int m_DelimiterLength;
    private Regex m_DelimiterRegex;
    private string m_SpaceChars;
    private bool m_MalformedLine;
    public bool FieldFinished { get; }
    public string Field { get; }
    public int Index { get; }
    public int DelimiterLength { get; }
    public bool MalformedLine { get; }
    public QuoteDelimitedFieldBuilder(Regex DelimiterRegex, string SpaceChars);
    public bool get_FieldFinished();
    public string get_Field();
    public int get_Index();
    public int get_DelimiterLength();
    public bool get_MalformedLine();
    public void BuildField(string Line, int StartAt);
}
public enum Microsoft.VisualBasic.FileIO.RecycleOption : Enum {
    public int value__;
    public static RecycleOption DeletePermanently;
    public static RecycleOption SendToRecycleBin;
}
public enum Microsoft.VisualBasic.FileIO.SearchOption : Enum {
    public int value__;
    public static SearchOption SearchTopLevelOnly;
    public static SearchOption SearchAllSubDirectories;
}
public class Microsoft.VisualBasic.FileIO.SpecialDirectories : object {
    public static string MyDocuments { get; }
    public static string MyMusic { get; }
    public static string MyPictures { get; }
    public static string Desktop { get; }
    public static string Programs { get; }
    public static string ProgramFiles { get; }
    public static string Temp { get; }
    public static string CurrentUserApplicationData { get; }
    public static string AllUsersApplicationData { get; }
    public static string get_MyDocuments();
    public static string get_MyMusic();
    public static string get_MyPictures();
    public static string get_Desktop();
    public static string get_Programs();
    public static string get_ProgramFiles();
    public static string get_Temp();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalsys", "IL2026:RequiresUnreferencedCode")]
public static string get_CurrentUserApplicationData();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalsys", "IL2026:RequiresUnreferencedCode")]
public static string get_AllUsersApplicationData();
    private static string GetDirectoryPath(string Directory, string DirectoryNameResID);
    [RequiresUnreferencedCodeAttribute("Cannot statically analyze the passed in type.")]
private static string GetWindowsFormsDirectory(string typeName, string propertyName);
}
public class Microsoft.VisualBasic.FileIO.TextFieldParser : object {
    private bool m_Disposed;
    private TextReader m_Reader;
    private String[] m_CommentTokens;
    private long m_LineNumber;
    private bool m_EndOfData;
    private string m_ErrorLine;
    private long m_ErrorLineNumber;
    private FieldType m_TextFieldType;
    private Int32[] m_FieldWidths;
    private String[] m_Delimiters;
    private Int32[] m_FieldWidthsCopy;
    private String[] m_DelimitersCopy;
    private Regex m_DelimiterRegex;
    private Regex m_DelimiterWithEndCharsRegex;
    private Int32[] m_WhitespaceCodes;
    private Regex m_BeginQuotesRegex;
    private Regex m_WhiteSpaceRegEx;
    private bool m_TrimWhiteSpace;
    private int m_Position;
    private int m_PeekPosition;
    private int m_CharsRead;
    private bool m_NeedPropertyCheck;
    private Char[] m_Buffer;
    private int m_LineLength;
    private bool m_HasFieldsEnclosedInQuotes;
    private string m_SpaceChars;
    private int m_MaxLineSize;
    private int m_MaxBufferSize;
    private bool m_LeaveOpen;
    [EditorBrowsableAttribute("2")]
public String[] CommentTokens { get; public set; }
    public bool EndOfData { get; }
    [EditorBrowsableAttribute("2")]
public long LineNumber { get; }
    public string ErrorLine { get; }
    public long ErrorLineNumber { get; }
    public FieldType TextFieldType { get; public set; }
    public Int32[] FieldWidths { get; public set; }
    public String[] Delimiters { get; public set; }
    public bool TrimWhiteSpace { get; public set; }
    [EditorBrowsableAttribute("2")]
public bool HasFieldsEnclosedInQuotes { get; public set; }
    private Regex BeginQuotesRegex { get; }
    private string EndQuotePattern { get; }
    private string WhitespaceCharacters { get; }
    private string WhitespacePattern { get; }
    public TextFieldParser(string path);
    public TextFieldParser(string path, Encoding defaultEncoding);
    public TextFieldParser(string path, Encoding defaultEncoding, bool detectEncoding);
    public TextFieldParser(Stream stream);
    public TextFieldParser(Stream stream, Encoding defaultEncoding);
    public TextFieldParser(Stream stream, Encoding defaultEncoding, bool detectEncoding);
    public TextFieldParser(Stream stream, Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);
    public TextFieldParser(TextReader reader);
    public String[] get_CommentTokens();
    public void set_CommentTokens(String[] value);
    public bool get_EndOfData();
    public long get_LineNumber();
    public string get_ErrorLine();
    public long get_ErrorLineNumber();
    public FieldType get_TextFieldType();
    public void set_TextFieldType(FieldType value);
    public Int32[] get_FieldWidths();
    public void set_FieldWidths(Int32[] value);
    public String[] get_Delimiters();
    public void set_Delimiters(String[] value);
    public void SetDelimiters(String[] delimiters);
    public void SetFieldWidths(Int32[] fieldWidths);
    public bool get_TrimWhiteSpace();
    public void set_TrimWhiteSpace(bool value);
    [EditorBrowsableAttribute("2")]
public string ReadLine();
    public String[] ReadFields();
    public string PeekChars(int numberOfChars);
    [EditorBrowsableAttribute("2")]
public string ReadToEnd();
    public bool get_HasFieldsEnclosedInQuotes();
    public void set_HasFieldsEnclosedInQuotes(bool value);
    [EditorBrowsableAttribute("2")]
public void Close();
    public sealed virtual override void Dispose();
    protected virtual void Dispose(bool disposing);
    private void ValidateFieldTypeEnumValue(FieldType value, string paramName);
    protected virtual void Finalize();
    private void CloseReader();
    private void FinishReading();
    private void InitializeFromPath(string path, Encoding defaultEncoding, bool detectEncoding);
    private void InitializeFromStream(Stream stream, Encoding defaultEncoding, bool detectEncoding);
    private string ValidatePath(string path);
    private bool IgnoreLine(string line);
    private int ReadToBuffer();
    private int SlideCursorToStartOfBuffer();
    private int IncreaseBufferSize();
    private string ReadNextDataLine();
    private string PeekNextDataLine();
    private string ReadNextLine(Int32& Cursor, ChangeBufferFunction ChangeBuffer);
    private String[] ParseDelimitedLine();
    private String[] ParseFixedWidthLine();
    private string GetFixedWidthField(StringInfo Line, int Index, int FieldLength);
    private int GetEndOfLineIndex(string Line);
    private void ValidateFixedWidthLine(StringInfo Line, long LineNumber);
    private void ValidateFieldWidths();
    private void ValidateFieldWidthsOnInput(Int32[] Widths);
    private void ValidateAndEscapeDelimiters();
    private void ValidateReadyToRead();
    private void ValidateDelimiters(String[] delimiterArray);
    private bool ArrayHasChanged();
    private void CheckCommentTokensForWhitespace(String[] tokens);
    private Regex get_BeginQuotesRegex();
    private string get_EndQuotePattern();
    private string get_WhitespaceCharacters();
    private string get_WhitespacePattern();
    private bool CharacterIsInDelimiter(char testCharacter);
}
public enum Microsoft.VisualBasic.FileIO.UICancelOption : Enum {
    public int value__;
    public static UICancelOption DoNothing;
    public static UICancelOption ThrowException;
}
public enum Microsoft.VisualBasic.FileIO.UIOption : Enum {
    public int value__;
    public static UIOption OnlyErrorDialogs;
    public static UIOption AllDialogs;
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.FileSystem : object {
    internal static DateTimeFormatInfo m_WriteDateFormatInfo;
    private static FileSystem();
    private static DateTimeFormatInfo InitializeWriteDateFormatInfo();
    public static void ChDir(string Path);
    [SupportedOSPlatformAttribute("windows")]
public static void ChDrive(char Drive);
    [SupportedOSPlatformAttribute("windows")]
public static void ChDrive(string Drive);
    public static string CurDir();
    [SupportedOSPlatformAttribute("windows")]
public static string CurDir(char Drive);
    public static string Dir();
    [SupportedOSPlatformAttribute("windows")]
public static string Dir(string PathName, FileAttribute Attributes);
    public static void MkDir(string Path);
    public static void RmDir(string Path);
    private static bool PathContainsWildcards(string Path);
    public static void FileCopy(string Source, string Destination);
    public static DateTime FileDateTime(string PathName);
    public static long FileLen(string PathName);
    public static FileAttribute GetAttr(string PathName);
    public static void Kill(string PathName);
    public static void SetAttr(string PathName, FileAttribute Attributes);
    private static bool UnsafeValidDrive(char cDrive);
    private static void ValidateAccess(OpenAccess Access);
    private static void ValidateShare(OpenShare Share);
    private static void ValidateMode(OpenMode Mode);
    public static void FileOpen(int FileNumber, string FileName, OpenMode Mode, OpenAccess Access, OpenShare Share, int RecordLength);
    public static void FileClose(Int32[] FileNumbers);
    private static void ValidateGetPutRecordNumber(long RecordNumber);
    [RequiresUnreferencedCodeAttribute("The target object type could not be statically analyzed and may be trimmed")]
public static void FileGetObject(int FileNumber, Object& Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("The target object type could not be statically analyzed and may be trimmed")]
public static void FileGet(int FileNumber, ValueType& Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("The target object type could not be statically analyzed and may be trimmed")]
public static void FileGet(int FileNumber, Array& Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    public static void FileGet(int FileNumber, Boolean& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Byte& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int16& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int32& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int64& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Char& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Single& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Double& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Decimal& Value, long RecordNumber);
    public static void FileGet(int FileNumber, String& Value, long RecordNumber, bool StringIsFixedLength);
    public static void FileGet(int FileNumber, DateTime& Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("The origin object type could not be statically analyzed and may be trimmed")]
public static void FilePutObject(int FileNumber, object Value, long RecordNumber);
    [ObsoleteAttribute("FileSystem.FilePut has been deprecated. Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types.")]
public static void FilePut(object FileNumber, object Value, object RecordNumber);
    [RequiresUnreferencedCodeAttribute("The origin object type could not be statically analyzed and may be trimmed")]
public static void FilePut(int FileNumber, ValueType Value, long RecordNumber);
    [RequiresUnreferencedCodeAttribute("The origin object type could not be statically analyzed and may be trimmed")]
public static void FilePut(int FileNumber, Array Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    public static void FilePut(int FileNumber, bool Value, long RecordNumber);
    public static void FilePut(int FileNumber, byte Value, long RecordNumber);
    public static void FilePut(int FileNumber, short Value, long RecordNumber);
    public static void FilePut(int FileNumber, int Value, long RecordNumber);
    public static void FilePut(int FileNumber, long Value, long RecordNumber);
    public static void FilePut(int FileNumber, char Value, long RecordNumber);
    public static void FilePut(int FileNumber, float Value, long RecordNumber);
    public static void FilePut(int FileNumber, double Value, long RecordNumber);
    public static void FilePut(int FileNumber, decimal Value, long RecordNumber);
    public static void FilePut(int FileNumber, string Value, long RecordNumber, bool StringIsFixedLength);
    public static void FilePut(int FileNumber, DateTime Value, long RecordNumber);
    public static void Print(int FileNumber, Object[] Output);
    public static void PrintLine(int FileNumber, Object[] Output);
    [RequiresUnreferencedCodeAttribute("The target object type could not be statically analyzed and may be trimmed")]
public static void Input(int FileNumber, Object& Value);
    public static void Input(int FileNumber, Boolean& Value);
    public static void Input(int FileNumber, Byte& Value);
    public static void Input(int FileNumber, Int16& Value);
    public static void Input(int FileNumber, Int32& Value);
    public static void Input(int FileNumber, Int64& Value);
    public static void Input(int FileNumber, Char& Value);
    public static void Input(int FileNumber, Single& Value);
    public static void Input(int FileNumber, Double& Value);
    public static void Input(int FileNumber, Decimal& Value);
    public static void Input(int FileNumber, String& Value);
    public static void Input(int FileNumber, DateTime& Value);
    public static void Write(int FileNumber, Object[] Output);
    public static void WriteLine(int FileNumber, Object[] Output);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static string InputString(int FileNumber, int CharCount);
    public static string LineInput(int FileNumber);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Lock(int FileNumber);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Lock(int FileNumber, long Record);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Lock(int FileNumber, long FromRecord, long ToRecord);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Unlock(int FileNumber);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Unlock(int FileNumber, long Record);
    [UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("macos")]
[UnsupportedOSPlatformAttribute("tvos")]
public static void Unlock(int FileNumber, long FromRecord, long ToRecord);
    public static void FileWidth(int FileNumber, int RecordWidth);
    public static int FreeFile();
    public static void Seek(int FileNumber, long Position);
    public static long Seek(int FileNumber);
    public static bool EOF(int FileNumber);
    public static long Loc(int FileNumber);
    public static long LOF(int FileNumber);
    public static TabInfo TAB();
    public static TabInfo TAB(short Column);
    public static SpcInfo SPC(short Count);
    public static OpenMode FileAttr(int FileNumber);
    public static void Reset();
    [SupportedOSPlatformAttribute("windows")]
public static void Rename(string OldPath, string NewPath);
    private static VB6File GetStream(Assembly assem, int FileNumber);
    private static VB6File GetStream(Assembly assem, int FileNumber, OpenModeTypes mode);
    private static OpenModeTypes OpenModeTypesFromOpenMode(OpenMode om);
    internal static void CloseAllFiles(Assembly assem);
    internal static void CloseAllFiles(AssemblyData oAssemblyData);
    private static void InternalCloseFile(AssemblyData oAssemblyData, int FileNumber);
    internal static string VB6CheckPathname(AssemblyData oAssemblyData, string sPath, OpenMode mode);
    internal static bool CheckFileOpen(AssemblyData oAssemblyData, string sPath, OpenModeTypes NewFileMode);
    private static void vbIOOpenFile(Assembly assem, int FileNumber, string FileName, OpenMode Mode, OpenAccess Access, OpenShare Share, int RecordLength);
    private static void AddFileToList(AssemblyData oAssemblyData, int FileNumber, VB6File oFile);
    internal static VB6File GetChannelObj(Assembly assem, int FileNumber);
    private static VB6File GetChannelOrNull(AssemblyData oAssemblyData, int FileNumber);
    private static void CheckInputCapable(VB6File oFile);
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Financial : object {
    public static double DDB(double Cost, double Salvage, double Life, double Period, double Factor);
    public static double FV(double Rate, double NPer, double Pmt, double PV, DueDate Due);
    private static double FV_Internal(double Rate, double NPer, double Pmt, double PV, DueDate Due);
    public static double IPmt(double Rate, double Per, double NPer, double PV, double FV, DueDate Due);
    public static double IRR(Double[]& ValueArray, double Guess);
    public static double MIRR(Double[]& ValueArray, double FinanceRate, double ReinvestRate);
    public static double NPer(double Rate, double Pmt, double PV, double FV, DueDate Due);
    public static double NPV(double Rate, Double[]& ValueArray);
    public static double Pmt(double Rate, double NPer, double PV, double FV, DueDate Due);
    private static double PMT_Internal(double Rate, double NPer, double PV, double FV, DueDate Due);
    public static double PPmt(double Rate, double Per, double NPer, double PV, double FV, DueDate Due);
    public static double PV(double Rate, double NPer, double Pmt, double FV, DueDate Due);
    public static double Rate(double NPer, double Pmt, double PV, double FV, DueDate Due, double Guess);
    public static double SLN(double Cost, double Salvage, double Life);
    public static double SYD(double Cost, double Salvage, double Life, double Period);
    private static double LEvalRate(double Rate, double NPer, double Pmt, double PV, double dFv, DueDate Due);
    private static double LDoNPV(double Rate, Double[]& ValueArray, int iWNType);
    private static double OptPV2(Double[]& ValueArray, double Guess);
}
public enum Microsoft.VisualBasic.FirstDayOfWeek : Enum {
    public int value__;
    public static FirstDayOfWeek System;
    public static FirstDayOfWeek Sunday;
    public static FirstDayOfWeek Monday;
    public static FirstDayOfWeek Tuesday;
    public static FirstDayOfWeek Wednesday;
    public static FirstDayOfWeek Thursday;
    public static FirstDayOfWeek Friday;
    public static FirstDayOfWeek Saturday;
}
public enum Microsoft.VisualBasic.FirstWeekOfYear : Enum {
    public int value__;
    public static FirstWeekOfYear System;
    public static FirstWeekOfYear Jan1;
    public static FirstWeekOfYear FirstFourDays;
    public static FirstWeekOfYear FirstFullWeek;
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.VisualBasic.ForEachEnum : object {
    private bool mDisposed;
    private Collection mCollectionObject;
    private Node mCurrent;
    private Node mNext;
    private bool mAtBeginning;
    internal WeakReference WeakRef;
    public object Current { get; }
    public ForEachEnum(Collection coll);
    private sealed virtual override void Dispose();
    public sealed virtual override bool MoveNext();
    public sealed virtual override void Reset();
    public sealed virtual override object get_Current();
    public void Adjust(Node Node, AdjustIndexType Type);
    internal void AdjustOnListCleared();
}
internal class Microsoft.VisualBasic.FormatInfoHolder : object {
    private NumberFormatInfo nfi;
    internal FormatInfoHolder(NumberFormatInfo nfi);
    private sealed virtual override object GetFormat(Type service);
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.HideModuleNameAttribute : Attribute {
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Information : object {
    private static Int32[] QBColorTable;
    private static Information();
    public static ErrObject Err();
    public static int Erl();
    public static bool IsArray(object VarName);
    public static bool IsDate(object Expression);
    public static bool IsDBNull(object Expression);
    public static bool IsNothing(object Expression);
    public static bool IsError(object Expression);
    public static bool IsReference(object Expression);
    public static int LBound(Array Array, int Rank);
    public static int UBound(Array Array, int Rank);
    internal static string TypeNameOfCOMObject(object VarName, bool bThrowException);
    public static int QBColor(int Color);
    public static int RGB(int Red, int Green, int Blue);
    public static VariantType VarType(object VarName);
    internal static VariantType VarTypeFromComType(Type typ);
    internal static bool IsOldNumericTypeCode(TypeCode TypCode);
    public static bool IsNumeric(object Expression);
    internal static string OldVBFriendlyNameOfTypeName(string typename);
    public static string TypeName(object VarName);
    public static string SystemTypeName(string VbName);
    public static string VbTypeName(string UrtName);
    internal static string OldVbTypeName(string UrtName);
    internal static string LegacyTypeNameOfCOMObject(object VarName, bool bThrowException);
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Interaction : object {
    private static SortedList m_SortedEnvList;
    private static string m_CommandLine;
    private static object m_EnvironSyncObject;
    private static Interaction();
    public static int Shell(string PathName, AppWinStyle Style, bool Wait, int Timeout);
    public static void AppActivate(int ProcessId);
    public static void AppActivate(string Title);
    public static string Command();
    public static string Environ(int Expression);
    public static string Environ(string Expression);
    [SupportedOSPlatformAttribute("windows")]
public static void Beep();
    public static string InputBox(string Prompt, string Title, string DefaultResponse, int XPos, int YPos);
    public static MsgBoxResult MsgBox(object Prompt, MsgBoxStyle Buttons, object Title);
    private static object InvokeMethod(string methodName, Object[] args);
    public static object Choose(double Index, Object[] Choice);
    public static object IIf(bool Expression, object TruePart, object FalsePart);
    internal static T IIf(bool condition, T truePart, T falsePart);
    public static string Partition(long Number, long Start, long Stop, long Interval);
    private static void InsertSpaces(String& Buffer, long Spaces);
    private static void InsertNumber(String& Buffer, long Num, long Spaces);
    public static object Switch(Object[] VarExpr);
    [SupportedOSPlatformAttribute("windows")]
public static void DeleteSetting(string AppName, string Section, string Key);
    [SupportedOSPlatformAttribute("windows")]
public static String[0...,0...] GetAllSettings(string AppName, string Section);
    [SupportedOSPlatformAttribute("windows")]
public static string GetSetting(string AppName, string Section, string Key, string Default);
    [SupportedOSPlatformAttribute("windows")]
public static void SaveSetting(string AppName, string Section, string Key, string Setting);
    private static string FormRegKey(string sApp, string sSect);
    private static void CheckPathComponent(string s);
    [SupportedOSPlatformAttribute("windows")]
[RequiresUnreferencedCodeAttribute("The COM object to be created cannot be statically analyzed and may be trimmed")]
public static object CreateObject(string ProgId, string ServerName);
    [SupportedOSPlatformAttribute("windows")]
[RequiresUnreferencedCodeAttribute("The COM component to be returned cannot be statically analyzed and may be trimmed")]
public static object GetObject(string PathName, string Class);
    [RequiresUnreferencedCodeAttribute("The type of ObjectRef cannot be statically analyzed and its members may be trimmed.")]
public static object CallByName(object ObjectRef, string ProcName, CallType UseCallType, Object[] Args);
}
public enum Microsoft.VisualBasic.MsgBoxResult : Enum {
    public int value__;
    public static MsgBoxResult Ok;
    public static MsgBoxResult Cancel;
    public static MsgBoxResult Abort;
    public static MsgBoxResult Retry;
    public static MsgBoxResult Ignore;
    public static MsgBoxResult Yes;
    public static MsgBoxResult No;
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.MsgBoxStyle : Enum {
    public int value__;
    public static MsgBoxStyle OkOnly;
    public static MsgBoxStyle OkCancel;
    public static MsgBoxStyle AbortRetryIgnore;
    public static MsgBoxStyle YesNoCancel;
    public static MsgBoxStyle YesNo;
    public static MsgBoxStyle RetryCancel;
    public static MsgBoxStyle Critical;
    public static MsgBoxStyle Question;
    public static MsgBoxStyle Exclamation;
    public static MsgBoxStyle Information;
    public static MsgBoxStyle DefaultButton1;
    public static MsgBoxStyle DefaultButton2;
    public static MsgBoxStyle DefaultButton3;
    public static MsgBoxStyle ApplicationModal;
    public static MsgBoxStyle SystemModal;
    public static MsgBoxStyle MsgBoxHelp;
    public static MsgBoxStyle MsgBoxRight;
    public static MsgBoxStyle MsgBoxRtlReading;
    public static MsgBoxStyle MsgBoxSetForeground;
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.MyGroupCollectionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string _MyGroupName;
    [CompilerGeneratedAttribute]
private string _CreateMethod;
    [CompilerGeneratedAttribute]
private string _DisposeMethod;
    [CompilerGeneratedAttribute]
private string _DefaultInstanceAlias;
    public string MyGroupName { get; }
    public string CreateMethod { get; }
    public string DisposeMethod { get; }
    public string DefaultInstanceAlias { get; }
    public MyGroupCollectionAttribute(string typeToCollect, string createInstanceMethodName, string disposeInstanceMethodName, string defaultInstanceAlias);
    [CompilerGeneratedAttribute]
public string get_MyGroupName();
    [CompilerGeneratedAttribute]
public string get_CreateMethod();
    [CompilerGeneratedAttribute]
public string get_DisposeMethod();
    [CompilerGeneratedAttribute]
public string get_DefaultInstanceAlias();
}
public enum Microsoft.VisualBasic.OpenAccess : Enum {
    public int value__;
    public static OpenAccess Default;
    public static OpenAccess Read;
    public static OpenAccess ReadWrite;
    public static OpenAccess Write;
}
public enum Microsoft.VisualBasic.OpenMode : Enum {
    public int value__;
    public static OpenMode Input;
    public static OpenMode Output;
    public static OpenMode Random;
    public static OpenMode Append;
    public static OpenMode Binary;
}
internal enum Microsoft.VisualBasic.OpenModeTypes : Enum {
    public int value__;
    public static OpenModeTypes Input;
    public static OpenModeTypes Output;
    public static OpenModeTypes Random;
    public static OpenModeTypes Append;
    public static OpenModeTypes Binary;
    public static OpenModeTypes Any;
}
public enum Microsoft.VisualBasic.OpenShare : Enum {
    public int value__;
    public static OpenShare Default;
    public static OpenShare Shared;
    public static OpenShare LockRead;
    public static OpenShare LockReadWrite;
    public static OpenShare LockWrite;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.SpcInfo : ValueType {
    public short Count;
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Strings : object {
    private static String[] CurrencyPositiveFormatStrings;
    private static String[] CurrencyNegativeFormatStrings;
    private static String[] NumberNegativeFormatStrings;
    internal static CompareInfo m_InvariantCompareInfo;
    private static object m_SyncObject;
    private static CultureInfo m_LastUsedYesNoCulture;
    private static string m_CachedYesNoFormatStyle;
    private static CultureInfo m_LastUsedOnOffCulture;
    private static string m_CachedOnOffFormatStyle;
    private static CultureInfo m_LastUsedTrueFalseCulture;
    private static string m_CachedTrueFalseFormatStyle;
    private static string CachedYesNoFormatStyle { get; }
    private static string CachedOnOffFormatStyle { get; }
    private static string CachedTrueFalseFormatStyle { get; }
    private static Strings();
    private static string get_CachedYesNoFormatStyle();
    private static string get_CachedOnOffFormatStyle();
    private static string get_CachedTrueFalseFormatStyle();
    private static int PRIMARYLANGID(int lcid);
    private static Encoding GetAscChrEncoding();
    public static int Asc(char String);
    public static int Asc(string String);
    public static int AscW(string String);
    public static int AscW(char String);
    public static char Chr(int CharCode);
    public static char ChrW(int CharCode);
    public static String[] Filter(Object[] Source, string Match, bool Include, CompareMethod Compare);
    public static String[] Filter(String[] Source, string Match, bool Include, CompareMethod Compare);
    public static int InStr(string String1, string String2, CompareMethod Compare);
    public static int InStr(int Start, string String1, string String2, CompareMethod Compare);
    private static int InternalInStrBinary(int StartPos, string sSrc, string sFind);
    private static int InternalInStrText(int lStartPos, string sSrc, string sFind);
    public static int InStrRev(string StringCheck, string StringMatch, int Start, CompareMethod Compare);
    public static string Join(Object[] SourceArray, string Delimiter);
    public static string Join(String[] SourceArray, string Delimiter);
    public static string LCase(string Value);
    public static char LCase(char Value);
    public static int Len(bool Expression);
    [CLSCompliantAttribute("False")]
public static int Len(sbyte Expression);
    public static int Len(byte Expression);
    public static int Len(short Expression);
    [CLSCompliantAttribute("False")]
public static int Len(ushort Expression);
    public static int Len(int Expression);
    [CLSCompliantAttribute("False")]
public static int Len(UInt32 Expression);
    public static int Len(long Expression);
    [CLSCompliantAttribute("False")]
public static int Len(ulong Expression);
    public static int Len(decimal Expression);
    public static int Len(float Expression);
    public static int Len(double Expression);
    public static int Len(DateTime Expression);
    public static int Len(char Expression);
    public static int Len(string Expression);
    [RequiresUnreferencedCodeAttribute("The object's type cannot be statically analyzed and its members may be trimmed")]
public static int Len(object Expression);
    public static string Replace(string Expression, string Find, string Replacement, int Start, int Count, CompareMethod Compare);
    private static string ReplaceInternal(string Expression, string Find, string Replacement, int Count, CompareMethod Compare);
    public static string Space(int Number);
    public static String[] Split(string Expression, string Delimiter, int Limit, CompareMethod Compare);
    private static String[] SplitHelper(string sSrc, string sFind, int cMaxSubStrings, int Compare);
    public static string LSet(string Source, int Length);
    public static string RSet(string Source, int Length);
    public static object StrDup(int Number, object Character);
    public static string StrDup(int Number, char Character);
    public static string StrDup(int Number, string Character);
    public static string StrReverse(string Expression);
    public static string UCase(string Value);
    public static char UCase(char Value);
    private static bool FormatNamed(object Expression, string Style, String& ReturnValue);
    public static string Format(object Expression, string Style);
    public static string FormatCurrency(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static string FormatDateTime(DateTime Expression, DateFormat NamedFormat);
    public static string FormatNumber(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    internal static string GetFormatString(int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits, FormatType FormatTypeValue);
    internal static string GetCurrencyFormatString(TriState IncludeLeadingDigit, int NumDigitsAfterDecimal, TriState UseParensForNegativeNumbers, TriState GroupDigits, IFormatProvider& formatProvider);
    internal static string GetNumberFormatString(int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static string FormatPercent(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static char GetChar(string str, int Index);
    public static string Left(string str, int Length);
    public static string LTrim(string str);
    public static string Mid(string str, int Start);
    public static string Mid(string str, int Start, int Length);
    public static string Right(string str, int Length);
    public static string RTrim(string str);
    public static string Trim(string str);
    public static int StrComp(string String1, string String2, CompareMethod Compare);
    internal static bool IsValidCodePage(int codepage);
    [SupportedOSPlatformAttribute("windows")]
public static string StrConv(string str, VbStrConv Conversion, int LocaleID);
    internal static bool ValidLCID(int LocaleID);
    private static string ProperCaseString(CultureInfo loc, int dwMapFlags, string sSrc);
    internal static string vbLCMapString(CultureInfo loc, int dwMapFlags, string sSrc);
    private static void ValidateTriState(TriState Param);
    private static bool IsArrayEmpty(Array array);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.TabInfo : ValueType {
    public short Column;
}
public enum Microsoft.VisualBasic.TriState : Enum {
    public int value__;
    public static TriState False;
    public static TriState True;
    public static TriState UseDefault;
}
public enum Microsoft.VisualBasic.VariantType : Enum {
    public int value__;
    public static VariantType Empty;
    public static VariantType Null;
    public static VariantType Short;
    public static VariantType Integer;
    public static VariantType Single;
    public static VariantType Double;
    public static VariantType Currency;
    public static VariantType Date;
    public static VariantType String;
    public static VariantType Object;
    public static VariantType Error;
    public static VariantType Boolean;
    public static VariantType Variant;
    public static VariantType DataObject;
    public static VariantType Decimal;
    public static VariantType Byte;
    public static VariantType Char;
    public static VariantType Long;
    public static VariantType UserDefinedType;
    public static VariantType Array;
}
[AttributeUsageAttribute("256")]
public class Microsoft.VisualBasic.VBFixedArrayAttribute : Attribute {
    internal int FirstBound;
    internal int SecondBound;
    public Int32[] Bounds { get; }
    public int Length { get; }
    public VBFixedArrayAttribute(int UpperBound1);
    public VBFixedArrayAttribute(int UpperBound1, int UpperBound2);
    public Int32[] get_Bounds();
    public int get_Length();
}
[AttributeUsageAttribute("256")]
public class Microsoft.VisualBasic.VBFixedStringAttribute : Attribute {
    [CompilerGeneratedAttribute]
private int _Length;
    public int Length { get; }
    public VBFixedStringAttribute(int Length);
    [CompilerGeneratedAttribute]
public int get_Length();
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.VBMath : object {
    public static float Rnd();
    public static float Rnd(float Number);
    public static void Randomize();
    public static void Randomize(double Number);
    private static float GetTimer();
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.VbStrConv : Enum {
    public int value__;
    public static VbStrConv None;
    public static VbStrConv Uppercase;
    public static VbStrConv Lowercase;
    public static VbStrConv ProperCase;
    public static VbStrConv Wide;
    public static VbStrConv Narrow;
    public static VbStrConv Katakana;
    public static VbStrConv Hiragana;
    public static VbStrConv SimplifiedChinese;
    public static VbStrConv TraditionalChinese;
    public static VbStrConv LinguisticCasing;
}
internal class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ID91 { get; }
    internal static string ID92 { get; }
    internal static string Argument_GEZero1 { get; }
    internal static string Argument_GTZero1 { get; }
    internal static string Argument_InvalidVbStrConv { get; }
    internal static string Argument_StrConvSCandTC { get; }
    internal static string Argument_SCNotSupported { get; }
    internal static string Argument_TCNotSupported { get; }
    internal static string Argument_JPNNotSupported { get; }
    internal static string Argument_IllegalWideNarrow { get; }
    internal static string Argument_LocalNotSupported { get; }
    internal static string Argument_WideNarrowNotApplicable { get; }
    internal static string Argument_IllegalKataHira { get; }
    internal static string Argument_LengthGTZero1 { get; }
    internal static string Argument_RangeTwoBytes1 { get; }
    internal static string Argument_MinusOneOrGTZero1 { get; }
    internal static string Argument_GEMinusOne1 { get; }
    internal static string Argument_GEOne1 { get; }
    internal static string Argument_RankEQOne1 { get; }
    internal static string Argument_IComparable2 { get; }
    internal static string Argument_NotNumericType2 { get; }
    internal static string Argument_InvalidValue1 { get; }
    internal static string Argument_InvalidValueType2 { get; }
    internal static string Argument_PathNullOrEmpty { get; }
    internal static string Argument_PathNullOrEmpty1 { get; }
    internal static string Argument_InvalidPathChars1 { get; }
    internal static string Argument_InvalidValue { get; }
    internal static string Collection_BeforeAfterExclusive { get; }
    internal static string Collection_DuplicateKey { get; }
    internal static string FileSystem_IllegalInputAccess { get; }
    internal static string FileSystem_IllegalOutputAccess { get; }
    internal static string FileSystem_IllegalAppendAccess { get; }
    internal static string FileSystem_FileAlreadyOpen1 { get; }
    internal static string ForLoop_CommonType2 { get; }
    internal static string ForLoop_CommonType3 { get; }
    internal static string ForLoop_ConvertToType3 { get; }
    internal static string ForLoop_OperatorRequired2 { get; }
    internal static string ForLoop_UnacceptableOperator2 { get; }
    internal static string ForLoop_UnacceptableRelOperator2 { get; }
    internal static string InternalError_VisualBasicRuntime { get; }
    internal static string DIR_IllegalCall { get; }
    internal static string KILL_NoFilesFound1 { get; }
    internal static string MaxErrNumber { get; }
    internal static string FileSystem_DriveNotFound1 { get; }
    internal static string FileSystem_FileNotFound1 { get; }
    internal static string FileSystem_PathNotFound1 { get; }
    internal static string Financial_CalcDivByZero { get; }
    internal static string Financial_CannotCalculateNPer { get; }
    internal static string Financial_CannotCalculateRate { get; }
    internal static string Argument_InvalidNullValue1 { get; }
    internal static string Rate_NPerMustBeGTZero { get; }
    internal static string PPMT_PerGT0AndLTNPer { get; }
    internal static string Financial_LifeNEZero { get; }
    internal static string Financial_ArgGEZero1 { get; }
    internal static string Financial_ArgGTZero1 { get; }
    internal static string Financial_PeriodLELife { get; }
    internal static string Argument_InvalidRank1 { get; }
    internal static string Argument_Range1toFF1 { get; }
    internal static string Argument_Range0to99_1 { get; }
    internal static string Interaction_ResKeyNotCreated1 { get; }
    internal static string Argument_LCIDNotSupported1 { get; }
    internal static string InvalidCast_FromTo { get; }
    internal static string InvalidCast_FromStringTo { get; }
    internal static string SetLocalDateFailure { get; }
    internal static string SetLocalTimeFailure { get; }
    internal static string Argument_UnsupportedFieldType2 { get; }
    internal static string Argument_UnsupportedIOType1 { get; }
    internal static string Argument_InvalidDateValue1 { get; }
    internal static string UseFilePutObject { get; }
    internal static string ArgumentNotNumeric1 { get; }
    internal static string FileIO_StringLengthExceeded { get; }
    internal static string Argument_IndexLELength2 { get; }
    internal static string MissingMember_NoDefaultMemberFound1 { get; }
    internal static string MissingMember_MemberNotFoundOnType2 { get; }
    internal static string MissingMember_MemberSetNotFoundOnType2 { get; }
    internal static string MissingMember_MemberLetNotFoundOnType2 { get; }
    internal static string IntermediateLateBoundNothingResult1 { get; }
    internal static string YesNoFormatStyle { get; }
    internal static string OnOffFormatStyle { get; }
    internal static string TrueFalseFormatStyle { get; }
    internal static string Argument_CollectionIndex { get; }
    internal static string Argument_InvalidNamedArg2 { get; }
    internal static string NoMethodTakingXArguments2 { get; }
    internal static string NamedArgumentAlreadyUsed1 { get; }
    internal static string NamedArgumentOnParamArray { get; }
    internal static string LinguisticRequirements { get; }
    internal static string Argument_ArrayNotInitialized { get; }
    internal static string RValueBaseForValueType { get; }
    internal static string InvalidCast_FromToArg4 { get; }
    internal static string Argument_ArrayDimensionsDontMatch { get; }
    internal static string ExpressionNotProcedure { get; }
    internal static string AmbiguousCall_ExactMatch2 { get; }
    internal static string AmbiguousCall2 { get; }
    internal static string AmbiguousCall_WideningConversion2 { get; }
    internal static string AmbiguousMatch_NarrowingConversion1 { get; }
    internal static string LateboundCallToInheritedComClass { get; }
    internal static string MissingMember_ReadOnlyField2 { get; }
    internal static string Invalid_VBFixedArray { get; }
    internal static string Invalid_VBFixedString { get; }
    internal static string Argument_UnsupportedArrayDimensions { get; }
    internal static string Argument_InvalidFixedLengthString { get; }
    internal static string Argument_InvalidNamedArgs { get; }
    internal static string Argument_IllegalNestedType2 { get; }
    internal static string Argument_PutObjectOfValueType1 { get; }
    internal static string SyncLockRequiresReferenceType1 { get; }
    internal static string FileOpenedNoRead { get; }
    internal static string FileOpenedNoWrite { get; }
    internal static string NullReference_InstanceReqToAccessMember1 { get; }
    internal static string Security_LateBoundCallsNotPermitted { get; }
    internal static string MatchArgumentFailure2 { get; }
    internal static string NoGetProperty1 { get; }
    internal static string NoSetProperty1 { get; }
    internal static string MethodAssignment1 { get; }
    internal static string NoViableOverloadCandidates1 { get; }
    internal static string NoArgumentCountOverloadCandidates1 { get; }
    internal static string NoTypeArgumentCountOverloadCandidates1 { get; }
    internal static string NoCallableOverloadCandidates2 { get; }
    internal static string NoNonNarrowingOverloadCandidates2 { get; }
    internal static string NoMostSpecificOverload2 { get; }
    internal static string AmbiguousCast2 { get; }
    internal static string NotMostSpecificOverload { get; }
    internal static string NamedParamNotFound2 { get; }
    internal static string NamedParamArrayArgument1 { get; }
    internal static string NamedArgUsedTwice2 { get; }
    internal static string OmittedArgument1 { get; }
    internal static string OmittedParamArrayArgument { get; }
    internal static string ArgumentMismatch3 { get; }
    internal static string ArgumentMismatchAmbiguous3 { get; }
    internal static string ArgumentNarrowing3 { get; }
    internal static string ArgumentMismatchCopyBack3 { get; }
    internal static string ArgumentMismatchAmbiguousCopyBack3 { get; }
    internal static string ArgumentNarrowingCopyBack3 { get; }
    internal static string UnboundTypeParam1 { get; }
    internal static string TypeInferenceFails1 { get; }
    internal static string FailedTypeArgumentBinding { get; }
    internal static string NoValidOperator_OneOperand { get; }
    internal static string NoValidOperator_TwoOperands { get; }
    internal static string UnaryOperand2 { get; }
    internal static string BinaryOperands3 { get; }
    internal static string NoValidOperator_StringType1 { get; }
    internal static string NoValidOperator_NonStringType1 { get; }
    internal static string PropertySetMissingArgument1 { get; }
    internal static string EmptyPlaceHolderMessage { get; }
    internal static string IO_SpecialDirectoryNotExist { get; }
    internal static string IO_SpecialDirectory_MyDocuments { get; }
    internal static string IO_SpecialDirectory_MyMusic { get; }
    internal static string IO_SpecialDirectory_MyPictures { get; }
    internal static string IO_SpecialDirectory_Desktop { get; }
    internal static string IO_SpecialDirectory_Programs { get; }
    internal static string IO_SpecialDirectory_ProgramFiles { get; }
    internal static string IO_SpecialDirectory_Temp { get; }
    internal static string IO_SpecialDirectory_AllUserAppData { get; }
    internal static string IO_SpecialDirectory_UserAppData { get; }
    internal static string IO_FileExists_Path { get; }
    internal static string IO_FileNotFound_Path { get; }
    internal static string IO_DirectoryExists_Path { get; }
    internal static string IO_DirectoryIsRoot_Path { get; }
    internal static string IO_DirectoryNotFound_Path { get; }
    internal static string IO_GetParentPathIsRoot_Path { get; }
    internal static string IO_ArgumentIsPath_Name_Path { get; }
    internal static string IO_CopyMoveRecursive { get; }
    internal static string IO_CyclicOperation { get; }
    internal static string IO_SourceEqualsTargetDirectory { get; }
    internal static string IO_GetFiles_NullPattern { get; }
    internal static string IO_DevicePath { get; }
    internal static string IO_FilePathException { get; }
    internal static string General_ArgumentNullException { get; }
    internal static string General_ArgumentEmptyOrNothing_Name { get; }
    internal static string TextFieldParser_NumberOfCharsMustBePositive { get; }
    internal static string TextFieldParser_StreamNotReadable { get; }
    internal static string TextFieldParser_BufferExceededMaxSize { get; }
    internal static string TextFieldParser_MalFormedDelimitedLine { get; }
    internal static string TextFieldParser_MalFormedFixedWidthLine { get; }
    internal static string TextFieldParser_MaxLineSizeExceeded { get; }
    internal static string TextFieldParser_FieldWidthsNothing { get; }
    internal static string TextFieldParser_DelimitersNothing { get; }
    internal static string TextFieldParser_FieldWidthsMustPositive { get; }
    internal static string TextFieldParser_IllegalDelimiter { get; }
    internal static string TextFieldParser_DelimiterNothing { get; }
    internal static string TextFieldParser_InvalidComment { get; }
    internal static string TextFieldParser_MalformedExtraData { get; }
    internal static string TextFieldParser_WhitespaceInToken { get; }
    internal static string TextFieldParser_EndCharsInDelimiter { get; }
    internal static string MethodRequiresSystemWindowsForms { get; }
    public static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ID91();
    internal static string get_ID92();
    internal static string get_Argument_GEZero1();
    internal static string get_Argument_GTZero1();
    internal static string get_Argument_InvalidVbStrConv();
    internal static string get_Argument_StrConvSCandTC();
    internal static string get_Argument_SCNotSupported();
    internal static string get_Argument_TCNotSupported();
    internal static string get_Argument_JPNNotSupported();
    internal static string get_Argument_IllegalWideNarrow();
    internal static string get_Argument_LocalNotSupported();
    internal static string get_Argument_WideNarrowNotApplicable();
    internal static string get_Argument_IllegalKataHira();
    internal static string get_Argument_LengthGTZero1();
    internal static string get_Argument_RangeTwoBytes1();
    internal static string get_Argument_MinusOneOrGTZero1();
    internal static string get_Argument_GEMinusOne1();
    internal static string get_Argument_GEOne1();
    internal static string get_Argument_RankEQOne1();
    internal static string get_Argument_IComparable2();
    internal static string get_Argument_NotNumericType2();
    internal static string get_Argument_InvalidValue1();
    internal static string get_Argument_InvalidValueType2();
    internal static string get_Argument_PathNullOrEmpty();
    internal static string get_Argument_PathNullOrEmpty1();
    internal static string get_Argument_InvalidPathChars1();
    internal static string get_Argument_InvalidValue();
    internal static string get_Collection_BeforeAfterExclusive();
    internal static string get_Collection_DuplicateKey();
    internal static string get_FileSystem_IllegalInputAccess();
    internal static string get_FileSystem_IllegalOutputAccess();
    internal static string get_FileSystem_IllegalAppendAccess();
    internal static string get_FileSystem_FileAlreadyOpen1();
    internal static string get_ForLoop_CommonType2();
    internal static string get_ForLoop_CommonType3();
    internal static string get_ForLoop_ConvertToType3();
    internal static string get_ForLoop_OperatorRequired2();
    internal static string get_ForLoop_UnacceptableOperator2();
    internal static string get_ForLoop_UnacceptableRelOperator2();
    internal static string get_InternalError_VisualBasicRuntime();
    internal static string get_DIR_IllegalCall();
    internal static string get_KILL_NoFilesFound1();
    internal static string get_MaxErrNumber();
    internal static string get_FileSystem_DriveNotFound1();
    internal static string get_FileSystem_FileNotFound1();
    internal static string get_FileSystem_PathNotFound1();
    internal static string get_Financial_CalcDivByZero();
    internal static string get_Financial_CannotCalculateNPer();
    internal static string get_Financial_CannotCalculateRate();
    internal static string get_Argument_InvalidNullValue1();
    internal static string get_Rate_NPerMustBeGTZero();
    internal static string get_PPMT_PerGT0AndLTNPer();
    internal static string get_Financial_LifeNEZero();
    internal static string get_Financial_ArgGEZero1();
    internal static string get_Financial_ArgGTZero1();
    internal static string get_Financial_PeriodLELife();
    internal static string get_Argument_InvalidRank1();
    internal static string get_Argument_Range1toFF1();
    internal static string get_Argument_Range0to99_1();
    internal static string get_Interaction_ResKeyNotCreated1();
    internal static string get_Argument_LCIDNotSupported1();
    internal static string get_InvalidCast_FromTo();
    internal static string get_InvalidCast_FromStringTo();
    internal static string get_SetLocalDateFailure();
    internal static string get_SetLocalTimeFailure();
    internal static string get_Argument_UnsupportedFieldType2();
    internal static string get_Argument_UnsupportedIOType1();
    internal static string get_Argument_InvalidDateValue1();
    internal static string get_UseFilePutObject();
    internal static string get_ArgumentNotNumeric1();
    internal static string get_FileIO_StringLengthExceeded();
    internal static string get_Argument_IndexLELength2();
    internal static string get_MissingMember_NoDefaultMemberFound1();
    internal static string get_MissingMember_MemberNotFoundOnType2();
    internal static string get_MissingMember_MemberSetNotFoundOnType2();
    internal static string get_MissingMember_MemberLetNotFoundOnType2();
    internal static string get_IntermediateLateBoundNothingResult1();
    internal static string get_YesNoFormatStyle();
    internal static string get_OnOffFormatStyle();
    internal static string get_TrueFalseFormatStyle();
    internal static string get_Argument_CollectionIndex();
    internal static string get_Argument_InvalidNamedArg2();
    internal static string get_NoMethodTakingXArguments2();
    internal static string get_NamedArgumentAlreadyUsed1();
    internal static string get_NamedArgumentOnParamArray();
    internal static string get_LinguisticRequirements();
    internal static string get_Argument_ArrayNotInitialized();
    internal static string get_RValueBaseForValueType();
    internal static string get_InvalidCast_FromToArg4();
    internal static string get_Argument_ArrayDimensionsDontMatch();
    internal static string get_ExpressionNotProcedure();
    internal static string get_AmbiguousCall_ExactMatch2();
    internal static string get_AmbiguousCall2();
    internal static string get_AmbiguousCall_WideningConversion2();
    internal static string get_AmbiguousMatch_NarrowingConversion1();
    internal static string get_LateboundCallToInheritedComClass();
    internal static string get_MissingMember_ReadOnlyField2();
    internal static string get_Invalid_VBFixedArray();
    internal static string get_Invalid_VBFixedString();
    internal static string get_Argument_UnsupportedArrayDimensions();
    internal static string get_Argument_InvalidFixedLengthString();
    internal static string get_Argument_InvalidNamedArgs();
    internal static string get_Argument_IllegalNestedType2();
    internal static string get_Argument_PutObjectOfValueType1();
    internal static string get_SyncLockRequiresReferenceType1();
    internal static string get_FileOpenedNoRead();
    internal static string get_FileOpenedNoWrite();
    internal static string get_NullReference_InstanceReqToAccessMember1();
    internal static string get_Security_LateBoundCallsNotPermitted();
    internal static string get_MatchArgumentFailure2();
    internal static string get_NoGetProperty1();
    internal static string get_NoSetProperty1();
    internal static string get_MethodAssignment1();
    internal static string get_NoViableOverloadCandidates1();
    internal static string get_NoArgumentCountOverloadCandidates1();
    internal static string get_NoTypeArgumentCountOverloadCandidates1();
    internal static string get_NoCallableOverloadCandidates2();
    internal static string get_NoNonNarrowingOverloadCandidates2();
    internal static string get_NoMostSpecificOverload2();
    internal static string get_AmbiguousCast2();
    internal static string get_NotMostSpecificOverload();
    internal static string get_NamedParamNotFound2();
    internal static string get_NamedParamArrayArgument1();
    internal static string get_NamedArgUsedTwice2();
    internal static string get_OmittedArgument1();
    internal static string get_OmittedParamArrayArgument();
    internal static string get_ArgumentMismatch3();
    internal static string get_ArgumentMismatchAmbiguous3();
    internal static string get_ArgumentNarrowing3();
    internal static string get_ArgumentMismatchCopyBack3();
    internal static string get_ArgumentMismatchAmbiguousCopyBack3();
    internal static string get_ArgumentNarrowingCopyBack3();
    internal static string get_UnboundTypeParam1();
    internal static string get_TypeInferenceFails1();
    internal static string get_FailedTypeArgumentBinding();
    internal static string get_NoValidOperator_OneOperand();
    internal static string get_NoValidOperator_TwoOperands();
    internal static string get_UnaryOperand2();
    internal static string get_BinaryOperands3();
    internal static string get_NoValidOperator_StringType1();
    internal static string get_NoValidOperator_NonStringType1();
    internal static string get_PropertySetMissingArgument1();
    internal static string get_EmptyPlaceHolderMessage();
    internal static string get_IO_SpecialDirectoryNotExist();
    internal static string get_IO_SpecialDirectory_MyDocuments();
    internal static string get_IO_SpecialDirectory_MyMusic();
    internal static string get_IO_SpecialDirectory_MyPictures();
    internal static string get_IO_SpecialDirectory_Desktop();
    internal static string get_IO_SpecialDirectory_Programs();
    internal static string get_IO_SpecialDirectory_ProgramFiles();
    internal static string get_IO_SpecialDirectory_Temp();
    internal static string get_IO_SpecialDirectory_AllUserAppData();
    internal static string get_IO_SpecialDirectory_UserAppData();
    internal static string get_IO_FileExists_Path();
    internal static string get_IO_FileNotFound_Path();
    internal static string get_IO_DirectoryExists_Path();
    internal static string get_IO_DirectoryIsRoot_Path();
    internal static string get_IO_DirectoryNotFound_Path();
    internal static string get_IO_GetParentPathIsRoot_Path();
    internal static string get_IO_ArgumentIsPath_Name_Path();
    internal static string get_IO_CopyMoveRecursive();
    internal static string get_IO_CyclicOperation();
    internal static string get_IO_SourceEqualsTargetDirectory();
    internal static string get_IO_GetFiles_NullPattern();
    internal static string get_IO_DevicePath();
    internal static string get_IO_FilePathException();
    internal static string get_General_ArgumentNullException();
    internal static string get_General_ArgumentEmptyOrNothing_Name();
    internal static string get_TextFieldParser_NumberOfCharsMustBePositive();
    internal static string get_TextFieldParser_StreamNotReadable();
    internal static string get_TextFieldParser_BufferExceededMaxSize();
    internal static string get_TextFieldParser_MalFormedDelimitedLine();
    internal static string get_TextFieldParser_MalFormedFixedWidthLine();
    internal static string get_TextFieldParser_MaxLineSizeExceeded();
    internal static string get_TextFieldParser_FieldWidthsNothing();
    internal static string get_TextFieldParser_DelimitersNothing();
    internal static string get_TextFieldParser_FieldWidthsMustPositive();
    internal static string get_TextFieldParser_IllegalDelimiter();
    internal static string get_TextFieldParser_DelimiterNothing();
    internal static string get_TextFieldParser_InvalidComment();
    internal static string get_TextFieldParser_MalformedExtraData();
    internal static string get_TextFieldParser_WhitespaceInToken();
    internal static string get_TextFieldParser_EndCharsInDelimiter();
    internal static string get_MethodRequiresSystemWindowsForms();
}
