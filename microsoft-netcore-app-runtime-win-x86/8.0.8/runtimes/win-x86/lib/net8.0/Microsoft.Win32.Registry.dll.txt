internal static class FxResources.Microsoft.Win32.Registry.SR : object {
}
internal static class Interop : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Win32.Registry : object {
    public static RegistryKey CurrentUser;
    public static RegistryKey LocalMachine;
    public static RegistryKey ClassesRoot;
    public static RegistryKey Users;
    public static RegistryKey PerformanceData;
    public static RegistryKey CurrentConfig;
    private static Registry();
    private static RegistryKey GetBaseKeyFromKeyName(string keyName, String& subKeyName);
    [NullableContextAttribute("2")]
public static object GetValue(string keyName, string valueName, object defaultValue);
    public static void SetValue(string keyName, string valueName, object value);
    public static void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind);
}
public enum Microsoft.Win32.RegistryHive : Enum {
    public int value__;
    public static RegistryHive ClassesRoot;
    public static RegistryHive CurrentUser;
    public static RegistryHive LocalMachine;
    public static RegistryHive Users;
    public static RegistryHive PerformanceData;
    public static RegistryHive CurrentConfig;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Win32.RegistryKey : MarshalByRefObject {
    private static IntPtr HKEY_CLASSES_ROOT;
    private static IntPtr HKEY_CURRENT_USER;
    private static IntPtr HKEY_LOCAL_MACHINE;
    private static IntPtr HKEY_USERS;
    private static IntPtr HKEY_PERFORMANCE_DATA;
    private static IntPtr HKEY_CURRENT_CONFIG;
    private static String[] s_hkeyNames;
    private SafeRegistryHandle modreq(System.Runtime.CompilerServices.IsVolatile) _hkey;
    private String modreq(System.Runtime.CompilerServices.IsVolatile) _keyName;
    private bool _remoteKey;
    private StateFlags modreq(System.Runtime.CompilerServices.IsVolatile) _state;
    private RegistryKeyPermissionCheck modreq(System.Runtime.CompilerServices.IsVolatile) _checkMode;
    private RegistryView _regView;
    public int SubKeyCount { get; }
    public RegistryView View { get; }
    public SafeRegistryHandle Handle { get; }
    public int ValueCount { get; }
    public string Name { get; }
    private RegistryKey(SafeRegistryHandle hkey, bool writable, RegistryView view);
    private RegistryKey(SafeRegistryHandle hkey, bool writable, bool systemkey, bool remoteKey, bool isPerfData, RegistryView view);
    private static RegistryKey();
    public void Flush();
    public void Close();
    public sealed virtual void Dispose();
    public RegistryKey CreateSubKey(string subkey);
    public RegistryKey CreateSubKey(string subkey, bool writable);
    public RegistryKey CreateSubKey(string subkey, bool writable, RegistryOptions options);
    public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck);
    public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck, RegistryOptions registryOptions, RegistrySecurity registrySecurity);
    public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck, RegistrySecurity registrySecurity);
    public RegistryKey CreateSubKey(string subkey, RegistryKeyPermissionCheck permissionCheck, RegistryOptions registryOptions);
    public void DeleteSubKey(string subkey);
    public void DeleteSubKey(string subkey, bool throwOnMissingSubKey);
    public void DeleteSubKeyTree(string subkey);
    public void DeleteSubKeyTree(string subkey, bool throwOnMissingSubKey);
    public void DeleteValue(string name);
    public void DeleteValue(string name, bool throwOnMissingValue);
    public static RegistryKey OpenBaseKey(RegistryHive hKey, RegistryView view);
    public static RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName);
    public static RegistryKey OpenRemoteBaseKey(RegistryHive hKey, string machineName, RegistryView view);
    public RegistryKey OpenSubKey(string name);
    public RegistryKey OpenSubKey(string name, bool writable);
    public RegistryKey OpenSubKey(string name, RegistryKeyPermissionCheck permissionCheck);
    public RegistryKey OpenSubKey(string name, RegistryRights rights);
    public RegistryKey OpenSubKey(string name, RegistryKeyPermissionCheck permissionCheck, RegistryRights rights);
    internal RegistryKey InternalOpenSubKeyWithoutSecurityChecks(string name, bool writable);
    public RegistrySecurity GetAccessControl();
    public RegistrySecurity GetAccessControl(AccessControlSections includeSections);
    public void SetAccessControl(RegistrySecurity registrySecurity);
    public int get_SubKeyCount();
    public RegistryView get_View();
    public SafeRegistryHandle get_Handle();
    private SafeRegistryHandle GetSystemKeyHandle();
    private static int GetRegistryKeyAccess(RegistryKeyPermissionCheck mode);
    private static int GetRegistryKeyAccess(bool isWritable);
    public static RegistryKey FromHandle(SafeRegistryHandle handle);
    public static RegistryKey FromHandle(SafeRegistryHandle handle, RegistryView view);
    public String[] GetSubKeyNames();
    public int get_ValueCount();
    public String[] GetValueNames();
    [NullableContextAttribute("2")]
public object GetValue(string name);
    [NullableContextAttribute("2")]
public object GetValue(string name, object defaultValue);
    [NullableContextAttribute("2")]
public object GetValue(string name, object defaultValue, RegistryValueOptions options);
    private object InternalGetValue(string name, object defaultValue, bool doNotExpand);
    [NullableContextAttribute("2")]
public RegistryValueKind GetValueKind(string name);
    public string get_Name();
    public void SetValue(string name, object value);
    public void SetValue(string name, object value, RegistryValueKind valueKind);
    private static RegistryValueKind CalculateValueKind(object value);
    public virtual string ToString();
    private static string FixupName(string name);
    private static void FixupPath(StringBuilder path);
    private void EnsureNotDisposed();
    private void EnsureWriteable();
    private RegistryKeyPermissionCheck GetSubKeyPermissionCheck(bool subkeyWritable);
    private static void ValidateKeyName(string name);
    private static void ValidateKeyMode(RegistryKeyPermissionCheck mode);
    private static void ValidateKeyOptions(RegistryOptions options);
    private static void ValidateKeyView(RegistryView view);
    private static void ValidateKeyRights(RegistryRights rights);
    private void Win32Error(int errorCode, string str);
    private static void Win32ErrorStatic(int errorCode, string str);
    private bool IsDirty();
    private bool IsSystemKey();
    private bool IsWritable();
    private bool IsPerfDataKey();
    private void SetDirty();
}
public enum Microsoft.Win32.RegistryKeyPermissionCheck : Enum {
    public int value__;
    public static RegistryKeyPermissionCheck Default;
    public static RegistryKeyPermissionCheck ReadSubTree;
    public static RegistryKeyPermissionCheck ReadWriteSubTree;
}
[FlagsAttribute]
public enum Microsoft.Win32.RegistryOptions : Enum {
    public int value__;
    public static RegistryOptions None;
    public static RegistryOptions Volatile;
}
public enum Microsoft.Win32.RegistryValueKind : Enum {
    public int value__;
    public static RegistryValueKind String;
    public static RegistryValueKind ExpandString;
    public static RegistryValueKind Binary;
    public static RegistryValueKind DWord;
    public static RegistryValueKind MultiString;
    public static RegistryValueKind QWord;
    public static RegistryValueKind Unknown;
    public static RegistryValueKind None;
}
[FlagsAttribute]
public enum Microsoft.Win32.RegistryValueOptions : Enum {
    public int value__;
    public static RegistryValueOptions None;
    public static RegistryValueOptions DoNotExpandEnvironmentNames;
}
public enum Microsoft.Win32.RegistryView : Enum {
    public int value__;
    public static RegistryView Default;
    public static RegistryView Registry64;
    public static RegistryView Registry32;
}
public class Microsoft.Win32.SafeHandles.SafeRegistryHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public SafeRegistryHandle(IntPtr preexistingHandle, bool ownsHandle);
    protected virtual bool ReleaseHandle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.RegistryAccessRule : AccessRule {
    public RegistryRights RegistryRights { get; }
    public RegistryAccessRule(IdentityReference identity, RegistryRights registryRights, AccessControlType type);
    public RegistryAccessRule(string identity, RegistryRights registryRights, AccessControlType type);
    public RegistryAccessRule(IdentityReference identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public RegistryAccessRule(string identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    internal RegistryAccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public RegistryRights get_RegistryRights();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.RegistryAuditRule : AuditRule {
    public RegistryRights RegistryRights { get; }
    public RegistryAuditRule(IdentityReference identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public RegistryAuditRule(string identity, RegistryRights registryRights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    internal RegistryAuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public RegistryRights get_RegistryRights();
}
[FlagsAttribute]
public enum System.Security.AccessControl.RegistryRights : Enum {
    public int value__;
    public static RegistryRights QueryValues;
    public static RegistryRights SetValue;
    public static RegistryRights CreateSubKey;
    public static RegistryRights EnumerateSubKeys;
    public static RegistryRights Notify;
    public static RegistryRights CreateLink;
    public static RegistryRights ExecuteKey;
    public static RegistryRights ReadKey;
    public static RegistryRights WriteKey;
    public static RegistryRights Delete;
    public static RegistryRights ReadPermissions;
    public static RegistryRights ChangePermissions;
    public static RegistryRights TakeOwnership;
    public static RegistryRights FullControl;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Security.AccessControl.RegistrySecurity : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    internal RegistrySecurity(SafeRegistryHandle hKey, AccessControlSections includeSections);
    private static Exception _HandleErrorCode(int errorCode, string name, SafeHandle handle, object context);
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    internal AccessControlSections GetAccessControlSectionsFromChanges();
    internal void Persist(SafeRegistryHandle hKey);
    public void AddAccessRule(RegistryAccessRule rule);
    public void SetAccessRule(RegistryAccessRule rule);
    public void ResetAccessRule(RegistryAccessRule rule);
    public bool RemoveAccessRule(RegistryAccessRule rule);
    public void RemoveAccessRuleAll(RegistryAccessRule rule);
    public void RemoveAccessRuleSpecific(RegistryAccessRule rule);
    public void AddAuditRule(RegistryAuditRule rule);
    public void SetAuditRule(RegistryAuditRule rule);
    public bool RemoveAuditRule(RegistryAuditRule rule);
    public void RemoveAuditRuleAll(RegistryAuditRule rule);
    public void RemoveAuditRuleSpecific(RegistryAuditRule rule);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string AccessControl_InvalidHandle { get; }
    internal static string Arg_RegSubKeyAbsent { get; }
    internal static string Arg_RegKeyDelHive { get; }
    internal static string Arg_RegKeyNoRemoteConnect { get; }
    internal static string Arg_RegKeyOutOfRange { get; }
    internal static string Arg_RegKeyNotFound { get; }
    internal static string Arg_RegKeyStrLenBug { get; }
    internal static string Arg_RegValStrLenBug { get; }
    internal static string Arg_RegBadKeyKind { get; }
    internal static string Arg_RegValueTooLarge { get; }
    internal static string Arg_RegSetMismatchedKind { get; }
    internal static string Arg_RegSetBadArrType { get; }
    internal static string Arg_RegSetStrArrNull { get; }
    internal static string Arg_RegInvalidKeyName { get; }
    internal static string Arg_DllInitFailure { get; }
    internal static string Arg_EnumIllegalVal { get; }
    internal static string Arg_RegSubKeyValueAbsent { get; }
    internal static string Argument_InvalidRegistryOptionsCheck { get; }
    internal static string Argument_InvalidRegistryViewCheck { get; }
    internal static string Argument_InvalidRegistryKeyPermissionCheck { get; }
    internal static string InvalidOperation_RegRemoveSubKey { get; }
    internal static string ObjectDisposed_RegKeyClosed { get; }
    internal static string Security_RegistryPermission { get; }
    internal static string UnauthorizedAccess_RegistryKeyGeneric_Key { get; }
    internal static string UnauthorizedAccess_RegistryNoWrite { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_AccessControl_InvalidHandle();
    internal static string get_Arg_RegSubKeyAbsent();
    internal static string get_Arg_RegKeyDelHive();
    internal static string get_Arg_RegKeyNoRemoteConnect();
    internal static string get_Arg_RegKeyOutOfRange();
    internal static string get_Arg_RegKeyNotFound();
    internal static string get_Arg_RegKeyStrLenBug();
    internal static string get_Arg_RegValStrLenBug();
    internal static string get_Arg_RegBadKeyKind();
    internal static string get_Arg_RegValueTooLarge();
    internal static string get_Arg_RegSetMismatchedKind();
    internal static string get_Arg_RegSetBadArrType();
    internal static string get_Arg_RegSetStrArrNull();
    internal static string get_Arg_RegInvalidKeyName();
    internal static string get_Arg_DllInitFailure();
    internal static string get_Arg_EnumIllegalVal();
    internal static string get_Arg_RegSubKeyValueAbsent();
    internal static string get_Argument_InvalidRegistryOptionsCheck();
    internal static string get_Argument_InvalidRegistryViewCheck();
    internal static string get_Argument_InvalidRegistryKeyPermissionCheck();
    internal static string get_InvalidOperation_RegRemoveSubKey();
    internal static string get_ObjectDisposed_RegKeyClosed();
    internal static string get_Security_RegistryPermission();
    internal static string get_UnauthorizedAccess_RegistryKeyGeneric_Key();
    internal static string get_UnauthorizedAccess_RegistryNoWrite();
}
