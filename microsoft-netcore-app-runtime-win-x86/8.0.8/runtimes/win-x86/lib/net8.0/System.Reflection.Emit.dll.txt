internal static class FxResources.System.Reflection.Emit.SR : object {
}
internal class System.Reflection.Emit.AssemblyBuilderImpl : AssemblyBuilder {
    private AssemblyName _assemblyName;
    private Assembly _coreAssembly;
    private MetadataBuilder _metadataBuilder;
    private ModuleBuilderImpl _module;
    private bool _previouslySaved;
    internal List`1<CustomAttributeWrapper> _customAttributes;
    internal AssemblyBuilderImpl(AssemblyName name, Assembly coreAssembly, IEnumerable`1<CustomAttributeBuilder> assemblyAttributes);
    internal static AssemblyBuilderImpl DefinePersistedAssembly(AssemblyName name, Assembly coreAssembly, IEnumerable`1<CustomAttributeBuilder> assemblyAttributes);
    private void WritePEImage(Stream peStream, BlobBuilder ilBuilder);
    internal void Save(Stream stream);
    private static AssemblyFlags AddContentType(AssemblyFlags flags, AssemblyContentType contentType);
    internal void Save(string assemblyFileName);
    protected virtual ModuleBuilder DefineDynamicModuleCore(string name);
    protected virtual ModuleBuilder GetDynamicModuleCore(string name);
    protected virtual void SetCustomAttributeCore(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute);
}
internal enum System.Reflection.Emit.CoreTypeId : Enum {
    public int value__;
    public static CoreTypeId Void;
    public static CoreTypeId Object;
    public static CoreTypeId Boolean;
    public static CoreTypeId Char;
    public static CoreTypeId SByte;
    public static CoreTypeId Byte;
    public static CoreTypeId Int16;
    public static CoreTypeId UInt16;
    public static CoreTypeId Int32;
    public static CoreTypeId UInt32;
    public static CoreTypeId Int64;
    public static CoreTypeId UInt64;
    public static CoreTypeId Single;
    public static CoreTypeId Double;
    public static CoreTypeId String;
    public static CoreTypeId IntPtr;
    public static CoreTypeId UIntPtr;
    public static CoreTypeId TypedReference;
}
internal class System.Reflection.Emit.CustomAttributeInfo : ValueType {
    public ConstructorInfo _ctor;
    public Object[] _ctorArgs;
    public String[] _namedParamNames;
    public Object[] _namedParamValues;
    internal static CustomAttributeInfo DecodeCustomAttribute(ConstructorInfo ctor, ReadOnlySpan`1<byte> binaryAttribute);
    private static string StringFromBytes(ReadOnlySpan`1<byte> data, int pos, int len);
    private static int DecodeLen(ReadOnlySpan`1<byte> data, int pos, Int32& rpos);
    private static object DecodeCustomAttributeValue(Type t, ReadOnlySpan`1<byte> data, int pos, Int32& rpos);
    private static Type ElementTypeToType(PrimitiveSerializationTypeCode elementType);
}
[IsReadOnlyAttribute]
internal class System.Reflection.Emit.CustomAttributeWrapper : ValueType {
    private ConstructorInfo _constructorInfo;
    private Byte[] _binaryAttribute;
    public ConstructorInfo Ctor { get; }
    public Byte[] Data { get; }
    public CustomAttributeWrapper(ConstructorInfo constructorInfo, ReadOnlySpan`1<byte> binaryAttribute);
    public ConstructorInfo get_Ctor();
    public Byte[] get_Data();
}
internal class System.Reflection.Emit.DllImportData : object {
    private string _moduleName;
    private string _entryPoint;
    private MethodImportAttributes _flags;
    public string ModuleName { get; }
    public string EntryPoint { get; }
    public MethodImportAttributes Flags { get; }
    internal DllImportData(string moduleName, string entryPoint, MethodImportAttributes flags);
    public string get_ModuleName();
    public string get_EntryPoint();
    public MethodImportAttributes get_Flags();
    internal static DllImportData CreateDllImportData(CustomAttributeInfo attr, Boolean& preserveSig);
}
internal class System.Reflection.Emit.EnumBuilderImpl : EnumBuilder {
    private FieldBuilder _underlyingField;
    internal TypeBuilderImpl _typeBuilder;
    protected FieldBuilder UnderlyingFieldCore { get; }
    public Guid GUID { get; }
    public string Name { get; }
    public Module Module { get; }
    public Assembly Assembly { get; }
    public RuntimeTypeHandle TypeHandle { get; }
    public string FullName { get; }
    public string AssemblyQualifiedName { get; }
    public string Namespace { get; }
    public Type BaseType { get; }
    public bool IsByRefLike { get; }
    public bool IsTypeDefinition { get; }
    public bool IsSZArray { get; }
    public bool IsConstructedGenericType { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    public Type UnderlyingSystemType { get; }
    internal EnumBuilderImpl(string name, Type underlyingType, TypeAttributes visibility, ModuleBuilderImpl module, TypeDefinitionHandle typeHandle);
    protected virtual FieldBuilder get_UnderlyingFieldCore();
    protected virtual TypeInfo CreateTypeInfoCore();
    protected virtual FieldBuilder DefineLiteralCore(string literalName, object literalValue);
    protected virtual void SetCustomAttributeCore(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute);
    public virtual Guid get_GUID();
    public virtual string get_Name();
    public virtual Module get_Module();
    public virtual Assembly get_Assembly();
    public virtual RuntimeTypeHandle get_TypeHandle();
    public virtual string get_FullName();
    public virtual string get_AssemblyQualifiedName();
    public virtual string get_Namespace();
    public virtual Type get_BaseType();
    public virtual bool get_IsByRefLike();
    public virtual bool get_IsTypeDefinition();
    public virtual bool get_IsSZArray();
    public virtual bool get_IsConstructedGenericType();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Type get_UnderlyingSystemType();
    public virtual Type GetEnumUnderlyingType();
    protected virtual bool IsArrayImpl();
    protected virtual bool IsPrimitiveImpl();
    protected virtual bool IsValueTypeImpl();
    protected virtual bool IsByRefImpl();
    protected virtual bool IsPointerImpl();
    protected virtual bool IsCOMObjectImpl();
    public virtual Type GetElementType();
    protected virtual bool HasElementTypeImpl();
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    [DynamicallyAccessedMembersAttribute("8192")]
public virtual Type[] GetInterfaces();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    [DynamicallyAccessedMembersAttribute("-1")]
public virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    [DynamicallyAccessedMembersAttribute("7")]
protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("7")]
public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("2048")]
public virtual EventInfo[] GetEvents();
    [DynamicallyAccessedMembersAttribute("6144")]
public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("6144")]
public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("24")]
public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("24")]
protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("96")]
public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("96")]
public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("8192")]
public virtual Type GetInterface(string name, bool ignoreCase);
    [DynamicallyAccessedMembersAttribute("1536")]
public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("1536")]
protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("384")]
public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("384")]
public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("8191")]
public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
    public virtual InterfaceMapping GetInterfaceMap(Type interfaceType);
    [DynamicallyAccessedMembersAttribute("8191")]
public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    public virtual bool IsAssignableFrom(Type c);
}
internal class System.Reflection.Emit.FieldBuilderImpl : FieldBuilder {
    private TypeBuilderImpl _typeBuilder;
    private string _fieldName;
    private Type _fieldType;
    private FieldAttributes _attributes;
    internal MarshallingData _marshallingData;
    internal int _offset;
    internal List`1<CustomAttributeWrapper> _customAttributes;
    internal object _defaultValue;
    public int MetadataToken { get; }
    public Module Module { get; }
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    public Type FieldType { get; }
    public RuntimeFieldHandle FieldHandle { get; }
    public FieldAttributes Attributes { get; }
    internal FieldBuilderImpl(TypeBuilderImpl typeBuilder, string fieldName, Type type, FieldAttributes attributes);
    protected virtual void SetConstantCore(object defaultValue);
    protected virtual void SetCustomAttributeCore(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute);
    protected virtual void SetOffsetCore(int iOffset);
    public virtual int get_MetadataToken();
    public virtual Module get_Module();
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Type get_FieldType();
    public virtual object GetValue(object obj);
    public virtual void SetValue(object obj, object val, BindingFlags invokeAttr, Binder binder, CultureInfo culture);
    public virtual RuntimeFieldHandle get_FieldHandle();
    public virtual FieldAttributes get_Attributes();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
internal class System.Reflection.Emit.GenericTypeParameterBuilderImpl : GenericTypeParameterBuilder {
    private string _name;
    private TypeBuilder _type;
    private int _genParamPosition;
    private GenericParameterAttributes _genParamAttributes;
    [DynamicallyAccessedMembersAttribute("-1")]
private Type _parent;
    internal List`1<CustomAttributeWrapper> _customAttributes;
    internal List`1<Type> _interfaces;
    private MethodBuilderImpl _methodBuilder;
    internal EntityHandle _parentHandle;
    public bool IsGenericTypeParameter { get; }
    public bool IsGenericMethodParameter { get; }
    public int GenericParameterPosition { get; }
    public GenericParameterAttributes GenericParameterAttributes { get; }
    public string Name { get; }
    public Module Module { get; }
    public Assembly Assembly { get; }
    public string FullName { get; }
    public string Namespace { get; }
    public string AssemblyQualifiedName { get; }
    public Type UnderlyingSystemType { get; }
    public bool IsGenericTypeDefinition { get; }
    public bool IsGenericType { get; }
    public bool IsGenericParameter { get; }
    public bool IsConstructedGenericType { get; }
    public bool ContainsGenericParameters { get; }
    public MethodBase DeclaringMethod { get; }
    public Type BaseType { get; }
    public RuntimeTypeHandle TypeHandle { get; }
    public Guid GUID { get; }
    internal GenericTypeParameterBuilderImpl(string name, int genParamPosition, TypeBuilderImpl typeBuilder, EntityHandle parentHandle);
    public GenericTypeParameterBuilderImpl(string name, int genParamPosition, MethodBuilderImpl methodBuilder);
    protected virtual void SetBaseTypeConstraintCore(Type baseTypeConstraint);
    protected virtual void SetCustomAttributeCore(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute);
    protected virtual void SetGenericParameterAttributesCore(GenericParameterAttributes genericParameterAttributes);
    protected virtual void SetInterfaceConstraintsCore(Type[] interfaceConstraints);
    public virtual Type[] GetGenericParameterConstraints();
    public virtual bool get_IsGenericTypeParameter();
    public virtual bool get_IsGenericMethodParameter();
    public virtual int get_GenericParameterPosition();
    public virtual GenericParameterAttributes get_GenericParameterAttributes();
    public virtual string get_Name();
    public virtual Module get_Module();
    public virtual Assembly get_Assembly();
    public virtual string get_FullName();
    public virtual string get_Namespace();
    public virtual string get_AssemblyQualifiedName();
    public virtual Type get_UnderlyingSystemType();
    public virtual bool get_IsGenericTypeDefinition();
    public virtual bool get_IsGenericType();
    public virtual bool get_IsGenericParameter();
    public virtual bool get_IsConstructedGenericType();
    public virtual bool get_ContainsGenericParameters();
    public virtual MethodBase get_DeclaringMethod();
    public virtual Type get_BaseType();
    public virtual RuntimeTypeHandle get_TypeHandle();
    public virtual Guid get_GUID();
    protected virtual bool IsArrayImpl();
    protected virtual bool IsByRefImpl();
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
    protected virtual bool IsCOMObjectImpl();
    protected virtual bool HasElementTypeImpl();
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    public virtual Type GetElementType();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    [DynamicallyAccessedMembersAttribute("7")]
protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("7")]
public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("24")]
protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("24")]
public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("96")]
public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("96")]
public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("8192")]
public virtual Type GetInterface(string name, bool ignoreCase);
    [DynamicallyAccessedMembersAttribute("8192")]
public virtual Type[] GetInterfaces();
    [DynamicallyAccessedMembersAttribute("6144")]
public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("2048")]
public virtual EventInfo[] GetEvents();
    [DynamicallyAccessedMembersAttribute("1536")]
protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("1536")]
public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("384")]
public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("384")]
public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("8191")]
public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
    public virtual InterfaceMapping GetInterfaceMap(Type interfaceType);
    [DynamicallyAccessedMembersAttribute("6144")]
public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("8191")]
public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("-1")]
public virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
}
internal class System.Reflection.Emit.MarshallingData : object {
    private UnmanagedType _marshalType;
    private int _marshalArrayElementType;
    private int _marshalArrayElementCount;
    private int _marshalParameterIndex;
    private object _marshalTypeNameOrSymbol;
    private string _marshalCookie;
    internal BlobBuilder SerializeMarshallingData();
    internal void SetMarshalAsCustom(object typeSymbolOrName, string cookie);
    internal void SetMarshalAsComInterface(UnmanagedType unmanagedType, Nullable`1<int> parameterIndex);
    internal void SetMarshalAsArray(Nullable`1<UnmanagedType> elementType, Nullable`1<int> elementCount, Nullable`1<short> parameterIndex);
    internal void SetMarshalAsFixedArray(Nullable`1<UnmanagedType> elementType, Nullable`1<int> elementCount);
    internal void SetMarshalAsSafeArray(Nullable`1<VarEnum> elementType, Type type);
    internal void SetMarshalAsFixedString(int elementCount);
    internal void SetMarshalAsSimpleType(UnmanagedType type);
    internal static MarshallingData CreateMarshallingData(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute, bool isField);
    private static void DecodeMarshalAsFixedString(String[] paramNames, Object[] values, MarshallingData info);
    private static void DecodeMarshalAsSafeArray(String[] paramNames, Object[] values, MarshallingData info);
    private static void DecodeMarshalAsArray(String[] paramNames, Object[] values, bool isFixed, MarshallingData info);
    private static void DecodeMarshalAsComInterface(String[] paramNames, Object[] values, UnmanagedType unmanagedType, MarshallingData info);
    private static void DecodeMarshalAsCustom(String[] paramNames, Object[] values, MarshallingData info);
}
internal static class System.Reflection.Emit.MetadataSignatureHelper : object {
    internal static BlobBuilder FieldSignatureEncoder(Type fieldType, ModuleBuilderImpl module);
    internal static BlobBuilder ConstructorSignatureEncoder(ParameterInfo[] parameters, ModuleBuilderImpl module);
    internal static BlobBuilder MethodSignatureEncoder(ModuleBuilderImpl module, Type[] parameters, Type returnType, SignatureCallingConvention convention, int genParamCount, bool isInstance);
    private static void WriteSignatureForType(SignatureTypeEncoder signature, Type type, ModuleBuilderImpl module);
    private static void WriteSimpleSignature(SignatureTypeEncoder signature, Type type, ModuleBuilderImpl module);
}
internal class System.Reflection.Emit.MethodBuilderImpl : MethodBuilder {
    private Type _returnType;
    private Type[] _parameterTypes;
    private ModuleBuilderImpl _module;
    private string _name;
    private CallingConventions _callingConventions;
    private TypeBuilderImpl _declaringType;
    private MethodAttributes _attributes;
    private MethodImplAttributes _methodImplFlags;
    private GenericTypeParameterBuilderImpl[] _typeParameters;
    internal DllImportData _dllImportData;
    internal List`1<CustomAttributeWrapper> _customAttributes;
    internal ParameterBuilderImpl[] _parameters;
    protected bool InitLocalsCore { get; protected set; }
    public string Name { get; }
    public MethodAttributes Attributes { get; }
    public CallingConventions CallingConvention { get; }
    public TypeBuilder DeclaringType { get; }
    public Module Module { get; }
    public bool ContainsGenericParameters { get; }
    public bool IsGenericMethod { get; }
    public bool IsGenericMethodDefinition { get; }
    public bool IsSecurityCritical { get; }
    public bool IsSecuritySafeCritical { get; }
    public bool IsSecurityTransparent { get; }
    public int MetadataToken { get; }
    public RuntimeMethodHandle MethodHandle { get; }
    public Type ReflectedType { get; }
    public ParameterInfo ReturnParameter { get; }
    public Type ReturnType { get; }
    public ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    internal MethodBuilderImpl(string name, MethodAttributes attributes, CallingConventions callingConventions, Type returnType, Type[] parameterTypes, ModuleBuilderImpl module, TypeBuilderImpl declaringType);
    internal BlobBuilder GetMethodSignatureBlob();
    internal static SignatureCallingConvention GetSignatureConvention(CallingConventions callingConventions);
    protected virtual bool get_InitLocalsCore();
    protected virtual void set_InitLocalsCore(bool value);
    protected virtual GenericTypeParameterBuilder[] DefineGenericParametersCore(String[] names);
    protected virtual ParameterBuilder DefineParameterCore(int position, ParameterAttributes attributes, string strParamName);
    protected virtual ILGenerator GetILGeneratorCore(int size);
    protected virtual void SetCustomAttributeCore(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute);
    protected virtual void SetImplementationFlagsCore(MethodImplAttributes attributes);
    protected virtual void SetSignatureCore(Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    public virtual string get_Name();
    public virtual MethodAttributes get_Attributes();
    public virtual CallingConventions get_CallingConvention();
    [PreserveBaseOverridesAttribute]
public virtual override TypeBuilder get_DeclaringType();
    public virtual Module get_Module();
    public virtual bool get_ContainsGenericParameters();
    public virtual bool get_IsGenericMethod();
    public virtual bool get_IsGenericMethodDefinition();
    public virtual bool get_IsSecurityCritical();
    public virtual bool get_IsSecuritySafeCritical();
    public virtual bool get_IsSecurityTransparent();
    public virtual int get_MetadataToken();
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual Type get_ReflectedType();
    public virtual ParameterInfo get_ReturnParameter();
    public virtual Type get_ReturnType();
    public virtual ICustomAttributeProvider get_ReturnTypeCustomAttributes();
    public virtual MethodInfo GetBaseDefinition();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Type[] GetGenericArguments();
    public virtual MethodInfo GetGenericMethodDefinition();
    public virtual int GetHashCode();
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual ParameterInfo[] GetParameters();
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    [RequiresDynamicCodeAttribute("The native code for this instantiation might not be available at runtime.")]
[RequiresUnreferencedCodeAttribute("If some of the generic arguments are annotated (either with DynamicallyAccessedMembersAttribute, or generic constraints), trimming can't validate that the requirements of those annotations are met.")]
public virtual MethodInfo MakeGenericMethod(Type[] typeArguments);
}
internal class System.Reflection.Emit.ModuleBuilderImpl : ModuleBuilder {
    private Assembly _coreAssembly;
    private string _name;
    private MetadataBuilder _metadataBuilder;
    private Dictionary`2<Assembly, AssemblyReferenceHandle> _assemblyReferences;
    private Dictionary`2<Type, TypeReferenceHandle> _typeReferences;
    private List`1<TypeBuilderImpl> _typeDefinitions;
    private Dictionary`2<ConstructorInfo, MemberReferenceHandle> _ctorReferences;
    private Dictionary`2<string, ModuleReferenceHandle> _moduleReferences;
    private List`1<CustomAttributeWrapper> _customAttributes;
    private int _nextTypeDefRowId;
    private int _nextMethodDefRowId;
    private int _nextFieldDefRowId;
    private int _nextParameterRowId;
    private bool _coreTypesFullyPopulated;
    private Type[] _coreTypes;
    private static Type[] s_coreTypes;
    [RequiresAssemblyFilesAttribute("Returns <Unknown> for modules with no file path")]
public string Name { get; }
    public string ScopeName { get; }
    internal ModuleBuilderImpl(string name, Assembly coreAssembly, MetadataBuilder builder);
    private static ModuleBuilderImpl();
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal Type GetTypeFromCoreAssembly(CoreTypeId typeId);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal Nullable`1<CoreTypeId> GetTypeIdFromCoreTypes(Type type);
    internal void AppendMetadata();
    private void WriteMethods(TypeBuilderImpl typeBuilder, List`1<GenericTypeParameterBuilderImpl> genericParams);
    private void WriteFields(TypeBuilderImpl typeBuilder);
    private ModuleReferenceHandle GetModuleReference(string moduleName);
    internal void WriteCustomAttributes(List`1<CustomAttributeWrapper> customAttributes, EntityHandle parent);
    private MemberReferenceHandle GetConstructorHandle(ConstructorInfo constructorInfo);
    private TypeReferenceHandle GetTypeReference(Type type);
    private AssemblyReferenceHandle GetAssemblyReference(Assembly assembly);
    private void AddGenericTypeParametersAndConstraintsCustomAttributes(EntityHandle parentHandle, GenericTypeParameterBuilderImpl gParam);
    private void AddDefaultValue(EntityHandle parentHandle, object defaultValue);
    private FieldDefinitionHandle AddFieldDefinition(FieldBuilderImpl field, BlobBuilder fieldSignature);
    private TypeDefinitionHandle AddTypeDefinition(TypeBuilderImpl type, EntityHandle parent, int methodToken, int fieldToken);
    private MethodDefinitionHandle AddMethodDefinition(MethodBuilderImpl method, BlobBuilder methodSignature, int parameterToken);
    private TypeReferenceHandle AddTypeReference(Type type, AssemblyReferenceHandle parent);
    private MemberReferenceHandle AddConstructorReference(TypeReferenceHandle parent, ConstructorInfo method);
    private void AddMethodImport(MethodDefinitionHandle methodHandle, string name, MethodImportAttributes attributes, ModuleReferenceHandle moduleHandle);
    private ModuleReferenceHandle AddModuleReference(string moduleName);
    private void AddFieldLayout(FieldDefinitionHandle fieldHandle, int offset);
    private void AddMarshalling(EntityHandle parent, BlobBuilder builder);
    private ParameterHandle AddParameter(ParameterBuilderImpl parameter);
    private AssemblyReferenceHandle AddAssemblyReference(string name, Version version, string culture, Byte[] publicKeyToken, AssemblyNameFlags flags, AssemblyContentType contentType);
    internal EntityHandle GetTypeHandle(Type type);
    internal TypeBuilder DefineNestedType(string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packingSize, int typesize, TypeBuilderImpl enclosingType);
    public virtual string get_Name();
    public virtual string get_ScopeName();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual int GetFieldMetadataToken(FieldInfo field);
    public virtual int GetMethodMetadataToken(ConstructorInfo constructor);
    public virtual int GetMethodMetadataToken(MethodInfo method);
    public virtual int GetStringMetadataToken(string stringConstant);
    public virtual int GetTypeMetadataToken(Type type);
    protected virtual void CreateGlobalFunctionsCore();
    protected virtual EnumBuilder DefineEnumCore(string name, TypeAttributes visibility, Type underlyingType);
    protected virtual MethodBuilder DefineGlobalMethodCore(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);
    protected virtual FieldBuilder DefineInitializedDataCore(string name, Byte[] data, FieldAttributes attributes);
    [RequiresUnreferencedCodeAttribute("P/Invoke marshalling may dynamically access members that could be trimmed.")]
protected virtual MethodBuilder DefinePInvokeMethodCore(string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, CallingConvention nativeCallConv, CharSet nativeCharSet);
    protected virtual TypeBuilder DefineTypeCore(string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packingSize, int typesize);
    protected virtual FieldBuilder DefineUninitializedDataCore(string name, int size, FieldAttributes attributes);
    protected virtual MethodInfo GetArrayMethodCore(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes);
    protected virtual void SetCustomAttributeCore(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute);
    public virtual int GetSignatureMetadataToken(SignatureHelper signature);
}
internal class System.Reflection.Emit.ParameterBuilderImpl : ParameterBuilder {
    private string _name;
    private int _position;
    private MethodBuilderImpl _methodBuilder;
    private ParameterAttributes _attributes;
    internal List`1<CustomAttributeWrapper> _customAttributes;
    internal MarshallingData _marshallingData;
    internal object _defaultValue;
    public int Attributes { get; }
    public string Name { get; }
    public int Position { get; }
    public ParameterBuilderImpl(MethodBuilderImpl methodBuilder, int sequence, ParameterAttributes attributes, string paramName);
    public virtual int get_Attributes();
    public virtual string get_Name();
    public virtual int get_Position();
    public virtual void SetConstant(object defaultValue);
    protected virtual void SetCustomAttributeCore(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute);
}
internal class System.Reflection.Emit.TypeBuilderImpl : TypeBuilder {
    private ModuleBuilderImpl _module;
    private string _name;
    private string _namespace;
    private string _strFullName;
    [DynamicallyAccessedMembersAttribute("-1")]
private Type _typeParent;
    private TypeBuilderImpl _declaringType;
    private GenericTypeParameterBuilderImpl[] _typeParameters;
    private TypeAttributes _attributes;
    private PackingSize _packingSize;
    private int _typeSize;
    private Type _enumUnderlyingType;
    internal TypeDefinitionHandle _handle;
    internal List`1<MethodBuilderImpl> _methodDefinitions;
    internal List`1<FieldBuilderImpl> _fieldDefinitions;
    internal List`1<Type> _interfaces;
    internal List`1<CustomAttributeWrapper> _customAttributes;
    protected PackingSize PackingSizeCore { get; }
    protected int SizeCore { get; }
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    public bool IsGenericTypeDefinition { get; }
    public bool IsGenericType { get; }
    public Type[] GenericTypeParameters { get; }
    public string AssemblyQualifiedName { get; }
    public string FullName { get; }
    public string Namespace { get; }
    public Assembly Assembly { get; }
    public Module Module { get; }
    public Type UnderlyingSystemType { get; }
    public Guid GUID { get; }
    public Type BaseType { get; }
    public int MetadataToken { get; }
    internal TypeBuilderImpl(string fullName, TypeAttributes typeAttributes, Type parent, ModuleBuilderImpl module, TypeDefinitionHandle handle, Type[] interfaces, PackingSize packingSize, int typeSize, TypeBuilderImpl enclosingType);
    protected virtual PackingSize get_PackingSizeCore();
    protected virtual int get_SizeCore();
    protected virtual void AddInterfaceImplementationCore(Type interfaceType);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2083:DynamicallyAccessedMembers")]
protected virtual TypeInfo CreateTypeInfoCore();
    protected virtual ConstructorBuilder DefineConstructorCore(MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);
    protected virtual ConstructorBuilder DefineDefaultConstructorCore(MethodAttributes attributes);
    protected virtual EventBuilder DefineEventCore(string name, EventAttributes attributes, Type eventtype);
    protected virtual FieldBuilder DefineFieldCore(string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, FieldAttributes attributes);
    protected virtual GenericTypeParameterBuilder[] DefineGenericParametersCore(String[] names);
    protected virtual FieldBuilder DefineInitializedDataCore(string name, Byte[] data, FieldAttributes attributes);
    protected virtual MethodBuilder DefineMethodCore(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    protected virtual void DefineMethodOverrideCore(MethodInfo methodInfoBody, MethodInfo methodInfoDeclaration);
    protected virtual TypeBuilder DefineNestedTypeCore(string name, TypeAttributes attr, Type parent, Type[] interfaces, PackingSize packSize, int typeSize);
    [RequiresUnreferencedCodeAttribute("P/Invoke marshalling may dynamically access members that could be trimmed.")]
protected virtual MethodBuilder DefinePInvokeMethodCore(string name, string dllName, string entryName, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, CallingConvention nativeCallConv, CharSet nativeCharSet);
    protected virtual PropertyBuilder DefinePropertyCore(string name, PropertyAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);
    protected virtual ConstructorBuilder DefineTypeInitializerCore();
    protected virtual FieldBuilder DefineUninitializedDataCore(string name, int size, FieldAttributes attributes);
    protected virtual bool IsCreatedCore();
    protected virtual void SetCustomAttributeCore(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute);
    internal void SetCustomAttribute(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute);
    private void ParseStructLayoutAttribute(ConstructorInfo con, ReadOnlySpan`1<byte> binaryAttribute);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2074:DynamicallyAccessedMembers")]
protected virtual void SetParentCore(Type parent);
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual bool get_IsGenericTypeDefinition();
    public virtual bool get_IsGenericType();
    public virtual Type[] get_GenericTypeParameters();
    public virtual Type[] GetGenericArguments();
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Type GetElementType();
    public virtual string get_AssemblyQualifiedName();
    public virtual string get_FullName();
    public virtual string get_Namespace();
    public virtual Assembly get_Assembly();
    public virtual Module get_Module();
    public virtual Type get_UnderlyingSystemType();
    public virtual Guid get_GUID();
    public virtual Type get_BaseType();
    public virtual int get_MetadataToken();
    [DynamicallyAccessedMembersAttribute("-1")]
public virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    protected virtual bool IsArrayImpl();
    protected virtual bool IsByRefImpl();
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
    protected virtual bool HasElementTypeImpl();
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    protected virtual bool IsCOMObjectImpl();
    [DynamicallyAccessedMembersAttribute("7")]
protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("7")]
public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("2048")]
public virtual EventInfo[] GetEvents();
    [DynamicallyAccessedMembersAttribute("6144")]
public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("6144")]
public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("24")]
public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("24")]
protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("96")]
public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("96")]
public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("8192")]
public virtual Type GetInterface(string name, bool ignoreCase);
    [DynamicallyAccessedMembersAttribute("8192")]
public virtual Type[] GetInterfaces();
    [DynamicallyAccessedMembersAttribute("1536")]
public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("1536")]
protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    [DynamicallyAccessedMembersAttribute("384")]
public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("384")]
public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    [DynamicallyAccessedMembersAttribute("8191")]
public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
    public virtual InterfaceMapping GetInterfaceMap(Type interfaceType);
    [DynamicallyAccessedMembersAttribute("8191")]
public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    public virtual bool IsAssignableFrom(Type c);
}
internal class System.Reflection.Emit.TypeNameBuilder : object {
    private StringBuilder _str;
    private int _instNesting;
    private bool _firstInstArg;
    private bool _nestedName;
    private bool _hasAssemblySpec;
    private List`1<int> _stack;
    private int _stackIdx;
    private void OpenGenericArguments();
    private void CloseGenericArguments();
    private void OpenGenericArgument();
    private void CloseGenericArgument();
    private void AddName(string name);
    private void AddArray(int rank);
    private void AddAssemblySpec(string assemblySpec);
    public virtual string ToString();
    private static bool ContainsReservedChar(string name);
    private static bool IsTypeNameReservedChar(char ch);
    private void EscapeName(string name);
    private void EscapeAssemblyName(string name);
    private void EscapeEmbeddedAssemblyName(string name);
    private void PushOpenGenericArgument();
    private void PopOpenGenericArgument();
    private void Append(string pStr);
    private void Append(char c);
    internal static string ToString(Type type, Format format);
    private void AddElementType(Type type);
    private void AddAssemblyQualifiedName(Type type, Format format);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string InvalidOperation_CannotSaveMultipleTimes { get; }
    internal static string Argument_CannotSetParentToInterface { get; }
    internal static string InvalidOperation_BadInterfaceNotAbstract { get; }
    internal static string InvalidOperation_AModuleRequired { get; }
    internal static string InvalidOperation_NoMultiModuleAssembly { get; }
    internal static string NotSupported_DynamicModule { get; }
    internal static string Argument_InvalidTypeCodeForTypeArgument { get; }
    internal static string NotSupported_UnmanagedTypeOnlyForFields { get; }
    internal static string Argument_InvalidCustomAttributeLength { get; }
    internal static string Argument_InvalidProlog { get; }
    internal static string Argument_UnknownNamedType { get; }
    internal static string NotImplemented_TypeForValue { get; }
    internal static string Argument_DllNameCannotBeEmpty { get; }
    internal static string ArgumentOutOfRange_ParamSequence { get; }
    internal static string Argument_InvalidArgumentForAttribute { get; }
    internal static string Argument_InvalidParameterForUnmanagedType { get; }
    internal static string Argument_SizeConstMustBeSpecified { get; }
    internal static string InvalidOperation_GenericParametersAlreadySet { get; }
    internal static string Argument_ShouldOnlySetVisibilityFlags { get; }
    internal static string Argument_ConstantDoesntMatch { get; }
    internal static string Argument_ConstantNull { get; }
    internal static string InvalidOperation_NoUnderlyingTypeOnEnum { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static ResourceManager get_ResourceManager();
    internal static string get_InvalidOperation_CannotSaveMultipleTimes();
    internal static string get_Argument_CannotSetParentToInterface();
    internal static string get_InvalidOperation_BadInterfaceNotAbstract();
    internal static string get_InvalidOperation_AModuleRequired();
    internal static string get_InvalidOperation_NoMultiModuleAssembly();
    internal static string get_NotSupported_DynamicModule();
    internal static string get_Argument_InvalidTypeCodeForTypeArgument();
    internal static string get_NotSupported_UnmanagedTypeOnlyForFields();
    internal static string get_Argument_InvalidCustomAttributeLength();
    internal static string get_Argument_InvalidProlog();
    internal static string get_Argument_UnknownNamedType();
    internal static string get_NotImplemented_TypeForValue();
    internal static string get_Argument_DllNameCannotBeEmpty();
    internal static string get_ArgumentOutOfRange_ParamSequence();
    internal static string get_Argument_InvalidArgumentForAttribute();
    internal static string get_Argument_InvalidParameterForUnmanagedType();
    internal static string get_Argument_SizeConstMustBeSpecified();
    internal static string get_InvalidOperation_GenericParametersAlreadySet();
    internal static string get_Argument_ShouldOnlySetVisibilityFlags();
    internal static string get_Argument_ConstantDoesntMatch();
    internal static string get_Argument_ConstantNull();
    internal static string get_InvalidOperation_NoUnderlyingTypeOnEnum();
}
