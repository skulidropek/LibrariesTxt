public class System.Diagnostics.BooleanSwitch : Switch {
    public bool Enabled { get; public set; }
    public BooleanSwitch(string displayName, string description);
    public BooleanSwitch(string displayName, string description, string defaultSwitchValue);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    protected virtual void OnValueChanged();
}
public class System.Diagnostics.CorrelationManager : object {
    public Guid ActivityId { get; public set; }
    public Stack LogicalOperationStack { get; }
    public Guid get_ActivityId();
    public void set_ActivityId(Guid value);
    public Stack get_LogicalOperationStack();
    public void StartLogicalOperation();
    public void StartLogicalOperation(object operationId);
    public void StopLogicalOperation();
}
public class System.Diagnostics.DefaultTraceListener : TraceListener {
    public bool AssertUiEnabled { get; public set; }
    public string LogFileName { get; public set; }
    public virtual void Fail(string message);
    public virtual void Fail(string message, string detailMessage);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    public bool get_AssertUiEnabled();
    public void set_AssertUiEnabled(bool value);
    public string get_LogFileName();
    public void set_LogFileName(string value);
}
public class System.Diagnostics.EventTypeFilter : TraceFilter {
    public SourceLevels EventType { get; public set; }
    public EventTypeFilter(SourceLevels level);
    public SourceLevels get_EventType();
    public void set_EventType(SourceLevels value);
    public virtual bool ShouldTrace(TraceEventCache cache, string source, TraceEventType eventType, int id, string formatOrMessage, Object[] args, object data1, Object[] data);
}
public class System.Diagnostics.SourceFilter : TraceFilter {
    public string Source { get; public set; }
    public SourceFilter(string source);
    public string get_Source();
    public void set_Source(string value);
    public virtual bool ShouldTrace(TraceEventCache cache, string source, TraceEventType eventType, int id, string formatOrMessage, Object[] args, object data1, Object[] data);
}
[FlagsAttribute]
public enum System.Diagnostics.SourceLevels : Enum {
    public int value__;
    public static SourceLevels All;
    public static SourceLevels Critical;
    public static SourceLevels Error;
    public static SourceLevels Information;
    public static SourceLevels Off;
    public static SourceLevels Verbose;
    [EditorBrowsableAttribute("2")]
public static SourceLevels ActivityTracing;
    public static SourceLevels Warning;
}
public class System.Diagnostics.SourceSwitch : Switch {
    public SourceLevels Level { get; public set; }
    public SourceSwitch(string name);
    public SourceSwitch(string displayName, string defaultSwitchValue);
    public SourceLevels get_Level();
    public void set_Level(SourceLevels value);
    protected virtual void OnValueChanged();
    public bool ShouldTrace(TraceEventType eventType);
}
public abstract class System.Diagnostics.Switch : object {
    public string Description { get; }
    public string DisplayName { get; }
    protected int SwitchSetting { get; protected set; }
    protected string Value { get; protected set; }
    public StringDictionary Attributes { get; }
    protected Switch(string displayName, string description);
    protected Switch(string displayName, string description, string defaultSwitchValue);
    public string get_Description();
    public string get_DisplayName();
    protected int get_SwitchSetting();
    protected void set_SwitchSetting(int value);
    protected string get_Value();
    protected void set_Value(string value);
    protected virtual void OnSwitchSettingChanged();
    protected virtual void OnValueChanged();
    public StringDictionary get_Attributes();
    protected virtual String[] GetSupportedAttributes();
}
public class System.Diagnostics.SwitchAttribute : Attribute {
    public string SwitchDescription { get; public set; }
    public string SwitchName { get; public set; }
    public Type SwitchType { get; public set; }
    public SwitchAttribute(string switchName, Type switchType);
    public string get_SwitchDescription();
    public void set_SwitchDescription(string value);
    public string get_SwitchName();
    public void set_SwitchName(string value);
    public Type get_SwitchType();
    public void set_SwitchType(Type value);
    public static SwitchAttribute[] GetAll(Assembly assembly);
}
public class System.Diagnostics.SwitchLevelAttribute : Attribute {
    public Type SwitchLevelType { get; public set; }
    public SwitchLevelAttribute(Type switchLevelType);
    public Type get_SwitchLevelType();
    public void set_SwitchLevelType(Type value);
}
public class System.Diagnostics.Trace : object {
    public static CorrelationManager CorrelationManager { get; }
    public static bool AutoFlush { get; public set; }
    public static int IndentLevel { get; public set; }
    public static int IndentSize { get; public set; }
    public static TraceListenerCollection Listeners { get; }
    public static bool UseGlobalLock { get; public set; }
    public static CorrelationManager get_CorrelationManager();
    public static bool get_AutoFlush();
    public static void set_AutoFlush(bool value);
    public static int get_IndentLevel();
    public static void set_IndentLevel(int value);
    public static int get_IndentSize();
    public static void set_IndentSize(int value);
    public static TraceListenerCollection get_Listeners();
    public static bool get_UseGlobalLock();
    public static void set_UseGlobalLock(bool value);
    [ConditionalAttribute("TRACE")]
public static void Assert(bool condition);
    [ConditionalAttribute("TRACE")]
public static void Assert(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void Assert(bool condition, string message, string detailMessage);
    [ConditionalAttribute("TRACE")]
public static void Close();
    [ConditionalAttribute("TRACE")]
public static void Fail(string message);
    [ConditionalAttribute("TRACE")]
public static void Fail(string message, string detailMessage);
    [ConditionalAttribute("TRACE")]
public static void Flush();
    [ConditionalAttribute("TRACE")]
public static void Indent();
    public static void Refresh();
    [ConditionalAttribute("TRACE")]
public static void TraceError(string message);
    [ConditionalAttribute("TRACE")]
public static void TraceError(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void TraceInformation(string message);
    [ConditionalAttribute("TRACE")]
public static void TraceInformation(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void TraceWarning(string message);
    [ConditionalAttribute("TRACE")]
public static void TraceWarning(string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public static void Unindent();
    [ConditionalAttribute("TRACE")]
public static void Write(object value);
    [ConditionalAttribute("TRACE")]
public static void Write(object value, string category);
    [ConditionalAttribute("TRACE")]
public static void Write(string message);
    [ConditionalAttribute("TRACE")]
public static void Write(string message, string category);
    [ConditionalAttribute("TRACE")]
public static void WriteIf(bool condition, object value);
    [ConditionalAttribute("TRACE")]
public static void WriteIf(bool condition, object value, string category);
    [ConditionalAttribute("TRACE")]
public static void WriteIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void WriteIf(bool condition, string message, string category);
    [ConditionalAttribute("TRACE")]
public static void WriteLine(object value);
    [ConditionalAttribute("TRACE")]
public static void WriteLine(object value, string category);
    [ConditionalAttribute("TRACE")]
public static void WriteLine(string message);
    [ConditionalAttribute("TRACE")]
public static void WriteLine(string message, string category);
    [ConditionalAttribute("TRACE")]
public static void WriteLineIf(bool condition, object value);
    [ConditionalAttribute("TRACE")]
public static void WriteLineIf(bool condition, object value, string category);
    [ConditionalAttribute("TRACE")]
public static void WriteLineIf(bool condition, string message);
    [ConditionalAttribute("TRACE")]
public static void WriteLineIf(bool condition, string message, string category);
}
public class System.Diagnostics.TraceEventCache : object {
    public DateTime DateTime { get; }
    public int ProcessId { get; }
    public string ThreadId { get; }
    public long Timestamp { get; }
    public string Callstack { get; }
    public Stack LogicalOperationStack { get; }
    public DateTime get_DateTime();
    public int get_ProcessId();
    public string get_ThreadId();
    public long get_Timestamp();
    public string get_Callstack();
    public Stack get_LogicalOperationStack();
}
public enum System.Diagnostics.TraceEventType : Enum {
    public int value__;
    public static TraceEventType Critical;
    public static TraceEventType Error;
    public static TraceEventType Information;
    public static TraceEventType Verbose;
    public static TraceEventType Warning;
    public static TraceEventType Resume;
    public static TraceEventType Start;
    public static TraceEventType Stop;
    public static TraceEventType Suspend;
    public static TraceEventType Transfer;
}
public abstract class System.Diagnostics.TraceFilter : object {
    public abstract virtual bool ShouldTrace(TraceEventCache cache, string source, TraceEventType eventType, int id, string formatOrMessage, Object[] args, object data1, Object[] data);
}
public enum System.Diagnostics.TraceLevel : Enum {
    public int value__;
    public static TraceLevel Error;
    public static TraceLevel Info;
    public static TraceLevel Off;
    public static TraceLevel Verbose;
    public static TraceLevel Warning;
}
public abstract class System.Diagnostics.TraceListener : MarshalByRefObject {
    public TraceFilter Filter { get; public set; }
    public int IndentLevel { get; public set; }
    public int IndentSize { get; public set; }
    public bool IsThreadSafe { get; }
    public string Name { get; public set; }
    protected bool NeedIndent { get; protected set; }
    public TraceOptions TraceOutputOptions { get; public set; }
    public StringDictionary Attributes { get; }
    protected TraceListener(string name);
    public TraceFilter get_Filter();
    public void set_Filter(TraceFilter value);
    public int get_IndentLevel();
    public void set_IndentLevel(int value);
    public int get_IndentSize();
    public void set_IndentSize(int value);
    public virtual bool get_IsThreadSafe();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    protected bool get_NeedIndent();
    protected void set_NeedIndent(bool value);
    public TraceOptions get_TraceOutputOptions();
    public void set_TraceOutputOptions(TraceOptions value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void Fail(string message);
    public virtual void Fail(string message, string detailMessage);
    public virtual void Flush();
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void Write(object o);
    public virtual void Write(object o, string category);
    public abstract virtual void Write(string message);
    public virtual void Write(string message, string category);
    protected virtual void WriteIndent();
    public virtual void WriteLine(object o);
    public virtual void WriteLine(object o, string category);
    public abstract virtual void WriteLine(string message);
    public virtual void WriteLine(string message, string category);
    public StringDictionary get_Attributes();
    public virtual void Close();
    protected virtual String[] GetSupportedAttributes();
    public virtual void TraceTransfer(TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);
}
[DefaultMemberAttribute("Item")]
public class System.Diagnostics.TraceListenerCollection : object {
    public int Count { get; }
    public TraceListener Item { get; public set; }
    public TraceListener Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public TraceListener get_Item(int i);
    public void set_Item(int i, TraceListener value);
    public TraceListener get_Item(string name);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public int Add(TraceListener listener);
    public void AddRange(TraceListener[] value);
    public void AddRange(TraceListenerCollection value);
    public sealed virtual void Clear();
    public bool Contains(TraceListener listener);
    public void CopyTo(TraceListener[] listeners, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(TraceListener listener);
    public void Insert(int index, TraceListener listener);
    public void Remove(TraceListener listener);
    public void Remove(string name);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
}
[FlagsAttribute]
public enum System.Diagnostics.TraceOptions : Enum {
    public int value__;
    public static TraceOptions DateTime;
    public static TraceOptions None;
    public static TraceOptions LogicalOperationStack;
    public static TraceOptions ProcessId;
    public static TraceOptions ThreadId;
    public static TraceOptions Timestamp;
    public static TraceOptions Callstack;
}
public class System.Diagnostics.TraceSource : object {
    public TraceListenerCollection Listeners { get; }
    public string Name { get; }
    public SourceSwitch Switch { get; public set; }
    public StringDictionary Attributes { get; }
    public TraceSource(string name);
    public TraceSource(string name, SourceLevels defaultLevel);
    public TraceListenerCollection get_Listeners();
    public string get_Name();
    public SourceSwitch get_Switch();
    public void set_Switch(SourceSwitch value);
    public void Close();
    public void Flush();
    [ConditionalAttribute("TRACE")]
public void TraceData(TraceEventType eventType, int id, object data);
    [ConditionalAttribute("TRACE")]
public void TraceData(TraceEventType eventType, int id, Object[] data);
    [ConditionalAttribute("TRACE")]
public void TraceEvent(TraceEventType eventType, int id);
    [ConditionalAttribute("TRACE")]
public void TraceEvent(TraceEventType eventType, int id, string message);
    [ConditionalAttribute("TRACE")]
public void TraceEvent(TraceEventType eventType, int id, string format, Object[] args);
    [ConditionalAttribute("TRACE")]
public void TraceInformation(string message);
    [ConditionalAttribute("TRACE")]
public void TraceInformation(string format, Object[] args);
    public StringDictionary get_Attributes();
    protected virtual String[] GetSupportedAttributes();
    public void TraceTransfer(int id, string message, Guid relatedActivityId);
}
public class System.Diagnostics.TraceSwitch : Switch {
    public TraceLevel Level { get; public set; }
    public bool TraceError { get; }
    public bool TraceInfo { get; }
    public bool TraceVerbose { get; }
    public bool TraceWarning { get; }
    public TraceSwitch(string displayName, string description);
    public TraceSwitch(string displayName, string description, string defaultSwitchValue);
    public TraceLevel get_Level();
    public void set_Level(TraceLevel value);
    public bool get_TraceError();
    public bool get_TraceInfo();
    public bool get_TraceVerbose();
    public bool get_TraceWarning();
    protected virtual void OnSwitchSettingChanged();
    protected virtual void OnValueChanged();
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
