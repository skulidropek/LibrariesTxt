public class Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle : SafeHandleZeroOrMinusOneIsInvalid {
    public bool IsInvalid { get; }
    [SecurityCriticalAttribute]
public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
public class Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle : SafeBuffer {
    protected virtual bool ReleaseHandle();
}
public class System.IO.MemoryMappedFiles.MemoryMappedFile : object {
    public SafeMemoryMappedFileHandle SafeMemoryMappedFileHandle { get; }
    public SafeMemoryMappedFileHandle get_SafeMemoryMappedFileHandle();
    public static MemoryMappedFile CreateFromFile(FileStream fileStream, string mapName, long capacity, MemoryMappedFileAccess access, HandleInheritability inheritability, bool leaveOpen);
    public static MemoryMappedFile CreateFromFile(string path);
    public static MemoryMappedFile CreateFromFile(string path, FileMode mode);
    public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName);
    public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName, long capacity);
    public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName, long capacity, MemoryMappedFileAccess access);
    public static MemoryMappedFile CreateNew(string mapName, long capacity);
    public static MemoryMappedFile CreateNew(string mapName, long capacity, MemoryMappedFileAccess access);
    public static MemoryMappedFile CreateNew(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, HandleInheritability inheritability);
    public static MemoryMappedFile CreateOrOpen(string mapName, long capacity);
    public static MemoryMappedFile CreateOrOpen(string mapName, long capacity, MemoryMappedFileAccess access);
    public static MemoryMappedFile CreateOrOpen(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, HandleInheritability inheritability);
    public MemoryMappedViewAccessor CreateViewAccessor();
    public MemoryMappedViewAccessor CreateViewAccessor(long offset, long size);
    public MemoryMappedViewAccessor CreateViewAccessor(long offset, long size, MemoryMappedFileAccess access);
    public MemoryMappedViewStream CreateViewStream();
    public MemoryMappedViewStream CreateViewStream(long offset, long size);
    public MemoryMappedViewStream CreateViewStream(long offset, long size, MemoryMappedFileAccess access);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static MemoryMappedFile OpenExisting(string mapName);
    public static MemoryMappedFile OpenExisting(string mapName, MemoryMappedFileRights desiredAccessRights);
    public static MemoryMappedFile OpenExisting(string mapName, MemoryMappedFileRights desiredAccessRights, HandleInheritability inheritability);
}
public enum System.IO.MemoryMappedFiles.MemoryMappedFileAccess : Enum {
    public int value__;
    public static MemoryMappedFileAccess CopyOnWrite;
    public static MemoryMappedFileAccess Read;
    public static MemoryMappedFileAccess ReadExecute;
    public static MemoryMappedFileAccess ReadWrite;
    public static MemoryMappedFileAccess ReadWriteExecute;
    public static MemoryMappedFileAccess Write;
}
[FlagsAttribute]
public enum System.IO.MemoryMappedFiles.MemoryMappedFileOptions : Enum {
    public int value__;
    public static MemoryMappedFileOptions DelayAllocatePages;
    public static MemoryMappedFileOptions None;
}
[FlagsAttribute]
public enum System.IO.MemoryMappedFiles.MemoryMappedFileRights : Enum {
    public int value__;
    public static MemoryMappedFileRights AccessSystemSecurity;
    public static MemoryMappedFileRights ChangePermissions;
    public static MemoryMappedFileRights CopyOnWrite;
    public static MemoryMappedFileRights Delete;
    public static MemoryMappedFileRights Execute;
    public static MemoryMappedFileRights FullControl;
    public static MemoryMappedFileRights Read;
    public static MemoryMappedFileRights ReadExecute;
    public static MemoryMappedFileRights ReadPermissions;
    public static MemoryMappedFileRights ReadWrite;
    public static MemoryMappedFileRights ReadWriteExecute;
    public static MemoryMappedFileRights TakeOwnership;
    public static MemoryMappedFileRights Write;
}
public class System.IO.MemoryMappedFiles.MemoryMappedViewAccessor : UnmanagedMemoryAccessor {
    public long PointerOffset { get; }
    public SafeMemoryMappedViewHandle SafeMemoryMappedViewHandle { get; }
    public long get_PointerOffset();
    public SafeMemoryMappedViewHandle get_SafeMemoryMappedViewHandle();
    protected virtual void Dispose(bool disposing);
    public void Flush();
}
public class System.IO.MemoryMappedFiles.MemoryMappedViewStream : UnmanagedMemoryStream {
    public long PointerOffset { get; }
    public SafeMemoryMappedViewHandle SafeMemoryMappedViewHandle { get; }
    public long get_PointerOffset();
    public SafeMemoryMappedViewHandle get_SafeMemoryMappedViewHandle();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual void SetLength(long value);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
