public class System.Net.AuthenticationSchemeSelector : MulticastDelegate {
    public AuthenticationSchemeSelector(object object, IntPtr method);
    public virtual AuthenticationSchemes Invoke(HttpListenerRequest httpRequest);
    public virtual IAsyncResult BeginInvoke(HttpListenerRequest httpRequest, AsyncCallback callback, object object);
    public virtual AuthenticationSchemes EndInvoke(IAsyncResult result);
}
public class System.Net.HttpListener : object {
    public AuthenticationSchemes AuthenticationSchemes { get; public set; }
    public AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; public set; }
    public bool IgnoreWriteExceptions { get; public set; }
    public bool IsListening { get; }
    public static bool IsSupported { get; }
    public HttpListenerPrefixCollection Prefixes { get; }
    public string Realm { get; public set; }
    public bool UnsafeConnectionNtlmAuthentication { get; public set; }
    public ServiceNameCollection DefaultServiceNames { get; }
    public ExtendedProtectionPolicy ExtendedProtectionPolicy { get; public set; }
    public ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; public set; }
    public HttpListenerTimeoutManager TimeoutManager { get; }
    public AuthenticationSchemes get_AuthenticationSchemes();
    public void set_AuthenticationSchemes(AuthenticationSchemes value);
    public AuthenticationSchemeSelector get_AuthenticationSchemeSelectorDelegate();
    public void set_AuthenticationSchemeSelectorDelegate(AuthenticationSchemeSelector value);
    public bool get_IgnoreWriteExceptions();
    public void set_IgnoreWriteExceptions(bool value);
    public bool get_IsListening();
    public static bool get_IsSupported();
    public HttpListenerPrefixCollection get_Prefixes();
    public string get_Realm();
    public void set_Realm(string value);
    public bool get_UnsafeConnectionNtlmAuthentication();
    public void set_UnsafeConnectionNtlmAuthentication(bool value);
    public void Abort();
    public IAsyncResult BeginGetContext(AsyncCallback callback, object state);
    public void Close();
    public HttpListenerContext EndGetContext(IAsyncResult asyncResult);
    public HttpListenerContext GetContext();
    public Task`1<HttpListenerContext> GetContextAsync();
    public ServiceNameCollection get_DefaultServiceNames();
    public ExtendedProtectionPolicy get_ExtendedProtectionPolicy();
    public void set_ExtendedProtectionPolicy(ExtendedProtectionPolicy value);
    public ExtendedProtectionSelector get_ExtendedProtectionSelectorDelegate();
    public void set_ExtendedProtectionSelectorDelegate(ExtendedProtectionSelector value);
    public HttpListenerTimeoutManager get_TimeoutManager();
    public void Start();
    public void Stop();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Net.HttpListenerBasicIdentity : GenericIdentity {
    public string Password { get; }
    public HttpListenerBasicIdentity(string username, string password);
    public virtual string get_Password();
}
public class System.Net.HttpListenerContext : object {
    public HttpListenerRequest Request { get; }
    public HttpListenerResponse Response { get; }
    public IPrincipal User { get; }
    public HttpListenerRequest get_Request();
    public HttpListenerResponse get_Response();
    public IPrincipal get_User();
    public Task`1<HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol);
    public Task`1<HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);
    public Task`1<HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment`1<byte> internalBuffer);
    public Task`1<HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol, TimeSpan keepAliveInterval);
}
public class System.Net.HttpListenerException : Win32Exception {
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    public int ErrorCode { get; }
    public HttpListenerException(int errorCode);
    public HttpListenerException(int errorCode, string message);
    protected HttpListenerException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [CompilerGeneratedAttribute]
public virtual int get_ErrorCode();
}
public class System.Net.HttpListenerPrefixCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public bool get_IsSynchronized();
    public sealed virtual void Add(string uriPrefix);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(string uriPrefix);
    public void CopyTo(Array array, int offset);
    public sealed virtual void CopyTo(String[] array, int offset);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    public sealed virtual bool Remove(string uriPrefix);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Net.HttpListenerRequest : object {
    public String[] AcceptTypes { get; }
    public int ClientCertificateError { get; }
    public Encoding ContentEncoding { get; }
    public long ContentLength64 { get; }
    public string ContentType { get; }
    public CookieCollection Cookies { get; }
    public bool HasEntityBody { get; }
    public NameValueCollection Headers { get; }
    public string HttpMethod { get; }
    public Stream InputStream { get; }
    public bool IsAuthenticated { get; }
    public bool IsLocal { get; }
    public bool IsSecureConnection { get; }
    public bool IsWebSocketRequest { get; }
    public bool KeepAlive { get; }
    public IPEndPoint LocalEndPoint { get; }
    public Version ProtocolVersion { get; }
    public NameValueCollection QueryString { get; }
    public string RawUrl { get; }
    public IPEndPoint RemoteEndPoint { get; }
    public Guid RequestTraceIdentifier { get; }
    public string ServiceName { get; }
    public TransportContext TransportContext { get; }
    public Uri Url { get; }
    public Uri UrlReferrer { get; }
    public string UserAgent { get; }
    public string UserHostAddress { get; }
    public string UserHostName { get; }
    public String[] UserLanguages { get; }
    public String[] get_AcceptTypes();
    public int get_ClientCertificateError();
    public Encoding get_ContentEncoding();
    public long get_ContentLength64();
    public string get_ContentType();
    public CookieCollection get_Cookies();
    public bool get_HasEntityBody();
    public NameValueCollection get_Headers();
    public string get_HttpMethod();
    public Stream get_InputStream();
    public bool get_IsAuthenticated();
    public bool get_IsLocal();
    public bool get_IsSecureConnection();
    public bool get_IsWebSocketRequest();
    public bool get_KeepAlive();
    public IPEndPoint get_LocalEndPoint();
    public Version get_ProtocolVersion();
    public NameValueCollection get_QueryString();
    public string get_RawUrl();
    public IPEndPoint get_RemoteEndPoint();
    public Guid get_RequestTraceIdentifier();
    public string get_ServiceName();
    public TransportContext get_TransportContext();
    public Uri get_Url();
    public Uri get_UrlReferrer();
    public string get_UserAgent();
    public string get_UserHostAddress();
    public string get_UserHostName();
    public String[] get_UserLanguages();
    public IAsyncResult BeginGetClientCertificate(AsyncCallback requestCallback, object state);
    public X509Certificate2 EndGetClientCertificate(IAsyncResult asyncResult);
    public X509Certificate2 GetClientCertificate();
    public Task`1<X509Certificate2> GetClientCertificateAsync();
}
public class System.Net.HttpListenerResponse : object {
    public Encoding ContentEncoding { get; public set; }
    public long ContentLength64 { get; public set; }
    public string ContentType { get; public set; }
    public CookieCollection Cookies { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public bool KeepAlive { get; public set; }
    public Stream OutputStream { get; }
    public Version ProtocolVersion { get; public set; }
    public string RedirectLocation { get; public set; }
    public bool SendChunked { get; public set; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public Encoding get_ContentEncoding();
    public void set_ContentEncoding(Encoding value);
    public long get_ContentLength64();
    public void set_ContentLength64(long value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public CookieCollection get_Cookies();
    public void set_Cookies(CookieCollection value);
    public WebHeaderCollection get_Headers();
    public void set_Headers(WebHeaderCollection value);
    public bool get_KeepAlive();
    public void set_KeepAlive(bool value);
    public Stream get_OutputStream();
    public Version get_ProtocolVersion();
    public void set_ProtocolVersion(Version value);
    public string get_RedirectLocation();
    public void set_RedirectLocation(string value);
    public bool get_SendChunked();
    public void set_SendChunked(bool value);
    public int get_StatusCode();
    public void set_StatusCode(int value);
    public string get_StatusDescription();
    public void set_StatusDescription(string value);
    public void Abort();
    public void AddHeader(string name, string value);
    public void AppendCookie(Cookie cookie);
    public void AppendHeader(string name, string value);
    public void Close();
    public void Close(Byte[] responseEntity, bool willBlock);
    public void CopyFrom(HttpListenerResponse templateResponse);
    public void Redirect(string url);
    public void SetCookie(Cookie cookie);
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Net.HttpListenerTimeoutManager : object {
    public TimeSpan DrainEntityBody { get; public set; }
    public TimeSpan EntityBody { get; public set; }
    public TimeSpan HeaderWait { get; public set; }
    public TimeSpan IdleConnection { get; public set; }
    public long MinSendBytesPerSecond { get; public set; }
    public TimeSpan RequestQueue { get; public set; }
    public TimeSpan get_DrainEntityBody();
    public void set_DrainEntityBody(TimeSpan value);
    public TimeSpan get_EntityBody();
    public void set_EntityBody(TimeSpan value);
    public TimeSpan get_HeaderWait();
    public void set_HeaderWait(TimeSpan value);
    public TimeSpan get_IdleConnection();
    public void set_IdleConnection(TimeSpan value);
    public long get_MinSendBytesPerSecond();
    public void set_MinSendBytesPerSecond(long value);
    public TimeSpan get_RequestQueue();
    public void set_RequestQueue(TimeSpan value);
}
public class System.Net.WebSockets.HttpListenerWebSocketContext : WebSocketContext {
    public CookieCollection CookieCollection { get; }
    public NameValueCollection Headers { get; }
    public bool IsAuthenticated { get; }
    public bool IsLocal { get; }
    public bool IsSecureConnection { get; }
    public string Origin { get; }
    public Uri RequestUri { get; }
    public string SecWebSocketKey { get; }
    public IEnumerable`1<string> SecWebSocketProtocols { get; }
    public string SecWebSocketVersion { get; }
    public IPrincipal User { get; }
    public WebSocket WebSocket { get; }
    public virtual CookieCollection get_CookieCollection();
    public virtual NameValueCollection get_Headers();
    public virtual bool get_IsAuthenticated();
    public virtual bool get_IsLocal();
    public virtual bool get_IsSecureConnection();
    public virtual string get_Origin();
    public virtual Uri get_RequestUri();
    public virtual string get_SecWebSocketKey();
    public virtual IEnumerable`1<string> get_SecWebSocketProtocols();
    public virtual string get_SecWebSocketVersion();
    public virtual IPrincipal get_User();
    public virtual WebSocket get_WebSocket();
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
