public abstract class System.Net.WebSockets.WebSocket : object {
    public static TimeSpan DefaultKeepAliveInterval { get; }
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    public static TimeSpan get_DefaultKeepAliveInterval();
    public abstract virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public abstract virtual string get_CloseStatusDescription();
    public abstract virtual WebSocketState get_State();
    public abstract virtual string get_SubProtocol();
    public abstract virtual void Abort();
    public abstract virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public abstract virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public static ArraySegment`1<byte> CreateClientBuffer(int receiveBufferSize, int sendBufferSize);
    [EditorBrowsableAttribute("1")]
public static WebSocket CreateClientWebSocket(Stream innerStream, string subProtocol, int receiveBufferSize, int sendBufferSize, TimeSpan keepAliveInterval, bool useZeroMaskingKey, ArraySegment`1<byte> internalBuffer);
    public static ArraySegment`1<byte> CreateServerBuffer(int receiveBufferSize);
    public abstract virtual void Dispose();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.")]
public static bool IsApplicationTargeting45();
    protected static bool IsStateTerminal(WebSocketState state);
    public abstract virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public static void RegisterPrefixes();
    public abstract virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
    protected static void ThrowOnInvalidState(WebSocketState state, WebSocketState[] validStates);
}
public enum System.Net.WebSockets.WebSocketCloseStatus : Enum {
    public int value__;
    public static WebSocketCloseStatus Empty;
    public static WebSocketCloseStatus EndpointUnavailable;
    public static WebSocketCloseStatus InternalServerError;
    public static WebSocketCloseStatus InvalidMessageType;
    public static WebSocketCloseStatus InvalidPayloadData;
    public static WebSocketCloseStatus MandatoryExtension;
    public static WebSocketCloseStatus MessageTooBig;
    public static WebSocketCloseStatus NormalClosure;
    public static WebSocketCloseStatus PolicyViolation;
    public static WebSocketCloseStatus ProtocolError;
}
public abstract class System.Net.WebSockets.WebSocketContext : object {
    public Uri RequestUri { get; }
    public NameValueCollection Headers { get; }
    public string Origin { get; }
    public IEnumerable`1<string> SecWebSocketProtocols { get; }
    public string SecWebSocketVersion { get; }
    public string SecWebSocketKey { get; }
    public CookieCollection CookieCollection { get; }
    public IPrincipal User { get; }
    public bool IsAuthenticated { get; }
    public bool IsLocal { get; }
    public bool IsSecureConnection { get; }
    public WebSocket WebSocket { get; }
    public abstract virtual Uri get_RequestUri();
    public abstract virtual NameValueCollection get_Headers();
    public abstract virtual string get_Origin();
    public abstract virtual IEnumerable`1<string> get_SecWebSocketProtocols();
    public abstract virtual string get_SecWebSocketVersion();
    public abstract virtual string get_SecWebSocketKey();
    public abstract virtual CookieCollection get_CookieCollection();
    public abstract virtual IPrincipal get_User();
    public abstract virtual bool get_IsAuthenticated();
    public abstract virtual bool get_IsLocal();
    public abstract virtual bool get_IsSecureConnection();
    public abstract virtual WebSocket get_WebSocket();
}
public enum System.Net.WebSockets.WebSocketError : Enum {
    public int value__;
    public static WebSocketError ConnectionClosedPrematurely;
    public static WebSocketError Faulted;
    public static WebSocketError HeaderError;
    public static WebSocketError InvalidMessageType;
    public static WebSocketError InvalidState;
    public static WebSocketError NativeError;
    public static WebSocketError NotAWebSocket;
    public static WebSocketError Success;
    public static WebSocketError UnsupportedProtocol;
    public static WebSocketError UnsupportedVersion;
}
public class System.Net.WebSockets.WebSocketException : Win32Exception {
    public WebSocketError WebSocketErrorCode { get; }
    public int ErrorCode { get; }
    public WebSocketException(int nativeError);
    public WebSocketException(int nativeError, Exception innerException);
    public WebSocketException(int nativeError, string message);
    public WebSocketException(WebSocketError error);
    public WebSocketException(WebSocketError error, Exception innerException);
    public WebSocketException(WebSocketError error, int nativeError);
    public WebSocketException(WebSocketError error, int nativeError, Exception innerException);
    public WebSocketException(WebSocketError error, int nativeError, string message);
    public WebSocketException(WebSocketError error, int nativeError, string message, Exception innerException);
    public WebSocketException(WebSocketError error, string message);
    public WebSocketException(WebSocketError error, string message, Exception innerException);
    public WebSocketException(string message);
    public WebSocketException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public WebSocketError get_WebSocketErrorCode();
    public virtual int get_ErrorCode();
}
public enum System.Net.WebSockets.WebSocketMessageType : Enum {
    public int value__;
    public static WebSocketMessageType Binary;
    public static WebSocketMessageType Close;
    public static WebSocketMessageType Text;
}
public class System.Net.WebSockets.WebSocketReceiveResult : object {
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public int Count { get; }
    public bool EndOfMessage { get; }
    public WebSocketMessageType MessageType { get; }
    public WebSocketReceiveResult(int count, WebSocketMessageType messageType, bool endOfMessage);
    public WebSocketReceiveResult(int count, WebSocketMessageType messageType, bool endOfMessage, Nullable`1<WebSocketCloseStatus> closeStatus, string closeStatusDescription);
    public Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public string get_CloseStatusDescription();
    public int get_Count();
    public bool get_EndOfMessage();
    public WebSocketMessageType get_MessageType();
}
public enum System.Net.WebSockets.WebSocketState : Enum {
    public int value__;
    public static WebSocketState Aborted;
    public static WebSocketState Closed;
    public static WebSocketState CloseReceived;
    public static WebSocketState CloseSent;
    public static WebSocketState Connecting;
    public static WebSocketState None;
    public static WebSocketState Open;
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
