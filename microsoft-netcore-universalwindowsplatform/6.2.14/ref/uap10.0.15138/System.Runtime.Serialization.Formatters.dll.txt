[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
[CLSCompliantAttribute("False")]
public abstract class System.Runtime.Serialization.Formatter : object {
    protected ObjectIDGenerator m_idGenerator;
    protected Queue m_objectQueue;
    public SerializationBinder Binder { get; public set; }
    public StreamingContext Context { get; public set; }
    public ISurrogateSelector SurrogateSelector { get; public set; }
    public abstract virtual SerializationBinder get_Binder();
    public abstract virtual void set_Binder(SerializationBinder value);
    public abstract virtual StreamingContext get_Context();
    public abstract virtual void set_Context(StreamingContext value);
    public abstract virtual ISurrogateSelector get_SurrogateSelector();
    public abstract virtual void set_SurrogateSelector(ISurrogateSelector value);
    public abstract virtual object Deserialize(Stream serializationStream);
    protected virtual object GetNext(Int64& objID);
    protected virtual long Schedule(object obj);
    public abstract virtual void Serialize(Stream serializationStream, object graph);
    protected abstract virtual void WriteArray(object obj, string name, Type memberType);
    protected abstract virtual void WriteBoolean(bool val, string name);
    protected abstract virtual void WriteByte(byte val, string name);
    protected abstract virtual void WriteChar(char val, string name);
    protected abstract virtual void WriteDateTime(DateTime val, string name);
    protected abstract virtual void WriteDecimal(decimal val, string name);
    protected abstract virtual void WriteDouble(double val, string name);
    protected abstract virtual void WriteInt16(short val, string name);
    protected abstract virtual void WriteInt32(int val, string name);
    protected abstract virtual void WriteInt64(long val, string name);
    protected virtual void WriteMember(string memberName, object data);
    protected abstract virtual void WriteObjectRef(object obj, string name, Type memberType);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteSByte(sbyte val, string name);
    protected abstract virtual void WriteSingle(float val, string name);
    protected abstract virtual void WriteTimeSpan(TimeSpan val, string name);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteUInt16(ushort val, string name);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteUInt32(UInt32 val, string name);
    [CLSCompliantAttribute("False")]
protected abstract virtual void WriteUInt64(ulong val, string name);
    protected abstract virtual void WriteValueType(object obj, string name, Type memberType);
}
public class System.Runtime.Serialization.FormatterConverter : object {
    public sealed virtual object Convert(object value, Type type);
    public sealed virtual object Convert(object value, TypeCode typeCode);
    public sealed virtual bool ToBoolean(object value);
    public sealed virtual byte ToByte(object value);
    public sealed virtual char ToChar(object value);
    public sealed virtual DateTime ToDateTime(object value);
    public sealed virtual decimal ToDecimal(object value);
    public sealed virtual double ToDouble(object value);
    public sealed virtual short ToInt16(object value);
    public sealed virtual int ToInt32(object value);
    public sealed virtual long ToInt64(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual sbyte ToSByte(object value);
    public sealed virtual float ToSingle(object value);
    public sealed virtual string ToString(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual ushort ToUInt16(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual UInt32 ToUInt32(object value);
    [CLSCompliantAttribute("False")]
public sealed virtual ulong ToUInt64(object value);
}
public class System.Runtime.Serialization.Formatters.Binary.BinaryFormatter : object {
    public FormatterAssemblyStyle AssemblyFormat { get; public set; }
    public SerializationBinder Binder { get; public set; }
    public StreamingContext Context { get; public set; }
    public TypeFilterLevel FilterLevel { get; public set; }
    public ISurrogateSelector SurrogateSelector { get; public set; }
    public FormatterTypeStyle TypeFormat { get; public set; }
    public BinaryFormatter(ISurrogateSelector selector, StreamingContext context);
    public FormatterAssemblyStyle get_AssemblyFormat();
    public void set_AssemblyFormat(FormatterAssemblyStyle value);
    public sealed virtual SerializationBinder get_Binder();
    public sealed virtual void set_Binder(SerializationBinder value);
    public sealed virtual StreamingContext get_Context();
    public sealed virtual void set_Context(StreamingContext value);
    public TypeFilterLevel get_FilterLevel();
    public void set_FilterLevel(TypeFilterLevel value);
    public sealed virtual ISurrogateSelector get_SurrogateSelector();
    public sealed virtual void set_SurrogateSelector(ISurrogateSelector value);
    public FormatterTypeStyle get_TypeFormat();
    public void set_TypeFormat(FormatterTypeStyle value);
    public sealed virtual object Deserialize(Stream serializationStream);
    public sealed virtual void Serialize(Stream serializationStream, object graph);
}
public enum System.Runtime.Serialization.Formatters.FormatterAssemblyStyle : Enum {
    public int value__;
    public static FormatterAssemblyStyle Full;
    public static FormatterAssemblyStyle Simple;
}
public enum System.Runtime.Serialization.Formatters.FormatterTypeStyle : Enum {
    public int value__;
    public static FormatterTypeStyle TypesAlways;
    public static FormatterTypeStyle TypesWhenNeeded;
    public static FormatterTypeStyle XsdString;
}
public interface System.Runtime.Serialization.Formatters.IFieldInfo {
    public String[] FieldNames { get; public set; }
    public Type[] FieldTypes { get; public set; }
    public abstract virtual String[] get_FieldNames();
    public abstract virtual void set_FieldNames(String[] value);
    public abstract virtual Type[] get_FieldTypes();
    public abstract virtual void set_FieldTypes(Type[] value);
}
public enum System.Runtime.Serialization.Formatters.TypeFilterLevel : Enum {
    public int value__;
    public static TypeFilterLevel Full;
    public static TypeFilterLevel Low;
}
public static class System.Runtime.Serialization.FormatterServices : object {
    public static void CheckTypeSecurity(Type t, TypeFilterLevel securityLevel);
    public static Object[] GetObjectData(object obj, MemberInfo[] members);
    public static object GetSafeUninitializedObject(Type type);
    public static MemberInfo[] GetSerializableMembers(Type type);
    public static MemberInfo[] GetSerializableMembers(Type type, StreamingContext context);
    public static ISerializationSurrogate GetSurrogateForCyclicalReference(ISerializationSurrogate innerSurrogate);
    public static Type GetTypeFromAssembly(Assembly assem, string name);
    public static object GetUninitializedObject(Type type);
    public static object PopulateObjectMembers(object obj, MemberInfo[] members, Object[] data);
}
public interface System.Runtime.Serialization.IFormatter {
    public SerializationBinder Binder { get; public set; }
    public StreamingContext Context { get; public set; }
    public ISurrogateSelector SurrogateSelector { get; public set; }
    public abstract virtual SerializationBinder get_Binder();
    public abstract virtual void set_Binder(SerializationBinder value);
    public abstract virtual StreamingContext get_Context();
    public abstract virtual void set_Context(StreamingContext value);
    public abstract virtual ISurrogateSelector get_SurrogateSelector();
    public abstract virtual void set_SurrogateSelector(ISurrogateSelector value);
    public abstract virtual object Deserialize(Stream serializationStream);
    public abstract virtual void Serialize(Stream serializationStream, object graph);
}
public interface System.Runtime.Serialization.ISerializationSurrogate {
    public abstract virtual void GetObjectData(object obj, SerializationInfo info, StreamingContext context);
    public abstract virtual object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector);
}
public interface System.Runtime.Serialization.ISurrogateSelector {
    public abstract virtual void ChainSelector(ISurrogateSelector selector);
    public abstract virtual ISurrogateSelector GetNextSelector();
    public abstract virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, ISurrogateSelector& selector);
}
public class System.Runtime.Serialization.ObjectIDGenerator : object {
    public virtual long GetId(object obj, Boolean& firstTime);
    public virtual long HasId(object obj, Boolean& firstTime);
}
public class System.Runtime.Serialization.ObjectManager : object {
    public ObjectManager(ISurrogateSelector selector, StreamingContext context);
    public virtual void DoFixups();
    public virtual object GetObject(long objectID);
    public virtual void RaiseDeserializationEvent();
    public void RaiseOnDeserializingEvent(object obj);
    public virtual void RecordArrayElementFixup(long arrayToBeFixed, int index, long objectRequired);
    public virtual void RecordArrayElementFixup(long arrayToBeFixed, Int32[] indices, long objectRequired);
    public virtual void RecordDelayedFixup(long objectToBeFixed, string memberName, long objectRequired);
    public virtual void RecordFixup(long objectToBeFixed, MemberInfo member, long objectRequired);
    public virtual void RegisterObject(object obj, long objectID);
    public void RegisterObject(object obj, long objectID, SerializationInfo info);
    public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member);
    public void RegisterObject(object obj, long objectID, SerializationInfo info, long idOfContainingObj, MemberInfo member, Int32[] arrayIndex);
}
public abstract class System.Runtime.Serialization.SerializationBinder : object {
    public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
    public abstract virtual Type BindToType(string assemblyName, string typeName);
}
public class System.Runtime.Serialization.SerializationObjectManager : object {
    public SerializationObjectManager(StreamingContext context);
    public void RaiseOnSerializedEvent();
    public void RegisterObject(object obj);
}
public class System.Runtime.Serialization.SurrogateSelector : object {
    public virtual void AddSurrogate(Type type, StreamingContext context, ISerializationSurrogate surrogate);
    public virtual void ChainSelector(ISurrogateSelector selector);
    public virtual ISurrogateSelector GetNextSelector();
    public virtual ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, ISurrogateSelector& selector);
    public virtual void RemoveSurrogate(Type type, StreamingContext context);
}
