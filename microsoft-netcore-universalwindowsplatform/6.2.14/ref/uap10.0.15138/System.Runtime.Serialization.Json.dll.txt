[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
public class System.Runtime.Serialization.DateTimeFormat : object {
    public DateTimeStyles DateTimeStyles { get; public set; }
    public IFormatProvider FormatProvider { get; }
    public string FormatString { get; }
    public DateTimeFormat(string formatString);
    public DateTimeFormat(string formatString, IFormatProvider formatProvider);
    public DateTimeStyles get_DateTimeStyles();
    public void set_DateTimeStyles(DateTimeStyles value);
    public IFormatProvider get_FormatProvider();
    public string get_FormatString();
}
public enum System.Runtime.Serialization.EmitTypeInformation : Enum {
    public int value__;
    public static EmitTypeInformation Always;
    public static EmitTypeInformation AsNeeded;
    public static EmitTypeInformation Never;
}
public class System.Runtime.Serialization.Json.DataContractJsonSerializer : XmlObjectSerializer {
    public DateTimeFormat DateTimeFormat { get; }
    public EmitTypeInformation EmitTypeInformation { get; }
    public bool IgnoreExtensionDataObject { get; }
    public ReadOnlyCollection`1<Type> KnownTypes { get; }
    public int MaxItemsInObjectGraph { get; }
    public bool SerializeReadOnlyTypes { get; }
    public bool UseSimpleDictionaryFormat { get; }
    public DataContractJsonSerializer(Type type);
    public DataContractJsonSerializer(Type type, IEnumerable`1<Type> knownTypes);
    public DataContractJsonSerializer(Type type, DataContractJsonSerializerSettings settings);
    public DataContractJsonSerializer(Type type, string rootName);
    public DataContractJsonSerializer(Type type, string rootName, IEnumerable`1<Type> knownTypes);
    public DataContractJsonSerializer(Type type, XmlDictionaryString rootName);
    public DataContractJsonSerializer(Type type, XmlDictionaryString rootName, IEnumerable`1<Type> knownTypes);
    public DateTimeFormat get_DateTimeFormat();
    public EmitTypeInformation get_EmitTypeInformation();
    public bool get_IgnoreExtensionDataObject();
    public ReadOnlyCollection`1<Type> get_KnownTypes();
    public int get_MaxItemsInObjectGraph();
    public bool get_SerializeReadOnlyTypes();
    public bool get_UseSimpleDictionaryFormat();
    public virtual bool IsStartObject(XmlDictionaryReader reader);
    public virtual bool IsStartObject(XmlReader reader);
    public virtual object ReadObject(Stream stream);
    public virtual object ReadObject(XmlDictionaryReader reader);
    public virtual object ReadObject(XmlDictionaryReader reader, bool verifyObjectName);
    public virtual object ReadObject(XmlReader reader);
    public virtual object ReadObject(XmlReader reader, bool verifyObjectName);
    public virtual void WriteEndObject(XmlDictionaryWriter writer);
    public virtual void WriteEndObject(XmlWriter writer);
    public virtual void WriteObject(Stream stream, object graph);
    public virtual void WriteObject(XmlDictionaryWriter writer, object graph);
    public virtual void WriteObject(XmlWriter writer, object graph);
    public virtual void WriteObjectContent(XmlDictionaryWriter writer, object graph);
    public virtual void WriteObjectContent(XmlWriter writer, object graph);
    public virtual void WriteStartObject(XmlDictionaryWriter writer, object graph);
    public virtual void WriteStartObject(XmlWriter writer, object graph);
}
public class System.Runtime.Serialization.Json.DataContractJsonSerializerSettings : object {
    public DateTimeFormat DateTimeFormat { get; public set; }
    public EmitTypeInformation EmitTypeInformation { get; public set; }
    public bool IgnoreExtensionDataObject { get; public set; }
    public IEnumerable`1<Type> KnownTypes { get; public set; }
    public int MaxItemsInObjectGraph { get; public set; }
    public string RootName { get; public set; }
    public bool SerializeReadOnlyTypes { get; public set; }
    public bool UseSimpleDictionaryFormat { get; public set; }
    public DateTimeFormat get_DateTimeFormat();
    public void set_DateTimeFormat(DateTimeFormat value);
    public EmitTypeInformation get_EmitTypeInformation();
    public void set_EmitTypeInformation(EmitTypeInformation value);
    public bool get_IgnoreExtensionDataObject();
    public void set_IgnoreExtensionDataObject(bool value);
    public IEnumerable`1<Type> get_KnownTypes();
    public void set_KnownTypes(IEnumerable`1<Type> value);
    public int get_MaxItemsInObjectGraph();
    public void set_MaxItemsInObjectGraph(int value);
    public string get_RootName();
    public void set_RootName(string value);
    public bool get_SerializeReadOnlyTypes();
    public void set_SerializeReadOnlyTypes(bool value);
    public bool get_UseSimpleDictionaryFormat();
    public void set_UseSimpleDictionaryFormat(bool value);
}
public interface System.Runtime.Serialization.Json.IXmlJsonReaderInitializer {
    public abstract virtual void SetInput(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose);
    public abstract virtual void SetInput(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose);
}
public interface System.Runtime.Serialization.Json.IXmlJsonWriterInitializer {
    public abstract virtual void SetOutput(Stream stream, Encoding encoding, bool ownsStream);
}
public static class System.Runtime.Serialization.Json.JsonReaderWriterFactory : object {
    public static XmlDictionaryReader CreateJsonReader(Byte[] buffer, int offset, int count, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose);
    public static XmlDictionaryReader CreateJsonReader(Byte[] buffer, int offset, int count, XmlDictionaryReaderQuotas quotas);
    public static XmlDictionaryReader CreateJsonReader(Byte[] buffer, XmlDictionaryReaderQuotas quotas);
    public static XmlDictionaryReader CreateJsonReader(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose);
    public static XmlDictionaryReader CreateJsonReader(Stream stream, XmlDictionaryReaderQuotas quotas);
    public static XmlDictionaryWriter CreateJsonWriter(Stream stream);
    public static XmlDictionaryWriter CreateJsonWriter(Stream stream, Encoding encoding);
    public static XmlDictionaryWriter CreateJsonWriter(Stream stream, Encoding encoding, bool ownsStream);
    public static XmlDictionaryWriter CreateJsonWriter(Stream stream, Encoding encoding, bool ownsStream, bool indent);
    public static XmlDictionaryWriter CreateJsonWriter(Stream stream, Encoding encoding, bool ownsStream, bool indent, string indentChars);
}
