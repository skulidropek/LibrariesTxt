[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
public abstract class System.Security.Cryptography.Aes : SymmetricAlgorithm {
    public static Aes Create();
    public static Aes Create(string algorithmName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.AesManaged : Aes {
    public int FeedbackSize { get; public set; }
    public int BlockSize { get; public set; }
    public Byte[] IV { get; public set; }
    public Byte[] Key { get; public set; }
    public int KeySize { get; public set; }
    public KeySizes[] LegalBlockSizes { get; }
    public KeySizes[] LegalKeySizes { get; }
    public CipherMode Mode { get; public set; }
    public PaddingMode Padding { get; public set; }
    public virtual int get_FeedbackSize();
    public virtual void set_FeedbackSize(int value);
    public virtual int get_BlockSize();
    public virtual void set_BlockSize(int value);
    public virtual Byte[] get_IV();
    public virtual void set_IV(Byte[] value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual KeySizes[] get_LegalBlockSizes();
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual CipherMode get_Mode();
    public virtual void set_Mode(CipherMode value);
    public virtual PaddingMode get_Padding();
    public virtual void set_Padding(PaddingMode value);
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    protected virtual void Dispose(bool disposing);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
}
public abstract class System.Security.Cryptography.AsymmetricKeyExchangeDeformatter : object {
    public string Parameters { get; public set; }
    public abstract virtual string get_Parameters();
    public abstract virtual void set_Parameters(string value);
    public abstract virtual Byte[] DecryptKeyExchange(Byte[] rgb);
    public abstract virtual void SetKey(AsymmetricAlgorithm key);
}
public abstract class System.Security.Cryptography.AsymmetricKeyExchangeFormatter : object {
    public string Parameters { get; }
    public abstract virtual string get_Parameters();
    public abstract virtual Byte[] CreateKeyExchange(Byte[] data);
    public abstract virtual Byte[] CreateKeyExchange(Byte[] data, Type symAlgType);
    public abstract virtual void SetKey(AsymmetricAlgorithm key);
}
public abstract class System.Security.Cryptography.AsymmetricSignatureDeformatter : object {
    public abstract virtual void SetHashAlgorithm(string strName);
    public abstract virtual void SetKey(AsymmetricAlgorithm key);
    public abstract virtual bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature);
    public virtual bool VerifySignature(HashAlgorithm hash, Byte[] rgbSignature);
}
public abstract class System.Security.Cryptography.AsymmetricSignatureFormatter : object {
    public abstract virtual Byte[] CreateSignature(Byte[] rgbHash);
    public virtual Byte[] CreateSignature(HashAlgorithm hash);
    public abstract virtual void SetHashAlgorithm(string strName);
    public abstract virtual void SetKey(AsymmetricAlgorithm key);
}
public class System.Security.Cryptography.CryptoConfig : object {
    public static bool AllowOnlyFipsAlgorithms { get; }
    public static bool get_AllowOnlyFipsAlgorithms();
    public static void AddAlgorithm(Type algorithm, String[] names);
    public static void AddOID(string oid, String[] names);
    public static object CreateFromName(string name);
    public static object CreateFromName(string name, Object[] args);
    public static Byte[] EncodeOID(string str);
    public static string MapNameToOID(string name);
}
public abstract class System.Security.Cryptography.DeriveBytes : object {
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual Byte[] GetBytes(int cb);
    public abstract virtual void Reset();
}
[EditorBrowsableAttribute("1")]
public abstract class System.Security.Cryptography.DES : SymmetricAlgorithm {
    public Byte[] Key { get; public set; }
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public static DES Create();
    public static DES Create(string algName);
    public static bool IsSemiWeakKey(Byte[] rgbKey);
    public static bool IsWeakKey(Byte[] rgbKey);
}
public abstract class System.Security.Cryptography.DSA : AsymmetricAlgorithm {
    public static DSA Create();
    public static DSA Create(int keySizeInBits);
    public static DSA Create(string algName);
    public static DSA Create(DSAParameters parameters);
    public abstract virtual Byte[] CreateSignature(Byte[] rgbHash);
    public abstract virtual DSAParameters ExportParameters(bool includePrivateParameters);
    public virtual void FromXmlString(string xmlString);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public abstract virtual void ImportParameters(DSAParameters parameters);
    public virtual Byte[] SignData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    public Byte[] SignData(Byte[] data, HashAlgorithmName hashAlgorithm);
    public virtual Byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm);
    public virtual string ToXmlString(bool includePrivateParameters);
    public bool VerifyData(Byte[] data, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public virtual bool VerifyData(Byte[] data, int offset, int count, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public virtual bool VerifyData(Stream data, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public abstract virtual bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature);
}
public class System.Security.Cryptography.DSAParameters : ValueType {
    public int Counter;
    public Byte[] G;
    public Byte[] J;
    public Byte[] P;
    public Byte[] Q;
    public Byte[] Seed;
    public Byte[] X;
    public Byte[] Y;
}
public class System.Security.Cryptography.DSASignatureDeformatter : AsymmetricSignatureDeformatter {
    public DSASignatureDeformatter(AsymmetricAlgorithm key);
    public virtual void SetHashAlgorithm(string strName);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature);
}
public class System.Security.Cryptography.DSASignatureFormatter : AsymmetricSignatureFormatter {
    public DSASignatureFormatter(AsymmetricAlgorithm key);
    public virtual Byte[] CreateSignature(Byte[] rgbHash);
    public virtual void SetHashAlgorithm(string strName);
    public virtual void SetKey(AsymmetricAlgorithm key);
}
public class System.Security.Cryptography.ECCurve : ValueType {
    public Byte[] A;
    public Byte[] B;
    public Byte[] Cofactor;
    public ECCurveType CurveType;
    public ECPoint G;
    public Nullable`1<HashAlgorithmName> Hash;
    public Byte[] Order;
    public Byte[] Polynomial;
    public Byte[] Prime;
    public Byte[] Seed;
    public bool IsCharacteristic2 { get; }
    public bool IsExplicit { get; }
    public bool IsNamed { get; }
    public bool IsPrime { get; }
    public Oid Oid { get; }
    public bool get_IsCharacteristic2();
    public bool get_IsExplicit();
    public bool get_IsNamed();
    public bool get_IsPrime();
    public Oid get_Oid();
    public static ECCurve CreateFromFriendlyName(string oidFriendlyName);
    public static ECCurve CreateFromOid(Oid curveOid);
    public static ECCurve CreateFromValue(string oidValue);
    public void Validate();
}
public abstract class System.Security.Cryptography.ECDiffieHellmanPublicKey : object {
    protected ECDiffieHellmanPublicKey(Byte[] keyBlob);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual Byte[] ToByteArray();
    public virtual string ToXmlString();
}
public abstract class System.Security.Cryptography.ECDsa : AsymmetricAlgorithm {
    public string KeyExchangeAlgorithm { get; }
    public string SignatureAlgorithm { get; }
    public virtual string get_KeyExchangeAlgorithm();
    public virtual string get_SignatureAlgorithm();
    public static ECDsa Create();
    public static ECDsa Create(ECCurve curve);
    public static ECDsa Create(ECParameters parameters);
    public static ECDsa Create(string algorithm);
    public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters);
    public virtual ECParameters ExportParameters(bool includePrivateParameters);
    public virtual void FromXmlString(string xmlString);
    public virtual void GenerateKey(ECCurve curve);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public virtual void ImportParameters(ECParameters parameters);
    public virtual Byte[] SignData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    public virtual Byte[] SignData(Byte[] data, HashAlgorithmName hashAlgorithm);
    public virtual Byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm);
    public abstract virtual Byte[] SignHash(Byte[] hash);
    public virtual string ToXmlString(bool includePrivateParameters);
    public bool VerifyData(Byte[] data, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public virtual bool VerifyData(Byte[] data, int offset, int count, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public bool VerifyData(Stream data, Byte[] signature, HashAlgorithmName hashAlgorithm);
    public abstract virtual bool VerifyHash(Byte[] hash, Byte[] signature);
}
public class System.Security.Cryptography.ECParameters : ValueType {
    public ECCurve Curve;
    public Byte[] D;
    public ECPoint Q;
    public void Validate();
}
public class System.Security.Cryptography.ECPoint : ValueType {
    public Byte[] X;
    public Byte[] Y;
}
public class System.Security.Cryptography.HMACMD5 : HMAC {
    public Byte[] Key { get; public set; }
    public HMACMD5(Byte[] key);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public class System.Security.Cryptography.HMACSHA1 : HMAC {
    public Byte[] Key { get; public set; }
    public HMACSHA1(Byte[] key);
    [EditorBrowsableAttribute("1")]
public HMACSHA1(Byte[] key, bool useManagedSha1);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public class System.Security.Cryptography.HMACSHA256 : HMAC {
    public Byte[] Key { get; public set; }
    public HMACSHA256(Byte[] key);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public class System.Security.Cryptography.HMACSHA384 : HMAC {
    [CompilerGeneratedAttribute]
private bool <ProduceLegacyHmacValues>k__BackingField;
    public bool ProduceLegacyHmacValues { get; public set; }
    public Byte[] Key { get; public set; }
    public HMACSHA384(Byte[] key);
    [CompilerGeneratedAttribute]
public bool get_ProduceLegacyHmacValues();
    [CompilerGeneratedAttribute]
public void set_ProduceLegacyHmacValues(bool value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public class System.Security.Cryptography.HMACSHA512 : HMAC {
    [CompilerGeneratedAttribute]
private bool <ProduceLegacyHmacValues>k__BackingField;
    public bool ProduceLegacyHmacValues { get; public set; }
    public Byte[] Key { get; public set; }
    public HMACSHA512(Byte[] key);
    [CompilerGeneratedAttribute]
public bool get_ProduceLegacyHmacValues();
    [CompilerGeneratedAttribute]
public void set_ProduceLegacyHmacValues(bool value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public class System.Security.Cryptography.IncrementalHash : object {
    public HashAlgorithmName AlgorithmName { get; }
    public HashAlgorithmName get_AlgorithmName();
    public void AppendData(Byte[] data);
    public void AppendData(Byte[] data, int offset, int count);
    public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm);
    public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, Byte[] key);
    public sealed virtual void Dispose();
    public Byte[] GetHashAndReset();
}
public abstract class System.Security.Cryptography.MaskGenerationMethod : object {
    public abstract virtual Byte[] GenerateMask(Byte[] rgbSeed, int cbReturn);
}
public abstract class System.Security.Cryptography.MD5 : HashAlgorithm {
    public static MD5 Create();
    public static MD5 Create(string algName);
}
public class System.Security.Cryptography.PKCS1MaskGenerationMethod : MaskGenerationMethod {
    public string HashName { get; public set; }
    public string get_HashName();
    public void set_HashName(string value);
    public virtual Byte[] GenerateMask(Byte[] rgbSeed, int cbReturn);
}
public abstract class System.Security.Cryptography.RandomNumberGenerator : object {
    public static RandomNumberGenerator Create();
    public static RandomNumberGenerator Create(string rngName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void GetBytes(Byte[] data);
    public virtual void GetBytes(Byte[] data, int offset, int count);
    public virtual void GetNonZeroBytes(Byte[] data);
}
[EditorBrowsableAttribute("1")]
public abstract class System.Security.Cryptography.RC2 : SymmetricAlgorithm {
    protected int EffectiveKeySizeValue;
    public int EffectiveKeySize { get; public set; }
    public int KeySize { get; public set; }
    public virtual int get_EffectiveKeySize();
    public virtual void set_EffectiveKeySize(int value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public static RC2 Create();
    public static RC2 Create(string AlgName);
}
public class System.Security.Cryptography.Rfc2898DeriveBytes : DeriveBytes {
    public HashAlgorithmName HashAlgorithm { get; }
    public int IterationCount { get; public set; }
    public Byte[] Salt { get; public set; }
    public Rfc2898DeriveBytes(Byte[] password, Byte[] salt, int iterations);
    public Rfc2898DeriveBytes(Byte[] password, Byte[] salt, int iterations, HashAlgorithmName hashAlgorithm);
    public Rfc2898DeriveBytes(string password, Byte[] salt);
    public Rfc2898DeriveBytes(string password, Byte[] salt, int iterations);
    public Rfc2898DeriveBytes(string password, Byte[] salt, int iterations, HashAlgorithmName hashAlgorithm);
    public Rfc2898DeriveBytes(string password, int saltSize);
    public Rfc2898DeriveBytes(string password, int saltSize, int iterations);
    public Rfc2898DeriveBytes(string password, int saltSize, int iterations, HashAlgorithmName hashAlgorithm);
    public HashAlgorithmName get_HashAlgorithm();
    public int get_IterationCount();
    public void set_IterationCount(int value);
    public Byte[] get_Salt();
    public void set_Salt(Byte[] value);
    public Byte[] CryptDeriveKey(string algname, string alghashname, int keySize, Byte[] rgbIV);
    protected virtual void Dispose(bool disposing);
    public virtual Byte[] GetBytes(int cb);
    public virtual void Reset();
}
[EditorBrowsableAttribute("1")]
public abstract class System.Security.Cryptography.Rijndael : SymmetricAlgorithm {
    public static Rijndael Create();
    public static Rijndael Create(string algName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.RijndaelManaged : Rijndael {
    public int BlockSize { get; public set; }
    public Byte[] IV { get; public set; }
    public Byte[] Key { get; public set; }
    public int KeySize { get; public set; }
    public KeySizes[] LegalKeySizes { get; }
    public CipherMode Mode { get; public set; }
    public PaddingMode Padding { get; public set; }
    public virtual int get_BlockSize();
    public virtual void set_BlockSize(int value);
    public virtual Byte[] get_IV();
    public virtual void set_IV(Byte[] value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual CipherMode get_Mode();
    public virtual void set_Mode(CipherMode value);
    public virtual PaddingMode get_Padding();
    public virtual void set_Padding(PaddingMode value);
    public virtual ICryptoTransform CreateDecryptor();
    public virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    protected virtual void Dispose(bool disposing);
    public virtual void GenerateIV();
    public virtual void GenerateKey();
}
public abstract class System.Security.Cryptography.RSA : AsymmetricAlgorithm {
    public string KeyExchangeAlgorithm { get; }
    public string SignatureAlgorithm { get; }
    public virtual string get_KeyExchangeAlgorithm();
    public virtual string get_SignatureAlgorithm();
    public static RSA Create();
    public static RSA Create(int keySizeInBits);
    public static RSA Create(string algName);
    public static RSA Create(RSAParameters parameters);
    public virtual Byte[] Decrypt(Byte[] data, RSAEncryptionPadding padding);
    public virtual Byte[] DecryptValue(Byte[] rgb);
    public virtual Byte[] Encrypt(Byte[] data, RSAEncryptionPadding padding);
    public virtual Byte[] EncryptValue(Byte[] rgb);
    public abstract virtual RSAParameters ExportParameters(bool includePrivateParameters);
    protected virtual Byte[] HashData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm);
    protected virtual Byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm);
    public virtual void FromXmlString(string xmlString);
    public abstract virtual void ImportParameters(RSAParameters parameters);
    public virtual Byte[] SignData(Byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public Byte[] SignData(Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual Byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual Byte[] SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual string ToXmlString(bool includePrivateParameters);
    public bool VerifyData(Byte[] data, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool VerifyData(Byte[] data, int offset, int count, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public bool VerifyData(Stream data, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
    public virtual bool VerifyHash(Byte[] hash, Byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding);
}
public class System.Security.Cryptography.RSAEncryptionPadding : object {
    public RSAEncryptionPaddingMode Mode { get; }
    public HashAlgorithmName OaepHashAlgorithm { get; }
    public static RSAEncryptionPadding OaepSHA1 { get; }
    public static RSAEncryptionPadding OaepSHA256 { get; }
    public static RSAEncryptionPadding OaepSHA384 { get; }
    public static RSAEncryptionPadding OaepSHA512 { get; }
    public static RSAEncryptionPadding Pkcs1 { get; }
    public RSAEncryptionPaddingMode get_Mode();
    public HashAlgorithmName get_OaepHashAlgorithm();
    public static RSAEncryptionPadding get_OaepSHA1();
    public static RSAEncryptionPadding get_OaepSHA256();
    public static RSAEncryptionPadding get_OaepSHA384();
    public static RSAEncryptionPadding get_OaepSHA512();
    public static RSAEncryptionPadding get_Pkcs1();
    public static RSAEncryptionPadding CreateOaep(HashAlgorithmName hashAlgorithm);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RSAEncryptionPadding other);
    public virtual int GetHashCode();
    public static bool op_Equality(RSAEncryptionPadding left, RSAEncryptionPadding right);
    public static bool op_Inequality(RSAEncryptionPadding left, RSAEncryptionPadding right);
    public virtual string ToString();
}
public enum System.Security.Cryptography.RSAEncryptionPaddingMode : Enum {
    public int value__;
    public static RSAEncryptionPaddingMode Oaep;
    public static RSAEncryptionPaddingMode Pkcs1;
}
public class System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter : AsymmetricKeyExchangeDeformatter {
    public string Parameters { get; public set; }
    public RSAOAEPKeyExchangeDeformatter(AsymmetricAlgorithm key);
    public virtual string get_Parameters();
    public virtual void set_Parameters(string value);
    public virtual Byte[] DecryptKeyExchange(Byte[] rgbData);
    public virtual void SetKey(AsymmetricAlgorithm key);
}
public class System.Security.Cryptography.RSAOAEPKeyExchangeFormatter : AsymmetricKeyExchangeFormatter {
    public Byte[] Parameter { get; public set; }
    public string Parameters { get; }
    public RandomNumberGenerator Rng { get; public set; }
    public RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm key);
    public Byte[] get_Parameter();
    public void set_Parameter(Byte[] value);
    public virtual string get_Parameters();
    public RandomNumberGenerator get_Rng();
    public void set_Rng(RandomNumberGenerator value);
    public virtual Byte[] CreateKeyExchange(Byte[] rgbData);
    public virtual Byte[] CreateKeyExchange(Byte[] rgbData, Type symAlgType);
    public virtual void SetKey(AsymmetricAlgorithm key);
}
public class System.Security.Cryptography.RSAParameters : ValueType {
    public Byte[] D;
    public Byte[] DP;
    public Byte[] DQ;
    public Byte[] Exponent;
    public Byte[] InverseQ;
    public Byte[] Modulus;
    public Byte[] P;
    public Byte[] Q;
}
public class System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter : AsymmetricKeyExchangeDeformatter {
    public RandomNumberGenerator RNG { get; public set; }
    public string Parameters { get; public set; }
    public RSAPKCS1KeyExchangeDeformatter(AsymmetricAlgorithm key);
    public RandomNumberGenerator get_RNG();
    public void set_RNG(RandomNumberGenerator value);
    public virtual string get_Parameters();
    public virtual void set_Parameters(string value);
    public virtual Byte[] DecryptKeyExchange(Byte[] rgbIn);
    public virtual void SetKey(AsymmetricAlgorithm key);
}
public class System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter : AsymmetricKeyExchangeFormatter {
    public string Parameters { get; }
    public RandomNumberGenerator Rng { get; public set; }
    public RSAPKCS1KeyExchangeFormatter(AsymmetricAlgorithm key);
    public virtual string get_Parameters();
    public RandomNumberGenerator get_Rng();
    public void set_Rng(RandomNumberGenerator value);
    public virtual Byte[] CreateKeyExchange(Byte[] rgbData);
    public virtual Byte[] CreateKeyExchange(Byte[] rgbData, Type symAlgType);
    public virtual void SetKey(AsymmetricAlgorithm key);
}
public class System.Security.Cryptography.RSAPKCS1SignatureDeformatter : AsymmetricSignatureDeformatter {
    public RSAPKCS1SignatureDeformatter(AsymmetricAlgorithm key);
    public virtual void SetHashAlgorithm(string strName);
    public virtual void SetKey(AsymmetricAlgorithm key);
    public virtual bool VerifySignature(Byte[] rgbHash, Byte[] rgbSignature);
}
public class System.Security.Cryptography.RSAPKCS1SignatureFormatter : AsymmetricSignatureFormatter {
    public RSAPKCS1SignatureFormatter(AsymmetricAlgorithm key);
    public virtual Byte[] CreateSignature(Byte[] rgbHash);
    public virtual void SetHashAlgorithm(string strName);
    public virtual void SetKey(AsymmetricAlgorithm key);
}
public class System.Security.Cryptography.RSASignaturePadding : object {
    public RSASignaturePaddingMode Mode { get; }
    public static RSASignaturePadding Pkcs1 { get; }
    public static RSASignaturePadding Pss { get; }
    public RSASignaturePaddingMode get_Mode();
    public static RSASignaturePadding get_Pkcs1();
    public static RSASignaturePadding get_Pss();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RSASignaturePadding other);
    public virtual int GetHashCode();
    public static bool op_Equality(RSASignaturePadding left, RSASignaturePadding right);
    public static bool op_Inequality(RSASignaturePadding left, RSASignaturePadding right);
    public virtual string ToString();
}
public enum System.Security.Cryptography.RSASignaturePaddingMode : Enum {
    public int value__;
    public static RSASignaturePaddingMode Pkcs1;
    public static RSASignaturePaddingMode Pss;
}
public abstract class System.Security.Cryptography.SHA1 : HashAlgorithm {
    public static SHA1 Create();
    public static SHA1 Create(string hashName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.SHA1Managed : SHA1 {
    protected sealed virtual void Dispose(bool disposing);
    protected sealed virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected sealed virtual Byte[] HashFinal();
    public sealed virtual void Initialize();
}
public abstract class System.Security.Cryptography.SHA256 : HashAlgorithm {
    public static SHA256 Create();
    public static SHA256 Create(string hashName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.SHA256Managed : SHA256 {
    protected sealed virtual void Dispose(bool disposing);
    protected sealed virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected sealed virtual Byte[] HashFinal();
    public sealed virtual void Initialize();
}
public abstract class System.Security.Cryptography.SHA384 : HashAlgorithm {
    public static SHA384 Create();
    public static SHA384 Create(string hashName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.SHA384Managed : SHA384 {
    protected sealed virtual void Dispose(bool disposing);
    protected sealed virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected sealed virtual Byte[] HashFinal();
    public sealed virtual void Initialize();
}
public abstract class System.Security.Cryptography.SHA512 : HashAlgorithm {
    public static SHA512 Create();
    public static SHA512 Create(string hashName);
}
[EditorBrowsableAttribute("1")]
public class System.Security.Cryptography.SHA512Managed : SHA512 {
    protected sealed virtual void Dispose(bool disposing);
    protected sealed virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected sealed virtual Byte[] HashFinal();
    public sealed virtual void Initialize();
}
public class System.Security.Cryptography.SignatureDescription : object {
    public string DeformatterAlgorithm { get; public set; }
    public string DigestAlgorithm { get; public set; }
    public string FormatterAlgorithm { get; public set; }
    public string KeyAlgorithm { get; public set; }
    public SignatureDescription(SecurityElement el);
    public string get_DeformatterAlgorithm();
    public void set_DeformatterAlgorithm(string value);
    public string get_DigestAlgorithm();
    public void set_DigestAlgorithm(string value);
    public string get_FormatterAlgorithm();
    public void set_FormatterAlgorithm(string value);
    public string get_KeyAlgorithm();
    public void set_KeyAlgorithm(string value);
    public virtual AsymmetricSignatureDeformatter CreateDeformatter(AsymmetricAlgorithm key);
    public virtual HashAlgorithm CreateDigest();
    public virtual AsymmetricSignatureFormatter CreateFormatter(AsymmetricAlgorithm key);
}
public abstract class System.Security.Cryptography.TripleDES : SymmetricAlgorithm {
    public Byte[] Key { get; public set; }
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public static TripleDES Create();
    public static TripleDES Create(string str);
    public static bool IsWeakKey(Byte[] rgbKey);
}
