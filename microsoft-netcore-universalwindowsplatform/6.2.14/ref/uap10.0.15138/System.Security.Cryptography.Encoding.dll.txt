[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
public class System.Security.Cryptography.AsnEncodedData : object {
    public Oid Oid { get; public set; }
    public Byte[] RawData { get; public set; }
    public AsnEncodedData(Byte[] rawData);
    public AsnEncodedData(AsnEncodedData asnEncodedData);
    public AsnEncodedData(Oid oid, Byte[] rawData);
    public AsnEncodedData(string oid, Byte[] rawData);
    public Oid get_Oid();
    public void set_Oid(Oid value);
    public Byte[] get_RawData();
    public void set_RawData(Byte[] value);
    public virtual void CopyFrom(AsnEncodedData asnEncodedData);
    public virtual string Format(bool multiLine);
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.AsnEncodedDataCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public AsnEncodedData Item { get; }
    public object SyncRoot { get; }
    public AsnEncodedDataCollection(AsnEncodedData asnEncodedData);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public AsnEncodedData get_Item(int index);
    public sealed virtual object get_SyncRoot();
    public int Add(AsnEncodedData asnEncodedData);
    public void CopyTo(AsnEncodedData[] array, int index);
    public AsnEncodedDataEnumerator GetEnumerator();
    public void Remove(AsnEncodedData asnEncodedData);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Security.Cryptography.AsnEncodedDataEnumerator : object {
    public AsnEncodedData Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public AsnEncodedData get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public class System.Security.Cryptography.FromBase64Transform : object {
    public bool CanReuseTransform { get; }
    public bool CanTransformMultipleBlocks { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public FromBase64Transform(FromBase64TransformMode whitespaces);
    public virtual bool get_CanReuseTransform();
    public sealed virtual bool get_CanTransformMultipleBlocks();
    public sealed virtual int get_InputBlockSize();
    public sealed virtual int get_OutputBlockSize();
    public void Clear();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public sealed virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
}
public enum System.Security.Cryptography.FromBase64TransformMode : Enum {
    public int value__;
    public static FromBase64TransformMode DoNotIgnoreWhiteSpaces;
    public static FromBase64TransformMode IgnoreWhiteSpaces;
}
public class System.Security.Cryptography.Oid : object {
    public string FriendlyName { get; public set; }
    public string Value { get; public set; }
    public Oid(Oid oid);
    public Oid(string oid);
    public Oid(string value, string friendlyName);
    public string get_FriendlyName();
    public void set_FriendlyName(string value);
    public string get_Value();
    public void set_Value(string value);
    public static Oid FromFriendlyName(string friendlyName, OidGroup group);
    public static Oid FromOidValue(string oidValue, OidGroup group);
}
[DefaultMemberAttribute("Item")]
public class System.Security.Cryptography.OidCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public Oid Item { get; }
    public Oid Item { get; }
    public object SyncRoot { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public Oid get_Item(int index);
    public Oid get_Item(string oid);
    public sealed virtual object get_SyncRoot();
    public int Add(Oid oid);
    public void CopyTo(Oid[] array, int index);
    public OidEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Security.Cryptography.OidEnumerator : object {
    public Oid Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public Oid get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
public enum System.Security.Cryptography.OidGroup : Enum {
    public int value__;
    public static OidGroup All;
    public static OidGroup Attribute;
    public static OidGroup EncryptionAlgorithm;
    public static OidGroup EnhancedKeyUsage;
    public static OidGroup ExtensionOrAttribute;
    public static OidGroup HashAlgorithm;
    public static OidGroup KeyDerivationFunction;
    public static OidGroup Policy;
    public static OidGroup PublicKeyAlgorithm;
    public static OidGroup SignatureAlgorithm;
    public static OidGroup Template;
}
public class System.Security.Cryptography.ToBase64Transform : object {
    public bool CanReuseTransform { get; }
    public bool CanTransformMultipleBlocks { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public virtual bool get_CanReuseTransform();
    public sealed virtual bool get_CanTransformMultipleBlocks();
    public sealed virtual int get_InputBlockSize();
    public sealed virtual int get_OutputBlockSize();
    public void Clear();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual override void Finalize();
    public sealed virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public sealed virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
}
