[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class System.ServiceModel.CallbackBehaviorAttribute : Attribute {
    public bool AutomaticSessionShutdown { get; public set; }
    public bool UseSynchronizationContext { get; public set; }
    public bool get_AutomaticSessionShutdown();
    public void set_AutomaticSessionShutdown(bool value);
    public bool get_UseSynchronizationContext();
    public void set_UseSynchronizationContext(bool value);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint serviceEndpoint, BindingParameterCollection parameters);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime clientRuntime);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint serviceEndpoint, EndpointDispatcher endpointDispatcher);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint serviceEndpoint);
}
public class System.ServiceModel.DuplexChannelFactory`1 : ChannelFactory`1<TChannel> {
    public DuplexChannelFactory`1(InstanceContext callbackInstance, Binding binding);
    public DuplexChannelFactory`1(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress);
    public DuplexChannelFactory`1(InstanceContext callbackInstance, Binding binding, string remoteAddress);
    public DuplexChannelFactory`1(InstanceContext callbackInstance, string endpointConfigurationName);
    public DuplexChannelFactory`1(InstanceContext callbackInstance, string endpointConfigurationName, EndpointAddress remoteAddress);
    public virtual TChannel CreateChannel(EndpointAddress address, Uri via);
    public TChannel CreateChannel(InstanceContext callbackInstance);
    public TChannel CreateChannel(InstanceContext callbackInstance, EndpointAddress address);
    public virtual TChannel CreateChannel(InstanceContext callbackInstance, EndpointAddress address, Uri via);
}
public abstract class System.ServiceModel.DuplexClientBase`1 : ClientBase`1<TChannel> {
    protected DuplexClientBase`1(InstanceContext callbackInstance);
    protected DuplexClientBase`1(InstanceContext callbackInstance, Binding binding, EndpointAddress remoteAddress);
    protected DuplexClientBase`1(InstanceContext callbackInstance, string endpointConfigurationName);
    protected DuplexClientBase`1(InstanceContext callbackInstance, string endpointConfigurationName, EndpointAddress remoteAddress);
    protected DuplexClientBase`1(InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress);
}
public class System.ServiceModel.InstanceContext : CommunicationObject {
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    public SynchronizationContext SynchronizationContext { get; public set; }
    public IExtensionCollection`1<InstanceContext> Extensions { get; }
    public InstanceContext(object implementation);
    protected virtual TimeSpan get_DefaultCloseTimeout();
    protected virtual TimeSpan get_DefaultOpenTimeout();
    public SynchronizationContext get_SynchronizationContext();
    public void set_SynchronizationContext(SynchronizationContext value);
    public sealed virtual IExtensionCollection`1<InstanceContext> get_Extensions();
    public object GetServiceInstance(Message message);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnClosed();
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnFaulted();
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual void OnOpened();
    protected virtual void OnOpening();
}
