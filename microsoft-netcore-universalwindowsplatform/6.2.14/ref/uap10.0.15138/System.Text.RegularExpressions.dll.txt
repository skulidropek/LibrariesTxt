[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
public class System.Text.RegularExpressions.Capture : object {
    public int Index { get; }
    public int Length { get; }
    public string Value { get; }
    public int get_Index();
    public int get_Length();
    public string get_Value();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.CaptureCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public Capture Item { get; }
    public object SyncRoot { get; }
    private Capture System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual Capture get_Item(int i);
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int arrayIndex);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Capture[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<Capture> System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Capture>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.IndexOf(Capture item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.Insert(int index, Capture item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.RemoveAt(int index);
    private sealed virtual override Capture System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.set_Item(int index, Capture value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Add(Capture item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Contains(Capture item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Remove(Capture item);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
public class System.Text.RegularExpressions.Group : Capture {
    public CaptureCollection Captures { get; }
    public bool Success { get; }
    public string Name { get; }
    public CaptureCollection get_Captures();
    public bool get_Success();
    public static Group Synchronized(Group inner);
    public string get_Name();
}
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.GroupCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public Group Item { get; }
    public Group Item { get; }
    public object SyncRoot { get; }
    private Group System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual Group get_Item(int groupnum);
    public Group get_Item(string groupname);
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int arrayIndex);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Group[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<Group> System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf(Group item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert(int index, Group item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt(int index);
    private sealed virtual override Group System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.set_Item(int index, Group value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add(Group item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains(Group item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove(Group item);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
public class System.Text.RegularExpressions.Match : Group {
    public static Match Empty { get; }
    public GroupCollection Groups { get; }
    public static Match get_Empty();
    public virtual GroupCollection get_Groups();
    public Match NextMatch();
    public virtual string Result(string replacement);
    public static Match Synchronized(Match inner);
}
[DefaultMemberAttribute("Item")]
public class System.Text.RegularExpressions.MatchCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public Match Item { get; }
    public object SyncRoot { get; }
    private Match System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Item { get; private set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public virtual Match get_Item(int i);
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int arrayIndex);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Match[] array, int arrayIndex);
    private sealed virtual override IEnumerator`1<Match> System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Match>.GetEnumerator();
    private sealed virtual override int System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.IndexOf(Match item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Insert(int index, Match item);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.RemoveAt(int index);
    private sealed virtual override Match System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.set_Item(int index, Match value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Add(Match item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Contains(Match item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Remove(Match item);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
public class System.Text.RegularExpressions.MatchEvaluator : MulticastDelegate {
    public MatchEvaluator(object object, IntPtr method);
    public virtual string Invoke(Match match);
    public virtual IAsyncResult BeginInvoke(Match match, AsyncCallback callback, object object);
    public virtual string EndInvoke(IAsyncResult result);
}
public class System.Text.RegularExpressions.Regex : object {
    protected internal Hashtable caps;
    protected internal Hashtable capnames;
    protected internal int capsize;
    protected internal String[] capslist;
    protected internal RegexRunnerFactory factory;
    public static TimeSpan InfiniteMatchTimeout;
    protected internal TimeSpan internalMatchTimeout;
    protected internal string pattern;
    protected internal RegexOptions roptions;
    public static int CacheSize { get; public set; }
    public TimeSpan MatchTimeout { get; }
    public RegexOptions Options { get; }
    public bool RightToLeft { get; }
    [CLSCompliantAttribute("False")]
protected IDictionary Caps { get; protected set; }
    [CLSCompliantAttribute("False")]
protected IDictionary CapNames { get; protected set; }
    protected Regex(SerializationInfo info, StreamingContext context);
    public Regex(string pattern);
    public Regex(string pattern, RegexOptions options);
    public Regex(string pattern, RegexOptions options, TimeSpan matchTimeout);
    public static int get_CacheSize();
    public static void set_CacheSize(int value);
    public TimeSpan get_MatchTimeout();
    public RegexOptions get_Options();
    public bool get_RightToLeft();
    public static string Escape(string str);
    public String[] GetGroupNames();
    public Int32[] GetGroupNumbers();
    public string GroupNameFromNumber(int i);
    public int GroupNumberFromName(string name);
    protected void InitializeReferences();
    public bool IsMatch(string input);
    public bool IsMatch(string input, int startat);
    public static bool IsMatch(string input, string pattern);
    public static bool IsMatch(string input, string pattern, RegexOptions options);
    public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public Match Match(string input);
    public Match Match(string input, int startat);
    public Match Match(string input, int beginning, int length);
    public static Match Match(string input, string pattern);
    public static Match Match(string input, string pattern, RegexOptions options);
    public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public MatchCollection Matches(string input);
    public MatchCollection Matches(string input, int startat);
    public static MatchCollection Matches(string input, string pattern);
    public static MatchCollection Matches(string input, string pattern, RegexOptions options);
    public static MatchCollection Matches(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    public string Replace(string input, string replacement);
    public string Replace(string input, string replacement, int count);
    public string Replace(string input, string replacement, int count, int startat);
    public static string Replace(string input, string pattern, string replacement);
    public static string Replace(string input, string pattern, string replacement, RegexOptions options);
    public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options);
    public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout);
    public string Replace(string input, MatchEvaluator evaluator);
    public string Replace(string input, MatchEvaluator evaluator, int count);
    public string Replace(string input, MatchEvaluator evaluator, int count, int startat);
    public String[] Split(string input);
    public String[] Split(string input, int count);
    public String[] Split(string input, int count, int startat);
    public static String[] Split(string input, string pattern);
    public static String[] Split(string input, string pattern, RegexOptions options);
    public static String[] Split(string input, string pattern, RegexOptions options, TimeSpan matchTimeout);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
    public virtual string ToString();
    public static string Unescape(string str);
    protected bool UseOptionC();
    protected bool UseOptionR();
    protected internal static void ValidateMatchTimeout(TimeSpan matchTimeout);
    protected IDictionary get_Caps();
    protected void set_Caps(IDictionary value);
    protected IDictionary get_CapNames();
    protected void set_CapNames(IDictionary value);
}
public class System.Text.RegularExpressions.RegexMatchTimeoutException : TimeoutException {
    public string Input { get; }
    public TimeSpan MatchTimeout { get; }
    public string Pattern { get; }
    protected RegexMatchTimeoutException(SerializationInfo info, StreamingContext context);
    public RegexMatchTimeoutException(string message);
    public RegexMatchTimeoutException(string message, Exception inner);
    public RegexMatchTimeoutException(string regexInput, string regexPattern, TimeSpan matchTimeout);
    public string get_Input();
    public TimeSpan get_MatchTimeout();
    public string get_Pattern();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
}
[FlagsAttribute]
public enum System.Text.RegularExpressions.RegexOptions : Enum {
    public int value__;
    public static RegexOptions Compiled;
    public static RegexOptions CultureInvariant;
    public static RegexOptions ECMAScript;
    public static RegexOptions ExplicitCapture;
    public static RegexOptions IgnoreCase;
    public static RegexOptions IgnorePatternWhitespace;
    public static RegexOptions Multiline;
    public static RegexOptions None;
    public static RegexOptions RightToLeft;
    public static RegexOptions Singleline;
}
public abstract class System.Text.RegularExpressions.RegexRunner : object {
    protected internal Int32[] runcrawl;
    protected internal int runcrawlpos;
    protected internal Match runmatch;
    protected internal Regex runregex;
    protected internal Int32[] runstack;
    protected internal int runstackpos;
    protected internal string runtext;
    protected internal int runtextbeg;
    protected internal int runtextend;
    protected internal int runtextpos;
    protected internal int runtextstart;
    protected internal Int32[] runtrack;
    protected internal int runtrackcount;
    protected internal int runtrackpos;
    protected void Capture(int capnum, int start, int end);
    protected static bool CharInClass(char ch, string charClass);
    protected static bool CharInSet(char ch, string set, string category);
    protected void CheckTimeout();
    protected void Crawl(int i);
    protected int Crawlpos();
    protected void DoubleCrawl();
    protected void DoubleStack();
    protected void DoubleTrack();
    protected void EnsureStorage();
    protected abstract virtual bool FindFirstChar();
    protected abstract virtual void Go();
    protected abstract virtual void InitTrackCount();
    protected bool IsBoundary(int index, int startpos, int endpos);
    protected bool IsECMABoundary(int index, int startpos, int endpos);
    protected bool IsMatched(int cap);
    protected int MatchIndex(int cap);
    protected int MatchLength(int cap);
    protected int Popcrawl();
    protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick);
    protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout);
    protected void TransferCapture(int capnum, int uncapnum, int start, int end);
    protected void Uncapture();
}
public abstract class System.Text.RegularExpressions.RegexRunnerFactory : object {
    protected internal abstract virtual RegexRunner CreateInstance();
}
