[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Analyzer.Utilities.AbstractCategorizedAnalyzerConfigOptions : object {
    private static string DotnetCodeQualityKeyPrefix;
    private static string BuildPropertyKeyPrefix;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, ValueTuple`2<bool, object>> _computedOptionValuesMap;
    public bool IsEmpty { get; }
    public abstract virtual bool get_IsEmpty();
    protected abstract virtual bool TryGetOptionValue(string optionKeyPrefix, string optionKeySuffix, string optionName, String& valueString);
    public sealed virtual T GetOptionValue(string optionName, SyntaxTree tree, DiagnosticDescriptor rule, TryParseValue`1<T> tryParseValue, T defaultValue, OptionKind kind);
    private static string MapOptionKindToKeyPrefix(OptionKind optionKind);
    protected static bool HasSupportedKeyPrefix(string key, String& keyPrefix);
    public bool TryGetOptionValue(string optionName, OptionKind kind, DiagnosticDescriptor rule, TryParseValue`1<T> tryParseValue, T defaultValue, T& value);
    private ValueTuple`2<bool, object> ComputeOptionValue(string optionName, OptionKind kind, DiagnosticDescriptor rule, TryParseValue`1<T> tryParseValue);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ComputeOptionValue>g__TryGetSpecificOptionValue|11_0(string specificOptionKey, string optionKeyPrefix, T& specificOptionValue, <>c__DisplayClass11_0`1& );
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ComputeOptionValue>g__TryGetAnySpecificOptionValue|11_1(IEnumerable`1<string> specificOptionKeys, string optionKeyPrefix, T& specificOptionValue, <>c__DisplayClass11_0`1& );
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private bool <ComputeOptionValue>g__TryGetGeneralOptionValue|11_2(string optionKeyPrefix, T& generalOptionValue, <>c__DisplayClass11_0`1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Analyzer.Utilities.AggregateCategorizedAnalyzerConfigOptions : object {
    public static AggregateCategorizedAnalyzerConfigOptions Empty;
    private ImmutableDictionary`2<SyntaxTree, Lazy`1<SyntaxTreeCategorizedAnalyzerConfigOptions>> _perTreeOptions;
    private CompilationCategorizedAnalyzerConfigOptions _additionalFileBasedOptions;
    public bool IsEmpty { get; }
    private AggregateCategorizedAnalyzerConfigOptions(ImmutableDictionary`2<SyntaxTree, Lazy`1<SyntaxTreeCategorizedAnalyzerConfigOptions>> perTreeOptions, CompilationCategorizedAnalyzerConfigOptions additionalFileBasedOptions);
    private static AggregateCategorizedAnalyzerConfigOptions();
    public sealed virtual bool get_IsEmpty();
    public static AggregateCategorizedAnalyzerConfigOptions Create(AnalyzerConfigOptionsProvider analyzerConfigOptionsProvider, Compilation compilation, CompilationCategorizedAnalyzerConfigOptions additionalFileBasedOptions);
    public sealed virtual T GetOptionValue(string optionName, SyntaxTree tree, DiagnosticDescriptor rule, TryParseValue`1<T> tryParseValue, T defaultValue, OptionKind kind);
    private bool TryGetOptionValue(string optionName, OptionKind kind, SyntaxTree tree, DiagnosticDescriptor rule, TryParseValue`1<T> tryParseValue, T defaultValue, T& value);
    [CompilerGeneratedAttribute]
internal static SyntaxTreeCategorizedAnalyzerConfigOptions <Create>g__Create|6_0(SyntaxTree tree, AnalyzerConfigOptionsProvider analyzerConfigOptionsProvider);
}
[ExtensionAttribute]
internal static class Analyzer.Utilities.AnalyzerConfigOptionsProviderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsEmpty(AnalyzerConfigOptionsProvider analyzerConfigOptionsProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.AnalyzerOptionsExtensions : object {
    private static ConditionalWeakTable`2<AnalyzerOptions, ICategorizedAnalyzerConfigOptions> s_cachedOptions;
    private static ImmutableHashSet`1<OutputKind> s_defaultOutputKinds;
    private static AnalyzerOptionsExtensions();
    private static bool TryGetSyntaxTreeForOption(ISymbol symbol, SyntaxTree& tree);
    [ExtensionAttribute]
public static SymbolVisibilityGroup GetSymbolVisibilityGroupOption(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, SymbolVisibilityGroup defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolVisibilityGroup GetSymbolVisibilityGroupOption(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, SymbolVisibilityGroup defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolModifiers GetRequiredModifiersOption(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, SymbolModifiers defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolModifiers GetRequiredModifiersOption(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, SymbolModifiers defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static EnumValuesPrefixTrigger GetEnumValuesPrefixTriggerOption(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, EnumValuesPrefixTrigger defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static EnumValuesPrefixTrigger GetEnumValuesPrefixTriggerOption(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, EnumValuesPrefixTrigger defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ImmutableHashSet`1<OutputKind> GetOutputKindsOption(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ImmutableHashSet`1<SymbolKind> GetAnalyzedSymbolKindsOption(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, ImmutableHashSet`1<SymbolKind> defaultSymbolKinds, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ImmutableHashSet`1<SymbolKind> GetAnalyzedSymbolKindsOption(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, ImmutableHashSet`1<SymbolKind> defaultSymbolKinds, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static TEnum GetFlagsEnumOptionValue(AnalyzerOptions options, string optionName, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, TEnum defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static ImmutableHashSet`1<TEnum> GetNonFlagsEnumOptionValue(AnalyzerOptions options, string optionName, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, ImmutableHashSet`1<TEnum> defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static TEnum GetNonFlagsEnumOptionValue(AnalyzerOptions options, string optionName, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, TEnum defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool GetBoolOptionValue(AnalyzerOptions options, string optionName, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, bool defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool GetBoolOptionValue(AnalyzerOptions options, string optionName, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, bool defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static UInt32 GetUnsignedIntegralOptionValue(AnalyzerOptions options, string optionName, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, UInt32 defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static UInt32 GetUnsignedIntegralOptionValue(AnalyzerOptions options, string optionName, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, UInt32 defaultValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static string GetStringOptionValue(AnalyzerOptions options, string optionName, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolNamesWithValueOption`1<Unit> GetNullCheckValidationMethodsOption(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolNamesWithValueOption`1<Unit> GetAdditionalStringFormattingMethodsOption(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsConfiguredToSkipAnalysis(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsConfiguredToSkipAnalysis(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, ISymbol containingContextSymbol, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolNamesWithValueOption`1<Unit> GetDisallowedSymbolNamesWithValueOption(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolNamesWithValueOption`1<Unit> GetDisallowedSymbolNamesWithValueOption(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolNamesWithValueOption`1<string> GetAdditionalRequiredSuffixesOption(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolNamesWithValueOption`1<string> GetAdditionalRequiredSuffixesOption(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolNamesWithValueOption`1<INamedTypeSymbol> GetAdditionalRequiredGenericInterfaces(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolNamesWithValueOption`1<INamedTypeSymbol> GetAdditionalRequiredGenericInterfaces(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolNamesWithValueOption`1<Unit> GetInheritanceExcludedSymbolNamesOption(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, string defaultForcedValue, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static SymbolNamesWithValueOption`1<Unit> GetAdditionalUseResultsMethodsOption(AnalyzerOptions options, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static SymbolNamesWithValueOption`1<TValue> GetSymbolNamesWithValueOption(AnalyzerOptions options, string optionName, DiagnosticDescriptor rule, SyntaxTree tree, Compilation compilation, CancellationToken cancellationToken, string namePrefix, string optionDefaultValue, string optionForcedValue, Func`2<string, NameParts<TValue>> getTypeAndSuffixFunc);
    [ExtensionAttribute]
public static string GetMSBuildPropertyValue(AnalyzerOptions options, string optionName, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static ImmutableArray`1<string> GetMSBuildItemMetadataValues(AnalyzerOptions options, string itemOptionName, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool MatchesConfiguredVisibility(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, CancellationToken cancellationToken, SymbolVisibilityGroup defaultRequiredVisibility);
    [ExtensionAttribute]
public static bool MatchesConfiguredVisibility(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, ISymbol containingContextSymbol, Compilation compilation, CancellationToken cancellationToken, SymbolVisibilityGroup defaultRequiredVisibility);
    [ExtensionAttribute]
public static bool MatchesConfiguredModifiers(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, CancellationToken cancellationToken, SymbolModifiers defaultRequiredModifiers);
    [ExtensionAttribute]
private static ICategorizedAnalyzerConfigOptions GetOrComputeCategorizedAnalyzerConfigOptions(AnalyzerOptions options, Compilation compilation, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static bool <GetNonFlagsEnumOptionValue>g__TryParseValue|13_0(string value, ImmutableHashSet`1& result);
    [CompilerGeneratedAttribute]
internal static bool <GetStringOptionValue>g__TryParseValue|19_0(string value, String& result);
    [CompilerGeneratedAttribute]
internal static SymbolNamesWithValueOption`1<Unit> <IsConfiguredToSkipAnalysis>g__GetExcludedSymbolNamesWithValueOption|23_0(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static SymbolNamesWithValueOption`1<Unit> <IsConfiguredToSkipAnalysis>g__GetExcludedTypeNamesWithDerivedTypesOption|23_1(AnalyzerOptions options, DiagnosticDescriptor rule, ISymbol symbol, Compilation compilation, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal static NameParts<string> <GetAdditionalRequiredSuffixesOption>g__GetParts|27_0(string name);
    [CompilerGeneratedAttribute]
internal static NameParts<INamedTypeSymbol> <GetAdditionalRequiredGenericInterfaces>g__GetParts|29_1(string name, Compilation compilation);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Analyzer.Utilities.BoundedCache`2 : BoundedCacheWithFactory`2<TKey, TValue> {
    public TValue GetOrCreateValue(TKey key);
    [CompilerGeneratedAttribute]
internal static TValue <GetOrCreateValue>g__CreateDefaultValue|0_0(TKey _);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Analyzer.Utilities.BoundedCacheWithFactory`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<WeakReference`1<Entry<TKey, TValue>>> _weakReferencedEntries;
    public TValue GetOrCreateValue(TKey key, Func`2<TKey, TValue> valueFactory);
}
internal static class Analyzer.Utilities.CategorizedAnalyzerConfigOptionsExtensions : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Analyzer.Utilities.CompilationCategorizedAnalyzerConfigOptions : AbstractCategorizedAnalyzerConfigOptions {
    public static CompilationCategorizedAnalyzerConfigOptions Empty;
    private ImmutableDictionary`2<string, string> _generalOptions;
    private ImmutableDictionary`2<string, ImmutableDictionary`2<string, string>> _specificOptions;
    public bool IsEmpty { get; }
    private CompilationCategorizedAnalyzerConfigOptions(ImmutableDictionary`2<string, string> generalOptions, ImmutableDictionary`2<string, ImmutableDictionary`2<string, string>> specificOptions);
    private static CompilationCategorizedAnalyzerConfigOptions();
    public virtual bool get_IsEmpty();
    public static CompilationCategorizedAnalyzerConfigOptions Create(IDictionary`2<string, string> options);
    protected virtual bool TryGetOptionValue(string optionKeyPrefix, string optionKeySuffix, string optionName, String& valueString);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.DiagnosticCategory : object {
    public static string Design;
    public static string Globalization;
    public static string Interoperability;
    public static string Mobility;
    public static string Performance;
    public static string Reliability;
    public static string Security;
    public static string Usage;
    public static string Naming;
    public static string Library;
    public static string Documentation;
    public static string Maintainability;
    public static string Publish;
    public static string RoslynDiagnosticsDesign;
    public static string RoslynDiagnosticsMaintainability;
    public static string RoslynDiagnosticsPerformance;
    public static string RoslynDiagnosticsReliability;
    public static string RoslynDiagnosticsUsage;
    public static string MicrosoftCodeAnalysisCorrectness;
    public static string MicrosoftCodeAnalysisDesign;
    public static string MicrosoftCodeAnalysisDocumentation;
    public static string MicrosoftCodeAnalysisLocalization;
    public static string MicrosoftCodeAnalysisPerformance;
    public static string MicrosoftCodeAnalysisCompatibility;
    public static string MicrosoftCodeAnalysisReleaseTracking;
}
internal static class Analyzer.Utilities.DiagnosticDescriptorHelper : object {
    [NullableContextAttribute("1")]
public static DiagnosticDescriptor Create(string id, LocalizableString title, LocalizableString messageFormat, string category, RuleLevel ruleLevel, LocalizableString description, bool isPortedFxCopRule, bool isDataflowRule, bool isEnabledByDefaultInFxCopAnalyzers, bool isEnabledByDefaultInAggressiveMode, bool isReportedAtCompilationEnd, String[] additionalCustomTags);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<DiagnosticSeverity, bool> <Create>g__GetDefaultSeverityAndEnabledByDefault|0_0(RuleLevel ruleLevel, bool isEnabledByDefaultInFxCopAnalyzers);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static String[] <Create>g__GetDefaultCustomTags|0_1(bool isPortedFxCopRule, bool isDataflowRule, bool isEnabledByDefaultInAggressiveMode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.DiagnosticHelpers : object {
    public static bool TryConvertToUInt64(object value, SpecialType specialType, UInt64& convertedValue);
    public static string GetMemberName(ISymbol symbol);
}
internal enum Analyzer.Utilities.DisposeMethodKind : Enum {
    public int value__;
    public static DisposeMethodKind None;
    public static DisposeMethodKind Dispose;
    public static DisposeMethodKind DisposeBool;
    public static DisposeMethodKind DisposeAsync;
    public static DisposeMethodKind DisposeCoreAsync;
    public static DisposeMethodKind Close;
    public static DisposeMethodKind CloseAsync;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Analyzer.Utilities.DocumentChangeAction : CodeAction {
    private Func`2<CancellationToken, Task`1<Document>> _createChangedDocument;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EquivalenceKey>k__BackingField;
    public string Title { get; }
    public string EquivalenceKey { get; }
    protected DocumentChangeAction(string title, Func`2<CancellationToken, Task`1<Document>> createChangedDocument, string equivalenceKey);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual string get_EquivalenceKey();
    protected virtual Task`1<Document> GetChangedDocumentAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Analyzer.Utilities.DoNotCatchGeneralUnlessRethrownAnalyzer : DiagnosticAnalyzer {
    private bool _shouldCheckLambdas;
    [NullableAttribute("2")]
private string _enablingMethodAttributeFullyQualifiedName;
    private bool _allowExcludedSymbolNames;
    private bool RequiresAttributeOnMethod { get; }
    [NullableContextAttribute("2")]
protected DoNotCatchGeneralUnlessRethrownAnalyzer(bool shouldCheckLambdas, string enablingMethodAttributeFullyQualifiedName, bool allowExcludedSymbolNames);
    private bool get_RequiresAttributeOnMethod();
    protected abstract virtual Diagnostic CreateDiagnostic(IMethodSymbol containingMethod, SyntaxToken catchKeyword);
    protected virtual bool IsConfiguredDisallowedExceptionType(INamedTypeSymbol namedTypeSymbol, IMethodSymbol containingMethod, Compilation compilation, AnalyzerOptions analyzerOptions, CancellationToken cancellationToken);
    public virtual void Initialize(AnalysisContext analysisContext);
    private INamedTypeSymbol GetRequiredAttributeType(Compilation compilation);
    private static IReadOnlyCollection`1<INamedTypeSymbol> GetDisallowedCatchTypes(Compilation compilation);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private void <Initialize>b__8_0(CompilationStartAnalysisContext compilationStartAnalysisContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.EditorConfigOptionNames : object {
    public static string ApiSurface;
    public static string RequiredModifiers;
    public static string ExcludeAsyncVoidMethods;
    public static string EnablePlatformAnalyzerOnPreNet5Target;
    public static string OutputKind;
    public static string ExcludeSingleLetterTypeParameters;
    public static string SufficientIterationCountForWeakKDFAlgorithm;
    public static string ExcludeExtensionMethodThisParameter;
    public static string NullCheckValidationMethods;
    public static string AdditionalStringFormattingMethods;
    public static string TryDetermineAdditionalStringFormattingMethodsAutomatically;
    public static string ExcludedSymbolNames;
    public static string ExcludedTypeNamesWithDerivedTypes;
    public static string DisallowedSymbolNames;
    public static string UnsafeDllImportSearchPathBits;
    public static string ExcludeAspnetCoreMvcControllerBase;
    public static string EnumValuesPrefixTrigger;
    public static string AdditionalRequiredSuffixes;
    public static string ExcludeIndirectBaseTypes;
    public static string AdditionalRequiredGenericInterfaces;
    public static string AdditionalInheritanceExcludedSymbolNames;
    public static string AnalyzedSymbolKinds;
    public static string UseNamingHeuristic;
    public static string AdditionalUseResultsMethods;
    public static string AllowedSuffixes;
    public static string ExcludeStructs;
    public static string ExcludeOrDefaultMethods;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.EditorConfigParser : object {
    private static Regex s_propertyMatcher;
    private static StringComparer s_keyComparer;
    private static ImmutableHashSet`1<string> s_reservedKeys;
    private static ImmutableHashSet`1<string> s_reservedValues;
    private static EditorConfigParser();
    public static CompilationCategorizedAnalyzerConfigOptions Parse(SourceText text);
    private static bool IsComment(string line);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.CompilationExtensions : object {
    private static Byte[] mscorlibPublicKeyToken;
    private static string WebAppProjectGuidString;
    private static string WebSiteProjectGuidString;
    private static CompilationExtensions();
    [ExtensionAttribute]
internal static INamedTypeSymbol GetOrCreateTypeByMetadataName(Compilation compilation, string fullTypeName);
    [ExtensionAttribute]
internal static bool TryGetOrCreateTypeByMetadataName(Compilation compilation, string fullTypeName, INamedTypeSymbol& namedTypeSymbol);
    [ExtensionAttribute]
internal static bool TargetsDotNetFramework(Compilation compilation);
    [ExtensionAttribute]
internal static bool IsWebProject(Compilation compilation, AnalyzerOptions options, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.DiagnosticExtensions : object {
    [NullableAttribute("2")]
private static PropertyInfo s_syntaxTreeDiagnosticOptionsProperty;
    [NullableAttribute("2")]
private static PropertyInfo s_compilationOptionsSyntaxTreeOptionsProviderProperty;
    private static DiagnosticExtensions();
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(SyntaxNode node, DiagnosticDescriptor rule, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(SyntaxNode node, DiagnosticDescriptor rule, ImmutableDictionary`2<string, string> properties, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(SyntaxNode node, DiagnosticDescriptor rule, ImmutableArray`1<Location> additionalLocations, ImmutableDictionary`2<string, string> properties, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(IOperation operation, DiagnosticDescriptor rule, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(IOperation operation, DiagnosticDescriptor rule, ImmutableDictionary`2<string, string> properties, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(IOperation operation, DiagnosticDescriptor rule, ImmutableArray`1<Location> additionalLocations, ImmutableDictionary`2<string, string> properties, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(SyntaxToken token, DiagnosticDescriptor rule, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(ISymbol symbol, DiagnosticDescriptor rule, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(ISymbol symbol, DiagnosticDescriptor rule, ImmutableDictionary`2<string, string> properties, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(Location location, DiagnosticDescriptor rule, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(Location location, DiagnosticDescriptor rule, ImmutableDictionary`2<string, string> properties, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(Location location, DiagnosticDescriptor rule, ImmutableArray`1<Location> additionalLocations, ImmutableDictionary`2<string, string> properties, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(IEnumerable`1<Location> locations, DiagnosticDescriptor rule, Object[] args);
    [ExtensionAttribute]
public static Diagnostic CreateDiagnostic(IEnumerable`1<Location> locations, DiagnosticDescriptor rule, ImmutableDictionary`2<string, string> properties, Object[] args);
    [ExtensionAttribute]
public static void ReportNoLocationDiagnostic(CompilationAnalysisContext context, DiagnosticDescriptor rule, Object[] args);
    [ExtensionAttribute]
public static void ReportNoLocationDiagnostic(Compilation compilation, DiagnosticDescriptor rule, Action`1<Diagnostic> addDiagnostic, ImmutableDictionary`2<string, string> properties, Object[] args);
    [CompilerGeneratedAttribute]
internal static Nullable`1<DiagnosticSeverity> <ReportNoLocationDiagnostic>g__GetEffectiveSeverity|17_0(<>c__DisplayClass17_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.IDictionaryExtensions : object {
    [ExtensionAttribute]
public static void AddKeyValueIfNotNull(IDictionary`2<TKey, TValue> dictionary, TKey key, TValue value);
    [ExtensionAttribute]
public static void AddRange(IDictionary`2<TKey, TValue> dictionary, IEnumerable`1<KeyValuePair`2<TKey, TValue>> items);
    [ExtensionAttribute]
public static bool IsEqualTo(IReadOnlyDictionary`2<TKey, TValue> dictionary, IReadOnlyDictionary`2<TKey, TValue> other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.IEnumerableExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`2<object, bool> s_notNullTest;
    private static IEnumerableExtensions();
    [IteratorStateMachineAttribute("Analyzer.Utilities.Extensions.IEnumerableExtensions/<Concat>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<T> Concat(IEnumerable`1<T> source, T value);
    [ExtensionAttribute]
public static ISet`1<T> ToSet(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderBy(IEnumerable`1<T> source, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static IEnumerable`1<T> OrderBy(IEnumerable`1<T> source, Comparison`1<T> compare);
    [ExtensionAttribute]
public static IEnumerable`1<T> Order(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<T> WhereNotNull(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static ImmutableArray`1<TSource> WhereAsArray(IEnumerable`1<TSource> source, Func`2<TSource, bool> selector);
    [ExtensionAttribute]
public static void Dispose(IEnumerable`1<T> collection);
    [ExtensionAttribute]
public static bool HasExactly(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static bool HasMoreThan(IEnumerable`1<TSource> source, int count);
    [ExtensionAttribute]
public static bool HasFewerThan(IEnumerable`1<TSource> source, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.IEnumerableOfIMethodSymbolExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<IMethodSymbol> WhereMethodDoesNotContainAttribute(IEnumerable`1<IMethodSymbol> methods, INamedTypeSymbol attributeType);
    [ExtensionAttribute]
public static IEnumerable`1<IMethodSymbol> GetMethodOverloadsWithDesiredParameterAtLeadingOrTrailing(IEnumerable`1<IMethodSymbol> methods, IMethodSymbol selectedOverload, INamedTypeSymbol expectedParameterType, bool trailingOnly);
    [ExtensionAttribute]
public static IEnumerable`1<IMethodSymbol> GetMethodOverloadsWithDesiredParameterAtTrailing(IEnumerable`1<IMethodSymbol> methods, IMethodSymbol selectedOverload, INamedTypeSymbol expectedTrailingParameterType);
    [ExtensionAttribute]
public static IMethodSymbol GetFirstOrDefaultMemberWithParameterInfos(IEnumerable`1<IMethodSymbol> members, ParameterInfo[] expectedParameterTypesInOrder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.IMethodSymbolExtensions : object {
    private static ImmutableHashSet`1<string> s_collectionAddMethodNameVariants;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static BoundedCache`2<Compilation, ConcurrentDictionary`2<IMethodSymbol, IBlockOperation>> s_methodToTopmostOperationBlockCache;
    private static IMethodSymbolExtensions();
    [ExtensionAttribute]
public static bool IsObjectEqualsOverride(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsObjectEquals(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsStaticObjectEqualsOrReferenceEquals(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsGetHashCodeOverride(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsToStringOverride(IMethodSymbol method);
    private static bool IsObjectMethodOverride(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsFinalizer(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsImplementationOfInterfaceMethod(IMethodSymbol method, ITypeSymbol typeArgument, INamedTypeSymbol interfaceType, string interfaceMethodName);
    [ExtensionAttribute]
public static bool IsDisposeImplementation(IMethodSymbol method, Compilation compilation);
    [ExtensionAttribute]
public static bool IsAsyncDisposeImplementation(IMethodSymbol method, Compilation compilation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsDisposeImplementation(IMethodSymbol method, INamedTypeSymbol iDisposable);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsAsyncDisposeImplementation(IMethodSymbol method, INamedTypeSymbol iAsyncDisposable, INamedTypeSymbol valueTaskType);
    [ExtensionAttribute]
private static bool HasDisposeMethodSignature(IMethodSymbol method);
    [ExtensionAttribute]
public static bool HasDisposeSignatureByConvention(IMethodSymbol method);
    [ExtensionAttribute]
public static bool HasDisposeBoolMethodSignature(IMethodSymbol method);
    [ExtensionAttribute]
private static bool HasDisposeCloseMethodSignature(IMethodSymbol method);
    [ExtensionAttribute]
private static bool HasDisposeCloseAsyncMethodSignature(IMethodSymbol method, INamedTypeSymbol taskType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
private static bool HasDisposeAsyncMethodSignature(IMethodSymbol method, INamedTypeSymbol task, INamedTypeSymbol valueTask);
    [ExtensionAttribute]
private static bool HasOverriddenDisposeCoreAsyncMethodSignature(IMethodSymbol method, INamedTypeSymbol task);
    [ExtensionAttribute]
public static DisposeMethodKind GetDisposeMethodKind(IMethodSymbol method, Compilation compilation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static DisposeMethodKind GetDisposeMethodKind(IMethodSymbol method, INamedTypeSymbol iDisposable, INamedTypeSymbol iAsyncDisposable, INamedTypeSymbol task, INamedTypeSymbol valueTask);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsOnDeserializationImplementation(IMethodSymbol method, INamedTypeSymbol iDeserializationCallback);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsSerializationConstructor(IMethodSymbol method, INamedTypeSymbol serializationInfoType, INamedTypeSymbol streamingContextType);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsGetObjectData(IMethodSymbol method, INamedTypeSymbol serializationInfoType, INamedTypeSymbol streamingContextType);
    [ExtensionAttribute]
public static bool IsPropertyGetter(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsIndexerGetter(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsPropertyAccessor(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsEventAccessor(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsOperator(IMethodSymbol methodSymbol);
    [ExtensionAttribute]
public static bool HasOptionalParameters(IMethodSymbol methodSymbol);
    [IteratorStateMachineAttribute("Analyzer.Utilities.Extensions.IMethodSymbolExtensions/<GetOverloads>d__30")]
[ExtensionAttribute]
public static IEnumerable`1<IMethodSymbol> GetOverloads(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsCollectionAddMethod(IMethodSymbol method, ImmutableHashSet`1<INamedTypeSymbol> iCollectionTypes);
    [ExtensionAttribute]
public static bool IsTaskFromResultMethod(IMethodSymbol method, INamedTypeSymbol taskType);
    [ExtensionAttribute]
public static bool IsTaskConfigureAwaitMethod(IMethodSymbol method, INamedTypeSymbol genericTaskType);
    [ExtensionAttribute]
public static IBlockOperation GetTopmostOperationBlock(IMethodSymbol method, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsLambdaOrLocalFunctionOrDelegate(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsLambdaOrLocalFunction(IMethodSymbol method);
    [ExtensionAttribute]
public static int GetParameterIndex(IMethodSymbol methodSymbol, IParameterSymbol parameterSymbol);
    [ExtensionAttribute]
public static bool HasEventHandlerSignature(IMethodSymbol method, INamedTypeSymbol eventArgsType);
    [ExtensionAttribute]
public static bool IsLockMethod(IMethodSymbol method, INamedTypeSymbol systemThreadingMonitor);
    [ExtensionAttribute]
public static bool IsInterlockedExchangeMethod(IMethodSymbol method, INamedTypeSymbol systemThreadingInterlocked);
    [ExtensionAttribute]
public static bool IsInterlockedCompareExchangeMethod(IMethodSymbol method, INamedTypeSymbol systemThreadingInterlocked);
    [ExtensionAttribute]
public static bool HasParameterWithDelegateType(IMethodSymbol methodSymbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsOverrideOrVirtualMethodOf(IMethodSymbol methodSymbol, INamedTypeSymbol typeSymbol);
    [ExtensionAttribute]
public static bool IsArgumentNullCheckMethod(IMethodSymbol method);
    [ExtensionAttribute]
public static bool IsXUnitTestMethod(IMethodSymbol method, ConcurrentDictionary`2<INamedTypeSymbol, bool> knownTestAttributes, INamedTypeSymbol xunitFactAttribute);
    [ExtensionAttribute]
public static bool IsAutoPropertyAccessor(IMethodSymbol methodSymbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsTopLevelStatementsEntryPointMethod(IMethodSymbol methodSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.INamedTypeSymbolExtensions : object {
    [IteratorStateMachineAttribute("Analyzer.Utilities.Extensions.INamedTypeSymbolExtensions/<GetBaseTypesAndThis>d__0")]
[ExtensionAttribute]
public static IEnumerable`1<INamedTypeSymbol> GetBaseTypesAndThis(INamedTypeSymbol type);
    [ExtensionAttribute]
public static bool DerivesFromOrImplementsAnyConstructionOf(INamedTypeSymbol type, INamedTypeSymbol parentType);
    [ExtensionAttribute]
public static bool ImplementsOperator(INamedTypeSymbol symbol, string op);
    [ExtensionAttribute]
public static bool ImplementsEqualityOperators(INamedTypeSymbol symbol);
    [ExtensionAttribute]
public static bool OverridesEquals(INamedTypeSymbol symbol);
    [ExtensionAttribute]
public static bool OverridesGetHashCode(INamedTypeSymbol symbol);
    [ExtensionAttribute]
public static bool HasFinalizer(INamedTypeSymbol symbol);
    [ExtensionAttribute]
public static bool IsStaticHolderType(INamedTypeSymbol symbol);
    private static bool IsQualifyingMember(ISymbol member);
    private static bool IsDisqualifyingMember(ISymbol member);
    [ExtensionAttribute]
public static bool IsXUnitTestAttribute(INamedTypeSymbol attributeClass, ConcurrentDictionary`2<INamedTypeSymbol, bool> knownTestAttributes, INamedTypeSymbol xunitFactAttribute);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsTopLevelStatementsEntryPointType(INamedTypeSymbol typeSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.IOperationExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static BoundedCache`2<Compilation, ConcurrentDictionary`2<IOperation, ControlFlowGraph>> s_operationToCfgCache;
    [NullableAttribute("0")]
private static ImmutableArray`1<OperationKind> s_LambdaAndLocalFunctionKinds;
    private static IOperationExtensions();
    [ExtensionAttribute]
public static INamedTypeSymbol GetReceiverType(IInvocationOperation invocation, Compilation compilation, bool beforeConversion, CancellationToken cancellationToken);
    private static INamedTypeSymbol GetReceiverType(SyntaxNode receiverSyntax, Compilation compilation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool HasNullConstantValue(IOperation operation);
    [ExtensionAttribute]
public static bool TryGetBoolConstantValue(IOperation operation, Boolean& constantValue);
    [ExtensionAttribute]
public static bool HasConstantValue(IOperation operation, long comparand);
    [ExtensionAttribute]
public static bool HasConstantValue(IOperation operation, ulong comparand);
    private static bool HasConstantValue(Optional`1<object> constantValue, ITypeSymbol constantValueType, ulong comparand);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ITypeSymbol GetElementType(IArrayCreationOperation arrayCreation);
    [ExtensionAttribute]
public static ImmutableArray`1<IOperation> WithoutFullyImplicitOperations(ImmutableArray`1<IOperation> operations);
    [ExtensionAttribute]
public static ImmutableArray`1<IOperation> GetTopmostExplicitDescendants(IOperation operation);
    [ExtensionAttribute]
public static bool IsOperationNoneRoot(IOperation operation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IBlockOperation GetTopmostParentBlock(IOperation operation);
    [ExtensionAttribute]
public static TOperation GetAncestor(IOperation root, OperationKind ancestorKind, Func`2<TOperation, bool> predicate);
    [NullableContextAttribute("0")]
[ExtensionAttribute]
public static IOperation GetAncestor(IOperation root, ImmutableArray`1<OperationKind> ancestorKinds, Func`2<IOperation, bool> predicate);
    [ExtensionAttribute]
public static IConditionalAccessOperation GetConditionalAccess(IConditionalAccessInstanceOperation operation);
    [ExtensionAttribute]
public static IOperation GetInstance(IInstanceReferenceOperation operation, bool isInsideAnonymousObjectInitializer);
    [ExtensionAttribute]
public static IAnonymousObjectCreationOperation GetAnonymousObjectCreation(IPropertyReferenceOperation operation);
    [ExtensionAttribute]
public static bool IsInsideAnonymousFunction(IOperation operation);
    [ExtensionAttribute]
public static bool HasAnyOperationDescendant(ImmutableArray`1<IOperation> operationBlocks, Func`2<IOperation, bool> predicate);
    [ExtensionAttribute]
public static bool HasAnyOperationDescendant(IOperation operationBlock, Func`2<IOperation, bool> predicate);
    [ExtensionAttribute]
public static bool HasAnyOperationDescendant(IOperation operationBlock, Func`2<IOperation, bool> predicate, IOperation& foundOperation);
    [ExtensionAttribute]
public static bool HasAnyOperationDescendant(ImmutableArray`1<IOperation> operationBlocks, OperationKind kind);
    [ExtensionAttribute]
public static bool IsComparisonOperator(IBinaryOperation binaryOperation);
    [ExtensionAttribute]
public static IOperation GetRoot(IOperation operation);
    [ExtensionAttribute]
public static bool TryGetEnclosingControlFlowGraph(IOperation operation, ControlFlowGraph& cfg);
    [ExtensionAttribute]
public static ControlFlowGraph GetEnclosingControlFlowGraph(IBlockOperation blockOperation);
    private static ControlFlowGraph CreateControlFlowGraph(IOperation operation);
    [ExtensionAttribute]
public static PooledHashSet`1<ISymbol> GetCaptures(IOperation operation, IMethodSymbol lambdaOrLocalFunction);
    [ExtensionAttribute]
public static bool IsWithinLambdaOrLocalFunction(IOperation operation, IOperation& containingLambdaOrLocalFunctionOperation);
    [ExtensionAttribute]
public static ITypeSymbol GetPatternType(IPatternOperation pattern);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryGetParentTupleOperation(ITupleOperation tupleOperation, ITupleOperation& parentTupleOperation, IOperation& elementOfParentTupleContainingTuple);
    [ExtensionAttribute]
public static bool IsExtensionMethodAndHasNoInstance(IInvocationOperation invocationOperation);
    [ExtensionAttribute]
public static IOperation GetInstance(IInvocationOperation invocationOperation);
    [ExtensionAttribute]
public static SyntaxNode GetInstanceSyntax(IInvocationOperation invocationOperation);
    [ExtensionAttribute]
public static ITypeSymbol GetInstanceType(IOperation operation);
    [ExtensionAttribute]
public static ISymbol GetReferencedMemberOrLocalOrParameter(IOperation operation);
    [ExtensionAttribute]
public static IOperation WalkDownParentheses(IOperation operation);
    [ExtensionAttribute]
public static IOperation WalkUpParentheses(IOperation operation);
    [ExtensionAttribute]
public static IOperation WalkDownConversion(IOperation operation);
    [ExtensionAttribute]
public static IOperation WalkUpConversion(IOperation operation);
    [ExtensionAttribute]
public static ITypeSymbol GetThrownExceptionType(IThrowOperation operation);
    [ExtensionAttribute]
public static bool HasArgument(IInvocationOperation invocationOperation, TOperation& firstFoundArgument);
    [ExtensionAttribute]
public static bool HasAnyExplicitDescendant(IOperation operation, Func`2<IOperation, bool> descendIntoOperation);
    [ExtensionAttribute]
public static bool IsSetMethodInvocation(IPropertyReferenceOperation operation);
    [ExtensionAttribute]
public static IArgumentOperation GetArgumentForParameterAtIndex(ImmutableArray`1<IArgumentOperation> arguments, int parameterIndex);
    [ExtensionAttribute]
public static ImmutableArray`1<IArgumentOperation> GetArgumentsInParameterOrder(ImmutableArray`1<IArgumentOperation> arguments);
    [ExtensionAttribute]
public static ValueUsageInfo GetValueUsageInfo(IOperation operation, ISymbol containingSymbol);
    [ExtensionAttribute]
public static bool IsInLeftOfDeconstructionAssignment(IOperation operation, IDeconstructionAssignmentOperation& deconstructionAssignment);
    [ExtensionAttribute]
public static RefKind GetRefKind(IReturnOperation operation, ISymbol containingSymbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IMethodSymbol TryGetContainingAnonymousFunctionOrLocalFunction(IOperation operation);
    [ExtensionAttribute]
public static bool IsAnyCompoundAssignment(IOperation operation);
    [CompilerGeneratedAttribute]
internal static void <GetCaptures>g__ProcessLocalOrParameter|28_0(ISymbol symbol, <>c__DisplayClass28_0& );
}
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.IPropertySymbolExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsAutoProperty(IPropertySymbol propertySymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.ISymbolExtensions : object {
    private static SymbolDisplayFormat s_memberDisplayFormat;
    private static ISymbolExtensions();
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsType(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsAccessorMethod(ISymbol symbol);
    [IteratorStateMachineAttribute("Analyzer.Utilities.Extensions.ISymbolExtensions/<GetAccessors>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<IMethodSymbol> GetAccessors(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsDefaultConstructor(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsPublic(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsProtected(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsPrivate(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsErrorType(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsConstructor(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsDestructor(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsIndexer(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsPropertyWithBackingField(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsBackingFieldForProperty(ISymbol symbol, IPropertySymbol& propertySymbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsUserDefinedOperator(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsConversionOperator(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ImmutableArray`1<IParameterSymbol> GetParameters(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsExternallyVisible(ISymbol symbol);
    [ExtensionAttribute]
public static SymbolVisibility GetResultantVisibility(ISymbol symbol);
    [ExtensionAttribute]
public static bool MatchMemberDerivedByName(ISymbol member, INamedTypeSymbol type, string name);
    [ExtensionAttribute]
public static bool MatchMethodDerivedByName(IMethodSymbol method, INamedTypeSymbol type, string name);
    [ExtensionAttribute]
public static bool MatchMethodByName(ISymbol member, INamedTypeSymbol type, string name);
    [ExtensionAttribute]
public static bool MatchPropertyDerivedByName(ISymbol member, INamedTypeSymbol type, string name);
    [ExtensionAttribute]
public static bool MatchMemberByName(ISymbol member, INamedTypeSymbol type, string name);
    [ExtensionAttribute]
public static bool MatchPropertyByName(ISymbol member, INamedTypeSymbol type, string name);
    [ExtensionAttribute]
public static bool MatchFieldByName(ISymbol member, INamedTypeSymbol type, string name);
    [ExtensionAttribute]
public static string FormatMemberName(ISymbol member);
    [ExtensionAttribute]
public static bool ContainsParameterOfType(IEnumerable`1<IParameterSymbol> parameters, INamedTypeSymbol type);
    [ExtensionAttribute]
public static IEnumerable`1<IParameterSymbol> GetParametersOfType(IEnumerable`1<IParameterSymbol> parameters, INamedTypeSymbol type);
    [ExtensionAttribute]
public static bool HasOverloadWithParameterOfType(IEnumerable`1<IMethodSymbol> overloads, IMethodSymbol self, INamedTypeSymbol type, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Analyzer.Utilities.Extensions.ISymbolExtensions/<GetParameterIndices>d__30")]
[ExtensionAttribute]
public static IEnumerable`1<int> GetParameterIndices(IMethodSymbol method, IEnumerable`1<IParameterSymbol> parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool ParametersAreSame(IMethodSymbol method1, IMethodSymbol method2);
    [ExtensionAttribute]
public static bool ParameterTypesAreSame(IMethodSymbol method1, IMethodSymbol method2, IEnumerable`1<int> parameterIndices, CancellationToken cancellationToken);
    [ExtensionAttribute]
private static bool ParameterTypesAreSame(IParameterSymbol parameter1, IParameterSymbol parameter2);
    [ExtensionAttribute]
public static bool ReturnTypeAndParametersAreSame(IMethodSymbol method, IMethodSymbol otherMethod);
    [ExtensionAttribute]
public static bool IsFromMscorlib(ISymbol symbol, Compilation compilation);
    [ExtensionAttribute]
public static IMethodSymbol GetMatchingOverload(IMethodSymbol method, IEnumerable`1<IMethodSymbol> overloads, int parameterIndex, INamedTypeSymbol type, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsImplementationOfAnyInterfaceMember(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsImplementationOfAnyImplicitInterfaceMember(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsImplementationOfAnyImplicitInterfaceMember(ISymbol symbol);
    [ExtensionAttribute]
public static bool IsImplementationOfInterfaceMember(ISymbol symbol, ISymbol interfaceMember);
    [ExtensionAttribute]
public static bool IsOverrideOrImplementationOfInterfaceMember(ISymbol symbol, ISymbol interfaceMember);
    [ExtensionAttribute]
public static ISymbol GetOverriddenMember(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsImplementationOfAnyExplicitInterfaceMember(ISymbol symbol);
    [ExtensionAttribute]
public static ITypeSymbol GetMemberOrLocalOrParameterType(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ITypeSymbol GetMemberType(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsReadOnlyFieldOrProperty(ISymbol symbol);
    [ExtensionAttribute]
public static bool HasAttribute(ISymbol symbol, INamedTypeSymbol attribute);
    [ExtensionAttribute]
public static bool HasDerivedTypeAttribute(ITypeSymbol symbol, INamedTypeSymbol attribute);
    [ExtensionAttribute]
public static bool HasDerivedMethodAttribute(IMethodSymbol symbol, INamedTypeSymbol attribute);
    [ExtensionAttribute]
public static Boolean[] HasAttributes(ISymbol symbol, INamedTypeSymbol[] attributes);
    [ExtensionAttribute]
public static IEnumerable`1<AttributeData> GetAttributes(ISymbol symbol, INamedTypeSymbol attributeType);
    [ExtensionAttribute]
public static bool IsInSource(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsLambdaOrLocalFunction(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsSymbolWithSpecialDiscardName(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsConst(ISymbol symbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsReadOnly(ISymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.ITypeSymbolExtensions : object {
    [ExtensionAttribute]
public static bool IsPrimitiveType(ITypeSymbol type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool Inherits(ITypeSymbol type, ITypeSymbol possibleBase);
    [IteratorStateMachineAttribute("Analyzer.Utilities.Extensions.ITypeSymbolExtensions/<GetBaseTypes>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<INamedTypeSymbol> GetBaseTypes(ITypeSymbol type, Func`2<INamedTypeSymbol, bool> takeWilePredicate);
    [IteratorStateMachineAttribute("Analyzer.Utilities.Extensions.ITypeSymbolExtensions/<GetBaseTypesAndThis>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<ITypeSymbol> GetBaseTypesAndThis(ITypeSymbol type);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool DerivesFrom(ITypeSymbol symbol, ITypeSymbol candidateBaseType, bool baseTypesOnly, bool checkTypeParameterConstraints);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsDisposable(ITypeSymbol type, INamedTypeSymbol iDisposable, INamedTypeSymbol iAsyncDisposable);
    [ExtensionAttribute]
public static IEnumerable`1<AttributeData> GetApplicableAttributes(INamedTypeSymbol type, INamedTypeSymbol attributeUsageAttribute);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IEnumerable`1<AttributeData> GetApplicableExportAttributes(INamedTypeSymbol type, INamedTypeSymbol exportAttributeV1, INamedTypeSymbol exportAttributeV2, INamedTypeSymbol inheritedExportAttribute);
    [ExtensionAttribute]
public static bool IsAttribute(ITypeSymbol symbol);
    [ExtensionAttribute]
public static bool HasValueCopySemantics(ITypeSymbol typeSymbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNonNullableValueType(ITypeSymbol typeSymbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullableValueType(ITypeSymbol typeSymbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsReferenceTypeOrNullableValueType(ITypeSymbol typeSymbol);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsNullableOfBoolean(ITypeSymbol typeSymbol);
    [ExtensionAttribute]
public static ITypeSymbol GetUnderlyingValueTupleTypeOrThis(ITypeSymbol typeSymbol);
    [ExtensionAttribute]
public static bool HasAnyCollectionCountProperty(ITypeSymbol invocationTarget, WellKnownTypeProvider wellKnownTypeProvider);
    [CompilerGeneratedAttribute]
internal static bool <IsDisposable>g__IsInterfaceOrImplementsInterface|5_1(ITypeSymbol type, INamedTypeSymbol interfaceType);
    [CompilerGeneratedAttribute]
internal static bool <GetApplicableAttributes>g__IsInheritedAttribute|6_0(AttributeData attributeData, INamedTypeSymbol attributeUsageAttribute);
    [CompilerGeneratedAttribute]
internal static bool <HasAnyCollectionCountProperty>g__isAnySupportedCollectionType|15_0(ITypeSymbol type, <>c__DisplayClass15_0& );
}
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.KeyValuePairExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void Deconstruct(KeyValuePair`2<TKey, TValue> pair, TKey& key, TValue& value);
}
internal static class Analyzer.Utilities.Extensions.MethodKindEx : object {
    public static MethodKind LocalFunction;
    private static UInt32 LocalFunctionValueAssertion1;
    private static UInt32 LocalFunctionValueAssertion2;
}
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.OperationBlockAnalysisContextExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsMethodNotImplementedOrSupported(OperationBlockStartAnalysisContext context);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <IsMethodNotImplementedOrSupported>g__IsSingleStatementBody|0_1(IBlockOperation body);
}
internal static class Analyzer.Utilities.Extensions.OperationKinds : object {
    [CompilerGeneratedAttribute]
private static ImmutableArray`1<OperationKind> <MemberReference>k__BackingField;
    public static ImmutableArray`1<OperationKind> MemberReference { get; }
    private static OperationKinds();
    [CompilerGeneratedAttribute]
public static ImmutableArray`1<OperationKind> get_MemberReference();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Analyzer.Utilities.Extensions.ParameterInfo : object {
    [CompilerGeneratedAttribute]
private int <ArrayRank>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArray>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParams>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ParameterType>k__BackingField;
    public int ArrayRank { get; private set; }
    public bool IsArray { get; private set; }
    public bool IsParams { get; private set; }
    public INamedTypeSymbol ParameterType { get; private set; }
    private ParameterInfo(INamedTypeSymbol type, bool isArray, int arrayRank, bool isParams);
    [CompilerGeneratedAttribute]
public int get_ArrayRank();
    [CompilerGeneratedAttribute]
private void set_ArrayRank(int value);
    [CompilerGeneratedAttribute]
public bool get_IsArray();
    [CompilerGeneratedAttribute]
private void set_IsArray(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsParams();
    [CompilerGeneratedAttribute]
private void set_IsParams(bool value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ParameterType();
    [CompilerGeneratedAttribute]
private void set_ParameterType(INamedTypeSymbol value);
    public static ParameterInfo GetParameterInfo(INamedTypeSymbol type, bool isArray, int arrayRank, bool isParams);
}
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.SemanticModelExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IOperation GetOperationWalkingUpParentChain(SemanticModel semanticModel, SyntaxNode node, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.StringExtensions : object {
    [ExtensionAttribute]
public static bool HasSuffix(string str, string suffix);
    [ExtensionAttribute]
public static string WithoutSuffix(string str, string suffix);
    [ExtensionAttribute]
public static bool IsASCII(string value);
}
internal enum Analyzer.Utilities.Extensions.SymbolVisibility : Enum {
    public int value__;
    public static SymbolVisibility Public;
    public static SymbolVisibility Internal;
    public static SymbolVisibility Private;
    public static SymbolVisibility Friend;
}
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.SymbolVisibilityExtensions : object {
    [ExtensionAttribute]
public static bool IsAtLeastAsVisibleAs(SymbolVisibility typeVisibility, SymbolVisibility comparisonVisibility);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Extensions.UriExtensions : object {
    private static ImmutableHashSet`1<string> s_uriWords;
    private static UriExtensions();
    [ExtensionAttribute]
public static bool ParameterNamesContainUriWordSubstring(IEnumerable`1<IParameterSymbol> parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool SymbolNameContainsUriWordSubstring(ISymbol symbol, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Analyzer.Utilities.Extensions.UriExtensions/<GetParametersThatContainUriWords>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<IParameterSymbol> GetParametersThatContainUriWords(IEnumerable`1<IParameterSymbol> parameters, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool SymbolNameContainsUriWords(ISymbol symbol, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.FxCopWellKnownDiagnosticTags : object {
    public static string PortedFromFxCop;
    public static String[] PortedFxCopRule;
    public static String[] PortedFxCopRuleEnabledInAggressiveMode;
    public static String[] PortedFxCopDataflowRule;
    public static String[] PortedFxCopDataflowRuleEnabledInAggressiveMode;
    private static FxCopWellKnownDiagnosticTags();
    public static bool IsPortedFxCopRule(DiagnosticDescriptor diagnosticDescriptor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.HashUtilities : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static int GetHashCodeOrDefault(object obj);
    internal static int Combine(int newKey, int currentKey);
    [NullableContextAttribute("2")]
internal static int Combine(ImmutableArray`1<T> array);
    [NullableContextAttribute("2")]
internal static int Combine(ImmutableArray`1<T> array, int currentKey);
    public static int Combine(T[] sequence);
    public static int Combine(IEnumerable`1<T> sequence, int length, int currentKey);
    internal static int Combine(ImmutableStack`1<T> stack);
    internal static int Combine(ImmutableStack`1<T> stack, int currentKey);
    internal static int Combine(ImmutableHashSet`1<T> set);
    internal static int Combine(ImmutableHashSet`1<T> set, int currentKey);
    [NullableContextAttribute("2")]
internal static int Combine(ImmutableDictionary`2<TKey, TValue> dictionary);
    [NullableContextAttribute("2")]
internal static int Combine(ImmutableDictionary`2<TKey, TValue> dictionary, int currentKey);
}
[NullableContextAttribute("1")]
internal interface Analyzer.Utilities.ICategorizedAnalyzerConfigOptions {
    public bool IsEmpty { get; }
    public abstract virtual bool get_IsEmpty();
    public abstract virtual T GetOptionValue(string optionName, SyntaxTree tree, DiagnosticDescriptor rule, TryParseValue`1<T> tryParseValue, T defaultValue, OptionKind kind);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Lightup.IMethodSymbolExtensions : object {
    private static Func`2<IMethodSymbol, bool> s_isInitOnly;
    private static IMethodSymbolExtensions();
    [ExtensionAttribute]
public static bool IsInitOnly(IMethodSymbol methodSymbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Lightup.ITypeSymbolExtensions : object {
    private static Func`2<ITypeSymbol, NullableAnnotation> s_nullableAnnotation;
    private static Func`3<ITypeSymbol, NullableAnnotation, ITypeSymbol> s_withNullableAnnotation;
    private static ITypeSymbolExtensions();
    [ExtensionAttribute]
public static NullableAnnotation NullableAnnotation(ITypeSymbol typeSymbol);
    [ExtensionAttribute]
public static ITypeSymbol WithNullableAnnotation(ITypeSymbol typeSymbol, NullableAnnotation nullableAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.Lightup.LightupHelpers : object {
    internal static Func`2<TSyntax, TProperty> CreateSyntaxPropertyAccessor(Type type, string propertyName, TProperty fallbackResult);
    internal static Func`2<TSymbol, TProperty> CreateSymbolPropertyAccessor(Type type, string propertyName, TProperty fallbackResult);
    private static Func`2<T, TProperty> CreatePropertyAccessor(Type type, string parameterName, string propertyName, TProperty fallbackResult);
    internal static Func`3<TSyntax, TProperty, TSyntax> CreateSyntaxWithPropertyAccessor(Type type, string propertyName, TProperty fallbackResult);
    internal static Func`3<TSymbol, TProperty, TSymbol> CreateSymbolWithPropertyAccessor(Type type, string propertyName, TProperty fallbackResult);
    private static Func`3<T, TProperty, T> CreateWithPropertyAccessor(Type type, string parameterName, string propertyName, TProperty fallbackResult);
    internal static Func`3<T, TArg, TValue> CreateAccessorWithArgument(Type type, string parameterName, Type argumentType, string argumentName, string methodName, TValue fallbackResult);
    private static void VerifyTypeArgument(Type type);
    private static void VerifyResultTypeCompatibility(Type resultType);
    [NullableContextAttribute("2")]
private static bool TryGetProperty(Type type, string propertyName, PropertyInfo& propertyInfo);
    [NullableContextAttribute("2")]
private static bool TryGetMethod(Type type, string methodName, MethodInfo& methodInfo);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static TProperty <CreatePropertyAccessor>g__FallbackAccessor|2_1(T instance, TProperty fallbackResult);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static T <CreateWithPropertyAccessor>g__FallbackAccessor|5_3(T instance, TProperty newValue, TProperty fallbackResult);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
internal static TValue <CreateAccessorWithArgument>g__FallbackAccessor|6_1(T instance, TValue fallbackResult);
}
internal enum Analyzer.Utilities.Lightup.NullableAnnotation : Enum {
    public byte value__;
    public static NullableAnnotation None;
    public static NullableAnnotation NotAnnotated;
    public static NullableAnnotation Annotated;
}
[FlagsAttribute]
internal enum Analyzer.Utilities.Lightup.NullableContext : Enum {
    public int value__;
    public static NullableContext Disabled;
    public static NullableContext WarningsEnabled;
    public static NullableContext AnnotationsEnabled;
    public static NullableContext Enabled;
    public static NullableContext WarningsContextInherited;
    public static NullableContext AnnotationsContextInherited;
    public static NullableContext ContextInherited;
}
[ExtensionAttribute]
internal static class Analyzer.Utilities.Lightup.NullableContextExtensions : object {
    private static bool IsFlagSet(NullableContext context, NullableContext flag);
    [ExtensionAttribute]
public static bool WarningsEnabled(NullableContext context);
    [ExtensionAttribute]
public static bool AnnotationsEnabled(NullableContext context);
    [ExtensionAttribute]
public static bool WarningsInherited(NullableContext context);
    [ExtensionAttribute]
public static bool AnnotationsInherited(NullableContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.Lightup.SemanticModelExtensions : object {
    private static Func`3<SemanticModel, int, NullableContext> s_getNullableContext;
    private static SemanticModelExtensions();
    [ExtensionAttribute]
public static NullableContext GetNullableContext(SemanticModel semanticModel, int position);
}
internal static class Analyzer.Utilities.MSBuildItemOptionNames : object {
    [NullableAttribute("1")]
public static string SupportedPlatform;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.MSBuildItemOptionNamesHelpers : object {
    public static char ValuesSeparator;
    private static Char[] s_itemMetadataValuesSeparators;
    private static MSBuildItemOptionNamesHelpers();
    public static string GetPropertyNameForItemOptionName(string itemOptionName);
    [ConditionalAttribute("DEBUG")]
public static void VerifySupportedItemOptionName(string itemOptionName);
    [NullableContextAttribute("2")]
public static ImmutableArray`1<string> ParseItemOptionValue(string itemOptionValue);
    [IteratorStateMachineAttribute("Analyzer.Utilities.MSBuildItemOptionNamesHelpers/<ProduceTrimmedArray>d__5")]
private static IEnumerable`1<string> ProduceTrimmedArray(string itemOptionValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.MSBuildPropertyOptionNames : object {
    public static string TargetFramework;
    public static string TargetPlatformMinVersion;
    public static string UsingMicrosoftNETSdkWeb;
    public static string ProjectTypeGuids;
    public static string PublishSingleFile;
    public static string IncludeAllContentForSelfExtract;
}
internal static class Analyzer.Utilities.MSBuildPropertyOptionNamesHelpers : object {
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void VerifySupportedPropertyOptionName(string propertyOptionName);
}
internal enum Analyzer.Utilities.OptionKind : Enum {
    public int value__;
    public static OptionKind DotnetCodeQuality;
    public static OptionKind BuildProperty;
}
internal enum Analyzer.Utilities.Options.EnumValuesPrefixTrigger : Enum {
    public int value__;
    public static EnumValuesPrefixTrigger AnyEnumValue;
    public static EnumValuesPrefixTrigger AllEnumValues;
    public static EnumValuesPrefixTrigger Heuristic;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count,nq}")]
[DebuggerTypeProxyAttribute("Analyzer.Utilities.PooledObjects.ArrayBuilder`1/DebuggerProxy")]
internal class Analyzer.Utilities.PooledObjects.ArrayBuilder`1 : object {
    private Builder<T> _builder;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectPool`1<ArrayBuilder`1<T>> _pool;
    private static ObjectPool`1<ArrayBuilder`1<T>> s_poolInstance;
    public int Count { get; public set; }
    public T Item { get; public set; }
    public ArrayBuilder`1(int size);
    private ArrayBuilder`1(ObjectPool`1<ArrayBuilder`1<T>> pool);
    private static ArrayBuilder`1();
    public ImmutableArray`1<T> ToImmutable();
    public sealed virtual int get_Count();
    public void set_Count(int value);
    public sealed virtual T get_Item(int index);
    public void set_Item(int index, T value);
    public void SetItem(int index, T value);
    public void Add(T item);
    public void Insert(int index, T item);
    public void EnsureCapacity(int capacity);
    public void Clear();
    public bool Contains(T item);
    public int IndexOf(T item);
    public int IndexOf(T item, IEqualityComparer`1<T> equalityComparer);
    public int IndexOf(T item, int startIndex, int count);
    public int FindIndex(Predicate`1<T> match);
    public int FindIndex(int startIndex, Predicate`1<T> match);
    public int FindIndex(int startIndex, int count, Predicate`1<T> match);
    public void RemoveAt(int index);
    public void RemoveLast();
    public void ReverseContents();
    public void Sort();
    public void Sort(IComparer`1<T> comparer);
    public void Sort(Comparison`1<T> compare);
    public void Sort(int startIndex, IComparer`1<T> comparer);
    public T[] ToArray();
    public void CopyTo(T[] array, int start);
    public T Last();
    public T First();
    public bool Any();
    public ImmutableArray`1<T> ToImmutableOrNull();
    [NullableContextAttribute("0")]
public ImmutableArray`1<U> ToDowncastedImmutable();
    public ImmutableArray`1<T> ToImmutableAndFree();
    public T[] ToArrayAndFree();
    public sealed virtual void Dispose();
    private void Free();
    public static ArrayBuilder`1<T> GetInstance();
    public static ArrayBuilder`1<T> GetInstance(int capacity);
    public static ArrayBuilder`1<T> GetInstance(int capacity, T fillWithValue);
    internal static ObjectPool`1<ArrayBuilder`1<T>> CreatePool();
    internal static ObjectPool`1<ArrayBuilder`1<T>> CreatePool(int size);
    [NullableContextAttribute("0")]
internal Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal Dictionary`2<K, ImmutableArray`1<T>> ToDictionary(Func`2<T, K> keySelector, IEqualityComparer`1<K> comparer);
    public void AddRange(ArrayBuilder`1<T> items);
    public void AddRange(ArrayBuilder`1<U> items);
    public void AddRange(ImmutableArray`1<T> items);
    public void AddRange(ImmutableArray`1<T> items, int length);
    public void AddRange(ImmutableArray`1<S> items);
    public void AddRange(T[] items, int start, int length);
    public void AddRange(IEnumerable`1<T> items);
    public void AddRange(T[] items);
    public void AddRange(T[] items, int length);
    public void Clip(int limit);
    public void ZeroInit(int count);
    public void AddMany(T item, int count);
    public void RemoveDuplicates();
    public ImmutableArray`1<S> SelectDistinct(Func`2<T, S> selector);
}
[ExtensionAttribute]
internal static class Analyzer.Utilities.PooledObjects.Extensions.PooledHashSetExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddRange(PooledHashSet`1<T> builder, IEnumerable`1<T> set2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Analyzer.Utilities.PooledObjects.ObjectPool`1 : object {
    [NullableAttribute("2")]
private T _firstItem;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Element[] _items;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Factory<T> _factory;
    internal ObjectPool`1(Factory<T> factory);
    internal ObjectPool`1(Factory<T> factory, int size);
    private T CreateInstance();
    internal T Allocate();
    private T AllocateSlow();
    internal void Free(T obj, CancellationToken cancellationToken);
    private void FreeSlow(T obj);
    [ConditionalAttribute("DEBUG")]
internal static void ForgetTrackedObject(T old, T replacement);
    [ConditionalAttribute("DEBUG")]
private void Validate(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Analyzer.Utilities.PooledObjects.PooledConcurrentDictionary`2 : ConcurrentDictionary`2<K, V> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectPool`1<PooledConcurrentDictionary`2<K, V>> _pool;
    private static ObjectPool`1<PooledConcurrentDictionary`2<K, V>> s_poolInstance;
    private static ConcurrentDictionary`2<IEqualityComparer`1<K>, ObjectPool`1<PooledConcurrentDictionary`2<K, V>>> s_poolInstancesByComparer;
    private PooledConcurrentDictionary`2(ObjectPool`1<PooledConcurrentDictionary`2<K, V>> pool);
    private PooledConcurrentDictionary`2(ObjectPool`1<PooledConcurrentDictionary`2<K, V>> pool, IEqualityComparer`1<K> keyComparer);
    private static PooledConcurrentDictionary`2();
    public sealed virtual void Dispose();
    public void Free(CancellationToken cancellationToken);
    public static ObjectPool`1<PooledConcurrentDictionary`2<K, V>> CreatePool(IEqualityComparer`1<K> keyComparer);
    public static PooledConcurrentDictionary`2<K, V> GetInstance(IEqualityComparer`1<K> keyComparer);
    public static PooledConcurrentDictionary`2<K, V> GetInstance(IEnumerable`1<KeyValuePair`2<K, V>> initializer, IEqualityComparer`1<K> keyComparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Analyzer.Utilities.PooledObjects.PooledConcurrentSet`1 : object {
    private PooledConcurrentDictionary`2<T, byte> _dictionary;
    public int Count { get; }
    public bool IsEmpty { get; }
    public bool IsReadOnly { get; }
    private PooledConcurrentSet`1(PooledConcurrentDictionary`2<T, byte> dictionary);
    public sealed virtual void Dispose();
    public void Free(CancellationToken cancellationToken);
    public static PooledConcurrentSet`1<T> GetInstance(IEqualityComparer`1<T> comparer);
    public static PooledConcurrentSet`1<T> GetInstance(IEnumerable`1<T> initializer, IEqualityComparer`1<T> comparer);
    public sealed virtual int get_Count();
    public bool get_IsEmpty();
    public sealed virtual bool get_IsReadOnly();
    public bool Add(T value);
    public void AddRange(IEnumerable`1<T> values);
    public sealed virtual bool Remove(T value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    [NullableContextAttribute("0")]
public KeyEnumerator<T> GetEnumerator();
    [IteratorStateMachineAttribute("Analyzer.Utilities.PooledObjects.PooledConcurrentSet`1/<GetEnumeratorImpl>d__19")]
private IEnumerator`1<T> GetEnumeratorImpl();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Analyzer.Utilities.PooledObjects.PooledDictionary`2 : Dictionary`2<K, V> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectPool`1<PooledDictionary`2<K, V>> _pool;
    private static ObjectPool`1<PooledDictionary`2<K, V>> s_poolInstance;
    private static ConcurrentDictionary`2<IEqualityComparer`1<K>, ObjectPool`1<PooledDictionary`2<K, V>>> s_poolInstancesByComparer;
    private PooledDictionary`2(ObjectPool`1<PooledDictionary`2<K, V>> pool, IEqualityComparer`1<K> keyComparer);
    private static PooledDictionary`2();
    public sealed virtual void Dispose();
    public ImmutableDictionary`2<K, V> ToImmutableDictionaryAndFree();
    public ImmutableDictionary`2<TKey, TValue> ToImmutableDictionaryAndFree(Func`2<KeyValuePair`2<K, V>, TKey> keySelector, Func`2<KeyValuePair`2<K, V>, TValue> elementSelector, IEqualityComparer`1<TKey> comparer);
    public void Free(CancellationToken cancellationToken);
    public static ObjectPool`1<PooledDictionary`2<K, V>> CreatePool(IEqualityComparer`1<K> keyComparer);
    public static PooledDictionary`2<K, V> GetInstance(IEqualityComparer`1<K> keyComparer);
    public static PooledDictionary`2<K, V> GetInstance(IEnumerable`1<KeyValuePair`2<K, V>> initializer, IEqualityComparer`1<K> keyComparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Analyzer.Utilities.PooledObjects.PooledHashSet`1 : HashSet`1<T> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectPool`1<PooledHashSet`1<T>> _pool;
    private static ObjectPool`1<PooledHashSet`1<T>> s_poolInstance;
    private static ConcurrentDictionary`2<IEqualityComparer`1<T>, ObjectPool`1<PooledHashSet`1<T>>> s_poolInstancesByComparer;
    private PooledHashSet`1(ObjectPool`1<PooledHashSet`1<T>> pool, IEqualityComparer`1<T> comparer);
    private static PooledHashSet`1();
    public sealed virtual void Dispose();
    public void Free(CancellationToken cancellationToken);
    public ImmutableHashSet`1<T> ToImmutableAndFree();
    public ImmutableHashSet`1<T> ToImmutable();
    public static ObjectPool`1<PooledHashSet`1<T>> CreatePool(IEqualityComparer`1<T> comparer);
    public static PooledHashSet`1<T> GetInstance(IEqualityComparer`1<T> comparer);
    public static PooledHashSet`1<T> GetInstance(IEnumerable`1<T> initializer, IEqualityComparer`1<T> comparer);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Analyzer.Utilities.PooledObjects.PooledSortedSet`1 : SortedSet`1<T> {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ObjectPool`1<PooledSortedSet`1<T>> _pool;
    private static ObjectPool`1<PooledSortedSet`1<T>> s_poolInstance;
    private static ConcurrentDictionary`2<IComparer`1<T>, ObjectPool`1<PooledSortedSet`1<T>>> s_poolInstancesByComparer;
    public PooledSortedSet`1(ObjectPool`1<PooledSortedSet`1<T>> pool, IComparer`1<T> comparer);
    private static PooledSortedSet`1();
    public sealed virtual void Dispose();
    public void Free(CancellationToken cancellationToken);
    private static ObjectPool`1<PooledSortedSet`1<T>> CreatePool(IComparer`1<T> comparer);
    public static PooledSortedSet`1<T> GetInstance(IComparer`1<T> comparer);
    public static PooledSortedSet`1<T> GetInstance(IEnumerable`1<T> initializer, IComparer`1<T> comparer);
}
internal static class Analyzer.Utilities.RoslynDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.RoslynString : object {
    public static bool IsNullOrEmpty(string value);
    public static bool IsNullOrWhiteSpace(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Analyzer.Utilities.SmallDictionary`2 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private AvlNode<K, V> _root;
    public IEqualityComparer`1<K> Comparer;
    public static SmallDictionary`2<K, V> Empty;
    public V Item { get; public set; }
    [NullableAttribute("0")]
public KeyCollection<K, V> Keys { get; }
    [NullableAttribute("0")]
public ValueCollection<K, V> Values { get; }
    public SmallDictionary`2(IEqualityComparer`1<K> comparer);
    public SmallDictionary`2(SmallDictionary`2<K, V> other, IEqualityComparer`1<K> comparer);
    private static SmallDictionary`2();
    private bool CompareKeys(K k1, K k2);
    private int GetHashCode(K k);
    public bool TryGetValue(K key, V& value);
    public void Add(K key, V value);
    public V get_Item(K key);
    public void set_Item(K key, V value);
    public bool ContainsKey(K key);
    [ConditionalAttribute("DEBUG")]
internal void AssertBalanced();
    private bool TryGetValue(int hashCode, K key, V& value);
    private bool GetFromList(Node<K, V> next, K key, V& value);
    private void Insert(int hashCode, K key, V value, bool add);
    private static AvlNode<K, V> LeftSimple(AvlNode<K, V> unbalanced);
    private static AvlNode<K, V> RightSimple(AvlNode<K, V> unbalanced);
    private static AvlNode<K, V> LeftComplex(AvlNode<K, V> unbalanced);
    private static AvlNode<K, V> RightComplex(AvlNode<K, V> unbalanced);
    private void HandleInsert(AvlNode<K, V> node, AvlNode<K, V> parent, K key, V value, bool add);
    private void AddNode(AvlNode<K, V> node, AvlNode<K, V> parent, K key, V value);
    [NullableContextAttribute("0")]
public KeyCollection<K, V> get_Keys();
    [NullableContextAttribute("0")]
public ValueCollection<K, V> get_Values();
    [NullableContextAttribute("0")]
public Enumerator<K, V> GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<K, V>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<K,V>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private int HeightApprox();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Analyzer.Utilities.SolutionChangeAction : CodeAction {
    private Func`2<CancellationToken, Task`1<Solution>> _createChangedSolution;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EquivalenceKey>k__BackingField;
    public string Title { get; }
    public string EquivalenceKey { get; }
    protected SolutionChangeAction(string title, Func`2<CancellationToken, Task`1<Solution>> createChangedSolution, string equivalenceKey);
    [CompilerGeneratedAttribute]
public virtual string get_Title();
    [CompilerGeneratedAttribute]
public virtual string get_EquivalenceKey();
    protected virtual Task`1<Solution> GetChangedSolutionAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Analyzer.Utilities.SymbolByDisplayStringComparer : object {
    [CompilerGeneratedAttribute]
private SymbolDisplayStringCache <SymbolDisplayStringCache>k__BackingField;
    public SymbolDisplayStringCache SymbolDisplayStringCache { get; }
    public SymbolByDisplayStringComparer(Compilation compilation);
    public SymbolByDisplayStringComparer(SymbolDisplayStringCache symbolDisplayStringCache);
    [CompilerGeneratedAttribute]
public SymbolDisplayStringCache get_SymbolDisplayStringCache();
    public sealed virtual int Compare(ITypeSymbol x, ITypeSymbol y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.SymbolDisplayFormats : object {
    public static SymbolDisplayFormat ShortSymbolDisplayFormat;
    public static SymbolDisplayFormat QualifiedTypeAndNamespaceSymbolDisplayFormat;
    private static SymbolDisplayFormats();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Analyzer.Utilities.SymbolDisplayStringCache : object {
    private static BoundedCacheWithFactory`2<Compilation, SymbolDisplayStringCache> s_byCompilationCache;
    private ConcurrentDictionary`2<ISymbol, string> SymbolToDisplayNames;
    private static SymbolDisplayStringCache();
    public static SymbolDisplayStringCache GetOrCreate(Compilation compilation);
    public string GetDisplayString(ISymbol symbol);
    [CompilerGeneratedAttribute]
internal static SymbolDisplayStringCache <GetOrCreate>g__CreateSymbolDisplayNameCache|3_0(Compilation compilation);
}
[FlagsAttribute]
internal enum Analyzer.Utilities.SymbolModifiers : Enum {
    public int value__;
    public static SymbolModifiers None;
    public static SymbolModifiers Static;
    public static SymbolModifiers Shared;
    public static SymbolModifiers Const;
    public static SymbolModifiers ReadOnly;
    public static SymbolModifiers Abstract;
    public static SymbolModifiers Virtual;
    public static SymbolModifiers Override;
    public static SymbolModifiers Sealed;
    public static SymbolModifiers Extern;
    public static SymbolModifiers Async;
}
[ExtensionAttribute]
internal static class Analyzer.Utilities.SymbolModifiersExtensions : object {
    [ExtensionAttribute]
public static bool Contains(SymbolModifiers modifiers, SymbolModifiers modifiersToCheck);
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static SymbolModifiers GetSymbolModifiers(ISymbol symbol);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Analyzer.Utilities.SymbolNamesWithValueOption`1 : object {
    internal static SymbolKind AllKinds;
    internal static char WildcardChar;
    public static SymbolNamesWithValueOption`1<TValue> Empty;
    private ImmutableDictionary`2<string, TValue> _names;
    private ImmutableDictionary`2<ISymbol, TValue> _symbols;
    private ImmutableDictionary`2<SymbolKind, ImmutableDictionary`2<string, TValue>> _wildcardNamesBySymbolKind;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ISymbol, KeyValuePair`2<string, TValue>> _wildcardMatchResult;
    private ConcurrentDictionary`2<ISymbol, string> _symbolToDeclarationId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal static KeyValuePair`2<string, TValue> NoWildcardMatch { get; }
    public bool IsEmpty { get; }
    private SymbolNamesWithValueOption`1(ImmutableDictionary`2<string, TValue> names, ImmutableDictionary`2<ISymbol, TValue> symbols, ImmutableDictionary`2<SymbolKind, ImmutableDictionary`2<string, TValue>> wildcardNamesBySymbolKind);
    private static SymbolNamesWithValueOption`1();
    internal static KeyValuePair`2<string, TValue> get_NoWildcardMatch();
    public static SymbolNamesWithValueOption`1<TValue> Create(ImmutableArray`1<string> symbolNames, Compilation compilation, string optionalPrefix, Func`2<string, NameParts<TValue>> getSymbolNamePartsFunc);
    public bool get_IsEmpty();
    public bool Contains(ISymbol symbol);
    public bool TryGetValue(ISymbol symbol, TValue& value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SymbolNamesWithValueOption`1<TValue> other);
    public virtual int GetHashCode();
    private bool TryGetFirstWildcardMatch(ISymbol symbol, KeyValuePair`2& firstMatch);
    [NullableContextAttribute("0")]
internal TestAccessor<TValue> GetTestAccessor();
    [CompilerGeneratedAttribute]
internal static void <Create>g__ProcessWildcardName|12_2(NameParts<TValue> parts, PooledDictionary`2<SymbolKind, PooledDictionary`2<string, TValue>> wildcardNamesBuilder);
    [CompilerGeneratedAttribute]
internal static void <Create>g__ProcessName|12_3(NameParts<TValue> parts, PooledDictionary`2<string, TValue> namesBuilder);
    [CompilerGeneratedAttribute]
internal static void <Create>g__ProcessSymbolName|12_4(NameParts<TValue> parts, Compilation compilation, string optionalPrefix, PooledDictionary`2<ISymbol, TValue> symbolsBuilder);
    [CompilerGeneratedAttribute]
internal static string <TryGetFirstWildcardMatch>g__GetDeclarationId|20_6(ISymbol symbol);
}
[FlagsAttribute]
internal enum Analyzer.Utilities.SymbolVisibilityGroup : Enum {
    public int value__;
    public static SymbolVisibilityGroup None;
    public static SymbolVisibilityGroup Public;
    public static SymbolVisibilityGroup Internal;
    public static SymbolVisibilityGroup Private;
    public static SymbolVisibilityGroup Friend;
    public static SymbolVisibilityGroup All;
}
[ExtensionAttribute]
internal static class Analyzer.Utilities.SymbolVisibilityGroupExtensions : object {
    [ExtensionAttribute]
public static bool Contains(SymbolVisibilityGroup symbolVisibilityGroup, SymbolVisibility symbolVisibility);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.SyntaxGeneratorExtensions : object {
    private static string LeftIdentifierName;
    private static string RightIdentifierName;
    private static string ReferenceEqualsMethodName;
    private static string EqualsMethodName;
    private static string CompareToMethodName;
    private static string SystemNotImplementedExceptionTypeName;
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorEqualityDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode TypeExpressionForStaticMemberAccess(SyntaxGenerator generator, INamedTypeSymbol typeSymbol);
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorInequalityDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorLessThanDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorLessThanOrEqualDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorGreaterThanDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode DefaultOperatorGreaterThanOrEqualDeclaration(SyntaxGenerator generator, INamedTypeSymbol containingType);
    [ExtensionAttribute]
private static SyntaxNode ComparisonOperatorDeclaration(SyntaxGenerator generator, OperatorKind operatorKind, INamedTypeSymbol containingType, SyntaxNode[] statements);
    [ExtensionAttribute]
public static SyntaxNode DefaultEqualsOverrideDeclaration(SyntaxGenerator generator, Compilation compilation, INamedTypeSymbol containingType);
    [ExtensionAttribute]
public static SyntaxNode DefaultGetHashCodeOverrideDeclaration(SyntaxGenerator generator, Compilation compilation);
    [IteratorStateMachineAttribute("Analyzer.Utilities.SyntaxGeneratorExtensions/<DefaultMethodBody>d__16")]
[ExtensionAttribute]
public static IEnumerable`1<SyntaxNode> DefaultMethodBody(SyntaxGenerator generator, Compilation compilation);
    [ExtensionAttribute]
public static SyntaxNode DefaultMethodStatement(SyntaxGenerator generator, Compilation compilation);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static SyntaxNode TryGetContainingDeclaration(SyntaxGenerator generator, SyntaxNode node, DeclarationKind kind);
    [CompilerGeneratedAttribute]
internal static SyntaxNode <TypeExpressionForStaticMemberAccess>g__QualifiedNameToMemberAccess|7_0(int qualifiedNameSyntaxKind, int memberAccessExpressionSyntaxKind, SyntaxNode expression, SyntaxGenerator generator);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Analyzer.Utilities.SyntaxNodeExtensions : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Optional`1<SyntaxAnnotation> s_addImportsAnnotation;
    private static SyntaxAnnotation AddImportsAnnotation { get; }
    private static SyntaxAnnotation get_AddImportsAnnotation();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static SyntaxNode WithAddImportsAnnotation(SyntaxNode syntaxNode);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Analyzer.Utilities.SyntaxTreeCategorizedAnalyzerConfigOptions : AbstractCategorizedAnalyzerConfigOptions {
    [NullableAttribute("2")]
private AnalyzerConfigOptions _analyzerConfigOptions;
    private static ConditionalWeakTable`2<ImmutableDictionary`2<string, string>, SyntaxTreeCategorizedAnalyzerConfigOptions> s_perTreeOptionsCache;
    public static SyntaxTreeCategorizedAnalyzerConfigOptions Empty;
    public bool IsEmpty { get; }
    [NullableContextAttribute("2")]
private SyntaxTreeCategorizedAnalyzerConfigOptions(AnalyzerConfigOptions analyzerConfigOptions);
    private static SyntaxTreeCategorizedAnalyzerConfigOptions();
    public static SyntaxTreeCategorizedAnalyzerConfigOptions Create(AnalyzerConfigOptions analyzerConfigOptions);
    public virtual bool get_IsEmpty();
    protected virtual bool TryGetOptionValue(string optionKeyPrefix, string optionKeySuffix, string optionName, String& valueString);
    [CompilerGeneratedAttribute]
internal static ImmutableDictionary`2<string, string> <Create>g__TryGetBackingOptionsDictionary|4_1(AnalyzerConfigOptions analyzerConfigOptions);
}
internal class Analyzer.Utilities.Unit : ValueType {
    public static Unit Default { get; }
    public sealed virtual bool Equals(Unit other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static bool op_Equality(Unit first, Unit second);
    public static bool op_Inequality(Unit first, Unit second);
    public static Unit get_Default();
}
[IsReadOnlyAttribute]
internal class Analyzer.Utilities.UnusedValue : ValueType {
}
[FlagsAttribute]
internal enum Analyzer.Utilities.ValueUsageInfo : Enum {
    public int value__;
    public static ValueUsageInfo None;
    public static ValueUsageInfo Read;
    public static ValueUsageInfo Write;
    public static ValueUsageInfo Reference;
    public static ValueUsageInfo Name;
    public static ValueUsageInfo ReadWrite;
    public static ValueUsageInfo ReadableReference;
    public static ValueUsageInfo WritableReference;
    public static ValueUsageInfo ReadableWritableReference;
}
[ExtensionAttribute]
internal static class Analyzer.Utilities.ValueUsageInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsReadFrom(ValueUsageInfo valueUsageInfo);
    [ExtensionAttribute]
public static bool IsWrittenTo(ValueUsageInfo valueUsageInfo);
    [ExtensionAttribute]
public static bool IsNameOnly(ValueUsageInfo valueUsageInfo);
    [ExtensionAttribute]
public static bool IsReference(ValueUsageInfo valueUsageInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Analyzer.Utilities.WellKnownTypeNames : object {
    public static string MicrosoftAspNetCoreAntiforgeryIAntiforgery;
    public static string MicrosoftAspNetCoreHttpCookieOptions;
    public static string MicrosoftAspNetCoreHttpInternalResponseCookies;
    public static string MicrosoftAspNetCoreHttpIResponseCookies;
    public static string MicrosoftAspNetCoreMvcController;
    public static string MicrosoftAspNetCoreMvcControllerAttribute;
    public static string MicrosoftAspNetCoreMvcControllerBase;
    public static string MicrosoftAspNetCoreMvcFiltersAuthorizationFilterContext;
    public static string MicrosoftAspNetCoreMvcFiltersFilterCollection;
    public static string MicrosoftAspNetCoreMvcFiltersIAsyncAuthorizationFilter;
    public static string MicrosoftAspNetCoreMvcFiltersIAuthorizationFilter;
    public static string MicrosoftAspNetCoreMvcFiltersIFilterMetadata;
    public static string MicrosoftAspNetCoreMvcFromServicesAttribute;
    public static string MicrosoftAspNetCoreMvcHttpDeleteAttribute;
    public static string MicrosoftAspNetCoreMvcHttpGetAttribute;
    public static string MicrosoftAspNetCoreMvcHttpHeadAttribute;
    public static string MicrosoftAspNetCoreMvcHttpOptionsAttribute;
    public static string MicrosoftAspNetCoreMvcHttpPatchAttribute;
    public static string MicrosoftAspNetCoreMvcHttpPostAttribute;
    public static string MicrosoftAspNetCoreMvcHttpPutAttribute;
    public static string MicrosoftAspNetCoreMvcNonActionAttribute;
    public static string MicrosoftAspNetCoreMvcNonControllerAttribute;
    public static string MicrosoftAspNetCoreMvcRouteAttribute;
    public static string MicrosoftAspNetCoreMvcRoutingHttpMethodAttribute;
    public static string MicrosoftAspNetCoreRazorHostingRazorCompiledItemAttribute;
    public static string MicrosoftCodeAnalysisCompilation;
    public static string MicrosoftCodeAnalysisCSharpCSharpCompilation;
    public static string MicrosoftCodeAnalysisDiagnostic;
    public static string MicrosoftCodeAnalysisDiagnosticDescriptor;
    public static string MicrosoftCodeAnalysisDiagnosticsAnalysisContext;
    public static string MicrosoftCodeAnalysisDiagnosticsCodeBlockAnalysisContext;
    public static string MicrosoftCodeAnalysisDiagnosticsCodeBlockStartAnalysisContext1;
    public static string MicrosoftCodeAnalysisDiagnosticsCompilationEndAnalysisContext;
    public static string MicrosoftCodeAnalysisDiagnosticsCompilationStartAnalysisContext;
    public static string MicrosoftCodeAnalysisDiagnosticsDiagnosticAnalyzer;
    public static string MicrosoftCodeAnalysisDiagnosticsDiagnosticAnalyzerAttribute;
    public static string MicrosoftCodeAnalysisDiagnosticsGeneratedCodeAnalysisFlags;
    public static string MicrosoftCodeAnalysisDiagnosticsOperationAnalysisContext;
    public static string MicrosoftCodeAnalysisDiagnosticsOperationBlockAnalysisContext;
    public static string MicrosoftCodeAnalysisDiagnosticsOperationBlockStartAnalysisContext;
    public static string MicrosoftCodeAnalysisDiagnosticsSemanticModelAnalysisContext;
    public static string MicrosoftCodeAnalysisDiagnosticsSymbolAnalysisContext;
    public static string MicrosoftCodeAnalysisDiagnosticsSyntaxNodeAnalysisContext;
    public static string MicrosoftCodeAnalysisDiagnosticsSyntaxTreeAnalysisContext;
    public static string MicrosoftCodeAnalysisHostMefMefConstruction;
    public static string MicrosoftCodeAnalysisLocalizableString;
    public static string MicrosoftCodeAnalysisLocalizableResourceString;
    public static string MicrosoftCodeAnalysisSharedCollectionsTemporaryArrayExtensions;
    public static string MicrosoftCodeAnalysisSymbolKind;
    public static string MicrosoftCodeAnalysisVisualBasicVisualBasicCompilation;
    public static string MicrosoftEntityFrameworkCoreEntityFrameworkQueryableExtensions;
    public static string MicrosoftEntityFrameworkCoreRelationalQueryableExtensions;
    public static string MicrosoftSecurityApplicationAntiXss;
    public static string MicrosoftSecurityApplicationAntiXssEncoder;
    public static string MicrosoftSecurityApplicationEncoder;
    public static string MicrosoftSecurityApplicationUnicodeCharacterEncoder;
    public static string MicrosoftVisualBasicDevicesComputerInfo;
    public static string MicrosoftVisualStudioTestToolsUnitTestingAssert;
    public static string MicrosoftVisualStudioTestToolsUnitTestingCollectionAssert;
    public static string MicrosoftVisualStudioTestToolsUnitTestingDataTestMethodAttribute;
    public static string MicrosoftVisualStudioTestToolsUnitTestingExpectedExceptionAttribute;
    public static string MicrosoftVisualStudioTestToolsUnitTestingStringAssert;
    public static string MicrosoftVisualStudioTestToolsUnitTestingTestCleanupAttribute;
    public static string MicrosoftVisualStudioTestToolsUnitTestingTestInitializeAttribute;
    public static string MicrosoftVisualStudioTestToolsUnitTestingTestMethodAttribute;
    public static string MicrosoftWindowsAzureStorageCloudStorageAccount;
    public static string MicrosoftWindowsAzureStorageSharedAccessProtocol;
    public static string NewtonsoftJsonJsonConvert;
    public static string NewtonsoftJsonJsonIgnoreAttribute;
    public static string NewtonsoftJsonJsonSerializer;
    public static string NewtonsoftJsonJsonSerializerSettings;
    public static string NewtonsoftJsonTypeNameHandling;
    public static string NUnitFrameworkAssert;
    public static string NUnitFrameworkOneTimeSetUpAttribute;
    public static string NUnitFrameworkOneTimeTearDownAttribute;
    public static string NUnitFrameworkSetUpAttribute;
    public static string NUnitFrameworkTearDownAttribute;
    public static string NUnitFrameworkTestAttribute;
    public static string NUnitFrameworkTestCaseAttribute;
    public static string NUnitFrameworkTestCaseSourceAttribute;
    public static string NUnitFrameworkTheoryAttribute;
    public static string RoslynUtilitiesNonDefaultableAttribute;
    public static string SystemActivator;
    public static string SystemAppContext;
    public static string SystemAppDomain;
    public static string SystemArgumentException;
    public static string SystemAttribute;
    public static string SystemAttributeTargets;
    public static string SystemAttributeUsageAttribute;
    public static string SystemBoolean;
    public static string SystemBuffersMemoryManager1;
    public static string SystemByte;
    public static string SystemChar;
    public static string SystemCLSCompliantAttribute;
    public static string SystemCodeDomCompilerGeneratedCodeAttribute;
    public static string SystemCollectionsConcurrentConcurrentBag1;
    public static string SystemCollectionsConcurrentConcurrentDictionary2;
    public static string SystemCollectionsConcurrentConcurrentQueue1;
    public static string SystemCollectionsConcurrentConcurrentStack1;
    public static string SystemCollectionsGenericDictionary2;
    public static string SystemCollectionsGenericHashSet1;
    public static string SystemCollectionsGenericICollection1;
    public static string SystemCollectionsGenericIEnumerable1;
    public static string SystemCollectionsGenericIEnumerator1;
    public static string SystemCollectionsGenericIEqualityComparer1;
    public static string SystemCollectionsGenericIList1;
    public static string SystemCollectionsGenericIReadOnlyCollection1;
    public static string SystemCollectionsGenericIReadOnlyList1;
    public static string SystemCollectionsGenericKeyNotFoundException;
    public static string SystemCollectionsGenericList1;
    public static string SystemCollectionsICollection;
    public static string SystemCollectionsIEnumerable;
    public static string SystemCollectionsIEnumerator;
    public static string SystemCollectionsIHashCodeProvider;
    public static string SystemCollectionsIList;
    public static string SystemCollectionsImmutableIImmutableDictionary2;
    public static string SystemCollectionsImmutableIImmutableList1;
    public static string SystemCollectionsImmutableIImmutableQueue1;
    public static string SystemCollectionsImmutableIImmutableSet1;
    public static string SystemCollectionsImmutableIImmutableStack1;
    public static string SystemCollectionsImmutableImmutableArray1;
    public static string SystemCollectionsImmutableImmutableDictionary;
    public static string SystemCollectionsImmutableImmutableDictionary2;
    public static string SystemCollectionsImmutableImmutableHashSet;
    public static string SystemCollectionsImmutableImmutableHashSet1;
    public static string SystemCollectionsImmutableImmutableList1;
    public static string SystemCollectionsImmutableImmutableSortedDictionary2;
    public static string SystemCollectionsImmutableImmutableSortedSet1;
    public static string SystemCollectionsSpecializedNameValueCollection;
    public static string SystemCollectionsObjectModelReadOnlyCollection1;
    public static string SystemCollectionsObjectModelReadOnlyDictionary2;
    public static string SystemCollectionsObjectModelReadOnlyObservableCollection1;
    public static string SystemComponentModelComponent;
    public static string SystemComponentModelCompositionExportAttribute;
    public static string SystemComponentModelCompositionImportingConstructorAttribute;
    public static string SystemComponentModelCompositionInheritedExportAttribute;
    public static string SystemComponentModelDesignerAttribute;
    public static string SystemComponentModelDesignerCategoryAttribute;
    public static string SystemComponentModelLocalizableAttribute;
    public static string SystemCompositionExportAttribute;
    public static string SystemCompositionImportingConstructorAttribute;
    public static string SystemConfigurationConfigurationSection;
    public static string SystemConfigurationIConfigurationSectionHandler;
    public static string SystemConsole;
    public static string SystemConvert;
    public static string SystemDataDataRow;
    public static string SystemDataDataSet;
    public static string SystemDataDataTable;
    public static string SystemDataDataViewManager;
    public static string SystemDataEntityDbSet1;
    public static string SystemDataEntityQueryableExtensions;
    public static string SystemDataIDataAdapter;
    public static string SystemDataIDbCommand;
    public static string SystemDataOdbcOdbcParameter;
    public static string SystemDataOleDbOleDbParameter;
    public static string SystemDataSqlClientSqlParameter;
    public static string SystemDataTypedTableBase1;
    public static string SystemDateTime;
    public static string SystemDateTimeOffset;
    public static string SystemDecimal;
    public static string SystemDiagnosticsCodeAnalysisNotNullAttribute;
    public static string SystemDiagnosticContractsContract;
    public static string SystemDiagnosticsConditionalAttribute;
    public static string SystemDiagnosticsContractsPureAttribute;
    public static string SystemDiagnosticsDebug;
    public static string SystemDiagnosticsDebuggerNonUserCode;
    public static string SystemDiagnosticsDebuggerTypeProxyAttribute;
    public static string SystemDiagnosticsProcess;
    public static string SystemDiagnosticsProcessStartInfo;
    public static string SystemDiagnosticsTraceListener;
    public static string SystemDiagnosticsTracingEventSource;
    public static string SystemDirectoryDirectoryEntry;
    public static string SystemDirectoryServicesActiveDirectoryADSearcher;
    public static string SystemDirectoryServicesDirectorySearcher;
    public static string SystemDouble;
    public static string SystemEnvironment;
    public static string SystemEventArgs;
    public static string SystemEventHandler1;
    public static string SystemException;
    public static string SystemExecutionEngineException;
    public static string SystemFlagsAttribute;
    public static string SystemGC;
    public static string SystemGlobalizationCultureInfo;
    public static string SystemGuid;
    public static string SystemIAsyncDisposable;
    public static string SystemIComparable;
    public static string SystemIComparable1;
    public static string SystemIDisposable;
    public static string SystemIEquatable1;
    public static string SystemIFormatProvider;
    public static string SystemIndex;
    public static string SystemInt16;
    public static string SystemInt32;
    public static string SystemInt64;
    public static string SystemInvalidOperationException;
    public static string SystemIOCompressionZipArchiveEntry;
    public static string SystemIOCompressionZipFileExtensions;
    public static string SystemIODirectory;
    public static string SystemIODirectoryInfo;
    public static string SystemIOFile;
    public static string SystemIOFileInfo;
    public static string SystemIOFileStream;
    public static string SystemIOLogLogStore;
    public static string SystemIOPath;
    public static string SystemIOStream;
    public static string SystemIOStringReader;
    public static string SystemIOUnmanagedMemoryStream;
    public static string SystemIProgress1;
    public static string SystemLinqEnumerable;
    public static string SystemLinqQueryable;
    public static string SystemMarshalByRefObject;
    public static string SystemMemory1;
    public static string SystemNetHttpHttpClient;
    public static string SystemNetHttpHttpClientHandler;
    public static string SystemNetHttpWinHttpHandler;
    public static string SystemNetSecurityProtocolType;
    public static string SystemNetSecurityRemoteCertificateValidationCallback;
    public static string SystemNetSecuritySslPolicyErrors;
    public static string SystemNetServicePointManager;
    public static string SystemNonSerializedAttribute;
    public static string SystemNotImplementedException;
    public static string SystemNotSupportedException;
    public static string SystemNullable1;
    public static string SystemNumber;
    public static string SystemObject;
    public static string SystemObsoleteAttribute;
    public static string SystemOperatingSystem;
    public static string SystemOutOfMemoryException;
    public static string SystemRandom;
    public static string SystemRange;
    public static string SystemReadOnlyMemory1;
    public static string SystemReadOnlySpan1;
    public static string SystemReflectionAssembly;
    public static string SystemReflectionAssemblyName;
    public static string SystemReflectionAssemblyVersionAttribute;
    public static string SystemReflectionMemberInfo;
    public static string SystemReflectionParameterInfo;
    public static string SystemResourcesNeutralResourcesLanguageAttribute;
    public static string SystemResourcesResourceManager;
    public static string SystemRuntimeCompilerServicesCallerFilePathAttribute;
    public static string SystemRuntimeCompilerServicesCallerLineNumberAttribute;
    public static string SystemRuntimeCompilerServicesCallerMemberNameAttribute;
    public static string SystemRuntimeCompilerServicesCompilerGeneratedAttribute;
    public static string SystemRuntimeCompilerServicesConfiguredValueTaskAwaitable1;
    public static string SystemRuntimeCompilerServicesInternalsVisibleToAttribute;
    public static string SystemRuntimeCompilerServicesRestrictedInternalsVisibleToAttribute;
    public static string SystemRuntimeCompilerServicesTypeForwardedToAttribute;
    public static string SystemRuntimeExceptionServicesHandleProcessCorruptedStateExceptionsAttribute;
    public static string SystemRuntimeInteropServicesCharSet;
    public static string SystemRuntimeInteropServicesCoClassAttribute;
    public static string SystemRuntimeInteropServicesComSourceInterfacesAttribute;
    public static string SystemRuntimeInteropServicesComVisibleAttribute;
    public static string SystemRuntimeInteropServicesDefaultDllImportSearchPathsAttribute;
    public static string SystemRuntimeInteropServicesDllImportAttribute;
    public static string SystemRuntimeInteropServicesFieldOffsetAttribute;
    public static string SystemRuntimeInteropServicesGCHandle;
    public static string SystemRuntimeInteropServicesHandleRef;
    public static string SystemRuntimeInteropServicesMarshalAsAttribute;
    public static string SystemRuntimeInteropServicesOSPlatform;
    public static string SystemRuntimeInteropServicesOutAttribute;
    public static string SystemRuntimeInteropServicesRuntimeInformation;
    public static string SystemRuntimeInteropServicesSafeHandle;
    public static string SystemRuntimeInteropServicesStructLayoutAttribute;
    public static string SystemRuntimeInteropServicesUnmanagedType;
    public static string SystemRuntimeSerializationDataContractAttribute;
    public static string SystemRuntimeSerializationDataContractSerializer;
    public static string SystemRuntimeSerializationDataMemberAttribute;
    public static string SystemRuntimeSerializationFormattersBinaryBinaryFormatter;
    public static string SystemRuntimeSerializationFormattersSoapSoapFormatter;
    public static string SystemRuntimeSerializationIDeserializationCallback;
    public static string SystemRuntimeSerializationIgnoreDataMemberAttribute;
    public static string SystemRuntimeSerializationISerializable;
    public static string SystemRuntimeSerializationJsonDataContractJsonSerializer;
    public static string SystemRuntimeSerializationKnownTypeAttribute;
    public static string SystemRuntimeSerializationNetDataContractSerializer;
    public static string SystemRuntimeSerializationOnDeserializedAttribute;
    public static string SystemRuntimeSerializationOnDeserializingAttribute;
    public static string SystemRuntimeSerializationOnSerializedAttribute;
    public static string SystemRuntimeSerializationOnSerializingAttribute;
    public static string SystemRuntimeSerializationSerializationInfo;
    public static string SystemRuntimeSerializationStreamingContext;
    public static string SystemSecurityAuthenticationSslProtocols;
    public static string SystemSecurityCryptographyAesCcm;
    public static string SystemSecurityCryptographyAesGcm;
    public static string SystemSecurityCryptographyAsymmetricAlgorithm;
    public static string SystemSecurityCryptographyCipherMode;
    public static string SystemSecurityCryptographyCryptoConfig;
    public static string SystemSecurityCryptographyDES;
    public static string SystemSecurityCryptographyDSA;
    public static string SystemSecurityCryptographyDSASignatureFormatter;
    public static string SystemSecurityCryptographyHashAlgorithmName;
    public static string SystemSecurityCryptographyHMACMD5;
    public static string SystemSecurityCryptographyHMACRIPEMD160;
    public static string SystemSecurityCryptographyHMACSHA1;
    public static string SystemSecurityCryptographyMD5;
    public static string SystemSecurityCryptographyPasswordDeriveBytes;
    public static string SystemSecurityCryptographyRC2;
    public static string SystemSecurityCryptographyRfc2898DeriveBytes;
    public static string SystemSecurityCryptographyRIPEMD160;
    public static string SystemSecurityCryptographyRSA;
    public static string SystemSecurityCryptographySHA1;
    public static string SystemSecurityCryptographySymmetricAlgorithm;
    public static string SystemSecurityCryptographyTripleDES;
    public static string SystemSecurityCryptographyX509CertificatesStoreName;
    public static string SystemSecurityCryptographyX509CertificatesX509Certificate;
    public static string SystemSecurityCryptographyX509CertificatesX509Certificate2;
    public static string SystemSecurityCryptographyX509CertificatesX509Chain;
    public static string SystemSecurityCryptographyX509CertificatesX509Store;
    public static string SystemSerializableAttribute;
    public static string SystemServiceModelMessageContractAttribute;
    public static string SystemServiceModelOperationContractAttribute;
    public static string SystemSingle;
    public static string SystemSpan1;
    public static string SystemStackOverflowException;
    public static string SystemString;
    public static string SystemStringComparison;
    public static string SystemSystemException;
    public static string SystemTextEncoding;
    public static string SystemTextRegularExpressionsRegex;
    public static string SystemTextStringBuilder;
    public static string SystemThreadingCancellationToken;
    public static string SystemThreadingInterlocked;
    public static string SystemThreadingMonitor;
    public static string SystemThreadingSpinLock;
    public static string SystemThreadingTasksTaskCompletionSource1;
    public static string SystemThreadingTasksTask;
    public static string SystemThreadingTasksTask1;
    public static string SystemThreadingTasksTaskCompletionSource;
    public static string SystemThreadingTasksTaskContinuationOptions;
    public static string SystemThreadingTasksTaskCreationOptions;
    public static string SystemThreadingTasksTaskFactory;
    public static string SystemThreadingTasksTaskScheduler;
    public static string SystemThreadingTasksValueTask;
    public static string SystemThreadingTasksValueTask1;
    public static string SystemThreadingThread;
    public static string SystemTimeSpan;
    public static string SystemType;
    public static string SystemUri;
    public static string SystemWebConfigurationHttpRuntimeSection;
    public static string SystemWebHttpApplication;
    public static string SystemWebHttpCookie;
    public static string SystemWebHttpRequest;
    public static string SystemWebHttpRequestBase;
    public static string SystemWebHttpRequestWrapper;
    public static string SystemWebHttpResponse;
    public static string SystemWebHttpResponseBase;
    public static string SystemWebHttpRouteAttribute;
    public static string SystemWebHttpServerUtility;
    public static string SystemWebHttpServerUtilityBase;
    public static string SystemWebHttpServerUtilityWrapper;
    public static string SystemWebHttpUtility;
    public static string SystemWebMvcAcceptVerbsAttribute;
    public static string SystemWebMvcActionResult;
    public static string SystemWebMvcChildActionOnlyAttribute;
    public static string SystemWebMvcController;
    public static string SystemWebMvcControllerBase;
    public static string SystemWebMvcHttpDeleteAttribute;
    public static string SystemWebMvcHttpGetAttribute;
    public static string SystemWebMvcHttpHeadAttribute;
    public static string SystemWebMvcHttpOptionsAttribute;
    public static string SystemWebMvcHttpPatchAttribute;
    public static string SystemWebMvcHttpPostAttribute;
    public static string SystemWebMvcHttpPutAttribute;
    public static string SystemWebMvcHttpVerbs;
    public static string SystemWebMvcNonActionAttribute;
    public static string SystemWebMvcValidateAntiForgeryTokenAttribute;
    public static string SystemWebMvcValidateInputAttribute;
    public static string SystemWebScriptSerializationJavaScriptSerializer;
    public static string SystemWebScriptSerializationJavaScriptTypeResolver;
    public static string SystemWebScriptSerializationSimpleTypeResolver;
    public static string SystemWebSecurityAntiXssAntiXssEncoder;
    public static string SystemWebSecurityAntiXssUnicodeCharacterEncoder;
    public static string SystemWebServicesWebMethodAttribute;
    public static string SystemWebUIAdaptersPageAdapter;
    public static string SystemWebUIControl;
    public static string SystemWebUIDataBoundLiteralControl;
    public static string SystemWebUIDesignerDataBoundLiteralControl;
    public static string SystemWebUIHtmlControlsHtmlContainerControl;
    public static string SystemWebUIHtmlControlsHtmlInputControl;
    public static string SystemWebUIHtmlControlsHtmlTitle;
    public static string SystemWebUIHtmlTextWriter;
    public static string SystemWebUIIndexedString;
    public static string SystemWebUIITextControl;
    public static string SystemWebUILiteralControl;
    public static string SystemWebUILosFormatter;
    public static string SystemWebUIObjectStateFormatter;
    public static string SystemWebUIPage;
    public static string SystemWebUIPageTheme;
    public static string SystemWebUIResourceBasedLiteralControl;
    public static string SystemWebUISimplePropertyEntry;
    public static string SystemWebUIStateItem;
    public static string SystemWebUIStringPropertyBuilder;
    public static string SystemWebUITemplateBuilder;
    public static string SystemWebUITemplateControl;
    public static string SystemWebUITemplateParser;
    public static string SystemWebUIWebControlsBaseDataList;
    public static string SystemWebUIWebControlsBaseValidator;
    public static string SystemWebUIWebControlsBulletedList;
    public static string SystemWebUIWebControlsButton;
    public static string SystemWebUIWebControlsButtonColumn;
    public static string SystemWebUIWebControlsButtonField;
    public static string SystemWebUIWebControlsCalendar;
    public static string SystemWebUIWebControlsChangePassword;
    public static string SystemWebUIWebControlsCheckBox;
    public static string SystemWebUIWebControlsCheckBoxField;
    public static string SystemWebUIWebControlsCommandEventArgs;
    public static string SystemWebUIWebControlsCreateUserWizard;
    public static string SystemWebUIWebControlsDataKey;
    public static string SystemWebUIWebControlsDataList;
    public static string SystemWebUIWebControlsDetailsView;
    public static string SystemWebUIWebControlsDetailsViewInsertEventArgs;
    public static string SystemWebUIWebControlsDetailsViewUpdateEventArgs;
    public static string SystemWebUIWebControlsFormView;
    public static string SystemWebUIWebControlsFormViewInsertEventArgs;
    public static string SystemWebUIWebControlsFormViewUpdateEventArgs;
    public static string SystemWebUIWebControlsGridView;
    public static string SystemWebUIWebControlsHiddenField;
    public static string SystemWebUIWebControlsHyperLink;
    public static string SystemWebUIWebControlsHyperLinkColumn;
    public static string SystemWebUIWebControlsHyperLinkField;
    public static string SystemWebUIWebControlsImage;
    public static string SystemWebUIWebControlsImageButton;
    public static string SystemWebUIWebControlsLabel;
    public static string SystemWebUIWebControlsLinkButton;
    public static string SystemWebUIWebControlsListControl;
    public static string SystemWebUIWebControlsListItem;
    public static string SystemWebUIWebControlsLiteral;
    public static string SystemWebUIWebControlsLogin;
    public static string SystemWebUIWebControlsMenu;
    public static string SystemWebUIWebControlsMenuItem;
    public static string SystemWebUIWebControlsMenuItemBinding;
    public static string SystemWebUIWebControlsPasswordRecovery;
    public static string SystemWebUIWebControlsQueryStringParameter;
    public static string SystemWebUIWebControlsRadioButtonList;
    public static string SystemWebUIWebControlsRepeatInfo;
    public static string SystemWebUIWebControlsServerValidateEventArgs;
    public static string SystemWebUIWebControlsSqlDataSource;
    public static string SystemWebUIWebControlsTable;
    public static string SystemWebUIWebControlsTableCell;
    public static string SystemWebUIWebControlsTextBox;
    public static string SystemWebUIWebControlsTreeNode;
    public static string SystemWebUIWebControlsTreeNodeBinding;
    public static string SystemWebUIWebControlsTreeView;
    public static string SystemWebUIWebControlsUnit;
    public static string SystemWebUIWebControlsWebPartsAppearanceEditorPart;
    public static string SystemWebUIWebControlsWebPartsPersonalizationEntry;
    public static string SystemWebUIWebControlsWebPartsWebPartCatalogAddVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartCatalogCloseVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartCloseVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartConnectionsCancelVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartConnectionsCloseVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartConnectionsConfigureVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartConnectionsConnectVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartConnectionsDisconnectVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartConnectVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartDeleteVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartEditorApplyVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartEditorCancelVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartEditorOKVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartEditVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartExportVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartHeaderCloseVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartHelpVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartMinimizeVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartRestoreVerb;
    public static string SystemWebUIWebControlsWebPartsWebPartVerb;
    public static string SystemWebUIWebControlsXmlDataSource;
    public static string SystemWebUIXPathBinder;
    public static string SystemWebUtilHttpEncoder;
    public static string SystemWindowsAssemblyPart;
    public static string SystemWindowsMarkupXamlReader;
    public static string SystemXmlDtdProcessing;
    public static string SystemXmlSchemaXmlSchema;
    public static string SystemXmlSchemaXmlSchemaCollection;
    public static string SystemXmlSchemaXmlSchemaXPath;
    public static string SystemXmlSerializationXmlAnyAttributeAttribute;
    public static string SystemXmlSerializationXmlAnyElementAttribute;
    public static string SystemXmlSerializationXmlArrayAttribute;
    public static string SystemXmlSerializationXmlArrayItemAttribute;
    public static string SystemXmlSerializationXmlAttributeAttribute;
    public static string SystemXmlSerializationXmlChoiceIdentifierAttribute;
    public static string SystemXmlSerializationXmlElementAttribute;
    public static string SystemXmlSerializationXmlEnumAttribute;
    public static string SystemXmlSerializationXmlIgnoreAttribute;
    public static string SystemXmlSerializationXmlIncludeAttribute;
    public static string SystemXmlSerializationXmlRootAttribute;
    public static string SystemXmlSerializationXmlSerializer;
    public static string SystemXmlSerializationXmlTextAttribute;
    public static string SystemXmlSerializationXmlTypeAttribute;
    public static string SystemXmlXmlAttribute;
    public static string SystemXmlXmlDocument;
    public static string SystemXmlXmlDocumentFragment;
    public static string SystemXmlXmlElement;
    public static string SystemXmlXmlEntity;
    public static string SystemXmlXmlNode;
    public static string SystemXmlXmlNotation;
    public static string SystemXmlXmlReader;
    public static string SystemXmlXmlReaderSettings;
    public static string SystemXmlXmlResolver;
    public static string SystemXmlXmlSecureResolver;
    public static string SystemXmlXmlTextReader;
    public static string SystemXmlXmlTextWriter;
    public static string SystemXmlXmlValidatingReader;
    public static string SystemXmlXmlWriter;
    public static string SystemXmlXPathXPathDocument;
    public static string SystemXmlXPathXPathExpression;
    public static string SystemXmlXPathXPathNavigator;
    public static string SystemXmlXslXslCompiledTransform;
    public static string SystemXmlXslXslTransform;
    public static string SystemXmlXslXsltSettings;
    public static string XunitAssert;
    public static string XunitFactAttribute;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Analyzer.Utilities.WellKnownTypeProvider : object {
    private static BoundedCacheWithFactory`2<Compilation, WellKnownTypeProvider> s_providerCache;
    [CompilerGeneratedAttribute]
private Compilation <Compilation>k__BackingField;
    private Lazy`1<ImmutableHashSet`1<IAssemblySymbol>> _referencedAssemblies;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<string, INamedTypeSymbol> _fullNameToTypeMap;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<string, ImmutableArray`1<string>> _fullTypeNameToNamespaceNames;
    public Compilation Compilation { get; }
    private WellKnownTypeProvider(Compilation compilation);
    private static WellKnownTypeProvider();
    public static WellKnownTypeProvider GetOrCreate(Compilation compilation);
    [CompilerGeneratedAttribute]
public Compilation get_Compilation();
    public bool TryGetOrCreateTypeByMetadataName(string fullTypeName, INamedTypeSymbol& namedTypeSymbol);
    public INamedTypeSymbol GetOrCreateTypeByMetadataName(string fullTypeName);
    internal bool IsTaskOfType(ITypeSymbol typeSymbol, Func`2<ITypeSymbol, bool> typeArgumentPredicate);
    private static ImmutableArray`1<string> GetNamespaceNamesFromFullTypeName(string fullTypeName);
    private static bool IsIdentifierPartCharacter(char ch);
    private static bool IsSubsetOfCollection(ImmutableArray`1<T> set1, ICollection`1<T> set2);
    [CompilerGeneratedAttribute]
private ImmutableHashSet`1<IAssemblySymbol> <.ctor>b__1_0();
    [CompilerGeneratedAttribute]
internal static WellKnownTypeProvider <GetOrCreate>g__CreateWellKnownTypeProvider|2_0(Compilation compilation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Analyzer.Utilities.WordParser : object {
    private static char NullChar;
    private WordParserOptions _options;
    private StringBuilder _buffer;
    private string _text;
    [NullableAttribute("2")]
private string _peekedWord;
    private int _index;
    private char _prefix;
    private bool SkipMnemonics { get; }
    private bool SplitCompoundWords { get; }
    public WordParser(string text, WordParserOptions options);
    public WordParser(string text, WordParserOptions options, char prefix);
    private bool get_SkipMnemonics();
    private bool get_SplitCompoundWords();
    internal static Collection`1<string> Parse(string text, WordParserOptions options);
    internal static Collection`1<string> Parse(string text, WordParserOptions options, char prefix);
    public static bool ContainsWord(string text, WordParserOptions options, ImmutableArray`1<string> words);
    internal static bool ContainsWord(string text, WordParserOptions options, char prefix, ImmutableArray`1<string> words);
    [NullableContextAttribute("2")]
public string NextWord();
    [NullableContextAttribute("2")]
public string PeekWord();
    [NullableContextAttribute("2")]
private string NextWordCore();
    private bool ParseNext();
    private bool TryParseWord(char c);
    private bool TryParsePrefix();
    private void ParseWholeWord();
    private void ParseInteger();
    private void ParseHex();
    private void ParseNumeric();
    private void ParseLowercase();
    private void ParseUppercase();
    private void ParseWithoutCase();
    private void ParseAllCaps();
    private void Read();
    private void Skip();
    private char Peek();
    private char Peek(int lookAhead);
    private void Unread();
    private bool IsIgnored(char c);
    private static bool IsLower(char c);
    private static bool IsUpper(char c);
    private static bool IsLetterOrDigit(char c);
    private static bool IsLetterWithoutCase(char c);
    private static bool IsDigit(char c);
    private static bool IsHexDigit(char c);
    private static bool IsIntraWordPunctuation(char c);
}
[FlagsAttribute]
internal enum Analyzer.Utilities.WordParserOptions : Enum {
    public int value__;
    public static WordParserOptions None;
    public static WordParserOptions IgnoreMnemonicsIndicators;
    public static WordParserOptions SplitCompoundWords;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData : object {
    [CompilerGeneratedAttribute]
private ISymbol <Symbol>k__BackingField;
    [CompilerGeneratedAttribute]
private ComputationalComplexityMetrics <ComputationalComplexityMetrics>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaintainabilityIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableHashSet`1<INamedTypeSymbol> <CoupledNamedTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private long <SourceLines>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ExecutableLines>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CyclomaticComplexity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DepthOfInheritance>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<CodeAnalysisMetricData> <Children>k__BackingField;
    public ISymbol Symbol { get; }
    internal ComputationalComplexityMetrics ComputationalComplexityMetrics { get; }
    public int MaintainabilityIndex { get; }
    public ImmutableHashSet`1<INamedTypeSymbol> CoupledNamedTypes { get; }
    public long SourceLines { get; }
    public long ExecutableLines { get; }
    public int CyclomaticComplexity { get; }
    public Nullable`1<int> DepthOfInheritance { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<CodeAnalysisMetricData> Children { get; }
    internal CodeAnalysisMetricData(ISymbol symbol, int maintainabilityIndex, ComputationalComplexityMetrics computationalComplexityMetrics, ImmutableHashSet`1<INamedTypeSymbol> coupledNamedTypes, long linesOfCode, int cyclomaticComplexity, Nullable`1<int> depthOfInheritance, ImmutableArray`1<CodeAnalysisMetricData> children);
    [CompilerGeneratedAttribute]
public ISymbol get_Symbol();
    [CompilerGeneratedAttribute]
internal ComputationalComplexityMetrics get_ComputationalComplexityMetrics();
    [CompilerGeneratedAttribute]
public int get_MaintainabilityIndex();
    [CompilerGeneratedAttribute]
public ImmutableHashSet`1<INamedTypeSymbol> get_CoupledNamedTypes();
    [CompilerGeneratedAttribute]
public long get_SourceLines();
    [CompilerGeneratedAttribute]
public long get_ExecutableLines();
    [CompilerGeneratedAttribute]
public int get_CyclomaticComplexity();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_DepthOfInheritance();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<CodeAnalysisMetricData> get_Children();
    public sealed virtual string ToString();
    [ObsoleteAttribute("Use ComputeAsync(CodeMetricsAnalysisContext) instead.")]
public static Task`1<CodeAnalysisMetricData> ComputeAsync(Compilation compilation, CancellationToken cancellationToken);
    public static Task`1<CodeAnalysisMetricData> ComputeAsync(CodeMetricsAnalysisContext context);
    [ObsoleteAttribute("Use ComputeAsync(ISymbol, CodeMetricsAnalysisContext) instead.")]
public static Task`1<CodeAnalysisMetricData> ComputeAsync(ISymbol symbol, Compilation compilation, CancellationToken cancellationToken);
    public static Task`1<CodeAnalysisMetricData> ComputeAsync(ISymbol symbol, CodeMetricsAnalysisContext context);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData/<ComputeAsync>d__34")]
internal static Task`1<ImmutableArray`1<CodeAnalysisMetricData>> ComputeAsync(IEnumerable`1<ISymbol> children, CodeMetricsAnalysisContext context);
    [CompilerGeneratedAttribute]
private void <ToString>g__appendChildren|29_0(string indent, <>c__DisplayClass29_0& );
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CodeMetrics.CodeAnalysisMetricData/<<ComputeAsync>g__ComputeAsync|33_0>d")]
[CompilerGeneratedAttribute]
internal static Task`1<CodeAnalysisMetricData> <ComputeAsync>g__ComputeAsync|33_0(ISymbol symbol, CodeMetricsAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.CodeAnalysis.CodeMetrics.CodeMetricsAnalysisContext : object {
    private ConcurrentDictionary`2<SyntaxTree, SemanticModel> _semanticModelMap;
    [CompilerGeneratedAttribute]
private Compilation <Compilation>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<INamedTypeSymbol, bool> <IsExcludedFromInheritanceCountFunc>k__BackingField;
    public Compilation Compilation { get; }
    public CancellationToken CancellationToken { get; }
    public Func`2<INamedTypeSymbol, bool> IsExcludedFromInheritanceCountFunc { get; }
    public CodeMetricsAnalysisContext(Compilation compilation, CancellationToken cancellationToken, Func`2<INamedTypeSymbol, bool> isExcludedFromInheritanceCountFunc);
    [CompilerGeneratedAttribute]
public Compilation get_Compilation();
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public Func`2<INamedTypeSymbol, bool> get_IsExcludedFromInheritanceCountFunc();
    internal SemanticModel GetSemanticModel(SyntaxNode node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.CodeAnalysis.CodeMetrics.ComputationalComplexityMetrics : object {
    internal static ComputationalComplexityMetrics Default;
    private static object s_nullConstantPlaceholder;
    private long _symbolUsageCounts;
    private long _constantUsageCounts;
    private ImmutableHashSet`1<OperationKind> _distinctOperatorKinds;
    private ImmutableHashSet`1<BinaryOperatorKind> _distinctBinaryOperatorKinds;
    private ImmutableHashSet`1<UnaryOperatorKind> _distinctUnaryOperatorKinds;
    private ImmutableHashSet`1<CaseKind> _distinctCaseKinds;
    private ImmutableHashSet`1<ISymbol> _distinctReferencedSymbols;
    private ImmutableHashSet`1<object> _distinctReferencedConstants;
    [CompilerGeneratedAttribute]
private long <TotalOperators>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ExecutableLines>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EffectiveLinesOfCode>k__BackingField;
    public bool IsDefault { get; }
    public long DistinctOperators { get; }
    public long DistinctOperands { get; }
    public long TotalOperators { get; }
    public long TotalOperands { get; }
    public long Vocabulary { get; }
    public long Length { get; }
    public double Volume { get; }
    public long ExecutableLines { get; }
    public long EffectiveLinesOfCode { get; }
    private ComputationalComplexityMetrics(long executableLinesOfCode, long effectiveLinesOfMaintainableCode, long operatorUsageCounts, long symbolUsageCounts, long constantUsageCounts, ImmutableHashSet`1<OperationKind> distinctOperatorKinds, ImmutableHashSet`1<BinaryOperatorKind> distinctBinaryOperatorKinds, ImmutableHashSet`1<UnaryOperatorKind> distinctUnaryOperatorKinds, ImmutableHashSet`1<CaseKind> distinctCaseKinds, ImmutableHashSet`1<ISymbol> distinctReferencedSymbols, ImmutableHashSet`1<object> distinctReferencedConstants);
    private static ComputationalComplexityMetrics();
    private static ComputationalComplexityMetrics Create(long executableLinesOfCode, long operatorUsageCounts, long symbolUsageCounts, long constantUsageCounts, bool hasSymbolInitializer, ImmutableHashSet`1<OperationKind> distinctOperatorKinds, ImmutableHashSet`1<BinaryOperatorKind> distinctBinaryOperatorKinds, ImmutableHashSet`1<UnaryOperatorKind> distinctUnaryOperatorKinds, ImmutableHashSet`1<CaseKind> distinctCaseKinds, ImmutableHashSet`1<ISymbol> distinctReferencedSymbols, ImmutableHashSet`1<object> distinctReferencedConstants);
    public static ComputationalComplexityMetrics Compute(IOperation operationBlock);
    public ComputationalComplexityMetrics Union(ComputationalComplexityMetrics other);
    public bool get_IsDefault();
    public long get_DistinctOperators();
    public long get_DistinctOperands();
    [CompilerGeneratedAttribute]
public long get_TotalOperators();
    public long get_TotalOperands();
    public long get_Vocabulary();
    public long get_Length();
    public double get_Volume();
    [CompilerGeneratedAttribute]
public long get_ExecutableLines();
    [CompilerGeneratedAttribute]
public long get_EffectiveLinesOfCode();
    [CompilerGeneratedAttribute]
internal static int <Compute>g__getExecutableLinesOfCode|12_0(IOperation operation, Boolean& hasSymbolInitializer);
    [CompilerGeneratedAttribute]
internal static bool <Compute>g__hasAnyExplicitExpression|12_1(IOperation operation);
    [CompilerGeneratedAttribute]
internal static void <Compute>g__countOperator|12_2(IOperation operation, <>c__DisplayClass12_0& );
    [CompilerGeneratedAttribute]
internal static void <Compute>g__countOperand|12_3(ISymbol symbol, <>c__DisplayClass12_0& );
    [CompilerGeneratedAttribute]
internal static void <Compute>g__countBinaryOperator|12_4(IOperation operation, BinaryOperatorKind operatorKind, <>c__DisplayClass12_0& );
    [CompilerGeneratedAttribute]
internal static void <Compute>g__countUnaryOperator|12_5(IOperation operation, UnaryOperatorKind operatorKind, <>c__DisplayClass12_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.CodeMetrics.MetricsHelper : object {
    internal static int GetAverageRoundedMetricValue(int total, int childrenCount);
    private static int RoundMetricValue(double value);
    internal static int NormalizeAndRoundMaintainabilityIndex(double maintIndex);
    internal static void AddCoupledNamedTypes(Builder<INamedTypeSymbol> builder, WellKnownTypeProvider wellKnownTypeProvider, IEnumerable`1<ITypeSymbol> coupledTypes);
    internal static void AddCoupledNamedTypes(Builder<INamedTypeSymbol> builder, WellKnownTypeProvider wellKnownTypeProvider, ITypeSymbol[] coupledTypes);
    internal static void AddCoupledNamedTypes(Builder<INamedTypeSymbol> builder, WellKnownTypeProvider wellKnownTypeProvider, ImmutableArray`1<IParameterSymbol> parameters);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CodeMetrics.MetricsHelper/<GetLinesOfCodeAsync>d__6")]
internal static Task`1<long> GetLinesOfCodeAsync(ImmutableArray`1<SyntaxReference> declarations, ISymbol symbol, CodeMetricsAnalysisContext context);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CodeMetrics.MetricsHelper/<GetTopmostSyntaxNodeForDeclarationAsync>d__7")]
internal static Task`1<SyntaxNode> GetTopmostSyntaxNodeForDeclarationAsync(SyntaxReference declaration, ISymbol declaredSymbol, CodeMetricsAnalysisContext context);
    [AsyncStateMachineAttribute("Microsoft.CodeAnalysis.CodeMetrics.MetricsHelper/<ComputeCoupledTypesAndComplexityExcludingMemberDeclsAsync>d__8")]
internal static Task`1<ValueTuple`2<int, ComputationalComplexityMetrics>> ComputeCoupledTypesAndComplexityExcludingMemberDeclsAsync(ImmutableArray`1<SyntaxReference> declarations, ISymbol symbol, Builder<INamedTypeSymbol> builder, CodeMetricsAnalysisContext context);
    private static void AddCoupledNamedTypesCore(Builder<INamedTypeSymbol> builder, ITypeSymbol typeOpt, WellKnownTypeProvider wellKnownTypeProvider);
    internal static void RemoveContainingTypes(ISymbol symbol, Builder<INamedTypeSymbol> coupledTypesBuilder);
    [ExtensionAttribute]
internal static ImmutableArray`1<IParameterSymbol> GetParameters(ISymbol member);
    [CompilerGeneratedAttribute]
internal static int <GetLinesOfCodeAsync>g__GetNewlineCount|6_0(SyntaxTriviaList trivialList, bool leading);
    [CompilerGeneratedAttribute]
internal static int <GetLinesOfCodeAsync>g__GetNewlineCount|6_1(ImmutableArray`1<string> triviaParts, bool leading);
    [CompilerGeneratedAttribute]
internal static bool <GetLinesOfCodeAsync>g__LoopConditionForLeading|6_2(int index, int length);
    [CompilerGeneratedAttribute]
internal static bool <GetLinesOfCodeAsync>g__LoopConditionForTrailing|6_3(int index, int _);
    [CompilerGeneratedAttribute]
internal static bool <ComputeCoupledTypesAndComplexityExcludingMemberDeclsAsync>g__hasConditionalLogic|8_0(IOperation operation);
    [CompilerGeneratedAttribute]
internal static bool <AddCoupledNamedTypesCore>g__isIgnoreableType|9_0(INamedTypeSymbol namedType, WellKnownTypeProvider wellKnownTypeProvider);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.CodeAnalysis.FxCopAnalyzers.DeprecationAnalyzer : DiagnosticAnalyzer {
    private static string RuleId;
    private static LocalizableString s_localizableTitle;
    private static LocalizableString s_localizableMessageFormat;
    public static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DeprecationAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext context);
}
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.ReportDiagnosticExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToAnalyzerConfigString(ReportDiagnostic reportDiagnostic);
    [ExtensionAttribute]
public static Nullable`1<DiagnosticSeverity> ToDiagnosticSeverity(ReportDiagnostic reportDiagnostic);
    [ExtensionAttribute]
public static bool IsLessSevereThan(ReportDiagnostic current, ReportDiagnostic other);
}
internal enum Microsoft.CodeAnalysis.RuleLevel : Enum {
    public int value__;
    public static RuleLevel BuildWarning;
    public static RuleLevel BuildWarningCandidate;
    public static RuleLevel IdeSuggestion;
    public static RuleLevel IdeHidden_BulkConfigurable;
    public static RuleLevel Disabled;
    public static RuleLevel CandidateForRemoval;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.CodeAnalysis.RulesetToEditorconfig.Converter : object {
    private static string RuleSetNodeName;
    private static string RuleSetNameAttributeName;
    private static string RuleSetDescriptionAttributeName;
    private static string RulesNodeName;
    private static string RuleNodeName;
    private static string RuleIdAttributeName;
    public static void GenerateEditorconfig(string rulesetFilePath, string editorconfigFilePath);
    public static string GetEditorconfig(string rulesetFilePath);
    [CompilerGeneratedAttribute]
internal static XElement <GetEditorconfig>g__GetTopLevelRulesetNode|7_0(string rulesetFilePath);
    [CompilerGeneratedAttribute]
internal static void <GetEditorconfig>g__ProcessComments|7_1(RuleSet ruleset, HashSet`1<string> processedRulesetPaths, Dictionary`2<string, string> ruleIdToComments);
    [CompilerGeneratedAttribute]
internal static void <GetEditorconfig>g__PopulateRuleIdToComments|7_2(string rulesetFilePath, Dictionary`2<string, string> ruleIdToComments);
    [CompilerGeneratedAttribute]
internal static void <GetEditorconfig>g__AppendComment|7_5(XComment comment, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <GetEditorconfig>g__UpdateCurrentRuleIdPostCommentAndResetState|7_6(<>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <GetEditorconfig>g__AppendComment|7_3(StringBuilder builder, string comment);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.CodeAnalysis.WellKnownDiagnosticTagsExtensions : object {
    public static string EnabledRuleInAggressiveMode;
    public static string Dataflow;
    public static string CompilationEnd;
    public static String[] DataflowAndTelemetry;
    public static String[] DataflowAndTelemetryEnabledInAggressiveMode;
    public static String[] Telemetry;
    public static String[] TelemetryEnabledInAggressiveMode;
    public static String[] CompilationEndAndTelemetry;
    private static WellKnownDiagnosticTagsExtensions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.AvoidDuplicateAcceleratorsAnalyzer : DiagnosticAnalyzer {
    internal static string RuleId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext analysisContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.AvoidDuplicateAcceleratorsFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.CallBaseClassMethodsOnISerializableTypesAnalyzer : DiagnosticAnalyzer {
    internal static string RuleId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext analysisContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.CallBaseClassMethodsOnISerializableTypesFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.NetFramework.Analyzers.DoNotCatchCorruptedStateExceptionsAnalyzer : DoNotCatchGeneralUnlessRethrownAnalyzer {
    internal static string RuleId;
    private static string MethodAttributeTypeName;
    private static LocalizableString s_localizableTitle;
    private static LocalizableString s_localizableMessage;
    private static LocalizableString s_localizableDescription;
    internal static DiagnosticDescriptor Rule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotCatchCorruptedStateExceptionsAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    protected virtual Diagnostic CreateDiagnostic(IMethodSymbol containingMethod, SyntaxToken catchKeyword);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.DoNotMarkServicedComponentsWithWebMethodAnalyzer : DiagnosticAnalyzer {
    internal static string RuleId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext analysisContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.DoNotMarkServicedComponentsWithWebMethodFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetFramework.Analyzers.DoNotUseInsecureDtdProcessingAnalyzer : DiagnosticAnalyzer {
    internal static string RuleId;
    internal static DiagnosticDescriptor RuleXmlDocumentWithNoSecureResolver;
    internal static DiagnosticDescriptor RuleXmlTextReaderConstructedWithNoSecureResolution;
    internal static DiagnosticDescriptor RuleDoNotUseDtdProcessingOverloads;
    internal static DiagnosticDescriptor RuleXmlReaderCreateWrongOverload;
    internal static DiagnosticDescriptor RuleXmlReaderCreateInsecureInput;
    internal static DiagnosticDescriptor RuleXmlReaderCreateInsecureConstructed;
    internal static DiagnosticDescriptor RuleXmlTextReaderSetInsecureResolution;
    internal static DiagnosticDescriptor RuleDoNotUseSetInnerXml;
    internal static DiagnosticDescriptor RuleReviewDtdProcessingProperties;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseInsecureDtdProcessingAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    private static void RegisterAnalyzer(OperationBlockStartAnalysisContext context, CompilationSecurityTypes types, Version frameworkVersion);
    public virtual void Initialize(AnalysisContext analysisContext);
    private static bool ReferencesAnyTargetType(CompilationSecurityTypes types);
    private static DiagnosticDescriptor CreateDiagnosticDescriptor(LocalizableResourceString messageFormat);
}
public abstract class Microsoft.NetFramework.Analyzers.DoNotUseInsecureDtdProcessingInApiDesignAnalyzer : DiagnosticAnalyzer {
    internal static string RuleId;
    internal static DiagnosticDescriptor RuleDoNotUseInsecureDtdProcessingInApiDesign;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseInsecureDtdProcessingInApiDesignAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext analysisContext);
    private static bool ReferencesAnyTargetType(CompilationSecurityTypes types);
    protected abstract virtual SymbolAndNodeAnalyzer GetAnalyzer(CompilationStartAnalysisContext context, CompilationSecurityTypes types, Version targetFrameworkVersion);
    [CompilerGeneratedAttribute]
private void <Initialize>b__4_0(CompilationStartAnalysisContext context);
}
public abstract class Microsoft.NetFramework.Analyzers.DoNotUseInsecureXSLTScriptExecutionAnalyzer`1 : DiagnosticAnalyzer {
    internal static string RuleId;
    internal static DiagnosticDescriptor RuleDoNotUseInsecureXSLTScriptExecution;
    public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static DoNotUseInsecureXSLTScriptExecutionAnalyzer`1();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext analysisContext);
    protected abstract virtual SyntaxNodeAnalyzer<TLanguageKindEnum> GetAnalyzer(CodeBlockStartAnalysisContext`1<TLanguageKindEnum> context, CompilationSecurityTypes types);
    [CompilerGeneratedAttribute]
private void <Initialize>b__4_0(CompilationStartAnalysisContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.NetFramework.Analyzers.Helpers.CompilationSecurityTypes : object {
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <HandleProcessCorruptedStateExceptionsAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SystemObject>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SystemException>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SystemSystemException>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XmlDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XPathDocument>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XmlSchema>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DataSet>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XmlSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DataTable>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XmlNode>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DataViewManager>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XmlTextReader>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XmlReader>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DtdProcessing>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XmlReaderSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XslCompiledTransform>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XmlResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XmlSecureResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <XsltSettings>k__BackingField;
    public INamedTypeSymbol HandleProcessCorruptedStateExceptionsAttribute { get; private set; }
    public INamedTypeSymbol SystemObject { get; private set; }
    public INamedTypeSymbol SystemException { get; private set; }
    public INamedTypeSymbol SystemSystemException { get; private set; }
    public INamedTypeSymbol XmlDocument { get; private set; }
    public INamedTypeSymbol XPathDocument { get; private set; }
    public INamedTypeSymbol XmlSchema { get; private set; }
    public INamedTypeSymbol DataSet { get; private set; }
    public INamedTypeSymbol XmlSerializer { get; private set; }
    public INamedTypeSymbol DataTable { get; private set; }
    public INamedTypeSymbol XmlNode { get; private set; }
    public INamedTypeSymbol DataViewManager { get; private set; }
    public INamedTypeSymbol XmlTextReader { get; private set; }
    public INamedTypeSymbol XmlReader { get; private set; }
    public INamedTypeSymbol DtdProcessing { get; private set; }
    public INamedTypeSymbol XmlReaderSettings { get; private set; }
    public INamedTypeSymbol XslCompiledTransform { get; private set; }
    public INamedTypeSymbol XmlResolver { get; private set; }
    public INamedTypeSymbol XmlSecureResolver { get; private set; }
    public INamedTypeSymbol XsltSettings { get; private set; }
    [NullableContextAttribute("1")]
public CompilationSecurityTypes(Compilation compilation);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_HandleProcessCorruptedStateExceptionsAttribute();
    [CompilerGeneratedAttribute]
private void set_HandleProcessCorruptedStateExceptionsAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_SystemObject();
    [CompilerGeneratedAttribute]
private void set_SystemObject(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_SystemException();
    [CompilerGeneratedAttribute]
private void set_SystemException(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_SystemSystemException();
    [CompilerGeneratedAttribute]
private void set_SystemSystemException(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XmlDocument();
    [CompilerGeneratedAttribute]
private void set_XmlDocument(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XPathDocument();
    [CompilerGeneratedAttribute]
private void set_XPathDocument(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XmlSchema();
    [CompilerGeneratedAttribute]
private void set_XmlSchema(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DataSet();
    [CompilerGeneratedAttribute]
private void set_DataSet(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XmlSerializer();
    [CompilerGeneratedAttribute]
private void set_XmlSerializer(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DataTable();
    [CompilerGeneratedAttribute]
private void set_DataTable(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XmlNode();
    [CompilerGeneratedAttribute]
private void set_XmlNode(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DataViewManager();
    [CompilerGeneratedAttribute]
private void set_DataViewManager(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XmlTextReader();
    [CompilerGeneratedAttribute]
private void set_XmlTextReader(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XmlReader();
    [CompilerGeneratedAttribute]
private void set_XmlReader(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DtdProcessing();
    [CompilerGeneratedAttribute]
private void set_DtdProcessing(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XmlReaderSettings();
    [CompilerGeneratedAttribute]
private void set_XmlReaderSettings(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XslCompiledTransform();
    [CompilerGeneratedAttribute]
private void set_XslCompiledTransform(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XmlResolver();
    [CompilerGeneratedAttribute]
private void set_XmlResolver(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XmlSecureResolver();
    [CompilerGeneratedAttribute]
private void set_XmlSecureResolver(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_XsltSettings();
    [CompilerGeneratedAttribute]
private void set_XsltSettings(INamedTypeSymbol value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.NetFramework.Analyzers.Helpers.SecurityDiagnosticHelpers : object {
    public static bool IsXslCompiledTransformLoad(IMethodSymbol method, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlDocumentCtorDerived(IMethodSymbol method, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlDocumentXmlResolverProperty(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlTextReaderCtorDerived(IMethodSymbol method, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlTextReaderXmlResolverPropertyDerived(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlTextReaderDtdProcessingPropertyDerived(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlTextReaderXmlResolverProperty(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlTextReaderDtdProcessingProperty(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlReaderSettingsCtor(IMethodSymbol method, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlReaderSettingsXmlResolverProperty(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlReaderSettingsDtdProcessingProperty(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlReaderSettingsMaxCharactersFromEntitiesProperty(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXsltSettingsCtor(IMethodSymbol method, CompilationSecurityTypes xmlTypes);
    public static bool IsXsltSettingsTrustedXsltProperty(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXsltSettingsDefaultProperty(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXsltSettingsEnableDocumentFunctionProperty(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXsltSettingsEnableScriptProperty(IPropertySymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlResolverType(ITypeSymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlSecureResolverType(ITypeSymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXsltSettingsType(ITypeSymbol symbol, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlReaderSettingsType(ITypeSymbol symbol, CompilationSecurityTypes xmlTypes);
    public static int GetXmlResolverParameterIndex(IMethodSymbol method, CompilationSecurityTypes xmlTypes);
    public static int GetXsltSettingsParameterIndex(IMethodSymbol method, CompilationSecurityTypes xmlTypes);
    public static int GetXmlReaderSettingsParameterIndex(IMethodSymbol method, CompilationSecurityTypes xmlTypes);
    public static bool IsXmlReaderType(ITypeSymbol symbol, CompilationSecurityTypes xmlTypes);
    public static int HasXmlReaderParameter(IMethodSymbol method, CompilationSecurityTypes xmlTypes);
    [NullableContextAttribute("2")]
public static bool IsExpressionEqualsNull(IOperation operation);
    [NullableContextAttribute("2")]
public static bool IsExpressionEqualsDtdProcessingParse(IOperation operation);
    [NullableContextAttribute("2")]
public static bool IsExpressionEqualsIntZero(IOperation operation);
    [NullableContextAttribute("2")]
private static bool IsSpecifiedProperty(IPropertySymbol symbol, INamedTypeSymbol namedType, string propertyName);
    [NullableContextAttribute("2")]
private static bool IsSpecifiedPropertyDerived(IPropertySymbol symbol, INamedTypeSymbol namedType, string propertyName);
    private static int GetSpecifiedParameterIndex(IMethodSymbol method, CompilationSecurityTypes xmlTypes, Func`3<ITypeSymbol, CompilationSecurityTypes, bool> func);
    public static Nullable`1<bool> IsTypeDeclaredInExpectedAssembly(Compilation compilation, string typeName, string assemblyName);
    public static string GetNonEmptyParentName(SyntaxNode current, SemanticModel model, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public static Version GetDotNetFrameworkVersion(Compilation compilation);
    public static LocalizableResourceString GetLocalizableResourceString(string resourceName);
    public static LocalizableResourceString GetLocalizableResourceString(string resourceName, String[] formatArguments);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.Helpers.SyntaxNodeHelper : object {
    public abstract virtual IMethodSymbol GetCallerMethodSymbol(SyntaxNode node, SemanticModel semanticModel);
    public abstract virtual ITypeSymbol GetEnclosingTypeSymbol(SyntaxNode node, SemanticModel semanticModel);
    public abstract virtual ITypeSymbol GetClassDeclarationTypeSymbol(SyntaxNode node, SemanticModel semanticModel);
    public abstract virtual SyntaxNode GetAssignmentLeftNode(SyntaxNode node);
    public abstract virtual SyntaxNode GetAssignmentRightNode(SyntaxNode node);
    public abstract virtual SyntaxNode GetMemberAccessExpressionNode(SyntaxNode node);
    public abstract virtual SyntaxNode GetMemberAccessNameNode(SyntaxNode node);
    public abstract virtual SyntaxNode GetCallTargetNode(SyntaxNode node);
    public abstract virtual SyntaxNode GetInvocationExpressionNode(SyntaxNode node);
    public abstract virtual SyntaxNode GetDefaultValueForAnOptionalParameter(SyntaxNode declNode, int paramIndex);
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<SyntaxNode> GetObjectInitializerExpressionNodes(SyntaxNode node);
    [NullableContextAttribute("1")]
public abstract virtual bool IsMethodInvocationNode(SyntaxNode node);
    [NullableContextAttribute("1")]
protected abstract virtual IEnumerable`1<SyntaxNode> GetCallArgumentExpressionNodes(SyntaxNode node, CallKinds callKind);
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<SyntaxNode> GetDescendantAssignmentExpressionNodes(SyntaxNode node);
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<SyntaxNode> GetDescendantMemberAccessExpressionNodes(SyntaxNode node);
    public abstract virtual bool IsObjectCreationExpressionUnderFieldDeclaration(SyntaxNode node);
    public abstract virtual SyntaxNode GetVariableDeclaratorOfAFieldDeclarationNode(SyntaxNode objectCreationExpression);
    public ISymbol GetEnclosingConstructSymbol(SyntaxNode node, SemanticModel semanticModel);
    [NullableContextAttribute("1")]
public IEnumerable`1<SyntaxNode> GetCallArgumentExpressionNodes(SyntaxNode node);
    [NullableContextAttribute("1")]
public IEnumerable`1<SyntaxNode> GetInvocationArgumentExpressionNodes(SyntaxNode node);
    [NullableContextAttribute("1")]
public IEnumerable`1<SyntaxNode> GetObjectCreationArgumentExpressionNodes(SyntaxNode node);
    public abstract virtual IMethodSymbol GetCalleeMethodSymbol(SyntaxNode node, SemanticModel semanticModel);
    [NullableContextAttribute("1")]
[IteratorStateMachineAttribute("Microsoft.NetFramework.Analyzers.Helpers.SyntaxNodeHelper/<GetCandidateCalleeMethodSymbols>d__23")]
public static IEnumerable`1<IMethodSymbol> GetCandidateCalleeMethodSymbols(SyntaxNode node, SemanticModel semanticModel);
    [NullableContextAttribute("1")]
public IEnumerable`1<IMethodSymbol> GetCalleeMethodSymbols(SyntaxNode node, SemanticModel semanticModel);
    public static IPropertySymbol GetCalleePropertySymbol(SyntaxNode node, SemanticModel semanticModel);
    public static IFieldSymbol GetCalleeFieldSymbol(SyntaxNode node, SemanticModel semanticModel);
    public static ISymbol GetSymbol(SyntaxNode node, SemanticModel semanticModel);
    public static ISymbol GetDeclaredSymbol(SyntaxNode node, SemanticModel semanticModel);
    public static ISymbol GetReferencedSymbol(SyntaxNode node, SemanticModel semanticModel);
    [NullableContextAttribute("1")]
public static IEnumerable`1<ISymbol> GetCandidateReferencedSymbols(SyntaxNode node, SemanticModel semanticModel);
    public static bool NodeHasConstantValueNull(SyntaxNode node, SemanticModel model);
    public static bool NodeHasConstantValueIntZero(SyntaxNode node, SemanticModel model);
    public static bool NodeHasConstantValueBoolFalse(SyntaxNode node, SemanticModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetFramework.Analyzers.MarkVerbHandlersWithValidateAntiforgeryTokenAnalyzer : DiagnosticAnalyzer {
    internal static string RuleId;
    private static LocalizableString Title;
    private static LocalizableString NoVerbsMessage;
    private static LocalizableString NoVerbsNoTokenMessage;
    private static LocalizableString GetAndTokenMessage;
    private static LocalizableString GetAndOtherAndTokenMessage;
    private static LocalizableString VerbsAndNoTokenMessage;
    internal static DiagnosticDescriptor NoVerbsRule;
    internal static DiagnosticDescriptor NoVerbsNoTokenRule;
    internal static DiagnosticDescriptor GetAndTokenRule;
    internal static DiagnosticDescriptor GetAndOtherAndTokenRule;
    internal static DiagnosticDescriptor VerbsAndNoTokenRule;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static MarkVerbHandlersWithValidateAntiforgeryTokenAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext analysisContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.MarkWindowsFormsEntryPointsWithStaThreadAnalyzer : DiagnosticAnalyzer {
    internal static string RuleId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext analysisContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.MarkWindowsFormsEntryPointsWithStaThreadFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
internal static class Microsoft.NetFramework.Analyzers.MicrosoftNetFrameworkAnalyzersResources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string SpecifyMessageBoxOptionsTitle { get; }
    internal static string SpecifyMessageBoxOptionsDescription { get; }
    internal static string SpecifyMessageBoxOptionsMessage { get; }
    internal static string AvoidDuplicateAcceleratorsTitle { get; }
    internal static string AvoidDuplicateAcceleratorsDescription { get; }
    internal static string AvoidDuplicateAcceleratorsMessage { get; }
    internal static string SetLocaleForDataTypesTitle { get; }
    internal static string SetLocaleForDataTypesDescription { get; }
    internal static string SetLocaleForDataTypesMessage { get; }
    internal static string DoNotMarkServicedComponentsWithWebMethodTitle { get; }
    internal static string DoNotMarkServicedComponentsWithWebMethodDescription { get; }
    internal static string DoNotMarkServicedComponentsWithWebMethodMessage { get; }
    internal static string MarkWindowsFormsEntryPointsWithStaThreadTitle { get; }
    internal static string MarkWindowsFormsEntryPointsWithStaThreadDescription { get; }
    internal static string MarkWindowsFormsEntryPointsWithStaThreadMessage { get; }
    internal static string CallBaseClassMethodsOnISerializableTypesTitle { get; }
    internal static string CallBaseClassMethodsOnISerializableTypesDescription { get; }
    internal static string CallBaseClassMethodsOnISerializableTypesMessage { get; }
    internal static string UseXmlReaderForDataSetReadXmlTitle { get; }
    internal static string UseXmlReaderForDataSetReadXmlDescription { get; }
    internal static string UseXmlReaderForDataSetReadXmlMessage { get; }
    internal static string UseXmlReaderForDataSetReadXmlSchemaTitle { get; }
    internal static string UseXmlReaderForDataSetReadXmlSchemaDescription { get; }
    internal static string UseXmlReaderForDataSetReadXmlSchemaMessage { get; }
    internal static string ReviewDataViewCollectionStringTitle { get; }
    internal static string ReviewDataViewCollectionStringDescription { get; }
    internal static string ReviewDataViewCollectionStringMessage { get; }
    internal static string UseXmlReaderForDataTableReadXmlTitle { get; }
    internal static string UseXmlReaderForDataTableReadXmlDescription { get; }
    internal static string UseXmlReaderForDataTableReadXmlMessage { get; }
    internal static string UseXmlReaderForDataTableReadXmlSchemaTitle { get; }
    internal static string UseXmlReaderForDataTableReadXmlSchemaDescription { get; }
    internal static string UseXmlReaderForDataTableReadXmlSchemaMessage { get; }
    internal static string DoNotCatchCorruptedStateExceptions { get; }
    internal static string DoNotCatchCorruptedStateExceptionsDescription { get; }
    internal static string DoNotCatchCorruptedStateExceptionsMessage { get; }
    internal static string TypesShouldNotExtendCertainBaseTypesTitle { get; }
    internal static string TypesShouldNotExtendCertainBaseTypesDescription { get; }
    internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemXmlXmlDocument { get; }
    internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemApplicationException { get; }
    internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsCollectionBase { get; }
    internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsDictionaryBase { get; }
    internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsQueue { get; }
    internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsReadOnlyCollectionBase { get; }
    internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsSortedList { get; }
    internal static string TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsStack { get; }
    internal static string DoNotUseInsecureDtdProcessingDescription { get; }
    internal static string DoNotUseDtdProcessingOverloadsMessage { get; }
    internal static string DoNotUseDtdProcessingOverloads { get; }
    internal static string DoNotUseSetInnerXmlMessage { get; }
    internal static string InsecureXmlDtdProcessing { get; }
    internal static string ReviewDtdProcessingPropertiesMessage { get; }
    internal static string XmlDocumentWithNoSecureResolverMessage { get; }
    internal static string XmlReaderCreateInsecureConstructedMessage { get; }
    internal static string XmlReaderCreateInsecureInputMessage { get; }
    internal static string XmlReaderCreateWrongOverloadMessage { get; }
    internal static string XmlTextReaderConstructedWithNoSecureResolutionMessage { get; }
    internal static string XmlTextReaderSetInsecureResolutionMessage { get; }
    internal static string DoNotUseInsecureDtdProcessingGenericMessage { get; }
    internal static string InsecureDtdProcessingInApiDesign { get; }
    internal static string DoNotUseInsecureDtdProcessingInApiDesignDescription { get; }
    internal static string XmlDocumentDerivedClassConstructorNoSecureXmlResolverMessage { get; }
    internal static string XmlDocumentDerivedClassNoConstructorMessage { get; }
    internal static string XmlDocumentDerivedClassSetInsecureXmlResolverInMethodMessage { get; }
    internal static string XmlTextReaderDerivedClassConstructorNoSecureSettingsMessage { get; }
    internal static string XmlTextReaderDerivedClassNoConstructorMessage { get; }
    internal static string XmlTextReaderDerivedClassSetInsecureSettingsInMethodMessage { get; }
    internal static string InsecureXsltScriptProcessingMessage { get; }
    internal static string DoNotUseInsecureXSLTScriptExecutionDescription { get; }
    internal static string XslCompiledTransformLoadInsecureConstructedMessage { get; }
    internal static string XslCompiledTransformLoadInsecureInputMessage { get; }
    internal static string MarkVerbHandlersWithValidateAntiforgeryTokenGetAndOtherAndTokenMessage { get; }
    internal static string MarkVerbHandlersWithValidateAntiforgeryTokenGetAndTokenMessage { get; }
    internal static string MarkVerbHandlersWithValidateAntiforgeryTokenNoVerbsMessage { get; }
    internal static string MarkVerbHandlersWithValidateAntiforgeryTokenNoVerbsNoTokenMessage { get; }
    internal static string MarkVerbHandlersWithValidateAntiforgeryTokenTitle { get; }
    internal static string MarkVerbHandlersWithValidateAntiforgeryTokenVerbsAndNoTokenMessage { get; }
    internal static string AnalyzerPackageDeprecationMessage { get; }
    internal static string AnalyzerPackageDeprecationTitle { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_SpecifyMessageBoxOptionsTitle();
    internal static string get_SpecifyMessageBoxOptionsDescription();
    internal static string get_SpecifyMessageBoxOptionsMessage();
    internal static string get_AvoidDuplicateAcceleratorsTitle();
    internal static string get_AvoidDuplicateAcceleratorsDescription();
    internal static string get_AvoidDuplicateAcceleratorsMessage();
    internal static string get_SetLocaleForDataTypesTitle();
    internal static string get_SetLocaleForDataTypesDescription();
    internal static string get_SetLocaleForDataTypesMessage();
    internal static string get_DoNotMarkServicedComponentsWithWebMethodTitle();
    internal static string get_DoNotMarkServicedComponentsWithWebMethodDescription();
    internal static string get_DoNotMarkServicedComponentsWithWebMethodMessage();
    internal static string get_MarkWindowsFormsEntryPointsWithStaThreadTitle();
    internal static string get_MarkWindowsFormsEntryPointsWithStaThreadDescription();
    internal static string get_MarkWindowsFormsEntryPointsWithStaThreadMessage();
    internal static string get_CallBaseClassMethodsOnISerializableTypesTitle();
    internal static string get_CallBaseClassMethodsOnISerializableTypesDescription();
    internal static string get_CallBaseClassMethodsOnISerializableTypesMessage();
    internal static string get_UseXmlReaderForDataSetReadXmlTitle();
    internal static string get_UseXmlReaderForDataSetReadXmlDescription();
    internal static string get_UseXmlReaderForDataSetReadXmlMessage();
    internal static string get_UseXmlReaderForDataSetReadXmlSchemaTitle();
    internal static string get_UseXmlReaderForDataSetReadXmlSchemaDescription();
    internal static string get_UseXmlReaderForDataSetReadXmlSchemaMessage();
    internal static string get_ReviewDataViewCollectionStringTitle();
    internal static string get_ReviewDataViewCollectionStringDescription();
    internal static string get_ReviewDataViewCollectionStringMessage();
    internal static string get_UseXmlReaderForDataTableReadXmlTitle();
    internal static string get_UseXmlReaderForDataTableReadXmlDescription();
    internal static string get_UseXmlReaderForDataTableReadXmlMessage();
    internal static string get_UseXmlReaderForDataTableReadXmlSchemaTitle();
    internal static string get_UseXmlReaderForDataTableReadXmlSchemaDescription();
    internal static string get_UseXmlReaderForDataTableReadXmlSchemaMessage();
    internal static string get_DoNotCatchCorruptedStateExceptions();
    internal static string get_DoNotCatchCorruptedStateExceptionsDescription();
    internal static string get_DoNotCatchCorruptedStateExceptionsMessage();
    internal static string get_TypesShouldNotExtendCertainBaseTypesTitle();
    internal static string get_TypesShouldNotExtendCertainBaseTypesDescription();
    internal static string get_TypesShouldNotExtendCertainBaseTypesMessageSystemXmlXmlDocument();
    internal static string get_TypesShouldNotExtendCertainBaseTypesMessageSystemApplicationException();
    internal static string get_TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsCollectionBase();
    internal static string get_TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsDictionaryBase();
    internal static string get_TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsQueue();
    internal static string get_TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsReadOnlyCollectionBase();
    internal static string get_TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsSortedList();
    internal static string get_TypesShouldNotExtendCertainBaseTypesMessageSystemCollectionsStack();
    internal static string get_DoNotUseInsecureDtdProcessingDescription();
    internal static string get_DoNotUseDtdProcessingOverloadsMessage();
    internal static string get_DoNotUseDtdProcessingOverloads();
    internal static string get_DoNotUseSetInnerXmlMessage();
    internal static string get_InsecureXmlDtdProcessing();
    internal static string get_ReviewDtdProcessingPropertiesMessage();
    internal static string get_XmlDocumentWithNoSecureResolverMessage();
    internal static string get_XmlReaderCreateInsecureConstructedMessage();
    internal static string get_XmlReaderCreateInsecureInputMessage();
    internal static string get_XmlReaderCreateWrongOverloadMessage();
    internal static string get_XmlTextReaderConstructedWithNoSecureResolutionMessage();
    internal static string get_XmlTextReaderSetInsecureResolutionMessage();
    internal static string get_DoNotUseInsecureDtdProcessingGenericMessage();
    internal static string get_InsecureDtdProcessingInApiDesign();
    internal static string get_DoNotUseInsecureDtdProcessingInApiDesignDescription();
    internal static string get_XmlDocumentDerivedClassConstructorNoSecureXmlResolverMessage();
    internal static string get_XmlDocumentDerivedClassNoConstructorMessage();
    internal static string get_XmlDocumentDerivedClassSetInsecureXmlResolverInMethodMessage();
    internal static string get_XmlTextReaderDerivedClassConstructorNoSecureSettingsMessage();
    internal static string get_XmlTextReaderDerivedClassNoConstructorMessage();
    internal static string get_XmlTextReaderDerivedClassSetInsecureSettingsInMethodMessage();
    internal static string get_InsecureXsltScriptProcessingMessage();
    internal static string get_DoNotUseInsecureXSLTScriptExecutionDescription();
    internal static string get_XslCompiledTransformLoadInsecureConstructedMessage();
    internal static string get_XslCompiledTransformLoadInsecureInputMessage();
    internal static string get_MarkVerbHandlersWithValidateAntiforgeryTokenGetAndOtherAndTokenMessage();
    internal static string get_MarkVerbHandlersWithValidateAntiforgeryTokenGetAndTokenMessage();
    internal static string get_MarkVerbHandlersWithValidateAntiforgeryTokenNoVerbsMessage();
    internal static string get_MarkVerbHandlersWithValidateAntiforgeryTokenNoVerbsNoTokenMessage();
    internal static string get_MarkVerbHandlersWithValidateAntiforgeryTokenTitle();
    internal static string get_MarkVerbHandlersWithValidateAntiforgeryTokenVerbsAndNoTokenMessage();
    internal static string get_AnalyzerPackageDeprecationMessage();
    internal static string get_AnalyzerPackageDeprecationTitle();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.NetFramework.Analyzers.SecurityMemberNames : object {
    public static string Create;
    public static string Load;
    public static string LoadXml;
    public static string Read;
    public static string ReadXml;
    public static string ReadXmlSchema;
    public static string Deserialize;
    public static string InnerXml;
    public static string DataViewSettingCollectionString;
    public static string DtdProcessing;
    public static string Parse;
    public static string XmlResolver;
    public static string TrustedXslt;
    public static string Default;
    public static string EnableDocumentFunction;
    public static string EnableScript;
    public static string MaxCharactersFromEntities;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.SetLocaleForDataTypesAnalyzer : DiagnosticAnalyzer {
    internal static string RuleId;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext analysisContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.SetLocaleForDataTypesFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
public abstract class Microsoft.NetFramework.Analyzers.SpecifyMessageBoxOptionsAnalyzer : DiagnosticAnalyzer {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    [NullableContextAttribute("1")]
public virtual void Initialize(AnalysisContext analysisContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.SpecifyMessageBoxOptionsFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DiagnosticAnalyzerAttribute("C#", "Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.NetFramework.Analyzers.TypesShouldNotExtendCertainBaseTypesAnalyzer : DiagnosticAnalyzer {
    internal static string RuleId;
    private static LocalizableString s_localizableTitle;
    private static LocalizableString s_localizableDescription;
    internal static DiagnosticDescriptor Rule;
    private static ImmutableDictionary`2<string, string> s_badBaseTypesToMessage;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<DiagnosticDescriptor> SupportedDiagnostics { get; }
    private static TypesShouldNotExtendCertainBaseTypesAnalyzer();
    public virtual ImmutableArray`1<DiagnosticDescriptor> get_SupportedDiagnostics();
    public virtual void Initialize(AnalysisContext analysisContext);
    private static void AnalyzeCompilationStart(CompilationStartAnalysisContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.NetFramework.Analyzers.TypesShouldNotExtendCertainBaseTypesFixer : CodeFixProvider {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> FixableDiagnosticIds { get; }
    public sealed virtual ImmutableArray`1<string> get_FixableDiagnosticIds();
    public sealed virtual FixAllProvider GetFixAllProvider();
    public sealed virtual Task RegisterCodeFixesAsync(CodeFixContext context);
}
[ExtensionAttribute]
internal static class System.Collections.Generic.ISetExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddRange(ISet`1<T> set, IEnumerable`1<T> values);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Collections.Immutable.ImmutableArrayExtensions : object {
    [ExtensionAttribute]
public static int Count(ImmutableArray`1<TSource> source);
    [ExtensionAttribute]
public static bool HasExactly(ImmutableArray`1<TSource> source, int count);
    [ExtensionAttribute]
public static bool HasMoreThan(ImmutableArray`1<TSource> source, int count);
    [ExtensionAttribute]
public static bool HasFewerThan(ImmutableArray`1<TSource> source, int count);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Collections.Immutable.ImmutableHashSetExtensions : object {
    [ExtensionAttribute]
public static ImmutableHashSet`1<T> AddRange(ImmutableHashSet`1<T> set1, ImmutableHashSet`1<T> set2);
    [ExtensionAttribute]
public static ImmutableHashSet`1<T> IntersectSet(ImmutableHashSet`1<T> set1, ImmutableHashSet`1<T> set2);
    [ExtensionAttribute]
public static bool IsSubsetOfSet(ImmutableHashSet`1<T> set1, ImmutableHashSet`1<T> set2);
    [ExtensionAttribute]
public static void AddIfNotNull(Builder<T> builder, T item);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[IsReadOnlyAttribute]
internal class System.Index : ValueType {
    private int _value;
    public static Index Start { get; }
    public static Index End { get; }
    public int Value { get; }
    public bool IsFromEnd { get; }
    public Index(int value, bool fromEnd);
    private Index(int value);
    public static Index get_Start();
    public static Index get_End();
    public static Index FromStart(int value);
    public static Index FromEnd(int value);
    public int get_Value();
    public bool get_IsFromEnd();
    public int GetOffset(int length);
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Index other);
    public virtual int GetHashCode();
    public static Index op_Implicit(int value);
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[IsReadOnlyAttribute]
internal class System.Range : ValueType {
    [CompilerGeneratedAttribute]
private Index <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Index <End>k__BackingField;
    public Index Start { get; }
    public Index End { get; }
    public static Range All { get; }
    public Range(Index start, Index end);
    [CompilerGeneratedAttribute]
public Index get_Start();
    [CompilerGeneratedAttribute]
public Index get_End();
    [NullableContextAttribute("2")]
public virtual bool Equals(object value);
    public sealed virtual bool Equals(Range other);
    public virtual int GetHashCode();
    [NullableContextAttribute("1")]
public virtual string ToString();
    public static Range StartAt(Index start);
    public static Range EndAt(Index end);
    public static Range get_All();
    public ValueTuple`2<int, int> GetOffsetAndLength(int length);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.StringCompatExtensions : object {
    [ExtensionAttribute]
public static bool Contains(string str, string value, StringComparison comparisonType);
    [ExtensionAttribute]
public static string Replace(string str, string oldValue, string newValue, StringComparison comparisonType);
}
