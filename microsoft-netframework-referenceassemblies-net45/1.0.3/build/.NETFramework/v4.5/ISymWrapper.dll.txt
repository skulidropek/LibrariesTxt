[NativeCppClassAttribute]
internal static class System.Diagnostics.SymbolStore.Private.ISymUnmanagedDocument : ValueType {
}
[NativeCppClassAttribute]
internal static class System.Diagnostics.SymbolStore.Private.ISymUnmanagedDocumentWriter : ValueType {
}
[NativeCppClassAttribute]
internal static class System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod : ValueType {
}
[NativeCppClassAttribute]
internal static class System.Diagnostics.SymbolStore.Private.ISymUnmanagedReader : ValueType {
}
[NativeCppClassAttribute]
internal static class System.Diagnostics.SymbolStore.Private.ISymUnmanagedScope : ValueType {
}
[NativeCppClassAttribute]
internal static class System.Diagnostics.SymbolStore.Private.ISymUnmanagedVariable : ValueType {
}
[NativeCppClassAttribute]
internal static class System.Diagnostics.SymbolStore.Private.ISymUnmanagedWriter : ValueType {
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymBinder : SymBinderBase {
    public virtual ISymbolReader GetReader(IntPtr importer, string filename, string searchPath);
    [ObsoleteAttribute("The recommended alternative is SymBinder.GetReader(IntPtr, String). ISymbolBinder1.GetReader takes the importer interface pointer as an IntPtr instead of an Int32, and thus works on both 32-bit and 64-bit architectures. http://go.microsoft.com/fwlink/?linkid=14202")]
public virtual ISymbolReader GetReader(int importer, string filename, string searchPath);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymBinderBase : object {
    public void {dtor}();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymDocument : SymDocumentBase {
    public int SourceLength { get; }
    public bool HasEmbeddedSource { get; }
    public Guid CheckSumAlgorithmId { get; }
    public Guid LanguageVendor { get; }
    public Guid Language { get; }
    public Guid DocumentType { get; }
    public string URL { get; }
    public SymDocument(ISymUnmanagedDocument* pDocument);
    public ISymUnmanagedDocument* GetUnmanaged();
    public virtual string get_URL();
    public virtual Guid get_DocumentType();
    public virtual Guid get_Language();
    public virtual Guid get_LanguageVendor();
    public virtual Guid get_CheckSumAlgorithmId();
    public virtual Byte[] GetCheckSum();
    public virtual int FindClosestLine(int line);
    public virtual bool get_HasEmbeddedSource();
    public virtual int get_SourceLength();
    public virtual Byte[] GetSourceRange(int startLine, int startColumn, int endLine, int endColumn);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymDocumentBase : object {
    public void {dtor}();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymDocumentWriter : SymDocumentWriterBase {
    public SymDocumentWriter(ISymUnmanagedDocumentWriter* pDocumentWriter);
    public ISymUnmanagedDocumentWriter* GetUnmanaged();
    public virtual void SetSource(Byte[] source);
    public virtual void SetCheckSum(Guid algorithmId, Byte[] source);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymDocumentWriterBase : object {
    public void {dtor}();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymMethod : SymMethodBase {
    public ISymbolScope RootScope { get; }
    public int SequencePointCount { get; }
    public SymbolToken Token { get; }
    public SymMethod(ISymUnmanagedMethod* pMethod);
    public virtual SymbolToken get_Token();
    public virtual int get_SequencePointCount();
    public virtual void GetSequencePoints(Int32[] offsets, ISymbolDocument[] documents, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns);
    public virtual ISymbolScope RootScopeInternal();
    public virtual ISymbolScope get_RootScope();
    public virtual ISymbolScope GetScope(int offset);
    public virtual int GetOffset(ISymbolDocument document, int line, int column);
    public virtual Int32[] GetRanges(ISymbolDocument document, int line, int column);
    public virtual ISymbolVariable[] GetParameters();
    public virtual ISymbolNamespace GetNamespace();
    public virtual bool GetSourceStartEnd(ISymbolDocument[] docs, Int32[] lines, Int32[] columns);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymMethodBase : object {
    public void {dtor}();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymReader : SymReaderBase {
    public SymbolToken UserEntryPoint { get; }
    public SymReader(ISymUnmanagedReader* pReader);
    public virtual ISymbolDocument GetDocument(string url, Guid language, Guid languageVendor, Guid documentType);
    public virtual ISymbolDocument[] GetDocuments();
    public virtual SymbolToken get_UserEntryPoint();
    public virtual ISymbolMethod GetMethod(SymbolToken method, int version);
    public virtual ISymbolMethod GetMethod(SymbolToken method);
    public virtual ISymbolVariable[] GetVariables(SymbolToken parent);
    public virtual ISymbolVariable[] GetGlobalVariables();
    public virtual ISymbolMethod GetMethodFromDocumentPosition(ISymbolDocument document, int line, int column);
    public virtual Byte[] GetSymAttribute(SymbolToken parent, string name);
    public virtual ISymbolNamespace[] GetNamespaces();
    public virtual void UpdateSymbolStore(string fileName, IntPtr stream);
    public virtual void ReplaceSymbolStore(string fileName, IntPtr stream);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymReaderBase : object {
    public void {dtor}();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymScope : SymScopeBase {
    public int EndOffset { get; }
    public int StartOffset { get; }
    public ISymbolScope Parent { get; }
    public ISymbolMethod Method { get; }
    public SymScope(ISymUnmanagedScope* pScope);
    public virtual ISymbolMethod get_Method();
    public virtual ISymbolScope get_Parent();
    public virtual ISymbolScope[] GetChildren();
    public virtual int get_StartOffset();
    public virtual int get_EndOffset();
    public virtual ISymbolVariable[] GetLocals();
    public virtual ISymbolNamespace[] GetNamespaces();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymScopeBase : object {
    public void {dtor}();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymVariable : SymVariableBase {
    public int EndOffset { get; }
    public int StartOffset { get; }
    public int AddressField3 { get; }
    public int AddressField2 { get; }
    public int AddressField1 { get; }
    public SymAddressKind AddressKind { get; }
    public object Attributes { get; }
    public string Name { get; }
    public SymVariable(ISymUnmanagedVariable* pVariable);
    public virtual string get_Name();
    public virtual object get_Attributes();
    public virtual Byte[] GetSignature();
    public virtual SymAddressKind get_AddressKind();
    public virtual int get_AddressField1();
    public virtual int get_AddressField2();
    public virtual int get_AddressField3();
    public virtual int get_StartOffset();
    public virtual int get_EndOffset();
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymVariableBase : object {
    public void {dtor}();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymWriter : SymWriterBase {
    public SymWriter(bool noUnderlyingWriter);
    public void InitWriter(bool noUnderlyingWriter);
    public ISymUnmanagedWriter* GetWriter();
    public virtual ISymbolDocumentWriter DefineDocument(string url, Guid language, Guid languageVendor, Guid documentType);
    public virtual void SetUserEntryPoint(SymbolToken entryMethod);
    public virtual void OpenMethod(SymbolToken method);
    public virtual void CloseMethod();
    public virtual int OpenScope(int startOffset);
    public virtual void CloseScope(int endOffset);
    public virtual void SetScopeRange(int scopeID, int startOffset, int endOffset);
    public virtual void DefineLocalVariable(string name, FieldAttributes attributes, Byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);
    public virtual void DefineParameter(string name, ParameterAttributes attributes, int sequence, SymAddressKind addrKind, int addr1, int addr2, int addr3);
    public virtual void DefineField(SymbolToken parent, string name, FieldAttributes attributes, Byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3);
    public virtual void DefineGlobalVariable(string name, FieldAttributes attributes, Byte[] signature, SymAddressKind addrKind, int addr1, int addr2, int addr3);
    public virtual void Close();
    public virtual void SetSymAttribute(SymbolToken parent, string name, Byte[] data);
    public virtual void OpenNamespace(string name);
    public virtual void CloseNamespace();
    public virtual void UsingNamespace(string fullName);
    public virtual void SetMethodSourceRange(ISymbolDocumentWriter startDoc, int startLine, int startColumn, ISymbolDocumentWriter endDoc, int endLine, int endColumn);
    public virtual void Initialize(IntPtr emitter, string filename, bool fFullBuild);
    public virtual void DefineSequencePoints(ISymbolDocumentWriter document, Int32[] offsets, Int32[] lines, Int32[] columns, Int32[] endLines, Int32[] endColumns);
    public virtual void SetUnderlyingWriter(IntPtr underlyingWriter);
    [HandleProcessCorruptedStateExceptionsAttribute]
protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
    protected virtual void Finalize();
}
[ComVisibleAttribute("True")]
public class System.Diagnostics.SymbolStore.SymWriterBase : object {
    public void {dtor}();
}
