public class Microsoft.VisualBasic.ApplicationServices.ApplicationBase : object {
    public Log Log { get; }
    public AssemblyInfo Info { get; }
    public CultureInfo Culture { get; }
    public CultureInfo UICulture { get; }
    public string GetEnvironmentVariable(string name);
    public Log get_Log();
    public AssemblyInfo get_Info();
    public CultureInfo get_Culture();
    public CultureInfo get_UICulture();
    public void ChangeCulture(string cultureName);
    public void ChangeUICulture(string cultureName);
}
public class Microsoft.VisualBasic.ApplicationServices.AssemblyInfo : object {
    public string Description { get; }
    public string CompanyName { get; }
    public string Title { get; }
    public string Copyright { get; }
    public string Trademark { get; }
    public string ProductName { get; }
    public Version Version { get; }
    public string AssemblyName { get; }
    public string DirectoryPath { get; }
    public ReadOnlyCollection`1<Assembly> LoadedAssemblies { get; }
    public string StackTrace { get; }
    public long WorkingSet { get; }
    public AssemblyInfo(Assembly currentAssembly);
    public string get_Description();
    public string get_CompanyName();
    public string get_Title();
    public string get_Copyright();
    public string get_Trademark();
    public string get_ProductName();
    public Version get_Version();
    public string get_AssemblyName();
    public string get_DirectoryPath();
    public ReadOnlyCollection`1<Assembly> get_LoadedAssemblies();
    public string get_StackTrace();
    public long get_WorkingSet();
}
public enum Microsoft.VisualBasic.ApplicationServices.AuthenticationMode : Enum {
    public int value__;
    public static AuthenticationMode Windows;
    public static AuthenticationMode ApplicationDefined;
}
[TypeConverterAttribute("Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter")]
public enum Microsoft.VisualBasic.ApplicationServices.BuiltInRole : Enum {
    public int value__;
    public static BuiltInRole AccountOperator;
    public static BuiltInRole Administrator;
    public static BuiltInRole BackupOperator;
    public static BuiltInRole Guest;
    public static BuiltInRole PowerUser;
    public static BuiltInRole PrintOperator;
    public static BuiltInRole Replicator;
    public static BuiltInRole SystemOperator;
    public static BuiltInRole User;
}
public class Microsoft.VisualBasic.ApplicationServices.BuiltInRoleConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.ApplicationServices.CantStartSingleInstanceException : Exception {
    public CantStartSingleInstanceException(string message);
    public CantStartSingleInstanceException(string message, Exception inner);
    [EditorBrowsableAttribute("2")]
protected CantStartSingleInstanceException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase : ApplicationBase {
    public ReadOnlyCollection`1<string> CommandLineArgs { get; }
    public ApplicationDeployment Deployment { get; }
    public bool IsNetworkDeployed { get; }
    [EditorBrowsableAttribute("2")]
unknown ReadOnlyCollection`1<string> InternalCommandLine {protected set; }
    public ReadOnlyCollection`1<string> get_CommandLineArgs();
    public ApplicationDeployment get_Deployment();
    public bool get_IsNetworkDeployed();
    protected void set_InternalCommandLine(ReadOnlyCollection`1<string> value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.ApplicationServices.NoStartupFormException : Exception {
    public NoStartupFormException(string message);
    public NoStartupFormException(string message, Exception inner);
    [EditorBrowsableAttribute("2")]
protected NoStartupFormException(SerializationInfo info, StreamingContext context);
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler : MulticastDelegate {
    public ShutdownEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(object sender, EventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke(object sender, EventArgs e);
}
public enum Microsoft.VisualBasic.ApplicationServices.ShutdownMode : Enum {
    public int value__;
    public static ShutdownMode AfterMainFormCloses;
    public static ShutdownMode AfterAllFormsClose;
}
[ComVisibleAttribute("False")]
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs : CancelEventArgs {
    public ReadOnlyCollection`1<string> CommandLine { get; }
    public StartupEventArgs(ReadOnlyCollection`1<string> args);
    public ReadOnlyCollection`1<string> get_CommandLine();
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.StartupEventHandler : MulticastDelegate {
    public StartupEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(object sender, StartupEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke(object sender, StartupEventArgs e);
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs : EventArgs {
    public bool BringToForeground { get; public set; }
    public ReadOnlyCollection`1<string> CommandLine { get; }
    public StartupNextInstanceEventArgs(ReadOnlyCollection`1<string> args, bool bringToForegroundFlag);
    public bool get_BringToForeground();
    public void set_BringToForeground(bool value);
    public ReadOnlyCollection`1<string> get_CommandLine();
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler : MulticastDelegate {
    public StartupNextInstanceEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(object sender, StartupNextInstanceEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke(object sender, StartupNextInstanceEventArgs e);
}
[ComVisibleAttribute("False")]
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs : ThreadExceptionEventArgs {
    public bool ExitApplication { get; public set; }
    public UnhandledExceptionEventArgs(bool exitApplication, Exception exception);
    public bool get_ExitApplication();
    public void set_ExitApplication(bool value);
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler : MulticastDelegate {
    public UnhandledExceptionEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(object sender, UnhandledExceptionEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke(object sender, UnhandledExceptionEventArgs e);
}
public class Microsoft.VisualBasic.ApplicationServices.User : object {
    public string Name { get; }
    [EditorBrowsableAttribute("2")]
public IPrincipal CurrentPrincipal { get; public set; }
    public bool IsAuthenticated { get; }
    protected IPrincipal InternalPrincipal { get; protected set; }
    public string get_Name();
    public IPrincipal get_CurrentPrincipal();
    public void set_CurrentPrincipal(IPrincipal value);
    [EditorBrowsableAttribute("2")]
public void InitializeWithWindowsUser();
    public bool get_IsAuthenticated();
    public bool IsInRole(string role);
    public bool IsInRole(BuiltInRole role);
    protected virtual IPrincipal get_InternalPrincipal();
    protected virtual void set_InternalPrincipal(IPrincipal value);
}
public class Microsoft.VisualBasic.ApplicationServices.WebUser : User {
    protected IPrincipal InternalPrincipal { get; protected set; }
    protected virtual IPrincipal get_InternalPrincipal();
    protected virtual void set_InternalPrincipal(IPrincipal value);
}
public class Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase : ConsoleApplicationBase {
    public FormCollection OpenForms { get; }
    protected Form MainForm { get; protected set; }
    public Form SplashScreen { get; public set; }
    public int MinimumSplashScreenDisplayTime { get; public set; }
    [EditorBrowsableAttribute("2")]
protected static bool UseCompatibleTextRendering { get; }
    [EditorBrowsableAttribute("2")]
public ApplicationContext ApplicationContext { get; }
    public bool SaveMySettingsOnExit { get; public set; }
    protected internal ShutdownMode ShutdownStyle { get; protected internal set; }
    protected bool EnableVisualStyles { get; protected set; }
    [EditorBrowsableAttribute("2")]
protected bool IsSingleInstance { get; protected set; }
    [SecuritySafeCriticalAttribute]
public WindowsFormsApplicationBase(AuthenticationMode authenticationMode);
    public void add_Startup(StartupEventHandler obj);
    public void remove_Startup(StartupEventHandler obj);
    public void add_StartupNextInstance(StartupNextInstanceEventHandler obj);
    public void remove_StartupNextInstance(StartupNextInstanceEventHandler obj);
    public void add_Shutdown(ShutdownEventHandler obj);
    public void remove_Shutdown(ShutdownEventHandler obj);
    public void add_NetworkAvailabilityChanged(NetworkAvailableEventHandler value);
    public void remove_NetworkAvailabilityChanged(NetworkAvailableEventHandler value);
    private void raise_NetworkAvailabilityChanged(object sender, NetworkAvailableEventArgs e);
    public void add_UnhandledException(UnhandledExceptionEventHandler value);
    public void remove_UnhandledException(UnhandledExceptionEventHandler value);
    private void raise_UnhandledException(object sender, UnhandledExceptionEventArgs e);
    [SecuritySafeCriticalAttribute]
public void Run(String[] commandLine);
    public FormCollection get_OpenForms();
    protected Form get_MainForm();
    protected void set_MainForm(Form value);
    public Form get_SplashScreen();
    public void set_SplashScreen(Form value);
    public int get_MinimumSplashScreenDisplayTime();
    public void set_MinimumSplashScreenDisplayTime(int value);
    protected static bool get_UseCompatibleTextRendering();
    public ApplicationContext get_ApplicationContext();
    public bool get_SaveMySettingsOnExit();
    public void set_SaveMySettingsOnExit(bool value);
    public void DoEvents();
    [STAThreadAttribute]
[EditorBrowsableAttribute("2")]
protected virtual bool OnInitialize(ReadOnlyCollection`1<string> commandLineArgs);
    [EditorBrowsableAttribute("2")]
protected virtual bool OnStartup(StartupEventArgs eventArgs);
    [EditorBrowsableAttribute("2")]
[SecuritySafeCriticalAttribute]
protected virtual void OnStartupNextInstance(StartupNextInstanceEventArgs eventArgs);
    [SecuritySafeCriticalAttribute]
[EditorBrowsableAttribute("2")]
protected virtual void OnRun();
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateSplashScreen();
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateMainForm();
    [EditorBrowsableAttribute("2")]
protected virtual void OnShutdown();
    [EditorBrowsableAttribute("2")]
protected virtual bool OnUnhandledException(UnhandledExceptionEventArgs e);
    [EditorBrowsableAttribute("2")]
protected void ShowSplashScreen();
    [SecuritySafeCriticalAttribute]
[EditorBrowsableAttribute("2")]
protected void HideSplashScreen();
    protected internal ShutdownMode get_ShutdownStyle();
    protected internal void set_ShutdownStyle(ShutdownMode value);
    protected bool get_EnableVisualStyles();
    protected void set_EnableVisualStyles(bool value);
    protected bool get_IsSingleInstance();
    protected void set_IsSingleInstance(bool value);
}
public enum Microsoft.VisualBasic.AppWinStyle : Enum {
    public short value__;
    public static AppWinStyle Hide;
    public static AppWinStyle NormalFocus;
    public static AppWinStyle MinimizedFocus;
    public static AppWinStyle MaximizedFocus;
    public static AppWinStyle NormalNoFocus;
    public static AppWinStyle MinimizedNoFocus;
}
public enum Microsoft.VisualBasic.AudioPlayMode : Enum {
    public int value__;
    public static AudioPlayMode WaitToComplete;
    public static AudioPlayMode Background;
    public static AudioPlayMode BackgroundLoop;
}
public enum Microsoft.VisualBasic.CallType : Enum {
    public int value__;
    public static CallType Method;
    public static CallType Get;
    public static CallType Let;
    public static CallType Set;
}
[DebuggerTypeProxyAttribute("Microsoft.VisualBasic.Collection/CollectionDebugView")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("Count = {Count}")]
public class Microsoft.VisualBasic.Collection : object {
    public object Item { get; }
    public object Item { get; }
    [EditorBrowsableAttribute("2")]
public object Item { get; }
    public int Count { get; }
    private int ICollectionCount { get; }
    private bool ICollectionIsSynchronized { get; }
    private object ICollectionSyncRoot { get; }
    private bool IListIsFixedSize { get; }
    private bool IListIsReadOnly { get; }
    private object IListItem { get; private set; }
    public void Add(object Item, string Key, object Before, object After);
    public void Clear();
    public bool Contains(string Key);
    public void Remove(string Key);
    public void Remove(int Index);
    public object get_Item(int Index);
    public object get_Item(string Key);
    public object get_Item(object Index);
    public int get_Count();
    public IEnumerator GetEnumerator();
    [SecurityCriticalAttribute]
private sealed virtual override void GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override void OnDeserialization(object sender);
    private sealed virtual override IEnumerator ICollectionGetEnumerator();
    private sealed virtual override int get_ICollectionCount();
    private sealed virtual override bool get_ICollectionIsSynchronized();
    private sealed virtual override object get_ICollectionSyncRoot();
    private sealed virtual override bool get_IListIsFixedSize();
    private sealed virtual override bool get_IListIsReadOnly();
    private sealed virtual override void ICollectionCopyTo(Array array, int index);
    private sealed virtual override int IListAdd(object value);
    private sealed virtual override void IListInsert(int index, object value);
    private sealed virtual override void IListRemoveAt(int index);
    private sealed virtual override void IListRemove(object value);
    private sealed virtual override void IListClear();
    private sealed virtual override object get_IListItem(int index);
    private sealed virtual override void set_IListItem(int index, object value);
    private sealed virtual override bool IListContains(object value);
    private sealed virtual override int IListIndexOf(object value);
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.ComClassAttribute : Attribute {
    public string ClassID { get; }
    public string InterfaceID { get; }
    public string EventID { get; }
    public bool InterfaceShadows { get; public set; }
    public ComClassAttribute(string _ClassID);
    public ComClassAttribute(string _ClassID, string _InterfaceID);
    public ComClassAttribute(string _ClassID, string _InterfaceID, string _EventId);
    public string get_ClassID();
    public string get_InterfaceID();
    public string get_EventID();
    public bool get_InterfaceShadows();
    public void set_InterfaceShadows(bool Value);
}
public enum Microsoft.VisualBasic.CompareMethod : Enum {
    public int value__;
    public static CompareMethod Binary;
    public static CompareMethod Text;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.BooleanType : object {
    public static bool FromString(string Value);
    public static bool FromObject(object Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ByteType : object {
    public static byte FromString(string Value);
    public static byte FromObject(object Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.CharArrayType : object {
    public static Char[] FromString(string Value);
    public static Char[] FromObject(object Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.CharType : object {
    public static char FromString(string Value);
    public static char FromObject(object Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Conversions : object {
    public static bool ToBoolean(string Value);
    public static bool ToBoolean(object Value);
    public static byte ToByte(string Value);
    public static byte ToByte(object Value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string Value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(object Value);
    public static short ToShort(string Value);
    public static short ToShort(object Value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(string Value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(object Value);
    public static int ToInteger(string Value);
    public static int ToInteger(object Value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(string Value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(object Value);
    public static long ToLong(string Value);
    public static long ToLong(object Value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(string Value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(object Value);
    public static decimal ToDecimal(bool Value);
    public static decimal ToDecimal(string Value);
    public static decimal ToDecimal(object Value);
    public static float ToSingle(string Value);
    public static float ToSingle(object Value);
    public static double ToDouble(string Value);
    public static double ToDouble(object Value);
    public static DateTime ToDate(string Value);
    public static DateTime ToDate(object Value);
    public static char ToChar(string Value);
    public static char ToChar(object Value);
    public static Char[] ToCharArrayRankOne(string Value);
    public static Char[] ToCharArrayRankOne(object Value);
    public static string ToString(bool Value);
    public static string ToString(byte Value);
    public static string ToString(char Value);
    public static string FromCharArray(Char[] Value);
    public static string FromCharAndCount(char Value, int Count);
    public static string FromCharArraySubset(Char[] Value, int StartIndex, int Length);
    public static string ToString(short Value);
    public static string ToString(int Value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 Value);
    public static string ToString(long Value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong Value);
    public static string ToString(float Value);
    public static string ToString(double Value);
    public static string ToString(float Value, NumberFormatInfo NumberFormat);
    public static string ToString(double Value, NumberFormatInfo NumberFormat);
    public static string ToString(DateTime Value);
    public static string ToString(decimal Value);
    public static string ToString(decimal Value, NumberFormatInfo NumberFormat);
    public static string ToString(object Value);
    public static T ToGenericParameter(object Value);
    public static object ChangeType(object Expression, Type TargetType);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
[ObsoleteAttribute("do not use this method", "True")]
public static object FallbackUserDefinedConversion(object Expression, Type TargetType);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DateType : object {
    public static DateTime FromString(string Value);
    public static DateTime FromString(string Value, CultureInfo culture);
    public static DateTime FromObject(object Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DecimalType : object {
    public static decimal FromBoolean(bool Value);
    public static decimal FromString(string Value);
    public static decimal FromString(string Value, NumberFormatInfo NumberFormat);
    public static decimal FromObject(object Value);
    public static decimal FromObject(object Value, NumberFormatInfo NumberFormat);
    public static decimal Parse(string Value, NumberFormatInfo NumberFormat);
}
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DoubleType : object {
    public static double FromString(string Value);
    public static double FromString(string Value, NumberFormatInfo NumberFormat);
    public static double FromObject(object Value);
    public static double FromObject(object Value, NumberFormatInfo NumberFormat);
    public static double Parse(string Value);
    public static double Parse(string Value, NumberFormatInfo NumberFormat);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ExceptionUtils : object {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.FlowControl : object {
    public static bool ForNextCheckR4(float count, float limit, float StepValue);
    public static bool ForNextCheckR8(double count, double limit, double StepValue);
    public static bool ForNextCheckDec(decimal count, decimal limit, decimal StepValue);
    public static bool ForLoopInitObj(object Counter, object Start, object Limit, object StepValue, Object& LoopForResult, Object& CounterResult);
    public static bool ForNextCheckObj(object Counter, object LoopObj, Object& CounterResult);
    public static IEnumerator ForEachInArr(Array ary);
    public static IEnumerator ForEachInObj(object obj);
    public static bool ForEachNextObj(Object& obj, IEnumerator enumerator);
    public static void CheckForSyncLockOnValueType(object obj);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.HostServices : object {
    public static IVbHost VBHost { get; public set; }
    public static IVbHost get_VBHost();
    public static void set_VBHost(IVbHost Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.IncompleteInitialization : Exception {
    [EditorBrowsableAttribute("2")]
private IncompleteInitialization(SerializationInfo info, StreamingContext context);
    [EditorBrowsableAttribute("2")]
public IncompleteInitialization(string message);
    [EditorBrowsableAttribute("2")]
public IncompleteInitialization(string message, Exception innerException);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.IntegerType : object {
    public static int FromString(string Value);
    public static int FromObject(object Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.InternalErrorException : Exception {
    [EditorBrowsableAttribute("2")]
private InternalErrorException(SerializationInfo info, StreamingContext context);
    [EditorBrowsableAttribute("2")]
public InternalErrorException(string message);
    [EditorBrowsableAttribute("2")]
public InternalErrorException(string message, Exception innerException);
}
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.VisualBasic.CompilerServices.InternalXmlHelper : object {
    public static string Value { get; public set; }
    public static string AttributeValue { get; public set; }
    public static string AttributeValue { get; public set; }
    public static string get_Value(IEnumerable`1<XElement> source);
    public static void set_Value(IEnumerable`1<XElement> source, string value);
    public static string get_AttributeValue(IEnumerable`1<XElement> source, XName name);
    public static void set_AttributeValue(IEnumerable`1<XElement> source, XName name, string value);
    public static string get_AttributeValue(XElement source, XName name);
    public static void set_AttributeValue(XElement source, XName name, string value);
    [EditorBrowsableAttribute("1")]
public static XAttribute CreateAttribute(XName name, object value);
    [EditorBrowsableAttribute("1")]
public static XAttribute CreateNamespaceAttribute(XName name, XNamespace ns);
    [EditorBrowsableAttribute("1")]
public static object RemoveNamespaceAttributes(String[] inScopePrefixes, XNamespace[] inScopeNs, List`1<XAttribute> attributes, object obj);
    [EditorBrowsableAttribute("1")]
public static IEnumerable RemoveNamespaceAttributes(String[] inScopePrefixes, XNamespace[] inScopeNs, List`1<XAttribute> attributes, IEnumerable obj);
    [EditorBrowsableAttribute("1")]
public static XElement RemoveNamespaceAttributes(String[] inScopePrefixes, XNamespace[] inScopeNs, List`1<XAttribute> attributes, XElement e);
}
[EditorBrowsableAttribute("1")]
public interface Microsoft.VisualBasic.CompilerServices.IVbHost {
    public abstract virtual IWin32Window GetParentWindow();
    public abstract virtual string GetWindowTitle();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LateBinding : object {
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object LateGet(object o, Type objType, string name, Object[] args, String[] paramnames, Boolean[] CopyBack);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateSetComplex(object o, Type objType, string name, Object[] args, String[] paramnames, bool OptimisticSet, bool RValueBase);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void LateSet(object o, Type objType, string name, Object[] args, String[] paramnames);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object LateIndexGet(object o, Object[] args, String[] paramnames);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void LateIndexSetComplex(object o, Object[] args, String[] paramnames, bool OptimisticSet, bool RValueBase);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateIndexSet(object o, Object[] args, String[] paramnames);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateCall(object o, Type objType, string name, Object[] args, String[] paramnames, Boolean[] CopyBack);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LikeOperator : object {
    private static LikeOperator();
    public static object LikeObject(object Source, object Pattern, CompareMethod CompareOption);
    public static bool LikeString(string Source, string Pattern, CompareMethod CompareOption);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.LongType : object {
    public static long FromString(string Value);
    public static long FromObject(object Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.NewLateBinding : object {
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static bool LateCanEvaluate(object instance, Type type, string memberName, Object[] arguments, bool allowFunctionEvaluation, bool allowPropertyEvaluation);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object LateCall(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack, bool IgnoreReturn);
    [EditorBrowsableAttribute("1")]
[DebuggerHiddenAttribute]
[ObsoleteAttribute("do not use this method", "True")]
[DebuggerStepThroughAttribute]
public static object FallbackCall(object Instance, string MemberName, Object[] Arguments, String[] ArgumentNames, bool IgnoreReturn);
    [EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object LateCallInvokeDefault(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [DebuggerHiddenAttribute]
[EditorBrowsableAttribute("1")]
[DebuggerStepThroughAttribute]
public static object LateGetInvokeDefault(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [ObsoleteAttribute("do not use this method", "True")]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
[EditorBrowsableAttribute("1")]
public static object FallbackInvokeDefault1(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("do not use this method", "True")]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object FallbackInvokeDefault2(object Instance, Object[] Arguments, String[] ArgumentNames, bool ReportErrors);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object LateIndexGet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static object LateGet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack);
    [ObsoleteAttribute("do not use this method", "True")]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
[EditorBrowsableAttribute("1")]
public static object FallbackGet(object Instance, string MemberName, Object[] Arguments, String[] ArgumentNames);
    [DebuggerHiddenAttribute]
[DebuggerStepThroughAttribute]
public static void LateIndexSetComplex(object Instance, Object[] Arguments, String[] ArgumentNames, bool OptimisticSet, bool RValueBase);
    [DebuggerHiddenAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("do not use this method", "True")]
[DebuggerStepThroughAttribute]
public static void FallbackIndexSetComplex(object Instance, Object[] Arguments, String[] ArgumentNames, bool OptimisticSet, bool RValueBase);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateIndexSet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [DebuggerHiddenAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("do not use this method", "True")]
[DebuggerStepThroughAttribute]
public static void FallbackIndexSet(object Instance, Object[] Arguments, String[] ArgumentNames);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateSetComplex(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, bool OptimisticSet, bool RValueBase);
    [DebuggerHiddenAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("do not use this method", "True")]
[DebuggerStepThroughAttribute]
public static void FallbackSetComplex(object Instance, string MemberName, Object[] Arguments, bool OptimisticSet, bool RValueBase);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateSet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments);
    [ObsoleteAttribute("do not use this method", "True")]
[DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
[EditorBrowsableAttribute("1")]
public static void FallbackSet(object Instance, string MemberName, Object[] Arguments);
    [DebuggerStepThroughAttribute]
[DebuggerHiddenAttribute]
public static void LateSet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, bool OptimisticSet, bool RValueBase, CallType CallType);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ObjectFlowControl : object {
    public static void CheckForSyncLockOnValueType(object Expression);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ObjectType : object {
    private static ObjectType();
    public static int ObjTst(object o1, object o2, bool TextCompare);
    public static object PlusObj(object obj);
    public static object NegObj(object obj);
    public static object NotObj(object obj);
    public static object BitAndObj(object obj1, object obj2);
    public static object BitOrObj(object obj1, object obj2);
    public static object BitXorObj(object obj1, object obj2);
    public static object AddObj(object o1, object o2);
    public static object SubObj(object o1, object o2);
    public static object MulObj(object o1, object o2);
    public static object DivObj(object o1, object o2);
    public static object PowObj(object obj1, object obj2);
    public static object ModObj(object o1, object o2);
    public static object IDivObj(object o1, object o2);
    public static object ShiftLeftObj(object o1, int amount);
    public static object ShiftRightObj(object o1, int amount);
    public static object XorObj(object obj1, object obj2);
    public static bool LikeObj(object vLeft, object vRight, CompareMethod CompareOption);
    public static object StrCatObj(object vLeft, object vRight);
    public static object GetObjectValuePrimitive(object o);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Operators : object {
    private static Operators();
    [DebuggerHiddenAttribute]
[ObsoleteAttribute("do not use this method", "True")]
[DebuggerStepThroughAttribute]
public static object FallbackInvokeUserDefinedOperator(object vbOp, Object[] Arguments);
    public static object CompareObjectEqual(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectEqual(object Left, object Right, bool TextCompare);
    public static object CompareObjectNotEqual(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectNotEqual(object Left, object Right, bool TextCompare);
    public static object CompareObjectLess(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectLess(object Left, object Right, bool TextCompare);
    public static object CompareObjectLessEqual(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectLessEqual(object Left, object Right, bool TextCompare);
    public static object CompareObjectGreaterEqual(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectGreaterEqual(object Left, object Right, bool TextCompare);
    public static object CompareObjectGreater(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectGreater(object Left, object Right, bool TextCompare);
    public static int CompareObject(object Left, object Right, bool TextCompare);
    public static int CompareString(string Left, string Right, bool TextCompare);
    public static object PlusObject(object Operand);
    public static object NegateObject(object Operand);
    public static object NotObject(object Operand);
    public static object AndObject(object Left, object Right);
    public static object OrObject(object Left, object Right);
    public static object XorObject(object Left, object Right);
    public static object AddObject(object Left, object Right);
    public static object SubtractObject(object Left, object Right);
    public static object MultiplyObject(object Left, object Right);
    public static object DivideObject(object Left, object Right);
    public static object ExponentObject(object Left, object Right);
    public static object ModObject(object Left, object Right);
    public static object IntDivideObject(object Left, object Right);
    public static object LeftShiftObject(object Operand, object Amount);
    public static object RightShiftObject(object Operand, object Amount);
    public static object LikeObject(object Source, object Pattern, CompareMethod CompareOption);
    public static bool LikeString(string Source, string Pattern, CompareMethod CompareOption);
    public static object ConcatenateObject(object Left, object Right);
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.CompilerServices.OptionTextAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ProjectData : object {
    public static Exception CreateProjectError(int hr);
    [ReliabilityContractAttribute("3", "2")]
[SecuritySafeCriticalAttribute]
public static void SetProjectError(Exception ex);
    [ReliabilityContractAttribute("3", "2")]
[SecuritySafeCriticalAttribute]
public static void SetProjectError(Exception ex, int lErl);
    [SecuritySafeCriticalAttribute]
[ReliabilityContractAttribute("3", "2")]
public static void ClearProjectError();
    [SecuritySafeCriticalAttribute]
public static void EndApp();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ShortType : object {
    public static short FromString(string Value);
    public static short FromObject(object Value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.SingleType : object {
    public static float FromString(string Value);
    public static float FromString(string Value, NumberFormatInfo NumberFormat);
    public static float FromObject(object Value);
    public static float FromObject(object Value, NumberFormatInfo NumberFormat);
}
[EditorBrowsableAttribute("1")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag : object {
    public short State;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StringType : object {
    public static string FromBoolean(bool Value);
    public static string FromByte(byte Value);
    public static string FromChar(char Value);
    public static string FromShort(short Value);
    public static string FromInteger(int Value);
    public static string FromLong(long Value);
    public static string FromSingle(float Value);
    public static string FromDouble(double Value);
    public static string FromSingle(float Value, NumberFormatInfo NumberFormat);
    public static string FromDouble(double Value, NumberFormatInfo NumberFormat);
    public static string FromDate(DateTime Value);
    public static string FromDecimal(decimal Value);
    public static string FromDecimal(decimal Value, NumberFormatInfo NumberFormat);
    public static string FromObject(object Value);
    public static int StrCmp(string sLeft, string sRight, bool TextCompare);
    public static bool StrLike(string Source, string Pattern, CompareMethod CompareOption);
    public static bool StrLikeBinary(string Source, string Pattern);
    public static bool StrLikeText(string Source, string Pattern);
    public static void MidStmtStr(String& sDest, int StartPosition, int MaxInsertLength, string sInsert);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Utils : object {
    private static Utils();
    public static string GetResourceString(string ResourceKey, String[] Args);
    public static void ThrowException(int hr);
    public static object SetCultureInfo(CultureInfo Culture);
    public static Array CopyArray(Array arySrc, Array aryDest);
    public static string MethodToString(MethodBase Method);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Versioned : object {
    public static object CallByName(object Instance, string MethodName, CallType UseCallType, Object[] Arguments);
    public static bool IsNumeric(object Expression);
    public static string TypeName(object Expression);
    public static string SystemTypeName(string VbName);
    public static string VbTypeName(string SystemName);
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Constants : object {
    public static int vbObjectError;
    public static string vbCrLf;
    public static string vbNewLine;
    public static string vbCr;
    public static string vbLf;
    public static string vbBack;
    public static string vbFormFeed;
    public static string vbTab;
    public static string vbVerticalTab;
    public static string vbNullChar;
    public static string vbNullString;
    public static AppWinStyle vbHide;
    public static AppWinStyle vbNormalFocus;
    public static AppWinStyle vbMinimizedFocus;
    public static AppWinStyle vbMaximizedFocus;
    public static AppWinStyle vbNormalNoFocus;
    public static AppWinStyle vbMinimizedNoFocus;
    public static CallType vbMethod;
    public static CallType vbGet;
    public static CallType vbLet;
    public static CallType vbSet;
    public static CompareMethod vbBinaryCompare;
    public static CompareMethod vbTextCompare;
    public static DateFormat vbGeneralDate;
    public static DateFormat vbLongDate;
    public static DateFormat vbShortDate;
    public static DateFormat vbLongTime;
    public static DateFormat vbShortTime;
    public static FirstDayOfWeek vbUseSystemDayOfWeek;
    public static FirstDayOfWeek vbSunday;
    public static FirstDayOfWeek vbMonday;
    public static FirstDayOfWeek vbTuesday;
    public static FirstDayOfWeek vbWednesday;
    public static FirstDayOfWeek vbThursday;
    public static FirstDayOfWeek vbFriday;
    public static FirstDayOfWeek vbSaturday;
    public static FileAttribute vbNormal;
    public static FileAttribute vbReadOnly;
    public static FileAttribute vbHidden;
    public static FileAttribute vbSystem;
    public static FileAttribute vbVolume;
    public static FileAttribute vbDirectory;
    public static FileAttribute vbArchive;
    public static FirstWeekOfYear vbUseSystem;
    public static FirstWeekOfYear vbFirstJan1;
    public static FirstWeekOfYear vbFirstFourDays;
    public static FirstWeekOfYear vbFirstFullWeek;
    public static VbStrConv vbUpperCase;
    public static VbStrConv vbLowerCase;
    public static VbStrConv vbProperCase;
    public static VbStrConv vbWide;
    public static VbStrConv vbNarrow;
    public static VbStrConv vbKatakana;
    public static VbStrConv vbHiragana;
    public static VbStrConv vbSimplifiedChinese;
    public static VbStrConv vbTraditionalChinese;
    public static VbStrConv vbLinguisticCasing;
    public static TriState vbUseDefault;
    public static TriState vbTrue;
    public static TriState vbFalse;
    public static VariantType vbEmpty;
    public static VariantType vbNull;
    public static VariantType vbInteger;
    public static VariantType vbLong;
    public static VariantType vbSingle;
    public static VariantType vbDouble;
    public static VariantType vbCurrency;
    public static VariantType vbDate;
    public static VariantType vbString;
    public static VariantType vbObject;
    public static VariantType vbBoolean;
    public static VariantType vbVariant;
    public static VariantType vbDecimal;
    public static VariantType vbByte;
    public static VariantType vbUserDefinedType;
    public static VariantType vbArray;
    public static MsgBoxResult vbOK;
    public static MsgBoxResult vbCancel;
    public static MsgBoxResult vbAbort;
    public static MsgBoxResult vbRetry;
    public static MsgBoxResult vbIgnore;
    public static MsgBoxResult vbYes;
    public static MsgBoxResult vbNo;
    public static MsgBoxStyle vbOKOnly;
    public static MsgBoxStyle vbOKCancel;
    public static MsgBoxStyle vbAbortRetryIgnore;
    public static MsgBoxStyle vbYesNoCancel;
    public static MsgBoxStyle vbYesNo;
    public static MsgBoxStyle vbRetryCancel;
    public static MsgBoxStyle vbCritical;
    public static MsgBoxStyle vbQuestion;
    public static MsgBoxStyle vbExclamation;
    public static MsgBoxStyle vbInformation;
    public static MsgBoxStyle vbDefaultButton1;
    public static MsgBoxStyle vbDefaultButton2;
    public static MsgBoxStyle vbDefaultButton3;
    public static MsgBoxStyle vbApplicationModal;
    public static MsgBoxStyle vbSystemModal;
    public static MsgBoxStyle vbMsgBoxHelp;
    public static MsgBoxStyle vbMsgBoxRight;
    public static MsgBoxStyle vbMsgBoxRtlReading;
    public static MsgBoxStyle vbMsgBoxSetForeground;
    private static Constants();
}
public class Microsoft.VisualBasic.ControlChars : object {
    public static string CrLf;
    public static string NewLine;
    public static char Cr;
    public static char Lf;
    public static char Back;
    public static char FormFeed;
    public static char Tab;
    public static char VerticalTab;
    public static char NullChar;
    public static char Quote;
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Conversion : object {
    private static Conversion();
    public static string ErrorToString();
    public static string ErrorToString(int ErrorNumber);
    public static short Fix(short Number);
    public static int Fix(int Number);
    public static long Fix(long Number);
    public static double Fix(double Number);
    public static float Fix(float Number);
    public static decimal Fix(decimal Number);
    public static object Fix(object Number);
    public static short Int(short Number);
    public static int Int(int Number);
    public static long Int(long Number);
    public static double Int(double Number);
    public static float Int(float Number);
    public static decimal Int(decimal Number);
    public static object Int(object Number);
    [CLSCompliantAttribute("False")]
public static string Hex(sbyte Number);
    public static string Hex(byte Number);
    public static string Hex(short Number);
    [CLSCompliantAttribute("False")]
public static string Hex(ushort Number);
    public static string Hex(int Number);
    [CLSCompliantAttribute("False")]
public static string Hex(UInt32 Number);
    public static string Hex(long Number);
    [CLSCompliantAttribute("False")]
public static string Hex(ulong Number);
    public static string Hex(object Number);
    [CLSCompliantAttribute("False")]
public static string Oct(sbyte Number);
    public static string Oct(byte Number);
    public static string Oct(short Number);
    [CLSCompliantAttribute("False")]
public static string Oct(ushort Number);
    public static string Oct(int Number);
    [CLSCompliantAttribute("False")]
public static string Oct(UInt32 Number);
    public static string Oct(long Number);
    [CLSCompliantAttribute("False")]
public static string Oct(ulong Number);
    public static string Oct(object Number);
    public static string Str(object Number);
    public static double Val(string InputStr);
    public static int Val(char Expression);
    public static double Val(object Expression);
    public static object CTypeDynamic(object Expression, Type TargetType);
    public static TargetType CTypeDynamic(object Expression);
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.DateAndTime : object {
    public static DateTime Today { get; public set; }
    public static DateTime Now { get; }
    public static DateTime TimeOfDay { get; public set; }
    public static string TimeString { get; public set; }
    public static string DateString { get; public set; }
    public static double Timer { get; }
    private static DateAndTime();
    public static DateTime get_Today();
    public static void set_Today(DateTime Value);
    public static DateTime get_Now();
    public static DateTime get_TimeOfDay();
    public static void set_TimeOfDay(DateTime Value);
    public static string get_TimeString();
    public static void set_TimeString(string Value);
    public static string get_DateString();
    public static void set_DateString(string Value);
    public static double get_Timer();
    public static DateTime DateAdd(DateInterval Interval, double Number, DateTime DateValue);
    public static long DateDiff(DateInterval Interval, DateTime Date1, DateTime Date2, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    public static int DatePart(DateInterval Interval, DateTime DateValue, FirstDayOfWeek FirstDayOfWeekValue, FirstWeekOfYear FirstWeekOfYearValue);
    public static DateTime DateAdd(string Interval, double Number, object DateValue);
    public static long DateDiff(string Interval, object Date1, object Date2, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    public static int DatePart(string Interval, object DateValue, FirstDayOfWeek DayOfWeek, FirstWeekOfYear WeekOfYear);
    public static DateTime DateSerial(int Year, int Month, int Day);
    public static DateTime TimeSerial(int Hour, int Minute, int Second);
    public static DateTime DateValue(string StringDate);
    public static DateTime TimeValue(string StringTime);
    public static int Year(DateTime DateValue);
    public static int Month(DateTime DateValue);
    public static int Day(DateTime DateValue);
    public static int Hour(DateTime TimeValue);
    public static int Minute(DateTime TimeValue);
    public static int Second(DateTime TimeValue);
    public static int Weekday(DateTime DateValue, FirstDayOfWeek DayOfWeek);
    public static string MonthName(int Month, bool Abbreviate);
    public static string WeekdayName(int Weekday, bool Abbreviate, FirstDayOfWeek FirstDayOfWeekValue);
}
public enum Microsoft.VisualBasic.DateFormat : Enum {
    public int value__;
    public static DateFormat GeneralDate;
    public static DateFormat LongDate;
    public static DateFormat ShortDate;
    public static DateFormat LongTime;
    public static DateFormat ShortTime;
}
public enum Microsoft.VisualBasic.DateInterval : Enum {
    public int value__;
    public static DateInterval Year;
    public static DateInterval Quarter;
    public static DateInterval Month;
    public static DateInterval DayOfYear;
    public static DateInterval Day;
    public static DateInterval WeekOfYear;
    public static DateInterval Weekday;
    public static DateInterval Hour;
    public static DateInterval Minute;
    public static DateInterval Second;
}
public class Microsoft.VisualBasic.Devices.Audio : object {
    public void Play(string location);
    public void Play(string location, AudioPlayMode playMode);
    public void Play(Byte[] data, AudioPlayMode playMode);
    public void Play(Stream stream, AudioPlayMode playMode);
    public void PlaySystemSound(SystemSound systemSound);
    public void Stop();
}
public class Microsoft.VisualBasic.Devices.Clock : object {
    public DateTime LocalTime { get; }
    public DateTime GmtTime { get; }
    public int TickCount { get; }
    public DateTime get_LocalTime();
    public DateTime get_GmtTime();
    public int get_TickCount();
}
public class Microsoft.VisualBasic.Devices.Computer : ServerComputer {
    public Audio Audio { get; }
    public ClipboardProxy Clipboard { get; }
    public Ports Ports { get; }
    public Mouse Mouse { get; }
    public Keyboard Keyboard { get; }
    public Screen Screen { get; }
    public Audio get_Audio();
    public ClipboardProxy get_Clipboard();
    public Ports get_Ports();
    public Mouse get_Mouse();
    public Keyboard get_Keyboard();
    public Screen get_Screen();
}
[DebuggerTypeProxyAttribute("Microsoft.VisualBasic.Devices.ComputerInfo/ComputerInfoDebugView")]
public class Microsoft.VisualBasic.Devices.ComputerInfo : object {
    [CLSCompliantAttribute("False")]
public ulong TotalPhysicalMemory { get; }
    [CLSCompliantAttribute("False")]
public ulong AvailablePhysicalMemory { get; }
    [CLSCompliantAttribute("False")]
public ulong TotalVirtualMemory { get; }
    [CLSCompliantAttribute("False")]
public ulong AvailableVirtualMemory { get; }
    public CultureInfo InstalledUICulture { get; }
    public string OSFullName { get; }
    public string OSPlatform { get; }
    public string OSVersion { get; }
    [SecuritySafeCriticalAttribute]
public ulong get_TotalPhysicalMemory();
    [SecuritySafeCriticalAttribute]
public ulong get_AvailablePhysicalMemory();
    [SecuritySafeCriticalAttribute]
public ulong get_TotalVirtualMemory();
    [SecuritySafeCriticalAttribute]
public ulong get_AvailableVirtualMemory();
    public CultureInfo get_InstalledUICulture();
    [SecuritySafeCriticalAttribute]
public string get_OSFullName();
    public string get_OSPlatform();
    public string get_OSVersion();
}
public class Microsoft.VisualBasic.Devices.Keyboard : object {
    public bool ShiftKeyDown { get; }
    public bool AltKeyDown { get; }
    public bool CtrlKeyDown { get; }
    public bool CapsLock { get; }
    public bool NumLock { get; }
    public bool ScrollLock { get; }
    public void SendKeys(string keys);
    public void SendKeys(string keys, bool wait);
    public bool get_ShiftKeyDown();
    public bool get_AltKeyDown();
    public bool get_CtrlKeyDown();
    [SecuritySafeCriticalAttribute]
public bool get_CapsLock();
    [SecuritySafeCriticalAttribute]
public bool get_NumLock();
    [SecuritySafeCriticalAttribute]
public bool get_ScrollLock();
}
public class Microsoft.VisualBasic.Devices.Mouse : object {
    public bool ButtonsSwapped { get; }
    public bool WheelExists { get; }
    public int WheelScrollLines { get; }
    public bool get_ButtonsSwapped();
    public bool get_WheelExists();
    public int get_WheelScrollLines();
}
public class Microsoft.VisualBasic.Devices.Network : object {
    public bool IsAvailable { get; }
    public void add_NetworkAvailabilityChanged(NetworkAvailableEventHandler handler);
    public void remove_NetworkAvailabilityChanged(NetworkAvailableEventHandler handler);
    private void raise_NetworkAvailabilityChanged(object sender, NetworkAvailableEventArgs e);
    public bool get_IsAvailable();
    public bool Ping(string hostNameOrAddress);
    public bool Ping(Uri address);
    public bool Ping(string hostNameOrAddress, int timeout);
    public bool Ping(Uri address, int timeout);
    public void DownloadFile(string address, string destinationFileName);
    public void DownloadFile(Uri address, string destinationFileName);
    public void DownloadFile(string address, string destinationFileName, string userName, string password);
    public void DownloadFile(Uri address, string destinationFileName, string userName, string password);
    public void DownloadFile(string address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite);
    public void DownloadFile(string address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite, UICancelOption onUserCancel);
    public void DownloadFile(Uri address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite);
    public void DownloadFile(Uri address, string destinationFileName, string userName, string password, bool showUI, int connectionTimeout, bool overwrite, UICancelOption onUserCancel);
    public void DownloadFile(Uri address, string destinationFileName, ICredentials networkCredentials, bool showUI, int connectionTimeout, bool overwrite);
    [SecuritySafeCriticalAttribute]
public void DownloadFile(Uri address, string destinationFileName, ICredentials networkCredentials, bool showUI, int connectionTimeout, bool overwrite, UICancelOption onUserCancel);
    public void UploadFile(string sourceFileName, string address);
    public void UploadFile(string sourceFileName, Uri address);
    public void UploadFile(string sourceFileName, string address, string userName, string password);
    public void UploadFile(string sourceFileName, Uri address, string userName, string password);
    public void UploadFile(string sourceFileName, string address, string userName, string password, bool showUI, int connectionTimeout);
    public void UploadFile(string sourceFileName, string address, string userName, string password, bool showUI, int connectionTimeout, UICancelOption onUserCancel);
    public void UploadFile(string sourceFileName, Uri address, string userName, string password, bool showUI, int connectionTimeout);
    public void UploadFile(string sourceFileName, Uri address, string userName, string password, bool showUI, int connectionTimeout, UICancelOption onUserCancel);
    public void UploadFile(string sourceFileName, Uri address, ICredentials networkCredentials, bool showUI, int connectionTimeout);
    public void UploadFile(string sourceFileName, Uri address, ICredentials networkCredentials, bool showUI, int connectionTimeout, UICancelOption onUserCancel);
}
public class Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs : EventArgs {
    public bool IsNetworkAvailable { get; }
    public NetworkAvailableEventArgs(bool networkAvailable);
    public bool get_IsNetworkAvailable();
}
[EditorBrowsableAttribute("2")]
public class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler : MulticastDelegate {
    public NetworkAvailableEventHandler(object TargetObject, IntPtr TargetMethod);
    public virtual IAsyncResult BeginInvoke(object sender, NetworkAvailableEventArgs e, AsyncCallback DelegateCallback, object DelegateAsyncState);
    public virtual void EndInvoke(IAsyncResult DelegateAsyncResult);
    public virtual void Invoke(object sender, NetworkAvailableEventArgs e);
}
public class Microsoft.VisualBasic.Devices.Ports : object {
    public ReadOnlyCollection`1<string> SerialPortNames { get; }
    public SerialPort OpenSerialPort(string portName);
    public SerialPort OpenSerialPort(string portName, int baudRate);
    public SerialPort OpenSerialPort(string portName, int baudRate, Parity parity);
    public SerialPort OpenSerialPort(string portName, int baudRate, Parity parity, int dataBits);
    public SerialPort OpenSerialPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits);
    public ReadOnlyCollection`1<string> get_SerialPortNames();
}
public class Microsoft.VisualBasic.Devices.ServerComputer : object {
    public Clock Clock { get; }
    public FileSystemProxy FileSystem { get; }
    public ComputerInfo Info { get; }
    public Network Network { get; }
    public string Name { get; }
    public RegistryProxy Registry { get; }
    public Clock get_Clock();
    public FileSystemProxy get_FileSystem();
    public ComputerInfo get_Info();
    public Network get_Network();
    public string get_Name();
    public RegistryProxy get_Registry();
}
public enum Microsoft.VisualBasic.DueDate : Enum {
    public int value__;
    public static DueDate EndOfPeriod;
    public static DueDate BegOfPeriod;
}
public class Microsoft.VisualBasic.ErrObject : object {
    public int Erl { get; }
    public int Number { get; public set; }
    public string Source { get; public set; }
    public string Description { get; public set; }
    public string HelpFile { get; public set; }
    public int HelpContext { get; public set; }
    public int LastDllError { get; }
    public int get_Erl();
    public int get_Number();
    public void set_Number(int Value);
    public string get_Source();
    public void set_Source(string Value);
    public string get_Description();
    public void set_Description(string Value);
    public string get_HelpFile();
    public void set_HelpFile(string Value);
    public int get_HelpContext();
    public void set_HelpContext(int Value);
    public Exception GetException();
    [ReliabilityContractAttribute("3", "2")]
[SecuritySafeCriticalAttribute]
public void Clear();
    public void Raise(int Number, object Source, object Description, object HelpFile, object HelpContext);
    [SecurityCriticalAttribute]
public int get_LastDllError();
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.FileAttribute : Enum {
    public int value__;
    public static FileAttribute Normal;
    public static FileAttribute ReadOnly;
    public static FileAttribute Hidden;
    public static FileAttribute System;
    public static FileAttribute Volume;
    public static FileAttribute Directory;
    public static FileAttribute Archive;
}
public enum Microsoft.VisualBasic.FileIO.DeleteDirectoryOption : Enum {
    public int value__;
    public static DeleteDirectoryOption ThrowIfDirectoryNonEmpty;
    public static DeleteDirectoryOption DeleteAllContents;
}
public enum Microsoft.VisualBasic.FileIO.FieldType : Enum {
    public int value__;
    public static FieldType Delimited;
    public static FieldType FixedWidth;
}
public class Microsoft.VisualBasic.FileIO.FileSystem : object {
    public static ReadOnlyCollection`1<DriveInfo> Drives { get; }
    public static string CurrentDirectory { get; public set; }
    private static FileSystem();
    public static ReadOnlyCollection`1<DriveInfo> get_Drives();
    public static string get_CurrentDirectory();
    public static void set_CurrentDirectory(string value);
    public static string CombinePath(string baseDirectory, string relativePath);
    public static bool DirectoryExists(string directory);
    public static bool FileExists(string file);
    public static ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType);
    public static ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType, String[] fileWildcards);
    public static ReadOnlyCollection`1<string> GetDirectories(string directory);
    public static ReadOnlyCollection`1<string> GetDirectories(string directory, SearchOption searchType, String[] wildcards);
    public static DirectoryInfo GetDirectoryInfo(string directory);
    public static DriveInfo GetDriveInfo(string drive);
    public static FileInfo GetFileInfo(string file);
    public static ReadOnlyCollection`1<string> GetFiles(string directory);
    public static ReadOnlyCollection`1<string> GetFiles(string directory, SearchOption searchType, String[] wildcards);
    public static string GetName(string path);
    public static string GetParentPath(string path);
    public static string GetTempFileName();
    public static TextFieldParser OpenTextFieldParser(string file);
    public static TextFieldParser OpenTextFieldParser(string file, String[] delimiters);
    public static TextFieldParser OpenTextFieldParser(string file, Int32[] fieldWidths);
    public static StreamReader OpenTextFileReader(string file);
    public static StreamReader OpenTextFileReader(string file, Encoding encoding);
    public static StreamWriter OpenTextFileWriter(string file, bool append);
    public static StreamWriter OpenTextFileWriter(string file, bool append, Encoding encoding);
    public static Byte[] ReadAllBytes(string file);
    public static string ReadAllText(string file);
    public static string ReadAllText(string file, Encoding encoding);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public static void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public static void CopyFile(string sourceFileName, string destinationFileName);
    public static void CopyFile(string sourceFileName, string destinationFileName, bool overwrite);
    public static void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public static void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public static void CreateDirectory(string directory);
    public static void DeleteDirectory(string directory, DeleteDirectoryOption onDirectoryNotEmpty);
    public static void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle);
    public static void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public static void DeleteFile(string file);
    public static void DeleteFile(string file, UIOption showUI, RecycleOption recycle);
    public static void DeleteFile(string file, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public static void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public static void MoveFile(string sourceFileName, string destinationFileName);
    public static void MoveFile(string sourceFileName, string destinationFileName, bool overwrite);
    public static void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public static void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public static void RenameDirectory(string directory, string newName);
    public static void RenameFile(string file, string newName);
    public static void WriteAllBytes(string file, Byte[] data, bool append);
    public static void WriteAllText(string file, string text, bool append);
    public static void WriteAllText(string file, string text, bool append, Encoding encoding);
}
public class Microsoft.VisualBasic.FileIO.MalformedLineException : Exception {
    [EditorBrowsableAttribute("0")]
public long LineNumber { get; public set; }
    public MalformedLineException(string message, long lineNumber);
    public MalformedLineException(string message);
    public MalformedLineException(string message, long lineNumber, Exception innerException);
    public MalformedLineException(string message, Exception innerException);
    [EditorBrowsableAttribute("2")]
protected MalformedLineException(SerializationInfo info, StreamingContext context);
    public long get_LineNumber();
    public void set_LineNumber(long value);
    [SecurityCriticalAttribute]
[EditorBrowsableAttribute("2")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
}
public enum Microsoft.VisualBasic.FileIO.RecycleOption : Enum {
    public int value__;
    public static RecycleOption DeletePermanently;
    public static RecycleOption SendToRecycleBin;
}
public enum Microsoft.VisualBasic.FileIO.SearchOption : Enum {
    public int value__;
    public static SearchOption SearchTopLevelOnly;
    public static SearchOption SearchAllSubDirectories;
}
public class Microsoft.VisualBasic.FileIO.SpecialDirectories : object {
    public static string MyDocuments { get; }
    public static string MyMusic { get; }
    public static string MyPictures { get; }
    public static string Desktop { get; }
    public static string Programs { get; }
    public static string ProgramFiles { get; }
    public static string Temp { get; }
    public static string CurrentUserApplicationData { get; }
    public static string AllUsersApplicationData { get; }
    public static string get_MyDocuments();
    public static string get_MyMusic();
    public static string get_MyPictures();
    public static string get_Desktop();
    public static string get_Programs();
    public static string get_ProgramFiles();
    public static string get_Temp();
    public static string get_CurrentUserApplicationData();
    public static string get_AllUsersApplicationData();
}
public class Microsoft.VisualBasic.FileIO.TextFieldParser : object {
    [EditorBrowsableAttribute("2")]
public String[] CommentTokens { get; public set; }
    public bool EndOfData { get; }
    [EditorBrowsableAttribute("2")]
public long LineNumber { get; }
    public string ErrorLine { get; }
    public long ErrorLineNumber { get; }
    public FieldType TextFieldType { get; public set; }
    public Int32[] FieldWidths { get; public set; }
    public String[] Delimiters { get; public set; }
    public bool TrimWhiteSpace { get; public set; }
    [EditorBrowsableAttribute("2")]
public bool HasFieldsEnclosedInQuotes { get; public set; }
    public TextFieldParser(string path);
    public TextFieldParser(string path, Encoding defaultEncoding);
    public TextFieldParser(string path, Encoding defaultEncoding, bool detectEncoding);
    public TextFieldParser(Stream stream);
    public TextFieldParser(Stream stream, Encoding defaultEncoding);
    public TextFieldParser(Stream stream, Encoding defaultEncoding, bool detectEncoding);
    public TextFieldParser(Stream stream, Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);
    public TextFieldParser(TextReader reader);
    public String[] get_CommentTokens();
    public void set_CommentTokens(String[] value);
    public bool get_EndOfData();
    public long get_LineNumber();
    public string get_ErrorLine();
    public long get_ErrorLineNumber();
    public FieldType get_TextFieldType();
    public void set_TextFieldType(FieldType value);
    public Int32[] get_FieldWidths();
    public void set_FieldWidths(Int32[] value);
    public String[] get_Delimiters();
    public void set_Delimiters(String[] value);
    public void SetDelimiters(String[] delimiters);
    public void SetFieldWidths(Int32[] fieldWidths);
    public bool get_TrimWhiteSpace();
    public void set_TrimWhiteSpace(bool value);
    [EditorBrowsableAttribute("2")]
public string ReadLine();
    public String[] ReadFields();
    public string PeekChars(int numberOfChars);
    [EditorBrowsableAttribute("2")]
public string ReadToEnd();
    public bool get_HasFieldsEnclosedInQuotes();
    public void set_HasFieldsEnclosedInQuotes(bool value);
    public void Close();
    public sealed virtual override void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void Finalize();
}
public enum Microsoft.VisualBasic.FileIO.UICancelOption : Enum {
    public int value__;
    public static UICancelOption DoNothing;
    public static UICancelOption ThrowException;
}
public enum Microsoft.VisualBasic.FileIO.UIOption : Enum {
    public int value__;
    public static UIOption OnlyErrorDialogs;
    public static UIOption AllDialogs;
}
[SecurityCriticalAttribute]
[StandardModuleAttribute]
public class Microsoft.VisualBasic.FileSystem : object {
    private static FileSystem();
    public static void ChDir(string Path);
    public static void ChDrive(char Drive);
    public static void ChDrive(string Drive);
    public static string CurDir();
    public static string CurDir(char Drive);
    public static string Dir();
    public static string Dir(string PathName, FileAttribute Attributes);
    public static void MkDir(string Path);
    public static void RmDir(string Path);
    public static void FileCopy(string Source, string Destination);
    public static DateTime FileDateTime(string PathName);
    public static long FileLen(string PathName);
    public static FileAttribute GetAttr(string PathName);
    public static void Kill(string PathName);
    public static void SetAttr(string PathName, FileAttribute Attributes);
    public static void FileOpen(int FileNumber, string FileName, OpenMode Mode, OpenAccess Access, OpenShare Share, int RecordLength);
    public static void FileClose(Int32[] FileNumbers);
    public static void FileGetObject(int FileNumber, Object& Value, long RecordNumber);
    public static void FileGet(int FileNumber, ValueType& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Array& Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    public static void FileGet(int FileNumber, Boolean& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Byte& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int16& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int32& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Int64& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Char& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Single& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Double& Value, long RecordNumber);
    public static void FileGet(int FileNumber, Decimal& Value, long RecordNumber);
    public static void FileGet(int FileNumber, String& Value, long RecordNumber, bool StringIsFixedLength);
    public static void FileGet(int FileNumber, DateTime& Value, long RecordNumber);
    public static void FilePutObject(int FileNumber, object Value, long RecordNumber);
    [ObsoleteAttribute("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")]
public static void FilePut(object FileNumber, object Value, object RecordNumber);
    public static void FilePut(int FileNumber, ValueType Value, long RecordNumber);
    public static void FilePut(int FileNumber, Array Value, long RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength);
    public static void FilePut(int FileNumber, bool Value, long RecordNumber);
    public static void FilePut(int FileNumber, byte Value, long RecordNumber);
    public static void FilePut(int FileNumber, short Value, long RecordNumber);
    public static void FilePut(int FileNumber, int Value, long RecordNumber);
    public static void FilePut(int FileNumber, long Value, long RecordNumber);
    public static void FilePut(int FileNumber, char Value, long RecordNumber);
    public static void FilePut(int FileNumber, float Value, long RecordNumber);
    public static void FilePut(int FileNumber, double Value, long RecordNumber);
    public static void FilePut(int FileNumber, decimal Value, long RecordNumber);
    public static void FilePut(int FileNumber, string Value, long RecordNumber, bool StringIsFixedLength);
    public static void FilePut(int FileNumber, DateTime Value, long RecordNumber);
    public static void Print(int FileNumber, Object[] Output);
    public static void PrintLine(int FileNumber, Object[] Output);
    public static void Input(int FileNumber, Object& Value);
    public static void Input(int FileNumber, Boolean& Value);
    public static void Input(int FileNumber, Byte& Value);
    public static void Input(int FileNumber, Int16& Value);
    public static void Input(int FileNumber, Int32& Value);
    public static void Input(int FileNumber, Int64& Value);
    public static void Input(int FileNumber, Char& Value);
    public static void Input(int FileNumber, Single& Value);
    public static void Input(int FileNumber, Double& Value);
    public static void Input(int FileNumber, Decimal& Value);
    public static void Input(int FileNumber, String& Value);
    public static void Input(int FileNumber, DateTime& Value);
    public static void Write(int FileNumber, Object[] Output);
    public static void WriteLine(int FileNumber, Object[] Output);
    public static string InputString(int FileNumber, int CharCount);
    public static string LineInput(int FileNumber);
    public static void Lock(int FileNumber);
    public static void Lock(int FileNumber, long Record);
    public static void Lock(int FileNumber, long FromRecord, long ToRecord);
    public static void Unlock(int FileNumber);
    public static void Unlock(int FileNumber, long Record);
    public static void Unlock(int FileNumber, long FromRecord, long ToRecord);
    public static void FileWidth(int FileNumber, int RecordWidth);
    public static int FreeFile();
    public static void Seek(int FileNumber, long Position);
    public static long Seek(int FileNumber);
    public static bool EOF(int FileNumber);
    public static long Loc(int FileNumber);
    public static long LOF(int FileNumber);
    public static TabInfo TAB();
    public static TabInfo TAB(short Column);
    public static SpcInfo SPC(short Count);
    public static OpenMode FileAttr(int FileNumber);
    public static void Reset();
    public static void Rename(string OldPath, string NewPath);
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Financial : object {
    private static Financial();
    public static double DDB(double Cost, double Salvage, double Life, double Period, double Factor);
    public static double FV(double Rate, double NPer, double Pmt, double PV, DueDate Due);
    public static double IPmt(double Rate, double Per, double NPer, double PV, double FV, DueDate Due);
    public static double IRR(Double[]& ValueArray, double Guess);
    public static double MIRR(Double[]& ValueArray, double FinanceRate, double ReinvestRate);
    public static double NPer(double Rate, double Pmt, double PV, double FV, DueDate Due);
    public static double NPV(double Rate, Double[]& ValueArray);
    public static double Pmt(double Rate, double NPer, double PV, double FV, DueDate Due);
    public static double PPmt(double Rate, double Per, double NPer, double PV, double FV, DueDate Due);
    public static double PV(double Rate, double NPer, double Pmt, double FV, DueDate Due);
    public static double Rate(double NPer, double Pmt, double PV, double FV, DueDate Due, double Guess);
    public static double SLN(double Cost, double Salvage, double Life);
    public static double SYD(double Cost, double Salvage, double Life, double Period);
}
public enum Microsoft.VisualBasic.FirstDayOfWeek : Enum {
    public int value__;
    public static FirstDayOfWeek System;
    public static FirstDayOfWeek Sunday;
    public static FirstDayOfWeek Monday;
    public static FirstDayOfWeek Tuesday;
    public static FirstDayOfWeek Wednesday;
    public static FirstDayOfWeek Thursday;
    public static FirstDayOfWeek Friday;
    public static FirstDayOfWeek Saturday;
}
public enum Microsoft.VisualBasic.FirstWeekOfYear : Enum {
    public int value__;
    public static FirstWeekOfYear System;
    public static FirstWeekOfYear Jan1;
    public static FirstWeekOfYear FirstFourDays;
    public static FirstWeekOfYear FirstFullWeek;
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Globals : object {
    public static string ScriptEngine { get; }
    public static int ScriptEngineMajorVersion { get; }
    public static int ScriptEngineMinorVersion { get; }
    public static int ScriptEngineBuildVersion { get; }
    public static string get_ScriptEngine();
    public static int get_ScriptEngineMajorVersion();
    public static int get_ScriptEngineMinorVersion();
    public static int get_ScriptEngineBuildVersion();
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.HideModuleNameAttribute : Attribute {
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Information : object {
    private static Information();
    public static ErrObject Err();
    [EditorBrowsableAttribute("1")]
public static int Erl();
    public static bool IsArray(object VarName);
    public static bool IsDate(object Expression);
    public static bool IsDBNull(object Expression);
    public static bool IsNothing(object Expression);
    public static bool IsError(object Expression);
    public static bool IsReference(object Expression);
    public static int LBound(Array Array, int Rank);
    public static int UBound(Array Array, int Rank);
    public static int QBColor(int Color);
    public static int RGB(int Red, int Green, int Blue);
    public static VariantType VarType(object VarName);
    public static bool IsNumeric(object Expression);
    public static string TypeName(object VarName);
    public static string SystemTypeName(string VbName);
    public static string VbTypeName(string UrtName);
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Interaction : object {
    private static Interaction();
    [SecuritySafeCriticalAttribute]
public static int Shell(string PathName, AppWinStyle Style, bool Wait, int Timeout);
    [SecuritySafeCriticalAttribute]
public static void AppActivate(int ProcessId);
    [SecuritySafeCriticalAttribute]
public static void AppActivate(string Title);
    [SecuritySafeCriticalAttribute]
public static string Command();
    [SecuritySafeCriticalAttribute]
public static string Environ(int Expression);
    public static string Environ(string Expression);
    [SecuritySafeCriticalAttribute]
public static void Beep();
    public static string InputBox(string Prompt, string Title, string DefaultResponse, int XPos, int YPos);
    public static MsgBoxResult MsgBox(object Prompt, MsgBoxStyle Buttons, object Title);
    public static object Choose(double Index, Object[] Choice);
    public static object IIf(bool Expression, object TruePart, object FalsePart);
    public static string Partition(long Number, long Start, long Stop, long Interval);
    public static object Switch(Object[] VarExpr);
    public static void DeleteSetting(string AppName, string Section, string Key);
    public static String[0...,0...] GetAllSettings(string AppName, string Section);
    public static string GetSetting(string AppName, string Section, string Key, string Default);
    public static void SaveSetting(string AppName, string Section, string Key, string Setting);
    [SecuritySafeCriticalAttribute]
public static object CreateObject(string ProgId, string ServerName);
    [SecuritySafeCriticalAttribute]
public static object GetObject(string PathName, string Class);
    public static object CallByName(object ObjectRef, string ProcName, CallType UseCallType, Object[] Args);
}
public class Microsoft.VisualBasic.Logging.AspLog : Log {
    [SecuritySafeCriticalAttribute]
public AspLog(string name);
    [SecuritySafeCriticalAttribute]
protected internal virtual void InitializeWithDefaultsSinceNoConfigExists();
}
public enum Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption : Enum {
    public int value__;
    public static DiskSpaceExhaustedOption ThrowException;
    public static DiskSpaceExhaustedOption DiscardMessages;
}
[ComVisibleAttribute("False")]
public class Microsoft.VisualBasic.Logging.FileLogTraceListener : TraceListener {
    public LogFileLocation Location { get; public set; }
    public bool AutoFlush { get; public set; }
    public bool IncludeHostName { get; public set; }
    public bool Append { get; public set; }
    public DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; public set; }
    public string BaseFileName { get; public set; }
    public string FullLogFileName { get; }
    public LogFileCreationScheduleOption LogFileCreationSchedule { get; public set; }
    public long MaxFileSize { get; public set; }
    public long ReserveDiskSpace { get; public set; }
    public string Delimiter { get; public set; }
    public Encoding Encoding { get; public set; }
    public string CustomLocation { get; public set; }
    private static FileLogTraceListener();
    public FileLogTraceListener(string name);
    public LogFileLocation get_Location();
    public void set_Location(LogFileLocation value);
    public bool get_AutoFlush();
    [SecuritySafeCriticalAttribute]
public void set_AutoFlush(bool value);
    public bool get_IncludeHostName();
    [SecuritySafeCriticalAttribute]
public void set_IncludeHostName(bool value);
    public bool get_Append();
    [SecuritySafeCriticalAttribute]
public void set_Append(bool value);
    public DiskSpaceExhaustedOption get_DiskSpaceExhaustedBehavior();
    [SecuritySafeCriticalAttribute]
public void set_DiskSpaceExhaustedBehavior(DiskSpaceExhaustedOption value);
    public string get_BaseFileName();
    public void set_BaseFileName(string value);
    [SecuritySafeCriticalAttribute]
public string get_FullLogFileName();
    public LogFileCreationScheduleOption get_LogFileCreationSchedule();
    public void set_LogFileCreationSchedule(LogFileCreationScheduleOption value);
    public long get_MaxFileSize();
    [SecuritySafeCriticalAttribute]
public void set_MaxFileSize(long value);
    public long get_ReserveDiskSpace();
    [SecuritySafeCriticalAttribute]
public void set_ReserveDiskSpace(long value);
    public string get_Delimiter();
    public void set_Delimiter(string value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    [SecuritySafeCriticalAttribute]
public string get_CustomLocation();
    public void set_CustomLocation(string value);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    public virtual void Flush();
    public virtual void Close();
    protected virtual String[] GetSupportedAttributes();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.VisualBasic.Logging.Log : object {
    [EditorBrowsableAttribute("2")]
public TraceSource TraceSource { get; }
    public FileLogTraceListener DefaultFileLogWriter { get; }
    private static Log();
    [SecuritySafeCriticalAttribute]
public Log(string name);
    public void WriteEntry(string message);
    public void WriteEntry(string message, TraceEventType severity);
    public void WriteEntry(string message, TraceEventType severity, int id);
    public void WriteException(Exception ex);
    public void WriteException(Exception ex, TraceEventType severity, string additionalInfo);
    public void WriteException(Exception ex, TraceEventType severity, string additionalInfo, int id);
    public TraceSource get_TraceSource();
    [SecuritySafeCriticalAttribute]
public FileLogTraceListener get_DefaultFileLogWriter();
    [SecuritySafeCriticalAttribute]
protected internal virtual void InitializeWithDefaultsSinceNoConfigExists();
}
public enum Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption : Enum {
    public int value__;
    public static LogFileCreationScheduleOption None;
    public static LogFileCreationScheduleOption Daily;
    public static LogFileCreationScheduleOption Weekly;
}
public enum Microsoft.VisualBasic.Logging.LogFileLocation : Enum {
    public int value__;
    public static LogFileLocation TempDirectory;
    public static LogFileLocation LocalUserApplicationDirectory;
    public static LogFileLocation CommonApplicationDirectory;
    public static LogFileLocation ExecutableDirectory;
    public static LogFileLocation Custom;
}
public enum Microsoft.VisualBasic.MsgBoxResult : Enum {
    public int value__;
    public static MsgBoxResult Ok;
    public static MsgBoxResult Cancel;
    public static MsgBoxResult Abort;
    public static MsgBoxResult Retry;
    public static MsgBoxResult Ignore;
    public static MsgBoxResult Yes;
    public static MsgBoxResult No;
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.MsgBoxStyle : Enum {
    public int value__;
    public static MsgBoxStyle OkOnly;
    public static MsgBoxStyle OkCancel;
    public static MsgBoxStyle AbortRetryIgnore;
    public static MsgBoxStyle YesNoCancel;
    public static MsgBoxStyle YesNo;
    public static MsgBoxStyle RetryCancel;
    public static MsgBoxStyle Critical;
    public static MsgBoxStyle Question;
    public static MsgBoxStyle Exclamation;
    public static MsgBoxStyle Information;
    public static MsgBoxStyle DefaultButton1;
    public static MsgBoxStyle DefaultButton2;
    public static MsgBoxStyle DefaultButton3;
    public static MsgBoxStyle ApplicationModal;
    public static MsgBoxStyle SystemModal;
    public static MsgBoxStyle MsgBoxHelp;
    public static MsgBoxStyle MsgBoxRight;
    public static MsgBoxStyle MsgBoxRtlReading;
    public static MsgBoxStyle MsgBoxSetForeground;
}
[EditorBrowsableAttribute("2")]
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.MyGroupCollectionAttribute : Attribute {
    public string MyGroupName { get; }
    public string CreateMethod { get; }
    public string DisposeMethod { get; }
    public string DefaultInstanceAlias { get; }
    public MyGroupCollectionAttribute(string typeToCollect, string createInstanceMethodName, string disposeInstanceMethodName, string defaultInstanceAlias);
    public string get_MyGroupName();
    public string get_CreateMethod();
    public string get_DisposeMethod();
    public string get_DefaultInstanceAlias();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.ClipboardProxy : object {
    public string GetText();
    public string GetText(TextDataFormat format);
    public bool ContainsText();
    public bool ContainsText(TextDataFormat format);
    public void SetText(string text);
    public void SetText(string text, TextDataFormat format);
    public Image GetImage();
    public bool ContainsImage();
    public void SetImage(Image image);
    public Stream GetAudioStream();
    public bool ContainsAudio();
    public void SetAudio(Byte[] audioBytes);
    public void SetAudio(Stream audioStream);
    public StringCollection GetFileDropList();
    public bool ContainsFileDropList();
    public void SetFileDropList(StringCollection filePaths);
    public object GetData(string format);
    public bool ContainsData(string format);
    public void SetData(string format, object data);
    public void Clear();
    [EditorBrowsableAttribute("2")]
public IDataObject GetDataObject();
    [EditorBrowsableAttribute("2")]
public void SetDataObject(DataObject data);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.FileSystemProxy : object {
    public ReadOnlyCollection`1<DriveInfo> Drives { get; }
    public SpecialDirectoriesProxy SpecialDirectories { get; }
    public string CurrentDirectory { get; public set; }
    public ReadOnlyCollection`1<DriveInfo> get_Drives();
    public SpecialDirectoriesProxy get_SpecialDirectories();
    public string get_CurrentDirectory();
    public void set_CurrentDirectory(string value);
    public bool DirectoryExists(string directory);
    public bool FileExists(string file);
    public void CreateDirectory(string directory);
    public DirectoryInfo GetDirectoryInfo(string directory);
    public FileInfo GetFileInfo(string file);
    public DriveInfo GetDriveInfo(string drive);
    public ReadOnlyCollection`1<string> GetFiles(string directory);
    public ReadOnlyCollection`1<string> GetFiles(string directory, SearchOption searchType, String[] wildcards);
    public ReadOnlyCollection`1<string> GetDirectories(string directory);
    public ReadOnlyCollection`1<string> GetDirectories(string directory, SearchOption searchType, String[] wildcards);
    public ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType);
    public ReadOnlyCollection`1<string> FindInFiles(string directory, string containsText, bool ignoreCase, SearchOption searchType, String[] fileWildcards);
    public string GetParentPath(string path);
    public string CombinePath(string baseDirectory, string relativePath);
    public string GetName(string path);
    public string GetTempFileName();
    public string ReadAllText(string file);
    public string ReadAllText(string file, Encoding encoding);
    public Byte[] ReadAllBytes(string file);
    public void WriteAllText(string file, string text, bool append);
    public void WriteAllText(string file, string text, bool append, Encoding encoding);
    public void WriteAllBytes(string file, Byte[] data, bool append);
    public void CopyFile(string sourceFileName, string destinationFileName);
    public void CopyFile(string sourceFileName, string destinationFileName, bool overwrite);
    public void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public void CopyFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public void MoveFile(string sourceFileName, string destinationFileName);
    public void MoveFile(string sourceFileName, string destinationFileName, bool overwrite);
    public void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI);
    public void MoveFile(string sourceFileName, string destinationFileName, UIOption showUI, UICancelOption onUserCancel);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public void CopyDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, bool overwrite);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName, UIOption showUI, UICancelOption onUserCancel);
    public void DeleteFile(string file);
    public void DeleteFile(string file, UIOption showUI, RecycleOption recycle);
    public void DeleteFile(string file, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public void DeleteDirectory(string directory, DeleteDirectoryOption onDirectoryNotEmpty);
    public void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle);
    public void DeleteDirectory(string directory, UIOption showUI, RecycleOption recycle, UICancelOption onUserCancel);
    public void RenameFile(string file, string newName);
    public void RenameDirectory(string directory, string newName);
    public TextFieldParser OpenTextFieldParser(string file);
    public TextFieldParser OpenTextFieldParser(string file, String[] delimiters);
    public TextFieldParser OpenTextFieldParser(string file, Int32[] fieldWidths);
    public StreamReader OpenTextFileReader(string file);
    public StreamReader OpenTextFileReader(string file, Encoding encoding);
    public StreamWriter OpenTextFileWriter(string file, bool append);
    public StreamWriter OpenTextFileWriter(string file, bool append, Encoding encoding);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.Internal.ContextValue`1 : object {
    public T Value { get; public set; }
    [SecuritySafeCriticalAttribute]
public T get_Value();
    [SecuritySafeCriticalAttribute]
public void set_Value(T value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.RegistryProxy : object {
    public RegistryKey CurrentUser { get; }
    public RegistryKey LocalMachine { get; }
    public RegistryKey ClassesRoot { get; }
    public RegistryKey Users { get; }
    public RegistryKey PerformanceData { get; }
    public RegistryKey CurrentConfig { get; }
    [ObsoleteAttribute("The DynData registry key works only on Win9x, which is not supported by this version of the .NET Framework.  Use the PerformanceData registry key instead.  This property will be removed from a future version of the framework.")]
public RegistryKey DynData { get; }
    public RegistryKey get_CurrentUser();
    public RegistryKey get_LocalMachine();
    public RegistryKey get_ClassesRoot();
    public RegistryKey get_Users();
    public RegistryKey get_PerformanceData();
    public RegistryKey get_CurrentConfig();
    public RegistryKey get_DynData();
    public object GetValue(string keyName, string valueName, object defaultValue);
    public void SetValue(string keyName, string valueName, object value);
    public void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.MyServices.SpecialDirectoriesProxy : object {
    public string MyDocuments { get; }
    public string MyMusic { get; }
    public string MyPictures { get; }
    public string Desktop { get; }
    public string Programs { get; }
    public string ProgramFiles { get; }
    public string Temp { get; }
    public string CurrentUserApplicationData { get; }
    public string AllUsersApplicationData { get; }
    public string get_MyDocuments();
    public string get_MyMusic();
    public string get_MyPictures();
    public string get_Desktop();
    public string get_Programs();
    public string get_ProgramFiles();
    public string get_Temp();
    public string get_CurrentUserApplicationData();
    public string get_AllUsersApplicationData();
}
public enum Microsoft.VisualBasic.OpenAccess : Enum {
    public int value__;
    public static OpenAccess Default;
    public static OpenAccess Read;
    public static OpenAccess ReadWrite;
    public static OpenAccess Write;
}
public enum Microsoft.VisualBasic.OpenMode : Enum {
    public int value__;
    public static OpenMode Input;
    public static OpenMode Output;
    public static OpenMode Random;
    public static OpenMode Append;
    public static OpenMode Binary;
}
public enum Microsoft.VisualBasic.OpenShare : Enum {
    public int value__;
    public static OpenShare Default;
    public static OpenShare Shared;
    public static OpenShare LockRead;
    public static OpenShare LockReadWrite;
    public static OpenShare LockWrite;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.SpcInfo : ValueType {
    public short Count;
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Strings : object {
    private static Strings();
    public static int Asc(char String);
    public static int Asc(string String);
    public static int AscW(string String);
    public static int AscW(char String);
    public static char Chr(int CharCode);
    public static char ChrW(int CharCode);
    public static String[] Filter(Object[] Source, string Match, bool Include, CompareMethod Compare);
    public static String[] Filter(String[] Source, string Match, bool Include, CompareMethod Compare);
    public static int InStr(string String1, string String2, CompareMethod Compare);
    public static int InStr(int Start, string String1, string String2, CompareMethod Compare);
    public static int InStrRev(string StringCheck, string StringMatch, int Start, CompareMethod Compare);
    public static string Join(Object[] SourceArray, string Delimiter);
    public static string Join(String[] SourceArray, string Delimiter);
    public static string LCase(string Value);
    public static char LCase(char Value);
    public static int Len(bool Expression);
    [CLSCompliantAttribute("False")]
public static int Len(sbyte Expression);
    public static int Len(byte Expression);
    public static int Len(short Expression);
    [CLSCompliantAttribute("False")]
public static int Len(ushort Expression);
    public static int Len(int Expression);
    [CLSCompliantAttribute("False")]
public static int Len(UInt32 Expression);
    public static int Len(long Expression);
    [CLSCompliantAttribute("False")]
public static int Len(ulong Expression);
    public static int Len(decimal Expression);
    public static int Len(float Expression);
    public static int Len(double Expression);
    public static int Len(DateTime Expression);
    public static int Len(char Expression);
    public static int Len(string Expression);
    [SecuritySafeCriticalAttribute]
public static int Len(object Expression);
    public static string Replace(string Expression, string Find, string Replacement, int Start, int Count, CompareMethod Compare);
    public static string Space(int Number);
    public static String[] Split(string Expression, string Delimiter, int Limit, CompareMethod Compare);
    public static string LSet(string Source, int Length);
    public static string RSet(string Source, int Length);
    public static object StrDup(int Number, object Character);
    public static string StrDup(int Number, char Character);
    public static string StrDup(int Number, string Character);
    public static string StrReverse(string Expression);
    public static string UCase(string Value);
    public static char UCase(char Value);
    public static string Format(object Expression, string Style);
    public static string FormatCurrency(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static string FormatDateTime(DateTime Expression, DateFormat NamedFormat);
    public static string FormatNumber(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static string FormatPercent(object Expression, int NumDigitsAfterDecimal, TriState IncludeLeadingDigit, TriState UseParensForNegativeNumbers, TriState GroupDigits);
    public static char GetChar(string str, int Index);
    public static string Left(string str, int Length);
    public static string LTrim(string str);
    public static string Mid(string str, int Start);
    public static string Mid(string str, int Start, int Length);
    public static string Right(string str, int Length);
    public static string RTrim(string str);
    public static string Trim(string str);
    public static int StrComp(string String1, string String2, CompareMethod Compare);
    public static string StrConv(string str, VbStrConv Conversion, int LocaleID);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.TabInfo : ValueType {
    public short Column;
}
public enum Microsoft.VisualBasic.TriState : Enum {
    public int value__;
    public static TriState False;
    public static TriState True;
    public static TriState UseDefault;
}
public enum Microsoft.VisualBasic.VariantType : Enum {
    public int value__;
    public static VariantType Empty;
    public static VariantType Null;
    public static VariantType Short;
    public static VariantType Integer;
    public static VariantType Single;
    public static VariantType Double;
    public static VariantType Currency;
    public static VariantType Date;
    public static VariantType String;
    public static VariantType Object;
    public static VariantType Error;
    public static VariantType Boolean;
    public static VariantType Variant;
    public static VariantType DataObject;
    public static VariantType Decimal;
    public static VariantType Byte;
    public static VariantType Char;
    public static VariantType Long;
    public static VariantType UserDefinedType;
    public static VariantType Array;
}
[AttributeUsageAttribute("256")]
public class Microsoft.VisualBasic.VBFixedArrayAttribute : Attribute {
    public Int32[] Bounds { get; }
    public int Length { get; }
    public VBFixedArrayAttribute(int UpperBound1);
    public VBFixedArrayAttribute(int UpperBound1, int UpperBound2);
    public Int32[] get_Bounds();
    public int get_Length();
}
[AttributeUsageAttribute("256")]
public class Microsoft.VisualBasic.VBFixedStringAttribute : Attribute {
    public int Length { get; }
    public VBFixedStringAttribute(int Length);
    public int get_Length();
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.VBMath : object {
    public static float Rnd();
    public static float Rnd(float Number);
    public static void Randomize();
    public static void Randomize(double Number);
}
[FlagsAttribute]
public enum Microsoft.VisualBasic.VbStrConv : Enum {
    public int value__;
    public static VbStrConv None;
    public static VbStrConv Uppercase;
    public static VbStrConv Lowercase;
    public static VbStrConv ProperCase;
    public static VbStrConv Wide;
    public static VbStrConv Narrow;
    public static VbStrConv Katakana;
    public static VbStrConv Hiragana;
    public static VbStrConv SimplifiedChinese;
    public static VbStrConv TraditionalChinese;
    public static VbStrConv LinguisticCasing;
}
