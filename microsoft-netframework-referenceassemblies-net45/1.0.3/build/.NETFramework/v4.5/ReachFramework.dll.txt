internal class Microsoft.Internal.AlphaFlattener.BrushProxy : object {
    public Brush Brush { get; }
    public double Opacity { get; public set; }
    public BrushProxy OpacityMask { get; public set; }
    public Color BeforeFill { get; }
    public Color AfterFill { get; }
    public ArrayList BrushList { get; }
    public bool OpacityOnly { get; public set; }
    public BrushTypes BrushType { get; }
    public static BrushProxy EmptyBrush { get; }
    private static BrushProxy();
    public virtual string ToString();
    public bool MakeBrushAbsolute(Rect bounds);
    public void AddTo(BrushProxy bp);
    public BrushProxy Clone();
    public BrushProxy PushOpacity(double opacity, BrushProxy opacityMask);
    public bool IsOpaque();
    public bool IsTransparent();
    public void ApplyTransform(Matrix trans);
    public BrushProxy ApplyTransformCopy(Matrix trans);
    public BrushProxy BlendBrush(BrushProxy brushB);
    public BitmapSource CreateBrushImage_ID(Matrix mat, int width, int height);
    [SecurityCriticalAttribute]
public Byte[] CreateBrushImage(Matrix mat, int width, int height);
    public Brush GetRealBrush();
    public void UpdateRealBrush(bool selfContained);
    public int GetBrushDepth();
    public double GetDrawingCost(Size size);
    public bool IsWhite();
    public void CloneRealBrush();
    public bool IsViewportCoverBounds(Rect bounds);
    public bool IsTiled(Rect bounds);
    public Primitive GetDrawingPrimitive();
    public void DrawGeometry(DrawingContext dc, Pen pen, Geometry geo);
    internal static bool IsTileCompleteCover(TileBrush brush);
    public static bool IsOpaqueWhite(Brush brush);
    public static bool IsOpaqueBlack(Brush brush);
    public static BrushProxy CreateColorBrush(Color color);
    public static BrushProxy CreateBrush(Brush brush, Rect bounds);
    public static BrushProxy CreateOpacityMaskBrush(Brush brush, Rect bounds);
    public static BrushProxy CreateUserBrush(Brush brush, Rect bounds, Matrix brushToWorldTransformHint, TreeWalkProgress treeWalkProgress);
    public static bool IsEmpty(Brush brush);
    public static Brush ReduceBrush(Brush brush, Rect bounds, Matrix brushToWorldTransformHint, Size pageSize, TreeWalkProgress treeWalkProgress);
    public static BrushProxy BlendBrush(BrushProxy one, BrushProxy two);
    public static BrushProxy BlendColorWithBrush(bool opacityOnly, Color colorA, BrushProxy brushB, bool reverse);
    public Brush get_Brush();
    public double get_Opacity();
    public void set_Opacity(double value);
    public BrushProxy get_OpacityMask();
    public void set_OpacityMask(BrushProxy value);
    public Color get_BeforeFill();
    public Color get_AfterFill();
    public ArrayList get_BrushList();
    public bool get_OpacityOnly();
    public void set_OpacityOnly(bool value);
    public BrushTypes get_BrushType();
    public static BrushProxy get_EmptyBrush();
}
internal class Microsoft.Internal.AlphaFlattener.BrushProxyDecomposer : object {
    public BrushProxyDecomposer(ILegacyDevice dc);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Comment(string message);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Push(double opacity, BrushProxy opacityMask);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Pop();
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawGeometry(BrushProxy brush, PenProxy pen, Geometry geometry, Geometry clip, Matrix brushTrans, ProxyDrawingFlags flags);
    [SecurityCriticalAttribute]
private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawImage(ImageProxy image, Rect dest, Geometry clip, Matrix trans);
    [SecurityCriticalAttribute]
private sealed virtual override bool Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawGlyphs(GlyphRun glyphrun, Geometry clip, Matrix trans, BrushProxy foreground);
}
internal class Microsoft.Internal.AlphaFlattener.CanvasPrimitive : Primitive {
    public ArrayList Children { get; }
    public bool IsOpaque { get; }
    public bool IsTransparent { get; }
    public ArrayList get_Children();
    public virtual void OnRender(DrawingContext dc);
    public virtual Geometry GetShapeGeometry();
    public virtual void Exclude(Geometry g);
    public virtual BrushProxy BlendBrush(BrushProxy brush);
    public virtual void BlendOverImage(ImageProxy image, Matrix trans);
    public virtual Primitive BlendOpacityMaskWithColor(BrushProxy color);
    public virtual bool get_IsOpaque();
    public virtual bool get_IsTransparent();
    protected virtual void CloneMembers();
    protected virtual Rect GetBoundsCore();
    protected virtual double GetBaseDrawingCost(Matrix worldTransform);
}
internal class Microsoft.Internal.AlphaFlattener.Cluster : object {
    public void Render(List`1<PrimitiveInfo> commands, IProxyDrawingContext dc);
    public static void CheckForRasterization(List`1<Cluster> clusters, List`1<PrimitiveInfo> commands);
    public static List`1<Cluster> CalculateCluster(List`1<PrimitiveInfo> commands, int count, bool disjoint, List`1[] oldUnderlay);
}
internal static class Microsoft.Internal.AlphaFlattener.Configuration : object {
    public static int MaxGradientSteps;
    public static bool ForceAlphaOpaque;
    public static bool BlendAlphaWithWhite;
    public static double GradientDecompositionDensity;
    public static bool DisplayPageDebugHeader;
    public static int DecompositionDepth;
    public static int MaximumTransparencyLayer;
    public static int RasterizationDPI;
    public static string OutputFile;
    private static Configuration();
    public static bool SetValue(string key, object val);
    internal static double RasterizationCost(double width, double height);
    internal static double RasterizationCost(double size);
}
internal class Microsoft.Internal.AlphaFlattener.Coordinate : object {
    public double value;
    public int index;
    public bool active;
    public Coordinate top;
    public Coordinate bottom;
    public Coordinate(double v, int i);
}
internal class Microsoft.Internal.AlphaFlattener.CoordinateComparer : object {
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
internal class Microsoft.Internal.AlphaFlattener.CoordinateSearcher : object {
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Internal.AlphaFlattener.DisplayList : object {
    public bool m_DisJoint;
    public double m_width;
    public double m_height;
    protected List`1<PrimitiveInfo> _commands;
    public Rect Item { get; }
    public List`1<PrimitiveInfo> Commands { get; }
    public DisplayList(bool disJoint, double width, double height);
    internal static bool IsWhitePrimitive(Primitive p);
    public void RecordPrimitive(Primitive p);
    public Rect get_Item(int index);
    public void ReportOverlapping(int one, int two);
    public void CalculateIntersections(int count);
    public List`1<PrimitiveInfo> get_Commands();
}
internal class Microsoft.Internal.AlphaFlattener.DisplayListDrawingContext : object {
    public DisplayListDrawingContext(Flattener flattener, double opacity, BrushProxy opacityMask, Matrix trans, Geometry clip);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Comment(string message);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Push(double opacity, BrushProxy opacityMask);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.Pop();
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawGeometry(BrushProxy brush, PenProxy pen, Geometry geometry, Geometry clip, Matrix brushTrans, ProxyDrawingFlags flags);
    private sealed virtual override void Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawImage(ImageProxy image, Rect dest, Geometry clip, Matrix trans);
    private sealed virtual override bool Microsoft.Internal.AlphaFlattener.IProxyDrawingContext.DrawGlyphs(GlyphRun glyphrun, Geometry clip, Matrix trans, BrushProxy foreground);
}
internal class Microsoft.Internal.AlphaFlattener.FillVisual : DrawingVisual {
    public FillVisual(BrushProxy brush, Matrix mat, int width, int height);
}
internal class Microsoft.Internal.AlphaFlattener.Flattener : object {
    public Flattener(bool disJoint, double width, double height);
    public void AddPrimitive(Primitive p);
    public void TreeFlatten(Primitive tree, Geometry clip, Matrix transform, double opacity, BrushProxy opacityMask);
    public void AlphaFlatten(IProxyDrawingContext dc, bool disjoint);
    public static void Convert(Primitive tree, ILegacyDevice dc, double width, double height, double dpix, double dpiy, Nullable`1<OutputQuality> quality);
}
internal class Microsoft.Internal.AlphaFlattener.GeometryAnalyzer : CapacityStreamGeometryContext {
    public static void Analyze(PathGeometryData geometryData, Int32& estimatedPointCount);
    public static void Analyze(PathGeometryData geometryData, Nullable`1<Rect> checkRectangular, Int32& estimatedPointCount, Boolean& isRectangle, Boolean& isLineSegment);
    public virtual void BeginFigure(Point startPoint, bool isFilled, bool isClosed);
    public virtual void LineTo(Point point, bool isStroked, bool isSmoothJoin);
    public virtual void QuadraticBezierTo(Point point1, Point point2, bool isStroked, bool isSmoothJoin);
    public virtual void BezierTo(Point point1, Point point2, Point point3, bool isStroked, bool isSmoothJoin);
    public virtual void PolyLineTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void PolyQuadraticBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void PolyBezierTo(IList`1<Point> points, bool isStroked, bool isSmoothJoin);
    public virtual void ArcTo(Point point, Size size, double rotationAngle, bool isLargeArc, SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin);
    internal virtual void SetClosedState(bool closed);
    internal virtual void SetFigureCount(int figureCount);
    internal virtual void SetSegmentCount(int segmentCount);
}
internal class Microsoft.Internal.AlphaFlattener.GeometryPrimitive : Primitive {
    public BrushProxy Brush { get; public set; }
    public PenProxy Pen { get; public set; }
    public Geometry Geometry { get; public set; }
    public Geometry WidenGeometry { get; }
    protected Geometry WidenGeometryCore { get; protected set; }
    public bool IsOpaque { get; }
    public bool IsTransparent { get; }
    public void Widen();
    public Primitive UnfoldDrawingBrush();
    public BrushProxy get_Brush();
    public void set_Brush(BrushProxy value);
    public PenProxy get_Pen();
    public void set_Pen(PenProxy value);
    public Geometry get_Geometry();
    public void set_Geometry(Geometry value);
    public virtual Geometry get_WidenGeometry();
    protected Geometry get_WidenGeometryCore();
    protected void set_WidenGeometryCore(Geometry value);
    public virtual void OnRender(DrawingContext dc);
    public virtual Geometry GetShapeGeometry();
    public virtual void Exclude(Geometry g);
    public virtual BrushProxy BlendBrush(BrushProxy brushA);
    public virtual void BlendOverImage(ImageProxy image, Matrix trans);
    public virtual Primitive BlendOpacityMaskWithColor(BrushProxy color);
    public virtual bool get_IsOpaque();
    public virtual bool get_IsTransparent();
    public virtual void ApplyTransform();
    public virtual bool Optimize();
    public virtual double GetOpacity();
    public virtual void PushOpacity(double opacity, BrushProxy opacityMask);
    protected virtual void CloneMembers();
    protected virtual Rect GetBoundsCore();
    protected virtual double GetBaseDrawingCost(Matrix worldTransform);
}
internal class Microsoft.Internal.AlphaFlattener.GlyphPrimitive : GeometryPrimitive {
    public GlyphRun GlyphRun { get; public set; }
    public Geometry WidenGeometry { get; }
    public GlyphRun get_GlyphRun();
    public void set_GlyphRun(GlyphRun value);
    public virtual Geometry get_WidenGeometry();
    public virtual void OnRender(DrawingContext dc);
    public virtual Geometry GetShapeGeometry();
    public virtual void Exclude(Geometry g);
    public virtual void ApplyTransform();
    public virtual bool Optimize();
    protected virtual Rect GetBoundsCore();
}
internal class Microsoft.Internal.AlphaFlattener.GradientColor : object {
    public GradientColor(GradientStopCollection stops, double opacity, GradientSpreadMethod spread, ColorInterpolationMode ciMode);
    public Color GetInvalidGradientColor();
    public Color GetColor(int i, int steps);
    public double ColorDistance();
    public int BandSteps(double distance);
}
internal class Microsoft.Internal.AlphaFlattener.ImagePrimitive : Primitive {
    public ImageProxy Image { get; public set; }
    public Rect DstRect { get; public set; }
    public bool IsOpaque { get; }
    public bool IsTransparent { get; }
    public ImageProxy get_Image();
    public void set_Image(ImageProxy value);
    public Rect get_DstRect();
    public void set_DstRect(Rect value);
    public virtual void OnRender(DrawingContext dc);
    public virtual Geometry GetShapeGeometry();
    public virtual void Exclude(Geometry g);
    public virtual BrushProxy BlendBrush(BrushProxy brush);
    public virtual void BlendOverImage(ImageProxy image, Matrix trans);
    public virtual Primitive BlendOpacityMaskWithColor(BrushProxy color);
    public virtual bool get_IsOpaque();
    public virtual bool get_IsTransparent();
    public virtual bool Optimize();
    public virtual void PushOpacity(double opacity, BrushProxy opacityMask);
    protected virtual void CloneMembers();
    protected virtual Rect GetBoundsCore();
    protected virtual double GetBaseDrawingCost(Matrix worldTransform);
}
internal class Microsoft.Internal.AlphaFlattener.ImageProxy : object {
    protected int _pixelWidth;
    protected int _pixelHeight;
    protected BitmapSource _image;
    [SecurityCriticalAttribute]
protected Byte[] _pixels;
    public BitmapSource Image { get; }
    public Byte[] Buffer { get; }
    public int PixelWidth { get; }
    public int PixelHeight { get; }
    public ImageProxy(BitmapSource image);
    public BitmapSource get_Image();
    [SecurityCriticalAttribute]
public Byte[] get_Buffer();
    public int get_PixelWidth();
    public int get_PixelHeight();
    [SecurityCriticalAttribute]
public void Scale(double scaleX, double scaleY);
    [SecurityCriticalAttribute]
public void PushOpacity(double opacity, BrushProxy opacityMask, Rect rect, Matrix trans);
    [SecurityCriticalAttribute]
public void BlendUnderColor(Color color, double opacity, bool opacityOnly);
    [SecurityCriticalAttribute]
public void BlendOverColor(Color color, double opacity, bool opacityOnly);
    [SecurityCriticalAttribute]
public void BlendUnderBrush(bool opacityOnly, BrushProxy brush, Matrix trans);
    [SecurityCriticalAttribute]
public void BlendOverBrush(bool opacityOnly, BrushProxy brush, Matrix trans);
    internal static int HasAlpha(BitmapSource bitmap);
    [SecurityCriticalAttribute]
public bool IsOpaque();
    [SecurityCriticalAttribute]
public bool IsTransparent();
    [SecurityCriticalAttribute]
public BitmapSource GetImage();
    [SecurityCriticalAttribute]
public BitmapSource GetClippedImage(Rect bounds, Rect& clipBounds);
    public ImageProxy Clone();
}
internal interface Microsoft.Internal.AlphaFlattener.IProxyDrawingContext {
    public abstract virtual void Push(double opacity, BrushProxy opacityMask);
    public abstract virtual void Pop();
    public abstract virtual void DrawGeometry(BrushProxy brush, PenProxy pen, Geometry geometry, Geometry clip, Matrix brushTrans, ProxyDrawingFlags flags);
    public abstract virtual void DrawImage(ImageProxy image, Rect dest, Geometry clip, Matrix trans);
    public abstract virtual bool DrawGlyphs(GlyphRun glyphrun, Geometry clip, Matrix trans, BrushProxy foreground);
    public abstract virtual void Comment(string message);
}
internal class Microsoft.Internal.AlphaFlattener.LinearGradientFlattener : object {
    public int Steps { get; }
    public LinearGradientFlattener(LinearGradientBrush brush, Geometry geometry, double opacity);
    public Geometry GetSlice(int i, Color& color);
    public int get_Steps();
}
internal class Microsoft.Internal.AlphaFlattener.MetroDevice0 : object {
    public void StartDocument();
    public void EndDocument();
    public void AbortDocument();
    public bool StartPage();
    public void FlushPage(ILegacyDevice sink, double width, double height, Nullable`1<OutputQuality> outputQuality);
    public void DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    public void DrawImage(ImageSource image, Rect rectangle);
    public void DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    public void Push(Matrix transform, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive);
    public void Pop();
}
internal class Microsoft.Internal.AlphaFlattener.MetroToGdiConverter : object {
    protected static object s_TestingHook;
    protected MetroDevice0 m_Flattener;
    protected ILegacyDevice m_GDIExporter;
    protected PrintQueue m_PrintQueue;
    protected PrintTicketConverter m_Converter;
    protected PrintTicketCache m_printTicketCache;
    [SecurityCriticalAttribute]
protected Byte[] m_Devmode;
    protected double m_PageWidth;
    protected double m_PageHeight;
    protected Nullable`1<OutputQuality> m_OutputQuality;
    public MetroToGdiConverter(PrintQueue queue);
    [SecurityCriticalAttribute]
public int StartDocument(string jobName, PrintTicket ticket);
    public void EndDocument();
    public void EndDocument(bool abort);
    [SecurityCriticalAttribute]
public void CreateDeviceContext(string jobName, PrintTicket ticket);
    public void DeleteDeviceContext();
    public void StartDocumentWithoutCreatingDC(string jobName);
    public string ExtEscGetName();
    public bool ExtEscMXDWPassThru();
    public void AbortDocument();
    [SecurityCriticalAttribute]
public void StartPage(PrintTicket ticket);
    public void FlushPage();
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawImage(ImageSource image, Rect rectangle);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Push(Matrix transform, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive, string nameAttr, Visual node, Uri navigateUri, EdgeMode edgeMode);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Pop();
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Comment(string message);
    public static void TestingHook(object obj);
}
internal class Microsoft.Internal.AlphaFlattener.MyColor : ValueType {
    public float m_a;
    public float m_r;
    public float m_g;
    public float m_b;
    public MyColor(Color c, ColorInterpolationMode ciMode);
    public Color ToColor(ColorInterpolationMode ciMode);
    public static MyColor Interpolate(MyColor c0, float a, MyColor c1, float b);
}
internal class Microsoft.Internal.AlphaFlattener.OutputContext : object {
    public OutputContext(DrawingContext context);
    private sealed virtual override void System.Printing.ILegacyDevice.PopClip();
    private sealed virtual override void System.Printing.ILegacyDevice.PopTransform();
    private sealed virtual override void System.Printing.ILegacyDevice.PushClip(Geometry clipGeometry);
    private sealed virtual override void System.Printing.ILegacyDevice.PushTransform(Matrix transform);
    private sealed virtual override int System.Printing.ILegacyDevice.StartDocument(string printerName, string jobName, string filename, Byte[] devmode);
    private sealed virtual override void System.Printing.ILegacyDevice.StartDocumentWithoutCreatingDC(string printerName, string jobName, string filename);
    private sealed virtual override void System.Printing.ILegacyDevice.EndDocument();
    private sealed virtual override void System.Printing.ILegacyDevice.CreateDeviceContext(string printerName, string jobName, Byte[] devmode);
    private sealed virtual override void System.Printing.ILegacyDevice.DeleteDeviceContext();
    private sealed virtual override string System.Printing.ILegacyDevice.ExtEscGetName();
    private sealed virtual override bool System.Printing.ILegacyDevice.ExtEscMXDWPassThru();
    private sealed virtual override void System.Printing.ILegacyDevice.StartPage(Byte[] devmode, int rasterizationDPI);
    private sealed virtual override void System.Printing.ILegacyDevice.DrawGeometry(Brush brush, Pen pen, Brush strokeBrush, Geometry geometry);
    private sealed virtual override void System.Printing.ILegacyDevice.DrawImage(BitmapSource source, Byte[] buffer, Rect rc);
    private sealed virtual override void System.Printing.ILegacyDevice.DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    private sealed virtual override void System.Printing.ILegacyDevice.Comment(string message);
    private sealed virtual override void System.Printing.ILegacyDevice.EndPage();
}
internal class Microsoft.Internal.AlphaFlattener.PenProxy : object {
    public BrushProxy StrokeBrush { get; public set; }
    public Pen GetPen(bool ignoreBrushProxy);
    public bool IsOpaque();
    public bool IsTransparent();
    public BrushProxy get_StrokeBrush();
    public void set_StrokeBrush(BrushProxy value);
    public void Scale(double ratio);
    public void PushOpacity(double opacity, BrushProxy opacityMask);
    public PenProxy Clone();
    public static PenProxy CreatePen(Pen pen, Rect bounds);
    public static PenProxy CreateUserPen(Pen pen, Rect bounds, Matrix brushToWorldTransformHint, TreeWalkProgress treeWalkProgress);
    public static bool IsNull(Pen pen);
}
internal abstract class Microsoft.Internal.AlphaFlattener.Primitive : object {
    public bool IsOpaque { get; }
    public bool IsTransparent { get; }
    public Geometry Clip { get; public set; }
    public double Opacity { get; public set; }
    public BrushProxy OpacityMask { get; public set; }
    public Matrix Transform { get; public set; }
    public bool PixelSnapBounds { get; public set; }
    public abstract virtual void OnRender(DrawingContext ctx);
    public abstract virtual Geometry GetShapeGeometry();
    public abstract virtual void Exclude(Geometry g);
    public abstract virtual BrushProxy BlendBrush(BrushProxy brush);
    public abstract virtual void BlendOverImage(ImageProxy image, Matrix trans);
    public abstract virtual Primitive BlendOpacityMaskWithColor(BrushProxy color);
    public abstract virtual bool get_IsOpaque();
    public abstract virtual bool get_IsTransparent();
    public virtual void ApplyTransform();
    public virtual bool Optimize();
    public virtual double GetOpacity();
    public virtual void PushOpacity(double opacity, BrushProxy opacityMask);
    public Primitive Clone();
    public Primitive DeepClone();
    public Geometry GetClippedShapeGeometry();
    public Rect GetRectBounds(bool needed);
    public double GetDrawingCost(Matrix worldTransform);
    public Geometry get_Clip();
    public void set_Clip(Geometry value);
    public double get_Opacity();
    public void set_Opacity(double value);
    public BrushProxy get_OpacityMask();
    public void set_OpacityMask(BrushProxy value);
    public Matrix get_Transform();
    public void set_Transform(Matrix value);
    public bool get_PixelSnapBounds();
    public void set_PixelSnapBounds(bool value);
    internal static Primitive DrawingToPrimitive(Drawing d, Matrix drawingToWorldTransformHint);
    protected int PushAll(DrawingContext dc);
    protected static void PopAll(DrawingContext dc, int levels);
    protected void ExtractOpacity();
    protected virtual void CloneMembers();
    protected abstract virtual Rect GetBoundsCore();
    protected abstract virtual double GetBaseDrawingCost(Matrix worldTransform);
}
internal class Microsoft.Internal.AlphaFlattener.PrimitiveInfo : object {
    public Primitive primitive;
    public Rect bounds;
    public List`1<int> overlap;
    public List`1<int> underlay;
    public int overlapHasTransparency;
    public Cluster m_cluster;
    public PrimitiveInfo(Primitive p);
    public Rect GetClippedBounds();
    public bool FullyCovers(PrimitiveInfo p);
}
internal class Microsoft.Internal.AlphaFlattener.PrimitiveRenderer : object {
    unknown Geometry Clip {public set; }
    public BrushProxy Brush { get; public set; }
    public PenProxy Pen { get; public set; }
    unknown List`1<int> Overlapping {public set; }
    unknown List`1<PrimitiveInfo> Commands {public set; }
    unknown IProxyDrawingContext DC {public set; }
    unknown bool Disjoint {public set; }
    public void RenderImage(ImageProxy image, Rect dest, Geometry clip, Matrix trans, string desp);
    public void DrawGeometry(Geometry cur, string desp, GeometryPrimitive gp);
    public bool DrawGlyphs(GlyphRun glyphrun, Rect bounds, Matrix trans, string desp);
    public void set_Clip(Geometry value);
    public BrushProxy get_Brush();
    public void set_Brush(BrushProxy value);
    public PenProxy get_Pen();
    public void set_Pen(PenProxy value);
    public void set_Overlapping(List`1<int> value);
    public void set_Commands(List`1<PrimitiveInfo> value);
    public void set_DC(IProxyDrawingContext value);
    public void set_Disjoint(bool value);
}
internal class Microsoft.Internal.AlphaFlattener.PrintTicketCache : object {
    public PrintTicketCache(int maxEntries);
    public void CachePageSize(string ticket, double width, double height);
    public void CacheDevMode(string ticket, Byte[] devMode);
    public bool TryGetPageSize(string ticket, Double& width, Double& height);
    public bool TryGetDevMode(string ticket, Byte[]& devMode);
}
[FlagsAttribute]
internal enum Microsoft.Internal.AlphaFlattener.ProxyDrawingFlags : Enum {
    public int value__;
    public static ProxyDrawingFlags None;
    public static ProxyDrawingFlags PixelSnapBounds;
}
internal class Microsoft.Internal.AlphaFlattener.RadialGradientFlattener : object {
    public int Steps { get; }
    public RadialGradientFlattener(RadialGradientBrush b, Geometry shape, double opacity);
    public Geometry GetSlice(int i, Color& color);
    public int get_Steps();
}
internal class Microsoft.Internal.AlphaFlattener.RectangleIntersection : object {
    protected Coordinate[] _xCoord;
    protected int _xCount;
    protected Coordinate[] _yCoord;
    protected int _yCount;
    public void CalculateIntersections(DisplayList dl, int count);
}
internal class Microsoft.Internal.AlphaFlattener.SegmentTree : object {
    public SegmentTree(Coordinate[] coord, int from, int count);
    public void Remove(int index, double x0, double x1);
    public void Insert(int index, double x0, double x1);
    public void ReportIntersection(DisplayList dl, int index, double x);
}
internal static class Microsoft.Internal.AlphaFlattener.Utility : object {
    public static double TransparencyCostFactor;
    [FriendAccessAllowedAttribute]
public static bool DisplayPageDebugHeader { get; }
    public static Rect TransformRect(Rect r, Matrix t);
    public static bool IsOne(double value);
    public static bool IsZero(double value);
    public static bool AreClose(double v1, double v2);
    public static bool AreClose(Point p1, Point p2);
    public static bool AreClose(Vector v1, Vector v2);
    public static bool AreClose(Size s1, Size s2);
    public static bool AreClose(Rect r1, Rect r2);
    public static bool IsMultipleOf(double v1, double v2);
    public static bool IsScaleTranslate(Matrix transform);
    public static bool HasUniformScale(Matrix mat, Double& scale);
    public static double Hypotenuse(double x, double y);
    public static double GetScaleX(Matrix matrix);
    public static double GetScaleY(Matrix matrix);
    public static double GetScale(Matrix trans);
    public static bool IsIdentity(Matrix mat);
    public static bool IsIdentity(Transform transform);
    public static Matrix MergeTransform(Transform trans, Transform relative, Rect bounds);
    public static Point MapPoint(Rect bounds, Point p);
    public static Transform MultiplyTransform(Transform trans1, Transform trans2);
    public static Matrix CreateMappingTransform(Rect r1, Rect r2);
    public static Matrix CreateMappingTransform(Rect r1, double width, double height);
    public static Geometry TransformGeometry(Geometry g, Matrix t);
    public static Geometry TransformGeometry(Geometry g, Transform t);
    public static Geometry InverseTransformGeometry(Geometry g, Matrix mat);
    public static bool IsEmpty(Geometry shape, Matrix mat);
    [FriendAccessAllowedAttribute]
public static PathGeometry GetAsPathGeometry(Geometry geo);
    [FriendAccessAllowedAttribute]
public static bool IsRectangle(Geometry geometry);
    public static bool IsLineSegment(Geometry geometry);
    public static double GetGeometryCost(Geometry g);
    public static bool FullyCovers(Geometry one, Geometry two);
    public static bool Covers(Geometry one, Geometry two);
    public static Geometry Intersect(Geometry one, Geometry two, Matrix mat, Boolean& empty);
    public static Geometry Exclude(Geometry one, Geometry two, Matrix mat);
    public static bool Disjoint(Geometry clip, Rect rect);
    public static int GetGeometryPointCount(Geometry geometry);
    [FriendAccessAllowedAttribute]
public static int GetGeometryDataPointCount(PathGeometryData geometryData);
    [FriendAccessAllowedAttribute]
public static int GetPathPointCount(PathGeometry geometry);
    [FriendAccessAllowedAttribute]
public static int GetPathPointCount(PathFigure figure);
    [FriendAccessAllowedAttribute]
public static int GetPathPointCount(PathSegment segment);
    public static double GetOpacity(Brush brush);
    public static bool IsOpaque(double opacity);
    public static bool IsTransparent(double opacity);
    public static bool IsBrushOpaque(Brush brush);
    public static byte OpacityToByte(double value);
    public static byte ColorToByte(float value);
    public static Color BlendColor(Color x, Color y);
    public static Color Scale(Color color, double opacity);
    [SecurityCriticalAttribute]
public static void BlendOverColor(Byte[] pixels, int count, Color colorX, double opacity, bool opacityOnly);
    [SecurityCriticalAttribute]
public static void BlendUnderColor(Byte[] pixels, int count, Color colorY, double opacity, bool opacityOnly);
    [SecurityCriticalAttribute]
public static void BlendPixels(Byte[] pixelsA, bool opacityOnlyA, Byte[] pixelsB, bool opacityOnlyB, int count, Byte[] pixelsC);
    [SecurityCriticalAttribute]
public static Byte[] ClipPixels(Byte[] pixels, int width, int height, int x0, int y0, int clipWidth, int clipHeight);
    [SecurityCriticalAttribute]
internal static bool NeedPremultiplyAlpha(BitmapSource bitmapSource);
    public static bool ExtractOpacityMaskOpacity(Brush brush, Double& opacity, Rect maskBounds);
    public static DrawingBrush CreateNonInheritingDrawingBrush(Drawing drawing);
    public static Rect GetTileContentBounds(TileBrush brush);
    public static Rect GetTileAbsoluteViewbox(TileBrush brush);
    public static Rect GetTileAbsoluteViewport(TileBrush brush, Rect bounds);
    public static Matrix CreateViewboxToViewportTransform(TileBrush brush, Rect viewbox, Rect viewport);
    public static Matrix CreateViewboxToViewportTransform(TileBrush brush);
    public static Matrix CreateViewboxToViewportTransform(TileBrush brush, Rect bounds);
    [FriendAccessAllowedAttribute]
[SecurityCriticalAttribute]
public static Uri GetFontUri(GlyphTypeface typeface);
    public static Transform GetVisualTransform(Visual visual);
    public static BitmapSource RasterizeVisual(Visual visual, Rect visualBounds, Matrix visualToWorldTransformHint, Matrix& bitmapToVisualTransform);
    public static BitmapSource RasterizeDrawing(Drawing drawing, Rect drawingBounds, Matrix drawingToWorldTransformHint, Matrix& bitmapToDrawingTransform);
    public static bool IsRenderVisible(Rect rect);
    public static bool IsValidViewbox(Rect rect, bool hasStretch);
    public static bool IsRenderVisible(Point point);
    public static bool IsRenderVisible(Size size);
    public static bool IsRenderVisible(double value);
    public static bool IsRenderVisible(DrawingGroup drawing);
    public static bool IsValid(double value);
    public static bool IsValid(Point point);
    public static bool IsValid(Size size);
    public static bool IsValid(Rect rect);
    public static bool IsValid(Matrix matrix);
    public static bool IsFinite(double value);
    public static bool IsFinite(Point point);
    public static bool IsFinite(Size size);
    public static bool IsFinite(Rect rect);
    public static double NormalizeOpacity(double value, double goodValue);
    public static double NormalizeOpacity(double value);
    public static Color NormalizeColor(Color color);
    public static bool get_DisplayPageDebugHeader();
}
internal class MS.Internal.Printing.Configuration.BorderlessOption : PrintCapabilityOption {
    internal PageBorderless _value;
    public PageBorderless Value { get; }
    internal BorderlessOption(PrintCapabilityFeature ownerFeature);
    public PageBorderless get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.CanvasImageableArea : object {
    internal ImageableSizeCapability _ownerProperty;
    internal int _originWidth;
    internal int _originHeight;
    internal int _extentWidth;
    internal int _extentHeight;
    public double OriginWidth { get; }
    public double OriginHeight { get; }
    public double ExtentWidth { get; }
    public double ExtentHeight { get; }
    internal CanvasImageableArea(ImageableSizeCapability ownerProperty);
    public double get_OriginWidth();
    public double get_OriginHeight();
    public double get_ExtentWidth();
    public double get_ExtentHeight();
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.CollateCapability : PrintCapabilityFeature {
    internal Collection`1<CollateOption> _collateOptions;
    public Collection`1<CollateOption> CollateOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal CollateCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<CollateOption> get_CollateOptions();
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.CollateOption : PrintCapabilityOption {
    internal Collation _value;
    public Collation Value { get; }
    internal CollateOption(PrintCapabilityFeature ownerFeature);
    public Collation get_Value();
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.CollateSetting : PrintTicketFeature {
    public Collation Value { get; public set; }
    internal CollateSetting(InternalPrintTicket ownerPrintTicket, string featureName);
    public Collation get_Value();
    public void set_Value(Collation value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.COMPSTUISR : object {
    public static UInt32 IDS_NULL;
    public static UInt32 IDS_CPSUI_FALSE;
    public static UInt32 IDS_CPSUI_TRUE;
    public static UInt32 IDS_CPSUI_NO;
    public static UInt32 IDS_CPSUI_YES;
    public static UInt32 IDS_CPSUI_OFF;
    public static UInt32 IDS_CPSUI_ON;
    public static UInt32 IDS_CPSUI_NONE;
    public static UInt32 IDS_CPSUI_ORIENTATION;
    public static UInt32 IDS_CPSUI_SCALING;
    public static UInt32 IDS_CPSUI_NUM_OF_COPIES;
    public static UInt32 IDS_CPSUI_SOURCE;
    public static UInt32 IDS_CPSUI_PRINTQUALITY;
    public static UInt32 IDS_CPSUI_RESOLUTION;
    public static UInt32 IDS_CPSUI_COLOR_APPERANCE;
    public static UInt32 IDS_CPSUI_DUPLEX;
    public static UInt32 IDS_CPSUI_TTOPTION;
    public static UInt32 IDS_CPSUI_FORMNAME;
    public static UInt32 IDS_CPSUI_ICM;
    public static UInt32 IDS_CPSUI_ICMMETHOD;
    public static UInt32 IDS_CPSUI_ICMINTENT;
    public static UInt32 IDS_CPSUI_MEDIA;
    public static UInt32 IDS_CPSUI_DITHERING;
    public static UInt32 IDS_CPSUI_PORTRAIT;
    public static UInt32 IDS_CPSUI_LANDSCAPE;
    public static UInt32 IDS_CPSUI_ROT_LAND;
    public static UInt32 IDS_CPSUI_COLLATE;
    public static UInt32 IDS_CPSUI_COLLATED;
    public static UInt32 IDS_CPSUI_DRAFT;
    public static UInt32 IDS_CPSUI_LOW;
    public static UInt32 IDS_CPSUI_MEDIUM;
    public static UInt32 IDS_CPSUI_HIGH;
    public static UInt32 IDS_CPSUI_PRESENTATION;
    public static UInt32 IDS_CPSUI_COLOR;
    public static UInt32 IDS_CPSUI_GRAYSCALE;
    public static UInt32 IDS_CPSUI_MONOCHROME;
    public static UInt32 IDS_CPSUI_SIMPLEX;
    public static UInt32 IDS_CPSUI_HORIZONTAL;
    public static UInt32 IDS_CPSUI_VERTICAL;
    public static UInt32 IDS_CPSUI_LONG_SIDE;
    public static UInt32 IDS_CPSUI_SHORT_SIDE;
    public static UInt32 IDS_CPSUI_TT_PRINTASGRAPHIC;
    public static UInt32 IDS_CPSUI_TT_DOWNLOADSOFT;
    public static UInt32 IDS_CPSUI_TT_DOWNLOADVECT;
    public static UInt32 IDS_CPSUI_TT_SUBDEV;
    public static UInt32 IDS_CPSUI_ICM_BLACKWHITE;
    public static UInt32 IDS_CPSUI_ICM_NO;
    public static UInt32 IDS_CPSUI_ICM_YES;
    public static UInt32 IDS_CPSUI_ICM_SATURATION;
    public static UInt32 IDS_CPSUI_ICM_CONTRAST;
    public static UInt32 IDS_CPSUI_ICM_COLORMETRIC;
    public static UInt32 IDS_CPSUI_STANDARD;
    public static UInt32 IDS_CPSUI_GLOSSY;
    public static UInt32 IDS_CPSUI_TRANSPARENCY;
    public static UInt32 IDS_CPSUI_UPPER_TRAY;
    public static UInt32 IDS_CPSUI_ONLYONE;
    public static UInt32 IDS_CPSUI_LOWER_TRAY;
    public static UInt32 IDS_CPSUI_MIDDLE_TRAY;
    public static UInt32 IDS_CPSUI_MANUAL_TRAY;
    public static UInt32 IDS_CPSUI_ENVELOPE_TRAY;
    public static UInt32 IDS_CPSUI_ENVMANUAL_TRAY;
    public static UInt32 IDS_CPSUI_TRACTOR_TRAY;
    public static UInt32 IDS_CPSUI_SMALLFMT_TRAY;
    public static UInt32 IDS_CPSUI_LARGEFMT_TRAY;
    public static UInt32 IDS_CPSUI_LARGECAP_TRAY;
    public static UInt32 IDS_CPSUI_CASSETTE_TRAY;
    public static UInt32 IDS_CPSUI_DEFAULT_TRAY;
    public static UInt32 IDS_CPSUI_FORMSOURCE;
    public static UInt32 IDS_CPSUI_MANUALFEED;
    public static UInt32 IDS_CPSUI_COPIES;
    public static UInt32 IDS_CPSUI_QUALITY_SETTINGS;
    public static UInt32 IDS_CPSUI_QUALITY_DRAFT;
    public static UInt32 IDS_CPSUI_QUALITY_BETTER;
    public static UInt32 IDS_CPSUI_QUALITY_BEST;
    public static UInt32 IDS_CPSUI_QUALITY_CUSTOM;
    public static UInt32 IDS_CPSUI_OUTPUTBIN;
    public static UInt32 IDS_CPSUI_NUP;
    [SecurityCriticalAttribute]
public string Get(UInt32 srid);
    [SecurityCriticalAttribute]
public void Release();
}
internal class MS.Internal.Printing.Configuration.DC_PAPER_SIZE : ValueType {
    public int Width;
    public int Height;
    public DC_PAPER_SIZE(int width, int height);
}
internal class MS.Internal.Printing.Configuration.DC_RESOLUTION : ValueType {
    public int x;
    public int y;
    public DC_RESOLUTION(int x, int y);
}
internal enum MS.Internal.Printing.Configuration.DeviceCap : Enum {
    public int value__;
    public static DeviceCap HORZRES;
    public static DeviceCap VERTRES;
    public static DeviceCap LOGPIXELSX;
    public static DeviceCap LOGPIXELSY;
    public static DeviceCap PHYSICALWIDTH;
    public static DeviceCap PHYSICALHEIGHT;
    public static DeviceCap PHYSICALOFFSETX;
    public static DeviceCap PHYSICALOFFSETY;
}
internal enum MS.Internal.Printing.Configuration.DeviceCapability : Enum {
    public short value__;
    public static DeviceCapability DC_FIELDS;
    public static DeviceCapability DC_PAPERS;
    public static DeviceCapability DC_PAPERSIZE;
    public static DeviceCapability DC_MINEXTENT;
    public static DeviceCapability DC_MAXEXTENT;
    public static DeviceCapability DC_BINS;
    public static DeviceCapability DC_DUPLEX;
    public static DeviceCapability DC_SIZE;
    public static DeviceCapability DC_EXTRA;
    public static DeviceCapability DC_VERSION;
    public static DeviceCapability DC_DRIVER;
    public static DeviceCapability DC_BINNAMES;
    public static DeviceCapability DC_ENUMRESOLUTIONS;
    public static DeviceCapability DC_TRUETYPE;
    public static DeviceCapability DC_PAPERNAMES;
    public static DeviceCapability DC_ORIENTATION;
    public static DeviceCapability DC_COPIES;
    public static DeviceCapability DC_COLLATE;
    public static DeviceCapability DC_MEDIAREADY;
    public static DeviceCapability DC_STAPLE;
    public static DeviceCapability DC_COLORDEVICE;
    public static DeviceCapability DC_NUP;
    public static DeviceCapability DC_MEDIATYPENAMES;
    public static DeviceCapability DC_MEDIATYPES;
}
internal class MS.Internal.Printing.Configuration.DeviceFontSubstitutionOption : PrintCapabilityOption {
    internal DeviceFontSubstitution _value;
    public DeviceFontSubstitution Value { get; }
    internal DeviceFontSubstitutionOption(PrintCapabilityFeature ownerFeature);
    public DeviceFontSubstitution get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.DevMode : object {
    public static int MinDEVMODEA_ByteSize;
    public static int DEVMODEA_dmSizeByteOffset;
    public static int DEVMODEA_dmDriverExtraByteOffset;
    public static int MinDEVMODEW_ByteSize;
    public static int DEVMODEW_dmSizeByteOffset;
    public static int DEVMODEW_dmDriverExtraByteOffset;
    public Byte[] ByteData { get; private set; }
    public string DeviceName { get; public set; }
    public ushort SpecVersion { get; private set; }
    public ushort DriverVersion { get; }
    public ushort Size { get; private set; }
    public ushort DriverExtra { get; public set; }
    public DevModeFields Fields { get; public set; }
    public DevModeOrientation Orientation { get; public set; }
    public short PaperSize { get; public set; }
    public short PaperLength { get; public set; }
    public short PaperWidth { get; public set; }
    public short Scale { get; public set; }
    public short Copies { get; public set; }
    public short DefaultSource { get; public set; }
    public short PrintQuality { get; public set; }
    public DevModeColor Color { get; public set; }
    public DevModeDuplex Duplex { get; public set; }
    public short YResolution { get; public set; }
    public DevModeTrueTypeOption TTOption { get; public set; }
    public DevModeCollate Collate { get; public set; }
    public string FormName { get; public set; }
    public DevModeNUp Nup { get; public set; }
    public DevModeICMMethod ICMMethod { get; public set; }
    public UInt32 ICMIntent { get; public set; }
    public UInt32 MediaType { get; public set; }
    public UInt32 DitherType { get; public set; }
    public DevMode(Byte[] devModeBytes);
    public Byte[] get_ByteData();
    private void set_ByteData(Byte[] value);
    public string get_DeviceName();
    public void set_DeviceName(string value);
    public ushort get_SpecVersion();
    private void set_SpecVersion(ushort value);
    public ushort get_DriverVersion();
    public ushort get_Size();
    private void set_Size(ushort value);
    public ushort get_DriverExtra();
    public void set_DriverExtra(ushort value);
    public DevModeFields get_Fields();
    public void set_Fields(DevModeFields value);
    public DevModeOrientation get_Orientation();
    public void set_Orientation(DevModeOrientation value);
    public short get_PaperSize();
    public void set_PaperSize(short value);
    public short get_PaperLength();
    public void set_PaperLength(short value);
    public short get_PaperWidth();
    public void set_PaperWidth(short value);
    public short get_Scale();
    public void set_Scale(short value);
    public short get_Copies();
    public void set_Copies(short value);
    public short get_DefaultSource();
    public void set_DefaultSource(short value);
    public short get_PrintQuality();
    public void set_PrintQuality(short value);
    public DevModeColor get_Color();
    public void set_Color(DevModeColor value);
    public DevModeDuplex get_Duplex();
    public void set_Duplex(DevModeDuplex value);
    public short get_YResolution();
    public void set_YResolution(short value);
    public DevModeTrueTypeOption get_TTOption();
    public void set_TTOption(DevModeTrueTypeOption value);
    public DevModeCollate get_Collate();
    public void set_Collate(DevModeCollate value);
    public string get_FormName();
    public void set_FormName(string value);
    public DevModeNUp get_Nup();
    public void set_Nup(DevModeNUp value);
    public DevModeICMMethod get_ICMMethod();
    public void set_ICMMethod(DevModeICMMethod value);
    public UInt32 get_ICMIntent();
    public void set_ICMIntent(UInt32 value);
    public UInt32 get_MediaType();
    public void set_MediaType(UInt32 value);
    public UInt32 get_DitherType();
    public void set_DitherType(UInt32 value);
    public void EnsureInitialized();
    public DevMode Clone();
    public bool IsFieldSet(DevModeFields field);
    public bool IsAnyFieldSet(DevModeFields fields);
    public void Copy(DevMode src, DevModeFields fields);
    [SecurityCriticalAttribute]
public static DevMode FromIntPtr(IntPtr devModeWPointer);
    public bool CompatibleCopy(DevMode ticketDevMode);
    public static bool AreCompatible(DevMode a, DevMode b);
}
internal enum MS.Internal.Printing.Configuration.DevModeCollate : Enum {
    public short value__;
    public static DevModeCollate DMCOLLATE_FALSE;
    public static DevModeCollate DMCOLLATE_TRUE;
}
internal enum MS.Internal.Printing.Configuration.DevModeColor : Enum {
    public short value__;
    public static DevModeColor DMCOLOR_MONOCHROME;
    public static DevModeColor DMCOLOR_COLOR;
}
internal static class MS.Internal.Printing.Configuration.DevModeDitherTypes : object {
    public static UInt32 DMDITHER_NONE;
    public static UInt32 DMDITHER_COARSE;
    public static UInt32 DMDITHER_FINE;
    public static UInt32 DMDITHER_LINEART;
    public static UInt32 DMDITHER_ERRORDIFFUSION;
    public static UInt32 DMDITHER_GRAYSCALE;
    private static DevModeDitherTypes();
}
internal enum MS.Internal.Printing.Configuration.DevModeDuplex : Enum {
    public short value__;
    public static DevModeDuplex DMDUP_SIMPLEX;
    public static DevModeDuplex DMDUP_VERTICAL;
    public static DevModeDuplex DMDUP_HORIZONTAL;
}
[FlagsAttribute]
internal enum MS.Internal.Printing.Configuration.DevModeFields : Enum {
    public UInt32 value__;
    public static DevModeFields DM_ORIENTATION;
    public static DevModeFields DM_PAPERSIZE;
    public static DevModeFields DM_PAPERLENGTH;
    public static DevModeFields DM_PAPERWIDTH;
    public static DevModeFields DM_SCALE;
    public static DevModeFields DM_POSITION;
    public static DevModeFields DM_NUP;
    public static DevModeFields DM_DISPLAYORIENTATION;
    public static DevModeFields DM_COPIES;
    public static DevModeFields DM_DEFAULTSOURCE;
    public static DevModeFields DM_PRINTQUALITY;
    public static DevModeFields DM_COLOR;
    public static DevModeFields DM_DUPLEX;
    public static DevModeFields DM_YRESOLUTION;
    public static DevModeFields DM_TTOPTION;
    public static DevModeFields DM_COLLATE;
    public static DevModeFields DM_FORMNAME;
    public static DevModeFields DM_LOGPIXELS;
    public static DevModeFields DM_BITSPERPEL;
    public static DevModeFields DM_PELSWIDTH;
    public static DevModeFields DM_PELSHEIGHT;
    public static DevModeFields DM_DISPLAYFLAGS;
    public static DevModeFields DM_DISPLAYFREQUENCY;
    public static DevModeFields DM_ICMMETHOD;
    public static DevModeFields DM_ICMINTENT;
    public static DevModeFields DM_MEDIATYPE;
    public static DevModeFields DM_DITHERTYPE;
    public static DevModeFields DM_DISPLAYFIXEDOUTPUT;
    public static DevModeFields All;
}
internal static class MS.Internal.Printing.Configuration.DevModeICMIntents : object {
    public static UInt32 DMICM_SATURATE;
    public static UInt32 DMICM_CONTRAST;
    public static UInt32 DMICM_COLORIMETRIC;
    public static UInt32 DMICM_ABS_COLORIMETRIC;
    private static DevModeICMIntents();
}
internal enum MS.Internal.Printing.Configuration.DevModeICMMethod : Enum {
    public UInt32 value__;
    public static DevModeICMMethod DMICMMETHOD_NONE;
    public static DevModeICMMethod DMICMMETHOD_SYSTEM;
    public static DevModeICMMethod DMICMMETHOD_DRIVER;
    public static DevModeICMMethod DMICMMETHOD_DEVICE;
}
internal static class MS.Internal.Printing.Configuration.DevModeMediaTypes : object {
    public static UInt32 DMMEDIA_STANDARD;
    public static UInt32 DMMEDIA_TRANSPARENCY;
    public static UInt32 DMMEDIA_GLOSSY;
    private static DevModeMediaTypes();
    public static bool IsCustom(short mediaTypeCode);
}
internal enum MS.Internal.Printing.Configuration.DevModeNUp : Enum {
    public UInt32 value__;
    public static DevModeNUp DMNUP_SYSTEM;
    public static DevModeNUp DMNUP_ONEUP;
}
internal enum MS.Internal.Printing.Configuration.DevModeOrientation : Enum {
    public short value__;
    public static DevModeOrientation DMORIENT_PORTRAIT;
    public static DevModeOrientation DMORIENT_LANDSCAPE;
}
internal static class MS.Internal.Printing.Configuration.DevModePaperSizes : object {
    public static short DMPAPER_LETTER;
    public static short DMPAPER_LEGAL;
    public static short DMPAPER_LEGAL_EXTRA;
    public static short DMPAPER_9X11;
    public static short DMPAPER_10X11;
    public static short DMPAPER_10X14;
    public static short DMPAPER_11X17;
    public static short DMPAPER_12X11;
    public static short DMPAPER_A_PLUS;
    public static short DMPAPER_A2;
    public static short DMPAPER_A3;
    public static short DMPAPER_A3_EXTRA;
    public static short DMPAPER_A3_ROTATED;
    public static short DMPAPER_A4;
    public static short DMPAPER_A4_EXTRA;
    public static short DMPAPER_A4_ROTATED;
    public static short DMPAPER_A4SMALL;
    public static short DMPAPER_A4_PLUS;
    public static short DMPAPER_A5;
    public static short DMPAPER_A5_EXTRA;
    public static short DMPAPER_A5_ROTATED;
    public static short DMPAPER_A6;
    public static short DMPAPER_A6_ROTATED;
    public static short DMPAPER_B4;
    public static short DMPAPER_B_PLUS;
    public static short DMPAPER_B4_JIS_ROTATED;
    public static short DMPAPER_B5;
    public static short DMPAPER_B5_JIS_ROTATED;
    public static short DMPAPER_B6_JIS;
    public static short DMPAPER_B6_JIS_ROTATED;
    public static short DMPAPER_CSHEET;
    public static short DMPAPER_JAPANESE_POSTCARD;
    public static short DMPAPER_DBL_JAPANESE_POSTCARD;
    public static short DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED;
    public static short DMPAPER_DSHEET;
    public static short DMPAPER_ENV_9;
    public static short DMPAPER_ENV_10;
    public static short DMPAPER_ENV_11;
    public static short DMPAPER_ENV_12;
    public static short DMPAPER_ENV_14;
    public static short DMPAPER_ENV_C5;
    public static short DMPAPER_ENV_C3;
    public static short DMPAPER_ENV_C4;
    public static short DMPAPER_ENV_C6;
    public static short DMPAPER_ENV_C65;
    public static short DMPAPER_ENV_B4;
    public static short DMPAPER_ENV_B5;
    public static short DMPAPER_ENV_B6;
    public static short DMPAPER_ENV_DL;
    public static short DMPAPER_ENV_ITALY;
    public static short DMPAPER_ENV_MONARCH;
    public static short DMPAPER_ENV_PERSONAL;
    public static short DMPAPER_ESHEET;
    public static short DMPAPER_EXECUTIVE;
    public static short DMPAPER_FANFOLD_US;
    public static short DMPAPER_FANFOLD_STD_GERMAN;
    public static short DMPAPER_FANFOLD_LGL_GERMAN;
    public static short DMPAPER_FOLIO;
    public static short DMPAPER_JAPANESE_POSTCARD_ROTATED;
    public static short DMPAPER_JENV_CHOU3;
    public static short DMPAPER_JENV_CHOU3_ROTATED;
    public static short DMPAPER_JENV_CHOU4;
    public static short DMPAPER_JENV_CHOU4_ROTATED;
    public static short DMPAPER_JENV_KAKU2;
    public static short DMPAPER_JENV_KAKU2_ROTATED;
    public static short DMPAPER_JENV_KAKU3;
    public static short DMPAPER_JENV_KAKU3_ROTATED;
    public static short DMPAPER_JENV_YOU4;
    public static short DMPAPER_JENV_YOU4_ROTATED;
    public static short DMPAPER_LEDGER;
    public static short DMPAPER_LETTER_EXTRA;
    public static short DMPAPER_LETTER_ROTATED;
    public static short DMPAPER_LETTERSMALL;
    public static short DMPAPER_NOTE;
    public static short DMPAPER_P16K;
    public static short DMPAPER_P16K_ROTATED;
    public static short DMPAPER_P32K;
    public static short DMPAPER_P32K_ROTATED;
    public static short DMPAPER_P32KBIG;
    public static short DMPAPER_P32KBIG_ROTATED;
    public static short DMPAPER_PENV_1;
    public static short DMPAPER_PENV_1_ROTATED;
    public static short DMPAPER_PENV_2;
    public static short DMPAPER_PENV_2_ROTATED;
    public static short DMPAPER_PENV_3;
    public static short DMPAPER_PENV_3_ROTATED;
    public static short DMPAPER_PENV_4;
    public static short DMPAPER_PENV_4_ROTATED;
    public static short DMPAPER_PENV_5;
    public static short DMPAPER_PENV_5_ROTATED;
    public static short DMPAPER_PENV_6;
    public static short DMPAPER_PENV_6_ROTATED;
    public static short DMPAPER_PENV_7;
    public static short DMPAPER_PENV_7_ROTATED;
    public static short DMPAPER_PENV_8;
    public static short DMPAPER_PENV_8_ROTATED;
    public static short DMPAPER_PENV_9;
    public static short DMPAPER_PENV_9_ROTATED;
    public static short DMPAPER_PENV_10;
    public static short DMPAPER_PENV_10_ROTATED;
    public static short DMPAPER_QUARTO;
    public static short DMPAPER_STATEMENT;
    public static short DMPAPER_TABLOID;
    public static short DMPAPER_TABLOID_EXTRA;
    public static bool IsCustom(short paperSizeCode);
}
internal static class MS.Internal.Printing.Configuration.DevModePaperSources : object {
    public static short DMBIN_UPPER;
    public static short DMBIN_LOWER;
    public static short DMBIN_MIDDLE;
    public static short DMBIN_MANUAL;
    public static short DMBIN_ENVELOPE;
    public static short DMBIN_ENVMANUAL;
    public static short DMBIN_AUTO;
    public static short DMBIN_TRACTOR;
    public static short DMBIN_SMALLFMT;
    public static short DMBIN_LARGEFMT;
    public static short DMBIN_LARGECAPACITY;
    public static short DMBIN_CASSETTE;
    public static short DMBIN_FORMSOURCE;
}
internal static class MS.Internal.Printing.Configuration.DevModeResolutions : object {
    public static short DMRES_HIGH;
    public static short DMRES_MEDIUM;
    public static short DMRES_LOW;
    public static short DMRES_DRAFT;
    public static bool IsCustom(short xResolution);
}
internal enum MS.Internal.Printing.Configuration.DevModeTrueTypeOption : Enum {
    public short value__;
    public static DevModeTrueTypeOption DMTT_BITMAP;
    public static DevModeTrueTypeOption DMTT_DOWNLOAD;
    public static DevModeTrueTypeOption DMTT_SUBDEV;
    public static DevModeTrueTypeOption DMTT_DOWNLOAD_OUTLINE;
}
internal class MS.Internal.Printing.Configuration.DocumentCollateCapability : CollateCapability {
    internal string FeatureName { get; }
    internal DocumentCollateCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.DocumentCollateSetting : CollateSetting {
    internal DocumentCollateSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.DocumentInputBinCapability : InputBinCapability {
    internal string FeatureName { get; }
    internal DocumentInputBinCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.DocumentInputBinSetting : InputBinSetting {
    internal DocumentInputBinSetting(InternalPrintTicket ownerPrintTicket);
}
[FlagsAttribute]
internal enum MS.Internal.Printing.Configuration.DocumentPropertiesFlags : Enum {
    public UInt32 value__;
    public static DocumentPropertiesFlags None;
    public static DocumentPropertiesFlags DM_IN_BUFFER;
    public static DocumentPropertiesFlags DM_OUT_BUFFER;
}
internal abstract class MS.Internal.Printing.Configuration.DuplexCapability : PrintCapabilityFeature {
    internal Collection`1<DuplexOption> _duplexOptions;
    public Collection`1<DuplexOption> DuplexOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal DuplexCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<DuplexOption> get_DuplexOptions();
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.DuplexOption : PrintCapabilityOption {
    internal Duplexing _value;
    public Duplexing Value { get; }
    internal DuplexOption(PrintCapabilityFeature ownerFeature);
    public Duplexing get_Value();
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.DuplexSetting : PrintTicketFeature {
    public Duplexing Value { get; public set; }
    internal DuplexSetting(InternalPrintTicket ownerPrintTicket, string featureName);
    public Duplexing get_Value();
    public void set_Value(Duplexing value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.FallbackPTProvider : PTProviderBase {
    [SecurityCriticalAttribute]
public FallbackPTProvider(string deviceName, int maxVersion, int clientVersion);
    [SecurityCriticalAttribute]
public virtual MemoryStream GetPrintCapabilities(MemoryStream printTicket);
    [SecurityCriticalAttribute]
public virtual MemoryStream MergeAndValidatePrintTicket(MemoryStream basePrintTicket, MemoryStream deltaPrintTicket, PrintTicketScope scope, ConflictStatus& conflictStatus);
    [SecurityCriticalAttribute]
public virtual MemoryStream ConvertDevModeToPrintTicket(Byte[] devMode, PrintTicketScope scope);
    [SecurityCriticalAttribute]
public virtual Byte[] ConvertPrintTicketToDevMode(MemoryStream printTicket, BaseDevModeType baseType, PrintTicketScope scope);
    [SecurityCriticalAttribute]
public virtual void Release();
}
internal class MS.Internal.Printing.Configuration.FixedMediaSizeOption : PrintCapabilityOption {
    internal PageMediaSizeName _value;
    internal int _mediaSizeWidth;
    internal int _mediaSizeHeight;
    public PageMediaSizeName Value { get; }
    public double MediaSizeWidth { get; }
    public double MediaSizeHeight { get; }
    internal FixedMediaSizeOption(PrintCapabilityFeature ownerFeature);
    public PageMediaSizeName get_Value();
    public double get_MediaSizeWidth();
    public double get_MediaSizeHeight();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.HGlobalBuffer : object {
    public static HGlobalBuffer Null;
    public SafeMemoryHandle Handle { get; private set; }
    public int Length { get; private set; }
    [SecurityCriticalAttribute]
public HGlobalBuffer(int length);
    private static HGlobalBuffer();
    [SecurityCriticalAttribute]
[CompilerGeneratedAttribute]
public SafeMemoryHandle get_Handle();
    [SecurityCriticalAttribute]
[CompilerGeneratedAttribute]
private void set_Handle(SafeMemoryHandle value);
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
[SecurityCriticalAttribute]
private void set_Length(int value);
    [SecurityCriticalAttribute]
public void Release();
}
internal class MS.Internal.Printing.Configuration.ImageableSizeCapability : PrintCapabilityRootProperty {
    internal int _imageableSizeWidth;
    internal int _imageableSizeHeight;
    internal CanvasImageableArea _imageableArea;
    public double ImageableSizeWidth { get; }
    public double ImageableSizeHeight { get; }
    public CanvasImageableArea ImageableArea { get; }
    public double get_ImageableSizeWidth();
    public double get_ImageableSizeHeight();
    public CanvasImageableArea get_ImageableArea();
    public virtual string ToString();
    internal sealed virtual bool BuildProperty(XmlPrintCapReader reader);
}
internal abstract class MS.Internal.Printing.Configuration.InputBinCapability : PrintCapabilityFeature {
    internal Collection`1<InputBinOption> _inputBins;
    public Collection`1<InputBinOption> InputBins { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal InputBinCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<InputBinOption> get_InputBins();
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.InputBinOption : PrintCapabilityOption {
    internal InputBin _value;
    public InputBin Value { get; }
    internal InputBinOption(PrintCapabilityFeature ownerFeature);
    public InputBin get_Value();
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.InputBinSetting : PrintTicketFeature {
    public InputBin Value { get; public set; }
    internal InputBinSetting(InternalPrintTicket ownerPrintTicket, string featureName);
    public InputBin get_Value();
    public void set_Value(InputBin value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.InternalPrintCapabilities : object {
    internal Object[] _pcRootFeatures;
    internal ParameterDefinition[] _pcLocalParamDefs;
    public DocumentCollateCapability DocumentCollateCapability { get; }
    public JobDuplexCapability JobDuplexCapability { get; }
    public JobNUpCapability JobNUpCapability { get; }
    public JobStapleCapability JobStapleCapability { get; }
    public PageDeviceFontSubstitutionCapability PageDeviceFontSubstitutionCapability { get; }
    public PageMediaSizeCapability PageMediaSizeCapability { get; }
    public PageMediaTypeCapability PageMediaTypeCapability { get; }
    public PageOrientationCapability PageOrientationCapability { get; }
    public PageOutputColorCapability PageOutputColorCapability { get; }
    public PageResolutionCapability PageResolutionCapability { get; }
    public PageScalingCapability PageScalingCapability { get; }
    public PageTrueTypeFontModeCapability PageTrueTypeFontModeCapability { get; }
    public JobPageOrderCapability JobPageOrderCapability { get; }
    public PagePhotoPrintingIntentCapability PagePhotoPrintingIntentCapability { get; }
    public PageBorderlessCapability PageBorderlessCapability { get; }
    public PageOutputQualityCapability PageOutputQualityCapability { get; }
    public JobInputBinCapability JobInputBinCapability { get; }
    public DocumentInputBinCapability DocumentInputBinCapability { get; }
    public PageInputBinCapability PageInputBinCapability { get; }
    public JobCopyCountCapability JobCopyCountCapability { get; }
    public ImageableSizeCapability PageImageableSizeCapability { get; }
    public InternalPrintCapabilities(Stream xmlStream);
    public bool SupportsCapability(CapabilityName feature);
    public DocumentCollateCapability get_DocumentCollateCapability();
    public JobDuplexCapability get_JobDuplexCapability();
    public JobNUpCapability get_JobNUpCapability();
    public JobStapleCapability get_JobStapleCapability();
    public PageDeviceFontSubstitutionCapability get_PageDeviceFontSubstitutionCapability();
    public PageMediaSizeCapability get_PageMediaSizeCapability();
    public PageMediaTypeCapability get_PageMediaTypeCapability();
    public PageOrientationCapability get_PageOrientationCapability();
    public PageOutputColorCapability get_PageOutputColorCapability();
    public PageResolutionCapability get_PageResolutionCapability();
    public PageScalingCapability get_PageScalingCapability();
    public PageTrueTypeFontModeCapability get_PageTrueTypeFontModeCapability();
    public JobPageOrderCapability get_JobPageOrderCapability();
    public PagePhotoPrintingIntentCapability get_PagePhotoPrintingIntentCapability();
    public PageBorderlessCapability get_PageBorderlessCapability();
    public PageOutputQualityCapability get_PageOutputQualityCapability();
    public JobInputBinCapability get_JobInputBinCapability();
    public DocumentInputBinCapability get_DocumentInputBinCapability();
    public PageInputBinCapability get_PageInputBinCapability();
    public JobCopyCountCapability get_JobCopyCountCapability();
    public ImageableSizeCapability get_PageImageableSizeCapability();
    internal static FormatException NewPrintCapFormatException(string detailMsg);
    internal static FormatException NewPrintCapFormatException(string detailMsg, Exception innerException);
    internal void SetLocalParameterDefAsRequired(int paramDefIndex, bool isRequired);
}
internal class MS.Internal.Printing.Configuration.InternalPrintTicket : object {
    public DocumentCollateSetting DocumentCollate { get; }
    public JobDuplexSetting JobDuplex { get; }
    public JobNUpSetting JobNUp { get; }
    public JobStapleSetting JobStaple { get; }
    public PageDeviceFontSubstitutionSetting PageDeviceFontSubstitution { get; }
    public PageMediaSizeSetting PageMediaSize { get; }
    public PageMediaTypeSetting PageMediaType { get; }
    public PageOrientationSetting PageOrientation { get; }
    public PageOutputColorSetting PageOutputColor { get; }
    public PageResolutionSetting PageResolution { get; }
    public PageScalingSetting PageScaling { get; }
    public PageTrueTypeFontModeSetting PageTrueTypeFontMode { get; }
    public JobPageOrderSetting JobPageOrder { get; }
    public PagePhotoPrintingIntentSetting PagePhotoPrintingIntent { get; }
    public PageBorderlessSetting PageBorderless { get; }
    public PageOutputQualitySetting PageOutputQuality { get; }
    public JobInputBinSetting JobInputBin { get; }
    public DocumentInputBinSetting DocumentInputBin { get; }
    public PageInputBinSetting PageInputBin { get; }
    public JobCopyCountSetting JobCopyCount { get; }
    public MemoryStream XmlStream { get; }
    internal XmlDocument XmlDoc { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    public InternalPrintTicket(Stream xmlStream);
    public InternalPrintTicket Clone();
    public void SaveTo(Stream outStream);
    public DocumentCollateSetting get_DocumentCollate();
    public JobDuplexSetting get_JobDuplex();
    public JobNUpSetting get_JobNUp();
    public JobStapleSetting get_JobStaple();
    public PageDeviceFontSubstitutionSetting get_PageDeviceFontSubstitution();
    public PageMediaSizeSetting get_PageMediaSize();
    public PageMediaTypeSetting get_PageMediaType();
    public PageOrientationSetting get_PageOrientation();
    public PageOutputColorSetting get_PageOutputColor();
    public PageResolutionSetting get_PageResolution();
    public PageScalingSetting get_PageScaling();
    public PageTrueTypeFontModeSetting get_PageTrueTypeFontMode();
    public JobPageOrderSetting get_JobPageOrder();
    public PagePhotoPrintingIntentSetting get_PagePhotoPrintingIntent();
    public PageBorderlessSetting get_PageBorderless();
    public PageOutputQualitySetting get_PageOutputQuality();
    public JobInputBinSetting get_JobInputBin();
    public DocumentInputBinSetting get_DocumentInputBin();
    public PageInputBinSetting get_PageInputBin();
    public JobCopyCountSetting get_JobCopyCount();
    public MemoryStream get_XmlStream();
    internal static FormatException NewPTFormatException(string detailMsg);
    internal static FormatException NewPTFormatException(string detailMsg, Exception innerException);
    internal PrintTicketFeature GetBasePTFeatureObject(CapabilityName feature);
    internal XmlDocument get_XmlDoc();
    internal XmlNamespaceManager get_NamespaceManager();
}
internal class MS.Internal.Printing.Configuration.JobCopyCountCapability : NonNegativeIntParameterDefinition {
    internal static ParameterDefinition NewParamDefCallback(InternalPrintCapabilities printCap);
}
internal class MS.Internal.Printing.Configuration.JobCopyCountSetting : PrintTicketParameter {
    public int Value { get; public set; }
    internal JobCopyCountSetting(InternalPrintTicket ownerPrintTicket);
    public int get_Value();
    public void set_Value(int value);
    public virtual string ToString();
    internal sealed virtual void SettingClearCallback();
}
internal class MS.Internal.Printing.Configuration.JobDuplexCapability : DuplexCapability {
    internal string FeatureName { get; }
    internal JobDuplexCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.JobDuplexSetting : DuplexSetting {
    internal JobDuplexSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.JobInputBinCapability : InputBinCapability {
    internal string FeatureName { get; }
    internal JobInputBinCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.JobInputBinSetting : InputBinSetting {
    internal JobInputBinSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.JobNUpCapability : NUpCapability {
    internal string FeatureName { get; }
    internal JobNUpCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.JobNUpSetting : NUpSetting {
    internal JobNUpSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.JobPageOrderCapability : PrintCapabilityFeature {
    internal Collection`1<PageOrderOption> _orderOptions;
    public Collection`1<PageOrderOption> PageOrderOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal JobPageOrderCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<PageOrderOption> get_PageOrderOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.JobPageOrderSetting : PrintTicketFeature {
    public PageOrder Value { get; public set; }
    internal JobPageOrderSetting(InternalPrintTicket ownerPrintTicket);
    public PageOrder get_Value();
    public void set_Value(PageOrder value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.JobStapleCapability : StapleCapability {
    internal string FeatureName { get; }
    internal JobStapleCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.JobStapleSetting : StapleSetting {
    internal JobStapleSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.LengthParameterDefinition : NonNegativeIntParameterDefinition {
    public double MaxValue { get; }
    public double MinValue { get; }
    public double DefaultValue { get; }
    public double get_MaxValue();
    public double get_MinValue();
    public double get_DefaultValue();
    public virtual string ToString();
}
[FlagsAttribute]
internal enum MS.Internal.Printing.Configuration.LoadLibraryExFlags : Enum {
    public UInt32 value__;
    public static LoadLibraryExFlags LOAD_LIBRARY_AS_IMAGE_RESOURCE;
    public static LoadLibraryExFlags LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE;
}
internal class MS.Internal.Printing.Configuration.MediaTypeOption : PrintCapabilityOption {
    internal PageMediaType _value;
    public PageMediaType Value { get; }
    internal MediaTypeOption(PrintCapabilityFeature ownerFeature);
    public PageMediaType get_Value();
    public virtual string ToString();
}
internal enum MS.Internal.Printing.Configuration.NativeErrorCode : Enum {
    public UInt32 value__;
    public static NativeErrorCode S_PT_NO_CONFLICT;
    public static NativeErrorCode S_PT_CONFLICT_RESOLVED;
    public static NativeErrorCode E_XML_INVALID;
    public static NativeErrorCode E_PRINTTICKET_FORMAT;
    public static NativeErrorCode E_DELTA_PRINTTICKET_FORMAT;
    public static NativeErrorCode E_NOTIMPL;
}
internal class MS.Internal.Printing.Configuration.NonNegativeIntParameterDefinition : ParameterDefinition {
    internal int _maxValue;
    internal int _minValue;
    internal int _defaultValue;
    public int MaxValue { get; }
    public int MinValue { get; }
    public int DefaultValue { get; }
    internal bool IsValid { get; }
    public int get_MaxValue();
    public int get_MinValue();
    public int get_DefaultValue();
    public virtual string ToString();
    internal sealed virtual bool ParamDefPropCallback(ParameterDefinition baseParam, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
}
internal abstract class MS.Internal.Printing.Configuration.NUpCapability : PrintCapabilityFeature {
    internal Collection`1<NUpOption> _nUps;
    internal NUpPresentationDirectionCapability _presentationDirectionCap;
    public Collection`1<NUpOption> NUps { get; }
    public bool SupportsPresentationDirection { get; }
    public NUpPresentationDirectionCapability PresentationDirectionCapability { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal NUpCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<NUpOption> get_NUps();
    public bool get_SupportsPresentationDirection();
    public NUpPresentationDirectionCapability get_PresentationDirectionCapability();
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.NUpOption : PrintCapabilityOption {
    internal int _pagesPerSheet;
    public int PagesPerSheet { get; }
    internal NUpOption(PrintCapabilityFeature ownerFeature);
    public int get_PagesPerSheet();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.NUpPresentationDirectionCapability : PrintCapabilityFeature {
    internal Collection`1<NUpPresentationDirectionOption> _presentationDirections;
    public Collection`1<NUpPresentationDirectionOption> PresentationDirections { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal NUpPresentationDirectionCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<NUpPresentationDirectionOption> get_PresentationDirections();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.NUpPresentationDirectionOption : PrintCapabilityOption {
    internal PagesPerSheetDirection _value;
    public PagesPerSheetDirection Value { get; }
    internal NUpPresentationDirectionOption(PrintCapabilityFeature ownerFeature);
    public PagesPerSheetDirection get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.NUpPresentationDirectionSetting : PrintTicketFeature {
    public PagesPerSheetDirection Value { get; public set; }
    internal NUpPresentationDirectionSetting(InternalPrintTicket ownerPrintTicket);
    public PagesPerSheetDirection get_Value();
    public void set_Value(PagesPerSheetDirection value);
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.NUpSetting : PrintTicketFeature {
    public int PagesPerSheet { get; public set; }
    public NUpPresentationDirectionSetting PresentationDirection { get; }
    internal NUpSetting(InternalPrintTicket ownerPrintTicket, string featureName);
    public int get_PagesPerSheet();
    public void set_PagesPerSheet(int value);
    public NUpPresentationDirectionSetting get_PresentationDirection();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.OrientationOption : PrintCapabilityOption {
    internal PageOrientation _value;
    public PageOrientation Value { get; }
    internal OrientationOption(PrintCapabilityFeature ownerFeature);
    public PageOrientation get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.OutputColorOption : PrintCapabilityOption {
    internal OutputColor _value;
    public OutputColor Value { get; }
    internal OutputColorOption(PrintCapabilityFeature ownerFeature);
    public OutputColor get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.OutputQualityOption : PrintCapabilityOption {
    internal OutputQuality _value;
    public OutputQuality Value { get; }
    internal OutputQualityOption(PrintCapabilityFeature ownerFeature);
    public OutputQuality get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageBorderlessCapability : PrintCapabilityFeature {
    internal Collection`1<BorderlessOption> _borderlessOptions;
    public Collection`1<BorderlessOption> BorderlessOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageBorderlessCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<BorderlessOption> get_BorderlessOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageBorderlessSetting : PrintTicketFeature {
    public PageBorderless Value { get; public set; }
    internal PageBorderlessSetting(InternalPrintTicket ownerPrintTicket);
    public PageBorderless get_Value();
    public void set_Value(PageBorderless value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageDeviceFontSubstitutionCapability : PrintCapabilityFeature {
    internal Collection`1<DeviceFontSubstitutionOption> _substOptions;
    public Collection`1<DeviceFontSubstitutionOption> DeviceFontSubstitutionOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageDeviceFontSubstitutionCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<DeviceFontSubstitutionOption> get_DeviceFontSubstitutionOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageDeviceFontSubstitutionSetting : PrintTicketFeature {
    public DeviceFontSubstitution Value { get; public set; }
    internal PageDeviceFontSubstitutionSetting(InternalPrintTicket ownerPrintTicket);
    public DeviceFontSubstitution get_Value();
    public void set_Value(DeviceFontSubstitution value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageInputBinCapability : InputBinCapability {
    internal string FeatureName { get; }
    internal PageInputBinCapability(InternalPrintCapabilities ownerPrintCap);
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual string get_FeatureName();
}
internal class MS.Internal.Printing.Configuration.PageInputBinSetting : InputBinSetting {
    internal PageInputBinSetting(InternalPrintTicket ownerPrintTicket);
}
internal class MS.Internal.Printing.Configuration.PageMediaSizeCapability : PrintCapabilityFeature {
    internal Collection`1<FixedMediaSizeOption> _fixedSizes;
    public Collection`1<FixedMediaSizeOption> FixedMediaSizes { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageMediaSizeCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<FixedMediaSizeOption> get_FixedMediaSizes();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageMediaSizeSetting : PrintTicketFeature {
    public PageMediaSizeName Value { get; }
    public double MediaSizeWidth { get; }
    public double MediaSizeHeight { get; }
    internal PageMediaSizeSetting(InternalPrintTicket ownerPrintTicket);
    public PageMediaSizeName get_Value();
    public double get_MediaSizeWidth();
    public double get_MediaSizeHeight();
    public void SetFixedMediaSize(PageMediaSizeName value);
    public void SetFixedMediaSize(double mediaSizeWidth, double mediaSizeHeight);
    public void SetFixedMediaSize(PageMediaSizeName value, double mediaSizeWidth, double mediaSizeHeight);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageMediaTypeCapability : PrintCapabilityFeature {
    internal Collection`1<MediaTypeOption> _mediaTypes;
    public Collection`1<MediaTypeOption> MediaTypes { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageMediaTypeCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<MediaTypeOption> get_MediaTypes();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageMediaTypeSetting : PrintTicketFeature {
    public PageMediaType Value { get; public set; }
    internal PageMediaTypeSetting(InternalPrintTicket ownerPrintTicket);
    public PageMediaType get_Value();
    public void set_Value(PageMediaType value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageOrderOption : PrintCapabilityOption {
    internal PageOrder _value;
    public PageOrder Value { get; }
    internal PageOrderOption(PrintCapabilityFeature ownerFeature);
    public PageOrder get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageOrientationCapability : PrintCapabilityFeature {
    internal Collection`1<OrientationOption> _orientations;
    public Collection`1<OrientationOption> Orientations { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageOrientationCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<OrientationOption> get_Orientations();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageOrientationSetting : PrintTicketFeature {
    public PageOrientation Value { get; public set; }
    internal PageOrientationSetting(InternalPrintTicket ownerPrintTicket);
    public PageOrientation get_Value();
    public void set_Value(PageOrientation value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageOutputColorCapability : PrintCapabilityFeature {
    internal Collection`1<OutputColorOption> _outputColors;
    public Collection`1<OutputColorOption> OutputColors { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageOutputColorCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<OutputColorOption> get_OutputColors();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageOutputColorSetting : PrintTicketFeature {
    public OutputColor Value { get; public set; }
    internal PageOutputColorSetting(InternalPrintTicket ownerPrintTicket);
    public OutputColor get_Value();
    public void set_Value(OutputColor value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageOutputQualityCapability : PrintCapabilityFeature {
    internal Collection`1<OutputQualityOption> _qualityOptions;
    public Collection`1<OutputQualityOption> OutputQualityOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageOutputQualityCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<OutputQualityOption> get_OutputQualityOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageOutputQualitySetting : PrintTicketFeature {
    public OutputQuality Value { get; public set; }
    internal PageOutputQualitySetting(InternalPrintTicket ownerPrintTicket);
    public OutputQuality get_Value();
    public void set_Value(OutputQuality value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PagePhotoPrintingIntentCapability : PrintCapabilityFeature {
    internal Collection`1<PhotoPrintingIntentOption> _intentOptions;
    public Collection`1<PhotoPrintingIntentOption> PhotoPrintingIntentOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PagePhotoPrintingIntentCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<PhotoPrintingIntentOption> get_PhotoPrintingIntentOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PagePhotoPrintingIntentSetting : PrintTicketFeature {
    public PhotoPrintingIntent Value { get; public set; }
    internal PagePhotoPrintingIntentSetting(InternalPrintTicket ownerPrintTicket);
    public PhotoPrintingIntent get_Value();
    public void set_Value(PhotoPrintingIntent value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageResolutionCapability : PrintCapabilityFeature {
    internal Collection`1<ResolutionOption> _resolutions;
    public Collection`1<ResolutionOption> Resolutions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageResolutionCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<ResolutionOption> get_Resolutions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageResolutionSetting : PrintTicketFeature {
    public int ResolutionX { get; public set; }
    public int ResolutionY { get; public set; }
    public PageQualitativeResolution QualitativeResolution { get; public set; }
    internal PageResolutionSetting(InternalPrintTicket ownerPrintTicket);
    public int get_ResolutionX();
    public void set_ResolutionX(int value);
    public int get_ResolutionY();
    public void set_ResolutionY(int value);
    public PageQualitativeResolution get_QualitativeResolution();
    public void set_QualitativeResolution(PageQualitativeResolution value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageScalingCapability : PrintCapabilityFeature {
    internal Collection`1<ScalingOption> _scalingOptions;
    public Collection`1<ScalingOption> ScalingOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageScalingCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<ScalingOption> get_ScalingOptions();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageScalingSetting : PrintTicketFeature {
    public PageScaling Value { get; }
    public int CustomScaleWidth { get; }
    public int CustomScaleHeight { get; }
    public int CustomSquareScale { get; }
    internal PageScalingSetting(InternalPrintTicket ownerPrintTicket);
    public PageScaling get_Value();
    public int get_CustomScaleWidth();
    public int get_CustomScaleHeight();
    public int get_CustomSquareScale();
    public void SetCustomSquareScaling(int squareScale);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PageTrueTypeFontModeCapability : PrintCapabilityFeature {
    internal Collection`1<TrueTypeFontModeOption> _trueTypeFontModes;
    public Collection`1<TrueTypeFontModeOption> TrueTypeFontModes { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal PageTrueTypeFontModeCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<TrueTypeFontModeOption> get_TrueTypeFontModes();
    internal static PrintCapabilityFeature NewFeatureCallback(InternalPrintCapabilities printCap);
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal sealed virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal class MS.Internal.Printing.Configuration.PageTrueTypeFontModeSetting : PrintTicketFeature {
    public TrueTypeFontMode Value { get; public set; }
    internal PageTrueTypeFontModeSetting(InternalPrintTicket ownerPrintTicket);
    public TrueTypeFontMode get_Value();
    public void set_Value(TrueTypeFontMode value);
    public virtual string ToString();
}
internal abstract class MS.Internal.Printing.Configuration.ParameterDefinition : object {
    internal string ParameterName { get; internal set; }
    internal bool IsValid { get; }
    internal abstract virtual bool ParamDefPropCallback(ParameterDefinition baseParam, XmlPrintCapReader reader);
    internal string get_ParameterName();
    internal void set_ParameterName(string value);
    internal abstract virtual bool get_IsValid();
}
internal class MS.Internal.Printing.Configuration.PhotoPrintingIntentOption : PrintCapabilityOption {
    internal PhotoPrintingIntent _value;
    public PhotoPrintingIntent Value { get; }
    internal PhotoPrintingIntentOption(PrintCapabilityFeature ownerFeature);
    public PhotoPrintingIntent get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.PrintCapabilitiesWriter : object {
    [SecurityCriticalAttribute]
public PrintCapabilitiesWriter(Stream stream, string privateQname, string privateNamespace, bool indent);
    [SecurityCriticalAttribute]
public void Release();
    public void Flush();
    public void WriteStartDocument();
    public void WriteEndDocument();
    public void WritePageImageableSizeProperty(int imageableWidth, int imageableHeight, int originWidth, int originHeight, int extentWidth, int extentHeight);
    public void WriteDocumentCollateFeature();
    public void WritePageOutputColorFeature(bool supportsColor);
    public void WriteJobCopiesAllDocumentsParameterDef(int minCopies, int maxCopies, int defaultCopies);
    public void WriteJobNUpAllDocumentsContiguously(IList`1<UInt32> nUps);
    public void WriteJobDuplexAllDocumentsContiguouslyFeature(bool canDuplex);
    public void WritePageICMRenderingIntentFeature();
    public void WritePageColorManagementFeature();
    public void WriteJobInputBinFeature(IList`1<short> bins, IList`1<string> binDisplayNames);
    public void WritePageMediaSizeFeature(IList`1<short> paperSizeCodes, IList`1<string> paperSizeDisplayNames, IList`1<DC_PAPER_SIZE> paperSizes);
    public void WritePageMediaTypeFeature(IList`1<UInt32> mediaTypes, IList`1<string> mediaTypeDisplayNames);
    public void WritePageOrientationFeature(int landscapeOrientation);
    public void WritePageResolutionFeature(IList`1<DC_RESOLUTION> resolutions);
    public void WritePageScalingFeature(int minScale, int maxScale, int defaultScale);
    public void WritePageTrueTypeFontModeFeature();
    public void WritePageDeviceFontSubstitutionFeature();
    public void WritePageDevmodeSnapshot(Byte[] devMode);
}
internal abstract class MS.Internal.Printing.Configuration.PrintCapabilityFeature : object {
    internal InternalPrintCapabilities OwnerPrintCap { get; internal set; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    protected PrintCapabilityFeature(InternalPrintCapabilities ownerPrintCap);
    internal abstract virtual bool AddOptionCallback(PrintCapabilityOption option);
    internal abstract virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal abstract virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal abstract virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal abstract virtual void OptionAttrCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal abstract virtual bool OptionPropCallback(PrintCapabilityOption option, XmlPrintCapReader reader);
    internal InternalPrintCapabilities get_OwnerPrintCap();
    internal void set_OwnerPrintCap(InternalPrintCapabilities value);
    internal abstract virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal abstract virtual bool get_HasSubFeature();
}
internal abstract class MS.Internal.Printing.Configuration.PrintCapabilityOption : object {
    internal string _optionName;
    internal PrintCapabilityFeature OwnerFeature { get; internal set; }
    protected PrintCapabilityOption(PrintCapabilityFeature ownerFeature);
    internal PrintCapabilityFeature get_OwnerFeature();
    internal void set_OwnerFeature(PrintCapabilityFeature value);
}
internal abstract class MS.Internal.Printing.Configuration.PrintCapabilityRootProperty : object {
    internal abstract virtual bool BuildProperty(XmlPrintCapReader reader);
}
internal class MS.Internal.Printing.Configuration.PrintCapBuilder : object {
    public PrintCapBuilder(Stream xmlStream);
    private static PrintCapBuilder();
    public void Build(InternalPrintCapabilities printCap);
}
internal class MS.Internal.Printing.Configuration.PRINTER_INFO_2 : ValueType {
    public string pPrinterName;
    public string pPortName;
    public string pDriverName;
    public DevMode pDevMode;
}
internal class MS.Internal.Printing.Configuration.PRINTER_INFO_8_AND_9 : ValueType {
    public DevMode pDevMode;
}
internal class MS.Internal.Printing.Configuration.PrintSchema : object {
    internal static int EnumUnspecifiedValue;
    internal static int EnumUnknownValue;
    public static int UnspecifiedIntValue;
    public static double UnspecifiedDoubleValue;
    internal static CapabilityName CapabilityNameEnumMin;
    internal static CapabilityName CapabilityNameEnumMax;
    internal static Collation CollationEnumMin;
    internal static Collation CollationEnumMax;
    internal static DeviceFontSubstitution DeviceFontSubstitutionEnumMin;
    internal static DeviceFontSubstitution DeviceFontSubstitutionEnumMax;
    internal static Duplexing DuplexingEnumMin;
    internal static Duplexing DuplexingEnumMax;
    internal static PageMediaSizeName PageMediaSizeNameEnumMin;
    internal static PageMediaSizeName PageMediaSizeNameEnumMax;
    internal static StdMediaSizeEntry[] StdMediaSizeTable;
    internal static PageMediaType PageMediaTypeEnumMin;
    internal static PageMediaType PageMediaTypeEnumMax;
    internal static PagesPerSheetDirection PagesPerSheetDirectionEnumMin;
    internal static PagesPerSheetDirection PagesPerSheetDirectionEnumMax;
    internal static PageOrientation PageOrientationEnumMin;
    internal static PageOrientation PageOrientationEnumMax;
    internal static OutputColor OutputColorEnumMin;
    internal static OutputColor OutputColorEnumMax;
    internal static PageQualitativeResolution PageQualitativeResolutionEnumMin;
    internal static PageQualitativeResolution PageQualitativeResolutionEnumMax;
    internal static PageScaling PageScalingEnumMin;
    internal static PageScaling PageScalingEnumMax;
    internal static Stapling StaplingEnumMin;
    internal static Stapling StaplingEnumMax;
    internal static TrueTypeFontMode TrueTypeFontModeEnumMin;
    internal static TrueTypeFontMode TrueTypeFontModeEnumMax;
    internal static PageOrder PageOrderEnumMin;
    internal static PageOrder PageOrderEnumMax;
    internal static PhotoPrintingIntent PhotoPrintingIntentEnumMin;
    internal static PhotoPrintingIntent PhotoPrintingIntentEnumMax;
    internal static PageBorderless PageBorderlessEnumMin;
    internal static PageBorderless PageBorderlessEnumMax;
    internal static OutputQuality OutputQualityEnumMin;
    internal static OutputQuality OutputQualityEnumMax;
    internal static InputBin InputBinEnumMin;
    internal static InputBin InputBinEnumMax;
    private static PrintSchema();
}
internal enum MS.Internal.Printing.Configuration.PrintSchemaLocalParameterDefs : Enum {
    public int value__;
    public static PrintSchemaLocalParameterDefs PageScalingScaleWidth;
    public static PrintSchemaLocalParameterDefs PageScalingScaleHeight;
    public static PrintSchemaLocalParameterDefs PageSquareScalingScale;
}
internal static class MS.Internal.Printing.Configuration.PrintSchemaMapper : object {
    public static int SchemaNameToEnumValueWithMap(MapEntry[] map, string schemaName);
    public static int SchemaNameToEnumValueWithArray(String[] enumNames, Int32[] enumValues, string schemaName);
    public static bool CurrentPropertyQValueToEnumValue(XmlPrintCapReader reader, String[] schemaNames, Int32[] schemaEnums, Int32& enumValue);
    public static string EnumValueToSchemaNameWithArray(String[] enumNames, Int32[] enumValues, int enumValue);
}
internal class MS.Internal.Printing.Configuration.PrintSchemaNamespaces : object {
    public static string Framework;
    public static string StandardKeywordSet;
    public static string xsi;
    public static string xsd;
    public static string xmlns;
    public static string FrameworkAttrForXmlReader;
    public static string FrameworkAttrForXmlDOM;
}
[FlagsAttribute]
internal enum MS.Internal.Printing.Configuration.PrintSchemaNodeTypes : Enum {
    public int value__;
    public static PrintSchemaNodeTypes None;
    public static PrintSchemaNodeTypes Attribute;
    public static PrintSchemaNodeTypes AttributeSet;
    public static PrintSchemaNodeTypes AttributeSetRef;
    public static PrintSchemaNodeTypes Feature;
    public static PrintSchemaNodeTypes Option;
    public static PrintSchemaNodeTypes ParameterDef;
    public static PrintSchemaNodeTypes ParameterRef;
    public static PrintSchemaNodeTypes Parameter;
    public static PrintSchemaNodeTypes Property;
    public static PrintSchemaNodeTypes ScoredProperty;
    public static PrintSchemaNodeTypes Value;
    public static PrintSchemaNodeTypes RootLevelTypes;
    public static PrintSchemaNodeTypes FeatureLevelTypesWithSubFeature;
    public static PrintSchemaNodeTypes FeatureLevelTypesWithoutSubFeature;
    public static PrintSchemaNodeTypes OptionLevelTypes;
    public static PrintSchemaNodeTypes ScoredPropertyLevelTypes;
}
internal class MS.Internal.Printing.Configuration.PrintSchemaPrefixes : object {
    public static string Framework;
    public static string StandardKeywordSet;
    public static string xsi;
    public static string xsd;
    public static string xmlns;
}
internal static class MS.Internal.Printing.Configuration.PrintSchemaShim : object {
    public static int WpfPixelsPerInch;
    public static int MicronsPerInch;
    public static int MicronsPerTenthOfMillimeter;
    private static PrintSchemaShim();
    public static bool TryGetPageMediaSizeNameFromPaperSizeCode(short paperSizeCode, PageMediaSizeName& pageMediaSizeName);
    public static bool TryGetPageResolutionFromPaperQuality(short paperQualityCode, PageQualitativeResolution& resolution);
    public static bool TryGetPaperSourceOption(short paperSourceCode, String& localName, Boolean& hasStandardKeywordNamespace, UInt32& displayNameId, String& pskFeedType, String& pskBinType);
    public static bool TryGetMediaTypeOption(UInt32 mediaTypeCode, String& localName, UInt32& displayNameId, String& pskFrontCoating, String& pskBackCoating, String& pskMaterial);
    public static bool TryGetOutputQualityOption(short dmResX, String& localName, UInt32& displayNameId);
    public static bool TryEmbedDevMode(InternalPrintTicket ticket, string oemDriverNamespace, DevMode devMode);
    public static DevMode TryGetEmbeddedDevMode(InternalPrintTicket ticket, string oemDriverNamespace);
    public static void CopyDevModeToTicket(InternalPrintTicket baseTicket, DevMode deltaDevMode, PrintTicketScope scope, DevModeFields supportedFields);
    public static void CopyTicketToDevMode(DevMode baseDevMode, InternalPrintTicket deltaTicket, PrintTicketScope scope, DevModeFields supportedFields);
    [SecurityCriticalAttribute]
public static bool PruneFeatures(DevMode inDevMode, WinSpoolPrinterCapabilities capabilities);
    public static IList`1<DC_PAPER_SIZE> TenthOfMillimeterToMicrons(IList`1<DC_PAPER_SIZE> points);
    public static DC_PAPER_SIZE TenthOfMillimeterToMicrons(DC_PAPER_SIZE size);
    public static int TenthOfMillimeterToMicrons(int tenthOfMillimeterLength);
    public static long TenthOfMillimeterToMicrons(long tenthOfMillimeterLength);
    public static int DpiToMicrons(int dpiLength, int dpi);
}
internal enum MS.Internal.Printing.Configuration.PrintSchemaSubFeatures : Enum {
    public int value__;
    public static PrintSchemaSubFeatures NUpPresentationDirection;
}
internal class MS.Internal.Printing.Configuration.PrintSchemaTags : object {
}
internal class MS.Internal.Printing.Configuration.PrintSchemaXsiTypes : object {
    public static string Integer;
    public static string String;
    public static string QName;
}
internal class MS.Internal.Printing.Configuration.PrintTicketEditor : object {
    public static void CheckIsWellFormedPrintTicket(InternalPrintTicket pt);
    public static void CheckAndAddMissingStdNamespaces(InternalPrintTicket pt);
    public static string AddStdNamespaceDeclaration(XmlElement root, string prefix_header, string nsURI);
    public static XmlElement GetSchemaElementWithNameAttr(InternalPrintTicket pt, XmlElement parent, string schemaTag, string nameAttrWanted);
    public static void RemoveAllSchemaElementsWithNameAttr(InternalPrintTicket pt, XmlElement parent, string schemaTag, string nameAttrToDelete);
    public static XmlElement AddSchemaElementWithNameAttr(InternalPrintTicket pt, XmlElement parent, string schemaTag, string nameAttr);
    public static void SetXsiTypeAttr(InternalPrintTicket pt, XmlElement valueElement, string xsiType);
}
[DefaultMemberAttribute("Item")]
internal abstract class MS.Internal.Printing.Configuration.PrintTicketFeature : object {
    internal InternalPrintTicket _ownerPrintTicket;
    internal PrintTicketFeature _parentFeature;
    internal string _featureName;
    internal PTPropertyMapEntry[] _propertyMaps;
    internal PTFeatureNode FeatureNode { get; }
    internal int Item { get; internal set; }
    protected PrintTicketFeature(InternalPrintTicket ownerPrintTicket);
    public void ClearSetting();
    internal PTFeatureNode get_FeatureNode();
    internal int get_Item(string propertyName);
    internal void set_Item(string propertyName, int value);
}
internal class MS.Internal.Printing.Configuration.PrintTicketParameter : object {
    internal InternalPrintTicket _ownerPrintTicket;
    internal string _parameterName;
    internal PrintTicketParamTypes _parameterType;
    internal PrintTicketParamValueTypes _parameterValueType;
    internal string _parameterNodeTagName;
    internal PrintTicketParameterNode ParameterNode { get; }
    internal int IntValue { get; internal set; }
    internal string StringValue { get; internal set; }
    internal PrintTicketParameter(InternalPrintTicket ownerPrintTicket, string paramName, PrintTicketParamTypes paramType, PrintTicketParamValueTypes paramValueType);
    public void ClearSetting();
    internal virtual void SettingClearCallback();
    internal PrintTicketParameterNode get_ParameterNode();
    internal int get_IntValue();
    internal void set_IntValue(int value);
    internal string get_StringValue();
    internal void set_StringValue(string value);
}
internal class MS.Internal.Printing.Configuration.PrintTicketParameterNode : object {
    public PrintTicketParameter OwnerParameter { get; }
    public XmlElement ParameterElement { get; }
    public static PrintTicketParameterNode GetParameterNode(PrintTicketParameter ptParameter);
    public static void CreateParameterNode(PrintTicketParameter ptParameter);
    public bool GetIntValue(Int32& value);
    public bool GetStringValue(String& value);
    public XmlElement SetIntValue(int value);
    public XmlElement SetStringValue(string value, string xsiType);
    public PrintTicketParameter get_OwnerParameter();
    public XmlElement get_ParameterElement();
}
internal enum MS.Internal.Printing.Configuration.PrintTicketParamTypes : Enum {
    public int value__;
    public static PrintTicketParamTypes Parameter;
    public static PrintTicketParamTypes RootProperty;
}
internal enum MS.Internal.Printing.Configuration.PrintTicketParamValueTypes : Enum {
    public int value__;
    public static PrintTicketParamValueTypes StringValue;
    public static PrintTicketParamValueTypes IntValue;
}
internal class MS.Internal.Printing.Configuration.PTFeatureNode : object {
    public PrintTicketFeature OwnerFeature { get; }
    public XmlElement FeatureElement { get; }
    public static PTFeatureNode GetFeatureNode(PrintTicketFeature ptFeature, XmlElement parentElement);
    public static void CreateFeatureNode(PrintTicketFeature ptFeature, XmlElement parentElement);
    public string GetOptionName(Boolean& bInPrivateNamespace);
    public void SetOptionName(string optionName);
    public bool GetOptionPropertyIntValue(string propertyName, Int32& value);
    public void SetOptionPropertyIntValue(string propertyName, int value);
    public string GetOptionPropertyStdStringValue(string propertyName, Boolean& bInPrivateNamespace);
    public void SetOptionPropertyStdStringValue(string propertyName, string stdValue);
    public string GetOptionPropertyParamRefName(string propertyName);
    public void SetOptionPropertyParamRefName(string propertyName, string paramRefName);
    public XmlElement GetFirstOption();
    public PrintTicketFeature get_OwnerFeature();
    public XmlElement get_FeatureElement();
}
internal class MS.Internal.Printing.Configuration.PTPropertyMapEntry : object {
    public PrintTicketFeature OwnerFeature;
    public string PropName;
    public PTPropValueTypes PropType;
    public String[] PropEnumStrings;
    public Int32[] PropEnumValues;
    public string ParamPropName;
    public string ParamRefName;
    public PrintTicketParameter Parameter { get; }
    public PTPropertyMapEntry(PrintTicketFeature ownerFeature, string propName, PTPropValueTypes propType);
    public PTPropertyMapEntry(PrintTicketFeature ownerFeature, string propName, PTPropValueTypes propType, String[] enumStrings, Int32[] enumValues);
    public PTPropertyMapEntry(PrintTicketFeature ownerFeature, string propName, PTPropValueTypes propType, string paramPropName, string paramRefName);
    public PrintTicketParameter get_Parameter();
}
internal enum MS.Internal.Printing.Configuration.PTPropValueTypes : Enum {
    public int value__;
    public static PTPropValueTypes EnumStringValue;
    public static PTPropValueTypes IntParamRefValue;
    public static PTPropValueTypes PositiveIntValue;
}
internal class MS.Internal.Printing.Configuration.PTProvider : PTProviderBase {
    [SecurityCriticalAttribute]
public PTProvider(string deviceName, int maxVersion, int clientVersion);
    [SecurityCriticalAttribute]
public virtual MemoryStream GetPrintCapabilities(MemoryStream printTicket);
    [SecurityCriticalAttribute]
public virtual MemoryStream MergeAndValidatePrintTicket(MemoryStream basePrintTicket, MemoryStream deltaPrintTicket, PrintTicketScope scope, ConflictStatus& conflictStatus);
    [SecurityCriticalAttribute]
public virtual MemoryStream ConvertDevModeToPrintTicket(Byte[] devMode, PrintTicketScope scope);
    [SecurityCriticalAttribute]
public virtual Byte[] ConvertPrintTicketToDevMode(MemoryStream printTicket, BaseDevModeType baseType, PrintTicketScope scope);
    [SecurityCriticalAttribute]
public virtual void Release();
}
internal abstract class MS.Internal.Printing.Configuration.PTProviderBase : object {
    public static PTProviderBase Create(string deviceName, int maxVersion, int clientVersion);
    public abstract virtual MemoryStream GetPrintCapabilities(MemoryStream printTicket);
    public abstract virtual MemoryStream MergeAndValidatePrintTicket(MemoryStream basePrintTicket, MemoryStream deltaPrintTicket, PrintTicketScope scope, ConflictStatus& conflictStatus);
    public abstract virtual MemoryStream ConvertDevModeToPrintTicket(Byte[] devMode, PrintTicketScope scope);
    public abstract virtual Byte[] ConvertPrintTicketToDevMode(MemoryStream printTicket, BaseDevModeType baseType, PrintTicketScope scope);
    [SecurityCriticalAttribute]
public abstract virtual void Release();
}
internal static class MS.Internal.Printing.Configuration.PTUtility : object {
    private static PTUtility();
    public static bool IsSuccessCode(UInt32 hResult);
    public static string GetTextFromResource(string key);
}
internal class MS.Internal.Printing.Configuration.ResolutionOption : PrintCapabilityOption {
    internal int _resolutionX;
    internal int _resolutionY;
    internal PageQualitativeResolution _qualityValue;
    public PageQualitativeResolution QualitativeResolution { get; }
    public int ResolutionX { get; }
    public int ResolutionY { get; }
    internal ResolutionOption(PrintCapabilityFeature ownerFeature);
    public PageQualitativeResolution get_QualitativeResolution();
    public int get_ResolutionX();
    public int get_ResolutionY();
    public virtual string ToString();
}
[SecurityCriticalAttribute]
internal class MS.Internal.Printing.Configuration.SafeModuleHandle : SafeHandleZeroOrMinusOneIsInvalid {
    [SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
}
[SecurityCriticalAttribute]
internal class MS.Internal.Printing.Configuration.SafePTProviderHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    [SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
}
[SecurityCriticalAttribute]
internal class MS.Internal.Printing.Configuration.SafeWinSpoolPrinterHandle : SafeHandle {
    public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    [SecurityCriticalAttribute]
protected virtual bool ReleaseHandle();
}
internal class MS.Internal.Printing.Configuration.ScalingOption : PrintCapabilityOption {
    internal PageScaling _value;
    internal int _scaleWIndex;
    internal int _scaleHIndex;
    internal int _squareScaleIndex;
    public PageScaling Value { get; }
    public ScalingScaleWidthCapability CustomScaleWidth { get; }
    public ScalingScaleHeightCapability CustomScaleHeight { get; }
    public ScalingSquareScaleCapability CustomSquareScale { get; }
    internal ScalingOption(PrintCapabilityFeature ownerFeature);
    public PageScaling get_Value();
    public ScalingScaleWidthCapability get_CustomScaleWidth();
    public ScalingScaleHeightCapability get_CustomScaleHeight();
    public ScalingSquareScaleCapability get_CustomSquareScale();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.ScalingScaleHeightCapability : NonNegativeIntParameterDefinition {
    internal static ParameterDefinition NewParamDefCallback(InternalPrintCapabilities printCap);
}
internal class MS.Internal.Printing.Configuration.ScalingScaleWidthCapability : NonNegativeIntParameterDefinition {
    internal static ParameterDefinition NewParamDefCallback(InternalPrintCapabilities printCap);
}
internal class MS.Internal.Printing.Configuration.ScalingSquareScaleCapability : NonNegativeIntParameterDefinition {
    internal static ParameterDefinition NewParamDefCallback(InternalPrintCapabilities printCap);
}
internal abstract class MS.Internal.Printing.Configuration.StapleCapability : PrintCapabilityFeature {
    internal Collection`1<StaplingOption> _staplingOptions;
    public Collection`1<StaplingOption> StaplingOptions { get; }
    internal bool IsValid { get; }
    internal string FeatureName { get; }
    internal bool HasSubFeature { get; }
    internal StapleCapability(InternalPrintCapabilities ownerPrintCap);
    public Collection`1<StaplingOption> get_StaplingOptions();
    internal sealed virtual bool AddOptionCallback(PrintCapabilityOption baseOption);
    internal sealed virtual void AddSubFeatureCallback(PrintCapabilityFeature subFeature);
    internal sealed virtual bool FeaturePropCallback(PrintCapabilityFeature feature, XmlPrintCapReader reader);
    internal sealed virtual PrintCapabilityOption NewOptionCallback(PrintCapabilityFeature baseFeature);
    internal sealed virtual void OptionAttrCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool OptionPropCallback(PrintCapabilityOption baseOption, XmlPrintCapReader reader);
    internal sealed virtual bool get_IsValid();
    internal abstract virtual string get_FeatureName();
    internal sealed virtual bool get_HasSubFeature();
}
internal abstract class MS.Internal.Printing.Configuration.StapleSetting : PrintTicketFeature {
    public Stapling Value { get; public set; }
    internal StapleSetting(InternalPrintTicket ownerPrintTicket, string featureName);
    public Stapling get_Value();
    public void set_Value(Stapling value);
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.StaplingOption : PrintCapabilityOption {
    internal Stapling _value;
    public Stapling Value { get; }
    internal StaplingOption(PrintCapabilityFeature ownerFeature);
    public Stapling get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.TrueTypeFontModeOption : PrintCapabilityOption {
    internal TrueTypeFontMode _value;
    public TrueTypeFontMode Value { get; }
    internal TrueTypeFontModeOption(PrintCapabilityFeature ownerFeature);
    public TrueTypeFontMode get_Value();
    public virtual string ToString();
}
internal class MS.Internal.Printing.Configuration.UnitConverter : object {
    public static double LengthValueFromMicronToDIP(int micronValue);
    public static int LengthValueFromDIPToMicron(double dipValue);
}
[SuppressUnmanagedCodeSecurityAttribute]
[SecurityCriticalAttribute("1")]
internal static class MS.Internal.Printing.Configuration.UnsafeNativeMethods : object {
    [SecurityCriticalAttribute]
public static UInt32 PTOpenProviderEx(string deviceName, int maxVersion, int prefVersion, SafePTProviderHandle& handle, Int32& usedVersion);
    [ReliabilityContractAttribute("3", "2")]
public static UInt32 PTCloseProviderImpl(IntPtr handle);
    [SecurityCriticalAttribute]
public static UInt32 PTGetPrintCapabilities(SafePTProviderHandle handle, IStream printTicket, IStream printCapabilities, String& errorMsg);
    [SecurityCriticalAttribute]
public static UInt32 PTMergeAndValidatePrintTicket(SafePTProviderHandle handle, IStream baseTicket, IStream deltaTicket, UInt32 scope, IStream resultTicket, String& errorMsg);
    [SecurityCriticalAttribute]
public static UInt32 PTConvertDevModeToPrintTicket(SafePTProviderHandle handle, UInt32 dmSize, HandleRef devMode, UInt32 scope, IStream printTicket);
    [SecurityCriticalAttribute]
public static UInt32 PTConvertPrintTicketToDevMode(SafePTProviderHandle handle, IStream printTicket, UInt32 baseType, UInt32 scope, UInt32& dmSize, IntPtr& devMode, String& errorMsg);
    [SecurityCriticalAttribute]
public static UInt32 PTReleaseMemory(HandleRef devMode);
    public static bool OpenPrinterW(string pPrinterName, SafeWinSpoolPrinterHandle& printer, HandleRef pDefault);
    public static bool GetPrinterW(SafeWinSpoolPrinterHandle printer, UInt32 dwLevel, SafeMemoryHandle pPrinter, UInt32 dwBuf, UInt32& dwNeeded);
    public static UInt32 DeviceCapabilitiesW(string pDevice, string pPort, DeviceCapability fwCapabilities, SafeMemoryHandle pOutput, SafeMemoryHandle pDevMode);
    public static int DocumentPropertiesW(HandleRef hWnd, SafeWinSpoolPrinterHandle printer, string deviceName, SafeMemoryHandle devModeOutput, SafeMemoryHandle devModeInput, DocumentPropertiesFlags mode);
    public static bool ClosePrinter(IntPtr hPrinter);
    public static IntPtr CreateICW(string lpszDriver, string lpszDevice, string lpszOutput, SafeMemoryHandle devmodePtr);
    public static int GetDeviceCaps(HandleRef hdc, DeviceCap capability);
    public static bool DeleteDC(HandleRef hdc);
    public static int LoadStringW(SafeModuleHandle hInstance, UInt32 uID, StringBuilder lpBuffer, int nBufferMax);
    public static SafeModuleHandle LoadLibraryExW(string lpFileName, IntPtr hFile, LoadLibraryExFlags dwFlags);
    public static bool FreeLibrary(IntPtr hModule);
    public static UInt32 CreateStreamOnHGlobal(SafeMemoryHandle hGlobal, bool fDeleteOnRelease, IStream& ppstm);
}
internal class MS.Internal.Printing.Configuration.WinSpoolPrinterCapabilities : object {
    public bool CanCollate { get; }
    public bool HasColor { get; }
    public int MinCopies { get; }
    public int MaxCopies { get; }
    public bool CanDuplex { get; }
    public bool HasICMIntent { get; }
    public bool HasICMMethod { get; }
    public IList`1<short> Bins { get; }
    public IList`1<string> BinNames { get; }
    public IList`1<UInt32> NUp { get; }
    public IList`1<short> Papers { get; }
    public IList`1<string> PaperNames { get; }
    public IList`1<DC_PAPER_SIZE> PaperSizes { get; }
    public IList`1<UInt32> MediaTypes { get; }
    public IList`1<string> MediaTypeNames { get; }
    public int LandscapeOrientation { get; }
    public IList`1<DC_RESOLUTION> Resolutions { get; }
    public bool CanScale { get; }
    public bool TrueType { get; }
    public DevModeFields Fields { get; }
    [SecurityCriticalAttribute]
public WinSpoolPrinterCapabilities(string deviceName, string driverName, string portName, DevMode devMode);
    [SecurityCriticalAttribute]
public void Release();
    [SecurityCriticalAttribute]
public bool TryGetDeviceCapabilities(Int32& logicalPixelsX, Int32& logicalPixelsY, Int32& physicalWidth, Int32& physicalHeight, Int32& physicalOffsetX, Int32& physicalOffsetY, Int32& horizontalResolution, Int32& verticalResolution);
    [SecurityCriticalAttribute]
public void GetMinExtent(Int32& minPageWidth, Int32& minPageHeight);
    [SecurityCriticalAttribute]
public void GetMaxExtent(Int32& maxPaperWidth, Int32& maxPaperHeight);
    [SecurityCriticalAttribute]
public bool get_CanCollate();
    [SecurityCriticalAttribute]
public bool get_HasColor();
    public int get_MinCopies();
    [SecurityCriticalAttribute]
public int get_MaxCopies();
    [SecurityCriticalAttribute]
public bool get_CanDuplex();
    [SecurityCriticalAttribute]
public bool get_HasICMIntent();
    [SecurityCriticalAttribute]
public bool get_HasICMMethod();
    [SecurityCriticalAttribute]
public IList`1<short> get_Bins();
    [SecurityCriticalAttribute]
public IList`1<string> get_BinNames();
    [SecurityCriticalAttribute]
public IList`1<UInt32> get_NUp();
    [SecurityCriticalAttribute]
public IList`1<short> get_Papers();
    [SecurityCriticalAttribute]
public IList`1<string> get_PaperNames();
    [SecurityCriticalAttribute]
public IList`1<DC_PAPER_SIZE> get_PaperSizes();
    [SecurityCriticalAttribute]
public IList`1<UInt32> get_MediaTypes();
    [SecurityCriticalAttribute]
public IList`1<string> get_MediaTypeNames();
    [SecurityCriticalAttribute]
public int get_LandscapeOrientation();
    [SecurityCriticalAttribute]
public IList`1<DC_RESOLUTION> get_Resolutions();
    [SecurityCriticalAttribute]
public bool get_CanScale();
    [SecurityCriticalAttribute]
public bool get_TrueType();
    [SecurityCriticalAttribute]
public DevModeFields get_Fields();
    public bool GetDefaultPaperSize(DevMode defaultDevMode, IList`1<short> paperSizeCodes, IList`1<DC_PAPER_SIZE> paperSizes, DC_PAPER_SIZE& defaultPaperSize);
}
internal static class MS.Internal.Printing.Configuration.XmlConvertHelper : object {
    public static int ConvertStringToInt32(string s);
    public static decimal ConvertStringToDecimal(string s);
}
internal class MS.Internal.Printing.Configuration.XmlDocQName : object {
    public static string GetURI(XmlDocument xmlDoc, string QName);
    public static string GetLocalName(string QName);
    public static string GetQName(XmlDocument xmlDoc, string URI, string localName);
}
internal class MS.Internal.Printing.Configuration.XmlPrintCapReader : object {
    internal XmlTextReader _xmlReader;
    public PrintSchemaNodeTypes CurrentElementNodeType { get; }
    public int CurrentElementDepth { get; }
    public bool CurrentElementIsEmpty { get; }
    public string CurrentElementNameAttrValue { get; }
    public string CurrentElementTextValue { get; }
    public string CurrentElementPSFNameAttrValue { get; }
    public XmlPrintCapReader(Stream xmlStream);
    public bool MoveToNextSchemaElement(int depth, PrintSchemaNodeTypes typeFilterFlags);
    public void OptionAttributeGenericHandler(PrintCapabilityOption option);
    public string GetCurrentPropertyFullValueWithException();
    public int GetCurrentPropertyIntValueWithException();
    public string GetCurrentPropertyQNameValueWithException();
    public string GetCurrentPropertyParamRefNameWithException();
    public PrintSchemaNodeTypes get_CurrentElementNodeType();
    public int get_CurrentElementDepth();
    public bool get_CurrentElementIsEmpty();
    public string get_CurrentElementNameAttrValue();
    public string get_CurrentElementTextValue();
    public string get_CurrentElementPSFNameAttrValue();
}
internal class MS.Internal.Printing.Configuration.XmlReaderQName : object {
    public static string GetURI(XmlTextReader xmlReader, string QName);
    public static string GetLocalName(string QName);
}
internal class MS.Internal.Printing.MostFrequentlyUsedCache`2 : object {
    public MostFrequentlyUsedCache`2(int maxEntries);
    public void CacheValue(K key, V value);
    public bool TryGetValue(K key, V& value);
}
internal static class MS.Internal.Printing.TestHook : object {
    internal static bool _isFallbackPrintingEnabled;
    public static void EnableFallbackPrinting(bool value);
}
internal static class MS.Internal.PrintWin32Thunk.Win32ApiThunk.NativeMethodsForPrintExceptions : object {
    [SecurityCriticalAttribute]
[SuppressUnmanagedCodeSecurityAttribute]
public static int InvokeFormatMessage(int a, IntPtr b, int c, int d, StringBuilder e, int f, IntPtr g);
}
internal static class MS.Internal.ReachFramework.BuildInfo : object {
    internal static string WCP_PUBLIC_KEY_TOKEN;
    internal static string WCP_VERSION;
    internal static string WCP_PUBLIC_KEY_STRING;
    internal static string WCP_VERSION_SUFFIX;
    internal static string MIL_VERSION_SUFFIX;
    internal static string DEVDIV_PUBLIC_KEY_STRING;
    internal static string DEVDIV_PUBLIC_KEY_TOKEN;
    internal static string PresentationCore;
    internal static string PresentationCFFRasterizer;
    internal static string PresentationFontCache;
    internal static string PresentationFramework;
    internal static string PresentationUI;
    internal static string PresentationFrameworkLuna;
    internal static string PresentationFrameworkRoyale;
    internal static string PresentationFrameworkAero;
    internal static string PresentationFrameworkAero2;
    internal static string PresentationFrameworkAeroLite;
    internal static string PresentationFrameworkClassic;
    internal static string PresentationFrameworkSystemCore;
    internal static string PresentationFrameworkSystemData;
    internal static string PresentationFrameworkSystemDrawing;
    internal static string PresentationFrameworkSystemXml;
    internal static string PresentationFrameworkSystemXmlLinq;
    internal static string ReachFramework;
    internal static string SystemPrinting;
    internal static string SystemXaml;
    internal static string WindowsFormsIntegration;
    internal static string SystemWindowsPresentation;
    internal static string SystemWindowsControlsRibbon;
    internal static string FontCachePortName;
    internal static string FontCacheServiceName;
}
internal static class MS.Internal.ReachFramework.DllImport : object {
    internal static string PresentationNative;
    internal static string PresentationCFFRasterizerNative;
    internal static string MilCore;
    internal static string UIAutomationCore;
    internal static string Wininet;
    internal static string WindowsCodecs;
    internal static string WindowsCodecsExt;
    internal static string Mscms;
    internal static string PrntvPt;
    internal static string Ole32;
}
[AttributeUsageAttribute("5372")]
internal class MS.Internal.ReachFramework.FriendAccessAllowedAttribute : Attribute {
}
internal class MS.Internal.ReachFramework.LooseFileSerializationManager : PackageSerializationManager {
    internal BasePackagingPolicy PackagingPolicy { get; }
    internal XpsResourcePolicy ResourcePolicy { get; }
    public LooseFileSerializationManager(string mainFile);
    public virtual void SaveAsXaml(object serializedObject);
    internal virtual string GetXmlNSForType(Type objectType);
    internal virtual XmlWriter AcquireXmlWriter(Type writerType);
    internal virtual void ReleaseXmlWriter(Type writerType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType, string resourceID);
    internal virtual void ReleaseResourceStream(Type resourceType);
    internal virtual void ReleaseResourceStream(Type resourceType, string resourceID);
    internal virtual void AddRelationshipToCurrentPage(Uri targetUri, string relationshipName);
    internal virtual BasePackagingPolicy get_PackagingPolicy();
    internal virtual XpsResourcePolicy get_ResourcePolicy();
    internal virtual TypeConverter GetTypeConverter(object serializedObject);
    internal virtual TypeConverter GetTypeConverter(Type objType);
}
internal class MS.Internal.ReachFramework.LooseImageSourceTypeConverter : ImageSourceTypeConverter {
    public LooseImageSourceTypeConverter(string mainFile);
    [SecurityTreatAsSafeAttribute]
[SecurityCriticalAttribute]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class MS.Internal.ReachFramework.MyColorTypeConverter : ColorTypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal static class MS.Internal.ReachFramework.SafeSecurityHelper : object {
    internal static string IMAGE;
    internal static string GetAssemblyPartialName(Assembly assembly);
}
internal static class MS.Internal.ReachFramework.SecurityHelper : object {
    private static SecurityHelper();
    [SecurityCriticalAttribute]
internal static bool CheckUnmanagedCodePermission();
    [SecurityCriticalAttribute]
internal static void DemandUnmanagedCode();
    [SecurityCriticalAttribute]
internal static void DemandUIWindowPermission();
    [SecurityCriticalAttribute]
internal static void DemandMediaPermission(MediaPermissionAudio audioPermissionToDemand, MediaPermissionVideo videoPermissionToDemand, MediaPermissionImage imagePermissionToDemand);
    [SecurityCriticalAttribute]
internal static bool CallerHasMediaPermission(MediaPermissionAudio audioPermissionToDemand, MediaPermissionVideo videoPermissionToDemand, MediaPermissionImage imagePermissionToDemand);
    [SecurityCriticalAttribute]
internal static void DemandUnrestrictedUIPermission();
    [SecurityCriticalAttribute]
internal static void DemandMediaAccessPermission(string uri);
    [SecurityCriticalAttribute]
internal static CodeAccessPermission CreateMediaAccessPermission(string uri);
    [SecurityCriticalAttribute]
internal static bool CallerHasWebPermission(Uri uri);
    [SecurityCriticalAttribute]
internal static void DemandWebPermission(Uri uri);
    [SecurityCriticalAttribute]
internal static void DemandPlugInSerializerPermissions();
}
internal class MS.Internal.UriComparer : object {
    public static UriComparer Default { get; }
    private static UriComparer();
    public static UriComparer get_Default();
    public sealed virtual bool Equals(Uri a, Uri b);
    public sealed virtual int GetHashCode(Uri uri);
}
internal static class MS.Internal.Utility.BindUriHelper : object {
    public static int MAX_URL_LENGTH;
    internal static string UriToString(Uri uri);
}
internal enum System.Printing.CapabilityName : Enum {
    public int value__;
    public static CapabilityName DocumentCollate;
    public static CapabilityName JobDuplex;
    public static CapabilityName JobNUp;
    public static CapabilityName JobStaple;
    public static CapabilityName PageDeviceFontSubstitution;
    public static CapabilityName PageMediaSize;
    public static CapabilityName PageMediaType;
    public static CapabilityName PageOrientation;
    public static CapabilityName PageOutputColor;
    public static CapabilityName PageResolution;
    public static CapabilityName PageScaling;
    public static CapabilityName PageTrueTypeFontMode;
    public static CapabilityName JobCopyCount;
    public static CapabilityName PageImageableSize;
    public static CapabilityName JobPageOrder;
    public static CapabilityName PagePhotoPrintingIntent;
    public static CapabilityName PageBorderless;
    public static CapabilityName PageOutputQuality;
    public static CapabilityName JobInputBin;
    public static CapabilityName DocumentInputBin;
    public static CapabilityName PageInputBin;
}
public enum System.Printing.Collation : Enum {
    public int value__;
    public static Collation Unknown;
    public static Collation Collated;
    public static Collation Uncollated;
}
[ComVisibleAttribute("False")]
public enum System.Printing.ConflictStatus : Enum {
    public int value__;
    public static ConflictStatus NoConflict;
    public static ConflictStatus ConflictResolved;
}
public enum System.Printing.DeviceFontSubstitution : Enum {
    public int value__;
    public static DeviceFontSubstitution Unknown;
    public static DeviceFontSubstitution Off;
    public static DeviceFontSubstitution On;
}
public enum System.Printing.Duplexing : Enum {
    public int value__;
    public static Duplexing Unknown;
    public static Duplexing OneSided;
    public static Duplexing TwoSidedShortEdge;
    public static Duplexing TwoSidedLongEdge;
}
public enum System.Printing.InputBin : Enum {
    public int value__;
    public static InputBin Unknown;
    public static InputBin AutoSelect;
    public static InputBin Cassette;
    public static InputBin Tractor;
    public static InputBin AutoSheetFeeder;
    public static InputBin Manual;
}
[ComVisibleAttribute("False")]
public enum System.Printing.Interop.BaseDevModeType : Enum {
    public int value__;
    public static BaseDevModeType UserDefault;
    public static BaseDevModeType PrinterDefault;
}
[ComVisibleAttribute("False")]
public class System.Printing.Interop.PrintTicketConverter : object {
    public static int MaxPrintSchemaVersion { get; }
    public PrintTicketConverter(string deviceName, int clientPrintSchemaVersion);
    public static int get_MaxPrintSchemaVersion();
    public PrintTicket ConvertDevModeToPrintTicket(Byte[] devMode);
    public PrintTicket ConvertDevModeToPrintTicket(Byte[] devMode, PrintTicketScope scope);
    public Byte[] ConvertPrintTicketToDevMode(PrintTicket printTicket, BaseDevModeType baseType);
    public Byte[] ConvertPrintTicketToDevMode(PrintTicket printTicket, BaseDevModeType baseType, PrintTicketScope scope);
    internal static PrintTicket InternalConvertDevModeToPrintTicket(PTProviderBase provider, Byte[] devMode, PrintTicketScope scope);
    internal static Byte[] InternalConvertPrintTicketToDevMode(PTProviderBase provider, PrintTicket printTicket, BaseDevModeType baseType, PrintTicketScope scope);
    private sealed virtual override void System.IDisposable.Dispose();
    public void Dispose();
}
public enum System.Printing.OutputColor : Enum {
    public int value__;
    public static OutputColor Unknown;
    public static OutputColor Color;
    public static OutputColor Grayscale;
    public static OutputColor Monochrome;
}
public enum System.Printing.OutputQuality : Enum {
    public int value__;
    public static OutputQuality Unknown;
    public static OutputQuality Automatic;
    public static OutputQuality Draft;
    public static OutputQuality Fax;
    public static OutputQuality High;
    public static OutputQuality Normal;
    public static OutputQuality Photographic;
    public static OutputQuality Text;
}
public enum System.Printing.PageBorderless : Enum {
    public int value__;
    public static PageBorderless Unknown;
    public static PageBorderless Borderless;
    public static PageBorderless None;
}
public class System.Printing.PageImageableArea : object {
    public double OriginWidth { get; }
    public double OriginHeight { get; }
    public double ExtentWidth { get; }
    public double ExtentHeight { get; }
    internal PageImageableArea(double originW, double originH, double extentW, double extentH);
    public double get_OriginWidth();
    public double get_OriginHeight();
    public double get_ExtentWidth();
    public double get_ExtentHeight();
    public virtual string ToString();
}
public class System.Printing.PageMediaSize : object {
    public Nullable`1<PageMediaSizeName> PageMediaSizeName { get; }
    public Nullable`1<double> Width { get; }
    public Nullable`1<double> Height { get; }
    public PageMediaSize(PageMediaSizeName mediaSizeName);
    public PageMediaSize(double width, double height);
    public PageMediaSize(PageMediaSizeName mediaSizeName, double width, double height);
    public Nullable`1<PageMediaSizeName> get_PageMediaSizeName();
    public Nullable`1<double> get_Width();
    public Nullable`1<double> get_Height();
    public virtual string ToString();
}
public enum System.Printing.PageMediaSizeName : Enum {
    public int value__;
    public static PageMediaSizeName Unknown;
    public static PageMediaSizeName ISOA0;
    public static PageMediaSizeName ISOA1;
    public static PageMediaSizeName ISOA10;
    public static PageMediaSizeName ISOA2;
    public static PageMediaSizeName ISOA3;
    public static PageMediaSizeName ISOA3Rotated;
    public static PageMediaSizeName ISOA3Extra;
    public static PageMediaSizeName ISOA4;
    public static PageMediaSizeName ISOA4Rotated;
    public static PageMediaSizeName ISOA4Extra;
    public static PageMediaSizeName ISOA5;
    public static PageMediaSizeName ISOA5Rotated;
    public static PageMediaSizeName ISOA5Extra;
    public static PageMediaSizeName ISOA6;
    public static PageMediaSizeName ISOA6Rotated;
    public static PageMediaSizeName ISOA7;
    public static PageMediaSizeName ISOA8;
    public static PageMediaSizeName ISOA9;
    public static PageMediaSizeName ISOB0;
    public static PageMediaSizeName ISOB1;
    public static PageMediaSizeName ISOB10;
    public static PageMediaSizeName ISOB2;
    public static PageMediaSizeName ISOB3;
    public static PageMediaSizeName ISOB4;
    public static PageMediaSizeName ISOB4Envelope;
    public static PageMediaSizeName ISOB5Envelope;
    public static PageMediaSizeName ISOB5Extra;
    public static PageMediaSizeName ISOB7;
    public static PageMediaSizeName ISOB8;
    public static PageMediaSizeName ISOB9;
    public static PageMediaSizeName ISOC0;
    public static PageMediaSizeName ISOC1;
    public static PageMediaSizeName ISOC10;
    public static PageMediaSizeName ISOC2;
    public static PageMediaSizeName ISOC3;
    public static PageMediaSizeName ISOC3Envelope;
    public static PageMediaSizeName ISOC4;
    public static PageMediaSizeName ISOC4Envelope;
    public static PageMediaSizeName ISOC5;
    public static PageMediaSizeName ISOC5Envelope;
    public static PageMediaSizeName ISOC6;
    public static PageMediaSizeName ISOC6Envelope;
    public static PageMediaSizeName ISOC6C5Envelope;
    public static PageMediaSizeName ISOC7;
    public static PageMediaSizeName ISOC8;
    public static PageMediaSizeName ISOC9;
    public static PageMediaSizeName ISODLEnvelope;
    public static PageMediaSizeName ISODLEnvelopeRotated;
    public static PageMediaSizeName ISOSRA3;
    public static PageMediaSizeName JapanQuadrupleHagakiPostcard;
    public static PageMediaSizeName JISB0;
    public static PageMediaSizeName JISB1;
    public static PageMediaSizeName JISB10;
    public static PageMediaSizeName JISB2;
    public static PageMediaSizeName JISB3;
    public static PageMediaSizeName JISB4;
    public static PageMediaSizeName JISB4Rotated;
    public static PageMediaSizeName JISB5;
    public static PageMediaSizeName JISB5Rotated;
    public static PageMediaSizeName JISB6;
    public static PageMediaSizeName JISB6Rotated;
    public static PageMediaSizeName JISB7;
    public static PageMediaSizeName JISB8;
    public static PageMediaSizeName JISB9;
    public static PageMediaSizeName JapanChou3Envelope;
    public static PageMediaSizeName JapanChou3EnvelopeRotated;
    public static PageMediaSizeName JapanChou4Envelope;
    public static PageMediaSizeName JapanChou4EnvelopeRotated;
    public static PageMediaSizeName JapanHagakiPostcard;
    public static PageMediaSizeName JapanHagakiPostcardRotated;
    public static PageMediaSizeName JapanKaku2Envelope;
    public static PageMediaSizeName JapanKaku2EnvelopeRotated;
    public static PageMediaSizeName JapanKaku3Envelope;
    public static PageMediaSizeName JapanKaku3EnvelopeRotated;
    public static PageMediaSizeName JapanYou4Envelope;
    public static PageMediaSizeName NorthAmerica10x11;
    public static PageMediaSizeName NorthAmerica10x14;
    public static PageMediaSizeName NorthAmerica11x17;
    public static PageMediaSizeName NorthAmerica9x11;
    public static PageMediaSizeName NorthAmericaArchitectureASheet;
    public static PageMediaSizeName NorthAmericaArchitectureBSheet;
    public static PageMediaSizeName NorthAmericaArchitectureCSheet;
    public static PageMediaSizeName NorthAmericaArchitectureDSheet;
    public static PageMediaSizeName NorthAmericaArchitectureESheet;
    public static PageMediaSizeName NorthAmericaCSheet;
    public static PageMediaSizeName NorthAmericaDSheet;
    public static PageMediaSizeName NorthAmericaESheet;
    public static PageMediaSizeName NorthAmericaExecutive;
    public static PageMediaSizeName NorthAmericaGermanLegalFanfold;
    public static PageMediaSizeName NorthAmericaGermanStandardFanfold;
    public static PageMediaSizeName NorthAmericaLegal;
    public static PageMediaSizeName NorthAmericaLegalExtra;
    public static PageMediaSizeName NorthAmericaLetter;
    public static PageMediaSizeName NorthAmericaLetterRotated;
    public static PageMediaSizeName NorthAmericaLetterExtra;
    public static PageMediaSizeName NorthAmericaLetterPlus;
    public static PageMediaSizeName NorthAmericaMonarchEnvelope;
    public static PageMediaSizeName NorthAmericaNote;
    public static PageMediaSizeName NorthAmericaNumber10Envelope;
    public static PageMediaSizeName NorthAmericaNumber10EnvelopeRotated;
    public static PageMediaSizeName NorthAmericaNumber9Envelope;
    public static PageMediaSizeName NorthAmericaNumber11Envelope;
    public static PageMediaSizeName NorthAmericaNumber12Envelope;
    public static PageMediaSizeName NorthAmericaNumber14Envelope;
    public static PageMediaSizeName NorthAmericaPersonalEnvelope;
    public static PageMediaSizeName NorthAmericaQuarto;
    public static PageMediaSizeName NorthAmericaStatement;
    public static PageMediaSizeName NorthAmericaSuperA;
    public static PageMediaSizeName NorthAmericaSuperB;
    public static PageMediaSizeName NorthAmericaTabloid;
    public static PageMediaSizeName NorthAmericaTabloidExtra;
    public static PageMediaSizeName OtherMetricA4Plus;
    public static PageMediaSizeName OtherMetricA3Plus;
    public static PageMediaSizeName OtherMetricFolio;
    public static PageMediaSizeName OtherMetricInviteEnvelope;
    public static PageMediaSizeName OtherMetricItalianEnvelope;
    public static PageMediaSizeName PRC1Envelope;
    public static PageMediaSizeName PRC1EnvelopeRotated;
    public static PageMediaSizeName PRC10Envelope;
    public static PageMediaSizeName PRC10EnvelopeRotated;
    public static PageMediaSizeName PRC16K;
    public static PageMediaSizeName PRC16KRotated;
    public static PageMediaSizeName PRC2Envelope;
    public static PageMediaSizeName PRC2EnvelopeRotated;
    public static PageMediaSizeName PRC32K;
    public static PageMediaSizeName PRC32KRotated;
    public static PageMediaSizeName PRC32KBig;
    public static PageMediaSizeName PRC3Envelope;
    public static PageMediaSizeName PRC3EnvelopeRotated;
    public static PageMediaSizeName PRC4Envelope;
    public static PageMediaSizeName PRC4EnvelopeRotated;
    public static PageMediaSizeName PRC5Envelope;
    public static PageMediaSizeName PRC5EnvelopeRotated;
    public static PageMediaSizeName PRC6Envelope;
    public static PageMediaSizeName PRC6EnvelopeRotated;
    public static PageMediaSizeName PRC7Envelope;
    public static PageMediaSizeName PRC7EnvelopeRotated;
    public static PageMediaSizeName PRC8Envelope;
    public static PageMediaSizeName PRC8EnvelopeRotated;
    public static PageMediaSizeName PRC9Envelope;
    public static PageMediaSizeName PRC9EnvelopeRotated;
    public static PageMediaSizeName Roll04Inch;
    public static PageMediaSizeName Roll06Inch;
    public static PageMediaSizeName Roll08Inch;
    public static PageMediaSizeName Roll12Inch;
    public static PageMediaSizeName Roll15Inch;
    public static PageMediaSizeName Roll18Inch;
    public static PageMediaSizeName Roll22Inch;
    public static PageMediaSizeName Roll24Inch;
    public static PageMediaSizeName Roll30Inch;
    public static PageMediaSizeName Roll36Inch;
    public static PageMediaSizeName Roll54Inch;
    public static PageMediaSizeName JapanDoubleHagakiPostcard;
    public static PageMediaSizeName JapanDoubleHagakiPostcardRotated;
    public static PageMediaSizeName JapanLPhoto;
    public static PageMediaSizeName Japan2LPhoto;
    public static PageMediaSizeName JapanYou1Envelope;
    public static PageMediaSizeName JapanYou2Envelope;
    public static PageMediaSizeName JapanYou3Envelope;
    public static PageMediaSizeName JapanYou4EnvelopeRotated;
    public static PageMediaSizeName JapanYou6Envelope;
    public static PageMediaSizeName JapanYou6EnvelopeRotated;
    public static PageMediaSizeName NorthAmerica4x6;
    public static PageMediaSizeName NorthAmerica4x8;
    public static PageMediaSizeName NorthAmerica5x7;
    public static PageMediaSizeName NorthAmerica8x10;
    public static PageMediaSizeName NorthAmerica10x12;
    public static PageMediaSizeName NorthAmerica14x17;
    public static PageMediaSizeName BusinessCard;
    public static PageMediaSizeName CreditCard;
}
public enum System.Printing.PageMediaType : Enum {
    public int value__;
    public static PageMediaType Unknown;
    public static PageMediaType AutoSelect;
    public static PageMediaType Archival;
    public static PageMediaType BackPrintFilm;
    public static PageMediaType Bond;
    public static PageMediaType CardStock;
    public static PageMediaType Continuous;
    public static PageMediaType EnvelopePlain;
    public static PageMediaType EnvelopeWindow;
    public static PageMediaType Fabric;
    public static PageMediaType HighResolution;
    public static PageMediaType Label;
    public static PageMediaType MultiLayerForm;
    public static PageMediaType MultiPartForm;
    public static PageMediaType Photographic;
    public static PageMediaType PhotographicFilm;
    public static PageMediaType PhotographicGlossy;
    public static PageMediaType PhotographicHighGloss;
    public static PageMediaType PhotographicMatte;
    public static PageMediaType PhotographicSatin;
    public static PageMediaType PhotographicSemiGloss;
    public static PageMediaType Plain;
    public static PageMediaType Screen;
    public static PageMediaType ScreenPaged;
    public static PageMediaType Stationery;
    public static PageMediaType TabStockFull;
    public static PageMediaType TabStockPreCut;
    public static PageMediaType Transparency;
    public static PageMediaType TShirtTransfer;
    public static PageMediaType None;
}
public enum System.Printing.PageOrder : Enum {
    public int value__;
    public static PageOrder Unknown;
    public static PageOrder Standard;
    public static PageOrder Reverse;
}
public enum System.Printing.PageOrientation : Enum {
    public int value__;
    public static PageOrientation Unknown;
    public static PageOrientation Landscape;
    public static PageOrientation Portrait;
    public static PageOrientation ReverseLandscape;
    public static PageOrientation ReversePortrait;
}
public enum System.Printing.PageQualitativeResolution : Enum {
    public int value__;
    public static PageQualitativeResolution Unknown;
    public static PageQualitativeResolution Default;
    public static PageQualitativeResolution Draft;
    public static PageQualitativeResolution High;
    public static PageQualitativeResolution Normal;
    public static PageQualitativeResolution Other;
}
public class System.Printing.PageResolution : object {
    public Nullable`1<int> X { get; }
    public Nullable`1<int> Y { get; }
    public Nullable`1<PageQualitativeResolution> QualitativeResolution { get; }
    public PageResolution(int resolutionX, int resolutionY);
    public PageResolution(PageQualitativeResolution qualitative);
    public PageResolution(int resolutionX, int resolutionY, PageQualitativeResolution qualitative);
    public Nullable`1<int> get_X();
    public Nullable`1<int> get_Y();
    public Nullable`1<PageQualitativeResolution> get_QualitativeResolution();
    public virtual string ToString();
}
internal enum System.Printing.PageScaling : Enum {
    public int value__;
    public static PageScaling Unspecified;
    public static PageScaling None;
    public static PageScaling Custom;
    public static PageScaling CustomSquare;
}
public class System.Printing.PageScalingFactorRange : object {
    public int MinimumScale { get; }
    public int MaximumScale { get; }
    internal PageScalingFactorRange(int scaleMin, int scaleMax);
    public int get_MinimumScale();
    public int get_MaximumScale();
    public virtual string ToString();
}
public enum System.Printing.PagesPerSheetDirection : Enum {
    public int value__;
    public static PagesPerSheetDirection Unknown;
    public static PagesPerSheetDirection RightBottom;
    public static PagesPerSheetDirection BottomRight;
    public static PagesPerSheetDirection LeftBottom;
    public static PagesPerSheetDirection BottomLeft;
    public static PagesPerSheetDirection RightTop;
    public static PagesPerSheetDirection TopRight;
    public static PagesPerSheetDirection LeftTop;
    public static PagesPerSheetDirection TopLeft;
}
public enum System.Printing.PhotoPrintingIntent : Enum {
    public int value__;
    public static PhotoPrintingIntent Unknown;
    public static PhotoPrintingIntent None;
    public static PhotoPrintingIntent PhotoBest;
    public static PhotoPrintingIntent PhotoDraft;
    public static PhotoPrintingIntent PhotoStandard;
}
public class System.Printing.PrintCapabilities : object {
    public ReadOnlyCollection`1<Collation> CollationCapability { get; }
    public ReadOnlyCollection`1<DeviceFontSubstitution> DeviceFontSubstitutionCapability { get; }
    public ReadOnlyCollection`1<Duplexing> DuplexingCapability { get; }
    public ReadOnlyCollection`1<InputBin> InputBinCapability { get; }
    public Nullable`1<int> MaxCopyCount { get; }
    public Nullable`1<double> OrientedPageMediaWidth { get; }
    public Nullable`1<double> OrientedPageMediaHeight { get; }
    public ReadOnlyCollection`1<OutputColor> OutputColorCapability { get; }
    public ReadOnlyCollection`1<OutputQuality> OutputQualityCapability { get; }
    public ReadOnlyCollection`1<PageBorderless> PageBorderlessCapability { get; }
    public PageImageableArea PageImageableArea { get; }
    public ReadOnlyCollection`1<PageMediaSize> PageMediaSizeCapability { get; }
    public ReadOnlyCollection`1<PageMediaType> PageMediaTypeCapability { get; }
    public ReadOnlyCollection`1<PageOrder> PageOrderCapability { get; }
    public ReadOnlyCollection`1<PageOrientation> PageOrientationCapability { get; }
    public ReadOnlyCollection`1<PageResolution> PageResolutionCapability { get; }
    public PageScalingFactorRange PageScalingFactorRange { get; }
    public ReadOnlyCollection`1<int> PagesPerSheetCapability { get; }
    public ReadOnlyCollection`1<PagesPerSheetDirection> PagesPerSheetDirectionCapability { get; }
    public ReadOnlyCollection`1<PhotoPrintingIntent> PhotoPrintingIntentCapability { get; }
    public ReadOnlyCollection`1<Stapling> StaplingCapability { get; }
    public ReadOnlyCollection`1<TrueTypeFontMode> TrueTypeFontModeCapability { get; }
    public PrintCapabilities(Stream xmlStream);
    public ReadOnlyCollection`1<Collation> get_CollationCapability();
    public ReadOnlyCollection`1<DeviceFontSubstitution> get_DeviceFontSubstitutionCapability();
    public ReadOnlyCollection`1<Duplexing> get_DuplexingCapability();
    public ReadOnlyCollection`1<InputBin> get_InputBinCapability();
    public Nullable`1<int> get_MaxCopyCount();
    public Nullable`1<double> get_OrientedPageMediaWidth();
    public Nullable`1<double> get_OrientedPageMediaHeight();
    public ReadOnlyCollection`1<OutputColor> get_OutputColorCapability();
    public ReadOnlyCollection`1<OutputQuality> get_OutputQualityCapability();
    public ReadOnlyCollection`1<PageBorderless> get_PageBorderlessCapability();
    public PageImageableArea get_PageImageableArea();
    public ReadOnlyCollection`1<PageMediaSize> get_PageMediaSizeCapability();
    public ReadOnlyCollection`1<PageMediaType> get_PageMediaTypeCapability();
    public ReadOnlyCollection`1<PageOrder> get_PageOrderCapability();
    public ReadOnlyCollection`1<PageOrientation> get_PageOrientationCapability();
    public ReadOnlyCollection`1<PageResolution> get_PageResolutionCapability();
    public PageScalingFactorRange get_PageScalingFactorRange();
    public ReadOnlyCollection`1<int> get_PagesPerSheetCapability();
    public ReadOnlyCollection`1<PagesPerSheetDirection> get_PagesPerSheetDirectionCapability();
    public ReadOnlyCollection`1<PhotoPrintingIntent> get_PhotoPrintingIntentCapability();
    public ReadOnlyCollection`1<Stapling> get_StaplingCapability();
    public ReadOnlyCollection`1<TrueTypeFontMode> get_TrueTypeFontModeCapability();
}
public class System.Printing.PrintCommitAttributesException : PrintSystemException {
    public string PrintObjectName { get; }
    public Collection`1<string> CommittedAttributesCollection { get; }
    public Collection`1<string> FailedAttributesCollection { get; }
    public PrintCommitAttributesException(string message);
    public PrintCommitAttributesException(string message, Exception innerException);
    public PrintCommitAttributesException(int errorCode, Collection`1<string> attributesSuccessList, Collection`1<string> attributesFailList);
    public PrintCommitAttributesException(int errorCode, string message, Collection`1<string> attributesSuccessList, Collection`1<string> attributesFailList, string objectName);
    protected PrintCommitAttributesException(SerializationInfo info, StreamingContext context);
    public string get_PrintObjectName();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public Collection`1<string> get_CommittedAttributesCollection();
    public Collection`1<string> get_FailedAttributesCollection();
}
internal abstract class System.Printing.PrinterHResult : object {
    public static int HResultFromWin32(int win32ErrorCode);
    public static int HResultCode(int errorCode);
    public static Facility HResultFacility(int errorCode);
}
public class System.Printing.PrintingCanceledException : PrintJobException {
    public PrintingCanceledException(string message);
    public PrintingCanceledException(string message, Exception innerException);
    public PrintingCanceledException(int errorCode, string message);
    public PrintingCanceledException(int errorCode, string message, Exception innerException);
    public PrintingCanceledException(int errorCode, string message, string printQueueName, string jobName, int jobId);
    public PrintingCanceledException(int errorCode, string message, string printQueueName, string jobName, int jobId, Exception innerException);
    protected PrintingCanceledException(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintingNotSupportedException : PrintSystemException {
    public PrintingNotSupportedException(string message);
    public PrintingNotSupportedException(string message, Exception innerException);
    protected PrintingNotSupportedException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintJobException : PrintSystemException {
    public int JobId { get; }
    public string JobName { get; }
    public string PrintQueueName { get; }
    public PrintJobException(string message);
    public PrintJobException(string message, Exception innerException);
    public PrintJobException(int errorCode, string message);
    public PrintJobException(int errorCode, string message, string printQueueName, string jobName, int jobId);
    public PrintJobException(int errorCode, string message, string printQueueName, string jobName, int jobId, Exception innerException);
    public PrintJobException(int errorCode, string message, Exception innerException);
    protected PrintJobException(SerializationInfo info, StreamingContext context);
    public int get_JobId();
    public string get_JobName();
    public string get_PrintQueueName();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintQueueException : PrintSystemException {
    public string PrinterName { get; }
    public PrintQueueException(string message);
    public PrintQueueException(string message, Exception innerException);
    public PrintQueueException(int errorCode, string message, string printerName);
    public PrintQueueException(int errorCode, string message, string printerName, string printerMessage);
    public PrintQueueException(int errorCode, string message, string printerName, Exception innerException);
    protected PrintQueueException(SerializationInfo info, StreamingContext context);
    public string get_PrinterName();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintServerException : PrintSystemException {
    public string ServerName { get; }
    public PrintServerException(string message);
    public PrintServerException(string message, Exception innerException);
    public PrintServerException(int errorCode, string message, string serverName);
    public PrintServerException(int errorCode, string message, string serverName, Exception innerException);
    protected PrintServerException(SerializationInfo info, StreamingContext context);
    public string get_ServerName();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintSystemException : SystemException {
    public PrintSystemException(string message);
    public PrintSystemException(string message, Exception innerException);
    public PrintSystemException(int errorCode, string message);
    public PrintSystemException(int errorCode, string message, string printerMessage);
    public PrintSystemException(int errorCode, string message, Exception innerException);
    protected PrintSystemException(SerializationInfo info, StreamingContext context);
    private static PrintSystemException();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Printing.PrintTicket : object {
    public Nullable`1<Collation> Collation { get; public set; }
    public Nullable`1<int> CopyCount { get; public set; }
    public Nullable`1<DeviceFontSubstitution> DeviceFontSubstitution { get; public set; }
    public Nullable`1<Duplexing> Duplexing { get; public set; }
    public Nullable`1<InputBin> InputBin { get; public set; }
    public Nullable`1<OutputColor> OutputColor { get; public set; }
    public Nullable`1<OutputQuality> OutputQuality { get; public set; }
    public Nullable`1<PageBorderless> PageBorderless { get; public set; }
    public PageMediaSize PageMediaSize { get; public set; }
    public Nullable`1<PageMediaType> PageMediaType { get; public set; }
    public Nullable`1<PageOrder> PageOrder { get; public set; }
    public Nullable`1<PageOrientation> PageOrientation { get; public set; }
    public PageResolution PageResolution { get; public set; }
    public Nullable`1<int> PageScalingFactor { get; public set; }
    public Nullable`1<int> PagesPerSheet { get; public set; }
    public Nullable`1<PagesPerSheetDirection> PagesPerSheetDirection { get; public set; }
    public Nullable`1<PhotoPrintingIntent> PhotoPrintingIntent { get; public set; }
    public Nullable`1<Stapling> Stapling { get; public set; }
    public Nullable`1<TrueTypeFontMode> TrueTypeFontMode { get; public set; }
    [FriendAccessAllowedAttribute]
internal bool IsSettingChanged { get; }
    public PrintTicket(Stream xmlStream);
    public PrintTicket Clone();
    public MemoryStream GetXmlStream();
    public void SaveTo(Stream outStream);
    public Nullable`1<Collation> get_Collation();
    public void set_Collation(Nullable`1<Collation> value);
    public Nullable`1<int> get_CopyCount();
    public void set_CopyCount(Nullable`1<int> value);
    public Nullable`1<DeviceFontSubstitution> get_DeviceFontSubstitution();
    public void set_DeviceFontSubstitution(Nullable`1<DeviceFontSubstitution> value);
    public Nullable`1<Duplexing> get_Duplexing();
    public void set_Duplexing(Nullable`1<Duplexing> value);
    public Nullable`1<InputBin> get_InputBin();
    public void set_InputBin(Nullable`1<InputBin> value);
    public Nullable`1<OutputColor> get_OutputColor();
    public void set_OutputColor(Nullable`1<OutputColor> value);
    public Nullable`1<OutputQuality> get_OutputQuality();
    public void set_OutputQuality(Nullable`1<OutputQuality> value);
    public Nullable`1<PageBorderless> get_PageBorderless();
    public void set_PageBorderless(Nullable`1<PageBorderless> value);
    public PageMediaSize get_PageMediaSize();
    public void set_PageMediaSize(PageMediaSize value);
    public Nullable`1<PageMediaType> get_PageMediaType();
    public void set_PageMediaType(Nullable`1<PageMediaType> value);
    public Nullable`1<PageOrder> get_PageOrder();
    public void set_PageOrder(Nullable`1<PageOrder> value);
    public Nullable`1<PageOrientation> get_PageOrientation();
    public void set_PageOrientation(Nullable`1<PageOrientation> value);
    public PageResolution get_PageResolution();
    public void set_PageResolution(PageResolution value);
    public Nullable`1<int> get_PageScalingFactor();
    public void set_PageScalingFactor(Nullable`1<int> value);
    public Nullable`1<int> get_PagesPerSheet();
    public void set_PagesPerSheet(Nullable`1<int> value);
    public Nullable`1<PagesPerSheetDirection> get_PagesPerSheetDirection();
    public void set_PagesPerSheetDirection(Nullable`1<PagesPerSheetDirection> value);
    public Nullable`1<PhotoPrintingIntent> get_PhotoPrintingIntent();
    public void set_PhotoPrintingIntent(Nullable`1<PhotoPrintingIntent> value);
    public Nullable`1<Stapling> get_Stapling();
    public void set_Stapling(Nullable`1<Stapling> value);
    public Nullable`1<TrueTypeFontMode> get_TrueTypeFontMode();
    public void set_TrueTypeFontMode(Nullable`1<TrueTypeFontMode> value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal bool get_IsSettingChanged();
    internal string ToXmlString();
}
[FriendAccessAllowedAttribute]
internal class System.Printing.PrintTicketManager : object {
    public static int MaxPrintSchemaVersion { get; }
    public PrintTicketManager(string deviceName, int clientPrintSchemaVersion);
    public static int get_MaxPrintSchemaVersion();
    public PrintCapabilities GetPrintCapabilities(PrintTicket printTicket);
    public MemoryStream GetPrintCapabilitiesAsXml(PrintTicket printTicket);
    public ValidationResult MergeAndValidatePrintTicket(PrintTicket basePrintTicket, PrintTicket deltaPrintTicket);
    public ValidationResult MergeAndValidatePrintTicket(PrintTicket basePrintTicket, PrintTicket deltaPrintTicket, PrintTicketScope scope);
    public PrintTicket ConvertDevModeToPrintTicket(Byte[] devMode);
    public Byte[] ConvertPrintTicketToDevMode(PrintTicket printTicket, BaseDevModeType baseType);
    [SecurityCriticalAttribute]
public virtual void Release();
}
[ComVisibleAttribute("False")]
public enum System.Printing.PrintTicketScope : Enum {
    public int value__;
    public static PrintTicketScope PageScope;
    public static PrintTicketScope DocumentScope;
    public static PrintTicketScope JobScope;
}
public enum System.Printing.Stapling : Enum {
    public int value__;
    public static Stapling Unknown;
    public static Stapling SaddleStitch;
    public static Stapling StapleBottomLeft;
    public static Stapling StapleBottomRight;
    public static Stapling StapleDualLeft;
    public static Stapling StapleDualRight;
    public static Stapling StapleDualTop;
    public static Stapling StapleDualBottom;
    public static Stapling StapleTopLeft;
    public static Stapling StapleTopRight;
    public static Stapling None;
}
public enum System.Printing.TrueTypeFontMode : Enum {
    public int value__;
    public static TrueTypeFontMode Unknown;
    public static TrueTypeFontMode Automatic;
    public static TrueTypeFontMode DownloadAsOutlineFont;
    public static TrueTypeFontMode DownloadAsRasterFont;
    public static TrueTypeFontMode DownloadAsNativeTrueTypeFont;
    public static TrueTypeFontMode RenderAsBitmap;
}
[ComVisibleAttribute("False")]
public class System.Printing.ValidationResult : ValueType {
    private static int NullHashCode;
    private MemoryStream _ptStream;
    private ConflictStatus _status;
    private PrintTicket _printTicket;
    public PrintTicket ValidatedPrintTicket { get; }
    public ConflictStatus ConflictStatus { get; }
    internal ValidationResult(MemoryStream validatedPrintTicketStream, ConflictStatus conflictStatus);
    public PrintTicket get_ValidatedPrintTicket();
    public ConflictStatus get_ConflictStatus();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public static bool op_Equality(ValidationResult a, ValidationResult b);
    public static bool op_Inequality(ValidationResult a, ValidationResult b);
}
internal class System.Windows.Xps.Packaging.FlushItem : object {
    internal FlushOrder FlushOrder { get; }
    public Type ClassType { get; }
    internal FlushItem(FlushOrder flushOrder, Type classType);
    internal FlushOrder get_FlushOrder();
    public Type get_ClassType();
}
internal enum System.Windows.Xps.Packaging.FlushOrder : Enum {
    public int value__;
    public static FlushOrder None;
    public static FlushOrder FirstOrder;
    public static FlushOrder SecondOrder;
    public static FlushOrder ThirdOrder;
    public static FlushOrder FourthOrder;
    public static FlushOrder FifthOrder;
    public static FlushOrder SixthOrder;
}
public interface System.Windows.Xps.Packaging.IDocumentStructureProvider {
    public abstract virtual XpsStructure AddDocumentStructure();
}
internal interface System.Windows.Xps.Packaging.INode {
    public Uri Uri { get; }
    public abstract virtual Uri get_Uri();
    public abstract virtual void Flush();
    public abstract virtual void CommitInternal();
    public abstract virtual PackagePart GetPart();
}
internal class System.Windows.Xps.Packaging.InterleavingNode : object {
    public bool Commited { get; public set; }
    public INode Node { get; }
    public int Number { get; }
    public INode Parent { get; }
    internal InterleavingNode(INode node, int number, INode parent);
    public bool get_Commited();
    public void set_Commited(bool value);
    public INode get_Node();
    public int get_Number();
    public INode get_Parent();
}
public interface System.Windows.Xps.Packaging.IStoryFragmentProvider {
    public abstract virtual XpsStructure AddStoryFragment();
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentReader {
    public PrintTicket PrintTicket { get; }
    public Uri Uri { get; }
    public ReadOnlyCollection`1<IXpsFixedPageReader> FixedPages { get; }
    public int DocumentNumber { get; }
    public ICollection`1<XpsSignatureDefinition> SignatureDefinitions { get; }
    public XpsThumbnail Thumbnail { get; }
    public XpsStructure DocumentStructure { get; }
    public abstract virtual IXpsFixedPageReader GetFixedPage(Uri pageSource);
    public abstract virtual PrintTicket get_PrintTicket();
    public abstract virtual Uri get_Uri();
    public abstract virtual ReadOnlyCollection`1<IXpsFixedPageReader> get_FixedPages();
    public abstract virtual int get_DocumentNumber();
    public abstract virtual ICollection`1<XpsSignatureDefinition> get_SignatureDefinitions();
    public abstract virtual XpsThumbnail get_Thumbnail();
    public abstract virtual XpsStructure get_DocumentStructure();
    public abstract virtual void AddSignatureDefinition(XpsSignatureDefinition signatureDefinition);
    public abstract virtual void RemoveSignatureDefinition(XpsSignatureDefinition signatureDefinition);
    public abstract virtual void CommitSignatureDefinition();
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceReader {
    public PrintTicket PrintTicket { get; }
    public Uri Uri { get; }
    public ReadOnlyCollection`1<IXpsFixedDocumentReader> FixedDocuments { get; }
    public XpsThumbnail Thumbnail { get; }
    public abstract virtual IXpsFixedDocumentReader GetFixedDocument(Uri documentSource);
    public abstract virtual PrintTicket get_PrintTicket();
    public abstract virtual Uri get_Uri();
    public abstract virtual ReadOnlyCollection`1<IXpsFixedDocumentReader> get_FixedDocuments();
    public abstract virtual XpsThumbnail get_Thumbnail();
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentSequenceWriter {
    unknown PrintTicket PrintTicket {public set; }
    public Uri Uri { get; }
    public abstract virtual IXpsFixedDocumentWriter AddFixedDocument();
    public abstract virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public abstract virtual void Commit();
    public abstract virtual void set_PrintTicket(PrintTicket value);
    public abstract virtual Uri get_Uri();
}
public interface System.Windows.Xps.Packaging.IXpsFixedDocumentWriter {
    unknown PrintTicket PrintTicket {public set; }
    public Uri Uri { get; }
    public int DocumentNumber { get; }
    public abstract virtual IXpsFixedPageWriter AddFixedPage();
    public abstract virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public abstract virtual void Commit();
    public abstract virtual void set_PrintTicket(PrintTicket value);
    public abstract virtual Uri get_Uri();
    public abstract virtual int get_DocumentNumber();
}
public interface System.Windows.Xps.Packaging.IXpsFixedPageReader {
    public PrintTicket PrintTicket { get; }
    public Uri Uri { get; }
    public XmlReader XmlReader { get; }
    public int PageNumber { get; }
    public ICollection`1<XpsFont> Fonts { get; }
    public ICollection`1<XpsColorContext> ColorContexts { get; }
    public ICollection`1<XpsResourceDictionary> ResourceDictionaries { get; }
    public ICollection`1<XpsImage> Images { get; }
    public XpsThumbnail Thumbnail { get; }
    public XpsStructure StoryFragment { get; }
    public abstract virtual XpsResource GetResource(Uri resourceUri);
    public abstract virtual XpsFont GetFont(Uri uri);
    public abstract virtual XpsColorContext GetColorContext(Uri uri);
    public abstract virtual XpsResourceDictionary GetResourceDictionary(Uri uri);
    public abstract virtual XpsImage GetImage(Uri uri);
    public abstract virtual PrintTicket get_PrintTicket();
    public abstract virtual Uri get_Uri();
    public abstract virtual XmlReader get_XmlReader();
    public abstract virtual int get_PageNumber();
    public abstract virtual ICollection`1<XpsFont> get_Fonts();
    public abstract virtual ICollection`1<XpsColorContext> get_ColorContexts();
    public abstract virtual ICollection`1<XpsResourceDictionary> get_ResourceDictionaries();
    public abstract virtual ICollection`1<XpsImage> get_Images();
    public abstract virtual XpsThumbnail get_Thumbnail();
    public abstract virtual XpsStructure get_StoryFragment();
}
public interface System.Windows.Xps.Packaging.IXpsFixedPageWriter {
    unknown PrintTicket PrintTicket {public set; }
    public Uri Uri { get; }
    public XmlWriter XmlWriter { get; }
    public int PageNumber { get; }
    public IList`1<string> LinkTargetStream { get; }
    public abstract virtual XpsResource AddResource(Type resourceType, Uri resourceUri);
    public abstract virtual XpsFont AddFont();
    public abstract virtual XpsFont AddFont(bool obfuscate);
    public abstract virtual XpsFont AddFont(bool obfuscate, bool addRestrictedRelationship);
    public abstract virtual XpsColorContext AddColorContext();
    public abstract virtual XpsResourceDictionary AddResourceDictionary();
    public abstract virtual XpsImage AddImage(string mimeType);
    public abstract virtual XpsImage AddImage(XpsImageType imageType);
    public abstract virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public abstract virtual void Commit();
    public abstract virtual void set_PrintTicket(PrintTicket value);
    public abstract virtual Uri get_Uri();
    public abstract virtual XmlWriter get_XmlWriter();
    public abstract virtual int get_PageNumber();
    public abstract virtual IList`1<string> get_LinkTargetStream();
}
internal class System.Windows.Xps.Packaging.NodeComparer : object {
    public NodeComparer(Hashtable flushOrderTable);
    private sealed virtual override int System.Collections.Generic.IComparer<System.Windows.Xps.Packaging.InterleavingNode>.Compare(InterleavingNode x, InterleavingNode y);
}
public enum System.Windows.Xps.Packaging.PackageInterleavingOrder : Enum {
    public int value__;
    public static PackageInterleavingOrder None;
    public static PackageInterleavingOrder ResourceFirst;
    public static PackageInterleavingOrder ResourceLast;
    public static PackageInterleavingOrder ImagesLast;
}
public enum System.Windows.Xps.Packaging.PackagingAction : Enum {
    public int value__;
    public static PackagingAction None;
    public static PackagingAction AddingDocumentSequence;
    public static PackagingAction DocumentSequenceCompleted;
    public static PackagingAction AddingFixedDocument;
    public static PackagingAction FixedDocumentCompleted;
    public static PackagingAction AddingFixedPage;
    public static PackagingAction FixedPageCompleted;
    public static PackagingAction ResourceAdded;
    public static PackagingAction FontAdded;
    public static PackagingAction ImageAdded;
    public static PackagingAction XpsDocumentCommitted;
}
public class System.Windows.Xps.Packaging.PackagingProgressEventArgs : EventArgs {
    public int NumberCompleted { get; }
    public PackagingAction Action { get; }
    public PackagingProgressEventArgs(PackagingAction action, int numberCompleted);
    public int get_NumberCompleted();
    public PackagingAction get_Action();
}
public class System.Windows.Xps.Packaging.PackagingProgressEventHandler : MulticastDelegate {
    public PackagingProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PackagingProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PackagingProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Xps.Packaging.PartEditor : object {
    protected PackagePart MetroPart { get; }
    internal Stream DataStream { get; }
    internal PartEditor(PackagePart metroPart);
    protected PackagePart get_MetroPart();
    internal Stream get_DataStream();
    internal virtual void Close();
    internal virtual void Flush();
    internal virtual void FlushRelationships();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Windows.Xps.Packaging.SpotLocation : object {
    public Uri PageUri { get; public set; }
    public double StartX { get; public set; }
    public double StartY { get; public set; }
    public Uri get_PageUri();
    public void set_PageUri(Uri value);
    public double get_StartX();
    public void set_StartX(double value);
    public double get_StartY();
    public void set_StartY(double value);
}
internal class System.Windows.Xps.Packaging.XmlPartEditor : PartEditor {
    internal bool DoesWriteStartEndTags { get; internal set; }
    internal bool IsStartElementWritten { get; }
    internal XmlTextWriter XmlWriter { get; }
    internal XmlTextReader XmlReader { get; }
    internal XmlPartEditor(PackagePart metroPart);
    internal bool get_DoesWriteStartEndTags();
    internal void set_DoesWriteStartEndTags(bool value);
    internal bool get_IsStartElementWritten();
    internal XmlTextWriter get_XmlWriter();
    internal XmlTextReader get_XmlReader();
    internal void OpenDocumentForRead();
    internal void OpenDocumentForWrite();
    internal void PrepareXmlWriter(string startTag, string namespaceUri);
    internal virtual void Flush();
    internal virtual void Close();
}
internal class System.Windows.Xps.Packaging.XmlTags : object {
    public static string Source { get; }
    public static string get_Source();
}
public class System.Windows.Xps.Packaging.XpsColorContext : XpsResource {
    internal XpsColorContext(XpsManager xpsManager, INode parent, PackagePart part);
}
public class System.Windows.Xps.Packaging.XpsDigitalSignature : object {
    public IXpsFixedDocumentSequenceReader SignedDocumentSequence { get; }
    public bool SignatureOriginRestricted { get; }
    public bool DocumentPropertiesRestricted { get; }
    public Nullable`1<Guid> Id { get; }
    public X509Certificate SignerCertificate { get; }
    public DateTime SigningTime { get; }
    public Byte[] SignatureValue { get; }
    public string SignatureType { get; }
    public bool IsCertificateAvailable { get; }
    internal PackageDigitalSignature PackageSignature { get; }
    public XpsDigitalSignature(PackageDigitalSignature packageSignature, XpsDocument package);
    public IXpsFixedDocumentSequenceReader get_SignedDocumentSequence();
    public bool get_SignatureOriginRestricted();
    public bool get_DocumentPropertiesRestricted();
    public Nullable`1<Guid> get_Id();
    public X509Certificate get_SignerCertificate();
    public DateTime get_SigningTime();
    public Byte[] get_SignatureValue();
    public string get_SignatureType();
    public bool get_IsCertificateAvailable();
    public VerifyResult Verify();
    public VerifyResult Verify(X509Certificate certificate);
    [SecurityCriticalAttribute]
public X509ChainStatusFlags VerifyCertificate();
    [SecurityCriticalAttribute]
public static X509ChainStatusFlags VerifyCertificate(X509Certificate certificate);
    internal PackageDigitalSignature get_PackageSignature();
}
[FlagsAttribute]
public enum System.Windows.Xps.Packaging.XpsDigSigPartAlteringRestrictions : Enum {
    public int value__;
    public static XpsDigSigPartAlteringRestrictions None;
    public static XpsDigSigPartAlteringRestrictions CoreMetadata;
    public static XpsDigSigPartAlteringRestrictions Annotations;
    public static XpsDigSigPartAlteringRestrictions SignatureOrigin;
}
public class System.Windows.Xps.Packaging.XpsDocument : XpsPartBase {
    public bool IsWriter { get; }
    public bool IsReader { get; }
    public IXpsFixedDocumentSequenceReader FixedDocumentSequenceReader { get; }
    public ReadOnlyCollection`1<XpsDigitalSignature> Signatures { get; }
    public PackageProperties CoreDocumentProperties { get; }
    public XpsThumbnail Thumbnail { get; public set; }
    public bool IsSignable { get; }
    unknown Package OpcPackage {internal set; }
    public XpsDocument(Package package);
    public XpsDocument(Package package, CompressionOption compressionOption);
    public XpsDocument(Package package, CompressionOption compressionOption, string path);
    public XpsDocument(string path, FileAccess packageAccess);
    public XpsDocument(string path, FileAccess packageAccess, CompressionOption compressionOption);
    public bool get_IsWriter();
    public bool get_IsReader();
    public IXpsFixedDocumentSequenceReader get_FixedDocumentSequenceReader();
    public ReadOnlyCollection`1<XpsDigitalSignature> get_Signatures();
    public PackageProperties get_CoreDocumentProperties();
    public XpsThumbnail get_Thumbnail();
    public void set_Thumbnail(XpsThumbnail value);
    public bool get_IsSignable();
    public XpsDigitalSignature SignDigitally(X509Certificate certificate, bool embedCertificate, XpsDigSigPartAlteringRestrictions restrictions);
    public XpsDigitalSignature SignDigitally(X509Certificate certificate, bool embedCertificate, XpsDigSigPartAlteringRestrictions restrictions, Guid id);
    public XpsDigitalSignature SignDigitally(X509Certificate certificate, bool embedCertificate, XpsDigSigPartAlteringRestrictions restrictions, Guid id, bool testIsSignable);
    public void RemoveSignature(XpsDigitalSignature signature);
    public XpsThumbnail AddThumbnail(XpsImageType imageType);
    public IXpsFixedDocumentSequenceWriter AddFixedDocumentSequence();
    public FixedDocumentSequence GetFixedDocumentSequence();
    internal virtual void CommitInternal();
    public void Close();
    protected virtual void Dispose(bool disposing);
    internal void CollectSelfAndDependents(Dictionary`2<Uri, Uri> dependentList, List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    [FriendAccessAllowedAttribute]
internal static XpsDocument CreateXpsDocument(Stream dataStream);
    [FriendAccessAllowedAttribute]
internal void DisposeXpsDocument();
    internal void set_OpcPackage(Package value);
    [SecurityCriticalAttribute]
internal static void SaveWithUI(IntPtr parent, Uri source, Uri target);
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.Flush();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.CommitInternal();
    private sealed virtual override PackagePart System.Windows.Xps.Packaging.INode.GetPart();
    [FriendAccessAllowedAttribute]
internal PackageSerializationManager CreateSerializationManager(bool bBatchMode);
    [FriendAccessAllowedAttribute]
internal PackageSerializationManager CreateAsyncSerializationManager(bool bBatchMode);
    [FriendAccessAllowedAttribute]
internal void DisposeSerializationManager();
    public static XpsDocumentWriter CreateXpsDocumentWriter(XpsDocument xpsDocument);
}
internal class System.Windows.Xps.Packaging.XpsFixedDocumentReaderWriter : XpsPartBase {
    public PrintTicket PrintTicket { get; public set; }
    public ReadOnlyCollection`1<IXpsFixedPageReader> FixedPages { get; }
    public ICollection`1<XpsSignatureDefinition> SignatureDefinitions { get; }
    public int DocumentNumber { get; }
    public XpsThumbnail Thumbnail { get; }
    public XpsStructure DocumentStructure { get; }
    internal XmlWriter XmlWriter { get; }
    internal XpsFixedDocumentReaderWriter(XpsManager xpsManager, INode parent, PackagePart part, int documentNumber);
    public sealed virtual PrintTicket get_PrintTicket();
    public sealed virtual void set_PrintTicket(PrintTicket value);
    public sealed virtual ReadOnlyCollection`1<IXpsFixedPageReader> get_FixedPages();
    public sealed virtual ICollection`1<XpsSignatureDefinition> get_SignatureDefinitions();
    public sealed virtual int get_DocumentNumber();
    public sealed virtual XpsThumbnail get_Thumbnail();
    public sealed virtual XpsStructure get_DocumentStructure();
    public sealed virtual IXpsFixedPageWriter AddFixedPage();
    public sealed virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public sealed virtual XpsStructure AddDocumentStructure();
    public void AddRelationship(Uri targetUri, string relationshipName);
    public sealed virtual IXpsFixedPageReader GetFixedPage(Uri pageUri);
    public sealed virtual void AddSignatureDefinition(XpsSignatureDefinition signatureDefinition);
    public sealed virtual void CommitSignatureDefinition();
    public sealed virtual void RemoveSignatureDefinition(XpsSignatureDefinition signatureDefinition);
    public sealed virtual void Commit();
    internal virtual void CommitInternal();
    internal void CollectSelfAndDependents(Dictionary`2<Uri, Uri> dependentList, List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    internal void CollectXmlPartsAndDepenedents(List`1<PackagePart> xmlPartList);
    internal void CollectDependents(Dictionary`2<Uri, Uri> dependents, List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    internal void CurrentPageCommitted();
    internal XmlWriter get_XmlWriter();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.Flush();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.CommitInternal();
    private sealed virtual override PackagePart System.Windows.Xps.Packaging.INode.GetPart();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.Windows.Xps.Packaging.XpsFixedDocumentSequenceReaderWriter : XpsPartBase {
    public PrintTicket PrintTicket { get; public set; }
    public ReadOnlyCollection`1<IXpsFixedDocumentReader> FixedDocuments { get; }
    public XpsThumbnail Thumbnail { get; }
    internal XmlWriter XmlWriter { get; }
    internal XpsFixedDocumentSequenceReaderWriter(XpsManager xpsManager, INode parent, PackagePart part);
    public sealed virtual PrintTicket get_PrintTicket();
    public sealed virtual void set_PrintTicket(PrintTicket value);
    public sealed virtual ReadOnlyCollection`1<IXpsFixedDocumentReader> get_FixedDocuments();
    public sealed virtual XpsThumbnail get_Thumbnail();
    public sealed virtual IXpsFixedDocumentWriter AddFixedDocument();
    public sealed virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public sealed virtual IXpsFixedDocumentReader GetFixedDocument(Uri documentUri);
    public sealed virtual void Commit();
    internal virtual void CommitInternal();
    internal void CollectSelfAndDependents(Dictionary`2<Uri, Uri> dependentList, List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    internal void CollectXmlPartsAndDepenedents(List`1<PackagePart> xmlPartList);
    internal XmlWriter get_XmlWriter();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.Flush();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.CommitInternal();
    private sealed virtual override PackagePart System.Windows.Xps.Packaging.INode.GetPart();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.Windows.Xps.Packaging.XpsFixedPageReaderWriter : XpsPartBase {
    public PrintTicket PrintTicket { get; public set; }
    public XmlWriter XmlWriter { get; }
    public XmlReader XmlReader { get; }
    public IList`1<string> LinkTargetStream { get; }
    public int PageNumber { get; }
    public XmlWriter ResourceDictionaryXmlWriter { get; }
    public ICollection`1<XpsFont> Fonts { get; }
    public ICollection`1<XpsColorContext> ColorContexts { get; }
    public ICollection`1<XpsResourceDictionary> ResourceDictionaries { get; }
    public ICollection`1<XpsImage> Images { get; }
    public XpsThumbnail Thumbnail { get; }
    public XpsStructure StoryFragment { get; }
    internal XpsFixedDocumentReaderWriter Parent { get; }
    internal XmlWriter PageXmlWriter { get; }
    internal XpsFixedPageReaderWriter(XpsManager xpsManager, XpsFixedDocumentReaderWriter parent, PackagePart part, IList`1<string> linkTargetStream, int pageNumber);
    public sealed virtual PrintTicket get_PrintTicket();
    public sealed virtual void set_PrintTicket(PrintTicket value);
    public sealed virtual XmlWriter get_XmlWriter();
    public sealed virtual XmlReader get_XmlReader();
    public sealed virtual IList`1<string> get_LinkTargetStream();
    public sealed virtual int get_PageNumber();
    public XmlWriter get_ResourceDictionaryXmlWriter();
    public sealed virtual ICollection`1<XpsFont> get_Fonts();
    public sealed virtual ICollection`1<XpsColorContext> get_ColorContexts();
    public sealed virtual ICollection`1<XpsResourceDictionary> get_ResourceDictionaries();
    public sealed virtual ICollection`1<XpsImage> get_Images();
    public sealed virtual XpsThumbnail get_Thumbnail();
    public sealed virtual XpsStructure get_StoryFragment();
    public void AddRelationship(Uri targetUri, string relationshipName);
    public sealed virtual XpsResource AddResource(Type resourceType, Uri resourceUri);
    public sealed virtual XpsStructure AddStoryFragment();
    public sealed virtual XpsResource GetResource(Uri resourceUri);
    public sealed virtual XpsFont AddFont();
    public sealed virtual XpsFont AddFont(bool obfuscate);
    public sealed virtual XpsFont AddFont(bool obfuscate, bool addRestrictedRelationship);
    public sealed virtual XpsColorContext AddColorContext();
    public sealed virtual XpsResourceDictionary AddResourceDictionary();
    public sealed virtual XpsThumbnail AddThumbnail(XpsImageType imageType);
    public sealed virtual XpsFont GetFont(Uri uri);
    public sealed virtual XpsColorContext GetColorContext(Uri uri);
    public sealed virtual XpsResourceDictionary GetResourceDictionary(Uri uri);
    public sealed virtual XpsImage AddImage(XpsImageType imageType);
    public sealed virtual XpsImage AddImage(string mimeType);
    internal XpsImage AddImage(ContentType mimeType);
    public sealed virtual XpsImage GetImage(Uri uri);
    public sealed virtual void Commit();
    internal virtual void CommitInternal();
    internal void CollectSelfAndDependents(Dictionary`2<Uri, Uri> dependentList, List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    internal void CollectXmlPartsAndDepenedents(List`1<PackagePart> xmlPartList);
    internal void CollectDependents(Dictionary`2<Uri, Uri> dependents);
    internal XpsFixedDocumentReaderWriter get_Parent();
    internal XmlWriter get_PageXmlWriter();
    internal void PrepareCommit();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.Flush();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.CommitInternal();
    private sealed virtual override PackagePart System.Windows.Xps.Packaging.INode.GetPart();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Windows.Xps.Packaging.XpsFont : XpsResource {
    public bool IsObfuscated { get; }
    public bool IsRestricted { get; public set; }
    internal XpsFont(XpsManager xpsManager, INode parent, PackagePart part);
    public bool get_IsObfuscated();
    public bool get_IsRestricted();
    public void set_IsRestricted(bool value);
    public static void ObfuscateFontData(Byte[] fontData, Guid guid);
}
public class System.Windows.Xps.Packaging.XpsImage : XpsResource {
    internal XpsImage(XpsManager xpsManager, INode parent, PackagePart part);
}
public enum System.Windows.Xps.Packaging.XpsImageType : Enum {
    public int value__;
    public static XpsImageType PngImageType;
    public static XpsImageType JpegImageType;
    public static XpsImageType TiffImageType;
    public static XpsImageType WdpImageType;
}
internal class System.Windows.Xps.Packaging.XpsInterleavingPolicy : object {
    public XpsInterleavingPolicy(PackageInterleavingOrder type, bool flushOnSubsetComplete);
    public void RegisterFlushOrder(FlushOrder flushOrder, Type classType);
    internal void add_PackagingProgressEvent(PackagingProgressEventHandler value);
    internal void remove_PackagingProgressEvent(PackagingProgressEventHandler value);
    internal void SignalSubsetComplete();
    internal void Commit(INode node);
    internal void AddItem(INode n, int number, INode parent);
    internal PackagingAction GetAddType(INode n);
}
internal class System.Windows.Xps.Packaging.XpsManager : object {
    internal static Dictionary`2<Uri, int> _packageCache;
    internal static object _globalLock;
    public PackagePart StartingPart { get; public set; }
    public XpsDocument XpsDocument { get; public set; }
    public bool IsWriter { get; }
    public bool IsReader { get; }
    public Package MetroPackage { get; }
    public bool Streaming { get; }
    internal XpsManager(Package metroPackage, CompressionOption compressionOption);
    internal XpsManager(string path, FileAccess packageAccess, CompressionOption compressionOption);
    private static XpsManager();
    public PackagePart get_StartingPart();
    public void set_StartingPart(PackagePart value);
    public void set_XpsDocument(XpsDocument value);
    public XpsDocument get_XpsDocument();
    public bool get_IsWriter();
    public bool get_IsReader();
    public Package get_MetroPackage();
    public bool get_Streaming();
    public PackagePart GeneratePart(ContentType contentType, Uri partUri);
    public PackagePart GenerateUniquePart(ContentType contentType);
    public PrintTicket EnsurePrintTicket(Uri partUri);
    public PackagePart GenerateObfuscatedFontPart();
    public void WritePrintTicket(XpsPartBase relatedPart, PackagePart metroPart, PrintTicket printTicket);
    public void WriteEmptyPrintTicket(XpsPartBase relatedPart, PackagePart metroPart);
    public PackagePart GetPart(Uri uri);
    public PackagePart AddSignatureDefinitionPart(PackagePart documentPart);
    public PackagePart GetSignatureDefinitionPart(Uri documentUri);
    public PackagePart GetDocumentPropertiesPart();
    public PackagePart GetThumbnailPart(PackagePart parent);
    public PackagePart GetPrintTicketPart(Uri documentUri);
    public PackagePart AddDocumentPropertiesPart();
    public XpsThumbnail AddThumbnail(XpsImageType imageType, INode parent, XpsThumbnail oldThumbnail);
    public XpsThumbnail EnsureThumbnail(INode parent, PackagePart part);
    public void CollectPropertiesForSigning(Dictionary`2<Uri, Uri> dependents, XpsDigSigPartAlteringRestrictions restrictions);
    public Uri GetSignatureOriginUri();
    public void CollectSignitureOriginForSigning(List`1<PackageRelationshipSelector> selectorList, XpsDigSigPartAlteringRestrictions restrictions);
    public PackageDigitalSignature Sign(IEnumerable`1<Uri> partList, X509Certificate certificate, bool embedCertificate, IEnumerable`1<PackageRelationshipSelector> relationshipSelectors, string id);
    public void Close();
    internal Uri CreateStructureUri();
    internal Uri CreateFragmentUri(int pageNumber);
    private sealed virtual override void System.IDisposable.Dispose();
    internal static PackagePart GetXpsDocumentStartingPart(Package package);
    internal static void SetXpsDocumentStartingPart(Package package, PackagePart startingPart);
    public static string MakeRelativePath(Uri baseUri, Uri fileUri);
    public static bool SupportedImageType(ContentType imageContentType);
    public static ContentType ImageTypeToString(XpsImageType imageType);
}
internal class System.Windows.Xps.Packaging.XpsNamedProperties : object {
    public static string PrintTicketProperty { get; }
    public static string ClrProperty { get; }
    public static string get_PrintTicketProperty();
    public static string get_ClrProperty();
}
public abstract class System.Windows.Xps.Packaging.XpsPartBase : object {
    public Uri Uri { get; public set; }
    internal XpsManager CurrentXpsManager { get; }
    internal XpsPartBase(XpsManager xpsManager);
    public sealed virtual Uri get_Uri();
    public void set_Uri(Uri value);
    internal virtual void CommitInternal();
    internal XpsManager get_CurrentXpsManager();
}
public class System.Windows.Xps.Packaging.XpsResource : XpsPartBase {
    internal XpsResource(XpsManager xpsManager, INode parent, PackagePart part);
    public Uri RelativeUri(Uri inUri);
    public virtual Stream GetStream();
    public void Commit();
    internal virtual void CommitInternal();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.Flush();
    private sealed virtual override void System.Windows.Xps.Packaging.INode.CommitInternal();
    private sealed virtual override PackagePart System.Windows.Xps.Packaging.INode.GetPart();
    private sealed virtual override void System.IDisposable.Dispose();
}
public class System.Windows.Xps.Packaging.XpsResourceDictionary : XpsResource {
    internal XpsResourceDictionary(XpsManager xpsManager, INode parent, PackagePart part);
}
internal class System.Windows.Xps.Packaging.XpsResourcePolicy : object {
    public XpsResourceSharing ResourceSharingMode { get; }
    internal Dictionary`2<UInt32, Uri> ImageCrcTable { get; internal set; }
    internal Dictionary`2<int, Uri> ImageUriHashTable { get; internal set; }
    internal Dictionary`2<int, Uri> CurrentPageImageTable { get; internal set; }
    internal Dictionary`2<int, Uri> ColorContextTable { get; internal set; }
    internal Dictionary`2<int, Uri> CurrentPageColorContextTable { get; internal set; }
    internal Dictionary`2<int, Uri> ResourceDictionaryTable { get; internal set; }
    internal Dictionary`2<int, Uri> CurrentPageResourceDictionaryTable { get; internal set; }
    public XpsResourcePolicy(XpsResourceSharing sharingMode);
    public XpsResourceSharing get_ResourceSharingMode();
    public void RegisterService(object service, Type serviceType);
    internal bool SubsetComplete(INode node);
    internal object GetService(Type serviceType);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    internal Dictionary`2<UInt32, Uri> get_ImageCrcTable();
    internal void set_ImageCrcTable(Dictionary`2<UInt32, Uri> value);
    internal Dictionary`2<int, Uri> get_ImageUriHashTable();
    internal void set_ImageUriHashTable(Dictionary`2<int, Uri> value);
    internal Dictionary`2<int, Uri> get_CurrentPageImageTable();
    internal void set_CurrentPageImageTable(Dictionary`2<int, Uri> value);
    internal Dictionary`2<int, Uri> get_ColorContextTable();
    internal void set_ColorContextTable(Dictionary`2<int, Uri> value);
    internal Dictionary`2<int, Uri> get_CurrentPageColorContextTable();
    internal void set_CurrentPageColorContextTable(Dictionary`2<int, Uri> value);
    internal Dictionary`2<int, Uri> get_ResourceDictionaryTable();
    internal void set_ResourceDictionaryTable(Dictionary`2<int, Uri> value);
    internal Dictionary`2<int, Uri> get_CurrentPageResourceDictionaryTable();
    internal void set_CurrentPageResourceDictionaryTable(Dictionary`2<int, Uri> value);
}
public enum System.Windows.Xps.Packaging.XpsResourceSharing : Enum {
    public int value__;
    public static XpsResourceSharing ShareResources;
    public static XpsResourceSharing NoResourceSharing;
}
internal class System.Windows.Xps.Packaging.XpsS0Markup : object {
    public static string PackageRelationshipUri { get; }
    public static string ObfuscatedFontExt { get; }
    public static string PageWidth { get; }
    public static string PageHeight { get; }
    public static string FixedPage { get; }
    public static string FixedDocument { get; }
    public static string FixedDocumentSequence { get; }
    public static string PageContent { get; }
    public static string DocumentReference { get; }
    public static string StoryFragments { get; }
    public static string Xmlns { get; }
    public static string XmlnsX { get; }
    public static string XmlLang { get; }
    public static string XmlnsXSchema { get; }
    public static string XmlLangValue { get; }
    public static string ImageUriPlaceHolder { get; }
    public static string ColorContextUriPlaceHolder { get; }
    public static string ResourceDictionaryUriPlaceHolder { get; }
    public static string FontUriPlaceHolder { get; }
    public static string ResourceDictionary { get; }
    public static string PageResources { get; }
    public static string SignatureDefinition { get; }
    public static string SignatureDefinitions { get; }
    public static string RequestedSigner { get; }
    public static string SpotLocation { get; }
    public static string PageUri { get; }
    public static string StartX { get; }
    public static string StartY { get; }
    public static string Intent { get; }
    public static string SignBy { get; }
    public static string SigningLocale { get; }
    public static string SpotId { get; }
    public static XmlnsUriContainer XmlnsUri { get; }
    public static ContentType ApplicationXaml { get; }
    public static ContentType DocumentSequenceContentType { get; }
    public static ContentType FixedDocumentContentType { get; }
    public static ContentType FixedPageContentType { get; }
    public static ContentType DocumentStructureContentType { get; }
    public static ContentType StoryFragmentsContentType { get; }
    public static ContentType SignatureDefintionType { get; }
    public static ContentType CoreDocumentPropertiesType { get; }
    public static ContentType PrintTicketContentType { get; }
    public static ContentType ResourceContentType { get; }
    public static ContentType FontContentType { get; }
    public static ContentType FontObfuscatedContentType { get; }
    public static ContentType ColorContextContentType { get; }
    public static ContentType JpgContentType { get; }
    public static ContentType SigOriginContentType { get; }
    public static ContentType SigCertContentType { get; }
    public static ContentType DiscardContentType { get; }
    public static ContentType RelationshipContentType { get; }
    public static string JpgExtension { get; }
    public static ContentType PngContentType { get; }
    public static string PngExtension { get; }
    public static ContentType TifContentType { get; }
    public static string TifExtension { get; }
    public static ContentType WdpContentType { get; }
    public static string WdpExtension { get; }
    public static ContentType WmpContentType { get; }
    public static ContentType ResourceDictionaryContentType { get; }
    public static string DocumentSequenceNamespace { get; }
    public static string FixedDocumentNamespace { get; }
    public static string SignatureDefinitionNamespace { get; }
    public static string CorePropertiesRelationshipType { get; }
    public static string StructureRelationshipName { get; }
    public static string StoryFragmentsRelationshipName { get; }
    public static string ReachPackageStartingPartRelationshipType { get; }
    public static string ResourceRelationshipName { get; }
    public static string PrintTicketRelationshipName { get; }
    public static string SignatureDefinitionRelationshipName { get; }
    public static string RestrictedFontRelationshipType { get; }
    public static string DitialSignatureRelationshipType { get; }
    public static string ThumbnailRelationshipName { get; }
    public static string VersionExtensiblityNamespace { get; }
    private static XpsS0Markup();
    public static string get_PackageRelationshipUri();
    public static string get_ObfuscatedFontExt();
    public static string get_PageWidth();
    public static string get_PageHeight();
    public static string get_FixedPage();
    public static string get_FixedDocument();
    public static string get_FixedDocumentSequence();
    public static string get_PageContent();
    public static string get_DocumentReference();
    public static string get_StoryFragments();
    public static string get_Xmlns();
    public static string get_XmlnsX();
    public static string get_XmlLang();
    public static string get_XmlnsXSchema();
    public static string get_XmlLangValue();
    public static string get_ImageUriPlaceHolder();
    public static string get_ColorContextUriPlaceHolder();
    public static string get_ResourceDictionaryUriPlaceHolder();
    public static string get_FontUriPlaceHolder();
    public static string get_ResourceDictionary();
    public static string get_PageResources();
    public static string get_SignatureDefinition();
    public static string get_SignatureDefinitions();
    public static string get_RequestedSigner();
    public static string get_SpotLocation();
    public static string get_PageUri();
    public static string get_StartX();
    public static string get_StartY();
    public static string get_Intent();
    public static string get_SignBy();
    public static string get_SigningLocale();
    public static string get_SpotId();
    public static string GetXmlnsUri(int index);
    public static XmlnsUriContainer get_XmlnsUri();
    public static ContentType get_ApplicationXaml();
    public static ContentType get_DocumentSequenceContentType();
    public static ContentType get_FixedDocumentContentType();
    public static ContentType get_FixedPageContentType();
    public static ContentType get_DocumentStructureContentType();
    public static ContentType get_StoryFragmentsContentType();
    public static ContentType get_SignatureDefintionType();
    public static ContentType get_CoreDocumentPropertiesType();
    public static ContentType get_PrintTicketContentType();
    public static ContentType get_ResourceContentType();
    public static ContentType get_FontContentType();
    public static ContentType get_FontObfuscatedContentType();
    public static ContentType get_ColorContextContentType();
    public static ContentType get_JpgContentType();
    public static ContentType get_SigOriginContentType();
    public static ContentType get_SigCertContentType();
    public static ContentType get_DiscardContentType();
    public static ContentType get_RelationshipContentType();
    public static string get_JpgExtension();
    public static ContentType get_PngContentType();
    public static string get_PngExtension();
    public static ContentType get_TifContentType();
    public static string get_TifExtension();
    public static ContentType get_WdpContentType();
    public static string get_WdpExtension();
    public static ContentType get_WmpContentType();
    public static ContentType get_ResourceDictionaryContentType();
    public static string get_DocumentSequenceNamespace();
    public static string get_FixedDocumentNamespace();
    public static string get_SignatureDefinitionNamespace();
    public static string get_CorePropertiesRelationshipType();
    public static string get_StructureRelationshipName();
    public static string get_StoryFragmentsRelationshipName();
    public static string get_ReachPackageStartingPartRelationshipType();
    public static string get_ResourceRelationshipName();
    public static string get_PrintTicketRelationshipName();
    public static string get_SignatureDefinitionRelationshipName();
    public static string get_RestrictedFontRelationshipType();
    public static string get_DitialSignatureRelationshipType();
    public static string get_ThumbnailRelationshipName();
    public static string get_VersionExtensiblityNamespace();
}
public class System.Windows.Xps.Packaging.XpsSignatureDefinition : object {
    public string RequestedSigner { get; public set; }
    public SpotLocation SpotLocation { get; public set; }
    public string Intent { get; public set; }
    public Nullable`1<DateTime> SignBy { get; public set; }
    public string SigningLocale { get; public set; }
    public Nullable`1<Guid> SpotId { get; public set; }
    public CultureInfo Culture { get; public set; }
    public bool HasBeenModified { get; public set; }
    public string get_RequestedSigner();
    public void set_RequestedSigner(string value);
    public SpotLocation get_SpotLocation();
    public void set_SpotLocation(SpotLocation value);
    public string get_Intent();
    public void set_Intent(string value);
    public Nullable`1<DateTime> get_SignBy();
    public void set_SignBy(Nullable`1<DateTime> value);
    public string get_SigningLocale();
    public void set_SigningLocale(string value);
    public Nullable`1<Guid> get_SpotId();
    public void set_SpotId(Nullable`1<Guid> value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public bool get_HasBeenModified();
    public void set_HasBeenModified(bool value);
    internal void WriteXML(XmlWriter writer);
    internal void ReadXML(XmlReader reader);
}
public class System.Windows.Xps.Packaging.XpsStructure : XpsResource {
    internal XpsStructure(XpsManager xpsManager, INode parent, PackagePart part);
}
public class System.Windows.Xps.Packaging.XpsThumbnail : XpsResource {
    internal XpsThumbnail(XpsManager xpsManager, INode parent, PackagePart part);
}
public abstract class System.Windows.Xps.Serialization.BasePackagingPolicy : object {
    public Uri CurrentFixedDocumentUri { get; }
    public Uri CurrentFixedPageUri { get; }
    public abstract virtual XmlWriter AcquireXmlWriterForFixedDocumentSequence();
    public abstract virtual void ReleaseXmlWriterForFixedDocumentSequence();
    public abstract virtual XmlWriter AcquireXmlWriterForFixedDocument();
    public abstract virtual void ReleaseXmlWriterForFixedDocument();
    public abstract virtual XmlWriter AcquireXmlWriterForFixedPage();
    public abstract virtual void ReleaseXmlWriterForFixedPage();
    public abstract virtual void RelateResourceToCurrentPage(Uri targetUri, string relationshipName);
    public abstract virtual void RelateRestrictedFontToCurrentDocument(Uri targetUri);
    public abstract virtual void PersistPrintTicket(PrintTicket printTicket);
    public abstract virtual XmlWriter AcquireXmlWriterForPage();
    public abstract virtual XmlWriter AcquireXmlWriterForResourceDictionary();
    public abstract virtual IList`1<string> AcquireStreamForLinkTargets();
    public abstract virtual void PreCommitCurrentPage();
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsFont();
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsFont(string resourceId);
    public abstract virtual void ReleaseResourceStreamForXpsFont();
    public abstract virtual void ReleaseResourceStreamForXpsFont(string resourceId);
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsImage(string resourceId);
    public abstract virtual void ReleaseResourceStreamForXpsImage();
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsColorContext(string resourceId);
    public abstract virtual void ReleaseResourceStreamForXpsColorContext();
    public abstract virtual XpsResourceStream AcquireResourceStreamForXpsResourceDictionary(string resourceId);
    public abstract virtual void ReleaseResourceStreamForXpsResourceDictionary();
    public abstract virtual Uri get_CurrentFixedDocumentUri();
    public abstract virtual Uri get_CurrentFixedPageUri();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal abstract class System.Windows.Xps.Serialization.BasicContext : object {
    public string Name { get; public set; }
    public string Prefix { get; public set; }
    public BasicContext(string name, string prefix);
    public string get_Name();
    public void set_Name(string value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public void Initialize();
    public virtual void Clear();
}
internal enum System.Windows.Xps.Serialization.BatchOperationType : Enum {
    public int value__;
    public static BatchOperationType batchWrite;
    public static BatchOperationType batchCommit;
}
internal class System.Windows.Xps.Serialization.BatchOperationWorkItem : object {
    public BatchOperationType OperationType { get; }
    public object SerializedObject { get; }
    public BatchOperationWorkItem(BatchOperationType type, object serializedObject);
    public BatchOperationType get_OperationType();
    public object get_SerializedObject();
}
public class System.Windows.Xps.Serialization.ColorTypeConverter : ExpandableObjectConverter {
    private static ColorTypeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public static string SerializeColorContext(IServiceProvider context, ColorContext colorContext);
}
internal class System.Windows.Xps.Serialization.Crc32 : object {
    public UInt32 Crc32Value { get; }
    private static Crc32();
    public UInt32 get_Crc32Value();
    public void AddData(Byte[] data);
}
internal class System.Windows.Xps.Serialization.DependencyPropertyList : ValueType {
    public DependencyProperty[] List;
    public int Count;
    public DependencyPropertyList(int capacity);
    public void EnsureIndex(int index);
    public bool IsValidIndex(int index);
    public int IndexOf(DependencyProperty value);
    public bool Contains(DependencyProperty value);
    public void Add(DependencyProperty item);
    public void Add(DependencyProperty& item);
    public int Add();
    public int Add(int delta);
    public void Sort();
    public void AppendTo(DependencyPropertyList& destinationList);
    public DependencyProperty[] ToArray();
    public void Clear();
    public void Remove(DependencyProperty value);
}
internal class System.Windows.Xps.Serialization.DocumentPageSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentPageSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.DocumentPageSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentPageSerializerAsync(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.DocumentPaginatorSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentPaginatorSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.DocumentPaginatorSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentPaginatorSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.DocumentPaginatorSerializerContext : ReachSerializerContext {
    public DocumentPaginator Paginator { get; }
    public int Index { get; }
    public DocumentPaginatorSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, DocumentPaginator paginator, int index, SerializerAction action);
    public DocumentPaginator get_Paginator();
    public int get_Index();
}
internal class System.Windows.Xps.Serialization.DocumentReferenceCollectionSerializerContext : ReachSerializerContext {
    public IEnumerator Enumerator { get; }
    public DocumentReferenceCollectionSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
internal class System.Windows.Xps.Serialization.DocumentSequenceSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentSequenceSerializer(PackageSerializationManager manager);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    internal string GetValueOfAttributeAsString(SerializablePropertyContext serializablePropertyContext);
}
internal class System.Windows.Xps.Serialization.DocumentSequenceSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public DocumentSequenceSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    internal string GetValueOfAttributeAsString(SerializablePropertyContext serializablePropertyContext);
}
internal static class System.Windows.Xps.Serialization.DoubleOperations : object {
    internal static bool IsNaN(double value);
}
internal class System.Windows.Xps.Serialization.DrawingContextFlattener : object {
    public Matrix Transform { get; }
    public Geometry Clip { get; }
    internal DrawingContextFlattener(IMetroDrawingContext dc, Size pageSize, TreeWalkProgress treeWalkProgress);
    public void Push(Transform transform, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive, string nameAttr, Visual node, Uri navigateUri, EdgeMode edgeMode);
    public void Pop();
    public Matrix get_Transform();
    public Geometry get_Clip();
    public void DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    public void DrawImage(ImageSource image, Rect rectangle);
    public void DrawRasterizedVisual(Visual visual, string nameAttr, Uri navigateUri, EdgeMode edgeMode, Transform visualTransform, Matrix visualToWorldTransform, Matrix inheritedTransformHint, Geometry clip, Effect effect);
    public void DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
}
internal class System.Windows.Xps.Serialization.DrawingFlattenDrawingContext : object {
    public DrawingFlattenDrawingContext(DrawingContext context);
    public sealed virtual void DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    public sealed virtual void DrawImage(ImageSource image, Rect rectangle);
    public sealed virtual void DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    public sealed virtual void Push(Matrix transform, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive, string nameAttr, Visual node, Uri navigateUri, EdgeMode edgeMode);
    public sealed virtual void Pop();
    public sealed virtual void Comment(string message);
}
internal class System.Windows.Xps.Serialization.FEMCacheItem : object {
    public bool IsStreamWritten { get; }
    public bool CurrentPageReferences { get; public set; }
    [SecurityCriticalAttribute]
public FEMCacheItem(GlyphTypeface glyphTypeface, BasePackagingPolicy packagingPolicy);
    private static FEMCacheItem();
    [SecurityCriticalAttribute]
public Uri AddGlyphRunUsage(GlyphRun glyphRun);
    [SecurityCriticalAttribute]
public void Commit();
    public void AddRestrictedRelationship();
    public void AddRelationship();
    [SecurityCriticalAttribute]
internal Uri CopyFontStream();
    public static void ObfuscateData(Byte[] fontData, Guid guid);
    public bool get_IsStreamWritten();
    public bool get_CurrentPageReferences();
    public void set_CurrentPageReferences(bool value);
}
internal class System.Windows.Xps.Serialization.FixedDocumentSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public FixedDocumentSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    internal string GetValueOfAttributeAsString(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.FixedDocumentSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public FixedDocumentSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    internal string GetValueOfAttributeAsString(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.FixedPageSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public FixedPageSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
internal class System.Windows.Xps.Serialization.FixedPageSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public FixedPageSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
}
[FlagsAttribute]
internal enum System.Windows.Xps.Serialization.FontEmbeddingAction : Enum {
    public int value__;
    public static FontEmbeddingAction None;
    public static FontEmbeddingAction ObfuscateSubsetFont;
    public static FontEmbeddingAction ObfuscateOnlyFont;
    public static FontEmbeddingAction ImageOnlyFont;
}
[FlagsAttribute]
public enum System.Windows.Xps.Serialization.FontSubsetterCommitPolicies : Enum {
    public int value__;
    public static FontSubsetterCommitPolicies None;
    public static FontSubsetterCommitPolicies CommitPerPage;
    public static FontSubsetterCommitPolicies CommitPerDocument;
    public static FontSubsetterCommitPolicies CommitEntireSequence;
}
public class System.Windows.Xps.Serialization.FontTypeConverter : ExpandableObjectConverter {
    private static FontTypeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal static class System.Windows.Xps.Serialization.GeometryHelper : object {
    public static bool AcceptRadius(double rHalfChord2, double rFuzz2, Double& rRadius);
    public static Point Add(Point a, Point b);
    public static Point Sub(Point a, Point b);
    public static double DotProduct(Point a, Point b);
    public static double Determinant(Point a, Point b);
    public static void GetArcAngle(Point ptStart, Point ptEnd, bool fIsLargeArc, SweepDirection eSweepDirection, Double& rCosArcAngle, Double& rSinArcAngle, Int32& cPieces);
    public static double GetBezierDistance(double rDot, double rRadius);
    [FriendAccessAllowedAttribute]
public static PointCollection ArcToBezier(double xStart, double yStart, double xRadius, double yRadius, double rRotation, bool fIsLargeArc, SweepDirection eSweepDirection, double xEnd, double yEnd, Int32& cPieces);
}
public class System.Windows.Xps.Serialization.ImageSourceTypeConverter : ExpandableObjectConverter {
    private static ImageSourceTypeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    [SecurityCriticalAttribute]
[SecurityTreatAsSafeAttribute]
public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal interface System.Windows.Xps.Serialization.IMetroDrawingContext {
    public abstract virtual void DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    public abstract virtual void DrawImage(ImageSource image, Rect rectangle);
    public abstract virtual void DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    public abstract virtual void Push(Matrix transform, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive, string nameAttr, Visual node, Uri navigateUri, EdgeMode edgeMode);
    public abstract virtual void Pop();
    public abstract virtual void Comment(string message);
}
[DefaultMemberAttribute("Item")]
internal class System.Windows.Xps.Serialization.MetroSerializationNamespaceTable : object {
    internal SerializableObjectNamespaceInfo Item { get; internal set; }
    internal MetroSerializationNamespaceTable(MetroSerializationNamespaceTable parent);
    internal SerializableObjectNamespaceInfo get_Item(Type type);
    internal void set_Item(Type type, SerializableObjectNamespaceInfo value);
    internal bool Contains(Type type);
    internal void Add(Type type, SerializableObjectNamespaceInfo namespaceInfo);
    internal void Initialize(MetroSerializationNamespaceTable parent);
}
internal class System.Windows.Xps.Serialization.MXDWSerializationManager : object {
    public string MxdwFileName { get; }
    public bool IsPassThruSupported { get; }
    [SecurityCriticalAttribute]
public MXDWSerializationManager(PrintQueue queue);
    [SecurityCriticalAttribute]
public void EnablePassThru();
    [SecurityCriticalAttribute]
public string get_MxdwFileName();
    public bool get_IsPassThruSupported();
    public void Commit();
}
internal class System.Windows.Xps.Serialization.NgcDocumentPageSerializer : ReachSerializer {
    public NgcDocumentPageSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcDocumentPageSerializerAsync : NGCSerializerAsync {
    public NgcDocumentPageSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal void EndPersistObjectData(bool isManualStartDoc);
}
internal class System.Windows.Xps.Serialization.NgcDocumentPaginatorSerializer : ReachSerializer {
    public NgcDocumentPaginatorSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcDocumentPaginatorSerializerAsync : NGCSerializerAsync {
    public NgcDocumentPaginatorSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.NGCDocumentPaginatorSerializerContext : NGCSerializerContext {
    public DocumentPaginator Paginator { get; }
    public int Index { get; }
    public NGCDocumentPaginatorSerializerContext(NGCSerializerAsync serializer, DocumentPaginator paginator, int index, SerializerAction action);
    public DocumentPaginator get_Paginator();
    public int get_Index();
}
internal class System.Windows.Xps.Serialization.NgcDocumentReferenceCollectionSerializer : ReachSerializer {
    public NgcDocumentReferenceCollectionSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcDocumentReferenceCollectionSerializerAsync : NGCSerializerAsync {
    public NgcDocumentReferenceCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcDocumentReferenceCollectionSerializerContext : NGCSerializerContext {
    public IEnumerator Enumerator { get; }
    public NgcDocumentReferenceCollectionSerializerContext(NGCSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
internal class System.Windows.Xps.Serialization.NgcDocumentSequenceSerializer : ReachSerializer {
    public NgcDocumentSequenceSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcDocumentSequenceSerializerAsync : NGCSerializerAsync {
    public NgcDocumentSequenceSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.NgcFixedDocumentSerializer : ReachSerializer {
    public NgcFixedDocumentSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcFixedDocumentSerializerAsync : NGCSerializerAsync {
    public NgcFixedDocumentSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.NgcFixedPageSerializer : ReachSerializer {
    public NgcFixedPageSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcFixedPageSerializerAsync : NGCSerializerAsync {
    public NgcFixedPageSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal void EndPersistObjectData(bool isManualStartDoc);
}
internal class System.Windows.Xps.Serialization.NgcPageContentCollectionSerializerAsync : NGCSerializerAsync {
    public NgcPageContentCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.NgcPageContentCollectionSerializerContext : NGCSerializerContext {
    public IEnumerator Enumerator { get; }
    public NgcPageContentCollectionSerializerContext(NGCSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
internal class System.Windows.Xps.Serialization.NgcPageContentSerializerAsync : NGCSerializerAsync {
    public NgcPageContentSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NGCPageSerializerContext : NGCSerializerContext {
    public bool IsManualStartDoc { get; }
    public NGCPageSerializerContext(NGCSerializerAsync serializer, SerializableObjectContext objectContext, SerializerAction action, bool isManualStartDoc);
    public bool get_IsManualStartDoc();
}
internal class System.Windows.Xps.Serialization.NgcPrintTicketManager : object {
    public PrintTicket ActivePrintTicket { get; }
    public NgcPrintTicketManager(PrintQueue printQueue);
    public void ConstructPrintTicketTree(XpsSerializationPrintTicketRequiredEventArgs args);
    public PrintTicket ConsumeActivePrintTicket(bool consumePrintTicket);
    public PrintTicket get_ActivePrintTicket();
}
internal class System.Windows.Xps.Serialization.NGCReachPageContentCollectionSerializer : ReachSerializer {
    public NGCReachPageContentCollectionSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NGCReachPageContentSerializer : ReachSerializer {
    public NGCReachPageContentSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NGCReachUIElementCollectionSerializer : ReachSerializer {
    public NGCReachUIElementCollectionSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcReachVisualSerializer : ReachSerializer {
    public NgcReachVisualSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcReachVisualSerializerAsync : NGCSerializerAsync {
    public NgcReachVisualSerializerAsync(PackageSerializationManager manager);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void BeginSerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcSerializationManager : PackageSerializationManager {
    internal XpsResourcePolicy ResourcePolicy { get; }
    internal BasePackagingPolicy PackagingPolicy { get; }
    internal PrintQueue PrintQueue { get; }
    internal string JobName { get; internal set; }
    internal Size PageSize { get; internal set; }
    internal bool IsPrintTicketEventHandlerEnabled { get; }
    public NgcSerializationManager(PrintQueue queue, bool isBatchMode);
    public virtual void SaveAsXaml(object serializedObject);
    public void Cancel();
    public void Commit();
    public void add_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    public void remove_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    public void add_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    public void remove_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    internal virtual string GetXmlNSForType(Type objectType);
    internal virtual ReachSerializer GetSerializer(object serializedObject);
    internal virtual Type GetSerializerType(Type objectType);
    internal virtual XmlWriter AcquireXmlWriter(Type writerType);
    internal virtual void ReleaseXmlWriter(Type writerType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType, string resourceID);
    internal virtual void ReleaseResourceStream(Type resourceType);
    internal virtual void ReleaseResourceStream(Type resourceType, string resourceID);
    internal virtual void AddRelationshipToCurrentPage(Uri targetUri, string relationshipName);
    internal virtual XpsResourcePolicy get_ResourcePolicy();
    internal virtual BasePackagingPolicy get_PackagingPolicy();
    internal PrintQueue get_PrintQueue();
    internal void set_JobName(string value);
    internal string get_JobName();
    internal void set_PageSize(Size value);
    internal Size get_PageSize();
    [SecurityCriticalAttribute]
internal void StartDocument(object o, bool documentPrintTicketRequired);
    internal void EndDocument();
    internal bool StartPage();
    internal void EndPage();
    internal void OnNGCSerializationPrintTicketRequired(object operationState);
    internal void OnNGCSerializationProgressChagned(object operationState);
    internal void WalkVisual(Visual visual);
    internal PrintTicket GetActivePrintTicket();
    internal bool get_IsPrintTicketEventHandlerEnabled();
}
internal class System.Windows.Xps.Serialization.NgcSerializationManagerAsync : PackageSerializationManager {
    internal BasePackagingPolicy PackagingPolicy { get; }
    internal XpsResourcePolicy ResourcePolicy { get; }
    internal PrintQueue PrintQueue { get; }
    internal string JobName { get; internal set; }
    internal Size PageSize { get; internal set; }
    internal bool IsPrintTicketEventHandlerEnabled { get; }
    internal Stack OperationStack { get; }
    public NgcSerializationManagerAsync(PrintQueue queue, bool isBatchMode);
    public virtual void SaveAsXaml(object serializedObject);
    internal object InvokeSaveAsXamlWorkItem(object arg);
    internal object InvokeSaveAsXamlBatchWorkItem(object arg);
    public void CancelAsync();
    public void Commit();
    public void add_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
    public void remove_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
    public void add_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    public void remove_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    public void add_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    public void remove_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    internal virtual string GetXmlNSForType(Type objectType);
    internal virtual ReachSerializer GetSerializer(object serializedObject);
    internal virtual Type GetSerializerType(Type objectType);
    internal virtual XmlWriter AcquireXmlWriter(Type writerType);
    internal virtual void ReleaseXmlWriter(Type writerType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType, string resourceID);
    internal virtual void ReleaseResourceStream(Type resourceType);
    internal virtual void ReleaseResourceStream(Type resourceType, string resourceID);
    internal virtual void AddRelationshipToCurrentPage(Uri targetUri, string relationshipName);
    internal virtual BasePackagingPolicy get_PackagingPolicy();
    internal virtual XpsResourcePolicy get_ResourcePolicy();
    internal PrintQueue get_PrintQueue();
    internal void set_JobName(string value);
    internal string get_JobName();
    internal void set_PageSize(Size value);
    internal Size get_PageSize();
    [SecurityCriticalAttribute]
internal void StartDocument(object o, bool documentPrintTicketRequired);
    internal void EndDocument();
    internal void EndDocument(bool abort);
    internal bool StartPage();
    internal void EndPage();
    internal void OnNGCSerializationPrintTicketRequired(object operationState);
    internal void OnNGCSerializationProgressChanged(object operationState);
    internal void WalkVisual(Visual visual);
    internal PrintTicket GetActivePrintTicket();
    internal bool get_IsPrintTicketEventHandlerEnabled();
    internal Stack get_OperationStack();
}
internal abstract class System.Windows.Xps.Serialization.NGCSerializerAsync : ReachSerializer {
    public PackageSerializationManager SerializationManager { get; }
    protected NgcSerializationManagerAsync NgcSerializationManager { get; }
    public NGCSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    [SecurityCriticalAttribute]
internal virtual void BeginSerializeObject(SerializablePropertyContext serializedProperty);
    [SecurityCriticalAttribute]
internal virtual void BeginSerializeObject(object serializedObject);
    [SecurityCriticalAttribute]
internal virtual void EndSerializeObject(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    internal virtual void SerializeObjectCore(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    public virtual PackageSerializationManager get_SerializationManager();
    protected NgcSerializationManagerAsync get_NgcSerializationManager();
}
internal class System.Windows.Xps.Serialization.NGCSerializerContext : object {
    public SerializerAction Action { get; }
    public NGCSerializerAsync Serializer { get; }
    public SerializableObjectContext ObjectContext { get; }
    public NGCSerializerContext(NGCSerializerAsync serializer, SerializerAction action);
    public NGCSerializerContext(NGCSerializerAsync serializer, SerializableObjectContext objectContext, SerializerAction action);
    public virtual SerializerAction get_Action();
    public virtual NGCSerializerAsync get_Serializer();
    public virtual SerializableObjectContext get_ObjectContext();
}
internal static class System.Windows.Xps.Serialization.NgcSerializerUtil : object {
    internal static string InferJobName(object o);
}
internal class System.Windows.Xps.Serialization.NgcUIElementCollectionSerializerAsync : NGCSerializerAsync {
    public NgcUIElementCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(NGCSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.NgcUIElementCollectionSerializerContext : NGCSerializerContext {
    public IEnumerator Enumerator { get; }
    public NgcUIElementCollectionSerializerContext(NGCSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
internal class System.Windows.Xps.Serialization.NodeContext : object {
    public Visual NodeVisual { get; }
    public NodeContext(Visual v);
    public Visual get_NodeVisual();
    public Visual GetNextChild();
}
internal class System.Windows.Xps.Serialization.NullPackagingPolicy : BasePackagingPolicy {
    public Uri CurrentFixedDocumentUri { get; }
    public Uri CurrentFixedPageUri { get; }
    public virtual XmlWriter AcquireXmlWriterForFixedDocumentSequence();
    public virtual void ReleaseXmlWriterForFixedDocumentSequence();
    public virtual XmlWriter AcquireXmlWriterForFixedDocument();
    public virtual void ReleaseXmlWriterForFixedDocument();
    public virtual XmlWriter AcquireXmlWriterForFixedPage();
    public virtual void ReleaseXmlWriterForFixedPage();
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont();
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont(string resourceId);
    public virtual void ReleaseResourceStreamForXpsFont();
    public virtual void ReleaseResourceStreamForXpsFont(string resourceId);
    public virtual XpsResourceStream AcquireResourceStreamForXpsImage(string resourceId);
    public virtual void ReleaseResourceStreamForXpsImage();
    public virtual XpsResourceStream AcquireResourceStreamForXpsColorContext(string resourceId);
    public virtual void ReleaseResourceStreamForXpsColorContext();
    public virtual XpsResourceStream AcquireResourceStreamForXpsResourceDictionary(string resourceId);
    public virtual void ReleaseResourceStreamForXpsResourceDictionary();
    public virtual void RelateResourceToCurrentPage(Uri targetUri, string relationshipName);
    public virtual void RelateRestrictedFontToCurrentDocument(Uri targetUri);
    public virtual void PersistPrintTicket(PrintTicket printTicket);
    public virtual XmlWriter AcquireXmlWriterForPage();
    public virtual void PreCommitCurrentPage();
    public virtual XmlWriter AcquireXmlWriterForResourceDictionary();
    public virtual IList`1<string> AcquireStreamForLinkTargets();
    public virtual Uri get_CurrentFixedDocumentUri();
    public virtual Uri get_CurrentFixedPageUri();
}
public abstract class System.Windows.Xps.Serialization.PackageSerializationManager : object {
    internal BasePackagingPolicy PackagingPolicy { get; }
    internal XpsResourcePolicy ResourcePolicy { get; }
    internal ContextStack GraphContextStack { get; internal set; }
    internal SerializersCacheManager CacheManager { get; }
    internal SerializableObjectContext RootSerializableObjectContext { get; internal set; }
    internal SerializersCacheManager SerializersCacheManager { get; }
    internal XmlLanguage Language { get; internal set; }
    internal int JobIdentifier { get; internal set; }
    public abstract virtual void SaveAsXaml(object serializedObject);
    private sealed virtual override void System.IDisposable.Dispose();
    internal abstract virtual string GetXmlNSForType(Type objectType);
    internal virtual ReachSerializer GetSerializer(object serializedObject);
    internal virtual Type GetSerializerType(Type objectType);
    internal virtual TypeConverter GetTypeConverter(object serializedObject);
    internal virtual TypeConverter GetTypeConverter(Type serializedObjectType);
    internal abstract virtual XmlWriter AcquireXmlWriter(Type writerType);
    internal abstract virtual void ReleaseXmlWriter(Type writerType);
    internal abstract virtual XpsResourceStream AcquireResourceStream(Type resourceType);
    internal abstract virtual XpsResourceStream AcquireResourceStream(Type resourceType, string resourceID);
    internal abstract virtual void ReleaseResourceStream(Type resourceType);
    internal abstract virtual void ReleaseResourceStream(Type resourceType, string resourceID);
    internal abstract virtual void AddRelationshipToCurrentPage(Uri targetUri, string relationshipName);
    internal virtual bool CanSerializeDependencyProperty(object serializableObject, TypeDependencyPropertyCache dependencyProperty);
    internal virtual bool CanSerializeClrProperty(object serializableObject, TypePropertyCache property);
    internal abstract virtual BasePackagingPolicy get_PackagingPolicy();
    internal abstract virtual XpsResourcePolicy get_ResourcePolicy();
    [SecurityCriticalAttribute]
internal ContextStack get_GraphContextStack();
    [SecurityCriticalAttribute]
internal void set_GraphContextStack(ContextStack value);
    internal SerializersCacheManager get_CacheManager();
    internal SerializableObjectContext get_RootSerializableObjectContext();
    internal void set_RootSerializableObjectContext(SerializableObjectContext value);
    internal SerializersCacheManager get_SerializersCacheManager();
    internal XmlLanguage get_Language();
    internal void set_Language(XmlLanguage value);
    [SecurityCriticalAttribute]
internal void set_JobIdentifier(int value);
    [SecurityCriticalAttribute]
internal int get_JobIdentifier();
}
internal class System.Windows.Xps.Serialization.PageContentCollectionSerializerContext : ReachSerializerContext {
    public IEnumerator Enumerator { get; }
    public PageContentCollectionSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
public enum System.Windows.Xps.Serialization.PrintTicketLevel : Enum {
    public int value__;
    public static PrintTicketLevel None;
    public static PrintTicketLevel FixedDocumentSequencePrintTicket;
    public static PrintTicketLevel FixedDocumentPrintTicket;
    public static PrintTicketLevel FixedPagePrintTicket;
}
internal class System.Windows.Xps.Serialization.PrintTicketSerializer : ReachSerializer {
    public PrintTicketSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.PrintTicketSerializerAsync : ReachSerializerAsync {
    public PrintTicketSerializerAsync(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachDocumentReferenceCollectionSerializer : ReachSerializer {
    public ReachDocumentReferenceCollectionSerializer(PackageSerializationManager manager);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachDocumentReferenceCollectionSerializerAsync : ReachSerializerAsync {
    public ReachDocumentReferenceCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.ReachDocumentReferenceSerializer : ReachSerializer {
    public ReachDocumentReferenceSerializer(PackageSerializationManager manager);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachDocumentReferenceSerializerAsync : ReachSerializerAsync {
    public ReachDocumentReferenceSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachFixedPageSerializerContext : ReachSerializerContext {
    public ReachTreeWalker TreeWalker { get; }
    public bool EndVisual { get; }
    public ReachFixedPageSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, SerializerAction action, bool endVisual, ReachTreeWalker treeWalker);
    public ReachTreeWalker get_TreeWalker();
    public bool get_EndVisual();
}
internal class System.Windows.Xps.Serialization.ReachHierarchySimulator : object {
    public ReachHierarchySimulator(PackageSerializationManager manager, object serializedObject);
    internal void BeginConfirmToXPSStructure(bool mode);
    internal void EndConfirmToXPSStructure(bool mode);
    internal XmlWriter SimulateBeginFixedDocumentSequence();
    internal void SimulateEndFixedDocumentSequence(XmlWriter xmlWriter);
    internal XmlWriter SimulateBeginFixedDocument();
    internal void SimulateEndFixedDocument(XmlWriter xmlWriter);
    internal XmlWriter SimulateBeginFixedPage();
    internal void SimulateEndFixedPage(XmlWriter xmlWriter);
}
internal class System.Windows.Xps.Serialization.ReachPageContentCollectionSerializer : ReachSerializer {
    public ReachPageContentCollectionSerializer(PackageSerializationManager manager);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachPageContentCollectionSerializerAsync : ReachSerializerAsync {
    public ReachPageContentCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
}
internal class System.Windows.Xps.Serialization.ReachPageContentSerializer : ReachSerializer {
    public ReachPageContentSerializer(PackageSerializationManager manager);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachPageContentSerializerAsync : ReachSerializerAsync {
    public ReachPageContentSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachSerializationServices : object {
    public Hashtable TypesXmlNSMapping { get; }
    public IDictionary TypeSerializableDependencyProperties { get; }
    public IDictionary TypeNoneSerializableClrProperties { get; }
    private static ReachSerializationServices();
    public void RegisterNameSpacesForTypes();
    public void RegisterSerializableDependencyPropertiesForReachTypes();
    public void RegisterNoneSerializableClrPropertiesForReachTypes();
    public Hashtable get_TypesXmlNSMapping();
    public IDictionary get_TypeSerializableDependencyProperties();
    public IDictionary get_TypeNoneSerializableClrProperties();
}
internal abstract class System.Windows.Xps.Serialization.ReachSerializer : object {
    public XmlWriter XmlWriter { get; public set; }
    public PackageSerializationManager SerializationManager { get; }
    public ReachSerializer(PackageSerializationManager manager);
    [SecurityCriticalAttribute]
public virtual void SerializeObject(object serializedObject);
    [SecurityCriticalAttribute]
internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal abstract virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    internal virtual void SerializeObjectCore(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    public virtual PackageSerializationManager get_SerializationManager();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal abstract class System.Windows.Xps.Serialization.ReachSerializerAsync : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public PackageSerializationManager SerializationManager { get; }
    public ReachSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    [SecurityCriticalAttribute]
internal virtual void BeginSerializeObject(SerializablePropertyContext serializedProperty);
    [SecurityCriticalAttribute]
internal virtual void BeginSerializeObject(object serializedObject);
    [SecurityCriticalAttribute]
internal virtual void EndSerializeObject(SerializableObjectContext serializableObjectContext);
    internal virtual void EndPersistObjectData();
    internal virtual void SerializeObjectCore(SerializableObjectContext serializableObjectContext);
    internal virtual void WriteSerializedAttribute(SerializablePropertyContext serializablePropertyContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    public virtual PackageSerializationManager get_SerializationManager();
}
internal class System.Windows.Xps.Serialization.ReachSerializerContext : object {
    public SerializerAction Action { get; }
    public ReachSerializerAsync Serializer { get; }
    public SerializableObjectContext ObjectContext { get; }
    public ReachSerializerContext(ReachSerializerAsync serializer, SerializerAction action);
    public ReachSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, SerializerAction action);
    public virtual SerializerAction get_Action();
    public virtual ReachSerializerAsync get_Serializer();
    public virtual SerializableObjectContext get_ObjectContext();
}
internal class System.Windows.Xps.Serialization.ReachTreeWalker : object {
    internal ReachTreeWalker(ReachSerializer serializer);
    internal ReachTreeWalker(XmlWriter writer, PackageSerializationManager serializationManager);
    internal void CommitHyperlinks();
    internal void SerializeLinksInDocumentPage(DocumentPage page);
    internal void SerializeLinksInFixedPage(FixedPage page);
    internal void SerializeLinksInVisual(Visual visual);
}
internal class System.Windows.Xps.Serialization.ReachUIElementCollectionSerializer : ReachSerializer {
    public ReachUIElementCollectionSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachUIElementCollectionSerializerAsync : ReachSerializerAsync {
    public ReachUIElementCollectionSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
}
internal class System.Windows.Xps.Serialization.ReachVisualSerializer : ReachSerializer {
    public XmlWriter XmlWriter { get; public set; }
    public ReachVisualSerializer(PackageSerializationManager manager);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    internal bool SerializeDisguisedVisual(object serializedObject);
}
internal class System.Windows.Xps.Serialization.ReachVisualSerializerAsync : ReachSerializerAsync {
    public XmlWriter XmlWriter { get; public set; }
    public ReachVisualSerializerAsync(PackageSerializationManager manager);
    public virtual void AsyncOperation(ReachSerializerContext context);
    public virtual void SerializeObject(object serializedObject);
    internal virtual void SerializeObject(SerializablePropertyContext serializedProperty);
    internal virtual void PersistObjectData(SerializableObjectContext serializableObjectContext);
    public virtual XmlWriter get_XmlWriter();
    public virtual void set_XmlWriter(XmlWriter value);
    internal bool SerializeDisguisedVisual(object serializedObject);
}
internal class System.Windows.Xps.Serialization.ReachVisualSerializerContext : ReachSerializerContext {
    public Stack`1<NodeContext> ContextStack { get; }
    public VisualTreeFlattener VisualFlattener { get; }
    public ReachVisualSerializerContext(ReachSerializerAsync serializer, Stack`1<NodeContext> contextStack, VisualTreeFlattener flattener, SerializerAction action);
    public Stack`1<NodeContext> get_ContextStack();
    public VisualTreeFlattener get_VisualFlattener();
}
internal class System.Windows.Xps.Serialization.ResourceStreamCacheItem : object {
    internal XpsResourceStream XpsResourceStream { get; internal set; }
    internal XpsResource XpsResource { get; internal set; }
    internal XpsResourceStream get_XpsResourceStream();
    internal void set_XpsResourceStream(XpsResourceStream value);
    internal XpsResource get_XpsResource();
    internal void set_XpsResource(XpsResource value);
    internal void IncRef();
    internal int Release();
}
internal class System.Windows.Xps.Serialization.SerializableDependencyPropertyContext : SerializablePropertyContext {
    public MemberInfo MemberInfo { get; }
    public object DependencyProperty { get; }
    public SerializableDependencyPropertyContext(string name, string prefix, object target, TypeDependencyPropertyCache propertyCache);
    public SerializableDependencyPropertyContext(object target, TypeDependencyPropertyCache propertyCache);
    public virtual bool IsComplexProperty(PackageSerializationManager serializationManager);
    public virtual bool IsComplexValue(PackageSerializationManager manager, Boolean& canConvert);
    public MemberInfo get_MemberInfo();
    public object get_DependencyProperty();
}
internal class System.Windows.Xps.Serialization.SerializableObjectContext : BasicContext {
    public object TargetObject { get; }
    public MetroSerializationNamespaceTable NamespaceTable { get; public set; }
    public SerializablePropertyCollection PropertiesCollection { get; public set; }
    public bool IsComplexValue { get; public set; }
    public bool IsReadOnlyValue { get; public set; }
    private static SerializableObjectContext();
    public SerializableObjectContext(string name, string prefix, object target, SerializablePropertyContext serializablePropertyContext);
    public SerializableObjectContext(object target, SerializablePropertyContext serializablePropertyContext);
    [SecurityCriticalAttribute]
internal static SerializableObjectContext CreateContext(PackageSerializationManager serializationManager, object serializableObject, SerializableObjectContext serializableObjectParentContext, SerializablePropertyContext serializablePropertyContext);
    internal static void RecycleContext(SerializableObjectContext serializableObjectContext);
    public object get_TargetObject();
    public MetroSerializationNamespaceTable get_NamespaceTable();
    public void set_NamespaceTable(MetroSerializationNamespaceTable value);
    public SerializablePropertyCollection get_PropertiesCollection();
    public void set_PropertiesCollection(SerializablePropertyCollection value);
    public bool get_IsComplexValue();
    public void set_IsComplexValue(bool value);
    public bool get_IsReadOnlyValue();
    public void set_IsReadOnlyValue(bool value);
    public void Initialize(object target, SerializablePropertyContext serializablePropertyContext);
    public virtual void Clear();
}
internal class System.Windows.Xps.Serialization.SerializableObjectNamespaceInfo : object {
    internal string Prefix { get; }
    internal string XmlNamespace { get; }
    internal string ClrNamespace { get; }
    internal SerializableObjectNamespaceInfo(Type type, string prefix, string xmlNamespace);
    internal SerializableObjectNamespaceInfo(string clrNamespace, string prefix, string xmlNamespace);
    internal string get_Prefix();
    internal string get_XmlNamespace();
    internal string get_ClrNamespace();
}
internal class System.Windows.Xps.Serialization.SerializablePropertyCollection : object {
    public object Current { get; }
    internal SerializablePropertyCollection(PackageSerializationManager manager, object targetObject);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    internal void Initialize(PackageSerializationManager serializationManager, object targetObject);
    internal void Clear();
}
internal class System.Windows.Xps.Serialization.SerializablePropertyContext : BasicContext {
    public object TargetObject { get; }
    public PropertyInfo PropertyInfo { get; }
    public bool IsComplex { get; public set; }
    public DesignerSerializationVisibility Visibility { get; }
    public Type SerializerType { get; }
    public TypeConverter TypeConverter { get; }
    public DefaultValueAttribute DefaultValueAttribute { get; }
    public DesignerSerializationOptionsAttribute DesignerSerializationOptionsAttribute { get; }
    public bool IsReadOnly { get; }
    public object Value { get; public set; }
    public TypePropertyCache TypePropertyCache { get; }
    public SerializablePropertyContext(string name, string prefix, object target, TypePropertyCache propertyCache);
    internal SerializablePropertyContext(object target, TypePropertyCache propertyCache);
    public virtual bool IsComplexProperty(PackageSerializationManager serializationManager);
    public virtual bool IsComplexValue(PackageSerializationManager manager, Boolean& canConvert);
    public object get_TargetObject();
    public PropertyInfo get_PropertyInfo();
    public bool get_IsComplex();
    public void set_IsComplex(bool value);
    public DesignerSerializationVisibility get_Visibility();
    public Type get_SerializerType();
    public TypeConverter get_TypeConverter();
    public DefaultValueAttribute get_DefaultValueAttribute();
    public DesignerSerializationOptionsAttribute get_DesignerSerializationOptionsAttribute();
    public bool get_IsReadOnly();
    public object get_Value();
    public void set_Value(object value);
    public TypePropertyCache get_TypePropertyCache();
}
internal class System.Windows.Xps.Serialization.SerializationManagerOperationContextStack : object {
    public ReachSerializer ReachSerializer { get; }
    public object SerializedObject { get; }
    public SerializationManagerOperationContextStack(ReachSerializer serializer, object serializedObject);
    public ReachSerializer get_ReachSerializer();
    public object get_SerializedObject();
}
public enum System.Windows.Xps.Serialization.SerializationState : Enum {
    public int value__;
    public static SerializationState Normal;
    public static SerializationState Stop;
}
internal enum System.Windows.Xps.Serialization.SerializerAction : Enum {
    public int value__;
    public static SerializerAction endSerializeObject;
    public static SerializerAction endPersistObjectData;
    public static SerializerAction serializeNextProperty;
    public static SerializerAction serializeNextDocumentReference;
    public static SerializerAction serializeDocument;
    public static SerializerAction serializeNextPageContent;
    public static SerializerAction serializePage;
    public static SerializerAction endSerializeReachFixedPage;
    public static SerializerAction serializeNextUIElement;
    public static SerializerAction serializeNextTreeNode;
    public static SerializerAction serializeNextDocumentPage;
    public static SerializerAction endSerializeDocumentPage;
}
internal class System.Windows.Xps.Serialization.SerializersCacheManager : object {
    internal PackageSerializationManager SerializationManger { get; }
    public SerializersCacheManager(PackageSerializationManager serializationManager);
    public ReachSerializer GetSerializer(object serializedObject);
    internal TypePropertyCache[] GetClrSerializableProperties(object serializableObject);
    internal TypeDependencyPropertyCache[] GetSerializableDependencyProperties(object serializableObject);
    internal TypeCacheItem GetTypeCacheItem(object serializableObject);
    internal TypeDependencyPropertiesCacheItem GetTypeDependencyPropertiesCacheItem(object serializableObject);
    internal TypeCacheItem GetTypeCacheItem(Type serializableObjectType);
    internal PackageSerializationManager get_SerializationManger();
}
internal static class System.Windows.Xps.Serialization.Toolbox : object {
    internal static void EmitEvent(Event evt);
    internal static void Layout(FixedPage fixedPage, PrintTicket printTicket);
    internal static Size Layout(UIElement uiElement, Size elementSize, PrintTicket printTicket);
    internal static Size ValidateDocumentSize(Size documentSize, PrintTicket printTicket);
    internal static DocumentPage GetPage(DocumentPaginator paginator, int index);
    internal static FixedPage GetPageRoot(object page);
}
internal class System.Windows.Xps.Serialization.TreeWalkProgress : object {
    public bool EnterTreeWalk(ICyclicBrush brush);
    public void ExitTreeWalk(ICyclicBrush brush);
    public bool IsTreeWalkInProgress(ICyclicBrush brush);
}
internal class System.Windows.Xps.Serialization.TypeCacheItem : object {
    internal Type SerializerType { get; }
    internal TypeConverter TypeConverter { get; }
    internal TypeCacheItem(Type type);
    internal TypeCacheItem(Type type, Type serializerType);
    internal TypeCacheItem(Type type, TypeConverter typeConverter);
    internal TypePropertyCache[] GetClrSerializableProperties(SerializersCacheManager serializersCacheManager);
    internal Type get_SerializerType();
    internal TypeConverter get_TypeConverter();
}
internal class System.Windows.Xps.Serialization.TypeDependencyPropertiesCacheItem : object {
    internal TypeDependencyPropertiesCacheItem(Type type, TypeDependencyPropertyCache[] properties);
    internal TypeDependencyPropertyCache[] GetSerializableDependencyProperties();
}
internal class System.Windows.Xps.Serialization.TypeDependencyPropertyCache : TypePropertyCache {
    internal MemberInfo MemberInfo { get; internal set; }
    internal object DependencyProperty { get; internal set; }
    internal TypeDependencyPropertyCache(MemberInfo memberInfo, object dependencyProperty, DesignerSerializationVisibility visibility, Type serializerTypeForProperty, TypeConverter typeConverterForProperty, DefaultValueAttribute defaultValueAttr, DesignerSerializationOptionsAttribute designerSerializationFlagsAttr);
    internal static bool CanSerializeProperty(MemberInfo memberInfo, SerializersCacheManager serializersCacheManager, DesignerSerializationVisibility& visibility, Type& serializerTypeForProperty, TypeConverter& typeConverterForProperty, DefaultValueAttribute& defaultValueAttr, DesignerSerializationOptionsAttribute& designerSerializationFlagsAttr);
    internal static bool CanSerializeValue(object serializableObject, TypeDependencyPropertyCache propertyCache);
    internal MemberInfo get_MemberInfo();
    internal void set_MemberInfo(MemberInfo value);
    internal object get_DependencyProperty();
    internal void set_DependencyProperty(object value);
}
internal class System.Windows.Xps.Serialization.TypePropertyCache : object {
    internal DesignerSerializationVisibility Visibility { get; internal set; }
    internal Type SerializerTypeForProperty { get; internal set; }
    internal TypeConverter TypeConverterForProperty { get; internal set; }
    internal DefaultValueAttribute DefaultValueAttr { get; internal set; }
    internal DesignerSerializationOptionsAttribute DesignerSerializationOptionsAttr { get; internal set; }
    internal PropertyInfo PropertyInfo { get; internal set; }
    internal object PropertyValue { get; internal set; }
    internal TypePropertyCache(PropertyInfo propertyInfo);
    internal TypePropertyCache(PropertyInfo propertyInfo, DesignerSerializationVisibility visibility, Type serializerTypeForProperty, TypeConverter typeConverterForProperty, DefaultValueAttribute defaultValueAttr, DesignerSerializationOptionsAttribute designerSerializationFlagsAttr);
    internal DesignerSerializationVisibility get_Visibility();
    internal void set_Visibility(DesignerSerializationVisibility value);
    internal Type get_SerializerTypeForProperty();
    internal void set_SerializerTypeForProperty(Type value);
    internal TypeConverter get_TypeConverterForProperty();
    internal void set_TypeConverterForProperty(TypeConverter value);
    internal DefaultValueAttribute get_DefaultValueAttr();
    internal void set_DefaultValueAttr(DefaultValueAttribute value);
    internal DesignerSerializationOptionsAttribute get_DesignerSerializationOptionsAttr();
    internal void set_DesignerSerializationOptionsAttr(DesignerSerializationOptionsAttribute value);
    internal PropertyInfo get_PropertyInfo();
    internal void set_PropertyInfo(PropertyInfo value);
    internal object get_PropertyValue();
    internal void set_PropertyValue(object value);
}
internal class System.Windows.Xps.Serialization.UIElementCollectionSerializerContext : ReachSerializerContext {
    public IEnumerator Enumerator { get; }
    public UIElementCollectionSerializerContext(ReachSerializerAsync serializer, SerializableObjectContext objectContext, IEnumerator enumerator, SerializerAction action);
    public IEnumerator get_Enumerator();
}
internal class System.Windows.Xps.Serialization.VisualSerializationService : object {
    public VisualSerializationService(PackageSerializationManager serializationManager);
    public VisualTreeFlattener AcquireVisualTreeFlattener(XmlWriter resWriter, XmlWriter bodyWriter, Size pageSize);
    public void ReleaseVisualTreeFlattener();
}
internal class System.Windows.Xps.Serialization.VisualSerializer : object {
    public static double PrecisionDPI;
    public static double PositiveLargestFloat;
    public static double NegativeLargestFloat;
    public static double PositiveSmallestFloat;
    public static double NegativeSmallestFloat;
    public static int MaxElementCount;
    public static int MaxPointCount;
    public static int MaxResourceCount;
    public static int MaxGlyphCount;
    public static int MaxGradientStops;
    protected XmlWriter _writer;
    protected XmlWriter _resWriter;
    protected XmlWriter _bodyWriter;
    protected int _brushId;
    protected int _bitmapId;
    protected PackageSerializationManager _manager;
    protected XpsTokenContext _context;
    protected Stack _tcoStack;
    protected ArrayList _objects;
    protected ArrayList _objnams;
    protected double _opacity;
    protected Brush _opacityMask;
    protected Transform _transform;
    protected Geometry _clip;
    protected string _coordFormat;
    protected Matrix _worldTransform;
    protected int _forceGeneral;
    protected string _nameAttr;
    protected Visual _node;
    protected Uri _navigateUri;
    protected Size _pageSize;
    protected bool _exceedFloatLimit;
    protected bool _exceedPointLimit;
    protected int _totalElementCount;
    internal VisualSerializer(XmlWriter resWriter, XmlWriter bodyWriter, PackageSerializationManager manager);
    private static VisualSerializer();
    protected double CheckFloat(double v);
    protected void AppendCoordinate(StringBuilder rslt, double v);
    protected void AppendPoint(StringBuilder builder, Point p, Matrix mat);
    protected int AppendPoints(StringBuilder builder, PointCollection pc, Matrix mat);
    protected string GetString(object obj);
    protected string FindBrush(Brush brush, Rect bounds);
    protected void WriteAttr(string attribute, object val);
    protected void WriteAttr(string attribute, object val, object valDefault);
    protected string ColorToString(Color color);
    protected string SimpleBrushToString(Brush brush);
    protected void WriteGradientStops(string prefix, GradientStopCollection gsc);
    protected void WriteBitmap(string attribute, ImageSource imageSource);
    protected StringBuilder BrushToString(Brush brush, Rect bounds);
    protected void WriteBrush(string attribute, Brush brush, Rect bounds);
    protected void WritePen(Pen pen, Rect bounds, bool isLineGeometry);
    internal bool WriteGeometry(string element, string attribute, Geometry geo, Matrix map, bool asElement, bool forFill, bool forStroke);
    public static bool NeedBounds(Brush b);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawGeometry(Brush brush, Pen pen, Geometry geometry);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawImage(ImageSource image, Rect rectangle);
    internal void DrawGlyphRunAsImage(Brush foreground, GlyphRun glyphRun);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.DrawGlyphRun(Brush foreground, GlyphRun glyphRun);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Pop();
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Comment(string str);
    private sealed virtual override void System.Windows.Xps.Serialization.IMetroDrawingContext.Push(Matrix mat, Geometry clip, double opacity, Brush opacityMask, Rect maskBounds, bool onePrimitive, string nameAttr, Visual node, Uri navigateUri, EdgeMode edgeMode);
}
[FriendAccessAllowedAttribute]
internal class System.Windows.Xps.Serialization.VisualTreeFlattener : object {
    public Matrix InheritedTransformHint { get; public set; }
    internal VisualTreeFlattener(IMetroDrawingContext dc, Size pageSize, TreeWalkProgress treeWalkProgress);
    internal VisualTreeFlattener(XmlWriter resWriter, XmlWriter bodyWriter, PackageSerializationManager manager, Size pageSize, TreeWalkProgress treeWalkProgress);
    public Matrix get_InheritedTransformHint();
    public void set_InheritedTransformHint(Matrix value);
    internal bool StartVisual(Visual visual);
    internal void EndVisual();
    internal void VisualWalk(Visual visual);
    internal void DrawingWalk(Drawing d, Matrix drawingToWorldTransform);
    [FriendAccessAllowedAttribute]
internal static void SaveAsXml(Visual visual, XmlWriter resWriter, XmlWriter bodyWriter, string fileName);
    internal static void Walk(Visual visual, IMetroDrawingContext dc, Size pageSize, TreeWalkProgress treeWalkProgress);
    internal static bool WritePath(XmlWriter bodyWriter, Geometry geometry, Size pageSize);
}
internal enum System.Windows.Xps.Serialization.XpsDocumentEventType : Enum {
    public int value__;
    public static XpsDocumentEventType None;
    public static XpsDocumentEventType AddFixedDocumentSequencePre;
    public static XpsDocumentEventType AddFixedDocumentSequencePost;
    public static XpsDocumentEventType AddFixedDocumentPre;
    public static XpsDocumentEventType AddFixedDocumentPost;
    public static XpsDocumentEventType AddFixedPagePre;
    public static XpsDocumentEventType AddFixedPagePost;
    public static XpsDocumentEventType AddFixedDocumentSequencePrintTicketPre;
    public static XpsDocumentEventType AddFixedDocumentSequencePrintTicketPost;
    public static XpsDocumentEventType AddFixedDocumentPrintTicketPre;
    public static XpsDocumentEventType AddFixedDocumentPrintTicketPost;
    public static XpsDocumentEventType AddFixedPagePrintTicketPre;
    public static XpsDocumentEventType AddFixedPagePrintTicketPost;
    public static XpsDocumentEventType XpsDocumentCancel;
}
internal class System.Windows.Xps.Serialization.XpsDriverDocEventManager : object {
    public XpsDriverDocEventManager(XpsSerializationManager manager);
    internal void ForwardPackagingProgressEvent(object sender, PackagingProgressEventArgs e);
    internal void ForwardUserPrintTicket(object sender, XpsSerializationPrintTicketRequiredEventArgs e);
    internal void ForwardSerializationCompleted(object sender, XpsSerializationCompletedEventArgs e);
}
internal class System.Windows.Xps.Serialization.XpsFontSerializationService : object {
    public XpsFontSubsetter FontSubsetter { get; }
    public XpsFontSerializationService(BasePackagingPolicy packagingPolicy);
    public bool SignalCommit(Type type);
    public XpsFontSubsetter get_FontSubsetter();
}
internal class System.Windows.Xps.Serialization.XpsFontSubsetter : object {
    public XpsFontSubsetter(BasePackagingPolicy packagingPolicy);
    [SecurityCriticalAttribute]
public Uri ComputeFontSubset(GlyphRun glyphRun);
    public bool CommitFontSubsetsSignal(FontSubsetterCommitPolicies signal);
    [SecurityCriticalAttribute]
public static FontEmbeddingAction DetermineEmbeddingAction(GlyphTypeface glyphTypeface);
    public static FontEmbeddingAction DetermineEmbeddingAction(FontEmbeddingRight fsType);
    [SecurityCriticalAttribute]
public static bool IsRestrictedFont(GlyphTypeface glyphTypeface);
    public static bool IsRestrictedFont(FontEmbeddingRight fsType);
    public void SetSubsetCommitPolicy(FontSubsetterCommitPolicies policy);
    public void SetSubsetCommitCountPolicy(int commitCount);
}
internal class System.Windows.Xps.Serialization.XpsImageSerializationService : object {
    [SecurityCriticalAttribute]
public BitmapEncoder GetEncoder(BitmapSource bitmapSource);
    [SecurityCriticalAttribute]
public bool IsSupportedMimeType(BitmapSource bitmapSource);
    public bool VerifyImageSourceSerializability(BitmapSource bitmapSource);
    public Stream SerializeToStream(BitmapSource bitmapSource);
}
public class System.Windows.Xps.Serialization.XpsPackagingPolicy : BasePackagingPolicy {
    public Uri CurrentFixedDocumentUri { get; }
    public Uri CurrentFixedPageUri { get; }
    internal XpsInterleavingPolicy InterleavingPolicy { get; }
    public XpsPackagingPolicy(XpsDocument xpsPackage);
    public XpsPackagingPolicy(XpsDocument xpsPackage, PackageInterleavingOrder interleavingType);
    public virtual XmlWriter AcquireXmlWriterForFixedDocumentSequence();
    public virtual void ReleaseXmlWriterForFixedDocumentSequence();
    public virtual XmlWriter AcquireXmlWriterForFixedDocument();
    public virtual void ReleaseXmlWriterForFixedDocument();
    public virtual XmlWriter AcquireXmlWriterForFixedPage();
    public virtual void ReleaseXmlWriterForFixedPage();
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont();
    public virtual XpsResourceStream AcquireResourceStreamForXpsFont(string resourceId);
    public virtual void ReleaseResourceStreamForXpsFont();
    public virtual void ReleaseResourceStreamForXpsFont(string resourceId);
    public virtual XpsResourceStream AcquireResourceStreamForXpsImage(string resourceId);
    public virtual void ReleaseResourceStreamForXpsImage();
    public virtual XpsResourceStream AcquireResourceStreamForXpsColorContext(string resourceId);
    public virtual void ReleaseResourceStreamForXpsColorContext();
    public virtual XpsResourceStream AcquireResourceStreamForXpsResourceDictionary(string resourceId);
    public virtual void ReleaseResourceStreamForXpsResourceDictionary();
    public virtual void RelateResourceToCurrentPage(Uri targetUri, string relationshipName);
    public virtual void RelateRestrictedFontToCurrentDocument(Uri targetUri);
    public virtual void PersistPrintTicket(PrintTicket printTicket);
    public virtual XmlWriter AcquireXmlWriterForPage();
    public virtual void PreCommitCurrentPage();
    public virtual XmlWriter AcquireXmlWriterForResourceDictionary();
    public virtual IList`1<string> AcquireStreamForLinkTargets();
    public virtual Uri get_CurrentFixedDocumentUri();
    public virtual Uri get_CurrentFixedPageUri();
    public void add_PackagingProgressEvent(PackagingProgressEventHandler value);
    public void remove_PackagingProgressEvent(PackagingProgressEventHandler value);
    internal XpsInterleavingPolicy get_InterleavingPolicy();
}
public class System.Windows.Xps.Serialization.XpsResourceStream : object {
    public Stream Stream { get; }
    public Uri Uri { get; }
    public XpsResourceStream(Stream stream, Uri uri);
    public Stream get_Stream();
    public Uri get_Uri();
    public void Initialize();
}
public class System.Windows.Xps.Serialization.XpsSerializationCompletedEventArgs : AsyncCompletedEventArgs {
    public XpsSerializationCompletedEventArgs(bool canceled, object state, Exception exception);
}
public class System.Windows.Xps.Serialization.XpsSerializationCompletedEventHandler : MulticastDelegate {
    public XpsSerializationCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XpsSerializationCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XpsSerializationCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Xps.Serialization.XpsSerializationManager : PackageSerializationManager {
    internal static string NullString;
    internal static string TypeOfString;
    internal BasePackagingPolicy PackagingPolicy { get; }
    internal XpsResourcePolicy ResourcePolicy { get; }
    internal ReachHierarchySimulator Simulator { get; internal set; }
    internal bool IsSimulating { get; internal set; }
    public bool IsBatchMode { get; }
    internal VisualSerializationService VisualSerializationService { get; }
    internal PrintTicket FixedPagePrintTicket { get; internal set; }
    internal Size FixedPageSize { get; internal set; }
    public XpsSerializationManager(BasePackagingPolicy packagingPolicy, bool batchMode);
    public virtual void SaveAsXaml(object serializedObject);
    public virtual void Commit();
    public void SetFontSubsettingPolicy(FontSubsetterCommitPolicies policy);
    public void SetFontSubsettingCountPolicy(int countPolicy);
    public void add_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    public void remove_XpsSerializationPrintTicketRequired(XpsSerializationPrintTicketRequiredEventHandler value);
    public void add_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    public void remove_XpsSerializationProgressChanged(XpsSerializationProgressChangedEventHandler value);
    internal void add_XpsSerializationPrintTicketRequiredOnXpsDriverDocEvent(XpsSerializationPrintTicketRequiredEventHandler value);
    internal void remove_XpsSerializationPrintTicketRequiredOnXpsDriverDocEvent(XpsSerializationPrintTicketRequiredEventHandler value);
    internal void add_XpsSerializationXpsDriverDocEvent(XpsSerializationXpsDriverDocEventHandler value);
    internal void remove_XpsSerializationXpsDriverDocEvent(XpsSerializationXpsDriverDocEventHandler value);
    internal virtual string GetXmlNSForType(Type objectType);
    internal virtual ReachSerializer GetSerializer(object serializedObject);
    internal virtual Type GetSerializerType(Type objectType);
    internal virtual TypeConverter GetTypeConverter(object serializedObject);
    internal virtual TypeConverter GetTypeConverter(Type serializedObjectType);
    internal virtual XmlWriter AcquireXmlWriter(Type writerType);
    internal virtual void ReleaseXmlWriter(Type writerType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType);
    internal virtual XpsResourceStream AcquireResourceStream(Type resourceType, string resourceID);
    internal virtual void ReleaseResourceStream(Type resourceType);
    internal virtual void ReleaseResourceStream(Type resourceType, string resourceID);
    internal virtual bool CanSerializeDependencyProperty(object serializableObject, TypeDependencyPropertyCache dependencyProperty);
    internal virtual bool CanSerializeClrProperty(object serializableObject, TypePropertyCache property);
    internal virtual void AddRelationshipToCurrentPage(Uri targetUri, string relationshipName);
    internal void RegisterDocumentStart();
    internal void RegisterDocumentEnd();
    internal void RegisterPageStart();
    internal void RegisterPageEnd();
    internal void RegisterDocumentSequenceStart();
    internal void RegisterDocumentSequenceEnd();
    internal virtual BasePackagingPolicy get_PackagingPolicy();
    internal virtual XpsResourcePolicy get_ResourcePolicy();
    internal ReachHierarchySimulator get_Simulator();
    internal void set_Simulator(ReachHierarchySimulator value);
    internal bool get_IsSimulating();
    internal void set_IsSimulating(bool value);
    public bool get_IsBatchMode();
    internal VisualSerializationService get_VisualSerializationService();
    internal PrintTicket get_FixedPagePrintTicket();
    internal void set_FixedPagePrintTicket(PrintTicket value);
    internal Size get_FixedPageSize();
    internal void set_FixedPageSize(Size value);
    internal bool IsSerializedObjectTypeSupported(object serializedObject);
    internal XpsDriverDocEventManager GetXpsDriverDocEventManager();
    internal void OnXPSSerializationPrintTicketRequired(object operationState);
    internal void OnXPSSerializationProgressChanged(object operationState);
    internal void OnXpsDriverDocEvent(XpsSerializationXpsDriverDocEventArgs e);
}
public class System.Windows.Xps.Serialization.XpsSerializationManagerAsync : XpsSerializationManager {
    internal Stack OperationStack { get; }
    public XpsSerializationManagerAsync(BasePackagingPolicy packagingPolicy, bool batchMode);
    public virtual void SaveAsXaml(object serializedObject);
    internal object InvokeSaveAsXamlWorkItem(object arg);
    internal object InvokeSaveAsXamlBatchWorkItem(object arg);
    public void CancelAsync();
    public virtual void Commit();
    public void add_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
    public void remove_XpsSerializationCompleted(XpsSerializationCompletedEventHandler value);
    internal void add_XpsSerializationCompletedInternal(XpsSerializationCompletedEventHandler value);
    internal void remove_XpsSerializationCompletedInternal(XpsSerializationCompletedEventHandler value);
    internal virtual Type GetSerializerType(Type objectType);
    internal Stack get_OperationStack();
}
public class System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventArgs : EventArgs {
    public PrintTicket PrintTicket { get; public set; }
    public PrintTicketLevel PrintTicketLevel { get; }
    internal bool Modified { get; internal set; }
    public int Sequence { get; }
    public XpsSerializationPrintTicketRequiredEventArgs(PrintTicketLevel printTicketLevel, int sequence);
    public void set_PrintTicket(PrintTicket value);
    public PrintTicket get_PrintTicket();
    public PrintTicketLevel get_PrintTicketLevel();
    internal void set_Modified(bool value);
    internal bool get_Modified();
    public int get_Sequence();
}
public class System.Windows.Xps.Serialization.XpsSerializationPrintTicketRequiredEventHandler : MulticastDelegate {
    public XpsSerializationPrintTicketRequiredEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XpsSerializationPrintTicketRequiredEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XpsSerializationPrintTicketRequiredEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventArgs : ProgressChangedEventArgs {
    public XpsWritingProgressChangeLevel WritingLevel { get; }
    public int PageNumber { get; }
    public XpsSerializationProgressChangedEventArgs(XpsWritingProgressChangeLevel writingLevel, int pageNumber, int progressPercentage, object userToken);
    public XpsWritingProgressChangeLevel get_WritingLevel();
    public int get_PageNumber();
}
public class System.Windows.Xps.Serialization.XpsSerializationProgressChangedEventHandler : MulticastDelegate {
    public XpsSerializationProgressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XpsSerializationProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XpsSerializationProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Xps.Serialization.XpsSerializationXpsDriverDocEventArgs : EventArgs {
    public int CurrentCount { get; }
    public PrintTicket PrintTicket { get; public set; }
    public XpsDocumentEventType DocumentEvent { get; }
    internal bool Modified { get; }
    public XpsSerializationXpsDriverDocEventArgs(XpsDocumentEventType documentEvent, int currentCount, PrintTicket printTicket);
    public int get_CurrentCount();
    public void set_PrintTicket(PrintTicket value);
    public PrintTicket get_PrintTicket();
    public XpsDocumentEventType get_DocumentEvent();
    internal bool get_Modified();
}
internal class System.Windows.Xps.Serialization.XpsSerializationXpsDriverDocEventHandler : MulticastDelegate {
    public XpsSerializationXpsDriverDocEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XpsSerializationXpsDriverDocEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XpsSerializationXpsDriverDocEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Xps.Serialization.XpsSerializerFactory : object {
    public string DisplayName { get; }
    public string ManufacturerName { get; }
    public Uri ManufacturerWebsite { get; }
    public string DefaultFileExtension { get; }
    public sealed virtual SerializerWriter CreateSerializerWriter(Stream stream);
    public sealed virtual string get_DisplayName();
    public sealed virtual string get_ManufacturerName();
    public sealed virtual Uri get_ManufacturerWebsite();
    public sealed virtual string get_DefaultFileExtension();
}
internal class System.Windows.Xps.Serialization.XpsSerializerWriter : SerializerWriter {
    public XpsSerializerWriter(Stream stream);
    public virtual void Write(Visual visual);
    public virtual void Write(Visual visual, PrintTicket printTicket);
    public virtual void WriteAsync(Visual visual);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket);
    public virtual void WriteAsync(Visual visual, object userState);
    public virtual void WriteAsync(Visual visual, PrintTicket printTicket, object userState);
    public virtual void Write(DocumentPaginator paginator);
    public virtual void Write(DocumentPaginator paginator, PrintTicket printTicket);
    public virtual void WriteAsync(DocumentPaginator paginator);
    public virtual void WriteAsync(DocumentPaginator paginator, PrintTicket printTicket);
    public virtual void WriteAsync(DocumentPaginator paginator, object userState);
    public virtual void WriteAsync(DocumentPaginator paginator, PrintTicket printTicket, object userState);
    public virtual void Write(FixedPage fixedPage);
    public virtual void Write(FixedPage fixedPage, PrintTicket printTicket);
    public virtual void WriteAsync(FixedPage fixedPage);
    public virtual void WriteAsync(FixedPage fixedPage, PrintTicket printTicket);
    public virtual void WriteAsync(FixedPage fixedPage, object Async);
    public virtual void WriteAsync(FixedPage fixedPage, PrintTicket printTicket, object Async);
    public virtual void Write(FixedDocument fixedDocument);
    public virtual void Write(FixedDocument fixedDocument, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocument fixedDocument);
    public virtual void WriteAsync(FixedDocument fixedDocument, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocument fixedDocument, object userState);
    public virtual void WriteAsync(FixedDocument fixedDocument, PrintTicket printTicket, object userState);
    public virtual void Write(FixedDocumentSequence fixedDocumentSequence);
    public virtual void Write(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, object userState);
    public virtual void WriteAsync(FixedDocumentSequence fixedDocumentSequence, PrintTicket printTicket, object userState);
    public virtual void CancelAsync();
    public virtual SerializerWriterCollator CreateVisualsCollator();
    public virtual SerializerWriterCollator CreateVisualsCollator(PrintTicket documentSequencePT, PrintTicket documentPT);
    public virtual void add_WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler value);
    public virtual void remove_WritingPrintTicketRequired(WritingPrintTicketRequiredEventHandler value);
    public virtual void add_WritingProgressChanged(WritingProgressChangedEventHandler value);
    public virtual void remove_WritingProgressChanged(WritingProgressChangedEventHandler value);
    public virtual void add_WritingCompleted(WritingCompletedEventHandler value);
    public virtual void remove_WritingCompleted(WritingCompletedEventHandler value);
    public virtual void add_WritingCancelled(WritingCancelledEventHandler value);
    public virtual void remove_WritingCancelled(WritingCancelledEventHandler value);
}
internal class System.Windows.Xps.Serialization.XpsTokenContext : object {
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyInfo PropertyInfo { get; }
    public DependencyProperty DependencyProperty { get; }
    public object TargetObject { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public XpsTokenContext(PackageSerializationManager serializationManager, SerializablePropertyContext propertyContext);
    public XpsTokenContext(PackageSerializationManager serializationManager, object targetObject, object objectValue);
    public sealed virtual void OnComponentChanged();
    public sealed virtual bool OnComponentChanging();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IContainer get_Container();
    public sealed virtual object get_Instance();
    public PropertyInfo get_PropertyInfo();
    public DependencyProperty get_DependencyProperty();
    public object get_TargetObject();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
}
public enum System.Windows.Xps.Serialization.XpsWritingProgressChangeLevel : Enum {
    public int value__;
    public static XpsWritingProgressChangeLevel None;
    public static XpsWritingProgressChangeLevel FixedDocumentSequenceWritingProgress;
    public static XpsWritingProgressChangeLevel FixedDocumentWritingProgress;
    public static XpsWritingProgressChangeLevel FixedPageWritingProgress;
}
internal static class System.Windows.Xps.SR : object {
    internal static ResourceManager ResourceManager { get; }
    private static SR();
    internal static string Get(string id);
    internal static string Get(string id, Object[] args);
    internal static ResourceManager get_ResourceManager();
}
internal class System.Windows.Xps.SRID : ValueType {
    public static string Default;
    public static string ReachPackaging_PrintTicketAlreadyCommitted;
    public static string ReachPackaging_DependantsNotCommitted;
    public static string ReachPackaging_NotAPrintTicket;
    public static string ReachPackaging_PanelOrSequenceAlreadyOpen;
    public static string ReachPackaging_NotAFixedDocument;
    public static string ReachPackaging_NotAFixedPage;
    public static string ReachPackaging_OpenDocOrElementAlreadyCalled;
    public static string ReachPackaging_AlreadyHasStartingPart;
    public static string ReachPackaging_AlreadyHasThumbnail;
    public static string ReachPackaging_OnlyWriters;
    public static string ReachPackaging_PartNotFound;
    public static string ReachPackaging_AlreadyHasRootSequenceOrDocument;
    public static string ReachPackaging_NotOpenForReading;
    public static string ReachPackaging_InvalidStartingPart;
    public static string ReachPackaging_InvalidDocUri;
    public static string ReachPackaging_InvalidType;
    public static string ReachPackaging_ServiceTypeAlreadyAdded;
    public static string ReachPackaging_CannotModifyReadOnlyContainer;
    public static string ReachPackaging_MoreThanOneStartingParts;
    public static string ReachPackaging_MoreThanOneMetaDataParts;
    public static string ReachPackaging_MoreThanOneSigOriginParts;
    public static string ReachPackaging_MoreThanOneSigDefParts;
    public static string ReachPackaging_MoreThanOneThumbnailPart;
    public static string ReachPackaging_MoreThanOnePrintTicketPart;
    public static string ReachPackaging_PartFromDifferentContainer;
    public static string ReachPackaging_PackageUriNull;
    public static string ReachPackaging_NotAFixedDocumentSequence;
    public static string ReachPackaging_NotSignatureDefinitionElement;
    public static string ReachPackaging_NotValidSignatureDefinitionAttribute;
    public static string ReachPackaging_NotValidSignatureDefinitionElement;
    public static string ReachPackaging_SpotIDRequiredAttribute;
    public static string ReachPackaging_UnsupportedImageType;
    public static string ReachPackaging_UnsupportedThumbnailImageType;
    public static string ReachPackaging_DocumentWasClosed;
    public static string ReachPackaging_InvalidContentType;
    public static string Converter_ConvertToNotSupported;
    public static string Converter_ConvertFromNotSupported;
    public static string ReachPackaging_SequenceCntMustBe1;
    public static string ReachPackaging_CommitCountPolicyLessThan1;
    public static string ReachPackaging_ObfucatedFontNeedGuid;
    public static string ReachPackaging_MoreThanOneDocStructure;
    public static string ReachPackaging_MoreThanOneStoryFragment;
    public static string ReachPackaging_SigningDoesNotMeetPolicy;
    public static string MustBeOfType;
    public static string ReachSerialization_NoFontService;
    public static string ReachSerialization_NoImageService;
    public static string ReachSerialization_NotSupported;
    public static string ReachSerialization_NoSerializer;
    public static string ReachSerialization_CannotReleaseXmlWriter;
    public static string ReachSerialization_NoFixedPageWriter;
    public static string ReachSerialization_MustHaveSerializationManager;
    public static string ReachSerialization_UnableToInstantiateSerializer;
    public static string ReachSerialization_WrongPropertyTypeForFixedPage;
    public static string ReachSerialization_WrongPropertyTypeForFixedDocument;
    public static string ReachSerialization_WrongPropertyTypeForPageContent;
    public static string ReachSerialization_TargetNotPrintTicket;
    public static string ReachSerialization_CycleDetectedInSerialization;
    public static string ReachSerialization_NotXpsSerializationManagerAsync;
    public static string ReachSerializationAsync_NoType;
    public static string ReachSerializationAsync_NoNgcType;
    public static string ReachSerialization_WrongPackagingPolicy;
    public static string ReachSerialization_ExpectedFixedDocumentSequence;
    public static string ReachSerialization_ExpectedFixedDocument;
    public static string ReachSerialization_ExpectedFixedPage;
    public static string ReachSerialization_FixedDocumentInDocument;
    public static string ReachSerialization_FixedDocumentInPage;
    public static string ReachSerialization_NoFixedPages;
    public static string ReachSerialization_FixedPageInPage;
    public static string ReachSerialization_NoFixedDocuments;
    public static string XpsSerializerFactory_WriterIsClosed;
    public static string XpsSerializerFactory_DisplayName;
    public static string XpsSerializerFactory_ManufacturerName;
    public static string XpsSerializerFactory_ManufacturerWebsite;
    public static string PTProvider_InvalidDevModeBytes;
    public static string PTProvider_VerifyAccess;
}
public class System.Windows.Xps.XpsException : Exception {
    public XpsException(string message);
    public XpsException(string message, Exception innerException);
    protected XpsException(SerializationInfo info, StreamingContext context);
}
public class System.Windows.Xps.XpsPackagingException : XpsException {
    public XpsPackagingException(string message);
    public XpsPackagingException(string message, Exception innerException);
    protected XpsPackagingException(SerializationInfo info, StreamingContext context);
}
public class System.Windows.Xps.XpsSerializationException : XpsException {
    public XpsSerializationException(string message);
    public XpsSerializationException(string message, Exception innerException);
    protected XpsSerializationException(SerializationInfo info, StreamingContext context);
}
