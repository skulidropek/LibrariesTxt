internal static class Microsoft.Activities.Presentation.ExpressionSettingHelper : object {
    internal static string VBExpressionLanguageName;
    private static ExpressionSettingHelper();
    internal static string GetRootEditorSetting(ModelTreeManager modelTreeManager, FrameworkName targetFramework);
}
internal static class Microsoft.Activities.Presentation.FrameworkNameConstants : object {
    internal static string NetFramework;
    internal static string NetFrameworkWithSpace;
    internal static string ClientProfileName;
    public static FrameworkName NetFramework40;
    public static FrameworkName NetFramework45;
    private static FrameworkNameConstants();
}
[ExtensionAttribute]
internal static class Microsoft.Activities.Presentation.FrameworkNameExtensions : object {
    [ExtensionAttribute]
public static bool Is45OrHigher(FrameworkName frameworkName);
    [ExtensionAttribute]
public static bool IsLessThan45(FrameworkName frameworkName);
    [ExtensionAttribute]
public static bool IsLessThan40(FrameworkName frameworkName);
    [ExtensionAttribute]
public static bool IsProfileSupported(FrameworkName frameworkName);
    [ExtensionAttribute]
public static bool IsFullProfile(FrameworkName frameworkName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
internal class Microsoft.Activities.Presentation.SharedSR : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string FileFormatError { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_FileFormatError();
}
internal static class Microsoft.Activities.Presentation.TypeNameHelper : object {
    public static string GetDisplayName(Type type, bool fullName);
}
[ExtensionAttribute]
internal static class Microsoft.Activities.Presentation.Xaml.ActivityBuilderExtensions : object {
    [ExtensionAttribute]
internal static DynamicActivity ConvertToDynamicActivity(ActivityBuilder activityBuilder);
    internal static void ConvertActivityBuilderToDynamicActivity(ActivityBuilder activityBuilder, DynamicActivity bodyPlaceholder);
}
internal class Microsoft.Activities.Presentation.Xaml.ActivityTemplateFactoryBuilderReader : XamlReader {
    public bool IsEof { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public ActivityTemplateFactoryBuilderReader(XamlReader underlyingReader, XamlSchemaContext schemaContext);
    public virtual bool get_IsEof();
    public virtual XamlMember get_Member();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    public sealed virtual bool get_HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public virtual bool Read();
}
internal class Microsoft.Activities.Presentation.Xaml.ActivityTemplateFactoryBuilderWriter : XamlWriter {
    public XamlSchemaContext SchemaContext { get; }
    public ActivityTemplateFactoryBuilderWriter(XamlWriter underlyingWriter, XamlSchemaContext schemaContext);
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public virtual void WriteStartObject(XamlType type);
    public virtual void WriteEndObject();
    public virtual void WriteGetObject();
    public virtual void WriteStartMember(XamlMember xamlMember);
    public virtual void WriteEndMember();
    public virtual void WriteValue(object value);
}
internal static class Microsoft.Activities.Presentation.Xaml.ActivityTemplateFactoryBuilderXamlMembers : object {
    internal static XamlMember ActivityTemplateFactoryImplementationMemberForReader(Type activityTemplateFactoryType, XamlSchemaContext schemaContext);
    internal static XamlMember ActivityTemplateFactoryImplementationMemberForWriter(XamlSchemaContext schemaContext);
    internal static XamlMember ActivityTemplateFactoryBuilderNameMember(XamlSchemaContext schemaContext);
    internal static XamlMember ActivityTemplateFactoryBuilderTargetTypeMember(XamlSchemaContext schemaContext);
    internal static XamlMember ActivityTemplateFactoryBuilderImplementationMember(XamlSchemaContext schemaContext);
}
internal class Microsoft.Activities.Presentation.Xaml.AttributeConverter`2 : TypeConverter {
    private static AttributeConverter`2();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal abstract class Microsoft.Activities.Presentation.Xaml.AttributeInfo`1 : object {
    public bool IsComplete { get; }
    public bool LookupConstructionRequiresArguments { get; }
    public XamlTypeInvoker Invoker { get; }
    public virtual bool get_IsComplete();
    public virtual bool get_LookupConstructionRequiresArguments();
    public virtual XamlTypeInvoker get_Invoker();
    public abstract virtual ConstructorInfo GetConstructor();
    public abstract virtual ICollection GetConstructorArguments(TAttribute attribute, ConstructorInfo& constructor);
}
internal class Microsoft.Activities.Presentation.Xaml.AttributeXamlType`2 : XamlType {
    public AttributeXamlType`2(XamlSchemaContext xamlSchemaContext);
    protected virtual XamlValueConverter`1<TypeConverter> LookupTypeConverter();
    protected virtual bool LookupConstructionRequiresArguments();
    protected virtual XamlTypeInvoker LookupInvoker();
}
internal class Microsoft.Activities.Presentation.Xaml.DefaultValueAttributeInfo : AttributeInfo`1<DefaultValueAttribute> {
    public XamlTypeInvoker Invoker { get; }
    public virtual XamlTypeInvoker get_Invoker();
    public virtual ICollection GetConstructorArguments(DefaultValueAttribute attribute, ConstructorInfo& constructor);
    public virtual ConstructorInfo GetConstructor();
}
internal class Microsoft.Activities.Presentation.Xaml.DesignerAttributeInfo : AttributeInfo`1<DesignerAttribute> {
    public virtual ICollection GetConstructorArguments(DesignerAttribute attribute, ConstructorInfo& constructor);
    public virtual ConstructorInfo GetConstructor();
}
internal class Microsoft.Activities.Presentation.Xaml.DesignTimeXamlWriter : XamlXmlWriter {
    internal static string EmptyWorkflowSymbol;
    public DesignTimeXamlWriter(TextWriter textWriter, WorkflowDesignerXamlSchemaContext context, bool shouldWriteDebugSymbol);
    private static DesignTimeXamlWriter();
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public virtual void WriteStartObject(XamlType type);
    public virtual void WriteGetObject();
    public virtual void WriteEndObject();
}
internal class Microsoft.Activities.Presentation.Xaml.EditorAttributeInfo : AttributeInfo`1<EditorAttribute> {
    public virtual ICollection GetConstructorArguments(EditorAttribute attribute, ConstructorInfo& constructor);
    public virtual ConstructorInfo GetConstructor();
}
internal class Microsoft.Activities.Presentation.Xaml.ImportAttributeInfo : AttributeInfo`1<ImportAttribute> {
    public bool IsComplete { get; }
    public virtual bool get_IsComplete();
    public virtual ICollection GetConstructorArguments(ImportAttribute attribute, ConstructorInfo& constructor);
    public virtual ConstructorInfo GetConstructor();
}
internal class Microsoft.Activities.Presentation.Xaml.ImportManyAttributeInfo : AttributeInfo`1<ImportManyAttribute> {
    public bool IsComplete { get; }
    public virtual bool get_IsComplete();
    public virtual ICollection GetConstructorArguments(ImportManyAttribute attribute, ConstructorInfo& constructor);
    public virtual ConstructorInfo GetConstructor();
}
internal interface Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext {
    public FrameworkName FrameworkName { get; }
    public WorkflowDesignerXamlSchemaContext XamlSchemaContext { get; }
    public ViewStateIdManager IdManager { get; }
    public WorkflowSymbol LastWorkflowSymbol { get; public set; }
    public string LocalAssemblyName { get; }
    public abstract virtual FrameworkName get_FrameworkName();
    public abstract virtual WorkflowDesignerXamlSchemaContext get_XamlSchemaContext();
    public abstract virtual ViewStateIdManager get_IdManager();
    public abstract virtual WorkflowSymbol get_LastWorkflowSymbol();
    public abstract virtual void set_LastWorkflowSymbol(WorkflowSymbol value);
    public abstract virtual string get_LocalAssemblyName();
    public abstract virtual void OnSerializationCompleted(Dictionary`2<object, object> sourceLocationObjectToModelItemObjectMapping);
    public abstract virtual void OnBeforeDeserialize();
    public abstract virtual void OnSourceLocationFound(object target, SourceLocation sourceLocation);
    public abstract virtual void OnAfterDeserialize(Dictionary`2<string, SourceLocation> viewStateDataSourceLocationMapping);
}
internal class Microsoft.Activities.Presentation.Xaml.LineColumnPair : Tuple`2<int, int> {
    internal int LineNumber { get; }
    internal int ColumnNumber { get; }
    internal LineColumnPair(int item1, int item2);
    internal int get_LineNumber();
    internal int get_ColumnNumber();
}
internal static class Microsoft.Activities.Presentation.Xaml.MultiTargetingTypeResolver : object {
    public static ResolverResult Resolve(MultiTargetingSupportService multiTargetingService, Type type);
    public static XamlType GetXamlType(ResolverResult resolverResult, XamlType oldXamlType);
}
internal class Microsoft.Activities.Presentation.Xaml.ObjectReferenceEqualityComparer`1 : object {
    public static ObjectReferenceEqualityComparer`1<T> Default { get; }
    public static ObjectReferenceEqualityComparer`1<T> get_Default();
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T obj);
}
internal class Microsoft.Activities.Presentation.Xaml.ResolverCache : object {
    public void Update(Type type, ResolverResult result);
    public ResolverResult Lookup(Type type);
}
internal class Microsoft.Activities.Presentation.Xaml.ResolverResult : object {
    public static ResolverResult Unknown { get; }
    public static ResolverResult FullySupported { get; }
    public XamlTypeKind Kind { get; private set; }
    public ICollection`1<string> NewProperties { get; private set; }
    public ResolverResult(XamlTypeKind kind);
    public ResolverResult(ICollection`1<string> newProperties);
    private static ResolverResult();
    public static ResolverResult get_Unknown();
    public static ResolverResult get_FullySupported();
    [CompilerGeneratedAttribute]
public XamlTypeKind get_Kind();
    [CompilerGeneratedAttribute]
private void set_Kind(XamlTypeKind value);
    [CompilerGeneratedAttribute]
public ICollection`1<string> get_NewProperties();
    [CompilerGeneratedAttribute]
private void set_NewProperties(ICollection`1<string> value);
}
internal class Microsoft.Activities.Presentation.Xaml.SourceTextScanner : object {
    internal SourceTextScanner(string source);
    internal Tuple`2<LineColumnPair, char> SearchCharAfter(LineColumnPair startPoint, Char[] charsToSearch);
}
internal class Microsoft.Activities.Presentation.Xaml.ViewStateIdManager : object {
    public void UpdateMap(string id);
    public string GetNewId(string prefix);
}
internal static class Microsoft.Activities.Presentation.Xaml.ViewStateXamlHelper : object {
    private static ViewStateXamlHelper();
    public static XamlReader ConvertAttachedPropertiesToViewState(XamlObjectReader inputReader, ViewStateIdManager idManager);
    public static XamlReader ConvertViewStateToAttachedProperties(XamlReader inputReader, ViewStateIdManager idManager, Dictionary`2& viewStateSourceLocationMap);
    public static XamlReader RemoveIdRefs(XamlObjectReader inputReader);
    public static void NodeLoopTest(XamlReader xamlReader);
}
internal class Microsoft.Activities.Presentation.Xaml.WorkflowDesignerXamlHelper : object {
    public FrameworkName FrameworkName { get; }
    public WorkflowDesignerXamlSchemaContext XamlSchemaContext { get; }
    public ViewStateIdManager IdManager { get; }
    public WorkflowSymbol LastWorkflowSymbol { get; public set; }
    public string LocalAssemblyName { get; }
    internal WorkflowDesignerXamlHelper(IWorkflowDesignerXamlHelperExecutionContext executionContext);
    public FrameworkName get_FrameworkName();
    public WorkflowDesignerXamlSchemaContext get_XamlSchemaContext();
    public ViewStateIdManager get_IdManager();
    public WorkflowSymbol get_LastWorkflowSymbol();
    public void set_LastWorkflowSymbol(WorkflowSymbol value);
    public string get_LocalAssemblyName();
    public void OnSerializationCompleted(Dictionary`2<object, object> sourceLocationObjectToModelItemObjectMapping);
    public void OnBeforeDeserialize();
    public void OnSourceLocationFound(object target, SourceLocation sourceLocation);
    public void OnAfterDeserialize(Dictionary`2<string, SourceLocation> viewStateDataSourceLocationMapping);
    internal static Activity GetRootWorkflowElement(object rootModelObject);
    internal static Activity GetRootElementForSymbol(object rootInstance, Activity documentRootElement);
    internal void CopyNamespacesAndAddLocalAssembly(XamlReader activityBuilderReader, XamlWriter objectWriter);
    internal string SerializeToString(object obj, string fileName);
    internal void CreateXamlObjectReaders(object deserializedObject, XamlSchemaContext schemaContext, XamlReader& newWorkflowReader, XamlObjectReaderWithSequence& deserializedObjectSequenceBuilder);
    internal object DeserializeString(string text);
    internal object DeserializeString(string text, IList`1& loadErrors, Dictionary`2& sourceLocations);
}
internal class Microsoft.Activities.Presentation.Xaml.WorkflowDesignerXamlSchemaContext : XamlSchemaContext {
    internal bool ContainsConversionRequiredType { get; internal set; }
    internal bool HasLocalAssembly { get; }
    private static WorkflowDesignerXamlSchemaContext();
    public WorkflowDesignerXamlSchemaContext(string localAssembly);
    public WorkflowDesignerXamlSchemaContext(string localAssembly, EditingContext editingContext);
    [CompilerGeneratedAttribute]
internal bool get_ContainsConversionRequiredType();
    [CompilerGeneratedAttribute]
internal void set_ContainsConversionRequiredType(bool value);
    protected virtual XamlType GetXamlType(string xamlNamespace, string name, XamlType[] typeArguments);
    public virtual XamlType GetXamlType(Type type);
    public virtual IEnumerable`1<string> GetAllXamlNamespaces();
    internal bool get_HasLocalAssembly();
    internal string AddLocalAssembly(string ns);
    internal bool IsClrNamespaceWithNoAssembly(string ns);
    internal bool IsClrNamespaceInLocalAssembly(string ns);
    internal string TrimLocalAssembly(string ns);
}
internal class Microsoft.Activities.Presentation.Xaml.XamlNamespaceHelper : object {
    internal static string ClrNamespacePrefix;
    internal static string ClrNamespaceAssemblyField;
    internal static bool TryParseClrNsUri(string xamlNamespace, String& clrNamespace, String& assembly);
}
internal class Microsoft.Activities.Presentation.Xaml.XamlObjectReaderWithSequence : XamlObjectReader {
    public Dictionary`2<int, object> SequenceNumberToObjectMap { get; }
    public XamlObjectReaderWithSequence(object instance, XamlSchemaContext schemaContext);
    public Dictionary`2<int, object> get_SequenceNumberToObjectMap();
    public virtual bool Read();
}
internal enum Microsoft.Activities.Presentation.Xaml.XamlTypeKind : Enum {
    public int value__;
    public static XamlTypeKind Unknown;
    public static XamlTypeKind PartialSupported;
    public static XamlTypeKind FullySupported;
}
internal class Microsoft.Activities.Presentation.Xaml.XamlTypeWithExplicitNamespace : XamlType {
    public XamlTypeWithExplicitNamespace(XamlType wrapped, IEnumerable`1<string> explicitNamespaces);
    public virtual IList`1<string> GetXamlNamespaces();
}
internal class Microsoft.Activities.Presentation.Xaml.XamlTypeWithExtraPropertiesRemoved : XamlType {
    public XamlTypeWithExtraPropertiesRemoved(Type underlyingType, XamlSchemaContext schemaContext, ICollection`1<string> propertiesToBeRemoved);
    protected virtual XamlMember LookupMember(string name, bool skipReadOnlyCheck);
    protected virtual IEnumerable`1<XamlMember> LookupAllMembers();
}
[ExtensionAttribute]
internal static class Microsoft.Activities.Presentation.Xaml.XamlWriterExtensions : object {
    public static void PropagateLineInfo(XamlWriter targetWriter, IXamlLineInfo lineInfo);
    public static void PropagateLineInfo(XamlWriter targetWriter, int lineNumber, int linePosition);
    public static void Transform(XamlReader reader, XamlWriter writer, IXamlLineInfo readerLineInfo, bool closeWriter);
    [ExtensionAttribute]
public static void WriteNode(XamlWriter writer, XamlReader reader, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteEndMember(XamlWriter writer, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteEndObject(XamlWriter writer, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteGetObject(XamlWriter writer, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteNamespace(XamlWriter writer, NamespaceDeclaration namespaceDeclaration, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteStartMember(XamlWriter writer, XamlMember xamlMember, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteStartMember(XamlWriter writer, XamlMember xamlMember, int lineNumber, int linePosition);
    [ExtensionAttribute]
public static void WriteStartObject(XamlWriter writer, XamlType type, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteValue(XamlWriter writer, object value, IXamlLineInfo lineInfo);
}
internal static class Microsoft.Activities.SharedFx : object {
    internal static bool IsFatal(Exception exception);
    internal static void Assert(bool condition, string messageText);
    internal static void Assert(string messageText);
}
internal static class Microsoft.Tools.Common.Win32Interop : object {
    public static int WM_SETICON;
    public static int WM_NCHITTEST;
    public static int WM_SYSCOMMAND;
    public static int GWL_STYLE;
    public static int WS_MAXIMIZEBOX;
    public static int WS_MINIMIZEBOX;
    public static int WS_CLIPCHILDREN;
    public static int WS_CLIPSIBLINGS;
    public static int GWL_EXSTYLE;
    public static int WS_EX_DLGMODALFRAME;
    public static int WS_EX_CONTEXTHELP;
    public static int SC_CONTEXTHELP;
    public static int ICON_SMALL;
    public static int ICON_BIG;
    internal static void MakeWindowClipSiblingsAndChildren(HandleRef hwnd);
    internal static IntPtr SetWindowLongPtr(HandleRef hWnd, int nIndex, IntPtr dwNewLong);
    public static IntPtr GetWindowLongPtr(IntPtr hWnd, int nIndex);
    public static IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);
    public static IntPtr GetActiveWindow();
    public static bool DeleteObject(IntPtr hObject);
    public static int ScreenToClient(IntPtr hWnd, POINT pt);
}
internal static class NameSpaces : object {
    public static string Mc;
    public static string Design;
    public static string Design2010;
    public static string Toolbox;
    public static string Activities;
    public static string DebugSymbol;
    public static string DesignPrefix;
    public static string Design2010Prefix;
    public static string McPrefix;
    public static string DebugSymbolPrefix;
    public static bool ShouldIgnore(string ns);
}
internal class System.Activities.Presentation.ActivityDelegateInfo : object {
    public ModelItem ModelItem { get; private set; }
    public string PropertyName { get; private set; }
    public Type DelegateType { get; private set; }
    public EditingContext EditingContext { get; }
    public ActivityDelegateInfo(ModelItem modelItem, string propertyName);
    [CompilerGeneratedAttribute]
public ModelItem get_ModelItem();
    [CompilerGeneratedAttribute]
private void set_ModelItem(ModelItem value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Type get_DelegateType();
    [CompilerGeneratedAttribute]
private void set_DelegateType(Type value);
    public EditingContext get_EditingContext();
    public sealed virtual ActivityDelegate Create();
}
internal class System.Activities.Presentation.ActivityDelegateInfoPresenter : UserControl {
    public static DependencyProperty DelegateInfoProperty;
    internal ActivityDelegateInfoPresenter root;
    internal ActivityDelegatePresenter activityDelegatePresenter;
    public ActivityDelegateInfo DelegateInfo { get; public set; }
    private static ActivityDelegateInfoPresenter();
    public ActivityDelegateInfo get_DelegateInfo();
    public void set_DelegateInfo(ActivityDelegateInfo value);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.ActivityDelegatePresenter : Control {
    public static DependencyProperty EditingContextProperty;
    public static DependencyProperty FactoryProperty;
    public static DependencyProperty ActivityDelegateProperty;
    public static DependencyProperty HandlerProperty;
    public static DependencyProperty ArgumentsProperty;
    public ModelItem Handler { get; public set; }
    public ModelItem ActivityDelegate { get; public set; }
    public IActivityDelegateFactory Factory { get; public set; }
    public ObservableCollection`1<ModelItem> Arguments { get; public set; }
    public EditingContext EditingContext { get; public set; }
    private static ActivityDelegatePresenter();
    public ModelItem get_Handler();
    public void set_Handler(ModelItem value);
    public ModelItem get_ActivityDelegate();
    public void set_ActivityDelegate(ModelItem value);
    public IActivityDelegateFactory get_Factory();
    public void set_Factory(IActivityDelegateFactory value);
    public ObservableCollection`1<ModelItem> get_Arguments();
    public void set_Arguments(ObservableCollection`1<ModelItem> value);
    public EditingContext get_EditingContext();
    public void set_EditingContext(EditingContext value);
    protected virtual void ReportError(string message, string details);
}
internal static class System.Activities.Presentation.ActivityDelegateUtilities : object {
    public static ActivityDelegateMetadata GetMetadata(Type type);
    public static void FillDelegate(ActivityDelegate activityDelegate, ActivityDelegateMetadata metadata);
    public static bool HasActivityDelegate(Type type);
    public static List`1<ActivityDelegateInfo> CreateActivityDelegateInfo(ModelItem activity);
}
public class System.Activities.Presentation.ActivityDesigner : WorkflowViewElement {
    public static DependencyProperty IconProperty;
    internal static DependencyProperty ActivityDelegatesProperty;
    internal static DependencyProperty HasActivityDelegatesProperty;
    public DrawingBrush Icon { get; public set; }
    internal ObservableCollection`1<ActivityDelegateInfo> ActivityDelegates { get; internal set; }
    internal bool HasActivityDelegates { get; internal set; }
    private static ActivityDesigner();
    public DrawingBrush get_Icon();
    public void set_Icon(DrawingBrush value);
    internal ObservableCollection`1<ActivityDelegateInfo> get_ActivityDelegates();
    internal void set_ActivityDelegates(ObservableCollection`1<ActivityDelegateInfo> value);
    internal bool get_HasActivityDelegates();
    internal void set_HasActivityDelegates(bool value);
    protected virtual void OnModelItemChanged(object newItem);
    protected virtual string GetAutomationIdMemberName();
    protected internal virtual string GetAutomationItemStatus();
    public virtual void OnApplyTemplate();
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    internal DrawingBrush GetDefaultIcon();
    protected internal virtual void OnEditAnnotation();
}
[AttributeUsageAttribute("132")]
public class System.Activities.Presentation.ActivityDesignerOptionsAttribute : Attribute {
    public bool AllowDrillIn { get; public set; }
    public bool AlwaysCollapseChildren { get; public set; }
    public Func`2<ModelItem, DrawingBrush> OutlineViewIconProvider { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowDrillIn();
    [CompilerGeneratedAttribute]
public void set_AllowDrillIn(bool value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysCollapseChildren();
    [CompilerGeneratedAttribute]
public void set_AlwaysCollapseChildren(bool value);
    [CompilerGeneratedAttribute]
public Func`2<ModelItem, DrawingBrush> get_OutlineViewIconProvider();
    [CompilerGeneratedAttribute]
public void set_OutlineViewIconProvider(Func`2<ModelItem, DrawingBrush> value);
}
[ExtensionAttribute]
internal static class System.Activities.Presentation.ActivityTemplateFactoryExtension : object {
    [ExtensionAttribute]
public static bool IsActivityTemplateFactory(Type type);
    [ExtensionAttribute]
public static bool TryGetActivityTemplateFactory(Type type, Type& argumentType);
}
internal enum System.Activities.Presentation.Annotations.AdornerLocation : Enum {
    public int value__;
    public static AdornerLocation None;
    public static AdornerLocation BottomRight;
    public static AdornerLocation TopRight;
    public static AdornerLocation TopLeft;
    public static AdornerLocation BottomLeft;
}
public static class System.Activities.Presentation.Annotations.Annotation : object {
    public static AttachableMemberIdentifier AnnotationTextProperty;
    public static string AnnotationTextPropertyName;
    internal static string IsAnnotationDockedViewStateName;
    private static Annotation();
    public static string GetAnnotationText(object instance);
    public static void SetAnnotationText(object instance, string annotationText);
}
internal class System.Activities.Presentation.Annotations.AnnotationAdorner : Adorner {
    public static DependencyProperty AnchorProperty;
    internal ScrollViewer ScrollViewer { get; internal set; }
    internal UIElement Content { get; internal set; }
    protected int VisualChildrenCount { get; }
    public AnnotationAdorner(UIElement adornedElement);
    private static AnnotationAdorner();
    [CompilerGeneratedAttribute]
internal ScrollViewer get_ScrollViewer();
    [CompilerGeneratedAttribute]
internal void set_ScrollViewer(ScrollViewer value);
    internal UIElement get_Content();
    internal void set_Content(UIElement value);
    protected virtual int get_VisualChildrenCount();
    public static AdornerLocation GetAnchor(DependencyObject obj);
    public static void SetAnchor(DependencyObject obj, AdornerLocation anchor);
    internal static AdornerLocation FindAnchor(Point anchorPoint, Size desiredSize, Rect canvas);
    protected virtual Visual GetVisualChild(int index);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size finalSize);
}
internal abstract class System.Activities.Presentation.Annotations.AnnotationAdornerService : object {
    public abstract virtual void Show(AnnotationAdorner adorner);
    public abstract virtual void Hide(AnnotationAdorner adorner);
}
internal class System.Activities.Presentation.Annotations.AnnotationManager : object {
    public IAnnotationVisualProvider AnnotationVisualProvider { get; public set; }
    protected internal AnnotationAdornerService AnnotationAdornerService { get; }
    internal AnnotationManager(WorkflowViewElement workflowViewElement);
    public IAnnotationVisualProvider get_AnnotationVisualProvider();
    public void set_AnnotationVisualProvider(IAnnotationVisualProvider value);
    protected internal virtual AnnotationAdornerService get_AnnotationAdornerService();
    public void Initialize();
    public void Uninitialize();
    public void OnEditAnnotation();
}
internal enum System.Activities.Presentation.Annotations.AnnotationStatus : Enum {
    public int value__;
    public static AnnotationStatus Hidden;
    public static AnnotationStatus Floating;
    public static AnnotationStatus Docked;
}
internal class System.Activities.Presentation.Annotations.DockedAnnotationView : UserControl {
    public static DependencyProperty IsReadOnlyProperty;
    internal DockedAnnotationView root;
    internal TextBox textBox;
    internal Button undockButton;
    internal Border border;
    public static DependencyProperty AnnotationTextProperty { get; }
    public bool IsReadOnly { get; public set; }
    public string AnnotationText { get; public set; }
    private static DockedAnnotationView();
    public sealed virtual void add_UndockButtonClicked(Action value);
    public sealed virtual void remove_UndockButtonClicked(Action value);
    public static DependencyProperty get_AnnotationTextProperty();
    public bool get_IsReadOnly();
    public sealed virtual void set_IsReadOnly(bool value);
    public string get_AnnotationText();
    public void set_AnnotationText(string value);
    public sealed virtual void FocusOnContent();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    private sealed virtual override void System.Activities.Presentation.Annotations.IDockedAnnotation.set_Visibility(Visibility );
}
internal class System.Activities.Presentation.Annotations.FloatingAnnotationView : UserControl {
    public static DependencyProperty ModelItemProperty;
    public static DependencyProperty IsReadOnlyProperty;
    internal FloatingAnnotationView root;
    internal Button dockButton;
    internal TextBox annotationTextBox;
    public bool IsReadOnly { get; public set; }
    public ModelItem ModelItem { get; public set; }
    private static FloatingAnnotationView();
    public sealed virtual void add_DockButtonClicked(Action value);
    public sealed virtual void remove_DockButtonClicked(Action value);
    public sealed virtual void add_IsMouseOverChanged(EventHandler value);
    public sealed virtual void remove_IsMouseOverChanged(EventHandler value);
    public bool get_IsReadOnly();
    public sealed virtual void set_IsReadOnly(bool value);
    public sealed virtual ModelItem get_ModelItem();
    public sealed virtual void set_ModelItem(ModelItem value);
    public sealed virtual void FocusOnContent();
    public sealed virtual void UpdateModelItem();
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    private sealed virtual override void System.Activities.Presentation.Annotations.IFloatingAnnotation.add_IsKeyboardFocusWithinChanged(DependencyPropertyChangedEventHandler );
    private sealed virtual override void System.Activities.Presentation.Annotations.IFloatingAnnotation.remove_IsKeyboardFocusWithinChanged(DependencyPropertyChangedEventHandler );
}
internal interface System.Activities.Presentation.Annotations.IAnnotationIndicator {
    public bool IsMouseOver { get; }
    unknown Visibility Visibility {public set; }
    public abstract virtual void add_IsMouseOverChanged(EventHandler value);
    public abstract virtual void remove_IsMouseOverChanged(EventHandler value);
    public abstract virtual bool get_IsMouseOver();
    public abstract virtual void set_Visibility(Visibility value);
}
internal interface System.Activities.Presentation.Annotations.IAnnotationVisualProvider {
    public abstract virtual IAnnotationIndicator GetAnnotationIndicator();
    public abstract virtual IFloatingAnnotation GetFloatingAnnotation();
    public abstract virtual IDockedAnnotation GetDockedAnnotation();
}
internal interface System.Activities.Presentation.Annotations.IDockedAnnotation {
    unknown bool IsReadOnly {public set; }
    unknown Visibility Visibility {public set; }
    public abstract virtual void add_UndockButtonClicked(Action value);
    public abstract virtual void remove_UndockButtonClicked(Action value);
    public abstract virtual void set_IsReadOnly(bool value);
    public abstract virtual void set_Visibility(Visibility value);
    public abstract virtual void FocusOnContent();
}
internal interface System.Activities.Presentation.Annotations.IFloatingAnnotation {
    unknown bool IsReadOnly {public set; }
    public ModelItem ModelItem { get; public set; }
    public bool IsKeyboardFocusWithin { get; }
    public bool IsMouseOver { get; }
    public abstract virtual void add_IsKeyboardFocusWithinChanged(DependencyPropertyChangedEventHandler value);
    public abstract virtual void remove_IsKeyboardFocusWithinChanged(DependencyPropertyChangedEventHandler value);
    public abstract virtual void add_IsMouseOverChanged(EventHandler value);
    public abstract virtual void remove_IsMouseOverChanged(EventHandler value);
    public abstract virtual void add_DockButtonClicked(Action value);
    public abstract virtual void remove_DockButtonClicked(Action value);
    public abstract virtual void set_IsReadOnly(bool value);
    public abstract virtual ModelItem get_ModelItem();
    public abstract virtual void set_ModelItem(ModelItem value);
    public abstract virtual bool get_IsKeyboardFocusWithin();
    public abstract virtual bool get_IsMouseOver();
    public abstract virtual void FocusOnContent();
    public abstract virtual void UpdateModelItem();
}
internal class System.Activities.Presentation.Annotations.NotifyArgumentVariableAnnotationTextChanged : Change {
    public ArgumentDesigner ArgumentDesigner { get; public set; }
    public VariableDesigner VariableDesigner { get; public set; }
    public string Description { get; }
    [CompilerGeneratedAttribute]
public ArgumentDesigner get_ArgumentDesigner();
    [CompilerGeneratedAttribute]
public void set_ArgumentDesigner(ArgumentDesigner value);
    [CompilerGeneratedAttribute]
public VariableDesigner get_VariableDesigner();
    [CompilerGeneratedAttribute]
public void set_VariableDesigner(VariableDesigner value);
    public virtual string get_Description();
    public virtual bool Apply();
    public virtual Change GetInverse();
}
internal class System.Activities.Presentation.Annotations.UIElementToAnnotationIndicatorAdapter : object {
    public bool IsMouseOver { get; }
    unknown Visibility Visibility {public set; }
    public UIElementToAnnotationIndicatorAdapter(UIElement element);
    public sealed virtual void add_IsMouseOverChanged(EventHandler value);
    public sealed virtual void remove_IsMouseOverChanged(EventHandler value);
    public sealed virtual bool get_IsMouseOver();
    public sealed virtual void set_Visibility(Visibility value);
}
internal class System.Activities.Presentation.Annotations.WorkflowAnnotationAdornerService : AnnotationAdornerService {
    public virtual void Show(AnnotationAdorner adorner);
    public virtual void Hide(AnnotationAdorner adorner);
    internal void Initialize(EditingContext editingContext, ScrollViewer scrollViewer);
}
public class System.Activities.Presentation.ArgumentAccessor : object {
    public Func`2<Activity, Argument> Getter { get; public set; }
    public Action`2<Activity, Argument> Setter { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<Activity, Argument> get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Func`2<Activity, Argument> value);
    [CompilerGeneratedAttribute]
public Action`2<Activity, Argument> get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Action`2<Activity, Argument> value);
}
internal class System.Activities.Presentation.AutoWrapEventArgs : EventArgs {
    public Activity ExistingActivity { get; public set; }
    public InsertionPosition InsertionPosition { get; public set; }
    public List`1<Activity> ActivitiesToBeInserted { get; public set; }
    [CompilerGeneratedAttribute]
public Activity get_ExistingActivity();
    [CompilerGeneratedAttribute]
public void set_ExistingActivity(Activity value);
    [CompilerGeneratedAttribute]
public InsertionPosition get_InsertionPosition();
    [CompilerGeneratedAttribute]
public void set_InsertionPosition(InsertionPosition value);
    [CompilerGeneratedAttribute]
public List`1<Activity> get_ActivitiesToBeInserted();
    [CompilerGeneratedAttribute]
public void set_ActivitiesToBeInserted(List`1<Activity> value);
}
internal class System.Activities.Presentation.BookmarkUndoUnit : UndoUnit {
    internal List`1<UndoUnit> DoList { get; private set; }
    internal List`1<UndoUnit> RedoList { get; private set; }
    public BookmarkUndoUnit(EditingContext context, ModelTreeManager modelTreeManager);
    [CompilerGeneratedAttribute]
internal List`1<UndoUnit> get_DoList();
    [CompilerGeneratedAttribute]
private void set_DoList(List`1<UndoUnit> value);
    [CompilerGeneratedAttribute]
internal List`1<UndoUnit> get_RedoList();
    [CompilerGeneratedAttribute]
private void set_RedoList(List`1<UndoUnit> value);
    public virtual void Redo();
    public virtual void Undo();
}
[MarkupExtensionReturnTypeAttribute("System.Windows.ResourceDictionary")]
public class System.Activities.Presentation.CachedResourceDictionaryExtension : MarkupExtension {
    public Uri Source { get; public set; }
    private static CachedResourceDictionaryExtension();
    [CompilerGeneratedAttribute]
public Uri get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(Uri value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class System.Activities.Presentation.ClipboardData : object {
    public List`1<object> Data { get; public set; }
    public List`1<object> Metadata { get; public set; }
    public string Version { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<object> get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(List`1<object> value);
    [CompilerGeneratedAttribute]
public List`1<object> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(List`1<object> value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
public abstract class System.Activities.Presentation.ContextItem : object {
    public Type ItemType { get; }
    public abstract virtual Type get_ItemType();
    protected virtual void OnItemChanged(EditingContext context, ContextItem previousItem);
    internal void InvokeOnItemChanged(EditingContext context, ContextItem previousItem);
}
public abstract class System.Activities.Presentation.ContextItemManager : object {
    public abstract virtual bool Contains(Type itemType);
    public bool Contains();
    public abstract virtual IEnumerator`1<ContextItem> GetEnumerator();
    public abstract virtual ContextItem GetValue(Type itemType);
    public TItemType GetValue();
    protected static void NotifyItemChanged(EditingContext context, ContextItem item, ContextItem previousItem);
    public abstract virtual void SetValue(ContextItem value);
    public abstract virtual void Subscribe(Type contextItemType, SubscribeContextCallback callback);
    public void Subscribe(SubscribeContextCallback`1<TContextItemType> callback);
    public void Unsubscribe(SubscribeContextCallback`1<TContextItemType> callback);
    public abstract virtual void Unsubscribe(Type contextItemType, SubscribeContextCallback callback);
    protected static object GetTarget(Delegate callback);
    protected static Delegate RemoveCallback(Delegate existing, Delegate toRemove);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Activities.Presentation.ContextMenuUtilities : object {
    public static void OnAddAnnotationCommandCanExecute(CanExecuteRoutedEventArgs e, EditingContext editingContext);
    public static void OnAddAnnotationCommandCanExecute(CanExecuteRoutedEventArgs e, EditingContext editingContext, DataGrid dataGrid);
    public static void OnAddAnnotationCommandCanExecute(CanExecuteRoutedEventArgs e, EditingContext editingContext, ModelItem modelItem);
    public static void OnDeleteAnnotationCommandCanExecute(CanExecuteRoutedEventArgs e, EditingContext editingContext);
    public static void OnDeleteAnnotationCommandCanExecute(CanExecuteRoutedEventArgs e, EditingContext editingContext, DataGrid dataGrid);
    public static void OnDeleteAnnotationCommandCanExecute(CanExecuteRoutedEventArgs e, EditingContext editingContext, ModelItem modelItem);
    public static void OnDeleteAllAnnotationCommandCanExecute(CanExecuteRoutedEventArgs e, EditingContext editingContext);
    public static void OnDeleteCommandCanExecute(CanExecuteRoutedEventArgs e, DataGrid dataGrid);
    public static void OnAddAnnotationCommandExecuted(ExecutedRoutedEventArgs e, ModelItem modelItem);
    public static void OnEditAnnotationCommandExecuted(ExecutedRoutedEventArgs e, ModelItem modelItem);
    public static void OnDeleteAnnotationCommandExecuted(ExecutedRoutedEventArgs e, ModelItem modelItem);
    public static void OnAnnotationMenuLoaded(EditingContext editingContext, Control control, RoutedEventArgs e);
}
internal class System.Activities.Presentation.Converters.ActivityActionSearchableStringConverter`1 : SearchableStringConverter {
    public virtual IList`1<string> Convert(object value);
}
internal class System.Activities.Presentation.Converters.ArgumentSearchableStringConverter : SearchableStringConverter {
    public virtual IList`1<string> Convert(object value);
}
public class System.Activities.Presentation.Converters.ArgumentToExpressionConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class System.Activities.Presentation.Converters.ArgumentToExpressionModelItemConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Converters.EmptySearchableStringConverter : SearchableStringConverter {
    public virtual IList`1<string> Convert(object value);
}
internal class System.Activities.Presentation.Converters.EncodingSearchableStringConverter : SearchableStringConverter {
    public virtual IList`1<string> Convert(object value);
}
internal class System.Activities.Presentation.Converters.ModelItemToAnnotationEnabledConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class System.Activities.Presentation.Converters.ModelPropertyEntryToModelItemConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class System.Activities.Presentation.Converters.ModelPropertyEntryToOwnerActivityConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    internal static ModelItem Convert(ModelPropertyEntry modelPropertyEntry, bool returnParentActivity);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class System.Activities.Presentation.Converters.ModelToObjectValueConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class System.Activities.Presentation.Converters.ObjectToModelValueConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Converters.OutlineViewTextConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal abstract class System.Activities.Presentation.Converters.SearchableStringConverter : object {
    public abstract virtual IList`1<string> Convert(object value);
}
internal class System.Activities.Presentation.Converters.SearchableStringConverterAttribute : Attribute {
    public string ConverterTypeName { get; }
    public SearchableStringConverterAttribute(Type type);
    public string get_ConverterTypeName();
}
internal class System.Activities.Presentation.Converters.TypeSearchableStringConverter : SearchableStringConverter {
    public virtual IList`1<string> Convert(object value);
}
internal class System.Activities.Presentation.Converters.VBIdentifierTrimConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Converters.VisualBasicValueSearchableStringConverter : SearchableStringConverter {
    public virtual IList`1<string> Convert(object value);
}
internal class System.Activities.Presentation.Converters.XNameSearchableStringConverter : SearchableStringConverter {
    public virtual IList`1<string> Convert(object value);
}
internal class System.Activities.Presentation.Core.GenericTypeParameterConverter : object {
    public GenericTypeParameterConverter(bool displayFullName);
    private sealed virtual override object System.Windows.Data.IValueConverter.Convert(object value, Type convertToType, object containerParameter, CultureInfo culture);
    private sealed virtual override object System.Windows.Data.IValueConverter.ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public static class System.Activities.Presentation.CutCopyPasteHelper : object {
    internal static string WorkflowClipboardFormat;
    internal static string WorkflowClipboardFormat_TargetFramework;
    internal static DependencyProperty ChildContainersProperty;
    private static CutCopyPasteHelper();
    internal static void AddDisallowedTypeForCopy(Type type);
    internal static void RegisterWithParentViewElement(ICompositeView container);
    internal static WorkflowViewElement GetParentViewElement(DependencyObject obj);
    internal static IList`1<object> SortFromMetaData(IList`1<object> itemsToPaste, List`1<object> metaData);
    internal static IList`1<object> SortFromMetaDataOnly(List`1<object> metaData);
    public static void DoCut(EditingContext context);
    internal static void DoCut(List`1<ModelItem> modelItemsToCut, EditingContext context);
    public static void DoCopy(EditingContext context);
    internal static HashSet`1<ModelItem> GetSelectableParentModelItems(ModelItem modelItem);
    public static void DoPaste(EditingContext context);
    internal static void DoPaste(EditingContext context, Point pastePoint, WorkflowViewElement pastePointReference);
    internal static void PutCallbackOnClipBoard(Func`3<ModelItem, object, object> callbackMethod, Type callbackResultType, object context);
    public static bool CanCopy(EditingContext context);
    public static bool CanCut(EditingContext context);
    public static bool CanPaste(EditingContext context);
}
[AttributeUsageAttribute("4")]
internal class System.Activities.Presentation.Debug.AllowBreakpointAttribute : Attribute {
    internal static bool IsBreakpointAllowed(Type breakpointCandidateType);
}
[FlagsAttribute]
public enum System.Activities.Presentation.Debug.BreakpointTypes : Enum {
    public int value__;
    public static BreakpointTypes None;
    public static BreakpointTypes Enabled;
    public static BreakpointTypes Bounded;
    public static BreakpointTypes Conditional;
}
public class System.Activities.Presentation.Debug.DebuggerService : object {
    public SourceLocation SelectedLocation { get; }
    public SourceLocation CurrentLocation { get; public set; }
    public SourceLocation CurrentContext { get; public set; }
    public bool IsDebugging { get; public set; }
    public bool HideSourceFileName { get; public set; }
    public DebuggerService(EditingContext context);
    public sealed virtual SourceLocation get_SelectedLocation();
    public sealed virtual SourceLocation get_CurrentLocation();
    public sealed virtual void set_CurrentLocation(SourceLocation value);
    public sealed virtual void EnsureVisible(SourceLocation sourceLocation);
    public sealed virtual SourceLocation get_CurrentContext();
    public sealed virtual void set_CurrentContext(SourceLocation value);
    public sealed virtual bool get_IsDebugging();
    public sealed virtual void set_IsDebugging(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HideSourceFileName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_HideSourceFileName(bool value);
    public sealed virtual SourceLocation GetExactLocation(SourceLocation approximateLocation);
    internal static SourceLocation FindClosestSourceLocation(SourceLocation approximateLocation, IEnumerable`1<SourceLocation> availableSourceLocations);
    public sealed virtual IDictionary`2<SourceLocation, BreakpointTypes> GetBreakpointLocations();
    public sealed virtual void InsertBreakpoint(SourceLocation sourceLocation, BreakpointTypes breakpointType);
    public sealed virtual void UpdateBreakpoint(SourceLocation sourceLocation, BreakpointTypes newBreakpointType);
    public sealed virtual void DeleteBreakpoint(SourceLocation sourceLocation);
    public sealed virtual void ResetBreakpoints();
    public void UpdateSourceLocations(Dictionary`2<object, SourceLocation> newSourceLocationMapping);
    internal void InvalidateSourceLocationMapping(string fileName);
}
public interface System.Activities.Presentation.Debug.IDesignerDebugView {
    public SourceLocation CurrentContext { get; public set; }
    public SourceLocation CurrentLocation { get; public set; }
    public bool IsDebugging { get; public set; }
    public bool HideSourceFileName { get; public set; }
    public SourceLocation SelectedLocation { get; }
    public abstract virtual SourceLocation get_CurrentContext();
    public abstract virtual void set_CurrentContext(SourceLocation value);
    public abstract virtual SourceLocation get_CurrentLocation();
    public abstract virtual void set_CurrentLocation(SourceLocation value);
    public abstract virtual bool get_IsDebugging();
    public abstract virtual void set_IsDebugging(bool value);
    public abstract virtual bool get_HideSourceFileName();
    public abstract virtual void set_HideSourceFileName(bool value);
    public abstract virtual SourceLocation get_SelectedLocation();
    public abstract virtual IDictionary`2<SourceLocation, BreakpointTypes> GetBreakpointLocations();
    public abstract virtual void ResetBreakpoints();
    public abstract virtual void DeleteBreakpoint(SourceLocation sourceLocation);
    public abstract virtual SourceLocation GetExactLocation(SourceLocation approximateLocation);
    public abstract virtual void InsertBreakpoint(SourceLocation sourceLocation, BreakpointTypes breakpointType);
    public abstract virtual void UpdateBreakpoint(SourceLocation sourceLocation, BreakpointTypes breakpointType);
    public abstract virtual void EnsureVisible(SourceLocation sourceLocation);
}
internal class System.Activities.Presentation.DefaultCommandExtensionCallback : object {
    public sealed virtual void OnWorkflowCommandLoaded(CommandInfo commandInfo);
    protected bool ContainsGesture(RoutedCommand cmd, KeyGesture gesture);
}
[AttributeUsageAttribute("4")]
public class System.Activities.Presentation.DefaultTypeArgumentAttribute : Attribute {
    public Type Type { get; }
    public DefaultTypeArgumentAttribute(Type type);
    public Type get_Type();
}
internal static class System.Activities.Presentation.DeleteHelper : object {
    public static bool CanDelete(EditingContext context);
    public static void Delete(EditingContext context);
}
public class System.Activities.Presentation.DesignerConfigurationService : object {
    public bool AnnotationEnabled { get; public set; }
    public bool AutoConnectEnabled { get; public set; }
    public bool AutoSplitEnabled { get; public set; }
    public bool AutoSurroundWithSequenceEnabled { get; public set; }
    public bool BackgroundValidationEnabled { get; public set; }
    public bool LoadingFromUntrustedSourceEnabled { get; public set; }
    public bool MultipleItemsContextMenuEnabled { get; public set; }
    public bool MultipleItemsDragDropEnabled { get; public set; }
    public bool NamespaceConversionEnabled { get; public set; }
    public bool PanModeEnabled { get; public set; }
    public bool RubberBandSelectionEnabled { get; public set; }
    public FrameworkName TargetFrameworkName { get; public set; }
    internal static FrameworkName DefaultTargetFrameworkName { get; }
    internal WorkflowDesignerHostId WorkflowDesignerHostId { get; internal set; }
    internal bool IsWorkflowLoaded { get; internal set; }
    private static DesignerConfigurationService();
    public bool get_AnnotationEnabled();
    public void set_AnnotationEnabled(bool value);
    public bool get_AutoConnectEnabled();
    public void set_AutoConnectEnabled(bool value);
    public bool get_AutoSplitEnabled();
    public void set_AutoSplitEnabled(bool value);
    public bool get_AutoSurroundWithSequenceEnabled();
    public void set_AutoSurroundWithSequenceEnabled(bool value);
    public bool get_BackgroundValidationEnabled();
    public void set_BackgroundValidationEnabled(bool value);
    public bool get_LoadingFromUntrustedSourceEnabled();
    public void set_LoadingFromUntrustedSourceEnabled(bool value);
    public bool get_MultipleItemsContextMenuEnabled();
    public void set_MultipleItemsContextMenuEnabled(bool value);
    public bool get_MultipleItemsDragDropEnabled();
    public void set_MultipleItemsDragDropEnabled(bool value);
    public bool get_NamespaceConversionEnabled();
    public void set_NamespaceConversionEnabled(bool value);
    public bool get_PanModeEnabled();
    public void set_PanModeEnabled(bool value);
    public bool get_RubberBandSelectionEnabled();
    public void set_RubberBandSelectionEnabled(bool value);
    public FrameworkName get_TargetFrameworkName();
    public void set_TargetFrameworkName(FrameworkName value);
    internal static FrameworkName get_DefaultTargetFrameworkName();
    internal WorkflowDesignerHostId get_WorkflowDesignerHostId();
    internal void set_WorkflowDesignerHostId(WorkflowDesignerHostId value);
    [CompilerGeneratedAttribute]
internal bool get_IsWorkflowLoaded();
    [CompilerGeneratedAttribute]
internal void set_IsWorkflowLoaded(bool value);
    internal void ApplyDefaultPreference();
    internal void SetDefaultOfLoadingFromUntrustedSourceEnabled();
    internal void Validate();
}
internal static class System.Activities.Presentation.DesignerConfigurationServiceUtilities : object {
    public static bool IsAnnotationEnabled(EditingContext editingContext);
    public static bool IsBackgroundValidationEnabled(EditingContext editingContext);
}
internal class System.Activities.Presentation.DesignerMetadata : object {
    public sealed virtual void Register();
}
internal class System.Activities.Presentation.DesignerPerfEventProvider : object {
    public void WorkflowDesignerApplicationIdleAfterLoad();
    public void WorkflowDesignerDeserializeEnd();
    public void WorkflowDesignerDeserializeStart();
    public void WorkflowDesignerDrop();
    public void WorkflowDesignerIdleAfterDrop();
    public void WorkflowDesignerLoadComplete();
    public void WorkflowDesignerLoadStart();
    public void WorkflowDesignerSerializeEnd();
    public void WorkflowDesignerSerializeStart();
    public void WorkflowDesignerExpressionEditorCompilationEnd();
    public void WorkflowDesignerExpressionEditorCompilationStart();
    public void WorkflowDesignerExpressionEditorLoaded();
    public void WorkflowDesignerExpressionEditorLoadStart();
    public void WorkflowDesignerValidationEnd();
    public void WorkflowDesignerValidationStart();
    public void FlowchartDesignerLoadEnd();
    public void FlowchartDesignerLoadStart();
    public void FreeFormPanelMeasureEnd();
    public void FreeFormPanelMeasureStart();
    public void WorkflowDesignerCopyStart();
    public void WorkflowDesignerCopyEnd();
    public void WorkflowDesignerPasteStart();
    public void WorkflowDesignerPasteEnd();
    public void DesignerTreeViewLoadChildrenStart();
    public void DesignerTreeViewLoadChildrenEnd();
    public void DesignerTreeViewUpdateStart();
    public void DesignerTreeViewUpdateEnd();
    public void DesignerTreeViewExpandStart();
    public void DesignerTreeViewExpandEnd();
    public void TypeBrowserApplicationIdleAfterShowDialog();
    public void TypeBrowserOkPressed();
    public void SelectionChangedStart();
    public void PropertyInspectorUpdatePropertyListStart();
    public void PropertyInspectorUpdatePropertyListEnd();
}
internal enum System.Activities.Presentation.DesignerPerfEvents : Enum {
    public int value__;
    public static DesignerPerfEvents WorkflowDesignerLoadStart;
    public static DesignerPerfEvents WorkflowDesignerLoadComplete;
    public static DesignerPerfEvents WorkflowDesignerDeserializeStart;
    public static DesignerPerfEvents WorkflowDesignerDeserializeEnd;
    public static DesignerPerfEvents WorkflowDesignerApplicationIdleAfterLoad;
    public static DesignerPerfEvents WorkflowDesignerSerializeStart;
    public static DesignerPerfEvents WorkflowDesignerSerializeEnd;
    public static DesignerPerfEvents WorkflowDesignerDrop;
    public static DesignerPerfEvents WorkflowDesignerIdleAfterDrop;
    public static DesignerPerfEvents WorkflowDesignerExpressionEditorLoadStart;
    public static DesignerPerfEvents WorkflowDesignerExpressionEditorLoaded;
    public static DesignerPerfEvents WorkflowDesignerExpressionEditorCompilationStart;
    public static DesignerPerfEvents WorkflowDesignerExpressionEditorCompilationEnd;
    public static DesignerPerfEvents WorkflowDesignerValidationStart;
    public static DesignerPerfEvents WorkflowDesignerValidationEnd;
    public static DesignerPerfEvents FlowchartDesignerLoadEnd;
    public static DesignerPerfEvents FlowchartDesignerLoadStart;
    public static DesignerPerfEvents FreeFormPanelMeasureStart;
    public static DesignerPerfEvents FreeFormPanelMeasureEnd;
    public static DesignerPerfEvents WorkflowDesignerCopyStart;
    public static DesignerPerfEvents WorkflowDesignerCopyEnd;
    public static DesignerPerfEvents WorkflowDesignerPasteStart;
    public static DesignerPerfEvents WorkflowDesignerPasteEnd;
    public static DesignerPerfEvents DesignerTreeViewLoadChildrenStart;
    public static DesignerPerfEvents DesignerTreeViewLoadChildrenEnd;
    public static DesignerPerfEvents DesignerTreeViewUpdateStart;
    public static DesignerPerfEvents DesignerTreeViewUpdateEnd;
    public static DesignerPerfEvents DesignerTreeViewExpandStart;
    public static DesignerPerfEvents DesignerTreeViewExpandEnd;
    public static DesignerPerfEvents TypeBrowserApplicationIdleAfterShowDialog;
    public static DesignerPerfEvents TypeBrowserOkPressed;
    public static DesignerPerfEvents SelectionChangedStart;
    public static DesignerPerfEvents PropertyInspectorUpdatePropertyListStart;
    public static DesignerPerfEvents PropertyInspectorUpdatePropertyListEnd;
}
internal abstract class System.Activities.Presentation.DesignObjectWrapper : object {
    protected static string HasErrorsProperty;
    protected static string ContentProperty;
    protected static string ValidationErrorSuffix;
    protected static string AutomationIdProperty;
    protected internal static string TimestampProperty;
    public ModelItem ReflectedObject { get; private set; }
    public EditingContext Context { get; private set; }
    protected ModelTreeManager ModelTreeManager { get; private set; }
    public ModelItem Content { get; private set; }
    protected IDictionary`2<string, PropertyValueEditor> CustomValueEditors { get; }
    public bool HasErrors { get; }
    protected string AutomationId { get; }
    protected bool IsUndoRedoInProgress { get; }
    protected DesignObjectWrapper(ModelItem reflectedObject);
    private static DesignObjectWrapper();
    internal void Initialize(ModelItem reflectedObject);
    [CompilerGeneratedAttribute]
public ModelItem get_ReflectedObject();
    [CompilerGeneratedAttribute]
private void set_ReflectedObject(ModelItem value);
    [CompilerGeneratedAttribute]
public EditingContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(EditingContext value);
    [CompilerGeneratedAttribute]
protected ModelTreeManager get_ModelTreeManager();
    [CompilerGeneratedAttribute]
private void set_ModelTreeManager(ModelTreeManager value);
    public ModelItem get_Content();
    private void set_Content(ModelItem value);
    protected IDictionary`2<string, PropertyValueEditor> get_CustomValueEditors();
    public bool get_HasErrors();
    protected abstract virtual string get_AutomationId();
    public sealed virtual AttributeCollection GetAttributes();
    public sealed virtual string GetClassName();
    public sealed virtual string GetComponentName();
    public sealed virtual TypeConverter GetConverter();
    public sealed virtual EventDescriptor GetDefaultEvent();
    public sealed virtual PropertyDescriptor GetDefaultProperty();
    public string GetValidationErrors(IList`1<string> invalidProperties);
    public string GetValidationErrors();
    public void ClearValidationErrors();
    public void ClearValidationErrors(IEnumerable`1<string> properties);
    public sealed virtual object GetEditor(Type editorBaseType);
    public sealed virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
    public sealed virtual EventDescriptorCollection GetEvents();
    public sealed virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    public sealed virtual PropertyDescriptorCollection GetProperties();
    public sealed virtual object GetPropertyOwner(PropertyDescriptor pd);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public bool IsPropertyValid(string propertyName);
    public virtual void Dispose();
    internal PropertyValueEditor GetDynamicPropertyValueEditor(string propertyName);
    internal Type GetDynamicPropertyValueEditorType(string propertyName);
    protected virtual Type OnGetDynamicPropertyValueEditorType(string propertyName);
    internal void NotifyPropertyChanged(string propertyName);
    protected void RaisePropertyChangedEvent(string propertyName);
    protected virtual void OnPropertyChanged(string propertyName);
    protected bool get_IsUndoRedoInProgress();
    protected DateTime GetTimestamp();
    protected virtual void OnReflectedObjectPropertyChanged(string propertyName);
}
internal class System.Activities.Presentation.DesignObjectWrapperDynamicPropertyEditor : DialogPropertyValueEditor {
    public virtual void ShowDialog(PropertyValue propertyValue, IInputElement commandSource);
}
internal abstract class System.Activities.Presentation.DesignTimeValidationFeature : Feature {
    protected Type ApplyTo { get; }
    protected IList`1<Constraint> DesignTimeConstraints { get; }
    public virtual void Initialize(EditingContext context, Type modelType);
    protected abstract virtual Type get_ApplyTo();
    protected abstract virtual IList`1<Constraint> get_DesignTimeConstraints();
}
internal class System.Activities.Presentation.DialogWindow : Window {
    public static DependencyProperty ContextProperty;
    public EditingContext Context { get; public set; }
    protected string HelpKeyword { get; protected set; }
    private static DialogWindow();
    public EditingContext get_Context();
    public void set_Context(EditingContext value);
    protected string get_HelpKeyword();
    protected void set_HelpKeyword(string value);
    protected virtual void OnSourceInitialized(EventArgs e);
}
internal class System.Activities.Presentation.DictionaryItemsCollection`2 : Collection`1<ModelItemKeyValuePair`2<TKey, TValue>> {
    public bool ShouldUpdateDictionary { get; public set; }
    public ModelItemDictionaryImpl ModelDictionary { get; public set; }
    public DictionaryItemsCollection`2(object dictionary);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ShouldUpdateDictionary();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ShouldUpdateDictionary(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ModelItemDictionaryImpl get_ModelDictionary();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ModelDictionary(ModelItemDictionaryImpl value);
    internal void PostUpdateKey();
    internal void PreUpdateKey(TKey oldKey, TKey newKey);
    internal void UpdateValue(TKey key, TValue value);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, ModelItemKeyValuePair`2<TKey, TValue> item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, ModelItemKeyValuePair`2<TKey, TValue> item);
}
internal class System.Activities.Presentation.DockedAnnotationDecorator : Decorator {
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
}
internal abstract class System.Activities.Presentation.Documents.ViewManager : object {
    public Visual View { get; }
    public abstract virtual Visual get_View();
    public abstract virtual void Initialize(EditingContext context);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[AttributeUsageAttribute("4")]
internal class System.Activities.Presentation.Documents.ViewManagerAttribute : Attribute {
    public Type ViewManagerType { get; }
    public ViewManagerAttribute(Type viewManagerType);
    public Type get_ViewManagerType();
}
public static class System.Activities.Presentation.DragDropHelper : object {
    public static DependencyProperty DragSourceProperty;
    public static string ModelItemDataFormat;
    public static string CompositeViewFormat;
    public static string CompletedEffectsFormat;
    public static string WorkflowItemTypeNameFormat;
    public static string DragAnchorPointFormat;
    internal static string ModelItemsDataFormat;
    internal static string MovedViewElementsFormat;
    private static DragDropHelper();
    public static void SetCompositeView(WorkflowViewElement workflowViewElement, UIElement dragSource);
    public static UIElement GetCompositeView(WorkflowViewElement workflowViewElement);
    internal static DataObject DoDragMoveImpl(IEnumerable`1<WorkflowViewElement> draggedViewElements, Point referencePoint);
    [ObsoleteAttribute("This method does not support dragging multiple items. Use "public static IEnumerable<WorkflowViewElement> DoDragMove(IEnumerable<WorkflowViewElement> draggedViewElements, Point referencePoint)" instead.")]
public static DragDropEffects DoDragMove(WorkflowViewElement draggedViewElement, Point referencePoint);
    public static bool AllowDrop(IDataObject draggedDataObject, EditingContext context, Type[] allowedItemTypes);
    internal static bool AllowDrop(Type draggedType, Type allowedItemType);
    internal static List`1<Type> GetDraggedTypes(IDataObject draggedDataObject);
    internal static bool IsDraggingFromToolbox(DragEventArgs e);
    public static IEnumerable`1<object> GetDroppedObjects(DependencyObject dropTarget, DragEventArgs e, EditingContext context);
    internal static void ValidateItemsAreOnView(IList`1<ModelItem> items, ICollection`1<ModelItem> modelItemsOnView);
    [ObsoleteAttribute("This method does not support dropping multiple items. Use "public static IEnumerable<object> GetDroppedObjects(DependencyObject dropTarget, DragEventArgs e, EditingContext context)" instead.")]
public static object GetDroppedObject(DependencyObject dropTarget, DragEventArgs e, EditingContext context);
    internal static object GetDroppedObjectInstance(DependencyObject dropTarget, EditingContext context, Type type, IDataObject dataObject);
    [ObsoleteAttribute("This method does not support dragging multiple items. Use "public static IEnumerable<ModelItem> GetDraggedModelItems(DragEventArgs e)" instead.")]
public static ModelItem GetDraggedModelItem(DragEventArgs e);
    internal static ModelItem GetDraggedModelItemInternal(DragEventArgs e);
    public static IEnumerable`1<ModelItem> GetDraggedModelItems(DragEventArgs e);
    internal static bool AreListsIdenticalExceptOrder(IList`1<T> sourceList, IList`1<T> destinationList);
    internal static List`1<object> SortSelectedObjects(IEnumerable`1<object> selectedObjects);
    [ObsoleteAttribute("This method does not support dragging multiple items. Use "public static UIElement GetCompositeView(WorkflowViewElement workflowViewElement)" instead.")]
public static ICompositeView GetCompositeView(DragEventArgs e);
    public static Point GetDragDropAnchorPoint(DragEventArgs e);
    [ObsoleteAttribute("This method does not support dragging multiple items. Consider using "public static void SetDragDropMovedViewElements(DragEventArgs e, IEnumerable<WorkflowViewElement> movedViewElements)" instead.")]
public static void SetDragDropCompletedEffects(DragEventArgs e, DragDropEffects completedEffects);
    [ObsoleteAttribute("This method does not support dragging multiple items. Consider using "public static IEnumerable<WorkflowViewElement> GetDragDropMovedViewElements(DataObject data)" instead.")]
public static DragDropEffects GetDragDropCompletedEffects(DataObject data);
    internal static void SetDragDropMovedViewElements(DragEventArgs e, IEnumerable`1<WorkflowViewElement> movedViewElements);
    internal static IEnumerable`1<WorkflowViewElement> GetDragDropMovedViewElements(DataObject data);
    internal static int GetDraggedObjectCount(DragEventArgs e);
    internal static Dictionary`2<WorkflowViewElement, Point> GetViewElementRelativeLocations(IEnumerable`1<WorkflowViewElement> viewElements);
    internal static Dictionary`2<WorkflowViewElement, Point> GetDraggedViewElementRelativeLocations(DragEventArgs e);
    internal static IEnumerable`1<ModelItem> GetModelItemsToDrag(IEnumerable`1<ModelItem> modelItems);
}
internal class System.Activities.Presentation.DropAnimation : DoubleAnimationUsingKeyFrames {
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal static class System.Activities.Presentation.DynamicActivityPropertyUtilities : object {
    public static DynamicActivityProperty Find(ModelItemCollection properties, string propertyName);
}
public class System.Activities.Presentation.EditingContext : object {
    public ContextItemManager Items { get; }
    public ServiceManager Services { get; }
    public void add_Disposing(EventHandler value);
    public void remove_Disposing(EventHandler value);
    public ContextItemManager get_Items();
    public ServiceManager get_Services();
    protected virtual ContextItemManager CreateContextItemManager();
    protected virtual ServiceManager CreateServiceManager();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal static class System.Activities.Presentation.EditingContextUtilities : object {
    public static bool IsReadOnly(EditingContext editingContext);
    public static ModelItem GetSingleSelectedModelItem(EditingContext editingContext);
}
internal class System.Activities.Presentation.EditingScopeUndoUnit : UndoUnit {
    public EditingScopeUndoUnit(EditingContext context, ModelTreeManager modelTreeManager, EditingScope editingScope);
    public virtual void Redo();
    public virtual void Undo();
}
internal static class System.Activities.Presentation.EnumValidator : object {
    public static bool IsValid(OrderTokenPrecedence value);
    public static bool IsValid(OrderTokenConflictResolution value);
}
[DesignerAttribute("System.Activities.Presentation.ErrorActivity/ErrorActivityView")]
internal class System.Activities.Presentation.ErrorActivity : Activity {
    internal static string ErrorNodesProperty;
    [BrowsableAttribute("False")]
[XamlDeferLoadAttribute("System.Activities.Presentation.ErrorActivity/NodeListLoader", "System.Object")]
public XamlNodeList ErrorNodes { get; public set; }
    private static ErrorActivity();
    [CompilerGeneratedAttribute]
public XamlNodeList get_ErrorNodes();
    [CompilerGeneratedAttribute]
public void set_ErrorNodes(XamlNodeList value);
    internal static bool GetHasErrorActivities(object target);
    internal static void SetHasErrorActivities(object target, bool value);
    internal static void WriteNodeList(XamlWriter writer, XamlNodeList nodeList);
}
[DesignerAttribute("System.Activities.Presentation.ErrorActivity/ErrorActivityView")]
internal class System.Activities.Presentation.ErrorActivity`1 : Activity`1<T> {
    [BrowsableAttribute("False")]
[XamlDeferLoadAttribute("System.Activities.Presentation.ErrorActivity/NodeListLoader", "System.Object")]
public XamlNodeList ErrorNodes { get; public set; }
    [CompilerGeneratedAttribute]
public XamlNodeList get_ErrorNodes();
    [CompilerGeneratedAttribute]
public void set_ErrorNodes(XamlNodeList value);
}
internal static class System.Activities.Presentation.ErrorReporting : object {
    internal static DesignerView ActiveDesignerView { get; internal set; }
    internal static DesignerView get_ActiveDesignerView();
    internal static void set_ActiveDesignerView(DesignerView value);
    public static void ShowErrorMessage(string message);
    public static void ShowAlertMessage(string message);
    public static void ShowErrorMessage(string message, string details);
    public static void ShowErrorMessage(string message, bool includeStackTrace);
    public static void ShowAlertMessage(string message, bool includeStackTrace);
    public static void ShowErrorMessage(Exception err);
}
internal class System.Activities.Presentation.ExpandButtonVisibilityConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
    public static Visibility GetExpandCollapseButtonVisibility(WorkflowViewElement viewElement);
}
internal class System.Activities.Presentation.ExpandCollapseIsCheckedConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
[ExtensionAttribute]
internal static class System.Activities.Presentation.ExpressionHelper : object {
    internal static string GetExpressionString(Activity expression);
    internal static string GetExpressionString(Activity expression, ModelItem owner);
    internal static string GetExpressionString(Activity expression, ParserContext context);
    internal static ActivityWithResult TryCreateLiteral(Type type, string expressionText, ParserContext context);
    internal static bool CanTypeBeSerializedAsLiteral(Type type);
    [ExtensionAttribute]
internal static bool IsExpression(Activity activity);
    internal static bool IsGenericLocationExpressionType(ActivityWithResult expression);
    internal static bool TryMorphExpression(ActivityWithResult originalExpression, bool isLocation, Type targetType, EditingContext context, ActivityWithResult& morphedExpression);
    internal static bool TryInferReturnType(ActivityWithResult expression, EditingContext context, Type& returnType);
    internal static string GetRootEditorSetting(ModelTreeManager modelTreeManager, FrameworkName targetFramework);
}
public class System.Activities.Presentation.Expressions.CreateExpressionFromStringCallback : MulticastDelegate {
    public CreateExpressionFromStringCallback(object object, IntPtr method);
    public virtual ActivityWithResult Invoke(string expressionText, bool useLocationExpression, Type expressionType);
    public virtual IAsyncResult BeginInvoke(string expressionText, bool useLocationExpression, Type expressionType, AsyncCallback callback, object object);
    public virtual ActivityWithResult EndInvoke(IAsyncResult result);
}
public abstract class System.Activities.Presentation.Expressions.ExpressionActivityEditor : UserControl {
    public static DependencyProperty HintTextProperty;
    public static DependencyProperty ExpressionProperty;
    public static DependencyProperty ExpressionTypeProperty;
    public static DependencyProperty OwnerActivityProperty;
    public static DependencyProperty UseLocationExpressionProperty;
    public static DependencyProperty PathToArgumentProperty;
    public static DependencyProperty IsSupportedExpressionProperty;
    public static DependencyProperty VerticalScrollBarVisibilityProperty;
    public static DependencyProperty HorizontalScrollBarVisibilityProperty;
    public static DependencyProperty ExplicitCommitProperty;
    public static DependencyProperty AcceptsReturnProperty;
    public static DependencyProperty AcceptsTabProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty IsIndependentExpressionProperty;
    public string HintText { get; public set; }
    public ModelItem Expression { get; public set; }
    public Type ExpressionType { get; public set; }
    public bool UseLocationExpression { get; public set; }
    public bool IsIndependentExpression { get; public set; }
    public ModelItem OwnerActivity { get; public set; }
    public string PathToArgument { get; public set; }
    public bool IsSupportedExpression { get; public set; }
    public bool AcceptsReturn { get; public set; }
    public bool AcceptsTab { get; public set; }
    public bool IsReadOnly { get; public set; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public bool ExplicitCommit { get; public set; }
    internal string ItemStatus { get; }
    protected EditingContext Context { get; }
    private static ExpressionActivityEditor();
    public string get_HintText();
    public void set_HintText(string value);
    public ModelItem get_Expression();
    public void set_Expression(ModelItem value);
    public Type get_ExpressionType();
    public void set_ExpressionType(Type value);
    public bool get_UseLocationExpression();
    public void set_UseLocationExpression(bool value);
    public bool get_IsIndependentExpression();
    public void set_IsIndependentExpression(bool value);
    public ModelItem get_OwnerActivity();
    public void set_OwnerActivity(ModelItem value);
    public string get_PathToArgument();
    public void set_PathToArgument(string value);
    public bool get_IsSupportedExpression();
    public void set_IsSupportedExpression(bool value);
    public bool get_AcceptsReturn();
    public void set_AcceptsReturn(bool value);
    public bool get_AcceptsTab();
    public void set_AcceptsTab(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public bool get_ExplicitCommit();
    public void set_ExplicitCommit(bool value);
    public static void SetExpressionActivityEditor(object target, string name);
    public static string GetExpressionActivityEditor(object target);
    internal static void ValidateExpressionActivityEditorName(string name);
    internal string get_ItemStatus();
    protected EditingContext get_Context();
    public virtual void BeginEdit();
    public virtual bool CanCommit();
    public abstract virtual bool Commit(bool isExplicitCommit);
}
public abstract class System.Activities.Presentation.Expressions.ExpressionMorphHelper : object {
    public virtual bool TryInferReturnType(ActivityWithResult expression, EditingContext context, Type& returnType);
    public abstract virtual bool TryMorphExpression(ActivityWithResult expression, bool isLocationExpression, Type newType, EditingContext context, ActivityWithResult& newExpression);
}
[AttributeUsageAttribute("4")]
public class System.Activities.Presentation.Expressions.ExpressionMorphHelperAttribute : Attribute {
    public Type ExpressionMorphHelperType { get; }
    public ExpressionMorphHelperAttribute(Type expressionMorphHelperType);
    public Type get_ExpressionMorphHelperType();
}
public abstract class System.Activities.Presentation.Expressions.TextualExpressionEditor : ExpressionActivityEditor {
    public static DependencyProperty MaxLinesProperty;
    public static DependencyProperty MinLinesProperty;
    public static DependencyProperty DefaultValueProperty;
    public int MaxLines { get; public set; }
    public int MinLines { get; public set; }
    public string DefaultValue { get; public set; }
    public IExpressionEditorService ExpressionEditorService { get; }
    private static TextualExpressionEditor();
    public int get_MaxLines();
    public void set_MaxLines(int value);
    public int get_MinLines();
    public void set_MinLines(int value);
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public virtual IExpressionEditorService get_ExpressionEditorService();
    public virtual void OnCompleteWordCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnCompleteWordCommandExecute(ExecutedRoutedEventArgs e);
    public virtual void OnGlobalIntellisenseCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnGlobalIntellisenseCommandExecute(ExecutedRoutedEventArgs e);
    public virtual void OnParameterInfoCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnParameterInfoCommandExecute(ExecutedRoutedEventArgs e);
    public virtual void OnQuickInfoCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnQuickInfoCommandExecute(ExecutedRoutedEventArgs e);
    public virtual void OnIncreaseFilterLevelCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnDecreaseFilterLevelCommandExecute(ExecutedRoutedEventArgs e);
    public virtual void OnDecreaseFilterLevelCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnIncreaseFilterLevelCommandExecute(ExecutedRoutedEventArgs e);
}
internal class System.Activities.Presentation.ExpressionSelection : ContextItem {
    public ModelItem ModelItem { get; }
    public Type ItemType { get; }
    public ExpressionSelection(ModelItem modelItem);
    public ModelItem get_ModelItem();
    public virtual Type get_ItemType();
}
internal abstract class System.Activities.Presentation.Feature : object {
    public abstract virtual void Initialize(EditingContext context, Type modelType);
}
[AttributeUsageAttribute("4")]
internal class System.Activities.Presentation.FeatureAttribute : Attribute {
    public Type Type { get; }
    public object TypeId { get; }
    public FeatureAttribute(Type type);
    public Type get_Type();
    public virtual object get_TypeId();
}
internal class System.Activities.Presentation.FeatureManager : object {
    public FeatureManager(EditingContext context);
    public void InitializeFeature(Type modelType);
}
internal class System.Activities.Presentation.FreeFormEditing.AutoConnectAdorner : Adorner {
    internal AutoConnectDirections AutoConnectDirection { get; }
    public AutoConnectAdorner(UIElement adornedElement, FreeFormPanel panel, AutoConnectDirections directions);
    internal AutoConnectDirections get_AutoConnectDirection();
    internal void OnDrag(DragEventArgs e);
    internal void UpdateHighlightedDirection(Point position);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnDragEnter(DragEventArgs e);
    protected virtual void OnDragOver(DragEventArgs e);
    protected virtual void OnDragLeave(DragEventArgs e);
    protected virtual void OnDrop(DragEventArgs e);
    protected virtual void OnRender(DrawingContext drawingContext);
}
[FlagsAttribute]
internal enum System.Activities.Presentation.FreeFormEditing.AutoConnectDirections : Enum {
    public int value__;
    public static AutoConnectDirections None;
    public static AutoConnectDirections Left;
    public static AutoConnectDirections Right;
    public static AutoConnectDirections Top;
    public static AutoConnectDirections Bottom;
}
internal class System.Activities.Presentation.FreeFormEditing.AutoConnectHelper : object {
    internal UIElement CurrentTarget { get; internal set; }
    public AutoConnectHelper(FreeFormPanel panel);
    internal UIElement get_CurrentTarget();
    internal void set_CurrentTarget(UIElement value);
    internal static Rect GetAutoConnectHitRect(DependencyObject target);
    internal static List`1<Rect> CreateHitTestRects(Point targetLocation, Size targetSize);
    internal static AutoConnectDirections GetAutoConnectDirection(int index);
    internal static Point CalculateDropLocation(Size droppedSize, DependencyObject autoConnectTarget, AutoConnectDirections direction, HashSet`1<Point> shapeLocations);
    internal static EdgeLocation AutoConnectDirection2EdgeLocation(AutoConnectDirections direction);
    internal static DependencyObject GetShapeContainingPoint(Point point, List`1<DependencyObject> shapes);
    internal DependencyObject FindTarget(Point point, DependencyObject dragged, AutoConnectDirections& directions);
    internal void OnPreviewDragOverPanel(DragEventArgs e);
    internal void RemoveDropTargets();
}
internal class System.Activities.Presentation.FreeFormEditing.AutoSplitAdorner : Adorner {
    public AutoSplitAdorner(UIElement adornedElement);
    protected virtual void OnRender(DrawingContext drawingContext);
}
internal enum System.Activities.Presentation.FreeFormEditing.AutoSplitAlignment : Enum {
    public int value__;
    public static AutoSplitAlignment None;
    public static AutoSplitAlignment Vertical;
    public static AutoSplitAlignment Horizontal;
}
internal static class System.Activities.Presentation.FreeFormEditing.AutoSplitHelper : object {
    public static void CalculateEntryExitEdges(Point mousePosition, Connector connector, EdgeLocation& entryEdge, EdgeLocation& exitEdge);
    public static Point CalculateDropLocation(Point mousePosition, Point originalDropLocation, Connector connector, Size droppedSize, HashSet`1<Point> shapeLocations);
    internal static Point CalculateDropLocation(Point mousePosition, Point originalDropLocation, Size droppedSize, Point srcLocation, Point destLocation, Size srcSize, Size destSize, HashSet`1<Point> shapeLocations);
    internal static AutoSplitAlignment GetAlignment(Point mousePosition, Point targetLocation, Size targetSize);
    internal static Point CalculateDropLocationToAlignVertically(Point originalDropLocation, Size droppedSize, Point targetLocation, Size targetSize);
    internal static Point CalculateDropLocationToAlignHorizontally(Point originalDropLocation, Size droppedSize, Point targetLocation, Size targetSize);
    internal static EdgeLocation CalculateEdgeLocation(Point mousePosition, Point shapeCenter);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectionPoint : UIElement {
    internal static double DrawingSmallSide;
    internal static double DrawingLargeSide;
    internal static double HitTestSmallSide;
    internal static double HitTestLargeSide;
    public static DependencyProperty LocationProperty;
    public List`1<Connector> AttachedConnectors { get; }
    public Point Location { get; public set; }
    public Vector DrawingOffset { get; }
    public Vector HitTestOffset { get; }
    public Size DrawingSize { get; }
    public Size HitTestSize { get; }
    public UIElement ParentDesigner { get; public set; }
    public ConnectionPointKind PointType { get; public set; }
    public List`1<Point> Edge { get; }
    public EdgeLocation EdgeLocation { get; public set; }
    private static ConnectionPoint();
    public List`1<Connector> get_AttachedConnectors();
    public Point get_Location();
    public void set_Location(Point value);
    public Vector get_DrawingOffset();
    public Vector get_HitTestOffset();
    public Size get_DrawingSize();
    public Size get_HitTestSize();
    public UIElement get_ParentDesigner();
    public void set_ParentDesigner(UIElement value);
    public ConnectionPointKind get_PointType();
    public void set_PointType(ConnectionPointKind value);
    public List`1<Point> get_Edge();
    [CompilerGeneratedAttribute]
public EdgeLocation get_EdgeLocation();
    [CompilerGeneratedAttribute]
public void set_EdgeLocation(EdgeLocation value);
    public static ConnectionPoint GetClosestConnectionPoint(List`1<ConnectionPoint> connectionPoints, Point refPoint, Double& minDist);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectionPointConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal enum System.Activities.Presentation.FreeFormEditing.ConnectionPointKind : Enum {
    public int value__;
    public static ConnectionPointKind Default;
    public static ConnectionPointKind Incoming;
    public static ConnectionPointKind Outgoing;
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectionPointsAdorner : Adorner {
    protected List`1<ConnectionPoint> connectionPoints;
    internal List`1<ConnectionPoint> ConnectionPoints { get; }
    public ConnectionPointsAdorner(UIElement adornedElement, List`1<ConnectionPoint> connectionPointsToShow, bool isParentShapeSelected);
    internal List`1<ConnectionPoint> get_ConnectionPoints();
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected void DrawConnectionPoint(ConnectionPoint connPoint, Point actualLocation, DrawingContext drawingContext);
}
internal class System.Activities.Presentation.FreeFormEditing.Connector : UserControl {
    public static double ArrowShapeWidth;
    internal static int MinConnectorSegmentLengthForLabel;
    public static DependencyProperty PointsProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty LabelTextProperty;
    public static DependencyProperty HighlightOnHoverProperty;
    public static DependencyProperty IsHighlightedForAutoSplitProperty;
    public static DependencyProperty IdentityProperty;
    public PointCollection Points { get; public set; }
    public bool IsSelected { get; public set; }
    public string LabelText { get; public set; }
    public bool HighlightOnHover { get; public set; }
    public bool IsHighlightedForAutoSplit { get; public set; }
    public Guid Identity { get; public set; }
    public UIElement SourceShape { get; }
    public UIElement DestinationShape { get; }
    public IAutoSplitContainer AutoSplitContainer { get; public set; }
    public FrameworkElement StartDot { get; }
    private static Connector();
    public PointCollection get_Points();
    public void set_Points(PointCollection value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public string get_LabelText();
    public void set_LabelText(string value);
    public bool get_HighlightOnHover();
    public void set_HighlightOnHover(bool value);
    public bool get_IsHighlightedForAutoSplit();
    public void set_IsHighlightedForAutoSplit(bool value);
    public Guid get_Identity();
    public void set_Identity(Guid value);
    public UIElement get_SourceShape();
    public UIElement get_DestinationShape();
    [CompilerGeneratedAttribute]
public IAutoSplitContainer get_AutoSplitContainer();
    [CompilerGeneratedAttribute]
public void set_AutoSplitContainer(IAutoSplitContainer value);
    public virtual FrameworkElement get_StartDot();
    public virtual void SetLabelToolTip(object toolTip);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnDragEnter(DragEventArgs e);
    protected virtual void OnDragLeave(DragEventArgs e);
    protected virtual void OnDrop(DragEventArgs e);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorCreationAdorner : Adorner {
    public ConnectorCreationAdorner(UIElement adornedElement, List`1<Point> linkPoints);
    protected virtual void OnRender(DrawingContext drawingContext);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorEditor : object {
    public bool BeingEdited { get; }
    public bool IsConnectorStartBeingMoved { get; }
    public bool IsConnectorEndBeingMoved { get; }
    public Connector Connector { get; public set; }
    public List`1<Point> ConnectorEditorLocation { get; }
    public ConnectorEditor(FreeFormPanel panel, Connector connector);
    public bool get_BeingEdited();
    public bool get_IsConnectorStartBeingMoved();
    public bool get_IsConnectorEndBeingMoved();
    public Connector get_Connector();
    public void set_Connector(Connector value);
    public List`1<Point> get_ConnectorEditorLocation();
    public bool EditPointsHitTest(Point pt);
    public bool Persist(Point finalSnappedPoint);
    public void Remove();
    public void Update(Point newPoint);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorIdentityConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorLabelMarginConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorLabelVisibilityConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorMovedEventArgs : EventArgs {
    public List`1<Point> NewConnectorLocation { get; }
    public ConnectorMovedEventArgs(List`1<Point> newConnectorLocation);
    public List`1<Point> get_NewConnectorLocation();
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorMovedEventHandler : MulticastDelegate {
    public ConnectorMovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConnectorMovedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConnectorMovedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorPointsToArrowMarginConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorPointsToArrowTransformConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorPointsToSegmentsConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal static class System.Activities.Presentation.FreeFormEditing.ConnectorRouter : object {
    internal static double EndPointTolerance;
    internal static Point[] Route(FreeFormPanel panel, Point srPoint, ConnectionPoint destConnPoint);
    internal static Point[] Route(FreeFormPanel panel, ConnectionPoint srcConnPoint, Point destPoint);
    internal static Point[] Route(FreeFormPanel panel, ConnectionPoint srcConnectionPoint, MouseEventArgs e);
    internal static Point[] Route(FreeFormPanel panel, ConnectionPoint srcConnPoint, ConnectionPoint destConnPoint);
    internal static Point GetDirection(Point from, Point to);
    internal static Point[] Route(FreeFormPanel panel, Point srcPoint, Point destPoint, List`1<Point> srcEdge, List`1<Point> destEdge, UIElement srcElement, UIElement destElement);
    internal static Point[] Route(Point srcPoint, Point destPoint, List`1<Point> srcEdge, List`1<Point> destEdge, List`1<Rect> excludedRects, List`1<Point> excludedLines, List`1<Rect> srcDestRects);
    internal static Point[] RemoveRedundantPoints(List`1<Point> points);
    internal static bool AreSegmentsValid(Point[] segments);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorStartDotConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorWithoutStartDot : Connector {
    internal ConnectorWithoutStartDot root;
    internal Grid rootGrid;
    internal Path BottomLine;
    internal Path TopLine;
    internal Rectangle arrowShape;
    internal Border LayoutRoot;
    internal TextBlock labelTextBlock;
    public virtual void SetLabelToolTip(object toolTip);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.FreeFormEditing.ConnectorWithStartDot : Connector {
    internal ConnectorWithStartDot root;
    internal Grid rootGrid;
    internal Path BottomLine;
    internal Path TopLine;
    internal Grid startDotGrid;
    internal Path startDotForHitTest;
    internal Path startDot;
    internal Rectangle arrowShape;
    internal Border LayoutRoot;
    internal TextBlock labelTextBlock;
    public FrameworkElement StartDot { get; }
    public virtual FrameworkElement get_StartDot();
    public virtual void SetLabelToolTip(object toolTip);
    protected virtual void OnDragEnter(DragEventArgs e);
    protected virtual void OnMouseEnter(MouseEventArgs e);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal static class System.Activities.Presentation.FreeFormEditing.DesignerGeometryHelper : object {
    public static double EPS;
    public static double ManhattanDistanceBetweenPoints(Point begin, Point end);
    public static double DistanceBetweenPoints(Point point1, Point point2);
    public static double DistanceOfLineSegments(Point[] segments);
    public static Point MidPointOfLineSegment(Point point1, Point point2);
    public static double SlopeOfLineSegment(Point start, Point end);
    public static double LongestSegmentLength(PointCollection points, Int32& longestSegmentIndex);
}
[ExtensionAttribute]
internal static class System.Activities.Presentation.FreeFormEditing.DoubleExtensions : object {
    [ExtensionAttribute]
public static bool IsEqualTo(double a, double b);
    [ExtensionAttribute]
public static bool IsNoGreaterThan(double a, double b);
    [ExtensionAttribute]
public static bool IsNoLessThan(double a, double b);
}
internal enum System.Activities.Presentation.FreeFormEditing.EdgeLocation : Enum {
    public int value__;
    public static EdgeLocation Left;
    public static EdgeLocation Right;
    public static EdgeLocation Top;
    public static EdgeLocation Bottom;
}
internal class System.Activities.Presentation.FreeFormEditing.FreeFormPanel : Panel {
    public static double ConnectorEditorOpacity;
    public static double ConnectorEditorThickness;
    public static double LeftStackingMargin;
    public static double TopStackingMargin;
    public static double VerticalStackingDistance;
    public static double GridSize;
    public static DependencyProperty ChildSizeProperty;
    public static DependencyProperty LocationProperty;
    public static DependencyProperty RequiredWidthProperty;
    public static DependencyProperty RequiredHeightProperty;
    public static DependencyProperty DestinationConnectionPointProperty;
    public static DependencyProperty SourceConnectionPointProperty;
    public static DependencyProperty DisabledProperty;
    public static DependencyProperty AutoConnectContainerProperty;
    public ConnectorEditor connectorEditor;
    public double RequiredHeight { get; private set; }
    public double RequiredWidth { get; private set; }
    public bool Disabled { get; public set; }
    public IAutoConnectContainer AutoConnectContainer { get; public set; }
    internal UIElement CurrentAutoConnectTarget { get; }
    internal Connector CurrentAutoSplitTarget { get; internal set; }
    private static FreeFormPanel();
    public void add_LocationChanged(LocationChangedEventHandler value);
    public void remove_LocationChanged(LocationChangedEventHandler value);
    public void add_ConnectorMoved(ConnectorMovedEventHandler value);
    public void remove_ConnectorMoved(ConnectorMovedEventHandler value);
    public void add_RequiredSizeChanged(RequiredSizeChangedEventHandler value);
    public void remove_RequiredSizeChanged(RequiredSizeChangedEventHandler value);
    public static Size GetChildSize(DependencyObject obj);
    public static void SetChildSize(DependencyObject obj, Size size);
    public double get_RequiredHeight();
    private void set_RequiredHeight(double value);
    public double get_RequiredWidth();
    private void set_RequiredWidth(double value);
    public bool get_Disabled();
    public void set_Disabled(bool value);
    public IAutoConnectContainer get_AutoConnectContainer();
    public void set_AutoConnectContainer(IAutoConnectContainer value);
    public static Vector CalculateMovement(Key key, bool isRightToLeft);
    public static double ZeroIfNegative(double val);
    internal UIElement get_CurrentAutoConnectTarget();
    [CompilerGeneratedAttribute]
internal Connector get_CurrentAutoSplitTarget();
    [CompilerGeneratedAttribute]
internal void set_CurrentAutoSplitTarget(Connector value);
    public static ConnectionPoint GetDestinationConnectionPoint(DependencyObject obj);
    public static void SetDestinationConnectionPoint(DependencyObject obj, ConnectionPoint connectionPoint);
    public static ConnectionPoint GetSourceConnectionPoint(DependencyObject obj);
    public static void SetSourceConnectionPoint(DependencyObject obj, ConnectionPoint connectionPoint);
    public static Point GetLocation(DependencyObject obj);
    public static void SetLocation(DependencyObject obj, Point point);
    protected virtual void OnInitialized(EventArgs e);
    internal void RemoveAutoConnectAdorner();
    internal List`1<DependencyObject> GetChildShapes(DependencyObject excluded);
    protected virtual void OnPreviewDragOver(DragEventArgs e);
    public void UpdateConnectorPoints(Connector connector, List`1<Point> points);
    public static List`1<Point> GetEdgeRelativeToOutmostPanel(ConnectionPoint connectionPoint);
    public static Point GetLocationRelativeToOutmostPanel(ConnectionPoint connectionPoint);
    public Point GetLocationRelativeToOutmostPanel(Point location);
    internal bool IsOutmostPanel();
    internal static ConnectionPoint ConnectionPointHitTest(Point hitPoint, ConnectionPointsAdorner adorner);
    internal static ConnectionPoint ConnectionPointHitTest(Point hitPoint, List`1<ConnectionPoint> connectionPoints, FreeFormPanel panel);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual void OnMouseLeave(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    public void RemoveConnectorEditor();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
}
internal interface System.Activities.Presentation.FreeFormEditing.IAutoConnectContainer {
    public abstract virtual void DoAutoConnect(DragEventArgs e, UIElement targetElement, AutoConnectDirections direction);
    public abstract virtual AutoConnectDirections GetDirectionsAllowed(DragEventArgs e, UIElement targetElement);
}
internal interface System.Activities.Presentation.FreeFormEditing.IAutoSplitContainer {
    public abstract virtual bool CanAutoSplit(DragEventArgs e);
    public abstract virtual void DoAutoSplit(DragEventArgs e, Connector connector);
}
internal interface System.Activities.Presentation.FreeFormEditing.INestedFreeFormPanelContainer {
    public abstract virtual FreeFormPanel GetChildFreeFormPanel();
    public abstract virtual FreeFormPanel GetOutmostFreeFormPanel();
}
internal class System.Activities.Presentation.FreeFormEditing.LocationChangedEventArgs : EventArgs {
    public Point NewLocation { get; }
    public LocationChangedEventArgs(Point newLocation);
    public Point get_NewLocation();
}
internal class System.Activities.Presentation.FreeFormEditing.LocationChangedEventHandler : MulticastDelegate {
    public LocationChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LocationChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LocationChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
internal static class System.Activities.Presentation.FreeFormEditing.PointExtensions : object {
    [ExtensionAttribute]
public static bool IsEqualTo(Point point1, Point point2);
}
internal class System.Activities.Presentation.FreeFormEditing.RequiredSizeChangedEventArgs : EventArgs {
    public Size NewRequiredSize { get; private set; }
    public RequiredSizeChangedEventArgs(Size newRequiredSize);
    [CompilerGeneratedAttribute]
public Size get_NewRequiredSize();
    [CompilerGeneratedAttribute]
private void set_NewRequiredSize(Size value);
}
internal class System.Activities.Presentation.FreeFormEditing.RequiredSizeChangedEventHandler : MulticastDelegate {
    public RequiredSizeChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RequiredSizeChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RequiredSizeChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Activities.Presentation.FxTrace : object {
    public static bool ShouldTraceCritical { get; }
    public static bool TracingEnabled { get; }
    public static bool ShouldTraceError { get; }
    public static bool ShouldTraceInformation { get; }
    public static bool ShouldTraceVerbose { get; }
    public static bool ShouldTraceWarning { get; }
    public static bool ShouldTraceCriticalToTraceSource { get; }
    public static bool ShouldTraceErrorToTraceSource { get; }
    public static bool ShouldTraceInformationToTraceSource { get; }
    public static bool ShouldTraceVerboseToTraceSource { get; }
    public static bool ShouldTraceWarningToTraceSource { get; }
    public static ExceptionTrace Exception { get; }
    public static EtwDiagnosticTrace Trace { get; }
    public static EventLogger EventLog { get; }
    private static FxTrace();
    public static void UpdateEventDefinitions(EventDescriptor[] eventDescriptors, UInt16[] end2EndEvents);
    public static bool IsEventEnabled(int index);
    public static bool get_ShouldTraceCritical();
    public static bool get_TracingEnabled();
    public static bool get_ShouldTraceError();
    public static bool get_ShouldTraceInformation();
    public static bool get_ShouldTraceVerbose();
    public static bool get_ShouldTraceWarning();
    public static bool get_ShouldTraceCriticalToTraceSource();
    public static bool get_ShouldTraceErrorToTraceSource();
    public static bool get_ShouldTraceInformationToTraceSource();
    public static bool get_ShouldTraceVerboseToTraceSource();
    public static bool get_ShouldTraceWarningToTraceSource();
    public static ExceptionTrace get_Exception();
    public static EtwDiagnosticTrace get_Trace();
    public static EventLogger get_EventLog();
}
internal class System.Activities.Presentation.GenericTypeParameterConverter : object {
    public GenericTypeParameterConverter(bool useFullName);
    private static GenericTypeParameterConverter();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal static class System.Activities.Presentation.HelpKeywords : object {
    public static string HomePage;
    public static string TypeBrowser;
    public static string ActivityTypeResolver;
    public static string ExpressionEditorPage;
    public static string TypeCollectionEditor;
    public static string DynamicArgumentDialog;
    public static string MessageContentDialog;
    public static string UriBuilderDialog;
    public static string AddCorrelationInitializersDialog;
    public static string CorrelatesOnDefinitionDialog;
    public static string InitializeCorrelationDialog;
    public static string ErrorView;
}
public class System.Activities.Presentation.Hosting.AssemblyContextControlItem : ContextItem {
    public AssemblyName LocalAssemblyName { get; public set; }
    public IList`1<AssemblyName> ReferencedAssemblyNames { get; public set; }
    public Type ItemType { get; }
    public IEnumerable`1<string> AllAssemblyNamesInContext { get; }
    [CompilerGeneratedAttribute]
public AssemblyName get_LocalAssemblyName();
    [CompilerGeneratedAttribute]
public void set_LocalAssemblyName(AssemblyName value);
    [CompilerGeneratedAttribute]
public IList`1<AssemblyName> get_ReferencedAssemblyNames();
    [CompilerGeneratedAttribute]
public void set_ReferencedAssemblyNames(IList`1<AssemblyName> value);
    public virtual Type get_ItemType();
    public IEnumerable`1<string> get_AllAssemblyNamesInContext();
    public IEnumerable`1<AssemblyName> GetEnvironmentAssemblyNames();
    public IEnumerable`1<Assembly> GetEnvironmentAssemblies(IMultiTargetingSupportService multiTargetingService);
    public static Assembly GetAssembly(AssemblyName assemblyName, IMultiTargetingSupportService multiTargetingService);
}
public class System.Activities.Presentation.Hosting.CommandInfo : object {
    public ICommand Command { get; internal set; }
    public bool IsBindingEnabledInDesigner { get; public set; }
    internal CommandInfo(ICommand command);
    [CompilerGeneratedAttribute]
public ICommand get_Command();
    [CompilerGeneratedAttribute]
internal void set_Command(ICommand value);
    [CompilerGeneratedAttribute]
public bool get_IsBindingEnabledInDesigner();
    [CompilerGeneratedAttribute]
public void set_IsBindingEnabledInDesigner(bool value);
}
public static class System.Activities.Presentation.Hosting.CommandValues : object {
    public static int ShowProperties;
    public static int InsertBreakpoint;
    public static int DeleteBreakpoint;
    public static int EnableBreakpoint;
    public static int DisableBreakpoint;
}
public interface System.Activities.Presentation.Hosting.ICommandService {
    public abstract virtual bool IsCommandSupported(int commandId);
    public abstract virtual bool CanExecuteCommand(int commandId);
    public abstract virtual void ExecuteCommand(int commandId, Dictionary`2<string, object> parameters);
}
public interface System.Activities.Presentation.Hosting.IDocumentPersistenceService {
    public abstract virtual object Load(string fileName);
    public abstract virtual void Flush(object documentRoot);
    public abstract virtual void OnModelChanged(object documentRoot);
}
public class System.Activities.Presentation.Hosting.ImportedNamespaceContextItem : ContextItem {
    public Collection`1<string> ImportedNamespaces { get; }
    public Type ItemType { get; }
    public Collection`1<string> get_ImportedNamespaces();
    public virtual Type get_ItemType();
    public void EnsureInitialized(EditingContext context);
}
public interface System.Activities.Presentation.Hosting.IMultiTargetingSupportService {
    public abstract virtual Assembly GetReflectionAssembly(AssemblyName targetAssemblyName);
    public abstract virtual Type GetRuntimeType(Type reflectionType);
    public abstract virtual bool IsSupportedType(Type type);
}
public interface System.Activities.Presentation.Hosting.IWorkflowCommandExtensionCallback {
    public abstract virtual void OnWorkflowCommandLoaded(CommandInfo commandInfo);
}
public abstract class System.Activities.Presentation.Hosting.MultiTargetingSupportService : object {
    public abstract virtual Assembly GetReflectionAssembly(AssemblyName targetAssemblyName);
    public abstract virtual Type GetRuntimeType(Type reflectionType);
    public abstract virtual bool IsSupportedType(Type type);
    public abstract virtual Type GetReflectionType(Type objectType);
}
public class System.Activities.Presentation.Hosting.ReadOnlyState : ContextItem {
    public bool IsReadOnly { get; public set; }
    public Type ItemType { get; }
    [CompilerGeneratedAttribute]
public bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public void set_IsReadOnly(bool value);
    public virtual Type get_ItemType();
}
public class System.Activities.Presentation.Hosting.WindowHelperService : object {
    public IntPtr ParentWindowHwnd { get; private set; }
    internal FrameworkElement View { get; internal set; }
    public WindowHelperService(IntPtr hwnd);
    [CompilerGeneratedAttribute]
public IntPtr get_ParentWindowHwnd();
    [CompilerGeneratedAttribute]
private void set_ParentWindowHwnd(IntPtr value);
    [CompilerGeneratedAttribute]
internal FrameworkElement get_View();
    [CompilerGeneratedAttribute]
internal void set_View(FrameworkElement value);
    public bool TrySetWindowOwner(DependencyObject source, Window target);
    public bool RegisterWindowMessageHandler(WindowMessage callback);
    public bool UnregisterWindowMessageHandler(WindowMessage callback);
    internal static void TrySetWindowOwner(DependencyObject owner, EditingContext editingContext, Window wnd);
}
public class System.Activities.Presentation.Hosting.WindowMessage : MulticastDelegate {
    public WindowMessage(object object, IntPtr method);
    public virtual void Invoke(int msgId, IntPtr parameter1, IntPtr parameter2);
    public virtual IAsyncResult BeginInvoke(int msgId, IntPtr parameter1, IntPtr parameter2, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Activities.Presentation.Hosting.WorkflowCommandExtensionItem : ContextItem {
    public Type ItemType { get; }
    internal IWorkflowCommandExtensionCallback CommandExtensionCallback { get; private set; }
    public WorkflowCommandExtensionItem(IWorkflowCommandExtensionCallback callback);
    public virtual Type get_ItemType();
    [CompilerGeneratedAttribute]
internal IWorkflowCommandExtensionCallback get_CommandExtensionCallback();
    [CompilerGeneratedAttribute]
private void set_CommandExtensionCallback(IWorkflowCommandExtensionCallback value);
}
internal interface System.Activities.Presentation.IActivityDelegateFactory {
    public Type DelegateType { get; }
    public abstract virtual Type get_DelegateType();
    public abstract virtual ActivityDelegate Create();
}
public interface System.Activities.Presentation.IActivityTemplateFactory {
    public abstract virtual Activity Create(DependencyObject target);
}
public interface System.Activities.Presentation.IActivityTemplateFactory`1 {
    public abstract virtual T Create(DependencyObject target, IDataObject dataObject);
}
public interface System.Activities.Presentation.IActivityToolboxService {
    public abstract virtual void AddCategory(string categoryName);
    public abstract virtual void RemoveCategory(string categoryName);
    public abstract virtual void AddItem(string qualifiedTypeName, string categoryName);
    public abstract virtual void RemoveItem(string qualifiedTypeName, string categoryName);
    public abstract virtual IList`1<string> EnumCategories();
    public abstract virtual IList`1<string> EnumItems(string categoryName);
}
public interface System.Activities.Presentation.ICompositeView {
    public bool IsDefaultContainer { get; }
    public TypeResolvingOptions DroppingTypeResolvingOptions { get; }
    public abstract virtual void OnItemMoved(ModelItem modelItem);
    public abstract virtual object OnItemsCut(List`1<ModelItem> itemsToCut);
    public abstract virtual object OnItemsCopied(List`1<ModelItem> itemsToCopy);
    public abstract virtual void OnItemsPasted(List`1<object> itemsToPaste, List`1<object> metadata, Point pastePoint, WorkflowViewElement pastePointReference);
    public abstract virtual void OnItemsDelete(List`1<ModelItem> itemsToDelete);
    public abstract virtual bool CanPasteItems(List`1<object> itemsToPaste);
    public abstract virtual bool get_IsDefaultContainer();
    public abstract virtual TypeResolvingOptions get_DroppingTypeResolvingOptions();
}
public interface System.Activities.Presentation.ICompositeViewEvents {
    public abstract virtual void RegisterDefaultCompositeView(ICompositeView container);
    public abstract virtual void UnregisterDefaultCompositeView(ICompositeView container);
    public abstract virtual void RegisterCompositeView(ICompositeView container);
    public abstract virtual void UnregisterCompositeView(ICompositeView container);
}
internal interface System.Activities.Presentation.IExpandChild {
    public ModelItem ExpandedChild { get; }
    public abstract virtual ModelItem get_ExpandedChild();
}
public interface System.Activities.Presentation.IIntegratedHelpService {
    public abstract virtual void AddContextAttribute(string name, string value, HelpKeywordType keywordType);
    public abstract virtual void RemoveContextAttribute(string name, string value);
    public abstract virtual void ShowHelpFromKeyword(string helpKeyword);
    public abstract virtual void ShowHelpFromUrl(string helpUrl);
}
public interface System.Activities.Presentation.IModalService {
    public abstract virtual void SetModalState(bool isModal);
}
public interface System.Activities.Presentation.IMultipleDragEnabledCompositeView {
    public abstract virtual List`1<ModelItem> SortSelectedItems(List`1<ModelItem> selectedItems);
    public abstract virtual void OnItemsMoved(List`1<ModelItem> movedItems);
}
internal enum System.Activities.Presentation.InsertionPosition : Enum {
    public int value__;
    public static InsertionPosition Before;
    public static InsertionPosition After;
    public static InsertionPosition None;
}
internal class System.Activities.Presentation.Internal.EqualityArray : object {
    internal EqualityArray(Object[] values);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal static class System.Activities.Presentation.Internal.ManifestImages : object {
    private static ManifestImages();
    public static object GetImage(Type type, Size desiredSize);
}
internal class System.Activities.Presentation.Internal.Metadata.AttributeData : object {
    internal Type AttributeType { get; }
    internal bool AllowsMultiple { get; }
    internal bool IsInheritable { get; }
    internal AttributeData(Type attributeType);
    internal Type get_AttributeType();
    internal bool get_AllowsMultiple();
    internal bool get_IsInheritable();
}
internal static class System.Activities.Presentation.Internal.Metadata.AttributeDataCache : object {
    private static AttributeDataCache();
    internal static MemberInfo GetBaseMemberInfo(MemberInfo member);
    internal static IEnumerable`1<object> GetMetadataStoreAttributes(Type type, string memberName, AttributeTable[] tables);
    internal static IEnumerable`1<object> GetClrAttributes(MemberInfo member);
    internal static AttributeData GetAttributeData(Type attributeType);
}
internal class System.Activities.Presentation.Internal.Metadata.MutableAttributeTable : object {
    internal IEnumerable`1<Type> AttributedTypes { get; }
    private static MutableAttributeTable();
    internal IEnumerable`1<Type> get_AttributedTypes();
    internal void AddCallback(Type type, AttributeCallback callback);
    internal void AddCustomAttributes(Type type, IEnumerable`1<object> attributes);
    internal void AddCustomAttributes(Type ownerType, MemberDescriptor descriptor, IEnumerable`1<object> attributes);
    internal void AddCustomAttributes(Type ownerType, MemberInfo member, IEnumerable`1<object> attributes);
    internal void AddCustomAttributes(Type ownerType, DependencyProperty dp, IEnumerable`1<object> attributes);
    internal void AddCustomAttributes(Type ownerType, string memberName, IEnumerable`1<object> attributes);
    internal void AddTable(MutableAttributeTable table);
    internal bool ContainsAttributes(Type type);
    internal IEnumerable GetCustomAttributes(Type type);
    internal IEnumerable GetCustomAttributes(Type ownerType, MemberDescriptor descriptor);
    internal IEnumerable GetCustomAttributes(Type ownerType, DependencyProperty dp);
    internal IEnumerable GetCustomAttributes(Type ownerType, MemberInfo member);
    internal IEnumerable GetCustomAttributes(Type ownerType, string memberName);
    internal void DebugValidateProvider();
    public void ValidateTable();
}
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
internal class System.Activities.Presentation.Internal.Properties.Resources : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_ArgIncorrectType { get; }
    internal static string Error_CannotConvertValueToString { get; }
    internal static string Error_CannotUpdateValueFromStringValue { get; }
    internal static string Error_DerivedContextItem { get; }
    internal static string Error_DuplicateService { get; }
    internal static string Error_EditingScopeReverted { get; }
    internal static string Error_EdtingScopeCompleted { get; }
    internal static string Error_EnumerationNotReady { get; }
    internal static string Error_IncorrectServiceType { get; }
    internal static string Error_InvalidArgumentType { get; }
    internal static string Error_InvalidArrayIndex { get; }
    internal static string Error_InvalidFactoryType { get; }
    internal static string Error_NullImplementation { get; }
    internal static string Error_NullService { get; }
    internal static string Error_PropertyValueEditor_InvalidDialogValueEditorCommandInvocation { get; }
    internal static string Error_PropertyValueEditor_InvalidDialogValueEditorEditorValue { get; }
    internal static string Error_RecursionResolvingService { get; }
    internal static string Error_RequiredService { get; }
    internal static string Error_TableValidationFailed { get; }
    internal static string Error_ToolAlreadyActive { get; }
    internal static string Error_UnknownMemberDescriptor { get; }
    internal static string Error_ValidationAmbiguousMember { get; }
    internal static string Error_ValidationNoMatchingMember { get; }
    internal static string Error_ValueGetFailed { get; }
    internal static string Error_ValueSetFailed { get; }
    internal static string FromExpression_CanOnlySetFocusScopePriorityOnAnElementThatIsAFocusScope { get; }
    internal static string FromExpression_CategoryEditorTypeLoadFailed { get; }
    internal static string FromExpression_CategoryIconLoadFailed { get; }
    internal static string FromExpression_CollectionDialogEditorCollectionItemFactoryInstantiateFailed { get; }
    internal static string FromExpression_MethodOrOperationIsNotImplemented { get; }
    internal static string FromExpression_NewItemFactoryIconLoadFailed { get; }
    internal static string FromExpression_NoConvertBackForValueToIconConverter { get; }
    internal static string FromExpression_SwitchConverterIsOneWay { get; }
    internal static string FromExpression_UnexpectedBrushType { get; }
    internal static string FromExpression_UnexpectedDrawingType { get; }
    internal static string FromExpression_UnexpectedImageSourceType { get; }
    internal static string FromExpression_ValueEditorLoadFailed { get; }
    internal static string MetadataPluginLog_ErrorFailedToLoadMetadataAssembly { get; }
    internal static string PropertyCategoryAllProperties { get; }
    internal static string PropertyEditing_AdvancedCategoryEditors { get; }
    internal static string PropertyEditing_AlphabeticalCaption { get; }
    internal static string PropertyEditing_BasicCategoryEditors { get; }
    internal static string PropertyEditing_CategorizedCaption { get; }
    internal static string PropertyEditing_CategoryContainerAutomationPeerHelp { get; }
    internal static string PropertyEditing_CategoryList { get; }
    internal static string PropertyEditing_ClearButtonCaption { get; }
    internal static string PropertyEditing_ClearIndexer { get; }
    internal static string PropertyEditing_CollectionEditorTitle { get; }
    internal static string PropertyEditing_CollectionItemDisplayFormatType { get; }
    internal static string PropertyEditing_CollectionItemDisplayFormatTypeAndName { get; }
    internal static string PropertyEditing_DefaultArrayStringValue { get; }
    internal static string PropertyEditing_DefaultCollectionStringValue { get; }
    internal static string PropertyEditing_DefaultEnumerableStringValue { get; }
    internal static string PropertyEditing_DialogError { get; }
    internal static string PropertyEditing_DialogValueEditorTitle { get; }
    internal static string PropertyEditing_DuplicateNameInCollection { get; }
    internal static string PropertyEditing_ErrorAbort_NoTransactionsOpened { get; }
    internal static string PropertyEditing_ErrorCommit_NoTransactionsOpened { get; }
    internal static string PropertyEditing_ErrorSetValueOnIndexer { get; }
    internal static string PropertyEditing_InvalidIndexer { get; }
    internal static string PropertyEditing_MultipleObjectsSelected { get; }
    internal static string PropertyEditing_MultipleTypesSelected { get; }
    internal static string PropertyEditing_NameChangeUndoText { get; }
    internal static string PropertyEditing_NamePropertyDisplayFormat { get; }
    internal static string PropertyEditing_NameSetError { get; }
    internal static string PropertyEditing_NoStringToValueConversion { get; }
    internal static string PropertyEditing_PropertyInspector { get; }
    internal static string PropertyEditing_PropertyInspectorAutomationPeerHelp { get; }
    internal static string PropertyEditing_SelectionStatus_AdvancedCategory { get; }
    internal static string PropertyEditing_SelectionStatus_Category { get; }
    internal static string PropertyEditing_SelectionStatus_CategoryEditor { get; }
    internal static string PropertyEditing_SelectionStatus_Empty { get; }
    internal static string PropertyEditing_SelectionStatus_Property { get; }
    internal static string PropertyEditing_SelectionStatus_Unknown { get; }
    internal static string PropertyEditing_SetError { get; }
    internal static string PropertyEditing_SubPropertyEditorAutomationName { get; }
    internal static string PropertyEditing_UndoText { get; }
    internal static string PropertyEditing_ValidationFailed { get; }
    internal static string ToolDescription_CreateInstance { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_ArgIncorrectType();
    internal static string get_Error_CannotConvertValueToString();
    internal static string get_Error_CannotUpdateValueFromStringValue();
    internal static string get_Error_DerivedContextItem();
    internal static string get_Error_DuplicateService();
    internal static string get_Error_EditingScopeReverted();
    internal static string get_Error_EdtingScopeCompleted();
    internal static string get_Error_EnumerationNotReady();
    internal static string get_Error_IncorrectServiceType();
    internal static string get_Error_InvalidArgumentType();
    internal static string get_Error_InvalidArrayIndex();
    internal static string get_Error_InvalidFactoryType();
    internal static string get_Error_NullImplementation();
    internal static string get_Error_NullService();
    internal static string get_Error_PropertyValueEditor_InvalidDialogValueEditorCommandInvocation();
    internal static string get_Error_PropertyValueEditor_InvalidDialogValueEditorEditorValue();
    internal static string get_Error_RecursionResolvingService();
    internal static string get_Error_RequiredService();
    internal static string get_Error_TableValidationFailed();
    internal static string get_Error_ToolAlreadyActive();
    internal static string get_Error_UnknownMemberDescriptor();
    internal static string get_Error_ValidationAmbiguousMember();
    internal static string get_Error_ValidationNoMatchingMember();
    internal static string get_Error_ValueGetFailed();
    internal static string get_Error_ValueSetFailed();
    internal static string get_FromExpression_CanOnlySetFocusScopePriorityOnAnElementThatIsAFocusScope();
    internal static string get_FromExpression_CategoryEditorTypeLoadFailed();
    internal static string get_FromExpression_CategoryIconLoadFailed();
    internal static string get_FromExpression_CollectionDialogEditorCollectionItemFactoryInstantiateFailed();
    internal static string get_FromExpression_MethodOrOperationIsNotImplemented();
    internal static string get_FromExpression_NewItemFactoryIconLoadFailed();
    internal static string get_FromExpression_NoConvertBackForValueToIconConverter();
    internal static string get_FromExpression_SwitchConverterIsOneWay();
    internal static string get_FromExpression_UnexpectedBrushType();
    internal static string get_FromExpression_UnexpectedDrawingType();
    internal static string get_FromExpression_UnexpectedImageSourceType();
    internal static string get_FromExpression_ValueEditorLoadFailed();
    internal static string get_MetadataPluginLog_ErrorFailedToLoadMetadataAssembly();
    internal static string get_PropertyCategoryAllProperties();
    internal static string get_PropertyEditing_AdvancedCategoryEditors();
    internal static string get_PropertyEditing_AlphabeticalCaption();
    internal static string get_PropertyEditing_BasicCategoryEditors();
    internal static string get_PropertyEditing_CategorizedCaption();
    internal static string get_PropertyEditing_CategoryContainerAutomationPeerHelp();
    internal static string get_PropertyEditing_CategoryList();
    internal static string get_PropertyEditing_ClearButtonCaption();
    internal static string get_PropertyEditing_ClearIndexer();
    internal static string get_PropertyEditing_CollectionEditorTitle();
    internal static string get_PropertyEditing_CollectionItemDisplayFormatType();
    internal static string get_PropertyEditing_CollectionItemDisplayFormatTypeAndName();
    internal static string get_PropertyEditing_DefaultArrayStringValue();
    internal static string get_PropertyEditing_DefaultCollectionStringValue();
    internal static string get_PropertyEditing_DefaultEnumerableStringValue();
    internal static string get_PropertyEditing_DialogError();
    internal static string get_PropertyEditing_DialogValueEditorTitle();
    internal static string get_PropertyEditing_DuplicateNameInCollection();
    internal static string get_PropertyEditing_ErrorAbort_NoTransactionsOpened();
    internal static string get_PropertyEditing_ErrorCommit_NoTransactionsOpened();
    internal static string get_PropertyEditing_ErrorSetValueOnIndexer();
    internal static string get_PropertyEditing_InvalidIndexer();
    internal static string get_PropertyEditing_MultipleObjectsSelected();
    internal static string get_PropertyEditing_MultipleTypesSelected();
    internal static string get_PropertyEditing_NameChangeUndoText();
    internal static string get_PropertyEditing_NamePropertyDisplayFormat();
    internal static string get_PropertyEditing_NameSetError();
    internal static string get_PropertyEditing_NoStringToValueConversion();
    internal static string get_PropertyEditing_PropertyInspector();
    internal static string get_PropertyEditing_PropertyInspectorAutomationPeerHelp();
    internal static string get_PropertyEditing_SelectionStatus_AdvancedCategory();
    internal static string get_PropertyEditing_SelectionStatus_Category();
    internal static string get_PropertyEditing_SelectionStatus_CategoryEditor();
    internal static string get_PropertyEditing_SelectionStatus_Empty();
    internal static string get_PropertyEditing_SelectionStatus_Property();
    internal static string get_PropertyEditing_SelectionStatus_Unknown();
    internal static string get_PropertyEditing_SetError();
    internal static string get_PropertyEditing_SubPropertyEditorAutomationName();
    internal static string get_PropertyEditing_UndoText();
    internal static string get_PropertyEditing_ValidationFailed();
    internal static string get_ToolDescription_CreateInstance();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Automation.AutomatedChoiceEditor : ChoiceEditor {
    public static DependencyProperty AutomationValueConverterProperty;
    public IValueConverter AutomationValueConverter { get; public set; }
    private static AutomatedChoiceEditor();
    internal void add_DependencyPropertyChanged(DependencyPropertyChangedEventHandler value);
    internal void remove_DependencyPropertyChanged(DependencyPropertyChangedEventHandler value);
    public IValueConverter get_AutomationValueConverter();
    public void set_AutomationValueConverter(IValueConverter value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Automation.AutomatedComboBox : ComboBox {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Automation.AutomatedListBox : ListBox {
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Automation.AutomatedListBoxItemAutomationPeer : ListBoxItemAutomationPeer {
    public AutomatedListBoxItemAutomationPeer(object item, SelectorAutomationPeer owner);
    protected virtual string GetNameCore();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Automation.CategoryContainerAutomationPeer : object {
    public ExpandCollapseState ExpandCollapseState { get; }
    public sealed virtual ExpandCollapseState get_ExpandCollapseState();
    public static UIElementAutomationPeer CreateStandAloneAutomationPeer(CiderCategoryContainer container);
    public static ItemAutomationPeer CreateItemAutomationPeer(ModelCategoryEntry category, CiderCategoryContainer container, CategoryListAutomationPeer parentAutomationPeer);
    public sealed virtual void Collapse();
    public sealed virtual void Expand();
    public sealed virtual void ScrollIntoView();
    public void AddFocusEvents();
    public void RemoveFocusEvents();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Automation.CategoryListAutomationPeer : ItemsControlAutomationPeer {
    public CategoryListAutomationPeer(CategoryList owner);
    protected virtual ItemAutomationPeer CreateItemAutomationPeer(object item);
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    protected virtual string GetItemStatusCore();
    public sealed virtual void UnloadEventHook();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Automation.HiddenUIElementAutomationPeer : UIElementAutomationPeer {
    public HiddenUIElementAutomationPeer(UIElement owner);
    protected virtual bool IsControlElementCore();
}
internal interface System.Activities.Presentation.Internal.PropertyEditing.Automation.IAutomationFocusChangedEventSource {
    public abstract virtual void UnloadEventHook();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Automation.PropertyContainerAutomationPeer : UIElementAutomationPeer {
    public bool IsReadOnly { get; }
    public string Value { get; }
    public PropertyContainerAutomationPeer(PropertyContainer container);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual string get_Value();
    internal void AddFocusEvents();
    protected virtual string GetClassNameCore();
    protected virtual string GetNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    public void RemoveFocusEvents();
    public sealed virtual void SetValue(string value);
    public sealed virtual void ScrollIntoView();
    public sealed virtual void UnloadEventHook();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Automation.PropertyInspectorAutomationPeer : UIElementAutomationPeer {
    public PropertyInspectorAutomationPeer(PropertyInspector owner);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    protected virtual Point GetClickablePointCore();
    protected virtual string GetHelpTextCore();
    protected virtual string GetNameCore();
    protected virtual string GetClassNameCore();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Automation.SubPropertyEditorAutomationPeer : UIElementAutomationPeer {
    public ExpandCollapseState ExpandCollapseState { get; }
    public SubPropertyEditorAutomationPeer(SubPropertyEditor editor);
    public sealed virtual ExpandCollapseState get_ExpandCollapseState();
    protected virtual string GetNameCore();
    protected virtual string GetClassNameCore();
    public virtual object GetPattern(PatternInterface patternInterface);
    protected virtual List`1<AutomationPeer> GetChildrenCore();
    public sealed virtual void Collapse();
    public sealed virtual void Expand();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Automation.TextFormatConverter : object {
    public string Format { get; public set; }
    public string get_Format();
    public void set_Format(string value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[DefaultMemberAttribute("Item")]
internal class System.Activities.Presentation.Internal.PropertyEditing.CategoryList : ItemsControl {
    public int Count { get; }
    public string FilterString { get; public set; }
    public ICommand ClearFilterCommand { get; }
    public bool HasAnyFilterMatches { get; private set; }
    public FrameworkElement Selection { get; }
    public SelectionPath SelectionPath { get; public set; }
    public CategoryEntry Item { get; }
    private static CategoryList();
    public void add_ContainerGenerated(ContainerGeneratedHandler value);
    public void remove_ContainerGenerated(ContainerGeneratedHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public int get_Count();
    public string get_FilterString();
    public void set_FilterString(string value);
    public ICommand get_ClearFilterCommand();
    public bool get_HasAnyFilterMatches();
    private void set_HasAnyFilterMatches(bool value);
    public FrameworkElement get_Selection();
    public SelectionPath get_SelectionPath();
    public void set_SelectionPath(SelectionPath value);
    public CategoryEntry get_Item(int index);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public void Insert(int index, CategoryEntry category);
    public void InsertAlphabetically(CategoryEntry category);
    public void RemoveAt(int index);
    public sealed virtual void RestoreState(object state);
    public sealed virtual object RetrieveState();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
    public void RefreshFilter();
    public void ClearFilter();
    public bool UpdateSelectedProperty(SelectionPath stickyPath, string defaultPropertyName, SelectionPath fallbackPath);
    internal bool SetSelectionPath(SelectionPath path, Boolean& pendingGeneration);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    protected virtual void OnPreviewMouseUp(MouseButtonEventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual Size ArrangeOverride(Size arrangeBounds);
    internal PropertyContainer FindPropertyEntryVisual(PropertyEntry property, CategoryEntry parentCategory, Boolean& pendingGeneration);
    internal CategoryContainer FindCategoryEntryVisual(CategoryEntry category);
    internal UIElement FindCategoryEditorVisual(CategoryEditor editor, ModelCategoryEntry category, Boolean& pendingGeneration);
    internal CategoryEntry FindCategory(string name);
    internal PropertyEntry FindPropertyEntry(string propertyName, ModelCategoryEntry& parentCategory);
    internal CategoryEditor FindCategoryEditor(string editorTypeName, ModelCategoryEntry& category);
    public sealed virtual IEnumerator`1<CategoryBase> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.CategoryNameMap : object {
    private static CategoryNameMap();
    public static string GetLocalizedCategoryName(string categoryName);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.CiderCategoryContainer : CategoryContainer {
    public static DependencyProperty IsEmptyProperty;
    public static DependencyProperty ShowCategoryHeaderProperty;
    public bool IsEmpty { get; }
    public bool ShowCategoryHeader { get; public set; }
    public ISelectionStop BasicCategorySelectionStop { get; }
    public ISelectionStop AdvancedCategorySelectionStop { get; }
    private static CiderCategoryContainer();
    public void add_ExpandedChanged(EventHandler value);
    public void remove_ExpandedChanged(EventHandler value);
    public void add_AdvancedSectionPinnedChanged(EventHandler value);
    public void remove_AdvancedSectionPinnedChanged(EventHandler value);
    public bool get_IsEmpty();
    public bool get_ShowCategoryHeader();
    public void set_ShowCategoryHeader(bool value);
    public ISelectionStop get_BasicCategorySelectionStop();
    public ISelectionStop get_AdvancedCategorySelectionStop();
    protected virtual void AddProperty(PropertyEntry property, ObservableCollection`1<PropertyEntry> unconsumedProperties, ObservableCollection`1<PropertyEntry> referenceOrder, ObservableCollection`1<CategoryEditor> categoryEditors);
    public PropertyContainer ContainerFromProperty(PropertyEntry property, Boolean& pendingGeneration);
    public UIElement ContainerFromEditor(CategoryEditor editor, Boolean& pendingGeneration);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.CiderCategoryLayoutContainer : CategoryLayoutContainer {
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.CiderStandardCategoryLayout : StandardCategoryLayout {
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.ContainerGeneratedEventArgs : EventArgs {
    public CiderCategoryContainer Container { get; }
    public ContainerGeneratedEventArgs(CiderCategoryContainer container);
    public CiderCategoryContainer get_Container();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.ContainerGeneratedHandler : MulticastDelegate {
    public ContainerGeneratedHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ContainerGeneratedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ContainerGeneratedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.EditModeSwitchButtonKeyboardFix : object {
    public static DependencyProperty ApplyFixProperty;
    private static EditModeSwitchButtonKeyboardFix();
    public static bool GetApplyFix(DependencyObject obj);
    public static void SetApplyFix(DependencyObject obj, bool value);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.BoolViewEditor : PropertyValueEditor {
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.Editors.EditorUtilities : object {
    public static string NullString;
    private static EditorUtilities();
    public static bool IsConcreteWithDefaultCtor(Type type);
    public static string GetDisplayName(object item);
    public static bool IsNullableEnumType(Type t);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.FlagEditor : ComboBox {
    public static DependencyProperty FlagTypeProperty;
    public Type FlagType { get; public set; }
    private static FlagEditor();
    public Type get_FlagType();
    public void set_FlagType(Type value);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnDropDownOpened(EventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnDropDownClosed(EventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.FlagPanel : StackPanel {
    public static DependencyProperty FlagStringProperty;
    public static DependencyProperty FlagTypeProperty;
    public Type FlagType { get; public set; }
    public string FlagString { get; public set; }
    private static FlagPanel();
    public Type get_FlagType();
    public void set_FlagType(Type value);
    public string get_FlagString();
    public void set_FlagString(string value);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.FlagStringConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.ImageSourceToImageConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.NewItemFactoryTypeModelToDisplayNameConverter : object {
    public static NewItemFactoryTypeModelToDisplayNameConverter Instance { get; }
    public static NewItemFactoryTypeModelToDisplayNameConverter get_Instance();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.NewItemFactoryTypeModelToTypeNameConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.NonZeroToBoolConverter : object {
    public bool Invert { get; public set; }
    public bool get_Invert();
    public void set_Invert(bool value);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.PropertyValueToDisplayNameConverter : object {
    public static PropertyValueToDisplayNameConverter Instance { get; }
    public static PropertyValueToDisplayNameConverter get_Instance();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.PropertyValueToStandardValuesConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.QuickItemTemplateSelector : DataTemplateSelector {
    public DataTemplate PopupTemplate { get; public set; }
    public DataTemplate InlineTemplate { get; public set; }
    public DataTemplate get_PopupTemplate();
    public void set_PopupTemplate(DataTemplate value);
    public DataTemplate get_InlineTemplate();
    public void set_InlineTemplate(DataTemplate value);
    public virtual DataTemplate SelectTemplate(object item, DependencyObject container);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.RTLValueConveter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.SubPropertyEditor : Control {
    public static DependencyProperty PropertyEntryProperty;
    public static DependencyProperty IsExpandedProperty;
    public static DependencyProperty CurrentQuickTypeProperty;
    public PropertyEntry PropertyEntry { get; public set; }
    public bool IsExpanded { get; public set; }
    public NewItemFactoryTypeModel CurrentQuickType { get; public set; }
    public bool HasQuickTypes { get; }
    public ICollectionView QuickTypes { get; }
    public IEnumerable`1<PropertyEntry> SelectiveSubProperties { get; }
    public bool IsExpandable { get; }
    public SelectionPath Path { get; }
    public string Description { get; }
    private static SubPropertyEditor();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal void add_VisualsChanged(EventHandler value);
    internal void remove_VisualsChanged(EventHandler value);
    public PropertyEntry get_PropertyEntry();
    public void set_PropertyEntry(PropertyEntry value);
    public sealed virtual bool get_IsExpanded();
    public sealed virtual void set_IsExpanded(bool value);
    public NewItemFactoryTypeModel get_CurrentQuickType();
    public void set_CurrentQuickType(NewItemFactoryTypeModel value);
    public bool get_HasQuickTypes();
    public ICollectionView get_QuickTypes();
    public IEnumerable`1<PropertyEntry> get_SelectiveSubProperties();
    public sealed virtual bool get_IsExpandable();
    public sealed virtual SelectionPath get_Path();
    public sealed virtual string get_Description();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    internal PropertyEntry FindSubPropertyEntry(string propertyName);
    internal PropertyContainer FindSubPropertyEntryVisual(PropertyEntry property);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.SubPropertyViewEditor : ExtendedPropertyValueEditor {
    public static SubPropertyViewEditor Instance { get; }
    public static SubPropertyViewEditor get_Instance();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Editors.ValueToToolTipConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.ExtensibilityAccessor : object {
    private static ExtensibilityAccessor();
    public static string GetCategoryName(ModelProperty property);
    public static ArrayList GetStandardValues(TypeConverter converter);
    public static bool GetStandardValuesSupported(TypeConverter converter);
    public static PropertyValueEditor GetCustomPropertyValueEditor(ModelProperty property);
    public static PropertyValueEditor GetSubPropertyEditor(ModelProperty property);
    public static IEnumerable`1<Type> GetCategoryEditorTypes(Type ownerType);
    public static bool GetIsAdvanced(ModelProperty property);
    public static bool GetIsAdvanced(CategoryEditor editor);
    public static string GetDefaultProperty(Type type);
    public static string GetDisplayName(ModelProperty property);
    public static string GetDescription(ModelProperty property);
    public static TypeConverter GetTypeConverter(ModelItem item);
    public static TypeConverter GetTypeConverter(ModelProperty property);
    public static bool IsReadOnly(List`1<ModelProperty> properties, IsMixedValueEvaluator isMixedValueEvaluator);
    public static Nullable`1<bool> IsBrowsable(ModelProperty property);
    public static PropertyOrder GetPropertyOrder(ModelProperty property);
    public static List`1<NewItemTypesAttribute> GetNewItemTypesAttributes(ModelProperty property);
    public static IEnumerable`1<NewItemFactoryTypeModel> GetNewItemFactoryTypeModels(ModelProperty modelProperty, Size desiredIconSize);
    public static List`1<ModelProperty> GetSubProperties(ModelItem item);
    public static List`1<ModelProperty> GetSubProperties(ModelProperty property);
    public static object SafeCreateInstance(Type type);
    public static PropertyValueSource GetPropertySource(ModelProperty property);
    public static bool IsEditorReusable(IEnumerable`1<ModelProperty> properties);
    public static T GetAttribute(ModelProperty property);
    public static T GetAttribute(ModelItem item);
    public static T GetAttribute(Type type);
    public static IEnumerable`1<T> GetAttributes(ModelProperty property);
    public static IEnumerable`1<T> GetAttributes(Type type);
    public static T GetAttribute(AttributeCollection attributes);
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Diagnostics.Automation.AutomationElement : object {
    public static DependencyProperty IdProperty;
    private static AutomationElement();
    public static string GetId(DependencyObject o);
    public static void SetId(DependencyObject o, string val);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Controls.WorkaroundPopup : Popup {
    protected virtual void OnOpened(EventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnLostMouseCapture(MouseEventArgs e);
    protected virtual void OnPreviewMouseDown(MouseButtonEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnClosed(EventArgs e);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.AppendSuffixConverter : object {
    public string Suffix { get; public set; }
    public string get_Suffix();
    public void set_Suffix(string value);
    public sealed virtual object ConvertBack(object o, Type targetType, object value, CultureInfo culture);
    public sealed virtual object Convert(object o, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.BoolToDoubleConverter : object {
    public double TrueValue { get; public set; }
    public double FalseValue { get; public set; }
    public double get_TrueValue();
    public void set_TrueValue(double value);
    public double get_FalseValue();
    public void set_FalseValue(double value);
    public sealed virtual object ConvertBack(object o, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object Convert(object o, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.BoolToVisibilityCollapsedConverter : object {
    public bool InvertBoolean { get; public set; }
    public bool get_InvertBoolean();
    public void set_InvertBoolean(bool value);
    public sealed virtual object ConvertBack(object o, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object Convert(object o, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.BoolToVisibilityConverter : object {
    public sealed virtual object ConvertBack(object o, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object Convert(object o, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.BoolToVisibilityHiddenConverter : object {
    public bool InvertBoolean { get; public set; }
    public bool get_InvertBoolean();
    public void set_InvertBoolean(bool value);
    public sealed virtual object ConvertBack(object o, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object Convert(object o, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.ComposingConverter : object {
    public List`1<IValueConverter> Converters { get; }
    public List`1<IValueConverter> get_Converters();
    public sealed virtual object Convert(object o, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.DelegateCommand : object {
    public bool IsEnabled { get; }
    public DelegateCommand(SimpleEventHandler handler);
    public sealed virtual void add_CanExecuteChanged(EventHandler value);
    public sealed virtual void remove_CanExecuteChanged(EventHandler value);
    public bool get_IsEnabled();
    private sealed virtual override void System.Windows.Input.ICommand.Execute(object arg);
    private sealed virtual override bool System.Windows.Input.ICommand.CanExecute(object arg);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.EqualsConverter : DependencyObject {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.IntegerToVisibilityConverter : object {
    public Visibility ZeroValue { get; public set; }
    public Visibility NonzeroValue { get; public set; }
    public Visibility get_ZeroValue();
    public void set_ZeroValue(Visibility value);
    public Visibility get_NonzeroValue();
    public void set_NonzeroValue(Visibility value);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.IsNullConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.NotConverter : object {
    public sealed virtual object Convert(object o, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object o, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.NullToBoolConverter : object {
    public sealed virtual object ConvertBack(object o, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object Convert(object o, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.ObservableCollectionWorkaround`1 : ObservableCollection`1<T> {
    public ObservableCollectionWorkaround`1(List`1<T> list);
    public ObservableCollectionWorkaround`1(ICollection collection);
    public int BinarySearch(T value, IComparer`1<T> comparer);
    public void Sort();
    public void Sort(IComparer`1<T> comparer);
    public void Sort(Comparison`1<T> comparison);
    public void Reverse();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.SwitchCase : DependencyObject {
    public object In { get; public set; }
    public object Out { get; public set; }
    private static SwitchCase();
    public object get_In();
    public void set_In(object value);
    public object get_Out();
    public void set_Out(object value);
}
[ContentPropertyAttribute("Cases")]
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.SwitchConverter : DependencyObject {
    public List`1<SwitchCase> Cases { get; }
    public object DefaultValue { get; public set; }
    private static SwitchConverter();
    public List`1<SwitchCase> get_Cases();
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    public sealed virtual object Convert(object o, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object o, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.TypeReference : DependencyObject {
    public Type Type { get; public set; }
    private static TypeReference();
    public Type get_Type();
    public void set_Type(Type value);
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.ValueConverterUtilities : object {
    public static bool AssureBool(object value, bool defaultIfNull);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Data.VisibilityAndConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.ExceptionStringTable : object {
    internal static string CanOnlySetFocusScopePriorityOnAnElementThatIsAFocusScope { get; }
    internal static string CategoryIconLoadFailed { get; }
    internal static string CategoryEditorTypeLoadFailed { get; }
    internal static string MethodOrOperationIsNotImplemented { get; }
    internal static string NewItemFactoryIconLoadFailed { get; }
    internal static string NoConvertBackForValueToIconConverter { get; }
    internal static string SwitchConverterIsOneWay { get; }
    internal static string UnexpectedImageSourceType { get; }
    internal static string UnexpectedDrawingType { get; }
    internal static string UnexpectedBrushType { get; }
    internal static string ValueEditorLoadFailed { get; }
    internal static string get_CanOnlySetFocusScopePriorityOnAnElementThatIsAFocusScope();
    internal static string get_CategoryIconLoadFailed();
    internal static string get_CategoryEditorTypeLoadFailed();
    internal static string get_MethodOrOperationIsNotImplemented();
    internal static string get_NewItemFactoryIconLoadFailed();
    internal static string get_NoConvertBackForValueToIconConverter();
    internal static string get_SwitchConverterIsOneWay();
    internal static string get_UnexpectedImageSourceType();
    internal static string get_UnexpectedDrawingType();
    internal static string get_UnexpectedBrushType();
    internal static string get_ValueEditorLoadFailed();
}
internal interface System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.IMessageLogger {
    public abstract virtual void Clear();
    public abstract virtual void Write(string text);
    public abstract virtual void WriteLine(string text);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.MixedProperty : object {
    public static object Mixed;
    private static MixedProperty();
}
[DefaultMemberAttribute("Item")]
internal abstract class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.PropertyInspector.CategoryBase : CategoryEntry {
    public IEnumerable`1<PropertyEntry> Properties { get; }
    public ObservableCollection`1<PropertyEntry> BasicProperties { get; }
    public ObservableCollection`1<PropertyEntry> AdvancedProperties { get; }
    public bool BasicPropertyMatchesFilter { get; public set; }
    public bool AdvancedPropertyMatchesFilter { get; public set; }
    public IComparable SortOrdering { get; }
    public ObservableCollection`1<CategoryEditor> CategoryEditors { get; }
    public ImageSource CategoryIcon { get; protected set; }
    public PropertyEntry Item { get; }
    protected CategoryBase(string name);
    private static CategoryBase();
    public virtual IEnumerable`1<PropertyEntry> get_Properties();
    public abstract virtual ObservableCollection`1<PropertyEntry> get_BasicProperties();
    public abstract virtual ObservableCollection`1<PropertyEntry> get_AdvancedProperties();
    public bool get_BasicPropertyMatchesFilter();
    public void set_BasicPropertyMatchesFilter(bool value);
    public bool get_AdvancedPropertyMatchesFilter();
    public void set_AdvancedPropertyMatchesFilter(bool value);
    public virtual IComparable get_SortOrdering();
    public ObservableCollection`1<CategoryEditor> get_CategoryEditors();
    public ImageSource get_CategoryIcon();
    protected void set_CategoryIcon(ImageSource value);
    public virtual PropertyEntry get_Item(string propertyName);
    public virtual void ReportCategoryException(string message);
    private sealed virtual override IEnumerator`1<PropertyEntry> System.Collections.Generic.IEnumerable<System.Activities.Presentation.PropertyEditing.PropertyEntry>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void AddCategoryEditor(CategoryEditor categoryEditor);
    public void RemoveCategoryEditor(Type categoryEditor);
    public virtual void ApplyFilter(PropertyFilter filter);
    public virtual bool MatchesPredicate(PropertyFilterPredicate predicate);
    protected virtual bool DoesPropertyMatchFilter(PropertyFilter filter, PropertyEntry property);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.PropertyInspector.CategoryContainer : ContentControl {
    public static DependencyProperty PopupHostProperty;
    public static DependencyProperty CategoryProperty;
    public static DependencyProperty ExpandedProperty;
    public static DependencyProperty AdvancedSectionPinnedProperty;
    public static DependencyProperty BasicPropertyMatchesFilterProperty;
    public static DependencyProperty AdvancedPropertyMatchesFilterProperty;
    public static DependencyProperty ShowAdvancedHeaderProperty;
    public static DependencyProperty OwningCategoryContainerProperty;
    internal CategoryContainer UserControlSelf;
    internal Border PaletteBGrec;
    internal CategoryLayoutContainer _basicEditors;
    internal StandardCategoryLayout _basicProperties;
    internal Expander PopupHost;
    internal CategoryLayoutContainer _advancedEditors;
    internal StandardCategoryLayout _advancedProperties;
    public ObservableCollection`1<CategoryEditor> BasicCategoryEditors { get; }
    public ObservableCollection`1<CategoryEditor> AdvancedCategoryEditors { get; }
    public ObservableCollection`1<PropertyEntry> UnconsumedBasicProperties { get; }
    public ObservableCollection`1<PropertyEntry> UnconsumedAdvancedProperties { get; }
    public CategoryBase Category { get; public set; }
    public bool Expanded { get; public set; }
    public bool AdvancedSectionPinned { get; public set; }
    public bool BasicPropertyMatchesFilter { get; public set; }
    public bool AdvancedPropertyMatchesFilter { get; public set; }
    public bool ShowAdvancedHeader { get; public set; }
    public CategoryContainer(bool initializeComponent);
    private static CategoryContainer();
    public ObservableCollection`1<CategoryEditor> get_BasicCategoryEditors();
    public ObservableCollection`1<CategoryEditor> get_AdvancedCategoryEditors();
    public ObservableCollection`1<PropertyEntry> get_UnconsumedBasicProperties();
    public ObservableCollection`1<PropertyEntry> get_UnconsumedAdvancedProperties();
    public CategoryBase get_Category();
    public void set_Category(CategoryBase value);
    public bool get_Expanded();
    public void set_Expanded(bool value);
    public bool get_AdvancedSectionPinned();
    public void set_AdvancedSectionPinned(bool value);
    public bool get_BasicPropertyMatchesFilter();
    public void set_BasicPropertyMatchesFilter(bool value);
    public bool get_AdvancedPropertyMatchesFilter();
    public void set_AdvancedPropertyMatchesFilter(bool value);
    public bool get_ShowAdvancedHeader();
    public void set_ShowAdvancedHeader(bool value);
    public static void SetOwningCategoryContainer(DependencyObject dependencyObject, CategoryContainer value);
    public static CategoryContainer GetOwningCategoryContainer(DependencyObject dependencyObject);
    public static Popup GetPopupHost(DependencyObject target);
    public static void SetPopupHost(DependencyObject target, Popup value);
    protected virtual void AddProperty(PropertyEntry property, ObservableCollection`1<PropertyEntry> unconsumedProperties, ObservableCollection`1<PropertyEntry> referenceOrder, ObservableCollection`1<CategoryEditor> categoryEditors);
    protected virtual void OnInitialized(EventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.PropertyInspector.CategoryContainerCommands : object {
    public static RoutedCommand TogglePinAdvancedProperties { get; }
    public static RoutedCommand UpdateCategoryExpansionState { get; }
    private static CategoryContainerCommands();
    public static RoutedCommand get_TogglePinAdvancedProperties();
    public static RoutedCommand get_UpdateCategoryExpansionState();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.PropertyInspector.CategoryLayoutContainer : ItemsControl {
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.PropertyInspector.ExtensibilityMetadataHelper : object {
    public static PropertyValueEditor GetValueEditor(IEnumerable attributes, IMessageLogger exceptionLogger);
    public static Type GetCategoryEditorType(EditorAttribute attribute, IMessageLogger exceptionLogger);
    public static string GetExceptionMessage(Exception e);
    public static bool IsEditorReusable(IEnumerable attributes);
}
internal interface System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.PropertyInspector.IPropertyInspector {
    public abstract virtual bool IsCategoryExpanded(string categoryName);
    public abstract virtual void UpdateTransaction();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.PropertyInspector.NewItemFactoryTypeModel : object {
    public string DisplayName { get; }
    public Type Type { get; }
    public object Image { get; }
    public Size DesiredSize { get; public set; }
    public NewItemFactory ItemFactory { get; }
    public NewItemFactoryTypeModel(Type type, NewItemFactory factory);
    public NewItemFactoryTypeModel(Type type, NewItemFactory factory, IMessageLogger exceptionLogger);
    public string get_DisplayName();
    public Type get_Type();
    public object get_Image();
    public Size get_DesiredSize();
    public void set_DesiredSize(Size value);
    public NewItemFactory get_ItemFactory();
    public object CreateInstance();
    public virtual string ToString();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.PropertyInspector.PropertyContainerPopup : WorkaroundPopup {
    public static RoutedCommand OnBeginExtendedEdit;
    public static RoutedCommand OnEndExtendedEdit;
    public static CustomPopupPlacementCallback RightAlignedPopupPlacement { get; }
    private static PropertyContainerPopup();
    public static CustomPopupPlacementCallback get_RightAlignedPopupPlacement();
    protected virtual void OnOpened(EventArgs e);
    protected virtual void OnClosed(EventArgs e);
    public static CustomPopupPlacement[] RightAlignedPopupPlacementCallback(Size popupSize, Size targetSize, Point offset);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.PropertyInspector.PropertyInspectorHelper : object {
    public static DependencyProperty OwningPropertyInspectorModelProperty;
    public static DependencyProperty OwningPropertyInspectorElementProperty;
    private static PropertyInspectorHelper();
    public static void SetOwningPropertyInspectorModel(DependencyObject dependencyObject, IPropertyInspector value);
    public static IPropertyInspector GetOwningPropertyInspectorModel(DependencyObject dependencyObject);
    public static void SetOwningPropertyInspectorElement(DependencyObject dependencyObject, UIElement value);
    public static UIElement GetOwningPropertyInspectorElement(DependencyObject dependencyObject);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.PropertyInspector.StandardCategoryLayout : ItemsControl {
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void PrepareContainerForItemOverride(DependencyObject element, object item);
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.Tolerances : object {
    public static bool NearZero(double d);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.UIThreadDispatcher : object {
    public static UIThreadDispatcher Instance { get; public set; }
    public static UIThreadDispatcher get_Instance();
    public static void set_Instance(UIThreadDispatcher value);
    public static void InitializeInstance();
    public virtual void BeginInvoke(DispatcherPriority priority, Delegate method);
    public virtual void BeginInvoke(DispatcherPriority priority, Delegate method, object arg);
    public virtual void BeginInvoke(DispatcherPriority priority, Delegate method, object arg, Object[] args);
    public virtual void Invoke(DispatcherPriority priority, Delegate method);
    public virtual void Invoke(DispatcherPriority priority, Delegate method, object arg);
    public virtual void Invoke(DispatcherPriority priority, Delegate method, object arg, Object[] args);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.UserInterface.FocusScopeManager : object {
    public static DependencyProperty FocusScopePriorityProperty;
    public static DependencyProperty AllowedFocusProperty;
    public static FocusScopeManager Instance { get; }
    public static bool HasInstance { get; }
    public ReturnFocusCallback ReturnFocusCallback { get; public set; }
    private static FocusScopeManager();
    public static FocusScopeManager get_Instance();
    public static bool get_HasInstance();
    public ReturnFocusCallback get_ReturnFocusCallback();
    public void set_ReturnFocusCallback(ReturnFocusCallback value);
    public static void SetFocusToFocusScope(IInputElement newFocus);
    public static void DenyNextFocusChange();
    public static void SetFocusScopePriority(DependencyObject element, int value);
    public static int GetFocusScopePriority(DependencyObject element);
    public static void SetAllowedFocus(DependencyObject element, bool value);
    public static bool GetAllowedFocus(DependencyObject element);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.UserInterface.ReturnFocusCallback : MulticastDelegate {
    public ReturnFocusCallback(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.ValueEditors.ChoiceEditor : Control {
    public static DependencyProperty ValueProperty;
    public static DependencyProperty ValueIndexProperty;
    public static DependencyProperty ItemsSourceProperty;
    public static DependencyProperty ConverterProperty;
    public static DependencyProperty ViewTypeProperty;
    public static DependencyProperty IsEditableProperty;
    public static DependencyProperty IconResourcePrefixProperty;
    public static DependencyProperty IconResourceSuffixProperty;
    public static DependencyProperty IsNinchedProperty;
    public static DependencyProperty ShowFullControlProperty;
    public static DependencyProperty ItemTemplateProperty;
    public static DependencyProperty ItemTemplateSelectorProperty;
    public static DependencyProperty UseItemTemplateForSelectionProperty;
    public static DependencyProperty BorderCornerRadiusProperty;
    public static DependencyProperty DropButtonInsetProperty;
    public static DependencyProperty TextAreaInsetProperty;
    public static DependencyProperty DropButtonBrushProperty;
    public static DependencyProperty InnerCornerRadiusProperty;
    public static DependencyProperty ButtonIconProperty;
    public static DependencyProperty IconWidthProperty;
    public static DependencyProperty IconHeightProperty;
    public static DependencyProperty BeginCommandProperty;
    public static DependencyProperty UpdateCommandProperty;
    public static DependencyProperty CancelCommandProperty;
    public static DependencyProperty CommitCommandProperty;
    public static DependencyProperty FinishEditingCommandProperty;
    public static DependencyProperty ComboBoxLoadingCursorProperty;
    public static DependencyProperty ForceBindingProperty;
    public object Value { get; public set; }
    public int ValueIndex { get; public set; }
    public IEnumerable ItemsSource { get; public set; }
    public TypeConverter Converter { get; public set; }
    public ChoiceEditorViewType ViewType { get; public set; }
    public bool IsEditable { get; public set; }
    public string IconResourcePrefix { get; public set; }
    public string IconResourceSuffix { get; public set; }
    public bool IsNinched { get; public set; }
    public bool ShowFullControl { get; public set; }
    public DataTemplate ItemTemplate { get; public set; }
    public DataTemplateSelector ItemTemplateSelector { get; public set; }
    public bool UseItemTemplateForSelection { get; public set; }
    public double BorderCornerRadius { get; public set; }
    public Thickness DropButtonInset { get; public set; }
    public Thickness TextAreaInset { get; public set; }
    public Brush DropButtonBrush { get; public set; }
    public double InnerCornerRadius { get; public set; }
    public ImageSource ButtonIcon { get; public set; }
    public double IconWidth { get; public set; }
    public double IconHeight { get; public set; }
    public ICommand BeginCommand { get; public set; }
    public ICommand UpdateCommand { get; public set; }
    public ICommand CancelCommand { get; public set; }
    public ICommand CommitCommand { get; public set; }
    public ICommand FinishEditingCommand { get; public set; }
    public Cursor ComboBoxLoadingCursor { get; public set; }
    public ICommand NextValueCommand { get; }
    public ICommand PreviousValueCommand { get; }
    public bool ForceBinding { get; public set; }
    public object InternalValue { get; public set; }
    public string InternalStringValue { get; public set; }
    public bool InternalIsSelectingValue { get; public set; }
    private static ChoiceEditor();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public object get_Value();
    public void set_Value(object value);
    public int get_ValueIndex();
    public void set_ValueIndex(int value);
    public IEnumerable get_ItemsSource();
    public void set_ItemsSource(IEnumerable value);
    public TypeConverter get_Converter();
    public void set_Converter(TypeConverter value);
    public ChoiceEditorViewType get_ViewType();
    public void set_ViewType(ChoiceEditorViewType value);
    public bool get_IsEditable();
    public void set_IsEditable(bool value);
    public string get_IconResourcePrefix();
    public void set_IconResourcePrefix(string value);
    public string get_IconResourceSuffix();
    public void set_IconResourceSuffix(string value);
    public bool get_IsNinched();
    public void set_IsNinched(bool value);
    public bool get_ShowFullControl();
    public void set_ShowFullControl(bool value);
    public DataTemplate get_ItemTemplate();
    public void set_ItemTemplate(DataTemplate value);
    public DataTemplateSelector get_ItemTemplateSelector();
    public void set_ItemTemplateSelector(DataTemplateSelector value);
    public bool get_UseItemTemplateForSelection();
    public void set_UseItemTemplateForSelection(bool value);
    public double get_BorderCornerRadius();
    public void set_BorderCornerRadius(double value);
    public Thickness get_DropButtonInset();
    public void set_DropButtonInset(Thickness value);
    public Thickness get_TextAreaInset();
    public void set_TextAreaInset(Thickness value);
    public Brush get_DropButtonBrush();
    public void set_DropButtonBrush(Brush value);
    public double get_InnerCornerRadius();
    public void set_InnerCornerRadius(double value);
    public ImageSource get_ButtonIcon();
    public void set_ButtonIcon(ImageSource value);
    public double get_IconWidth();
    public void set_IconWidth(double value);
    public double get_IconHeight();
    public void set_IconHeight(double value);
    public ICommand get_BeginCommand();
    public void set_BeginCommand(ICommand value);
    public ICommand get_UpdateCommand();
    public void set_UpdateCommand(ICommand value);
    public ICommand get_CancelCommand();
    public void set_CancelCommand(ICommand value);
    public ICommand get_CommitCommand();
    public void set_CommitCommand(ICommand value);
    public ICommand get_FinishEditingCommand();
    public void set_FinishEditingCommand(ICommand value);
    public Cursor get_ComboBoxLoadingCursor();
    public void set_ComboBoxLoadingCursor(Cursor value);
    public ICommand get_NextValueCommand();
    public ICommand get_PreviousValueCommand();
    public bool get_ForceBinding();
    public void set_ForceBinding(bool value);
    public object get_InternalValue();
    public void set_InternalValue(object value);
    public string get_InternalStringValue();
    public void set_InternalStringValue(string value);
    public bool get_InternalIsSelectingValue();
    public void set_InternalIsSelectingValue(bool value);
    public void SelectNextValue();
    public void SelectPreviousValue();
    public sealed virtual ImageSource GetIconAsImageSource(object key, object parameter);
    protected virtual void OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate);
    public virtual void OnApplyTemplate();
    protected void UpdateInternalValuesFromValue();
    public void UpdateInternalValuesFromValueIndex();
    protected bool UpdateValueFromInternalValues();
    protected void BeginNoCommitInternalValueChangeBlock();
    protected void EndNoCommitInternalValueChangeBlock();
    protected void BeginNoCommitInternalStringValueChangeBlock();
    protected void EndNoCommitInternalStringValueChangeBlock();
    protected void BeginIgnoreExternalValueChangeBlock();
    protected void EndIgnoreExternalValueChangeBlock();
}
internal enum System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.ValueEditors.ChoiceEditorViewType : Enum {
    public int value__;
    public static ChoiceEditorViewType Combo;
    public static ChoiceEditorViewType Buttons;
    public static ChoiceEditorViewType ToggleButtons;
    public static ChoiceEditorViewType Toggle;
}
internal interface System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.ValueEditors.IIconProvider {
    public abstract virtual ImageSource GetIconAsImageSource(object key, object parameter);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.ValueEditors.RenderUtils : object {
    public static bool DrawInscribedRoundedRect(DrawingContext drawingContext, Brush fill, Pen stroke, Rect outerBounds, double cornerRadius);
    public static Rect CalculateInnerRect(Rect outerBounds, double strokeThickness);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.ValueEditors.StringEditor : TextBox {
    public static DependencyProperty ValueProperty;
    public static DependencyProperty IsNinchedProperty;
    public static DependencyProperty IsEditingProperty;
    public static DependencyProperty CornerRadiusProperty;
    public static DependencyProperty BorderWidthProperty;
    public static DependencyProperty BeginCommandProperty;
    public static DependencyProperty CommitCommandProperty;
    public static DependencyProperty CancelCommandProperty;
    public static DependencyProperty FinishEditingCommandProperty;
    public static DependencyProperty LostFocusCommandProperty;
    public string Value { get; public set; }
    public bool IsNinched { get; public set; }
    public bool IsEditing { get; public set; }
    public double CornerRadius { get; public set; }
    public double BorderWidth { get; public set; }
    public ICommand BeginCommand { get; public set; }
    public ICommand CommitCommand { get; public set; }
    public ICommand CancelCommand { get; public set; }
    public ICommand FinishEditingCommand { get; public set; }
    public ICommand LostFocusCommand { get; public set; }
    private static StringEditor();
    public string get_Value();
    public void set_Value(string value);
    public bool get_IsNinched();
    public void set_IsNinched(bool value);
    public bool get_IsEditing();
    public void set_IsEditing(bool value);
    public double get_CornerRadius();
    public void set_CornerRadius(double value);
    public double get_BorderWidth();
    public void set_BorderWidth(double value);
    public ICommand get_BeginCommand();
    public void set_BeginCommand(ICommand value);
    public ICommand get_CommitCommand();
    public void set_CommitCommand(ICommand value);
    public ICommand get_CancelCommand();
    public void set_CancelCommand(ICommand value);
    public ICommand get_FinishEditingCommand();
    public void set_FinishEditingCommand(ICommand value);
    public ICommand get_LostFocusCommand();
    public void set_LostFocusCommand(ICommand value);
    protected virtual void OnGotFocus(RoutedEventArgs e);
    protected virtual void OnGotKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    protected virtual void OnLostFocus(RoutedEventArgs e);
    protected virtual void OnTextChanged(TextChangedEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnRender(DrawingContext drawingContext);
}
internal enum System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.ValueEditors.UpdateBindingType : Enum {
    public int value__;
    public static UpdateBindingType Source;
    public static UpdateBindingType Target;
    public static UpdateBindingType Both;
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.ValueEditors.ValueEditorUtils : object {
    public static DependencyProperty HandlesCommitKeysProperty;
    private static ValueEditorUtils();
    public static bool GetHandlesCommitKeys(DependencyObject dependencyObject);
    public static void SetHandlesCommitKeys(DependencyObject dependencyObject, bool value);
    public static void UpdateBinding(FrameworkElement element, DependencyProperty property, bool updateSource);
    public static void UpdateBinding(FrameworkElement element, DependencyProperty property, UpdateBindingType updateType);
    public static void ExecuteCommand(ICommand command, IInputElement element, object parameter);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.FromExpression.Framework.ValueEditors.ValueToIconConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.KeyboardEnabledRadioButton : RadioButton {
    protected virtual void OnKeyDown(KeyEventArgs e);
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.Metadata.PropertyInspectorMetadata : object {
    public static void Initialize();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Model.ModelCategoryEntry : CategoryBase {
    public ObservableCollection`1<PropertyEntry> AdvancedProperties { get; }
    public ObservableCollection`1<PropertyEntry> BasicProperties { get; }
    internal bool IsEmpty { get; }
    public ModelCategoryEntry(string categoryName);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public virtual ObservableCollection`1<PropertyEntry> get_AdvancedProperties();
    public virtual ObservableCollection`1<PropertyEntry> get_BasicProperties();
    internal bool get_IsEmpty();
    internal ObservableCollectionWorkaround`1<PropertyEntry> GetBucket(PropertyEntry property);
    internal void Add(PropertyEntry property, ObservableCollection`1<PropertyEntry> bucket, IComparer`1<PropertyEntry> comparer);
    internal void Refresh(ModelPropertyEntry property, ObservableCollection`1<PropertyEntry> bucket, IComparer`1<PropertyEntry> sortComparer);
    public virtual void ApplyFilter(PropertyFilter filter);
    protected virtual bool DoesPropertyMatchFilter(PropertyFilter filter, PropertyEntry property);
    internal void MarkAllPropertiesDisassociated();
    internal void MarkAttachedPropertiesDisassociated();
    internal void CullDisassociatedProperties();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Model.ModelPropertyEntry : ModelPropertyEntryBase {
    public string PropertyName { get; }
    public string DisplayName { get; }
    public Type PropertyType { get; }
    public string CategoryName { get; }
    public string Description { get; }
    public bool IsReadOnly { get; }
    public bool IsAdvanced { get; }
    public bool IsBrowsable { get; }
    public ICollection StandardValues { get; }
    public bool StandardValuesExclusive { get; }
    public PropertyValueEditor PropertyValueEditor { get; }
    public TypeConverter Converter { get; }
    public Type CommonValueType { get; }
    public bool IsMixedValue { get; }
    public PropertyValueSource Source { get; }
    public PropertyEntryCollection SubProperties { get; }
    public PropertyValueCollection Collection { get; }
    internal bool CollectionInstanceExists { get; }
    internal ICollection`1<ModelProperty> ModelPropertySet { get; }
    internal ModelProperty FirstModelProperty { get; }
    internal PropertyOrder PropertyOrder { get; }
    internal bool Disassociated { get; internal set; }
    internal bool IsAttached { get; }
    internal IEnumerable`1<Type> CategoryEditorTypes { get; }
    protected bool HasStandardValues { get; }
    public ModelPropertyEntry(ModelProperty property, ModelPropertyValue parentValue);
    public ModelPropertyEntry(IEnumerable`1<ModelProperty> propertySet, ModelPropertyValue parentValue);
    private static ModelPropertyEntry();
    public virtual string get_PropertyName();
    public virtual string get_DisplayName();
    public virtual Type get_PropertyType();
    public virtual string get_CategoryName();
    public virtual string get_Description();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsAdvanced();
    public bool get_IsBrowsable();
    public virtual ICollection get_StandardValues();
    public bool get_StandardValuesExclusive();
    public virtual PropertyValueEditor get_PropertyValueEditor();
    public virtual TypeConverter get_Converter();
    public virtual Type get_CommonValueType();
    public virtual bool get_IsMixedValue();
    public virtual PropertyValueSource get_Source();
    public virtual PropertyEntryCollection get_SubProperties();
    public virtual PropertyValueCollection get_Collection();
    internal virtual bool get_CollectionInstanceExists();
    internal ICollection`1<ModelProperty> get_ModelPropertySet();
    internal ModelProperty get_FirstModelProperty();
    internal PropertyOrder get_PropertyOrder();
    internal bool get_Disassociated();
    internal void set_Disassociated(bool value);
    internal bool get_IsAttached();
    internal IEnumerable`1<Type> get_CategoryEditorTypes();
    protected virtual bool get_HasStandardValues();
    public void SetUnderlyingModelProperty(IEnumerable`1<ModelProperty> propertySet);
    internal void Disconnect();
    protected virtual void RefreshCache();
    public virtual object GetValueCore();
    public virtual void SetValueCore(object value);
    public virtual void ClearValue();
    internal void OnUnderlyingModelChanged();
    protected virtual void OnUnderlyingSubModelChangedCore();
    protected virtual PropertyValue CreatePropertyValueInstance();
    internal virtual ModelEditingScope BeginEdit(string description);
    public virtual bool MatchesPredicate(PropertyFilterPredicate predicate);
    public sealed virtual int CompareTo(object obj);
    public virtual string ToString();
}
internal abstract class System.Activities.Presentation.Internal.PropertyEditing.Model.ModelPropertyEntryBase : PropertyEntry {
    public PropertyValueSource Source { get; }
    public bool IsMixedValue { get; }
    public Type CommonValueType { get; }
    public TypeConverter Converter { get; }
    public bool HasSubProperties { get; }
    public PropertyEntryCollection SubProperties { get; }
    public bool IsCollection { get; }
    public PropertyValueCollection Collection { get; }
    public int Depth { get; }
    public string SubPropertyHierarchyPath { get; }
    internal bool IsMarkupExtension { get; }
    internal bool CollectionInstanceExists { get; }
    protected ModelPropertyValue ModelPropertyValue { get; }
    protected ModelPropertyEntryBase(PropertyValue parentValue);
    public abstract virtual PropertyValueSource get_Source();
    public abstract virtual bool get_IsMixedValue();
    public abstract virtual Type get_CommonValueType();
    public abstract virtual TypeConverter get_Converter();
    public bool get_HasSubProperties();
    public abstract virtual PropertyEntryCollection get_SubProperties();
    public bool get_IsCollection();
    public abstract virtual PropertyValueCollection get_Collection();
    public virtual int get_Depth();
    public string get_SubPropertyHierarchyPath();
    internal bool get_IsMarkupExtension();
    internal abstract virtual bool get_CollectionInstanceExists();
    protected ModelPropertyValue get_ModelPropertyValue();
    public abstract virtual object GetValueCore();
    public abstract virtual void SetValueCore(object value);
    public abstract virtual void ClearValue();
    public void OnUnderlyingSubModelChanged();
    protected abstract virtual void OnUnderlyingSubModelChangedCore();
    protected virtual void RefreshCache();
    internal abstract virtual ModelEditingScope BeginEdit(string description);
}
[DefaultMemberAttribute("Item")]
internal class System.Activities.Presentation.Internal.PropertyEditing.Model.ModelPropertyEntryCollection : PropertyEntryCollection {
    public int Count { get; }
    public PropertyEntry Item { get; }
    public ModelPropertyEntryCollection(ModelPropertyEntry parentProperty);
    public ModelPropertyEntryCollection(ModelPropertyIndexer parentProperty);
    public virtual int get_Count();
    public virtual PropertyEntry get_Item(string propertyName);
    public virtual IEnumerator`1<PropertyEntry> GetEnumerator();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Model.ModelPropertyIndexer : ModelPropertyEntryBase {
    public int Index { get; internal set; }
    public string CategoryName { get; }
    public string Description { get; }
    public bool IsAdvanced { get; }
    public bool IsReadOnly { get; }
    public string PropertyName { get; }
    public Type PropertyType { get; }
    public PropertyValueEditor PropertyValueEditor { get; }
    public ICollection StandardValues { get; }
    public bool IsMixedValue { get; }
    public PropertyValueSource Source { get; }
    public TypeConverter Converter { get; }
    public Type CommonValueType { get; }
    public PropertyEntryCollection SubProperties { get; }
    public PropertyValueCollection Collection { get; }
    public int Depth { get; }
    internal ModelItem ModelItem { get; }
    internal bool CollectionInstanceExists { get; }
    public ModelPropertyIndexer(ModelItem modelItem, int index, ModelPropertyValueCollection parentCollection);
    private static ModelPropertyIndexer();
    public int get_Index();
    internal void set_Index(int value);
    public virtual string get_CategoryName();
    public virtual string get_Description();
    public virtual bool get_IsAdvanced();
    public virtual bool get_IsReadOnly();
    public virtual string get_PropertyName();
    public virtual Type get_PropertyType();
    public virtual PropertyValueEditor get_PropertyValueEditor();
    public virtual ICollection get_StandardValues();
    public virtual bool get_IsMixedValue();
    public virtual PropertyValueSource get_Source();
    public virtual TypeConverter get_Converter();
    public virtual Type get_CommonValueType();
    public virtual PropertyEntryCollection get_SubProperties();
    public virtual PropertyValueCollection get_Collection();
    public virtual int get_Depth();
    internal ModelItem get_ModelItem();
    internal virtual bool get_CollectionInstanceExists();
    protected virtual PropertyValue CreatePropertyValueInstance();
    public virtual object GetValueCore();
    public virtual void SetValueCore(object value);
    public virtual void ClearValue();
    internal virtual ModelEditingScope BeginEdit(string description);
    protected virtual void OnUnderlyingSubModelChangedCore();
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.Model.ModelPropertyMerger : object {
    public static IEnumerable`1<IList`1<ModelProperty>> GetMergedProperties(IEnumerable`1<ModelItem> items, int itemCount);
    public static IEnumerable`1<IList`1<ModelProperty>> GetMergedSubProperties(ICollection`1<ModelProperty> parentProperties);
    public static string GetMergedDefaultProperty(IEnumerable`1<ModelItem> items);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Model.ModelPropertyValue : PropertyValue {
    public PropertyValueSource Source { get; }
    public bool IsDefaultValue { get; }
    public bool IsMixedValue { get; }
    public bool CanConvertFromString { get; }
    public bool HasSubProperties { get; }
    public PropertyEntryCollection SubProperties { get; }
    public bool IsCollection { get; }
    public PropertyValueCollection Collection { get; }
    public PropertyValue NameSensitiveInstance { get; }
    protected bool CatchExceptions { get; }
    public ModelPropertyValue(ModelPropertyEntryBase parentProperty);
    private static ModelPropertyValue();
    public virtual PropertyValueSource get_Source();
    public virtual bool get_IsDefaultValue();
    public virtual bool get_IsMixedValue();
    public virtual bool get_CanConvertFromString();
    public virtual bool get_HasSubProperties();
    public virtual PropertyEntryCollection get_SubProperties();
    public virtual bool get_IsCollection();
    public virtual PropertyValueCollection get_Collection();
    public PropertyValue get_NameSensitiveInstance();
    protected virtual bool get_CatchExceptions();
    protected virtual void ValidateValue(object valueToValidate);
    internal void OnNameSubPropertyChanged();
    protected virtual object ConvertStringToValue(string stringToConvert);
    protected virtual string ConvertValueToString(object valueToConvert);
    protected virtual object GetValueCore();
    protected virtual void SetValueCore(object value);
    public virtual void ClearValue();
    public void OnUnderlyingModelChanged();
    public void OnUnderlyingSubModelChanged();
    protected virtual void OnPropertyValueException(PropertyValueExceptionEventArgs e);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
internal class System.Activities.Presentation.Internal.PropertyEditing.Model.ModelPropertyValueCollection : PropertyValueCollection {
    public int Count { get; }
    public PropertyValue Item { get; }
    public ModelPropertyValueCollection(ModelPropertyValue parentValue);
    public virtual int get_Count();
    public virtual PropertyValue get_Item(int index);
    public virtual PropertyValue Add(object value);
    public virtual PropertyValue Insert(object value, int index);
    public virtual bool Remove(PropertyValue propertyValue);
    public virtual void RemoveAt(int index);
    public virtual void SetIndex(int currentIndex, int newIndex);
    internal ModelItemCollection GetRawCollection();
    public virtual IEnumerator`1<PropertyValue> GetEnumerator();
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.Model.ModelUtilities : object {
    public static Type GetPropertyType(IEnumerable`1<ModelProperty> propertySet);
    public static bool AreEquivalent(ModelProperty a, ModelProperty b);
    public static object GetSafeRawValue(ModelProperty property);
    public static object GetSafeComputedValue(ModelProperty property);
    public static string GetPropertyName(PropertyValue propertyValue);
    public static string GetSubPropertyHierarchyPath(PropertyEntry property);
    public static string GetCachedSubPropertyHierarchyPath(PropertyEntry property);
    public static bool ImplementsIList(Type type);
    public static bool ImplementsICollection(Type type);
    public static Type GetCommonAncestor(Type t1, Type t2);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Model.PropertyEntryNameComparer : object {
    public static PropertyEntryNameComparer Instance;
    private static PropertyEntryNameComparer();
    public sealed virtual int Compare(PropertyEntry x, PropertyEntry y);
    public sealed virtual int Compare(object x, object y);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Model.PropertyEntryPropertyOrderComparer : object {
    public static PropertyEntryPropertyOrderComparer Instance { get; }
    private static PropertyEntryPropertyOrderComparer();
    public static PropertyEntryPropertyOrderComparer get_Instance();
    public sealed virtual int Compare(object x, object y);
    public sealed virtual int Compare(PropertyEntry x, PropertyEntry y);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.PropertyInspector : Grid {
    internal TextBlock _typeLabel;
    internal PropertyToolBar _propertyToolBar;
    internal TextBlock _noSearchResultsLabel;
    internal TextBlock _uninitializedLabel;
    internal CategoryList _categoryList;
    unknown ContextItemManager DesignerContextItemManager {public set; }
    public bool IsInfoBarNameReadOnly { get; }
    public string SelectionName { get; public set; }
    public object SelectionIcon { get; }
    public string SelectionTypeName { get; }
    public object SessionState { get; public set; }
    public bool IsReadOnly { get; internal set; }
    public bool IsInAlphaView { get; public set; }
    internal TextBlock SelectionTypeLabel { get; }
    internal PropertyToolBar PropertyToolBar { get; }
    internal TextBlock NoSearchResultsLabel { get; }
    internal TextBlock UninitializedLabel { get; }
    internal CategoryList CategoryList { get; }
    internal EditingContext EditingContext { get; internal set; }
    private static PropertyInspector();
    public void add_RootViewModified(EventHandler value);
    public void remove_RootViewModified(EventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void set_DesignerContextItemManager(ContextItemManager value);
    public bool get_IsInfoBarNameReadOnly();
    public string get_SelectionName();
    public void set_SelectionName(string value);
    public object get_SelectionIcon();
    public string get_SelectionTypeName();
    public object get_SessionState();
    public void set_SessionState(object value);
    public bool get_IsReadOnly();
    internal void set_IsReadOnly(bool value);
    public bool get_IsInAlphaView();
    public void set_IsInAlphaView(bool value);
    internal void SelectPropertyByPath(string path);
    internal TextBlock get_SelectionTypeLabel();
    internal PropertyToolBar get_PropertyToolBar();
    internal TextBlock get_NoSearchResultsLabel();
    internal TextBlock get_UninitializedLabel();
    internal CategoryList get_CategoryList();
    [CompilerGeneratedAttribute]
internal EditingContext get_EditingContext();
    [CompilerGeneratedAttribute]
internal void set_EditingContext(EditingContext value);
    internal void Dispose();
    public void OnSelectionChanged(Selection selection);
    public void RefreshSelection();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public void ClearFilterString();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.PropertyInspectorFontAndColorDictionary : ResourceDictionary {
    internal PropertyInspectorFontAndColorDictionary(Dictionary`2<string, object> fontAndColorData);
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.PropertyInspectorMergedResources : object {
    public static string FontSizeKey { get; }
    public static string FontFamilyKey { get; }
    public static string FontWeightKey { get; }
    public static string TextBrushKey { get; }
    public static string SelectedForegroundBrushKey { get; }
    public static string SelectedBackgroundBrushKey { get; }
    public static string BackgroundBrushKey { get; }
    public static string BorderBrushKey { get; }
    public static string CategoryCaptionTextBrushKey { get; }
    public static string PaneBrushKey { get; }
    public static string PopupBrushKey { get; }
    public static string ToolBarItemHoverBackgroundBrushKey { get; }
    public static string ToolBarItemHoverBorderBrushKey { get; }
    public static string ToolBarItemSelectedBackgroundBrushKey { get; }
    public static string ToolBarItemSelectedBorderBrushKey { get; }
    public static string ToolBarBackgroundBrushKey { get; }
    public static string ToolBarSeparatorBrushKey { get; }
    public static string ToolBarTextBoxBorderBrushKey { get; }
    public static string DefaultCollectionStringValue { get; }
    private static PropertyInspectorMergedResources();
    public static string get_FontSizeKey();
    public static string get_FontFamilyKey();
    public static string get_FontWeightKey();
    public static string get_TextBrushKey();
    public static string get_SelectedForegroundBrushKey();
    public static string get_SelectedBackgroundBrushKey();
    public static string get_BackgroundBrushKey();
    public static string get_BorderBrushKey();
    public static string get_CategoryCaptionTextBrushKey();
    public static string get_PaneBrushKey();
    public static string get_PopupBrushKey();
    public static string get_ToolBarItemHoverBackgroundBrushKey();
    public static string get_ToolBarItemHoverBorderBrushKey();
    public static string get_ToolBarItemSelectedBackgroundBrushKey();
    public static string get_ToolBarItemSelectedBorderBrushKey();
    public static string get_ToolBarBackgroundBrushKey();
    public static string get_ToolBarSeparatorBrushKey();
    public static string get_ToolBarTextBoxBorderBrushKey();
    public static string get_DefaultCollectionStringValue();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.PropertyPanel : Panel {
    public static DependencyProperty OutlineBrushProperty;
    public static DependencyProperty SelectionBrushProperty;
    public static DependencyProperty OutlineThicknessProperty;
    public static DependencyProperty IgnoreFirstChildBackgroundProperty;
    public static DependencyProperty LastChildWidthProperty;
    public static DependencyProperty LevelProperty;
    public static DependencyProperty LevelIndentProperty;
    public double LastChildWidth { get; public set; }
    public int Level { get; public set; }
    public double LevelIndent { get; public set; }
    public Brush OutlineBrush { get; public set; }
    public Brush SelectionBrush { get; public set; }
    public double OutlineThickness { get; public set; }
    public bool IgnoreFirstChildBackground { get; public set; }
    private static PropertyPanel();
    public double get_LastChildWidth();
    public void set_LastChildWidth(double value);
    public int get_Level();
    public void set_Level(int value);
    public double get_LevelIndent();
    public void set_LevelIndent(double value);
    public Brush get_OutlineBrush();
    public void set_OutlineBrush(Brush value);
    public Brush get_SelectionBrush();
    public void set_SelectionBrush(Brush value);
    public double get_OutlineThickness();
    public void set_OutlineThickness(double value);
    public bool get_IgnoreFirstChildBackground();
    public void set_IgnoreFirstChildBackground(bool value);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnRender(DrawingContext dc);
}
internal enum System.Activities.Presentation.Internal.PropertyEditing.PropertySelectionMode : Enum {
    public int value__;
    public static PropertySelectionMode Default;
    public static PropertySelectionMode Sticky;
}
internal class System.Activities.Presentation.Internal.PropertyEditing.PropertyStateContainer : PersistedStateContainer {
    public static PropertyStateContainer Instance { get; }
    public static PropertyStateContainer get_Instance();
    public PropertyState GetPropertyState(string propertyName);
    protected virtual PersistedState CreateDefaultState(object key);
    protected virtual PersistedState DeserializeState(string serializedValue);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.PropertyToolBar : Control {
    public static DependencyProperty CurrentViewManagerProperty;
    public static DependencyProperty CategoryListProperty;
    public IPropertyViewManager CurrentViewManager { get; public set; }
    public CategoryList CategoryList { get; public set; }
    public string PersistenceId { get; public set; }
    public bool IsCategoryViewSelected { get; public set; }
    public bool IsAlphaViewSelected { get; public set; }
    internal RadioButton ByCategoryViewButton { get; }
    internal RadioButton AlphaViewButton { get; }
    internal TextBlock SearchLabel { get; }
    internal TextBox SearchTextBox { get; }
    internal Button SearchClearButton { get; }
    private static PropertyToolBar();
    public void add_CurrentViewManagerChanged(EventHandler value);
    public void remove_CurrentViewManagerChanged(EventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public IPropertyViewManager get_CurrentViewManager();
    public void set_CurrentViewManager(IPropertyViewManager value);
    public CategoryList get_CategoryList();
    public void set_CategoryList(CategoryList value);
    public string get_PersistenceId();
    public void set_PersistenceId(string value);
    public bool get_IsCategoryViewSelected();
    public void set_IsCategoryViewSelected(bool value);
    public bool get_IsAlphaViewSelected();
    public void set_IsAlphaViewSelected(bool value);
    internal RadioButton get_ByCategoryViewButton();
    internal RadioButton get_AlphaViewButton();
    internal TextBlock get_SearchLabel();
    internal TextBox get_SearchTextBox();
    internal Button get_SearchClearButton();
    protected virtual AutomationPeer OnCreateAutomationPeer();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.PropertyValueDialogControl : Grid {
    internal ContentControl _contentControl;
    internal Button _OKButton;
    internal Button _cancelButton;
    public PropertyValueDialogControl(PropertyEntry property, DataTemplate valueDialogTemplate);
    internal void add_CloseParentDialog(EventHandler value);
    internal void remove_CloseParentDialog(EventHandler value);
    public void OnParentDialogClosing();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.PropertyValueDialogHost : object {
    public static void AttachOpenDialogHandlers(UIElement dialogRoot);
    public void OnCanOpenDialogWindow(object sender, CanExecuteRoutedEventArgs e);
    public void OnOpenDialogWindow(object sender, ExecutedRoutedEventArgs e);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.PropertyValueEditorCommandHandler : object {
    public PropertyValueEditorCommandHandler(UIElement commandHost);
    public sealed virtual void Dispose();
    public void CommitOpenTransactions();
    public void AbortOpenTransactions();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Resources.PropertyInspectorResources : object {
    public static string DefaultCollectionStringValue { get; }
    public static string NamePropertyHeader { get; }
    public static string PropertyEditing_AlphabeticalCaption { get; }
    public static string PropertyEditing_CategorizedCaption { get; }
    public static string PropertyEditing_ClearButtonCaption { get; }
    public static string get_DefaultCollectionStringValue();
    public static string get_NamePropertyHeader();
    public static string get_PropertyEditing_AlphabeticalCaption();
    public static string get_PropertyEditing_CategorizedCaption();
    public static string get_PropertyEditing_ClearButtonCaption();
    public static ResourceDictionary GetResources();
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.Resources.ResourceUtilities : object {
    public static double GetDouble(FrameworkElement element, string key, double fallbackValue);
    public static Size GetDesiredTypeIconSize(FrameworkElement queryRoot);
}
internal enum System.Activities.Presentation.Internal.PropertyEditing.SearchDirection : Enum {
    public int value__;
    public static SearchDirection Next;
    public static SearchDirection Previous;
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Selection.CategoryContainerSelectionPathInterpreter : object {
    public static CategoryContainerSelectionPathInterpreter Instance { get; }
    public string PathTypeId { get; }
    private static CategoryContainerSelectionPathInterpreter();
    public static CategoryContainerSelectionPathInterpreter get_Instance();
    public sealed virtual string get_PathTypeId();
    public SelectionPath ConstructSelectionPath(string categoryName, bool isAdvanced);
    public sealed virtual DependencyObject ResolveSelectionPath(CategoryList root, SelectionPath path, Boolean& pendingGeneration);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Selection.CategoryEditorSelectionPathInterpreter : object {
    public static CategoryEditorSelectionPathInterpreter Instance { get; }
    public string PathTypeId { get; }
    private static CategoryEditorSelectionPathInterpreter();
    public static CategoryEditorSelectionPathInterpreter get_Instance();
    public sealed virtual string get_PathTypeId();
    public SelectionPath ConstructSelectionPath(string editorTypeName);
    public sealed virtual DependencyObject ResolveSelectionPath(CategoryList root, SelectionPath path, Boolean& pendingGeneration);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Selection.CategoryEditorSelectionStop : object {
    public bool IsExpanded { get; public set; }
    public bool IsExpandable { get; }
    public SelectionPath Path { get; }
    public string Description { get; }
    public CategoryEditorSelectionStop(string editorTypeName);
    public sealed virtual bool get_IsExpanded();
    public sealed virtual void set_IsExpanded(bool value);
    public sealed virtual bool get_IsExpandable();
    public sealed virtual SelectionPath get_Path();
    public sealed virtual string get_Description();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Selection.CategorySelectionStop : object {
    public bool IsExpanded { get; public set; }
    public bool IsExpandable { get; }
    public SelectionPath Path { get; }
    public string Description { get; }
    public CategorySelectionStop(CiderCategoryContainer parent, bool isAdvanced);
    public sealed virtual bool get_IsExpanded();
    public sealed virtual void set_IsExpanded(bool value);
    public sealed virtual bool get_IsExpandable();
    public sealed virtual SelectionPath get_Path();
    public sealed virtual string get_Description();
}
internal interface System.Activities.Presentation.Internal.PropertyEditing.Selection.ISelectionPathInterpreter {
    public string PathTypeId { get; }
    public abstract virtual string get_PathTypeId();
    public abstract virtual DependencyObject ResolveSelectionPath(CategoryList root, SelectionPath path, Boolean& pendingGeneration);
}
internal interface System.Activities.Presentation.Internal.PropertyEditing.Selection.ISelectionStop {
    public bool IsExpanded { get; public set; }
    public bool IsExpandable { get; }
    public SelectionPath Path { get; }
    public string Description { get; }
    public abstract virtual bool get_IsExpanded();
    public abstract virtual void set_IsExpanded(bool value);
    public abstract virtual bool get_IsExpandable();
    public abstract virtual SelectionPath get_Path();
    public abstract virtual string get_Description();
}
[EditorBrowsableAttribute("1")]
internal static class System.Activities.Presentation.Internal.PropertyEditing.Selection.PropertySelection : object {
    internal static DependencyProperty IsSelectedProperty;
    internal static DependencyProperty SelectionStopProperty;
    internal static DependencyProperty IsSelectionStopDoubleClickTargetProperty;
    internal static DependencyProperty IsSelectionScopeProperty;
    internal static DependencyProperty KeyDownTargetProperty;
    private static PropertySelection();
    internal static bool GetIsSelected(DependencyObject obj);
    internal static void SetIsSelected(DependencyObject obj, bool value);
    internal static ISelectionStop GetSelectionStop(DependencyObject obj);
    internal static void SetSelectionStop(DependencyObject obj, ISelectionStop value);
    internal static void ClearSelectionStop(DependencyObject obj);
    internal static bool GetIsSelectionStopDoubleClickTarget(DependencyObject obj);
    internal static void SetIsSelectionStopDoubleClickTarget(DependencyObject obj, bool value);
    internal static void ClearIsSelectionStopDoubleClickTarget(DependencyObject obj);
    internal static bool GetIsSelectionScope(DependencyObject obj);
    internal static void SetIsSelectionScope(DependencyObject obj, bool value);
    internal static FrameworkElement GetKeyDownTarget(DependencyObject obj);
    internal static void SetKeyDownTarget(DependencyObject obj, FrameworkElement value);
    internal static T FindParentSelectionStop(DependencyObject element);
    internal static T FindNeighborSelectionStop(DependencyObject element, SearchDirection direction);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Selection.PropertySelectionPathInterpreter : object {
    internal static string PropertyPathTypeId;
    public static PropertySelectionPathInterpreter Instance { get; }
    public string PathTypeId { get; }
    private static PropertySelectionPathInterpreter();
    public static PropertySelectionPathInterpreter get_Instance();
    public sealed virtual string get_PathTypeId();
    public SelectionPath ConstructSelectionPath(PropertyEntry property);
    public sealed virtual DependencyObject ResolveSelectionPath(CategoryList root, SelectionPath path, Boolean& pendingGeneration);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Selection.PropertySelectionStop : object {
    public bool IsExpanded { get; public set; }
    public bool IsExpandable { get; }
    public SelectionPath Path { get; }
    public string Description { get; }
    public PropertySelectionStop(PropertyEntry property);
    public sealed virtual bool get_IsExpanded();
    public sealed virtual void set_IsExpanded(bool value);
    public sealed virtual bool get_IsExpandable();
    public sealed virtual SelectionPath get_Path();
    public sealed virtual string get_Description();
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Selection.SelectionPath : object {
    public string PathTypeId { get; }
    public string Path { get; }
    public object State { get; }
    public SelectionPath(string pathTypeId, string path);
    public string get_PathTypeId();
    public string get_Path();
    public object get_State();
    public static SelectionPath FromState(object state);
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.Selection.SelectionPathResolver : object {
    private static SelectionPathResolver();
    public static DependencyObject ResolveSelectionPath(CategoryList root, SelectionPath path, Boolean& pendingGeneration);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.SharedPropertyValueColumnWidthContainer : DependencyObject {
    [EditorBrowsableAttribute("1")]
public static DependencyProperty OwningSharedPropertyValueColumnWidthContainerProperty;
    [EditorBrowsableAttribute("1")]
public GridLength ValueColumnWidth { get; public set; }
    [EditorBrowsableAttribute("1")]
public double ContainerWidth { get; internal set; }
    internal double ValueColumnPercentage { get; internal set; }
    private static SharedPropertyValueColumnWidthContainer();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public GridLength get_ValueColumnWidth();
    public void set_ValueColumnWidth(GridLength value);
    public double get_ContainerWidth();
    internal void set_ContainerWidth(double value);
    internal double get_ValueColumnPercentage();
    internal void set_ValueColumnPercentage(double value);
    [EditorBrowsableAttribute("1")]
public static void SetOwningSharedPropertyValueColumnWidthContainer(DependencyObject obj, SharedPropertyValueColumnWidthContainer value);
    [EditorBrowsableAttribute("1")]
public static SharedPropertyValueColumnWidthContainer GetOwningSharedPropertyValueColumnWidthContainer(DependencyObject obj);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.State.AggregateStateContainer : object {
    public AggregateStateContainer(IStateContainer[] containers);
    public sealed virtual object RetrieveState();
    public sealed virtual void RestoreState(object state);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.State.CategoryState : PersistedState {
    public object Key { get; }
    public bool IsSignificant { get; }
    public bool CategoryExpanded { get; public set; }
    public bool AdvancedSectionExpanded { get; public set; }
    public CategoryState(string categoryName);
    public virtual object get_Key();
    public virtual bool get_IsSignificant();
    public bool get_CategoryExpanded();
    public void set_CategoryExpanded(bool value);
    public bool get_AdvancedSectionExpanded();
    public void set_AdvancedSectionExpanded(bool value);
    protected virtual string SerializeCore();
    public static CategoryState Deserialize(string categoryStateString);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.State.CategoryStateContainer : PersistedStateContainer {
    public CategoryState GetCategoryState(string categoryName);
    protected virtual PersistedState CreateDefaultState(object key);
    protected virtual PersistedState DeserializeState(string serializedValue);
}
internal interface System.Activities.Presentation.Internal.PropertyEditing.State.IStateContainer {
    public abstract virtual object RetrieveState();
    public abstract virtual void RestoreState(object state);
}
internal abstract class System.Activities.Presentation.Internal.PropertyEditing.State.PersistedState : object {
    public bool IsSignificant { get; }
    public object Key { get; }
    public abstract virtual bool get_IsSignificant();
    public abstract virtual object get_Key();
    public string Serialize();
    protected abstract virtual string SerializeCore();
}
internal abstract class System.Activities.Presentation.Internal.PropertyEditing.State.PersistedStateContainer : object {
    protected PersistedState GetState(object key);
    protected abstract virtual PersistedState CreateDefaultState(object key);
    protected abstract virtual PersistedState DeserializeState(string serializedValue);
    public sealed virtual void RestoreState(object state);
    public sealed virtual object RetrieveState();
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.State.PersistedStateUtilities : object {
    public static string Escape(string s);
    public static string Unescape(string s);
    public static Nullable`1<bool> DigitToBool(string digit);
    public static string BoolToDigit(bool value);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.State.PropertyActiveEditModeStateContainer : object {
    public static PropertyActiveEditModeStateContainer Instance;
    private static PropertyActiveEditModeStateContainer();
    public PropertyContainerEditMode GetActiveEditMode(PropertyEntry property);
    public void StoreActiveEditMode(PropertyEntry property, PropertyContainerEditMode editMode);
    public sealed virtual object RetrieveState();
    public sealed virtual void RestoreState(object state);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.State.PropertyState : PersistedState {
    public object Key { get; }
    public bool IsSignificant { get; }
    public bool SubPropertiesExpanded { get; public set; }
    public PropertyState(string propertyName);
    public virtual object get_Key();
    public virtual bool get_IsSignificant();
    public bool get_SubPropertiesExpanded();
    public void set_SubPropertiesExpanded(bool value);
    protected virtual string SerializeCore();
    public static PropertyState Deserialize(string propertyStateString);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.State.PropertyViewManagerStateContainer : object {
    public static string RootPropertyInspectorPersistenceId;
    public static PropertyViewManagerStateContainer Instance;
    private static PropertyViewManagerStateContainer();
    public void add_ContentRestored(EventHandler value);
    public void remove_ContentRestored(EventHandler value);
    public IPropertyViewManager GetPropertyViewManager(string persistenceId);
    public void StorePropertyViewManager(string persistenceId, IPropertyViewManager manager);
    public sealed virtual object RetrieveState();
    public sealed virtual void RestoreState(object state);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Views.AlphabeticalViewManager : object {
    public static AlphabeticalViewManager Instance;
    public bool ShowCategoryHeaders { get; }
    private static AlphabeticalViewManager();
    public sealed virtual bool get_ShowCategoryHeaders();
    public sealed virtual ModelPropertyEntry AddProperty(IEnumerable`1<ModelProperty> propertySet, string propertyName, CategoryList categoryList);
    public sealed virtual Dictionary`2<Type, object> GetCategoryEditors(Type ownerType, CategoryList categoryList);
    public sealed virtual SelectionPath GetDefaultSelectionPath(CategoryList categoryList);
    public sealed virtual string GetCategoryName(PropertyEntry property);
    public sealed virtual void AddProperty(PropertyEntry property, ModelCategoryEntry category);
}
internal class System.Activities.Presentation.Internal.PropertyEditing.Views.ByCategoryViewManager : object {
    public static ByCategoryViewManager Instance;
    public bool ShowCategoryHeaders { get; }
    private static ByCategoryViewManager();
    public sealed virtual bool get_ShowCategoryHeaders();
    public sealed virtual ModelPropertyEntry AddProperty(IEnumerable`1<ModelProperty> propertySet, string propertyName, CategoryList categoryList);
    public sealed virtual Dictionary`2<Type, object> GetCategoryEditors(Type ownerType, CategoryList categoryList);
    public sealed virtual SelectionPath GetDefaultSelectionPath(CategoryList categoryList);
    public sealed virtual string GetCategoryName(PropertyEntry property);
    public sealed virtual void AddProperty(PropertyEntry property, ModelCategoryEntry category);
}
internal interface System.Activities.Presentation.Internal.PropertyEditing.Views.IPropertyViewManager {
    public bool ShowCategoryHeaders { get; }
    public abstract virtual bool get_ShowCategoryHeaders();
    public abstract virtual ModelPropertyEntry AddProperty(IEnumerable`1<ModelProperty> propertySet, string propertyName, CategoryList categoryList);
    public abstract virtual Dictionary`2<Type, object> GetCategoryEditors(Type ownerType, CategoryList categoryList);
    public abstract virtual SelectionPath GetDefaultSelectionPath(CategoryList categoryList);
    public abstract virtual string GetCategoryName(PropertyEntry property);
    public abstract virtual void AddProperty(PropertyEntry property, ModelCategoryEntry category);
}
internal static class System.Activities.Presentation.Internal.PropertyEditing.VisualTreeUtils : object {
    public static T GetNamedChild(DependencyObject container, string name);
    public static T GetNamedChild(DependencyObject container, string name, int searchDepth);
    public static T GetTemplateChild(DependencyObject element);
    public static T FindVisualAncestor(DependencyObject child);
    public static T FindFocusableElement(T reference);
    public static T FindFocusableParent(UIElement reference);
    public static DependencyObject GetIndexedVisualParent(DependencyObject child, Int32& childrenCount, Int32& childIndex);
    public static bool IsVisible(UIElement element);
    public static ICollection`1<T> PrunVisualTree(Visual root);
    public static UInt32 GetTreeDepth(DependencyObject element);
}
internal interface System.Activities.Presentation.IUndoEngineOperations {
    public abstract virtual void AddUndoUnitCore(UndoUnit unit);
    public abstract virtual bool UndoCore();
    public abstract virtual bool RedoCore();
}
public interface System.Activities.Presentation.IWorkflowDesignerStorageService {
    public abstract virtual void AddData(string key, object value);
    public abstract virtual void RemoveData(string key);
    public abstract virtual object GetData(string key);
    public abstract virtual void SetData(string key, object value);
    public abstract virtual bool ContainsKey(string key);
}
public interface System.Activities.Presentation.IXamlLoadErrorService {
    public abstract virtual void ShowXamlLoadErrors(IList`1<XamlLoadErrorInfo> errors);
}
public static class System.Activities.Presentation.Metadata.ActivityArgumentHelper : object {
    private static ActivityArgumentHelper();
    public static void RegisterAccessorsGenerator(Type activityType, Func`2<Activity, IEnumerable`1<ArgumentAccessor>> argumentAccessorsGenerator);
    internal static bool TryGetArgumentAccessorsGenerator(Type activityType, Func`2& argumentAccessorsGenerator);
    internal static void UpdateInvalidArgumentsIfNecessary(object sender, ErrorsMarkedEventArgs args);
    internal static List`1<ExpressionReplacement> ComputeExpressionReplacements(IEnumerable`1<ActivityWithResult> expressions, EditingContext context, ArgumentAccessorWrapperCache argumentAccessorWrapperCache);
    internal static ExpressionReplacement ComputeExpressionReplacement(ActivityWithResult expression, Activity parentActivity, EditingContext context, ArgumentAccessorWrapperCache argumentAccessorWrapperCache, Type preferredReturnType);
}
internal enum System.Activities.Presentation.Metadata.ActivityDelegateArgumentDirection : Enum {
    public int value__;
    public static ActivityDelegateArgumentDirection In;
    public static ActivityDelegateArgumentDirection Out;
}
internal class System.Activities.Presentation.Metadata.ActivityDelegateArgumentMetadata : object {
    public string Name { get; public set; }
    public ActivityDelegateArgumentDirection Direction { get; public set; }
    public Type Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ActivityDelegateArgumentDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(ActivityDelegateArgumentDirection value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
}
internal class System.Activities.Presentation.Metadata.ActivityDelegateMetadata : Collection`1<ActivityDelegateArgumentMetadata> {
}
public class System.Activities.Presentation.Metadata.AttributeCallback : MulticastDelegate {
    public AttributeCallback(object object, IntPtr method);
    public virtual void Invoke(AttributeCallbackBuilder builder);
    public virtual IAsyncResult BeginInvoke(AttributeCallbackBuilder builder, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Activities.Presentation.Metadata.AttributeCallbackBuilder : object {
    public Type CallbackType { get; }
    internal AttributeCallbackBuilder(MutableAttributeTable table, Type callbackType);
    public Type get_CallbackType();
    public void AddCustomAttributes(Attribute[] attributes);
    public void AddCustomAttributes(MemberDescriptor descriptor, Attribute[] attributes);
    public void AddCustomAttributes(MemberInfo member, Attribute[] attributes);
    public void AddCustomAttributes(string memberName, Attribute[] attributes);
    public void AddCustomAttributes(DependencyProperty dp, Attribute[] attributes);
}
public class System.Activities.Presentation.Metadata.AttributeTable : object {
    public IEnumerable`1<Type> AttributedTypes { get; }
    internal MutableAttributeTable MutableTable { get; }
    internal AttributeTable(MutableAttributeTable attributes);
    public IEnumerable`1<Type> get_AttributedTypes();
    internal MutableAttributeTable get_MutableTable();
    public bool ContainsAttributes(Type type);
    public IEnumerable GetCustomAttributes(Type type);
    public IEnumerable GetCustomAttributes(Type ownerType, MemberDescriptor descriptor);
    public IEnumerable GetCustomAttributes(Type ownerType, DependencyProperty dp);
    public IEnumerable GetCustomAttributes(Type ownerType, MemberInfo member);
    public IEnumerable GetCustomAttributes(Type ownerType, string memberName);
    internal void DebugValidateProvider();
}
public class System.Activities.Presentation.Metadata.AttributeTableBuilder : object {
    public void AddCallback(Type type, AttributeCallback callback);
    public void AddCustomAttributes(Type type, Attribute[] attributes);
    public void AddCustomAttributes(Type ownerType, MemberDescriptor descriptor, Attribute[] attributes);
    public void AddCustomAttributes(Type ownerType, MemberInfo member, Attribute[] attributes);
    public void AddCustomAttributes(Type ownerType, string memberName, Attribute[] attributes);
    public void AddCustomAttributes(Type ownerType, DependencyProperty dp, Attribute[] attributes);
    public void AddTable(AttributeTable table);
    public AttributeTable CreateTable();
    public void ValidateTable();
}
public class System.Activities.Presentation.Metadata.AttributeTableValidationException : Exception {
    public IEnumerable`1<string> ValidationErrors { get; }
    public AttributeTableValidationException(string message);
    public AttributeTableValidationException(string message, Exception inner);
    public AttributeTableValidationException(string message, IEnumerable`1<string> validationErrors);
    public AttributeTableValidationException(string message, Exception inner, IEnumerable`1<string> validationErrors);
    protected AttributeTableValidationException(SerializationInfo info, StreamingContext context);
    public IEnumerable`1<string> get_ValidationErrors();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public interface System.Activities.Presentation.Metadata.IRegisterMetadata {
    public abstract virtual void Register();
}
public static class System.Activities.Presentation.Metadata.MetadataStore : object {
    private static MetadataStore();
    public static void AddAttributeTable(AttributeTable table);
    internal static void AddSystemAttributeTable(AttributeTable table);
}
internal class System.Activities.Presentation.MiniMapControl : UserControl {
    public static DependencyProperty MapSourceProperty;
    internal MiniMapControl controlRoot;
    internal Grid contentGrid;
    internal Canvas lookupCanvas;
    internal Rectangle lookupWindow;
    public ScrollViewer MapSource { get; public set; }
    private static MiniMapControl();
    public ScrollViewer get_MapSource();
    public void set_MapSource(ScrollViewer value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseButtonEventArgs e);
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.Model.AttachablePropertyChange : ModelChange {
    public ModelItem Owner { get; public set; }
    public AttachableMemberIdentifier AttachablePropertyIdentifier { get; public set; }
    public object OldValue { get; public set; }
    public object NewValue { get; public set; }
    public string PropertyName { get; public set; }
    public string Description { get; }
    [CompilerGeneratedAttribute]
public ModelItem get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(ModelItem value);
    [CompilerGeneratedAttribute]
public AttachableMemberIdentifier get_AttachablePropertyIdentifier();
    [CompilerGeneratedAttribute]
public void set_AttachablePropertyIdentifier(AttachableMemberIdentifier value);
    [CompilerGeneratedAttribute]
public object get_OldValue();
    [CompilerGeneratedAttribute]
public void set_OldValue(object value);
    [CompilerGeneratedAttribute]
public object get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(object value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    public virtual string get_Description();
    public virtual bool Apply();
    public virtual Change GetInverse();
}
public class System.Activities.Presentation.Model.AttachedPropertiesService : object {
    public void AddProperty(AttachedProperty property);
    internal IEnumerable`1<AttachedProperty> GetAttachedProperties(Type modelItemType);
}
public abstract class System.Activities.Presentation.Model.AttachedProperty : object {
    public Type Type { get; }
    public bool IsReadOnly { get; }
    public bool IsBrowsable { get; public set; }
    internal bool IsVisibleToModelItem { get; internal set; }
    public string Name { get; public set; }
    public Type OwnerType { get; public set; }
    public abstract virtual Type get_Type();
    public abstract virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public bool get_IsBrowsable();
    [CompilerGeneratedAttribute]
public void set_IsBrowsable(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsVisibleToModelItem();
    [CompilerGeneratedAttribute]
internal void set_IsVisibleToModelItem(bool value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public Type get_OwnerType();
    public void set_OwnerType(Type value);
    public abstract virtual object GetValue(ModelItem modelItem);
    public abstract virtual void SetValue(ModelItem modelItem, object value);
    public abstract virtual void ResetValue(ModelItem modelItem);
    public void NotifyPropertyChanged(ModelItem modelItem);
}
public class System.Activities.Presentation.Model.AttachedProperty`1 : AttachedProperty {
    public Func`2<ModelItem, T> Getter { get; public set; }
    public Action`2<ModelItem, T> Setter { get; public set; }
    public Type Type { get; }
    public bool IsReadOnly { get; }
    [CompilerGeneratedAttribute]
public Func`2<ModelItem, T> get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Func`2<ModelItem, T> value);
    [CompilerGeneratedAttribute]
public Action`2<ModelItem, T> get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Action`2<ModelItem, T> value);
    public virtual Type get_Type();
    public virtual bool get_IsReadOnly();
    public virtual object GetValue(ModelItem modelItem);
    public virtual void SetValue(ModelItem modelItem, object Value);
    public virtual void ResetValue(ModelItem modelItem);
}
internal class System.Activities.Presentation.Model.AttachedPropertyDescriptor : PropertyDescriptor {
    public AttributeCollection Attributes { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public bool IsBrowsable { get; }
    public AttachedPropertyDescriptor(AttachedProperty AttachedProperty, ModelItem owner);
    public virtual AttributeCollection get_Attributes();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool get_IsBrowsable();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
public abstract class System.Activities.Presentation.Model.AttachedPropertyInfo : object {
    public string PropertyName { get; public set; }
    internal bool IsBrowsable { get; internal set; }
    internal bool IsVisibleToModelItem { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    internal bool get_IsBrowsable();
    internal void set_IsBrowsable(bool value);
    internal bool get_IsVisibleToModelItem();
    internal void set_IsVisibleToModelItem(bool value);
    internal abstract virtual void Register(ViewStateAttachedPropertyFeature viewStateAttachedPropertyFeature);
}
public class System.Activities.Presentation.Model.AttachedPropertyInfo`1 : AttachedPropertyInfo {
    public T DefaultValue { get; public set; }
    [CompilerGeneratedAttribute]
public T get_DefaultValue();
    [CompilerGeneratedAttribute]
public void set_DefaultValue(T value);
    internal virtual void Register(ViewStateAttachedPropertyFeature viewStateAttachedPropertyFeature);
}
internal class System.Activities.Presentation.Model.BackPointer : LinkBase {
    public BackPointer(ModelItem sourceVertex, ModelItem destinationVertex);
    public BackPointer(string propertyName, ModelItem sourceVertex, ModelItem destinationVertex);
}
public abstract class System.Activities.Presentation.Model.Change : object {
    public string Description { get; }
    public abstract virtual string get_Description();
    public abstract virtual bool Apply();
    public abstract virtual Change GetInverse();
}
internal class System.Activities.Presentation.Model.CollectionChange : ModelChange {
    public ModelItemCollection Collection { get; public set; }
    public int Index { get; public set; }
    public ModelItem Item { get; public set; }
    public OperationType Operation { get; public set; }
    public ModelTreeManager ModelTreeManager { get; public set; }
    public string Description { get; }
    [CompilerGeneratedAttribute]
public ModelItemCollection get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(ModelItemCollection value);
    [CompilerGeneratedAttribute]
public int get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(int value);
    [CompilerGeneratedAttribute]
public ModelItem get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(ModelItem value);
    [CompilerGeneratedAttribute]
public OperationType get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(OperationType value);
    [CompilerGeneratedAttribute]
public ModelTreeManager get_ModelTreeManager();
    [CompilerGeneratedAttribute]
public void set_ModelTreeManager(ModelTreeManager value);
    public virtual string get_Description();
    public virtual bool Apply();
    public virtual Change GetInverse();
}
[FlagsAttribute]
public enum System.Activities.Presentation.Model.CreateOptions : Enum {
    public int value__;
    public static CreateOptions None;
    public static CreateOptions InitializeDefaults;
}
internal class System.Activities.Presentation.Model.DictionaryChange : ModelChange {
    public ModelItemDictionary Dictionary { get; public set; }
    public OperationType Operation { get; public set; }
    public ModelItem Key { get; public set; }
    public ModelItem Value { get; public set; }
    public ModelTreeManager ModelTreeManager { get; public set; }
    public string Description { get; }
    [CompilerGeneratedAttribute]
public ModelItemDictionary get_Dictionary();
    [CompilerGeneratedAttribute]
public void set_Dictionary(ModelItemDictionary value);
    [CompilerGeneratedAttribute]
public OperationType get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(OperationType value);
    [CompilerGeneratedAttribute]
public ModelItem get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(ModelItem value);
    [CompilerGeneratedAttribute]
public ModelItem get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(ModelItem value);
    [CompilerGeneratedAttribute]
public ModelTreeManager get_ModelTreeManager();
    [CompilerGeneratedAttribute]
public void set_ModelTreeManager(ModelTreeManager value);
    public virtual string get_Description();
    public virtual bool Apply();
    public virtual Change GetInverse();
}
internal class System.Activities.Presentation.Model.DictionaryEditChange : ModelChange {
    public ModelItemDictionary Dictionary { get; public set; }
    public ModelItem Key { get; public set; }
    public ModelItem OldValue { get; public set; }
    public ModelItem NewValue { get; public set; }
    public ModelTreeManager ModelTreeManager { get; public set; }
    public string Description { get; }
    [CompilerGeneratedAttribute]
public ModelItemDictionary get_Dictionary();
    [CompilerGeneratedAttribute]
public void set_Dictionary(ModelItemDictionary value);
    [CompilerGeneratedAttribute]
public ModelItem get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(ModelItem value);
    [CompilerGeneratedAttribute]
public ModelItem get_OldValue();
    [CompilerGeneratedAttribute]
public void set_OldValue(ModelItem value);
    [CompilerGeneratedAttribute]
public ModelItem get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(ModelItem value);
    [CompilerGeneratedAttribute]
public ModelTreeManager get_ModelTreeManager();
    [CompilerGeneratedAttribute]
public void set_ModelTreeManager(ModelTreeManager value);
    public virtual string get_Description();
    public virtual bool Apply();
    public virtual Change GetInverse();
}
internal class System.Activities.Presentation.Model.Edge : LinkBase {
    public Edge(ModelItem sourceVertex, ModelItem destinationVertex);
    public Edge(string propertyName, ModelItem sourceVertex, ModelItem destinationVertex);
}
public class System.Activities.Presentation.Model.EditingScope : ModelEditingScope {
    public bool HasEffectiveChanges { get; internal set; }
    internal bool HasModelChanges { get; internal set; }
    internal bool SuppressUndo { get; internal set; }
    internal ReadOnlyCollection`1<ModelItem> ItemsAdded { get; }
    internal ReadOnlyCollection`1<ModelItem> ItemsRemoved { get; }
    internal bool SuppressValidationOnComplete { get; internal set; }
    public List`1<Change> Changes { get; }
    internal EditingScope(ModelTreeManager modelTreeManager, EditingScope outerScope);
    public bool get_HasEffectiveChanges();
    internal void set_HasEffectiveChanges(bool value);
    [CompilerGeneratedAttribute]
internal bool get_HasModelChanges();
    [CompilerGeneratedAttribute]
internal void set_HasModelChanges(bool value);
    internal bool get_SuppressUndo();
    internal void set_SuppressUndo(bool value);
    internal ReadOnlyCollection`1<ModelItem> get_ItemsAdded();
    internal ReadOnlyCollection`1<ModelItem> get_ItemsRemoved();
    [CompilerGeneratedAttribute]
internal bool get_SuppressValidationOnComplete();
    [CompilerGeneratedAttribute]
internal void set_SuppressValidationOnComplete(bool value);
    public List`1<Change> get_Changes();
    internal void EditingScope_ModelItemsAdded(object sender, ModelItemsAddedEventArgs e);
    internal void EditingScope_ModelItemsRemoved(object sender, ModelItemsRemovedEventArgs e);
    internal void HandleModelItemsAdded(IEnumerable`1<ModelItem> modelItems);
    internal void HandleModelItemsRemoved(IEnumerable`1<ModelItem> modelItems);
    protected virtual void OnComplete();
    protected virtual bool CanComplete();
    protected virtual void OnRevert(bool finalizing);
    protected virtual bool OnException(Exception e);
}
public class System.Activities.Presentation.Model.EditingScopeEventArgs : EventArgs {
    public EditingScope EditingScope { get; public set; }
    [CompilerGeneratedAttribute]
public EditingScope get_EditingScope();
    [CompilerGeneratedAttribute]
public void set_EditingScope(EditingScope value);
}
internal static class System.Activities.Presentation.Model.EnumValidator : object {
    public static bool IsValid(CreateOptions value);
}
internal class System.Activities.Presentation.Model.FakeModelItemImpl : ModelItemImpl {
    public ModelItem Root { get; }
    public FakeModelItemImpl(ModelTreeManager modelTreeManager, Type itemType, object instance, FakeModelItemImpl parent);
    public virtual ModelItem get_Root();
    protected virtual void OnPropertyChanged(string propertyName);
}
internal class System.Activities.Presentation.Model.FakeModelNotifyPropertyChange : ModelChange {
    public string Description { get; }
    public FakeModelNotifyPropertyChange(IModelTreeItem modelTreeItem, string propertyName);
    public virtual string get_Description();
    public virtual bool Apply();
    public virtual Change GetInverse();
}
internal class System.Activities.Presentation.Model.FakeModelPropertyImpl : ModelPropertyImpl {
    public ModelItemCollection Collection { get; }
    public bool IsCollection { get; }
    public ModelItemDictionary Dictionary { get; }
    public bool IsDictionary { get; }
    public ModelItem Value { get; }
    public FakeModelPropertyImpl(FakeModelItemImpl parent, PropertyDescriptor propertyDescriptor);
    public virtual ModelItemCollection get_Collection();
    public virtual bool get_IsCollection();
    public virtual ModelItemDictionary get_Dictionary();
    public virtual bool get_IsDictionary();
    public virtual ModelItem get_Value();
    public virtual void ClearValue();
    public virtual ModelItem SetValue(object value);
}
internal class System.Activities.Presentation.Model.GenericArgumentUpdater : object {
    public GenericArgumentUpdater(EditingContext context);
    public void AddSupportForUpdatingTypeArgument(Type modelItemType);
}
internal abstract class System.Activities.Presentation.Model.GraphManager`3 : object {
    protected TVertex Root { get; }
    protected abstract virtual TVertex get_Root();
    internal void VerifyBackPointers();
    protected ICollection`1<TVertex> CalculateReachableVertices(bool verifyBackPointers);
    protected void OnRootChanged(TVertex oldRoot, TVertex newRoot);
    protected abstract virtual IEnumerable`1<TVertex> GetVertices();
    protected abstract virtual IEnumerable`1<TEdge> GetOutEdges(TVertex vertex);
    protected abstract virtual IEnumerable`1<TBackPointer> GetBackPointers(TVertex vertex);
    protected abstract virtual TVertex GetDestinationVertexFromEdge(TEdge edge);
    protected abstract virtual TVertex GetSourceVertexFromEdge(TEdge edge);
    protected abstract virtual TVertex GetDestinationVertexFromBackPointer(TBackPointer backPointer);
    protected void OnEdgeRemoved(TEdge edgeRemoved);
    protected void OnEdgeAdded(TEdge edgeAdded);
    protected abstract virtual void RemoveAssociatedBackPointer(TEdge edge);
    protected abstract virtual void AddAssociatedBackPointer(TEdge edge);
    protected abstract virtual bool HasBackPointer(TEdge edge);
    protected abstract virtual bool HasAssociatedEdge(TBackPointer backPointer);
    protected abstract virtual void OnVerticesBecameReachable(IEnumerable`1<TVertex> reachableVertices);
    protected abstract virtual void OnVerticesBecameUnreachable(IEnumerable`1<TVertex> unreachableVertices);
}
internal interface System.Activities.Presentation.Model.IItemsCollection {
    public bool ShouldUpdateDictionary { get; public set; }
    public ModelItemDictionaryImpl ModelDictionary { get; public set; }
    public abstract virtual bool get_ShouldUpdateDictionary();
    public abstract virtual void set_ShouldUpdateDictionary(bool value);
    public abstract virtual ModelItemDictionaryImpl get_ModelDictionary();
    public abstract virtual void set_ModelDictionary(ModelItemDictionaryImpl value);
}
internal class System.Activities.Presentation.Model.ImmediateEditingScope : EditingScope {
    public ImmediateEditingScope(ModelTreeManager modelTreeManager, Bookmark undoEngineBookmark);
    protected virtual void OnComplete();
    protected virtual void OnRevert(bool finalizing);
    protected virtual bool CanComplete();
}
internal interface System.Activities.Presentation.Model.IModelTreeItem {
    public ModelItem ModelItem { get; }
    public Dictionary`2<string, ModelItem> ModelPropertyStore { get; }
    public ModelTreeManager ModelTreeManager { get; }
    public IEnumerable`1<ModelItem> ItemBackPointers { get; }
    public List`1<BackPointer> ExtraPropertyBackPointers { get; }
    public abstract virtual ModelItem get_ModelItem();
    public abstract virtual Dictionary`2<string, ModelItem> get_ModelPropertyStore();
    public abstract virtual ModelTreeManager get_ModelTreeManager();
    public abstract virtual IEnumerable`1<ModelItem> get_ItemBackPointers();
    public abstract virtual List`1<BackPointer> get_ExtraPropertyBackPointers();
    public abstract virtual void OnPropertyChanged(string propertyName);
    public abstract virtual void SetParent(ModelItem dataModelItem);
    public abstract virtual void SetSource(ModelProperty dataModelProperty);
    public abstract virtual void RemoveParent(ModelItem oldParent);
    public abstract virtual void RemoveSource(ModelProperty oldModelProperty);
    public abstract virtual void RemoveSource(ModelItem parent, string propertyName);
    public abstract virtual void SetCurrentView(DependencyObject view);
}
internal class System.Activities.Presentation.Model.LinkBase : object {
    public LinkType LinkType { get; private set; }
    public string PropertyName { get; private set; }
    public ModelItem DestinationVertex { get; private set; }
    public ModelItem SourceVertex { get; private set; }
    public LinkBase(ModelItem sourceVertex, ModelItem destinationVertex);
    public LinkBase(string propertyName, ModelItem sourceVertex, ModelItem destinationVertex);
    [CompilerGeneratedAttribute]
public LinkType get_LinkType();
    [CompilerGeneratedAttribute]
private void set_LinkType(LinkType value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public ModelItem get_DestinationVertex();
    [CompilerGeneratedAttribute]
private void set_DestinationVertex(ModelItem value);
    [CompilerGeneratedAttribute]
public ModelItem get_SourceVertex();
    [CompilerGeneratedAttribute]
private void set_SourceVertex(ModelItem value);
}
internal enum System.Activities.Presentation.Model.LinkType : Enum {
    public int value__;
    public static LinkType Property;
    public static LinkType Item;
}
internal abstract class System.Activities.Presentation.Model.ModelChange : Change {
}
internal class System.Activities.Presentation.Model.ModelChangedEventArgsImpl : ModelChangedEventArgs {
    [ObsoleteAttribute("Don't use this property. Use "ModelChangeInfo" instead.")]
public IEnumerable`1<ModelItem> ItemsAdded { get; }
    [ObsoleteAttribute("Don't use this property. Use "ModelChangeInfo" instead.")]
public IEnumerable`1<ModelItem> ItemsRemoved { get; }
    [ObsoleteAttribute("Don't use this property. Use "ModelChangeInfo" instead.")]
public IEnumerable`1<ModelProperty> PropertiesChanged { get; }
    public ModelChangeInfo ModelChangeInfo { get; }
    public ModelChangedEventArgsImpl(List`1<ModelItem> itemsAdded, List`1<ModelItem> itemsRemoved, List`1<ModelProperty> propertiesChanged);
    public ModelChangedEventArgsImpl(List`1<ModelItem> itemsAdded, List`1<ModelItem> itemsRemoved, List`1<ModelProperty> propertiesChanged, ModelChangeInfo modelChangeInfo);
    public virtual IEnumerable`1<ModelItem> get_ItemsAdded();
    public virtual IEnumerable`1<ModelItem> get_ItemsRemoved();
    public virtual IEnumerable`1<ModelProperty> get_PropertiesChanged();
    public virtual ModelChangeInfo get_ModelChangeInfo();
}
public abstract class System.Activities.Presentation.Model.ModelEditingScope : object {
    public string Description { get; public set; }
    public string get_Description();
    public void set_Description(string value);
    public void Complete();
    public void Revert();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected abstract virtual void OnComplete();
    protected abstract virtual bool CanComplete();
    protected abstract virtual void OnRevert(bool finalizing);
    protected abstract virtual bool OnException(Exception exception);
}
public static class System.Activities.Presentation.Model.ModelFactory : object {
    public static ModelItem CreateItem(EditingContext context, Type itemType, Object[] arguments);
    public static ModelItem CreateItem(EditingContext context, Type itemType, CreateOptions options, Object[] arguments);
    public static ModelItem CreateItem(EditingContext context, object item);
    public static ModelItem CreateStaticMemberItem(EditingContext context, Type type, string memberName);
}
public abstract class System.Activities.Presentation.Model.ModelItem : object {
    public AttributeCollection Attributes { get; }
    public ModelProperty Content { get; }
    public Type ItemType { get; }
    public string Name { get; public set; }
    public ModelItem Parent { get; }
    public IEnumerable`1<ModelItem> Parents { get; }
    public ModelItem Root { get; }
    public ModelPropertyCollection Properties { get; }
    public ModelProperty Source { get; }
    public IEnumerable`1<ModelProperty> Sources { get; }
    public DependencyObject View { get; }
    public abstract virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public abstract virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public abstract virtual AttributeCollection get_Attributes();
    public abstract virtual ModelProperty get_Content();
    public abstract virtual Type get_ItemType();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual ModelItem get_Parent();
    public abstract virtual IEnumerable`1<ModelItem> get_Parents();
    public abstract virtual ModelItem get_Root();
    public abstract virtual ModelPropertyCollection get_Properties();
    public abstract virtual ModelProperty get_Source();
    public abstract virtual IEnumerable`1<ModelProperty> get_Sources();
    public abstract virtual DependencyObject get_View();
    public abstract virtual ModelEditingScope BeginEdit();
    public abstract virtual ModelEditingScope BeginEdit(string description);
    public virtual ModelEditingScope BeginEdit(bool shouldApplyChangesImmediately);
    public virtual ModelEditingScope BeginEdit(string description, bool shouldApplyChangesImmediately);
    public abstract virtual object GetCurrentValue();
    public virtual string ToString();
    internal virtual void add_PropertyReferenceChanged(PropertyReferenceChangedEventHandler value);
    internal virtual void remove_PropertyReferenceChanged(PropertyReferenceChangedEventHandler value);
    internal virtual void OnPropertyReferenceChanged(string targetProperty);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Activities.Presentation.Model.ModelItemCollection : ModelItem {
    public static DependencyProperty ItemProperty;
    public ModelItem Item { get; public set; }
    public int Count { get; }
    protected bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    protected bool IsSynchronized { get; }
    protected object SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private static ModelItemCollection();
    public abstract virtual ModelItem get_Item(int index);
    public abstract virtual void set_Item(int index, ModelItem value);
    public abstract virtual int get_Count();
    protected virtual bool get_IsFixedSize();
    public abstract virtual bool get_IsReadOnly();
    protected virtual bool get_IsSynchronized();
    protected virtual object get_SyncRoot();
    public abstract virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public abstract virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public abstract virtual void Add(ModelItem item);
    public abstract virtual ModelItem Add(object value);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(ModelItem item);
    public abstract virtual bool Contains(object value);
    public abstract virtual void CopyTo(ModelItem[] array, int arrayIndex);
    public abstract virtual IEnumerator`1<ModelItem> GetEnumerator();
    public abstract virtual int IndexOf(ModelItem item);
    public abstract virtual void Insert(int index, ModelItem item);
    public abstract virtual ModelItem Insert(int index, object value);
    public abstract virtual void Move(int fromIndex, int toIndex);
    public abstract virtual bool Remove(ModelItem item);
    public abstract virtual bool Remove(object value);
    public abstract virtual void RemoveAt(int index);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class System.Activities.Presentation.Model.ModelItemCollectionImpl : ModelItemCollection {
    public AttributeCollection Attributes { get; }
    public ModelProperty Content { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public Type ItemType { get; }
    public string Name { get; public set; }
    public ModelItem Parent { get; }
    public ModelPropertyCollection Properties { get; }
    public ModelItem Root { get; }
    public ModelProperty Source { get; }
    public DependencyObject View { get; }
    public IEnumerable`1<ModelItem> Parents { get; }
    public IEnumerable`1<ModelProperty> Sources { get; }
    internal List`1<ModelItem> Items { get; }
    internal Dictionary`2<string, ModelItem> ModelPropertyStore { get; }
    protected ModelProperty NameProperty { get; }
    private ModelItem System.Activities.Presentation.Model.IModelTreeItem.ModelItem { get; }
    private Dictionary`2<string, ModelItem> System.Activities.Presentation.Model.IModelTreeItem.ModelPropertyStore { get; }
    private ModelTreeManager System.Activities.Presentation.Model.IModelTreeItem.ModelTreeManager { get; }
    public ModelItem Item { get; public set; }
    private IEnumerable`1<ModelItem> System.Activities.Presentation.Model.IModelTreeItem.ItemBackPointers { get; }
    private List`1<BackPointer> System.Activities.Presentation.Model.IModelTreeItem.ExtraPropertyBackPointers { get; }
    public ModelItemCollectionImpl(ModelTreeManager modelTreeManager, Type itemType, object instance, ModelItem parent);
    public virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual AttributeCollection get_Attributes();
    public virtual ModelProperty get_Content();
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual Type get_ItemType();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual ModelItem get_Parent();
    public virtual ModelPropertyCollection get_Properties();
    public virtual ModelItem get_Root();
    public virtual ModelProperty get_Source();
    public virtual DependencyObject get_View();
    public virtual IEnumerable`1<ModelItem> get_Parents();
    public virtual IEnumerable`1<ModelProperty> get_Sources();
    internal List`1<ModelItem> get_Items();
    internal Dictionary`2<string, ModelItem> get_ModelPropertyStore();
    protected ModelProperty get_NameProperty();
    private sealed virtual override ModelItem System.Activities.Presentation.Model.IModelTreeItem.get_ModelItem();
    private sealed virtual override Dictionary`2<string, ModelItem> System.Activities.Presentation.Model.IModelTreeItem.get_ModelPropertyStore();
    private sealed virtual override ModelTreeManager System.Activities.Presentation.Model.IModelTreeItem.get_ModelTreeManager();
    public virtual ModelItem get_Item(int index);
    public virtual void set_Item(int index, ModelItem value);
    public sealed virtual void SetCurrentView(DependencyObject view);
    public virtual ModelItem Add(object value);
    public virtual void Add(ModelItem item);
    public virtual ModelEditingScope BeginEdit(string description, bool shouldApplyChangesImmediately);
    public virtual ModelEditingScope BeginEdit(bool shouldApplyChangesImmediately);
    public virtual ModelEditingScope BeginEdit(string description);
    public virtual ModelEditingScope BeginEdit();
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual bool Contains(ModelItem item);
    public virtual void CopyTo(ModelItem[] array, int arrayIndex);
    public virtual object GetCurrentValue();
    public virtual IEnumerator`1<ModelItem> GetEnumerator();
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.OnPropertyChanged(string propertyName);
    private sealed virtual override IEnumerable`1<ModelItem> System.Activities.Presentation.Model.IModelTreeItem.get_ItemBackPointers();
    private sealed virtual override List`1<BackPointer> System.Activities.Presentation.Model.IModelTreeItem.get_ExtraPropertyBackPointers();
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.SetParent(ModelItem dataModelItem);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.SetSource(ModelProperty property);
    public virtual int IndexOf(ModelItem item);
    public virtual ModelItem Insert(int index, object value);
    public virtual void Insert(int index, ModelItem item);
    public virtual void Move(int fromIndex, int toIndex);
    public virtual bool Remove(object value);
    public virtual bool Remove(ModelItem item);
    public virtual void RemoveAt(int index);
    internal void AddCore(ModelItem item);
    internal void ClearCore();
    internal void InsertCore(int index, ModelItem item);
    internal void RemoveCore(ModelItem item);
    internal void RemoveAtCore(int index);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.RemoveParent(ModelItem oldParent);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.RemoveSource(ModelProperty oldModelProperty);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.RemoveSource(ModelItem parent, string propertyName);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Activities.Presentation.Model.ModelItemDictionary : ModelItem {
    public static DependencyProperty KeyProperty;
    public ModelItem Item { get; public set; }
    public ModelItem Item { get; public set; }
    public int Count { get; }
    protected bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    protected bool IsSynchronized { get; }
    public ICollection`1<ModelItem> Keys { get; }
    protected object SyncRoot { get; }
    public ICollection`1<ModelItem> Values { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private static ModelItemDictionary();
    public abstract virtual ModelItem get_Item(ModelItem key);
    public abstract virtual void set_Item(ModelItem key, ModelItem value);
    public abstract virtual ModelItem get_Item(object key);
    public abstract virtual void set_Item(object key, ModelItem value);
    public abstract virtual int get_Count();
    protected virtual bool get_IsFixedSize();
    public abstract virtual bool get_IsReadOnly();
    protected virtual bool get_IsSynchronized();
    public abstract virtual ICollection`1<ModelItem> get_Keys();
    protected virtual object get_SyncRoot();
    public abstract virtual ICollection`1<ModelItem> get_Values();
    public abstract virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public abstract virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public abstract virtual void Add(ModelItem key, ModelItem value);
    public abstract virtual ModelItem Add(object key, object value);
    public abstract virtual void Clear();
    protected virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    protected virtual bool Contains(KeyValuePair`2<ModelItem, ModelItem> item);
    public abstract virtual bool ContainsKey(ModelItem key);
    public abstract virtual bool ContainsKey(object key);
    public abstract virtual IEnumerator`1<KeyValuePair`2<ModelItem, ModelItem>> GetEnumerator();
    public abstract virtual bool Remove(ModelItem key);
    public abstract virtual bool Remove(object key);
    public abstract virtual bool TryGetValue(ModelItem key, ModelItem& value);
    public abstract virtual bool TryGetValue(object key, ModelItem& value);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem>>.Add(KeyValuePair`2<ModelItem, ModelItem> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem>>.Contains(KeyValuePair`2<ModelItem, ModelItem> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Activities.Presentation.Model.ModelItem,System.Activities.Presentation.Model.ModelItem>>.Remove(KeyValuePair`2<ModelItem, ModelItem> item);
}
[DefaultMemberAttribute("Item")]
internal class System.Activities.Presentation.Model.ModelItemDictionaryImpl : ModelItemDictionary {
    internal ModelItem updateKeySavedValue;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<ModelItem> Keys { get; }
    public ICollection`1<ModelItem> Values { get; }
    public AttributeCollection Attributes { get; }
    public ModelProperty Content { get; }
    public Type ItemType { get; }
    public string Name { get; public set; }
    public ModelItem Parent { get; }
    public ModelItem Root { get; }
    public ModelPropertyCollection Properties { get; }
    public ModelProperty Source { get; }
    public DependencyObject View { get; }
    public ModelItem ModelItem { get; }
    public Dictionary`2<string, ModelItem> ModelPropertyStore { get; }
    public ModelTreeManager ModelTreeManager { get; }
    public IEnumerable`1<ModelItem> Parents { get; }
    public IEnumerable`1<ModelProperty> Sources { get; }
    protected ModelProperty NameProperty { get; }
    public ModelItem Item { get; public set; }
    public ModelItem Item { get; public set; }
    private IEnumerable`1<ModelItem> System.Activities.Presentation.Model.IModelTreeItem.ItemBackPointers { get; }
    private List`1<BackPointer> System.Activities.Presentation.Model.IModelTreeItem.ExtraPropertyBackPointers { get; }
    public ModelItemDictionaryImpl(ModelTreeManager modelTreeManager, Type itemType, object instance, ModelItem parent);
    internal void UpdateValue(object keyObj, object valueObj);
    internal void UpdateKey(object oldKeyObj, object newKeyObj);
    public virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual ICollection`1<ModelItem> get_Keys();
    public virtual ICollection`1<ModelItem> get_Values();
    public virtual AttributeCollection get_Attributes();
    public virtual ModelProperty get_Content();
    public virtual Type get_ItemType();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual ModelItem get_Parent();
    public virtual ModelItem get_Root();
    public virtual ModelPropertyCollection get_Properties();
    public virtual ModelProperty get_Source();
    public virtual DependencyObject get_View();
    public sealed virtual ModelItem get_ModelItem();
    public sealed virtual Dictionary`2<string, ModelItem> get_ModelPropertyStore();
    public sealed virtual ModelTreeManager get_ModelTreeManager();
    public virtual IEnumerable`1<ModelItem> get_Parents();
    public virtual IEnumerable`1<ModelProperty> get_Sources();
    protected ModelProperty get_NameProperty();
    public virtual ModelItem get_Item(ModelItem key);
    public virtual void set_Item(ModelItem key, ModelItem value);
    public virtual ModelItem get_Item(object key);
    public virtual void set_Item(object key, ModelItem value);
    public virtual void Add(ModelItem key, ModelItem value);
    public virtual ModelItem Add(object key, object value);
    public virtual void Clear();
    public virtual bool ContainsKey(ModelItem key);
    public virtual bool ContainsKey(object key);
    public virtual IEnumerator`1<KeyValuePair`2<ModelItem, ModelItem>> GetEnumerator();
    public virtual bool Remove(ModelItem key);
    public virtual bool Remove(object key);
    public virtual bool TryGetValue(ModelItem key, ModelItem& value);
    public virtual bool TryGetValue(object key, ModelItem& value);
    public virtual ModelEditingScope BeginEdit(string description, bool shouldApplyChangesImmediately);
    public virtual ModelEditingScope BeginEdit(bool shouldApplyChangesImmediately);
    public virtual ModelEditingScope BeginEdit(string description);
    public virtual ModelEditingScope BeginEdit();
    public virtual object GetCurrentValue();
    public sealed virtual void OnPropertyChanged(string propertyName);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.SetParent(ModelItem dataModelItem);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.SetSource(ModelProperty property);
    public sealed virtual void SetCurrentView(DependencyObject view);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.RemoveParent(ModelItem oldParent);
    private sealed virtual override IEnumerable`1<ModelItem> System.Activities.Presentation.Model.IModelTreeItem.get_ItemBackPointers();
    private sealed virtual override List`1<BackPointer> System.Activities.Presentation.Model.IModelTreeItem.get_ExtraPropertyBackPointers();
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.RemoveSource(ModelProperty oldModelProperty);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.RemoveSource(ModelItem parent, string propertyName);
    internal void EditCore(ModelItem key, ModelItem value);
    internal void AddCore(ModelItem key, ModelItem value);
    internal void ClearCore();
    internal void RemoveCore(ModelItem key);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[ExtensionAttribute]
public static class System.Activities.Presentation.Model.ModelItemExtensions : object {
    [ExtensionAttribute]
public static EditingContext GetEditingContext(ModelItem modelItem);
    [ExtensionAttribute]
internal static ModelItem FindParentModelItem(ModelItem item, Type parentType);
    [ExtensionAttribute]
internal static bool SwitchKeys(ModelItemDictionary dictionary, ModelItem oldKey, ModelItem newKey);
    [ExtensionAttribute]
internal static bool SwitchKeys(ModelItemDictionary dictionary, object oldKey, object newKey, ModelItem& newKeyItem);
    [ExtensionAttribute]
internal static bool TryGetPropertyValue(ModelItem item, ModelItemCollection& value, String[] path);
    [ExtensionAttribute]
internal static bool TryGetPropertyValue(ModelItem item, ModelItemDictionary& value, String[] path);
    [ExtensionAttribute]
internal static bool TryGetPropertyValue(ModelItem item, ModelItem& value, String[] path);
    [ExtensionAttribute]
internal static bool TrySetPropertyValue(ModelItem item, object value, ModelItem& wrappedValue, String[] path);
    [ExtensionAttribute]
internal static bool HasAnnotation(ModelItem modelItem);
    [ExtensionAttribute]
public static string GetModelPath(ModelItem modelItem);
    public static ModelItem GetModelItemFromPath(string path, ModelItem root);
    [ExtensionAttribute]
internal static IEnumerable`1<ModelItem> GetParentEnumerator(ModelItem item);
    [ExtensionAttribute]
internal static IEnumerable`1<ModelItem> GetParentEnumerator(ModelItem item, Func`2<ModelItem, bool> continueEnumerationPredicate);
    [ExtensionAttribute]
internal static string GetUniqueName(ModelItemCollection collection, string nameDefaultPrefix, Func`2<ModelItem, string> nameGetter);
    [ExtensionAttribute]
internal static string GetUniqueName(ModelItemDictionary dictionary, string nameDefaultPrefix, Func`2<ModelItem, string> nameGetter);
    [ExtensionAttribute]
internal static string GetUniqueName(IEnumerable`1<T> collection, string nameDefaultPrefix, Func`2<T, string> nameGetter);
    [ExtensionAttribute]
internal static bool IsAssignableFrom(ModelItem item);
    [ExtensionAttribute]
internal static Activity GetRootActivity(ModelItem item);
    [ExtensionAttribute]
public static bool IsParentOf(ModelItem item, ModelItem child);
    [ExtensionAttribute]
public static void Focus(ModelItem item);
    [ExtensionAttribute]
internal static void Highlight(ModelItem item);
    [ExtensionAttribute]
internal static void Highlight(ModelItem item, Rect rectToBringIntoView);
    [ExtensionAttribute]
public static void Focus(ModelItem item, int level);
    [ExtensionAttribute]
internal static ModelItem FindParent(ModelItem item, Predicate`1<ModelItem> predicate);
}
internal static class System.Activities.Presentation.Model.ModelItemHelper : object {
    internal static ModelEditingScope ModelItemBeginEdit(ModelTreeManager modelTreeManager, string description, bool shouldApplyChangesImmediately);
    internal static bool CanCreateImmediateEditingScope(ModelItem modelItem);
    internal static void TryCreateImmediateEditingScopeAndExecute(EditingContext context, string editingScopeDescription, Action`1<EditingScope> modelEditingWork);
    internal static EditingScope TryCreateImmediateEditingScope(ModelTreeManager manager, string editingScopeDescription);
}
internal class System.Activities.Presentation.Model.ModelItemImpl : ModelItem {
    internal ObservableCollection`1<ModelItem> parents;
    public AttributeCollection Attributes { get; }
    public ModelProperty Content { get; }
    public Type ItemType { get; }
    public ModelItem ModelItem { get; }
    public string Name { get; public set; }
    public ModelItem Parent { get; }
    public ModelPropertyCollection Properties { get; }
    public ModelItem Root { get; }
    public ModelProperty Source { get; }
    public DependencyObject View { get; }
    public IEnumerable`1<ModelItem> Parents { get; }
    internal ReadOnlyObservableCollection`1<ModelItem> InternalParents { get; }
    public IEnumerable`1<ModelProperty> Sources { get; }
    internal ReadOnlyObservableCollection`1<ModelProperty> InternalSources { get; }
    protected ModelProperty NameProperty { get; }
    private Dictionary`2<string, ModelItem> System.Activities.Presentation.Model.IModelTreeItem.ModelPropertyStore { get; }
    private ModelTreeManager System.Activities.Presentation.Model.IModelTreeItem.ModelTreeManager { get; }
    private IEnumerable`1<ModelItem> System.Activities.Presentation.Model.IModelTreeItem.ItemBackPointers { get; }
    private List`1<BackPointer> System.Activities.Presentation.Model.IModelTreeItem.ExtraPropertyBackPointers { get; }
    public ModelItemImpl(ModelTreeManager modelTreeManager, Type itemType, object instance, ModelItem parent);
    public virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public virtual AttributeCollection get_Attributes();
    public virtual ModelProperty get_Content();
    public virtual Type get_ItemType();
    public sealed virtual ModelItem get_ModelItem();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual ModelItem get_Parent();
    public virtual ModelPropertyCollection get_Properties();
    public virtual ModelItem get_Root();
    public virtual ModelProperty get_Source();
    public virtual DependencyObject get_View();
    public virtual IEnumerable`1<ModelItem> get_Parents();
    internal ReadOnlyObservableCollection`1<ModelItem> get_InternalParents();
    public virtual IEnumerable`1<ModelProperty> get_Sources();
    internal ReadOnlyObservableCollection`1<ModelProperty> get_InternalSources();
    protected ModelProperty get_NameProperty();
    private sealed virtual override Dictionary`2<string, ModelItem> System.Activities.Presentation.Model.IModelTreeItem.get_ModelPropertyStore();
    private sealed virtual override ModelTreeManager System.Activities.Presentation.Model.IModelTreeItem.get_ModelTreeManager();
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.SetCurrentView(DependencyObject view);
    public virtual ModelEditingScope BeginEdit(string description, bool shouldApplyChangesImmediately);
    public virtual ModelEditingScope BeginEdit(bool shouldApplyChangesImmediately);
    public virtual ModelEditingScope BeginEdit(string description);
    public virtual ModelEditingScope BeginEdit();
    public virtual object GetCurrentValue();
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.OnPropertyChanged(string propertyName);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.SetParent(ModelItem dataModelItem);
    private sealed virtual override IEnumerable`1<ModelItem> System.Activities.Presentation.Model.IModelTreeItem.get_ItemBackPointers();
    private sealed virtual override List`1<BackPointer> System.Activities.Presentation.Model.IModelTreeItem.get_ExtraPropertyBackPointers();
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.SetSource(ModelProperty property);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.RemoveParent(ModelItem oldParent);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.RemoveSource(ModelProperty oldModelProperty);
    private sealed virtual override void System.Activities.Presentation.Model.IModelTreeItem.RemoveSource(ModelItem parent, string propertyName);
    protected virtual void OnPropertyChanged(string propertyName);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    public object SetPropertyValue(string propertyName, object val);
    public object GetPropertyValue(string propertyName);
}
internal class System.Activities.Presentation.Model.ModelItemsAddedEventArgs : EventArgs {
    public IEnumerable`1<ModelItem> ModelItemsAdded { get; private set; }
    public ModelItemsAddedEventArgs(IEnumerable`1<ModelItem> modelItemsAdded);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ModelItem> get_ModelItemsAdded();
    [CompilerGeneratedAttribute]
private void set_ModelItemsAdded(IEnumerable`1<ModelItem> value);
}
internal class System.Activities.Presentation.Model.ModelItemsRemovedEventArgs : EventArgs {
    public IEnumerable`1<ModelItem> ModelItemsRemoved { get; private set; }
    public ModelItemsRemovedEventArgs(IEnumerable`1<ModelItem> modelItemsRemoved);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ModelItem> get_ModelItemsRemoved();
    [CompilerGeneratedAttribute]
private void set_ModelItemsRemoved(IEnumerable`1<ModelItem> value);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Activities.Presentation.Model.ModelMemberCollection`2 : object {
    public TItemType Item { get; }
    public TItemType Item { get; }
    public TItemType get_Item(string name);
    public TItemType get_Item(TFindType value);
    public TItemType Find(string name);
    protected abstract virtual TItemType Find(string name, bool throwOnError);
    public TItemType Find(TFindType value);
    protected abstract virtual TItemType Find(TFindType value, bool throwOnError);
    public abstract virtual IEnumerator`1<TItemType> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class System.Activities.Presentation.Model.ModelProperty : object {
    public AttributeCollection Attributes { get; }
    public ModelItemCollection Collection { get; }
    public object ComputedValue { get; public set; }
    public TypeConverter Converter { get; }
    public Type AttachedOwnerType { get; }
    public object DefaultValue { get; }
    public ModelItemDictionary Dictionary { get; }
    public bool IsBrowsable { get; }
    public bool IsCollection { get; }
    public bool IsDictionary { get; }
    public bool IsReadOnly { get; }
    public bool IsSet { get; }
    public bool IsAttached { get; }
    public ModelItem Value { get; }
    public string Name { get; }
    public ModelItem Parent { get; }
    public Type PropertyType { get; }
    internal string Reference { get; }
    public abstract virtual AttributeCollection get_Attributes();
    public abstract virtual ModelItemCollection get_Collection();
    public abstract virtual object get_ComputedValue();
    public abstract virtual void set_ComputedValue(object value);
    public abstract virtual TypeConverter get_Converter();
    public abstract virtual Type get_AttachedOwnerType();
    public abstract virtual object get_DefaultValue();
    public abstract virtual ModelItemDictionary get_Dictionary();
    public abstract virtual bool get_IsBrowsable();
    public abstract virtual bool get_IsCollection();
    public abstract virtual bool get_IsDictionary();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsSet();
    public abstract virtual bool get_IsAttached();
    public abstract virtual ModelItem get_Value();
    public abstract virtual string get_Name();
    public abstract virtual ModelItem get_Parent();
    public abstract virtual Type get_PropertyType();
    public abstract virtual void ClearValue();
    public abstract virtual ModelItem SetValue(object value);
    internal virtual string get_Reference();
    internal virtual void ClearReference();
    internal virtual void SetReference(string sourceProperty);
    public static bool op_Equality(ModelProperty first, ModelProperty second);
    public static bool op_Inequality(ModelProperty first, ModelProperty second);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class System.Activities.Presentation.Model.ModelPropertyCollection : ModelMemberCollection`2<ModelProperty, DependencyProperty> {
}
internal class System.Activities.Presentation.Model.ModelPropertyCollectionImpl : ModelPropertyCollection {
    public ModelPropertyCollectionImpl(ModelItem parent);
    public virtual IEnumerator`1<ModelProperty> GetEnumerator();
    protected virtual ModelProperty Find(DependencyProperty value, bool throwOnError);
    protected virtual ModelProperty Find(string name, bool throwOnError);
}
internal class System.Activities.Presentation.Model.ModelPropertyDescriptor : PropertyDescriptor {
    public AttributeCollection Attributes { get; }
    public TypeConverter Converter { get; }
    public bool IsBrowsable { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    internal ModelPropertyDescriptor(ModelProperty itemProperty);
    public virtual AttributeCollection get_Attributes();
    public virtual TypeConverter get_Converter();
    public virtual bool get_IsBrowsable();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual PropertyDescriptorCollection GetChildProperties(object instance, Attribute[] filter);
    public virtual bool CanResetValue(object component);
    public virtual object GetEditor(Type editorBaseType);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
internal class System.Activities.Presentation.Model.ModelPropertyImpl : ModelProperty {
    public Type AttachedOwnerType { get; }
    public AttributeCollection Attributes { get; }
    public ModelItemCollection Collection { get; }
    public object ComputedValue { get; public set; }
    public TypeConverter Converter { get; }
    public object DefaultValue { get; }
    public ModelItemDictionary Dictionary { get; }
    public bool IsAttached { get; }
    public bool IsBrowsable { get; }
    public bool IsCollection { get; }
    public bool IsDictionary { get; }
    public bool IsReadOnly { get; }
    public bool IsSet { get; }
    public string Name { get; }
    public ModelItem Parent { get; }
    public Type PropertyType { get; }
    public ModelItem Value { get; }
    internal PropertyDescriptor PropertyDescriptor { get; }
    internal string Reference { get; }
    public ModelPropertyImpl(ModelItem parent, PropertyDescriptor propertyDescriptor, bool isAttached);
    public virtual Type get_AttachedOwnerType();
    public virtual AttributeCollection get_Attributes();
    public virtual ModelItemCollection get_Collection();
    public virtual object get_ComputedValue();
    public virtual void set_ComputedValue(object value);
    public virtual TypeConverter get_Converter();
    public virtual object get_DefaultValue();
    public virtual ModelItemDictionary get_Dictionary();
    public virtual bool get_IsAttached();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsCollection();
    public virtual bool get_IsDictionary();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSet();
    public virtual string get_Name();
    public virtual ModelItem get_Parent();
    public virtual Type get_PropertyType();
    public virtual ModelItem get_Value();
    internal PropertyDescriptor get_PropertyDescriptor();
    public virtual void ClearValue();
    public virtual ModelItem SetValue(object value);
    internal virtual string get_Reference();
    internal virtual void ClearReference();
    internal virtual void SetReference(string sourceProperty);
    internal object SetValueCore(ModelItem newValueModelItem);
}
internal class System.Activities.Presentation.Model.ModelSearchServiceImpl : ModelSearchService {
    public ModelSearchServiceImpl(WorkflowDesigner designer);
    public virtual TextImage GenerateTextImage();
    internal IEnumerable`1<ModelItem> GetItemsOnDesigner(bool preOrder, bool excludeRoot, bool excludeErrorActivity, bool excludeExpression, bool includeOtherObjects);
    internal static string ExpressionToString(object expression);
    public ModelItem FindModelItem(int startLine, int startColumn, int endLine, int endColumn);
    public ModelItem FindModelItemOfViewState(int startLine, int startColumn, int endLine, int endColumn);
    public SourceLocation FindSourceLocation(ModelItem modelItem);
    public IEnumerable`1<object> GetObjectsWithSourceLocation();
    public virtual bool NavigateTo(int startLine, int startColumn, int endLine, int endColumn);
    public virtual bool NavigateTo(int location);
    public bool NavigateTo(ModelItem itemToFocus);
}
internal class System.Activities.Presentation.Model.ModelServiceImpl : ModelService {
    public ModelItem Root { get; }
    public ModelServiceImpl(ModelTreeManager modelTreeManager);
    public virtual void add_ModelChanged(EventHandler`1<ModelChangedEventArgs> value);
    public virtual void remove_ModelChanged(EventHandler`1<ModelChangedEventArgs> value);
    public virtual ModelItem get_Root();
    public virtual IEnumerable`1<ModelItem> Find(ModelItem startingItem, Predicate`1<Type> match);
    public virtual IEnumerable`1<ModelItem> Find(ModelItem startingItem, Type type);
    public virtual ModelItem FromName(ModelItem scope, string name, StringComparison comparison);
    internal void OnModelItemAdded(ModelItem modelItem, ModelChangeInfo changeInfo);
    internal void OnModelItemRemoved(ModelItem modelItem, ModelChangeInfo changInfo);
    internal void EmitModelChangeInfo(ModelChangeInfo changInfo);
    internal void OnModelItemsRemoved(IEnumerable`1<ModelItem> modelItems);
    internal void OnModelPropertyChanged(ModelProperty property, ModelChangeInfo changeInfo);
    protected virtual ModelItem CreateItem(object instance);
    protected virtual ModelItem CreateItem(Type itemType, CreateOptions options, Object[] arguments);
    protected virtual ModelItem CreateStaticMemberItem(Type type, string memberName);
    internal ModelItem WrapAsModelItem(object instance);
}
internal class System.Activities.Presentation.Model.ModelTreeItemHelper : object {
    public List`1<BackPointer> ExtraPropertyBackPointers { get; }
    public List`1<BackPointer> get_ExtraPropertyBackPointers();
    public void RemoveExtraPropertyBackPointer(ModelItem parent, string propertyName);
}
public class System.Activities.Presentation.Model.ModelTreeManager : object {
    internal ModelServiceImpl modelService;
    public ModelItem Root { get; }
    internal EditingContext Context { get; }
    internal bool RedoUndoInProgress { get; }
    public ModelTreeManager(EditingContext context);
    public void add_EditingScopeCompleted(EventHandler`1<EditingScopeEventArgs> value);
    public void remove_EditingScopeCompleted(EventHandler`1<EditingScopeEventArgs> value);
    public ModelItem get_Root();
    internal EditingContext get_Context();
    internal bool get_RedoUndoInProgress();
    internal void StartTracking();
    internal void StopTracking();
    public ModelItem CreateModelItem(ModelItem parent, object instance);
    public void Load(object rootInstance);
    internal void ClearValue(ModelPropertyImpl modelProperty);
    internal void CollectionAdd(ModelItemCollectionImpl dataModelItemCollection, ModelItem item);
    internal void CollectionInsert(ModelItemCollectionImpl dataModelItemCollection, int index, ModelItem item);
    internal void CollectionClear(ModelItemCollectionImpl modelItemCollectionImpl);
    internal void NotifyCollectionInsert(ModelItem item, ModelChangeInfo changeInfo);
    internal void CollectionRemove(ModelItemCollectionImpl dataModelItemCollection, ModelItem item);
    internal void CollectionRemoveAt(ModelItemCollectionImpl dataModelItemCollection, int index);
    internal void NotifyCollectionRemove(ModelItem item, ModelChangeInfo changeInfo);
    internal void DictionaryClear(ModelItemDictionaryImpl modelDictionary);
    internal void DictionaryEdit(ModelItemDictionaryImpl dataModelItemDictionary, ModelItem key, ModelItem newValue, ModelItem oldValue);
    internal void DictionaryAdd(ModelItemDictionaryImpl dataModelItemDictionary, ModelItem key, ModelItem value);
    internal void OnPropertyEdgeAdded(string propertyName, ModelItem from, ModelItem to);
    internal void OnItemEdgeAdded(ModelItem from, ModelItem to);
    internal void OnPropertyEdgeRemoved(string propertyName, ModelItem from, ModelItem to);
    internal void OnItemEdgeRemoved(ModelItem from, ModelItem to);
    internal void DictionaryRemove(ModelItemDictionaryImpl dataModelItemDictionary, ModelItem key);
    internal static IEnumerable`1<ModelItem> Find(ModelItem startingItem, Predicate`1<ModelItem> matcher, bool skipCollapsedAndUnrootable);
    internal static ModelItem FindFirst(ModelItem startingItem, Predicate`1<ModelItem> matcher);
    internal static ModelItem FindFirst(ModelItem startingItem, Predicate`1<ModelItem> matcher, Predicate`1<ModelItem> extraShouldSearchThroughProperties);
    internal ModelItem GetValue(ModelPropertyImpl dataModelProperty);
    internal ModelItem SetValue(ModelPropertyImpl modelProperty, object value);
    internal void AddToCurrentEditingScope(Change change);
    internal bool CanCreateImmediateEditingScope();
    internal EditingScope CreateEditingScope(string description, bool shouldApplyChangesImmediately);
    internal EditingScope CreateEditingScope(string description);
    internal void NotifyPropertyChange(ModelPropertyImpl dataModelProperty, ModelChangeInfo changeInfo);
    internal void SyncModelAndText();
    internal ModelItem WrapAsModelItem(object instance);
    internal ModelItem GetModelItem(object instance);
    public ModelItem GetModelItem(object instance, bool shouldExpandModelTree);
    internal void RegisterModelTreeChangeEvents(EditingScope editingScope);
    internal void UnregisterModelTreeChangeEvents(EditingScope editingScope);
    internal void OnEditingScopeCompleted(EditingScope modelEditingScopeImpl);
    internal bool CanEditingScopeComplete(EditingScope modelEditingScopeImpl);
    internal void OnEditingScopeReverted(EditingScope modelEditingScopeImpl);
    internal static IList`1<ModelItem> DepthFirstSearch(ModelItem currentItem, Predicate`1<Type> filter, Predicate`1<ModelItem> shouldTraverseSubTree, bool preOrder);
}
internal class System.Activities.Presentation.Model.ModelTypeConverter : TypeConverter {
    internal ModelTypeConverter(ModelTreeManager modelTreeManager, TypeConverter converter);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
}
internal class System.Activities.Presentation.Model.ModelTypeDescriptorContextWrapper : object {
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    internal ModelTypeDescriptorContextWrapper(ITypeDescriptorContext context, ModelTreeManager modelTreeManager);
    public sealed virtual IContainer get_Container();
    public sealed virtual object get_Instance();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
    public sealed virtual void OnComponentChanged();
    public sealed virtual bool OnComponentChanging();
    public sealed virtual object GetService(Type serviceType);
}
internal static class System.Activities.Presentation.Model.ModelUtilities : object {
    internal static bool IsSwitchCase(ModelItem modelItem);
    internal static bool IsModelItemKeyValuePair(Type type);
    internal static TypeConverter GetConverter(IModelTreeItem item);
    internal static TypeConverter GetConverter(ModelTreeManager modelTreeManager, ModelItem item);
    internal static PropertyDescriptor GetDefaultProperty(ModelItem item);
    internal static PropertyDescriptorCollection WrapProperties(ModelItem item);
    internal static ModelItem ReverseFindFirst(ModelItem start, Predicate`1<ModelItem> matcher);
    internal static void ReverseTraverse(ModelItem start, Predicate`1<ModelItem> shouldContinue);
}
public static class System.Activities.Presentation.Model.MorphHelper : object {
    private static MorphHelper();
    public static void AddPropertyValueMorphHelper(Type propertyType, PropertyValueMorphHelper extension);
    public static PropertyValueMorphHelper GetPropertyValueMorphHelper(Type propertyType);
    public static void MorphObject(ModelItem oldModelItem, ModelItem newModelitem);
    public static void MorphProperties(ModelItem oldModelItem, ModelItem newModelitem);
}
internal class System.Activities.Presentation.Model.PropertyChange : ModelChange {
    public ModelItem Owner { get; public set; }
    public string PropertyName { get; public set; }
    public ModelItem OldValue { get; public set; }
    public ModelItem NewValue { get; public set; }
    public ModelTreeManager ModelTreeManager { get; public set; }
    public string Description { get; }
    [CompilerGeneratedAttribute]
public ModelItem get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(ModelItem value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public ModelItem get_OldValue();
    [CompilerGeneratedAttribute]
public void set_OldValue(ModelItem value);
    [CompilerGeneratedAttribute]
public ModelItem get_NewValue();
    [CompilerGeneratedAttribute]
public void set_NewValue(ModelItem value);
    [CompilerGeneratedAttribute]
public ModelTreeManager get_ModelTreeManager();
    [CompilerGeneratedAttribute]
public void set_ModelTreeManager(ModelTreeManager value);
    public virtual string get_Description();
    public virtual bool Apply();
    public virtual Change GetInverse();
}
internal class System.Activities.Presentation.Model.PropertyReferenceChange : ModelChange {
    public ModelItem Owner { get; public set; }
    public string TargetProperty { get; public set; }
    public string OldSourceProperty { get; public set; }
    public string NewSourceProperty { get; public set; }
    public string Description { get; }
    [CompilerGeneratedAttribute]
public ModelItem get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(ModelItem value);
    [CompilerGeneratedAttribute]
public string get_TargetProperty();
    [CompilerGeneratedAttribute]
public void set_TargetProperty(string value);
    [CompilerGeneratedAttribute]
public string get_OldSourceProperty();
    [CompilerGeneratedAttribute]
public void set_OldSourceProperty(string value);
    [CompilerGeneratedAttribute]
public string get_NewSourceProperty();
    [CompilerGeneratedAttribute]
public void set_NewSourceProperty(string value);
    public virtual string get_Description();
    public virtual bool Apply();
    public virtual Change GetInverse();
}
internal class System.Activities.Presentation.Model.PropertyReferenceChangedEventArgs : EventArgs {
    public string TargetProperty { get; private set; }
    public PropertyReferenceChangedEventArgs(string targetProperty);
    [CompilerGeneratedAttribute]
public string get_TargetProperty();
    [CompilerGeneratedAttribute]
private void set_TargetProperty(string value);
}
internal class System.Activities.Presentation.Model.PropertyReferenceChangedEventHandler : MulticastDelegate {
    public PropertyReferenceChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PropertyReferenceChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PropertyReferenceChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Activities.Presentation.Model.PropertyValueMorphHelper : MulticastDelegate {
    public PropertyValueMorphHelper(object object, IntPtr method);
    public virtual object Invoke(ModelItem originalValue, ModelProperty newModelProperty);
    public virtual IAsyncResult BeginInvoke(ModelItem originalValue, ModelProperty newModelProperty, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class System.Activities.Presentation.Model.SearchableEntry : object {
    internal int LineNumber { get; internal set; }
    internal SearchableEntryOption SearchableEntryType { get; internal set; }
    internal ModelItem ModelItem { get; internal set; }
    internal ModelProperty ModelProperty { get; internal set; }
    internal string Text { get; internal set; }
    internal string PropertyPath { get; internal set; }
    [CompilerGeneratedAttribute]
internal int get_LineNumber();
    [CompilerGeneratedAttribute]
internal void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
internal SearchableEntryOption get_SearchableEntryType();
    [CompilerGeneratedAttribute]
internal void set_SearchableEntryType(SearchableEntryOption value);
    [CompilerGeneratedAttribute]
internal ModelItem get_ModelItem();
    [CompilerGeneratedAttribute]
internal void set_ModelItem(ModelItem value);
    [CompilerGeneratedAttribute]
internal ModelProperty get_ModelProperty();
    [CompilerGeneratedAttribute]
internal void set_ModelProperty(ModelProperty value);
    [CompilerGeneratedAttribute]
internal string get_Text();
    [CompilerGeneratedAttribute]
internal void set_Text(string value);
    [CompilerGeneratedAttribute]
internal string get_PropertyPath();
    [CompilerGeneratedAttribute]
internal void set_PropertyPath(string value);
}
internal enum System.Activities.Presentation.Model.SearchableEntryOption : Enum {
    public int value__;
    public static SearchableEntryOption Variable;
    public static SearchableEntryOption Argument;
    public static SearchableEntryOption Property;
}
public class System.Activities.Presentation.Model.TextImage : object {
    public int StartLineIndex { get; public set; }
    public IList`1<string> Lines { get; internal set; }
    [CompilerGeneratedAttribute]
public int get_StartLineIndex();
    [CompilerGeneratedAttribute]
public void set_StartLineIndex(int value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Lines();
    [CompilerGeneratedAttribute]
internal void set_Lines(IList`1<string> value);
}
[DefaultMemberAttribute("Item")]
internal class System.Activities.Presentation.Model.WeakKeyDictionary`2 : object {
    public ICollection`1<K> Keys { get; }
    public ICollection`1<V> Values { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public V Item { get; public set; }
    public WeakKeyDictionary`2(IEqualityComparer`1<K> comparer);
    protected virtual void Finalize();
    public sealed virtual ICollection`1<K> get_Keys();
    public sealed virtual ICollection`1<V> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual V get_Item(K key);
    public sealed virtual void set_Item(K key, V value);
    public sealed virtual bool TryGetValue(K key, V& value);
    public sealed virtual void Add(K key, V value);
    public sealed virtual bool ContainsKey(K key);
    public sealed virtual bool Remove(K key);
    public sealed virtual void Add(KeyValuePair`2<K, V> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<K, V> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<K, V> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<K, V>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Activities.Presentation.Model.XamlUtilities : object {
    private static XamlUtilities();
    public static TypeConverter GetConverter(Type itemType);
}
internal class System.Activities.Presentation.ModelItemKeyValuePair`2 : object {
    internal DictionaryItemsCollection`2<TKey, TValue> collection;
    public TKey Key { get; public set; }
    public TValue Value { get; public set; }
    public ModelItemKeyValuePair`2(TKey key, TValue value);
    public TKey get_Key();
    public void set_Key(TKey value);
    public TValue get_Value();
    public void set_Value(TValue value);
}
internal class System.Activities.Presentation.MultiTargetingXamlSchemaContext : XamlSchemaContext {
    public MultiTargetingXamlSchemaContext(MultiTargetingSupportService multiTargetingService);
    protected virtual XamlType GetXamlType(string xamlNamespace, string name, XamlType[] typeArguments);
}
internal class System.Activities.Presentation.NamespaceData : object {
    public string Namespace { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(string value);
    public virtual string ToString();
}
internal static class System.Activities.Presentation.NamespaceHelper : object {
    private static NamespaceHelper();
    internal static IList`1<string> GetTextExpressionNamespaces(object root, IList`1& references);
    internal static void SetTextExpressionNamespaces(object root, IList`1<string> namespaces, IList`1<AssemblyReference> references);
    internal static void SetVisualBasicSettings(object root, VisualBasicSettings settings);
    internal static void ConvertToTextExpressionImports(VisualBasicSettings settings, IList`1& importedNamespace, IList`1& references);
    internal static void ConvertToVBSettings(IList`1<string> importedNamespaces, IList`1<AssemblyReference> references, EditingContext context, VisualBasicSettings& settings);
}
[DefaultMemberAttribute("Item")]
internal abstract class System.Activities.Presentation.NamespaceList : object {
    protected List`1<NamespaceData> UniqueNamespaces { get; }
    public Dictionary`2<string, List`1<string>> AvailableNamespaces { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    protected List`1<NamespaceData> get_UniqueNamespaces();
    public Dictionary`2<string, List`1<string>> get_AvailableNamespaces();
    internal int Lookup(string ns);
    public sealed virtual int Add(object value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    public sealed virtual void Insert(int index, object value);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual IEnumerator GetEnumerator();
    public void UpdateAssemblyInfo(string importedNamespace);
    protected abstract virtual void AddCore(NamespaceData ns);
    protected abstract virtual void ClearCore();
    protected abstract virtual void InsertCore(int index, NamespaceData ns);
    protected abstract virtual void RemoveNamespaceFromSet(string ns);
    protected abstract virtual void SetValueAt(int index, NamespaceData ns);
    protected abstract virtual void UpdateAssemblyInfoCore(string importedNamespace);
}
internal class System.Activities.Presentation.NamespaceListPropertyDescriptor : PropertyDescriptor {
    public static string ImportCollectionPropertyName;
    public static string AvailableNamespacesPropertyName;
    public static string NamespacePropertyName;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public bool IsBrowsable { get; }
    public NamespaceListPropertyDescriptor(object instance);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool get_IsBrowsable();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    protected virtual void FillAttributes(IList attributeList);
}
internal static class System.Activities.Presentation.NamespaceSettingsHandler : object {
    private static NamespaceSettingsHandler();
    public static void PreviewLoadRoot(object sender, PreviewLoadEventArgs args);
}
internal class System.Activities.Presentation.NonTextualExpressionMorphHelper : ExpressionMorphHelper {
    public virtual bool TryMorphExpression(ActivityWithResult expression, bool isLocationExpression, Type newType, EditingContext context, ActivityWithResult& newExpression);
}
internal class System.Activities.Presentation.NotConverter : object {
    private static NotConverter();
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.NullToBooleanConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class System.Activities.Presentation.ObjectReferenceService : object {
    public ObjectReferenceService(EditingContext context);
    public void add_SourceLocationUpdated(EventHandler`1<SourceLocationUpdatedEventArgs> value);
    public void remove_SourceLocationUpdated(EventHandler`1<SourceLocationUpdatedEventArgs> value);
    public Guid AcquireObjectReference(int startLine, int startColumn, int endLine, int endColumn);
    public Guid AcquireObjectReference(object obj);
    public void ReleaseObjectReference(Guid objectReferenceId);
    public bool TryGetObject(Guid objectReferenceId, Object& obj);
    internal void OnSaveCompleted();
}
internal abstract class System.Activities.Presentation.OrderToken : object {
    protected OrderToken(OrderTokenPrecedence precedence, OrderToken reference, OrderTokenConflictResolution conflictResolution);
    public virtual int CompareTo(OrderToken other);
    protected virtual int ResolveConflict(OrderToken left, OrderToken right);
}
internal enum System.Activities.Presentation.OrderTokenConflictResolution : Enum {
    public int value__;
    public static OrderTokenConflictResolution Win;
    public static OrderTokenConflictResolution Lose;
}
internal enum System.Activities.Presentation.OrderTokenPrecedence : Enum {
    public int value__;
    public static OrderTokenPrecedence Before;
    public static OrderTokenPrecedence After;
}
internal class System.Activities.Presentation.PropertyDescriptorData : object {
    public Type OwnerType { get; public set; }
    public string PropertyName { get; public set; }
    public Type PropertyType { get; public set; }
    public Func`2<DesignObjectWrapper, object> PropertyGetter { get; public set; }
    public Action`2<DesignObjectWrapper, object> PropertySetter { get; public set; }
    public Func`4<DesignObjectWrapper, object, List`1<string>, bool> PropertyValidator { get; public set; }
    public Attribute[] PropertyAttributes { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_OwnerType();
    [CompilerGeneratedAttribute]
public void set_OwnerType(Type value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Type get_PropertyType();
    [CompilerGeneratedAttribute]
public void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<DesignObjectWrapper, object> get_PropertyGetter();
    [CompilerGeneratedAttribute]
public void set_PropertyGetter(Func`2<DesignObjectWrapper, object> value);
    [CompilerGeneratedAttribute]
public Action`2<DesignObjectWrapper, object> get_PropertySetter();
    [CompilerGeneratedAttribute]
public void set_PropertySetter(Action`2<DesignObjectWrapper, object> value);
    [CompilerGeneratedAttribute]
public Func`4<DesignObjectWrapper, object, List`1<string>, bool> get_PropertyValidator();
    [CompilerGeneratedAttribute]
public void set_PropertyValidator(Func`4<DesignObjectWrapper, object, List`1<string>, bool> value);
    [CompilerGeneratedAttribute]
public Attribute[] get_PropertyAttributes();
    [CompilerGeneratedAttribute]
public void set_PropertyAttributes(Attribute[] value);
}
public abstract class System.Activities.Presentation.PropertyEditing.CategoryEditor : object {
    public string TargetCategory { get; }
    public DataTemplate EditorTemplate { get; }
    public abstract virtual bool ConsumesProperty(PropertyEntry propertyEntry);
    public abstract virtual string get_TargetCategory();
    public abstract virtual DataTemplate get_EditorTemplate();
    public abstract virtual object GetImage(Size desiredSize);
    public static EditorAttribute CreateEditorAttribute(CategoryEditor editor);
    public static EditorAttribute CreateEditorAttribute(Type categoryEditorType);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Activities.Presentation.PropertyEditing.CategoryEntry : object {
    public string CategoryName { get; }
    public IEnumerable`1<PropertyEntry> Properties { get; }
    public PropertyEntry Item { get; }
    public bool MatchesFilter { get; protected set; }
    protected CategoryEntry(string name);
    public string get_CategoryName();
    public abstract virtual IEnumerable`1<PropertyEntry> get_Properties();
    public abstract virtual PropertyEntry get_Item(string propertyName);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(string propertyName);
    public sealed virtual void add_FilterApplied(EventHandler`1<PropertyFilterAppliedEventArgs> value);
    public sealed virtual void remove_FilterApplied(EventHandler`1<PropertyFilterAppliedEventArgs> value);
    protected virtual void OnFilterApplied(PropertyFilter filter);
    public virtual void ApplyFilter(PropertyFilter filter);
    public virtual bool get_MatchesFilter();
    protected virtual void set_MatchesFilter(bool value);
    public abstract virtual bool MatchesPredicate(PropertyFilterPredicate predicate);
}
public class System.Activities.Presentation.PropertyEditing.DependencyPropertyValueSource : PropertyValueSource {
    public static DependencyPropertyValueSource DataBound { get; }
    public static DependencyPropertyValueSource SystemResource { get; }
    public static DependencyPropertyValueSource LocalDynamicResource { get; }
    public static DependencyPropertyValueSource LocalStaticResource { get; }
    public static DependencyPropertyValueSource TemplateBinding { get; }
    public static DependencyPropertyValueSource CustomMarkupExtension { get; }
    public static DependencyPropertyValueSource Local { get; }
    public static DependencyPropertyValueSource DefaultValue { get; }
    public static DependencyPropertyValueSource Inherited { get; }
    public bool IsExpression { get; }
    public bool IsResource { get; }
    public bool IsDataBound { get; }
    public bool IsSystemResource { get; }
    public bool IsLocalResource { get; }
    public bool IsTemplateBinding { get; }
    public bool IsCustomMarkupExtension { get; }
    public bool IsLocal { get; }
    public bool IsDefaultValue { get; }
    public bool IsInherited { get; }
    public static DependencyPropertyValueSource get_DataBound();
    public static DependencyPropertyValueSource get_SystemResource();
    public static DependencyPropertyValueSource get_LocalDynamicResource();
    public static DependencyPropertyValueSource get_LocalStaticResource();
    public static DependencyPropertyValueSource get_TemplateBinding();
    public static DependencyPropertyValueSource get_CustomMarkupExtension();
    public static DependencyPropertyValueSource get_Local();
    public static DependencyPropertyValueSource get_DefaultValue();
    public static DependencyPropertyValueSource get_Inherited();
    public bool get_IsExpression();
    public bool get_IsResource();
    public bool get_IsDataBound();
    public bool get_IsSystemResource();
    public bool get_IsLocalResource();
    public bool get_IsTemplateBinding();
    public bool get_IsCustomMarkupExtension();
    public bool get_IsLocal();
    public bool get_IsDefaultValue();
    public bool get_IsInherited();
}
public class System.Activities.Presentation.PropertyEditing.DialogPropertyValueEditor : PropertyValueEditor {
    public DataTemplate DialogEditorTemplate { get; public set; }
    public DialogPropertyValueEditor(DataTemplate dialogEditorTemplate, DataTemplate inlineEditorTemplate);
    public DataTemplate get_DialogEditorTemplate();
    public void set_DialogEditorTemplate(DataTemplate value);
    public virtual void ShowDialog(PropertyValue propertyValue, IInputElement commandSource);
    internal virtual DataTemplate GetPropertyValueEditor(PropertyContainerEditMode mode);
}
public class System.Activities.Presentation.PropertyEditing.EditModeSwitchButton : Button {
    public static DependencyProperty TargetEditModeProperty;
    public static DependencyProperty SyncModeToOwningContainerProperty;
    public PropertyContainerEditMode TargetEditMode { get; public set; }
    public bool SyncModeToOwningContainer { get; public set; }
    private static EditModeSwitchButton();
    public PropertyContainerEditMode get_TargetEditMode();
    public void set_TargetEditMode(PropertyContainerEditMode value);
    public bool get_SyncModeToOwningContainer();
    public void set_SyncModeToOwningContainer(bool value);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
}
[AttributeUsageAttribute("128")]
public class System.Activities.Presentation.PropertyEditing.EditorOptionAttribute : Attribute {
    public string Name { get; public set; }
    public object Value { get; public set; }
    public object TypeId { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual object get_TypeId();
    public static bool TryGetOptionValue(IEnumerable attributes, string optionName, Object& optionValue);
}
[AttributeUsageAttribute("132")]
public class System.Activities.Presentation.PropertyEditing.EditorReuseAttribute : Attribute {
    public bool ReuseEditor { get; }
    public EditorReuseAttribute(bool reuseEditor);
    public bool get_ReuseEditor();
}
internal static class System.Activities.Presentation.PropertyEditing.EnumValidator : object {
    public static bool IsValid(PropertyValueExceptionSource value);
}
public class System.Activities.Presentation.PropertyEditing.ExtendedPropertyValueEditor : PropertyValueEditor {
    public DataTemplate ExtendedEditorTemplate { get; public set; }
    public ExtendedPropertyValueEditor(DataTemplate extendedEditorTemplate, DataTemplate inlineEditorTemplate);
    public DataTemplate get_ExtendedEditorTemplate();
    public void set_ExtendedEditorTemplate(DataTemplate value);
    internal virtual DataTemplate GetPropertyValueEditor(PropertyContainerEditMode mode);
}
public interface System.Activities.Presentation.PropertyEditing.IPropertyFilterTarget {
    public bool MatchesFilter { get; }
    public abstract virtual void add_FilterApplied(EventHandler`1<PropertyFilterAppliedEventArgs> value);
    public abstract virtual void remove_FilterApplied(EventHandler`1<PropertyFilterAppliedEventArgs> value);
    public abstract virtual bool get_MatchesFilter();
    public abstract virtual void ApplyFilter(PropertyFilter filter);
    public abstract virtual bool MatchesPredicate(PropertyFilterPredicate predicate);
}
internal class System.Activities.Presentation.PropertyEditing.NewItemFactory : object {
    public virtual object GetImage(Type type, Size desiredSize);
    public virtual string GetDisplayName(Type type);
    public virtual object CreateInstance(Type type);
}
[AttributeUsageAttribute("132")]
internal class System.Activities.Presentation.PropertyEditing.NewItemTypesAttribute : Attribute {
    public Type Type { get; }
    public IEnumerable`1<Type> Types { get; }
    public Type FactoryType { get; public set; }
    public object TypeId { get; }
    public NewItemTypesAttribute(Type type);
    public NewItemTypesAttribute(Type[] types);
    public Type get_Type();
    public IEnumerable`1<Type> get_Types();
    public Type get_FactoryType();
    public void set_FactoryType(Type value);
    public virtual object get_TypeId();
}
internal class System.Activities.Presentation.PropertyEditing.PropertyContainer : Control {
    public static DependencyProperty IsValueEditEnabledProperty;
    public static DependencyProperty PropertyEntryProperty;
    public static DependencyProperty ActiveEditModeProperty;
    public static DependencyProperty DialogCommandSourceProperty;
    public static DependencyProperty OwningPropertyContainerProperty;
    public static DependencyProperty InlineRowTemplateProperty;
    public static DependencyProperty ExtendedPopupRowTemplateProperty;
    public static DependencyProperty ExtendedPinnedRowTemplateProperty;
    public static DependencyProperty DefaultStandardValuesPropertyValueEditorProperty;
    public static DependencyProperty DefaultPropertyValueEditorProperty;
    public PropertyEntry PropertyEntry { get; public set; }
    public bool IsValueEditEnabled { get; public set; }
    public PropertyContainerEditMode ActiveEditMode { get; public set; }
    public IInputElement DialogCommandSource { get; public set; }
    public ControlTemplate InlineRowTemplate { get; public set; }
    public ControlTemplate ExtendedPopupRowTemplate { get; public set; }
    public ControlTemplate ExtendedPinnedRowTemplate { get; public set; }
    public PropertyValueEditor DefaultStandardValuesPropertyValueEditor { get; public set; }
    public PropertyValueEditor DefaultPropertyValueEditor { get; public set; }
    public DataTemplate InlineEditorTemplate { get; }
    public DataTemplate ExtendedEditorTemplate { get; }
    public DataTemplate DialogEditorTemplate { get; }
    public bool MatchesFilter { get; }
    public static RoutedCommand OpenDialogWindow { get; }
    private static PropertyContainer();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal void add_DependencyPropertyChanged(DependencyPropertyChangedEventHandler value);
    internal void remove_DependencyPropertyChanged(DependencyPropertyChangedEventHandler value);
    public PropertyEntry get_PropertyEntry();
    public void set_PropertyEntry(PropertyEntry value);
    public bool get_IsValueEditEnabled();
    public void set_IsValueEditEnabled(bool value);
    public PropertyContainerEditMode get_ActiveEditMode();
    public void set_ActiveEditMode(PropertyContainerEditMode value);
    public IInputElement get_DialogCommandSource();
    public void set_DialogCommandSource(IInputElement value);
    public static void SetOwningPropertyContainer(DependencyObject dependencyObject, PropertyContainer value);
    public static PropertyContainer GetOwningPropertyContainer(DependencyObject dependencyObject);
    public ControlTemplate get_InlineRowTemplate();
    public void set_InlineRowTemplate(ControlTemplate value);
    public ControlTemplate get_ExtendedPopupRowTemplate();
    public void set_ExtendedPopupRowTemplate(ControlTemplate value);
    public ControlTemplate get_ExtendedPinnedRowTemplate();
    public void set_ExtendedPinnedRowTemplate(ControlTemplate value);
    public PropertyValueEditor get_DefaultStandardValuesPropertyValueEditor();
    public void set_DefaultStandardValuesPropertyValueEditor(PropertyValueEditor value);
    public PropertyValueEditor get_DefaultPropertyValueEditor();
    public void set_DefaultPropertyValueEditor(PropertyValueEditor value);
    public DataTemplate get_InlineEditorTemplate();
    public DataTemplate get_ExtendedEditorTemplate();
    public DataTemplate get_DialogEditorTemplate();
    public bool get_MatchesFilter();
    public static RoutedCommand get_OpenDialogWindow();
    internal bool SupportsEditMode(PropertyContainerEditMode mode);
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
}
public enum System.Activities.Presentation.PropertyEditing.PropertyContainerEditMode : Enum {
    public int value__;
    public static PropertyContainerEditMode Inline;
    public static PropertyContainerEditMode ExtendedPopup;
    public static PropertyContainerEditMode ExtendedPinned;
    public static PropertyContainerEditMode Dialog;
}
public abstract class System.Activities.Presentation.PropertyEditing.PropertyEntry : object {
    public string PropertyName { get; }
    public string DisplayName { get; }
    public Type PropertyType { get; }
    public string CategoryName { get; }
    public string Description { get; }
    protected bool HasStandardValues { get; }
    internal bool HasStandardValuesInternal { get; }
    public bool IsReadOnly { get; }
    public bool IsAdvanced { get; }
    public ICollection StandardValues { get; }
    public PropertyValueEditor PropertyValueEditor { get; }
    public PropertyValue ParentValue { get; }
    public PropertyValue PropertyValue { get; }
    public bool MatchesFilter { get; protected set; }
    protected PropertyEntry(PropertyValue parentValue);
    public abstract virtual string get_PropertyName();
    public virtual string get_DisplayName();
    public abstract virtual Type get_PropertyType();
    public abstract virtual string get_CategoryName();
    public abstract virtual string get_Description();
    protected virtual bool get_HasStandardValues();
    internal bool get_HasStandardValuesInternal();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsAdvanced();
    public abstract virtual ICollection get_StandardValues();
    public abstract virtual PropertyValueEditor get_PropertyValueEditor();
    public PropertyValue get_ParentValue();
    public PropertyValue get_PropertyValue();
    protected abstract virtual PropertyValue CreatePropertyValueInstance();
    public sealed virtual void add_FilterApplied(EventHandler`1<PropertyFilterAppliedEventArgs> value);
    public sealed virtual void remove_FilterApplied(EventHandler`1<PropertyFilterAppliedEventArgs> value);
    public sealed virtual bool get_MatchesFilter();
    protected void set_MatchesFilter(bool value);
    public virtual bool MatchesPredicate(PropertyFilterPredicate predicate);
    public virtual void ApplyFilter(PropertyFilter filter);
    protected virtual void OnFilterApplied(PropertyFilter filter);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnPropertyChanged(string propertyName);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Activities.Presentation.PropertyEditing.PropertyEntryCollection : object {
    public PropertyValue ParentValue { get; }
    public PropertyEntry Item { get; }
    public int Count { get; }
    protected PropertyEntryCollection(PropertyValue parentValue);
    public PropertyValue get_ParentValue();
    public abstract virtual PropertyEntry get_Item(string propertyName);
    public abstract virtual int get_Count();
    public abstract virtual IEnumerator`1<PropertyEntry> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Activities.Presentation.PropertyEditing.PropertyFilter : object {
    public bool IsEmpty { get; }
    public PropertyFilter(string filterText);
    public PropertyFilter(IEnumerable`1<PropertyFilterPredicate> predicates);
    public bool get_IsEmpty();
    public bool Match(IPropertyFilterTarget target);
}
public class System.Activities.Presentation.PropertyEditing.PropertyFilterAppliedEventArgs : EventArgs {
    public PropertyFilter Filter { get; }
    public PropertyFilterAppliedEventArgs(PropertyFilter filter);
    public PropertyFilter get_Filter();
}
public class System.Activities.Presentation.PropertyEditing.PropertyFilterPredicate : object {
    protected string MatchText { get; }
    public PropertyFilterPredicate(string matchText);
    protected string get_MatchText();
    public virtual bool Match(string target);
}
internal class System.Activities.Presentation.PropertyEditing.PropertyMarker : Control {
}
internal class System.Activities.Presentation.PropertyEditing.PropertyOrder : OrderToken {
    public static PropertyOrder Default { get; }
    public static PropertyOrder CreateAfter(OrderToken reference);
    protected virtual int ResolveConflict(OrderToken left, OrderToken right);
    public static PropertyOrder get_Default();
}
[AttributeUsageAttribute("128")]
internal class System.Activities.Presentation.PropertyEditing.PropertyOrderAttribute : Attribute {
    public PropertyOrder Order { get; }
    public PropertyOrderAttribute(PropertyOrder order);
    public PropertyOrder get_Order();
}
public abstract class System.Activities.Presentation.PropertyEditing.PropertyValue : object {
    public PropertyEntry ParentProperty { get; }
    public PropertyValueSource Source { get; }
    public bool IsDefaultValue { get; }
    public bool IsMixedValue { get; }
    public bool CanConvertFromString { get; }
    public object Value { get; public set; }
    public string StringValue { get; public set; }
    public bool HasSubProperties { get; }
    public PropertyEntryCollection SubProperties { get; }
    public bool IsCollection { get; }
    public PropertyValueCollection Collection { get; }
    protected bool CatchExceptions { get; }
    protected PropertyValue(PropertyEntry parentProperty);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public void add_RootValueChanged(EventHandler value);
    public void remove_RootValueChanged(EventHandler value);
    public void add_SubPropertyChanged(EventHandler value);
    public void remove_SubPropertyChanged(EventHandler value);
    public PropertyEntry get_ParentProperty();
    public abstract virtual PropertyValueSource get_Source();
    public abstract virtual bool get_IsDefaultValue();
    public abstract virtual bool get_IsMixedValue();
    protected abstract virtual void ValidateValue(object valueToValidate);
    public abstract virtual bool get_CanConvertFromString();
    protected abstract virtual object ConvertStringToValue(string value);
    protected abstract virtual string ConvertValueToString(object value);
    protected abstract virtual object GetValueCore();
    protected abstract virtual void SetValueCore(object value);
    public abstract virtual void ClearValue();
    public object get_Value();
    public void set_Value(object value);
    public string get_StringValue();
    public void set_StringValue(string value);
    public abstract virtual bool get_HasSubProperties();
    public abstract virtual PropertyEntryCollection get_SubProperties();
    public abstract virtual bool get_IsCollection();
    public abstract virtual PropertyValueCollection get_Collection();
    public void add_PropertyValueException(EventHandler`1<PropertyValueExceptionEventArgs> value);
    public void remove_PropertyValueException(EventHandler`1<PropertyValueExceptionEventArgs> value);
    protected virtual bool get_CatchExceptions();
    protected virtual void OnPropertyValueException(PropertyValueExceptionEventArgs e);
    protected virtual void NotifyRootValueChanged();
    protected void NotifySubPropertyChanged();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnPropertyChanged(string propertyName);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Activities.Presentation.PropertyEditing.PropertyValueCollection : object {
    public PropertyValue ParentValue { get; }
    public PropertyValue Item { get; }
    public int Count { get; }
    protected PropertyValueCollection(PropertyValue parentValue);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public PropertyValue get_ParentValue();
    public abstract virtual PropertyValue get_Item(int index);
    public abstract virtual PropertyValue Add(object value);
    public abstract virtual PropertyValue Insert(object value, int index);
    public abstract virtual bool Remove(PropertyValue propertyValue);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual int get_Count();
    public abstract virtual void SetIndex(int currentIndex, int newIndex);
    public abstract virtual IEnumerator`1<PropertyValue> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
}
public class System.Activities.Presentation.PropertyEditing.PropertyValueEditor : object {
    public DataTemplate InlineEditorTemplate { get; public set; }
    public PropertyValueEditor(DataTemplate inlineEditorTemplate);
    public DataTemplate get_InlineEditorTemplate();
    public void set_InlineEditorTemplate(DataTemplate value);
    internal virtual DataTemplate GetPropertyValueEditor(PropertyContainerEditMode mode);
    public static EditorAttribute CreateEditorAttribute(PropertyValueEditor editor);
    public static EditorAttribute CreateEditorAttribute(Type propertyValueEditorType);
}
public static class System.Activities.Presentation.PropertyEditing.PropertyValueEditorCommands : object {
    public static RoutedCommand ShowInlineEditor { get; }
    public static RoutedCommand ShowExtendedPopupEditor { get; }
    public static RoutedCommand ShowExtendedPinnedEditor { get; }
    public static RoutedCommand ShowDialogEditor { get; }
    public static RoutedCommand BeginTransaction { get; }
    public static RoutedCommand CommitTransaction { get; }
    public static RoutedCommand AbortTransaction { get; }
    public static RoutedCommand FinishEditing { get; }
    public static RoutedCommand get_ShowInlineEditor();
    public static RoutedCommand get_ShowExtendedPopupEditor();
    public static RoutedCommand get_ShowExtendedPinnedEditor();
    public static RoutedCommand get_ShowDialogEditor();
    public static RoutedCommand get_BeginTransaction();
    public static RoutedCommand get_CommitTransaction();
    public static RoutedCommand get_AbortTransaction();
    public static RoutedCommand get_FinishEditing();
}
public class System.Activities.Presentation.PropertyEditing.PropertyValueExceptionEventArgs : EventArgs {
    public string Message { get; }
    public PropertyValue PropertyValue { get; }
    public PropertyValueExceptionSource Source { get; }
    public Exception Exception { get; }
    public PropertyValueExceptionEventArgs(string message, PropertyValue value, PropertyValueExceptionSource source, Exception exception);
    public string get_Message();
    public PropertyValue get_PropertyValue();
    public PropertyValueExceptionSource get_Source();
    public Exception get_Exception();
}
public enum System.Activities.Presentation.PropertyEditing.PropertyValueExceptionSource : Enum {
    public int value__;
    public static PropertyValueExceptionSource Get;
    public static PropertyValueExceptionSource Set;
}
public abstract class System.Activities.Presentation.PropertyEditing.PropertyValueSource : object {
}
internal class System.Activities.Presentation.PropertyEditing.VersionPropertyValueEditor : PropertyValueEditor {
}
internal static class System.Activities.Presentation.PropertyReferenceUtilities : object {
    public static string GetPropertyReference(object instance, string targetProperty);
    public static void SetPropertyReference(object instance, string targetProperty, string sourceProperty);
}
public class System.Activities.Presentation.PublishServiceCallback : MulticastDelegate {
    public PublishServiceCallback(object object, IntPtr method);
    public virtual object Invoke(Type serviceType);
    public virtual IAsyncResult BeginInvoke(Type serviceType, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class System.Activities.Presentation.PublishServiceCallback`1 : MulticastDelegate {
    public PublishServiceCallback`1(object object, IntPtr method);
    public virtual TServiceType Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual TServiceType EndInvoke(IAsyncResult result);
}
internal static class System.Activities.Presentation.RetriableClipboard : object {
    internal static IDataObject GetDataObject();
    internal static void SetDataObject(object data, bool copy);
    internal static void SetImage(BitmapSource image);
}
internal class System.Activities.Presentation.RootModelTypeDescriptionProvider : TypeDescriptionProvider {
    public RootModelTypeDescriptionProvider(object instance);
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance);
}
internal class System.Activities.Presentation.RootModelTypeDescriptor : CustomTypeDescriptor {
    public RootModelTypeDescriptor(ICustomTypeDescriptor parent, object root);
    public virtual PropertyDescriptorCollection GetProperties();
    public virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
}
public abstract class System.Activities.Presentation.ServiceManager : object {
    public abstract virtual bool Contains(Type serviceType);
    public bool Contains();
    public TServiceType GetRequiredService();
    public TServiceType GetService();
    public abstract virtual object GetService(Type serviceType);
    public abstract virtual IEnumerator`1<Type> GetEnumerator();
    public abstract virtual void Subscribe(Type serviceType, SubscribeServiceCallback callback);
    public void Subscribe(SubscribeServiceCallback`1<TServiceType> callback);
    public abstract virtual void Publish(Type serviceType, PublishServiceCallback callback);
    public abstract virtual void Publish(Type serviceType, object serviceInstance);
    public void Publish(PublishServiceCallback`1<TServiceType> callback);
    public void Publish(TServiceType serviceInstance);
    public void Unsubscribe(SubscribeServiceCallback`1<TServiceType> callback);
    public abstract virtual void Unsubscribe(Type serviceType, SubscribeServiceCallback callback);
    protected static object GetTarget(Delegate callback);
    protected static Delegate RemoveCallback(Delegate existing, Delegate toRemove);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class System.Activities.Presentation.Services.ModelChangedEventArgs : EventArgs {
    [ObsoleteAttribute("Don't use this property. Use "ModelChangeInfo" instead.")]
public IEnumerable`1<ModelItem> ItemsAdded { get; }
    [ObsoleteAttribute("Don't use this property. Use "ModelChangeInfo" instead.")]
public IEnumerable`1<ModelItem> ItemsRemoved { get; }
    [ObsoleteAttribute("Don't use this property. Use "ModelChangeInfo" instead.")]
public IEnumerable`1<ModelProperty> PropertiesChanged { get; }
    public ModelChangeInfo ModelChangeInfo { get; }
    public abstract virtual IEnumerable`1<ModelItem> get_ItemsAdded();
    public abstract virtual IEnumerable`1<ModelItem> get_ItemsRemoved();
    public abstract virtual IEnumerable`1<ModelProperty> get_PropertiesChanged();
    public virtual ModelChangeInfo get_ModelChangeInfo();
}
public abstract class System.Activities.Presentation.Services.ModelChangeInfo : object {
    public ModelChangeType ModelChangeType { get; }
    public ModelItem Subject { get; }
    public string PropertyName { get; }
    public ModelItem Key { get; }
    public ModelItem OldValue { get; }
    public ModelItem Value { get; }
    public abstract virtual ModelChangeType get_ModelChangeType();
    public abstract virtual ModelItem get_Subject();
    public abstract virtual string get_PropertyName();
    public abstract virtual ModelItem get_Key();
    public abstract virtual ModelItem get_OldValue();
    public abstract virtual ModelItem get_Value();
}
internal class System.Activities.Presentation.Services.ModelChangeInfoImpl : ModelChangeInfo {
    public ModelChangeType ModelChangeType { get; }
    public ModelItem Subject { get; }
    public string PropertyName { get; }
    public ModelItem Key { get; }
    public ModelItem OldValue { get; }
    public ModelItem Value { get; }
    public virtual ModelChangeType get_ModelChangeType();
    public virtual ModelItem get_Subject();
    public virtual string get_PropertyName();
    public virtual ModelItem get_Key();
    public virtual ModelItem get_OldValue();
    public virtual ModelItem get_Value();
    public static ModelChangeInfoImpl CreatePropertyChanged(ModelItem subject, string propertyName, ModelItem oldValue, ModelItem newValue);
    public static ModelChangeInfoImpl CreateCollectionItemAdded(ModelItem subject, ModelItem item);
    public static ModelChangeInfoImpl CreateCollectionItemRemoved(ModelItem subject, ModelItem item);
    public static ModelChangeInfoImpl CreateDictionaryKeyValueAdded(ModelItem subject, ModelItem key, ModelItem value);
    public static ModelChangeInfoImpl CreateDictionaryKeyValueRemoved(ModelItem subject, ModelItem key, ModelItem value);
    public static ModelChangeInfoImpl CreateDictionaryValueChanged(ModelItem subject, ModelItem key, ModelItem oldValue, ModelItem newValue);
}
public enum System.Activities.Presentation.Services.ModelChangeType : Enum {
    public int value__;
    public static ModelChangeType None;
    public static ModelChangeType PropertyChanged;
    public static ModelChangeType CollectionItemAdded;
    public static ModelChangeType CollectionItemRemoved;
    public static ModelChangeType DictionaryKeyValueAdded;
    public static ModelChangeType DictionaryKeyValueRemoved;
    public static ModelChangeType DictionaryValueChanged;
}
public abstract class System.Activities.Presentation.Services.ModelSearchService : object {
    public abstract virtual TextImage GenerateTextImage();
    public abstract virtual bool NavigateTo(int location);
    public abstract virtual bool NavigateTo(int startLine, int startColumn, int endLine, int endColumn);
}
public abstract class System.Activities.Presentation.Services.ModelService : object {
    public ModelItem Root { get; }
    public abstract virtual ModelItem get_Root();
    public abstract virtual void add_ModelChanged(EventHandler`1<ModelChangedEventArgs> value);
    public abstract virtual void remove_ModelChanged(EventHandler`1<ModelChangedEventArgs> value);
    protected abstract virtual ModelItem CreateItem(Type itemType, CreateOptions options, Object[] arguments);
    protected abstract virtual ModelItem CreateItem(object item);
    protected abstract virtual ModelItem CreateStaticMemberItem(Type type, string memberName);
    public abstract virtual IEnumerable`1<ModelItem> Find(ModelItem startingItem, Type type);
    public abstract virtual IEnumerable`1<ModelItem> Find(ModelItem startingItem, Predicate`1<Type> match);
    public ModelItem FromName(ModelItem scope, string name);
    public abstract virtual ModelItem FromName(ModelItem scope, string name, StringComparison comparison);
    internal ModelItem InvokeCreateItem(Type itemType, CreateOptions options, Object[] arguments);
    internal ModelItem InvokeCreateStaticMemberItem(Type type, string memberName);
    internal ModelItem InvokeCreateItem(object item);
}
public abstract class System.Activities.Presentation.Services.ViewService : object {
    public abstract virtual ModelItem GetModel(DependencyObject view);
    public abstract virtual DependencyObject GetView(ModelItem model);
}
internal class System.Activities.Presentation.ShowExpandedMultiValueConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class System.Activities.Presentation.SourceLocationUpdatedEventArgs : EventArgs {
    public Guid ObjectReference { get; private set; }
    public SourceLocation UpdatedSourceLocation { get; private set; }
    public SourceLocationUpdatedEventArgs(Guid objectReference, SourceLocation updatedSourceLocation);
    [CompilerGeneratedAttribute]
public Guid get_ObjectReference();
    [CompilerGeneratedAttribute]
private void set_ObjectReference(Guid value);
    [CompilerGeneratedAttribute]
public SourceLocation get_UpdatedSourceLocation();
    [CompilerGeneratedAttribute]
private void set_UpdatedSourceLocation(SourceLocation value);
}
internal enum System.Activities.Presentation.Sqm.ActivityTypeId : Enum {
    public int value__;
    public static ActivityTypeId Unknown;
    public static ActivityTypeId DoWhile;
    public static ActivityTypeId ForEach;
    public static ActivityTypeId If;
    public static ActivityTypeId Parallel;
    public static ActivityTypeId ParallelForEach;
    public static ActivityTypeId Pick;
    public static ActivityTypeId PickBranch;
    public static ActivityTypeId Sequence;
    public static ActivityTypeId Switch;
    public static ActivityTypeId While;
    public static ActivityTypeId Flowchart;
    public static ActivityTypeId FlowDecision;
    public static ActivityTypeId FlowSwitch;
    public static ActivityTypeId CorrelationScope;
    public static ActivityTypeId InitializeCorrelation;
    public static ActivityTypeId Receive;
    public static ActivityTypeId ReceiveAndSendReply;
    public static ActivityTypeId Send;
    public static ActivityTypeId SendAndReceiveReply;
    public static ActivityTypeId TransactedReceiveScope;
    public static ActivityTypeId Persist;
    public static ActivityTypeId TerminateWorkflow;
    public static ActivityTypeId Assign;
    public static ActivityTypeId Delay;
    public static ActivityTypeId InvokeMethod;
    public static ActivityTypeId WriteLine;
    public static ActivityTypeId CancellationScope;
    public static ActivityTypeId CompensableActivity;
    public static ActivityTypeId Compensate;
    public static ActivityTypeId Confirm;
    public static ActivityTypeId TransactionScope;
    public static ActivityTypeId AddToCollection;
    public static ActivityTypeId ClearCollection;
    public static ActivityTypeId ExistsInCollection;
    public static ActivityTypeId RemoveFromCollection;
    public static ActivityTypeId Throw;
    public static ActivityTypeId TryCatch;
    public static ActivityTypeId Rethrow;
    public static ActivityTypeId Interop;
    public static ActivityTypeId StateMachine;
    public static ActivityTypeId State;
    public static ActivityTypeId FinalState;
    public static ActivityTypeId NoPersistScope;
    public static ActivityTypeId InvokeDelegate;
}
internal static class System.Activities.Presentation.Sqm.ActivityUsageCounter : object {
    private static ActivityUsageCounter();
    internal static ActivityTypeId MapTypeToId(Type activityType);
    internal static void ReportUsage(IVSSqmService sqmService, Type activityType);
}
internal enum System.Activities.Presentation.Sqm.DataPointIds : Enum {
    public int value__;
    public static DataPointIds ActivityUsageCount;
    public static DataPointIds FeatureUsageCount;
}
internal static class System.Activities.Presentation.Sqm.FeatureUsageCounter : object {
    internal static void ReportUsage(IVSSqmService sqmService, WorkflowDesignerFeatureId featureId);
}
public interface System.Activities.Presentation.Sqm.IVSSqmService {
    public abstract virtual void SetDatapoint(int dataPointId, UInt32 value);
    public abstract virtual void AddItemToStream(int dataPointId, UInt32 value);
    public abstract virtual void AddArrayToStream(int dataPointId, UInt32[] data, int count);
}
internal enum System.Activities.Presentation.Sqm.WorkflowDesignerFeatureId : Enum {
    public int value__;
    public static WorkflowDesignerFeatureId None;
    public static WorkflowDesignerFeatureId ResetZoom;
    public static WorkflowDesignerFeatureId FitToScreen;
    public static WorkflowDesignerFeatureId Minimap;
    public static WorkflowDesignerFeatureId Breadcrumb;
    public static WorkflowDesignerFeatureId ExpandAll;
    public static WorkflowDesignerFeatureId CollapseAll;
    public static WorkflowDesignerFeatureId Restore;
    public static WorkflowDesignerFeatureId OpenChild;
    public static WorkflowDesignerFeatureId ViewParent;
    public static WorkflowDesignerFeatureId CopyAsImage;
    public static WorkflowDesignerFeatureId SaveAsImage;
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Activities.Presentation.SR : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ActivityLoadError { get; }
    internal static string AddAnnotationDescription { get; }
    internal static string AddAnnotationTitle { get; }
    internal static string ArgumentAccessorGetterThrewException { get; }
    internal static string ArgumentAccessorSetterThrewException { get; }
    internal static string AttachedPropertyNameShouldNotBeEmpty { get; }
    internal static string BoundsMustBeNonZero { get; }
    internal static string CannotConstructConnectionSegment { get; }
    internal static string CannotCreateInstance { get; }
    internal static string CannotGetArgumentAccessorsForActivity { get; }
    internal static string CannotMorphExpression { get; }
    internal static string CannotPreserveDefaultValue { get; }
    internal static string CannotResolveNamespace { get; }
    internal static string CantEnableAnnotationBefore45 { get; }
    internal static string ChildValidationError { get; }
    internal static string CollectionAddEditingScopeDescription { get; }
    internal static string CollectionClearEditingScopeDescription { get; }
    internal static string CollectionIsReadOnly { get; }
    internal static string CollectionRemoveEditingScopeDescription { get; }
    internal static string CouldNotChangeValueAfterInitialization { get; }
    internal static string CouldNotGenerateView { get; }
    internal static string CouldNotSetPropertyAfterLoad { get; }
    internal static string CutCopyErrorActivityMessage { get; }
    internal static string CutCopyRequiresDesignerView { get; }
    internal static string CutOperationEditingScopeDescription { get; }
    internal static string DefaultHelpUrl { get; }
    internal static string DeleteAllAnnotationMessage { get; }
    internal static string DeleteAllAnnotationsDescription { get; }
    internal static string DeleteAnnotationDescription { get; }
    internal static string DeleteAnnotationTitle { get; }
    internal static string DeleteOperationEditingScopeDescription { get; }
    internal static string DesignTimeValidationFeatureOnlyAppliesToType { get; }
    internal static string DictionaryAddEditingScopeDescription { get; }
    internal static string DictionaryClearEditingScopeDescription { get; }
    internal static string DictionaryEditEditingScopeDescription { get; }
    internal static string DictionaryRemoveEditingScopeDescription { get; }
    internal static string DraggingMulitpleItemsError { get; }
    internal static string DuplicateArgumentName { get; }
    internal static string DuplicateIdentifier { get; }
    internal static string DuplicateKey { get; }
    internal static string DuplicateMember { get; }
    internal static string DuplicateName { get; }
    internal static string DuplicateVariableName { get; }
    internal static string EditAnnotationTitle { get; }
    internal static string ElementRepresentationExpected { get; }
    internal static string ElementRepresentationExpectedAt { get; }
    internal static string EmptyArgumentName { get; }
    internal static string EmptyVariableName { get; }
    internal static string Error_BadOutputFromSortSelectedItems { get; }
    internal static string Error_CantFindItemInWIsP { get; }
    internal static string Error_ItemNotOnView { get; }
    internal static string Error_MovingMoreThanOneItemsFromICompositeView { get; }
    internal static string ExpressionActivityEditorRequiresDefaultConstructor { get; }
    internal static string ExpressionDefaultText { get; }
    internal static string ExpressionTypeDonnotMatch { get; }
    internal static string InvalidConstructorCall { get; }
    internal static string InvalidExpressionEditorName { get; }
    internal static string InvalidExpressionEditorNameToSet { get; }
    internal static string InvalidExpressionEditorType { get; }
    internal static string InvalidExpressionMorphHelperType { get; }
    internal static string InvalidFlagName { get; }
    internal static string InvalidIdentifier { get; }
    internal static string InvalidNestedModelItemBeginEditExceptionMessage { get; }
    internal static string InvalidXamlMemberName { get; }
    internal static string KeyNotFound { get; }
    internal static string MemberCanOnlyBeSetOnce { get; }
    internal static string MemberOnBadTargetType { get; }
    internal static string ModelItemPathArrayShouldNotBeEmpty { get; }
    internal static string MoveEditingScopeDescription { get; }
    internal static string NamespaceListArgumentMustBeNamespaceData { get; }
    internal static string NamespaceListNoDuplicate { get; }
    internal static string NoDefaultCtorError { get; }
    internal static string NonRegisteredExpressionEditor { get; }
    internal static string NonSupportedDynamicArgumentKeyType { get; }
    internal static string NonSupportedDynamicArgumentType { get; }
    internal static string NonSupportedModelItemCollectionOrDictionary { get; }
    internal static string NonSupportedModelPropertyPathExpanderConverterConvertBack { get; }
    internal static string NoTextInCollection { get; }
    internal static string NoTextInProperty { get; }
    internal static string NotifyAnnotationTextChangedDescription { get; }
    internal static string NotSupportedFrameworkIdentifier { get; }
    internal static string NotSupportedFrameworkProfile { get; }
    internal static string NotSupportedFrameworkVersion { get; }
    internal static string NotSupportedToolboxTypeFormatString { get; }
    internal static string NoTypeConverter { get; }
    internal static string PasteUndoDescription { get; }
    internal static string PromotedPropertyNotFound { get; }
    internal static string PropertyChangeEditingScopeDescription { get; }
    internal static string PropertyDoesntExistFormatString { get; }
    internal static string PropertyIsReadOnly { get; }
    internal static string PropertyReferenceChangeEditingScopeDescription { get; }
    internal static string SearchHintText { get; }
    internal static string SeeErrorWindow { get; }
    internal static string SourceReferenceIdNotFoundInWorkflow { get; }
    internal static string ToolboxItemFrozenDescription { get; }
    internal static string TypeBrowserError { get; }
    internal static string TypeBrowserErrorMessageTitle { get; }
    internal static string TypeDoesNotInheritFromActivity { get; }
    internal static string TypeResolverError { get; }
    internal static string TypeResolverErrorMessageTitle { get; }
    internal static string TypeResolverWindowTitle { get; }
    internal static string TypeResolvingOptionsArgumentExceptionMessage { get; }
    internal static string UnassignableCollection { get; }
    internal static string UnassignableObject { get; }
    internal static string UndoEngine_NotDisposedBookmark { get; }
    internal static string UndoEngine_OperationNotAllowed { get; }
    internal static string UnknownContent { get; }
    internal static string UnresolvedGenericType { get; }
    internal static string UnresolvedMember { get; }
    internal static string UnresolvedName { get; }
    internal static string UnresolvedTypeInAssembly { get; }
    internal static string UnresolvedTypeInNamespace { get; }
    internal static string UnsupportedExpressionHintText { get; }
    internal static string UntrustedSourceDetected { get; }
    internal static string UpdateDynamicArgumentsDescription { get; }
    internal static string ValidationDisabledWarning { get; }
    internal static string ViewStateUndoUnitDescription { get; }
    internal static string WarningFormat { get; }
    internal static string WorkflowDesignerErrorPresenterTitle { get; }
    internal static string WorkflowDesignerLoadShouldBeCalledFirst { get; }
    internal static string WorkflowDesignerLoadShouldBeCalledOnlyOnce { get; }
    internal static string WorkflowDesignerTextShouldNotBeNull { get; }
    internal static string WrapInSequenceDescription { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActivityLoadError();
    internal static string get_AddAnnotationDescription();
    internal static string get_AddAnnotationTitle();
    internal static string get_ArgumentAccessorGetterThrewException();
    internal static string get_ArgumentAccessorSetterThrewException();
    internal static string get_AttachedPropertyNameShouldNotBeEmpty();
    internal static string get_BoundsMustBeNonZero();
    internal static string get_CannotConstructConnectionSegment();
    internal static string get_CannotCreateInstance();
    internal static string get_CannotGetArgumentAccessorsForActivity();
    internal static string get_CannotMorphExpression();
    internal static string get_CannotPreserveDefaultValue();
    internal static string get_CannotResolveNamespace();
    internal static string get_CantEnableAnnotationBefore45();
    internal static string get_ChildValidationError();
    internal static string get_CollectionAddEditingScopeDescription();
    internal static string get_CollectionClearEditingScopeDescription();
    internal static string get_CollectionIsReadOnly();
    internal static string get_CollectionRemoveEditingScopeDescription();
    internal static string get_CouldNotChangeValueAfterInitialization();
    internal static string get_CouldNotGenerateView();
    internal static string get_CouldNotSetPropertyAfterLoad();
    internal static string get_CutCopyErrorActivityMessage();
    internal static string get_CutCopyRequiresDesignerView();
    internal static string get_CutOperationEditingScopeDescription();
    internal static string get_DefaultHelpUrl();
    internal static string get_DeleteAllAnnotationMessage();
    internal static string get_DeleteAllAnnotationsDescription();
    internal static string get_DeleteAnnotationDescription();
    internal static string get_DeleteAnnotationTitle();
    internal static string get_DeleteOperationEditingScopeDescription();
    internal static string get_DesignTimeValidationFeatureOnlyAppliesToType();
    internal static string get_DictionaryAddEditingScopeDescription();
    internal static string get_DictionaryClearEditingScopeDescription();
    internal static string get_DictionaryEditEditingScopeDescription();
    internal static string get_DictionaryRemoveEditingScopeDescription();
    internal static string get_DraggingMulitpleItemsError();
    internal static string get_DuplicateArgumentName();
    internal static string get_DuplicateIdentifier();
    internal static string get_DuplicateKey();
    internal static string get_DuplicateMember();
    internal static string get_DuplicateName();
    internal static string get_DuplicateVariableName();
    internal static string get_EditAnnotationTitle();
    internal static string get_ElementRepresentationExpected();
    internal static string get_ElementRepresentationExpectedAt();
    internal static string get_EmptyArgumentName();
    internal static string get_EmptyVariableName();
    internal static string get_Error_BadOutputFromSortSelectedItems();
    internal static string get_Error_CantFindItemInWIsP();
    internal static string get_Error_ItemNotOnView();
    internal static string get_Error_MovingMoreThanOneItemsFromICompositeView();
    internal static string get_ExpressionActivityEditorRequiresDefaultConstructor();
    internal static string get_ExpressionDefaultText();
    internal static string get_ExpressionTypeDonnotMatch();
    internal static string get_InvalidConstructorCall();
    internal static string get_InvalidExpressionEditorName();
    internal static string get_InvalidExpressionEditorNameToSet();
    internal static string get_InvalidExpressionEditorType();
    internal static string get_InvalidExpressionMorphHelperType();
    internal static string get_InvalidFlagName();
    internal static string get_InvalidIdentifier();
    internal static string get_InvalidNestedModelItemBeginEditExceptionMessage();
    internal static string get_InvalidXamlMemberName();
    internal static string get_KeyNotFound();
    internal static string get_MemberCanOnlyBeSetOnce();
    internal static string get_MemberOnBadTargetType();
    internal static string get_ModelItemPathArrayShouldNotBeEmpty();
    internal static string get_MoveEditingScopeDescription();
    internal static string get_NamespaceListArgumentMustBeNamespaceData();
    internal static string get_NamespaceListNoDuplicate();
    internal static string get_NoDefaultCtorError();
    internal static string get_NonRegisteredExpressionEditor();
    internal static string get_NonSupportedDynamicArgumentKeyType();
    internal static string get_NonSupportedDynamicArgumentType();
    internal static string get_NonSupportedModelItemCollectionOrDictionary();
    internal static string get_NonSupportedModelPropertyPathExpanderConverterConvertBack();
    internal static string get_NoTextInCollection();
    internal static string get_NoTextInProperty();
    internal static string get_NotifyAnnotationTextChangedDescription();
    internal static string get_NotSupportedFrameworkIdentifier();
    internal static string get_NotSupportedFrameworkProfile();
    internal static string get_NotSupportedFrameworkVersion();
    internal static string get_NotSupportedToolboxTypeFormatString();
    internal static string get_NoTypeConverter();
    internal static string get_PasteUndoDescription();
    internal static string get_PromotedPropertyNotFound();
    internal static string get_PropertyChangeEditingScopeDescription();
    internal static string get_PropertyDoesntExistFormatString();
    internal static string get_PropertyIsReadOnly();
    internal static string get_PropertyReferenceChangeEditingScopeDescription();
    internal static string get_SearchHintText();
    internal static string get_SeeErrorWindow();
    internal static string get_SourceReferenceIdNotFoundInWorkflow();
    internal static string get_ToolboxItemFrozenDescription();
    internal static string get_TypeBrowserError();
    internal static string get_TypeBrowserErrorMessageTitle();
    internal static string get_TypeDoesNotInheritFromActivity();
    internal static string get_TypeResolverError();
    internal static string get_TypeResolverErrorMessageTitle();
    internal static string get_TypeResolverWindowTitle();
    internal static string get_TypeResolvingOptionsArgumentExceptionMessage();
    internal static string get_UnassignableCollection();
    internal static string get_UnassignableObject();
    internal static string get_UndoEngine_NotDisposedBookmark();
    internal static string get_UndoEngine_OperationNotAllowed();
    internal static string get_UnknownContent();
    internal static string get_UnresolvedGenericType();
    internal static string get_UnresolvedMember();
    internal static string get_UnresolvedName();
    internal static string get_UnresolvedTypeInAssembly();
    internal static string get_UnresolvedTypeInNamespace();
    internal static string get_UnsupportedExpressionHintText();
    internal static string get_UntrustedSourceDetected();
    internal static string get_UpdateDynamicArgumentsDescription();
    internal static string get_ValidationDisabledWarning();
    internal static string get_ViewStateUndoUnitDescription();
    internal static string get_WarningFormat();
    internal static string get_WorkflowDesignerErrorPresenterTitle();
    internal static string get_WorkflowDesignerLoadShouldBeCalledFirst();
    internal static string get_WorkflowDesignerLoadShouldBeCalledOnlyOnce();
    internal static string get_WorkflowDesignerTextShouldNotBeNull();
    internal static string get_WrapInSequenceDescription();
}
public class System.Activities.Presentation.SubscribeContextCallback : MulticastDelegate {
    public SubscribeContextCallback(object object, IntPtr method);
    public virtual void Invoke(ContextItem item);
    public virtual IAsyncResult BeginInvoke(ContextItem item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Activities.Presentation.SubscribeContextCallback`1 : MulticastDelegate {
    public SubscribeContextCallback`1(object object, IntPtr method);
    public virtual void Invoke(TContextItemType item);
    public virtual IAsyncResult BeginInvoke(TContextItemType item, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Activities.Presentation.SubscribeServiceCallback : MulticastDelegate {
    public SubscribeServiceCallback(object object, IntPtr method);
    public virtual void Invoke(Type serviceType, object serviceInstance);
    public virtual IAsyncResult BeginInvoke(Type serviceType, object serviceInstance, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Activities.Presentation.SubscribeServiceCallback`1 : MulticastDelegate {
    public SubscribeServiceCallback`1(object object, IntPtr method);
    public virtual void Invoke(TServiceType serviceInstance);
    public virtual IAsyncResult BeginInvoke(TServiceType serviceInstance, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Activities.Presentation.TargetFrameworkPropertyFilter : object {
    public static void FilterOut45Properties();
}
internal class System.Activities.Presentation.TaskDispatcher : object {
    internal virtual void DispatchWorkOnUIThread(DispatcherPriority priority, Delegate method);
    internal virtual void DispatchWorkOnBackgroundThread(WaitCallback work, object state);
}
internal class System.Activities.Presentation.TextExpressionNamespaceList : NamespaceList {
    internal IList`1<string> TextExpressionNamespaces { get; private set; }
    internal IList`1<AssemblyReference> TextExpressionReferences { get; private set; }
    public TextExpressionNamespaceList(IList`1<string> importedNamespaces, IList`1<AssemblyReference> references);
    [CompilerGeneratedAttribute]
internal IList`1<string> get_TextExpressionNamespaces();
    [CompilerGeneratedAttribute]
private void set_TextExpressionNamespaces(IList`1<string> value);
    [CompilerGeneratedAttribute]
internal IList`1<AssemblyReference> get_TextExpressionReferences();
    [CompilerGeneratedAttribute]
private void set_TextExpressionReferences(IList`1<AssemblyReference> value);
    protected virtual void RemoveNamespaceFromSet(string ns);
    internal void RemoveAssemblyFromSet(string assembly);
    protected virtual void AddCore(NamespaceData ns);
    protected virtual void ClearCore();
    protected virtual void InsertCore(int index, NamespaceData ns);
    protected virtual void SetValueAt(int index, NamespaceData ns);
    protected virtual void UpdateAssemblyInfoCore(string importedNamespace);
}
internal class System.Activities.Presentation.TextFormattingConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
[ContentPropertyAttribute("Implementation")]
public abstract class System.Activities.Presentation.Toolbox.ActivityTemplateFactory : object {
    [XamlDeferLoadAttribute("System.Activities.XamlIntegration.FuncDeferringLoader", "System.Activities.Presentation.Toolbox.ActivityTemplateFactory")]
[BrowsableAttribute("False")]
[AmbientAttribute]
[DefaultValueAttribute("")]
protected Func`1<Activity> Implementation { get; protected set; }
    [CompilerGeneratedAttribute]
protected virtual Func`1<Activity> get_Implementation();
    [CompilerGeneratedAttribute]
protected virtual void set_Implementation(Func`1<Activity> value);
    public sealed virtual Activity Create(DependencyObject target);
}
[ContentPropertyAttribute("Implementation")]
public abstract class System.Activities.Presentation.Toolbox.ActivityTemplateFactory`1 : object {
    [XamlDeferLoadAttribute("System.Activities.XamlIntegration.FuncDeferringLoader", "System.Activities.Presentation.Toolbox.ActivityTemplateFactory")]
[BrowsableAttribute("False")]
[AmbientAttribute]
[DefaultValueAttribute("")]
protected Func`1<T> Implementation { get; protected set; }
    [CompilerGeneratedAttribute]
protected virtual Func`1<T> get_Implementation();
    [CompilerGeneratedAttribute]
protected virtual void set_Implementation(Func`1<T> value);
    public sealed virtual T Create(DependencyObject target, IDataObject dataObject);
}
[ContentPropertyAttribute("Implementation")]
[DesignerAttribute("System.Activities.Presentation.View.ActivityTypeDesigner")]
public class System.Activities.Presentation.Toolbox.ActivityTemplateFactoryBuilder : object {
    public string Name { get; public set; }
    [DependsOnAttribute("Name")]
[DefaultValueAttribute("")]
public Type TargetType { get; public set; }
    [DependsOnAttribute("TargetType")]
[BrowsableAttribute("False")]
public object Implementation { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
public void set_TargetType(Type value);
    [CompilerGeneratedAttribute]
public object get_Implementation();
    [CompilerGeneratedAttribute]
public void set_Implementation(object value);
}
[DefaultMemberAttribute("Item")]
public class System.Activities.Presentation.Toolbox.ToolboxCategory : object {
    public string CategoryName { get; public set; }
    public ToolboxItemWrapper Item { get; }
    public ICollection`1<ToolboxItemWrapper> Tools { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ToolboxCategory(string name);
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public ToolboxItemWrapper get_Item(int index);
    public ICollection`1<ToolboxItemWrapper> get_Tools();
    public void Add(ToolboxItemWrapper tool);
    public bool Remove(ToolboxItemWrapper tool);
    internal void HandleToolCollectionNotification(NotifyCollectionChangedEventHandler listener, bool register);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
public class System.Activities.Presentation.Toolbox.ToolboxCategoryItems : object {
    public ToolboxCategory Item { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    internal ToolboxCategoryItems(NotifyCollectionChangedEventHandler listener);
    public ToolboxCategory get_Item(int index);
    public sealed virtual void Add(ToolboxCategory item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ToolboxCategory item);
    public sealed virtual void CopyTo(ToolboxCategory[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(ToolboxCategory item);
    public sealed virtual IEnumerator`1<ToolboxCategory> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
[TemplatePartAttribute]
[TemplatePartAttribute]
[ContentPropertyAttribute("Categories")]
public class System.Activities.Presentation.Toolbox.ToolboxControl : Control {
    public static DependencyProperty ToolboxFileProperty;
    public static DependencyProperty SelectedToolProperty;
    public static DependencyProperty ToolItemStyleProperty;
    public static DependencyProperty CategoryItemStyleProperty;
    public static DependencyProperty ToolTemplateProperty;
    public static DependencyProperty CategoryTemplateProperty;
    public static RoutedEvent ToolCreatedEvent;
    public static RoutedEvent ToolSelectedEvent;
    internal TextBox searchBox;
    [DesignerSerializationVisibilityAttribute("2")]
public ToolboxCategoryItems Categories { get; public set; }
    public string ToolboxFile { get; public set; }
    public ToolboxItem SelectedTool { get; private set; }
    public Style ToolItemStyle { get; public set; }
    public Style CategoryItemStyle { get; public set; }
    public DataTemplate ToolTemplate { get; public set; }
    public DataTemplate CategoryTemplate { get; public set; }
    public WorkflowDesigner AssociatedDesigner { get; public set; }
    private static ToolboxControl();
    public void add_ToolCreated(ToolCreatedEventHandler value);
    public void remove_ToolCreated(ToolCreatedEventHandler value);
    public void add_ToolSelected(RoutedEventHandler value);
    public void remove_ToolSelected(RoutedEventHandler value);
    public ToolboxCategoryItems get_Categories();
    public void set_Categories(ToolboxCategoryItems value);
    public string get_ToolboxFile();
    public void set_ToolboxFile(string value);
    public ToolboxItem get_SelectedTool();
    private void set_SelectedTool(ToolboxItem value);
    public Style get_ToolItemStyle();
    public void set_ToolItemStyle(Style value);
    public Style get_CategoryItemStyle();
    public void set_CategoryItemStyle(Style value);
    public DataTemplate get_ToolTemplate();
    public void set_ToolTemplate(DataTemplate value);
    public DataTemplate get_CategoryTemplate();
    public void set_CategoryTemplate(DataTemplate value);
    [CompilerGeneratedAttribute]
public WorkflowDesigner get_AssociatedDesigner();
    [CompilerGeneratedAttribute]
public void set_AssociatedDesigner(WorkflowDesigner value);
    public virtual void OnApplyTemplate();
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    internal void OnToolMouseMove(object sender, MouseEventArgs args);
    internal void OnTreeViewDoubleClick(object sender, MouseEventArgs args);
}
[ValueConversionAttribute("System.Drawing.Bitmap", "System.Windows.Media.ImageSource")]
internal class System.Activities.Presentation.Toolbox.ToolboxItemImageConverter : object {
    private sealed virtual override object System.Windows.Data.IValueConverter.Convert(object value, Type targetType, object parameter, CultureInfo culture);
    private sealed virtual override object System.Windows.Data.IValueConverter.ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.Toolbox.ToolboxItemLoader : object {
    private static ToolboxItemLoader();
    public static ToolboxItemLoader GetInstance();
    public void LoadToolboxItems(string fileName, ToolboxCategoryItems container, bool resetContainer);
}
public class System.Activities.Presentation.Toolbox.ToolboxItemWrapper : object {
    internal ToolboxItem ToolboxItem { get; private set; }
    public bool IsValid { get; }
    public string ToolName { get; public set; }
    public string AssemblyName { get; public set; }
    public string BitmapName { get; public set; }
    internal IDataObject DataObject { get; internal set; }
    public Bitmap Bitmap { get; }
    public string DisplayName { get; public set; }
    public Type Type { get; private set; }
    public ToolboxItemWrapper(Type toolType);
    public ToolboxItemWrapper(Type toolType, string displayName);
    public ToolboxItemWrapper(Type toolType, string bitmapName, string displayName);
    public ToolboxItemWrapper(string toolName, string assemblyName, string bitmapName, string displayName);
    internal ToolboxItemWrapper(string toolName, string assemblyName, string bitmapName, string displayName, IDataObject dataObject);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal ToolboxItem get_ToolboxItem();
    private void set_ToolboxItem(ToolboxItem value);
    public bool get_IsValid();
    public string get_ToolName();
    public void set_ToolName(string value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_BitmapName();
    public void set_BitmapName(string value);
    internal IDataObject get_DataObject();
    internal void set_DataObject(IDataObject value);
    public Bitmap get_Bitmap();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public Type get_Type();
    private void set_Type(Type value);
    internal bool ResolveToolboxItem();
    internal static Bitmap CreateBitmapFromDrawingBrush(DrawingBrush resource);
    internal static Bitmap GetBitmapFromResource(string resourceString);
    public virtual string ToString();
    internal static int GetSystemDpi(int index);
}
public class System.Activities.Presentation.Toolbox.ToolCreatedEventArgs : RoutedEventArgs {
    public IComponent[] Components { get; }
    internal ToolCreatedEventArgs(RoutedEvent eventName, object sender, IComponent[] components);
    public IComponent[] get_Components();
}
public class System.Activities.Presentation.Toolbox.ToolCreatedEventHandler : MulticastDelegate {
    public ToolCreatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolCreatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolCreatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Activities.Presentation.Toolbox.TreeViewContainerStyleSelector : StyleSelector {
    public TreeViewContainerStyleSelector(ToolboxControl owner);
    public virtual Style SelectStyle(object item, DependencyObject container);
}
internal class System.Activities.Presentation.Toolbox.TreeViewTemplateSelector : DataTemplateSelector {
    public TreeViewTemplateSelector(ToolboxControl owner);
    public virtual DataTemplate SelectTemplate(object item, DependencyObject container);
}
internal class System.Activities.Presentation.TypeNameConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.TypePropertyEditor : PropertyValueEditor {
    public static string AllowNull;
    public static string BrowseTypeDirectly;
    public static string Filter;
}
[AttributeUsageAttribute("4")]
public class System.Activities.Presentation.TypeResolvingOptionsAttribute : Attribute {
    public TypeResolvingOptions TypeResolvingOptions { get; public set; }
    public TypeResolvingOptionsAttribute(TypeResolvingOptions options);
    [CompilerGeneratedAttribute]
public TypeResolvingOptions get_TypeResolvingOptions();
    [CompilerGeneratedAttribute]
public void set_TypeResolvingOptions(TypeResolvingOptions value);
}
internal static class System.Activities.Presentation.TypeUtilities : object {
    public static bool CanSubstituteGenericParameter(Type genericParameter, Type candidate);
    public static bool CanCreateInstanceUsingDefaultConstructor(Type type);
    public static bool IsTypeCompatible(Type childObjectType, Type parentObjectType);
}
public class System.Activities.Presentation.UndoEngine : object {
    internal bool IsBookmarkInPlace { get; }
    public bool IsUndoRedoInProgress { get; private set; }
    public UndoEngine(EditingContext context);
    public void add_UndoUnitAdded(EventHandler`1<UndoUnitEventArgs> value);
    public void remove_UndoUnitAdded(EventHandler`1<UndoUnitEventArgs> value);
    public void add_UndoCompleted(EventHandler`1<UndoUnitEventArgs> value);
    public void remove_UndoCompleted(EventHandler`1<UndoUnitEventArgs> value);
    public void add_RedoCompleted(EventHandler`1<UndoUnitEventArgs> value);
    public void remove_RedoCompleted(EventHandler`1<UndoUnitEventArgs> value);
    public void add_UndoUnitCancelled(EventHandler`1<UndoUnitEventArgs> value);
    public void remove_UndoUnitCancelled(EventHandler`1<UndoUnitEventArgs> value);
    public void add_UndoUnitDiscarded(EventHandler value);
    public void remove_UndoUnitDiscarded(EventHandler value);
    public void add_UndoRedoBufferChanged(EventHandler value);
    public void remove_UndoRedoBufferChanged(EventHandler value);
    internal bool get_IsBookmarkInPlace();
    internal ImmediateEditingScope CreateImmediateEditingScope(string bookmarkName, ModelTreeManager modelTreeManager);
    public IEnumerable`1<string> GetUndoActions();
    public IEnumerable`1<string> GetRedoActions();
    public void AddUndoUnit(UndoUnit unit);
    public bool Undo();
    public bool Redo();
    [CompilerGeneratedAttribute]
public bool get_IsUndoRedoInProgress();
    [CompilerGeneratedAttribute]
private void set_IsUndoRedoInProgress(bool value);
    private sealed virtual override void System.Activities.Presentation.IUndoEngineOperations.AddUndoUnitCore(UndoUnit unit);
    private sealed virtual override bool System.Activities.Presentation.IUndoEngineOperations.UndoCore();
    private sealed virtual override bool System.Activities.Presentation.IUndoEngineOperations.RedoCore();
}
public abstract class System.Activities.Presentation.UndoUnit : object {
    public string Description { get; public set; }
    protected UndoUnit(EditingContext context);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    public abstract virtual void Redo();
    public abstract virtual void Undo();
    protected void SaveGlobalState();
    protected void ApplyGlobalState();
}
public class System.Activities.Presentation.UndoUnitEventArgs : EventArgs {
    public UndoUnit UndoUnit { get; public set; }
    [CompilerGeneratedAttribute]
public UndoUnit get_UndoUnit();
    [CompilerGeneratedAttribute]
public void set_UndoUnit(UndoUnit value);
}
internal class System.Activities.Presentation.UpdatableGenericArgumentsFeature : Feature {
    public virtual void Initialize(EditingContext context, Type modelType);
}
internal static class System.Activities.Presentation.Utility.IconHelper : object {
    internal static Dictionary`2<string, string> IconNameMapping { get; }
    internal static Dictionary`2<string, string> get_IconNameMapping();
    internal static string GetIconResourceKey(string activityFullName);
    internal static DrawingBrush GetBrushFromResource(string activityFullName);
}
internal class System.Activities.Presentation.Validation.BackgroundValidationSynchronizer`1 : ValidationSynchronizer {
    internal SynchronizerState<TValidationResult> Idle;
    internal SynchronizerState<TValidationResult> Validating;
    internal SynchronizerState<TValidationResult> CancellingForNextValidation;
    internal SynchronizerState<TValidationResult> CancellingForDeactivation;
    internal SynchronizerState<TValidationResult> ValidationDeactivated;
    internal SynchronizerState<TValidationResult> CurrentState { get; private set; }
    internal BackgroundValidationSynchronizer`1(TaskDispatcher dispatcher, Func`3<ValidationReason, CancellationToken, TValidationResult> validationWork, Action`1<TValidationResult> updateWork);
    internal SynchronizerState<TValidationResult> get_CurrentState();
    private void set_CurrentState(SynchronizerState<TValidationResult> value);
    internal virtual void Validate(ValidationReason validationReason);
    internal virtual void DeactivateValidation();
    internal virtual void ActivateValidation();
    protected virtual void OnCurrentStateChanged();
}
internal class System.Activities.Presentation.Validation.ForegroundValidationSynchronizer`1 : ValidationSynchronizer {
    internal ForegroundValidationSynchronizer`1(TaskDispatcher dispatcher, Func`3<ValidationReason, CancellationToken, TValidationResult> validationWork, Action`1<TValidationResult> updateWork);
    internal virtual void Validate(ValidationReason reason);
    internal virtual void DeactivateValidation();
    internal virtual void ActivateValidation();
}
public interface System.Activities.Presentation.Validation.IValidationErrorService {
    public abstract virtual void ShowValidationErrors(IList`1<ValidationErrorInfo> errors);
}
internal interface System.Activities.Presentation.Validation.IValidationErrorSourceLocator {
    public abstract virtual List`1<object> FindSourceDetailFromActivity(Activity errorSource, object errorSourceDetail);
    public abstract virtual void ReplaceParentChainWithSource(Activity parentActivity, List`1<object> parentChain);
}
public class System.Activities.Presentation.Validation.ValidationErrorInfo : object {
    public string Id { get; private set; }
    public Guid SourceReferenceId { get; public set; }
    public string Message { get; private set; }
    public string PropertyName { get; private set; }
    public string FileName { get; public set; }
    public bool IsWarning { get; private set; }
    public ValidationErrorInfo(string message);
    public ValidationErrorInfo(ValidationError validationError);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public Guid get_SourceReferenceId();
    [CompilerGeneratedAttribute]
public void set_SourceReferenceId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsWarning();
    [CompilerGeneratedAttribute]
private void set_IsWarning(bool value);
}
internal enum System.Activities.Presentation.Validation.ValidationReason : Enum {
    public int value__;
    public static ValidationReason Unknown;
    public static ValidationReason Load;
    public static ValidationReason Save;
    public static ValidationReason ModelChange;
}
internal class System.Activities.Presentation.Validation.ValidationRoot : object {
    public ValidationRoot(WorkflowService workflowService);
    public ValidationRoot(Activity activity);
    public ValidationResults Validate(ValidationSettings settings);
    public Activity Resolve(string id);
}
public class System.Activities.Presentation.Validation.ValidationService : object {
    internal DynamicActivity DynamicActivityWrapper { get; }
    public ValidationSettings Settings { get; }
    internal AttachedProperty`1<ValidationState> ValidationStateProperty { get; }
    internal AttachedProperty`1<string> ValidationMessageProperty { get; }
    public ValidationService(EditingContext context);
    internal ValidationService(EditingContext context, TaskDispatcher validationTaskDispatcher);
    internal void add_ValidationCompleted(EventHandler value);
    internal void remove_ValidationCompleted(EventHandler value);
    internal void add_ErrorsMarked(EventHandler`1<ErrorsMarkedEventArgs> value);
    internal void remove_ErrorsMarked(EventHandler`1<ErrorsMarkedEventArgs> value);
    internal DynamicActivity get_DynamicActivityWrapper();
    public ValidationSettings get_Settings();
    public void ValidateWorkflow();
    internal void ValidateWorkflow(ValidationReason reason);
    internal void DeactivateValidation();
    internal void ActivateValidation();
    internal Tuple`3<ValidationReason, ValidationResults, Exception> CoreValidationWork(ValidationReason reason, CancellationToken cancellationToken);
    protected virtual void OnValidationCompleted();
    internal static ModelItem FindModelItem(ModelTreeManager modelTreeManager, object sourceDetail);
    internal static Activity GetParent(Activity childActivity);
    internal static List`1<Activity> GetParentChain(Activity activity);
    public void NavigateToError(ValidationErrorInfo validationErrorInfo);
    public void NavigateToError(string id);
    internal void RegisterValidationErrorSourceLocator(Type activityType, IValidationErrorSourceLocator validationErrorSourceLocator);
    internal AttachedProperty`1<ValidationState> get_ValidationStateProperty();
    internal AttachedProperty`1<string> get_ValidationMessageProperty();
}
public enum System.Activities.Presentation.Validation.ValidationState : Enum {
    public int value__;
    public static ValidationState Error;
    public static ValidationState Warning;
    public static ValidationState ChildInvalid;
    public static ValidationState Valid;
}
internal abstract class System.Activities.Presentation.Validation.ValidationSynchronizer : object {
    internal abstract virtual void Validate(ValidationReason reason);
    internal abstract virtual void DeactivateValidation();
    internal abstract virtual void ActivateValidation();
}
internal abstract class System.Activities.Presentation.ValidationErrorSourceLocatorFeature : Feature {
    protected IValidationErrorSourceLocator ValidationErrorSourceLocator { get; }
    protected abstract virtual IValidationErrorSourceLocator get_ValidationErrorSourceLocator();
    public virtual void Initialize(EditingContext context, Type modelType);
}
internal class System.Activities.Presentation.VariableExpressionConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.VBIdentifierNameEditor : PropertyValueEditor {
}
internal class System.Activities.Presentation.VerticalConnector : UserControl {
    internal BeginStoryboard Collapse_BeginStoryboardOnDrop;
    internal Rectangle dropTarget;
    protected virtual void OnDragEnter(DragEventArgs e);
    protected virtual void OnDragLeave(DragEventArgs e);
    protected virtual void OnDrop(DragEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.ActivityTypeDesigner : DesignerWithHeader {
    internal ActivityTypeDesigner activityTypeDesignerElement;
    public ModelItem ExpandedChild { get; }
    protected virtual void OnModelItemChanged(object newItem);
    protected virtual void OnContextMenuLoaded(ContextMenu menu);
    public sealed virtual ModelItem get_ExpandedChild();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.ActivityTypeResolver : DialogWindow {
    public static DependencyProperty GenericTypeMappingProperty;
    public static DependencyProperty EditedTypeProperty;
    public static DependencyProperty IsTypeResolvedProperty;
    internal TextBlock typeName;
    internal ItemsControl typeResolver;
    public Type ConcreteType { get; private set; }
    public Type EditedType { get; public set; }
    public ObservableCollection`1<TypeKeyValue> GenericTypeMapping { get; public set; }
    public bool IsTypeResolved { get; private set; }
    public TypeResolvingOptions Options { get; public set; }
    private static ActivityTypeResolver();
    protected virtual void OnInitialized(EventArgs e);
    [CompilerGeneratedAttribute]
public Type get_ConcreteType();
    [CompilerGeneratedAttribute]
private void set_ConcreteType(Type value);
    public Type get_EditedType();
    public void set_EditedType(Type value);
    public ObservableCollection`1<TypeKeyValue> get_GenericTypeMapping();
    public void set_GenericTypeMapping(ObservableCollection`1<TypeKeyValue> value);
    public bool get_IsTypeResolved();
    private void set_IsTypeResolved(bool value);
    [CompilerGeneratedAttribute]
public TypeResolvingOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(TypeResolvingOptions value);
    public void NotifyTypeChanged(TypeKeyValue sender);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.AnnotationDialog : DialogWindow {
    internal TextBox annotationTextBox;
    public string AnnotationText { get; public set; }
    public string get_AnnotationText();
    public void set_AnnotationText(string value);
    protected virtual void OnKeyDown(KeyEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.ArgumentDesigner : ContentControl {
    public static DependencyProperty ContextProperty;
    public static DependencyProperty ActivitySchemaProperty;
    public static RoutedEvent ArgumentCollectionChangedEvent;
    internal ArgumentDesigner argumentDesigner;
    internal DataGrid argumentsDataGrid;
    public ModelItem ActivitySchema { get; public set; }
    public EditingContext Context { get; public set; }
    internal ArgumentToExpressionConverter ArgumentToExpressionConverter { get; }
    private static ArgumentDesigner();
    public void add_ArgumentCollectionChanged(RoutedEventHandler value);
    public void remove_ArgumentCollectionChanged(RoutedEventHandler value);
    public ModelItem get_ActivitySchema();
    public void set_ActivitySchema(ModelItem value);
    public EditingContext get_Context();
    public void set_Context(EditingContext value);
    internal ArgumentToExpressionConverter get_ArgumentToExpressionConverter();
    public bool CreateNewArgumentWrapper();
    internal void SelectArgument(ModelItem argument);
    internal void UpdateTypeDesigner(DesignTimeArgument argument);
    internal void CheckCaseInsensitiveDuplicates(VBIdentifierName identifierName, string newName);
    internal void ValidateArgumentName(VBIdentifierName identifierName, string newName, string oldName);
    internal void UpdateArgumentName(DesignTimeArgument argumentWrapper, string newName, string oldName);
    internal void NotifyAnnotationTextChanged();
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.ArrayOf`1 : object {
}
internal static class System.Activities.Presentation.View.AutoScrollHelper : object {
    public static void AutoScroll(MouseEventArgs e, DependencyObject element, double offsetPerScroll);
    public static void AutoScroll(DragEventArgs e, ScrollViewer scrollViewer, double offsetPerScroll);
    public static void AutoScroll(Point position, ScrollViewer scrollViewer, double offsetPerScroll);
}
internal class System.Activities.Presentation.View.BreadCrumbTextConverter : object {
    internal double PixelsPerChar { get; internal set; }
    internal double get_PixelsPerChar();
    internal void set_PixelsPerChar(double value);
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.BrowseForType : object {
}
internal class System.Activities.Presentation.View.CanExpandCollapseAllConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class System.Activities.Presentation.View.CommandMenuMode : object {
    public static CommandMenuMode NoCommandMenu;
    public static CommandMenuMode FullCommandMenu;
    private static CommandMenuMode();
}
internal class System.Activities.Presentation.View.ContextMenuIconProvider : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.DataGridHelper : FrameworkElement {
    public static string PART_ButtonAdd;
    public static DependencyProperty AddNewRowContentProperty;
    public static DependencyProperty AddNewRowCommandProperty;
    public static DependencyProperty ShowValidationErrorAsToolTipProperty;
    public static DependencyProperty IsCustomEditorProperty;
    internal DataGridHelper dataGridHelperRoot;
    public Func`3<DataGrid, object, object> NotifyNewRowAddedCallback { get; public set; }
    public Action`3<Control, DataGridCell, bool> NotifyBeginCellEditCallback { get; public set; }
    public Action`2<Control, DataGridCell> NotifyEndCellEditCallback { get; public set; }
    public bool ExplicitCommit { get; private set; }
    internal DataGrid DataGrid { get; }
    internal bool IsEditInProgress { get; }
    internal EditingContext Context { get; internal set; }
    public Func`2<ResolveTemplateParams, bool> ResolveDynamicTemplateCallback { get; public set; }
    public Func`3<DataGridCell, object, ModelProperty> LoadDynamicContentDataCallback { get; public set; }
    public Func`3<DataGridCell, object, DialogPropertyValueEditor> LoadCustomPropertyValueEditorCallback { get; public set; }
    public object AddNewRowContent { get; public set; }
    public ICommand AddNewRowCommand { get; public set; }
    public bool ShowValidationErrorAsToolTip { get; public set; }
    public static DataTemplate DynamicCellContentTemplate { get; }
    public DataGridHelper(DataGrid instance, Control owner);
    private static DataGridHelper();
    public void add_DataGridCellEditEnding(EventHandler`1<DataGridCellEditEndingEventArgs> value);
    public void remove_DataGridCellEditEnding(EventHandler`1<DataGridCellEditEndingEventArgs> value);
    public static bool GetIsCustomEditor(DependencyObject obj);
    public static void SetIsCustomEditor(DependencyObject obj, bool value);
    [CompilerGeneratedAttribute]
public Func`3<DataGrid, object, object> get_NotifyNewRowAddedCallback();
    [CompilerGeneratedAttribute]
public void set_NotifyNewRowAddedCallback(Func`3<DataGrid, object, object> value);
    [CompilerGeneratedAttribute]
public Action`3<Control, DataGridCell, bool> get_NotifyBeginCellEditCallback();
    [CompilerGeneratedAttribute]
public void set_NotifyBeginCellEditCallback(Action`3<Control, DataGridCell, bool> value);
    [CompilerGeneratedAttribute]
public Action`2<Control, DataGridCell> get_NotifyEndCellEditCallback();
    [CompilerGeneratedAttribute]
public void set_NotifyEndCellEditCallback(Action`2<Control, DataGridCell> value);
    [CompilerGeneratedAttribute]
public bool get_ExplicitCommit();
    [CompilerGeneratedAttribute]
private void set_ExplicitCommit(bool value);
    internal DataGrid get_DataGrid();
    internal bool get_IsEditInProgress();
    [CompilerGeneratedAttribute]
internal EditingContext get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(EditingContext value);
    public Func`2<ResolveTemplateParams, bool> get_ResolveDynamicTemplateCallback();
    public void set_ResolveDynamicTemplateCallback(Func`2<ResolveTemplateParams, bool> value);
    [CompilerGeneratedAttribute]
public Func`3<DataGridCell, object, ModelProperty> get_LoadDynamicContentDataCallback();
    [CompilerGeneratedAttribute]
public void set_LoadDynamicContentDataCallback(Func`3<DataGridCell, object, ModelProperty> value);
    [CompilerGeneratedAttribute]
public Func`3<DataGridCell, object, DialogPropertyValueEditor> get_LoadCustomPropertyValueEditorCallback();
    [CompilerGeneratedAttribute]
public void set_LoadCustomPropertyValueEditorCallback(Func`3<DataGridCell, object, DialogPropertyValueEditor> value);
    public object get_AddNewRowContent();
    public void set_AddNewRowContent(object value);
    public ICommand get_AddNewRowCommand();
    public void set_AddNewRowCommand(ICommand value);
    public bool get_ShowValidationErrorAsToolTip();
    public void set_ShowValidationErrorAsToolTip(bool value);
    public T SelectedItem();
    public T Source();
    public void BeginRowEdit(object value, DataGridColumn column);
    public void BeginRowEdit(object value);
    internal static void OnEditingControlLoaded(object sender, RoutedEventArgs args);
    internal static void OnEditingControlUnloaded(object sender, RoutedEventArgs args);
    public void UpdateDynamicContentColumns(object entry);
    public static DataTemplate get_DynamicCellContentTemplate();
    public static DataGridCell GetCell(DataGrid dataGrid, int row, int column);
    internal static ModelItem GetSingleSelectedObject(DataGrid dataGrid);
    public static DataGridRow GetRow(DataGrid dataGrid, int index);
    public static T GetVisualChild(DependencyObject parent);
    public static void CommitPendingEdits(DataGrid dataGrid);
    public static void OnDeleteSelectedItems(DataGrid dataGrid);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
public class System.Activities.Presentation.View.DesignerView : UserControl {
    public static string CustomMenuItemsSeparatorCommand;
    public static DependencyProperty RootDesignerProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static DependencyProperty ActivitySchemaProperty;
    public static DependencyProperty InPanModeProperty;
    public static DependencyProperty FocusedViewElementProperty;
    internal static DependencyProperty ShouldExpandAllProperty;
    internal static DependencyProperty ShouldCollapseAllProperty;
    internal WorkflowViewElement lastClickedDesigner;
    public static DependencyProperty CommandMenuModeProperty;
    public static DependencyProperty MenuItemStyleProperty;
    public static DependencyProperty MenuSeparatorStyleProperty;
    public static ICommand GoToParentCommand;
    public static ICommand ExpandCommand;
    public static ICommand ExpandAllCommand;
    public static ICommand CollapseCommand;
    public static ICommand CollapseAllCommand;
    public static ICommand RestoreCommand;
    public static ICommand ExpandInPlaceCommand;
    public static ICommand InsertBreakpointCommand;
    public static ICommand DeleteBreakpointCommand;
    public static ICommand EnableBreakpointCommand;
    public static ICommand DisableBreakpointCommand;
    public static ICommand SaveAsImageCommand;
    public static ICommand CopyAsImageCommand;
    public static ICommand ZoomInCommand;
    public static ICommand ZoomOutCommand;
    public static ICommand ToggleArgumentDesignerCommand;
    public static ICommand ToggleImportsDesignerCommand;
    public static ICommand ToggleVariableDesignerCommand;
    public static ICommand CreateVariableCommand;
    public static ICommand ToggleMiniMapCommand;
    public static ICommand CycleThroughDesignerCommand;
    public static ICommand CreateWorkflowElementCommand;
    public static ICommand CreateArgumentCommand;
    public static ICommand CommitCommand;
    public static ICommand FitToScreenCommand;
    public static ICommand ResetZoomCommand;
    public static ICommand MoveFocusCommand;
    public static ICommand ToggleSelectionCommand;
    public static ICommand CutCommand;
    public static ICommand CopyCommand;
    public static ICommand PasteCommand;
    public static ICommand SelectAllCommand;
    public static ICommand UndoCommand;
    public static ICommand RedoCommand;
    public static ICommand AddAnnotationCommand;
    public static ICommand EditAnnotationCommand;
    public static ICommand DeleteAnnotationCommand;
    public static ICommand ShowAllAnnotationCommand;
    public static ICommand HideAllAnnotationCommand;
    public static ICommand DeleteAllAnnotationCommand;
    internal DesignerView xnDesignerView;
    internal MenuItem goToParentMenuItem;
    internal MenuItem expandMenuItem;
    internal MenuItem collapseMenuItem;
    internal MenuItem expandInPlaceMenuItem;
    internal MenuItem copyMenuItem;
    internal MenuItem Annotations;
    internal MenuItem BreakpointMenu;
    internal FrameworkElement minimapPlacementTarget;
    internal Grid BreadCrumbBarLayout;
    internal ListBox breadCrumbListBox;
    internal Path Line;
    internal ToggleButton expandAllButton;
    internal ToggleButton collapseAllButton;
    internal Grid designerViewGrid;
    internal ScrollViewer scrollViewer;
    internal Grid scrollViewerContent;
    internal Viewbox viewBox;
    internal Grid scrollableContent;
    internal ContentPresenter designerPresenter;
    internal GridSplitter splitter;
    internal Grid bottomPanel;
    internal ArgumentDesigner arguments1;
    internal VariableDesigner variables1;
    internal ImportDesigner imports1;
    internal ExtensionSurface wfViewExtensionSurface;
    internal ExtensionSurface designerExtensionSurface;
    internal ExtensionWindow miniMap;
    internal StatusBar shellBar;
    internal StatusBarItem variablesStatusBarItem;
    internal ToggleButton buttonVariables1;
    internal StatusBarItem argumentsStatusBarItem;
    internal ToggleButton buttonArguments1;
    internal StatusBarItem importsStatusBarItem;
    internal ToggleButton buttonImports1;
    internal StatusBarItem panModeStatusBarItem;
    internal ToggleButton buttonPanMode;
    internal StatusBarItem zoomIconStatusBar;
    internal Button buttonResetZoom;
    internal StatusBarItem zoomSliderStatusBar;
    internal Slider zoomSlider;
    internal StatusBarItem zoomPickerStatusBar;
    internal ComboBox zoomPicker;
    internal StatusBarItem zoomFitToScreenStatusBar;
    internal Button buttonFitToScreen;
    internal StatusBarItem minimapStatusBar;
    internal ToggleButton buttonMinimap;
    public bool IsMultipleSelectionMode { get; private set; }
    public ModelItem ActivitySchema { get; private set; }
    public EditingContext Context { get; }
    public UIElement RootDesigner { get; public set; }
    public bool ShouldExpandAll { get; public set; }
    public bool ShouldCollapseAll { get; public set; }
    public bool IsReadOnly { get; public set; }
    public WorkflowViewElement FocusedViewElement { get; private set; }
    public double ZoomFactor { get; }
    internal ScrollViewer ScrollViewer { get; }
    internal UIElement ScrollableContent { get; }
    internal bool SuppressSelectionOnMouseUp { get; }
    internal bool ShouldIgnoreDataGridAutoCommit { get; internal set; }
    internal bool ShouldStillAllowRubberBandEvenIfMouseLeftButtonDownIsHandled { get; internal set; }
    internal bool InPanMode { get; internal set; }
    public ShellBarItemVisibility WorkflowShellBarItemVisibility { get; public set; }
    public ShellHeaderItemsVisibility WorkflowShellHeaderItemsVisibility { get; public set; }
    public Style MenuItemStyle { get; public set; }
    public Style MenuSeparatorStyle { get; public set; }
    internal DesignerView(EditingContext context);
    private static DesignerView();
    [CompilerGeneratedAttribute]
public bool get_IsMultipleSelectionMode();
    [CompilerGeneratedAttribute]
private void set_IsMultipleSelectionMode(bool value);
    protected virtual void OnInitialized(EventArgs e);
    public ModelItem get_ActivitySchema();
    private void set_ActivitySchema(ModelItem value);
    public EditingContext get_Context();
    public UIElement get_RootDesigner();
    public void set_RootDesigner(UIElement value);
    public bool get_ShouldExpandAll();
    public void set_ShouldExpandAll(bool value);
    public bool get_ShouldCollapseAll();
    public void set_ShouldCollapseAll(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public WorkflowViewElement get_FocusedViewElement();
    private void set_FocusedViewElement(WorkflowViewElement value);
    public double get_ZoomFactor();
    internal ScrollViewer get_ScrollViewer();
    internal UIElement get_ScrollableContent();
    internal bool get_SuppressSelectionOnMouseUp();
    [CompilerGeneratedAttribute]
internal bool get_ShouldIgnoreDataGridAutoCommit();
    [CompilerGeneratedAttribute]
internal void set_ShouldIgnoreDataGridAutoCommit(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldStillAllowRubberBandEvenIfMouseLeftButtonDownIsHandled();
    [CompilerGeneratedAttribute]
internal void set_ShouldStillAllowRubberBandEvenIfMouseLeftButtonDownIsHandled(bool value);
    internal bool get_InPanMode();
    internal void set_InPanMode(bool value);
    public ShellBarItemVisibility get_WorkflowShellBarItemVisibility();
    public void set_WorkflowShellBarItemVisibility(ShellBarItemVisibility value);
    public ShellHeaderItemsVisibility get_WorkflowShellHeaderItemsVisibility();
    public void set_WorkflowShellHeaderItemsVisibility(ShellHeaderItemsVisibility value);
    public void MakeRootDesigner(ModelItem modelItem);
    internal void MakeRootDesigner(ModelItem modelItem, bool setAsSelection);
    internal void ForceMakeRootDesigner(ModelItem modelItem);
    internal void BeginDragShadowTracking(ViewElementDragShadow dragShadow);
    internal void EndDragShadowTracking(ViewElementDragShadow dragShadow);
    internal void MakeRootDesigner(ModelItem modelItem, bool setAsSelection, bool checkIfCanBeMadeRoot);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnPreviewMouseWheel(MouseWheelEventArgs e);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnPreviewDragOver(DragEventArgs e);
    public void RegisterViewElement(WorkflowViewElement viewElement);
    public void UnregisterViewElement(WorkflowViewElement viewElement);
    public void OnReferenceUpdated(AssemblyName updatedReference, bool isAdded);
    internal void CheckButtonVariables();
    internal void CheckButtonArguments();
    public void FlushState();
    internal void RestoreDesignerStates();
    internal static bool IsMouseInViewport(MouseButtonEventArgs e, ScrollViewer scrollViewer);
    internal void ResetAllChordKeyGesturesMode();
    public Style get_MenuItemStyle();
    public void set_MenuItemStyle(Style value);
    public Style get_MenuSeparatorStyle();
    public void set_MenuSeparatorStyle(Style value);
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    public static CommandMenuMode GetCommandMenuMode(DependencyObject obj);
    public static void SetCommandMenuMode(DependencyObject obj, CommandMenuMode value);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.DesignerWithHeader : WorkflowViewElement {
    public static DependencyProperty HeaderProperty;
    public DataTemplate Header { get; public set; }
    private static DesignerWithHeader();
    public DataTemplate get_Header();
    public void set_Header(DataTemplate value);
}
internal class System.Activities.Presentation.View.DesignTimeArgument : DesignObjectWrapper {
    internal static string ArgumentNameProperty;
    internal static string ArgumentTypeProperty;
    internal static string ArgumentDirectionProperty;
    internal static string ArgumentDefaultValueProperty;
    internal static string IsOutputArgument;
    internal static string OwnerSchemaProperty;
    internal static string IsRequiredProperty;
    internal static string AnnotationTextProperty;
    internal ArgumentDesigner Editor { get; private set; }
    protected string AutomationId { get; }
    internal DesignTimeArgument(ModelItem argument, ArgumentDesigner editor);
    private static DesignTimeArgument();
    public virtual void Dispose();
    public static PropertyDescriptorData[] InitializeTypeProperties();
    [CompilerGeneratedAttribute]
internal ArgumentDesigner get_Editor();
    [CompilerGeneratedAttribute]
private void set_Editor(ArgumentDesigner value);
    protected virtual string get_AutomationId();
    internal VBIdentifierName GetArgumentName();
    public virtual string ToString();
    internal Type GetArgumentType();
    internal PropertyKind GetArgumentDirection();
    internal object GetArgumentValue();
    internal bool Filter(Type type);
    internal ModelItem GetOwnerSchemaProperty();
    protected virtual Type OnGetDynamicPropertyValueEditorType(string propertyName);
    internal bool ValidateArgumentName(object value, List`1<string> errors);
    protected virtual void OnReflectedObjectPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanged(string propertyName);
}
internal class System.Activities.Presentation.View.DesignTimeVariable : DesignObjectWrapper {
    internal static string VariableNameProperty;
    internal static string VariableTypeProperty;
    internal static string VariableScopeProperty;
    internal static string VariableDefaultProperty;
    internal static string ToolTipProperty;
    internal static string VariableScopeLevelProperty;
    internal static string VariableModifiersProperty;
    internal static string AnnotationTextProperty;
    internal VariableDesigner Editor { get; private set; }
    protected string AutomationId { get; }
    internal DesignTimeVariable(ModelItem modelItem, VariableDesigner editor);
    private static DesignTimeVariable();
    [CompilerGeneratedAttribute]
internal VariableDesigner get_Editor();
    [CompilerGeneratedAttribute]
private void set_Editor(VariableDesigner value);
    public static PropertyDescriptorData[] InitializeTypeProperties();
    protected virtual string get_AutomationId();
    internal VBIdentifierName GetVariableName();
    protected virtual void OnReflectedObjectPropertyChanged(string propertyName);
    public virtual string ToString();
    protected virtual Type OnGetDynamicPropertyValueEditorType(string propertyName);
    protected virtual void OnPropertyChanged(string propertyName);
}
internal class System.Activities.Presentation.View.DesignTimeVariableToScopeConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum System.Activities.Presentation.View.EditingState : Enum {
    public int value__;
    public static EditingState Editing;
    public static EditingState Validating;
    public static EditingState Idle;
}
internal class System.Activities.Presentation.View.EditorResources : object {
    internal static ResourceDictionary GetResources();
    internal static ResourceDictionary GetIcons();
}
internal class System.Activities.Presentation.View.ErrorItem : ContextItem {
    public string Message { get; public set; }
    public string Details { get; public set; }
    public Type ItemType { get; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Details();
    [CompilerGeneratedAttribute]
public void set_Details(string value);
    public virtual Type get_ItemType();
}
internal class System.Activities.Presentation.View.ErrorToTooltipConverter : object {
    public ErrorToTooltipConverter(DataGridHelper owner);
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.ErrorView : UserControl {
    public static DependencyProperty MessageProperty;
    public static DependencyProperty DetailsProperty;
    public string Message { get; public set; }
    public string Details { get; public set; }
    public EditingContext Context { get; public set; }
    private static ErrorView();
    public string get_Message();
    public void set_Message(string value);
    public string get_Details();
    public void set_Details(string value);
    [CompilerGeneratedAttribute]
public EditingContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(EditingContext value);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.ExpandAllCollapseAllToggleConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class System.Activities.Presentation.View.ExpressionTextBox : UserControl {
    public static string ExpressionActivityEditorOptionName;
    public static DependencyProperty HintTextProperty;
    public static DependencyProperty ExpressionProperty;
    public static DependencyProperty ExpressionTypeProperty;
    public static DependencyProperty OwnerActivityProperty;
    public static DependencyProperty UseLocationExpressionProperty;
    public static DependencyProperty PathToArgumentProperty;
    public static DependencyProperty IsSupportedExpressionProperty;
    public static DependencyProperty VerticalScrollBarVisibilityProperty;
    public static DependencyProperty HorizontalScrollBarVisibilityProperty;
    public static DependencyProperty MaxLinesProperty;
    public static DependencyProperty MinLinesProperty;
    public static DependencyProperty ExplicitCommitProperty;
    public static DependencyProperty DefaultValueProperty;
    public static DependencyProperty AcceptsReturnProperty;
    public static DependencyProperty AcceptsTabProperty;
    public static DependencyProperty IsReadOnlyProperty;
    public static RoutedEvent EditorLostLogicalFocusEvent;
    public static ICommand CompleteWordCommand;
    public static ICommand GlobalIntellisenseCommand;
    public static ICommand ParameterInfoCommand;
    public static ICommand QuickInfoCommand;
    public static ICommand IncreaseFilterLevelCommand;
    public static ICommand DecreaseFilterLevelCommand;
    internal static DependencyProperty IsIndependentExpressionProperty;
    public static DependencyProperty ExpressionActivityEditorProperty;
    internal static DependencyProperty InternalHintTextProperty;
    internal static DependencyProperty IsInlinePropertyEditorProperty;
    public string HintText { get; public set; }
    public ModelItem Expression { get; public set; }
    public Type ExpressionType { get; public set; }
    public bool UseLocationExpression { get; public set; }
    public ModelItem OwnerActivity { get; public set; }
    public string PathToArgument { get; public set; }
    public bool IsSupportedExpression { get; public set; }
    public string DefaultValue { get; public set; }
    public bool AcceptsReturn { get; public set; }
    public bool AcceptsTab { get; public set; }
    public bool IsReadOnly { get; public set; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public int MaxLines { get; public set; }
    public int MinLines { get; public set; }
    public bool ExplicitCommit { get; public set; }
    public IExpressionEditorService ExpressionEditorService { get; }
    internal bool IsIndependentExpression { get; internal set; }
    public string ExpressionActivityEditor { get; public set; }
    internal string InternalHintText { get; internal set; }
    internal bool IsInlinePropertyEditor { get; internal set; }
    internal ExpressionActivityEditor Editor { get; }
    internal string CurrentEditorName { get; }
    private static ExpressionTextBox();
    public string get_HintText();
    public void set_HintText(string value);
    public ModelItem get_Expression();
    public void set_Expression(ModelItem value);
    public Type get_ExpressionType();
    public void set_ExpressionType(Type value);
    public bool get_UseLocationExpression();
    public void set_UseLocationExpression(bool value);
    public ModelItem get_OwnerActivity();
    public void set_OwnerActivity(ModelItem value);
    public string get_PathToArgument();
    public void set_PathToArgument(string value);
    public bool get_IsSupportedExpression();
    public void set_IsSupportedExpression(bool value);
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public bool get_AcceptsReturn();
    public void set_AcceptsReturn(bool value);
    public bool get_AcceptsTab();
    public void set_AcceptsTab(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public ScrollBarVisibility get_VerticalScrollBarVisibility();
    public void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    public ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public int get_MaxLines();
    public void set_MaxLines(int value);
    public int get_MinLines();
    public void set_MinLines(int value);
    public bool get_ExplicitCommit();
    public void set_ExplicitCommit(bool value);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public IExpressionEditorService get_ExpressionEditorService();
    public void add_EditorLostLogicalFocus(RoutedEventHandler value);
    public void remove_EditorLostLogicalFocus(RoutedEventHandler value);
    internal bool get_IsIndependentExpression();
    internal void set_IsIndependentExpression(bool value);
    public string get_ExpressionActivityEditor();
    public void set_ExpressionActivityEditor(string value);
    internal string get_InternalHintText();
    internal void set_InternalHintText(string value);
    internal bool get_IsInlinePropertyEditor();
    internal void set_IsInlinePropertyEditor(bool value);
    internal ExpressionActivityEditor get_Editor();
    internal string get_CurrentEditorName();
    protected virtual void OnInitialized(EventArgs e);
    public static void RegisterExpressionActivityEditor(string name, Type expressionActivityEditorType, CreateExpressionFromStringCallback convertFromString);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public void BeginEdit();
    internal void OnCompleteWordCommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    internal void OnCompleteWordCommandExecute(object sender, ExecutedRoutedEventArgs e);
    internal void OnGlobalIntellisenseCommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    internal void OnGlobalIntellisenseCommandExecute(object sender, ExecutedRoutedEventArgs e);
    internal void OnParameterInfoCommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    internal void OnParameterInfoCommandExecute(object sender, ExecutedRoutedEventArgs e);
    internal void OnQuickInfoCommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    internal void OnQuickInfoCommandExecute(object sender, ExecutedRoutedEventArgs e);
    internal void OnIncreaseFilterLevelCommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    internal void OnIncreaseFilterLevelCommandExecute(object sender, ExecutedRoutedEventArgs e);
    internal void OnDecreaseFilterLevelCommandCanExecute(object sender, CanExecuteRoutedEventArgs e);
    internal void OnDecreaseFilterLevelCommandExecute(object sender, ExecutedRoutedEventArgs e);
    internal void InitializeHintText(string defaultEditorHintText);
    internal static bool TryConvertFromString(string targetEditor, string expressionText, bool isLocationExpression, Type resultType, ActivityWithResult& expression);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.ExpressionTextBoxAutomationPeer : UIElementAutomationPeer {
    public ExpressionTextBoxAutomationPeer(ExpressionTextBox owner);
    protected virtual string GetItemStatusCore();
}
internal class System.Activities.Presentation.View.ExpressionTextBoxViewModel : object {
    private static ExpressionTextBoxViewModel();
    internal static void RegisterExpressionActivityService(string name, Type expressionEditorType, CreateExpressionFromStringCallback convertFromString);
    internal bool TryCreateEditor(string expressionEditorName, ExpressionActivityEditor& editorInstance);
    internal IExpressionEditorService GetExpressionService(ExpressionActivityEditor editor);
    internal string GetExpressionEditorType(string localSetting, object root, FrameworkName targetFramework);
    internal void InitializeEditor(ExpressionActivityEditor editor, ExpressionTextBox expressionTextBox);
    internal static bool TryConvertString(string targetEditor, string expressionText, bool isLocationExpression, Type resultType, ActivityWithResult& expression);
}
internal class System.Activities.Presentation.View.ExpressionValidationRule : ValidationRule {
    public ExpressionValidationRule(ExpressionTextBox owner);
    public virtual ValidationResult Validate(object value, CultureInfo cultureInfo);
}
internal class System.Activities.Presentation.View.ExpressionValueEditor : DialogPropertyValueEditor {
    protected DataTemplate DialogTemplate { get; }
    protected string DialogTitle { get; }
    public virtual void ShowDialog(PropertyValue propertyValue, IInputElement commandSource);
    protected virtual DataTemplate get_DialogTemplate();
    protected virtual string get_DialogTitle();
}
internal class System.Activities.Presentation.View.ExtensionSurface : Panel {
    public static DependencyProperty DesignerProperty;
    public static DependencyProperty AutoExpandCanvasProperty;
    public static DependencyProperty PlacementTargetProperty;
    public static DependencyProperty AlignmentProperty;
    public static DependencyProperty ModeProperty;
    public static DependencyProperty PositionProperty;
    public DesignerView Designer { get; public set; }
    public bool AutoExpandCanvas { get; public set; }
    private static ExtensionSurface();
    public DesignerView get_Designer();
    public void set_Designer(DesignerView value);
    public bool get_AutoExpandCanvas();
    public void set_AutoExpandCanvas(bool value);
    protected virtual void OnVisualChildrenChanged(DependencyObject visualAdded, DependencyObject visualRemoved);
    protected virtual void OnRenderSizeChanged(SizeChangedInfo sizeInfo);
    internal void SetWindowPosition(ExtensionWindow window, Point position);
    internal void SetSize(ExtensionWindow window, Size size);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual Size MeasureOverride(Size constraint);
    public void SelectWindow(ExtensionWindow window);
    public static void SetPlacementTarget(DependencyObject container, FrameworkElement value);
    public static FrameworkElement GetPlacementTarget(DependencyObject container);
    public static void SetAlignment(DependencyObject container, PositionAlignment value);
    public static PositionAlignment GetAlignment(DependencyObject container);
    public static void SetMode(DependencyObject container, PlacementMode value);
    public static PlacementMode GetMode(DependencyObject container);
    public static void SetPosition(DependencyObject container, Point value);
    public static Point GetPosition(DependencyObject container);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
internal class System.Activities.Presentation.View.ExtensionWindow : ContentControl {
    public static DependencyProperty DataProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty ShowWindowHeaderProperty;
    public static DependencyProperty ShowResizeGripProperty;
    public static DependencyProperty MenuItemsProperty;
    public static DependencyProperty IsResizableProperty;
    public static RoutedEvent ClosingEvent;
    public static RoutedEvent CloseEvent;
    public static RoutedEvent VisibilityChangedEvent;
    public object Data { get; public set; }
    public string Title { get; public set; }
    public DrawingBrush Icon { get; public set; }
    public bool ShowWindowHeader { get; public set; }
    public bool ShowResizeGrip { get; public set; }
    public ObservableCollection`1<MenuItem> MenuItems { get; private set; }
    public ExtensionSurface Surface { get; }
    public bool IsResizable { get; public set; }
    protected ContentPresenter ContentPresenter { get; }
    private static ExtensionWindow();
    protected virtual void OnInitialized(EventArgs e);
    public void add_Closing(ExtensionWindowClosingEventHandler value);
    public void remove_Closing(ExtensionWindowClosingEventHandler value);
    public void add_Close(ExtensionWindowCloseEventHandler value);
    public void remove_Close(ExtensionWindowCloseEventHandler value);
    public void add_VisibilityChanged(RoutedEventHandler value);
    public void remove_VisibilityChanged(RoutedEventHandler value);
    public object get_Data();
    public void set_Data(object value);
    public string get_Title();
    public void set_Title(string value);
    public DrawingBrush get_Icon();
    public void set_Icon(DrawingBrush value);
    public bool get_ShowWindowHeader();
    public void set_ShowWindowHeader(bool value);
    public bool get_ShowResizeGrip();
    public void set_ShowResizeGrip(bool value);
    public ObservableCollection`1<MenuItem> get_MenuItems();
    private void set_MenuItems(ObservableCollection`1<MenuItem> value);
    public ExtensionSurface get_Surface();
    public bool get_IsResizable();
    public void set_IsResizable(bool value);
    protected ContentPresenter get_ContentPresenter();
    public Point GetPlacementTargetOffset();
    protected virtual void OnVisualParentChanged(DependencyObject oldParent);
    protected virtual void OnDataChanged(object oldData, object newData);
    protected virtual void OnVisibilityChanged(Visibility oldValue, Visibility newValue);
    protected virtual void OnPositionChanged(Point position);
    public bool TryFindElement(string elementName, Object& element);
    public virtual void OnApplyTemplate();
    internal static void RaiseWindowCloseEvent(ExtensionWindow sender);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    public void SelectWindow();
    internal static bool TryGetParentExtensionWindow(FrameworkElement element, ExtensionWindow& window, ExtensionSurface& surface);
}
internal class System.Activities.Presentation.View.ExtensionWindowCloseEventHandler : MulticastDelegate {
    public ExtensionWindowCloseEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RoutedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RoutedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Activities.Presentation.View.ExtensionWindowClosingEventHandler : MulticastDelegate {
    public ExtensionWindowClosingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ExtensionWindowClosingRoutedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ExtensionWindowClosingRoutedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Activities.Presentation.View.ExtensionWindowClosingRoutedEventArgs : RoutedEventArgs {
    public bool Cancel { get; public set; }
    internal ExtensionWindowClosingRoutedEventArgs(RoutedEvent routedEvent, object source);
    [CompilerGeneratedAttribute]
public bool get_Cancel();
    [CompilerGeneratedAttribute]
public void set_Cancel(bool value);
}
[TemplatePartAttribute]
[TemplatePartAttribute]
internal class System.Activities.Presentation.View.ExtensionWindowHeader : Control {
    public static DependencyProperty TitleProperty;
    public static DependencyProperty ButtonCloseIconProperty;
    public static DependencyProperty IconProperty;
    public static DependencyProperty DropDownMenuIconProperty;
    public string Title { get; public set; }
    public DrawingBrush ButtonCloseIcon { get; public set; }
    public DrawingBrush Icon { get; public set; }
    public DrawingBrush DropDownMenuIcon { get; public set; }
    private static ExtensionWindowHeader();
    public string get_Title();
    public void set_Title(string value);
    public DrawingBrush get_ButtonCloseIcon();
    public void set_ButtonCloseIcon(DrawingBrush value);
    public DrawingBrush get_Icon();
    public void set_Icon(DrawingBrush value);
    public DrawingBrush get_DropDownMenuIcon();
    public void set_DropDownMenuIcon(DrawingBrush value);
    public virtual void OnApplyTemplate();
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs args);
    protected virtual void OnMouseMove(MouseEventArgs args);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs args);
    protected virtual void OnVisualParentChanged(DependencyObject oldParent);
}
[TemplatePartAttribute]
internal class System.Activities.Presentation.View.ExtensionWindowResizeGrip : Control {
    public static DependencyProperty IconProperty;
    public DrawingBrush Icon { get; public set; }
    private static ExtensionWindowResizeGrip();
    public DrawingBrush get_Icon();
    public void set_Icon(DrawingBrush value);
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs args);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnVisualParentChanged(DependencyObject oldParent);
}
internal class System.Activities.Presentation.View.FilterableData : DependencyObject {
    public static DependencyProperty DataProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty VisibilityProperty;
    public object Data { get; public set; }
    public bool IsSelected { get; public set; }
    public Visibility Visibility { get; public set; }
    internal object Owner { get; internal set; }
    private static FilterableData();
    public object get_Data();
    public void set_Data(object value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public Visibility get_Visibility();
    public void set_Visibility(Visibility value);
    [CompilerGeneratedAttribute]
internal object get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(object value);
    public virtual string ToString();
}
internal class System.Activities.Presentation.View.FilterableData`1 : FilterableData {
    public TData TypedData { get; public set; }
    public TData get_TypedData();
    public void set_TypedData(TData value);
    public virtual string ToString();
}
internal class System.Activities.Presentation.View.GenericActivityTypeDesigner : WorkflowViewElement {
    internal GenericActivityTypeDesigner genericActivityTypeDesignerElement;
    private static GenericActivityTypeDesigner();
    protected virtual void OnContextMenuLoaded(ContextMenu menu);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.HandleValueEditor : PropertyValueEditor {
}
public interface System.Activities.Presentation.View.IExpressionEditorInstance {
    public Control HostControl { get; }
    public string Text { get; public set; }
    public ScrollBarVisibility VerticalScrollBarVisibility { get; public set; }
    public ScrollBarVisibility HorizontalScrollBarVisibility { get; public set; }
    public int MinLines { get; public set; }
    public int MaxLines { get; public set; }
    public bool HasAggregateFocus { get; }
    public bool AcceptsReturn { get; public set; }
    public bool AcceptsTab { get; public set; }
    public abstract virtual Control get_HostControl();
    public abstract virtual string get_Text();
    public abstract virtual void set_Text(string value);
    public abstract virtual ScrollBarVisibility get_VerticalScrollBarVisibility();
    public abstract virtual void set_VerticalScrollBarVisibility(ScrollBarVisibility value);
    public abstract virtual ScrollBarVisibility get_HorizontalScrollBarVisibility();
    public abstract virtual void set_HorizontalScrollBarVisibility(ScrollBarVisibility value);
    public abstract virtual int get_MinLines();
    public abstract virtual void set_MinLines(int value);
    public abstract virtual int get_MaxLines();
    public abstract virtual void set_MaxLines(int value);
    public abstract virtual bool get_HasAggregateFocus();
    public abstract virtual bool get_AcceptsReturn();
    public abstract virtual void set_AcceptsReturn(bool value);
    public abstract virtual bool get_AcceptsTab();
    public abstract virtual void set_AcceptsTab(bool value);
    public abstract virtual void Close();
    public abstract virtual void Focus();
    public abstract virtual void ClearSelection();
    public abstract virtual bool Cut();
    public abstract virtual bool Copy();
    public abstract virtual bool Paste();
    public abstract virtual bool Undo();
    public abstract virtual bool Redo();
    public abstract virtual bool CompleteWord();
    public abstract virtual bool GlobalIntellisense();
    public abstract virtual bool ParameterInfo();
    public abstract virtual bool QuickInfo();
    public abstract virtual bool IncreaseFilterLevel();
    public abstract virtual bool DecreaseFilterLevel();
    public abstract virtual bool CanCut();
    public abstract virtual bool CanCopy();
    public abstract virtual bool CanPaste();
    public abstract virtual bool CanUndo();
    public abstract virtual bool CanRedo();
    public abstract virtual bool CanCompleteWord();
    public abstract virtual bool CanGlobalIntellisense();
    public abstract virtual bool CanParameterInfo();
    public abstract virtual bool CanQuickInfo();
    public abstract virtual bool CanIncreaseFilterLevel();
    public abstract virtual bool CanDecreaseFilterLevel();
    public abstract virtual string GetCommittedText();
    public abstract virtual void add_TextChanged(EventHandler value);
    public abstract virtual void remove_TextChanged(EventHandler value);
    public abstract virtual void add_LostAggregateFocus(EventHandler value);
    public abstract virtual void remove_LostAggregateFocus(EventHandler value);
    public abstract virtual void add_GotAggregateFocus(EventHandler value);
    public abstract virtual void remove_GotAggregateFocus(EventHandler value);
    public abstract virtual void add_Closing(EventHandler value);
    public abstract virtual void remove_Closing(EventHandler value);
}
public interface System.Activities.Presentation.View.IExpressionEditorService {
    public abstract virtual IExpressionEditorInstance CreateExpressionEditor(AssemblyContextControlItem assemblies, ImportedNamespaceContextItem importedNamespaces, List`1<ModelItem> variables, string text, Type expressionType);
    public abstract virtual IExpressionEditorInstance CreateExpressionEditor(AssemblyContextControlItem assemblies, ImportedNamespaceContextItem importedNamespaces, List`1<ModelItem> variables, string text, Type expressionType, Size initialSize);
    public abstract virtual IExpressionEditorInstance CreateExpressionEditor(AssemblyContextControlItem assemblies, ImportedNamespaceContextItem importedNamespaces, List`1<ModelItem> variables, string text);
    public abstract virtual IExpressionEditorInstance CreateExpressionEditor(AssemblyContextControlItem assemblies, ImportedNamespaceContextItem importedNamespaces, List`1<ModelItem> variables, string text, Size initialSize);
    public abstract virtual void CloseExpressionEditors();
    public abstract virtual void UpdateContext(AssemblyContextControlItem assemblies, ImportedNamespaceContextItem importedNamespaces);
}
internal class System.Activities.Presentation.View.ImportDesigner : ContentControl {
    public static DependencyProperty ContextProperty;
    internal ImportDesigner variableDesigner;
    internal ComboBox inputComboBox;
    internal DataGrid importedNamespacesDataGrid;
    public EditingContext Context { get; public set; }
    private static ImportDesigner();
    public EditingContext get_Context();
    public void set_Context(EditingContext value);
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs e);
    internal void OnReferenceUpdated(AssemblyName updatedReference, bool isAdded);
    public static void AddImport(string importedNamespace, EditingContext editingContext);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
internal interface System.Activities.Presentation.View.IVersionEditor {
    public abstract virtual void ShowErrorMessage(string message);
}
internal class System.Activities.Presentation.View.LineToHeightConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.ModelPropertyPathExpanderConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.NamespaceDisplay : UserControl {
    public static DependencyProperty NamespaceProperty;
    public static DependencyProperty IsInvalidProperty;
    public static DependencyProperty ErrorMessageProperty;
    internal NamespaceDisplay namespaceDisplay;
    public string Namespace { get; public set; }
    public bool IsInvalid { get; public set; }
    public string ErrorMessage { get; public set; }
    private static NamespaceDisplay();
    public string get_Namespace();
    public void set_Namespace(string value);
    public bool get_IsInvalid();
    public void set_IsInvalid(bool value);
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.NamespaceDisplayAutomationPeer : UIElementAutomationPeer {
    public NamespaceDisplayAutomationPeer(NamespaceDisplay owner);
    protected virtual string GetItemStatusCore();
}
internal class System.Activities.Presentation.View.NoContextMenuGrid : Grid {
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
}
[AttributeUsageAttribute("128")]
public class System.Activities.Presentation.View.OutlineView.HidePropertyInOutlineViewAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
public class System.Activities.Presentation.View.OutlineView.ShowInOutlineViewAttribute : Attribute {
    public string PromotedProperty { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PromotedProperty();
    [CompilerGeneratedAttribute]
public void set_PromotedProperty(string value);
}
[AttributeUsageAttribute("128")]
public class System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAsSiblingAttribute : Attribute {
}
[AttributeUsageAttribute("128")]
public class System.Activities.Presentation.View.OutlineView.ShowPropertyInOutlineViewAttribute : Attribute {
    public bool CurrentPropertyVisible { get; public set; }
    public bool DuplicatedChildNodesVisible { get; public set; }
    public string ChildNodePrefix { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CurrentPropertyVisible();
    [CompilerGeneratedAttribute]
public void set_CurrentPropertyVisible(bool value);
    [CompilerGeneratedAttribute]
public bool get_DuplicatedChildNodesVisible();
    [CompilerGeneratedAttribute]
public void set_DuplicatedChildNodesVisible(bool value);
    [CompilerGeneratedAttribute]
public string get_ChildNodePrefix();
    [CompilerGeneratedAttribute]
public void set_ChildNodePrefix(string value);
}
internal class System.Activities.Presentation.View.ParserContext : LocationReferenceEnvironment {
    public IContainer Container { get; }
    public object Instance { get; internal set; }
    public PropertyDescriptor PropertyDescriptor { get; internal set; }
    public Activity Root { get; }
    public bool IsFixupTokenAvailable { get; }
    internal IEnumerable`1<string> Namespaces { get; }
    public ParserContext(ModelItem modelItem);
    public sealed virtual IContainer get_Container();
    [CompilerGeneratedAttribute]
public sealed virtual object get_Instance();
    [CompilerGeneratedAttribute]
internal void set_Instance(object value);
    [CompilerGeneratedAttribute]
public sealed virtual PropertyDescriptor get_PropertyDescriptor();
    [CompilerGeneratedAttribute]
internal void set_PropertyDescriptor(PropertyDescriptor value);
    public virtual Activity get_Root();
    public bool Initialize(ModelItem modelItem);
    public virtual bool IsVisible(LocationReference reference);
    public virtual bool TryGetLocationReference(string name, LocationReference& result);
    public sealed virtual string GetNamespace(string prefix);
    public sealed virtual IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes();
    public virtual IEnumerable`1<LocationReference> GetLocationReferences();
    public sealed virtual object Resolve(string name);
    public sealed virtual object Resolve(string name, Boolean& isFullyInitialized);
    public sealed virtual bool get_IsFixupTokenAvailable();
    internal IEnumerable`1<string> get_Namespaces();
    public sealed virtual object GetFixupToken(IEnumerable`1<string> names);
    public sealed virtual object GetFixupToken(IEnumerable`1<string> names, bool canAssignDirectly);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual ValueSerializer GetValueSerializerFor(Type type);
    public sealed virtual ValueSerializer GetValueSerializerFor(PropertyDescriptor descriptor);
    public sealed virtual string LookupPrefix(string ns);
    public sealed virtual void OnComponentChanged();
    public sealed virtual bool OnComponentChanging();
    private sealed virtual override IEnumerable`1<KeyValuePair`2<string, object>> System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope();
    private sealed virtual override void System.Xaml.IXamlNameResolver.add_OnNameScopeInitializationComplete(EventHandler value);
    private sealed virtual override void System.Xaml.IXamlNameResolver.remove_OnNameScopeInitializationComplete(EventHandler value);
}
internal class System.Activities.Presentation.View.PropertyEntryToEditingContextConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.PropertyEntryToEditorOptionConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public enum System.Activities.Presentation.View.PropertyKind : Enum {
    public int value__;
    public static PropertyKind InArgument;
    public static PropertyKind InOutArgument;
    public static PropertyKind OutArgument;
    public static PropertyKind Property;
}
internal class System.Activities.Presentation.View.PropertyValueTextBox : TextBox {
    protected virtual void OnInitialized(EventArgs e);
}
internal class System.Activities.Presentation.View.QuadTree`1 : object {
    public Rect Bounds { get; public set; }
    public Rect get_Bounds();
    public void set_Bounds(Rect value);
    public void Insert(T node, Rect bounds);
    public IEnumerable`1<T> GetNodesInside(Rect bounds);
    public bool HasNodesInside(Rect bounds);
    public bool Remove(T node);
}
internal class System.Activities.Presentation.View.ResolveTemplateParams : object {
    public DataGridCell Cell { get; private set; }
    public object Instance { get; private set; }
    public bool IsDefaultTemplate { get; public set; }
    public DataTemplate Template { get; public set; }
    internal ResolveTemplateParams(DataGridCell cell, object instance);
    [CompilerGeneratedAttribute]
public DataGridCell get_Cell();
    [CompilerGeneratedAttribute]
private void set_Cell(DataGridCell value);
    [CompilerGeneratedAttribute]
public object get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(object value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultTemplate();
    [CompilerGeneratedAttribute]
public void set_IsDefaultTemplate(bool value);
    [CompilerGeneratedAttribute]
public DataTemplate get_Template();
    [CompilerGeneratedAttribute]
public void set_Template(DataTemplate value);
}
internal class System.Activities.Presentation.View.RubberBandSelector : object {
    public bool IsSelected { get; public set; }
    public RubberBandSelector(EditingContext context);
    [CompilerGeneratedAttribute]
public bool get_IsSelected();
    [CompilerGeneratedAttribute]
public void set_IsSelected(bool value);
    public void RegisterViewElement(WorkflowViewElement view);
    public void UnregisterViewElement(WorkflowViewElement view);
    public void OnScrollViewerMouseLeftButtonDown(MouseButtonEventArgs e);
    public void OnScrollViewerMouseMove(MouseEventArgs e);
    public void OnScrollViewerPreviewMouseLeftButtonUp(MouseEventArgs e);
    public void OnScrollViewerMouseLeave();
    public void OnScrollViewerEscapeKeyDown();
}
internal class System.Activities.Presentation.View.ScopeComboBox : ComboBox {
    protected virtual void OnInitialized(EventArgs e);
    protected virtual void OnSelectionChanged(SelectionChangedEventArgs e);
}
internal class System.Activities.Presentation.View.ScopeToTooltipConverter : object {
    internal static string BuildToolTip(ModelItem entry, IMultiValueConverter displayNameConverter, CultureInfo culture);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.ScrollViewerPanner : object {
    public ScrollViewer ScrollViewer { get; public set; }
    public bool InPanMode { get; public set; }
    public Cursor Hand { get; public set; }
    public Cursor DraggingHand { get; public set; }
    internal PanState CurrentPanState { get; internal set; }
    public ScrollViewerPanner(ScrollViewer scrollViewer);
    public ScrollViewer get_ScrollViewer();
    public void set_ScrollViewer(ScrollViewer value);
    public bool get_InPanMode();
    public void set_InPanMode(bool value);
    [CompilerGeneratedAttribute]
public Cursor get_Hand();
    [CompilerGeneratedAttribute]
public void set_Hand(Cursor value);
    [CompilerGeneratedAttribute]
public Cursor get_DraggingHand();
    [CompilerGeneratedAttribute]
public void set_DraggingHand(Cursor value);
    internal PanState get_CurrentPanState();
    internal void set_CurrentPanState(PanState value);
    internal bool IsInScrollableArea(Point mousePosition);
    internal void OnScrollViewerMouseDown(object sender, MouseButtonEventArgs e);
    internal void OnLostMouseCapture(object sender, MouseEventArgs e);
    internal void OnScrollViewerMouseMove(object sender, MouseEventArgs e);
    internal void OnScrollViewerMouseUp(object sender, MouseButtonEventArgs e);
    internal void OnScrollViewerKeyDown(object sender, KeyEventArgs e);
    internal void OnScrollViewerKeyUp(object sender, KeyEventArgs e);
}
internal class System.Activities.Presentation.View.SearchToolTipAdorner : Adorner {
    public SearchToolTipAdorner(UIElement adornedElement, DesignerView designerView, string text);
    protected virtual void OnRender(DrawingContext drawingContext);
}
public class System.Activities.Presentation.View.Selection : ContextItem {
    public ModelItem PrimarySelection { get; }
    public IEnumerable`1<ModelItem> SelectedObjects { get; }
    public int SelectionCount { get; }
    public Type ItemType { get; }
    public Selection(IEnumerable`1<ModelItem> selectedObjects);
    public Selection(IEnumerable`1<ModelItem> selectedObjects, Predicate`1<ModelItem> match);
    public Selection(IEnumerable selectedObjects);
    public Selection(IEnumerable selectedObjects, Predicate`1<ModelItem> match);
    public Selection(ModelItem[] selectedObjects);
    public ModelItem get_PrimarySelection();
    public IEnumerable`1<ModelItem> get_SelectedObjects();
    public int get_SelectionCount();
    public sealed virtual Type get_ItemType();
    public static Selection Select(EditingContext context, ModelItem itemToSelect);
    public static Selection SelectOnly(EditingContext context, ModelItem itemToSelect);
    public static void Subscribe(EditingContext context, SubscribeContextCallback`1<Selection> handler);
    public static Selection Toggle(EditingContext context, ModelItem itemToToggle);
    public static Selection Union(EditingContext context, ModelItem itemToAdd);
    internal static bool MultipleObjectsSelected(EditingContext context);
    internal static bool IsSelection(ModelItem item);
    internal static bool IsPrimarySelection(ModelItem item);
    public static void Unsubscribe(EditingContext context, SubscribeContextCallback`1<Selection> handler);
}
[FlagsAttribute]
public enum System.Activities.Presentation.View.ShellBarItemVisibility : Enum {
    public int value__;
    public static ShellBarItemVisibility None;
    public static ShellBarItemVisibility Variables;
    public static ShellBarItemVisibility Arguments;
    public static ShellBarItemVisibility Imports;
    public static ShellBarItemVisibility Zoom;
    public static ShellBarItemVisibility MiniMap;
    public static ShellBarItemVisibility PanMode;
    public static ShellBarItemVisibility All;
}
[FlagsAttribute]
public enum System.Activities.Presentation.View.ShellHeaderItemsVisibility : Enum {
    public int value__;
    public static ShellHeaderItemsVisibility None;
    public static ShellHeaderItemsVisibility Breadcrumb;
    public static ShellHeaderItemsVisibility ExpandAll;
    public static ShellHeaderItemsVisibility CollapseAll;
    public static ShellHeaderItemsVisibility All;
}
internal class System.Activities.Presentation.View.SpacerPlaceholder : UserControl {
    internal Rectangle dropTarget;
    unknown bool TargetVisiable {public set; }
    public void set_TargetVisiable(bool value);
    protected virtual void OnDrop(DragEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.TreeView.ChangeNotificationTracker : object {
    public ModelProperty ParentProperty { get; public set; }
    public Dictionary`2<ModelItem, HashSet`1<string>> TrackedModelItem { get; public set; }
    public List`1<INotifyCollectionChanged> TrackedCollection { get; public set; }
    public List`1<TreeViewItemViewModel> ChildViewModels { get; public set; }
    public TreeViewItemViewModel Parent { get; private set; }
    public ChangeNotificationTracker(TreeViewItemViewModel parent, ModelProperty parentProperty);
    [CompilerGeneratedAttribute]
public ModelProperty get_ParentProperty();
    [CompilerGeneratedAttribute]
public void set_ParentProperty(ModelProperty value);
    [CompilerGeneratedAttribute]
public Dictionary`2<ModelItem, HashSet`1<string>> get_TrackedModelItem();
    [CompilerGeneratedAttribute]
public void set_TrackedModelItem(Dictionary`2<ModelItem, HashSet`1<string>> value);
    [CompilerGeneratedAttribute]
public List`1<INotifyCollectionChanged> get_TrackedCollection();
    [CompilerGeneratedAttribute]
public void set_TrackedCollection(List`1<INotifyCollectionChanged> value);
    [CompilerGeneratedAttribute]
public List`1<TreeViewItemViewModel> get_ChildViewModels();
    [CompilerGeneratedAttribute]
public void set_ChildViewModels(List`1<TreeViewItemViewModel> value);
    [CompilerGeneratedAttribute]
public TreeViewItemViewModel get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(TreeViewItemViewModel value);
    public void Add(ModelItem modelItem, ModelProperty property);
    public void Add(ModelItem modelItem, string propertyName);
    public void AddCollection(INotifyCollectionChanged collection);
    public void CleanUp();
}
internal static class System.Activities.Presentation.View.TreeView.DesignerTreeAutoExpandHelper : object {
    internal static TreeViewItemViewModel Expand(TreeViewItemModelItemViewModel rootTreeViewItem, ModelItem modelItemToExpandTo);
}
internal class System.Activities.Presentation.View.TreeView.DesignerTreeView : TreeView {
    internal bool IsSelectionChangeHandledByTreeView { get; internal set; }
    public EditingContext Context { get; private set; }
    [CompilerGeneratedAttribute]
internal bool get_IsSelectionChangeHandledByTreeView();
    [CompilerGeneratedAttribute]
internal void set_IsSelectionChangeHandledByTreeView(bool value);
    [CompilerGeneratedAttribute]
public EditingContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(EditingContext value);
    public void SetRootDesigner(ModelItem modelItem);
    public void Initialize(EditingContext context);
    public void RestoreDesignerStates();
    protected virtual DependencyObject GetContainerForItemOverride();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.TreeView.DesignerTreeViewItem : TreeViewItem {
    public DesignerTreeView ParentTreeView { get; public set; }
    [CompilerGeneratedAttribute]
public DesignerTreeView get_ParentTreeView();
    [CompilerGeneratedAttribute]
public void set_ParentTreeView(DesignerTreeView value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnItemsChanged(NotifyCollectionChangedEventArgs e);
    internal Dictionary`2<string, string> GetAutomationItemStatus();
    protected virtual DependencyObject GetContainerForItemOverride();
    protected virtual void OnHeaderChanged(object oldHeader, object newHeader);
    protected virtual void OnSelected(RoutedEventArgs e);
    protected virtual void OnUnselected(RoutedEventArgs e);
    private sealed virtual override void System.Activities.Presentation.View.TreeView.ITreeViewItemSelectionHandler.Select();
    private sealed virtual override void System.Activities.Presentation.View.TreeView.ITreeViewItemSelectionHandler.Unselect();
}
internal interface System.Activities.Presentation.View.TreeView.ITreeViewItemSelectionHandler {
    public abstract virtual void Select();
    public abstract virtual void Unselect();
}
internal class System.Activities.Presentation.View.TreeView.TreeViewItemKeyValuePairModelItemViewModel : TreeViewItemViewModel`1<KeyValuePair`2<ModelItem, ModelItem>> {
    public TreeViewItemKeyValuePairModelItemViewModel(TreeViewItemViewModel parent, KeyValuePair`2<ModelItem, ModelItem> value);
    internal virtual void LoadChildren();
    internal virtual void UpdateChildren(ChangeNotificationTracker tracker, EventArgs e);
    internal virtual void UpdateState();
    protected virtual EditingContext GetEditingContext();
}
internal class System.Activities.Presentation.View.TreeView.TreeViewItemModelItemViewModel : TreeViewItemViewModel`1<ModelItem> {
    public ModelItem VisualValue { get; internal set; }
    internal bool HasDesigner { get; }
    public TreeViewItemModelItemViewModel(TreeViewItemViewModel parent, ModelItem modelItem, bool lazyLoad);
    public TreeViewItemModelItemViewModel(TreeViewItemViewModel parent, ModelItem modelItem);
    public virtual ModelItem get_VisualValue();
    internal virtual void set_VisualValue(ModelItem value);
    internal bool get_HasDesigner();
    internal virtual void LoadChildren();
    internal virtual void UpdateChildren(ChangeNotificationTracker tracker, EventArgs e);
    internal virtual void UpdateState();
    internal virtual int FindInsertionIndex(ChangeNotificationTracker tracker);
    internal virtual ChangeNotificationTracker GetTracker(ModelProperty modelProperty, bool createNew);
    protected virtual void CleanUpCore();
    protected virtual EditingContext GetEditingContext();
}
internal class System.Activities.Presentation.View.TreeView.TreeViewItemModelPropertyViewModel : TreeViewItemViewModel`1<ModelProperty> {
    public TreeViewItemModelPropertyViewModel(TreeViewItemViewModel parent, ModelProperty property);
    internal virtual ChangeNotificationTracker GetTracker(ModelProperty modelProperty, bool createNew);
    internal virtual void UpdateChildren(ChangeNotificationTracker tracker, EventArgs e);
    internal virtual void LoadChildren();
    internal virtual void UpdateState();
    protected virtual EditingContext GetEditingContext();
}
internal class System.Activities.Presentation.View.TreeView.TreeViewItemViewModel : object {
    internal static TreeViewItemViewModel DummyNode;
    internal static Dictionary`2<Type, DrawingBrush> IconCache;
    internal ObservableCollection`1<TreeViewItemViewModel> InternalChildren { get; private set; }
    public ReadOnlyObservableCollection`1<TreeViewItemViewModel> Children { get; private set; }
    public string NodePrefixText { get; public set; }
    public DrawingBrush Icon { get; public set; }
    internal bool IsAlive { get; private set; }
    public bool IsExpanded { get; public set; }
    public bool IsHighlighted { get; public set; }
    internal bool DuplicatedNodeVisible { get; internal set; }
    internal TreeViewItemState State { get; internal set; }
    internal bool HasChildren { get; }
    internal bool HasSibling { get; }
    public TreeViewItemViewModel Parent { get; public set; }
    internal ITreeViewItemSelectionHandler TreeViewItem { get; internal set; }
    protected HashSet`1<object> ChildrenValueCache { get; protected set; }
    internal Dictionary`2<ModelProperty, ChangeNotificationTracker> Trackers { get; private set; }
    protected DesignerPerfEventProvider PerfEventProvider { get; }
    private static TreeViewItemViewModel();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal ObservableCollection`1<TreeViewItemViewModel> get_InternalChildren();
    [CompilerGeneratedAttribute]
private void set_InternalChildren(ObservableCollection`1<TreeViewItemViewModel> value);
    [CompilerGeneratedAttribute]
public ReadOnlyObservableCollection`1<TreeViewItemViewModel> get_Children();
    [CompilerGeneratedAttribute]
private void set_Children(ReadOnlyObservableCollection`1<TreeViewItemViewModel> value);
    public string get_NodePrefixText();
    public void set_NodePrefixText(string value);
    public DrawingBrush get_Icon();
    public void set_Icon(DrawingBrush value);
    [CompilerGeneratedAttribute]
internal bool get_IsAlive();
    [CompilerGeneratedAttribute]
private void set_IsAlive(bool value);
    public bool get_IsExpanded();
    public void set_IsExpanded(bool value);
    public bool get_IsHighlighted();
    public void set_IsHighlighted(bool value);
    [CompilerGeneratedAttribute]
internal bool get_DuplicatedNodeVisible();
    [CompilerGeneratedAttribute]
internal void set_DuplicatedNodeVisible(bool value);
    [CompilerGeneratedAttribute]
internal TreeViewItemState get_State();
    [CompilerGeneratedAttribute]
internal void set_State(TreeViewItemState value);
    internal bool get_HasChildren();
    internal bool get_HasSibling();
    [CompilerGeneratedAttribute]
public TreeViewItemViewModel get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(TreeViewItemViewModel value);
    [CompilerGeneratedAttribute]
internal ITreeViewItemSelectionHandler get_TreeViewItem();
    [CompilerGeneratedAttribute]
internal void set_TreeViewItem(ITreeViewItemSelectionHandler value);
    [CompilerGeneratedAttribute]
protected HashSet`1<object> get_ChildrenValueCache();
    [CompilerGeneratedAttribute]
protected void set_ChildrenValueCache(HashSet`1<object> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<ModelProperty, ChangeNotificationTracker> get_Trackers();
    [CompilerGeneratedAttribute]
private void set_Trackers(Dictionary`2<ModelProperty, ChangeNotificationTracker> value);
    protected DesignerPerfEventProvider get_PerfEventProvider();
    protected virtual EditingContext GetEditingContext();
    internal virtual object GetValue();
    internal virtual void LoadChildren();
    internal virtual void UpdateChildren(ChangeNotificationTracker tracker, EventArgs e);
    internal virtual void AddChild(TreeViewItemViewModel child, ModelProperty modelProperty);
    internal static TreeViewItemViewModel CreateViewModel(TreeViewItemViewModel parent, object value);
    internal static void AddModelItem(TreeViewItemViewModel parent, ModelItem item, ModelProperty trackingProperty);
    internal static void AddModelItemCollection(TreeViewItemViewModel parent, ModelItemCollection collection, ModelProperty trackingProperty);
    internal static void AddModelItemDictionary(TreeViewItemViewModel parent, ModelItemDictionary dictionary, ModelProperty trackingProperty);
    internal static void AddModelProperty(TreeViewItemViewModel parent, ModelItem item, ModelProperty trackingProperty, ModelProperty property);
    internal static bool IsPromotedProperty(ModelItem modelItem, ModelProperty property);
    internal static bool IsPromotedProperty(ModelItem modelItem, string propertyName);
    internal static void AddChild(TreeViewItemViewModel parent, ModelItem item, object value, bool duplicatedNodeVisible, string childNodePrefix, ModelProperty trackingProperty);
    internal ChangeNotificationTracker GetTracker(ModelProperty modelProperty);
    internal virtual ChangeNotificationTracker GetTracker(ModelProperty modelProperty, bool createNew);
    internal ChangeNotificationTracker GetTracker(TreeViewItemViewModel child);
    internal virtual int FindInsertionIndex(ChangeNotificationTracker tracker);
    internal ModelProperty GetTrackingModelPropertyForChild(TreeViewItemViewModel child);
    internal virtual void UpdateState();
    protected void NotifyPropertyChanged(string propertyName);
    public void CleanUp();
    protected virtual void CleanUpCore();
}
internal class System.Activities.Presentation.View.TreeView.TreeViewItemViewModel`1 : TreeViewItemViewModel {
    public T VisualValue { get; internal set; }
    public T Value { get; protected set; }
    public TreeViewItemViewModel`1(TreeViewItemViewModel parent);
    public virtual T get_VisualValue();
    internal virtual void set_VisualValue(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
protected void set_Value(T value);
    public virtual string ToString();
    internal virtual object GetValue();
    protected virtual void CleanUpCore();
}
internal static class System.Activities.Presentation.View.TreeView.UniqueModelItemHelper : object {
    internal static HashSet`1<ModelItem> FindUniqueChildren(ModelProperty property);
}
internal class System.Activities.Presentation.View.TypeBrowser : DialogWindow {
    internal TypeBrowser controlRoot;
    internal DockPanel dockPanelName;
    internal TextBox typeEntryTextBox;
    internal StackPanel genericPanel;
    internal TextBlock textBlock1;
    internal ItemsControl myItemsControl;
    internal TextBlock textBox1;
    internal TreeView typesTreeView;
    internal TreeViewItem LocalAssembly;
    internal TreeViewItem ReferencedAssemblies;
    public Type ConcreteType { get; private set; }
    public ObservableCollection`1<AssemblyNode> LocalAssemblies { get; }
    public ObservableCollection`1<AssemblyNode> ReferenceAssemblies { get; }
    public TypeBrowser(AssemblyContextControlItem assemblyContext, EditingContext context, Func`2<Type, bool> filter);
    private static TypeBrowser();
    public Type get_ConcreteType();
    private void set_ConcreteType(Type value);
    public ObservableCollection`1<AssemblyNode> get_LocalAssemblies();
    public ObservableCollection`1<AssemblyNode> get_ReferenceAssemblies();
    public Nullable`1<bool> ShowDialog(DependencyObject owner);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.TypeKeyValue : object {
    public string ErrorText { get; public set; }
    public Type GenericType { get; public set; }
    public bool IsSelected { get; public set; }
    public Func`2<Type, bool> Filter { get; public set; }
    public ObservableCollection`1<Type> MostRecentlyUsedTypes { get; public set; }
    public string HintText { get; public set; }
    public bool BrowseTypeDirectly { get; public set; }
    public bool IsValid { get; public set; }
    public ObservableCollection`1<TypeKeyValue> SubTypes { get; }
    public Type TargetType { get; public set; }
    public TypeKeyValue(Type genericType, Action`1<TypeKeyValue> typeChangedCallBack);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public string get_ErrorText();
    public void set_ErrorText(string value);
    public Type get_GenericType();
    public void set_GenericType(Type value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public Func`2<Type, bool> get_Filter();
    public void set_Filter(Func`2<Type, bool> value);
    public ObservableCollection`1<Type> get_MostRecentlyUsedTypes();
    public void set_MostRecentlyUsedTypes(ObservableCollection`1<Type> value);
    public string get_HintText();
    public void set_HintText(string value);
    public bool get_BrowseTypeDirectly();
    public void set_BrowseTypeDirectly(bool value);
    public bool get_IsValid();
    public void set_IsValid(bool value);
    public ObservableCollection`1<TypeKeyValue> get_SubTypes();
    public Type get_TargetType();
    public void set_TargetType(Type value);
    public Type GetConcreteType();
}
public class System.Activities.Presentation.View.TypePresenter : ContentControl {
    public static DependencyProperty ContextProperty;
    public static DependencyProperty AllowNullProperty;
    public static DependencyProperty BrowseTypeDirectlyProperty;
    public static DependencyProperty TypeProperty;
    public static DependencyProperty LabelProperty;
    public static DependencyProperty FilterProperty;
    public static DependencyProperty TextProperty;
    public static DependencyProperty MostRecentlyUsedTypesProperty;
    public static DependencyProperty CenterActivityTypeResolverDialogProperty;
    public static DependencyProperty CenterTypeBrowserDialogProperty;
    public static RoutedEvent TypeBrowserOpenedEvent;
    public static RoutedEvent TypeBrowserClosedEvent;
    public static RoutedEvent TypeChangedEvent;
    internal TypePresenter controlRoot;
    internal TextBlock typeTextBlock;
    internal ComboBox typeComboBox;
    internal static List`1<Type> DefaultTypes { get; }
    public static ObservableCollection`1<Type> DefaultMostRecentlyUsedTypes { get; }
    public ObservableCollection`1<Type> MostRecentlyUsedTypes { get; public set; }
    public EditingContext Context { get; public set; }
    public bool AllowNull { get; public set; }
    public string Label { get; public set; }
    public Func`2<Type, bool> Filter { get; public set; }
    public bool CenterActivityTypeResolverDialog { get; public set; }
    public bool CenterTypeBrowserDialog { get; public set; }
    internal TypeWrapper NullTypeWrapper { get; }
    public string Text { get; private set; }
    public IEnumerable`1<TypeWrapper> Items { get; }
    public bool BrowseTypeDirectly { get; public set; }
    public Type Type { get; public set; }
    public string TypeName { get; }
    private static TypePresenter();
    internal static List`1<Type> get_DefaultTypes();
    public static ObservableCollection`1<Type> get_DefaultMostRecentlyUsedTypes();
    public ObservableCollection`1<Type> get_MostRecentlyUsedTypes();
    public void set_MostRecentlyUsedTypes(ObservableCollection`1<Type> value);
    public void FocusOnVisibleControl();
    public void add_TypeBrowserOpened(RoutedEventHandler value);
    public void remove_TypeBrowserOpened(RoutedEventHandler value);
    public void add_TypeBrowserClosed(RoutedEventHandler value);
    public void remove_TypeBrowserClosed(RoutedEventHandler value);
    public void add_TypeChanged(RoutedEventHandler value);
    public void remove_TypeChanged(RoutedEventHandler value);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public EditingContext get_Context();
    public void set_Context(EditingContext value);
    public bool get_AllowNull();
    public void set_AllowNull(bool value);
    public string get_Label();
    public void set_Label(string value);
    public Func`2<Type, bool> get_Filter();
    public void set_Filter(Func`2<Type, bool> value);
    public bool get_CenterActivityTypeResolverDialog();
    public void set_CenterActivityTypeResolverDialog(bool value);
    public bool get_CenterTypeBrowserDialog();
    public void set_CenterTypeBrowserDialog(bool value);
    internal TypeWrapper get_NullTypeWrapper();
    public string get_Text();
    private void set_Text(string value);
    public IEnumerable`1<TypeWrapper> get_Items();
    public bool get_BrowseTypeDirectly();
    public void set_BrowseTypeDirectly(bool value);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_TypeName();
    internal static string ResolveTypeName(Type type);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnMouseLeftButtonDown(MouseButtonEventArgs e);
    protected virtual void OnMouseLeftButtonUp(MouseButtonEventArgs e);
    protected virtual void OnPreviewKeyDown(KeyEventArgs e);
    internal static bool IsPreviewKey(Key key);
    internal void Preview();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class System.Activities.Presentation.View.TypeResolvingOptions : object {
    public Func`2<Type, bool> Filter { get; public set; }
    internal ObservableCollection`1<Type> MostRecentlyUsedTypes { get; internal set; }
    internal IDictionary`2<string, string> HintTextMap { get; }
    public bool BrowseTypeDirectly { get; public set; }
    public TypeResolvingOptions(IEnumerable`1<Type> defaultTypes);
    [CompilerGeneratedAttribute]
public Func`2<Type, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`2<Type, bool> value);
    [CompilerGeneratedAttribute]
internal ObservableCollection`1<Type> get_MostRecentlyUsedTypes();
    [CompilerGeneratedAttribute]
internal void set_MostRecentlyUsedTypes(ObservableCollection`1<Type> value);
    internal IDictionary`2<string, string> get_HintTextMap();
    [CompilerGeneratedAttribute]
public bool get_BrowseTypeDirectly();
    [CompilerGeneratedAttribute]
public void set_BrowseTypeDirectly(bool value);
    internal static TypeResolvingOptions Merge(TypeResolvingOptions lhs, TypeResolvingOptions rhs);
}
internal class System.Activities.Presentation.View.TypeToArgumentTypeConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.TypeToPromptTextConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    internal static string GetPromptText(object value);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.TypeToStringValueConverter : object {
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
public class System.Activities.Presentation.View.TypeWrapper : object {
    public string DisplayName { get; }
    public bool IsTypeDefinition { get; }
    public object Tag { get; private set; }
    public Type Type { get; }
    internal TypeWrapper(Type type);
    internal TypeWrapper(string text, string tag, Type type);
    public string get_DisplayName();
    public bool get_IsTypeDefinition();
    [CompilerGeneratedAttribute]
public object get_Tag();
    [CompilerGeneratedAttribute]
private void set_Tag(object value);
    public Type get_Type();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Activities.Presentation.View.TypeWrapperConverter : object {
    internal TypeWrapperConverter(TypePresenter typePresenter);
    public sealed virtual object Convert(object value, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.ValidationErrorMessageConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.ValidationStateToErrorConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
internal class System.Activities.Presentation.View.VariableDesigner : ContentControl {
    public static DependencyProperty ContextProperty;
    public static DependencyProperty CurrentVariableScopeProperty;
    public static RoutedEvent VariableCollectionChangedEvent;
    internal VariableDesigner variableDesigner;
    internal DataGrid variableDataGrid;
    public EditingContext Context { get; public set; }
    public ModelItemCollection CurrentVariableScope { get; private set; }
    public List`1<ModelItem> ScopesList { get; }
    private static VariableDesigner();
    public void add_VariableCollectionChanged(RoutedEventHandler value);
    public void remove_VariableCollectionChanged(RoutedEventHandler value);
    public EditingContext get_Context();
    public void set_Context(EditingContext value);
    public ModelItemCollection get_CurrentVariableScope();
    private void set_CurrentVariableScope(ModelItemCollection value);
    public List`1<ModelItem> get_ScopesList();
    public bool CreateNewVariableWrapper();
    internal void ChangeVariableType(DesignTimeVariable oldVariableWrapper, Variable newVariable);
    internal void NotifyVariableScopeChanged(DesignTimeVariable variable);
    internal void CheckCaseInsensitiveDuplicates(VBIdentifierName identifierName, string newName);
    internal void NotifyVariableNameChanged(VBIdentifierName identifierName, string newName, string oldName);
    internal void UpdateTypeDesigner(DesignTimeVariable variable);
    internal void SelectVariable(ModelItem variable);
    internal void NotifyAnnotationTextChanged();
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
[ExtensionAttribute]
internal static class System.Activities.Presentation.View.VariableHelper : object {
    private static VariableHelper();
    [ExtensionAttribute]
internal static ModelItemCollection GetVariableCollection(ModelItem element);
    [ExtensionAttribute]
internal static ModelItem GetVariableScopeElement(ModelItem element);
    [ExtensionAttribute]
internal static List`1<ModelItem> FindDeclaredVariables(ModelItem element, IList`1<ModelItem> scopeList);
    [ExtensionAttribute]
internal static List`1<ModelItem> FindDeclaredVariables(ModelItem element);
    [ExtensionAttribute]
internal static List`1<ModelItem> FindActivityDelegateArgumentsInScope(ModelItem workflowElement);
    [ExtensionAttribute]
internal static List`1<ModelItem> FindActivityDelegateArguments(ModelItem element);
    [ExtensionAttribute]
internal static List`1<ModelItem> FindVariablesInScope(ModelItem element, IList`1<ModelItem> scopeList);
    internal static List`1<ModelItem> FindUniqueVariablesInScope(ModelItem element);
    internal static List`1<ModelItem> FindVariablesInScope(ModelItem element);
    [ExtensionAttribute]
internal static bool ContainsVariable(ModelItemCollection variableContainer, string variableName);
    [ExtensionAttribute]
internal static string CreateUniqueVariableName(ModelItemCollection variableContainer, string namePrefix, int countStartValue);
    internal static ModelItem FindRootVariableScope(ModelItem element);
    internal static ModelItem FindCommonVariableScope(ModelItem scope1, ModelItem scope2);
}
internal class System.Activities.Presentation.View.VBIdentiferDesignerAutomationPeer : UIElementAutomationPeer {
    public VBIdentiferDesignerAutomationPeer(VBIdentifierDesigner owner);
    protected virtual string GetItemStatusCore();
}
internal class System.Activities.Presentation.View.VBIdentifierDesigner : UserControl {
    public static DependencyProperty IdentifierProperty;
    public static DependencyProperty NameStringProperty;
    public static DependencyProperty IsReadOnlyProperty;
    internal VBIdentifierDesigner vbIdentifierDesigner;
    public VBIdentifierName Identifier { get; public set; }
    public string NameString { get; public set; }
    public bool IsReadOnly { get; public set; }
    internal TextBox IdentifierTextBox { get; internal set; }
    private static VBIdentifierDesigner();
    public void add_TextBoxPropertyChanged(PropertyChangedEventHandler value);
    public void remove_TextBoxPropertyChanged(PropertyChangedEventHandler value);
    public VBIdentifierName get_Identifier();
    public void set_Identifier(VBIdentifierName value);
    public string get_NameString();
    public void set_NameString(string value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    internal TextBox get_IdentifierTextBox();
    internal void set_IdentifierTextBox(TextBox value);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.VBIdentifierName : DependencyObject {
    public static DependencyProperty IdentifierNameProperty;
    public static DependencyProperty IsValidProperty;
    public static DependencyProperty ErrorMessageProperty;
    public string ErrorMessage { get; public set; }
    public bool IsValid { get; public set; }
    public string IdentifierName { get; public set; }
    public bool CheckAgainstXaml { get; }
    public VBIdentifierName(bool checkAgainstXaml);
    private static VBIdentifierName();
    public string get_ErrorMessage();
    public void set_ErrorMessage(string value);
    public bool get_IsValid();
    public void set_IsValid(bool value);
    public string get_IdentifierName();
    public void set_IdentifierName(string value);
    public bool get_CheckAgainstXaml();
    internal static bool IsValidXamlName(string name);
}
internal class System.Activities.Presentation.View.VersionEditor : UserControl {
    internal VersionEditor root;
    public static DependencyProperty VersionProperty { get; }
    public Version Version { get; public set; }
    private static VersionEditor();
    public static DependencyProperty get_VersionProperty();
    public Version get_Version();
    public void set_Version(Version value);
    private sealed virtual override void System.Activities.Presentation.View.IVersionEditor.ShowErrorMessage(string message);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.VersionEditorViewModel : ViewModel {
    public string VersionText { get; public set; }
    public Version Version { get; public set; }
    public VersionEditorViewModel(IVersionEditor editor);
    public string get_VersionText();
    public void set_VersionText(string value);
    public Version get_Version();
    public void set_Version(Version value);
}
public class System.Activities.Presentation.View.ViewCreatedEventArgs : EventArgs {
    public WorkflowViewElement View { get; }
    public ViewCreatedEventArgs(WorkflowViewElement view);
    public WorkflowViewElement get_View();
}
public class System.Activities.Presentation.View.ViewStateChangedEventArgs : EventArgs {
    public ModelItem ParentModelItem { get; }
    public string Key { get; }
    public object NewValue { get; }
    public object OldValue { get; }
    public ViewStateChangedEventArgs(ModelItem modelItem, string key, object newValue, object oldValue);
    public ModelItem get_ParentModelItem();
    public string get_Key();
    public object get_NewValue();
    public object get_OldValue();
}
public class System.Activities.Presentation.View.ViewStateChangedEventHandler : MulticastDelegate {
    public ViewStateChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ViewStateChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ViewStateChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Activities.Presentation.View.ViewStateService : object {
    public abstract virtual void add_ViewStateChanged(ViewStateChangedEventHandler value);
    public abstract virtual void remove_ViewStateChanged(ViewStateChangedEventHandler value);
    public abstract virtual void add_UndoableViewStateChanged(ViewStateChangedEventHandler value);
    public abstract virtual void remove_UndoableViewStateChanged(ViewStateChangedEventHandler value);
    public abstract virtual object RetrieveViewState(ModelItem modelItem, string key);
    public abstract virtual void StoreViewState(ModelItem modelItem, string key, object value);
    public abstract virtual void StoreViewStateWithUndo(ModelItem modelItem, string key, object value);
    public abstract virtual Dictionary`2<string, object> RetrieveAllViewState(ModelItem modelItem);
    public abstract virtual bool RemoveViewState(ModelItem modelItem, string key);
}
internal static class System.Activities.Presentation.View.ViewUtilities : object {
    internal static bool DoesParentAlwaysExpandChildren(ModelItem modelItem, EditingContext context);
    internal static bool DoesParentAlwaysCollapseChildren(ModelItem modelItem, EditingContext context);
    internal static bool IsViewVisible(ModelItem child, ModelItem root, EditingContext context);
    internal static ModelItem GetParentModelItemWithView(ModelItem modelItem, EditingContext context, bool allowDrillIn);
    internal static bool IsViewExpanded(ModelItem modelItem, EditingContext context);
    internal static bool IsBreadcrumbRoot(ModelItem modelItem, EditingContext context);
    internal static bool ShouldShowExpanded(bool isRootDesigner, bool parentAlwaysExpandChildren, bool parentAlwaysCollapseChildren, bool expandState, bool expandAll, bool collapseAll, bool pinState);
    internal static bool ShouldShowExpanded(bool isExpanded, bool shouldExpandAll, bool shouldCollapseAll, bool isPinned);
    internal static void MeasureView(WorkflowViewElement view, bool measureAsCollapsed);
    internal static string GetActivityBuilderDisplayName(ModelItem modelItem);
    internal static GeneralTransform GetTransformToRoot(Visual visual);
}
public class System.Activities.Presentation.View.VirtualizedContainerService : object {
    public static AttachableMemberIdentifier HintSizeName;
    public VirtualizedContainerService(EditingContext context);
    private static VirtualizedContainerService();
    public static object GetHintSize(object instance);
    public static void SetHintSize(object instance, object value);
    internal void BeginPopulateAll(Action onAfterPopulateAll);
    internal FrameworkElement QueryContainerForItem(ModelItem item);
    public UIElement GetContainer(ModelItem modelItem, ICompositeView sourceContainer);
    public WorkflowViewElement GetViewElement(ModelItem modelItem, ICompositeView sourceContainer);
    internal static UIElement TryGetVirtualizedElement(UIElement element);
}
internal class System.Activities.Presentation.View.VisualBasicEditor : TextualExpressionEditor {
    internal static string ExpressionLanguageName;
    internal static DependencyProperty TextProperty;
    internal static DependencyProperty ValidationStateProperty;
    internal static DependencyProperty EditingStateProperty;
    internal static DependencyProperty HasValidationErrorProperty;
    internal static DependencyProperty ValidationErrorMessageProperty;
    internal static DependencyProperty ExpressionTextProperty;
    public static ICommand CompleteWordCommand;
    public static ICommand GlobalIntellisenseCommand;
    public static ICommand ParameterInfoCommand;
    public static ICommand QuickInfoCommand;
    public static ICommand IncreaseFilterLevelCommand;
    public static ICommand DecreaseFilterLevelCommand;
    public IExpressionEditorService ExpressionEditorService { get; }
    internal string Text { get; internal set; }
    internal string ExpressionText { get; internal set; }
    internal ValidationState ValidationState { get; internal set; }
    internal bool HasErrors { get; }
    internal string ErrorMessage { get; }
    internal EditingState EditingState { get; internal set; }
    internal bool HasValidationError { get; internal set; }
    internal string ValidationErrorMessage { get; internal set; }
    private static VisualBasicEditor();
    protected virtual void OnContextMenuOpening(ContextMenuEventArgs e);
    protected virtual void OnPropertyChanged(DependencyPropertyChangedEventArgs e);
    protected virtual void OnPreviewMouseRightButtonDown(MouseButtonEventArgs e);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected virtual void OnLostKeyboardFocus(KeyboardFocusChangedEventArgs e);
    internal static bool ShouldGenerateExpression(string oldText, string newText);
    public virtual bool Commit(bool isExplicitCommit);
    protected virtual void OnPreviewMouseLeftButtonDown(MouseButtonEventArgs e);
    public virtual void BeginEdit();
    internal bool HasAggregateFocus();
    public virtual IExpressionEditorService get_ExpressionEditorService();
    internal string get_Text();
    internal void set_Text(string value);
    internal string get_ExpressionText();
    internal void set_ExpressionText(string value);
    internal ValidationState get_ValidationState();
    internal void set_ValidationState(ValidationState value);
    internal bool get_HasErrors();
    internal string get_ErrorMessage();
    internal EditingState get_EditingState();
    internal void set_EditingState(EditingState value);
    internal bool get_HasValidationError();
    internal void set_HasValidationError(bool value);
    internal string get_ValidationErrorMessage();
    internal void set_ValidationErrorMessage(string value);
    internal void GenerateExpression();
    internal static ActivityWithResult CreateExpressionFromString(string expressionText, bool isLocation, Type type);
    internal static ActivityWithResult CreateExpressionFromString(Type type, string expressionText, bool isLocation, ParserContext context);
    public virtual bool CanCommit();
    public virtual void OnCompleteWordCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnGlobalIntellisenseCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnParameterInfoCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnQuickInfoCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnIncreaseFilterLevelCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnDecreaseFilterLevelCommandCanExecute(CanExecuteRoutedEventArgs e);
    public virtual void OnCompleteWordCommandExecute(ExecutedRoutedEventArgs e);
    public virtual void OnGlobalIntellisenseCommandExecute(ExecutedRoutedEventArgs e);
    public virtual void OnParameterInfoCommandExecute(ExecutedRoutedEventArgs e);
    public virtual void OnQuickInfoCommandExecute(ExecutedRoutedEventArgs e);
    public virtual void OnDecreaseFilterLevelCommandExecute(ExecutedRoutedEventArgs e);
    public virtual void OnIncreaseFilterLevelCommandExecute(ExecutedRoutedEventArgs e);
    internal static List`1<ModelItem> GetVariablesInScope(ModelItem ownerActivity);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
    [EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
private sealed virtual override void System.Windows.Markup.IStyleConnector.Connect(int connectionId, object target);
}
internal class System.Activities.Presentation.View.VisualBasicEditorAutomationPeer : UIElementAutomationPeer {
    public VisualBasicEditorAutomationPeer(VisualBasicEditor owner);
    protected virtual string GetItemStatusCore();
}
internal class System.Activities.Presentation.View.VisualBasicReferenceValidationFeature : Feature {
    private static VisualBasicReferenceValidationFeature();
    public virtual void Initialize(EditingContext context, Type modelType);
}
internal class System.Activities.Presentation.View.VisualBasicValueValidationFeature : Feature {
    private static VisualBasicValueValidationFeature();
    public virtual void Initialize(EditingContext context, Type modelType);
}
[ExtensionAttribute]
internal static class System.Activities.Presentation.View.WindowExtensionMethods : object {
    [ExtensionAttribute]
public static void ShowContextHelpButton(Window window);
    [ExtensionAttribute]
public static void HideMinMaxButton(Window window);
    [ExtensionAttribute]
public static void AddWindowsHook(Window window, HwndSourceHook wmHandler);
    [ExtensionAttribute]
public static void RemoveWindowsHook(Window window, HwndSourceHook wmHandler);
    [ExtensionAttribute]
public static void HideIcon(Window window);
}
internal class System.Activities.Presentation.View.WorkflowViewManager : ViewManager {
    public Visual View { get; }
    public virtual Visual get_View();
    public virtual void Initialize(EditingContext context);
    internal static string GetF1HelpTypeKeyword(Type type);
}
public class System.Activities.Presentation.View.WorkflowViewService : ViewService {
    public WorkflowViewService(EditingContext context);
    public void add_ViewCreated(EventHandler`1<ViewCreatedEventArgs> value);
    public void remove_ViewCreated(EventHandler`1<ViewCreatedEventArgs> value);
    public WorkflowViewElement GetViewElement(ModelItem modelItem);
    internal static void ShowErrorInViewElement(WorkflowViewElement errorElement, string windowText, string toolTipText);
    internal static T GetAttribute(Type type);
    internal Type GetDesignerType(Type type);
    internal Type GetDesignerType(Type type, bool throwOnFailure);
    protected WorkflowViewElement CreateViewElement(ModelItem modelItem);
    internal WorkflowViewElement CreateDetachedViewElement(ModelItem modelItem);
    public virtual ModelItem GetModel(DependencyObject view);
    public virtual DependencyObject GetView(ModelItem model);
    internal bool ShouldAppearOnBreadCrumb(ModelItem modelItem, bool checkIfCanBeMadeRoot);
}
public class System.Activities.Presentation.View.WorkflowViewStateService : ViewStateService {
    public static AttachableMemberIdentifier ViewStateName;
    public WorkflowViewStateService(EditingContext context);
    private static WorkflowViewStateService();
    public virtual void add_ViewStateChanged(ViewStateChangedEventHandler value);
    public virtual void remove_ViewStateChanged(ViewStateChangedEventHandler value);
    public virtual void add_UndoableViewStateChanged(ViewStateChangedEventHandler value);
    public virtual void remove_UndoableViewStateChanged(ViewStateChangedEventHandler value);
    public static Dictionary`2<string, object> GetViewState(object instance);
    public static void SetViewState(object instance, Dictionary`2<string, object> value);
    public virtual object RetrieveViewState(ModelItem modelItem, string key);
    public virtual void StoreViewState(ModelItem modelItem, string key, object value);
    public virtual bool RemoveViewState(ModelItem modelItem, string key);
    public virtual Dictionary`2<string, object> RetrieveAllViewState(ModelItem modelItem);
    public virtual void StoreViewStateWithUndo(ModelItem modelItem, string key, object value);
}
internal abstract class System.Activities.Presentation.ViewModel : object {
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    protected void NotifyPropertyChanged(string propertyName);
}
public class System.Activities.Presentation.ViewState.ViewStateData : object {
    public string Id { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
}
[ContentPropertyAttribute("ViewStateData")]
public class System.Activities.Presentation.ViewState.ViewStateManager : object {
    public Collection`1<ViewStateData> ViewStateData { get; }
    public Collection`1<ViewStateData> get_ViewStateData();
}
public static class System.Activities.Presentation.ViewState.WorkflowViewState : object {
    public static AttachableMemberIdentifier ViewStateManagerProperty;
    public static AttachableMemberIdentifier IdRefProperty;
    private static WorkflowViewState();
    public static void SetViewStateManager(object instance, ViewStateManager viewStateManager);
    public static ViewStateManager GetViewStateManager(object instance);
    public static void SetIdRef(object instance, string idRef);
    public static string GetIdRef(object instance);
}
internal abstract class System.Activities.Presentation.ViewStateAttachedPropertyFeature : Feature {
    protected IEnumerable`1<AttachedPropertyInfo> AttachedProperties { get; }
    public sealed virtual void Initialize(EditingContext context, Type modelType);
    protected abstract virtual IEnumerable`1<AttachedPropertyInfo> get_AttachedProperties();
    internal void RegisterAttachedProperty(string propertyName, bool isBrowsable, bool isVisibleToModelItem, T defaultValue);
}
internal class System.Activities.Presentation.VisualBasicExpressionMorphHelper : ExpressionMorphHelper {
    public virtual bool TryInferReturnType(ActivityWithResult expression, EditingContext context, Type& returnType);
    public virtual bool TryMorphExpression(ActivityWithResult expression, bool isLocationExpression, Type newType, EditingContext context, ActivityWithResult& newExpression);
}
internal class System.Activities.Presentation.VisualBasicNamespaceList : NamespaceList {
    internal ISet`1<VisualBasicImportReference> VisualBasicImports { get; private set; }
    public VisualBasicNamespaceList(ISet`1<VisualBasicImportReference> importReferences);
    private static VisualBasicNamespaceList();
    [CompilerGeneratedAttribute]
internal ISet`1<VisualBasicImportReference> get_VisualBasicImports();
    [CompilerGeneratedAttribute]
private void set_VisualBasicImports(ISet`1<VisualBasicImportReference> value);
    protected virtual void UpdateAssemblyInfoCore(string importedNamespace);
    protected virtual void RemoveNamespaceFromSet(string ns);
    protected virtual void AddCore(NamespaceData ns);
    protected virtual void ClearCore();
    protected virtual void InsertCore(int index, NamespaceData ns);
    protected virtual void SetValueAt(int index, NamespaceData ns);
}
public class System.Activities.Presentation.WorkflowDesigner : object {
    internal ValidationService ValidationService { get; }
    internal ObjectReferenceService ObjectReferenceService { get; }
    public UIElement View { get; }
    public UIElement PropertyInspectorView { get; }
    public UIElement OutlineView { get; }
    public EditingContext Context { get; }
    public ContextMenu ContextMenu { get; }
    public string Text { get; public set; }
    unknown string PropertyInspectorFontAndColorData {public set; }
    private FrameworkName Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.FrameworkName { get; }
    private WorkflowDesignerXamlSchemaContext Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.XamlSchemaContext { get; }
    private ViewStateIdManager Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.IdManager { get; }
    private WorkflowSymbol Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.LastWorkflowSymbol { get; private set; }
    private string Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.LocalAssemblyName { get; }
    public IDesignerDebugView DebugManagerView { get; }
    internal ObjectToSourceLocationMapping ObjectToSourceLocationMapping { get; }
    private static WorkflowDesigner();
    public void add_TextChanged(TextChangedEventHandler value);
    public void remove_TextChanged(TextChangedEventHandler value);
    public void add_ModelChanged(EventHandler value);
    public void remove_ModelChanged(EventHandler value);
    internal void add_PreviewLoad(EventHandler`1<PreviewLoadEventArgs> value);
    internal void remove_PreviewLoad(EventHandler`1<PreviewLoadEventArgs> value);
    internal ValidationService get_ValidationService();
    internal ObjectReferenceService get_ObjectReferenceService();
    public UIElement get_View();
    public UIElement get_PropertyInspectorView();
    public UIElement get_OutlineView();
    public EditingContext get_Context();
    public ContextMenu get_ContextMenu();
    public string get_Text();
    public void set_Text(string value);
    public void set_PropertyInspectorFontAndColorData(string value);
    public bool IsInErrorState();
    public void Load();
    public void Load(string fileName);
    public void Load(object instance);
    public void Save(string fileName);
    public void Flush();
    private sealed virtual override FrameworkName Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.get_FrameworkName();
    private sealed virtual override WorkflowDesignerXamlSchemaContext Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.get_XamlSchemaContext();
    private sealed virtual override ViewStateIdManager Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.get_IdManager();
    private sealed virtual override WorkflowSymbol Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.get_LastWorkflowSymbol();
    private sealed virtual override void Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.set_LastWorkflowSymbol(WorkflowSymbol value);
    private sealed virtual override void Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.OnSerializationCompleted(Dictionary`2<object, object> sourceLocationObjectToModelItemObjectMapping);
    private sealed virtual override void Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.OnBeforeDeserialize();
    private sealed virtual override void Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.OnSourceLocationFound(object target, SourceLocation sourceLocationFound);
    private sealed virtual override void Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.OnAfterDeserialize(Dictionary`2<string, SourceLocation> viewStateDataSourceLocationMapping);
    private sealed virtual override string Microsoft.Activities.Presentation.Xaml.IWorkflowDesignerXamlHelperExecutionContext.get_LocalAssemblyName();
    internal object DeserializeString(string text);
    internal object DeserializeString(string text, IList`1& loadErrors, Dictionary`2& sourceLocations);
    internal string SerializeToString(object obj, string fileName);
    public IDesignerDebugView get_DebugManagerView();
    internal ObjectToSourceLocationMapping get_ObjectToSourceLocationMapping();
    internal static FrameworkName GetTargetFramework(EditingContext context);
}
public static class System.Activities.Presentation.WorkflowDesignerColors : object {
    public static string WorkflowViewElementBorderColorKey;
    public static string WorkflowViewElementBackgroundColorKey;
    public static string WorkflowViewElementSelectedBackgroundColorKey;
    public static string WorkflowViewElementSelectedBorderColorKey;
    public static string DesignerViewStatusBarBackgroundColorKey;
    public static string WorkflowViewElementCaptionColorKey;
    public static string DesignerViewBackgroundColorKey;
    public static string DesignerViewShellBarColorGradientBeginKey;
    public static string DesignerViewShellBarColorGradientEndKey;
    public static string DesignerViewShellBarSelectedColorGradientBeginKey;
    public static string DesignerViewShellBarSelectedColorGradientEndKey;
    public static string DesignerViewShellBarHoverColorGradientBeginKey;
    public static string DesignerViewShellBarHoverColorGradientEndKey;
    public static string DesignerViewShellBarControlBackgroundColorKey;
    public static string DesignerViewShellBarCaptionActiveColorKey;
    public static string DesignerViewShellBarCaptionColorKey;
    public static string DesignerViewExpandAllCollapseAllButtonColorKey;
    public static string DesignerViewExpandAllCollapseAllButtonMouseOverColorKey;
    public static string DesignerViewExpandAllCollapseAllPressedColorKey;
    public static string ContextMenuBackgroundGradientBeginColorKey;
    public static string ContextMenuBackgroundGradientEndColorKey;
    public static string ContextMenuBorderColorKey;
    public static string ContextMenuIconAreaColorKey;
    public static string ContextMenuMouseOverBeginColorKey;
    public static string ContextMenuMouseOverMiddle1ColorKey;
    public static string ContextMenuMouseOverMiddle2ColorKey;
    public static string ContextMenuMouseOverEndColorKey;
    public static string ContextMenuMouseOverBorderColorKey;
    public static string ContextMenuItemTextColorKey;
    public static string ContextMenuItemTextHoverColorKey;
    public static string ContextMenuItemTextSelectedColorKey;
    public static string ContextMenuItemTextDisabledColorKey;
    public static string ContextMenuSeparatorColorKey;
    public static string FlowchartExpressionButtonColorKey;
    public static string FlowchartExpressionButtonMouseOverColorKey;
    public static string FlowchartExpressionButtonPressedColorKey;
    public static string AnnotationBackgroundGradientBeginColorKey;
    public static string AnnotationBackgroundGradientMiddleColorKey;
    public static string AnnotationBackgroundGradientEndColorKey;
    public static string AnnotationBorderColorKey;
    public static string AnnotationDockTextColorKey;
    public static string AnnotationUndockTextColorKey;
    public static string AnnotationDockButtonColorKey;
    public static string AnnotationDockButtonHoverColorKey;
    public static string AnnotationDockButtonHoverBorderColorKey;
    public static string AnnotationDockButtonHoverBackgroundColorKey;
    public static string OutlineViewItemHighlightBackgroundColorKey;
    public static string OutlineViewCollapsedArrowBorderColorKey;
    public static string OutlineViewCollapsedArrowHoverBorderColorKey;
    public static string OutlineViewExpandedArrowColorKey;
    public static string OutlineViewExpandedArrowBorderColorKey;
    public static string OutlineViewBackgroundColorKey;
    public static string OutlineViewItemSelectedTextColorKey;
    public static string OutlineViewItemTextColorKey;
    public static string RubberBandRectangleColorKey;
    public static string FontSizeKey;
    public static string FontFamilyKey;
    public static string FontWeightKey;
    public static string PropertyInspectorTextBrushKey { get; }
    public static string PropertyInspectorSelectedForegroundBrushKey { get; }
    public static string PropertyInspectorSelectedBackgroundBrushKey { get; }
    public static string PropertyInspectorBackgroundBrushKey { get; }
    public static string PropertyInspectorBorderBrushKey { get; }
    public static string PropertyInspectorCategoryCaptionTextBrushKey { get; }
    public static string PropertyInspectorPaneBrushKey { get; }
    public static string PropertyInspectorPopupBrushKey { get; }
    public static string PropertyInspectorToolBarItemHoverBackgroundBrushKey { get; }
    public static string PropertyInspectorToolBarItemHoverBorderBrushKey { get; }
    public static string PropertyInspectorToolBarItemSelectedBackgroundBrushKey { get; }
    public static string PropertyInspectorToolBarItemSelectedBorderBrushKey { get; }
    public static string PropertyInspectorToolBarBackgroundBrushKey { get; }
    public static string PropertyInspectorToolBarSeparatorBrushKey { get; }
    public static string PropertyInspectorToolBarTextBoxBorderBrushKey { get; }
    internal static ResourceDictionary FontAndColorResources { get; }
    public static Color WorkflowViewElementBorderColor { get; }
    public static Color WorkflowViewElementBackgroundColor { get; }
    public static Color WorkflowViewElementSelectedBackgroundColor { get; }
    public static Color GridViewRowHoverColor { get; }
    public static Color WorkflowViewElementSelectedBorderColor { get; }
    public static Color DesignerViewStatusBarBackgroundColor { get; }
    public static Color WorkflowViewElementCaptionColor { get; }
    public static Color DesignerViewBackgroundColor { get; }
    public static Color DesignerViewShellBarColorGradientBeginColor { get; }
    public static Color DesignerViewShellBarColorGradientEndColor { get; }
    public static Color DesignerViewShellBarSelectedColorGradientBeginColor { get; }
    public static Color DesignerViewShellBarSelectedColorGradientEndColor { get; }
    public static Color DesignerViewShellBarHoverColorGradientBeginColor { get; }
    public static Color DesignerViewShellBarHoverColorGradientEndColor { get; }
    public static Color DesignerViewShellBarControlBackgroundColor { get; }
    public static Color DesignerViewShellBarCaptionActiveColor { get; }
    public static Color DesignerViewShellBarCaptionColor { get; }
    public static Brush DesignerViewExpandAllCollapseAllButtonBrush { get; }
    public static Brush DesignerViewExpandAllCollapseAllButtonMouseOverBrush { get; }
    public static Brush DesignerViewExpandAllCollapseAllPressedBrush { get; }
    public static Color ContextMenuBackgroundGradientBeginColor { get; }
    public static Color ContextMenuBackgroundGradientEndColor { get; }
    public static Color ContextMenuBorderColor { get; }
    public static Color ContextMenuIconAreaColor { get; }
    public static Color ContextMenuMouseOverBeginColor { get; }
    public static Color ContextMenuMouseOverMiddle1Color { get; }
    public static Color ContextMenuMouseOverMiddle2Color { get; }
    public static Color ContextMenuMouseOverEndColor { get; }
    public static Color ContextMenuMouseOverBorderColor { get; }
    public static Color ContextMenuItemTextColor { get; }
    public static Color ContextMenuItemTextHoverColor { get; }
    public static Color ContextMenuItemTextSelectedColor { get; }
    public static Color ContextMenuItemTextDisabledColor { get; }
    public static Color ContextMenuSeparatorColor { get; }
    public static Brush FlowchartExpressionButtonBrush { get; }
    public static Brush FlowchartExpressionButtonMouseOverBrush { get; }
    public static Brush FlowchartExpressionButtonPressedBrush { get; }
    public static Color AnnotationBackgroundGradientBeginColor { get; }
    public static Color AnnotationBackgroundGradientMiddleColor { get; }
    public static Color AnnotationBackgroundGradientEndColor { get; }
    public static Color AnnotationBorderColor { get; }
    public static Color AnnotationDockTextColor { get; }
    public static Color AnnotationUndockTextColor { get; }
    public static Color AnnotationDockButtonColor { get; }
    public static Color AnnotationDockButtonHoverColor { get; }
    public static Color AnnotationDockButtonHoverBorderColor { get; }
    public static Color AnnotationDockButtonHoverBackgroundColor { get; }
    public static Color OutlineViewItemHighlightBackgroundColor { get; }
    public static Color OutlineViewCollapsedArrowBorderColor { get; }
    public static Color OutlineViewCollapsedArrowHoverBorderColor { get; }
    public static Color OutlineViewExpandedArrowColor { get; }
    public static Color OutlineViewExpandedArrowBorderColor { get; }
    public static Color OutlineViewBackgroundColor { get; }
    public static Color OutlineViewItemSelectedTextColor { get; }
    public static Color OutlineViewItemTextColor { get; }
    public static FontFamily FontFamily { get; }
    public static double FontSize { get; }
    public static FontWeight FontWeight { get; }
    internal static Brush RubberBandRectangleBrush { get; }
    private static WorkflowDesignerColors();
    public static string get_PropertyInspectorTextBrushKey();
    public static string get_PropertyInspectorSelectedForegroundBrushKey();
    public static string get_PropertyInspectorSelectedBackgroundBrushKey();
    public static string get_PropertyInspectorBackgroundBrushKey();
    public static string get_PropertyInspectorBorderBrushKey();
    public static string get_PropertyInspectorCategoryCaptionTextBrushKey();
    public static string get_PropertyInspectorPaneBrushKey();
    public static string get_PropertyInspectorPopupBrushKey();
    public static string get_PropertyInspectorToolBarItemHoverBackgroundBrushKey();
    public static string get_PropertyInspectorToolBarItemHoverBorderBrushKey();
    public static string get_PropertyInspectorToolBarItemSelectedBackgroundBrushKey();
    public static string get_PropertyInspectorToolBarItemSelectedBorderBrushKey();
    public static string get_PropertyInspectorToolBarBackgroundBrushKey();
    public static string get_PropertyInspectorToolBarSeparatorBrushKey();
    public static string get_PropertyInspectorToolBarTextBoxBorderBrushKey();
    internal static ResourceDictionary get_FontAndColorResources();
    public static Color get_WorkflowViewElementBorderColor();
    public static Color get_WorkflowViewElementBackgroundColor();
    public static Color get_WorkflowViewElementSelectedBackgroundColor();
    public static Color get_GridViewRowHoverColor();
    public static Color get_WorkflowViewElementSelectedBorderColor();
    public static Color get_DesignerViewStatusBarBackgroundColor();
    public static Color get_WorkflowViewElementCaptionColor();
    public static Color get_DesignerViewBackgroundColor();
    public static Color get_DesignerViewShellBarColorGradientBeginColor();
    public static Color get_DesignerViewShellBarColorGradientEndColor();
    public static Color get_DesignerViewShellBarSelectedColorGradientBeginColor();
    public static Color get_DesignerViewShellBarSelectedColorGradientEndColor();
    public static Color get_DesignerViewShellBarHoverColorGradientBeginColor();
    public static Color get_DesignerViewShellBarHoverColorGradientEndColor();
    public static Color get_DesignerViewShellBarControlBackgroundColor();
    public static Color get_DesignerViewShellBarCaptionActiveColor();
    public static Color get_DesignerViewShellBarCaptionColor();
    public static Brush get_DesignerViewExpandAllCollapseAllButtonBrush();
    public static Brush get_DesignerViewExpandAllCollapseAllButtonMouseOverBrush();
    public static Brush get_DesignerViewExpandAllCollapseAllPressedBrush();
    public static Color get_ContextMenuBackgroundGradientBeginColor();
    public static Color get_ContextMenuBackgroundGradientEndColor();
    public static Color get_ContextMenuBorderColor();
    public static Color get_ContextMenuIconAreaColor();
    public static Color get_ContextMenuMouseOverBeginColor();
    public static Color get_ContextMenuMouseOverMiddle1Color();
    public static Color get_ContextMenuMouseOverMiddle2Color();
    public static Color get_ContextMenuMouseOverEndColor();
    public static Color get_ContextMenuMouseOverBorderColor();
    public static Color get_ContextMenuItemTextColor();
    public static Color get_ContextMenuItemTextHoverColor();
    public static Color get_ContextMenuItemTextSelectedColor();
    public static Color get_ContextMenuItemTextDisabledColor();
    public static Color get_ContextMenuSeparatorColor();
    public static Brush get_FlowchartExpressionButtonBrush();
    public static Brush get_FlowchartExpressionButtonMouseOverBrush();
    public static Brush get_FlowchartExpressionButtonPressedBrush();
    public static Color get_AnnotationBackgroundGradientBeginColor();
    public static Color get_AnnotationBackgroundGradientMiddleColor();
    public static Color get_AnnotationBackgroundGradientEndColor();
    public static Color get_AnnotationBorderColor();
    public static Color get_AnnotationDockTextColor();
    public static Color get_AnnotationUndockTextColor();
    public static Color get_AnnotationDockButtonColor();
    public static Color get_AnnotationDockButtonHoverColor();
    public static Color get_AnnotationDockButtonHoverBorderColor();
    public static Color get_AnnotationDockButtonHoverBackgroundColor();
    public static Color get_OutlineViewItemHighlightBackgroundColor();
    public static Color get_OutlineViewCollapsedArrowBorderColor();
    public static Color get_OutlineViewCollapsedArrowHoverBorderColor();
    public static Color get_OutlineViewExpandedArrowColor();
    public static Color get_OutlineViewExpandedArrowBorderColor();
    public static Color get_OutlineViewBackgroundColor();
    public static Color get_OutlineViewItemSelectedTextColor();
    public static Color get_OutlineViewItemTextColor();
    public static FontFamily get_FontFamily();
    public static double get_FontSize();
    public static FontWeight get_FontWeight();
    internal static Brush get_RubberBandRectangleBrush();
}
internal enum System.Activities.Presentation.WorkflowDesignerHostId : Enum {
    public int value__;
    public static WorkflowDesignerHostId Rehost;
    public static WorkflowDesignerHostId Dev10;
    public static WorkflowDesignerHostId Dev11;
}
public static class System.Activities.Presentation.WorkflowDesignerIcons : object {
    internal static ResourceDictionary IconResourceDictionary { get; }
    internal static bool IsDefaultCutomActivitySetByUser { get; internal set; }
    private static WorkflowDesignerIcons();
    internal static ResourceDictionary get_IconResourceDictionary();
    [CompilerGeneratedAttribute]
internal static bool get_IsDefaultCutomActivitySetByUser();
    [CompilerGeneratedAttribute]
internal static void set_IsDefaultCutomActivitySetByUser(bool value);
    public static void UseWindowsStoreAppStyleIcons();
}
public class System.Activities.Presentation.WorkflowElementDialog : ContentControl {
    public static DependencyProperty ModelItemProperty;
    public static DependencyProperty TitleProperty;
    public static DependencyProperty ContextProperty;
    public static DependencyProperty WindowResizeModeProperty;
    public static DependencyProperty WindowSizeToContentProperty;
    public ModelItem ModelItem { get; public set; }
    public string Title { get; public set; }
    public EditingContext Context { get; public set; }
    public DependencyObject Owner { get; public set; }
    public ResizeMode WindowResizeMode { get; public set; }
    public SizeToContent WindowSizeToContent { get; public set; }
    public bool EnableMinimizeButton { get; public set; }
    public bool EnableMaximizeButton { get; public set; }
    public string HelpKeyword { get; public set; }
    internal Func`1<bool> OnOk { get; internal set; }
    internal WorkflowElementDialogWindow Window { get; internal set; }
    private static WorkflowElementDialog();
    public ModelItem get_ModelItem();
    public void set_ModelItem(ModelItem value);
    public string get_Title();
    public void set_Title(string value);
    public EditingContext get_Context();
    public void set_Context(EditingContext value);
    [CompilerGeneratedAttribute]
public DependencyObject get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(DependencyObject value);
    public ResizeMode get_WindowResizeMode();
    public void set_WindowResizeMode(ResizeMode value);
    public SizeToContent get_WindowSizeToContent();
    public void set_WindowSizeToContent(SizeToContent value);
    [CompilerGeneratedAttribute]
public bool get_EnableMinimizeButton();
    [CompilerGeneratedAttribute]
public void set_EnableMinimizeButton(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnableMaximizeButton();
    [CompilerGeneratedAttribute]
public void set_EnableMaximizeButton(bool value);
    [CompilerGeneratedAttribute]
public string get_HelpKeyword();
    [CompilerGeneratedAttribute]
public void set_HelpKeyword(string value);
    [CompilerGeneratedAttribute]
internal Func`1<bool> get_OnOk();
    [CompilerGeneratedAttribute]
internal void set_OnOk(Func`1<bool> value);
    public void Show();
    public bool ShowOkCancel();
    internal void CloseDialog(bool commitChanges);
    [CompilerGeneratedAttribute]
internal WorkflowElementDialogWindow get_Window();
    [CompilerGeneratedAttribute]
internal void set_Window(WorkflowElementDialogWindow value);
    protected virtual void OnInitialized(EventArgs e);
    protected void EnableOk(bool enabled);
    protected virtual void OnModelItemChanged(object newItem);
    protected virtual void OnWorkflowElementDialogClosed(Nullable`1<bool> dialogResult);
}
internal class System.Activities.Presentation.WorkflowElementDialogWindow : DialogWindow {
    internal DockPanel buttonDockPanel;
    internal StackPanel buttonPanel;
    internal Button okButton;
    internal Button cancelButton;
    internal Border payloadHolder;
    public WorkflowElementDialogWindow(WorkflowElementDialog payload, bool okCancel, bool enableMinButton, bool enableMaxButton, Func`1<bool> onOk);
    protected virtual void OnInitialized(EventArgs e);
    [GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
public sealed virtual void InitializeComponent();
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
internal Delegate _CreateDelegate(Type delegateType, string handler);
    [DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
[EditorBrowsableAttribute("1")]
private sealed virtual override void System.Windows.Markup.IComponentConnector.Connect(int connectionId, object target);
}
public class System.Activities.Presentation.WorkflowFileItem : ContextItem {
    public string LoadedFile { get; public set; }
    public Type ItemType { get; }
    [CompilerGeneratedAttribute]
public void set_LoadedFile(string value);
    [CompilerGeneratedAttribute]
public string get_LoadedFile();
    public sealed virtual Type get_ItemType();
}
public class System.Activities.Presentation.WorkflowItemPresenter : ContentControl {
    public static DependencyProperty HintTextProperty;
    public static DependencyProperty ItemProperty;
    public static DependencyProperty AllowedItemTypeProperty;
    public static DependencyProperty IsDefaultContainerProperty;
    public static DependencyProperty DroppingTypeResolvingOptionsProperty;
    internal bool AutoWrapInSequenceEnabled { get; }
    public string HintText { get; public set; }
    public ModelItem Item { get; public set; }
    public Type AllowedItemType { get; public set; }
    public TypeResolvingOptions DroppingTypeResolvingOptions { get; public set; }
    public bool IsDefaultContainer { get; public set; }
    private static WorkflowItemPresenter();
    internal bool get_AutoWrapInSequenceEnabled();
    protected virtual void OnInitialized(EventArgs e);
    public string get_HintText();
    public void set_HintText(string value);
    public ModelItem get_Item();
    public void set_Item(ModelItem value);
    public Type get_AllowedItemType();
    public void set_AllowedItemType(Type value);
    public sealed virtual TypeResolvingOptions get_DroppingTypeResolvingOptions();
    public void set_DroppingTypeResolvingOptions(TypeResolvingOptions value);
    public sealed virtual bool get_IsDefaultContainer();
    public void set_IsDefaultContainer(bool value);
    protected virtual void OnRender(DrawingContext drawingContext);
    protected virtual void OnDrop(DragEventArgs e);
    protected virtual void OnDragEnter(DragEventArgs e);
    protected virtual void OnDragOver(DragEventArgs e);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    private sealed virtual override void System.Activities.Presentation.ICompositeView.OnItemMoved(ModelItem modelItem);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    private sealed virtual override object System.Activities.Presentation.ICompositeView.OnItemsCut(List`1<ModelItem> itemsToCut);
    private sealed virtual override object System.Activities.Presentation.ICompositeView.OnItemsCopied(List`1<ModelItem> itemsToCopy);
    private sealed virtual override void System.Activities.Presentation.ICompositeView.OnItemsPasted(List`1<object> itemsToPaste, List`1<object> metaData, Point pastePoint, WorkflowViewElement pastePointReference);
    private sealed virtual override void System.Activities.Presentation.ICompositeView.OnItemsDelete(List`1<ModelItem> itemsToDelete);
    private sealed virtual override bool System.Activities.Presentation.ICompositeView.CanPasteItems(List`1<object> itemsToPaste);
    internal void ShowSpacerHelperOnDraggedItems(DragEventArgs arg);
}
public class System.Activities.Presentation.WorkflowItemsPresenter : ContentControl {
    public static DependencyProperty HintTextProperty;
    public static DependencyProperty ItemsProperty;
    public static DependencyProperty SpacerTemplateProperty;
    public static DependencyProperty HeaderTemplateProperty;
    public static DependencyProperty FooterTemplateProperty;
    public static DependencyProperty ItemsPanelProperty;
    public static DependencyProperty IndexProperty;
    public static DependencyProperty AllowedItemTypeProperty;
    public static DependencyProperty IsDefaultContainerProperty;
    public static DependencyProperty DroppingTypeResolvingOptionsProperty;
    public Type AllowedItemType { get; public set; }
    public string HintText { get; public set; }
    public DataTemplate SpacerTemplate { get; public set; }
    public DataTemplate HeaderTemplate { get; public set; }
    public DataTemplate FooterTemplate { get; public set; }
    public ItemsPanelTemplate ItemsPanel { get; public set; }
    public ModelItemCollection Items { get; public set; }
    public bool IsDefaultContainer { get; public set; }
    public TypeResolvingOptions DroppingTypeResolvingOptions { get; public set; }
    private static WorkflowItemsPresenter();
    public Type get_AllowedItemType();
    public void set_AllowedItemType(Type value);
    public string get_HintText();
    public void set_HintText(string value);
    public DataTemplate get_SpacerTemplate();
    public void set_SpacerTemplate(DataTemplate value);
    public DataTemplate get_HeaderTemplate();
    public void set_HeaderTemplate(DataTemplate value);
    public DataTemplate get_FooterTemplate();
    public void set_FooterTemplate(DataTemplate value);
    public ItemsPanelTemplate get_ItemsPanel();
    public void set_ItemsPanel(ItemsPanelTemplate value);
    public ModelItemCollection get_Items();
    public void set_Items(ModelItemCollection value);
    public sealed virtual bool get_IsDefaultContainer();
    public void set_IsDefaultContainer(bool value);
    public sealed virtual TypeResolvingOptions get_DroppingTypeResolvingOptions();
    public void set_DroppingTypeResolvingOptions(TypeResolvingOptions value);
    protected virtual void OnInitialized(EventArgs e);
    public sealed virtual List`1<ModelItem> SortSelectedItems(List`1<ModelItem> selectedItems);
    public sealed virtual void OnItemsMoved(List`1<ModelItem> movedItems);
    protected virtual void OnDrop(DragEventArgs e);
    protected virtual void OnDragEnter(DragEventArgs e);
    protected virtual void OnDragOver(DragEventArgs e);
    public sealed virtual void OnItemMoved(ModelItem modelItem);
    protected virtual AutomationPeer OnCreateAutomationPeer();
    public sealed virtual object OnItemsCut(List`1<ModelItem> itemsToCut);
    public sealed virtual object OnItemsCopied(List`1<ModelItem> itemsToCopy);
    public sealed virtual void OnItemsPasted(List`1<object> itemsToPaste, List`1<object> metaData, Point pastePoint, WorkflowViewElement pastePointReference);
    public sealed virtual void OnItemsDelete(List`1<ModelItem> itemsToDelete);
    public sealed virtual bool CanPasteItems(List`1<object> itemsToPaste);
}
public class System.Activities.Presentation.WorkflowViewElement : ContentControl {
    internal static string PinnedViewStateKey;
    public static DependencyProperty ModelItemProperty;
    public static DependencyProperty ContextProperty;
    public static DependencyProperty ExpandStateProperty;
    public static DependencyProperty PinStateProperty;
    public static DependencyProperty ShowExpandedProperty;
    internal static DependencyProperty IsRootDesignerProperty;
    internal string CustomItemStatus { get; internal set; }
    public EditingContext Context { get; public set; }
    public bool ExpandState { get; public set; }
    public bool PinState { get; public set; }
    public bool Collapsible { get; public set; }
    public bool IsRootDesigner { get; internal set; }
    internal bool IsAncestorOfRootDesigner { get; internal set; }
    public bool ShowExpanded { get; }
    public ModelItem ModelItem { get; public set; }
    public FrameworkElement DragHandle { get; public set; }
    protected bool IsReadOnly { get; private set; }
    internal ICompositeView ActiveCompositeView { get; }
    protected internal ViewService ViewService { get; }
    protected internal ViewStateService ViewStateService { get; }
    protected internal DesignerView Designer { get; }
    protected IList`1<ICompositeView> CompositeViews { get; }
    protected ICompositeView DefaultCompositeView { get; }
    internal bool DraggingMultipleItemsEnabled { get; }
    private static WorkflowViewElement();
    [CompilerGeneratedAttribute]
internal string get_CustomItemStatus();
    [CompilerGeneratedAttribute]
internal void set_CustomItemStatus(string value);
    protected virtual void OnShowExpandedChanged(bool newValue);
    protected virtual void OnReadOnlyChanged(bool isReadOnly);
    internal void ForceCollapse();
    protected virtual void OnInitialized(EventArgs e);
    public EditingContext get_Context();
    public void set_Context(EditingContext value);
    public bool get_ExpandState();
    public void set_ExpandState(bool value);
    public bool get_PinState();
    public void set_PinState(bool value);
    [CompilerGeneratedAttribute]
public bool get_Collapsible();
    [CompilerGeneratedAttribute]
public void set_Collapsible(bool value);
    public bool get_IsRootDesigner();
    internal void set_IsRootDesigner(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAncestorOfRootDesigner();
    [CompilerGeneratedAttribute]
internal void set_IsAncestorOfRootDesigner(bool value);
    public bool get_ShowExpanded();
    internal bool DoesParentAlwaysExpandChild();
    internal bool DoesParentAlwaysCollapseChildren();
    public ModelItem get_ModelItem();
    public void set_ModelItem(ModelItem value);
    [CompilerGeneratedAttribute]
public FrameworkElement get_DragHandle();
    [CompilerGeneratedAttribute]
public void set_DragHandle(FrameworkElement value);
    protected bool get_IsReadOnly();
    private void set_IsReadOnly(bool value);
    internal ICompositeView get_ActiveCompositeView();
    protected internal ViewService get_ViewService();
    protected internal ViewStateService get_ViewStateService();
    protected internal DesignerView get_Designer();
    protected IList`1<ICompositeView> get_CompositeViews();
    protected ICompositeView get_DefaultCompositeView();
    internal bool get_DraggingMultipleItemsEnabled();
    protected virtual string GetAutomationIdMemberName();
    protected virtual string GetAutomationHelpText();
    protected internal virtual string GetAutomationItemStatus();
    protected virtual AutomationPeer OnCreateAutomationPeer();
    protected internal virtual void OnEditAnnotation();
    public sealed virtual void RegisterDefaultCompositeView(ICompositeView container);
    public sealed virtual void UnregisterDefaultCompositeView(ICompositeView container);
    public sealed virtual void RegisterCompositeView(ICompositeView container);
    public sealed virtual void UnregisterCompositeView(ICompositeView container);
    protected virtual void OnModelItemChanged(object newItem);
    protected virtual void OnContextMenuLoaded(ContextMenu menu);
    protected virtual void OnMouseDown(MouseButtonEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseButtonEventArgs e);
    protected virtual void OnDragEnter(DragEventArgs e);
    protected virtual void OnDragOver(DragEventArgs e);
    protected virtual void OnPreviewDragEnter(DragEventArgs e);
    protected virtual void OnPreviewDragLeave(DragEventArgs e);
    protected virtual void OnPreviewMouseUp(MouseButtonEventArgs e);
    internal void NotifyContextMenuLoaded(ContextMenu menu);
}
internal static class System.Activities.Presentation.Xaml.ActivityBuilderHelper : object {
    internal static bool IsActivityBuilderType(ModelItem modelItem);
    internal static List`1<Variable> GetVariables(object input);
    internal static Variable GetVariableFromProperty(DynamicActivityProperty property);
}
internal class System.Activities.Presentation.Xaml.ErrorTolerantObjectWriter : XamlWriter {
    public string LocalAssemblyName { get; public set; }
    public IList`1<XamlLoadErrorInfo> LoadErrors { get; private set; }
    public object Result { get; private set; }
    public XamlSchemaContext SchemaContext { get; }
    public bool ShouldProvideLineInfo { get; }
    public ErrorTolerantObjectWriter(XamlSchemaContext schemaContext);
    [CompilerGeneratedAttribute]
public string get_LocalAssemblyName();
    [CompilerGeneratedAttribute]
public void set_LocalAssemblyName(string value);
    [CompilerGeneratedAttribute]
public IList`1<XamlLoadErrorInfo> get_LoadErrors();
    [CompilerGeneratedAttribute]
private void set_LoadErrors(IList`1<XamlLoadErrorInfo> value);
    [CompilerGeneratedAttribute]
public object get_Result();
    [CompilerGeneratedAttribute]
private void set_Result(object value);
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public virtual void WriteStartObject(XamlType type);
    public virtual void WriteGetObject();
    public virtual void WriteEndObject();
    public virtual void WriteStartMember(XamlMember member);
    public virtual void WriteEndMember();
    public virtual void WriteValue(object value);
    public sealed virtual void SetLineInfo(int lineNumber, int linePosition);
    public sealed virtual bool get_ShouldProvideLineInfo();
    internal static bool IsErrorActivity(Type objectType);
    internal static void TransformAndStripErrors(XamlReader objectReader, XamlWriter writer);
    internal static string GetXamlMemberName(XamlMember member);
    internal static string GetXamlTypeName(XamlType type);
}
internal class System.Activities.Presentation.Xaml.ObjectToSourceLocationMapping : object {
    internal Dictionary`2<object, object> SourceLocationObjectToModelItemObjectMapping { get; internal set; }
    internal Dictionary`2<string, SourceLocation> ViewStateDataSourceLocationMapping { get; internal set; }
    internal ObjectToSourceLocationMapping(ModelSearchServiceImpl modelSearchService);
    internal void Clear();
    [CompilerGeneratedAttribute]
internal Dictionary`2<object, object> get_SourceLocationObjectToModelItemObjectMapping();
    [CompilerGeneratedAttribute]
internal void set_SourceLocationObjectToModelItemObjectMapping(Dictionary`2<object, object> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, SourceLocation> get_ViewStateDataSourceLocationMapping();
    [CompilerGeneratedAttribute]
internal void set_ViewStateDataSourceLocationMapping(Dictionary`2<string, SourceLocation> value);
    internal void UpdateMap(object key, SourceLocation sourceLocation);
    internal ModelItem FindModelItem(SourceLocation srcLocation);
    internal ModelItem FindModelItemOfViewState(SourceLocation srcLocation);
    internal SourceLocation FindSourceLocation(ModelItem modelItem);
    internal IEnumerable`1<ModelItem> GetObjectsWithSourceLocation();
}
internal class System.Activities.Presentation.Xaml.ShimAsPublicXamlType : XamlType {
    public ShimAsPublicXamlType(Type type, XamlSchemaContext schemaContext);
    protected virtual bool LookupIsPublic();
}
[ExtensionAttribute]
internal static class System.Activities.Presentation.Xaml.SourceLocationExtensions : object {
    [ExtensionAttribute]
internal static bool Contains(SourceLocation outer, SourceLocation inner);
}
public class System.Activities.Presentation.XamlLoadErrorInfo : object {
    public int LineNumber { get; private set; }
    public int LinePosition { get; private set; }
    public string Message { get; private set; }
    public string FileName { get; public set; }
    public XamlLoadErrorInfo(string message, int lineNumber, int linePosition);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
private void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
private void set_LinePosition(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
private void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
}
internal class System.Activities.Presentation.XNameConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[DebuggerNonUserCodeAttribute]
[EditorBrowsableAttribute("1")]
[GeneratedCodeAttribute("PresentationBuildTasks", "4.0.0.0")]
public class XamlGeneratedNamespace.GeneratedInternalTypeHelper : InternalTypeHelper {
    protected virtual object CreateInstance(Type type, CultureInfo culture);
    protected virtual object GetPropertyValue(PropertyInfo propertyInfo, object target, CultureInfo culture);
    protected virtual void SetPropertyValue(PropertyInfo propertyInfo, object target, object value, CultureInfo culture);
    protected virtual Delegate CreateDelegate(Type delegateType, object target, string handler);
    protected virtual void AddEventHandler(EventInfo eventInfo, object target, Delegate handler);
}
