[BuildProviderAppliesToAttribute("2")]
public class System.Data.Entity.Design.AspNet.EntityDesignerBuildProvider : BuildProvider {
    public virtual BuildProviderResultFlags GetResultFlags(CompilerResults results);
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
}
[BuildProviderAppliesToAttribute("2")]
public class System.Data.Entity.Design.AspNet.EntityModelBuildProvider : BuildProvider {
    public virtual BuildProviderResultFlags GetResultFlags(CompilerResults results);
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
}
[BuildProviderAppliesToAttribute("2")]
public class System.Data.Entity.Design.AspNet.MappingModelBuildProvider : BuildProvider {
    public virtual BuildProviderResultFlags GetResultFlags(CompilerResults results);
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
}
[BuildProviderAppliesToAttribute("2")]
public class System.Data.Entity.Design.AspNet.StorageModelBuildProvider : BuildProvider {
    public virtual BuildProviderResultFlags GetResultFlags(CompilerResults results);
    public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Entity.Design.EdmToObjectNamespaceMap : object {
    public ICollection`1<string> EdmNamespaces { get; }
    public string Item { get; public set; }
    public int Count { get; }
    public void Add(string edmNamespace, string objectNamespace);
    public bool Contains(string edmNamespace);
    public ICollection`1<string> get_EdmNamespaces();
    public bool Remove(string edmNamespace);
    public bool TryGetObjectNamespace(string edmNamespace, String& objectNamespace);
    public string get_Item(string edmNamespace);
    public void set_Item(string edmNamespace, string value);
    public void Clear();
    public int get_Count();
}
public class System.Data.Entity.Design.EntityClassGenerator : object {
    public LanguageOption LanguageOption { get; public set; }
    public EdmToObjectNamespaceMap EdmToObjectNamespaceMap { get; }
    public EntityClassGenerator(LanguageOption languageOption);
    public void add_OnTypeGenerated(TypeGeneratedEventHandler value);
    public void remove_OnTypeGenerated(TypeGeneratedEventHandler value);
    public void add_OnPropertyGenerated(PropertyGeneratedEventHandler value);
    public void remove_OnPropertyGenerated(PropertyGeneratedEventHandler value);
    public LanguageOption get_LanguageOption();
    public void set_LanguageOption(LanguageOption value);
    public EdmToObjectNamespaceMap get_EdmToObjectNamespaceMap();
    public IList`1<EdmSchemaError> GenerateCode(XmlReader sourceEdmSchema, TextWriter target);
    public IList`1<EdmSchemaError> GenerateCode(XmlReader sourceEdmSchema, TextWriter target, IEnumerable`1<XmlReader> additionalEdmSchemas);
    public IList`1<EdmSchemaError> GenerateCode(string sourceEdmSchemaFilePath, string targetFilePath);
    public IList`1<EdmSchemaError> GenerateCode(string sourceEdmSchemaFilePath, string targetPath, IEnumerable`1<string> additionalEdmSchemaFilePaths);
}
public class System.Data.Entity.Design.EntityCodeGenerator : object {
    public LanguageOption LanguageOption { get; public set; }
    public EdmToObjectNamespaceMap EdmToObjectNamespaceMap { get; }
    public EntityCodeGenerator(LanguageOption languageOption);
    private static EntityCodeGenerator();
    public LanguageOption get_LanguageOption();
    public void set_LanguageOption(LanguageOption value);
    public EdmToObjectNamespaceMap get_EdmToObjectNamespaceMap();
    public IList`1<EdmSchemaError> GenerateCode(string sourceEdmSchemaFilePath, string targetPath, IEnumerable`1<string> additionalEdmSchemaFilePaths, Version targetEntityFrameworkVersion);
    public IList`1<EdmSchemaError> GenerateCode(string sourceEdmSchemaFilePath, string targetPath, IEnumerable`1<string> additionalEdmSchemaFilePaths);
    public IList`1<EdmSchemaError> GenerateCode(string sourceEdmSchemaFilePath, string targetPath, Version targetEntityFrameworkVersion);
    public IList`1<EdmSchemaError> GenerateCode(string sourceEdmSchemaFilePath, string targetPath);
    public IList`1<EdmSchemaError> GenerateCode(XmlReader sourceEdmSchema, TextWriter target, Version targetEntityFrameworkVersion);
    public IList`1<EdmSchemaError> GenerateCode(XmlReader sourceEdmSchema, TextWriter target);
    public IList`1<EdmSchemaError> GenerateCode(XmlReader sourceEdmSchema, TextWriter target, IEnumerable`1<XmlReader> additionalEdmSchemas, Version targetEntityFrameworkVersion);
    public IList`1<EdmSchemaError> GenerateCode(XmlReader sourceEdmSchema, TextWriter target, IEnumerable`1<XmlReader> additionalEdmSchemas);
}
public static class System.Data.Entity.Design.EntityFrameworkVersions : object {
    public static Version Version1;
    public static Version Version2;
    public static Version Version3;
    private static EntityFrameworkVersions();
    public static Stream GetSchemaXsd(Version entityFrameworkVersion, DataSpace dataSpace);
}
public class System.Data.Entity.Design.EntityModelSchemaGenerator : object {
    public EntityContainer EntityContainer { get; }
    [CLSCompliantAttribute("False")]
public EdmItemCollection EdmItemCollection { get; }
    public PluralizationService PluralizationService { get; public set; }
    public bool GenerateForeignKeyProperties { get; public set; }
    public EntityModelSchemaGenerator(EntityContainer storeEntityContainer);
    public EntityModelSchemaGenerator(EntityContainer storeEntityContainer, string namespaceName, string modelEntityContainerName);
    [CLSCompliantAttribute("False")]
public EntityModelSchemaGenerator(StoreItemCollection storeItemCollection, string namespaceName, string modelEntityContainerName);
    public EntityContainer get_EntityContainer();
    public EdmItemCollection get_EdmItemCollection();
    public PluralizationService get_PluralizationService();
    public void set_PluralizationService(PluralizationService value);
    [CompilerGeneratedAttribute]
public bool get_GenerateForeignKeyProperties();
    [CompilerGeneratedAttribute]
public void set_GenerateForeignKeyProperties(bool value);
    public IList`1<EdmSchemaError> GenerateMetadata();
    public IList`1<EdmSchemaError> GenerateMetadata(Version targetEntityFrameworkVersion);
    public void WriteModelSchema(string outputFileName);
    public void WriteModelSchema(XmlWriter writer);
    public void WriteStorageMapping(string outputFileName);
    public void WriteStorageMapping(XmlWriter writer);
}
public enum System.Data.Entity.Design.EntityStoreSchemaFilterEffect : Enum {
    public int value__;
    public static EntityStoreSchemaFilterEffect Allow;
    public static EntityStoreSchemaFilterEffect Exclude;
}
public class System.Data.Entity.Design.EntityStoreSchemaFilterEntry : object {
    public string Catalog { get; }
    public string Schema { get; }
    public string Name { get; }
    public EntityStoreSchemaFilterObjectTypes Types { get; }
    public EntityStoreSchemaFilterEffect Effect { get; }
    public EntityStoreSchemaFilterEntry(string catalog, string schema, string name, EntityStoreSchemaFilterObjectTypes types, EntityStoreSchemaFilterEffect effect);
    public EntityStoreSchemaFilterEntry(string catalog, string schema, string name);
    [DebuggerStepThroughAttribute]
public string get_Catalog();
    [DebuggerStepThroughAttribute]
public string get_Schema();
    [DebuggerStepThroughAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public EntityStoreSchemaFilterObjectTypes get_Types();
    [DebuggerStepThroughAttribute]
public EntityStoreSchemaFilterEffect get_Effect();
}
[FlagsAttribute]
public enum System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes : Enum {
    public int value__;
    public static EntityStoreSchemaFilterObjectTypes None;
    public static EntityStoreSchemaFilterObjectTypes Table;
    public static EntityStoreSchemaFilterObjectTypes View;
    public static EntityStoreSchemaFilterObjectTypes Function;
    public static EntityStoreSchemaFilterObjectTypes All;
}
public class System.Data.Entity.Design.EntityStoreSchemaGenerator : object {
    public EntityContainer EntityContainer { get; }
    [CLSCompliantAttribute("False")]
public StoreItemCollection StoreItemCollection { get; }
    public bool GenerateForeignKeyProperties { get; public set; }
    public EntityStoreSchemaGenerator(string providerInvariantName, string connectionString, string namespaceName);
    public EntityContainer get_EntityContainer();
    public StoreItemCollection get_StoreItemCollection();
    [CompilerGeneratedAttribute]
public bool get_GenerateForeignKeyProperties();
    [CompilerGeneratedAttribute]
public void set_GenerateForeignKeyProperties(bool value);
    public IList`1<EdmSchemaError> GenerateStoreMetadata();
    public IList`1<EdmSchemaError> GenerateStoreMetadata(IEnumerable`1<EntityStoreSchemaFilterEntry> filters);
    public IList`1<EdmSchemaError> GenerateStoreMetadata(IEnumerable`1<EntityStoreSchemaFilterEntry> filters, Version targetEntityFrameworkVersion);
    public void WriteStoreSchema(string outputFileName);
    public void WriteStoreSchema(XmlWriter writer);
    public static EntityConnection CreateStoreSchemaConnection(string providerInvariantName, string connectionString);
    public static EntityConnection CreateStoreSchemaConnection(string providerInvariantName, string connectionString, Version targetEntityFrameworkVersion);
}
public class System.Data.Entity.Design.EntityViewGenerator : object {
    public LanguageOption LanguageOption { get; public set; }
    public EntityViewGenerator(LanguageOption languageOption);
    private static EntityViewGenerator();
    public LanguageOption get_LanguageOption();
    public void set_LanguageOption(LanguageOption value);
    [CLSCompliantAttribute("False")]
public IList`1<EdmSchemaError> GenerateViews(StorageMappingItemCollection mappingCollection, string outputPath);
    [CLSCompliantAttribute("False")]
public IList`1<EdmSchemaError> GenerateViews(StorageMappingItemCollection mappingCollection, TextWriter outputWriter);
    [CLSCompliantAttribute("False")]
public IList`1<EdmSchemaError> GenerateViews(StorageMappingItemCollection mappingCollection, TextWriter outputWriter, Version targetEntityFrameworkVersion);
    [CLSCompliantAttribute("False")]
public static IList`1<EdmSchemaError> Validate(StorageMappingItemCollection mappingCollection);
    [CLSCompliantAttribute("False")]
public static IList`1<EdmSchemaError> Validate(StorageMappingItemCollection mappingCollection, Version targetEntityFrameworkVersion);
}
public enum System.Data.Entity.Design.LanguageOption : Enum {
    public int value__;
    public static LanguageOption GenerateCSharpCode;
    public static LanguageOption GenerateVBCode;
}
[ExtensionAttribute]
[CLSCompliantAttribute("False")]
public static class System.Data.Entity.Design.MetadataExtensionMethods : object {
    [ExtensionAttribute]
public static ReadOnlyCollection`1<PrimitiveType> GetPrimitiveTypes(EdmItemCollection itemCollection, Version edmVersion);
}
[CLSCompliantAttribute("False")]
public static class System.Data.Entity.Design.MetadataItemCollectionFactory : object {
    public static EdmItemCollection CreateEdmItemCollection(IEnumerable`1<XmlReader> readers, IList`1& errors);
    public static EdmItemCollection CreateEdmItemCollection(IEnumerable`1<XmlReader> readers, Version targetEntityFrameworkVersion, IList`1& errors);
    public static StoreItemCollection CreateStoreItemCollection(IEnumerable`1<XmlReader> readers, IList`1& errors);
    public static StoreItemCollection CreateStoreItemCollection(IEnumerable`1<XmlReader> readers, Version targetEntityFrameworkVersion, IList`1& errors);
    public static StorageMappingItemCollection CreateStorageMappingItemCollection(EdmItemCollection edmCollection, StoreItemCollection storeCollection, IEnumerable`1<XmlReader> readers, IList`1& errors);
    public static StorageMappingItemCollection CreateStorageMappingItemCollection(EdmItemCollection edmCollection, StoreItemCollection storeCollection, IEnumerable`1<XmlReader> readers, Version targetEntityFrameworkVersion, IList`1& errors);
}
public interface System.Data.Entity.Design.PluralizationServices.ICustomPluralizationMapping {
    public abstract virtual void AddWord(string singular, string plural);
}
public abstract class System.Data.Entity.Design.PluralizationServices.PluralizationService : object {
    public CultureInfo Culture { get; protected set; }
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
protected void set_Culture(CultureInfo value);
    public abstract virtual bool IsPlural(string word);
    public abstract virtual bool IsSingular(string word);
    public abstract virtual string Pluralize(string word);
    public abstract virtual string Singularize(string word);
    public static PluralizationService CreateService(CultureInfo culture);
}
public class System.Data.Entity.Design.PropertyGeneratedEventArgs : EventArgs {
    public MetadataItem PropertySource { get; }
    public string BackingFieldName { get; }
    public CodeTypeReference ReturnType { get; public set; }
    public List`1<CodeStatement> AdditionalGetStatements { get; }
    public List`1<CodeStatement> AdditionalSetStatements { get; }
    public List`1<CodeAttributeDeclaration> AdditionalAttributes { get; }
    public PropertyGeneratedEventArgs(MetadataItem propertySource, string backingFieldName, CodeTypeReference returnType);
    public MetadataItem get_PropertySource();
    public string get_BackingFieldName();
    public CodeTypeReference get_ReturnType();
    public void set_ReturnType(CodeTypeReference value);
    public List`1<CodeStatement> get_AdditionalGetStatements();
    public List`1<CodeStatement> get_AdditionalSetStatements();
    public List`1<CodeAttributeDeclaration> get_AdditionalAttributes();
}
public class System.Data.Entity.Design.PropertyGeneratedEventHandler : MulticastDelegate {
    public PropertyGeneratedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PropertyGeneratedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PropertyGeneratedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.Entity.Design.TypeGeneratedEventArgs : EventArgs {
    public GlobalItem TypeSource { get; }
    public CodeTypeReference BaseType { get; public set; }
    public List`1<Type> AdditionalInterfaces { get; }
    public List`1<CodeTypeMember> AdditionalMembers { get; }
    public List`1<CodeAttributeDeclaration> AdditionalAttributes { get; }
    public TypeGeneratedEventArgs(GlobalItem typeSource, CodeTypeReference baseType);
    public GlobalItem get_TypeSource();
    public CodeTypeReference get_BaseType();
    public void set_BaseType(CodeTypeReference value);
    public List`1<Type> get_AdditionalInterfaces();
    public List`1<CodeTypeMember> get_AdditionalMembers();
    public List`1<CodeAttributeDeclaration> get_AdditionalAttributes();
}
public class System.Data.Entity.Design.TypeGeneratedEventHandler : MulticastDelegate {
    public TypeGeneratedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TypeGeneratedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TypeGeneratedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
