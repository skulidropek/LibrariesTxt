internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemThreadingTasksDataflow;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemNetHttp;
    internal static string SystemNetHttpWebRequest;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemRuntimeWindowsRuntime;
    internal static string SystemRuntimeWindowsRuntimeUIXaml;
    internal static string SystemSecurity;
    internal static string SystemServiceModelWeb;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal abstract class System.Data.Common.CommandTrees.BasicCommandTreeVisitor : BasicExpressionVisitor {
    protected virtual void VisitSetClause(DbSetClause setClause);
    protected virtual void VisitModificationClause(DbModificationClause modificationClause);
    protected virtual void VisitModificationClauses(IList`1<DbModificationClause> modificationClauses);
    public virtual void VisitCommandTree(DbCommandTree commandTree);
    protected virtual void VisitDeleteCommandTree(DbDeleteCommandTree deleteTree);
    protected virtual void VisitFunctionCommandTree(DbFunctionCommandTree functionTree);
    protected virtual void VisitInsertCommandTree(DbInsertCommandTree insertTree);
    protected virtual void VisitQueryCommandTree(DbQueryCommandTree queryTree);
    protected virtual void VisitUpdateCommandTree(DbUpdateCommandTree updateTree);
}
internal abstract class System.Data.Common.CommandTrees.BasicExpressionVisitor : DbExpressionVisitor {
    protected virtual void VisitUnaryExpression(DbUnaryExpression expression);
    protected virtual void VisitBinaryExpression(DbBinaryExpression expression);
    protected virtual void VisitExpressionBindingPre(DbExpressionBinding binding);
    protected virtual void VisitExpressionBindingPost(DbExpressionBinding binding);
    protected virtual void VisitGroupExpressionBindingPre(DbGroupExpressionBinding binding);
    protected virtual void VisitGroupExpressionBindingMid(DbGroupExpressionBinding binding);
    protected virtual void VisitGroupExpressionBindingPost(DbGroupExpressionBinding binding);
    protected virtual void VisitLambdaPre(DbLambda lambda);
    protected virtual void VisitLambdaPost(DbLambda lambda);
    public virtual void VisitExpression(DbExpression expression);
    public virtual void VisitExpressionList(IList`1<DbExpression> expressionList);
    public virtual void VisitAggregateList(IList`1<DbAggregate> aggregates);
    public virtual void VisitAggregate(DbAggregate aggregate);
    internal virtual void VisitRelatedEntityReferenceList(IList`1<DbRelatedEntityRef> relatedEntityReferences);
    internal virtual void VisitRelatedEntityReference(DbRelatedEntityRef relatedEntityRef);
    public virtual void Visit(DbExpression expression);
    public virtual void Visit(DbConstantExpression expression);
    public virtual void Visit(DbNullExpression expression);
    public virtual void Visit(DbVariableReferenceExpression expression);
    public virtual void Visit(DbParameterReferenceExpression expression);
    public virtual void Visit(DbFunctionExpression expression);
    public virtual void Visit(DbLambdaExpression expression);
    public virtual void Visit(DbPropertyExpression expression);
    public virtual void Visit(DbComparisonExpression expression);
    public virtual void Visit(DbLikeExpression expression);
    public virtual void Visit(DbLimitExpression expression);
    public virtual void Visit(DbIsNullExpression expression);
    public virtual void Visit(DbArithmeticExpression expression);
    public virtual void Visit(DbAndExpression expression);
    public virtual void Visit(DbOrExpression expression);
    public virtual void Visit(DbNotExpression expression);
    public virtual void Visit(DbDistinctExpression expression);
    public virtual void Visit(DbElementExpression expression);
    public virtual void Visit(DbIsEmptyExpression expression);
    public virtual void Visit(DbUnionAllExpression expression);
    public virtual void Visit(DbIntersectExpression expression);
    public virtual void Visit(DbExceptExpression expression);
    public virtual void Visit(DbOfTypeExpression expression);
    public virtual void Visit(DbTreatExpression expression);
    public virtual void Visit(DbCastExpression expression);
    public virtual void Visit(DbIsOfExpression expression);
    public virtual void Visit(DbCaseExpression expression);
    public virtual void Visit(DbNewInstanceExpression expression);
    public virtual void Visit(DbRefExpression expression);
    public virtual void Visit(DbRelationshipNavigationExpression expression);
    public virtual void Visit(DbDerefExpression expression);
    public virtual void Visit(DbRefKeyExpression expression);
    public virtual void Visit(DbEntityRefExpression expression);
    public virtual void Visit(DbScanExpression expression);
    public virtual void Visit(DbFilterExpression expression);
    public virtual void Visit(DbProjectExpression expression);
    public virtual void Visit(DbCrossJoinExpression expression);
    public virtual void Visit(DbJoinExpression expression);
    public virtual void Visit(DbApplyExpression expression);
    public virtual void Visit(DbGroupByExpression expression);
    public virtual void Visit(DbSkipExpression expression);
    public virtual void Visit(DbSortExpression expression);
    public virtual void Visit(DbQuantifierExpression expression);
}
public abstract class System.Data.Common.CommandTrees.DbAggregate : object {
    public TypeUsage ResultType { get; }
    public IList`1<DbExpression> Arguments { get; }
    internal DbAggregate(TypeUsage resultType, DbExpressionList arguments);
    public TypeUsage get_ResultType();
    public IList`1<DbExpression> get_Arguments();
}
public class System.Data.Common.CommandTrees.DbAndExpression : DbBinaryExpression {
    internal DbAndExpression(TypeUsage booleanResultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbApplyExpression : DbExpression {
    public DbExpressionBinding Apply { get; }
    public DbExpressionBinding Input { get; }
    internal DbApplyExpression(DbExpressionKind applyKind, TypeUsage resultRowCollectionTypeUsage, DbExpressionBinding input, DbExpressionBinding apply);
    public DbExpressionBinding get_Apply();
    public DbExpressionBinding get_Input();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbArithmeticExpression : DbExpression {
    public IList`1<DbExpression> Arguments { get; }
    internal DbArithmeticExpression(DbExpressionKind kind, TypeUsage numericResultType, DbExpressionList args);
    public IList`1<DbExpression> get_Arguments();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public abstract class System.Data.Common.CommandTrees.DbBinaryExpression : DbExpression {
    public DbExpression Left { get; }
    public DbExpression Right { get; }
    internal DbBinaryExpression(DbExpressionKind kind, TypeUsage type, DbExpression left, DbExpression right);
    public DbExpression get_Left();
    public DbExpression get_Right();
}
public class System.Data.Common.CommandTrees.DbCaseExpression : DbExpression {
    public IList`1<DbExpression> When { get; }
    public IList`1<DbExpression> Then { get; }
    public DbExpression Else { get; }
    internal DbCaseExpression(TypeUsage commonResultType, DbExpressionList whens, DbExpressionList thens, DbExpression elseExpr);
    public IList`1<DbExpression> get_When();
    public IList`1<DbExpression> get_Then();
    public DbExpression get_Else();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbCastExpression : DbUnaryExpression {
    internal DbCastExpression(TypeUsage type, DbExpression argument);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public abstract class System.Data.Common.CommandTrees.DbCommandTree : object {
    public IEnumerable`1<KeyValuePair`2<string, TypeUsage>> Parameters { get; }
    internal DbCommandTreeKind CommandTreeKind { get; }
    internal MetadataWorkspace MetadataWorkspace { get; }
    internal DataSpace DataSpace { get; }
    internal DbCommandTree(MetadataWorkspace metadata, DataSpace dataSpace);
    private static DbCommandTree();
    public IEnumerable`1<KeyValuePair`2<string, TypeUsage>> get_Parameters();
    internal abstract virtual DbCommandTreeKind get_CommandTreeKind();
    internal abstract virtual IEnumerable`1<KeyValuePair`2<string, TypeUsage>> GetParameters();
    internal MetadataWorkspace get_MetadataWorkspace();
    internal DataSpace get_DataSpace();
    internal void Dump(ExpressionDumper dumper);
    internal abstract virtual void DumpStructure(ExpressionDumper dumper);
    internal string DumpXml();
    internal string Print();
    internal abstract virtual string PrintTree(ExpressionPrinter printer);
    internal static bool IsValidDataSpace(DataSpace dataSpace);
    internal static bool IsValidParameterName(string name);
}
internal enum System.Data.Common.CommandTrees.DbCommandTreeKind : Enum {
    public int value__;
    public static DbCommandTreeKind Query;
    public static DbCommandTreeKind Update;
    public static DbCommandTreeKind Insert;
    public static DbCommandTreeKind Delete;
    public static DbCommandTreeKind Function;
}
public class System.Data.Common.CommandTrees.DbComparisonExpression : DbBinaryExpression {
    internal DbComparisonExpression(DbExpressionKind kind, TypeUsage booleanResultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbConstantExpression : DbExpression {
    public object Value { get; }
    internal DbConstantExpression(TypeUsage resultType, object value);
    internal object GetValue();
    public object get_Value();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbCrossJoinExpression : DbExpression {
    public IList`1<DbExpressionBinding> Inputs { get; }
    internal DbCrossJoinExpression(TypeUsage collectionOfRowResultType, ReadOnlyCollection`1<DbExpressionBinding> inputs);
    public IList`1<DbExpressionBinding> get_Inputs();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbDeleteCommandTree : DbModificationCommandTree {
    public DbExpression Predicate { get; }
    internal DbCommandTreeKind CommandTreeKind { get; }
    internal bool HasReader { get; }
    internal DbDeleteCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpressionBinding target, DbExpression predicate);
    public DbExpression get_Predicate();
    internal virtual DbCommandTreeKind get_CommandTreeKind();
    internal virtual bool get_HasReader();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual string PrintTree(ExpressionPrinter printer);
}
public class System.Data.Common.CommandTrees.DbDerefExpression : DbUnaryExpression {
    internal DbDerefExpression(TypeUsage entityResultType, DbExpression refExpr);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbDistinctExpression : DbUnaryExpression {
    internal DbDistinctExpression(TypeUsage resultType, DbExpression argument);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbElementExpression : DbUnaryExpression {
    internal bool IsSinglePropertyUnwrapped { get; }
    internal DbElementExpression(TypeUsage resultType, DbExpression argument);
    internal DbElementExpression(TypeUsage resultType, DbExpression argument, bool unwrapSingleProperty);
    internal bool get_IsSinglePropertyUnwrapped();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbEntityRefExpression : DbUnaryExpression {
    internal DbEntityRefExpression(TypeUsage refResultType, DbExpression entity);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbExceptExpression : DbBinaryExpression {
    internal DbExceptExpression(TypeUsage resultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public abstract class System.Data.Common.CommandTrees.DbExpression : object {
    public TypeUsage ResultType { get; }
    public DbExpressionKind ExpressionKind { get; }
    internal DbExpression(DbExpressionKind kind, TypeUsage type);
    public TypeUsage get_ResultType();
    public DbExpressionKind get_ExpressionKind();
    public abstract virtual void Accept(DbExpressionVisitor visitor);
    public abstract virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static DbExpression FromBinary(Byte[] value);
    public static DbExpression op_Implicit(Byte[] value);
    public static DbExpression FromBoolean(Nullable`1<bool> value);
    public static DbExpression op_Implicit(Nullable`1<bool> value);
    public static DbExpression FromByte(Nullable`1<byte> value);
    public static DbExpression op_Implicit(Nullable`1<byte> value);
    public static DbExpression FromDateTime(Nullable`1<DateTime> value);
    public static DbExpression op_Implicit(Nullable`1<DateTime> value);
    public static DbExpression FromDateTimeOffset(Nullable`1<DateTimeOffset> value);
    public static DbExpression op_Implicit(Nullable`1<DateTimeOffset> value);
    public static DbExpression FromDecimal(Nullable`1<decimal> value);
    public static DbExpression op_Implicit(Nullable`1<decimal> value);
    public static DbExpression FromDouble(Nullable`1<double> value);
    public static DbExpression op_Implicit(Nullable`1<double> value);
    public static DbExpression FromGeography(DbGeography value);
    public static DbExpression op_Implicit(DbGeography value);
    public static DbExpression FromGeometry(DbGeometry value);
    public static DbExpression op_Implicit(DbGeometry value);
    public static DbExpression FromGuid(Nullable`1<Guid> value);
    public static DbExpression op_Implicit(Nullable`1<Guid> value);
    public static DbExpression FromInt16(Nullable`1<short> value);
    public static DbExpression op_Implicit(Nullable`1<short> value);
    public static DbExpression FromInt32(Nullable`1<int> value);
    public static DbExpression op_Implicit(Nullable`1<int> value);
    public static DbExpression FromInt64(Nullable`1<long> value);
    public static DbExpression op_Implicit(Nullable`1<long> value);
    public static DbExpression FromSingle(Nullable`1<float> value);
    public static DbExpression op_Implicit(Nullable`1<float> value);
    public static DbExpression FromString(string value);
    public static DbExpression op_Implicit(string value);
    internal string Print();
    internal static void CheckExpressionKind(DbExpressionKind kind);
}
public class System.Data.Common.CommandTrees.DbExpressionBinding : object {
    public DbExpression Expression { get; }
    public string VariableName { get; }
    public TypeUsage VariableType { get; }
    public DbVariableReferenceExpression Variable { get; }
    internal DbExpressionBinding(DbExpression input, DbVariableReferenceExpression varRef);
    public DbExpression get_Expression();
    public string get_VariableName();
    public TypeUsage get_VariableType();
    public DbVariableReferenceExpression get_Variable();
}
public enum System.Data.Common.CommandTrees.DbExpressionKind : Enum {
    public int value__;
    public static DbExpressionKind All;
    public static DbExpressionKind And;
    public static DbExpressionKind Any;
    public static DbExpressionKind Case;
    public static DbExpressionKind Cast;
    public static DbExpressionKind Constant;
    public static DbExpressionKind CrossApply;
    public static DbExpressionKind CrossJoin;
    public static DbExpressionKind Deref;
    public static DbExpressionKind Distinct;
    public static DbExpressionKind Divide;
    public static DbExpressionKind Element;
    public static DbExpressionKind EntityRef;
    public static DbExpressionKind Equals;
    public static DbExpressionKind Except;
    public static DbExpressionKind Filter;
    public static DbExpressionKind FullOuterJoin;
    public static DbExpressionKind Function;
    public static DbExpressionKind GreaterThan;
    public static DbExpressionKind GreaterThanOrEquals;
    public static DbExpressionKind GroupBy;
    public static DbExpressionKind InnerJoin;
    public static DbExpressionKind Intersect;
    public static DbExpressionKind IsEmpty;
    public static DbExpressionKind IsNull;
    public static DbExpressionKind IsOf;
    public static DbExpressionKind IsOfOnly;
    public static DbExpressionKind Lambda;
    public static DbExpressionKind LeftOuterJoin;
    public static DbExpressionKind LessThan;
    public static DbExpressionKind LessThanOrEquals;
    public static DbExpressionKind Like;
    public static DbExpressionKind Limit;
    public static DbExpressionKind Minus;
    public static DbExpressionKind Modulo;
    public static DbExpressionKind Multiply;
    public static DbExpressionKind NewInstance;
    public static DbExpressionKind Not;
    public static DbExpressionKind NotEquals;
    public static DbExpressionKind Null;
    public static DbExpressionKind OfType;
    public static DbExpressionKind OfTypeOnly;
    public static DbExpressionKind Or;
    public static DbExpressionKind OuterApply;
    public static DbExpressionKind ParameterReference;
    public static DbExpressionKind Plus;
    public static DbExpressionKind Project;
    public static DbExpressionKind Property;
    public static DbExpressionKind Ref;
    public static DbExpressionKind RefKey;
    public static DbExpressionKind RelationshipNavigation;
    public static DbExpressionKind Scan;
    public static DbExpressionKind Skip;
    public static DbExpressionKind Sort;
    public static DbExpressionKind Treat;
    public static DbExpressionKind UnaryMinus;
    public static DbExpressionKind UnionAll;
    public static DbExpressionKind VariableReference;
}
public abstract class System.Data.Common.CommandTrees.DbExpressionVisitor : object {
    public abstract virtual void Visit(DbExpression expression);
    public abstract virtual void Visit(DbAndExpression expression);
    public abstract virtual void Visit(DbApplyExpression expression);
    public abstract virtual void Visit(DbArithmeticExpression expression);
    public abstract virtual void Visit(DbCaseExpression expression);
    public abstract virtual void Visit(DbCastExpression expression);
    public abstract virtual void Visit(DbComparisonExpression expression);
    public abstract virtual void Visit(DbConstantExpression expression);
    public abstract virtual void Visit(DbCrossJoinExpression expression);
    public abstract virtual void Visit(DbDerefExpression expression);
    public abstract virtual void Visit(DbDistinctExpression expression);
    public abstract virtual void Visit(DbElementExpression expression);
    public abstract virtual void Visit(DbExceptExpression expression);
    public abstract virtual void Visit(DbFilterExpression expression);
    public abstract virtual void Visit(DbFunctionExpression expression);
    public abstract virtual void Visit(DbEntityRefExpression expression);
    public abstract virtual void Visit(DbRefKeyExpression expression);
    public abstract virtual void Visit(DbGroupByExpression expression);
    public abstract virtual void Visit(DbIntersectExpression expression);
    public abstract virtual void Visit(DbIsEmptyExpression expression);
    public abstract virtual void Visit(DbIsNullExpression expression);
    public abstract virtual void Visit(DbIsOfExpression expression);
    public abstract virtual void Visit(DbJoinExpression expression);
    public virtual void Visit(DbLambdaExpression expression);
    public abstract virtual void Visit(DbLikeExpression expression);
    public abstract virtual void Visit(DbLimitExpression expression);
    public abstract virtual void Visit(DbNewInstanceExpression expression);
    public abstract virtual void Visit(DbNotExpression expression);
    public abstract virtual void Visit(DbNullExpression expression);
    public abstract virtual void Visit(DbOfTypeExpression expression);
    public abstract virtual void Visit(DbOrExpression expression);
    public abstract virtual void Visit(DbParameterReferenceExpression expression);
    public abstract virtual void Visit(DbProjectExpression expression);
    public abstract virtual void Visit(DbPropertyExpression expression);
    public abstract virtual void Visit(DbQuantifierExpression expression);
    public abstract virtual void Visit(DbRefExpression expression);
    public abstract virtual void Visit(DbRelationshipNavigationExpression expression);
    public abstract virtual void Visit(DbScanExpression expression);
    public abstract virtual void Visit(DbSkipExpression expression);
    public abstract virtual void Visit(DbSortExpression expression);
    public abstract virtual void Visit(DbTreatExpression expression);
    public abstract virtual void Visit(DbUnionAllExpression expression);
    public abstract virtual void Visit(DbVariableReferenceExpression expression);
}
public abstract class System.Data.Common.CommandTrees.DbExpressionVisitor`1 : object {
    public abstract virtual TResultType Visit(DbExpression expression);
    public abstract virtual TResultType Visit(DbAndExpression expression);
    public abstract virtual TResultType Visit(DbApplyExpression expression);
    public abstract virtual TResultType Visit(DbArithmeticExpression expression);
    public abstract virtual TResultType Visit(DbCaseExpression expression);
    public abstract virtual TResultType Visit(DbCastExpression expression);
    public abstract virtual TResultType Visit(DbComparisonExpression expression);
    public abstract virtual TResultType Visit(DbConstantExpression expression);
    public abstract virtual TResultType Visit(DbCrossJoinExpression expression);
    public abstract virtual TResultType Visit(DbDerefExpression expression);
    public abstract virtual TResultType Visit(DbDistinctExpression expression);
    public abstract virtual TResultType Visit(DbElementExpression expression);
    public abstract virtual TResultType Visit(DbExceptExpression expression);
    public abstract virtual TResultType Visit(DbFilterExpression expression);
    public abstract virtual TResultType Visit(DbFunctionExpression expression);
    public abstract virtual TResultType Visit(DbEntityRefExpression expression);
    public abstract virtual TResultType Visit(DbRefKeyExpression expression);
    public abstract virtual TResultType Visit(DbGroupByExpression expression);
    public abstract virtual TResultType Visit(DbIntersectExpression expression);
    public abstract virtual TResultType Visit(DbIsEmptyExpression expression);
    public abstract virtual TResultType Visit(DbIsNullExpression expression);
    public abstract virtual TResultType Visit(DbIsOfExpression expression);
    public abstract virtual TResultType Visit(DbJoinExpression expression);
    public virtual TResultType Visit(DbLambdaExpression expression);
    public abstract virtual TResultType Visit(DbLikeExpression expression);
    public abstract virtual TResultType Visit(DbLimitExpression expression);
    public abstract virtual TResultType Visit(DbNewInstanceExpression expression);
    public abstract virtual TResultType Visit(DbNotExpression expression);
    public abstract virtual TResultType Visit(DbNullExpression expression);
    public abstract virtual TResultType Visit(DbOfTypeExpression expression);
    public abstract virtual TResultType Visit(DbOrExpression expression);
    public abstract virtual TResultType Visit(DbParameterReferenceExpression expression);
    public abstract virtual TResultType Visit(DbProjectExpression expression);
    public abstract virtual TResultType Visit(DbPropertyExpression expression);
    public abstract virtual TResultType Visit(DbQuantifierExpression expression);
    public abstract virtual TResultType Visit(DbRefExpression expression);
    public abstract virtual TResultType Visit(DbRelationshipNavigationExpression expression);
    public abstract virtual TResultType Visit(DbScanExpression expression);
    public abstract virtual TResultType Visit(DbSortExpression expression);
    public abstract virtual TResultType Visit(DbSkipExpression expression);
    public abstract virtual TResultType Visit(DbTreatExpression expression);
    public abstract virtual TResultType Visit(DbUnionAllExpression expression);
    public abstract virtual TResultType Visit(DbVariableReferenceExpression expression);
}
public class System.Data.Common.CommandTrees.DbFilterExpression : DbExpression {
    public DbExpressionBinding Input { get; }
    public DbExpression Predicate { get; }
    internal DbFilterExpression(TypeUsage resultType, DbExpressionBinding input, DbExpression predicate);
    public DbExpressionBinding get_Input();
    public DbExpression get_Predicate();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbFunctionAggregate : DbAggregate {
    public bool Distinct { get; }
    public EdmFunction Function { get; }
    internal DbFunctionAggregate(TypeUsage resultType, DbExpressionList arguments, EdmFunction function, bool isDistinct);
    public bool get_Distinct();
    public EdmFunction get_Function();
}
public class System.Data.Common.CommandTrees.DbFunctionCommandTree : DbCommandTree {
    public EdmFunction EdmFunction { get; }
    public TypeUsage ResultType { get; }
    internal DbCommandTreeKind CommandTreeKind { get; }
    internal DbFunctionCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, EdmFunction edmFunction, TypeUsage resultType, IEnumerable`1<KeyValuePair`2<string, TypeUsage>> parameters);
    public EdmFunction get_EdmFunction();
    public TypeUsage get_ResultType();
    internal virtual DbCommandTreeKind get_CommandTreeKind();
    internal virtual IEnumerable`1<KeyValuePair`2<string, TypeUsage>> GetParameters();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual string PrintTree(ExpressionPrinter printer);
}
public class System.Data.Common.CommandTrees.DbFunctionExpression : DbExpression {
    public EdmFunction Function { get; }
    public IList`1<DbExpression> Arguments { get; }
    internal DbFunctionExpression(TypeUsage resultType, EdmFunction function, DbExpressionList arguments);
    public EdmFunction get_Function();
    public IList`1<DbExpression> get_Arguments();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbGroupAggregate : DbAggregate {
    internal DbGroupAggregate(TypeUsage resultType, DbExpressionList arguments);
}
public class System.Data.Common.CommandTrees.DbGroupByExpression : DbExpression {
    public DbGroupExpressionBinding Input { get; }
    public IList`1<DbExpression> Keys { get; }
    public IList`1<DbAggregate> Aggregates { get; }
    internal DbGroupByExpression(TypeUsage collectionOfRowResultType, DbGroupExpressionBinding input, DbExpressionList groupKeys, ReadOnlyCollection`1<DbAggregate> aggregates);
    public DbGroupExpressionBinding get_Input();
    public IList`1<DbExpression> get_Keys();
    public IList`1<DbAggregate> get_Aggregates();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbGroupExpressionBinding : object {
    public DbExpression Expression { get; }
    public string VariableName { get; }
    public TypeUsage VariableType { get; }
    public DbVariableReferenceExpression Variable { get; }
    public string GroupVariableName { get; }
    public TypeUsage GroupVariableType { get; }
    public DbVariableReferenceExpression GroupVariable { get; }
    public DbGroupAggregate GroupAggregate { get; }
    internal DbGroupExpressionBinding(DbExpression input, DbVariableReferenceExpression inputRef, DbVariableReferenceExpression groupRef);
    public DbExpression get_Expression();
    public string get_VariableName();
    public TypeUsage get_VariableType();
    public DbVariableReferenceExpression get_Variable();
    public string get_GroupVariableName();
    public TypeUsage get_GroupVariableType();
    public DbVariableReferenceExpression get_GroupVariable();
    public DbGroupAggregate get_GroupAggregate();
}
public class System.Data.Common.CommandTrees.DbInsertCommandTree : DbModificationCommandTree {
    public IList`1<DbModificationClause> SetClauses { get; }
    public DbExpression Returning { get; }
    internal DbCommandTreeKind CommandTreeKind { get; }
    internal bool HasReader { get; }
    internal DbInsertCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpressionBinding target, ReadOnlyCollection`1<DbModificationClause> setClauses, DbExpression returning);
    public IList`1<DbModificationClause> get_SetClauses();
    public DbExpression get_Returning();
    internal virtual DbCommandTreeKind get_CommandTreeKind();
    internal virtual bool get_HasReader();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual string PrintTree(ExpressionPrinter printer);
}
public class System.Data.Common.CommandTrees.DbIntersectExpression : DbBinaryExpression {
    internal DbIntersectExpression(TypeUsage resultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbIsEmptyExpression : DbUnaryExpression {
    internal DbIsEmptyExpression(TypeUsage booleanResultType, DbExpression argument);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbIsNullExpression : DbUnaryExpression {
    internal DbIsNullExpression(TypeUsage booleanResultType, DbExpression arg, bool isRowTypeArgumentAllowed);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbIsOfExpression : DbUnaryExpression {
    public TypeUsage OfType { get; }
    internal DbIsOfExpression(DbExpressionKind isOfKind, TypeUsage booleanResultType, DbExpression argument, TypeUsage isOfType);
    public TypeUsage get_OfType();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbJoinExpression : DbExpression {
    public DbExpressionBinding Left { get; }
    public DbExpressionBinding Right { get; }
    public DbExpression JoinCondition { get; }
    internal DbJoinExpression(DbExpressionKind joinKind, TypeUsage collectionOfRowResultType, DbExpressionBinding left, DbExpressionBinding right, DbExpression condition);
    public DbExpressionBinding get_Left();
    public DbExpressionBinding get_Right();
    public DbExpression get_JoinCondition();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbLambda : object {
    public DbExpression Body { get; }
    public IList`1<DbVariableReferenceExpression> Variables { get; }
    internal DbLambda(ReadOnlyCollection`1<DbVariableReferenceExpression> variables, DbExpression bodyExp);
    public DbExpression get_Body();
    public IList`1<DbVariableReferenceExpression> get_Variables();
    public static DbLambda Create(DbExpression body, IEnumerable`1<DbVariableReferenceExpression> variables);
    public static DbLambda Create(DbExpression body, DbVariableReferenceExpression[] variables);
    public static DbLambda Create(TypeUsage argument1Type, Func`2<DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, Func`3<DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, Func`4<DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, Func`5<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, Func`6<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, Func`7<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, Func`8<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, Func`9<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, Func`10<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, Func`11<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, Func`12<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, TypeUsage argument12Type, Func`13<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, TypeUsage argument12Type, TypeUsage argument13Type, Func`14<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, TypeUsage argument12Type, TypeUsage argument13Type, TypeUsage argument14Type, Func`15<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, TypeUsage argument12Type, TypeUsage argument13Type, TypeUsage argument14Type, TypeUsage argument15Type, Func`16<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
    public static DbLambda Create(TypeUsage argument1Type, TypeUsage argument2Type, TypeUsage argument3Type, TypeUsage argument4Type, TypeUsage argument5Type, TypeUsage argument6Type, TypeUsage argument7Type, TypeUsage argument8Type, TypeUsage argument9Type, TypeUsage argument10Type, TypeUsage argument11Type, TypeUsage argument12Type, TypeUsage argument13Type, TypeUsage argument14Type, TypeUsage argument15Type, TypeUsage argument16Type, Func`17<DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression, DbExpression> lambdaFunction);
}
public class System.Data.Common.CommandTrees.DbLambdaExpression : DbExpression {
    public DbLambda Lambda { get; }
    public IList`1<DbExpression> Arguments { get; }
    internal DbLambdaExpression(TypeUsage resultType, DbLambda lambda, DbExpressionList args);
    public DbLambda get_Lambda();
    public IList`1<DbExpression> get_Arguments();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbLikeExpression : DbExpression {
    public DbExpression Argument { get; }
    public DbExpression Pattern { get; }
    public DbExpression Escape { get; }
    internal DbLikeExpression(TypeUsage booleanResultType, DbExpression input, DbExpression pattern, DbExpression escape);
    public DbExpression get_Argument();
    public DbExpression get_Pattern();
    public DbExpression get_Escape();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbLimitExpression : DbExpression {
    public DbExpression Argument { get; }
    public DbExpression Limit { get; }
    public bool WithTies { get; }
    internal DbLimitExpression(TypeUsage resultType, DbExpression argument, DbExpression limit, bool withTies);
    public DbExpression get_Argument();
    public DbExpression get_Limit();
    public bool get_WithTies();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public abstract class System.Data.Common.CommandTrees.DbModificationClause : object {
    internal abstract virtual void DumpStructure(ExpressionDumper dumper);
    internal abstract virtual TreeNode Print(DbExpressionVisitor`1<TreeNode> visitor);
}
public abstract class System.Data.Common.CommandTrees.DbModificationCommandTree : DbCommandTree {
    public DbExpressionBinding Target { get; }
    internal bool HasReader { get; }
    internal DbModificationCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpressionBinding target);
    public DbExpressionBinding get_Target();
    internal abstract virtual bool get_HasReader();
    internal virtual IEnumerable`1<KeyValuePair`2<string, TypeUsage>> GetParameters();
    internal virtual void DumpStructure(ExpressionDumper dumper);
}
public class System.Data.Common.CommandTrees.DbNewInstanceExpression : DbExpression {
    public IList`1<DbExpression> Arguments { get; }
    internal bool HasRelatedEntityReferences { get; }
    internal ReadOnlyCollection`1<DbRelatedEntityRef> RelatedEntityReferences { get; }
    internal DbNewInstanceExpression(TypeUsage type, DbExpressionList args);
    internal DbNewInstanceExpression(TypeUsage resultType, DbExpressionList attributeValues, ReadOnlyCollection`1<DbRelatedEntityRef> relationships);
    public IList`1<DbExpression> get_Arguments();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
    internal bool get_HasRelatedEntityReferences();
    internal ReadOnlyCollection`1<DbRelatedEntityRef> get_RelatedEntityReferences();
}
public class System.Data.Common.CommandTrees.DbNotExpression : DbUnaryExpression {
    internal DbNotExpression(TypeUsage booleanResultType, DbExpression argument);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbNullExpression : DbExpression {
    internal DbNullExpression(TypeUsage type);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbOfTypeExpression : DbUnaryExpression {
    public TypeUsage OfType { get; }
    internal DbOfTypeExpression(DbExpressionKind ofTypeKind, TypeUsage collectionResultType, DbExpression argument, TypeUsage type);
    public TypeUsage get_OfType();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbOrExpression : DbBinaryExpression {
    internal DbOrExpression(TypeUsage booleanResultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbParameterReferenceExpression : DbExpression {
    public string ParameterName { get; }
    internal DbParameterReferenceExpression(TypeUsage type, string name);
    public string get_ParameterName();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbProjectExpression : DbExpression {
    public DbExpressionBinding Input { get; }
    public DbExpression Projection { get; }
    internal DbProjectExpression(TypeUsage resultType, DbExpressionBinding input, DbExpression projection);
    public DbExpressionBinding get_Input();
    public DbExpression get_Projection();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbPropertyExpression : DbExpression {
    public EdmMember Property { get; }
    public DbExpression Instance { get; }
    internal DbPropertyExpression(TypeUsage resultType, EdmMember property, DbExpression instance);
    public EdmMember get_Property();
    public DbExpression get_Instance();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
    public KeyValuePair`2<string, DbExpression> ToKeyValuePair();
    public static KeyValuePair`2<string, DbExpression> op_Implicit(DbPropertyExpression value);
}
public class System.Data.Common.CommandTrees.DbQuantifierExpression : DbExpression {
    public DbExpressionBinding Input { get; }
    public DbExpression Predicate { get; }
    internal DbQuantifierExpression(DbExpressionKind kind, TypeUsage booleanResultType, DbExpressionBinding input, DbExpression predicate);
    public DbExpressionBinding get_Input();
    public DbExpression get_Predicate();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbQueryCommandTree : DbCommandTree {
    public DbExpression Query { get; }
    internal DbCommandTreeKind CommandTreeKind { get; }
    internal DbQueryCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpression query);
    public DbExpression get_Query();
    internal virtual DbCommandTreeKind get_CommandTreeKind();
    internal virtual IEnumerable`1<KeyValuePair`2<string, TypeUsage>> GetParameters();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual string PrintTree(ExpressionPrinter printer);
    internal static DbQueryCommandTree FromValidExpression(MetadataWorkspace metadata, DataSpace dataSpace, DbExpression query);
}
public class System.Data.Common.CommandTrees.DbRefExpression : DbUnaryExpression {
    public EntitySet EntitySet { get; }
    internal DbRefExpression(TypeUsage refResultType, EntitySet entitySet, DbExpression refKeys);
    public EntitySet get_EntitySet();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbRefKeyExpression : DbUnaryExpression {
    internal DbRefKeyExpression(TypeUsage rowResultType, DbExpression reference);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
internal class System.Data.Common.CommandTrees.DbRelatedEntityRef : object {
    internal RelationshipEndMember SourceEnd { get; }
    internal RelationshipEndMember TargetEnd { get; }
    internal DbExpression TargetEntityReference { get; }
    internal DbRelatedEntityRef(RelationshipEndMember sourceEnd, RelationshipEndMember targetEnd, DbExpression targetEntityRef);
    internal RelationshipEndMember get_SourceEnd();
    internal RelationshipEndMember get_TargetEnd();
    internal DbExpression get_TargetEntityReference();
}
public class System.Data.Common.CommandTrees.DbRelationshipNavigationExpression : DbExpression {
    public RelationshipType Relationship { get; }
    public RelationshipEndMember NavigateFrom { get; }
    public RelationshipEndMember NavigateTo { get; }
    public DbExpression NavigationSource { get; }
    internal DbRelationshipNavigationExpression(TypeUsage resultType, RelationshipType relType, RelationshipEndMember fromEnd, RelationshipEndMember toEnd, DbExpression navigateFrom);
    public RelationshipType get_Relationship();
    public RelationshipEndMember get_NavigateFrom();
    public RelationshipEndMember get_NavigateTo();
    public DbExpression get_NavigationSource();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbScanExpression : DbExpression {
    public EntitySetBase Target { get; }
    internal DbScanExpression(TypeUsage collectionOfEntityType, EntitySetBase entitySet);
    public EntitySetBase get_Target();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbSetClause : DbModificationClause {
    public DbExpression Property { get; }
    public DbExpression Value { get; }
    internal DbSetClause(DbExpression targetProperty, DbExpression sourceValue);
    public DbExpression get_Property();
    public DbExpression get_Value();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual TreeNode Print(DbExpressionVisitor`1<TreeNode> visitor);
}
public class System.Data.Common.CommandTrees.DbSkipExpression : DbExpression {
    public DbExpressionBinding Input { get; }
    public IList`1<DbSortClause> SortOrder { get; }
    public DbExpression Count { get; }
    internal DbSkipExpression(TypeUsage resultType, DbExpressionBinding input, ReadOnlyCollection`1<DbSortClause> sortOrder, DbExpression count);
    public DbExpressionBinding get_Input();
    public IList`1<DbSortClause> get_SortOrder();
    public DbExpression get_Count();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbSortClause : object {
    public bool Ascending { get; }
    public string Collation { get; }
    public DbExpression Expression { get; }
    internal DbSortClause(DbExpression key, bool asc, string collation);
    public bool get_Ascending();
    public string get_Collation();
    public DbExpression get_Expression();
}
public class System.Data.Common.CommandTrees.DbSortExpression : DbExpression {
    public DbExpressionBinding Input { get; }
    public IList`1<DbSortClause> SortOrder { get; }
    internal DbSortExpression(TypeUsage resultType, DbExpressionBinding input, ReadOnlyCollection`1<DbSortClause> sortOrder);
    public DbExpressionBinding get_Input();
    public IList`1<DbSortClause> get_SortOrder();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbTreatExpression : DbUnaryExpression {
    internal DbTreatExpression(TypeUsage asType, DbExpression argument);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public abstract class System.Data.Common.CommandTrees.DbUnaryExpression : DbExpression {
    public DbExpression Argument { get; }
    internal DbUnaryExpression(DbExpressionKind kind, TypeUsage resultType, DbExpression argument);
    public DbExpression get_Argument();
}
public class System.Data.Common.CommandTrees.DbUnionAllExpression : DbBinaryExpression {
    internal DbUnionAllExpression(TypeUsage resultType, DbExpression left, DbExpression right);
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DbUpdateCommandTree : DbModificationCommandTree {
    public IList`1<DbModificationClause> SetClauses { get; }
    public DbExpression Returning { get; }
    public DbExpression Predicate { get; }
    internal DbCommandTreeKind CommandTreeKind { get; }
    internal bool HasReader { get; }
    internal DbUpdateCommandTree(MetadataWorkspace metadata, DataSpace dataSpace, DbExpressionBinding target, DbExpression predicate, ReadOnlyCollection`1<DbModificationClause> setClauses, DbExpression returning);
    public IList`1<DbModificationClause> get_SetClauses();
    public DbExpression get_Returning();
    public DbExpression get_Predicate();
    internal virtual DbCommandTreeKind get_CommandTreeKind();
    internal virtual bool get_HasReader();
    internal virtual void DumpStructure(ExpressionDumper dumper);
    internal virtual string PrintTree(ExpressionPrinter printer);
}
public class System.Data.Common.CommandTrees.DbVariableReferenceExpression : DbExpression {
    public string VariableName { get; }
    internal DbVariableReferenceExpression(TypeUsage type, string name);
    public string get_VariableName();
    public virtual void Accept(DbExpressionVisitor visitor);
    public virtual TResultType Accept(DbExpressionVisitor`1<TResultType> visitor);
}
public class System.Data.Common.CommandTrees.DefaultExpressionVisitor : DbExpressionVisitor`1<DbExpression> {
    protected virtual void OnExpressionReplaced(DbExpression oldExpression, DbExpression newExpression);
    protected virtual void OnVariableRebound(DbVariableReferenceExpression fromVarRef, DbVariableReferenceExpression toVarRef);
    protected virtual void OnEnterScope(IEnumerable`1<DbVariableReferenceExpression> scopeVariables);
    protected virtual void OnExitScope();
    protected virtual DbExpression VisitExpression(DbExpression expression);
    protected virtual IList`1<DbExpression> VisitExpressionList(IList`1<DbExpression> list);
    protected virtual DbExpressionBinding VisitExpressionBinding(DbExpressionBinding binding);
    protected virtual IList`1<DbExpressionBinding> VisitExpressionBindingList(IList`1<DbExpressionBinding> list);
    protected virtual DbGroupExpressionBinding VisitGroupExpressionBinding(DbGroupExpressionBinding binding);
    protected virtual DbSortClause VisitSortClause(DbSortClause clause);
    protected virtual IList`1<DbSortClause> VisitSortOrder(IList`1<DbSortClause> sortOrder);
    protected virtual DbAggregate VisitAggregate(DbAggregate aggregate);
    protected virtual DbFunctionAggregate VisitFunctionAggregate(DbFunctionAggregate aggregate);
    protected virtual DbGroupAggregate VisitGroupAggregate(DbGroupAggregate aggregate);
    protected virtual DbLambda VisitLambda(DbLambda lambda);
    protected virtual EdmType VisitType(EdmType type);
    protected virtual TypeUsage VisitTypeUsage(TypeUsage type);
    protected virtual EntitySetBase VisitEntitySet(EntitySetBase entitySet);
    protected virtual EdmFunction VisitFunction(EdmFunction functionMetadata);
    public virtual DbExpression Visit(DbExpression expression);
    public virtual DbExpression Visit(DbConstantExpression expression);
    public virtual DbExpression Visit(DbNullExpression expression);
    public virtual DbExpression Visit(DbVariableReferenceExpression expression);
    public virtual DbExpression Visit(DbParameterReferenceExpression expression);
    public virtual DbExpression Visit(DbFunctionExpression expression);
    public virtual DbExpression Visit(DbLambdaExpression expression);
    public virtual DbExpression Visit(DbPropertyExpression expression);
    public virtual DbExpression Visit(DbComparisonExpression expression);
    public virtual DbExpression Visit(DbLikeExpression expression);
    public virtual DbExpression Visit(DbLimitExpression expression);
    public virtual DbExpression Visit(DbIsNullExpression expression);
    public virtual DbExpression Visit(DbArithmeticExpression expression);
    public virtual DbExpression Visit(DbAndExpression expression);
    public virtual DbExpression Visit(DbOrExpression expression);
    public virtual DbExpression Visit(DbNotExpression expression);
    public virtual DbExpression Visit(DbDistinctExpression expression);
    public virtual DbExpression Visit(DbElementExpression expression);
    public virtual DbExpression Visit(DbIsEmptyExpression expression);
    public virtual DbExpression Visit(DbUnionAllExpression expression);
    public virtual DbExpression Visit(DbIntersectExpression expression);
    public virtual DbExpression Visit(DbExceptExpression expression);
    public virtual DbExpression Visit(DbTreatExpression expression);
    public virtual DbExpression Visit(DbIsOfExpression expression);
    public virtual DbExpression Visit(DbCastExpression expression);
    public virtual DbExpression Visit(DbCaseExpression expression);
    public virtual DbExpression Visit(DbOfTypeExpression expression);
    public virtual DbExpression Visit(DbNewInstanceExpression expression);
    public virtual DbExpression Visit(DbRefExpression expression);
    public virtual DbExpression Visit(DbRelationshipNavigationExpression expression);
    public virtual DbExpression Visit(DbDerefExpression expression);
    public virtual DbExpression Visit(DbRefKeyExpression expression);
    public virtual DbExpression Visit(DbEntityRefExpression expression);
    public virtual DbExpression Visit(DbScanExpression expression);
    public virtual DbExpression Visit(DbFilterExpression expression);
    public virtual DbExpression Visit(DbProjectExpression expression);
    public virtual DbExpression Visit(DbCrossJoinExpression expression);
    public virtual DbExpression Visit(DbJoinExpression expression);
    public virtual DbExpression Visit(DbApplyExpression expression);
    public virtual DbExpression Visit(DbGroupByExpression expression);
    public virtual DbExpression Visit(DbSkipExpression expression);
    public virtual DbExpression Visit(DbSortExpression expression);
    public virtual DbExpression Visit(DbQuantifierExpression expression);
}
[ExtensionAttribute]
public static class System.Data.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder : object {
    public static DbConstantExpression True { get; }
    public static DbConstantExpression False { get; }
    internal static AliasGenerator AliasGenerator { get; }
    private static DbExpressionBuilder();
    [ExtensionAttribute]
public static KeyValuePair`2<string, DbExpression> As(DbExpression value, string alias);
    [ExtensionAttribute]
public static KeyValuePair`2<string, DbAggregate> As(DbAggregate value, string alias);
    [ExtensionAttribute]
public static DbExpressionBinding Bind(DbExpression input);
    [ExtensionAttribute]
public static DbExpressionBinding BindAs(DbExpression input, string varName);
    [ExtensionAttribute]
public static DbGroupExpressionBinding GroupBind(DbExpression input);
    [ExtensionAttribute]
public static DbGroupExpressionBinding GroupBindAs(DbExpression input, string varName, string groupVarName);
    [ExtensionAttribute]
public static DbFunctionAggregate Aggregate(EdmFunction function, DbExpression argument);
    [ExtensionAttribute]
public static DbFunctionAggregate AggregateDistinct(EdmFunction function, DbExpression argument);
    internal static DbGroupAggregate GroupAggregate(DbExpression argument);
    public static DbLambda Lambda(DbExpression body, IEnumerable`1<DbVariableReferenceExpression> variables);
    public static DbLambda Lambda(DbExpression body, DbVariableReferenceExpression[] variables);
    [ExtensionAttribute]
public static DbSortClause ToSortClause(DbExpression key);
    [ExtensionAttribute]
public static DbSortClause ToSortClauseDescending(DbExpression key);
    [ExtensionAttribute]
public static DbSortClause ToSortClause(DbExpression key, string collation);
    [ExtensionAttribute]
public static DbSortClause ToSortClauseDescending(DbExpression key, string collation);
    [ExtensionAttribute]
public static DbQuantifierExpression All(DbExpressionBinding input, DbExpression predicate);
    [ExtensionAttribute]
public static DbQuantifierExpression Any(DbExpressionBinding input, DbExpression predicate);
    [ExtensionAttribute]
public static DbApplyExpression CrossApply(DbExpressionBinding input, DbExpressionBinding apply);
    [ExtensionAttribute]
public static DbApplyExpression OuterApply(DbExpressionBinding input, DbExpressionBinding apply);
    public static DbCrossJoinExpression CrossJoin(IEnumerable`1<DbExpressionBinding> inputs);
    [ExtensionAttribute]
public static DbJoinExpression InnerJoin(DbExpressionBinding left, DbExpressionBinding right, DbExpression joinCondition);
    [ExtensionAttribute]
public static DbJoinExpression LeftOuterJoin(DbExpressionBinding left, DbExpressionBinding right, DbExpression joinCondition);
    [ExtensionAttribute]
public static DbJoinExpression FullOuterJoin(DbExpressionBinding left, DbExpressionBinding right, DbExpression joinCondition);
    [ExtensionAttribute]
public static DbFilterExpression Filter(DbExpressionBinding input, DbExpression predicate);
    [ExtensionAttribute]
public static DbGroupByExpression GroupBy(DbGroupExpressionBinding input, IEnumerable`1<KeyValuePair`2<string, DbExpression>> keys, IEnumerable`1<KeyValuePair`2<string, DbAggregate>> aggregates);
    [ExtensionAttribute]
public static DbProjectExpression Project(DbExpressionBinding input, DbExpression projection);
    [ExtensionAttribute]
public static DbSkipExpression Skip(DbExpressionBinding input, IEnumerable`1<DbSortClause> sortOrder, DbExpression count);
    [ExtensionAttribute]
public static DbSortExpression Sort(DbExpressionBinding input, IEnumerable`1<DbSortClause> sortOrder);
    [ExtensionAttribute]
public static DbNullExpression Null(TypeUsage nullType);
    public static DbConstantExpression get_True();
    public static DbConstantExpression get_False();
    public static DbConstantExpression Constant(object value);
    [ExtensionAttribute]
public static DbConstantExpression Constant(TypeUsage constantType, object value);
    [ExtensionAttribute]
public static DbParameterReferenceExpression Parameter(TypeUsage type, string name);
    [ExtensionAttribute]
public static DbVariableReferenceExpression Variable(TypeUsage type, string name);
    [ExtensionAttribute]
public static DbScanExpression Scan(EntitySetBase targetSet);
    [ExtensionAttribute]
public static DbAndExpression And(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbOrExpression Or(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbNotExpression Not(DbExpression argument);
    [ExtensionAttribute]
public static DbArithmeticExpression Divide(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbArithmeticExpression Minus(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbArithmeticExpression Modulo(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbArithmeticExpression Multiply(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbArithmeticExpression Plus(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbArithmeticExpression UnaryMinus(DbExpression argument);
    [ExtensionAttribute]
public static DbArithmeticExpression Negate(DbExpression argument);
    [ExtensionAttribute]
public static DbComparisonExpression Equal(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbComparisonExpression NotEqual(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbComparisonExpression GreaterThan(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbComparisonExpression LessThan(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbComparisonExpression GreaterThanOrEqual(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbComparisonExpression LessThanOrEqual(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbIsNullExpression IsNull(DbExpression argument);
    [ExtensionAttribute]
public static DbLikeExpression Like(DbExpression argument, DbExpression pattern);
    [ExtensionAttribute]
public static DbLikeExpression Like(DbExpression argument, DbExpression pattern, DbExpression escape);
    [ExtensionAttribute]
public static DbCastExpression CastTo(DbExpression argument, TypeUsage toType);
    [ExtensionAttribute]
public static DbTreatExpression TreatAs(DbExpression argument, TypeUsage treatType);
    [ExtensionAttribute]
public static DbOfTypeExpression OfType(DbExpression argument, TypeUsage type);
    [ExtensionAttribute]
public static DbOfTypeExpression OfTypeOnly(DbExpression argument, TypeUsage type);
    [ExtensionAttribute]
public static DbIsOfExpression IsOf(DbExpression argument, TypeUsage type);
    [ExtensionAttribute]
public static DbIsOfExpression IsOfOnly(DbExpression argument, TypeUsage type);
    [ExtensionAttribute]
public static DbDerefExpression Deref(DbExpression argument);
    [ExtensionAttribute]
public static DbEntityRefExpression GetEntityRef(DbExpression argument);
    [ExtensionAttribute]
public static DbRefExpression CreateRef(EntitySet entitySet, IEnumerable`1<DbExpression> keyValues);
    [ExtensionAttribute]
public static DbRefExpression CreateRef(EntitySet entitySet, DbExpression[] keyValues);
    [ExtensionAttribute]
public static DbRefExpression CreateRef(EntitySet entitySet, EntityType entityType, IEnumerable`1<DbExpression> keyValues);
    [ExtensionAttribute]
public static DbRefExpression CreateRef(EntitySet entitySet, EntityType entityType, DbExpression[] keyValues);
    [ExtensionAttribute]
public static DbRefExpression RefFromKey(EntitySet entitySet, DbExpression keyRow);
    [ExtensionAttribute]
public static DbRefExpression RefFromKey(EntitySet entitySet, DbExpression keyRow, EntityType entityType);
    [ExtensionAttribute]
public static DbRefKeyExpression GetRefKey(DbExpression argument);
    [ExtensionAttribute]
public static DbRelationshipNavigationExpression Navigate(DbExpression navigateFrom, RelationshipEndMember fromEnd, RelationshipEndMember toEnd);
    [ExtensionAttribute]
public static DbRelationshipNavigationExpression Navigate(RelationshipType type, string fromEndName, string toEndName, DbExpression navigateFrom);
    [ExtensionAttribute]
public static DbDistinctExpression Distinct(DbExpression argument);
    [ExtensionAttribute]
public static DbElementExpression Element(DbExpression argument);
    [ExtensionAttribute]
public static DbIsEmptyExpression IsEmpty(DbExpression argument);
    [ExtensionAttribute]
public static DbExceptExpression Except(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbIntersectExpression Intersect(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbUnionAllExpression UnionAll(DbExpression left, DbExpression right);
    [ExtensionAttribute]
public static DbLimitExpression Limit(DbExpression argument, DbExpression count);
    public static DbCaseExpression Case(IEnumerable`1<DbExpression> whenExpressions, IEnumerable`1<DbExpression> thenExpressions, DbExpression elseExpression);
    [ExtensionAttribute]
public static DbFunctionExpression Invoke(EdmFunction function, IEnumerable`1<DbExpression> arguments);
    [ExtensionAttribute]
public static DbFunctionExpression Invoke(EdmFunction function, DbExpression[] arguments);
    [ExtensionAttribute]
public static DbLambdaExpression Invoke(DbLambda lambda, IEnumerable`1<DbExpression> arguments);
    [ExtensionAttribute]
public static DbLambdaExpression Invoke(DbLambda lambda, DbExpression[] arguments);
    [ExtensionAttribute]
public static DbNewInstanceExpression New(TypeUsage instanceType, IEnumerable`1<DbExpression> arguments);
    [ExtensionAttribute]
public static DbNewInstanceExpression New(TypeUsage instanceType, DbExpression[] arguments);
    public static DbNewInstanceExpression NewCollection(IEnumerable`1<DbExpression> elements);
    public static DbNewInstanceExpression NewCollection(DbExpression[] elements);
    [ExtensionAttribute]
public static DbNewInstanceExpression NewEmptyCollection(TypeUsage collectionType);
    public static DbNewInstanceExpression NewRow(IEnumerable`1<KeyValuePair`2<string, DbExpression>> columnValues);
    [ExtensionAttribute]
public static DbPropertyExpression Property(DbExpression instance, EdmProperty propertyMetadata);
    [ExtensionAttribute]
public static DbPropertyExpression Property(DbExpression instance, NavigationProperty navigationProperty);
    [ExtensionAttribute]
public static DbPropertyExpression Property(DbExpression instance, RelationshipEndMember relationshipEnd);
    [ExtensionAttribute]
public static DbPropertyExpression Property(DbExpression instance, string propertyName);
    internal static String[] ExtractAliases(MethodInfo method);
    [ExtensionAttribute]
public static DbQuantifierExpression All(DbExpression source, Func`2<DbExpression, DbExpression> predicate);
    [ExtensionAttribute]
public static DbExpression Any(DbExpression source);
    [ExtensionAttribute]
public static DbExpression Exists(DbExpression argument);
    [ExtensionAttribute]
public static DbQuantifierExpression Any(DbExpression source, Func`2<DbExpression, DbExpression> predicate);
    [ExtensionAttribute]
public static DbApplyExpression CrossApply(DbExpression source, Func`2<DbExpression, KeyValuePair`2<string, DbExpression>> apply);
    [ExtensionAttribute]
public static DbApplyExpression OuterApply(DbExpression source, Func`2<DbExpression, KeyValuePair`2<string, DbExpression>> apply);
    [ExtensionAttribute]
public static DbJoinExpression FullOuterJoin(DbExpression left, DbExpression right, Func`3<DbExpression, DbExpression, DbExpression> joinCondition);
    [ExtensionAttribute]
public static DbJoinExpression InnerJoin(DbExpression left, DbExpression right, Func`3<DbExpression, DbExpression, DbExpression> joinCondition);
    [ExtensionAttribute]
public static DbJoinExpression LeftOuterJoin(DbExpression left, DbExpression right, Func`3<DbExpression, DbExpression, DbExpression> joinCondition);
    [ExtensionAttribute]
public static DbJoinExpression Join(DbExpression outer, DbExpression inner, Func`2<DbExpression, DbExpression> outerKey, Func`2<DbExpression, DbExpression> innerKey);
    [ExtensionAttribute]
public static DbProjectExpression Join(DbExpression outer, DbExpression inner, Func`2<DbExpression, DbExpression> outerKey, Func`2<DbExpression, DbExpression> innerKey, Func`3<DbExpression, DbExpression, TSelector> selector);
    [ExtensionAttribute]
public static DbSortExpression OrderBy(DbExpression source, Func`2<DbExpression, DbExpression> sortKey);
    [ExtensionAttribute]
public static DbSortExpression OrderBy(DbExpression source, Func`2<DbExpression, DbExpression> sortKey, string collation);
    [ExtensionAttribute]
public static DbSortExpression OrderByDescending(DbExpression source, Func`2<DbExpression, DbExpression> sortKey);
    [ExtensionAttribute]
public static DbSortExpression OrderByDescending(DbExpression source, Func`2<DbExpression, DbExpression> sortKey, string collation);
    [ExtensionAttribute]
public static DbProjectExpression Select(DbExpression source, Func`2<DbExpression, TProjection> projection);
    [ExtensionAttribute]
public static DbProjectExpression SelectMany(DbExpression source, Func`2<DbExpression, DbExpression> apply);
    [ExtensionAttribute]
public static DbProjectExpression SelectMany(DbExpression source, Func`2<DbExpression, DbExpression> apply, Func`3<DbExpression, DbExpression, TSelector> selector);
    [ExtensionAttribute]
public static DbSkipExpression Skip(DbSortExpression argument, DbExpression count);
    [ExtensionAttribute]
public static DbLimitExpression Take(DbExpression argument, DbExpression count);
    [ExtensionAttribute]
public static DbSortExpression ThenBy(DbSortExpression source, Func`2<DbExpression, DbExpression> sortKey);
    [ExtensionAttribute]
public static DbSortExpression ThenBy(DbSortExpression source, Func`2<DbExpression, DbExpression> sortKey, string collation);
    [ExtensionAttribute]
public static DbSortExpression ThenByDescending(DbSortExpression source, Func`2<DbExpression, DbExpression> sortKey);
    [ExtensionAttribute]
public static DbSortExpression ThenByDescending(DbSortExpression source, Func`2<DbExpression, DbExpression> sortKey, string collation);
    [ExtensionAttribute]
public static DbFilterExpression Where(DbExpression source, Func`2<DbExpression, DbExpression> predicate);
    [ExtensionAttribute]
public static DbExpression Union(DbExpression left, DbExpression right);
    internal static AliasGenerator get_AliasGenerator();
    internal static DbNullExpression CreatePrimitiveNullExpression(PrimitiveTypeKind primitiveType);
    internal static DbApplyExpression CreateApplyExpressionByKind(DbExpressionKind applyKind, DbExpressionBinding input, DbExpressionBinding apply);
    internal static DbExpression CreateJoinExpressionByKind(DbExpressionKind joinKind, DbExpression joinCondition, DbExpressionBinding input1, DbExpressionBinding input2);
    internal static DbIsNullExpression CreateIsNullExpressionAllowingRowTypeArgument(DbExpression argument);
    internal static DbElementExpression CreateElementExpressionUnwrapSingleProperty(DbExpression argument);
    internal static DbRelatedEntityRef CreateRelatedEntityRef(RelationshipEndMember sourceEnd, RelationshipEndMember targetEnd, DbExpression targetEntity);
    internal static DbNewInstanceExpression CreateNewEntityWithRelationshipsExpression(EntityType entityType, IList`1<DbExpression> attributeValues, IList`1<DbRelatedEntityRef> relationships);
    [ExtensionAttribute]
internal static DbRelationshipNavigationExpression NavigateAllowingAllRelationshipsInSameTypeHierarchy(DbExpression navigateFrom, RelationshipEndMember fromEnd, RelationshipEndMember toEnd);
    internal static DbPropertyExpression CreatePropertyExpressionFromMember(DbExpression instance, EdmMember member);
}
[ExtensionAttribute]
public static class System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions : object {
    internal static DbFunctionExpression InvokeCanonicalFunction(string functionName, DbExpression[] arguments);
    [ExtensionAttribute]
public static DbFunctionExpression Average(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Count(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression LongCount(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Max(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Min(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Sum(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression StDev(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression StDevP(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Var(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression VarP(DbExpression collection);
    [ExtensionAttribute]
public static DbFunctionExpression Concat(DbExpression string1, DbExpression string2);
    [ExtensionAttribute]
public static DbExpression Contains(DbExpression searchedString, DbExpression searchedForString);
    [ExtensionAttribute]
public static DbFunctionExpression EndsWith(DbExpression stringArgument, DbExpression suffix);
    [ExtensionAttribute]
public static DbFunctionExpression IndexOf(DbExpression searchString, DbExpression stringToFind);
    [ExtensionAttribute]
public static DbFunctionExpression Left(DbExpression stringArgument, DbExpression length);
    [ExtensionAttribute]
public static DbFunctionExpression Length(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression Replace(DbExpression stringArgument, DbExpression toReplace, DbExpression replacement);
    [ExtensionAttribute]
public static DbFunctionExpression Reverse(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression Right(DbExpression stringArgument, DbExpression length);
    [ExtensionAttribute]
public static DbFunctionExpression StartsWith(DbExpression stringArgument, DbExpression prefix);
    [ExtensionAttribute]
public static DbFunctionExpression Substring(DbExpression stringArgument, DbExpression start, DbExpression length);
    [ExtensionAttribute]
public static DbFunctionExpression ToLower(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression ToUpper(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression Trim(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression TrimEnd(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression TrimStart(DbExpression stringArgument);
    [ExtensionAttribute]
public static DbFunctionExpression Year(DbExpression dateValue);
    [ExtensionAttribute]
public static DbFunctionExpression Month(DbExpression dateValue);
    [ExtensionAttribute]
public static DbFunctionExpression Day(DbExpression dateValue);
    [ExtensionAttribute]
public static DbFunctionExpression DayOfYear(DbExpression dateValue);
    [ExtensionAttribute]
public static DbFunctionExpression Hour(DbExpression timeValue);
    [ExtensionAttribute]
public static DbFunctionExpression Minute(DbExpression timeValue);
    [ExtensionAttribute]
public static DbFunctionExpression Second(DbExpression timeValue);
    [ExtensionAttribute]
public static DbFunctionExpression Millisecond(DbExpression timeValue);
    [ExtensionAttribute]
public static DbFunctionExpression GetTotalOffsetMinutes(DbExpression dateTimeOffsetArgument);
    public static DbFunctionExpression CurrentDateTime();
    public static DbFunctionExpression CurrentDateTimeOffset();
    public static DbFunctionExpression CurrentUtcDateTime();
    [ExtensionAttribute]
public static DbFunctionExpression TruncateTime(DbExpression dateValue);
    public static DbFunctionExpression CreateDateTime(DbExpression year, DbExpression month, DbExpression day, DbExpression hour, DbExpression minute, DbExpression second);
    public static DbFunctionExpression CreateDateTimeOffset(DbExpression year, DbExpression month, DbExpression day, DbExpression hour, DbExpression minute, DbExpression second, DbExpression timeZoneOffset);
    public static DbFunctionExpression CreateTime(DbExpression hour, DbExpression minute, DbExpression second);
    [ExtensionAttribute]
public static DbFunctionExpression AddYears(DbExpression dateValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddMonths(DbExpression dateValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddDays(DbExpression dateValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddHours(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddMinutes(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddSeconds(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddMilliseconds(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddMicroseconds(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression AddNanoseconds(DbExpression timeValue, DbExpression addValue);
    [ExtensionAttribute]
public static DbFunctionExpression DiffYears(DbExpression dateValue1, DbExpression dateValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffMonths(DbExpression dateValue1, DbExpression dateValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffDays(DbExpression dateValue1, DbExpression dateValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffHours(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffMinutes(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffSeconds(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffMilliseconds(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffMicroseconds(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression DiffNanoseconds(DbExpression timeValue1, DbExpression timeValue2);
    [ExtensionAttribute]
public static DbFunctionExpression Round(DbExpression value);
    [ExtensionAttribute]
public static DbFunctionExpression Round(DbExpression value, DbExpression digits);
    [ExtensionAttribute]
public static DbFunctionExpression Floor(DbExpression value);
    [ExtensionAttribute]
public static DbFunctionExpression Ceiling(DbExpression value);
    [ExtensionAttribute]
public static DbFunctionExpression Abs(DbExpression value);
    [ExtensionAttribute]
public static DbFunctionExpression Truncate(DbExpression value, DbExpression digits);
    [ExtensionAttribute]
public static DbFunctionExpression Power(DbExpression baseArgument, DbExpression exponent);
    [ExtensionAttribute]
public static DbFunctionExpression BitwiseAnd(DbExpression value1, DbExpression value2);
    [ExtensionAttribute]
public static DbFunctionExpression BitwiseOr(DbExpression value1, DbExpression value2);
    [ExtensionAttribute]
public static DbFunctionExpression BitwiseNot(DbExpression value);
    [ExtensionAttribute]
public static DbFunctionExpression BitwiseXor(DbExpression value1, DbExpression value2);
    public static DbFunctionExpression NewGuid();
}
internal static class System.Data.Common.CommandTrees.ExpressionBuilder.Internal.ArgumentValidation : object {
    private static ArgumentValidation();
    internal static ReadOnlyCollection`1<TElement> NewReadOnlyCollection(IList`1<TElement> list);
    internal static TypeUsage ValidateBindAs(DbExpression input, string varName);
    internal static TypeUsage ValidateGroupBindAs(DbExpression input, string varName, string groupVarName);
    internal static DbExpressionList ValidateFunctionAggregate(EdmFunction function, IEnumerable`1<DbExpression> args);
    internal static DbExpressionList ValidateGroupAggregate(DbExpression argument);
    internal static void ValidateSortClause(DbExpression key);
    internal static void ValidateSortClause(DbExpression key, string collation);
    internal static ReadOnlyCollection`1<DbVariableReferenceExpression> ValidateLambda(IEnumerable`1<DbVariableReferenceExpression> variables, DbExpression body);
    internal static TypeUsage ValidateQuantifier(DbExpressionBinding input, DbExpression predicate);
    internal static TypeUsage ValidateApply(DbExpressionBinding input, DbExpressionBinding apply);
    internal static ReadOnlyCollection`1<DbExpressionBinding> ValidateCrossJoin(IEnumerable`1<DbExpressionBinding> inputs, TypeUsage& resultType);
    internal static TypeUsage ValidateJoin(DbExpressionBinding left, DbExpressionBinding right, DbExpression joinCondition);
    internal static TypeUsage ValidateFilter(DbExpressionBinding input, DbExpression predicate);
    internal static TypeUsage ValidateGroupBy(DbGroupExpressionBinding input, IEnumerable`1<KeyValuePair`2<string, DbExpression>> keys, IEnumerable`1<KeyValuePair`2<string, DbAggregate>> aggregates, DbExpressionList& validKeys, ReadOnlyCollection`1& validAggregates);
    internal static TypeUsage ValidateProject(DbExpressionBinding input, DbExpression projection);
    internal static ReadOnlyCollection`1<DbSortClause> ValidateSkip(DbExpressionBinding input, IEnumerable`1<DbSortClause> sortOrder, DbExpression count);
    internal static ReadOnlyCollection`1<DbSortClause> ValidateSort(DbExpressionBinding input, IEnumerable`1<DbSortClause> sortOrder);
    internal static void ValidateNull(TypeUsage nullType);
    internal static TypeUsage ValidateConstant(object value);
    internal static void ValidateConstant(TypeUsage constantType, object value);
    internal static void ValidateParameter(TypeUsage type, string name);
    internal static TypeUsage ValidateScan(EntitySetBase entitySet);
    internal static void ValidateVariable(TypeUsage type, string name);
    internal static TypeUsage ValidateAnd(DbExpression left, DbExpression right);
    internal static TypeUsage ValidateOr(DbExpression left, DbExpression right);
    internal static TypeUsage ValidateNot(DbExpression argument);
    internal static DbExpressionList ValidateArithmetic(DbExpression argument, TypeUsage& resultType);
    internal static DbExpressionList ValidateArithmetic(DbExpression left, DbExpression right, TypeUsage& resultType);
    internal static TypeUsage ValidateComparison(DbExpressionKind kind, DbExpression left, DbExpression right);
    internal static TypeUsage ValidateIsNull(DbExpression argument);
    internal static TypeUsage ValidateIsNull(DbExpression argument, bool allowRowType);
    internal static TypeUsage ValidateLike(DbExpression argument, DbExpression pattern);
    internal static TypeUsage ValidateLike(DbExpression argument, DbExpression pattern, DbExpression escape);
    internal static void ValidateCastTo(DbExpression argument, TypeUsage toType);
    internal static void ValidateTreatAs(DbExpression argument, TypeUsage asType);
    internal static TypeUsage ValidateOfType(DbExpression argument, TypeUsage type);
    internal static TypeUsage ValidateIsOf(DbExpression argument, TypeUsage type);
    internal static TypeUsage ValidateDeref(DbExpression argument);
    internal static TypeUsage ValidateGetEntityRef(DbExpression argument);
    internal static TypeUsage ValidateCreateRef(EntitySet entitySet, IEnumerable`1<DbExpression> keyValues, DbExpression& keyConstructor);
    internal static TypeUsage ValidateCreateRef(EntitySet entitySet, EntityType entityType, IEnumerable`1<DbExpression> keyValues, DbExpression& keyConstructor);
    internal static TypeUsage ValidateRefFromKey(EntitySet entitySet, DbExpression keyValues);
    internal static TypeUsage ValidateRefFromKey(EntitySet entitySet, DbExpression keyValues, EntityType entityType);
    internal static TypeUsage ValidateGetRefKey(DbExpression argument);
    internal static TypeUsage ValidateNavigate(DbExpression navigateFrom, RelationshipType type, string fromEndName, string toEndName, RelationshipEndMember& fromEnd, RelationshipEndMember& toEnd);
    internal static TypeUsage ValidateNavigate(DbExpression navigateFrom, RelationshipEndMember fromEnd, RelationshipEndMember toEnd, RelationshipType& relType, bool allowAllRelationshipsInSameTypeHierarchy);
    internal static TypeUsage ValidateDistinct(DbExpression argument);
    internal static TypeUsage ValidateElement(DbExpression argument);
    internal static TypeUsage ValidateIsEmpty(DbExpression argument);
    internal static TypeUsage ValidateExcept(DbExpression left, DbExpression right);
    internal static TypeUsage ValidateIntersect(DbExpression left, DbExpression right);
    internal static TypeUsage ValidateUnionAll(DbExpression left, DbExpression right);
    internal static TypeUsage ValidateLimit(DbExpression argument, DbExpression limit);
    internal static TypeUsage ValidateCase(IEnumerable`1<DbExpression> whenExpressions, IEnumerable`1<DbExpression> thenExpressions, DbExpression elseExpression, DbExpressionList& validWhens, DbExpressionList& validThens);
    internal static TypeUsage ValidateFunction(EdmFunction function, IEnumerable`1<DbExpression> arguments, DbExpressionList& validArgs);
    internal static TypeUsage ValidateInvoke(DbLambda lambda, IEnumerable`1<DbExpression> arguments, DbExpressionList& validArguments);
    internal static TypeUsage ValidateNewCollection(IEnumerable`1<DbExpression> elements, DbExpressionList& validElements);
    internal static TypeUsage ValidateNewEmptyCollection(TypeUsage collectionType, DbExpressionList& validElements);
    internal static TypeUsage ValidateNewRow(IEnumerable`1<KeyValuePair`2<string, DbExpression>> columnValues, DbExpressionList& validElements);
    internal static TypeUsage ValidateNew(TypeUsage instanceType, IEnumerable`1<DbExpression> arguments, DbExpressionList& validArguments);
    internal static TypeUsage ValidateNewEntityWithRelationships(EntityType entityType, IEnumerable`1<DbExpression> attributeValues, IList`1<DbRelatedEntityRef> relationships, DbExpressionList& validArguments, ReadOnlyCollection`1& validRelatedRefs);
    internal static TypeUsage ValidateProperty(DbExpression instance, EdmMember property, string propertyArgumentName);
    internal static TypeUsage ValidateProperty(DbExpression instance, string propertyName, bool ignoreCase, EdmMember& foundMember);
}
internal class System.Data.Common.CommandTrees.ExpressionBuilder.Internal.EnumerableValidator`3 : object {
    public bool AllowEmpty { get; public set; }
    public int ExpectedElementCount { get; public set; }
    public Func`3<TElementIn, int, TElementOut> ConvertElement { get; public set; }
    public Func`2<List`1<TElementOut>, TResult> CreateResult { get; public set; }
    public Func`3<TElementIn, int, string> GetName { get; public set; }
    internal EnumerableValidator`3(IEnumerable`1<TElementIn> argument, string argumentName);
    public bool get_AllowEmpty();
    public void set_AllowEmpty(bool value);
    public int get_ExpectedElementCount();
    public void set_ExpectedElementCount(int value);
    public Func`3<TElementIn, int, TElementOut> get_ConvertElement();
    public void set_ConvertElement(Func`3<TElementIn, int, TElementOut> value);
    public Func`2<List`1<TElementOut>, TResult> get_CreateResult();
    public void set_CreateResult(Func`2<List`1<TElementOut>, TResult> value);
    public Func`3<TElementIn, int, string> get_GetName();
    public void set_GetName(Func`3<TElementIn, int, string> value);
    internal TResult Validate();
}
public class System.Data.Common.CommandTrees.ExpressionBuilder.Row : object {
    public Row(KeyValuePair`2<string, DbExpression> columnValue, KeyValuePair`2[] columnValues);
    public DbNewInstanceExpression ToExpression();
    public static DbExpression op_Implicit(Row row);
}
[ExtensionAttribute]
public static class System.Data.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions : object {
    public static DbFunctionExpression GeometryFromText(DbExpression wellKnownText);
    public static DbFunctionExpression GeometryFromText(DbExpression wellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryPointFromText(DbExpression pointWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryLineFromText(DbExpression lineWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryPolygonFromText(DbExpression polygonWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiPointFromText(DbExpression multiPointWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiLineFromText(DbExpression multiLineWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiPolygonFromText(DbExpression multiPolygonWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryCollectionFromText(DbExpression geometryCollectionWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryFromBinary(DbExpression wellKnownBinaryValue);
    public static DbFunctionExpression GeometryFromBinary(DbExpression wellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryPointFromBinary(DbExpression pointWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryLineFromBinary(DbExpression lineWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryPolygonFromBinary(DbExpression polygonWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiPointFromBinary(DbExpression multiPointWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiLineFromBinary(DbExpression multiLineWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryMultiPolygonFromBinary(DbExpression multiPolygonWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryCollectionFromBinary(DbExpression geometryCollectionWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeometryFromGml(DbExpression geometryMarkup);
    public static DbFunctionExpression GeometryFromGml(DbExpression geometryMarkup, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyFromText(DbExpression wellKnownText);
    public static DbFunctionExpression GeographyFromText(DbExpression wellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyPointFromText(DbExpression pointWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyLineFromText(DbExpression lineWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyPolygonFromText(DbExpression polygonWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiPointFromText(DbExpression multiPointWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiLineFromText(DbExpression multiLineWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiPolygonFromText(DbExpression multiPolygonWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyCollectionFromText(DbExpression geographyCollectionWellKnownText, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyFromBinary(DbExpression wellKnownBinaryValue);
    public static DbFunctionExpression GeographyFromBinary(DbExpression wellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyPointFromBinary(DbExpression pointWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyLineFromBinary(DbExpression lineWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyPolygonFromBinary(DbExpression polygonWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiPointFromBinary(DbExpression multiPointWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiLineFromBinary(DbExpression multiLineWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyMultiPolygonFromBinary(DbExpression multiPolygonWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyCollectionFromBinary(DbExpression geographyCollectionWellKnownBinaryValue, DbExpression coordinateSystemId);
    public static DbFunctionExpression GeographyFromGml(DbExpression geographyMarkup);
    public static DbFunctionExpression GeographyFromGml(DbExpression geographyMarkup, DbExpression coordinateSystemId);
    [ExtensionAttribute]
public static DbFunctionExpression CoordinateSystemId(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialTypeName(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialDimension(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialEnvelope(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression AsBinary(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression AsGml(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression AsText(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression IsEmptySpatial(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression IsSimpleGeometry(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialBoundary(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression IsValidGeometry(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialEquals(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialDisjoint(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialIntersects(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialTouches(DbExpression geometryValue1, DbExpression geometryValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialCrosses(DbExpression geometryValue1, DbExpression geometryValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialWithin(DbExpression geometryValue1, DbExpression geometryValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialContains(DbExpression geometryValue1, DbExpression geometryValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialOverlaps(DbExpression geometryValue1, DbExpression geometryValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialRelate(DbExpression geometryValue1, DbExpression geometryValue2, DbExpression intersectionPatternMatrix);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialBuffer(DbExpression spatialValue, DbExpression distance);
    [ExtensionAttribute]
public static DbFunctionExpression Distance(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialConvexHull(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialIntersection(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialUnion(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialDifference(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialSymmetricDifference(DbExpression spatialValue1, DbExpression spatialValue2);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialElementCount(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialElementAt(DbExpression spatialValue, DbExpression indexValue);
    [ExtensionAttribute]
public static DbFunctionExpression XCoordinate(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression YCoordinate(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression Elevation(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression Measure(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression Latitude(DbExpression geographyValue);
    [ExtensionAttribute]
public static DbFunctionExpression Longitude(DbExpression geographyValue);
    [ExtensionAttribute]
public static DbFunctionExpression SpatialLength(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression StartPoint(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression EndPoint(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression IsClosedSpatial(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression IsRing(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression PointCount(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression PointAt(DbExpression spatialValue, DbExpression indexValue);
    [ExtensionAttribute]
public static DbFunctionExpression Area(DbExpression spatialValue);
    [ExtensionAttribute]
public static DbFunctionExpression Centroid(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression PointOnSurface(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression ExteriorRing(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression InteriorRingCount(DbExpression geometryValue);
    [ExtensionAttribute]
public static DbFunctionExpression InteriorRingAt(DbExpression geometryValue, DbExpression indexValue);
}
internal class System.Data.Common.CommandTrees.Internal.DbExpressionList : ReadOnlyCollection`1<DbExpression> {
    internal DbExpressionList(IList`1<DbExpression> elements);
}
internal class System.Data.Common.CommandTrees.Internal.DbExpressionRebinder : DefaultExpressionVisitor {
    protected DbExpressionRebinder(MetadataWorkspace targetWorkspace);
    internal static DbExpression BindToWorkspace(DbExpression expression, MetadataWorkspace targetWorkspace);
    protected virtual EntitySetBase VisitEntitySet(EntitySetBase entitySet);
    protected virtual EdmFunction VisitFunction(EdmFunction function);
    protected virtual EdmType VisitType(EdmType type);
    protected virtual TypeUsage VisitTypeUsage(TypeUsage type);
    public virtual DbExpression Visit(DbPropertyExpression expression);
}
internal abstract class System.Data.Common.CommandTrees.Internal.DbExpressionRule : object {
    internal ProcessedAction OnExpressionProcessed { get; }
    internal abstract virtual bool ShouldProcess(DbExpression expression);
    internal abstract virtual bool TryProcess(DbExpression expression, DbExpression& result);
    internal abstract virtual ProcessedAction get_OnExpressionProcessed();
}
internal abstract class System.Data.Common.CommandTrees.Internal.DbExpressionRuleProcessingVisitor : DefaultExpressionVisitor {
    protected abstract virtual IEnumerable`1<DbExpressionRule> GetRules();
    protected virtual DbExpression VisitExpression(DbExpression expression);
}
internal class System.Data.Common.CommandTrees.Internal.DbExpressionValidator : DbExpressionRebinder {
    internal Dictionary`2<string, DbParameterReferenceExpression> Parameters { get; }
    internal DbExpressionValidator(MetadataWorkspace metadata, DataSpace expectedDataSpace);
    internal Dictionary`2<string, DbParameterReferenceExpression> get_Parameters();
    internal void ValidateExpression(DbExpression expression, string argumentName);
    protected virtual EntitySetBase VisitEntitySet(EntitySetBase entitySet);
    protected virtual EdmFunction VisitFunction(EdmFunction function);
    protected virtual EdmType VisitType(EdmType type);
    protected virtual TypeUsage VisitTypeUsage(TypeUsage type);
    protected virtual void OnEnterScope(IEnumerable`1<DbVariableReferenceExpression> scopeVariables);
    protected virtual void OnExitScope();
    public virtual DbExpression Visit(DbVariableReferenceExpression expression);
    public virtual DbExpression Visit(DbParameterReferenceExpression expression);
}
internal abstract class System.Data.Common.CommandTrees.Internal.ExpressionDumper : DbExpressionVisitor {
    internal void Begin(string name);
    internal abstract virtual void Begin(string name, Dictionary`2<string, object> attrs);
    internal abstract virtual void End(string name);
    internal void Dump(DbExpression target);
    internal void Dump(DbExpression e, string name);
    internal void Dump(DbExpressionBinding binding, string name);
    internal void Dump(DbExpressionBinding binding);
    internal void Dump(DbGroupExpressionBinding binding, string name);
    internal void Dump(DbGroupExpressionBinding binding);
    internal void Dump(IEnumerable`1<DbExpression> exprs, string pluralName, string singularName);
    internal void Dump(IEnumerable`1<FunctionParameter> paramList);
    internal void Dump(TypeUsage type, string name);
    internal void Dump(TypeUsage type);
    internal void Dump(EdmType type, string name);
    internal void Dump(EdmType type);
    internal void Dump(RelationshipType type, string name);
    internal void Dump(RelationshipType type);
    internal void Dump(EdmFunction function);
    internal void Dump(EdmProperty prop);
    internal void Dump(RelationshipEndMember end, string name);
    internal void Dump(NavigationProperty navProp, string name);
    internal void Dump(DbLambda lambda);
    public virtual void Visit(DbExpression e);
    public virtual void Visit(DbConstantExpression e);
    public virtual void Visit(DbNullExpression e);
    public virtual void Visit(DbVariableReferenceExpression e);
    public virtual void Visit(DbParameterReferenceExpression e);
    public virtual void Visit(DbFunctionExpression e);
    public virtual void Visit(DbLambdaExpression expression);
    public virtual void Visit(DbPropertyExpression e);
    public virtual void Visit(DbComparisonExpression e);
    public virtual void Visit(DbLikeExpression e);
    public virtual void Visit(DbLimitExpression e);
    public virtual void Visit(DbIsNullExpression e);
    public virtual void Visit(DbArithmeticExpression e);
    public virtual void Visit(DbAndExpression e);
    public virtual void Visit(DbOrExpression e);
    public virtual void Visit(DbNotExpression e);
    public virtual void Visit(DbDistinctExpression e);
    public virtual void Visit(DbElementExpression e);
    public virtual void Visit(DbIsEmptyExpression e);
    public virtual void Visit(DbUnionAllExpression e);
    public virtual void Visit(DbIntersectExpression e);
    public virtual void Visit(DbExceptExpression e);
    public virtual void Visit(DbTreatExpression e);
    public virtual void Visit(DbIsOfExpression e);
    public virtual void Visit(DbCastExpression e);
    public virtual void Visit(DbCaseExpression e);
    public virtual void Visit(DbOfTypeExpression e);
    public virtual void Visit(DbNewInstanceExpression e);
    public virtual void Visit(DbRelationshipNavigationExpression e);
    public virtual void Visit(DbRefExpression e);
    public virtual void Visit(DbDerefExpression e);
    public virtual void Visit(DbRefKeyExpression e);
    public virtual void Visit(DbEntityRefExpression e);
    public virtual void Visit(DbScanExpression e);
    public virtual void Visit(DbFilterExpression e);
    public virtual void Visit(DbProjectExpression e);
    public virtual void Visit(DbCrossJoinExpression e);
    public virtual void Visit(DbJoinExpression e);
    public virtual void Visit(DbApplyExpression e);
    public virtual void Visit(DbGroupByExpression e);
    protected virtual void Dump(IList`1<DbSortClause> sortOrder);
    public virtual void Visit(DbSkipExpression e);
    public virtual void Visit(DbSortExpression e);
    public virtual void Visit(DbQuantifierExpression e);
}
internal class System.Data.Common.CommandTrees.Internal.ExpressionKeyGen : DbExpressionVisitor {
    private static ExpressionKeyGen();
    internal static bool TryGenerateKey(DbExpression tree, String& key);
    public virtual void Visit(DbExpression e);
    public virtual void Visit(DbConstantExpression e);
    public virtual void Visit(DbNullExpression e);
    public virtual void Visit(DbVariableReferenceExpression e);
    public virtual void Visit(DbParameterReferenceExpression e);
    public virtual void Visit(DbFunctionExpression e);
    public virtual void Visit(DbLambdaExpression expression);
    public virtual void Visit(DbPropertyExpression e);
    public virtual void Visit(DbComparisonExpression e);
    public virtual void Visit(DbLikeExpression e);
    public virtual void Visit(DbLimitExpression e);
    public virtual void Visit(DbIsNullExpression e);
    public virtual void Visit(DbArithmeticExpression e);
    public virtual void Visit(DbAndExpression e);
    public virtual void Visit(DbOrExpression e);
    public virtual void Visit(DbNotExpression e);
    public virtual void Visit(DbDistinctExpression e);
    public virtual void Visit(DbElementExpression e);
    public virtual void Visit(DbIsEmptyExpression e);
    public virtual void Visit(DbUnionAllExpression e);
    public virtual void Visit(DbIntersectExpression e);
    public virtual void Visit(DbExceptExpression e);
    public virtual void Visit(DbTreatExpression e);
    public virtual void Visit(DbCastExpression e);
    public virtual void Visit(DbIsOfExpression e);
    public virtual void Visit(DbOfTypeExpression e);
    public virtual void Visit(DbCaseExpression e);
    public virtual void Visit(DbNewInstanceExpression e);
    public virtual void Visit(DbRefExpression e);
    public virtual void Visit(DbRelationshipNavigationExpression e);
    public virtual void Visit(DbDerefExpression e);
    public virtual void Visit(DbRefKeyExpression e);
    public virtual void Visit(DbEntityRefExpression e);
    public virtual void Visit(DbScanExpression e);
    public virtual void Visit(DbFilterExpression e);
    public virtual void Visit(DbProjectExpression e);
    public virtual void Visit(DbCrossJoinExpression e);
    public virtual void Visit(DbJoinExpression e);
    public virtual void Visit(DbApplyExpression e);
    public virtual void Visit(DbGroupByExpression e);
    public virtual void Visit(DbSkipExpression e);
    public virtual void Visit(DbSortExpression e);
    public virtual void Visit(DbQuantifierExpression e);
}
internal class System.Data.Common.CommandTrees.Internal.ExpressionPrinter : TreePrinter {
    internal string Print(DbExpression expr);
    internal string Print(DbDeleteCommandTree tree);
    internal string Print(DbFunctionCommandTree tree);
    internal string Print(DbInsertCommandTree tree);
    internal string Print(DbUpdateCommandTree tree);
    internal string Print(DbQueryCommandTree tree);
}
internal class System.Data.Common.CommandTrees.Internal.ParameterRetriever : BasicCommandTreeVisitor {
    internal static ReadOnlyCollection`1<DbParameterReferenceExpression> GetParameters(DbCommandTree tree);
    public virtual void Visit(DbParameterReferenceExpression expression);
}
internal class System.Data.Common.CommandTrees.Internal.PatternMatchRule : DbExpressionRule {
    internal ProcessedAction OnExpressionProcessed { get; }
    internal virtual bool ShouldProcess(DbExpression expression);
    internal virtual bool TryProcess(DbExpression expression, DbExpression& result);
    internal virtual ProcessedAction get_OnExpressionProcessed();
    internal static PatternMatchRule Create(Func`2<DbExpression, bool> matchFunc, Func`2<DbExpression, DbExpression> processor);
    internal static PatternMatchRule Create(Func`2<DbExpression, bool> matchFunc, Func`2<DbExpression, DbExpression> processor, ProcessedAction onProcessed);
}
internal class System.Data.Common.CommandTrees.Internal.PatternMatchRuleProcessor : DbExpressionRuleProcessingVisitor {
    protected virtual IEnumerable`1<DbExpressionRule> GetRules();
    internal static Func`2<DbExpression, DbExpression> Create(PatternMatchRule[] rules);
}
internal static class System.Data.Common.CommandTrees.Internal.Patterns : object {
    internal static Func`2<DbExpression, bool> AnyExpression { get; }
    internal static Func`2<IEnumerable`1<DbExpression>, bool> AnyExpressions { get; }
    internal static Func`2<DbExpression, bool> MatchComplexType { get; }
    internal static Func`2<DbExpression, bool> MatchEntityType { get; }
    internal static Func`2<DbExpression, bool> MatchRowType { get; }
    internal static Func`2<DbExpression, bool> And(Func`2<DbExpression, bool> pattern1, Func`2<DbExpression, bool> pattern2);
    internal static Func`2<DbExpression, bool> And(Func`2<DbExpression, bool> pattern1, Func`2<DbExpression, bool> pattern2, Func`2<DbExpression, bool> pattern3);
    internal static Func`2<DbExpression, bool> Or(Func`2<DbExpression, bool> pattern1, Func`2<DbExpression, bool> pattern2);
    internal static Func`2<DbExpression, bool> Or(Func`2<DbExpression, bool> pattern1, Func`2<DbExpression, bool> pattern2, Func`2<DbExpression, bool> pattern3);
    internal static Func`2<DbExpression, bool> get_AnyExpression();
    internal static Func`2<IEnumerable`1<DbExpression>, bool> get_AnyExpressions();
    internal static Func`2<DbExpression, bool> get_MatchComplexType();
    internal static Func`2<DbExpression, bool> get_MatchEntityType();
    internal static Func`2<DbExpression, bool> get_MatchRowType();
    internal static Func`2<DbExpression, bool> MatchKind(DbExpressionKind kindToMatch);
    internal static Func`2<IEnumerable`1<DbExpression>, bool> MatchForAll(Func`2<DbExpression, bool> elementPattern);
    internal static Func`2<DbExpression, bool> MatchBinary();
    internal static Func`2<DbExpression, bool> MatchFilter(Func`2<DbExpression, bool> inputPattern, Func`2<DbExpression, bool> predicatePattern);
    internal static Func`2<DbExpression, bool> MatchProject(Func`2<DbExpression, bool> inputPattern, Func`2<DbExpression, bool> projectionPattern);
    internal static Func`2<DbExpression, bool> MatchCase(Func`2<IEnumerable`1<DbExpression>, bool> whenPattern, Func`2<IEnumerable`1<DbExpression>, bool> thenPattern, Func`2<DbExpression, bool> elsePattern);
    internal static Func`2<DbExpression, bool> MatchNewInstance();
    internal static Func`2<DbExpression, bool> MatchNewInstance(Func`2<IEnumerable`1<DbExpression>, bool> argumentsPattern);
}
internal class System.Data.Common.CommandTrees.Internal.ViewSimplifier : object {
    private static ViewSimplifier();
    internal static DbQueryCommandTree SimplifyView(EntitySetBase extent, DbQueryCommandTree view);
    internal static IEnumerable`1<DbExpression> FlattenOr(DbExpression expression);
    internal static bool TryMatchDiscriminatorPredicate(DbFilterExpression filter, Action`2<DbComparisonExpression, object> onMatchedComparison);
    internal static bool TryMatchPropertyEqualsValue(DbExpression expression, string propertyVariable, DbPropertyExpression& property, Object& value);
}
internal class System.Data.Common.CommandTrees.Internal.XmlExpressionDumper : ExpressionDumper {
    internal static Encoding DefaultEncoding { get; }
    internal XmlExpressionDumper(Stream stream);
    internal XmlExpressionDumper(Stream stream, Encoding encoding, bool indent);
    internal static Encoding get_DefaultEncoding();
    internal void Close();
    internal virtual void Begin(string name, Dictionary`2<string, object> attrs);
    internal virtual void End(string name);
}
public class System.Data.Common.DataRecordInfo : object {
    public ReadOnlyCollection`1<FieldMetadata> FieldMetadata { get; }
    public TypeUsage RecordType { get; }
    public DataRecordInfo(TypeUsage metadata, IEnumerable`1<EdmMember> memberInfo);
    internal DataRecordInfo(TypeUsage metadata);
    internal DataRecordInfo(DataRecordInfo recordInfo);
    public ReadOnlyCollection`1<FieldMetadata> get_FieldMetadata();
    public TypeUsage get_RecordType();
}
public class System.Data.Common.DbCommandDefinition : object {
    protected DbCommandDefinition(DbCommand prototype);
    internal static DbCommandDefinition CreateCommandDefinition(DbCommand prototype);
    public virtual DbCommand CreateCommand();
    internal static void PopulateParameterFromTypeUsage(DbParameter parameter, TypeUsage type, bool isOutParam);
    internal static bool TryGetDbTypeFromPrimitiveType(PrimitiveType type, DbType& dbType);
}
public abstract class System.Data.Common.DbProviderManifest : object {
    internal static string MaxLengthFacetName;
    internal static string UnicodeFacetName;
    internal static string FixedLengthFacetName;
    internal static string PrecisionFacetName;
    internal static string ScaleFacetName;
    internal static string NullableFacetName;
    internal static string DefaultValueFacetName;
    internal static string CollationFacetName;
    internal static string SridFacetName;
    internal static string IsStrictFacetName;
    public static string StoreSchemaDefinition;
    public static string StoreSchemaMapping;
    public static string ConceptualSchemaDefinition;
    public static string StoreSchemaDefinitionVersion3;
    public static string StoreSchemaMappingVersion3;
    public static string ConceptualSchemaDefinitionVersion3;
    public string NamespaceName { get; }
    private static DbProviderManifest();
    public abstract virtual string get_NamespaceName();
    public abstract virtual ReadOnlyCollection`1<PrimitiveType> GetStoreTypes();
    public abstract virtual ReadOnlyCollection`1<EdmFunction> GetStoreFunctions();
    public abstract virtual ReadOnlyCollection`1<FacetDescription> GetFacetDescriptions(EdmType edmType);
    public abstract virtual TypeUsage GetEdmType(TypeUsage storeType);
    public abstract virtual TypeUsage GetStoreType(TypeUsage edmType);
    protected abstract virtual XmlReader GetDbInformation(string informationType);
    public XmlReader GetInformation(string informationType);
    public virtual bool SupportsEscapingLikeArgument(Char& escapeCharacter);
    public virtual string EscapeLikeArgument(string argument);
}
[CLSCompliantAttribute("False")]
public abstract class System.Data.Common.DbProviderServices : object {
    public DbCommandDefinition CreateCommandDefinition(DbCommandTree commandTree);
    public DbCommandDefinition CreateCommandDefinition(DbProviderManifest providerManifest, DbCommandTree commandTree);
    protected abstract virtual DbCommandDefinition CreateDbCommandDefinition(DbProviderManifest providerManifest, DbCommandTree commandTree);
    internal virtual void ValidateDataSpace(DbCommandTree commandTree);
    internal virtual DbCommand CreateCommand(DbCommandTree commandTree);
    public virtual DbCommandDefinition CreateCommandDefinition(DbCommand prototype);
    public string GetProviderManifestToken(DbConnection connection);
    protected abstract virtual string GetDbProviderManifestToken(DbConnection connection);
    public DbProviderManifest GetProviderManifest(string manifestToken);
    protected abstract virtual DbProviderManifest GetDbProviderManifest(string manifestToken);
    public DbSpatialDataReader GetSpatialDataReader(DbDataReader fromReader, string manifestToken);
    public DbSpatialServices GetSpatialServices(string manifestToken);
    protected virtual DbSpatialDataReader GetDbSpatialDataReader(DbDataReader fromReader, string manifestToken);
    protected virtual DbSpatialServices DbGetSpatialServices(string manifestToken);
    internal void SetParameterValue(DbParameter parameter, TypeUsage parameterType, object value);
    protected virtual void SetDbParameterValue(DbParameter parameter, TypeUsage parameterType, object value);
    public static DbProviderServices GetProviderServices(DbConnection connection);
    internal static DbProviderFactory GetProviderFactory(string providerInvariantName);
    public static DbProviderFactory GetProviderFactory(DbConnection connection);
    internal static DbProviderServices GetProviderServices(DbProviderFactory factory);
    internal static XmlReader GetConceptualSchemaDefinition(string csdlName);
    internal static XmlReader GetXmlResource(string resourceName);
    public string CreateDatabaseScript(string providerManifestToken, StoreItemCollection storeItemCollection);
    protected virtual string DbCreateDatabaseScript(string providerManifestToken, StoreItemCollection storeItemCollection);
    public void CreateDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    protected virtual void DbCreateDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    public bool DatabaseExists(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    protected virtual bool DbDatabaseExists(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    public void DeleteDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    protected virtual void DbDeleteDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
}
public abstract class System.Data.Common.DbXmlEnabledProviderManifest : DbProviderManifest {
    public string NamespaceName { get; }
    protected Dictionary`2<string, PrimitiveType> StoreTypeNameToEdmPrimitiveType { get; }
    protected Dictionary`2<string, PrimitiveType> StoreTypeNameToStorePrimitiveType { get; }
    protected DbXmlEnabledProviderManifest(XmlReader reader);
    public virtual string get_NamespaceName();
    protected Dictionary`2<string, PrimitiveType> get_StoreTypeNameToEdmPrimitiveType();
    protected Dictionary`2<string, PrimitiveType> get_StoreTypeNameToStorePrimitiveType();
    public virtual ReadOnlyCollection`1<FacetDescription> GetFacetDescriptions(EdmType type);
    public virtual ReadOnlyCollection`1<PrimitiveType> GetStoreTypes();
    public virtual ReadOnlyCollection`1<EdmFunction> GetStoreFunctions();
}
public class System.Data.Common.EntityRecordInfo : DataRecordInfo {
    public EntityKey EntityKey { get; }
    public EntityRecordInfo(EntityType metadata, IEnumerable`1<EdmMember> memberInfo, EntityKey entityKey, EntitySet entitySet);
    internal EntityRecordInfo(EntityType metadata, EntityKey entityKey, EntitySet entitySet);
    internal EntityRecordInfo(DataRecordInfo info, EntityKey entityKey, EntitySet entitySet);
    public EntityKey get_EntityKey();
}
internal class System.Data.Common.EntitySql.AST.AliasedExpr : Node {
    internal Node Expr { get; }
    internal Identifier Alias { get; }
    internal AliasedExpr(Node expr, Identifier alias);
    internal AliasedExpr(Node expr);
    internal Node get_Expr();
    internal Identifier get_Alias();
}
internal class System.Data.Common.EntitySql.AST.ApplyClauseItem : Node {
    internal FromClauseItem LeftExpr { get; }
    internal FromClauseItem RightExpr { get; }
    internal ApplyKind ApplyKind { get; }
    internal ApplyClauseItem(FromClauseItem applyLeft, FromClauseItem applyRight, ApplyKind applyKind);
    internal FromClauseItem get_LeftExpr();
    internal FromClauseItem get_RightExpr();
    internal ApplyKind get_ApplyKind();
}
internal enum System.Data.Common.EntitySql.AST.ApplyKind : Enum {
    public int value__;
    public static ApplyKind Cross;
    public static ApplyKind Outer;
}
internal class System.Data.Common.EntitySql.AST.BuiltInExpr : Node {
    internal BuiltInKind Kind;
    internal string Name;
    internal int ArgCount;
    internal Node Arg1;
    internal Node Arg2;
    internal Node Arg3;
    internal Node Arg4;
    internal BuiltInExpr(BuiltInKind kind, string name, Node arg1);
    internal BuiltInExpr(BuiltInKind kind, string name, Node arg1, Node arg2);
    internal BuiltInExpr(BuiltInKind kind, string name, Node arg1, Node arg2, Node arg3);
    internal BuiltInExpr(BuiltInKind kind, string name, Node arg1, Node arg2, Node arg3, Node arg4);
}
internal enum System.Data.Common.EntitySql.AST.BuiltInKind : Enum {
    public int value__;
    public static BuiltInKind And;
    public static BuiltInKind Or;
    public static BuiltInKind Not;
    public static BuiltInKind Cast;
    public static BuiltInKind OfType;
    public static BuiltInKind Treat;
    public static BuiltInKind IsOf;
    public static BuiltInKind Union;
    public static BuiltInKind UnionAll;
    public static BuiltInKind Intersect;
    public static BuiltInKind Overlaps;
    public static BuiltInKind AnyElement;
    public static BuiltInKind Element;
    public static BuiltInKind Except;
    public static BuiltInKind Exists;
    public static BuiltInKind Flatten;
    public static BuiltInKind In;
    public static BuiltInKind NotIn;
    public static BuiltInKind Distinct;
    public static BuiltInKind IsNull;
    public static BuiltInKind IsNotNull;
    public static BuiltInKind Like;
    public static BuiltInKind Equal;
    public static BuiltInKind NotEqual;
    public static BuiltInKind LessEqual;
    public static BuiltInKind LessThan;
    public static BuiltInKind GreaterThan;
    public static BuiltInKind GreaterEqual;
    public static BuiltInKind Plus;
    public static BuiltInKind Minus;
    public static BuiltInKind Multiply;
    public static BuiltInKind Divide;
    public static BuiltInKind Modulus;
    public static BuiltInKind UnaryMinus;
    public static BuiltInKind UnaryPlus;
    public static BuiltInKind Between;
    public static BuiltInKind NotBetween;
}
internal class System.Data.Common.EntitySql.AST.CaseExpr : Node {
    internal NodeList`1<WhenThenExpr> WhenThenExprList { get; }
    internal Node ElseExpr { get; }
    internal CaseExpr(NodeList`1<WhenThenExpr> whenThenExpr);
    internal CaseExpr(NodeList`1<WhenThenExpr> whenThenExpr, Node elseExpr);
    internal NodeList`1<WhenThenExpr> get_WhenThenExprList();
    internal Node get_ElseExpr();
}
internal class System.Data.Common.EntitySql.AST.CollectionTypeDefinition : Node {
    internal Node ElementTypeDef { get; }
    internal CollectionTypeDefinition(Node elementTypeDef);
    internal Node get_ElementTypeDef();
}
internal class System.Data.Common.EntitySql.AST.Command : Node {
    internal NodeList`1<NamespaceImport> NamespaceImportList { get; }
    internal Statement Statement { get; }
    internal Command(NodeList`1<NamespaceImport> nsImportList, Statement statement);
    internal NodeList`1<NamespaceImport> get_NamespaceImportList();
    internal Statement get_Statement();
}
internal class System.Data.Common.EntitySql.AST.CreateRefExpr : Node {
    internal Node EntitySet { get; }
    internal Node Keys { get; }
    internal Node TypeIdentifier { get; }
    internal CreateRefExpr(Node entitySet, Node keys);
    internal CreateRefExpr(Node entitySet, Node keys, Node typeIdentifier);
    internal Node get_EntitySet();
    internal Node get_Keys();
    internal Node get_TypeIdentifier();
}
internal class System.Data.Common.EntitySql.AST.DerefExpr : Node {
    internal Node ArgExpr { get; }
    internal DerefExpr(Node derefArgExpr);
    internal Node get_ArgExpr();
}
internal enum System.Data.Common.EntitySql.AST.DistinctKind : Enum {
    public int value__;
    public static DistinctKind None;
    public static DistinctKind All;
    public static DistinctKind Distinct;
}
internal class System.Data.Common.EntitySql.AST.DotExpr : Node {
    internal Node Left { get; }
    internal Identifier Identifier { get; }
    internal DotExpr(Node leftExpr, Identifier id);
    internal Node get_Left();
    internal Identifier get_Identifier();
    internal bool IsMultipartIdentifier(String[]& names);
}
internal class System.Data.Common.EntitySql.AST.FromClause : Node {
    internal NodeList`1<FromClauseItem> FromClauseItems { get; }
    internal FromClause(NodeList`1<FromClauseItem> fromClauseItems);
    internal NodeList`1<FromClauseItem> get_FromClauseItems();
}
internal class System.Data.Common.EntitySql.AST.FromClauseItem : Node {
    internal Node FromExpr { get; }
    internal FromClauseItemKind FromClauseItemKind { get; }
    internal FromClauseItem(AliasedExpr aliasExpr);
    internal FromClauseItem(JoinClauseItem joinClauseItem);
    internal FromClauseItem(ApplyClauseItem applyClauseItem);
    internal Node get_FromExpr();
    internal FromClauseItemKind get_FromClauseItemKind();
}
internal enum System.Data.Common.EntitySql.AST.FromClauseItemKind : Enum {
    public int value__;
    public static FromClauseItemKind AliasedFromClause;
    public static FromClauseItemKind JoinFromClause;
    public static FromClauseItemKind ApplyFromClause;
}
internal class System.Data.Common.EntitySql.AST.FunctionDefinition : Node {
    internal string Name { get; }
    internal NodeList`1<PropDefinition> Parameters { get; }
    internal Node Body { get; }
    internal int StartPosition { get; }
    internal int EndPosition { get; }
    internal FunctionDefinition(Identifier name, NodeList`1<PropDefinition> argDefList, Node body, int startPosition, int endPosition);
    internal string get_Name();
    internal NodeList`1<PropDefinition> get_Parameters();
    internal Node get_Body();
    internal int get_StartPosition();
    internal int get_EndPosition();
}
internal abstract class System.Data.Common.EntitySql.AST.GroupAggregateExpr : Node {
    internal DistinctKind DistinctKind;
    internal GroupAggregateInfo AggregateInfo;
    internal GroupAggregateExpr(DistinctKind distinctKind);
}
internal class System.Data.Common.EntitySql.AST.GroupByClause : Node {
    internal NodeList`1<AliasedExpr> GroupItems { get; }
    internal GroupByClause(NodeList`1<AliasedExpr> groupItems);
    internal NodeList`1<AliasedExpr> get_GroupItems();
}
internal class System.Data.Common.EntitySql.AST.GroupPartitionExpr : GroupAggregateExpr {
    internal Node ArgExpr { get; }
    internal GroupPartitionExpr(DistinctKind distinctKind, Node refArgExpr);
    internal Node get_ArgExpr();
}
internal class System.Data.Common.EntitySql.AST.HavingClause : Node {
    internal Node HavingPredicate { get; }
    internal bool HasMethodCall { get; }
    internal HavingClause(Node havingExpr, UInt32 methodCallCounter);
    internal Node get_HavingPredicate();
    internal bool get_HasMethodCall();
}
internal class System.Data.Common.EntitySql.AST.Identifier : Node {
    internal string Name { get; }
    internal bool IsEscaped { get; }
    internal Identifier(string name, bool isEscaped, string query, int inputPos);
    internal string get_Name();
    internal bool get_IsEscaped();
}
internal class System.Data.Common.EntitySql.AST.JoinClauseItem : Node {
    internal FromClauseItem LeftExpr { get; }
    internal FromClauseItem RightExpr { get; }
    internal JoinKind JoinKind { get; internal set; }
    internal Node OnExpr { get; }
    internal JoinClauseItem(FromClauseItem joinLeft, FromClauseItem joinRight, JoinKind joinKind);
    internal JoinClauseItem(FromClauseItem joinLeft, FromClauseItem joinRight, JoinKind joinKind, Node onExpr);
    internal FromClauseItem get_LeftExpr();
    internal FromClauseItem get_RightExpr();
    internal JoinKind get_JoinKind();
    internal void set_JoinKind(JoinKind value);
    internal Node get_OnExpr();
}
internal enum System.Data.Common.EntitySql.AST.JoinKind : Enum {
    public int value__;
    public static JoinKind Cross;
    public static JoinKind Inner;
    public static JoinKind LeftOuter;
    public static JoinKind FullOuter;
    public static JoinKind RightOuter;
}
internal class System.Data.Common.EntitySql.AST.KeyExpr : Node {
    internal Node ArgExpr { get; }
    internal KeyExpr(Node argExpr);
    internal Node get_ArgExpr();
}
internal class System.Data.Common.EntitySql.AST.Literal : Node {
    internal bool IsNumber { get; }
    internal bool IsSignedNumber { get; }
    internal bool IsString { get; }
    internal bool IsUnicodeString { get; }
    internal bool IsNullLiteral { get; }
    internal string OriginalValue { get; }
    internal object Value { get; }
    internal Type Type { get; }
    internal Literal(string originalValue, LiteralKind kind, string query, int inputPos);
    private static Literal();
    internal static Literal NewBooleanLiteral(bool value);
    internal bool get_IsNumber();
    internal bool get_IsSignedNumber();
    internal bool get_IsString();
    internal bool get_IsUnicodeString();
    internal bool get_IsNullLiteral();
    internal string get_OriginalValue();
    internal void PrefixSign(string sign);
    internal object get_Value();
    internal Type get_Type();
}
internal enum System.Data.Common.EntitySql.AST.LiteralKind : Enum {
    public int value__;
    public static LiteralKind Number;
    public static LiteralKind String;
    public static LiteralKind UnicodeString;
    public static LiteralKind Boolean;
    public static LiteralKind Binary;
    public static LiteralKind DateTime;
    public static LiteralKind Time;
    public static LiteralKind DateTimeOffset;
    public static LiteralKind Guid;
    public static LiteralKind Null;
}
internal class System.Data.Common.EntitySql.AST.MethodExpr : GroupAggregateExpr {
    internal Node Expr { get; }
    internal NodeList`1<Node> Args { get; }
    internal bool HasRelationships { get; }
    internal NodeList`1<RelshipNavigationExpr> Relationships { get; }
    internal MethodExpr(Node expr, DistinctKind distinctKind, NodeList`1<Node> args);
    internal MethodExpr(Node expr, DistinctKind distinctKind, NodeList`1<Node> args, NodeList`1<RelshipNavigationExpr> relationships);
    internal Node get_Expr();
    internal NodeList`1<Node> get_Args();
    internal bool get_HasRelationships();
    internal NodeList`1<RelshipNavigationExpr> get_Relationships();
}
internal class System.Data.Common.EntitySql.AST.MultisetConstructorExpr : Node {
    internal NodeList`1<Node> ExprList { get; }
    internal MultisetConstructorExpr(NodeList`1<Node> exprList);
    internal NodeList`1<Node> get_ExprList();
}
internal class System.Data.Common.EntitySql.AST.NamespaceImport : Node {
    internal Identifier Alias { get; }
    internal Node NamespaceName { get; }
    internal NamespaceImport(Identifier idenitifier);
    internal NamespaceImport(DotExpr dorExpr);
    internal NamespaceImport(BuiltInExpr bltInExpr);
    internal Identifier get_Alias();
    internal Node get_NamespaceName();
}
internal abstract class System.Data.Common.EntitySql.AST.Node : object {
    internal ErrorContext ErrCtx { get; internal set; }
    internal Node(string commandText, int inputPosition);
    internal ErrorContext get_ErrCtx();
    internal void set_ErrCtx(ErrorContext value);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.EntitySql.AST.NodeList`1 : Node {
    internal int Count { get; }
    internal T Item { get; }
    internal NodeList`1(T item);
    internal NodeList`1<T> Add(T item);
    internal int get_Count();
    internal T get_Item(int index);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Data.Common.EntitySql.AST.OrderByClause : Node {
    internal NodeList`1<OrderByClauseItem> OrderByClauseItem { get; }
    internal Node SkipSubClause { get; }
    internal Node LimitSubClause { get; }
    internal bool HasMethodCall { get; }
    internal OrderByClause(NodeList`1<OrderByClauseItem> orderByClauseItem, Node skipExpr, Node limitExpr, UInt32 methodCallCount);
    internal NodeList`1<OrderByClauseItem> get_OrderByClauseItem();
    internal Node get_SkipSubClause();
    internal Node get_LimitSubClause();
    internal bool get_HasMethodCall();
}
internal class System.Data.Common.EntitySql.AST.OrderByClauseItem : Node {
    internal Node OrderExpr { get; }
    internal OrderKind OrderKind { get; }
    internal Identifier Collation { get; }
    internal OrderByClauseItem(Node orderExpr, OrderKind orderKind);
    internal OrderByClauseItem(Node orderExpr, OrderKind orderKind, Identifier optCollationIdentifier);
    internal Node get_OrderExpr();
    internal OrderKind get_OrderKind();
    internal Identifier get_Collation();
}
internal enum System.Data.Common.EntitySql.AST.OrderKind : Enum {
    public int value__;
    public static OrderKind None;
    public static OrderKind Asc;
    public static OrderKind Desc;
}
internal class System.Data.Common.EntitySql.AST.ParenExpr : Node {
    internal Node Expr { get; }
    internal ParenExpr(Node expr);
    internal Node get_Expr();
}
internal class System.Data.Common.EntitySql.AST.PropDefinition : Node {
    internal Identifier Name { get; }
    internal Node Type { get; }
    internal PropDefinition(Identifier name, Node typeDefExpr);
    internal Identifier get_Name();
    internal Node get_Type();
}
internal class System.Data.Common.EntitySql.AST.QueryExpr : Node {
    internal SelectClause SelectClause { get; }
    internal FromClause FromClause { get; }
    internal Node WhereClause { get; }
    internal GroupByClause GroupByClause { get; }
    internal HavingClause HavingClause { get; }
    internal OrderByClause OrderByClause { get; }
    internal bool HasMethodCall { get; }
    internal QueryExpr(SelectClause selectClause, FromClause fromClause, Node whereClause, GroupByClause groupByClause, HavingClause havingClause, OrderByClause orderByClause);
    internal SelectClause get_SelectClause();
    internal FromClause get_FromClause();
    internal Node get_WhereClause();
    internal GroupByClause get_GroupByClause();
    internal HavingClause get_HavingClause();
    internal OrderByClause get_OrderByClause();
    internal bool get_HasMethodCall();
}
internal class System.Data.Common.EntitySql.AST.QueryParameter : Node {
    internal string Name { get; }
    internal QueryParameter(string parameterName, string query, int inputPos);
    internal string get_Name();
}
internal class System.Data.Common.EntitySql.AST.QueryStatement : Statement {
    internal NodeList`1<FunctionDefinition> FunctionDefList { get; }
    internal Node Expr { get; }
    internal QueryStatement(NodeList`1<FunctionDefinition> functionDefList, Node expr);
    internal NodeList`1<FunctionDefinition> get_FunctionDefList();
    internal Node get_Expr();
}
internal class System.Data.Common.EntitySql.AST.RefExpr : Node {
    internal Node ArgExpr { get; }
    internal RefExpr(Node refArgExpr);
    internal Node get_ArgExpr();
}
internal class System.Data.Common.EntitySql.AST.RefTypeDefinition : Node {
    internal Node RefTypeIdentifier { get; }
    internal RefTypeDefinition(Node refTypeIdentifier);
    internal Node get_RefTypeIdentifier();
}
internal class System.Data.Common.EntitySql.AST.RelshipNavigationExpr : Node {
    internal Node RefExpr { get; }
    internal Node TypeName { get; }
    internal Identifier ToEndIdentifier { get; }
    internal Identifier FromEndIdentifier { get; }
    internal RelshipNavigationExpr(Node refExpr, Node relshipTypeName, Identifier toEndIdentifier, Identifier fromEndIdentifier);
    internal Node get_RefExpr();
    internal Node get_TypeName();
    internal Identifier get_ToEndIdentifier();
    internal Identifier get_FromEndIdentifier();
}
internal class System.Data.Common.EntitySql.AST.RowConstructorExpr : Node {
    internal NodeList`1<AliasedExpr> AliasedExprList { get; }
    internal RowConstructorExpr(NodeList`1<AliasedExpr> exprList);
    internal NodeList`1<AliasedExpr> get_AliasedExprList();
}
internal class System.Data.Common.EntitySql.AST.RowTypeDefinition : Node {
    internal NodeList`1<PropDefinition> Properties { get; }
    internal RowTypeDefinition(NodeList`1<PropDefinition> propDefList);
    internal NodeList`1<PropDefinition> get_Properties();
}
internal class System.Data.Common.EntitySql.AST.SelectClause : Node {
    internal NodeList`1<AliasedExpr> Items { get; }
    internal SelectKind SelectKind { get; }
    internal DistinctKind DistinctKind { get; }
    internal Node TopExpr { get; }
    internal bool HasMethodCall { get; }
    internal SelectClause(NodeList`1<AliasedExpr> items, SelectKind selectKind, DistinctKind distinctKind, Node topExpr, UInt32 methodCallCount);
    internal NodeList`1<AliasedExpr> get_Items();
    internal SelectKind get_SelectKind();
    internal DistinctKind get_DistinctKind();
    internal Node get_TopExpr();
    internal bool get_HasMethodCall();
}
internal enum System.Data.Common.EntitySql.AST.SelectKind : Enum {
    public int value__;
    public static SelectKind Value;
    public static SelectKind Row;
}
internal abstract class System.Data.Common.EntitySql.AST.Statement : Node {
}
internal class System.Data.Common.EntitySql.AST.WhenThenExpr : Node {
    internal Node WhenExpr { get; }
    internal Node ThenExpr { get; }
    internal WhenThenExpr(Node whenExpr, Node thenExpr);
    internal Node get_WhenExpr();
    internal Node get_ThenExpr();
}
internal static class System.Data.Common.EntitySql.CqlErrorHelper : object {
    internal static void ReportFunctionOverloadError(MethodExpr functionExpr, EdmFunction functionType, List`1<TypeUsage> argTypes);
    internal static void ReportAliasAlreadyUsedError(string aliasName, ErrorContext errCtx, string contextMessage);
    internal static void ReportIncompatibleCommonType(ErrorContext errCtx, TypeUsage leftType, TypeUsage rightType);
}
internal class System.Data.Common.EntitySql.CqlLexer : object {
    internal string YYText { get; }
    internal int IPos { get; }
    internal CqlLexer(TextReader reader);
    internal CqlLexer(FileStream instream);
    internal CqlLexer(string query, ParserOptions parserOptions);
    private static CqlLexer();
    internal string yytext();
    internal int yy_char();
    internal Token yylex();
    internal static Token NewToken(short tokenId, Node tokenvalue);
    internal static Token NewToken(short tokenId, TerminalToken termToken);
    internal string get_YYText();
    internal int get_IPos();
    internal int AdvanceIPos();
    internal static bool IsReservedKeyword(string term);
    internal Token MapIdentifierOrKeyword(string symbol);
    internal Token MapOperator(string oper);
    internal Token MapPunctuator(string punct);
    internal Token MapDoubleQuotedString(string symbol);
    internal Token NewLiteralToken(string literal, LiteralKind literalKind);
    internal Token NewParameterToken(string param);
    internal Token HandleEscapedIdentifiers();
    internal static bool IsLetterOrDigitOrUnderscore(string symbol, Boolean& isIdentifierASCII);
    internal static bool IsNewLine(char c);
}
internal class System.Data.Common.EntitySql.CqlParser : object {
    public static short IDENTIFIER;
    public static short ESCAPED_IDENTIFIER;
    public static short PARAMETER;
    public static short LITERAL;
    public static short ALL;
    public static short AND;
    public static short ANYELEMENT;
    public static short APPLY;
    public static short AS;
    public static short ASC;
    public static short BETWEEN;
    public static short BY;
    public static short CASE;
    public static short CAST;
    public static short COLLATE;
    public static short COLLECTION;
    public static short CROSS;
    public static short CREATEREF;
    public static short DEREF;
    public static short DESC;
    public static short DISTINCT;
    public static short ELEMENT;
    public static short ELSE;
    public static short END;
    public static short EXCEPT;
    public static short EXISTS;
    public static short ESCAPE;
    public static short FLATTEN;
    public static short FROM;
    public static short FULL;
    public static short FUNCTION;
    public static short GROUP;
    public static short GROUPPARTITION;
    public static short HAVING;
    public static short IN;
    public static short INNER;
    public static short INTERSECT;
    public static short IS;
    public static short JOIN;
    public static short KEY;
    public static short LEFT;
    public static short LIKE;
    public static short LIMIT;
    public static short MULTISET;
    public static short NAVIGATE;
    public static short NOT;
    public static short NULL;
    public static short OF;
    public static short OFTYPE;
    public static short ON;
    public static short OR;
    public static short ORDER;
    public static short OUTER;
    public static short OVERLAPS;
    public static short ONLY;
    public static short QMARK;
    public static short REF;
    public static short RELATIONSHIP;
    public static short RIGHT;
    public static short ROW;
    public static short SELECT;
    public static short SET;
    public static short SKIP;
    public static short THEN;
    public static short TOP;
    public static short TREAT;
    public static short UNION;
    public static short USING;
    public static short VALUE;
    public static short WHEN;
    public static short WHERE;
    public static short WITH;
    public static short COMMA;
    public static short COLON;
    public static short SCOLON;
    public static short DOT;
    public static short EQUAL;
    public static short L_PAREN;
    public static short R_PAREN;
    public static short L_BRACE;
    public static short R_BRACE;
    public static short L_CURLY;
    public static short R_CURLY;
    public static short PLUS;
    public static short MINUS;
    public static short STAR;
    public static short FSLASH;
    public static short PERCENT;
    public static short OP_EQ;
    public static short OP_NEQ;
    public static short OP_LT;
    public static short OP_LE;
    public static short OP_GT;
    public static short OP_GE;
    public static short UNARYPLUS;
    public static short UNARYMINUS;
    public static short YYERRCODE;
    internal string Query { get; }
    internal ParserOptions ParserOptions { get; }
    internal CqlParser(ParserOptions parserOptions, bool debug);
    private static CqlParser();
    internal Node Parse(string query);
    internal string get_Query();
    internal ParserOptions get_ParserOptions();
}
internal static class System.Data.Common.EntitySql.CqlQuery : object {
    internal static ParseResult Compile(string commandText, Perspective perspective, ParserOptions parserOptions, IEnumerable`1<DbParameterReferenceExpression> parameters);
    internal static DbLambda CompileQueryCommandLambda(string queryCommandText, Perspective perspective, ParserOptions parserOptions, IEnumerable`1<DbParameterReferenceExpression> parameters, IEnumerable`1<DbVariableReferenceExpression> variables);
}
internal class System.Data.Common.EntitySql.Disposer : object {
    internal Disposer(Action action);
    public sealed virtual void Dispose();
}
internal class System.Data.Common.EntitySql.EntityContainerExpression : ExpressionResolution {
    internal EntityContainer EntityContainer;
    internal string ExpressionClassName { get; }
    internal static string EntityContainerClassName { get; }
    internal EntityContainerExpression(EntityContainer entityContainer);
    internal virtual string get_ExpressionClassName();
    internal static string get_EntityContainerClassName();
}
public class System.Data.Common.EntitySql.EntitySqlParser : object {
    internal EntitySqlParser(Perspective perspective);
    public ParseResult Parse(string query, DbParameterReferenceExpression[] parameters);
    public DbLambda ParseLambda(string query, DbVariableReferenceExpression[] variables);
}
internal class System.Data.Common.EntitySql.ErrorContext : object {
    internal int InputPosition;
    internal string ErrorContextInfo;
    internal bool UseContextInfoAsResourceIdentifier;
    internal string CommandText;
}
internal abstract class System.Data.Common.EntitySql.ExpressionResolution : object {
    internal ExpressionResolutionClass ExpressionClass;
    internal string ExpressionClassName { get; }
    protected ExpressionResolution(ExpressionResolutionClass class);
    internal abstract virtual string get_ExpressionClassName();
}
internal enum System.Data.Common.EntitySql.ExpressionResolutionClass : Enum {
    public int value__;
    public static ExpressionResolutionClass Value;
    public static ExpressionResolutionClass EntityContainer;
    public static ExpressionResolutionClass MetadataMember;
}
internal class System.Data.Common.EntitySql.FreeVariableScopeEntry : ScopeEntry {
    internal FreeVariableScopeEntry(DbVariableReferenceExpression varRef);
    internal virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
}
internal class System.Data.Common.EntitySql.FunctionAggregateInfo : GroupAggregateInfo {
    internal DbAggregate AggregateDefinition;
    internal FunctionAggregateInfo(MethodExpr methodExpr, ErrorContext errCtx, GroupAggregateInfo containingAggregate, ScopeRegion definingScopeRegion);
    internal void AttachToAstNode(string aggregateName, DbAggregate aggregateDefinition);
}
public class System.Data.Common.EntitySql.FunctionDefinition : object {
    public string Name { get; }
    public DbLambda Lambda { get; }
    public int StartPosition { get; }
    public int EndPosition { get; }
    internal FunctionDefinition(string name, DbLambda lambda, int startPosition, int endPosition);
    public string get_Name();
    public DbLambda get_Lambda();
    public int get_StartPosition();
    public int get_EndPosition();
}
internal static class System.Data.Common.EntitySql.FunctionOverloadResolver : object {
    internal static EdmFunction ResolveFunctionOverloads(IList`1<EdmFunction> functionsMetadata, IList`1<TypeUsage> argTypes, bool isGroupAggregateFunction, Boolean& isAmbiguous);
    internal static EdmFunction ResolveFunctionOverloads(IList`1<EdmFunction> functionsMetadata, IList`1<TypeUsage> argTypes, Func`2<TypeUsage, IEnumerable`1<TypeUsage>> flattenArgumentType, Func`3<TypeUsage, TypeUsage, IEnumerable`1<TypeUsage>> flattenParameterType, Func`3<TypeUsage, TypeUsage, bool> isPromotableTo, Func`3<TypeUsage, TypeUsage, bool> isStructurallyEqual, bool isGroupAggregateFunction, Boolean& isAmbiguous);
    internal static TFunctionMetadata ResolveFunctionOverloads(IList`1<TFunctionMetadata> functionsMetadata, IList`1<TypeUsage> argTypes, Func`2<TFunctionMetadata, IList`1<TFunctionParameterMetadata>> getSignatureParams, Func`2<TFunctionParameterMetadata, TypeUsage> getParameterTypeUsage, Func`2<TFunctionParameterMetadata, ParameterMode> getParameterMode, Func`2<TypeUsage, IEnumerable`1<TypeUsage>> flattenArgumentType, Func`3<TypeUsage, TypeUsage, IEnumerable`1<TypeUsage>> flattenParameterType, Func`3<TypeUsage, TypeUsage, bool> isPromotableTo, Func`3<TypeUsage, TypeUsage, bool> isStructurallyEqual, bool isGroupAggregateFunction, Boolean& isAmbiguous);
}
internal abstract class System.Data.Common.EntitySql.GroupAggregateInfo : object {
    internal GroupAggregateKind AggregateKind;
    internal GroupAggregateExpr AstNode;
    internal ErrorContext ErrCtx;
    internal ScopeRegion DefiningScopeRegion;
    internal string AggregateName;
    internal DbNullExpression AggregateStubExpression;
    internal ScopeRegion InnermostReferencedScopeRegion { get; internal set; }
    internal ScopeRegion EvaluatingScopeRegion { get; }
    internal GroupAggregateInfo ContainingAggregate { get; }
    protected GroupAggregateInfo(GroupAggregateKind aggregateKind, GroupAggregateExpr astNode, ErrorContext errCtx, GroupAggregateInfo containingAggregate, ScopeRegion definingScopeRegion);
    protected void AttachToAstNode(string aggregateName, TypeUsage resultType);
    internal void DetachFromAstNode();
    internal void UpdateScopeIndex(int referencedScopeIndex, SemanticResolver sr);
    internal ScopeRegion get_InnermostReferencedScopeRegion();
    internal void set_InnermostReferencedScopeRegion(ScopeRegion value);
    internal void ValidateAndComputeEvaluatingScopeRegion(SemanticResolver sr);
    internal void SetContainingAggregate(GroupAggregateInfo containingAggregate);
    internal ScopeRegion get_EvaluatingScopeRegion();
    internal GroupAggregateInfo get_ContainingAggregate();
}
internal enum System.Data.Common.EntitySql.GroupAggregateKind : Enum {
    public int value__;
    public static GroupAggregateKind None;
    public static GroupAggregateKind Function;
    public static GroupAggregateKind Partition;
    public static GroupAggregateKind GroupKey;
}
internal class System.Data.Common.EntitySql.GroupKeyAggregateInfo : GroupAggregateInfo {
    internal GroupKeyAggregateInfo(GroupAggregateKind aggregateKind, ErrorContext errCtx, GroupAggregateInfo containingAggregate, ScopeRegion definingScopeRegion);
}
internal class System.Data.Common.EntitySql.GroupKeyDefinitionScopeEntry : ScopeEntry {
    private DbExpression System.Data.Common.EntitySql.IGroupExpressionExtendedInfo.GroupVarBasedExpression { get; }
    private DbExpression System.Data.Common.EntitySql.IGroupExpressionExtendedInfo.GroupAggBasedExpression { get; }
    private String[] System.Data.Common.EntitySql.IGetAlternativeName.AlternativeName { get; }
    internal GroupKeyDefinitionScopeEntry(DbExpression varBasedExpression, DbExpression groupVarBasedExpression, DbExpression groupAggBasedExpression, String[] alternativeName);
    internal virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
    private sealed virtual override DbExpression System.Data.Common.EntitySql.IGroupExpressionExtendedInfo.get_GroupVarBasedExpression();
    private sealed virtual override DbExpression System.Data.Common.EntitySql.IGroupExpressionExtendedInfo.get_GroupAggBasedExpression();
    private sealed virtual override String[] System.Data.Common.EntitySql.IGetAlternativeName.get_AlternativeName();
}
internal class System.Data.Common.EntitySql.GroupPartitionInfo : GroupAggregateInfo {
    internal DbExpression AggregateDefinition;
    internal GroupPartitionInfo(GroupPartitionExpr groupPartitionExpr, ErrorContext errCtx, GroupAggregateInfo containingAggregate, ScopeRegion definingScopeRegion);
    internal void AttachToAstNode(string aggregateName, DbExpression aggregateDefinition);
}
internal interface System.Data.Common.EntitySql.IGetAlternativeName {
    public String[] AlternativeName { get; }
    public abstract virtual String[] get_AlternativeName();
}
internal interface System.Data.Common.EntitySql.IGroupExpressionExtendedInfo {
    public DbExpression GroupVarBasedExpression { get; }
    public DbExpression GroupAggBasedExpression { get; }
    public abstract virtual DbExpression get_GroupVarBasedExpression();
    public abstract virtual DbExpression get_GroupAggBasedExpression();
}
internal class System.Data.Common.EntitySql.InlineFunctionGroup : MetadataMember {
    internal IList`1<InlineFunctionInfo> FunctionMetadata;
    internal string MetadataMemberClassName { get; }
    internal static string InlineFunctionGroupClassName { get; }
    internal InlineFunctionGroup(string name, IList`1<InlineFunctionInfo> functionMetadata);
    internal virtual string get_MetadataMemberClassName();
    internal static string get_InlineFunctionGroupClassName();
}
internal abstract class System.Data.Common.EntitySql.InlineFunctionInfo : object {
    internal FunctionDefinition FunctionDefAst;
    internal List`1<DbVariableReferenceExpression> Parameters;
    internal InlineFunctionInfo(FunctionDefinition functionDef, List`1<DbVariableReferenceExpression> parameters);
    internal abstract virtual DbLambda GetLambda(SemanticResolver sr);
}
internal class System.Data.Common.EntitySql.InvalidGroupInputRefScopeEntry : ScopeEntry {
    internal virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
}
internal class System.Data.Common.EntitySql.MetadataEnumMember : MetadataMember {
    internal TypeUsage EnumType;
    internal EnumMember EnumMember;
    internal string MetadataMemberClassName { get; }
    internal static string EnumMemberClassName { get; }
    internal MetadataEnumMember(string name, TypeUsage enumType, EnumMember enumMember);
    internal virtual string get_MetadataMemberClassName();
    internal static string get_EnumMemberClassName();
}
internal class System.Data.Common.EntitySql.MetadataFunctionGroup : MetadataMember {
    internal IList`1<EdmFunction> FunctionMetadata;
    internal string MetadataMemberClassName { get; }
    internal static string FunctionGroupClassName { get; }
    internal MetadataFunctionGroup(string name, IList`1<EdmFunction> functionMetadata);
    internal virtual string get_MetadataMemberClassName();
    internal static string get_FunctionGroupClassName();
}
internal abstract class System.Data.Common.EntitySql.MetadataMember : ExpressionResolution {
    internal MetadataMemberClass MetadataMemberClass;
    internal string Name;
    internal string ExpressionClassName { get; }
    internal static string MetadataMemberExpressionClassName { get; }
    internal string MetadataMemberClassName { get; }
    protected MetadataMember(MetadataMemberClass class, string name);
    internal virtual string get_ExpressionClassName();
    internal static string get_MetadataMemberExpressionClassName();
    internal abstract virtual string get_MetadataMemberClassName();
    internal static IEqualityComparer`1<MetadataMember> CreateMetadataMemberNameEqualityComparer(StringComparer stringComparer);
}
internal enum System.Data.Common.EntitySql.MetadataMemberClass : Enum {
    public int value__;
    public static MetadataMemberClass Type;
    public static MetadataMemberClass FunctionGroup;
    public static MetadataMemberClass InlineFunctionGroup;
    public static MetadataMemberClass Namespace;
    public static MetadataMemberClass EnumMember;
}
internal class System.Data.Common.EntitySql.MetadataNamespace : MetadataMember {
    internal string MetadataMemberClassName { get; }
    internal static string NamespaceClassName { get; }
    internal MetadataNamespace(string name);
    internal virtual string get_MetadataMemberClassName();
    internal static string get_NamespaceClassName();
}
internal class System.Data.Common.EntitySql.MetadataType : MetadataMember {
    internal TypeUsage TypeUsage;
    internal string MetadataMemberClassName { get; }
    internal static string TypeClassName { get; }
    internal MetadataType(string name, TypeUsage typeUsage);
    internal virtual string get_MetadataMemberClassName();
    internal static string get_TypeClassName();
}
internal class System.Data.Common.EntitySql.Pair`2 : object {
    internal L Left;
    internal R Right;
    internal Pair`2(L left, R right);
    internal KeyValuePair`2<L, R> GetKVP();
}
public class System.Data.Common.EntitySql.ParseResult : object {
    public DbCommandTree CommandTree { get; }
    public ReadOnlyCollection`1<FunctionDefinition> FunctionDefinitions { get; }
    internal ParseResult(DbCommandTree commandTree, List`1<FunctionDefinition> functionDefs);
    public DbCommandTree get_CommandTree();
    public ReadOnlyCollection`1<FunctionDefinition> get_FunctionDefinitions();
}
internal class System.Data.Common.EntitySql.ParserOptions : object {
    internal CompilationMode ParserCompilationMode;
    internal StringComparer NameComparer { get; }
    internal bool NameComparisonCaseInsensitive { get; }
    internal StringComparer get_NameComparer();
    internal bool get_NameComparisonCaseInsensitive();
}
internal class System.Data.Common.EntitySql.ProjectionItemDefinitionScopeEntry : ScopeEntry {
    internal ProjectionItemDefinitionScopeEntry(DbExpression expression);
    internal virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
}
internal class System.Data.Common.EntitySql.Scope : object {
    internal Scope(IEqualityComparer`1<string> keyComparer);
    internal Scope Add(string key, ScopeEntry value);
    internal void Remove(string key);
    internal void Replace(string key, ScopeEntry value);
    internal bool Contains(string key);
    internal bool TryLookup(string key, ScopeEntry& value);
    public Enumerator<string, ScopeEntry> GetEnumerator();
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, ScopeEntry>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Data.Common.EntitySql.ScopeEntry>>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal abstract class System.Data.Common.EntitySql.ScopeEntry : object {
    internal ScopeEntryKind EntryKind { get; }
    internal ScopeEntry(ScopeEntryKind scopeEntryKind);
    internal ScopeEntryKind get_EntryKind();
    internal abstract virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
}
internal enum System.Data.Common.EntitySql.ScopeEntryKind : Enum {
    public int value__;
    public static ScopeEntryKind SourceVar;
    public static ScopeEntryKind GroupKeyDefinition;
    public static ScopeEntryKind ProjectionItemDefinition;
    public static ScopeEntryKind FreeVar;
    public static ScopeEntryKind InvalidGroupInputRef;
}
internal class System.Data.Common.EntitySql.ScopeManager : object {
    internal int CurrentScopeIndex { get; }
    internal Scope CurrentScope { get; }
    internal ScopeManager(IEqualityComparer`1<string> keyComparer);
    internal void EnterScope();
    internal void LeaveScope();
    internal int get_CurrentScopeIndex();
    internal Scope get_CurrentScope();
    internal Scope GetScopeByIndex(int scopeIndex);
    internal void RollbackToScope(int scopeIndex);
    internal bool IsInCurrentScope(string key);
}
internal class System.Data.Common.EntitySql.ScopeRegion : object {
    internal int FirstScopeIndex { get; }
    internal int ScopeRegionIndex { get; }
    internal bool IsAggregating { get; }
    internal DbExpressionBinding GroupAggregateBinding { get; }
    internal List`1<GroupAggregateInfo> GroupAggregateInfos { get; }
    internal bool WasResolutionCorrelated { get; internal set; }
    internal ScopeRegion(ScopeManager scopeManager, int firstScopeIndex, int scopeRegionIndex);
    internal int get_FirstScopeIndex();
    internal int get_ScopeRegionIndex();
    internal bool ContainsScope(int scopeIndex);
    internal void EnterGroupOperation(DbExpressionBinding groupAggregateBinding);
    internal void RollbackGroupOperation();
    internal bool get_IsAggregating();
    internal DbExpressionBinding get_GroupAggregateBinding();
    internal List`1<GroupAggregateInfo> get_GroupAggregateInfos();
    internal void RegisterGroupAggregateName(string groupAggregateName);
    internal bool ContainsGroupAggregate(string groupAggregateName);
    internal bool get_WasResolutionCorrelated();
    internal void set_WasResolutionCorrelated(bool value);
    internal void ApplyToScopeEntries(Action`1<ScopeEntry> action);
    internal void ApplyToScopeEntries(Func`2<ScopeEntry, ScopeEntry> action);
    internal void RollbackAllScopes();
}
internal class System.Data.Common.EntitySql.SemanticAnalyzer : object {
    internal SemanticAnalyzer(SemanticResolver sr);
    private static SemanticAnalyzer();
    internal ParseResult AnalyzeCommand(Node astExpr);
    internal DbLambda AnalyzeQueryCommand(Node astExpr);
}
internal class System.Data.Common.EntitySql.SemanticResolver : object {
    internal Dictionary`2<string, DbParameterReferenceExpression> Parameters { get; }
    internal Dictionary`2<string, DbVariableReferenceExpression> Variables { get; }
    internal TypeResolver TypeResolver { get; }
    internal ParserOptions ParserOptions { get; }
    internal StringComparer NameComparer { get; }
    internal IEnumerable`1<ScopeRegion> ScopeRegions { get; }
    internal ScopeRegion CurrentScopeRegion { get; }
    internal Scope CurrentScope { get; }
    internal int CurrentScopeIndex { get; }
    internal GroupAggregateInfo CurrentGroupAggregateInfo { get; }
    internal static SemanticResolver Create(Perspective perspective, ParserOptions parserOptions, IEnumerable`1<DbParameterReferenceExpression> parameters, IEnumerable`1<DbVariableReferenceExpression> variables);
    internal SemanticResolver CloneForInlineFunctionConversion();
    internal Dictionary`2<string, DbParameterReferenceExpression> get_Parameters();
    internal Dictionary`2<string, DbVariableReferenceExpression> get_Variables();
    internal TypeResolver get_TypeResolver();
    internal ParserOptions get_ParserOptions();
    internal StringComparer get_NameComparer();
    internal IEnumerable`1<ScopeRegion> get_ScopeRegions();
    internal ScopeRegion get_CurrentScopeRegion();
    internal Scope get_CurrentScope();
    internal int get_CurrentScopeIndex();
    internal GroupAggregateInfo get_CurrentGroupAggregateInfo();
    internal IDisposable EnterIgnoreEntityContainerNameResolution();
    internal ExpressionResolution ResolveSimpleName(string name, bool leftHandSideOfMemberAccess, ErrorContext errCtx);
    internal MetadataMember ResolveSimpleFunctionName(string name, ErrorContext errCtx);
    internal MetadataMember ResolveMetadataMemberName(String[] name, ErrorContext errCtx);
    internal ValueExpression ResolvePropertyAccess(DbExpression valueExpr, string name, ErrorContext errCtx);
    internal ExpressionResolution ResolveEntityContainerMemberAccess(EntityContainer entityContainer, string name, ErrorContext errCtx);
    internal MetadataMember ResolveMetadataMemberAccess(MetadataMember metadataMember, string name, ErrorContext errCtx);
    internal bool TryResolveInternalAggregateName(string name, ErrorContext errCtx, DbExpression& dbExpression);
    internal bool TryResolveDotExprAsGroupKeyAlternativeName(DotExpr dotExpr, ValueExpression& groupKeyResolution);
    internal string GenerateInternalName(string hint);
    internal string InferAliasName(AliasedExpr aliasedExpr, DbExpression convertedExpression);
    internal IDisposable EnterScopeRegion();
    internal void RollbackToScope(int scopeIndex);
    internal void EnterScope();
    internal void LeaveScope();
    internal bool IsInAnyGroupScope();
    internal ScopeRegion GetDefiningScopeRegion(int scopeIndex);
    internal IDisposable EnterFunctionAggregate(MethodExpr methodExpr, ErrorContext errCtx, FunctionAggregateInfo& aggregateInfo);
    internal IDisposable EnterGroupPartition(GroupPartitionExpr groupPartitionExpr, ErrorContext errCtx, GroupPartitionInfo& aggregateInfo);
    internal IDisposable EnterGroupKeyDefinition(GroupAggregateKind aggregateKind, ErrorContext errCtx, GroupKeyAggregateInfo& aggregateInfo);
    internal static EdmFunction ResolveFunctionOverloads(IList`1<EdmFunction> functionsMetadata, IList`1<TypeUsage> argTypes, bool isGroupAggregateFunction, Boolean& isAmbiguous);
    internal static TFunctionMetadata ResolveFunctionOverloads(IList`1<TFunctionMetadata> functionsMetadata, IList`1<TypeUsage> argTypes, Func`2<TFunctionMetadata, IList`1<TFunctionParameterMetadata>> getSignatureParams, Func`2<TFunctionParameterMetadata, TypeUsage> getParameterTypeUsage, Func`2<TFunctionParameterMetadata, ParameterMode> getParameterMode, bool isGroupAggregateFunction, Boolean& isAmbiguous);
}
internal class System.Data.Common.EntitySql.SourceScopeEntry : ScopeEntry {
    private DbExpression System.Data.Common.EntitySql.IGroupExpressionExtendedInfo.GroupVarBasedExpression { get; }
    private DbExpression System.Data.Common.EntitySql.IGroupExpressionExtendedInfo.GroupAggBasedExpression { get; }
    internal bool IsJoinClauseLeftExpr { get; internal set; }
    private String[] System.Data.Common.EntitySql.IGetAlternativeName.AlternativeName { get; }
    internal SourceScopeEntry(DbVariableReferenceExpression varRef);
    internal SourceScopeEntry(DbVariableReferenceExpression varRef, String[] alternativeName);
    internal virtual DbExpression GetExpression(string refName, ErrorContext errCtx);
    private sealed virtual override DbExpression System.Data.Common.EntitySql.IGroupExpressionExtendedInfo.get_GroupVarBasedExpression();
    private sealed virtual override DbExpression System.Data.Common.EntitySql.IGroupExpressionExtendedInfo.get_GroupAggBasedExpression();
    internal bool get_IsJoinClauseLeftExpr();
    internal void set_IsJoinClauseLeftExpr(bool value);
    private sealed virtual override String[] System.Data.Common.EntitySql.IGetAlternativeName.get_AlternativeName();
    internal SourceScopeEntry AddParentVar(DbVariableReferenceExpression parentVarRef);
    internal void ReplaceParentVar(DbVariableReferenceExpression parentVarRef);
    internal void AdjustToGroupVar(DbVariableReferenceExpression parentVarRef, DbVariableReferenceExpression parentGroupVarRef, DbVariableReferenceExpression groupAggRef);
    internal void RollbackAdjustmentToGroupVar(DbVariableReferenceExpression pregroupParentVarRef);
}
internal class System.Data.Common.EntitySql.TypeResolver : object {
    internal Perspective Perspective { get; }
    internal ICollection`1<MetadataNamespace> NamespaceImports { get; }
    internal TypeUsage StringType { get; }
    internal TypeUsage BooleanType { get; }
    internal TypeUsage Int64Type { get; }
    internal TypeResolver(Perspective perspective, ParserOptions parserOptions);
    internal Perspective get_Perspective();
    internal ICollection`1<MetadataNamespace> get_NamespaceImports();
    internal TypeUsage get_StringType();
    internal TypeUsage get_BooleanType();
    internal TypeUsage get_Int64Type();
    internal void AddAliasedNamespaceImport(string alias, MetadataNamespace namespace, ErrorContext errCtx);
    internal void AddNamespaceImport(MetadataNamespace namespace, ErrorContext errCtx);
    internal void DeclareInlineFunction(string name, InlineFunctionInfo functionInfo);
    internal IDisposable EnterFunctionNameResolution(bool includeInlineFunctions);
    internal IDisposable EnterBackwardCompatibilityResolution();
    internal MetadataMember ResolveMetadataMemberName(String[] name, ErrorContext errCtx);
    internal MetadataMember ResolveMetadataMemberAccess(MetadataMember qualifier, string name, ErrorContext errCtx);
    internal MetadataMember ResolveUnqualifiedName(string name, bool partOfQualifiedName, ErrorContext errCtx);
    internal bool TryGetFunctionFromMetadata(string namespaceName, string functionName, MetadataFunctionGroup& functionGroup);
    internal static string GetFullName(String[] names);
}
internal class System.Data.Common.EntitySql.ValueExpression : ExpressionResolution {
    internal DbExpression Value;
    internal string ExpressionClassName { get; }
    internal static string ValueClassName { get; }
    internal ValueExpression(DbExpression value);
    internal virtual string get_ExpressionClassName();
    internal static string get_ValueClassName();
}
public class System.Data.Common.FieldMetadata : ValueType {
    private EdmMember _fieldType;
    private int _ordinal;
    public EdmMember FieldType { get; }
    public int Ordinal { get; }
    public FieldMetadata(int ordinal, EdmMember fieldType);
    public EdmMember get_FieldType();
    public int get_Ordinal();
}
internal static class System.Data.Common.Internal.DbTypeMap : object {
    internal static TypeUsage AnsiString;
    internal static TypeUsage AnsiStringFixedLength;
    internal static TypeUsage String;
    internal static TypeUsage StringFixedLength;
    internal static TypeUsage Xml;
    internal static TypeUsage Binary;
    internal static TypeUsage Boolean;
    internal static TypeUsage Byte;
    internal static TypeUsage DateTime;
    internal static TypeUsage Date;
    internal static TypeUsage DateTime2;
    internal static TypeUsage Time;
    internal static TypeUsage DateTimeOffset;
    internal static TypeUsage Decimal;
    internal static TypeUsage Currency;
    internal static TypeUsage Double;
    internal static TypeUsage Guid;
    internal static TypeUsage Int16;
    internal static TypeUsage Int32;
    internal static TypeUsage Int64;
    internal static TypeUsage Single;
    internal static TypeUsage SByte;
    private static DbTypeMap();
    internal static bool TryGetModelTypeUsage(DbType dbType, TypeUsage& modelType);
}
internal class System.Data.Common.Internal.Materialization.CollectionTranslatorResult : TranslatorResult {
    internal Expression ExpressionToGetCoordinator;
    internal CollectionTranslatorResult(Expression returnedExpression, ColumnMap columnMap, Type requestedType, Expression expressionToGetCoordinator);
}
internal class System.Data.Common.Internal.Materialization.ColumnMapKeyBuilder : ColumnMapVisitor`1<int> {
    internal static string GetColumnMapKey(ColumnMap columnMap, SpanIndex spanIndex);
    internal void Append(string value);
    internal void Append(string prefix, Type type);
    internal void Append(string prefix, TypeUsage type);
    internal void Append(string prefix, EdmType type);
    internal virtual void Visit(ComplexTypeColumnMap columnMap, int dummy);
    internal virtual void Visit(DiscriminatedCollectionColumnMap columnMap, int dummy);
    internal virtual void Visit(EntityColumnMap columnMap, int dummy);
    internal virtual void Visit(SimplePolymorphicColumnMap columnMap, int dummy);
    internal virtual void Visit(RecordColumnMap columnMap, int dummy);
    internal virtual void Visit(RefColumnMap columnMap, int dummy);
    internal virtual void Visit(ScalarColumnMap columnMap, int dummy);
    internal virtual void Visit(SimpleCollectionColumnMap columnMap, int dummy);
    internal virtual void Visit(VarRefColumnMap columnMap, int dummy);
    internal virtual void Visit(MultipleDiscriminatorPolymorphicColumnMap columnMap, int dummy);
}
internal class System.Data.Common.Internal.Materialization.CompensatingCollection`1 : object {
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    public CompensatingCollection`1(IEnumerable`1<TElement> source);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<TElement> System.Collections.Generic.IEnumerable<TElement>.GetEnumerator();
    private sealed virtual override IOrderedEnumerable`1<TElement> System.Linq.IOrderedEnumerable<TElement>.CreateOrderedEnumerable(Func`2<TElement, K> keySelector, IComparer`1<K> comparer, bool descending);
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
}
internal abstract class System.Data.Common.Internal.Materialization.Coordinator : object {
    internal CoordinatorFactory CoordinatorFactory;
    internal Coordinator Parent;
    internal Coordinator Next;
    public Coordinator Child { get; protected set; }
    public bool IsEntered { get; protected set; }
    internal bool IsRoot { get; }
    protected Coordinator(CoordinatorFactory coordinatorFactory, Coordinator parent, Coordinator next);
    public Coordinator get_Child();
    protected void set_Child(Coordinator value);
    public bool get_IsEntered();
    protected void set_IsEntered(bool value);
    internal bool get_IsRoot();
    internal void Initialize(Shaper shaper);
    internal int MaxDistanceToLeaf();
    internal abstract virtual void ResetCollection(Shaper shaper);
    internal bool HasNextElement(Shaper shaper);
    internal abstract virtual void ReadNextElement(Shaper shaper);
}
internal class System.Data.Common.Internal.Materialization.Coordinator`1 : Coordinator {
    internal CoordinatorFactory`1<T> TypedCoordinatorFactory;
    internal T Current { get; }
    internal Coordinator`1(CoordinatorFactory`1<T> coordinator, Coordinator parent, Coordinator next);
    internal T get_Current();
    internal virtual void ResetCollection(Shaper shaper);
    internal virtual void ReadNextElement(Shaper shaper);
    internal void RegisterCloseHandler(Action`2<Shaper, List`1<IEntityWrapper>> closeHandler);
    internal void SetCurrentToDefault();
}
internal abstract class System.Data.Common.Internal.Materialization.CoordinatorFactory : object {
    internal int Depth;
    internal int StateSlot;
    internal Func`2<Shaper, bool> HasData;
    internal Func`2<Shaper, bool> SetKeys;
    internal Func`2<Shaper, bool> CheckKeys;
    internal ReadOnlyCollection`1<CoordinatorFactory> NestedCoordinators;
    internal bool IsLeafResult;
    internal bool IsSimple;
    internal ReadOnlyCollection`1<RecordStateFactory> RecordStateFactories;
    protected CoordinatorFactory(int depth, int stateSlot, Func`2<Shaper, bool> hasData, Func`2<Shaper, bool> setKeys, Func`2<Shaper, bool> checkKeys, CoordinatorFactory[] nestedCoordinators, RecordStateFactory[] recordStateFactories);
    private static CoordinatorFactory();
    internal abstract virtual Coordinator CreateCoordinator(Coordinator parent, Coordinator next);
}
internal class System.Data.Common.Internal.Materialization.CoordinatorFactory`1 : CoordinatorFactory {
    internal Func`2<Shaper, IEntityWrapper> WrappedElement;
    internal Func`2<Shaper, TElement> Element;
    internal Func`2<Shaper, TElement> ElementWithErrorHandling;
    internal Func`2<Shaper, ICollection`1<TElement>> InitializeCollection;
    public CoordinatorFactory`1(int depth, int stateSlot, Expression hasData, Expression setKeys, Expression checkKeys, CoordinatorFactory[] nestedCoordinators, Expression element, Expression elementWithErrorHandling, Expression initializeCollection, RecordStateFactory[] recordStateFactories);
    internal virtual Coordinator CreateCoordinator(Coordinator parent, Coordinator next);
    internal RecordState GetDefaultRecordState(Shaper`1<RecordState> shaper);
    public virtual string ToString();
}
internal class System.Data.Common.Internal.Materialization.CoordinatorScratchpad : object {
    internal CoordinatorScratchpad Parent { get; }
    internal Expression SetKeys { get; internal set; }
    internal Expression CheckKeys { get; internal set; }
    internal Expression HasData { get; internal set; }
    internal Expression Element { get; internal set; }
    internal Expression InitializeCollection { get; internal set; }
    internal int StateSlotNumber { get; internal set; }
    internal int Depth { get; internal set; }
    internal CoordinatorScratchpad(Type elementType);
    internal CoordinatorScratchpad get_Parent();
    [CompilerGeneratedAttribute]
internal Expression get_SetKeys();
    [CompilerGeneratedAttribute]
internal void set_SetKeys(Expression value);
    [CompilerGeneratedAttribute]
internal Expression get_CheckKeys();
    [CompilerGeneratedAttribute]
internal void set_CheckKeys(Expression value);
    [CompilerGeneratedAttribute]
internal Expression get_HasData();
    [CompilerGeneratedAttribute]
internal void set_HasData(Expression value);
    [CompilerGeneratedAttribute]
internal Expression get_Element();
    [CompilerGeneratedAttribute]
internal void set_Element(Expression value);
    [CompilerGeneratedAttribute]
internal Expression get_InitializeCollection();
    [CompilerGeneratedAttribute]
internal void set_InitializeCollection(Expression value);
    [CompilerGeneratedAttribute]
internal int get_StateSlotNumber();
    [CompilerGeneratedAttribute]
internal void set_StateSlotNumber(int value);
    [CompilerGeneratedAttribute]
internal int get_Depth();
    [CompilerGeneratedAttribute]
internal void set_Depth(int value);
    internal void AddExpressionWithErrorHandling(Expression expression, Expression expressionWithErrorHandling);
    internal void AddInlineDelegate(LambdaExpression expression);
    internal void AddNestedCoordinator(CoordinatorScratchpad nested);
    internal CoordinatorFactory Compile();
    internal RecordStateScratchpad CreateRecordStateScratchpad();
}
internal class System.Data.Common.Internal.Materialization.RecordState : object {
    internal CoordinatorFactory CoordinatorFactory;
    internal Object[] CurrentColumnValues;
    internal Object[] PendingColumnValues;
    internal int ColumnCount { get; }
    internal DataRecordInfo DataRecordInfo { get; }
    internal bool IsNull { get; }
    internal RecordState(RecordStateFactory recordStateFactory, CoordinatorFactory coordinatorFactory);
    internal void AcceptPendingValues();
    internal int get_ColumnCount();
    internal DataRecordInfo get_DataRecordInfo();
    internal bool get_IsNull();
    internal long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    internal long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    internal string GetName(int ordinal);
    internal int GetOrdinal(string name);
    internal TypeUsage GetTypeUsage(int ordinal);
    internal bool IsNestedObject(int ordinal);
    internal void ResetToDefaultState();
    internal RecordState GatherData(Shaper shaper);
    internal bool SetColumnValue(int ordinal, object value);
    internal bool SetEntityRecordInfo(EntityKey entityKey, EntitySet entitySet);
    internal RecordState SetNullRecord(Shaper shaper);
}
internal class System.Data.Common.Internal.Materialization.RecordStateFactory : object {
    internal int StateSlotNumber;
    internal int ColumnCount;
    internal DataRecordInfo DataRecordInfo;
    internal Func`2<Shaper, bool> GatherData;
    internal ReadOnlyCollection`1<RecordStateFactory> NestedRecordStateFactories;
    internal ReadOnlyCollection`1<string> ColumnNames;
    internal ReadOnlyCollection`1<TypeUsage> TypeUsages;
    internal ReadOnlyCollection`1<bool> IsColumnNested;
    internal bool HasNestedColumns;
    internal FieldNameLookup FieldNameLookup;
    public RecordStateFactory(int stateSlotNumber, int columnCount, RecordStateFactory[] nestedRecordStateFactories, DataRecordInfo dataRecordInfo, Expression gatherData, String[] propertyNames, TypeUsage[] typeUsages);
    internal RecordState Create(CoordinatorFactory coordinatorFactory);
}
internal class System.Data.Common.Internal.Materialization.RecordStateScratchpad : object {
    internal int StateSlotNumber { get; internal set; }
    internal int ColumnCount { get; internal set; }
    internal DataRecordInfo DataRecordInfo { get; internal set; }
    internal Expression GatherData { get; internal set; }
    internal String[] PropertyNames { get; internal set; }
    internal TypeUsage[] TypeUsages { get; internal set; }
    internal int get_StateSlotNumber();
    internal void set_StateSlotNumber(int value);
    internal int get_ColumnCount();
    internal void set_ColumnCount(int value);
    internal DataRecordInfo get_DataRecordInfo();
    internal void set_DataRecordInfo(DataRecordInfo value);
    internal Expression get_GatherData();
    internal void set_GatherData(Expression value);
    internal String[] get_PropertyNames();
    internal void set_PropertyNames(String[] value);
    internal TypeUsage[] get_TypeUsages();
    internal void set_TypeUsages(TypeUsage[] value);
    internal RecordStateFactory Compile();
}
internal abstract class System.Data.Common.Internal.Materialization.Shaper : object {
    public DbDataReader Reader;
    public Object[] State;
    public ObjectContext Context;
    public MetadataWorkspace Workspace;
    public MergeOption MergeOption;
    internal Shaper(DbDataReader reader, ObjectContext context, MetadataWorkspace workspace, MergeOption mergeOption, int stateCount);
    public TElement Discriminate(Object[] discriminatorValues, Func`2<Object[], EntityType> discriminate, KeyValuePair`2[] elementDelegates);
    public IEntityWrapper HandleEntityNoTracking(IEntityWrapper wrappedEntity);
    public IEntityWrapper HandleEntity(IEntityWrapper wrappedEntity, EntityKey entityKey, EntitySet entitySet);
    public IEntityWrapper HandleEntityAppendOnly(Func`2<Shaper, IEntityWrapper> constructEntityDelegate, EntityKey entityKey, EntitySet entitySet);
    public IEntityWrapper HandleFullSpanCollection(IEntityWrapper wrappedEntity, Coordinator`1<T_TargetEntity> coordinator, AssociationEndMember targetMember);
    public IEntityWrapper HandleFullSpanElement(IEntityWrapper wrappedSource, IEntityWrapper wrappedSpannedEntity, AssociationEndMember targetMember);
    public IEntityWrapper HandleRelationshipSpan(IEntityWrapper wrappedEntity, EntityKey targetKey, AssociationEndMember targetMember);
    public IEntityWrapper HandleIEntityWithKey(IEntityWrapper wrappedEntity, EntitySet entitySet);
    public bool SetColumnValue(int recordStateSlotNumber, int ordinal, object value);
    public bool SetEntityRecordInfo(int recordStateSlotNumber, EntityKey entityKey, EntitySet entitySet);
    public bool SetState(int ordinal, T value);
    public T SetStatePassthrough(int ordinal, T value);
    public TProperty GetPropertyValueWithErrorHandling(int ordinal, string propertyName, string typeName);
    public TColumn GetColumnValueWithErrorHandling(int ordinal);
    public DbGeography GetGeographyColumnValue(int ordinal);
    public DbGeometry GetGeometryColumnValue(int ordinal);
    public TColumn GetSpatialColumnValueWithErrorHandling(int ordinal, PrimitiveTypeKind spatialTypeKind);
    public TProperty GetSpatialPropertyValueWithErrorHandling(int ordinal, string propertyName, string typeName, PrimitiveTypeKind spatialTypeKind);
    public void RaiseMaterializedEvents();
    public void InitializeForOnMaterialize();
    protected void RegisterMaterializedEntityForEvent(IEntityWrapper wrappedEntity);
}
internal class System.Data.Common.Internal.Materialization.Shaper`1 : Shaper {
    internal Coordinator`1<T> RootCoordinator;
    internal bool DataWaiting { get; internal set; }
    internal IEnumerator`1<T> RootEnumerator { get; }
    internal Shaper`1(DbDataReader reader, ObjectContext context, MetadataWorkspace workspace, MergeOption mergeOption, int stateCount, CoordinatorFactory`1<T> rootCoordinatorFactory, Action checkPermissions, bool readerOwned);
    internal void add_OnDone(EventHandler value);
    internal void remove_OnDone(EventHandler value);
    internal bool get_DataWaiting();
    internal void set_DataWaiting(bool value);
    internal IEnumerator`1<T> get_RootEnumerator();
    public IEnumerator`1<T> GetEnumerator();
}
internal abstract class System.Data.Common.Internal.Materialization.ShaperFactory : object {
    internal static ShaperFactory Create(Type elementType, QueryCacheManager cacheManager, ColumnMap columnMap, MetadataWorkspace metadata, SpanIndex spanInfo, MergeOption mergeOption, bool valueLayer);
}
internal class System.Data.Common.Internal.Materialization.ShaperFactory`1 : ShaperFactory {
    internal ShaperFactory`1(int stateCount, CoordinatorFactory`1<T> rootCoordinatorFactory, Action checkPermissions, MergeOption mergeOption);
    internal Shaper`1<T> Create(DbDataReader reader, ObjectContext context, MetadataWorkspace workspace, MergeOption mergeOption, bool readerOwned);
}
internal class System.Data.Common.Internal.Materialization.Translator : ColumnMapVisitorWithResults`2<TranslatorResult, TranslatorArg> {
    internal static ParameterExpression Shaper_Parameter;
    internal static Expression Shaper_Reader;
    private static Translator();
    internal static ShaperFactory`1<TRequestedType> TranslateColumnMap(QueryCacheManager queryCacheManager, ColumnMap columnMap, MetadataWorkspace workspace, SpanIndex spanIndex, MergeOption mergeOption, bool valueLayer);
    [SecuritySafeCriticalAttribute]
internal static Func`2<Shaper, TResult> Compile(Expression body);
    internal static object Compile(Type resultType, Expression body);
    internal static Expression Emit_NullConstant(Type type);
    internal static Expression Emit_WrappedNullConstant(Type type);
    internal static Expression Emit_EnsureType(Expression input, Type type);
    internal static Expression Emit_EnsureTypeAndWrap(Expression input, Expression keyReader, Expression entitySetReader, Type requestedType, Type identityType, Type actualType, MergeOption mergeOption, bool isProxy);
    internal static Expression Emit_UnwrapAndEnsureType(Expression input, Type type);
    internal virtual TranslatorResult Visit(ComplexTypeColumnMap columnMap, TranslatorArg arg);
    internal virtual TranslatorResult Visit(EntityColumnMap columnMap, TranslatorArg arg);
    internal virtual TranslatorResult Visit(SimplePolymorphicColumnMap columnMap, TranslatorArg arg);
    internal virtual TranslatorResult Visit(MultipleDiscriminatorPolymorphicColumnMap columnMap, TranslatorArg arg);
    internal virtual TranslatorResult Visit(RecordColumnMap columnMap, TranslatorArg arg);
    internal virtual TranslatorResult Visit(SimpleCollectionColumnMap columnMap, TranslatorArg arg);
    internal virtual TranslatorResult Visit(DiscriminatedCollectionColumnMap columnMap, TranslatorArg arg);
    internal virtual TranslatorResult Visit(RefColumnMap columnMap, TranslatorArg arg);
    internal virtual TranslatorResult Visit(ScalarColumnMap columnMap, TranslatorArg arg);
    internal static MethodInfo GetReaderMethod(Type type, Boolean& isNullable);
    internal virtual TranslatorResult Visit(VarRefColumnMap columnMap, TranslatorArg arg);
}
internal class System.Data.Common.Internal.Materialization.TranslatorArg : ValueType {
    internal Type RequestedType;
    internal TranslatorArg(Type requestedType);
}
internal class System.Data.Common.Internal.Materialization.TranslatorResult : object {
    internal Expression Expression { get; }
    internal Expression UnconvertedExpression { get; }
    internal Expression UnwrappedExpression { get; }
    internal TranslatorResult(Expression returnedExpression, Type requestedType);
    internal Expression get_Expression();
    internal Expression get_UnconvertedExpression();
    internal Expression get_UnwrappedExpression();
}
internal static class System.Data.Common.Internal.Materialization.Util : object {
    internal static ObjectTypeMapping GetObjectMapping(EdmType type, MetadataWorkspace workspace);
}
internal static class System.Data.Common.Internal.MultipartIdentifier : object {
    internal static int ServerIndex;
    internal static int CatalogIndex;
    internal static int SchemaIndex;
    internal static int TableIndex;
    internal static List`1<string> ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, char separator);
}
internal class System.Data.Common.QueryCache.CompiledQueryCacheEntry : QueryCacheEntry {
    public Nullable`1<MergeOption> PropagatedMergeOption;
    internal CompiledQueryCacheEntry(QueryCacheKey queryCacheKey, Nullable`1<MergeOption> mergeOption);
    internal ObjectQueryExecutionPlan GetExecutionPlan(MergeOption mergeOption, bool useCSharpNullComparisonBehavior);
    internal ObjectQueryExecutionPlan SetExecutionPlan(ObjectQueryExecutionPlan newPlan, bool useCSharpNullComparisonBehavior);
    internal bool TryGetResultType(TypeUsage& resultType);
    internal virtual object GetTarget();
}
internal class System.Data.Common.QueryCache.CompiledQueryCacheKey : QueryCacheKey {
    internal CompiledQueryCacheKey(Guid cacheIdentity);
    public virtual bool Equals(object compareTo);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Common.QueryCache.EntityClientCacheKey : QueryCacheKey {
    internal EntityClientCacheKey(EntityCommand entityCommand);
    public virtual bool Equals(object otherObject);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Common.QueryCache.EntitySqlQueryCacheKey : QueryCacheKey {
    internal EntitySqlQueryCacheKey(string defaultContainerName, string eSqlStatement, int parameterCount, string parametersToken, string includePathsToken, MergeOption mergeOption, Type resultType);
    public virtual bool Equals(object otherObject);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Common.QueryCache.LinqQueryCacheKey : QueryCacheKey {
    internal LinqQueryCacheKey(string expressionKey, int parameterCount, string parametersToken, string includePathsToken, MergeOption mergeOption, bool useCSharpNullComparisonBehavior, Type resultType);
    public virtual bool Equals(object otherObject);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Common.QueryCache.QueryCacheEntry : object {
    protected object _target;
    internal QueryCacheKey QueryCacheKey { get; }
    internal QueryCacheEntry(QueryCacheKey queryCacheKey, object target);
    internal virtual object GetTarget();
    internal QueryCacheKey get_QueryCacheKey();
}
internal abstract class System.Data.Common.QueryCache.QueryCacheKey : object {
    protected static int EstimatedParameterStringSize;
    protected static StringComparison _stringComparison;
    internal UInt32 HitCount { get; internal set; }
    internal int AgingIndex { get; internal set; }
    private static QueryCacheKey();
    public abstract virtual bool Equals(object obj);
    public abstract virtual int GetHashCode();
    internal UInt32 get_HitCount();
    internal void set_HitCount(UInt32 value);
    internal int get_AgingIndex();
    internal void set_AgingIndex(int value);
    internal void UpdateHit();
    protected virtual bool Equals(string s, string t);
}
internal class System.Data.Common.QueryCache.QueryCacheManager : object {
    private static QueryCacheManager();
    internal static QueryCacheManager Create();
    internal bool TryLookupAndAdd(QueryCacheEntry inQueryCacheEntry, QueryCacheEntry& outQueryCacheEntry);
    internal bool TryCacheLookup(TK key, TE& value);
    internal void Clear();
    public sealed virtual void Dispose();
}
internal class System.Data.Common.QueryCache.ShaperFactoryQueryCacheKey`1 : QueryCacheKey {
    internal ShaperFactoryQueryCacheKey`1(string columnMapKey, MergeOption mergeOption, bool isValueLayer);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.Data.Common.TypeHelpers : object {
    internal static ReadOnlyMetadataCollection`1<EdmMember> EmptyArrayEdmMember;
    internal static FilteredReadOnlyMetadataCollection`2<EdmProperty, EdmMember> EmptyArrayEdmProperty;
    private static TypeHelpers();
    [ConditionalAttribute("DEBUG")]
internal static void AssertEdmType(TypeUsage typeUsage);
    [ConditionalAttribute("DEBUG")]
internal static void AssertEdmType(DbCommandTree commandTree);
    internal static bool IsValidSortOpKeyType(TypeUsage typeUsage);
    internal static bool IsValidGroupKeyType(TypeUsage typeUsage);
    internal static bool IsValidDistinctOpType(TypeUsage typeUsage);
    internal static bool IsSetComparableOpType(TypeUsage typeUsage);
    internal static bool IsValidIsNullOpType(TypeUsage typeUsage);
    internal static bool IsValidInOpType(TypeUsage typeUsage);
    internal static TypeUsage GetCommonTypeUsage(TypeUsage typeUsage1, TypeUsage typeUsage2);
    internal static TypeUsage GetCommonTypeUsage(IEnumerable`1<TypeUsage> types);
    internal static bool TryGetClosestPromotableType(TypeUsage fromType, TypeUsage& promotableType);
    internal static bool TryGetBooleanFacetValue(TypeUsage type, string facetName, Boolean& boolValue);
    internal static bool TryGetByteFacetValue(TypeUsage type, string facetName, Byte& byteValue);
    internal static bool TryGetIntFacetValue(TypeUsage type, string facetName, Int32& intValue);
    internal static bool TryGetIsFixedLength(TypeUsage type, Boolean& isFixedLength);
    internal static bool TryGetIsUnicode(TypeUsage type, Boolean& isUnicode);
    internal static bool IsFacetValueConstant(TypeUsage type, string facetName);
    internal static bool TryGetMaxLength(TypeUsage type, Int32& maxLength);
    internal static bool TryGetPrecision(TypeUsage type, Byte& precision);
    internal static bool TryGetScale(TypeUsage type, Byte& scale);
    internal static bool TryGetPrimitiveTypeKind(TypeUsage type, PrimitiveTypeKind& typeKind);
    internal static CollectionType CreateCollectionType(TypeUsage elementType);
    internal static TypeUsage CreateCollectionTypeUsage(TypeUsage elementType);
    internal static TypeUsage CreateCollectionTypeUsage(TypeUsage elementType, bool readOnly);
    internal static RowType CreateRowType(IEnumerable`1<KeyValuePair`2<string, TypeUsage>> columns);
    internal static RowType CreateRowType(IEnumerable`1<KeyValuePair`2<string, TypeUsage>> columns, InitializerMetadata initializerMetadata);
    internal static TypeUsage CreateRowTypeUsage(IEnumerable`1<KeyValuePair`2<string, TypeUsage>> columns, bool readOnly);
    internal static RefType CreateReferenceType(EntityTypeBase entityType);
    internal static TypeUsage CreateReferenceTypeUsage(EntityType entityType);
    internal static RowType CreateKeyRowType(EntityTypeBase entityType);
    internal static TypeUsage GetPrimitiveTypeUsageForScalar(TypeUsage scalarType);
    internal static TypeUsage CreateEnumUnderlyingTypeUsage(TypeUsage enumTypeUsage);
    internal static TypeUsage CreateSpatialUnionTypeUsage(TypeUsage spatialTypeUsage);
    internal static IBaseList`1<EdmMember> GetAllStructuralMembers(TypeUsage type);
    internal static IBaseList`1<EdmMember> GetAllStructuralMembers(EdmType edmType);
    internal static IEnumerable GetDeclaredStructuralMembers(TypeUsage type);
    internal static IEnumerable GetDeclaredStructuralMembers(EdmType edmType);
    internal static ReadOnlyMetadataCollection`1<EdmProperty> GetProperties(TypeUsage typeUsage);
    internal static ReadOnlyMetadataCollection`1<EdmProperty> GetProperties(EdmType edmType);
    internal static TypeUsage GetElementTypeUsage(TypeUsage type);
    internal static RowType GetTvfReturnType(EdmFunction tvf);
    internal static bool TryGetCollectionElementType(TypeUsage type, TypeUsage& elementType);
    internal static bool TryGetRefEntityType(TypeUsage type, EntityType& referencedEntityType);
    internal static TEdmType GetEdmType(TypeUsage typeUsage);
    internal static bool TryGetEdmType(TypeUsage typeUsage, TEdmType& type);
    internal static TypeUsage GetReadOnlyType(TypeUsage type);
    internal static string GetFullName(TypeUsage type);
    internal static string GetFullName(EdmType type);
    internal static string GetFullName(EntitySetBase entitySet);
    internal static string GetFullName(string qualifier, string name);
    internal static DbType ConvertClrTypeToDbType(Type clrType);
    internal static bool IsIntegerConstant(TypeUsage valueType, object value, long expectedValue);
    internal static TypeUsage GetLiteralTypeUsage(PrimitiveTypeKind primitiveTypeKind);
    internal static TypeUsage GetLiteralTypeUsage(PrimitiveTypeKind primitiveTypeKind, bool isUnicode);
    internal static bool IsCanonicalFunction(EdmFunction function);
}
internal class System.Data.Common.Utils.AliasGenerator : object {
    internal AliasGenerator(string prefix);
    internal AliasGenerator(string prefix, int cacheSize);
    private static AliasGenerator();
    internal string Next();
    internal string GetName(int index);
}
internal class System.Data.Common.Utils.Boolean.AndExpr`1 : TreeExpr`1<T_Identifier> {
    internal ExprType ExprType { get; }
    internal AndExpr`1(BoolExpr`1[] children);
    internal AndExpr`1(IEnumerable`1<BoolExpr`1<T_Identifier>> children);
    internal virtual ExprType get_ExprType();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
}
internal abstract class System.Data.Common.Utils.Boolean.BasicVisitor`1 : Visitor`2<T_Identifier, BoolExpr`1<T_Identifier>> {
    internal virtual BoolExpr`1<T_Identifier> VisitFalse(FalseExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitTrue(TrueExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitTerm(TermExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitNot(NotExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitAnd(AndExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitOr(OrExpr`1<T_Identifier> expression);
}
internal class System.Data.Common.Utils.Boolean.BooleanExpressionTermRewriter`2 : Visitor`2<T_From, BoolExpr`1<T_To>> {
    internal BooleanExpressionTermRewriter`2(Func`2<TermExpr`1<T_From>, BoolExpr`1<T_To>> translator);
    internal virtual BoolExpr`1<T_To> VisitFalse(FalseExpr`1<T_From> expression);
    internal virtual BoolExpr`1<T_To> VisitTrue(TrueExpr`1<T_From> expression);
    internal virtual BoolExpr`1<T_To> VisitNot(NotExpr`1<T_From> expression);
    internal virtual BoolExpr`1<T_To> VisitTerm(TermExpr`1<T_From> expression);
    internal virtual BoolExpr`1<T_To> VisitAnd(AndExpr`1<T_From> expression);
    internal virtual BoolExpr`1<T_To> VisitOr(OrExpr`1<T_From> expression);
}
internal abstract class System.Data.Common.Utils.Boolean.BoolExpr`1 : object {
    internal ExprType ExprType { get; }
    internal abstract virtual ExprType get_ExprType();
    internal abstract virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
    internal BoolExpr`1<T_Identifier> Simplify();
    internal BoolExpr`1<T_Identifier> ExpensiveSimplify(Converter`1& converter);
    internal List`1<TermExpr`1<T_Identifier>> GetTerms();
    internal int CountTerms();
    public static BoolExpr`1<T_Identifier> op_Implicit(T_Identifier value);
    internal virtual BoolExpr`1<T_Identifier> MakeNegated();
    public virtual string ToString();
    public sealed virtual bool Equals(BoolExpr`1<T_Identifier> other);
    protected abstract virtual bool EquivalentTypeEquals(BoolExpr`1<T_Identifier> other);
}
internal abstract class System.Data.Common.Utils.Boolean.Clause`1 : NormalFormNode`1<T_Identifier> {
    internal Set`1<Literal`1<T_Identifier>> Literals { get; }
    protected Clause`1(Set`1<Literal`1<T_Identifier>> literals, ExprType treeType);
    internal Set`1<Literal`1<T_Identifier>> get_Literals();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class System.Data.Common.Utils.Boolean.CnfClause`1 : Clause`1<T_Identifier> {
    internal CnfClause`1(Set`1<Literal`1<T_Identifier>> literals);
    public sealed virtual bool Equals(CnfClause`1<T_Identifier> other);
}
internal class System.Data.Common.Utils.Boolean.CnfSentence`1 : Sentence`2<T_Identifier, CnfClause`1<T_Identifier>> {
    internal CnfSentence`1(Set`1<CnfClause`1<T_Identifier>> clauses);
}
internal abstract class System.Data.Common.Utils.Boolean.ConversionContext`1 : object {
    internal Solver Solver;
    internal abstract virtual Vertex TranslateTermToVertex(TermExpr`1<T_Identifier> term);
    internal abstract virtual IEnumerable`1<LiteralVertexPair`1<T_Identifier>> GetSuccessors(Vertex vertex);
}
internal class System.Data.Common.Utils.Boolean.Converter`1 : object {
    internal Vertex Vertex { get; }
    internal DnfSentence`1<T_Identifier> Dnf { get; }
    internal CnfSentence`1<T_Identifier> Cnf { get; }
    internal Converter`1(BoolExpr`1<T_Identifier> expr, ConversionContext`1<T_Identifier> context);
    internal Vertex get_Vertex();
    internal DnfSentence`1<T_Identifier> get_Dnf();
    internal CnfSentence`1<T_Identifier> get_Cnf();
}
internal class System.Data.Common.Utils.Boolean.DnfClause`1 : Clause`1<T_Identifier> {
    internal DnfClause`1(Set`1<Literal`1<T_Identifier>> literals);
    public sealed virtual bool Equals(DnfClause`1<T_Identifier> other);
}
internal class System.Data.Common.Utils.Boolean.DnfSentence`1 : Sentence`2<T_Identifier, DnfClause`1<T_Identifier>> {
    internal DnfSentence`1(Set`1<DnfClause`1<T_Identifier>> clauses);
}
internal class System.Data.Common.Utils.Boolean.DomainConstraint`2 : object {
    internal DomainVariable`2<T_Variable, T_Element> Variable { get; }
    internal Set`1<T_Element> Range { get; }
    internal DomainConstraint`2(DomainVariable`2<T_Variable, T_Element> variable, Set`1<T_Element> range);
    internal DomainConstraint`2(DomainVariable`2<T_Variable, T_Element> variable, T_Element element);
    internal DomainVariable`2<T_Variable, T_Element> get_Variable();
    internal Set`1<T_Element> get_Range();
    internal DomainConstraint`2<T_Variable, T_Element> InvertDomainConstraint();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Common.Utils.Boolean.DomainConstraintConversionContext`2 : ConversionContext`1<DomainConstraint`2<T_Variable, T_Element>> {
    internal virtual Vertex TranslateTermToVertex(TermExpr`1<DomainConstraint`2<T_Variable, T_Element>> term);
    internal virtual IEnumerable`1<LiteralVertexPair`1<DomainConstraint`2<T_Variable, T_Element>>> GetSuccessors(Vertex vertex);
}
internal class System.Data.Common.Utils.Boolean.DomainVariable`2 : object {
    internal T_Variable Identifier { get; }
    internal Set`1<T_Element> Domain { get; }
    internal DomainVariable`2(T_Variable identifier, Set`1<T_Element> domain, IEqualityComparer`1<T_Variable> identifierComparer);
    internal DomainVariable`2(T_Variable identifier, Set`1<T_Element> domain);
    internal T_Variable get_Identifier();
    internal Set`1<T_Element> get_Domain();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
}
internal enum System.Data.Common.Utils.Boolean.ExprType : Enum {
    public int value__;
    public static ExprType And;
    public static ExprType Not;
    public static ExprType Or;
    public static ExprType Term;
    public static ExprType True;
    public static ExprType False;
}
internal class System.Data.Common.Utils.Boolean.FalseExpr`1 : BoolExpr`1<T_Identifier> {
    internal static FalseExpr`1<T_Identifier> Value { get; }
    internal ExprType ExprType { get; }
    private static FalseExpr`1();
    internal static FalseExpr`1<T_Identifier> get_Value();
    internal virtual ExprType get_ExprType();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
    internal virtual BoolExpr`1<T_Identifier> MakeNegated();
    protected virtual bool EquivalentTypeEquals(BoolExpr`1<T_Identifier> other);
}
internal class System.Data.Common.Utils.Boolean.GenericConversionContext`1 : ConversionContext`1<T_Identifier> {
    internal virtual Vertex TranslateTermToVertex(TermExpr`1<T_Identifier> term);
    internal virtual IEnumerable`1<LiteralVertexPair`1<T_Identifier>> GetSuccessors(Vertex vertex);
}
internal abstract class System.Data.Common.Utils.Boolean.IdentifierService`1 : object {
    internal static IdentifierService`1<T_Identifier> Instance;
    private static IdentifierService`1();
    internal abstract virtual Literal`1<T_Identifier> NegateLiteral(Literal`1<T_Identifier> literal);
    internal abstract virtual ConversionContext`1<T_Identifier> CreateConversionContext();
    internal abstract virtual BoolExpr`1<T_Identifier> LocalSimplify(BoolExpr`1<T_Identifier> expression);
}
internal class System.Data.Common.Utils.Boolean.KnowledgeBase`1 : object {
    internal void AddKnowledgeBase(KnowledgeBase`1<T_Identifier> kb);
    internal virtual void AddFact(BoolExpr`1<T_Identifier> fact);
    internal void AddImplication(BoolExpr`1<T_Identifier> condition, BoolExpr`1<T_Identifier> implies);
    internal void AddEquivalence(BoolExpr`1<T_Identifier> left, BoolExpr`1<T_Identifier> right);
    public virtual string ToString();
}
internal class System.Data.Common.Utils.Boolean.LeafVisitor`1 : Visitor`2<T_Identifier, bool> {
    internal static List`1<TermExpr`1<T_Identifier>> GetTerms(BoolExpr`1<T_Identifier> expression);
    internal static IEnumerable`1<T_Identifier> GetLeaves(BoolExpr`1<T_Identifier> expression);
    internal virtual bool VisitTrue(TrueExpr`1<T_Identifier> expression);
    internal virtual bool VisitFalse(FalseExpr`1<T_Identifier> expression);
    internal virtual bool VisitTerm(TermExpr`1<T_Identifier> expression);
    internal virtual bool VisitNot(NotExpr`1<T_Identifier> expression);
    internal virtual bool VisitAnd(AndExpr`1<T_Identifier> expression);
    internal virtual bool VisitOr(OrExpr`1<T_Identifier> expression);
}
internal class System.Data.Common.Utils.Boolean.Literal`1 : NormalFormNode`1<T_Identifier> {
    internal TermExpr`1<T_Identifier> Term { get; }
    internal bool IsTermPositive { get; }
    internal Literal`1(TermExpr`1<T_Identifier> term, bool isTermPositive);
    internal TermExpr`1<T_Identifier> get_Term();
    internal bool get_IsTermPositive();
    internal Literal`1<T_Identifier> MakeNegated();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Literal`1<T_Identifier> other);
    public virtual int GetHashCode();
}
internal class System.Data.Common.Utils.Boolean.LiteralVertexPair`1 : object {
    internal Vertex Vertex;
    internal Literal`1<T_Identifier> Literal;
    internal LiteralVertexPair`1(Vertex vertex, Literal`1<T_Identifier> literal);
}
internal static class System.Data.Common.Utils.Boolean.NegationPusher : object {
    internal static BoolExpr`1<DomainConstraint`2<T_Variable, T_Element>> EliminateNot(BoolExpr`1<DomainConstraint`2<T_Variable, T_Element>> expression);
}
internal abstract class System.Data.Common.Utils.Boolean.NormalFormNode`1 : object {
    internal BoolExpr`1<T_Identifier> Expr { get; }
    protected NormalFormNode`1(BoolExpr`1<T_Identifier> expr);
    internal BoolExpr`1<T_Identifier> get_Expr();
    protected static BoolExpr`1<T_Identifier> ExprSelector(T_NormalFormNode node);
}
internal class System.Data.Common.Utils.Boolean.NotExpr`1 : TreeExpr`1<T_Identifier> {
    internal ExprType ExprType { get; }
    internal BoolExpr`1<T_Identifier> Child { get; }
    internal NotExpr`1(BoolExpr`1<T_Identifier> child);
    internal virtual ExprType get_ExprType();
    internal BoolExpr`1<T_Identifier> get_Child();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
    public virtual string ToString();
    internal virtual BoolExpr`1<T_Identifier> MakeNegated();
}
internal class System.Data.Common.Utils.Boolean.OrExpr`1 : TreeExpr`1<T_Identifier> {
    internal ExprType ExprType { get; }
    internal OrExpr`1(BoolExpr`1[] children);
    internal OrExpr`1(IEnumerable`1<BoolExpr`1<T_Identifier>> children);
    internal virtual ExprType get_ExprType();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
}
internal abstract class System.Data.Common.Utils.Boolean.Sentence`2 : NormalFormNode`1<T_Identifier> {
    protected Sentence`2(Set`1<T_Clause> clauses, ExprType treeType);
    public virtual string ToString();
}
internal class System.Data.Common.Utils.Boolean.Simplifier`1 : BasicVisitor`1<T_Identifier> {
    internal static Simplifier`1<T_Identifier> Instance;
    private static Simplifier`1();
    internal virtual BoolExpr`1<T_Identifier> VisitNot(NotExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitAnd(AndExpr`1<T_Identifier> expression);
    internal virtual BoolExpr`1<T_Identifier> VisitOr(OrExpr`1<T_Identifier> expression);
}
internal class System.Data.Common.Utils.Boolean.Solver : object {
    internal static Vertex[] BooleanVariableChildren;
    private static Solver();
    internal int CreateVariable();
    internal Vertex Not(Vertex vertex);
    internal Vertex And(IEnumerable`1<Vertex> children);
    internal Vertex And(Vertex left, Vertex right);
    internal Vertex Or(IEnumerable`1<Vertex> children);
    internal Vertex CreateLeafVertex(int variable, Vertex[] children);
}
internal class System.Data.Common.Utils.Boolean.TermCounter`1 : Visitor`2<T_Identifier, int> {
    private static TermCounter`1();
    internal static int CountTerms(BoolExpr`1<T_Identifier> expression);
    internal virtual int VisitTrue(TrueExpr`1<T_Identifier> expression);
    internal virtual int VisitFalse(FalseExpr`1<T_Identifier> expression);
    internal virtual int VisitTerm(TermExpr`1<T_Identifier> expression);
    internal virtual int VisitNot(NotExpr`1<T_Identifier> expression);
    internal virtual int VisitAnd(AndExpr`1<T_Identifier> expression);
    internal virtual int VisitOr(OrExpr`1<T_Identifier> expression);
}
internal class System.Data.Common.Utils.Boolean.TermExpr`1 : BoolExpr`1<T_Identifier> {
    internal T_Identifier Identifier { get; }
    internal ExprType ExprType { get; }
    internal TermExpr`1(IEqualityComparer`1<T_Identifier> comparer, T_Identifier identifier);
    internal TermExpr`1(T_Identifier identifier);
    internal T_Identifier get_Identifier();
    internal virtual ExprType get_ExprType();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TermExpr`1<T_Identifier> other);
    protected virtual bool EquivalentTypeEquals(BoolExpr`1<T_Identifier> other);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
    internal virtual BoolExpr`1<T_Identifier> MakeNegated();
}
internal class System.Data.Common.Utils.Boolean.ToDecisionDiagramConverter`1 : Visitor`2<T_Identifier, Vertex> {
    internal static Vertex TranslateToRobdd(BoolExpr`1<T_Identifier> expr, ConversionContext`1<T_Identifier> context);
    internal virtual Vertex VisitTrue(TrueExpr`1<T_Identifier> expression);
    internal virtual Vertex VisitFalse(FalseExpr`1<T_Identifier> expression);
    internal virtual Vertex VisitTerm(TermExpr`1<T_Identifier> expression);
    internal virtual Vertex VisitNot(NotExpr`1<T_Identifier> expression);
    internal virtual Vertex VisitAnd(AndExpr`1<T_Identifier> expression);
    internal virtual Vertex VisitOr(OrExpr`1<T_Identifier> expression);
}
internal abstract class System.Data.Common.Utils.Boolean.TreeExpr`1 : BoolExpr`1<T_Identifier> {
    internal Set`1<BoolExpr`1<T_Identifier>> Children { get; }
    protected TreeExpr`1(IEnumerable`1<BoolExpr`1<T_Identifier>> children);
    internal Set`1<BoolExpr`1<T_Identifier>> get_Children();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected virtual bool EquivalentTypeEquals(BoolExpr`1<T_Identifier> other);
}
internal class System.Data.Common.Utils.Boolean.Triple`3 : ValueType {
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    internal Triple`3(T1 value1, T2 value2, T3 value3);
    public sealed virtual bool Equals(Triple`3<T1, T2, T3> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Data.Common.Utils.Boolean.TrueExpr`1 : BoolExpr`1<T_Identifier> {
    internal static TrueExpr`1<T_Identifier> Value { get; }
    internal ExprType ExprType { get; }
    private static TrueExpr`1();
    internal static TrueExpr`1<T_Identifier> get_Value();
    internal virtual ExprType get_ExprType();
    internal virtual T_Return Accept(Visitor`2<T_Identifier, T_Return> visitor);
    internal virtual BoolExpr`1<T_Identifier> MakeNegated();
    protected virtual bool EquivalentTypeEquals(BoolExpr`1<T_Identifier> other);
}
internal class System.Data.Common.Utils.Boolean.Vertex : object {
    internal static Vertex One;
    internal static Vertex Zero;
    internal int Variable;
    internal Vertex[] Children;
    internal Vertex(int variable, Vertex[] children);
    private static Vertex();
    internal bool IsOne();
    internal bool IsZero();
    internal bool IsSink();
    public sealed virtual bool Equals(Vertex other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal abstract class System.Data.Common.Utils.Boolean.Visitor`2 : object {
    internal abstract virtual T_Return VisitTrue(TrueExpr`1<T_Identifier> expression);
    internal abstract virtual T_Return VisitFalse(FalseExpr`1<T_Identifier> expression);
    internal abstract virtual T_Return VisitTerm(TermExpr`1<T_Identifier> expression);
    internal abstract virtual T_Return VisitNot(NotExpr`1<T_Identifier> expression);
    internal abstract virtual T_Return VisitAnd(AndExpr`1<T_Identifier> expression);
    internal abstract virtual T_Return VisitOr(OrExpr`1<T_Identifier> expression);
}
internal class System.Data.Common.Utils.ByValueComparer : object {
    internal static IComparer Default;
    private static ByValueComparer();
    private sealed virtual override int System.Collections.IComparer.Compare(object x, object y);
}
internal class System.Data.Common.Utils.ByValueEqualityComparer : object {
    internal static ByValueEqualityComparer Default;
    private static ByValueEqualityComparer();
    public sealed virtual bool Equals(object x, object y);
    public sealed virtual int GetHashCode(object obj);
    internal static int ComputeBinaryHashCode(Byte[] bytes);
    internal static bool CompareBinaryValues(Byte[] first, Byte[] second);
}
internal static class System.Data.Common.Utils.CommandHelper : object {
    internal static void ConsumeReader(DbDataReader reader);
    internal static void ParseFunctionImportCommandText(string commandText, string defaultContainerName, String& containerName, String& functionImportName);
    internal static EntityTransaction GetEntityTransaction(EntityCommand entityCommand);
    internal static void SetStoreProviderCommandState(EntityCommand entityCommand, EntityTransaction entityTransaction, DbCommand storeProviderCommand);
    internal static void SetEntityParameterValues(EntityCommand entityCommand, DbCommand storeProviderCommand, EntityConnection connection);
    internal static EdmFunction FindFunctionImport(MetadataWorkspace workspace, string containerName, string functionImportName);
}
internal class System.Data.Common.Utils.DisposableCollectionWrapper`1 : object {
    internal DisposableCollectionWrapper`1(IEnumerable`1<T> enumerable);
    public sealed virtual void Dispose();
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class System.Data.Common.Utils.Helpers : object {
    internal static void FormatTraceLine(string format, Object[] args);
    internal static void StringTrace(string arg);
    internal static void StringTraceLine(string arg);
    internal static bool IsSetEqual(IEnumerable`1<Type> list1, IEnumerable`1<Type> list2, IEqualityComparer`1<Type> comparer);
    internal static IEnumerable`1<SuperType> AsSuperTypeList(IEnumerable`1<SubType> values);
    internal static TElement[] Prepend(TElement[] args, TElement arg);
    internal static TNode BuildBalancedTreeInPlace(IList`1<TNode> nodes, Func`3<TNode, TNode, TNode> combinator);
    internal static IEnumerable`1<TNode> GetLeafNodes(TNode root, Func`2<TNode, bool> isLeaf, Func`2<TNode, IEnumerable`1<TNode>> getImmediateSubNodes);
}
internal abstract class System.Data.Common.Utils.InternalBase : object {
    internal abstract virtual void ToCompactString(StringBuilder builder);
    internal virtual void ToFullString(StringBuilder builder);
    public virtual string ToString();
    internal virtual string ToFullString();
}
internal class System.Data.Common.Utils.KeyToListMap`2 : InternalBase {
    internal IEnumerable`1<TKey> Keys { get; }
    internal IEnumerable`1<TValue> AllValues { get; }
    internal IEnumerable`1<KeyValuePair`2<TKey, List`1<TValue>>> KeyValuePairs { get; }
    internal KeyToListMap`2(IEqualityComparer`1<TKey> comparer);
    internal IEnumerable`1<TKey> get_Keys();
    internal IEnumerable`1<TValue> get_AllValues();
    internal IEnumerable`1<KeyValuePair`2<TKey, List`1<TValue>>> get_KeyValuePairs();
    internal bool ContainsKey(TKey key);
    internal void Add(TKey key, TValue value);
    internal void AddRange(TKey key, IEnumerable`1<TValue> values);
    internal bool RemoveKey(TKey key);
    internal ReadOnlyCollection`1<TValue> ListForKey(TKey key);
    internal bool TryGetListForKey(TKey key, ReadOnlyCollection`1& valueCollection);
    internal IEnumerable`1<TValue> EnumerateValues(TKey key);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Common.Utils.Memoizer`2 : object {
    internal Memoizer`2(Func`2<TArg, TResult> function, IEqualityComparer`1<TArg> argComparer);
    internal TResult Evaluate(TArg arg);
    internal bool TryGetValue(TArg arg, TResult& value);
}
[ExtensionAttribute]
internal static class System.Data.Common.Utils.MetadataHelper : object {
    internal static bool TryGetFunctionImportReturnType(EdmFunction functionImport, int resultSetIndex, T& returnType);
    internal static bool TryGetFunctionImportReturnCollectionType(EdmFunction functionImport, int resultSetIndex, CollectionType& collectionType);
    internal static FunctionParameter GetReturnParameter(EdmFunction functionImport, int resultSetIndex);
    internal static EdmFunction GetFunctionImport(string functionName, string defaultContainerName, MetadataWorkspace workspace, String& containerName, String& functionImportName);
    internal static EdmType GetAndCheckFunctionImportReturnType(EdmFunction functionImport, int resultSetIndex, MetadataWorkspace workspace);
    internal static void CheckFunctionImportReturnType(EdmType expectedEdmType, MetadataWorkspace workspace);
    internal static ParameterDirection ParameterModeToParameterDirection(ParameterMode mode);
    internal static bool TryDetermineCSpaceModelType(MetadataWorkspace workspace, EdmType& modelEdmType);
    internal static bool TryDetermineCSpaceModelType(Type type, MetadataWorkspace workspace, EdmType& modelEdmType);
    internal static bool DoesMemberExist(StructuralType type, EdmMember member);
    internal static bool IsNonRefSimpleMember(EdmMember member);
    internal static bool HasDiscreteDomain(EdmType edmType);
    internal static EntityType GetEntityTypeForEnd(AssociationEndMember end);
    internal static EntitySet GetEntitySetAtEnd(AssociationSet associationSet, AssociationEndMember endMember);
    internal static AssociationEndMember GetOtherAssociationEnd(AssociationEndMember endMember);
    internal static bool IsEveryOtherEndAtLeastOne(AssociationSet associationSet, AssociationEndMember member);
    internal static bool IsAssociationValidForEntityType(AssociationSetEnd toEnd, EntityType type);
    internal static AssociationSetEnd GetOppositeEnd(AssociationSetEnd end);
    internal static bool IsComposable(EdmFunction function);
    internal static bool IsMemberNullable(EdmMember member);
    internal static IEnumerable`1<EntitySet> GetInfluencingEntitySetsForTable(EntitySet table, MetadataWorkspace workspace);
    internal static IEnumerable`1<EdmType> GetTypeAndSubtypesOf(EdmType type, MetadataWorkspace workspace, bool includeAbstractTypes);
    internal static IEnumerable`1<EdmType> GetTypeAndSubtypesOf(EdmType type, ItemCollection itemCollection, bool includeAbstractTypes);
    internal static IEnumerable`1<EdmType> GetTypeAndParentTypesOf(EdmType type, ItemCollection itemCollection, bool includeAbstractTypes);
    internal static Dictionary`2<EntityType, Set`1<EntityType>> BuildUndirectedGraphOfTypes(EdmItemCollection edmItemCollection);
    internal static bool IsParentOf(EntityType a, EntityType b);
    internal static bool DoesEndKeySubsumeAssociationSetKey(AssociationSet assocSet, AssociationEndMember thisEnd, HashSet`1<Pair`2<EdmMember, EntityType>> associationkeys);
    internal static bool DoesEndFormKey(AssociationSet associationSet, AssociationEndMember end);
    internal static bool IsExtentAtSomeRelationshipEnd(AssociationSet relationshipSet, EntitySetBase extent);
    internal static AssociationEndMember GetSomeEndForEntitySet(AssociationSet associationSet, EntitySetBase entitySet);
    internal static List`1<AssociationSet> GetAssociationsForEntitySets(EntitySet entitySet1, EntitySet entitySet2);
    internal static AssociationSet GetAssociationsForEntitySetAndAssociationType(EntityContainer entityContainer, string entitySetName, AssociationType associationType, string endName, EntitySet& entitySet);
    internal static List`1<AssociationSet> GetAssociationsForEntitySet(EntitySetBase entitySet);
    internal static bool IsSuperTypeOf(EdmType superType, EdmType subType);
    internal static PrimitiveTypeKind GetPrimitiveTypeKind(TypeUsage typeUsage);
    internal static bool IsPartOfEntityTypeKey(EdmMember member);
    internal static TypeUsage GetElementType(TypeUsage typeUsage);
    internal static int GetLowerBoundOfMultiplicity(RelationshipMultiplicity multiplicity);
    internal static Nullable`1<int> GetUpperBoundOfMultiplicity(RelationshipMultiplicity multiplicity);
    internal static Set`1<EdmMember> GetConcurrencyMembersForTypeHierarchy(EntityTypeBase superType, EdmItemCollection edmItemCollection);
    internal static ConcurrencyMode GetConcurrencyMode(EdmMember member);
    internal static ConcurrencyMode GetConcurrencyMode(TypeUsage typeUsage);
    internal static StoreGeneratedPattern GetStoreGeneratedPattern(EdmMember member);
    internal static bool CheckIfAllErrorsAreWarnings(IList`1<EdmSchemaError> schemaErrors);
    internal static string GenerateHashForAllExtentViewsContent(double schemaVersion, IEnumerable`1<KeyValuePair`2<string, string>> extentViews);
    internal static HashAlgorithm CreateMetadataHashAlgorithm(double schemaVersion);
    internal static SHA256 CreateSHA256HashAlgorithm();
    internal static TypeUsage ConvertStoreTypeUsageToEdmTypeUsage(TypeUsage storeTypeUsage);
    [ExtensionAttribute]
internal static byte GetPrecision(TypeUsage type);
    [ExtensionAttribute]
internal static byte GetScale(TypeUsage type);
    [ExtensionAttribute]
internal static int GetMaxLength(TypeUsage type);
    [ExtensionAttribute]
internal static T GetFacetValue(TypeUsage type, string facetName);
    internal static NavigationPropertyAccessor GetNavigationPropertyAccessor(EntityType sourceEntityType, AssociationEndMember sourceMember, AssociationEndMember targetMember);
    internal static NavigationPropertyAccessor GetNavigationPropertyAccessor(EntityType entityType, string relationshipType, string fromName, string toName);
}
internal class System.Data.Common.Utils.ModifiableIteratorCollection`1 : InternalBase {
    internal bool IsEmpty { get; }
    internal ModifiableIteratorCollection`1(IEnumerable`1<TElement> elements);
    internal bool get_IsEmpty();
    internal TElement RemoveOneElement();
    internal void ResetIterator();
    internal void RemoveCurrentOfIterator();
    internal IEnumerable`1<TElement> Elements();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Common.Utils.Pair`2 : InternalBase {
    internal TFirst First { get; }
    internal TSecond Second { get; }
    internal Pair`2(TFirst first, TSecond second);
    internal TFirst get_First();
    internal TSecond get_Second();
    public virtual int GetHashCode();
    public bool Equals(Pair`2<TFirst, TSecond> other);
    public virtual bool Equals(object other);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Common.Utils.Set`1 : InternalBase {
    internal static IEqualityComparer`1<Set`1<TElement>> ValueComparer;
    internal static Set`1<TElement> Empty;
    internal int Count { get; }
    internal IEqualityComparer`1<TElement> Comparer { get; }
    internal Set`1(Set`1<TElement> other);
    internal Set`1(IEnumerable`1<TElement> elements);
    internal Set`1(IEqualityComparer`1<TElement> comparer);
    internal Set`1(IEnumerable`1<TElement> elements, IEqualityComparer`1<TElement> comparer);
    private static Set`1();
    internal int get_Count();
    internal IEqualityComparer`1<TElement> get_Comparer();
    internal bool Contains(TElement element);
    internal void Add(TElement element);
    internal void AddRange(IEnumerable`1<TElement> elements);
    internal void Remove(TElement element);
    internal void Clear();
    internal TElement[] ToArray();
    internal bool SetEquals(Set`1<TElement> other);
    internal bool IsSubsetOf(Set`1<TElement> other);
    internal bool Overlaps(Set`1<TElement> other);
    internal void Subtract(IEnumerable`1<TElement> other);
    internal Set`1<TElement> Difference(IEnumerable`1<TElement> other);
    internal void Unite(IEnumerable`1<TElement> other);
    internal Set`1<TElement> Union(IEnumerable`1<TElement> other);
    internal void Intersect(Set`1<TElement> other);
    internal Set`1<TElement> AsReadOnly();
    internal Set`1<TElement> MakeReadOnly();
    internal int GetElementsHashCode();
    public Enumerator<TElement> GetEnumerator();
    private sealed virtual override IEnumerator`1<TElement> System.Collections.Generic.IEnumerable<TElement>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Common.Utils.Singleton`1 : object {
    internal TValue Value { get; }
    internal Singleton`1(Func`1<TValue> function);
    internal TValue get_Value();
}
internal static class System.Data.Common.Utils.StringUtil : object {
    internal static string BuildDelimitedList(IEnumerable`1<T> values, ToStringConverter`1<T> converter, string delimiter);
    internal static string ToCommaSeparatedString(IEnumerable list);
    internal static string ToSeparatedString(IEnumerable list, string separator, string nullValue);
    internal static string ToCommaSeparatedStringSorted(IEnumerable list);
    internal static string ToSeparatedStringSorted(IEnumerable list, string separator, string nullValue);
    internal static string MembersToCommaSeparatedString(IEnumerable members);
    internal static void ToCommaSeparatedString(StringBuilder builder, IEnumerable list);
    internal static void ToCommaSeparatedStringSorted(StringBuilder builder, IEnumerable list);
    internal static void ToSeparatedString(StringBuilder builder, IEnumerable list, string separator);
    internal static void ToSeparatedStringSorted(StringBuilder builder, IEnumerable list, string separator);
    internal static void ToSeparatedString(StringBuilder stringBuilder, IEnumerable list, string separator, string nullValue);
    internal static bool IsNullOrEmptyOrWhiteSpace(string value);
    internal static bool IsNullOrEmptyOrWhiteSpace(string value, int offset);
    internal static bool IsNullOrEmptyOrWhiteSpace(string value, int offset, int length);
    internal static string FormatInvariant(string format, Object[] args);
    internal static StringBuilder FormatStringBuilder(StringBuilder builder, string format, Object[] args);
    internal static StringBuilder IndentNewLine(StringBuilder builder, int indent);
    internal static string FormatIndex(string arrayVarName, int index);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.Utils.ThreadSafeList`1 : object {
    public int Count { get; }
    public T Item { get; public set; }
    public bool IsReadOnly { get; }
    public sealed virtual int get_Count();
    public sealed virtual void Add(T item);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual int IndexOf(T item);
    public sealed virtual void Insert(int index, T item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual bool Remove(T item);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Data.Common.Utils.TrailingSpaceComparer : object {
    internal static TrailingSpaceComparer Instance;
    private static TrailingSpaceComparer();
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj);
}
internal class System.Data.Common.Utils.TrailingSpaceStringComparer : object {
    internal static TrailingSpaceStringComparer Instance;
    private static TrailingSpaceStringComparer();
    public sealed virtual bool Equals(string x, string y);
    public sealed virtual int GetHashCode(string obj);
    internal static string NormalizeString(string value);
}
internal class System.Data.Common.Utils.TreeNode : object {
    internal StringBuilder Text { get; }
    internal IList`1<TreeNode> Children { get; }
    internal int Position { get; internal set; }
    internal TreeNode(string text, TreeNode[] children);
    internal TreeNode(string text, List`1<TreeNode> children);
    internal StringBuilder get_Text();
    internal IList`1<TreeNode> get_Children();
    internal int get_Position();
    internal void set_Position(int value);
}
internal abstract class System.Data.Common.Utils.TreePrinter : object {
    internal virtual string Print(TreeNode node);
    internal virtual void PreProcess(TreeNode node);
    internal virtual void AfterAppend(TreeNode node, StringBuilder text);
    internal virtual void BeforeAppend(TreeNode node, StringBuilder text);
    internal virtual void PrintNode(StringBuilder text, TreeNode node);
    internal virtual void PrintChildren(StringBuilder text, TreeNode node);
}
internal static class System.Data.Entity.Error : object {
    internal static Exception ArgumentNull(string paramName);
    internal static Exception ArgumentOutOfRange(string paramName);
    internal static Exception NotImplemented();
    internal static Exception NotSupported();
}
internal static class System.Data.Entity.Strings : object {
    internal static string EntityKey_DataRecordMustBeEntity { get; }
    internal static string EntityKey_NoNullsAllowedInKeyValuePairs { get; }
    internal static string EntityKey_UnexpectedNull { get; }
    internal static string EntityKey_EntityKeyMustHaveValues { get; }
    internal static string EntityKey_InvalidQualifiedEntitySetName { get; }
    internal static string EntityKey_MissingEntitySetName { get; }
    internal static string EntityKey_CannotChangeKey { get; }
    internal static string EntityTypesDoNotAgree { get; }
    internal static string EdmMembersDefiningTypeDoNotAgreeWithMetadataType { get; }
    internal static string EntityClient_ValueNotString { get; }
    internal static string EntityClient_NoCommandText { get; }
    internal static string EntityClient_ConnectionStringNeededBeforeOperation { get; }
    internal static string EntityClient_CannotReopenConnection { get; }
    internal static string EntityClient_ConnectionNotOpen { get; }
    internal static string EntityClient_NoConnectionForCommand { get; }
    internal static string EntityClient_NoConnectionForAdapter { get; }
    internal static string EntityClient_ClosedConnectionForUpdate { get; }
    internal static string EntityClient_InvalidNamedConnection { get; }
    internal static string EntityClient_InvalidStoreProvider { get; }
    internal static string EntityClient_DataReaderIsStillOpen { get; }
    internal static string EntityClient_SettingsCannotBeChangedOnOpenConnection { get; }
    internal static string EntityClient_ConnectionStateClosed { get; }
    internal static string EntityClient_ConnectionStateBroken { get; }
    internal static string EntityClient_CannotCloneStoreProvider { get; }
    internal static string EntityClient_UnsupportedCommandType { get; }
    internal static string EntityClient_ErrorInClosingConnection { get; }
    internal static string EntityClient_ErrorInBeginningTransaction { get; }
    internal static string EntityClient_ExtraParametersWithNamedConnection { get; }
    internal static string EntityClient_CommandDefinitionPreparationFailed { get; }
    internal static string EntityClient_CommandDefinitionExecutionFailed { get; }
    internal static string EntityClient_CommandExecutionFailed { get; }
    internal static string EntityClient_StoreReaderFailed { get; }
    internal static string EntityClient_TooFewColumns { get; }
    internal static string EntityClient_EmptyParameterName { get; }
    internal static string EntityClient_CannotDeduceDbType { get; }
    internal static string EntityClient_TransactionAlreadyStarted { get; }
    internal static string EntityClient_InvalidTransactionForCommand { get; }
    internal static string EntityClient_NoStoreConnectionForUpdate { get; }
    internal static string EntityClient_CommandTreeMetadataIncompatible { get; }
    internal static string EntityClient_ProviderGeneralError { get; }
    internal static string EntityClient_FunctionImportEmptyCommandText { get; }
    internal static string EntityClient_InvalidStoredProcedureCommandText { get; }
    internal static string EntityClient_ConnectionMustBeClosed { get; }
    internal static string EntityClient_RequiresNonStoreCommandTree { get; }
    internal static string EntityClient_CannotReprepareCommandDefinitionBasedCommand { get; }
    internal static string EntityClient_CannotGetCommandText { get; }
    internal static string EntityClient_CannotSetCommandText { get; }
    internal static string EntityClient_CannotGetCommandTree { get; }
    internal static string EntityClient_CannotSetCommandTree { get; }
    internal static string ELinq_ExpressionMustBeIQueryable { get; }
    internal static string ELinq_UnsupportedConstructor { get; }
    internal static string ELinq_UnsupportedInitializers { get; }
    internal static string ELinq_UnsupportedBinding { get; }
    internal static string ELinq_ThenByDoesNotFollowOrderBy { get; }
    internal static string ELinq_UnsupportedQueryableMethod { get; }
    internal static string ELinq_UnsupportedDifferentContexts { get; }
    internal static string ELinq_UnsupportedCastToDecimal { get; }
    internal static string ELinq_CreateOrderedEnumerableNotSupported { get; }
    internal static string ELinq_SkipWithoutOrder { get; }
    internal static string ELinq_PropertyIndexNotSupported { get; }
    internal static string ELinq_AnonymousType { get; }
    internal static string ELinq_ClosureType { get; }
    internal static string ELinq_UnsupportedNestedFirst { get; }
    internal static string ELinq_UnsupportedNestedSingle { get; }
    internal static string ELinq_UnsupportedInclude { get; }
    internal static string ELinq_UnsupportedMergeAs { get; }
    internal static string ELinq_MethodNotDirectlyCallable { get; }
    internal static string ELinq_CycleDetected { get; }
    internal static string ELinq_EdmFunctionDirectCall { get; }
    internal static string Update_ConstraintCycle { get; }
    internal static string Update_GeneralExecutionException { get; }
    internal static string Update_AmbiguousServerGenIdentifier { get; }
    internal static string Update_WorkspaceMismatch { get; }
    internal static string Update_ReferentialConstraintIntegrityViolation { get; }
    internal static string Update_ErrorLoadingRecord { get; }
    internal static string Update_CircularRelationships { get; }
    internal static string Update_InvalidChanges { get; }
    internal static string Update_DuplicateKeys { get; }
    internal static string ViewGen_Extent { get; }
    internal static string ViewGen_Null { get; }
    internal static string ViewGen_CommaBlank { get; }
    internal static string ViewGen_Entities { get; }
    internal static string ViewGen_Tuples { get; }
    internal static string ViewGen_NotNull { get; }
    internal static string ViewGen_Error { get; }
    internal static string ViewGen_AND { get; }
    internal static string ViewGen_EntityInstanceToken { get; }
    internal static string Viewgen_ErrorPattern_Partition_Disj_Eq { get; }
    internal static string Viewgen_ErrorPattern_Partition_Disj_Subs_Ref { get; }
    internal static string Viewgen_ErrorPattern_Partition_Disj_Subs { get; }
    internal static string Viewgen_ErrorPattern_Partition_Disj_Unk { get; }
    internal static string Viewgen_ErrorPattern_Partition_Eq_Disj { get; }
    internal static string Viewgen_ErrorPattern_Partition_Eq_Subs_Ref { get; }
    internal static string Viewgen_ErrorPattern_Partition_Eq_Subs { get; }
    internal static string Viewgen_ErrorPattern_Partition_Eq_Unk { get; }
    internal static string Viewgen_ErrorPattern_Partition_Eq_Unk_Association { get; }
    internal static string Viewgen_ErrorPattern_Partition_Sub_Disj { get; }
    internal static string Viewgen_ErrorPattern_Partition_Sub_Eq { get; }
    internal static string Viewgen_ErrorPattern_Partition_Sub_Eq_Ref { get; }
    internal static string Viewgen_ErrorPattern_Partition_Sub_Unk { get; }
    internal static string Viewgen_NoJoinKeyOrFK { get; }
    internal static string Validator_EmptyIdentity { get; }
    internal static string Validator_CollectionHasNoTypeUsage { get; }
    internal static string Validator_FacetTypeIsNull { get; }
    internal static string Validator_MemberHasNullDeclaringType { get; }
    internal static string Validator_MemberHasNullTypeUsage { get; }
    internal static string Validator_ItemAttributeHasNullTypeUsage { get; }
    internal static string Validator_RefTypeHasNullEntityType { get; }
    internal static string Validator_TypeUsageHasNullEdmType { get; }
    internal static string Validator_BaseTypeHasMemberOfSameName { get; }
    internal static string Validator_CollectionTypesCannotHaveBaseType { get; }
    internal static string Validator_RefTypesCannotHaveBaseType { get; }
    internal static string Validator_TypeHasNoName { get; }
    internal static string Validator_TypeHasNoNamespace { get; }
    internal static string Validator_FacetHasNoName { get; }
    internal static string Validator_MemberHasNoName { get; }
    internal static string Validator_MetadataPropertyHasNoName { get; }
    internal static string Validator_OSpace_Convention_NonMatchingUnderlyingTypes { get; }
    internal static string ExtraInfo { get; }
    internal static string Metadata_General_Error { get; }
    internal static string OperationOnReadOnlyCollection { get; }
    internal static string OperationOnReadOnlyItem { get; }
    internal static string EntitySetInAnotherContainer { get; }
    internal static string NotValidInputPath { get; }
    internal static string UnableToDetermineApplicationContext { get; }
    internal static string WildcardEnumeratorReturnedNull { get; }
    internal static string UnableToLoadResource { get; }
    internal static string AtleastOneSSDLNeeded { get; }
    internal static string InvalidMetadataPath { get; }
    internal static string UnableToDetermineStoreVersion { get; }
    internal static string OnlyStoreConnectionsSupported { get; }
    internal static string NotStringTypeForTypeUsage { get; }
    internal static string NotBinaryTypeForTypeUsage { get; }
    internal static string NotDateTimeTypeForTypeUsage { get; }
    internal static string NotDateTimeOffsetTypeForTypeUsage { get; }
    internal static string NotTimeTypeForTypeUsage { get; }
    internal static string NotDecimalTypeForTypeUsage { get; }
    internal static string ArrayTooSmall { get; }
    internal static string ProviderManifestTokenNotFound { get; }
    internal static string FailedToRetrieveProviderManifest { get; }
    internal static string InvalidMaxLengthSize { get; }
    internal static string ArgumentMustBeCSpaceType { get; }
    internal static string ArgumentMustBeOSpaceType { get; }
    internal static string Mapping_General_Error { get; }
    internal static string Mapping_InvalidContent_General { get; }
    internal static string Mapping_InvalidContent_Association_Type_Empty { get; }
    internal static string Mapping_InvalidContent_Table_Expected { get; }
    internal static string Mapping_InvalidContent_Container_SubElement { get; }
    internal static string Mapping_InvalidContent_ConditionMapping_Both_Members { get; }
    internal static string Mapping_InvalidContent_ConditionMapping_Either_Members { get; }
    internal static string Mapping_InvalidContent_ConditionMapping_Both_Values { get; }
    internal static string Mapping_InvalidContent_ConditionMapping_Either_Values { get; }
    internal static string Mapping_InvalidContent_ConditionMapping_NonScalar { get; }
    internal static string Mapping_InvalidContent_TypeMapping_QueryView { get; }
    internal static string Mapping_ConditionValueTypeMismatch { get; }
    internal static string Mapping_TypeName_For_First_QueryView { get; }
    internal static string Generated_Views_Changed { get; }
    internal static string Mapping_InvalidContent_IsTypeOfNotTerminated { get; }
    internal static string Mapping_ModificationFunction_In_Table_Context { get; }
    internal static string Mapping_ModificationFunction_Multiple_Types { get; }
    internal static string Mapping_ModificationFunction_MissingVersion { get; }
    internal static string Mapping_ModificationFunction_VersionMustBeOriginal { get; }
    internal static string Mapping_ModificationFunction_VersionMustBeCurrent { get; }
    internal static string Mapping_DistinctFlagInReadWriteContainer { get; }
    internal static string Mapping_DifferentEdmStoreVersion { get; }
    internal static string Mapping_DifferentMappingEdmStoreVersion { get; }
    internal static string SqlProvider_DdlGeneration_MissingInitialCatalog { get; }
    internal static string SqlProvider_DdlGeneration_CannotDeleteDatabaseNoInitialCatalog { get; }
    internal static string SqlProvider_DdlGeneration_CannotTellIfDatabaseExists { get; }
    internal static string SqlProvider_CredentialsMissingForMasterConnection { get; }
    internal static string SqlProvider_IncompleteCreateDatabase { get; }
    internal static string SqlProvider_IncompleteCreateDatabaseAggregate { get; }
    internal static string SqlProvider_SqlTypesAssemblyNotFound { get; }
    internal static string SqlProvider_Sql2008RequiredForSpatial { get; }
    internal static string SqlProvider_GeographyValueNotSqlCompatible { get; }
    internal static string SqlProvider_GeometryValueNotSqlCompatible { get; }
    internal static string Entity_EntityCantHaveMultipleChangeTrackers { get; }
    internal static string ComplexObject_ComplexObjectAlreadyAttachedToParent { get; }
    internal static string ObjectStateEntry_OriginalValuesDoesNotExist { get; }
    internal static string ObjectStateEntry_CurrentValuesDoesNotExist { get; }
    internal static string ObjectStateEntry_InvalidState { get; }
    internal static string ObjectStateEntry_CantModifyRelationValues { get; }
    internal static string ObjectStateEntry_CantModifyRelationState { get; }
    internal static string ObjectStateEntry_CantModifyDetachedDeletedEntries { get; }
    internal static string ObjectStateEntry_CantSetEntityKey { get; }
    internal static string ObjectStateEntry_CannotAccessKeyEntryValues { get; }
    internal static string ObjectStateEntry_CannotModifyKeyEntryState { get; }
    internal static string ObjectStateEntry_CannotDeleteOnKeyEntry { get; }
    internal static string ObjectStateEntry_EntityMemberChangedWithoutEntityMemberChanging { get; }
    internal static string ObjectStateEntry_RelationshipAndKeyEntriesDoNotHaveRelationshipManagers { get; }
    internal static string ObjectStateEntry_InvalidTypeForComplexTypeProperty { get; }
    internal static string ObjectStateManager_NoEntryExistForEntityKey { get; }
    internal static string ObjectStateManager_EntityNotTracked { get; }
    internal static string ObjectStateManager_DetachedObjectStateEntriesDoesNotExistInObjectStateManager { get; }
    internal static string ObjectStateManager_ObjectStateManagerContainsThisEntityKey { get; }
    internal static string ObjectStateManager_CannotFixUpKeyToExistingValues { get; }
    internal static string ObjectStateManager_KeyPropertyDoesntMatchValueInKey { get; }
    internal static string ObjectStateManager_KeyPropertyDoesntMatchValueInKeyForAttach { get; }
    internal static string ObjectStateManager_InvalidKey { get; }
    internal static string ObjectStateManager_AcceptChangesEntityKeyIsNotValid { get; }
    internal static string ObjectStateManager_EntityConflictsWithKeyEntry { get; }
    internal static string ObjectStateManager_CannotGetRelationshipManagerForDetachedPocoEntity { get; }
    internal static string ObjectStateManager_CannotChangeRelationshipStateEntityDeleted { get; }
    internal static string ObjectStateManager_CannotChangeRelationshipStateEntityAdded { get; }
    internal static string ObjectStateManager_CannotChangeRelationshipStateKeyEntry { get; }
    internal static string ObjectStateManager_ChangeRelationshipStateNotSupportedForForeignKeyAssociations { get; }
    internal static string ObjectStateManager_ChangeStateFromAddedWithNullKeyIsInvalid { get; }
    internal static string ObjectContext_StoreEntityNotPresentInClient { get; }
    internal static string ObjectContext_InvalidConnectionString { get; }
    internal static string ObjectContext_InvalidConnection { get; }
    internal static string ObjectContext_InvalidDataAdapter { get; }
    internal static string ObjectContext_ObjectNotFound { get; }
    internal static string ObjectContext_CannotDeleteEntityNotInObjectStateManager { get; }
    internal static string ObjectContext_CannotDetachEntityNotInObjectStateManager { get; }
    internal static string ObjectContext_InvalidCommandTimeout { get; }
    internal static string ObjectContext_EntityAlreadyExistsInObjectStateManager { get; }
    internal static string ObjectContext_CannotAttachEntityWithoutKey { get; }
    internal static string ObjectContext_CannotAttachEntityWithTemporaryKey { get; }
    internal static string ObjectContext_EntitySetNameOrEntityKeyRequired { get; }
    internal static string ObjectContext_ContainerQualifiedEntitySetNameRequired { get; }
    internal static string ObjectContext_CannotSetDefaultContainerName { get; }
    internal static string ObjectContext_QualfiedEntitySetName { get; }
    internal static string ObjectContext_CommitWithConceptualNull { get; }
    internal static string ObjectContext_RequiredMetadataNotAvailble { get; }
    internal static string ObjectContext_MetadataHasChanged { get; }
    internal static string ObjectContext_ObjectDisposed { get; }
    internal static string ObjectContext_SelectorExpressionMustBeMemberAccess { get; }
    internal static string ObjectContext_InvalidEntityState { get; }
    internal static string ObjectContext_InvalidRelationshipState { get; }
    internal static string ObjectContext_EntityNotTrackedOrHasTempKey { get; }
    internal static string ObjectContext_ExecuteCommandWithMixOfDbParameterAndValues { get; }
    internal static string RelatedEnd_InvalidOwnerStateForAttach { get; }
    internal static string RelatedEnd_InvalidEntityContextForAttach { get; }
    internal static string RelatedEnd_InvalidEntityStateForAttach { get; }
    internal static string RelatedEnd_UnableToAddEntity { get; }
    internal static string RelatedEnd_UnableToRemoveEntity { get; }
    internal static string RelatedEnd_UnableToAddRelationshipWithDeletedEntity { get; }
    internal static string RelatedEnd_ConflictingChangeOfRelationshipDetected { get; }
    internal static string Materializer_PropertyIsNotNullable { get; }
    internal static string Materializer_CannotReEnumerateQueryResults { get; }
    internal static string Materializer_UnsupportedType { get; }
    internal static string Collections_InvalidEntityStateSource { get; }
    internal static string Collections_UnableToMergeCollections { get; }
    internal static string EntityReference_LessThanExpectedRelatedEntitiesFound { get; }
    internal static string EntityReference_MoreThanExpectedRelatedEntitiesFound { get; }
    internal static string EntityReference_CannotChangeReferentialConstraintProperty { get; }
    internal static string EntityReference_CannotSetSpecialKeys { get; }
    internal static string EntityReference_EntityKeyValueMismatch { get; }
    internal static string RelatedEnd_RelatedEndNotFound { get; }
    internal static string RelatedEnd_LoadCalledOnNonEmptyNoTrackedRelatedEnd { get; }
    internal static string RelatedEnd_LoadCalledOnAlreadyLoadedNoTrackedRelatedEnd { get; }
    internal static string RelatedEnd_CannotCreateRelationshipEntitiesInDifferentContexts { get; }
    internal static string RelatedEnd_OwnerIsNull { get; }
    internal static string RelationshipManager_UnableToRetrieveReferentialConstraintProperties { get; }
    internal static string RelationshipManager_InconsistentReferentialConstraintProperties { get; }
    internal static string RelationshipManager_CircularRelationshipsWithReferentialConstraints { get; }
    internal static string RelationshipManager_UnexpectedNull { get; }
    internal static string RelationshipManager_InvalidRelationshipManagerOwner { get; }
    internal static string RelationshipManager_UnexpectedNullContext { get; }
    internal static string RelationshipManager_InitializeIsForDeserialization { get; }
    internal static string RelationshipManager_CollectionInitializeIsForDeserialization { get; }
    internal static string RelationshipManager_CannotGetRelatEndForDetachedPocoEntity { get; }
    internal static string ObjectView_CannotReplacetheEntityorRow { get; }
    internal static string ObjectView_IndexBasedInsertIsNotSupported { get; }
    internal static string ObjectView_WriteOperationNotAllowedOnReadOnlyBindingList { get; }
    internal static string ObjectView_AddNewOperationNotAllowedOnAbstractBindingList { get; }
    internal static string ObjectView_IncompatibleArgument { get; }
    internal static string CodeGen_PropertyDeclaringTypeIsValueType { get; }
    internal static string CodeGen_PropertyStrongNameIdentity { get; }
    internal static string CodeGen_PropertyUnsupportedForm { get; }
    internal static string CodeGen_PropertyUnsupportedType { get; }
    internal static string CodeGen_PropertyIsIndexed { get; }
    internal static string CodeGen_PropertyIsStatic { get; }
    internal static string CodeGen_PropertyNoGetter { get; }
    internal static string CodeGen_PropertyNoSetter { get; }
    internal static string GeneralQueryError { get; }
    internal static string CtxAlias { get; }
    internal static string CtxAliasedNamespaceImport { get; }
    internal static string CtxAnd { get; }
    internal static string CtxAnyElement { get; }
    internal static string CtxApplyClause { get; }
    internal static string CtxBetween { get; }
    internal static string CtxCase { get; }
    internal static string CtxCaseElse { get; }
    internal static string CtxCaseWhenThen { get; }
    internal static string CtxCast { get; }
    internal static string CtxCollatedOrderByClauseItem { get; }
    internal static string CtxCollectionTypeDefinition { get; }
    internal static string CtxCommandExpression { get; }
    internal static string CtxCreateRef { get; }
    internal static string CtxDeref { get; }
    internal static string CtxDivide { get; }
    internal static string CtxElement { get; }
    internal static string CtxEquals { get; }
    internal static string CtxEscapedIdentifier { get; }
    internal static string CtxExcept { get; }
    internal static string CtxExists { get; }
    internal static string CtxExpressionList { get; }
    internal static string CtxFlatten { get; }
    internal static string CtxFromApplyClause { get; }
    internal static string CtxFromClause { get; }
    internal static string CtxFromClauseItem { get; }
    internal static string CtxFromClauseList { get; }
    internal static string CtxFromJoinClause { get; }
    internal static string CtxFunctionDefinition { get; }
    internal static string CtxGreaterThan { get; }
    internal static string CtxGreaterThanEqual { get; }
    internal static string CtxGroupByClause { get; }
    internal static string CtxGroupPartition { get; }
    internal static string CtxHavingClause { get; }
    internal static string CtxIdentifier { get; }
    internal static string CtxIn { get; }
    internal static string CtxIntersect { get; }
    internal static string CtxIsNotNull { get; }
    internal static string CtxIsNotOf { get; }
    internal static string CtxIsNull { get; }
    internal static string CtxIsOf { get; }
    internal static string CtxJoinClause { get; }
    internal static string CtxJoinOnClause { get; }
    internal static string CtxKey { get; }
    internal static string CtxLessThan { get; }
    internal static string CtxLessThanEqual { get; }
    internal static string CtxLike { get; }
    internal static string CtxLimitSubClause { get; }
    internal static string CtxLiteral { get; }
    internal static string CtxMemberAccess { get; }
    internal static string CtxMethod { get; }
    internal static string CtxMinus { get; }
    internal static string CtxModulus { get; }
    internal static string CtxMultiply { get; }
    internal static string CtxMultisetCtor { get; }
    internal static string CtxNamespaceImport { get; }
    internal static string CtxNamespaceImportList { get; }
    internal static string CtxNavigate { get; }
    internal static string CtxNot { get; }
    internal static string CtxNotBetween { get; }
    internal static string CtxNotEqual { get; }
    internal static string CtxNotIn { get; }
    internal static string CtxNotLike { get; }
    internal static string CtxNullLiteral { get; }
    internal static string CtxOfType { get; }
    internal static string CtxOfTypeOnly { get; }
    internal static string CtxOr { get; }
    internal static string CtxOrderByClause { get; }
    internal static string CtxOrderByClauseItem { get; }
    internal static string CtxOverlaps { get; }
    internal static string CtxParen { get; }
    internal static string CtxPlus { get; }
    internal static string CtxTypeNameWithTypeSpec { get; }
    internal static string CtxQueryExpression { get; }
    internal static string CtxQueryStatement { get; }
    internal static string CtxRef { get; }
    internal static string CtxRefTypeDefinition { get; }
    internal static string CtxRelationship { get; }
    internal static string CtxRelationshipList { get; }
    internal static string CtxRowCtor { get; }
    internal static string CtxRowTypeDefinition { get; }
    internal static string CtxSelectRowClause { get; }
    internal static string CtxSelectValueClause { get; }
    internal static string CtxSet { get; }
    internal static string CtxSimpleIdentifier { get; }
    internal static string CtxSkipSubClause { get; }
    internal static string CtxTopSubClause { get; }
    internal static string CtxTreat { get; }
    internal static string CtxTypeName { get; }
    internal static string CtxUnaryMinus { get; }
    internal static string CtxUnaryPlus { get; }
    internal static string CtxUnion { get; }
    internal static string CtxUnionAll { get; }
    internal static string CtxWhereClause { get; }
    internal static string GenericSyntaxError { get; }
    internal static string InFromClause { get; }
    internal static string InGroupClause { get; }
    internal static string InRowCtor { get; }
    internal static string InSelectProjectionList { get; }
    internal static string InvalidEmptyIdentifier { get; }
    internal static string InvalidEmptyQuery { get; }
    internal static string InvalidEmptyQueryTextArgument { get; }
    internal static string InvalidOperatorSymbol { get; }
    internal static string InvalidPunctuatorSymbol { get; }
    internal static string LocalizedCollection { get; }
    internal static string LocalizedColumn { get; }
    internal static string LocalizedComplex { get; }
    internal static string LocalizedEntity { get; }
    internal static string LocalizedEntityContainerExpression { get; }
    internal static string LocalizedFunction { get; }
    internal static string LocalizedInlineFunction { get; }
    internal static string LocalizedKeyword { get; }
    internal static string LocalizedLeft { get; }
    internal static string LocalizedLine { get; }
    internal static string LocalizedMetadataMemberExpression { get; }
    internal static string LocalizedNamespace { get; }
    internal static string LocalizedNear { get; }
    internal static string LocalizedPrimitive { get; }
    internal static string LocalizedReference { get; }
    internal static string LocalizedRight { get; }
    internal static string LocalizedRow { get; }
    internal static string LocalizedTerm { get; }
    internal static string LocalizedType { get; }
    internal static string LocalizedEnumMember { get; }
    internal static string LocalizedValueExpression { get; }
    internal static string AmbiguousFunctionArguments { get; }
    internal static string BetweenLimitsCannotBeUntypedNulls { get; }
    internal static string CannotCreateEmptyMultiset { get; }
    internal static string CannotCreateMultisetofNulls { get; }
    internal static string ConcatBuiltinNotSupported { get; }
    internal static string ElementOperatorIsNotSupported { get; }
    internal static string ExpressionCannotBeNull { get; }
    internal static string ExpressionMustBeCollection { get; }
    internal static string ExpressionMustBeNumericType { get; }
    internal static string ExpressionTypeMustBeBoolean { get; }
    internal static string ExpressionTypeMustBeEqualComparable { get; }
    internal static string ExpressionTypeMustNotBeCollection { get; }
    internal static string ExprIsNotValidEntitySetForCreateRef { get; }
    internal static string GroupingKeysMustBeEqualComparable { get; }
    internal static string GroupPartitionOutOfContext { get; }
    internal static string HavingRequiresGroupClause { get; }
    internal static string ImcompatibleCreateRefKeyElementType { get; }
    internal static string ImcompatibleCreateRefKeyType { get; }
    internal static string InnerJoinMustHaveOnPredicate { get; }
    internal static string InvalidCaseResultTypes { get; }
    internal static string InvalidCaseWhenThenNullType { get; }
    internal static string InvalidCastExpressionType { get; }
    internal static string InvalidCastType { get; }
    internal static string InvalidCreateRefKeyType { get; }
    internal static string InvalidDistinctArgumentInCtor { get; }
    internal static string InvalidDistinctArgumentInNonAggFunction { get; }
    internal static string InvalidFlattenArgument { get; }
    internal static string InvalidJoinLeftCorrelation { get; }
    internal static string InvalidMetadataMemberName { get; }
    internal static string InvalidModeForWithRelationshipClause { get; }
    internal static string InvalidNamespaceAlias { get; }
    internal static string InvalidNullArithmetic { get; }
    internal static string InvalidNullComparison { get; }
    internal static string InvalidPredicateForCrossJoin { get; }
    internal static string InvalidSelectValueAliasedExpression { get; }
    internal static string InvalidSelectValueList { get; }
    internal static string InvalidTypeForWithRelationshipClause { get; }
    internal static string IsNullInvalidType { get; }
    internal static string LeftSetExpressionArgsMustBeCollection { get; }
    internal static string LikeArgMustBeStringType { get; }
    internal static string MalformedSingleQuotePayload { get; }
    internal static string MalformedStringLiteralPayload { get; }
    internal static string MethodInvocationNotSupported { get; }
    internal static string MultisetElemsAreNotTypeCompatible { get; }
    internal static string NullLiteralCannotBePromotedToCollectionOfNulls { get; }
    internal static string OrderByKeyIsNotOrderComparable { get; }
    internal static string PlusLeftExpressionInvalidType { get; }
    internal static string PlusRightExpressionInvalidType { get; }
    internal static string RelatedEndExprTypeMustBeReference { get; }
    internal static string RelationshipFromEndIsAmbiguos { get; }
    internal static string RelationshipToEndIsAmbiguos { get; }
    internal static string ResultingExpressionTypeCannotBeNull { get; }
    internal static string RightSetExpressionArgsMustBeCollection { get; }
    internal static string RowCtorElementCannotBeNull { get; }
    internal static string SelectDistinctMustBeEqualComparable { get; }
    internal static string TopAndLimitCannotCoexist { get; }
    internal static string TopAndSkipCannotCoexist { get; }
    internal static string TypeArgumentMustBeLiteral { get; }
    internal static string TypeArgumentIsNotValid { get; }
    internal static string TypeMustBeInheritableType { get; }
    internal static string GroupVarNotFoundInScope { get; }
    internal static string InvalidArgumentTypeForAggregateFunction { get; }
    internal static string InvalidSavePoint { get; }
    internal static string InvalidScopeIndex { get; }
    internal static string ParserFatalError { get; }
    internal static string ParserInputError { get; }
    internal static string StackOverflowInParser { get; }
    internal static string UnknownAstCommandExpression { get; }
    internal static string UnknownAstExpressionType { get; }
    internal static string UnknownBuiltInAstExpressionType { get; }
    internal static string SqlGen_ApplyNotSupportedOnSql8 { get; }
    internal static string SqlGen_NiladicFunctionsCannotHaveParameters { get; }
    internal static string SqlGen_ParameterForLimitNotSupportedOnSql8 { get; }
    internal static string SqlGen_ParameterForSkipNotSupportedOnSql8 { get; }
    internal static string Cqt_General_MetadataNotReadOnly { get; }
    internal static string Cqt_General_NoProviderBooleanType { get; }
    internal static string Cqt_General_NoProviderIntegerType { get; }
    internal static string Cqt_General_NoProviderStringType { get; }
    internal static string Cqt_Metadata_EdmMemberIncorrectSpace { get; }
    internal static string Cqt_Metadata_EntitySetEntityContainerNull { get; }
    internal static string Cqt_Metadata_EntitySetIncorrectSpace { get; }
    internal static string Cqt_Metadata_EntityTypeNullKeyMembersInvalid { get; }
    internal static string Cqt_Metadata_EntityTypeEmptyKeyMembersInvalid { get; }
    internal static string Cqt_Metadata_FunctionReturnParameterNull { get; }
    internal static string Cqt_Metadata_FunctionIncorrectSpace { get; }
    internal static string Cqt_Metadata_FunctionParameterIncorrectSpace { get; }
    internal static string Cqt_Metadata_TypeUsageIncorrectSpace { get; }
    internal static string Cqt_Exceptions_InvalidCommandTree { get; }
    internal static string Cqt_Util_CheckListEmptyInvalid { get; }
    internal static string Cqt_ExpressionList_IncorrectElementCount { get; }
    internal static string Cqt_CommandTree_InvalidDataSpace { get; }
    internal static string Cqt_Factory_NewCollectionInvalidCommonType { get; }
    internal static string Cqt_Factory_NoSuchRelationEnd { get; }
    internal static string Cqt_Factory_IncompatibleRelationEnds { get; }
    internal static string Cqt_Aggregate_InvalidFunction { get; }
    internal static string Cqt_Binding_CollectionRequired { get; }
    internal static string Cqt_Binding_VariableNameNotValid { get; }
    internal static string Cqt_GroupBinding_CollectionRequired { get; }
    internal static string Cqt_GroupBinding_GroupVariableNameNotValid { get; }
    internal static string Cqt_And_BooleanArgumentsRequired { get; }
    internal static string Cqt_Apply_DuplicateVariableNames { get; }
    internal static string Cqt_Arithmetic_NumericCommonType { get; }
    internal static string Cqt_Case_WhensMustEqualThens { get; }
    internal static string Cqt_Case_InvalidResultType { get; }
    internal static string Cqt_Comparison_ComparableRequired { get; }
    internal static string Cqt_Constant_InvalidType { get; }
    internal static string Cqt_Distinct_InvalidCollection { get; }
    internal static string Cqt_DeRef_RefRequired { get; }
    internal static string Cqt_Element_InvalidArgumentForUnwrapSingleProperty { get; }
    internal static string Cqt_Function_VoidResultInvalid { get; }
    internal static string Cqt_Function_NonComposableInExpression { get; }
    internal static string Cqt_Function_CommandTextInExpression { get; }
    internal static string Cqt_GetEntityRef_EntityRequired { get; }
    internal static string Cqt_GetRefKey_RefRequired { get; }
    internal static string Cqt_GroupBy_AtLeastOneKeyOrAggregate { get; }
    internal static string Cqt_GroupBy_MoreThanOneGroupAggregate { get; }
    internal static string Cqt_CrossJoin_AtLeastTwoInputs { get; }
    internal static string Cqt_IsNull_CollectionNotAllowed { get; }
    internal static string Cqt_IsNull_InvalidType { get; }
    internal static string Cqt_Join_DuplicateVariableNames { get; }
    internal static string Cqt_Limit_ConstantOrParameterRefRequired { get; }
    internal static string Cqt_Limit_IntegerRequired { get; }
    internal static string Cqt_Limit_NonNegativeLimitRequired { get; }
    internal static string Cqt_NewInstance_CollectionTypeRequired { get; }
    internal static string Cqt_NewInstance_StructuralTypeRequired { get; }
    internal static string Cqt_NewInstance_IncompatibleRelatedEntity_SourceTypeNotValid { get; }
    internal static string Cqt_Not_BooleanArgumentRequired { get; }
    internal static string Cqt_Or_BooleanArgumentsRequired { get; }
    internal static string Cqt_Property_InstanceRequiredForInstance { get; }
    internal static string Cqt_Ref_PolymorphicArgRequired { get; }
    internal static string Cqt_RelatedEntityRef_TargetEndFromDifferentRelationship { get; }
    internal static string Cqt_RelatedEntityRef_TargetEndMustBeAtMostOne { get; }
    internal static string Cqt_RelatedEntityRef_TargetEndSameAsSourceEnd { get; }
    internal static string Cqt_RelatedEntityRef_TargetEntityNotRef { get; }
    internal static string Cqt_RelatedEntityRef_TargetEntityNotCompatible { get; }
    internal static string Cqt_RelNav_NoCompositions { get; }
    internal static string Cqt_Skip_ConstantOrParameterRefRequired { get; }
    internal static string Cqt_Skip_IntegerRequired { get; }
    internal static string Cqt_Skip_NonNegativeCountRequired { get; }
    internal static string Cqt_Sort_EmptyCollationInvalid { get; }
    internal static string Cqt_Sort_NonStringCollationInvalid { get; }
    internal static string Cqt_Sort_OrderComparable { get; }
    internal static string Iqt_CTGen_UnexpectedAggregate { get; }
    internal static string Iqt_CTGen_UnexpectedVarDefList { get; }
    internal static string Iqt_CTGen_UnexpectedVarDef { get; }
    internal static string ADP_MustUseSequentialAccess { get; }
    internal static string ADP_ProviderDoesNotSupportCommandTrees { get; }
    internal static string ADP_ClosedDataReaderError { get; }
    internal static string ADP_ImplicitlyClosedDataReaderError { get; }
    internal static string ADP_NoData { get; }
    internal static string ADP_GetSchemaTableIsNotSupported { get; }
    internal static string ADP_InvalidDataReaderFieldCountForScalarType { get; }
    internal static string ADP_InvalidDataReaderUnableToDetermineType { get; }
    internal static string ADP_KeysRequiredForNesting { get; }
    internal static string DataCategory_Data { get; }
    internal static string DbParameter_Direction { get; }
    internal static string DbParameter_Size { get; }
    internal static string DataCategory_Update { get; }
    internal static string DbParameter_SourceColumn { get; }
    internal static string DbParameter_SourceVersion { get; }
    internal static string EntityParameterContainedByAnotherCollection { get; }
    internal static string EntityParameterNull { get; }
    internal static string EntityParameterCollectionRemoveInvalidObject { get; }
    internal static string ADP_InvalidDataDirectory { get; }
    internal static string ADP_InvalidMultipartNameDelimiterUsage { get; }
    internal static string EmptySchemaTextReader { get; }
    internal static string MissingName { get; }
    internal static string MissingNamespaceAttribute { get; }
    internal static string DefaultNotAllowed { get; }
    internal static string GeneratorErrorSeverityError { get; }
    internal static string GeneratorErrorSeverityWarning { get; }
    internal static string GeneratorErrorSeverityUnknown { get; }
    internal static string SourceUriUnknown { get; }
    internal static string BadNavigationPropertyRolesCannotBeTheSame { get; }
    internal static string InvalidDocumentationBothTextAndStructure { get; }
    internal static string AllElementsMustBeInSchema { get; }
    internal static string TVFReturnTypeRowHasNonScalarProperty { get; }
    internal static string InvalidOperationMultipleEndsInAssociation { get; }
    internal static string MismatchNumberOfPropertiesinRelationshipConstraint { get; }
    internal static string ComposableFunctionOrFunctionImportMustDeclareReturnType { get; }
    internal static string NonComposableFunctionMustNotDeclareReturnType { get; }
    internal static string CommandTextFunctionsNotComposable { get; }
    internal static string CommandTextFunctionsCannotDeclareStoreFunctionName { get; }
    internal static string NonComposableFunctionHasDisallowedAttribute { get; }
    internal static string EmptyDefiningQuery { get; }
    internal static string EmptyCommandText { get; }
    internal static string IncorrectProviderManifest { get; }
    internal static string FacetDeclarationRequiresTypeAttribute { get; }
    internal static string TypeMustBeDeclared { get; }
    internal static string RowTypeWithoutProperty { get; }
    internal static string TypeDeclaredAsAttributeAndElement { get; }
    internal static string CannotLoadDifferentVersionOfSchemaInTheSameItemCollection { get; }
    internal static string InvalidEnumUnderlyingType { get; }
    internal static string DuplicateEnumMember { get; }
    internal static string CalculatedEnumValueOutOfRange { get; }
    internal static string SpatialWithUseStrongSpatialTypesFalse { get; }
    internal static string ObjectQuery_QueryBuilder_InvalidProjectionList { get; }
    internal static string ObjectQuery_QueryBuilder_InvalidSortKeyList { get; }
    internal static string ObjectQuery_QueryBuilder_InvalidGroupKeyList { get; }
    internal static string ObjectQuery_QueryBuilder_InvalidSkipCount { get; }
    internal static string ObjectQuery_QueryBuilder_InvalidTopCount { get; }
    internal static string ObjectQuery_QueryBuilder_InvalidFilterPredicate { get; }
    internal static string ObjectQuery_QueryBuilder_InvalidQueryArgument { get; }
    internal static string ObjectQuery_QueryBuilder_NotSupportedLinqSource { get; }
    internal static string ObjectQuery_InvalidEmptyQuery { get; }
    internal static string ObjectQuery_InvalidConnection { get; }
    internal static string ObjectQuery_UnableToMapResultType { get; }
    internal static string ObjectParameterCollection_ParametersLocked { get; }
    internal static string ProviderReturnedNullForCreateCommandDefinition { get; }
    internal static string ProviderDidNotReturnAProviderManifest { get; }
    internal static string ProviderDidNotReturnAProviderManifestToken { get; }
    internal static string ProviderDidNotReturnSpatialServices { get; }
    internal static string ProviderRequiresStoreCommandTree { get; }
    internal static string ProviderShouldOverrideEscapeLikeArgument { get; }
    internal static string ProviderEscapeLikeArgumentReturnedNull { get; }
    internal static string ProviderDidNotCreateACommandDefinition { get; }
    internal static string ProviderDoesNotSupportCreateDatabaseScript { get; }
    internal static string ProviderDoesNotSupportCreateDatabase { get; }
    internal static string ProviderDoesNotSupportDatabaseExists { get; }
    internal static string ProviderDoesNotSupportDeleteDatabase { get; }
    internal static string Spatial_GeographyValueNotCompatibleWithSpatialServices { get; }
    internal static string Spatial_GeometryValueNotCompatibleWithSpatialServices { get; }
    internal static string Spatial_ProviderValueNotCompatibleWithSpatialServices { get; }
    internal static string Spatial_WellKnownGeographyValueNotValid { get; }
    internal static string Spatial_WellKnownGeometryValueNotValid { get; }
    internal static string Spatial_WellKnownValueSerializationPropertyNotDirectlySettable { get; }
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoSrid { get; }
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoWkbOrWkt { get; }
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoSrid { get; }
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoWkbOrWkt { get; }
    internal static string EntityConnectionString_Name { get; }
    internal static string EntityConnectionString_Provider { get; }
    internal static string EntityConnectionString_Metadata { get; }
    internal static string EntityConnectionString_ProviderConnectionString { get; }
    internal static string EntityDataCategory_Context { get; }
    internal static string EntityDataCategory_NamedConnectionString { get; }
    internal static string EntityDataCategory_Source { get; }
    internal static string ObjectQuery_Span_IncludeRequiresEntityOrEntityCollection { get; }
    internal static string ObjectQuery_Span_SpanPathSyntaxError { get; }
    internal static string ObjectQuery_Span_WhiteSpacePath { get; }
    internal static string EntityProxyTypeInfo_ProxyHasWrongWrapper { get; }
    internal static string get_EntityKey_DataRecordMustBeEntity();
    internal static string EntityKey_EntitySetDoesNotMatch(object p0);
    internal static string EntityKey_EntityTypesDoNotMatch(object p0, object p1);
    internal static string EntityKey_IncorrectNumberOfKeyValuePairs(object p0, object p1, object p2);
    internal static string EntityKey_IncorrectValueType(object p0, object p1, object p2);
    internal static string EntityKey_NoCorrespondingOSpaceTypeForEnumKeyMember(object p0, object p1);
    internal static string EntityKey_MissingKeyValue(object p0, object p1);
    internal static string get_EntityKey_NoNullsAllowedInKeyValuePairs();
    internal static string get_EntityKey_UnexpectedNull();
    internal static string EntityKey_DoesntMatchKeyOnEntity(object p0);
    internal static string get_EntityKey_EntityKeyMustHaveValues();
    internal static string get_EntityKey_InvalidQualifiedEntitySetName();
    internal static string get_EntityKey_MissingEntitySetName();
    internal static string EntityKey_InvalidName(object p0);
    internal static string get_EntityKey_CannotChangeKey();
    internal static string get_EntityTypesDoNotAgree();
    internal static string EntityKey_NullKeyValue(object p0, object p1);
    internal static string get_EdmMembersDefiningTypeDoNotAgreeWithMetadataType();
    internal static string InvalidStringArgument(object p0);
    internal static string CannotCallNoncomposableFunction(object p0);
    internal static string EntityClient_ConnectionStringMissingInfo(object p0);
    internal static string get_EntityClient_ValueNotString();
    internal static string EntityClient_KeywordNotSupported(object p0);
    internal static string get_EntityClient_NoCommandText();
    internal static string get_EntityClient_ConnectionStringNeededBeforeOperation();
    internal static string get_EntityClient_CannotReopenConnection();
    internal static string get_EntityClient_ConnectionNotOpen();
    internal static string EntityClient_DuplicateParameterNames(object p0);
    internal static string get_EntityClient_NoConnectionForCommand();
    internal static string get_EntityClient_NoConnectionForAdapter();
    internal static string get_EntityClient_ClosedConnectionForUpdate();
    internal static string get_EntityClient_InvalidNamedConnection();
    internal static string EntityClient_NestedNamedConnection(object p0);
    internal static string get_EntityClient_InvalidStoreProvider();
    internal static string get_EntityClient_DataReaderIsStillOpen();
    internal static string get_EntityClient_SettingsCannotBeChangedOnOpenConnection();
    internal static string EntityClient_ExecutingOnClosedConnection(object p0);
    internal static string get_EntityClient_ConnectionStateClosed();
    internal static string get_EntityClient_ConnectionStateBroken();
    internal static string get_EntityClient_CannotCloneStoreProvider();
    internal static string get_EntityClient_UnsupportedCommandType();
    internal static string get_EntityClient_ErrorInClosingConnection();
    internal static string get_EntityClient_ErrorInBeginningTransaction();
    internal static string get_EntityClient_ExtraParametersWithNamedConnection();
    internal static string get_EntityClient_CommandDefinitionPreparationFailed();
    internal static string get_EntityClient_CommandDefinitionExecutionFailed();
    internal static string get_EntityClient_CommandExecutionFailed();
    internal static string get_EntityClient_StoreReaderFailed();
    internal static string EntityClient_FailedToGetInformation(object p0);
    internal static string get_EntityClient_TooFewColumns();
    internal static string EntityClient_InvalidParameterName(object p0);
    internal static string get_EntityClient_EmptyParameterName();
    internal static string EntityClient_ReturnedNullOnProviderMethod(object p0, object p1);
    internal static string get_EntityClient_CannotDeduceDbType();
    internal static string EntityClient_InvalidParameterDirection(object p0);
    internal static string EntityClient_UnknownParameterType(object p0);
    internal static string EntityClient_UnsupportedDbType(object p0, object p1);
    internal static string EntityClient_DoesNotImplementIServiceProvider(object p0);
    internal static string EntityClient_IncompatibleNavigationPropertyResult(object p0, object p1);
    internal static string get_EntityClient_TransactionAlreadyStarted();
    internal static string get_EntityClient_InvalidTransactionForCommand();
    internal static string get_EntityClient_NoStoreConnectionForUpdate();
    internal static string get_EntityClient_CommandTreeMetadataIncompatible();
    internal static string get_EntityClient_ProviderGeneralError();
    internal static string EntityClient_ProviderSpecificError(object p0);
    internal static string get_EntityClient_FunctionImportEmptyCommandText();
    internal static string EntityClient_UnableToFindFunctionImportContainer(object p0);
    internal static string EntityClient_UnableToFindFunctionImport(object p0, object p1);
    internal static string EntityClient_FunctionImportMustBeNonComposable(object p0);
    internal static string EntityClient_UnmappedFunctionImport(object p0);
    internal static string get_EntityClient_InvalidStoredProcedureCommandText();
    internal static string EntityClient_ItemCollectionsNotRegisteredInWorkspace(object p0);
    internal static string get_EntityClient_ConnectionMustBeClosed();
    internal static string EntityClient_DbConnectionHasNoProvider(object p0);
    internal static string get_EntityClient_RequiresNonStoreCommandTree();
    internal static string get_EntityClient_CannotReprepareCommandDefinitionBasedCommand();
    internal static string EntityClient_EntityParameterEdmTypeNotScalar(object p0);
    internal static string EntityClient_EntityParameterInconsistentEdmType(object p0, object p1);
    internal static string get_EntityClient_CannotGetCommandText();
    internal static string get_EntityClient_CannotSetCommandText();
    internal static string get_EntityClient_CannotGetCommandTree();
    internal static string get_EntityClient_CannotSetCommandTree();
    internal static string get_ELinq_ExpressionMustBeIQueryable();
    internal static string ELinq_UnsupportedExpressionType(object p0);
    internal static string ELinq_UnsupportedUseOfContextParameter(object p0);
    internal static string ELinq_UnboundParameterExpression(object p0);
    internal static string get_ELinq_UnsupportedConstructor();
    internal static string get_ELinq_UnsupportedInitializers();
    internal static string get_ELinq_UnsupportedBinding();
    internal static string ELinq_UnsupportedMethod(object p0);
    internal static string ELinq_UnsupportedMethodSuggestedAlternative(object p0, object p1);
    internal static string get_ELinq_ThenByDoesNotFollowOrderBy();
    internal static string ELinq_UnrecognizedMember(object p0);
    internal static string ELinq_UnresolvableFunctionForMethod(object p0, object p1);
    internal static string ELinq_UnresolvableFunctionForMethodAmbiguousMatch(object p0, object p1);
    internal static string ELinq_UnresolvableFunctionForMethodNotFound(object p0, object p1);
    internal static string ELinq_UnresolvableFunctionForMember(object p0, object p1);
    internal static string ELinq_UnresolvableStoreFunctionForMember(object p0, object p1);
    internal static string ELinq_UnresolvableFunctionForExpression(object p0);
    internal static string ELinq_UnresolvableStoreFunctionForExpression(object p0);
    internal static string ELinq_UnsupportedType(object p0);
    internal static string ELinq_UnsupportedNullConstant(object p0);
    internal static string ELinq_UnsupportedConstant(object p0);
    internal static string ELinq_UnsupportedCast(object p0, object p1);
    internal static string ELinq_UnsupportedIsOrAs(object p0, object p1, object p2);
    internal static string get_ELinq_UnsupportedQueryableMethod();
    internal static string ELinq_InvalidOfTypeResult(object p0);
    internal static string ELinq_UnsupportedNominalType(object p0);
    internal static string ELinq_UnsupportedEnumerableType(object p0);
    internal static string ELinq_UnsupportedHeterogeneousInitializers(object p0);
    internal static string get_ELinq_UnsupportedDifferentContexts();
    internal static string get_ELinq_UnsupportedCastToDecimal();
    internal static string ELinq_UnsupportedKeySelector(object p0);
    internal static string get_ELinq_CreateOrderedEnumerableNotSupported();
    internal static string ELinq_UnsupportedPassthrough(object p0, object p1);
    internal static string ELinq_UnexpectedTypeForNavigationProperty(object p0, object p1, object p2, object p3);
    internal static string get_ELinq_SkipWithoutOrder();
    internal static string get_ELinq_PropertyIndexNotSupported();
    internal static string ELinq_NotPropertyOrField(object p0);
    internal static string ELinq_UnsupportedStringRemoveCase(object p0, object p1);
    internal static string ELinq_UnsupportedTrimStartTrimEndCase(object p0);
    internal static string ELinq_UnsupportedVBDatePartNonConstantInterval(object p0, object p1);
    internal static string ELinq_UnsupportedVBDatePartInvalidInterval(object p0, object p1, object p2);
    internal static string ELinq_UnsupportedAsUnicodeAndAsNonUnicode(object p0);
    internal static string ELinq_UnsupportedComparison(object p0);
    internal static string ELinq_UnsupportedRefComparison(object p0, object p1);
    internal static string ELinq_UnsupportedRowComparison(object p0);
    internal static string ELinq_UnsupportedRowMemberComparison(object p0);
    internal static string ELinq_UnsupportedRowTypeComparison(object p0);
    internal static string get_ELinq_AnonymousType();
    internal static string get_ELinq_ClosureType();
    internal static string ELinq_UnhandledExpressionType(object p0);
    internal static string ELinq_UnhandledBindingType(object p0);
    internal static string get_ELinq_UnsupportedNestedFirst();
    internal static string get_ELinq_UnsupportedNestedSingle();
    internal static string get_ELinq_UnsupportedInclude();
    internal static string get_ELinq_UnsupportedMergeAs();
    internal static string get_ELinq_MethodNotDirectlyCallable();
    internal static string get_ELinq_CycleDetected();
    internal static string ELinq_EdmFunctionAttributeParameterNameNotValid(object p0, object p1, object p2);
    internal static string ELinq_EdmFunctionAttributedFunctionWithWrongReturnType(object p0, object p1);
    internal static string get_ELinq_EdmFunctionDirectCall();
    internal static string CompiledELinq_UnsupportedParameterTypes(object p0);
    internal static string CompiledELinq_UnsupportedNamedParameterType(object p0, object p1);
    internal static string CompiledELinq_UnsupportedNamedParameterUseAsType(object p0, object p1);
    internal static string Update_UnsupportedExpressionKind(object p0, object p1);
    internal static string Update_UnsupportedCastArgument(object p0);
    internal static string Update_UnsupportedExtentType(object p0, object p1);
    internal static string get_Update_ConstraintCycle();
    internal static string Update_UnsupportedJoinType(object p0);
    internal static string Update_UnsupportedProjection(object p0);
    internal static string Update_ConcurrencyError(object p0);
    internal static string Update_MissingEntity(object p0, object p1);
    internal static string Update_RelationshipCardinalityConstraintViolation(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string get_Update_GeneralExecutionException();
    internal static string Update_MissingRequiredEntity(object p0, object p1, object p2);
    internal static string Update_RelationshipCardinalityViolation(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Update_NotSupportedServerGenKey(object p0);
    internal static string Update_NotSupportedIdentityType(object p0, object p1);
    internal static string Update_NotSupportedComputedKeyColumn(object p0, object p1, object p2, object p3, object p4);
    internal static string get_Update_AmbiguousServerGenIdentifier();
    internal static string get_Update_WorkspaceMismatch();
    internal static string Update_MissingRequiredRelationshipValue(object p0, object p1);
    internal static string Update_MissingResultColumn(object p0);
    internal static string Update_NullReturnValueForNonNullableMember(object p0, object p1);
    internal static string Update_ReturnValueHasUnexpectedType(object p0, object p1, object p2, object p3);
    internal static string Update_SqlEntitySetWithoutDmlFunctions(object p0, object p1, object p2);
    internal static string Update_UnableToConvertRowsAffectedParameterToInt32(object p0, object p1);
    internal static string Update_MappingNotFound(object p0);
    internal static string Update_ModifyingIdentityColumn(object p0, object p1, object p2);
    internal static string Update_GeneratedDependent(object p0);
    internal static string get_Update_ReferentialConstraintIntegrityViolation();
    internal static string get_Update_ErrorLoadingRecord();
    internal static string Update_NullValue(object p0);
    internal static string get_Update_CircularRelationships();
    internal static string Update_RelationshipCardinalityConstraintViolationSingleValue(object p0, object p1, object p2, object p3, object p4);
    internal static string Update_MissingFunctionMapping(object p0, object p1, object p2);
    internal static string get_Update_InvalidChanges();
    internal static string get_Update_DuplicateKeys();
    internal static string Update_AmbiguousForeignKey(object p0);
    internal static string Update_InsertingOrUpdatingReferenceToDeletedEntity(object p0);
    internal static string get_ViewGen_Extent();
    internal static string get_ViewGen_Null();
    internal static string get_ViewGen_CommaBlank();
    internal static string get_ViewGen_Entities();
    internal static string get_ViewGen_Tuples();
    internal static string get_ViewGen_NotNull();
    internal static string ViewGen_NegatedCellConstant(object p0);
    internal static string get_ViewGen_Error();
    internal static string get_ViewGen_AND();
    internal static string Viewgen_CannotGenerateQueryViewUnderNoValidation(object p0);
    internal static string ViewGen_Missing_Sets_Mapping(object p0);
    internal static string ViewGen_Missing_Type_Mapping(object p0);
    internal static string ViewGen_Missing_Set_Mapping(object p0);
    internal static string ViewGen_Concurrency_Derived_Class(object p0, object p1, object p2);
    internal static string ViewGen_Concurrency_Invalid_Condition(object p0, object p1);
    internal static string ViewGen_TableKey_Missing(object p0, object p1);
    internal static string ViewGen_EntitySetKey_Missing(object p0, object p1);
    internal static string ViewGen_AssociationSetKey_Missing(object p0, object p1, object p2);
    internal static string ViewGen_Cannot_Recover_Attributes(object p0, object p1, object p2);
    internal static string ViewGen_Cannot_Recover_Types(object p0, object p1);
    internal static string ViewGen_Cannot_Disambiguate_MultiConstant(object p0, object p1);
    internal static string ViewGen_No_Default_Value(object p0, object p1);
    internal static string ViewGen_No_Default_Value_For_Configuration(object p0);
    internal static string ViewGen_KeyConstraint_Violation(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string ViewGen_KeyConstraint_Update_Violation_EntitySet(object p0, object p1, object p2, object p3);
    internal static string ViewGen_KeyConstraint_Update_Violation_AssociationSet(object p0, object p1, object p2);
    internal static string ViewGen_AssociationEndShouldBeMappedToKey(object p0, object p1);
    internal static string ViewGen_Duplicate_CProperties(object p0);
    internal static string ViewGen_Duplicate_CProperties_IsMapped(object p0, object p1);
    internal static string ViewGen_NotNull_No_Projected_Slot(object p0);
    internal static string ViewGen_InvalidCondition(object p0);
    internal static string ViewGen_NonKeyProjectedWithOverlappingPartitions(object p0);
    internal static string ViewGen_CQ_PartitionConstraint(object p0);
    internal static string ViewGen_CQ_DomainConstraint(object p0);
    internal static string ViewGen_OneOfConst_MustBeNonNullable(object p0);
    internal static string ViewGen_OneOfConst_MustBeNull(object p0);
    internal static string ViewGen_OneOfConst_MustBeEqualTo(object p0, object p1);
    internal static string ViewGen_OneOfConst_MustNotBeEqualTo(object p0, object p1);
    internal static string ViewGen_OneOfConst_MustBeOneOf(object p0, object p1);
    internal static string ViewGen_OneOfConst_MustNotBeOneOf(object p0, object p1);
    internal static string ViewGen_OneOfConst_IsNonNullable(object p0);
    internal static string ViewGen_OneOfConst_IsEqualTo(object p0, object p1);
    internal static string ViewGen_OneOfConst_IsNotEqualTo(object p0, object p1);
    internal static string ViewGen_OneOfConst_IsOneOf(object p0, object p1);
    internal static string ViewGen_OneOfConst_IsNotOneOf(object p0, object p1);
    internal static string ViewGen_OneOfConst_IsOneOfTypes(object p0);
    internal static string ViewGen_ErrorLog(object p0);
    internal static string ViewGen_ErrorLog2(object p0);
    internal static string ViewGen_Foreign_Key_Missing_Table_Mapping(object p0, object p1);
    internal static string ViewGen_Foreign_Key_ParentTable_NotMappedToEnd(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string ViewGen_Foreign_Key(object p0, object p1, object p2, object p3, object p4);
    internal static string ViewGen_Foreign_Key_UpperBound_MustBeOne(object p0, object p1, object p2);
    internal static string ViewGen_Foreign_Key_LowerBound_MustBeOne(object p0, object p1, object p2);
    internal static string ViewGen_Foreign_Key_Missing_Relationship_Mapping(object p0);
    internal static string ViewGen_Foreign_Key_Not_Guaranteed_InCSpace(object p0);
    internal static string ViewGen_Foreign_Key_ColumnOrder_Incorrect(object p0, object p1, object p2, object p3, object p4, object p5, object p6);
    internal static string ViewGen_AssociationSet_AsUserString(object p0, object p1, object p2);
    internal static string ViewGen_AssociationSet_AsUserString_Negated(object p0, object p1, object p2);
    internal static string ViewGen_EntitySet_AsUserString(object p0, object p1);
    internal static string ViewGen_EntitySet_AsUserString_Negated(object p0, object p1);
    internal static string get_ViewGen_EntityInstanceToken();
    internal static string Viewgen_ConfigurationErrorMsg(object p0);
    internal static string ViewGen_HashOnMappingClosure_Not_Matching(object p0);
    internal static string Viewgen_RightSideNotDisjoint(object p0);
    internal static string Viewgen_QV_RewritingNotFound(object p0);
    internal static string Viewgen_NullableMappingForNonNullableColumn(object p0, object p1);
    internal static string Viewgen_ErrorPattern_ConditionMemberIsMapped(object p0);
    internal static string Viewgen_ErrorPattern_DuplicateConditionValue(object p0);
    internal static string Viewgen_ErrorPattern_TableMappedToMultipleES(object p0, object p1, object p2);
    internal static string get_Viewgen_ErrorPattern_Partition_Disj_Eq();
    internal static string Viewgen_ErrorPattern_NotNullConditionMappedToNullableMember(object p0, object p1);
    internal static string Viewgen_ErrorPattern_Partition_MultipleTypesMappedToSameTable_WithoutCondition(object p0, object p1);
    internal static string get_Viewgen_ErrorPattern_Partition_Disj_Subs_Ref();
    internal static string get_Viewgen_ErrorPattern_Partition_Disj_Subs();
    internal static string get_Viewgen_ErrorPattern_Partition_Disj_Unk();
    internal static string get_Viewgen_ErrorPattern_Partition_Eq_Disj();
    internal static string get_Viewgen_ErrorPattern_Partition_Eq_Subs_Ref();
    internal static string get_Viewgen_ErrorPattern_Partition_Eq_Subs();
    internal static string get_Viewgen_ErrorPattern_Partition_Eq_Unk();
    internal static string get_Viewgen_ErrorPattern_Partition_Eq_Unk_Association();
    internal static string get_Viewgen_ErrorPattern_Partition_Sub_Disj();
    internal static string get_Viewgen_ErrorPattern_Partition_Sub_Eq();
    internal static string get_Viewgen_ErrorPattern_Partition_Sub_Eq_Ref();
    internal static string get_Viewgen_ErrorPattern_Partition_Sub_Unk();
    internal static string get_Viewgen_NoJoinKeyOrFK();
    internal static string Viewgen_MultipleFragmentsBetweenCandSExtentWithDistinct(object p0, object p1);
    internal static string get_Validator_EmptyIdentity();
    internal static string get_Validator_CollectionHasNoTypeUsage();
    internal static string Validator_NoKeyMembers(object p0);
    internal static string get_Validator_FacetTypeIsNull();
    internal static string get_Validator_MemberHasNullDeclaringType();
    internal static string get_Validator_MemberHasNullTypeUsage();
    internal static string get_Validator_ItemAttributeHasNullTypeUsage();
    internal static string get_Validator_RefTypeHasNullEntityType();
    internal static string get_Validator_TypeUsageHasNullEdmType();
    internal static string get_Validator_BaseTypeHasMemberOfSameName();
    internal static string get_Validator_CollectionTypesCannotHaveBaseType();
    internal static string get_Validator_RefTypesCannotHaveBaseType();
    internal static string get_Validator_TypeHasNoName();
    internal static string get_Validator_TypeHasNoNamespace();
    internal static string get_Validator_FacetHasNoName();
    internal static string get_Validator_MemberHasNoName();
    internal static string get_Validator_MetadataPropertyHasNoName();
    internal static string Validator_NullableEntityKeyProperty(object p0, object p1);
    internal static string Validator_OSpace_InvalidNavPropReturnType(object p0, object p1, object p2);
    internal static string Validator_OSpace_ScalarPropertyNotPrimitive(object p0, object p1, object p2);
    internal static string Validator_OSpace_ComplexPropertyNotComplex(object p0, object p1, object p2);
    internal static string Validator_OSpace_Convention_MultipleTypesWithSameName(object p0);
    internal static string Validator_OSpace_Convention_NonPrimitiveTypeProperty(object p0, object p1, object p2);
    internal static string Validator_OSpace_Convention_MissingRequiredProperty(object p0, object p1);
    internal static string Validator_OSpace_Convention_BaseTypeIncompatible(object p0, object p1, object p2);
    internal static string Validator_OSpace_Convention_MissingOSpaceType(object p0);
    internal static string Validator_OSpace_Convention_RelationshipNotLoaded(object p0, object p1);
    internal static string Validator_OSpace_Convention_AttributeAssemblyReferenced(object p0);
    internal static string Validator_OSpace_Convention_ScalarPropertyMissginGetterOrSetter(object p0, object p1, object p2);
    internal static string Validator_OSpace_Convention_AmbiguousClrType(object p0, object p1, object p2);
    internal static string Validator_OSpace_Convention_Struct(object p0, object p1);
    internal static string Validator_OSpace_Convention_BaseTypeNotLoaded(object p0, object p1);
    internal static string Validator_OSpace_Convention_SSpaceOSpaceTypeMismatch(object p0, object p1);
    internal static string get_Validator_OSpace_Convention_NonMatchingUnderlyingTypes();
    internal static string Validator_UnsupportedEnumUnderlyingType(object p0);
    internal static string get_ExtraInfo();
    internal static string get_Metadata_General_Error();
    internal static string InvalidNumberOfParametersForAggregateFunction(object p0);
    internal static string InvalidParameterTypeForAggregateFunction(object p0, object p1);
    internal static string ItemCollectionAlreadyRegistered(object p0);
    internal static string InvalidSchemaEncountered(object p0);
    internal static string SystemNamespaceEncountered(object p0);
    internal static string NoCollectionForSpace(object p0);
    internal static string get_OperationOnReadOnlyCollection();
    internal static string get_OperationOnReadOnlyItem();
    internal static string get_EntitySetInAnotherContainer();
    internal static string InvalidKeyMember(object p0);
    internal static string InvalidFileExtension(object p0, object p1, object p2);
    internal static string NewTypeConflictsWithExistingType(object p0, object p1);
    internal static string get_NotValidInputPath();
    internal static string get_UnableToDetermineApplicationContext();
    internal static string get_WildcardEnumeratorReturnedNull();
    internal static string InvalidUseOfWebPath(object p0);
    internal static string UnableToFindReflectedType(object p0, object p1);
    internal static string AssemblyMissingFromAssembliesToConsider(object p0);
    internal static string InvalidCollectionSpecified(object p0);
    internal static string get_UnableToLoadResource();
    internal static string EdmVersionNotSupportedByRuntime(object p0, object p1);
    internal static string get_AtleastOneSSDLNeeded();
    internal static string get_InvalidMetadataPath();
    internal static string UnableToResolveAssembly(object p0);
    internal static string get_UnableToDetermineStoreVersion();
    internal static string DuplicatedFunctionoverloads(object p0, object p1);
    internal static string EntitySetNotInCSPace(object p0);
    internal static string TypeNotInEntitySet(object p0, object p1, object p2);
    internal static string TypeNotInAssociationSet(object p0, object p1, object p2);
    internal static string DifferentSchemaVersionInCollection(object p0, object p1, object p2);
    internal static string InvalidCollectionForMapping(object p0);
    internal static string get_OnlyStoreConnectionsSupported();
    internal static string StoreItemCollectionMustHaveOneArtifact(object p0);
    internal static string CheckArgumentContainsNullFailed(object p0);
    internal static string InvalidRelationshipSetName(object p0);
    internal static string MemberInvalidIdentity(object p0);
    internal static string InvalidEntitySetName(object p0);
    internal static string ItemInvalidIdentity(object p0);
    internal static string ItemDuplicateIdentity(object p0);
    internal static string get_NotStringTypeForTypeUsage();
    internal static string get_NotBinaryTypeForTypeUsage();
    internal static string get_NotDateTimeTypeForTypeUsage();
    internal static string get_NotDateTimeOffsetTypeForTypeUsage();
    internal static string get_NotTimeTypeForTypeUsage();
    internal static string get_NotDecimalTypeForTypeUsage();
    internal static string get_ArrayTooSmall();
    internal static string MoreThanOneItemMatchesIdentity(object p0);
    internal static string MissingDefaultValueForConstantFacet(object p0, object p1);
    internal static string MinAndMaxValueMustBeSameForConstantFacet(object p0, object p1);
    internal static string BothMinAndMaxValueMustBeSpecifiedForNonConstantFacet(object p0, object p1);
    internal static string MinAndMaxValueMustBeDifferentForNonConstantFacet(object p0, object p1);
    internal static string MinAndMaxMustBePositive(object p0, object p1);
    internal static string MinMustBeLessThanMax(object p0, object p1, object p2);
    internal static string SameRoleNameOnRelationshipAttribute(object p0, object p1);
    internal static string RoleTypeInEdmRelationshipAttributeIsInvalidType(object p0, object p1, object p2);
    internal static string TargetRoleNameInNavigationPropertyNotValid(object p0, object p1, object p2, object p3);
    internal static string RelationshipNameInNavigationPropertyNotValid(object p0, object p1, object p2);
    internal static string NestedClassNotSupported(object p0, object p1);
    internal static string NullParameterForEdmRelationshipAttribute(object p0, object p1);
    internal static string NullRelationshipNameforEdmRelationshipAttribute(object p0);
    internal static string NavigationPropertyRelationshipEndTypeMismatch(object p0, object p1, object p2, object p3, object p4);
    internal static string AllArtifactsMustTargetSameProvider_InvariantName(object p0, object p1);
    internal static string AllArtifactsMustTargetSameProvider_ManifestToken(object p0, object p1);
    internal static string get_ProviderManifestTokenNotFound();
    internal static string get_FailedToRetrieveProviderManifest();
    internal static string get_InvalidMaxLengthSize();
    internal static string get_ArgumentMustBeCSpaceType();
    internal static string get_ArgumentMustBeOSpaceType();
    internal static string FailedToFindOSpaceTypeMapping(object p0);
    internal static string FailedToFindCSpaceTypeMapping(object p0);
    internal static string FailedToFindClrTypeMapping(object p0);
    internal static string GenericTypeNotSupported(object p0);
    internal static string InvalidEDMVersion(object p0);
    internal static string get_Mapping_General_Error();
    internal static string get_Mapping_InvalidContent_General();
    internal static string Mapping_InvalidContent_EntityContainer(object p0);
    internal static string Mapping_InvalidContent_StorageEntityContainer(object p0);
    internal static string Mapping_AlreadyMapped_StorageEntityContainer(object p0);
    internal static string Mapping_InvalidContent_Entity_Set(object p0);
    internal static string Mapping_InvalidContent_Entity_Type(object p0);
    internal static string Mapping_InvalidContent_AbstractEntity_FunctionMapping(object p0);
    internal static string Mapping_InvalidContent_AbstractEntity_Type(object p0);
    internal static string Mapping_InvalidContent_AbstractEntity_IsOfType(object p0);
    internal static string Mapping_InvalidContent_Entity_Type_For_Entity_Set(object p0, object p1, object p2);
    internal static string Mapping_Invalid_Association_Type_For_Association_Set(object p0, object p1, object p2);
    internal static string Mapping_InvalidContent_Table(object p0);
    internal static string Mapping_InvalidContent_Complex_Type(object p0);
    internal static string Mapping_InvalidContent_Association_Set(object p0);
    internal static string Mapping_InvalidContent_AssociationSet_Condition(object p0);
    internal static string Mapping_InvalidContent_ForeignKey_Association_Set(object p0);
    internal static string Mapping_InvalidContent_ForeignKey_Association_Set_PKtoPK(object p0);
    internal static string Mapping_InvalidContent_Association_Type(object p0);
    internal static string Mapping_InvalidContent_EndProperty(object p0);
    internal static string get_Mapping_InvalidContent_Association_Type_Empty();
    internal static string get_Mapping_InvalidContent_Table_Expected();
    internal static string Mapping_InvalidContent_Cdm_Member(object p0);
    internal static string Mapping_InvalidContent_Column(object p0);
    internal static string Mapping_InvalidContent_End(object p0);
    internal static string get_Mapping_InvalidContent_Container_SubElement();
    internal static string Mapping_InvalidContent_Duplicate_Cdm_Member(object p0);
    internal static string Mapping_InvalidContent_Duplicate_Condition_Member(object p0);
    internal static string get_Mapping_InvalidContent_ConditionMapping_Both_Members();
    internal static string get_Mapping_InvalidContent_ConditionMapping_Either_Members();
    internal static string get_Mapping_InvalidContent_ConditionMapping_Both_Values();
    internal static string get_Mapping_InvalidContent_ConditionMapping_Either_Values();
    internal static string get_Mapping_InvalidContent_ConditionMapping_NonScalar();
    internal static string Mapping_InvalidContent_ConditionMapping_InvalidPrimitiveTypeKind(object p0, object p1);
    internal static string Mapping_InvalidContent_ConditionMapping_InvalidMember(object p0);
    internal static string Mapping_InvalidContent_ConditionMapping_Computed(object p0);
    internal static string Mapping_InvalidContent_Emtpty_SetMap(object p0);
    internal static string get_Mapping_InvalidContent_TypeMapping_QueryView();
    internal static string Mapping_Default_OCMapping_Clr_Member(object p0, object p1, object p2);
    internal static string Mapping_Default_OCMapping_Clr_Member2(object p0, object p1, object p2);
    internal static string Mapping_Default_OCMapping_Invalid_MemberType(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Mapping_Default_OCMapping_MemberKind_Mismatch(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Mapping_Default_OCMapping_MultiplicityMismatch(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Mapping_Default_OCMapping_Member_Count_Mismatch(object p0, object p1);
    internal static string Mapping_Default_OCMapping_Member_Type_Mismatch(object p0, object p1, object p2, object p3, object p4, object p5, object p6);
    internal static string Mapping_Enum_OCMapping_UnderlyingTypesMismatch(object p0, object p1, object p2, object p3);
    internal static string Mapping_Enum_OCMapping_MemberMismatch(object p0, object p1, object p2, object p3);
    internal static string Mapping_NotFound_EntityContainer(object p0);
    internal static string Mapping_Duplicate_CdmAssociationSet_StorageMap(object p0);
    internal static string Mapping_Invalid_CSRootElementMissing(object p0, object p1, object p2);
    internal static string get_Mapping_ConditionValueTypeMismatch();
    internal static string Mapping_Storage_InvalidSpace(object p0);
    internal static string Mapping_Invalid_Member_Mapping(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Mapping_Invalid_CSide_ScalarProperty(object p0);
    internal static string Mapping_Duplicate_Type(object p0);
    internal static string Mapping_Duplicate_PropertyMap_CaseInsensitive(object p0);
    internal static string Mapping_Enum_EmptyValue(object p0);
    internal static string Mapping_Enum_InvalidValue(object p0);
    internal static string Mapping_InvalidMappingSchema_Parsing(object p0);
    internal static string Mapping_InvalidMappingSchema_validation(object p0);
    internal static string Mapping_Object_InvalidType(object p0);
    internal static string Mapping_Provider_WrongConnectionType(object p0);
    internal static string Mapping_Provider_WrongManifestType(object p0);
    internal static string Mapping_Views_For_Extent_Not_Generated(object p0, object p1);
    internal static string Mapping_TableName_QueryView(object p0);
    internal static string Mapping_Empty_QueryView(object p0);
    internal static string Mapping_Empty_QueryView_OfType(object p0, object p1);
    internal static string Mapping_Empty_QueryView_OfTypeOnly(object p0, object p1);
    internal static string Mapping_QueryView_PropertyMaps(object p0);
    internal static string Mapping_Invalid_QueryView(object p0, object p1);
    internal static string Mapping_Invalid_QueryView2(object p0, object p1);
    internal static string Mapping_Invalid_QueryView_Type(object p0);
    internal static string get_Mapping_TypeName_For_First_QueryView();
    internal static string Mapping_AllQueryViewAtCompileTime(object p0);
    internal static string Mapping_QueryViewMultipleTypeInTypeName(object p0);
    internal static string Mapping_QueryView_Duplicate_OfType(object p0, object p1);
    internal static string Mapping_QueryView_Duplicate_OfTypeOnly(object p0, object p1);
    internal static string Mapping_QueryView_TypeName_Not_Defined(object p0);
    internal static string Mapping_QueryView_For_Base_Type(object p0, object p1);
    internal static string Mapping_UnsupportedExpressionKind_QueryView(object p0, object p1, object p2);
    internal static string Mapping_UnsupportedFunctionCall_QueryView(object p0, object p1);
    internal static string Mapping_UnsupportedScanTarget_QueryView(object p0, object p1);
    internal static string Mapping_UnsupportedPropertyKind_QueryView(object p0, object p1, object p2);
    internal static string Mapping_UnsupportedInitialization_QueryView(object p0, object p1);
    internal static string Mapping_EntitySetMismatchOnAssociationSetEnd_QueryView(object p0, object p1, object p2, object p3);
    internal static string Mapping_Invalid_Query_Views_MissingSetClosure(object p0);
    internal static string Generated_View_Type_Super_Class(object p0);
    internal static string get_Generated_Views_Changed();
    internal static string Generated_Views_Invalid_Extent(object p0);
    internal static string Mapping_ItemWithSameNameExistsBothInCSpaceAndSSpace(object p0);
    internal static string Mapping_AbstractTypeMappingToNonAbstractType(object p0, object p1);
    internal static string Mapping_EnumTypeMappingToNonEnumType(object p0, object p1);
    internal static string StorageEntityContainerNameMismatchWhileSpecifyingPartialMapping(object p0, object p1, object p2);
    internal static string get_Mapping_InvalidContent_IsTypeOfNotTerminated();
    internal static string Mapping_CannotMapCLRTypeMultipleTimes(object p0);
    internal static string get_Mapping_ModificationFunction_In_Table_Context();
    internal static string get_Mapping_ModificationFunction_Multiple_Types();
    internal static string Mapping_ModificationFunction_UnknownFunction(object p0);
    internal static string Mapping_ModificationFunction_AmbiguousFunction(object p0);
    internal static string Mapping_ModificationFunction_NotValidFunction(object p0);
    internal static string Mapping_ModificationFunction_NotValidFunctionParameter(object p0, object p1, object p2);
    internal static string Mapping_ModificationFunction_MissingParameter(object p0, object p1);
    internal static string Mapping_ModificationFunction_AssociationSetDoesNotExist(object p0);
    internal static string Mapping_ModificationFunction_AssociationSetRoleDoesNotExist(object p0);
    internal static string Mapping_ModificationFunction_AssociationSetFromRoleIsNotEntitySet(object p0);
    internal static string Mapping_ModificationFunction_AssociationSetCardinality(object p0);
    internal static string Mapping_ModificationFunction_ComplexTypeNotFound(object p0);
    internal static string Mapping_ModificationFunction_WrongComplexType(object p0, object p1);
    internal static string get_Mapping_ModificationFunction_MissingVersion();
    internal static string get_Mapping_ModificationFunction_VersionMustBeOriginal();
    internal static string get_Mapping_ModificationFunction_VersionMustBeCurrent();
    internal static string Mapping_ModificationFunction_ParameterNotFound(object p0, object p1);
    internal static string Mapping_ModificationFunction_PropertyNotFound(object p0, object p1);
    internal static string Mapping_ModificationFunction_PropertyNotKey(object p0, object p1);
    internal static string Mapping_ModificationFunction_ParameterBoundTwice(object p0);
    internal static string Mapping_ModificationFunction_RedundantEntityTypeMapping(object p0);
    internal static string Mapping_ModificationFunction_MissingSetClosure(object p0);
    internal static string Mapping_ModificationFunction_MissingEntityType(object p0);
    internal static string Mapping_ModificationFunction_PropertyParameterTypeMismatch(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string Mapping_ModificationFunction_AssociationSetAmbiguous(object p0);
    internal static string Mapping_ModificationFunction_MultipleEndsOfAssociationMapped(object p0, object p1, object p2);
    internal static string Mapping_ModificationFunction_AmbiguousResultBinding(object p0, object p1);
    internal static string Mapping_ModificationFunction_AssociationSetNotMappedForOperation(object p0, object p1, object p2, object p3);
    internal static string Mapping_ModificationFunction_AssociationEndMappingInvalidForEntityType(object p0, object p1, object p2);
    internal static string Mapping_ModificationFunction_AssociationEndMappingForeignKeyAssociation(object p0);
    internal static string Mapping_StoreTypeMismatch_ScalarPropertyMapping(object p0, object p1);
    internal static string get_Mapping_DistinctFlagInReadWriteContainer();
    internal static string Mapping_ProviderReturnsNullType(object p0);
    internal static string get_Mapping_DifferentEdmStoreVersion();
    internal static string get_Mapping_DifferentMappingEdmStoreVersion();
    internal static string Mapping_FunctionImport_StoreFunctionDoesNotExist(object p0);
    internal static string Mapping_FunctionImport_FunctionImportDoesNotExist(object p0, object p1);
    internal static string Mapping_FunctionImport_FunctionImportMappedMultipleTimes(object p0);
    internal static string Mapping_FunctionImport_TargetFunctionMustBeNonComposable(object p0, object p1);
    internal static string Mapping_FunctionImport_TargetFunctionMustBeComposable(object p0, object p1);
    internal static string Mapping_FunctionImport_TargetParameterHasNoCorrespondingImportParameter(object p0);
    internal static string Mapping_FunctionImport_ImportParameterHasNoCorrespondingTargetParameter(object p0);
    internal static string Mapping_FunctionImport_IncompatibleParameterMode(object p0, object p1, object p2);
    internal static string Mapping_FunctionImport_IncompatibleParameterType(object p0, object p1, object p2);
    internal static string Mapping_FunctionImport_IncompatibleEnumParameterType(object p0, object p1, object p2, object p3);
    internal static string Mapping_FunctionImport_RowsAffectedParameterDoesNotExist(object p0, object p1);
    internal static string Mapping_FunctionImport_RowsAffectedParameterHasWrongType(object p0, object p1);
    internal static string Mapping_FunctionImport_RowsAffectedParameterHasWrongMode(object p0, object p1, object p2, object p3);
    internal static string Mapping_FunctionImport_EntityTypeMappingForFunctionNotReturningEntitySet(object p0, object p1);
    internal static string Mapping_FunctionImport_InvalidContentEntityTypeForEntitySet(object p0, object p1, object p2, object p3);
    internal static string Mapping_FunctionImport_ConditionValueTypeMismatch(object p0, object p1, object p2);
    internal static string Mapping_FunctionImport_UnsupportedType(object p0, object p1);
    internal static string Mapping_FunctionImport_ResultMappingCountDoesNotMatchResultCount(object p0);
    internal static string Mapping_FunctionImport_ResultMapping_MappedTypeDoesNotMatchReturnType(object p0, object p1);
    internal static string Mapping_FunctionImport_ResultMapping_InvalidCTypeCTExpected(object p0);
    internal static string Mapping_FunctionImport_ResultMapping_InvalidCTypeETExpected(object p0);
    internal static string Mapping_FunctionImport_ResultMapping_InvalidSType(object p0);
    internal static string Mapping_FunctionImport_PropertyNotMapped(object p0, object p1, object p2);
    internal static string Mapping_FunctionImport_ImplicitMappingForAbstractReturnType(object p0, object p1);
    internal static string Mapping_FunctionImport_ScalarMappingToMulticolumnTVF(object p0, object p1);
    internal static string Mapping_FunctionImport_ScalarMappingTypeMismatch(object p0, object p1, object p2, object p3);
    internal static string Mapping_FunctionImport_UnreachableType(object p0, object p1);
    internal static string Mapping_FunctionImport_UnreachableIsTypeOf(object p0, object p1);
    internal static string Mapping_FunctionImport_FunctionAmbiguous(object p0);
    internal static string Mapping_FunctionImport_CannotInferTargetFunctionKeys(object p0);
    internal static string get_SqlProvider_DdlGeneration_MissingInitialCatalog();
    internal static string get_SqlProvider_DdlGeneration_CannotDeleteDatabaseNoInitialCatalog();
    internal static string get_SqlProvider_DdlGeneration_CannotTellIfDatabaseExists();
    internal static string get_SqlProvider_CredentialsMissingForMasterConnection();
    internal static string get_SqlProvider_IncompleteCreateDatabase();
    internal static string get_SqlProvider_IncompleteCreateDatabaseAggregate();
    internal static string get_SqlProvider_SqlTypesAssemblyNotFound();
    internal static string get_SqlProvider_Sql2008RequiredForSpatial();
    internal static string get_SqlProvider_GeographyValueNotSqlCompatible();
    internal static string get_SqlProvider_GeometryValueNotSqlCompatible();
    internal static string SqlProvider_NeedSqlDataReader(object p0);
    internal static string SqlProvider_InvalidGeographyColumn(object p0);
    internal static string SqlProvider_InvalidGeometryColumn(object p0);
    internal static string get_Entity_EntityCantHaveMultipleChangeTrackers();
    internal static string ComplexObject_NullableComplexTypesNotSupported(object p0);
    internal static string get_ComplexObject_ComplexObjectAlreadyAttachedToParent();
    internal static string ComplexObject_ComplexChangeRequestedOnScalarProperty(object p0);
    internal static string ObjectStateEntry_SetModifiedOnInvalidProperty(object p0);
    internal static string get_ObjectStateEntry_OriginalValuesDoesNotExist();
    internal static string get_ObjectStateEntry_CurrentValuesDoesNotExist();
    internal static string get_ObjectStateEntry_InvalidState();
    internal static string ObjectStateEntry_CannotModifyKeyProperty(object p0);
    internal static string get_ObjectStateEntry_CantModifyRelationValues();
    internal static string get_ObjectStateEntry_CantModifyRelationState();
    internal static string get_ObjectStateEntry_CantModifyDetachedDeletedEntries();
    internal static string ObjectStateEntry_SetModifiedStates(object p0);
    internal static string get_ObjectStateEntry_CantSetEntityKey();
    internal static string get_ObjectStateEntry_CannotAccessKeyEntryValues();
    internal static string get_ObjectStateEntry_CannotModifyKeyEntryState();
    internal static string get_ObjectStateEntry_CannotDeleteOnKeyEntry();
    internal static string get_ObjectStateEntry_EntityMemberChangedWithoutEntityMemberChanging();
    internal static string ObjectStateEntry_ChangeOnUnmappedProperty(object p0);
    internal static string ObjectStateEntry_ChangeOnUnmappedComplexProperty(object p0);
    internal static string ObjectStateEntry_ChangedInDifferentStateFromChanging(object p0, object p1);
    internal static string ObjectStateEntry_UnableToEnumerateCollection(object p0, object p1);
    internal static string get_ObjectStateEntry_RelationshipAndKeyEntriesDoNotHaveRelationshipManagers();
    internal static string get_ObjectStateEntry_InvalidTypeForComplexTypeProperty();
    internal static string ObjectStateEntry_ComplexObjectUsedMultipleTimes(object p0, object p1);
    internal static string ObjectStateEntry_SetOriginalComplexProperties(object p0);
    internal static string ObjectStateEntry_NullOriginalValueForNonNullableProperty(object p0, object p1, object p2);
    internal static string ObjectStateEntry_SetOriginalPrimaryKey(object p0);
    internal static string get_ObjectStateManager_NoEntryExistForEntityKey();
    internal static string ObjectStateManager_NoEntryExistsForObject(object p0);
    internal static string get_ObjectStateManager_EntityNotTracked();
    internal static string get_ObjectStateManager_DetachedObjectStateEntriesDoesNotExistInObjectStateManager();
    internal static string get_ObjectStateManager_ObjectStateManagerContainsThisEntityKey();
    internal static string ObjectStateManager_DoesnotAllowToReAddUnchangedOrModifiedOrDeletedEntity(object p0);
    internal static string get_ObjectStateManager_CannotFixUpKeyToExistingValues();
    internal static string get_ObjectStateManager_KeyPropertyDoesntMatchValueInKey();
    internal static string get_ObjectStateManager_KeyPropertyDoesntMatchValueInKeyForAttach();
    internal static string get_ObjectStateManager_InvalidKey();
    internal static string ObjectStateManager_EntityTypeDoesnotMatchtoEntitySetType(object p0, object p1);
    internal static string ObjectStateManager_GetEntityKeyRequiresObjectToHaveAKey(object p0);
    internal static string get_ObjectStateManager_AcceptChangesEntityKeyIsNotValid();
    internal static string get_ObjectStateManager_EntityConflictsWithKeyEntry();
    internal static string get_ObjectStateManager_CannotGetRelationshipManagerForDetachedPocoEntity();
    internal static string get_ObjectStateManager_CannotChangeRelationshipStateEntityDeleted();
    internal static string get_ObjectStateManager_CannotChangeRelationshipStateEntityAdded();
    internal static string get_ObjectStateManager_CannotChangeRelationshipStateKeyEntry();
    internal static string ObjectStateManager_ConflictingChangesOfRelationshipDetected(object p0, object p1);
    internal static string get_ObjectStateManager_ChangeRelationshipStateNotSupportedForForeignKeyAssociations();
    internal static string get_ObjectStateManager_ChangeStateFromAddedWithNullKeyIsInvalid();
    internal static string ObjectContext_ClientEntityRemovedFromStore(object p0);
    internal static string get_ObjectContext_StoreEntityNotPresentInClient();
    internal static string get_ObjectContext_InvalidConnectionString();
    internal static string get_ObjectContext_InvalidConnection();
    internal static string get_ObjectContext_InvalidDataAdapter();
    internal static string ObjectContext_InvalidDefaultContainerName(object p0);
    internal static string ObjectContext_NthElementInAddedState(object p0);
    internal static string ObjectContext_NthElementIsDuplicate(object p0);
    internal static string ObjectContext_NthElementIsNull(object p0);
    internal static string ObjectContext_NthElementNotInObjectStateManager(object p0);
    internal static string get_ObjectContext_ObjectNotFound();
    internal static string get_ObjectContext_CannotDeleteEntityNotInObjectStateManager();
    internal static string get_ObjectContext_CannotDetachEntityNotInObjectStateManager();
    internal static string ObjectContext_EntitySetNotFoundForName(object p0);
    internal static string ObjectContext_EntityContainerNotFoundForName(object p0);
    internal static string get_ObjectContext_InvalidCommandTimeout();
    internal static string ObjectContext_NoMappingForEntityType(object p0);
    internal static string get_ObjectContext_EntityAlreadyExistsInObjectStateManager();
    internal static string ObjectContext_InvalidEntitySetInKey(object p0, object p1, object p2, object p3);
    internal static string get_ObjectContext_CannotAttachEntityWithoutKey();
    internal static string get_ObjectContext_CannotAttachEntityWithTemporaryKey();
    internal static string get_ObjectContext_EntitySetNameOrEntityKeyRequired();
    internal static string ObjectContext_ExecuteFunctionTypeMismatch(object p0, object p1);
    internal static string ObjectContext_ExecuteFunctionCalledWithScalarFunction(object p0, object p1);
    internal static string ObjectContext_ExecuteFunctionCalledWithNonQueryFunction(object p0);
    internal static string ObjectContext_ExecuteFunctionCalledWithNullParameter(object p0);
    internal static string get_ObjectContext_ContainerQualifiedEntitySetNameRequired();
    internal static string get_ObjectContext_CannotSetDefaultContainerName();
    internal static string get_ObjectContext_QualfiedEntitySetName();
    internal static string ObjectContext_EntitiesHaveDifferentType(object p0, object p1);
    internal static string ObjectContext_EntityMustBeUnchangedOrModified(object p0);
    internal static string ObjectContext_EntityMustBeUnchangedOrModifiedOrDeleted(object p0);
    internal static string ObjectContext_AcceptAllChangesFailure(object p0);
    internal static string get_ObjectContext_CommitWithConceptualNull();
    internal static string ObjectContext_InvalidEntitySetOnEntity(object p0, object p1);
    internal static string ObjectContext_InvalidObjectSetTypeForEntitySet(object p0, object p1, object p2);
    internal static string get_ObjectContext_RequiredMetadataNotAvailble();
    internal static string get_ObjectContext_MetadataHasChanged();
    internal static string ObjectContext_InvalidEntitySetInKeyFromName(object p0, object p1, object p2, object p3, object p4);
    internal static string get_ObjectContext_ObjectDisposed();
    internal static string ObjectContext_CannotExplicitlyLoadDetachedRelationships(object p0);
    internal static string ObjectContext_CannotLoadReferencesUsingDifferentContext(object p0);
    internal static string get_ObjectContext_SelectorExpressionMustBeMemberAccess();
    internal static string ObjectContext_MultipleEntitySetsFoundInSingleContainer(object p0, object p1);
    internal static string ObjectContext_MultipleEntitySetsFoundInAllContainers(object p0);
    internal static string ObjectContext_NoEntitySetFoundForType(object p0);
    internal static string ObjectContext_EntityNotInObjectSet_Delete(object p0, object p1, object p2, object p3);
    internal static string ObjectContext_EntityNotInObjectSet_Detach(object p0, object p1, object p2, object p3);
    internal static string get_ObjectContext_InvalidEntityState();
    internal static string get_ObjectContext_InvalidRelationshipState();
    internal static string get_ObjectContext_EntityNotTrackedOrHasTempKey();
    internal static string get_ObjectContext_ExecuteCommandWithMixOfDbParameterAndValues();
    internal static string ObjectContext_InvalidEntitySetForStoreQuery(object p0, object p1, object p2);
    internal static string ObjectContext_InvalidTypeForStoreQuery(object p0);
    internal static string ObjectContext_TwoPropertiesMappedToSameColumn(object p0, object p1);
    internal static string get_RelatedEnd_InvalidOwnerStateForAttach();
    internal static string RelatedEnd_InvalidNthElementNullForAttach(object p0);
    internal static string RelatedEnd_InvalidNthElementContextForAttach(object p0);
    internal static string RelatedEnd_InvalidNthElementStateForAttach(object p0);
    internal static string get_RelatedEnd_InvalidEntityContextForAttach();
    internal static string get_RelatedEnd_InvalidEntityStateForAttach();
    internal static string get_RelatedEnd_UnableToAddEntity();
    internal static string get_RelatedEnd_UnableToRemoveEntity();
    internal static string get_RelatedEnd_UnableToAddRelationshipWithDeletedEntity();
    internal static string get_RelatedEnd_ConflictingChangeOfRelationshipDetected();
    internal static string RelatedEnd_InvalidRelationshipFixupDetected(object p0, object p1);
    internal static string RelatedEnd_CannotSerialize(object p0);
    internal static string RelatedEnd_CannotAddToFixedSizeArray(object p0);
    internal static string RelatedEnd_CannotRemoveFromFixedSizeArray(object p0);
    internal static string get_Materializer_PropertyIsNotNullable();
    internal static string Materializer_PropertyIsNotNullableWithName(object p0);
    internal static string Materializer_SetInvalidValue(object p0, object p1, object p2, object p3);
    internal static string Materializer_InvalidCastReference(object p0, object p1);
    internal static string Materializer_InvalidCastNullable(object p0, object p1);
    internal static string Materializer_NullReferenceCast(object p0);
    internal static string Materializer_RecyclingEntity(object p0, object p1, object p2, object p3);
    internal static string Materializer_AddedEntityAlreadyExists(object p0);
    internal static string get_Materializer_CannotReEnumerateQueryResults();
    internal static string get_Materializer_UnsupportedType();
    internal static string Collections_NoRelationshipSetMatched(object p0);
    internal static string Collections_ExpectedCollectionGotReference(object p0, object p1, object p2);
    internal static string get_Collections_InvalidEntityStateSource();
    internal static string Collections_InvalidEntityStateLoad(object p0);
    internal static string Collections_CannotFillTryDifferentMergeOption(object p0, object p1);
    internal static string get_Collections_UnableToMergeCollections();
    internal static string EntityReference_ExpectedReferenceGotCollection(object p0, object p1, object p2);
    internal static string EntityReference_CannotAddMoreThanOneEntityToEntityReference(object p0, object p1);
    internal static string get_EntityReference_LessThanExpectedRelatedEntitiesFound();
    internal static string get_EntityReference_MoreThanExpectedRelatedEntitiesFound();
    internal static string get_EntityReference_CannotChangeReferentialConstraintProperty();
    internal static string get_EntityReference_CannotSetSpecialKeys();
    internal static string get_EntityReference_EntityKeyValueMismatch();
    internal static string get_RelatedEnd_RelatedEndNotFound();
    internal static string RelatedEnd_RelatedEndNotAttachedToContext(object p0);
    internal static string get_RelatedEnd_LoadCalledOnNonEmptyNoTrackedRelatedEnd();
    internal static string get_RelatedEnd_LoadCalledOnAlreadyLoadedNoTrackedRelatedEnd();
    internal static string RelatedEnd_InvalidContainedType_Collection(object p0, object p1);
    internal static string RelatedEnd_InvalidContainedType_Reference(object p0, object p1);
    internal static string RelatedEnd_CannotCreateRelationshipBetweenTrackedAndNoTrackedEntities(object p0);
    internal static string get_RelatedEnd_CannotCreateRelationshipEntitiesInDifferentContexts();
    internal static string RelatedEnd_MismatchedMergeOptionOnLoad(object p0);
    internal static string RelatedEnd_EntitySetIsNotValidForRelationship(object p0, object p1, object p2, object p3, object p4);
    internal static string get_RelatedEnd_OwnerIsNull();
    internal static string get_RelationshipManager_UnableToRetrieveReferentialConstraintProperties();
    internal static string get_RelationshipManager_InconsistentReferentialConstraintProperties();
    internal static string get_RelationshipManager_CircularRelationshipsWithReferentialConstraints();
    internal static string RelationshipManager_UnableToFindRelationshipTypeInMetadata(object p0);
    internal static string RelationshipManager_InvalidTargetRole(object p0, object p1);
    internal static string get_RelationshipManager_UnexpectedNull();
    internal static string get_RelationshipManager_InvalidRelationshipManagerOwner();
    internal static string RelationshipManager_OwnerIsNotSourceType(object p0, object p1, object p2, object p3);
    internal static string get_RelationshipManager_UnexpectedNullContext();
    internal static string RelationshipManager_ReferenceAlreadyInitialized(object p0);
    internal static string RelationshipManager_RelationshipManagerAttached(object p0);
    internal static string get_RelationshipManager_InitializeIsForDeserialization();
    internal static string RelationshipManager_CollectionAlreadyInitialized(object p0);
    internal static string RelationshipManager_CollectionRelationshipManagerAttached(object p0);
    internal static string get_RelationshipManager_CollectionInitializeIsForDeserialization();
    internal static string RelationshipManager_NavigationPropertyNotFound(object p0);
    internal static string get_RelationshipManager_CannotGetRelatEndForDetachedPocoEntity();
    internal static string get_ObjectView_CannotReplacetheEntityorRow();
    internal static string get_ObjectView_IndexBasedInsertIsNotSupported();
    internal static string get_ObjectView_WriteOperationNotAllowedOnReadOnlyBindingList();
    internal static string get_ObjectView_AddNewOperationNotAllowedOnAbstractBindingList();
    internal static string get_ObjectView_IncompatibleArgument();
    internal static string ObjectView_CannotResolveTheEntitySet(object p0);
    internal static string CodeGen_ConstructorNoParameterless(object p0);
    internal static string get_CodeGen_PropertyDeclaringTypeIsValueType();
    internal static string get_CodeGen_PropertyStrongNameIdentity();
    internal static string get_CodeGen_PropertyUnsupportedForm();
    internal static string get_CodeGen_PropertyUnsupportedType();
    internal static string get_CodeGen_PropertyIsIndexed();
    internal static string get_CodeGen_PropertyIsStatic();
    internal static string get_CodeGen_PropertyNoGetter();
    internal static string get_CodeGen_PropertyNoSetter();
    internal static string PocoEntityWrapper_UnableToSetFieldOrProperty(object p0, object p1);
    internal static string PocoEntityWrapper_UnexpectedTypeForNavigationProperty(object p0, object p1);
    internal static string PocoEntityWrapper_UnableToMaterializeArbitaryNavPropType(object p0, object p1);
    internal static string get_GeneralQueryError();
    internal static string get_CtxAlias();
    internal static string get_CtxAliasedNamespaceImport();
    internal static string get_CtxAnd();
    internal static string get_CtxAnyElement();
    internal static string get_CtxApplyClause();
    internal static string get_CtxBetween();
    internal static string get_CtxCase();
    internal static string get_CtxCaseElse();
    internal static string get_CtxCaseWhenThen();
    internal static string get_CtxCast();
    internal static string get_CtxCollatedOrderByClauseItem();
    internal static string get_CtxCollectionTypeDefinition();
    internal static string get_CtxCommandExpression();
    internal static string get_CtxCreateRef();
    internal static string get_CtxDeref();
    internal static string get_CtxDivide();
    internal static string get_CtxElement();
    internal static string get_CtxEquals();
    internal static string get_CtxEscapedIdentifier();
    internal static string get_CtxExcept();
    internal static string get_CtxExists();
    internal static string get_CtxExpressionList();
    internal static string get_CtxFlatten();
    internal static string get_CtxFromApplyClause();
    internal static string get_CtxFromClause();
    internal static string get_CtxFromClauseItem();
    internal static string get_CtxFromClauseList();
    internal static string get_CtxFromJoinClause();
    internal static string CtxFunction(object p0);
    internal static string get_CtxFunctionDefinition();
    internal static string get_CtxGreaterThan();
    internal static string get_CtxGreaterThanEqual();
    internal static string get_CtxGroupByClause();
    internal static string get_CtxGroupPartition();
    internal static string get_CtxHavingClause();
    internal static string get_CtxIdentifier();
    internal static string get_CtxIn();
    internal static string get_CtxIntersect();
    internal static string get_CtxIsNotNull();
    internal static string get_CtxIsNotOf();
    internal static string get_CtxIsNull();
    internal static string get_CtxIsOf();
    internal static string get_CtxJoinClause();
    internal static string get_CtxJoinOnClause();
    internal static string get_CtxKey();
    internal static string get_CtxLessThan();
    internal static string get_CtxLessThanEqual();
    internal static string get_CtxLike();
    internal static string get_CtxLimitSubClause();
    internal static string get_CtxLiteral();
    internal static string get_CtxMemberAccess();
    internal static string get_CtxMethod();
    internal static string get_CtxMinus();
    internal static string get_CtxModulus();
    internal static string get_CtxMultiply();
    internal static string get_CtxMultisetCtor();
    internal static string get_CtxNamespaceImport();
    internal static string get_CtxNamespaceImportList();
    internal static string get_CtxNavigate();
    internal static string get_CtxNot();
    internal static string get_CtxNotBetween();
    internal static string get_CtxNotEqual();
    internal static string get_CtxNotIn();
    internal static string get_CtxNotLike();
    internal static string get_CtxNullLiteral();
    internal static string get_CtxOfType();
    internal static string get_CtxOfTypeOnly();
    internal static string get_CtxOr();
    internal static string get_CtxOrderByClause();
    internal static string get_CtxOrderByClauseItem();
    internal static string get_CtxOverlaps();
    internal static string get_CtxParen();
    internal static string get_CtxPlus();
    internal static string get_CtxTypeNameWithTypeSpec();
    internal static string get_CtxQueryExpression();
    internal static string get_CtxQueryStatement();
    internal static string get_CtxRef();
    internal static string get_CtxRefTypeDefinition();
    internal static string get_CtxRelationship();
    internal static string get_CtxRelationshipList();
    internal static string get_CtxRowCtor();
    internal static string get_CtxRowTypeDefinition();
    internal static string get_CtxSelectRowClause();
    internal static string get_CtxSelectValueClause();
    internal static string get_CtxSet();
    internal static string get_CtxSimpleIdentifier();
    internal static string get_CtxSkipSubClause();
    internal static string get_CtxTopSubClause();
    internal static string get_CtxTreat();
    internal static string CtxTypeCtor(object p0);
    internal static string get_CtxTypeName();
    internal static string get_CtxUnaryMinus();
    internal static string get_CtxUnaryPlus();
    internal static string get_CtxUnion();
    internal static string get_CtxUnionAll();
    internal static string get_CtxWhereClause();
    internal static string CannotConvertNumericLiteral(object p0, object p1);
    internal static string get_GenericSyntaxError();
    internal static string get_InFromClause();
    internal static string get_InGroupClause();
    internal static string get_InRowCtor();
    internal static string get_InSelectProjectionList();
    internal static string InvalidAliasName(object p0);
    internal static string get_InvalidEmptyIdentifier();
    internal static string get_InvalidEmptyQuery();
    internal static string get_InvalidEmptyQueryTextArgument();
    internal static string InvalidEscapedIdentifier(object p0);
    internal static string InvalidEscapedIdentifierUnbalanced(object p0);
    internal static string get_InvalidOperatorSymbol();
    internal static string get_InvalidPunctuatorSymbol();
    internal static string InvalidSimpleIdentifier(object p0);
    internal static string InvalidSimpleIdentifierNonASCII(object p0);
    internal static string get_LocalizedCollection();
    internal static string get_LocalizedColumn();
    internal static string get_LocalizedComplex();
    internal static string get_LocalizedEntity();
    internal static string get_LocalizedEntityContainerExpression();
    internal static string get_LocalizedFunction();
    internal static string get_LocalizedInlineFunction();
    internal static string get_LocalizedKeyword();
    internal static string get_LocalizedLeft();
    internal static string get_LocalizedLine();
    internal static string get_LocalizedMetadataMemberExpression();
    internal static string get_LocalizedNamespace();
    internal static string get_LocalizedNear();
    internal static string get_LocalizedPrimitive();
    internal static string get_LocalizedReference();
    internal static string get_LocalizedRight();
    internal static string get_LocalizedRow();
    internal static string get_LocalizedTerm();
    internal static string get_LocalizedType();
    internal static string get_LocalizedEnumMember();
    internal static string get_LocalizedValueExpression();
    internal static string AliasNameAlreadyUsed(object p0);
    internal static string get_AmbiguousFunctionArguments();
    internal static string AmbiguousMetadataMemberName(object p0, object p1, object p2);
    internal static string ArgumentTypesAreIncompatible(object p0, object p1);
    internal static string get_BetweenLimitsCannotBeUntypedNulls();
    internal static string BetweenLimitsTypesAreNotCompatible(object p0, object p1);
    internal static string BetweenLimitsTypesAreNotOrderComparable(object p0, object p1);
    internal static string BetweenValueIsNotOrderComparable(object p0, object p1);
    internal static string get_CannotCreateEmptyMultiset();
    internal static string get_CannotCreateMultisetofNulls();
    internal static string CannotInstantiateAbstractType(object p0);
    internal static string CannotResolveNameToTypeOrFunction(object p0);
    internal static string get_ConcatBuiltinNotSupported();
    internal static string CouldNotResolveIdentifier(object p0);
    internal static string CreateRefTypeIdentifierMustBeASubOrSuperType(object p0, object p1);
    internal static string CreateRefTypeIdentifierMustSpecifyAnEntityType(object p0, object p1);
    internal static string DeRefArgIsNotOfRefType(object p0);
    internal static string DuplicatedInlineFunctionOverload(object p0);
    internal static string get_ElementOperatorIsNotSupported();
    internal static string MemberDoesNotBelongToEntityContainer(object p0, object p1);
    internal static string get_ExpressionCannotBeNull();
    internal static string OfTypeExpressionElementTypeMustBeEntityType(object p0, object p1);
    internal static string OfTypeExpressionElementTypeMustBeNominalType(object p0, object p1);
    internal static string get_ExpressionMustBeCollection();
    internal static string get_ExpressionMustBeNumericType();
    internal static string get_ExpressionTypeMustBeBoolean();
    internal static string get_ExpressionTypeMustBeEqualComparable();
    internal static string ExpressionTypeMustBeEntityType(object p0, object p1, object p2);
    internal static string ExpressionTypeMustBeNominalType(object p0, object p1, object p2);
    internal static string get_ExpressionTypeMustNotBeCollection();
    internal static string get_ExprIsNotValidEntitySetForCreateRef();
    internal static string FailedToResolveAggregateFunction(object p0);
    internal static string GeneralExceptionAsQueryInnerException(object p0);
    internal static string get_GroupingKeysMustBeEqualComparable();
    internal static string get_GroupPartitionOutOfContext();
    internal static string get_HavingRequiresGroupClause();
    internal static string get_ImcompatibleCreateRefKeyElementType();
    internal static string get_ImcompatibleCreateRefKeyType();
    internal static string get_InnerJoinMustHaveOnPredicate();
    internal static string InvalidAssociationTypeForUnion(object p0);
    internal static string get_InvalidCaseResultTypes();
    internal static string get_InvalidCaseWhenThenNullType();
    internal static string InvalidCast(object p0, object p1);
    internal static string get_InvalidCastExpressionType();
    internal static string get_InvalidCastType();
    internal static string InvalidComplexType(object p0, object p1, object p2, object p3);
    internal static string get_InvalidCreateRefKeyType();
    internal static string InvalidCtorArgumentType(object p0, object p1, object p2);
    internal static string InvalidCtorUseOnType(object p0);
    internal static string InvalidDateTimeOffsetLiteral(object p0);
    internal static string InvalidDay(object p0, object p1);
    internal static string InvalidDayInMonth(object p0, object p1, object p2);
    internal static string InvalidDeRefProperty(object p0, object p1, object p2);
    internal static string get_InvalidDistinctArgumentInCtor();
    internal static string get_InvalidDistinctArgumentInNonAggFunction();
    internal static string InvalidEntityRootTypeArgument(object p0, object p1);
    internal static string InvalidEntityTypeArgument(object p0, object p1, object p2, object p3);
    internal static string InvalidExpressionResolutionClass(object p0, object p1);
    internal static string get_InvalidFlattenArgument();
    internal static string InvalidGroupIdentifierReference(object p0);
    internal static string InvalidHour(object p0, object p1);
    internal static string InvalidImplicitRelationshipFromEnd(object p0);
    internal static string InvalidImplicitRelationshipToEnd(object p0);
    internal static string InvalidInExprArgs(object p0, object p1);
    internal static string get_InvalidJoinLeftCorrelation();
    internal static string InvalidKeyArgument(object p0);
    internal static string InvalidKeyTypeForCollation(object p0);
    internal static string InvalidLiteralFormat(object p0, object p1);
    internal static string get_InvalidMetadataMemberName();
    internal static string InvalidMinute(object p0, object p1);
    internal static string get_InvalidModeForWithRelationshipClause();
    internal static string InvalidMonth(object p0, object p1);
    internal static string get_InvalidNamespaceAlias();
    internal static string get_InvalidNullArithmetic();
    internal static string get_InvalidNullComparison();
    internal static string InvalidNullLiteralForNonNullableMember(object p0, object p1);
    internal static string InvalidParameterFormat(object p0);
    internal static string InvalidPlaceholderRootTypeArgument(object p0, object p1, object p2, object p3);
    internal static string InvalidPlaceholderTypeArgument(object p0, object p1, object p2, object p3, object p4, object p5);
    internal static string get_InvalidPredicateForCrossJoin();
    internal static string InvalidRelationshipMember(object p0, object p1);
    internal static string InvalidMetadataMemberClassResolution(object p0, object p1, object p2);
    internal static string InvalidRootComplexType(object p0, object p1);
    internal static string InvalidRootRowType(object p0, object p1);
    internal static string InvalidRowType(object p0, object p1, object p2, object p3);
    internal static string InvalidSecond(object p0, object p1);
    internal static string get_InvalidSelectValueAliasedExpression();
    internal static string get_InvalidSelectValueList();
    internal static string get_InvalidTypeForWithRelationshipClause();
    internal static string InvalidUnarySetOpArgument(object p0);
    internal static string InvalidUnsignedTypeForUnaryMinusOperation(object p0);
    internal static string InvalidYear(object p0, object p1);
    internal static string InvalidWithRelationshipTargetEndMultiplicity(object p0, object p1);
    internal static string InvalidQueryResultType(object p0);
    internal static string get_IsNullInvalidType();
    internal static string KeyMustBeCorrelated(object p0);
    internal static string get_LeftSetExpressionArgsMustBeCollection();
    internal static string get_LikeArgMustBeStringType();
    internal static string LiteralTypeNotFoundInMetadata(object p0);
    internal static string get_MalformedSingleQuotePayload();
    internal static string get_MalformedStringLiteralPayload();
    internal static string get_MethodInvocationNotSupported();
    internal static string MultipleDefinitionsOfParameter(object p0);
    internal static string MultipleDefinitionsOfVariable(object p0);
    internal static string get_MultisetElemsAreNotTypeCompatible();
    internal static string NamespaceAliasAlreadyUsed(object p0);
    internal static string NamespaceAlreadyImported(object p0);
    internal static string NestedAggregateCannotBeUsedInAggregate(object p0, object p1);
    internal static string NoAggrFunctionOverloadMatch(object p0, object p1, object p2);
    internal static string NoCanonicalAggrFunctionOverloadMatch(object p0, object p1, object p2);
    internal static string NoCanonicalFunctionOverloadMatch(object p0, object p1, object p2);
    internal static string NoFunctionOverloadMatch(object p0, object p1, object p2);
    internal static string NotAMemberOfCollection(object p0, object p1);
    internal static string NotAMemberOfType(object p0, object p1);
    internal static string NotASuperOrSubType(object p0, object p1);
    internal static string get_NullLiteralCannotBePromotedToCollectionOfNulls();
    internal static string NumberOfTypeCtorIsLessThenFormalSpec(object p0);
    internal static string NumberOfTypeCtorIsMoreThenFormalSpec(object p0);
    internal static string get_OrderByKeyIsNotOrderComparable();
    internal static string OfTypeOnlyTypeArgumentCannotBeAbstract(object p0);
    internal static string ParameterTypeNotSupported(object p0, object p1);
    internal static string ParameterWasNotDefined(object p0);
    internal static string PlaceholderExpressionMustBeCompatibleWithEdm64(object p0, object p1);
    internal static string PlaceholderExpressionMustBeConstant(object p0);
    internal static string PlaceholderExpressionMustBeGreaterThanOrEqualToZero(object p0);
    internal static string PlaceholderSetArgTypeIsNotEqualComparable(object p0, object p1, object p2);
    internal static string get_PlusLeftExpressionInvalidType();
    internal static string get_PlusRightExpressionInvalidType();
    internal static string PrecisionMustBeGreaterThanScale(object p0, object p1);
    internal static string RefArgIsNotOfEntityType(object p0);
    internal static string RefTypeIdentifierMustSpecifyAnEntityType(object p0, object p1);
    internal static string get_RelatedEndExprTypeMustBeReference();
    internal static string RelatedEndExprTypeMustBePromotoableToToEnd(object p0, object p1);
    internal static string get_RelationshipFromEndIsAmbiguos();
    internal static string RelationshipTypeExpected(object p0);
    internal static string get_RelationshipToEndIsAmbiguos();
    internal static string RelationshipTargetMustBeUnique(object p0);
    internal static string get_ResultingExpressionTypeCannotBeNull();
    internal static string get_RightSetExpressionArgsMustBeCollection();
    internal static string get_RowCtorElementCannotBeNull();
    internal static string get_SelectDistinctMustBeEqualComparable();
    internal static string SourceTypeMustBePromotoableToFromEndRelationType(object p0, object p1);
    internal static string get_TopAndLimitCannotCoexist();
    internal static string get_TopAndSkipCannotCoexist();
    internal static string TypeDoesNotSupportSpec(object p0);
    internal static string TypeDoesNotSupportFacet(object p0, object p1);
    internal static string TypeArgumentCountMismatch(object p0, object p1);
    internal static string get_TypeArgumentMustBeLiteral();
    internal static string TypeArgumentBelowMin(object p0);
    internal static string TypeArgumentExceedsMax(object p0);
    internal static string get_TypeArgumentIsNotValid();
    internal static string TypeKindMismatch(object p0, object p1, object p2, object p3);
    internal static string get_TypeMustBeInheritableType();
    internal static string TypeMustBeEntityType(object p0, object p1, object p2);
    internal static string TypeMustBeNominalType(object p0, object p1, object p2);
    internal static string TypeNameNotFound(object p0);
    internal static string get_GroupVarNotFoundInScope();
    internal static string get_InvalidArgumentTypeForAggregateFunction();
    internal static string get_InvalidSavePoint();
    internal static string get_InvalidScopeIndex();
    internal static string LiteralTypeNotSupported(object p0);
    internal static string get_ParserFatalError();
    internal static string get_ParserInputError();
    internal static string get_StackOverflowInParser();
    internal static string get_UnknownAstCommandExpression();
    internal static string get_UnknownAstExpressionType();
    internal static string get_UnknownBuiltInAstExpressionType();
    internal static string UnknownExpressionResolutionClass(object p0);
    internal static string get_SqlGen_ApplyNotSupportedOnSql8();
    internal static string SqlGen_InvalidDatePartArgumentExpression(object p0, object p1);
    internal static string SqlGen_InvalidDatePartArgumentValue(object p0, object p1, object p2);
    internal static string get_SqlGen_NiladicFunctionsCannotHaveParameters();
    internal static string get_SqlGen_ParameterForLimitNotSupportedOnSql8();
    internal static string get_SqlGen_ParameterForSkipNotSupportedOnSql8();
    internal static string SqlGen_PrimitiveTypeNotSupportedPriorSql10(object p0);
    internal static string SqlGen_CanonicalFunctionNotSupportedPriorSql10(object p0);
    internal static string SqlGen_TypedPositiveInfinityNotSupported(object p0, object p1);
    internal static string SqlGen_TypedNegativeInfinityNotSupported(object p0, object p1);
    internal static string SqlGen_TypedNaNNotSupported(object p0);
    internal static string Cqt_General_PolymorphicTypeRequired(object p0);
    internal static string Cqt_General_PolymorphicArgRequired(object p0);
    internal static string Cqt_General_UnsupportedExpression(object p0);
    internal static string get_Cqt_General_MetadataNotReadOnly();
    internal static string get_Cqt_General_NoProviderBooleanType();
    internal static string get_Cqt_General_NoProviderIntegerType();
    internal static string get_Cqt_General_NoProviderStringType();
    internal static string get_Cqt_Metadata_EdmMemberIncorrectSpace();
    internal static string get_Cqt_Metadata_EntitySetEntityContainerNull();
    internal static string get_Cqt_Metadata_EntitySetIncorrectSpace();
    internal static string get_Cqt_Metadata_EntityTypeNullKeyMembersInvalid();
    internal static string get_Cqt_Metadata_EntityTypeEmptyKeyMembersInvalid();
    internal static string get_Cqt_Metadata_FunctionReturnParameterNull();
    internal static string get_Cqt_Metadata_FunctionIncorrectSpace();
    internal static string get_Cqt_Metadata_FunctionParameterIncorrectSpace();
    internal static string get_Cqt_Metadata_TypeUsageIncorrectSpace();
    internal static string get_Cqt_Exceptions_InvalidCommandTree();
    internal static string get_Cqt_Util_CheckListEmptyInvalid();
    internal static string Cqt_Util_CheckListDuplicateName(object p0, object p1, object p2);
    internal static string Cqt_ExpressionLink_TypeMismatch(object p0, object p1);
    internal static string get_Cqt_ExpressionList_IncorrectElementCount();
    internal static string Cqt_Copier_EntityContainerNotFound(object p0);
    internal static string Cqt_Copier_EntitySetNotFound(object p0, object p1);
    internal static string Cqt_Copier_FunctionNotFound(object p0);
    internal static string Cqt_Copier_PropertyNotFound(object p0, object p1);
    internal static string Cqt_Copier_NavPropertyNotFound(object p0, object p1);
    internal static string Cqt_Copier_EndNotFound(object p0, object p1);
    internal static string Cqt_Copier_TypeNotFound(object p0);
    internal static string get_Cqt_CommandTree_InvalidDataSpace();
    internal static string Cqt_CommandTree_InvalidParameterName(object p0);
    internal static string Cqt_Validator_InvalidIncompatibleParameterReferences(object p0);
    internal static string Cqt_Validator_InvalidOtherWorkspaceMetadata(object p0);
    internal static string Cqt_Validator_InvalidIncorrectDataSpaceMetadata(object p0, object p1);
    internal static string get_Cqt_Factory_NewCollectionInvalidCommonType();
    internal static string Cqt_Factory_NoSuchProperty(object p0, object p1);
    internal static string get_Cqt_Factory_NoSuchRelationEnd();
    internal static string get_Cqt_Factory_IncompatibleRelationEnds();
    internal static string Cqt_Factory_MethodResultTypeNotSupported(object p0);
    internal static string get_Cqt_Aggregate_InvalidFunction();
    internal static string get_Cqt_Binding_CollectionRequired();
    internal static string get_Cqt_Binding_VariableNameNotValid();
    internal static string get_Cqt_GroupBinding_CollectionRequired();
    internal static string get_Cqt_GroupBinding_GroupVariableNameNotValid();
    internal static string Cqt_Binary_CollectionsRequired(object p0);
    internal static string Cqt_Unary_CollectionRequired(object p0);
    internal static string get_Cqt_And_BooleanArgumentsRequired();
    internal static string get_Cqt_Apply_DuplicateVariableNames();
    internal static string get_Cqt_Arithmetic_NumericCommonType();
    internal static string Cqt_Arithmetic_InvalidUnsignedTypeForUnaryMinus(object p0);
    internal static string get_Cqt_Case_WhensMustEqualThens();
    internal static string get_Cqt_Case_InvalidResultType();
    internal static string Cqt_Cast_InvalidCast(object p0, object p1);
    internal static string get_Cqt_Comparison_ComparableRequired();
    internal static string get_Cqt_Constant_InvalidType();
    internal static string Cqt_Constant_InvalidValueForType(object p0);
    internal static string Cqt_Constant_InvalidConstantType(object p0);
    internal static string Cqt_Constant_ClrEnumTypeDoesNotMatchEdmEnumType(object p0, object p1, object p2);
    internal static string get_Cqt_Distinct_InvalidCollection();
    internal static string get_Cqt_DeRef_RefRequired();
    internal static string get_Cqt_Element_InvalidArgumentForUnwrapSingleProperty();
    internal static string get_Cqt_Function_VoidResultInvalid();
    internal static string get_Cqt_Function_NonComposableInExpression();
    internal static string get_Cqt_Function_CommandTextInExpression();
    internal static string Cqt_Function_CanonicalFunction_NotFound(object p0);
    internal static string Cqt_Function_CanonicalFunction_AmbiguousMatch(object p0);
    internal static string get_Cqt_GetEntityRef_EntityRequired();
    internal static string get_Cqt_GetRefKey_RefRequired();
    internal static string get_Cqt_GroupBy_AtLeastOneKeyOrAggregate();
    internal static string Cqt_GroupBy_KeyNotEqualityComparable(object p0);
    internal static string Cqt_GroupBy_AggregateColumnExistsAsGroupColumn(object p0);
    internal static string get_Cqt_GroupBy_MoreThanOneGroupAggregate();
    internal static string get_Cqt_CrossJoin_AtLeastTwoInputs();
    internal static string Cqt_CrossJoin_DuplicateVariableNames(object p0, object p1, object p2);
    internal static string get_Cqt_IsNull_CollectionNotAllowed();
    internal static string get_Cqt_IsNull_InvalidType();
    internal static string Cqt_InvalidTypeForSetOperation(object p0, object p1);
    internal static string get_Cqt_Join_DuplicateVariableNames();
    internal static string get_Cqt_Limit_ConstantOrParameterRefRequired();
    internal static string get_Cqt_Limit_IntegerRequired();
    internal static string get_Cqt_Limit_NonNegativeLimitRequired();
    internal static string get_Cqt_NewInstance_CollectionTypeRequired();
    internal static string get_Cqt_NewInstance_StructuralTypeRequired();
    internal static string Cqt_NewInstance_CannotInstantiateMemberlessType(object p0);
    internal static string Cqt_NewInstance_CannotInstantiateAbstractType(object p0);
    internal static string get_Cqt_NewInstance_IncompatibleRelatedEntity_SourceTypeNotValid();
    internal static string get_Cqt_Not_BooleanArgumentRequired();
    internal static string get_Cqt_Or_BooleanArgumentsRequired();
    internal static string get_Cqt_Property_InstanceRequiredForInstance();
    internal static string get_Cqt_Ref_PolymorphicArgRequired();
    internal static string get_Cqt_RelatedEntityRef_TargetEndFromDifferentRelationship();
    internal static string get_Cqt_RelatedEntityRef_TargetEndMustBeAtMostOne();
    internal static string get_Cqt_RelatedEntityRef_TargetEndSameAsSourceEnd();
    internal static string get_Cqt_RelatedEntityRef_TargetEntityNotRef();
    internal static string get_Cqt_RelatedEntityRef_TargetEntityNotCompatible();
    internal static string get_Cqt_RelNav_NoCompositions();
    internal static string Cqt_RelNav_WrongSourceType(object p0);
    internal static string get_Cqt_Skip_ConstantOrParameterRefRequired();
    internal static string get_Cqt_Skip_IntegerRequired();
    internal static string get_Cqt_Skip_NonNegativeCountRequired();
    internal static string get_Cqt_Sort_EmptyCollationInvalid();
    internal static string get_Cqt_Sort_NonStringCollationInvalid();
    internal static string get_Cqt_Sort_OrderComparable();
    internal static string Cqt_UDF_FunctionDefinitionGenerationFailed(object p0);
    internal static string Cqt_UDF_FunctionDefinitionWithCircularReference(object p0);
    internal static string Cqt_UDF_FunctionDefinitionResultTypeMismatch(object p0, object p1, object p2);
    internal static string Cqt_UDF_FunctionHasNoDefinition(object p0);
    internal static string Cqt_Validator_VarRefInvalid(object p0);
    internal static string Cqt_Validator_VarRefTypeMismatch(object p0);
    internal static string Iqt_General_UnsupportedOp(object p0);
    internal static string get_Iqt_CTGen_UnexpectedAggregate();
    internal static string get_Iqt_CTGen_UnexpectedVarDefList();
    internal static string get_Iqt_CTGen_UnexpectedVarDef();
    internal static string get_ADP_MustUseSequentialAccess();
    internal static string get_ADP_ProviderDoesNotSupportCommandTrees();
    internal static string get_ADP_ClosedDataReaderError();
    internal static string ADP_DataReaderClosed(object p0);
    internal static string get_ADP_ImplicitlyClosedDataReaderError();
    internal static string get_ADP_NoData();
    internal static string get_ADP_GetSchemaTableIsNotSupported();
    internal static string get_ADP_InvalidDataReaderFieldCountForScalarType();
    internal static string ADP_InvalidDataReaderMissingColumnForType(object p0, object p1);
    internal static string ADP_InvalidDataReaderMissingDiscriminatorColumn(object p0, object p1);
    internal static string get_ADP_InvalidDataReaderUnableToDetermineType();
    internal static string ADP_InvalidDataReaderUnableToMaterializeNonScalarType(object p0, object p1);
    internal static string ADP_KeysRequiredForJoinOverNest(object p0);
    internal static string get_ADP_KeysRequiredForNesting();
    internal static string ADP_NestingNotSupported(object p0, object p1);
    internal static string ADP_NoQueryMappingView(object p0, object p1);
    internal static string ADP_InternalProviderError(object p0);
    internal static string ADP_InvalidEnumerationValue(object p0, object p1);
    internal static string ADP_InvalidBufferSizeOrIndex(object p0, object p1);
    internal static string ADP_InvalidDataLength(object p0);
    internal static string ADP_InvalidDataType(object p0);
    internal static string ADP_InvalidDestinationBufferIndex(object p0, object p1);
    internal static string ADP_InvalidSourceBufferIndex(object p0, object p1);
    internal static string ADP_NonSequentialChunkAccess(object p0, object p1, object p2);
    internal static string ADP_NonSequentialColumnAccess(object p0, object p1);
    internal static string ADP_UnknownDataTypeCode(object p0, object p1);
    internal static string get_DataCategory_Data();
    internal static string get_DbParameter_Direction();
    internal static string get_DbParameter_Size();
    internal static string get_DataCategory_Update();
    internal static string get_DbParameter_SourceColumn();
    internal static string get_DbParameter_SourceVersion();
    internal static string ADP_CollectionParameterElementIsNull(object p0);
    internal static string ADP_CollectionParameterElementIsNullOrEmpty(object p0);
    internal static string EntityParameterCollectionInvalidParameterName(object p0);
    internal static string EntityParameterCollectionInvalidIndex(object p0, object p1);
    internal static string InvalidEntityParameterType(object p0);
    internal static string get_EntityParameterContainedByAnotherCollection();
    internal static string get_EntityParameterNull();
    internal static string get_EntityParameterCollectionRemoveInvalidObject();
    internal static string ADP_ConnectionStringSyntax(object p0);
    internal static string ADP_InvalidConnectionOptionValue(object p0);
    internal static string get_ADP_InvalidDataDirectory();
    internal static string get_ADP_InvalidMultipartNameDelimiterUsage();
    internal static string ADP_InvalidSizeValue(object p0);
    internal static string ADP_KeywordNotSupported(object p0);
    internal static string ConstantFacetSpecifiedInSchema(object p0, object p1);
    internal static string DuplicateAnnotation(object p0, object p1);
    internal static string EmptyFile(object p0);
    internal static string get_EmptySchemaTextReader();
    internal static string EmptyName(object p0);
    internal static string InvalidName(object p0, object p1);
    internal static string get_MissingName();
    internal static string UnexpectedXmlAttribute(object p0);
    internal static string UnexpectedXmlElement(object p0);
    internal static string TextNotAllowed(object p0);
    internal static string UnexpectedXmlNodeType(object p0);
    internal static string MalformedXml(object p0, object p1);
    internal static string ValueNotUnderstood(object p0, object p1);
    internal static string EntityContainerAlreadyExists(object p0);
    internal static string TypeNameAlreadyDefinedDuplicate(object p0);
    internal static string PropertyNameAlreadyDefinedDuplicate(object p0);
    internal static string DuplicateMemberNameInExtendedEntityContainer(object p0, object p1, object p2);
    internal static string DuplicateEntityContainerMemberName(object p0);
    internal static string PropertyTypeAlreadyDefined(object p0);
    internal static string InvalidSize(object p0, object p1, object p2, object p3);
    internal static string InvalidSystemReferenceId(object p0, object p1, object p2, object p3);
    internal static string BadNamespaceOrAlias(object p0);
    internal static string get_MissingNamespaceAttribute();
    internal static string InvalidBaseTypeForStructuredType(object p0, object p1);
    internal static string InvalidPropertyType(object p0);
    internal static string InvalidBaseTypeForItemType(object p0, object p1);
    internal static string InvalidBaseTypeForNestedType(object p0, object p1);
    internal static string get_DefaultNotAllowed();
    internal static string FacetNotAllowed(object p0, object p1);
    internal static string RequiredFacetMissing(object p0, object p1);
    internal static string InvalidDefaultBinaryWithNoMaxLength(object p0);
    internal static string InvalidDefaultIntegral(object p0, object p1, object p2);
    internal static string InvalidDefaultDateTime(object p0, object p1);
    internal static string InvalidDefaultTime(object p0, object p1);
    internal static string InvalidDefaultDateTimeOffset(object p0, object p1);
    internal static string InvalidDefaultDecimal(object p0, object p1, object p2);
    internal static string InvalidDefaultFloatingPoint(object p0, object p1, object p2);
    internal static string InvalidDefaultGuid(object p0);
    internal static string InvalidDefaultBoolean(object p0);
    internal static string DuplicateMemberName(object p0, object p1, object p2);
    internal static string get_GeneratorErrorSeverityError();
    internal static string get_GeneratorErrorSeverityWarning();
    internal static string get_GeneratorErrorSeverityUnknown();
    internal static string get_SourceUriUnknown();
    internal static string BadPrecisionAndScale(object p0, object p1);
    internal static string InvalidNamespaceInUsing(object p0);
    internal static string BadNavigationPropertyRelationshipNotRelationship(object p0);
    internal static string get_BadNavigationPropertyRolesCannotBeTheSame();
    internal static string BadNavigationPropertyUndefinedRole(object p0, object p1);
    internal static string BadNavigationPropertyBadFromRoleType(object p0, object p1, object p2, object p3, object p4);
    internal static string InvalidMemberNameMatchesTypeName(object p0, object p1);
    internal static string InvalidKeyKeyDefinedInBaseClass(object p0, object p1);
    internal static string InvalidKeyNullablePart(object p0, object p1);
    internal static string InvalidKeyNoProperty(object p0, object p1);
    internal static string KeyMissingOnEntityType(object p0);
    internal static string get_InvalidDocumentationBothTextAndStructure();
    internal static string ArgumentOutOfRangeExpectedPostiveNumber(object p0);
    internal static string ArgumentOutOfRange(object p0);
    internal static string UnacceptableUri(object p0);
    internal static string UnexpectedTypeInCollection(object p0, object p1);
    internal static string get_AllElementsMustBeInSchema();
    internal static string AliasNameIsAlreadyDefined(object p0);
    internal static string NeedNotUseSystemNamespaceInUsing(object p0);
    internal static string CannotUseSystemNamespaceAsAlias(object p0);
    internal static string EntitySetTypeHasNoKeys(object p0, object p1);
    internal static string TableAndSchemaAreMutuallyExclusiveWithDefiningQuery(object p0);
    internal static string UnexpectedRootElement(object p0, object p1, object p2);
    internal static string UnexpectedRootElementNoNamespace(object p0, object p1, object p2);
    internal static string ParameterNameAlreadyDefinedDuplicate(object p0);
    internal static string FunctionWithNonPrimitiveTypeNotSupported(object p0, object p1);
    internal static string FunctionWithNonEdmPrimitiveTypeNotSupported(object p0, object p1);
    internal static string FunctionImportWithUnsupportedReturnTypeV1(object p0);
    internal static string FunctionImportWithUnsupportedReturnTypeV1_1(object p0);
    internal static string FunctionImportWithUnsupportedReturnTypeV2(object p0);
    internal static string FunctionImportUnknownEntitySet(object p0, object p1);
    internal static string FunctionImportReturnEntitiesButDoesNotSpecifyEntitySet(object p0);
    internal static string FunctionImportEntityTypeDoesNotMatchEntitySet(object p0, object p1, object p2);
    internal static string FunctionImportSpecifiesEntitySetButNotEntityType(object p0);
    internal static string FunctionImportEntitySetAndEntitySetPathDeclared(object p0);
    internal static string FunctionImportComposableAndSideEffectingNotAllowed(object p0);
    internal static string FunctionImportCollectionAndRefParametersNotAllowed(object p0);
    internal static string FunctionImportNonNullableParametersNotAllowed(object p0);
    internal static string get_TVFReturnTypeRowHasNonScalarProperty();
    internal static string DuplicateEntitySetTable(object p0, object p1, object p2);
    internal static string ConcurrencyRedefinedOnSubTypeOfEntitySetType(object p0, object p1, object p2);
    internal static string SimilarRelationshipEnd(object p0, object p1, object p2, object p3, object p4);
    internal static string InvalidRelationshipEndMultiplicity(object p0, object p1);
    internal static string EndNameAlreadyDefinedDuplicate(object p0);
    internal static string InvalidRelationshipEndType(object p0, object p1);
    internal static string BadParameterDirection(object p0, object p1, object p2, object p3);
    internal static string BadParameterDirectionForComposableFunctions(object p0, object p1, object p2, object p3);
    internal static string get_InvalidOperationMultipleEndsInAssociation();
    internal static string InvalidAction(object p0, object p1);
    internal static string DuplicationOperation(object p0);
    internal static string NotInNamespaceAlias(object p0, object p1, object p2);
    internal static string NotNamespaceQualified(object p0);
    internal static string NotInNamespaceNoAlias(object p0, object p1);
    internal static string InvalidValueForParameterTypeSemanticsAttribute(object p0);
    internal static string DuplicatePropertyNameSpecifiedInEntityKey(object p0, object p1);
    internal static string InvalidEntitySetType(object p0);
    internal static string InvalidRelationshipSetType(object p0);
    internal static string InvalidEntityContainerNameInExtends(object p0);
    internal static string InvalidNamespaceOrAliasSpecified(object p0);
    internal static string PrecisionOutOfRange(object p0, object p1, object p2, object p3);
    internal static string ScaleOutOfRange(object p0, object p1, object p2, object p3);
    internal static string InvalidEntitySetNameReference(object p0, object p1);
    internal static string InvalidEntityEndName(object p0, object p1);
    internal static string DuplicateEndName(object p0);
    internal static string AmbiguousEntityContainerEnd(object p0, object p1);
    internal static string MissingEntityContainerEnd(object p0, object p1);
    internal static string InvalidEndEntitySetTypeMismatch(object p0);
    internal static string InferRelationshipEndFailedNoEntitySetMatch(object p0, object p1, object p2, object p3, object p4);
    internal static string InferRelationshipEndAmbiguous(object p0, object p1, object p2, object p3, object p4);
    internal static string InferRelationshipEndGivesAlreadyDefinedEnd(object p0, object p1);
    internal static string TooManyAssociationEnds(object p0);
    internal static string InvalidEndRoleInRelationshipConstraint(object p0, object p1);
    internal static string InvalidFromPropertyInRelationshipConstraint(object p0, object p1, object p2);
    internal static string InvalidToPropertyInRelationshipConstraint(object p0, object p1, object p2);
    internal static string InvalidPropertyInRelationshipConstraint(object p0, object p1);
    internal static string TypeMismatchRelationshipConstaint(object p0, object p1, object p2, object p3, object p4);
    internal static string InvalidMultiplicityFromRoleUpperBoundMustBeOne(object p0, object p1);
    internal static string InvalidMultiplicityFromRoleToPropertyNonNullableV1(object p0, object p1);
    internal static string InvalidMultiplicityFromRoleToPropertyNonNullableV2(object p0, object p1);
    internal static string InvalidMultiplicityFromRoleToPropertyNullableV1(object p0, object p1);
    internal static string InvalidMultiplicityToRoleLowerBoundMustBeZero(object p0, object p1);
    internal static string InvalidMultiplicityToRoleUpperBoundMustBeOne(object p0, object p1);
    internal static string InvalidMultiplicityToRoleUpperBoundMustBeMany(object p0, object p1);
    internal static string get_MismatchNumberOfPropertiesinRelationshipConstraint();
    internal static string MissingConstraintOnRelationshipType(object p0);
    internal static string SameRoleReferredInReferentialConstraint(object p0);
    internal static string InvalidPrimitiveTypeKind(object p0);
    internal static string EntityKeyMustBeScalar(object p0, object p1);
    internal static string EntityKeyTypeCurrentlyNotSupportedInSSDL(object p0, object p1, object p2, object p3, object p4);
    internal static string EntityKeyTypeCurrentlyNotSupported(object p0, object p1, object p2);
    internal static string MissingFacetDescription(object p0, object p1, object p2);
    internal static string EndWithManyMultiplicityCannotHaveOperationsSpecified(object p0, object p1);
    internal static string EndWithoutMultiplicity(object p0, object p1);
    internal static string EntityContainerCannotExtendItself(object p0);
    internal static string get_ComposableFunctionOrFunctionImportMustDeclareReturnType();
    internal static string get_NonComposableFunctionMustNotDeclareReturnType();
    internal static string get_CommandTextFunctionsNotComposable();
    internal static string get_CommandTextFunctionsCannotDeclareStoreFunctionName();
    internal static string get_NonComposableFunctionHasDisallowedAttribute();
    internal static string get_EmptyDefiningQuery();
    internal static string get_EmptyCommandText();
    internal static string AmbiguousFunctionOverload(object p0, object p1);
    internal static string AmbiguousFunctionAndType(object p0, object p1);
    internal static string CycleInTypeHierarchy(object p0);
    internal static string get_IncorrectProviderManifest();
    internal static string ComplexTypeAsReturnTypeAndDefinedEntitySet(object p0, object p1);
    internal static string ComplexTypeAsReturnTypeAndNestedComplexProperty(object p0, object p1, object p2);
    internal static string FacetsOnNonScalarType(object p0);
    internal static string get_FacetDeclarationRequiresTypeAttribute();
    internal static string get_TypeMustBeDeclared();
    internal static string get_RowTypeWithoutProperty();
    internal static string get_TypeDeclaredAsAttributeAndElement();
    internal static string ReferenceToNonEntityType(object p0);
    internal static string NoCodeGenNamespaceInStructuralAnnotation(object p0);
    internal static string get_CannotLoadDifferentVersionOfSchemaInTheSameItemCollection();
    internal static string get_InvalidEnumUnderlyingType();
    internal static string get_DuplicateEnumMember();
    internal static string get_CalculatedEnumValueOutOfRange();
    internal static string EnumMemberValueOutOfItsUnderylingTypeRange(object p0, object p1, object p2);
    internal static string get_SpatialWithUseStrongSpatialTypesFalse();
    internal static string get_ObjectQuery_QueryBuilder_InvalidProjectionList();
    internal static string get_ObjectQuery_QueryBuilder_InvalidSortKeyList();
    internal static string get_ObjectQuery_QueryBuilder_InvalidGroupKeyList();
    internal static string get_ObjectQuery_QueryBuilder_InvalidSkipCount();
    internal static string get_ObjectQuery_QueryBuilder_InvalidTopCount();
    internal static string get_ObjectQuery_QueryBuilder_InvalidFilterPredicate();
    internal static string ObjectQuery_QueryBuilder_InvalidResultType(object p0);
    internal static string get_ObjectQuery_QueryBuilder_InvalidQueryArgument();
    internal static string get_ObjectQuery_QueryBuilder_NotSupportedLinqSource();
    internal static string get_ObjectQuery_InvalidEmptyQuery();
    internal static string get_ObjectQuery_InvalidConnection();
    internal static string ObjectQuery_InvalidQueryName(object p0);
    internal static string get_ObjectQuery_UnableToMapResultType();
    internal static string ObjectQuery_UnableToMaterializeArray(object p0, object p1);
    internal static string ObjectQuery_UnableToMaterializeArbitaryProjectionType(object p0);
    internal static string ObjectParameter_InvalidParameterName(object p0);
    internal static string ObjectParameter_InvalidParameterType(object p0);
    internal static string ObjectParameterCollection_ParameterNameNotFound(object p0);
    internal static string ObjectParameterCollection_ParameterAlreadyExists(object p0);
    internal static string ObjectParameterCollection_DuplicateParameterName(object p0);
    internal static string get_ObjectParameterCollection_ParametersLocked();
    internal static string ProviderReturnedNullForGetDbInformation(object p0);
    internal static string get_ProviderReturnedNullForCreateCommandDefinition();
    internal static string get_ProviderDidNotReturnAProviderManifest();
    internal static string get_ProviderDidNotReturnAProviderManifestToken();
    internal static string get_ProviderDidNotReturnSpatialServices();
    internal static string ProviderDoesNotSupportType(object p0);
    internal static string NoStoreTypeForEdmType(object p0, object p1);
    internal static string get_ProviderRequiresStoreCommandTree();
    internal static string get_ProviderShouldOverrideEscapeLikeArgument();
    internal static string get_ProviderEscapeLikeArgumentReturnedNull();
    internal static string get_ProviderDidNotCreateACommandDefinition();
    internal static string get_ProviderDoesNotSupportCreateDatabaseScript();
    internal static string get_ProviderDoesNotSupportCreateDatabase();
    internal static string get_ProviderDoesNotSupportDatabaseExists();
    internal static string get_ProviderDoesNotSupportDeleteDatabase();
    internal static string get_Spatial_GeographyValueNotCompatibleWithSpatialServices();
    internal static string get_Spatial_GeometryValueNotCompatibleWithSpatialServices();
    internal static string get_Spatial_ProviderValueNotCompatibleWithSpatialServices();
    internal static string get_Spatial_WellKnownGeographyValueNotValid();
    internal static string get_Spatial_WellKnownGeometryValueNotValid();
    internal static string get_Spatial_WellKnownValueSerializationPropertyNotDirectlySettable();
    internal static string get_SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoSrid();
    internal static string get_SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoWkbOrWkt();
    internal static string get_SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoSrid();
    internal static string get_SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoWkbOrWkt();
    internal static string SqlSpatialServices_ProviderValueNotSqlType(object p0);
    internal static string get_EntityConnectionString_Name();
    internal static string get_EntityConnectionString_Provider();
    internal static string get_EntityConnectionString_Metadata();
    internal static string get_EntityConnectionString_ProviderConnectionString();
    internal static string get_EntityDataCategory_Context();
    internal static string get_EntityDataCategory_NamedConnectionString();
    internal static string get_EntityDataCategory_Source();
    internal static string get_ObjectQuery_Span_IncludeRequiresEntityOrEntityCollection();
    internal static string ObjectQuery_Span_NoNavProp(object p0, object p1);
    internal static string get_ObjectQuery_Span_SpanPathSyntaxError();
    internal static string get_ObjectQuery_Span_WhiteSpacePath();
    internal static string get_EntityProxyTypeInfo_ProxyHasWrongWrapper();
    internal static string EntityProxyTypeInfo_CannotSetEntityCollectionProperty(object p0, object p1);
    internal static string EntityProxyTypeInfo_ProxyMetadataIsUnavailable(object p0);
    internal static string EntityProxyTypeInfo_DuplicateOSpaceType(object p0);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.EntityClient.DbConnectionOptions : object {
    internal static string DataDirectory;
    internal NameValuePair KeyChain;
    internal string UsersConnectionString { get; }
    internal bool IsEmpty { get; }
    internal Hashtable Parsetable { get; }
    internal string Item { get; }
    internal DbConnectionOptions(string connectionString, Hashtable synonyms);
    internal string get_UsersConnectionString();
    internal bool get_IsEmpty();
    internal Hashtable get_Parsetable();
    internal string get_Item(string keyword);
    internal static string ExpandDataDirectory(string keyword, string value);
}
internal class System.Data.EntityClient.EntityAdapter : object {
    private DbConnection System.Data.IEntityAdapter.Connection { get; private set; }
    public EntityConnection Connection { get; public set; }
    public bool AcceptChangesDuringUpdate { get; public set; }
    private Nullable`1<int> System.Data.IEntityAdapter.CommandTimeout { get; private set; }
    private sealed virtual override DbConnection System.Data.IEntityAdapter.get_Connection();
    private sealed virtual override void System.Data.IEntityAdapter.set_Connection(DbConnection value);
    public EntityConnection get_Connection();
    public void set_Connection(EntityConnection value);
    public sealed virtual bool get_AcceptChangesDuringUpdate();
    public sealed virtual void set_AcceptChangesDuringUpdate(bool value);
    private sealed virtual override Nullable`1<int> System.Data.IEntityAdapter.get_CommandTimeout();
    private sealed virtual override void System.Data.IEntityAdapter.set_CommandTimeout(Nullable`1<int> value);
    public sealed virtual int Update(IEntityStateManager entityCache);
}
public class System.Data.EntityClient.EntityCommand : DbCommand {
    public EntityConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    public string CommandText { get; public set; }
    public DbCommandTree CommandTree { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public EntityParameterCollection Parameters { get; }
    protected DbParameterCollection DbParameterCollection { get; }
    public EntityTransaction Transaction { get; public set; }
    protected DbTransaction DbTransaction { get; protected set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public bool DesignTimeVisible { get; public set; }
    public bool EnablePlanCaching { get; public set; }
    public EntityCommand(string statement);
    public EntityCommand(string statement, EntityConnection connection);
    public EntityCommand(string statement, EntityConnection connection, EntityTransaction transaction);
    internal EntityCommand(EntityCommandDefinition commandDefinition);
    internal EntityCommand(EntityConnection connection, EntityCommandDefinition entityCommandDefinition);
    public EntityConnection get_Connection();
    public void set_Connection(EntityConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public DbCommandTree get_CommandTree();
    public void set_CommandTree(DbCommandTree value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public EntityParameterCollection get_Parameters();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public EntityTransaction get_Transaction();
    public void set_Transaction(EntityTransaction value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public bool get_EnablePlanCaching();
    public void set_EnablePlanCaching(bool value);
    public virtual void Cancel();
    public EntityParameter CreateParameter();
    protected virtual DbParameter CreateDbParameter();
    public EntityDataReader ExecuteReader();
    public EntityDataReader ExecuteReader(CommandBehavior behavior);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public virtual int ExecuteNonQuery();
    public virtual object ExecuteScalar();
    internal void Unprepare();
    public virtual void Prepare();
    internal EntityCommandDefinition GetCommandDefinition();
    [BrowsableAttribute("False")]
public string ToTraceString();
    internal Dictionary`2<string, TypeUsage> GetParameterTypeUsage();
    internal void NotifyDataReaderClosing();
    internal void SetStoreProviderCommand(DbCommand storeProviderCommand);
    internal void add_OnDataReaderClosing(EventHandler value);
    internal void remove_OnDataReaderClosing(EventHandler value);
}
internal class System.Data.EntityClient.EntityCommandDefinition : DbCommandDefinition {
    internal IEnumerable`1<string> MappedCommands { get; }
    internal IEnumerable`1<EntityParameter> Parameters { get; }
    internal Set`1<EntitySet> EntitySets { get; }
    internal EntityCommandDefinition(DbProviderFactory storeProviderFactory, DbCommandTree commandTree);
    public virtual DbCommand CreateCommand();
    internal IEnumerable`1<string> get_MappedCommands();
    internal ColumnMap CreateColumnMap(DbDataReader storeDataReader);
    internal ColumnMap CreateColumnMap(DbDataReader storeDataReader, int resultSetIndex);
    internal IEnumerable`1<EntityParameter> get_Parameters();
    internal Set`1<EntitySet> get_EntitySets();
    internal static void PopulateParameterFromTypeUsage(EntityParameter parameter, TypeUsage type, bool isOutParam);
    internal DbDataReader Execute(EntityCommand entityCommand, CommandBehavior behavior);
    internal DbDataReader ExecuteStoreCommands(EntityCommand entityCommand, CommandBehavior behavior);
    internal string ToTraceString();
}
public class System.Data.EntityClient.EntityConnection : DbConnection {
    internal static StateChangeEventArgs StateChangeClosed;
    internal static StateChangeEventArgs StateChangeOpen;
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public ConnectionState State { get; }
    public string DataSource { get; }
    public string ServerVersion { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    internal DbProviderFactory StoreProviderFactory { get; }
    public DbConnection StoreConnection { get; }
    internal EntityTransaction CurrentTransaction { get; }
    internal bool EnlistedInUserTransaction { get; }
    public EntityConnection(string connectionString);
    public EntityConnection(MetadataWorkspace workspace, DbConnection connection);
    private static EntityConnection();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public virtual ConnectionState get_State();
    public virtual string get_DataSource();
    public virtual string get_ServerVersion();
    protected virtual DbProviderFactory get_DbProviderFactory();
    internal DbProviderFactory get_StoreProviderFactory();
    public DbConnection get_StoreConnection();
    [CLSCompliantAttribute("False")]
public MetadataWorkspace GetMetadataWorkspace();
    internal MetadataWorkspace GetMetadataWorkspace(bool initializeAllCollections);
    internal EntityTransaction get_CurrentTransaction();
    internal bool get_EnlistedInUserTransaction();
    public virtual void Open();
    public EntityCommand CreateCommand();
    protected virtual DbCommand CreateDbCommand();
    public virtual void Close();
    public virtual void ChangeDatabase(string databaseName);
    public EntityTransaction BeginTransaction();
    public EntityTransaction BeginTransaction(IsolationLevel isolationLevel);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public virtual void EnlistTransaction(Transaction transaction);
    protected virtual void Dispose(bool disposing);
    internal void ClearCurrentTransaction();
}
[DefaultMemberAttribute("Item")]
public class System.Data.EntityClient.EntityConnectionStringBuilder : DbConnectionStringBuilder {
    internal static string NameParameterName;
    internal static string MetadataParameterName;
    internal static string ProviderParameterName;
    internal static string ProviderConnectionStringParameterName;
    [EntityResCategoryAttribute("EntityDataCategory_NamedConnectionString")]
[EntityResDescriptionAttribute("EntityConnectionString_Name")]
[RefreshPropertiesAttribute("1")]
[DisplayNameAttribute("Name")]
public string Name { get; public set; }
    [DisplayNameAttribute("Provider")]
[EntityResCategoryAttribute("EntityDataCategory_Source")]
[EntityResDescriptionAttribute("EntityConnectionString_Provider")]
[RefreshPropertiesAttribute("1")]
public string Provider { get; public set; }
    [EntityResDescriptionAttribute("EntityConnectionString_Metadata")]
[RefreshPropertiesAttribute("1")]
[EntityResCategoryAttribute("EntityDataCategory_Context")]
[DisplayNameAttribute("Metadata")]
public string Metadata { get; public set; }
    [RefreshPropertiesAttribute("1")]
[EntityResCategoryAttribute("EntityDataCategory_Source")]
[EntityResDescriptionAttribute("EntityConnectionString_ProviderConnectionString")]
[DisplayNameAttribute("Provider Connection String")]
public string ProviderConnectionString { get; public set; }
    public bool IsFixedSize { get; }
    public ICollection Keys { get; }
    internal static Hashtable Synonyms { get; }
    public object Item { get; public set; }
    public EntityConnectionStringBuilder(string connectionString);
    private static EntityConnectionStringBuilder();
    public string get_Name();
    public void set_Name(string value);
    public string get_Provider();
    public void set_Provider(string value);
    public string get_Metadata();
    public void set_Metadata(string value);
    public string get_ProviderConnectionString();
    public void set_ProviderConnectionString(string value);
    public virtual bool get_IsFixedSize();
    public virtual ICollection get_Keys();
    internal static Hashtable get_Synonyms();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    public virtual bool Remove(string keyword);
}
[DefaultMemberAttribute("Item")]
public class System.Data.EntityClient.EntityDataReader : DbDataReader {
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    public int VisibleFieldCount { get; }
    public DataRecordInfo DataRecordInfo { get; }
    internal EntityDataReader(EntityCommand command, DbDataReader storeDataReader, CommandBehavior behavior);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual int get_VisibleFieldCount();
    public sealed virtual DataRecordInfo get_DataRecordInfo();
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    [EditorBrowsableAttribute("1")]
public virtual Type GetProviderSpecificFieldType(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual object GetProviderSpecificValue(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual int GetProviderSpecificValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual IEnumerator GetEnumerator();
    public sealed virtual DbDataRecord GetDataRecord(int i);
    public sealed virtual DbDataReader GetDataReader(int i);
}
public class System.Data.EntityClient.EntityParameter : DbParameter {
    [RefreshPropertiesAttribute("1")]
[EntityResDescriptionAttribute("DbParameter_Direction")]
[EntityResCategoryAttribute("DataCategory_Data")]
public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; public set; }
    internal int Offset { get; }
    [EntityResDescriptionAttribute("DbParameter_Size")]
[EntityResCategoryAttribute("DataCategory_Data")]
public int Size { get; public set; }
    [EntityResCategoryAttribute("DataCategory_Update")]
[EntityResDescriptionAttribute("DbParameter_SourceColumn")]
public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    [EntityResDescriptionAttribute("DbParameter_SourceVersion")]
[EntityResCategoryAttribute("DataCategory_Update")]
public DataRowVersion SourceVersion { get; public set; }
    public string ParameterName { get; public set; }
    public DbType DbType { get; public set; }
    public EdmType EdmType { get; public set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public object Value { get; public set; }
    internal bool IsDirty { get; }
    internal bool IsDbTypeSpecified { get; }
    internal bool IsDirectionSpecified { get; }
    internal bool IsIsNullableSpecified { get; }
    internal bool IsPrecisionSpecified { get; }
    internal bool IsScaleSpecified { get; }
    internal bool IsSizeSpecified { get; }
    public EntityParameter(string parameterName, DbType dbType);
    public EntityParameter(string parameterName, DbType dbType, int size);
    public EntityParameter(string parameterName, DbType dbType, int size, string sourceColumn);
    public EntityParameter(string parameterName, DbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    internal int get_Offset();
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    internal void CopyTo(DbParameter destination);
    internal object CompareExchangeParent(object value, object comparand);
    internal void ResetParent();
    public virtual string ToString();
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public EdmType get_EdmType();
    public void set_EdmType(EdmType value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    internal bool get_IsDirty();
    internal bool get_IsDbTypeSpecified();
    internal bool get_IsDirectionSpecified();
    internal bool get_IsIsNullableSpecified();
    internal bool get_IsPrecisionSpecified();
    internal bool get_IsScaleSpecified();
    internal bool get_IsSizeSpecified();
    public virtual void ResetDbType();
    internal EntityParameter Clone();
    internal TypeUsage GetTypeUsage();
    internal void ResetIsDirty();
}
[DefaultMemberAttribute("Item")]
public class System.Data.EntityClient.EntityParameterCollection : DbParameterCollection {
    public int Count { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public EntityParameter Item { get; public set; }
    public EntityParameter Item { get; public set; }
    internal bool IsDirty { get; }
    private static EntityParameterCollection();
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public virtual void AddRange(Array values);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    public EntityParameter get_Item(int index);
    public void set_Item(int index, EntityParameter value);
    public EntityParameter get_Item(string parameterName);
    public void set_Item(string parameterName, EntityParameter value);
    internal bool get_IsDirty();
    public EntityParameter Add(EntityParameter value);
    public EntityParameter AddWithValue(string parameterName, object value);
    public EntityParameter Add(string parameterName, DbType dbType);
    public EntityParameter Add(string parameterName, DbType dbType, int size);
    public void AddRange(EntityParameter[] values);
    public virtual bool Contains(string parameterName);
    public void CopyTo(EntityParameter[] array, int index);
    public int IndexOf(EntityParameter value);
    public void Insert(int index, EntityParameter value);
    public void Remove(EntityParameter value);
    internal void ResetIsDirty();
}
public class System.Data.EntityClient.EntityProviderFactory : DbProviderFactory {
    public static EntityProviderFactory Instance;
    private static EntityProviderFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual CodeAccessPermission CreatePermission(PermissionState state);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
internal class System.Data.EntityClient.EntityProviderServices : DbProviderServices {
    internal static EntityProviderServices Instance;
    private static EntityProviderServices();
    protected virtual DbCommandDefinition CreateDbCommandDefinition(DbProviderManifest providerManifest, DbCommandTree commandTree);
    internal EntityCommandDefinition CreateCommandDefinition(DbProviderFactory storeProviderFactory, DbCommandTree commandTree);
    internal virtual void ValidateDataSpace(DbCommandTree commandTree);
    public virtual DbCommandDefinition CreateCommandDefinition(DbCommand prototype);
    protected virtual string GetDbProviderManifestToken(DbConnection connection);
    protected virtual DbProviderManifest GetDbProviderManifest(string versionHint);
}
public class System.Data.EntityClient.EntityTransaction : DbTransaction {
    public EntityConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    internal DbTransaction StoreTransaction { get; }
    internal EntityTransaction(EntityConnection connection, DbTransaction storeTransaction);
    public EntityConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    public virtual IsolationLevel get_IsolationLevel();
    internal DbTransaction get_StoreTransaction();
    public virtual void Commit();
    public virtual void Rollback();
    protected virtual void Dispose(bool disposing);
}
internal class System.Data.EntityClient.NameValuePair : object {
    internal NameValuePair Next { get; internal set; }
    internal NameValuePair(string name, string value, int length);
    internal NameValuePair get_Next();
    internal void set_Next(NameValuePair value);
}
public class System.Data.EntityCommandCompilationException : EntityException {
    public EntityCommandCompilationException(string message);
    public EntityCommandCompilationException(string message, Exception innerException);
    private EntityCommandCompilationException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.Data.EntityCommandExecutionException : EntityException {
    public EntityCommandExecutionException(string message);
    public EntityCommandExecutionException(string message, Exception innerException);
    private EntityCommandExecutionException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.Data.EntityException : DataException {
    public EntityException(string message);
    public EntityException(string message, Exception innerException);
    protected EntityException(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("{ConcatKeyValue()}")]
[DataContractAttribute]
public class System.Data.EntityKey : object {
    public static EntityKey NoEntitySetKey;
    public static EntityKey EntityNotValidKey;
    [DataMemberAttribute]
public string EntitySetName { get; public set; }
    [DataMemberAttribute]
public string EntityContainerName { get; public set; }
    [DataMemberAttribute]
public EntityKeyMember[] EntityKeyValues { get; public set; }
    public bool IsTemporary { get; }
    public EntityKey(string qualifiedEntitySetName, IEnumerable`1<KeyValuePair`2<string, object>> entityKeyValues);
    public EntityKey(string qualifiedEntitySetName, IEnumerable`1<EntityKeyMember> entityKeyValues);
    public EntityKey(string qualifiedEntitySetName, string keyName, object keyValue);
    internal EntityKey(EntitySet entitySet, IExtendedDataRecord record);
    internal EntityKey(string qualifiedEntitySetName);
    internal EntityKey(EntitySetBase entitySet);
    internal EntityKey(EntitySetBase entitySet, object singletonKeyValue);
    internal EntityKey(EntitySetBase entitySet, Object[] compositeKeyValues);
    private static EntityKey();
    public string get_EntitySetName();
    public void set_EntitySetName(string value);
    public string get_EntityContainerName();
    public void set_EntityContainerName(string value);
    public EntityKeyMember[] get_EntityKeyValues();
    public void set_EntityKeyValues(EntityKeyMember[] value);
    public bool get_IsTemporary();
    public EntitySet GetEntitySet(MetadataWorkspace metadataWorkspace);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(EntityKey other);
    public virtual int GetHashCode();
    public static bool op_Equality(EntityKey key1, EntityKey key2);
    public static bool op_Inequality(EntityKey key1, EntityKey key2);
    internal static bool InternalEquals(EntityKey key1, EntityKey key2, bool compareEntitySets);
    internal static bool CompositeValuesWithBinaryEqual(EntityKey key1, EntityKey key2);
    internal KeyValuePair`2[] GetKeyValueExpressions(EntitySet entitySet);
    internal string ConcatKeyValue();
    internal object FindValueByName(string keyName);
    internal static void GetEntitySetName(string qualifiedEntitySetName, String& entitySet, String& container);
    internal static void ValidateName(string name);
    internal void ValidateEntityKey(MetadataWorkspace workspace, EntitySet entitySet);
    internal void ValidateEntityKey(MetadataWorkspace workspace, EntitySet entitySet, bool isArgumentException, string argumentName);
    [OnDeserializingAttribute]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public void OnDeserializing(StreamingContext context);
    [EditorBrowsableAttribute("1")]
[OnDeserializedAttribute]
[BrowsableAttribute("False")]
public void OnDeserialized(StreamingContext context);
}
[DataContractAttribute]
public class System.Data.EntityKeyMember : object {
    [DataMemberAttribute]
public string Key { get; public set; }
    [DataMemberAttribute]
public object Value { get; public set; }
    public EntityKeyMember(string keyName, object keyValue);
    public string get_Key();
    public void set_Key(string value);
    public object get_Value();
    public void set_Value(object value);
    public virtual string ToString();
}
internal enum System.Data.EntityModel.SchemaObjectModel.Action : Enum {
    public int value__;
    public static Action None;
    public static Action Cascade;
}
internal enum System.Data.EntityModel.SchemaObjectModel.AddErrorKind : Enum {
    public int value__;
    public static AddErrorKind Succeeded;
    public static AddErrorKind MissingNameError;
    public static AddErrorKind DuplicateNameError;
}
internal class System.Data.EntityModel.SchemaObjectModel.AliasResolver : object {
    public AliasResolver(Schema schema);
    public void Add(UsingElement usingElement);
    public bool TryResolveAlias(string alias, String& namespaceName);
    public void ResolveNamespaces();
}
internal class System.Data.EntityModel.SchemaObjectModel.AttributeValueNotification : MulticastDelegate {
    public AttributeValueNotification(object object, IntPtr method);
    public virtual void Invoke(string token, Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError);
    public virtual IAsyncResult BeginInvoke(string token, Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.EntityModel.SchemaObjectModel.BooleanFacetDescriptionElement : FacetDescriptionElement {
    public EdmType FacetType { get; }
    public BooleanFacetDescriptionElement(TypeElement type, string name);
    public virtual EdmType get_FacetType();
    protected virtual void HandleDefaultAttribute(XmlReader reader);
}
internal class System.Data.EntityModel.SchemaObjectModel.ByteFacetDescriptionElement : FacetDescriptionElement {
    public EdmType FacetType { get; }
    public ByteFacetDescriptionElement(TypeElement type, string name);
    public virtual EdmType get_FacetType();
    protected virtual void HandleDefaultAttribute(XmlReader reader);
}
internal class System.Data.EntityModel.SchemaObjectModel.CollectionTypeElement : ModelFunctionTypeElement {
    internal ModelFunctionTypeElement SubElement { get; }
    internal CollectionTypeElement(SchemaElement parentElement);
    internal ModelFunctionTypeElement get_SubElement();
    protected virtual bool HandleAttribute(XmlReader reader);
    protected void HandleElementTypeAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    protected void HandleCollectionTypeElement(XmlReader reader);
    protected void HandleReferenceTypeElement(XmlReader reader);
    protected void HandleTypeRefElement(XmlReader reader);
    protected void HandleRowTypeElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    internal virtual void Validate();
}
internal class System.Data.EntityModel.SchemaObjectModel.DocumentationElement : SchemaElement {
    public Documentation MetadataDocumentation { get; }
    public DocumentationElement(SchemaElement parentElement);
    public Documentation get_MetadataDocumentation();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleText(XmlReader reader);
}
[DebuggerDisplayAttribute("Name={Name}")]
internal class System.Data.EntityModel.SchemaObjectModel.EntityContainer : SchemaType {
    public ISchemaElementLookUpTable`1<EntityContainerEntitySet> EntitySets { get; }
    public ISchemaElementLookUpTable`1<EntityContainerRelationshipSet> RelationshipSets { get; }
    public ISchemaElementLookUpTable`1<Function> FunctionImports { get; }
    public EntityContainer ExtendingEntityContainer { get; }
    public string FQName { get; }
    public string Identity { get; }
    public EntityContainer(Schema parentElement);
    public ISchemaElementLookUpTable`1<EntityContainerEntitySet> get_EntitySets();
    public ISchemaElementLookUpTable`1<EntityContainerRelationshipSet> get_RelationshipSets();
    public ISchemaElementLookUpTable`1<Function> get_FunctionImports();
    public EntityContainer get_ExtendingEntityContainer();
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    internal virtual void Validate();
    internal EntityContainerEntitySet FindEntitySet(string name);
    public virtual string get_FQName();
    public virtual string get_Identity();
}
internal class System.Data.EntityModel.SchemaObjectModel.EntityContainerAssociationSet : EntityContainerRelationshipSet {
    internal IEnumerable`1<EntityContainerRelationshipSetEnd> Ends { get; }
    public EntityContainerAssociationSet(EntityContainer parentElement);
    internal virtual IEnumerable`1<EntityContainerRelationshipSetEnd> get_Ends();
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    protected virtual void AddEnd(IRelationshipEnd relationshipEnd, EntityContainerEntitySet entitySet);
    protected virtual bool HasEnd(string role);
    internal virtual SchemaElement Clone(SchemaElement parentElement);
}
internal class System.Data.EntityModel.SchemaObjectModel.EntityContainerAssociationSetEnd : EntityContainerRelationshipSetEnd {
    public string Role { get; public set; }
    public string Name { get; }
    public EntityContainerAssociationSetEnd(EntityContainerAssociationSet parentElement);
    public string get_Role();
    public void set_Role(string value);
    public virtual string get_Name();
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    internal virtual SchemaElement Clone(SchemaElement parentElement);
}
internal class System.Data.EntityModel.SchemaObjectModel.EntityContainerEntitySet : SchemaElement {
    public string FQName { get; }
    public SchemaEntityType EntityType { get; }
    public string DbSchema { get; }
    public string Table { get; }
    public string DefiningQuery { get; }
    public EntityContainerEntitySet(EntityContainer parentElement);
    public virtual string get_FQName();
    public SchemaEntityType get_EntityType();
    public string get_DbSchema();
    public string get_Table();
    public string get_DefiningQuery();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual void HandleNameAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    internal virtual SchemaElement Clone(SchemaElement parentElement);
}
internal class System.Data.EntityModel.SchemaObjectModel.EntityContainerEntitySetDefiningQuery : SchemaElement {
    public string Query { get; }
    public EntityContainerEntitySetDefiningQuery(EntityContainerEntitySet parentElement);
    public string get_Query();
    protected virtual bool HandleText(XmlReader reader);
    internal virtual void Validate();
}
internal abstract class System.Data.EntityModel.SchemaObjectModel.EntityContainerRelationshipSet : SchemaElement {
    public string FQName { get; }
    internal IRelationship Relationship { get; internal set; }
    internal IEnumerable`1<EntityContainerRelationshipSetEnd> Ends { get; }
    internal EntityContainer ParentElement { get; }
    public EntityContainerRelationshipSet(EntityContainer parentElement);
    public virtual string get_FQName();
    internal IRelationship get_Relationship();
    internal void set_Relationship(IRelationship value);
    protected abstract virtual bool HasEnd(string role);
    protected abstract virtual void AddEnd(IRelationshipEnd relationshipEnd, EntityContainerEntitySet entitySet);
    internal abstract virtual IEnumerable`1<EntityContainerRelationshipSetEnd> get_Ends();
    protected void HandleRelationshipTypeNameAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    internal virtual void Validate();
    internal EntityContainer get_ParentElement();
}
internal class System.Data.EntityModel.SchemaObjectModel.EntityContainerRelationshipSetEnd : SchemaElement {
    public IRelationshipEnd RelationshipEnd { get; internal set; }
    public EntityContainerEntitySet EntitySet { get; internal set; }
    internal EntityContainerRelationshipSet ParentElement { get; }
    public EntityContainerRelationshipSetEnd(EntityContainerRelationshipSet parentElement);
    public IRelationshipEnd get_RelationshipEnd();
    internal void set_RelationshipEnd(IRelationshipEnd value);
    public EntityContainerEntitySet get_EntitySet();
    internal void set_EntitySet(EntityContainerEntitySet value);
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    internal EntityContainerRelationshipSet get_ParentElement();
}
internal class System.Data.EntityModel.SchemaObjectModel.EntityKeyElement : SchemaElement {
    public IList`1<PropertyRefElement> KeyProperties { get; }
    public EntityKeyElement(SchemaEntityType parentElement);
    public IList`1<PropertyRefElement> get_KeyProperties();
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
}
internal enum System.Data.EntityModel.SchemaObjectModel.ErrorCode : Enum {
    public int value__;
    public static ErrorCode InvalidErrorCodeValue;
    public static ErrorCode SecurityError;
    public static ErrorCode IOException;
    public static ErrorCode XmlError;
    public static ErrorCode TooManyErrors;
    public static ErrorCode MalformedXml;
    public static ErrorCode UnexpectedXmlNodeType;
    public static ErrorCode UnexpectedXmlAttribute;
    public static ErrorCode UnexpectedXmlElement;
    public static ErrorCode TextNotAllowed;
    public static ErrorCode EmptyFile;
    public static ErrorCode XsdError;
    public static ErrorCode InvalidAlias;
    public static ErrorCode IntegerExpected;
    public static ErrorCode InvalidName;
    public static ErrorCode AlreadyDefined;
    public static ErrorCode ElementNotInSchema;
    public static ErrorCode InvalidBaseType;
    public static ErrorCode NoConcreteDescendants;
    public static ErrorCode CycleInTypeHierarchy;
    public static ErrorCode InvalidVersionNumber;
    public static ErrorCode InvalidSize;
    public static ErrorCode InvalidBoolean;
    public static ErrorCode BadType;
    public static ErrorCode InvalidVersioningClass;
    public static ErrorCode InvalidVersionIntroduced;
    public static ErrorCode BadNamespace;
    public static ErrorCode UnresolvedReferenceSchema;
    public static ErrorCode NotInNamespace;
    public static ErrorCode NotUnnestedType;
    public static ErrorCode BadProperty;
    public static ErrorCode UndefinedProperty;
    public static ErrorCode InvalidPropertyType;
    public static ErrorCode InvalidAsNestedType;
    public static ErrorCode InvalidChangeUnit;
    public static ErrorCode UnauthorizedAccessException;
    public static ErrorCode MissingNamespaceAttribute;
    public static ErrorCode PrecisionOutOfRange;
    public static ErrorCode ScaleOutOfRange;
    public static ErrorCode DefaultNotAllowed;
    public static ErrorCode InvalidDefault;
    public static ErrorCode RequiredFacetMissing;
    public static ErrorCode BadImageFormatException;
    public static ErrorCode MissingSchemaXml;
    public static ErrorCode BadPrecisionAndScale;
    public static ErrorCode InvalidChangeUnitUsage;
    public static ErrorCode NameTooLong;
    public static ErrorCode CircularlyDefinedType;
    public static ErrorCode InvalidAssociation;
    public static ErrorCode FacetNotAllowedByType;
    public static ErrorCode ConstantFacetSpecifiedInSchema;
    public static ErrorCode BadNavigationProperty;
    public static ErrorCode InvalidKey;
    public static ErrorCode InvalidMultiplicity;
    public static ErrorCode InvalidAction;
    public static ErrorCode InvalidOperation;
    public static ErrorCode InvalidContainerTypeForEnd;
    public static ErrorCode InvalidEndEntitySet;
    public static ErrorCode AmbiguousEntityContainerEnd;
    public static ErrorCode MissingExtentEntityContainerEnd;
    public static ErrorCode BadParameterDirection;
    public static ErrorCode FailedInference;
    public static ErrorCode InvalidFacetInProviderManifest;
    public static ErrorCode InvalidRoleInRelationshipConstraint;
    public static ErrorCode InvalidPropertyInRelationshipConstraint;
    public static ErrorCode TypeMismatchRelationshipConstaint;
    public static ErrorCode InvalidMultiplicityInRoleInRelationshipConstraint;
    public static ErrorCode MismatchNumberOfPropertiesInRelationshipConstraint;
    public static ErrorCode MissingPropertyInRelationshipConstraint;
    public static ErrorCode MissingConstraintOnRelationshipType;
    public static ErrorCode SameRoleReferredInReferentialConstraint;
    public static ErrorCode InvalidValueForParameterTypeSemantics;
    public static ErrorCode InvalidRelationshipEndType;
    public static ErrorCode InvalidPrimitiveTypeKind;
    public static ErrorCode InvalidTypeConversionDestinationType;
    public static ErrorCode ByteValueExpected;
    public static ErrorCode FunctionWithNonPrimitiveTypeNotSupported;
    public static ErrorCode PrecisionMoreThanAllowedMax;
    public static ErrorCode EntityKeyMustBeScalar;
    public static ErrorCode EntityKeyTypeCurrentlyNotSupported;
    public static ErrorCode NoPreferredMappingForPrimitiveTypeKind;
    public static ErrorCode TooManyPreferredMappingsForPrimitiveTypeKind;
    public static ErrorCode EndWithManyMultiplicityCannotHaveOperationsSpecified;
    public static ErrorCode EntitySetTypeHasNoKeys;
    public static ErrorCode InvalidNumberOfParametersForAggregateFunction;
    public static ErrorCode InvalidParameterTypeForAggregateFunction;
    public static ErrorCode ComposableFunctionOrFunctionImportWithoutReturnType;
    public static ErrorCode NonComposableFunctionWithReturnType;
    public static ErrorCode NonComposableFunctionAttributesNotValid;
    public static ErrorCode ComposableFunctionWithCommandText;
    public static ErrorCode FunctionDeclaresCommandTextAndStoreFunctionName;
    public static ErrorCode SystemNamespace;
    public static ErrorCode EmptyDefiningQuery;
    public static ErrorCode TableAndSchemaAreMutuallyExclusiveWithDefiningQuery;
    public static ErrorCode ConcurrencyRedefinedOnSubTypeOfEntitySetType;
    public static ErrorCode FunctionImportUnsupportedReturnType;
    public static ErrorCode FunctionImportUnknownEntitySet;
    public static ErrorCode FunctionImportReturnsEntitiesButDoesNotSpecifyEntitySet;
    public static ErrorCode FunctionImportEntityTypeDoesNotMatchEntitySet;
    public static ErrorCode FunctionImportSpecifiesEntitySetButDoesNotReturnEntityType;
    public static ErrorCode InternalError;
    public static ErrorCode SimilarRelationshipEnd;
    public static ErrorCode DuplicatePropertySpecifiedInEntityKey;
    public static ErrorCode AmbiguousFunctionReturnType;
    public static ErrorCode NullableComplexType;
    public static ErrorCode NonComplexCollections;
    public static ErrorCode KeyMissingOnEntityType;
    public static ErrorCode InvalidNamespaceInUsing;
    public static ErrorCode NeedNotUseSystemNamespaceInUsing;
    public static ErrorCode CannotUseSystemNamespaceAsAlias;
    public static ErrorCode InvalidNamespaceName;
    public static ErrorCode InvalidEntityContainerNameInExtends;
    public static ErrorCode InvalidNamespaceOrAliasSpecified;
    public static ErrorCode EntityContainerCannotExtendItself;
    public static ErrorCode FailedToRetrieveProviderManifest;
    public static ErrorCode ProviderManifestTokenMismatch;
    public static ErrorCode ProviderManifestTokenNotFound;
    public static ErrorCode EmptyCommandText;
    public static ErrorCode InconsistentProvider;
    public static ErrorCode InconsistentProviderManifestToken;
    public static ErrorCode DuplicatedFunctionoverloads;
    public static ErrorCode InvalidProvider;
    public static ErrorCode FunctionWithNonEdmTypeNotSupported;
    public static ErrorCode ComplexTypeAsReturnTypeAndDefinedEntitySet;
    public static ErrorCode ComplexTypeAsReturnTypeAndNestedComplexProperty;
    public static ErrorCode FunctionImportComposableAndSideEffectingNotAllowed;
    public static ErrorCode FunctionImportEntitySetAndEntitySetPathDeclared;
    public static ErrorCode FacetOnNonScalarType;
    public static ErrorCode IncorrectlyPlacedFacet;
    public static ErrorCode ReturnTypeNotDeclared;
    public static ErrorCode TypeNotDeclared;
    public static ErrorCode RowTypeWithoutProperty;
    public static ErrorCode ReturnTypeDeclaredAsAttributeAndElement;
    public static ErrorCode TypeDeclaredAsAttributeAndElement;
    public static ErrorCode ReferenceToNonEntityType;
    public static ErrorCode FunctionImportCollectionAndRefParametersNotAllowed;
    public static ErrorCode IncompatibleSchemaVersion;
    public static ErrorCode NoCodeGenNamespaceInStructuralAnnotation;
    public static ErrorCode AmbiguousFunctionAndType;
    public static ErrorCode CannotLoadDifferentVersionOfSchemaInTheSameItemCollection;
    public static ErrorCode BoolValueExpected;
    public static ErrorCode EndWithoutMultiplicity;
    public static ErrorCode TVFReturnTypeRowHasNonScalarProperty;
    public static ErrorCode FunctionImportNonNullableParametersNotAllowed;
    public static ErrorCode FunctionWithDefiningExpressionAndEntitySetNotAllowed;
    public static ErrorCode FunctionEntityTypeScopeDoesNotMatchReturnType;
    public static ErrorCode InvalidEnumUnderlyingType;
    public static ErrorCode DuplicateEnumMember;
    public static ErrorCode CalculatedEnumValueOutOfRange;
    public static ErrorCode EnumMemberValueOutOfItsUnderylingTypeRange;
    public static ErrorCode InvalidSystemReferenceId;
    public static ErrorCode UnexpectedSpatialType;
}
internal abstract class System.Data.EntityModel.SchemaObjectModel.FacetDescriptionElement : SchemaElement {
    public EdmType FacetType { get; }
    public Nullable`1<int> MinValue { get; }
    public Nullable`1<int> MaxValue { get; }
    public object DefaultValue { get; public set; }
    public FacetDescription FacetDescription { get; }
    public FacetDescriptionElement(TypeElement type, string name);
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected void HandleMinimumAttribute(XmlReader reader);
    protected void HandleMaximumAttribute(XmlReader reader);
    protected abstract virtual void HandleDefaultAttribute(XmlReader reader);
    protected void HandleConstantAttribute(XmlReader reader);
    public abstract virtual EdmType get_FacetType();
    public Nullable`1<int> get_MinValue();
    public Nullable`1<int> get_MaxValue();
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    public FacetDescription get_FacetDescription();
    internal void CreateAndValidateFacetDescription(string declaringTypeName);
}
internal abstract class System.Data.EntityModel.SchemaObjectModel.FacetEnabledSchemaElement : SchemaElement {
    protected SchemaType _type;
    protected string _unresolvedType;
    protected TypeUsageBuilder _typeUsageBuilder;
    internal Function ParentElement { get; }
    internal SchemaType Type { get; }
    internal TypeUsage TypeUsage { get; }
    internal TypeUsageBuilder TypeUsageBuilder { get; }
    internal bool HasUserDefinedFacets { get; }
    internal string UnresolvedType { get; internal set; }
    internal FacetEnabledSchemaElement(Function parentElement);
    internal FacetEnabledSchemaElement(SchemaElement parentElement);
    internal Function get_ParentElement();
    internal SchemaType get_Type();
    internal virtual TypeUsage get_TypeUsage();
    internal TypeUsageBuilder get_TypeUsageBuilder();
    internal bool get_HasUserDefinedFacets();
    internal string get_UnresolvedType();
    internal void set_UnresolvedType(string value);
    internal virtual void ResolveTopLevelNames();
    internal void ValidateAndSetTypeUsage(ScalarType scalar);
    internal void ValidateAndSetTypeUsage(EdmType edmType);
    protected virtual bool HandleAttribute(XmlReader reader);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.EntityModel.SchemaObjectModel.FilteredSchemaElementLookUpTable`2 : object {
    public int Count { get; }
    public T Item { get; }
    public FilteredSchemaElementLookUpTable`2(SchemaElementLookUpTable`1<S> lookUpTable);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int get_Count();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual T get_Item(string key);
    public sealed virtual T LookUpEquivalentKey(string key);
}
internal class System.Data.EntityModel.SchemaObjectModel.Function : SchemaType {
    protected bool _isComposable;
    protected FunctionCommandText _commandText;
    protected SchemaType _type;
    protected bool _isRefType;
    protected SchemaElementLookUpTable`1<Parameter> _parameters;
    protected List`1<ReturnType> _returnTypeList;
    public bool IsAggregate { get; internal set; }
    public bool IsBuiltIn { get; internal set; }
    public bool IsNiladicFunction { get; internal set; }
    public bool IsComposable { get; internal set; }
    public string CommandText { get; }
    public ParameterTypeSemantics ParameterTypeSemantics { get; internal set; }
    public string StoreFunctionName { get; internal set; }
    public SchemaType Type { get; }
    public IList`1<ReturnType> ReturnTypeList { get; }
    public SchemaElementLookUpTable`1<Parameter> Parameters { get; }
    public CollectionKind CollectionKind { get; internal set; }
    public string Identity { get; }
    public bool IsReturnAttributeReftype { get; }
    public bool IsFunctionImport { get; }
    public string DbSchema { get; }
    internal string UnresolvedReturnType { get; internal set; }
    public Function(Schema parentElement);
    private static Function();
    internal static void RemoveTypeModifier(String& type, TypeModifier& typeModifier, Boolean& isRefType);
    internal static string GetTypeNameForErrorMessage(SchemaType type, CollectionKind colKind, bool isRef);
    public bool get_IsAggregate();
    internal void set_IsAggregate(bool value);
    public bool get_IsBuiltIn();
    internal void set_IsBuiltIn(bool value);
    public bool get_IsNiladicFunction();
    internal void set_IsNiladicFunction(bool value);
    public bool get_IsComposable();
    internal void set_IsComposable(bool value);
    public string get_CommandText();
    public ParameterTypeSemantics get_ParameterTypeSemantics();
    internal void set_ParameterTypeSemantics(ParameterTypeSemantics value);
    public string get_StoreFunctionName();
    internal void set_StoreFunctionName(string value);
    public virtual SchemaType get_Type();
    public IList`1<ReturnType> get_ReturnTypeList();
    public SchemaElementLookUpTable`1<Parameter> get_Parameters();
    public CollectionKind get_CollectionKind();
    internal void set_CollectionKind(CollectionKind value);
    public virtual string get_Identity();
    public bool get_IsReturnAttributeReftype();
    public virtual bool get_IsFunctionImport();
    public string get_DbSchema();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    internal virtual void ResolveSecondLevelNames();
    internal virtual SchemaElement Clone(SchemaElement parentElement);
    protected void CloneSetFunctionFields(Function clone);
    internal string get_UnresolvedReturnType();
    internal void set_UnresolvedReturnType(string value);
    protected virtual void HandleReturnTypeAttribute(XmlReader reader);
    protected void HandleParameterElement(XmlReader reader);
    protected void HandleReturnTypeElement(XmlReader reader);
}
internal class System.Data.EntityModel.SchemaObjectModel.FunctionCommandText : SchemaElement {
    public string CommandText { get; }
    public FunctionCommandText(Function parentElement);
    public string get_CommandText();
    protected virtual bool HandleText(XmlReader reader);
    internal virtual void Validate();
}
internal class System.Data.EntityModel.SchemaObjectModel.FunctionImportElement : Function {
    public bool IsFunctionImport { get; }
    public string FQName { get; }
    public string Identity { get; }
    public EntityContainer Container { get; }
    public EntityContainerEntitySet EntitySet { get; }
    internal FunctionImportElement(EntityContainer container);
    public virtual bool get_IsFunctionImport();
    public virtual string get_FQName();
    public virtual string get_Identity();
    public EntityContainer get_Container();
    public EntityContainerEntitySet get_EntitySet();
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal void ResolveEntitySet(SchemaElement owner, string unresolvedEntitySet, EntityContainerEntitySet& entitySet);
    internal virtual void Validate();
    internal virtual SchemaElement Clone(SchemaElement parentElement);
}
internal class System.Data.EntityModel.SchemaObjectModel.IntegerFacetDescriptionElement : FacetDescriptionElement {
    public EdmType FacetType { get; }
    public IntegerFacetDescriptionElement(TypeElement type, string name);
    public virtual EdmType get_FacetType();
    protected virtual void HandleDefaultAttribute(XmlReader reader);
}
internal interface System.Data.EntityModel.SchemaObjectModel.IRelationship {
    public string Name { get; }
    public string FQName { get; }
    public IList`1<IRelationshipEnd> Ends { get; }
    public IList`1<ReferentialConstraint> Constraints { get; }
    public RelationshipKind RelationshipKind { get; }
    public bool IsForeignKey { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_FQName();
    public abstract virtual IList`1<IRelationshipEnd> get_Ends();
    public abstract virtual IList`1<ReferentialConstraint> get_Constraints();
    public abstract virtual bool TryGetEnd(string roleName, IRelationshipEnd& end);
    public abstract virtual RelationshipKind get_RelationshipKind();
    public abstract virtual bool get_IsForeignKey();
}
internal interface System.Data.EntityModel.SchemaObjectModel.IRelationshipEnd {
    public string Name { get; }
    public SchemaEntityType Type { get; }
    public Nullable`1<RelationshipMultiplicity> Multiplicity { get; public set; }
    public ICollection`1<OnOperation> Operations { get; }
    public abstract virtual string get_Name();
    public abstract virtual SchemaEntityType get_Type();
    public abstract virtual Nullable`1<RelationshipMultiplicity> get_Multiplicity();
    public abstract virtual void set_Multiplicity(Nullable`1<RelationshipMultiplicity> value);
    public abstract virtual ICollection`1<OnOperation> get_Operations();
}
[DefaultMemberAttribute("Item")]
internal interface System.Data.EntityModel.SchemaObjectModel.ISchemaElementLookUpTable`1 {
    public int Count { get; }
    public T Item { get; }
    public abstract virtual int get_Count();
    public abstract virtual bool ContainsKey(string key);
    public abstract virtual T get_Item(string key);
    public abstract virtual IEnumerator`1<T> GetEnumerator();
    public abstract virtual T LookUpEquivalentKey(string key);
}
internal class System.Data.EntityModel.SchemaObjectModel.ModelFunction : Function {
    public SchemaType Type { get; }
    internal TypeUsage TypeUsage { get; }
    public ModelFunction(Schema parentElement);
    public virtual SchemaType get_Type();
    internal TypeUsage get_TypeUsage();
    internal void ValidateAndSetTypeUsage(ScalarType scalar);
    internal void ValidateAndSetTypeUsage(EdmType edmType);
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual void HandleReturnTypeAttribute(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
}
internal abstract class System.Data.EntityModel.SchemaObjectModel.ModelFunctionTypeElement : FacetEnabledSchemaElement {
    protected TypeUsage _typeUsage;
    internal ModelFunctionTypeElement(SchemaElement parentElement);
    internal abstract virtual void WriteIdentity(StringBuilder builder);
    internal abstract virtual TypeUsage GetTypeUsage();
    internal abstract virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
}
[DebuggerDisplayAttribute("Name={Name}, Relationship={_unresolvedRelationshipName}, FromRole={_unresolvedFromEndRole}, ToRole={_unresolvedToEndRole}")]
internal class System.Data.EntityModel.SchemaObjectModel.NavigationProperty : Property {
    public SchemaEntityType ParentElement { get; }
    internal IRelationship Relationship { get; }
    internal IRelationshipEnd ToEnd { get; }
    internal IRelationshipEnd FromEnd { get; }
    public SchemaType Type { get; }
    public NavigationProperty(SchemaEntityType parent);
    public SchemaEntityType get_ParentElement();
    internal IRelationship get_Relationship();
    internal IRelationshipEnd get_ToEnd();
    internal IRelationshipEnd get_FromEnd();
    public virtual SchemaType get_Type();
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
}
internal class System.Data.EntityModel.SchemaObjectModel.OnOperation : SchemaElement {
    public Operation Operation { get; private set; }
    public Action Action { get; private set; }
    public OnOperation(RelationshipEnd parentElement, Operation operation);
    public Operation get_Operation();
    private void set_Operation(Operation value);
    public Action get_Action();
    private void set_Action(Action value);
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
}
internal enum System.Data.EntityModel.SchemaObjectModel.Operation : Enum {
    public int value__;
    public static Operation Delete;
}
internal class System.Data.EntityModel.SchemaObjectModel.Parameter : FacetEnabledSchemaElement {
    internal ParameterDirection ParameterDirection { get; }
    internal CollectionKind CollectionKind { get; internal set; }
    internal bool IsRefType { get; }
    internal TypeUsage TypeUsage { get; }
    internal SchemaType Type { get; }
    internal Parameter(Function parentElement);
    internal ParameterDirection get_ParameterDirection();
    internal CollectionKind get_CollectionKind();
    internal void set_CollectionKind(CollectionKind value);
    internal bool get_IsRefType();
    internal virtual TypeUsage get_TypeUsage();
    internal SchemaType get_Type();
    internal void WriteIdentity(StringBuilder builder);
    internal virtual SchemaElement Clone(SchemaElement parentElement);
    internal bool ResolveNestedTypeNames(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    protected void HandleCollectionTypeElement(XmlReader reader);
    protected void HandleReferenceTypeElement(XmlReader reader);
    protected void HandleTypeRefElement(XmlReader reader);
    protected void HandleRowTypeElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
}
internal class System.Data.EntityModel.SchemaObjectModel.PrimitiveSchema : Schema {
    internal string Alias { get; }
    internal string Namespace { get; }
    public PrimitiveSchema(SchemaManager schemaManager);
    internal virtual string get_Alias();
    internal virtual string get_Namespace();
    protected virtual bool HandleAttribute(XmlReader reader);
}
internal abstract class System.Data.EntityModel.SchemaObjectModel.Property : SchemaElement {
    public SchemaType Type { get; }
    internal Property(StructuredType parentElement);
    public abstract virtual SchemaType get_Type();
    protected virtual bool HandleElement(XmlReader reader);
}
internal class System.Data.EntityModel.SchemaObjectModel.PropertyRefElement : SchemaElement {
    public StructuredProperty Property { get; }
    public PropertyRefElement(SchemaElement parentElement);
    public StructuredProperty get_Property();
    internal virtual void ResolveTopLevelNames();
    internal bool ResolveNames(SchemaEntityType entityType);
}
internal class System.Data.EntityModel.SchemaObjectModel.ProviderManifestNeeded : MulticastDelegate {
    public ProviderManifestNeeded(object object, IntPtr method);
    public virtual DbProviderManifest Invoke(Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError);
    public virtual IAsyncResult BeginInvoke(Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError, AsyncCallback callback, object object);
    public virtual DbProviderManifest EndInvoke(IAsyncResult result);
}
internal class System.Data.EntityModel.SchemaObjectModel.ReferenceTypeElement : ModelFunctionTypeElement {
    internal ReferenceTypeElement(SchemaElement parentElement);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected void HandleTypeElementAttribute(XmlReader reader);
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    internal virtual void Validate();
}
internal class System.Data.EntityModel.SchemaObjectModel.ReferentialConstraint : SchemaElement {
    internal IRelationship ParentElement { get; }
    internal ReferentialConstraintRoleElement PrincipalRole { get; }
    internal ReferentialConstraintRoleElement DependentRole { get; }
    public ReferentialConstraint(Relationship relationship);
    internal virtual void Validate();
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    internal void HandleReferentialConstraintPrincipalRoleElement(XmlReader reader);
    internal void HandleReferentialConstraintDependentRoleElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal IRelationship get_ParentElement();
    internal ReferentialConstraintRoleElement get_PrincipalRole();
    internal ReferentialConstraintRoleElement get_DependentRole();
}
internal class System.Data.EntityModel.SchemaObjectModel.ReferentialConstraintRoleElement : SchemaElement {
    public IList`1<PropertyRefElement> RoleProperties { get; }
    public IRelationshipEnd End { get; }
    public ReferentialConstraintRoleElement(ReferentialConstraint parentElement);
    public IList`1<PropertyRefElement> get_RoleProperties();
    public IRelationshipEnd get_End();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
}
internal class System.Data.EntityModel.SchemaObjectModel.Relationship : SchemaType {
    public IList`1<IRelationshipEnd> Ends { get; }
    public IList`1<ReferentialConstraint> Constraints { get; }
    public RelationshipKind RelationshipKind { get; private set; }
    public bool IsForeignKey { get; }
    public Relationship(Schema parent, RelationshipKind kind);
    public sealed virtual IList`1<IRelationshipEnd> get_Ends();
    public sealed virtual IList`1<ReferentialConstraint> get_Constraints();
    public sealed virtual bool TryGetEnd(string roleName, IRelationshipEnd& end);
    public sealed virtual RelationshipKind get_RelationshipKind();
    private void set_RelationshipKind(RelationshipKind value);
    public sealed virtual bool get_IsForeignKey();
    internal virtual void Validate();
    internal virtual void ResolveTopLevelNames();
    protected virtual bool HandleElement(XmlReader reader);
}
internal class System.Data.EntityModel.SchemaObjectModel.RelationshipEnd : SchemaElement {
    public SchemaEntityType Type { get; private set; }
    public Nullable`1<RelationshipMultiplicity> Multiplicity { get; public set; }
    public ICollection`1<OnOperation> Operations { get; }
    internal IRelationship ParentElement { get; }
    public RelationshipEnd(Relationship relationship);
    public sealed virtual SchemaEntityType get_Type();
    private void set_Type(SchemaEntityType value);
    public sealed virtual Nullable`1<RelationshipMultiplicity> get_Multiplicity();
    public sealed virtual void set_Multiplicity(Nullable`1<RelationshipMultiplicity> value);
    public sealed virtual ICollection`1<OnOperation> get_Operations();
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    protected virtual void HandleAttributesComplete();
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    internal IRelationship get_ParentElement();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.EntityModel.SchemaObjectModel.RelationshipEndCollection : object {
    public int Count { get; }
    public IRelationshipEnd Item { get; public set; }
    public bool IsReadOnly { get; }
    public sealed virtual int get_Count();
    public sealed virtual void Add(IRelationshipEnd end);
    public sealed virtual bool Remove(IRelationshipEnd end);
    public bool Contains(string name);
    public sealed virtual bool Contains(IRelationshipEnd end);
    public sealed virtual IRelationshipEnd get_Item(int index);
    public sealed virtual void set_Item(int index, IRelationshipEnd value);
    public sealed virtual IEnumerator`1<IRelationshipEnd> GetEnumerator();
    public bool TryGetEnd(string name, IRelationshipEnd& end);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Clear();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override int System.Collections.Generic.IList<System.Data.EntityModel.SchemaObjectModel.IRelationshipEnd>.IndexOf(IRelationshipEnd end);
    private sealed virtual override void System.Collections.Generic.IList<System.Data.EntityModel.SchemaObjectModel.IRelationshipEnd>.Insert(int index, IRelationshipEnd end);
    private sealed virtual override void System.Collections.Generic.IList<System.Data.EntityModel.SchemaObjectModel.IRelationshipEnd>.RemoveAt(int index);
    public sealed virtual void CopyTo(IRelationshipEnd[] ends, int index);
}
internal class System.Data.EntityModel.SchemaObjectModel.ReturnType : ModelFunctionTypeElement {
    internal bool IsRefType { get; }
    internal CollectionKind CollectionKind { get; }
    internal EntityContainerEntitySet EntitySet { get; }
    internal bool EntitySetPathDefined { get; }
    internal ModelFunctionTypeElement SubElement { get; }
    internal TypeUsage TypeUsage { get; }
    internal ReturnType(Function parentElement);
    internal bool get_IsRefType();
    internal CollectionKind get_CollectionKind();
    internal EntityContainerEntitySet get_EntitySet();
    internal bool get_EntitySetPathDefined();
    internal ModelFunctionTypeElement get_SubElement();
    internal virtual TypeUsage get_TypeUsage();
    internal virtual SchemaElement Clone(SchemaElement parentElement);
    protected virtual bool HandleAttribute(XmlReader reader);
    internal bool ResolveNestedTypeNames(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    protected virtual bool HandleElement(XmlReader reader);
    protected void HandleCollectionTypeElement(XmlReader reader);
    protected void HandleReferenceTypeElement(XmlReader reader);
    protected void HandleTypeRefElement(XmlReader reader);
    protected void HandleRowTypeElement(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
}
internal class System.Data.EntityModel.SchemaObjectModel.ReturnValue`1 : object {
    internal bool Succeeded { get; }
    internal T Value { get; internal set; }
    internal bool get_Succeeded();
    internal T get_Value();
    internal void set_Value(T value);
}
internal class System.Data.EntityModel.SchemaObjectModel.RowTypeElement : ModelFunctionTypeElement {
    internal SchemaElementLookUpTable`1<RowTypePropertyElement> Properties { get; }
    internal RowTypeElement(SchemaElement parentElement);
    protected virtual bool HandleElement(XmlReader reader);
    protected void HandlePropertyElement(XmlReader reader);
    internal SchemaElementLookUpTable`1<RowTypePropertyElement> get_Properties();
    internal virtual void ResolveTopLevelNames();
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    internal virtual void Validate();
}
internal class System.Data.EntityModel.SchemaObjectModel.RowTypePropertyElement : ModelFunctionTypeElement {
    internal RowTypePropertyElement(SchemaElement parentElement);
    internal virtual void ResolveTopLevelNames();
    protected virtual bool HandleAttribute(XmlReader reader);
    protected void HandleTypeAttribute(XmlReader reader);
    protected virtual bool HandleElement(XmlReader reader);
    protected void HandleCollectionTypeElement(XmlReader reader);
    protected void HandleReferenceTypeElement(XmlReader reader);
    protected void HandleTypeRefElement(XmlReader reader);
    protected void HandleRowTypeElement(XmlReader reader);
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    internal bool ValidateIsScalar();
    internal virtual void Validate();
}
internal class System.Data.EntityModel.SchemaObjectModel.ScalarType : SchemaType {
    internal static string DateTimeFormat;
    internal static string TimeFormat;
    internal static string DateTimeOffsetFormat;
    public PrimitiveTypeKind TypeKind { get; }
    public PrimitiveType Type { get; }
    internal ScalarType(Schema parentElement, string typeName, PrimitiveType primitiveType);
    private static ScalarType();
    public bool TryParse(string text, Object& value);
    public PrimitiveTypeKind get_TypeKind();
    public PrimitiveType get_Type();
    internal static Byte[] ConvertToByteArray(string text);
}
[DebuggerDisplayAttribute("Namespace={Namespace}, PublicKeyToken={PublicKeyToken}, Version={Version}")]
internal class System.Data.EntityModel.SchemaObjectModel.Schema : SchemaElement {
    protected string _namespaceName;
    internal string SchemaXmlNamespace { get; private set; }
    internal DbProviderManifest ProviderManifest { get; }
    internal double SchemaVersion { get; internal set; }
    internal string Alias { get; private set; }
    internal string Namespace { get; private set; }
    internal string Location { get; private set; }
    internal MetadataProperty SchemaSource { get; }
    internal List`1<SchemaType> SchemaTypes { get; }
    public string FQName { get; }
    internal AliasResolver AliasResolver { get; }
    internal SchemaDataModelOption DataModel { get; }
    internal SchemaManager SchemaManager { get; }
    internal bool UseStrongSpatialTypes { get; }
    public Schema(SchemaManager schemaManager);
    private static Schema();
    internal IList`1<EdmSchemaError> Resolve();
    internal IList`1<EdmSchemaError> ValidateSchema();
    internal void AddError(EdmSchemaError error);
    internal IList`1<EdmSchemaError> Parse(XmlReader sourceReader, string sourceLocation);
    internal static XmlReaderSettings CreateEdmStandardXmlReaderSettings();
    internal void OnSchemaValidationEvent(object sender, ValidationEventArgs e);
    public bool IsParseableXmlNamespace(string xmlNamespaceUri, bool isAttribute);
    public bool IsValidateableXmlNamespace(string xmlNamespaceUri, bool isAttribute);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    internal virtual void Validate();
    internal string get_SchemaXmlNamespace();
    private void set_SchemaXmlNamespace(string value);
    internal DbProviderManifest get_ProviderManifest();
    internal double get_SchemaVersion();
    internal void set_SchemaVersion(double value);
    internal virtual string get_Alias();
    private void set_Alias(string value);
    internal virtual string get_Namespace();
    private void set_Namespace(string value);
    internal string get_Location();
    private void set_Location(string value);
    internal MetadataProperty get_SchemaSource();
    internal List`1<SchemaType> get_SchemaTypes();
    public virtual string get_FQName();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected virtual void HandleAttributesComplete();
    protected virtual void SkipThroughElement(XmlReader reader);
    internal bool ResolveTypeName(SchemaElement usingElement, string typeName, SchemaType& type);
    internal AliasResolver get_AliasResolver();
    internal SchemaDataModelOption get_DataModel();
    internal SchemaManager get_SchemaManager();
    internal bool get_UseStrongSpatialTypes();
    protected void TryAddType(SchemaType schemaType, bool doNotAddErrorForEmptyName);
    protected void TryAddContainer(SchemaType schemaType, bool doNotAddErrorForEmptyName);
    protected void AddFunctionType(Function function);
}
internal class System.Data.EntityModel.SchemaObjectModel.SchemaComplexType : StructuredType {
    internal SchemaComplexType(Schema parentElement);
    internal virtual void ResolveTopLevelNames();
    protected virtual bool HandleElement(XmlReader reader);
}
internal enum System.Data.EntityModel.SchemaObjectModel.SchemaDataModelOption : Enum {
    public int value__;
    public static SchemaDataModelOption EntityDataModel;
    public static SchemaDataModelOption ProviderDataModel;
    public static SchemaDataModelOption ProviderManifestModel;
}
[DebuggerDisplayAttribute("Name={Name}")]
internal abstract class System.Data.EntityModel.SchemaObjectModel.SchemaElement : object {
    internal static string XmlNamespaceNamespace;
    protected static int MaxValueVersionComponent;
    internal int LineNumber { get; }
    internal int LinePosition { get; }
    public string Name { get; public set; }
    internal DocumentationElement Documentation { get; internal set; }
    internal SchemaElement ParentElement { get; private set; }
    internal Schema Schema { get; internal set; }
    public string FQName { get; }
    public string Identity { get; }
    public List`1<MetadataProperty> OtherContent { get; }
    protected string SchemaLocation { get; }
    internal SchemaElement(SchemaElement parentElement);
    internal SchemaElement(SchemaElement parentElement, string name);
    internal int get_LineNumber();
    internal int get_LinePosition();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    internal DocumentationElement get_Documentation();
    internal void set_Documentation(DocumentationElement value);
    internal SchemaElement get_ParentElement();
    private void set_ParentElement(SchemaElement value);
    internal Schema get_Schema();
    internal void set_Schema(Schema value);
    public virtual string get_FQName();
    public virtual string get_Identity();
    public List`1<MetadataProperty> get_OtherContent();
    internal virtual void Validate();
    internal void AddError(ErrorCode errorCode, EdmSchemaErrorSeverity severity, int lineNumber, int linePosition, object message);
    internal void AddError(ErrorCode errorCode, EdmSchemaErrorSeverity severity, XmlReader reader, object message);
    internal void AddError(ErrorCode errorCode, EdmSchemaErrorSeverity severity, object message);
    internal void AddError(ErrorCode errorCode, EdmSchemaErrorSeverity severity, SchemaElement element, object message);
    internal void Parse(XmlReader reader);
    internal void GetPositionInfo(XmlReader reader);
    internal static void GetPositionInfo(XmlReader reader, Int32& lineNumber, Int32& linePosition);
    internal virtual void ResolveTopLevelNames();
    internal virtual void ResolveSecondLevelNames();
    protected virtual void HandleAttributesComplete();
    protected virtual void HandleChildElementsComplete();
    protected string HandleUndottedNameAttribute(XmlReader reader, string field);
    protected ReturnValue`1<string> HandleDottedNameAttribute(XmlReader reader, string field, Func`2<object, string> errorFormat);
    internal bool HandleIntAttribute(XmlReader reader, Int32& field);
    internal bool HandleByteAttribute(XmlReader reader, Byte& field);
    internal bool HandleBoolAttribute(XmlReader reader, Boolean& field);
    protected virtual void SkipThroughElement(XmlReader reader);
    protected void SkipElement(XmlReader reader);
    protected string get_SchemaLocation();
    protected virtual bool HandleText(XmlReader reader);
    internal virtual SchemaElement Clone(SchemaElement parentElement);
    protected virtual void HandleNameAttribute(XmlReader reader);
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    internal static bool CanHandleAttribute(XmlReader reader, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
    internal static MetadataProperty CreateMetadataPropertyFromOtherNamespaceXmlArtifact(string xmlNamespaceUri, string artifactName, object value);
    protected bool CanHandleElement(XmlReader reader, string localName);
    protected virtual bool HandleElement(XmlReader reader);
    [ConditionalAttribute("DEBUG")]
internal static void AssertReaderConsidersSchemaInvalid(XmlReader reader);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.EntityModel.SchemaObjectModel.SchemaElementLookUpTable`1 : object {
    public int Count { get; }
    public T Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual T LookUpEquivalentKey(string key);
    public sealed virtual T get_Item(string key);
    public T GetElementAt(int index);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerator`1<S> GetFilteredEnumerator();
    public AddErrorKind TryAdd(T type);
    public void Add(T type, bool doNotAddErrorForEmptyName, Func`2<object, string> duplicateKeyErrorFormat);
}
internal class System.Data.EntityModel.SchemaObjectModel.SchemaElementLookUpTableEnumerator`2 : object {
    public T Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public SchemaElementLookUpTableEnumerator`2(Dictionary`2<string, S> data, List`1<string> keysInOrder);
    public sealed virtual void Reset();
    public sealed virtual T get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Dispose();
}
[DebuggerDisplayAttribute("Name={Name}, BaseType={BaseType.FQName}, HasKeys={HasKeys}")]
internal class System.Data.EntityModel.SchemaObjectModel.SchemaEntityType : StructuredType {
    public EntityKeyElement KeyElement { get; }
    public IList`1<PropertyRefElement> DeclaredKeyProperties { get; }
    public IList`1<PropertyRefElement> KeyProperties { get; }
    public ISchemaElementLookUpTable`1<NavigationProperty> NavigationProperties { get; }
    public SchemaEntityType(Schema parentElement);
    private static SchemaEntityType();
    internal virtual void ResolveTopLevelNames();
    protected virtual bool HandleAttribute(XmlReader reader);
    public EntityKeyElement get_KeyElement();
    public IList`1<PropertyRefElement> get_DeclaredKeyProperties();
    public IList`1<PropertyRefElement> get_KeyProperties();
    public ISchemaElementLookUpTable`1<NavigationProperty> get_NavigationProperties();
    internal virtual void Validate();
    protected virtual bool HandleElement(XmlReader reader);
}
internal class System.Data.EntityModel.SchemaObjectModel.SchemaEnumMember : SchemaElement {
    public Nullable`1<long> Value { get; public set; }
    public SchemaEnumMember(SchemaElement parentElement);
    public Nullable`1<long> get_Value();
    public void set_Value(Nullable`1<long> value);
    protected virtual bool HandleAttribute(XmlReader reader);
}
internal class System.Data.EntityModel.SchemaObjectModel.SchemaEnumType : SchemaType {
    public bool IsFlags { get; }
    public SchemaType UnderlyingType { get; }
    public IEnumerable`1<SchemaEnumMember> EnumMembers { get; }
    public SchemaEnumType(Schema parentElement);
    public bool get_IsFlags();
    public SchemaType get_UnderlyingType();
    public IEnumerable`1<SchemaEnumMember> get_EnumMembers();
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
}
[DebuggerDisplayAttribute("DataModel={DataModel}")]
internal class System.Data.EntityModel.SchemaObjectModel.SchemaManager : object {
    public double SchemaVersion { get; }
    internal SchemaElementLookUpTable`1<SchemaType> SchemaTypes { get; }
    internal SchemaDataModelOption DataModel { get; }
    internal PrimitiveSchema PrimitiveSchema { get; }
    internal AttributeValueNotification ProviderNotification { get; }
    internal AttributeValueNotification ProviderManifestTokenNotification { get; }
    public static IList`1<EdmSchemaError> LoadProviderManifest(XmlReader xmlReader, string location, bool checkForSystemNamespace, Schema& schema);
    public static void NoOpAttributeValueNotification(string attributeValue, Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError);
    public static IList`1<EdmSchemaError> ParseAndValidate(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> sourceFilePaths, SchemaDataModelOption dataModel, DbProviderManifest providerManifest, IList`1& schemaCollection);
    public static IList`1<EdmSchemaError> ParseAndValidate(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> sourceFilePaths, SchemaDataModelOption dataModel, AttributeValueNotification providerNotification, AttributeValueNotification providerManifestTokenNotification, ProviderManifestNeeded providerManifestNeeded, IList`1& schemaCollection);
    internal static bool TryGetSchemaVersion(XmlReader reader, Double& version, DataSpace& dataSpace);
    internal static bool TryGetSchemaVersion(string xmlNamespaceName, Double& version, DataSpace& dataSpace);
    public double get_SchemaVersion();
    public void AddSchema(Schema schema);
    public bool TryResolveType(string namespaceName, string typeName, SchemaType& schemaType);
    public bool IsValidNamespaceName(string namespaceName);
    internal static bool TryGetBaseUri(XmlReader xmlReader, String& location);
    internal SchemaElementLookUpTable`1<SchemaType> get_SchemaTypes();
    internal DbProviderManifest GetProviderManifest(Action`3<string, ErrorCode, EdmSchemaErrorSeverity> addError);
    internal SchemaDataModelOption get_DataModel();
    internal void EnsurePrimitiveSchemaIsLoaded(double forSchemaVersion);
    internal PrimitiveSchema get_PrimitiveSchema();
    internal AttributeValueNotification get_ProviderNotification();
    internal AttributeValueNotification get_ProviderManifestTokenNotification();
}
internal abstract class System.Data.EntityModel.SchemaObjectModel.SchemaType : SchemaElement {
    public string Namespace { get; }
    public string Identity { get; }
    public string FQName { get; }
    internal SchemaType(Schema parentElement);
    public string get_Namespace();
    public virtual string get_Identity();
    public virtual string get_FQName();
}
internal class System.Data.EntityModel.SchemaObjectModel.SridFacetDescriptionElement : FacetDescriptionElement {
    public EdmType FacetType { get; }
    public SridFacetDescriptionElement(TypeElement type, string name);
    public virtual EdmType get_FacetType();
    protected virtual void HandleDefaultAttribute(XmlReader reader);
}
internal class System.Data.EntityModel.SchemaObjectModel.StructuredProperty : Property {
    public SchemaType Type { get; }
    public TypeUsage TypeUsage { get; }
    public bool Nullable { get; }
    public string Default { get; }
    public object DefaultAsObject { get; }
    public CollectionKind CollectionKind { get; }
    internal string UnresolvedType { get; internal set; }
    internal StructuredProperty(StructuredType parentElement);
    public virtual SchemaType get_Type();
    public TypeUsage get_TypeUsage();
    public bool get_Nullable();
    public string get_Default();
    public object get_DefaultAsObject();
    public CollectionKind get_CollectionKind();
    internal virtual void ResolveTopLevelNames();
    internal void EnsureEnumTypeFacets(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    protected virtual SchemaType ResolveType(string typeName);
    internal string get_UnresolvedType();
    internal void set_UnresolvedType(string value);
    internal virtual void Validate();
    protected virtual bool HandleAttribute(XmlReader reader);
}
internal abstract class System.Data.EntityModel.SchemaObjectModel.StructuredType : SchemaType {
    public StructuredType BaseType { get; private set; }
    public ISchemaElementLookUpTable`1<StructuredProperty> Properties { get; }
    protected SchemaElementLookUpTable`1<SchemaElement> NamedMembers { get; }
    public bool IsTypeHierarchyRoot { get; }
    public bool IsAbstract { get; }
    protected string UnresolvedBaseType { get; protected set; }
    protected StructuredType(Schema parentElement);
    private static StructuredType();
    public StructuredType get_BaseType();
    private void set_BaseType(StructuredType value);
    public ISchemaElementLookUpTable`1<StructuredProperty> get_Properties();
    protected SchemaElementLookUpTable`1<SchemaElement> get_NamedMembers();
    public virtual bool get_IsTypeHierarchyRoot();
    public bool get_IsAbstract();
    public StructuredProperty FindProperty(string name);
    public bool IsOfType(StructuredType baseType);
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
    protected void AddMember(SchemaElement newMember);
    protected string get_UnresolvedBaseType();
    protected void set_UnresolvedBaseType(string value);
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
}
internal class System.Data.EntityModel.SchemaObjectModel.TextElement : SchemaElement {
    public string Value { get; private set; }
    public TextElement(SchemaElement parentElement);
    public string get_Value();
    private void set_Value(string value);
    protected virtual bool HandleText(XmlReader reader);
}
internal class System.Data.EntityModel.SchemaObjectModel.TypeElement : SchemaType {
    public string Name { get; public set; }
    public PrimitiveType PrimitiveType { get; }
    public IEnumerable`1<FacetDescription> FacetDescriptions { get; }
    public TypeElement(Schema parent);
    protected virtual bool HandleElement(XmlReader reader);
    protected virtual bool HandleAttribute(XmlReader reader);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public PrimitiveType get_PrimitiveType();
    public IEnumerable`1<FacetDescription> get_FacetDescriptions();
    internal virtual void ResolveTopLevelNames();
    internal virtual void Validate();
}
internal enum System.Data.EntityModel.SchemaObjectModel.TypeModifier : Enum {
    public int value__;
    public static TypeModifier None;
    public static TypeModifier Array;
    public static TypeModifier Set;
    public static TypeModifier Table;
}
internal class System.Data.EntityModel.SchemaObjectModel.TypeRefElement : ModelFunctionTypeElement {
    internal TypeRefElement(SchemaElement parentElement);
    protected virtual bool HandleAttribute(XmlReader reader);
    protected void HandleTypeAttribute(XmlReader reader);
    internal virtual bool ResolveNameAndSetTypeUsage(ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
    internal virtual void WriteIdentity(StringBuilder builder);
    internal virtual TypeUsage GetTypeUsage();
    internal virtual void Validate();
}
internal class System.Data.EntityModel.SchemaObjectModel.TypeUsageBuilder : object {
    internal TypeUsage TypeUsage { get; }
    internal bool Nullable { get; }
    internal string Default { get; }
    internal object DefaultAsObject { get; }
    internal bool HasUserDefinedFacets { get; }
    internal TypeUsageBuilder(SchemaElement element);
    internal TypeUsage get_TypeUsage();
    internal bool get_Nullable();
    internal string get_Default();
    internal object get_DefaultAsObject();
    internal bool get_HasUserDefinedFacets();
    internal void ValidateAndSetTypeUsage(EdmType edmType, bool complainOnMissingFacet);
    internal void ValidateAndSetTypeUsage(ScalarType scalar, bool complainOnMissingFacet);
    internal void ValidateEnumFacets(SchemaEnumType schemaEnumType);
    internal bool HandleAttribute(XmlReader reader);
    internal void HandleMaxLengthAttribute(XmlReader reader);
    internal void HandleSridAttribute(XmlReader reader);
    internal void HandleStoreGeneratedPatternAttribute(XmlReader reader);
    internal void HandleConcurrencyModeAttribute(XmlReader reader);
    internal void ValidateDefaultValue(SchemaType type);
}
internal class System.Data.EntityModel.SchemaObjectModel.UsingElement : SchemaElement {
    public string Alias { get; private set; }
    public string NamespaceName { get; private set; }
    public string FQName { get; }
    internal UsingElement(Schema parentElement);
    public virtual string get_Alias();
    private void set_Alias(string value);
    public virtual string get_NamespaceName();
    private void set_NamespaceName(string value);
    public virtual string get_FQName();
    protected virtual bool ProhibitAttribute(string namespaceUri, string localName);
    protected virtual bool HandleAttribute(XmlReader reader);
}
internal static class System.Data.EntityModel.SchemaObjectModel.Utils : object {
    private static Utils();
    internal static void ExtractNamespaceAndName(SchemaDataModelOption dataModel, string qualifiedTypeName, String& namespaceName, String& name);
    internal static string ExtractTypeName(SchemaDataModelOption dataModel, string qualifiedTypeName);
    internal static string GetEverythingBeforeLastPeriod(string qualifiedTypeName);
    public static bool GetString(Schema schema, XmlReader reader, String& value);
    public static bool GetDottedName(Schema schema, XmlReader reader, String& name);
    internal static bool ValidateDottedName(Schema schema, XmlReader reader, string name);
    public static bool GetUndottedName(Schema schema, XmlReader reader, String& name);
    internal static bool ValidUndottedName(string name);
    public static bool GetBool(Schema schema, XmlReader reader, Boolean& value);
    public static bool GetInt(Schema schema, XmlReader reader, Int32& value);
    public static bool GetByte(Schema schema, XmlReader reader, Byte& value);
    public static int CompareNames(string lhsName, string rhsName);
}
internal static class System.Data.EntityModel.SchemaObjectModel.ValidationHelper : object {
    internal static void ValidateFacets(SchemaElement element, SchemaType type, TypeUsageBuilder typeUsageBuilder);
    internal static void ValidateTypeDeclaration(SchemaElement element, SchemaType type, SchemaElement typeSubElement);
    internal static void ValidateRefType(SchemaElement element, SchemaType type);
}
internal class System.Data.EntityModel.SchemaObjectModel.XmlSchemaResource : ValueType {
    internal string NamespaceUri;
    internal string ResourceName;
    internal XmlSchemaResource[] ImportedSchemas;
    public XmlSchemaResource(string namespaceUri, string resourceName, XmlSchemaResource[] importedSchemas);
    public XmlSchemaResource(string namespaceUri, string resourceName);
    private static XmlSchemaResource();
    internal static Dictionary`2<string, XmlSchemaResource> GetMetadataSchemaResourceMap(double schemaVersion);
    internal static void AddStoreSchemaResourceMapEntries(Dictionary`2<string, XmlSchemaResource> schemaResourceMap, double schemaVersion);
    internal static void AddMappingSchemaResourceMapEntries(Dictionary`2<string, XmlSchemaResource> schemaResourceMap, double schemaVersion);
    internal static void AddEdmSchemaResourceMapEntries(Dictionary`2<string, XmlSchemaResource> schemaResourceMap, double schemaVersion);
}
internal class System.Data.EntityRes : object {
    internal static string EntityKey_DataRecordMustBeEntity;
    internal static string EntityKey_EntitySetDoesNotMatch;
    internal static string EntityKey_EntityTypesDoNotMatch;
    internal static string EntityKey_IncorrectNumberOfKeyValuePairs;
    internal static string EntityKey_IncorrectValueType;
    internal static string EntityKey_NoCorrespondingOSpaceTypeForEnumKeyMember;
    internal static string EntityKey_MissingKeyValue;
    internal static string EntityKey_NoNullsAllowedInKeyValuePairs;
    internal static string EntityKey_UnexpectedNull;
    internal static string EntityKey_DoesntMatchKeyOnEntity;
    internal static string EntityKey_EntityKeyMustHaveValues;
    internal static string EntityKey_InvalidQualifiedEntitySetName;
    internal static string EntityKey_MissingEntitySetName;
    internal static string EntityKey_InvalidName;
    internal static string EntityKey_CannotChangeKey;
    internal static string EntityTypesDoNotAgree;
    internal static string EntityKey_NullKeyValue;
    internal static string EdmMembersDefiningTypeDoNotAgreeWithMetadataType;
    internal static string InvalidStringArgument;
    internal static string CannotCallNoncomposableFunction;
    internal static string EntityClient_ConnectionStringMissingInfo;
    internal static string EntityClient_ValueNotString;
    internal static string EntityClient_KeywordNotSupported;
    internal static string EntityClient_NoCommandText;
    internal static string EntityClient_ConnectionStringNeededBeforeOperation;
    internal static string EntityClient_CannotReopenConnection;
    internal static string EntityClient_ConnectionNotOpen;
    internal static string EntityClient_DuplicateParameterNames;
    internal static string EntityClient_NoConnectionForCommand;
    internal static string EntityClient_NoConnectionForAdapter;
    internal static string EntityClient_ClosedConnectionForUpdate;
    internal static string EntityClient_InvalidNamedConnection;
    internal static string EntityClient_NestedNamedConnection;
    internal static string EntityClient_InvalidStoreProvider;
    internal static string EntityClient_DataReaderIsStillOpen;
    internal static string EntityClient_SettingsCannotBeChangedOnOpenConnection;
    internal static string EntityClient_ExecutingOnClosedConnection;
    internal static string EntityClient_ConnectionStateClosed;
    internal static string EntityClient_ConnectionStateBroken;
    internal static string EntityClient_CannotCloneStoreProvider;
    internal static string EntityClient_UnsupportedCommandType;
    internal static string EntityClient_ErrorInClosingConnection;
    internal static string EntityClient_ErrorInBeginningTransaction;
    internal static string EntityClient_ExtraParametersWithNamedConnection;
    internal static string EntityClient_CommandDefinitionPreparationFailed;
    internal static string EntityClient_CommandDefinitionExecutionFailed;
    internal static string EntityClient_CommandExecutionFailed;
    internal static string EntityClient_StoreReaderFailed;
    internal static string EntityClient_FailedToGetInformation;
    internal static string EntityClient_TooFewColumns;
    internal static string EntityClient_InvalidParameterName;
    internal static string EntityClient_EmptyParameterName;
    internal static string EntityClient_ReturnedNullOnProviderMethod;
    internal static string EntityClient_CannotDeduceDbType;
    internal static string EntityClient_InvalidParameterDirection;
    internal static string EntityClient_UnknownParameterType;
    internal static string EntityClient_UnsupportedDbType;
    internal static string EntityClient_DoesNotImplementIServiceProvider;
    internal static string EntityClient_IncompatibleNavigationPropertyResult;
    internal static string EntityClient_TransactionAlreadyStarted;
    internal static string EntityClient_InvalidTransactionForCommand;
    internal static string EntityClient_NoStoreConnectionForUpdate;
    internal static string EntityClient_CommandTreeMetadataIncompatible;
    internal static string EntityClient_ProviderGeneralError;
    internal static string EntityClient_ProviderSpecificError;
    internal static string EntityClient_FunctionImportEmptyCommandText;
    internal static string EntityClient_UnableToFindFunctionImportContainer;
    internal static string EntityClient_UnableToFindFunctionImport;
    internal static string EntityClient_FunctionImportMustBeNonComposable;
    internal static string EntityClient_UnmappedFunctionImport;
    internal static string EntityClient_InvalidStoredProcedureCommandText;
    internal static string EntityClient_ItemCollectionsNotRegisteredInWorkspace;
    internal static string EntityClient_ConnectionMustBeClosed;
    internal static string EntityClient_DbConnectionHasNoProvider;
    internal static string EntityClient_RequiresNonStoreCommandTree;
    internal static string EntityClient_CannotReprepareCommandDefinitionBasedCommand;
    internal static string EntityClient_EntityParameterEdmTypeNotScalar;
    internal static string EntityClient_EntityParameterInconsistentEdmType;
    internal static string EntityClient_CannotGetCommandText;
    internal static string EntityClient_CannotSetCommandText;
    internal static string EntityClient_CannotGetCommandTree;
    internal static string EntityClient_CannotSetCommandTree;
    internal static string ELinq_ExpressionMustBeIQueryable;
    internal static string ELinq_UnsupportedExpressionType;
    internal static string ELinq_UnsupportedUseOfContextParameter;
    internal static string ELinq_UnboundParameterExpression;
    internal static string ELinq_UnsupportedConstructor;
    internal static string ELinq_UnsupportedInitializers;
    internal static string ELinq_UnsupportedBinding;
    internal static string ELinq_UnsupportedMethod;
    internal static string ELinq_UnsupportedMethodSuggestedAlternative;
    internal static string ELinq_ThenByDoesNotFollowOrderBy;
    internal static string ELinq_UnrecognizedMember;
    internal static string ELinq_UnresolvableFunctionForMethod;
    internal static string ELinq_UnresolvableFunctionForMethodAmbiguousMatch;
    internal static string ELinq_UnresolvableFunctionForMethodNotFound;
    internal static string ELinq_UnresolvableFunctionForMember;
    internal static string ELinq_UnresolvableStoreFunctionForMember;
    internal static string ELinq_UnresolvableFunctionForExpression;
    internal static string ELinq_UnresolvableStoreFunctionForExpression;
    internal static string ELinq_UnsupportedType;
    internal static string ELinq_UnsupportedNullConstant;
    internal static string ELinq_UnsupportedConstant;
    internal static string ELinq_UnsupportedCast;
    internal static string ELinq_UnsupportedIsOrAs;
    internal static string ELinq_UnsupportedQueryableMethod;
    internal static string ELinq_InvalidOfTypeResult;
    internal static string ELinq_UnsupportedNominalType;
    internal static string ELinq_UnsupportedEnumerableType;
    internal static string ELinq_UnsupportedHeterogeneousInitializers;
    internal static string ELinq_UnsupportedDifferentContexts;
    internal static string ELinq_UnsupportedCastToDecimal;
    internal static string ELinq_UnsupportedKeySelector;
    internal static string ELinq_CreateOrderedEnumerableNotSupported;
    internal static string ELinq_UnsupportedPassthrough;
    internal static string ELinq_UnexpectedTypeForNavigationProperty;
    internal static string ELinq_SkipWithoutOrder;
    internal static string ELinq_PropertyIndexNotSupported;
    internal static string ELinq_NotPropertyOrField;
    internal static string ELinq_UnsupportedStringRemoveCase;
    internal static string ELinq_UnsupportedTrimStartTrimEndCase;
    internal static string ELinq_UnsupportedVBDatePartNonConstantInterval;
    internal static string ELinq_UnsupportedVBDatePartInvalidInterval;
    internal static string ELinq_UnsupportedAsUnicodeAndAsNonUnicode;
    internal static string ELinq_UnsupportedComparison;
    internal static string ELinq_UnsupportedRefComparison;
    internal static string ELinq_UnsupportedRowComparison;
    internal static string ELinq_UnsupportedRowMemberComparison;
    internal static string ELinq_UnsupportedRowTypeComparison;
    internal static string ELinq_AnonymousType;
    internal static string ELinq_ClosureType;
    internal static string ELinq_UnhandledExpressionType;
    internal static string ELinq_UnhandledBindingType;
    internal static string ELinq_UnsupportedNestedFirst;
    internal static string ELinq_UnsupportedNestedSingle;
    internal static string ELinq_UnsupportedInclude;
    internal static string ELinq_UnsupportedMergeAs;
    internal static string ELinq_MethodNotDirectlyCallable;
    internal static string ELinq_CycleDetected;
    internal static string ELinq_EdmFunctionAttributeParameterNameNotValid;
    internal static string ELinq_EdmFunctionAttributedFunctionWithWrongReturnType;
    internal static string ELinq_EdmFunctionDirectCall;
    internal static string CompiledELinq_UnsupportedParameterTypes;
    internal static string CompiledELinq_UnsupportedNamedParameterType;
    internal static string CompiledELinq_UnsupportedNamedParameterUseAsType;
    internal static string Update_UnsupportedExpressionKind;
    internal static string Update_UnsupportedCastArgument;
    internal static string Update_UnsupportedExtentType;
    internal static string Update_ConstraintCycle;
    internal static string Update_UnsupportedJoinType;
    internal static string Update_UnsupportedProjection;
    internal static string Update_ConcurrencyError;
    internal static string Update_MissingEntity;
    internal static string Update_RelationshipCardinalityConstraintViolation;
    internal static string Update_GeneralExecutionException;
    internal static string Update_MissingRequiredEntity;
    internal static string Update_RelationshipCardinalityViolation;
    internal static string Update_NotSupportedServerGenKey;
    internal static string Update_NotSupportedIdentityType;
    internal static string Update_NotSupportedComputedKeyColumn;
    internal static string Update_AmbiguousServerGenIdentifier;
    internal static string Update_WorkspaceMismatch;
    internal static string Update_MissingRequiredRelationshipValue;
    internal static string Update_MissingResultColumn;
    internal static string Update_NullReturnValueForNonNullableMember;
    internal static string Update_ReturnValueHasUnexpectedType;
    internal static string Update_SqlEntitySetWithoutDmlFunctions;
    internal static string Update_UnableToConvertRowsAffectedParameterToInt32;
    internal static string Update_MappingNotFound;
    internal static string Update_ModifyingIdentityColumn;
    internal static string Update_GeneratedDependent;
    internal static string Update_ReferentialConstraintIntegrityViolation;
    internal static string Update_ErrorLoadingRecord;
    internal static string Update_NullValue;
    internal static string Update_CircularRelationships;
    internal static string Update_RelationshipCardinalityConstraintViolationSingleValue;
    internal static string Update_MissingFunctionMapping;
    internal static string Update_InvalidChanges;
    internal static string Update_DuplicateKeys;
    internal static string Update_AmbiguousForeignKey;
    internal static string Update_InsertingOrUpdatingReferenceToDeletedEntity;
    internal static string ViewGen_Extent;
    internal static string ViewGen_Null;
    internal static string ViewGen_CommaBlank;
    internal static string ViewGen_Entities;
    internal static string ViewGen_Tuples;
    internal static string ViewGen_NotNull;
    internal static string ViewGen_NegatedCellConstant;
    internal static string ViewGen_Error;
    internal static string ViewGen_AND;
    internal static string Viewgen_CannotGenerateQueryViewUnderNoValidation;
    internal static string ViewGen_Missing_Sets_Mapping;
    internal static string ViewGen_Missing_Type_Mapping;
    internal static string ViewGen_Missing_Set_Mapping;
    internal static string ViewGen_Concurrency_Derived_Class;
    internal static string ViewGen_Concurrency_Invalid_Condition;
    internal static string ViewGen_TableKey_Missing;
    internal static string ViewGen_EntitySetKey_Missing;
    internal static string ViewGen_AssociationSetKey_Missing;
    internal static string ViewGen_Cannot_Recover_Attributes;
    internal static string ViewGen_Cannot_Recover_Types;
    internal static string ViewGen_Cannot_Disambiguate_MultiConstant;
    internal static string ViewGen_No_Default_Value;
    internal static string ViewGen_No_Default_Value_For_Configuration;
    internal static string ViewGen_KeyConstraint_Violation;
    internal static string ViewGen_KeyConstraint_Update_Violation_EntitySet;
    internal static string ViewGen_KeyConstraint_Update_Violation_AssociationSet;
    internal static string ViewGen_AssociationEndShouldBeMappedToKey;
    internal static string ViewGen_Duplicate_CProperties;
    internal static string ViewGen_Duplicate_CProperties_IsMapped;
    internal static string ViewGen_NotNull_No_Projected_Slot;
    internal static string ViewGen_InvalidCondition;
    internal static string ViewGen_NonKeyProjectedWithOverlappingPartitions;
    internal static string ViewGen_CQ_PartitionConstraint;
    internal static string ViewGen_CQ_DomainConstraint;
    internal static string ViewGen_OneOfConst_MustBeNonNullable;
    internal static string ViewGen_OneOfConst_MustBeNull;
    internal static string ViewGen_OneOfConst_MustBeEqualTo;
    internal static string ViewGen_OneOfConst_MustNotBeEqualTo;
    internal static string ViewGen_OneOfConst_MustBeOneOf;
    internal static string ViewGen_OneOfConst_MustNotBeOneOf;
    internal static string ViewGen_OneOfConst_IsNonNullable;
    internal static string ViewGen_OneOfConst_IsEqualTo;
    internal static string ViewGen_OneOfConst_IsNotEqualTo;
    internal static string ViewGen_OneOfConst_IsOneOf;
    internal static string ViewGen_OneOfConst_IsNotOneOf;
    internal static string ViewGen_OneOfConst_IsOneOfTypes;
    internal static string ViewGen_ErrorLog;
    internal static string ViewGen_ErrorLog2;
    internal static string ViewGen_Foreign_Key_Missing_Table_Mapping;
    internal static string ViewGen_Foreign_Key_ParentTable_NotMappedToEnd;
    internal static string ViewGen_Foreign_Key;
    internal static string ViewGen_Foreign_Key_UpperBound_MustBeOne;
    internal static string ViewGen_Foreign_Key_LowerBound_MustBeOne;
    internal static string ViewGen_Foreign_Key_Missing_Relationship_Mapping;
    internal static string ViewGen_Foreign_Key_Not_Guaranteed_InCSpace;
    internal static string ViewGen_Foreign_Key_ColumnOrder_Incorrect;
    internal static string ViewGen_AssociationSet_AsUserString;
    internal static string ViewGen_AssociationSet_AsUserString_Negated;
    internal static string ViewGen_EntitySet_AsUserString;
    internal static string ViewGen_EntitySet_AsUserString_Negated;
    internal static string ViewGen_EntityInstanceToken;
    internal static string Viewgen_ConfigurationErrorMsg;
    internal static string ViewGen_HashOnMappingClosure_Not_Matching;
    internal static string Viewgen_RightSideNotDisjoint;
    internal static string Viewgen_QV_RewritingNotFound;
    internal static string Viewgen_NullableMappingForNonNullableColumn;
    internal static string Viewgen_ErrorPattern_ConditionMemberIsMapped;
    internal static string Viewgen_ErrorPattern_DuplicateConditionValue;
    internal static string Viewgen_ErrorPattern_TableMappedToMultipleES;
    internal static string Viewgen_ErrorPattern_Partition_Disj_Eq;
    internal static string Viewgen_ErrorPattern_NotNullConditionMappedToNullableMember;
    internal static string Viewgen_ErrorPattern_Partition_MultipleTypesMappedToSameTable_WithoutCondition;
    internal static string Viewgen_ErrorPattern_Partition_Disj_Subs_Ref;
    internal static string Viewgen_ErrorPattern_Partition_Disj_Subs;
    internal static string Viewgen_ErrorPattern_Partition_Disj_Unk;
    internal static string Viewgen_ErrorPattern_Partition_Eq_Disj;
    internal static string Viewgen_ErrorPattern_Partition_Eq_Subs_Ref;
    internal static string Viewgen_ErrorPattern_Partition_Eq_Subs;
    internal static string Viewgen_ErrorPattern_Partition_Eq_Unk;
    internal static string Viewgen_ErrorPattern_Partition_Eq_Unk_Association;
    internal static string Viewgen_ErrorPattern_Partition_Sub_Disj;
    internal static string Viewgen_ErrorPattern_Partition_Sub_Eq;
    internal static string Viewgen_ErrorPattern_Partition_Sub_Eq_Ref;
    internal static string Viewgen_ErrorPattern_Partition_Sub_Unk;
    internal static string Viewgen_NoJoinKeyOrFK;
    internal static string Viewgen_MultipleFragmentsBetweenCandSExtentWithDistinct;
    internal static string Validator_EmptyIdentity;
    internal static string Validator_CollectionHasNoTypeUsage;
    internal static string Validator_NoKeyMembers;
    internal static string Validator_FacetTypeIsNull;
    internal static string Validator_MemberHasNullDeclaringType;
    internal static string Validator_MemberHasNullTypeUsage;
    internal static string Validator_ItemAttributeHasNullTypeUsage;
    internal static string Validator_RefTypeHasNullEntityType;
    internal static string Validator_TypeUsageHasNullEdmType;
    internal static string Validator_BaseTypeHasMemberOfSameName;
    internal static string Validator_CollectionTypesCannotHaveBaseType;
    internal static string Validator_RefTypesCannotHaveBaseType;
    internal static string Validator_TypeHasNoName;
    internal static string Validator_TypeHasNoNamespace;
    internal static string Validator_FacetHasNoName;
    internal static string Validator_MemberHasNoName;
    internal static string Validator_MetadataPropertyHasNoName;
    internal static string Validator_NullableEntityKeyProperty;
    internal static string Validator_OSpace_InvalidNavPropReturnType;
    internal static string Validator_OSpace_ScalarPropertyNotPrimitive;
    internal static string Validator_OSpace_ComplexPropertyNotComplex;
    internal static string Validator_OSpace_Convention_MultipleTypesWithSameName;
    internal static string Validator_OSpace_Convention_NonPrimitiveTypeProperty;
    internal static string Validator_OSpace_Convention_MissingRequiredProperty;
    internal static string Validator_OSpace_Convention_BaseTypeIncompatible;
    internal static string Validator_OSpace_Convention_MissingOSpaceType;
    internal static string Validator_OSpace_Convention_RelationshipNotLoaded;
    internal static string Validator_OSpace_Convention_AttributeAssemblyReferenced;
    internal static string Validator_OSpace_Convention_ScalarPropertyMissginGetterOrSetter;
    internal static string Validator_OSpace_Convention_AmbiguousClrType;
    internal static string Validator_OSpace_Convention_Struct;
    internal static string Validator_OSpace_Convention_BaseTypeNotLoaded;
    internal static string Validator_OSpace_Convention_SSpaceOSpaceTypeMismatch;
    internal static string Validator_OSpace_Convention_NonMatchingUnderlyingTypes;
    internal static string Validator_UnsupportedEnumUnderlyingType;
    internal static string ExtraInfo;
    internal static string Metadata_General_Error;
    internal static string InvalidNumberOfParametersForAggregateFunction;
    internal static string InvalidParameterTypeForAggregateFunction;
    internal static string ItemCollectionAlreadyRegistered;
    internal static string InvalidSchemaEncountered;
    internal static string SystemNamespaceEncountered;
    internal static string NoCollectionForSpace;
    internal static string OperationOnReadOnlyCollection;
    internal static string OperationOnReadOnlyItem;
    internal static string EntitySetInAnotherContainer;
    internal static string InvalidKeyMember;
    internal static string InvalidFileExtension;
    internal static string NewTypeConflictsWithExistingType;
    internal static string NotValidInputPath;
    internal static string UnableToDetermineApplicationContext;
    internal static string WildcardEnumeratorReturnedNull;
    internal static string InvalidUseOfWebPath;
    internal static string UnableToFindReflectedType;
    internal static string AssemblyMissingFromAssembliesToConsider;
    internal static string InvalidCollectionSpecified;
    internal static string UnableToLoadResource;
    internal static string EdmVersionNotSupportedByRuntime;
    internal static string AtleastOneSSDLNeeded;
    internal static string InvalidMetadataPath;
    internal static string UnableToResolveAssembly;
    internal static string UnableToDetermineStoreVersion;
    internal static string DuplicatedFunctionoverloads;
    internal static string EntitySetNotInCSPace;
    internal static string TypeNotInEntitySet;
    internal static string TypeNotInAssociationSet;
    internal static string DifferentSchemaVersionInCollection;
    internal static string InvalidCollectionForMapping;
    internal static string OnlyStoreConnectionsSupported;
    internal static string StoreItemCollectionMustHaveOneArtifact;
    internal static string CheckArgumentContainsNullFailed;
    internal static string InvalidRelationshipSetName;
    internal static string MemberInvalidIdentity;
    internal static string InvalidEntitySetName;
    internal static string ItemInvalidIdentity;
    internal static string ItemDuplicateIdentity;
    internal static string NotStringTypeForTypeUsage;
    internal static string NotBinaryTypeForTypeUsage;
    internal static string NotDateTimeTypeForTypeUsage;
    internal static string NotDateTimeOffsetTypeForTypeUsage;
    internal static string NotTimeTypeForTypeUsage;
    internal static string NotDecimalTypeForTypeUsage;
    internal static string ArrayTooSmall;
    internal static string MoreThanOneItemMatchesIdentity;
    internal static string MissingDefaultValueForConstantFacet;
    internal static string MinAndMaxValueMustBeSameForConstantFacet;
    internal static string BothMinAndMaxValueMustBeSpecifiedForNonConstantFacet;
    internal static string MinAndMaxValueMustBeDifferentForNonConstantFacet;
    internal static string MinAndMaxMustBePositive;
    internal static string MinMustBeLessThanMax;
    internal static string SameRoleNameOnRelationshipAttribute;
    internal static string RoleTypeInEdmRelationshipAttributeIsInvalidType;
    internal static string TargetRoleNameInNavigationPropertyNotValid;
    internal static string RelationshipNameInNavigationPropertyNotValid;
    internal static string NestedClassNotSupported;
    internal static string NullParameterForEdmRelationshipAttribute;
    internal static string NullRelationshipNameforEdmRelationshipAttribute;
    internal static string NavigationPropertyRelationshipEndTypeMismatch;
    internal static string AllArtifactsMustTargetSameProvider_InvariantName;
    internal static string AllArtifactsMustTargetSameProvider_ManifestToken;
    internal static string ProviderManifestTokenNotFound;
    internal static string FailedToRetrieveProviderManifest;
    internal static string InvalidMaxLengthSize;
    internal static string ArgumentMustBeCSpaceType;
    internal static string ArgumentMustBeOSpaceType;
    internal static string FailedToFindOSpaceTypeMapping;
    internal static string FailedToFindCSpaceTypeMapping;
    internal static string FailedToFindClrTypeMapping;
    internal static string GenericTypeNotSupported;
    internal static string InvalidEDMVersion;
    internal static string Mapping_General_Error;
    internal static string Mapping_InvalidContent_General;
    internal static string Mapping_InvalidContent_EntityContainer;
    internal static string Mapping_InvalidContent_StorageEntityContainer;
    internal static string Mapping_AlreadyMapped_StorageEntityContainer;
    internal static string Mapping_InvalidContent_Entity_Set;
    internal static string Mapping_InvalidContent_Entity_Type;
    internal static string Mapping_InvalidContent_AbstractEntity_FunctionMapping;
    internal static string Mapping_InvalidContent_AbstractEntity_Type;
    internal static string Mapping_InvalidContent_AbstractEntity_IsOfType;
    internal static string Mapping_InvalidContent_Entity_Type_For_Entity_Set;
    internal static string Mapping_Invalid_Association_Type_For_Association_Set;
    internal static string Mapping_InvalidContent_Table;
    internal static string Mapping_InvalidContent_Complex_Type;
    internal static string Mapping_InvalidContent_Association_Set;
    internal static string Mapping_InvalidContent_AssociationSet_Condition;
    internal static string Mapping_InvalidContent_ForeignKey_Association_Set;
    internal static string Mapping_InvalidContent_ForeignKey_Association_Set_PKtoPK;
    internal static string Mapping_InvalidContent_Association_Type;
    internal static string Mapping_InvalidContent_EndProperty;
    internal static string Mapping_InvalidContent_Association_Type_Empty;
    internal static string Mapping_InvalidContent_Table_Expected;
    internal static string Mapping_InvalidContent_Cdm_Member;
    internal static string Mapping_InvalidContent_Column;
    internal static string Mapping_InvalidContent_End;
    internal static string Mapping_InvalidContent_Container_SubElement;
    internal static string Mapping_InvalidContent_Duplicate_Cdm_Member;
    internal static string Mapping_InvalidContent_Duplicate_Condition_Member;
    internal static string Mapping_InvalidContent_ConditionMapping_Both_Members;
    internal static string Mapping_InvalidContent_ConditionMapping_Either_Members;
    internal static string Mapping_InvalidContent_ConditionMapping_Both_Values;
    internal static string Mapping_InvalidContent_ConditionMapping_Either_Values;
    internal static string Mapping_InvalidContent_ConditionMapping_NonScalar;
    internal static string Mapping_InvalidContent_ConditionMapping_InvalidPrimitiveTypeKind;
    internal static string Mapping_InvalidContent_ConditionMapping_InvalidMember;
    internal static string Mapping_InvalidContent_ConditionMapping_Computed;
    internal static string Mapping_InvalidContent_Emtpty_SetMap;
    internal static string Mapping_InvalidContent_TypeMapping_QueryView;
    internal static string Mapping_Default_OCMapping_Clr_Member;
    internal static string Mapping_Default_OCMapping_Clr_Member2;
    internal static string Mapping_Default_OCMapping_Invalid_MemberType;
    internal static string Mapping_Default_OCMapping_MemberKind_Mismatch;
    internal static string Mapping_Default_OCMapping_MultiplicityMismatch;
    internal static string Mapping_Default_OCMapping_Member_Count_Mismatch;
    internal static string Mapping_Default_OCMapping_Member_Type_Mismatch;
    internal static string Mapping_Enum_OCMapping_UnderlyingTypesMismatch;
    internal static string Mapping_Enum_OCMapping_MemberMismatch;
    internal static string Mapping_NotFound_EntityContainer;
    internal static string Mapping_Duplicate_CdmAssociationSet_StorageMap;
    internal static string Mapping_Invalid_CSRootElementMissing;
    internal static string Mapping_ConditionValueTypeMismatch;
    internal static string Mapping_Storage_InvalidSpace;
    internal static string Mapping_Invalid_Member_Mapping;
    internal static string Mapping_Invalid_CSide_ScalarProperty;
    internal static string Mapping_Duplicate_Type;
    internal static string Mapping_Duplicate_PropertyMap_CaseInsensitive;
    internal static string Mapping_Enum_EmptyValue;
    internal static string Mapping_Enum_InvalidValue;
    internal static string Mapping_InvalidMappingSchema_Parsing;
    internal static string Mapping_InvalidMappingSchema_validation;
    internal static string Mapping_Object_InvalidType;
    internal static string Mapping_Provider_WrongConnectionType;
    internal static string Mapping_Provider_WrongManifestType;
    internal static string Mapping_Views_For_Extent_Not_Generated;
    internal static string Mapping_TableName_QueryView;
    internal static string Mapping_Empty_QueryView;
    internal static string Mapping_Empty_QueryView_OfType;
    internal static string Mapping_Empty_QueryView_OfTypeOnly;
    internal static string Mapping_QueryView_PropertyMaps;
    internal static string Mapping_Invalid_QueryView;
    internal static string Mapping_Invalid_QueryView2;
    internal static string Mapping_Invalid_QueryView_Type;
    internal static string Mapping_TypeName_For_First_QueryView;
    internal static string Mapping_AllQueryViewAtCompileTime;
    internal static string Mapping_QueryViewMultipleTypeInTypeName;
    internal static string Mapping_QueryView_Duplicate_OfType;
    internal static string Mapping_QueryView_Duplicate_OfTypeOnly;
    internal static string Mapping_QueryView_TypeName_Not_Defined;
    internal static string Mapping_QueryView_For_Base_Type;
    internal static string Mapping_UnsupportedExpressionKind_QueryView;
    internal static string Mapping_UnsupportedFunctionCall_QueryView;
    internal static string Mapping_UnsupportedScanTarget_QueryView;
    internal static string Mapping_UnsupportedPropertyKind_QueryView;
    internal static string Mapping_UnsupportedInitialization_QueryView;
    internal static string Mapping_EntitySetMismatchOnAssociationSetEnd_QueryView;
    internal static string Mapping_Invalid_Query_Views_MissingSetClosure;
    internal static string Generated_View_Type_Super_Class;
    internal static string Generated_Views_Changed;
    internal static string Generated_Views_Invalid_Extent;
    internal static string Mapping_ItemWithSameNameExistsBothInCSpaceAndSSpace;
    internal static string Mapping_AbstractTypeMappingToNonAbstractType;
    internal static string Mapping_EnumTypeMappingToNonEnumType;
    internal static string StorageEntityContainerNameMismatchWhileSpecifyingPartialMapping;
    internal static string Mapping_InvalidContent_IsTypeOfNotTerminated;
    internal static string Mapping_CannotMapCLRTypeMultipleTimes;
    internal static string Mapping_ModificationFunction_In_Table_Context;
    internal static string Mapping_ModificationFunction_Multiple_Types;
    internal static string Mapping_ModificationFunction_UnknownFunction;
    internal static string Mapping_ModificationFunction_AmbiguousFunction;
    internal static string Mapping_ModificationFunction_NotValidFunction;
    internal static string Mapping_ModificationFunction_NotValidFunctionParameter;
    internal static string Mapping_ModificationFunction_MissingParameter;
    internal static string Mapping_ModificationFunction_AssociationSetDoesNotExist;
    internal static string Mapping_ModificationFunction_AssociationSetRoleDoesNotExist;
    internal static string Mapping_ModificationFunction_AssociationSetFromRoleIsNotEntitySet;
    internal static string Mapping_ModificationFunction_AssociationSetCardinality;
    internal static string Mapping_ModificationFunction_ComplexTypeNotFound;
    internal static string Mapping_ModificationFunction_WrongComplexType;
    internal static string Mapping_ModificationFunction_MissingVersion;
    internal static string Mapping_ModificationFunction_VersionMustBeOriginal;
    internal static string Mapping_ModificationFunction_VersionMustBeCurrent;
    internal static string Mapping_ModificationFunction_ParameterNotFound;
    internal static string Mapping_ModificationFunction_PropertyNotFound;
    internal static string Mapping_ModificationFunction_PropertyNotKey;
    internal static string Mapping_ModificationFunction_ParameterBoundTwice;
    internal static string Mapping_ModificationFunction_RedundantEntityTypeMapping;
    internal static string Mapping_ModificationFunction_MissingSetClosure;
    internal static string Mapping_ModificationFunction_MissingEntityType;
    internal static string Mapping_ModificationFunction_PropertyParameterTypeMismatch;
    internal static string Mapping_ModificationFunction_AssociationSetAmbiguous;
    internal static string Mapping_ModificationFunction_MultipleEndsOfAssociationMapped;
    internal static string Mapping_ModificationFunction_AmbiguousResultBinding;
    internal static string Mapping_ModificationFunction_AssociationSetNotMappedForOperation;
    internal static string Mapping_ModificationFunction_AssociationEndMappingInvalidForEntityType;
    internal static string Mapping_ModificationFunction_AssociationEndMappingForeignKeyAssociation;
    internal static string Mapping_StoreTypeMismatch_ScalarPropertyMapping;
    internal static string Mapping_DistinctFlagInReadWriteContainer;
    internal static string Mapping_ProviderReturnsNullType;
    internal static string Mapping_DifferentEdmStoreVersion;
    internal static string Mapping_DifferentMappingEdmStoreVersion;
    internal static string Mapping_FunctionImport_StoreFunctionDoesNotExist;
    internal static string Mapping_FunctionImport_FunctionImportDoesNotExist;
    internal static string Mapping_FunctionImport_FunctionImportMappedMultipleTimes;
    internal static string Mapping_FunctionImport_TargetFunctionMustBeNonComposable;
    internal static string Mapping_FunctionImport_TargetFunctionMustBeComposable;
    internal static string Mapping_FunctionImport_TargetParameterHasNoCorrespondingImportParameter;
    internal static string Mapping_FunctionImport_ImportParameterHasNoCorrespondingTargetParameter;
    internal static string Mapping_FunctionImport_IncompatibleParameterMode;
    internal static string Mapping_FunctionImport_IncompatibleParameterType;
    internal static string Mapping_FunctionImport_IncompatibleEnumParameterType;
    internal static string Mapping_FunctionImport_RowsAffectedParameterDoesNotExist;
    internal static string Mapping_FunctionImport_RowsAffectedParameterHasWrongType;
    internal static string Mapping_FunctionImport_RowsAffectedParameterHasWrongMode;
    internal static string Mapping_FunctionImport_EntityTypeMappingForFunctionNotReturningEntitySet;
    internal static string Mapping_FunctionImport_InvalidContentEntityTypeForEntitySet;
    internal static string Mapping_FunctionImport_ConditionValueTypeMismatch;
    internal static string Mapping_FunctionImport_UnsupportedType;
    internal static string Mapping_FunctionImport_ResultMappingCountDoesNotMatchResultCount;
    internal static string Mapping_FunctionImport_ResultMapping_MappedTypeDoesNotMatchReturnType;
    internal static string Mapping_FunctionImport_ResultMapping_InvalidCTypeCTExpected;
    internal static string Mapping_FunctionImport_ResultMapping_InvalidCTypeETExpected;
    internal static string Mapping_FunctionImport_ResultMapping_InvalidSType;
    internal static string Mapping_FunctionImport_PropertyNotMapped;
    internal static string Mapping_FunctionImport_ImplicitMappingForAbstractReturnType;
    internal static string Mapping_FunctionImport_ScalarMappingToMulticolumnTVF;
    internal static string Mapping_FunctionImport_ScalarMappingTypeMismatch;
    internal static string Mapping_FunctionImport_UnreachableType;
    internal static string Mapping_FunctionImport_UnreachableIsTypeOf;
    internal static string Mapping_FunctionImport_FunctionAmbiguous;
    internal static string Mapping_FunctionImport_CannotInferTargetFunctionKeys;
    internal static string SqlProvider_DdlGeneration_MissingInitialCatalog;
    internal static string SqlProvider_DdlGeneration_CannotDeleteDatabaseNoInitialCatalog;
    internal static string SqlProvider_DdlGeneration_CannotTellIfDatabaseExists;
    internal static string SqlProvider_CredentialsMissingForMasterConnection;
    internal static string SqlProvider_IncompleteCreateDatabase;
    internal static string SqlProvider_IncompleteCreateDatabaseAggregate;
    internal static string SqlProvider_SqlTypesAssemblyNotFound;
    internal static string SqlProvider_Sql2008RequiredForSpatial;
    internal static string SqlProvider_GeographyValueNotSqlCompatible;
    internal static string SqlProvider_GeometryValueNotSqlCompatible;
    internal static string SqlProvider_NeedSqlDataReader;
    internal static string SqlProvider_InvalidGeographyColumn;
    internal static string SqlProvider_InvalidGeometryColumn;
    internal static string Entity_EntityCantHaveMultipleChangeTrackers;
    internal static string ComplexObject_NullableComplexTypesNotSupported;
    internal static string ComplexObject_ComplexObjectAlreadyAttachedToParent;
    internal static string ComplexObject_ComplexChangeRequestedOnScalarProperty;
    internal static string ObjectStateEntry_SetModifiedOnInvalidProperty;
    internal static string ObjectStateEntry_OriginalValuesDoesNotExist;
    internal static string ObjectStateEntry_CurrentValuesDoesNotExist;
    internal static string ObjectStateEntry_InvalidState;
    internal static string ObjectStateEntry_CannotModifyKeyProperty;
    internal static string ObjectStateEntry_CantModifyRelationValues;
    internal static string ObjectStateEntry_CantModifyRelationState;
    internal static string ObjectStateEntry_CantModifyDetachedDeletedEntries;
    internal static string ObjectStateEntry_SetModifiedStates;
    internal static string ObjectStateEntry_CantSetEntityKey;
    internal static string ObjectStateEntry_CannotAccessKeyEntryValues;
    internal static string ObjectStateEntry_CannotModifyKeyEntryState;
    internal static string ObjectStateEntry_CannotDeleteOnKeyEntry;
    internal static string ObjectStateEntry_EntityMemberChangedWithoutEntityMemberChanging;
    internal static string ObjectStateEntry_ChangeOnUnmappedProperty;
    internal static string ObjectStateEntry_ChangeOnUnmappedComplexProperty;
    internal static string ObjectStateEntry_ChangedInDifferentStateFromChanging;
    internal static string ObjectStateEntry_UnableToEnumerateCollection;
    internal static string ObjectStateEntry_RelationshipAndKeyEntriesDoNotHaveRelationshipManagers;
    internal static string ObjectStateEntry_InvalidTypeForComplexTypeProperty;
    internal static string ObjectStateEntry_ComplexObjectUsedMultipleTimes;
    internal static string ObjectStateEntry_SetOriginalComplexProperties;
    internal static string ObjectStateEntry_NullOriginalValueForNonNullableProperty;
    internal static string ObjectStateEntry_SetOriginalPrimaryKey;
    internal static string ObjectStateManager_NoEntryExistForEntityKey;
    internal static string ObjectStateManager_NoEntryExistsForObject;
    internal static string ObjectStateManager_EntityNotTracked;
    internal static string ObjectStateManager_DetachedObjectStateEntriesDoesNotExistInObjectStateManager;
    internal static string ObjectStateManager_ObjectStateManagerContainsThisEntityKey;
    internal static string ObjectStateManager_DoesnotAllowToReAddUnchangedOrModifiedOrDeletedEntity;
    internal static string ObjectStateManager_CannotFixUpKeyToExistingValues;
    internal static string ObjectStateManager_KeyPropertyDoesntMatchValueInKey;
    internal static string ObjectStateManager_KeyPropertyDoesntMatchValueInKeyForAttach;
    internal static string ObjectStateManager_InvalidKey;
    internal static string ObjectStateManager_EntityTypeDoesnotMatchtoEntitySetType;
    internal static string ObjectStateManager_GetEntityKeyRequiresObjectToHaveAKey;
    internal static string ObjectStateManager_AcceptChangesEntityKeyIsNotValid;
    internal static string ObjectStateManager_EntityConflictsWithKeyEntry;
    internal static string ObjectStateManager_CannotGetRelationshipManagerForDetachedPocoEntity;
    internal static string ObjectStateManager_CannotChangeRelationshipStateEntityDeleted;
    internal static string ObjectStateManager_CannotChangeRelationshipStateEntityAdded;
    internal static string ObjectStateManager_CannotChangeRelationshipStateKeyEntry;
    internal static string ObjectStateManager_ConflictingChangesOfRelationshipDetected;
    internal static string ObjectStateManager_ChangeRelationshipStateNotSupportedForForeignKeyAssociations;
    internal static string ObjectStateManager_ChangeStateFromAddedWithNullKeyIsInvalid;
    internal static string ObjectContext_ClientEntityRemovedFromStore;
    internal static string ObjectContext_StoreEntityNotPresentInClient;
    internal static string ObjectContext_InvalidConnectionString;
    internal static string ObjectContext_InvalidConnection;
    internal static string ObjectContext_InvalidDataAdapter;
    internal static string ObjectContext_InvalidDefaultContainerName;
    internal static string ObjectContext_NthElementInAddedState;
    internal static string ObjectContext_NthElementIsDuplicate;
    internal static string ObjectContext_NthElementIsNull;
    internal static string ObjectContext_NthElementNotInObjectStateManager;
    internal static string ObjectContext_ObjectNotFound;
    internal static string ObjectContext_CannotDeleteEntityNotInObjectStateManager;
    internal static string ObjectContext_CannotDetachEntityNotInObjectStateManager;
    internal static string ObjectContext_EntitySetNotFoundForName;
    internal static string ObjectContext_EntityContainerNotFoundForName;
    internal static string ObjectContext_InvalidCommandTimeout;
    internal static string ObjectContext_NoMappingForEntityType;
    internal static string ObjectContext_EntityAlreadyExistsInObjectStateManager;
    internal static string ObjectContext_InvalidEntitySetInKey;
    internal static string ObjectContext_CannotAttachEntityWithoutKey;
    internal static string ObjectContext_CannotAttachEntityWithTemporaryKey;
    internal static string ObjectContext_EntitySetNameOrEntityKeyRequired;
    internal static string ObjectContext_ExecuteFunctionTypeMismatch;
    internal static string ObjectContext_ExecuteFunctionCalledWithScalarFunction;
    internal static string ObjectContext_ExecuteFunctionCalledWithNonQueryFunction;
    internal static string ObjectContext_ExecuteFunctionCalledWithNullParameter;
    internal static string ObjectContext_ContainerQualifiedEntitySetNameRequired;
    internal static string ObjectContext_CannotSetDefaultContainerName;
    internal static string ObjectContext_QualfiedEntitySetName;
    internal static string ObjectContext_EntitiesHaveDifferentType;
    internal static string ObjectContext_EntityMustBeUnchangedOrModified;
    internal static string ObjectContext_EntityMustBeUnchangedOrModifiedOrDeleted;
    internal static string ObjectContext_AcceptAllChangesFailure;
    internal static string ObjectContext_CommitWithConceptualNull;
    internal static string ObjectContext_InvalidEntitySetOnEntity;
    internal static string ObjectContext_InvalidObjectSetTypeForEntitySet;
    internal static string ObjectContext_RequiredMetadataNotAvailble;
    internal static string ObjectContext_MetadataHasChanged;
    internal static string ObjectContext_InvalidEntitySetInKeyFromName;
    internal static string ObjectContext_ObjectDisposed;
    internal static string ObjectContext_CannotExplicitlyLoadDetachedRelationships;
    internal static string ObjectContext_CannotLoadReferencesUsingDifferentContext;
    internal static string ObjectContext_SelectorExpressionMustBeMemberAccess;
    internal static string ObjectContext_MultipleEntitySetsFoundInSingleContainer;
    internal static string ObjectContext_MultipleEntitySetsFoundInAllContainers;
    internal static string ObjectContext_NoEntitySetFoundForType;
    internal static string ObjectContext_EntityNotInObjectSet_Delete;
    internal static string ObjectContext_EntityNotInObjectSet_Detach;
    internal static string ObjectContext_InvalidEntityState;
    internal static string ObjectContext_InvalidRelationshipState;
    internal static string ObjectContext_EntityNotTrackedOrHasTempKey;
    internal static string ObjectContext_ExecuteCommandWithMixOfDbParameterAndValues;
    internal static string ObjectContext_InvalidEntitySetForStoreQuery;
    internal static string ObjectContext_InvalidTypeForStoreQuery;
    internal static string ObjectContext_TwoPropertiesMappedToSameColumn;
    internal static string RelatedEnd_InvalidOwnerStateForAttach;
    internal static string RelatedEnd_InvalidNthElementNullForAttach;
    internal static string RelatedEnd_InvalidNthElementContextForAttach;
    internal static string RelatedEnd_InvalidNthElementStateForAttach;
    internal static string RelatedEnd_InvalidEntityContextForAttach;
    internal static string RelatedEnd_InvalidEntityStateForAttach;
    internal static string RelatedEnd_UnableToAddEntity;
    internal static string RelatedEnd_UnableToRemoveEntity;
    internal static string RelatedEnd_UnableToAddRelationshipWithDeletedEntity;
    internal static string RelatedEnd_ConflictingChangeOfRelationshipDetected;
    internal static string RelatedEnd_InvalidRelationshipFixupDetected;
    internal static string RelatedEnd_CannotSerialize;
    internal static string RelatedEnd_CannotAddToFixedSizeArray;
    internal static string RelatedEnd_CannotRemoveFromFixedSizeArray;
    internal static string Materializer_PropertyIsNotNullable;
    internal static string Materializer_PropertyIsNotNullableWithName;
    internal static string Materializer_SetInvalidValue;
    internal static string Materializer_InvalidCastReference;
    internal static string Materializer_InvalidCastNullable;
    internal static string Materializer_NullReferenceCast;
    internal static string Materializer_RecyclingEntity;
    internal static string Materializer_AddedEntityAlreadyExists;
    internal static string Materializer_CannotReEnumerateQueryResults;
    internal static string Materializer_UnsupportedType;
    internal static string Collections_NoRelationshipSetMatched;
    internal static string Collections_ExpectedCollectionGotReference;
    internal static string Collections_InvalidEntityStateSource;
    internal static string Collections_InvalidEntityStateLoad;
    internal static string Collections_CannotFillTryDifferentMergeOption;
    internal static string Collections_UnableToMergeCollections;
    internal static string EntityReference_ExpectedReferenceGotCollection;
    internal static string EntityReference_CannotAddMoreThanOneEntityToEntityReference;
    internal static string EntityReference_LessThanExpectedRelatedEntitiesFound;
    internal static string EntityReference_MoreThanExpectedRelatedEntitiesFound;
    internal static string EntityReference_CannotChangeReferentialConstraintProperty;
    internal static string EntityReference_CannotSetSpecialKeys;
    internal static string EntityReference_EntityKeyValueMismatch;
    internal static string RelatedEnd_RelatedEndNotFound;
    internal static string RelatedEnd_RelatedEndNotAttachedToContext;
    internal static string RelatedEnd_LoadCalledOnNonEmptyNoTrackedRelatedEnd;
    internal static string RelatedEnd_LoadCalledOnAlreadyLoadedNoTrackedRelatedEnd;
    internal static string RelatedEnd_InvalidContainedType_Collection;
    internal static string RelatedEnd_InvalidContainedType_Reference;
    internal static string RelatedEnd_CannotCreateRelationshipBetweenTrackedAndNoTrackedEntities;
    internal static string RelatedEnd_CannotCreateRelationshipEntitiesInDifferentContexts;
    internal static string RelatedEnd_MismatchedMergeOptionOnLoad;
    internal static string RelatedEnd_EntitySetIsNotValidForRelationship;
    internal static string RelatedEnd_OwnerIsNull;
    internal static string RelationshipManager_UnableToRetrieveReferentialConstraintProperties;
    internal static string RelationshipManager_InconsistentReferentialConstraintProperties;
    internal static string RelationshipManager_CircularRelationshipsWithReferentialConstraints;
    internal static string RelationshipManager_UnableToFindRelationshipTypeInMetadata;
    internal static string RelationshipManager_InvalidTargetRole;
    internal static string RelationshipManager_UnexpectedNull;
    internal static string RelationshipManager_InvalidRelationshipManagerOwner;
    internal static string RelationshipManager_OwnerIsNotSourceType;
    internal static string RelationshipManager_UnexpectedNullContext;
    internal static string RelationshipManager_ReferenceAlreadyInitialized;
    internal static string RelationshipManager_RelationshipManagerAttached;
    internal static string RelationshipManager_InitializeIsForDeserialization;
    internal static string RelationshipManager_CollectionAlreadyInitialized;
    internal static string RelationshipManager_CollectionRelationshipManagerAttached;
    internal static string RelationshipManager_CollectionInitializeIsForDeserialization;
    internal static string RelationshipManager_NavigationPropertyNotFound;
    internal static string RelationshipManager_CannotGetRelatEndForDetachedPocoEntity;
    internal static string ObjectView_CannotReplacetheEntityorRow;
    internal static string ObjectView_IndexBasedInsertIsNotSupported;
    internal static string ObjectView_WriteOperationNotAllowedOnReadOnlyBindingList;
    internal static string ObjectView_AddNewOperationNotAllowedOnAbstractBindingList;
    internal static string ObjectView_IncompatibleArgument;
    internal static string ObjectView_CannotResolveTheEntitySet;
    internal static string CodeGen_ConstructorNoParameterless;
    internal static string CodeGen_PropertyDeclaringTypeIsValueType;
    internal static string CodeGen_PropertyStrongNameIdentity;
    internal static string CodeGen_PropertyUnsupportedForm;
    internal static string CodeGen_PropertyUnsupportedType;
    internal static string CodeGen_PropertyIsIndexed;
    internal static string CodeGen_PropertyIsStatic;
    internal static string CodeGen_PropertyNoGetter;
    internal static string CodeGen_PropertyNoSetter;
    internal static string PocoEntityWrapper_UnableToSetFieldOrProperty;
    internal static string PocoEntityWrapper_UnexpectedTypeForNavigationProperty;
    internal static string PocoEntityWrapper_UnableToMaterializeArbitaryNavPropType;
    internal static string GeneralQueryError;
    internal static string CtxAlias;
    internal static string CtxAliasedNamespaceImport;
    internal static string CtxAnd;
    internal static string CtxAnyElement;
    internal static string CtxApplyClause;
    internal static string CtxBetween;
    internal static string CtxCase;
    internal static string CtxCaseElse;
    internal static string CtxCaseWhenThen;
    internal static string CtxCast;
    internal static string CtxCollatedOrderByClauseItem;
    internal static string CtxCollectionTypeDefinition;
    internal static string CtxCommandExpression;
    internal static string CtxCreateRef;
    internal static string CtxDeref;
    internal static string CtxDivide;
    internal static string CtxElement;
    internal static string CtxEquals;
    internal static string CtxEscapedIdentifier;
    internal static string CtxExcept;
    internal static string CtxExists;
    internal static string CtxExpressionList;
    internal static string CtxFlatten;
    internal static string CtxFromApplyClause;
    internal static string CtxFromClause;
    internal static string CtxFromClauseItem;
    internal static string CtxFromClauseList;
    internal static string CtxFromJoinClause;
    internal static string CtxFunction;
    internal static string CtxFunctionDefinition;
    internal static string CtxGreaterThan;
    internal static string CtxGreaterThanEqual;
    internal static string CtxGroupByClause;
    internal static string CtxGroupPartition;
    internal static string CtxHavingClause;
    internal static string CtxIdentifier;
    internal static string CtxIn;
    internal static string CtxIntersect;
    internal static string CtxIsNotNull;
    internal static string CtxIsNotOf;
    internal static string CtxIsNull;
    internal static string CtxIsOf;
    internal static string CtxJoinClause;
    internal static string CtxJoinOnClause;
    internal static string CtxKey;
    internal static string CtxLessThan;
    internal static string CtxLessThanEqual;
    internal static string CtxLike;
    internal static string CtxLimitSubClause;
    internal static string CtxLiteral;
    internal static string CtxMemberAccess;
    internal static string CtxMethod;
    internal static string CtxMinus;
    internal static string CtxModulus;
    internal static string CtxMultiply;
    internal static string CtxMultisetCtor;
    internal static string CtxNamespaceImport;
    internal static string CtxNamespaceImportList;
    internal static string CtxNavigate;
    internal static string CtxNot;
    internal static string CtxNotBetween;
    internal static string CtxNotEqual;
    internal static string CtxNotIn;
    internal static string CtxNotLike;
    internal static string CtxNullLiteral;
    internal static string CtxOfType;
    internal static string CtxOfTypeOnly;
    internal static string CtxOr;
    internal static string CtxOrderByClause;
    internal static string CtxOrderByClauseItem;
    internal static string CtxOverlaps;
    internal static string CtxParen;
    internal static string CtxPlus;
    internal static string CtxTypeNameWithTypeSpec;
    internal static string CtxQueryExpression;
    internal static string CtxQueryStatement;
    internal static string CtxRef;
    internal static string CtxRefTypeDefinition;
    internal static string CtxRelationship;
    internal static string CtxRelationshipList;
    internal static string CtxRowCtor;
    internal static string CtxRowTypeDefinition;
    internal static string CtxSelectRowClause;
    internal static string CtxSelectValueClause;
    internal static string CtxSet;
    internal static string CtxSimpleIdentifier;
    internal static string CtxSkipSubClause;
    internal static string CtxTopSubClause;
    internal static string CtxTreat;
    internal static string CtxTypeCtor;
    internal static string CtxTypeName;
    internal static string CtxUnaryMinus;
    internal static string CtxUnaryPlus;
    internal static string CtxUnion;
    internal static string CtxUnionAll;
    internal static string CtxWhereClause;
    internal static string CannotConvertNumericLiteral;
    internal static string GenericSyntaxError;
    internal static string InFromClause;
    internal static string InGroupClause;
    internal static string InRowCtor;
    internal static string InSelectProjectionList;
    internal static string InvalidAliasName;
    internal static string InvalidEmptyIdentifier;
    internal static string InvalidEmptyQuery;
    internal static string InvalidEmptyQueryTextArgument;
    internal static string InvalidEscapedIdentifier;
    internal static string InvalidEscapedIdentifierUnbalanced;
    internal static string InvalidOperatorSymbol;
    internal static string InvalidPunctuatorSymbol;
    internal static string InvalidSimpleIdentifier;
    internal static string InvalidSimpleIdentifierNonASCII;
    internal static string LocalizedCollection;
    internal static string LocalizedColumn;
    internal static string LocalizedComplex;
    internal static string LocalizedEntity;
    internal static string LocalizedEntityContainerExpression;
    internal static string LocalizedFunction;
    internal static string LocalizedInlineFunction;
    internal static string LocalizedKeyword;
    internal static string LocalizedLeft;
    internal static string LocalizedLine;
    internal static string LocalizedMetadataMemberExpression;
    internal static string LocalizedNamespace;
    internal static string LocalizedNear;
    internal static string LocalizedPrimitive;
    internal static string LocalizedReference;
    internal static string LocalizedRight;
    internal static string LocalizedRow;
    internal static string LocalizedTerm;
    internal static string LocalizedType;
    internal static string LocalizedEnumMember;
    internal static string LocalizedValueExpression;
    internal static string AliasNameAlreadyUsed;
    internal static string AmbiguousFunctionArguments;
    internal static string AmbiguousMetadataMemberName;
    internal static string ArgumentTypesAreIncompatible;
    internal static string BetweenLimitsCannotBeUntypedNulls;
    internal static string BetweenLimitsTypesAreNotCompatible;
    internal static string BetweenLimitsTypesAreNotOrderComparable;
    internal static string BetweenValueIsNotOrderComparable;
    internal static string CannotCreateEmptyMultiset;
    internal static string CannotCreateMultisetofNulls;
    internal static string CannotInstantiateAbstractType;
    internal static string CannotResolveNameToTypeOrFunction;
    internal static string ConcatBuiltinNotSupported;
    internal static string CouldNotResolveIdentifier;
    internal static string CreateRefTypeIdentifierMustBeASubOrSuperType;
    internal static string CreateRefTypeIdentifierMustSpecifyAnEntityType;
    internal static string DeRefArgIsNotOfRefType;
    internal static string DuplicatedInlineFunctionOverload;
    internal static string ElementOperatorIsNotSupported;
    internal static string MemberDoesNotBelongToEntityContainer;
    internal static string ExpressionCannotBeNull;
    internal static string OfTypeExpressionElementTypeMustBeEntityType;
    internal static string OfTypeExpressionElementTypeMustBeNominalType;
    internal static string ExpressionMustBeCollection;
    internal static string ExpressionMustBeNumericType;
    internal static string ExpressionTypeMustBeBoolean;
    internal static string ExpressionTypeMustBeEqualComparable;
    internal static string ExpressionTypeMustBeEntityType;
    internal static string ExpressionTypeMustBeNominalType;
    internal static string ExpressionTypeMustNotBeCollection;
    internal static string ExprIsNotValidEntitySetForCreateRef;
    internal static string FailedToResolveAggregateFunction;
    internal static string GeneralExceptionAsQueryInnerException;
    internal static string GroupingKeysMustBeEqualComparable;
    internal static string GroupPartitionOutOfContext;
    internal static string HavingRequiresGroupClause;
    internal static string ImcompatibleCreateRefKeyElementType;
    internal static string ImcompatibleCreateRefKeyType;
    internal static string InnerJoinMustHaveOnPredicate;
    internal static string InvalidAssociationTypeForUnion;
    internal static string InvalidCaseResultTypes;
    internal static string InvalidCaseWhenThenNullType;
    internal static string InvalidCast;
    internal static string InvalidCastExpressionType;
    internal static string InvalidCastType;
    internal static string InvalidComplexType;
    internal static string InvalidCreateRefKeyType;
    internal static string InvalidCtorArgumentType;
    internal static string InvalidCtorUseOnType;
    internal static string InvalidDateTimeOffsetLiteral;
    internal static string InvalidDay;
    internal static string InvalidDayInMonth;
    internal static string InvalidDeRefProperty;
    internal static string InvalidDistinctArgumentInCtor;
    internal static string InvalidDistinctArgumentInNonAggFunction;
    internal static string InvalidEntityRootTypeArgument;
    internal static string InvalidEntityTypeArgument;
    internal static string InvalidExpressionResolutionClass;
    internal static string InvalidFlattenArgument;
    internal static string InvalidGroupIdentifierReference;
    internal static string InvalidHour;
    internal static string InvalidImplicitRelationshipFromEnd;
    internal static string InvalidImplicitRelationshipToEnd;
    internal static string InvalidInExprArgs;
    internal static string InvalidJoinLeftCorrelation;
    internal static string InvalidKeyArgument;
    internal static string InvalidKeyTypeForCollation;
    internal static string InvalidLiteralFormat;
    internal static string InvalidMetadataMemberName;
    internal static string InvalidMinute;
    internal static string InvalidModeForWithRelationshipClause;
    internal static string InvalidMonth;
    internal static string InvalidNamespaceAlias;
    internal static string InvalidNullArithmetic;
    internal static string InvalidNullComparison;
    internal static string InvalidNullLiteralForNonNullableMember;
    internal static string InvalidParameterFormat;
    internal static string InvalidPlaceholderRootTypeArgument;
    internal static string InvalidPlaceholderTypeArgument;
    internal static string InvalidPredicateForCrossJoin;
    internal static string InvalidRelationshipMember;
    internal static string InvalidMetadataMemberClassResolution;
    internal static string InvalidRootComplexType;
    internal static string InvalidRootRowType;
    internal static string InvalidRowType;
    internal static string InvalidSecond;
    internal static string InvalidSelectValueAliasedExpression;
    internal static string InvalidSelectValueList;
    internal static string InvalidTypeForWithRelationshipClause;
    internal static string InvalidUnarySetOpArgument;
    internal static string InvalidUnsignedTypeForUnaryMinusOperation;
    internal static string InvalidYear;
    internal static string InvalidWithRelationshipTargetEndMultiplicity;
    internal static string InvalidQueryResultType;
    internal static string IsNullInvalidType;
    internal static string KeyMustBeCorrelated;
    internal static string LeftSetExpressionArgsMustBeCollection;
    internal static string LikeArgMustBeStringType;
    internal static string LiteralTypeNotFoundInMetadata;
    internal static string MalformedSingleQuotePayload;
    internal static string MalformedStringLiteralPayload;
    internal static string MethodInvocationNotSupported;
    internal static string MultipleDefinitionsOfParameter;
    internal static string MultipleDefinitionsOfVariable;
    internal static string MultisetElemsAreNotTypeCompatible;
    internal static string NamespaceAliasAlreadyUsed;
    internal static string NamespaceAlreadyImported;
    internal static string NestedAggregateCannotBeUsedInAggregate;
    internal static string NoAggrFunctionOverloadMatch;
    internal static string NoCanonicalAggrFunctionOverloadMatch;
    internal static string NoCanonicalFunctionOverloadMatch;
    internal static string NoFunctionOverloadMatch;
    internal static string NotAMemberOfCollection;
    internal static string NotAMemberOfType;
    internal static string NotASuperOrSubType;
    internal static string NullLiteralCannotBePromotedToCollectionOfNulls;
    internal static string NumberOfTypeCtorIsLessThenFormalSpec;
    internal static string NumberOfTypeCtorIsMoreThenFormalSpec;
    internal static string OrderByKeyIsNotOrderComparable;
    internal static string OfTypeOnlyTypeArgumentCannotBeAbstract;
    internal static string ParameterTypeNotSupported;
    internal static string ParameterWasNotDefined;
    internal static string PlaceholderExpressionMustBeCompatibleWithEdm64;
    internal static string PlaceholderExpressionMustBeConstant;
    internal static string PlaceholderExpressionMustBeGreaterThanOrEqualToZero;
    internal static string PlaceholderSetArgTypeIsNotEqualComparable;
    internal static string PlusLeftExpressionInvalidType;
    internal static string PlusRightExpressionInvalidType;
    internal static string PrecisionMustBeGreaterThanScale;
    internal static string RefArgIsNotOfEntityType;
    internal static string RefTypeIdentifierMustSpecifyAnEntityType;
    internal static string RelatedEndExprTypeMustBeReference;
    internal static string RelatedEndExprTypeMustBePromotoableToToEnd;
    internal static string RelationshipFromEndIsAmbiguos;
    internal static string RelationshipTypeExpected;
    internal static string RelationshipToEndIsAmbiguos;
    internal static string RelationshipTargetMustBeUnique;
    internal static string ResultingExpressionTypeCannotBeNull;
    internal static string RightSetExpressionArgsMustBeCollection;
    internal static string RowCtorElementCannotBeNull;
    internal static string SelectDistinctMustBeEqualComparable;
    internal static string SourceTypeMustBePromotoableToFromEndRelationType;
    internal static string TopAndLimitCannotCoexist;
    internal static string TopAndSkipCannotCoexist;
    internal static string TypeDoesNotSupportSpec;
    internal static string TypeDoesNotSupportFacet;
    internal static string TypeArgumentCountMismatch;
    internal static string TypeArgumentMustBeLiteral;
    internal static string TypeArgumentBelowMin;
    internal static string TypeArgumentExceedsMax;
    internal static string TypeArgumentIsNotValid;
    internal static string TypeKindMismatch;
    internal static string TypeMustBeInheritableType;
    internal static string TypeMustBeEntityType;
    internal static string TypeMustBeNominalType;
    internal static string TypeNameNotFound;
    internal static string GroupVarNotFoundInScope;
    internal static string InvalidArgumentTypeForAggregateFunction;
    internal static string InvalidSavePoint;
    internal static string InvalidScopeIndex;
    internal static string LiteralTypeNotSupported;
    internal static string ParserFatalError;
    internal static string ParserInputError;
    internal static string StackOverflowInParser;
    internal static string UnknownAstCommandExpression;
    internal static string UnknownAstExpressionType;
    internal static string UnknownBuiltInAstExpressionType;
    internal static string UnknownExpressionResolutionClass;
    internal static string SqlGen_ApplyNotSupportedOnSql8;
    internal static string SqlGen_InvalidDatePartArgumentExpression;
    internal static string SqlGen_InvalidDatePartArgumentValue;
    internal static string SqlGen_NiladicFunctionsCannotHaveParameters;
    internal static string SqlGen_ParameterForLimitNotSupportedOnSql8;
    internal static string SqlGen_ParameterForSkipNotSupportedOnSql8;
    internal static string SqlGen_PrimitiveTypeNotSupportedPriorSql10;
    internal static string SqlGen_CanonicalFunctionNotSupportedPriorSql10;
    internal static string SqlGen_TypedPositiveInfinityNotSupported;
    internal static string SqlGen_TypedNegativeInfinityNotSupported;
    internal static string SqlGen_TypedNaNNotSupported;
    internal static string Cqt_General_PolymorphicTypeRequired;
    internal static string Cqt_General_PolymorphicArgRequired;
    internal static string Cqt_General_UnsupportedExpression;
    internal static string Cqt_General_MetadataNotReadOnly;
    internal static string Cqt_General_NoProviderBooleanType;
    internal static string Cqt_General_NoProviderIntegerType;
    internal static string Cqt_General_NoProviderStringType;
    internal static string Cqt_Metadata_EdmMemberIncorrectSpace;
    internal static string Cqt_Metadata_EntitySetEntityContainerNull;
    internal static string Cqt_Metadata_EntitySetIncorrectSpace;
    internal static string Cqt_Metadata_EntityTypeNullKeyMembersInvalid;
    internal static string Cqt_Metadata_EntityTypeEmptyKeyMembersInvalid;
    internal static string Cqt_Metadata_FunctionReturnParameterNull;
    internal static string Cqt_Metadata_FunctionIncorrectSpace;
    internal static string Cqt_Metadata_FunctionParameterIncorrectSpace;
    internal static string Cqt_Metadata_TypeUsageIncorrectSpace;
    internal static string Cqt_Exceptions_InvalidCommandTree;
    internal static string Cqt_Util_CheckListEmptyInvalid;
    internal static string Cqt_Util_CheckListDuplicateName;
    internal static string Cqt_ExpressionLink_TypeMismatch;
    internal static string Cqt_ExpressionList_IncorrectElementCount;
    internal static string Cqt_Copier_EntityContainerNotFound;
    internal static string Cqt_Copier_EntitySetNotFound;
    internal static string Cqt_Copier_FunctionNotFound;
    internal static string Cqt_Copier_PropertyNotFound;
    internal static string Cqt_Copier_NavPropertyNotFound;
    internal static string Cqt_Copier_EndNotFound;
    internal static string Cqt_Copier_TypeNotFound;
    internal static string Cqt_CommandTree_InvalidDataSpace;
    internal static string Cqt_CommandTree_InvalidParameterName;
    internal static string Cqt_Validator_InvalidIncompatibleParameterReferences;
    internal static string Cqt_Validator_InvalidOtherWorkspaceMetadata;
    internal static string Cqt_Validator_InvalidIncorrectDataSpaceMetadata;
    internal static string Cqt_Factory_NewCollectionInvalidCommonType;
    internal static string Cqt_Factory_NoSuchProperty;
    internal static string Cqt_Factory_NoSuchRelationEnd;
    internal static string Cqt_Factory_IncompatibleRelationEnds;
    internal static string Cqt_Factory_MethodResultTypeNotSupported;
    internal static string Cqt_Aggregate_InvalidFunction;
    internal static string Cqt_Binding_CollectionRequired;
    internal static string Cqt_Binding_VariableNameNotValid;
    internal static string Cqt_GroupBinding_CollectionRequired;
    internal static string Cqt_GroupBinding_GroupVariableNameNotValid;
    internal static string Cqt_Binary_CollectionsRequired;
    internal static string Cqt_Unary_CollectionRequired;
    internal static string Cqt_And_BooleanArgumentsRequired;
    internal static string Cqt_Apply_DuplicateVariableNames;
    internal static string Cqt_Arithmetic_NumericCommonType;
    internal static string Cqt_Arithmetic_InvalidUnsignedTypeForUnaryMinus;
    internal static string Cqt_Case_WhensMustEqualThens;
    internal static string Cqt_Case_InvalidResultType;
    internal static string Cqt_Cast_InvalidCast;
    internal static string Cqt_Comparison_ComparableRequired;
    internal static string Cqt_Constant_InvalidType;
    internal static string Cqt_Constant_InvalidValueForType;
    internal static string Cqt_Constant_InvalidConstantType;
    internal static string Cqt_Constant_ClrEnumTypeDoesNotMatchEdmEnumType;
    internal static string Cqt_Distinct_InvalidCollection;
    internal static string Cqt_DeRef_RefRequired;
    internal static string Cqt_Element_InvalidArgumentForUnwrapSingleProperty;
    internal static string Cqt_Function_VoidResultInvalid;
    internal static string Cqt_Function_NonComposableInExpression;
    internal static string Cqt_Function_CommandTextInExpression;
    internal static string Cqt_Function_CanonicalFunction_NotFound;
    internal static string Cqt_Function_CanonicalFunction_AmbiguousMatch;
    internal static string Cqt_GetEntityRef_EntityRequired;
    internal static string Cqt_GetRefKey_RefRequired;
    internal static string Cqt_GroupBy_AtLeastOneKeyOrAggregate;
    internal static string Cqt_GroupBy_KeyNotEqualityComparable;
    internal static string Cqt_GroupBy_AggregateColumnExistsAsGroupColumn;
    internal static string Cqt_GroupBy_MoreThanOneGroupAggregate;
    internal static string Cqt_CrossJoin_AtLeastTwoInputs;
    internal static string Cqt_CrossJoin_DuplicateVariableNames;
    internal static string Cqt_IsNull_CollectionNotAllowed;
    internal static string Cqt_IsNull_InvalidType;
    internal static string Cqt_InvalidTypeForSetOperation;
    internal static string Cqt_Join_DuplicateVariableNames;
    internal static string Cqt_Limit_ConstantOrParameterRefRequired;
    internal static string Cqt_Limit_IntegerRequired;
    internal static string Cqt_Limit_NonNegativeLimitRequired;
    internal static string Cqt_NewInstance_CollectionTypeRequired;
    internal static string Cqt_NewInstance_StructuralTypeRequired;
    internal static string Cqt_NewInstance_CannotInstantiateMemberlessType;
    internal static string Cqt_NewInstance_CannotInstantiateAbstractType;
    internal static string Cqt_NewInstance_IncompatibleRelatedEntity_SourceTypeNotValid;
    internal static string Cqt_Not_BooleanArgumentRequired;
    internal static string Cqt_Or_BooleanArgumentsRequired;
    internal static string Cqt_Property_InstanceRequiredForInstance;
    internal static string Cqt_Ref_PolymorphicArgRequired;
    internal static string Cqt_RelatedEntityRef_TargetEndFromDifferentRelationship;
    internal static string Cqt_RelatedEntityRef_TargetEndMustBeAtMostOne;
    internal static string Cqt_RelatedEntityRef_TargetEndSameAsSourceEnd;
    internal static string Cqt_RelatedEntityRef_TargetEntityNotRef;
    internal static string Cqt_RelatedEntityRef_TargetEntityNotCompatible;
    internal static string Cqt_RelNav_NoCompositions;
    internal static string Cqt_RelNav_WrongSourceType;
    internal static string Cqt_Skip_ConstantOrParameterRefRequired;
    internal static string Cqt_Skip_IntegerRequired;
    internal static string Cqt_Skip_NonNegativeCountRequired;
    internal static string Cqt_Sort_EmptyCollationInvalid;
    internal static string Cqt_Sort_NonStringCollationInvalid;
    internal static string Cqt_Sort_OrderComparable;
    internal static string Cqt_UDF_FunctionDefinitionGenerationFailed;
    internal static string Cqt_UDF_FunctionDefinitionWithCircularReference;
    internal static string Cqt_UDF_FunctionDefinitionResultTypeMismatch;
    internal static string Cqt_UDF_FunctionHasNoDefinition;
    internal static string Cqt_Validator_VarRefInvalid;
    internal static string Cqt_Validator_VarRefTypeMismatch;
    internal static string Iqt_General_UnsupportedOp;
    internal static string Iqt_CTGen_UnexpectedAggregate;
    internal static string Iqt_CTGen_UnexpectedVarDefList;
    internal static string Iqt_CTGen_UnexpectedVarDef;
    internal static string ADP_MustUseSequentialAccess;
    internal static string ADP_ProviderDoesNotSupportCommandTrees;
    internal static string ADP_ClosedDataReaderError;
    internal static string ADP_DataReaderClosed;
    internal static string ADP_ImplicitlyClosedDataReaderError;
    internal static string ADP_NoData;
    internal static string ADP_GetSchemaTableIsNotSupported;
    internal static string ADP_InvalidDataReaderFieldCountForScalarType;
    internal static string ADP_InvalidDataReaderMissingColumnForType;
    internal static string ADP_InvalidDataReaderMissingDiscriminatorColumn;
    internal static string ADP_InvalidDataReaderUnableToDetermineType;
    internal static string ADP_InvalidDataReaderUnableToMaterializeNonScalarType;
    internal static string ADP_KeysRequiredForJoinOverNest;
    internal static string ADP_KeysRequiredForNesting;
    internal static string ADP_NestingNotSupported;
    internal static string ADP_NoQueryMappingView;
    internal static string ADP_InternalProviderError;
    internal static string ADP_InvalidEnumerationValue;
    internal static string ADP_InvalidBufferSizeOrIndex;
    internal static string ADP_InvalidDataLength;
    internal static string ADP_InvalidDataType;
    internal static string ADP_InvalidDestinationBufferIndex;
    internal static string ADP_InvalidSourceBufferIndex;
    internal static string ADP_NonSequentialChunkAccess;
    internal static string ADP_NonSequentialColumnAccess;
    internal static string ADP_UnknownDataTypeCode;
    internal static string DataCategory_Data;
    internal static string DbParameter_Direction;
    internal static string DbParameter_Size;
    internal static string DataCategory_Update;
    internal static string DbParameter_SourceColumn;
    internal static string DbParameter_SourceVersion;
    internal static string ADP_CollectionParameterElementIsNull;
    internal static string ADP_CollectionParameterElementIsNullOrEmpty;
    internal static string EntityParameterCollectionInvalidParameterName;
    internal static string EntityParameterCollectionInvalidIndex;
    internal static string InvalidEntityParameterType;
    internal static string EntityParameterContainedByAnotherCollection;
    internal static string EntityParameterNull;
    internal static string EntityParameterCollectionRemoveInvalidObject;
    internal static string ADP_ConnectionStringSyntax;
    internal static string ADP_InvalidConnectionOptionValue;
    internal static string ADP_InvalidDataDirectory;
    internal static string ADP_InvalidMultipartNameDelimiterUsage;
    internal static string ADP_InvalidSizeValue;
    internal static string ADP_KeywordNotSupported;
    internal static string ConstantFacetSpecifiedInSchema;
    internal static string DuplicateAnnotation;
    internal static string EmptyFile;
    internal static string EmptySchemaTextReader;
    internal static string EmptyName;
    internal static string InvalidName;
    internal static string MissingName;
    internal static string UnexpectedXmlAttribute;
    internal static string UnexpectedXmlElement;
    internal static string TextNotAllowed;
    internal static string UnexpectedXmlNodeType;
    internal static string MalformedXml;
    internal static string ValueNotUnderstood;
    internal static string EntityContainerAlreadyExists;
    internal static string TypeNameAlreadyDefinedDuplicate;
    internal static string PropertyNameAlreadyDefinedDuplicate;
    internal static string DuplicateMemberNameInExtendedEntityContainer;
    internal static string DuplicateEntityContainerMemberName;
    internal static string PropertyTypeAlreadyDefined;
    internal static string InvalidSize;
    internal static string InvalidSystemReferenceId;
    internal static string BadNamespaceOrAlias;
    internal static string MissingNamespaceAttribute;
    internal static string InvalidBaseTypeForStructuredType;
    internal static string InvalidPropertyType;
    internal static string InvalidBaseTypeForItemType;
    internal static string InvalidBaseTypeForNestedType;
    internal static string DefaultNotAllowed;
    internal static string FacetNotAllowed;
    internal static string RequiredFacetMissing;
    internal static string InvalidDefaultBinaryWithNoMaxLength;
    internal static string InvalidDefaultIntegral;
    internal static string InvalidDefaultDateTime;
    internal static string InvalidDefaultTime;
    internal static string InvalidDefaultDateTimeOffset;
    internal static string InvalidDefaultDecimal;
    internal static string InvalidDefaultFloatingPoint;
    internal static string InvalidDefaultGuid;
    internal static string InvalidDefaultBoolean;
    internal static string DuplicateMemberName;
    internal static string GeneratorErrorSeverityError;
    internal static string GeneratorErrorSeverityWarning;
    internal static string GeneratorErrorSeverityUnknown;
    internal static string SourceUriUnknown;
    internal static string BadPrecisionAndScale;
    internal static string InvalidNamespaceInUsing;
    internal static string BadNavigationPropertyRelationshipNotRelationship;
    internal static string BadNavigationPropertyRolesCannotBeTheSame;
    internal static string BadNavigationPropertyUndefinedRole;
    internal static string BadNavigationPropertyBadFromRoleType;
    internal static string InvalidMemberNameMatchesTypeName;
    internal static string InvalidKeyKeyDefinedInBaseClass;
    internal static string InvalidKeyNullablePart;
    internal static string InvalidKeyNoProperty;
    internal static string KeyMissingOnEntityType;
    internal static string InvalidDocumentationBothTextAndStructure;
    internal static string ArgumentOutOfRangeExpectedPostiveNumber;
    internal static string ArgumentOutOfRange;
    internal static string UnacceptableUri;
    internal static string UnexpectedTypeInCollection;
    internal static string AllElementsMustBeInSchema;
    internal static string AliasNameIsAlreadyDefined;
    internal static string NeedNotUseSystemNamespaceInUsing;
    internal static string CannotUseSystemNamespaceAsAlias;
    internal static string EntitySetTypeHasNoKeys;
    internal static string TableAndSchemaAreMutuallyExclusiveWithDefiningQuery;
    internal static string UnexpectedRootElement;
    internal static string UnexpectedRootElementNoNamespace;
    internal static string ParameterNameAlreadyDefinedDuplicate;
    internal static string FunctionWithNonPrimitiveTypeNotSupported;
    internal static string FunctionWithNonEdmPrimitiveTypeNotSupported;
    internal static string FunctionImportWithUnsupportedReturnTypeV1;
    internal static string FunctionImportWithUnsupportedReturnTypeV1_1;
    internal static string FunctionImportWithUnsupportedReturnTypeV2;
    internal static string FunctionImportUnknownEntitySet;
    internal static string FunctionImportReturnEntitiesButDoesNotSpecifyEntitySet;
    internal static string FunctionImportEntityTypeDoesNotMatchEntitySet;
    internal static string FunctionImportSpecifiesEntitySetButNotEntityType;
    internal static string FunctionImportEntitySetAndEntitySetPathDeclared;
    internal static string FunctionImportComposableAndSideEffectingNotAllowed;
    internal static string FunctionImportCollectionAndRefParametersNotAllowed;
    internal static string FunctionImportNonNullableParametersNotAllowed;
    internal static string TVFReturnTypeRowHasNonScalarProperty;
    internal static string DuplicateEntitySetTable;
    internal static string ConcurrencyRedefinedOnSubTypeOfEntitySetType;
    internal static string SimilarRelationshipEnd;
    internal static string InvalidRelationshipEndMultiplicity;
    internal static string EndNameAlreadyDefinedDuplicate;
    internal static string InvalidRelationshipEndType;
    internal static string BadParameterDirection;
    internal static string BadParameterDirectionForComposableFunctions;
    internal static string InvalidOperationMultipleEndsInAssociation;
    internal static string InvalidAction;
    internal static string DuplicationOperation;
    internal static string NotInNamespaceAlias;
    internal static string NotNamespaceQualified;
    internal static string NotInNamespaceNoAlias;
    internal static string InvalidValueForParameterTypeSemanticsAttribute;
    internal static string DuplicatePropertyNameSpecifiedInEntityKey;
    internal static string InvalidEntitySetType;
    internal static string InvalidRelationshipSetType;
    internal static string InvalidEntityContainerNameInExtends;
    internal static string InvalidNamespaceOrAliasSpecified;
    internal static string PrecisionOutOfRange;
    internal static string ScaleOutOfRange;
    internal static string InvalidEntitySetNameReference;
    internal static string InvalidEntityEndName;
    internal static string DuplicateEndName;
    internal static string AmbiguousEntityContainerEnd;
    internal static string MissingEntityContainerEnd;
    internal static string InvalidEndEntitySetTypeMismatch;
    internal static string InferRelationshipEndFailedNoEntitySetMatch;
    internal static string InferRelationshipEndAmbiguous;
    internal static string InferRelationshipEndGivesAlreadyDefinedEnd;
    internal static string TooManyAssociationEnds;
    internal static string InvalidEndRoleInRelationshipConstraint;
    internal static string InvalidFromPropertyInRelationshipConstraint;
    internal static string InvalidToPropertyInRelationshipConstraint;
    internal static string InvalidPropertyInRelationshipConstraint;
    internal static string TypeMismatchRelationshipConstaint;
    internal static string InvalidMultiplicityFromRoleUpperBoundMustBeOne;
    internal static string InvalidMultiplicityFromRoleToPropertyNonNullableV1;
    internal static string InvalidMultiplicityFromRoleToPropertyNonNullableV2;
    internal static string InvalidMultiplicityFromRoleToPropertyNullableV1;
    internal static string InvalidMultiplicityToRoleLowerBoundMustBeZero;
    internal static string InvalidMultiplicityToRoleUpperBoundMustBeOne;
    internal static string InvalidMultiplicityToRoleUpperBoundMustBeMany;
    internal static string MismatchNumberOfPropertiesinRelationshipConstraint;
    internal static string MissingConstraintOnRelationshipType;
    internal static string SameRoleReferredInReferentialConstraint;
    internal static string InvalidPrimitiveTypeKind;
    internal static string EntityKeyMustBeScalar;
    internal static string EntityKeyTypeCurrentlyNotSupportedInSSDL;
    internal static string EntityKeyTypeCurrentlyNotSupported;
    internal static string MissingFacetDescription;
    internal static string EndWithManyMultiplicityCannotHaveOperationsSpecified;
    internal static string EndWithoutMultiplicity;
    internal static string EntityContainerCannotExtendItself;
    internal static string ComposableFunctionOrFunctionImportMustDeclareReturnType;
    internal static string NonComposableFunctionMustNotDeclareReturnType;
    internal static string CommandTextFunctionsNotComposable;
    internal static string CommandTextFunctionsCannotDeclareStoreFunctionName;
    internal static string NonComposableFunctionHasDisallowedAttribute;
    internal static string EmptyDefiningQuery;
    internal static string EmptyCommandText;
    internal static string AmbiguousFunctionOverload;
    internal static string AmbiguousFunctionAndType;
    internal static string CycleInTypeHierarchy;
    internal static string IncorrectProviderManifest;
    internal static string ComplexTypeAsReturnTypeAndDefinedEntitySet;
    internal static string ComplexTypeAsReturnTypeAndNestedComplexProperty;
    internal static string FacetsOnNonScalarType;
    internal static string FacetDeclarationRequiresTypeAttribute;
    internal static string TypeMustBeDeclared;
    internal static string RowTypeWithoutProperty;
    internal static string TypeDeclaredAsAttributeAndElement;
    internal static string ReferenceToNonEntityType;
    internal static string NoCodeGenNamespaceInStructuralAnnotation;
    internal static string CannotLoadDifferentVersionOfSchemaInTheSameItemCollection;
    internal static string InvalidEnumUnderlyingType;
    internal static string DuplicateEnumMember;
    internal static string CalculatedEnumValueOutOfRange;
    internal static string EnumMemberValueOutOfItsUnderylingTypeRange;
    internal static string SpatialWithUseStrongSpatialTypesFalse;
    internal static string ObjectQuery_QueryBuilder_InvalidProjectionList;
    internal static string ObjectQuery_QueryBuilder_InvalidSortKeyList;
    internal static string ObjectQuery_QueryBuilder_InvalidGroupKeyList;
    internal static string ObjectQuery_QueryBuilder_InvalidSkipCount;
    internal static string ObjectQuery_QueryBuilder_InvalidTopCount;
    internal static string ObjectQuery_QueryBuilder_InvalidFilterPredicate;
    internal static string ObjectQuery_QueryBuilder_InvalidResultType;
    internal static string ObjectQuery_QueryBuilder_InvalidQueryArgument;
    internal static string ObjectQuery_QueryBuilder_NotSupportedLinqSource;
    internal static string ObjectQuery_InvalidEmptyQuery;
    internal static string ObjectQuery_InvalidConnection;
    internal static string ObjectQuery_InvalidQueryName;
    internal static string ObjectQuery_UnableToMapResultType;
    internal static string ObjectQuery_UnableToMaterializeArray;
    internal static string ObjectQuery_UnableToMaterializeArbitaryProjectionType;
    internal static string ObjectParameter_InvalidParameterName;
    internal static string ObjectParameter_InvalidParameterType;
    internal static string ObjectParameterCollection_ParameterNameNotFound;
    internal static string ObjectParameterCollection_ParameterAlreadyExists;
    internal static string ObjectParameterCollection_DuplicateParameterName;
    internal static string ObjectParameterCollection_ParametersLocked;
    internal static string ProviderReturnedNullForGetDbInformation;
    internal static string ProviderReturnedNullForCreateCommandDefinition;
    internal static string ProviderDidNotReturnAProviderManifest;
    internal static string ProviderDidNotReturnAProviderManifestToken;
    internal static string ProviderDidNotReturnSpatialServices;
    internal static string ProviderDoesNotSupportType;
    internal static string NoStoreTypeForEdmType;
    internal static string ProviderRequiresStoreCommandTree;
    internal static string ProviderShouldOverrideEscapeLikeArgument;
    internal static string ProviderEscapeLikeArgumentReturnedNull;
    internal static string ProviderDidNotCreateACommandDefinition;
    internal static string ProviderDoesNotSupportCreateDatabaseScript;
    internal static string ProviderDoesNotSupportCreateDatabase;
    internal static string ProviderDoesNotSupportDatabaseExists;
    internal static string ProviderDoesNotSupportDeleteDatabase;
    internal static string Spatial_GeographyValueNotCompatibleWithSpatialServices;
    internal static string Spatial_GeometryValueNotCompatibleWithSpatialServices;
    internal static string Spatial_ProviderValueNotCompatibleWithSpatialServices;
    internal static string Spatial_WellKnownGeographyValueNotValid;
    internal static string Spatial_WellKnownGeometryValueNotValid;
    internal static string Spatial_WellKnownValueSerializationPropertyNotDirectlySettable;
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoSrid;
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoWkbOrWkt;
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoSrid;
    internal static string SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoWkbOrWkt;
    internal static string SqlSpatialServices_ProviderValueNotSqlType;
    internal static string EntityConnectionString_Name;
    internal static string EntityConnectionString_Provider;
    internal static string EntityConnectionString_Metadata;
    internal static string EntityConnectionString_ProviderConnectionString;
    internal static string EntityDataCategory_Context;
    internal static string EntityDataCategory_NamedConnectionString;
    internal static string EntityDataCategory_Source;
    internal static string ObjectQuery_Span_IncludeRequiresEntityOrEntityCollection;
    internal static string ObjectQuery_Span_NoNavProp;
    internal static string ObjectQuery_Span_SpanPathSyntaxError;
    internal static string ObjectQuery_Span_WhiteSpacePath;
    internal static string EntityProxyTypeInfo_ProxyHasWrongWrapper;
    internal static string EntityProxyTypeInfo_CannotSetEntityCollectionProperty;
    internal static string EntityProxyTypeInfo_ProxyMetadataIsUnavailable;
    internal static string EntityProxyTypeInfo_DuplicateOSpaceType;
    public static ResourceManager Resources { get; }
    private static EntityRes();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.EntityResCategoryAttribute : CategoryAttribute {
    public EntityResCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.EntityResDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public EntityResDescriptionAttribute(string description);
    public virtual string get_Description();
}
public class System.Data.EntitySqlException : EntityException {
    public string ErrorDescription { get; }
    public string ErrorContext { get; }
    public int Line { get; }
    public int Column { get; }
    public EntitySqlException(string message);
    public EntitySqlException(string message, Exception innerException);
    private EntitySqlException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    internal static EntitySqlException Create(ErrorContext errCtx, string errorMessage, Exception innerException);
    internal static EntitySqlException Create(string commandText, string errorDescription, int errorPosition, string errorContextInfo, bool loadErrorContextInfoFromResource, Exception innerException);
    public string get_ErrorDescription();
    public string get_ErrorContext();
    public int get_Line();
    public int get_Column();
    internal static string GetGenericErrorMessage(string commandText, int position);
    internal static string FormatErrorContext(string commandText, int errorPosition, string errorContextInfo, bool loadErrorContextInfoFromResource, Int32& lineNumber, Int32& columnNumber);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[BindableTypeAttribute]
[FlagsAttribute]
public enum System.Data.EntityState : Enum {
    public int value__;
    public static EntityState Detached;
    public static EntityState Unchanged;
    public static EntityState Added;
    public static EntityState Deleted;
    public static EntityState Modified;
}
[ExtensionAttribute]
internal static class System.Data.EntityUtil : object {
    internal static int AssemblyQualifiedNameIndex;
    internal static int InvariantNameIndex;
    internal static string Parameter;
    internal static CompareOptions StringCompareOptions;
    internal static Dictionary`2<string, string> COMPILER_VERSION;
    private static EntityUtil();
    internal static Nullable`1<bool> ThreeValuedNot(Nullable`1<bool> operand);
    internal static Nullable`1<bool> ThreeValuedAnd(Nullable`1<bool> left, Nullable`1<bool> right);
    internal static Nullable`1<bool> ThreeValuedOr(Nullable`1<bool> left, Nullable`1<bool> right);
    [ExtensionAttribute]
internal static IEnumerable`1<KeyValuePair`2<T1, T2>> Zip(IEnumerable`1<T1> first, IEnumerable`1<T2> second);
    internal static bool IsAnICollection(Type type);
    internal static bool TryGetICollectionElementType(Type collectionType, Type& elementType);
    internal static Type GetCollectionElementType(Type propertyType);
    internal static Type DetermineCollectionType(Type requestedType);
    internal static Type GetEntityIdentityType(Type entityType);
    internal static string QuoteIdentifier(string identifier);
    internal static ArgumentException Argument(string error);
    internal static ArgumentException Argument(string error, Exception inner);
    internal static ArgumentException Argument(string error, string parameter);
    internal static ArgumentException Argument(string error, string parameter, Exception inner);
    internal static ArgumentNullException ArgumentNull(string parameter);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName);
    internal static EntityCommandExecutionException CommandExecution(string message);
    internal static EntityCommandExecutionException CommandExecution(string message, Exception innerException);
    internal static EntityCommandCompilationException CommandCompilation(string message, Exception innerException);
    internal static PropertyConstraintException PropertyConstraint(string message, string propertyName);
    internal static ConstraintException Constraint(string message);
    internal static IndexOutOfRangeException IndexOutOfRange(string error);
    internal static InvalidOperationException InvalidOperation(string error);
    internal static InvalidOperationException InvalidOperation(string error, Exception inner);
    internal static ArgumentException InvalidStringArgument(string parameterName);
    internal static MappingException Mapping(string message);
    internal static MetadataException Metadata(string message, Exception inner);
    internal static MetadataException Metadata(string message);
    internal static NotSupportedException NotSupported();
    internal static NotSupportedException NotSupported(string error);
    internal static ObjectDisposedException ObjectDisposed(string error);
    internal static ObjectNotFoundException ObjectNotFound(string error);
    internal static EntitySqlException EntitySqlError(string message);
    internal static EntitySqlException EntitySqlError(string message, Exception innerException);
    internal static EntitySqlException EntitySqlError(ErrorContext errCtx, string message);
    internal static EntitySqlException EntitySqlError(ErrorContext errCtx, string message, Exception innerException);
    internal static EntitySqlException EntitySqlError(string queryText, string errorMessage, int errorPosition);
    internal static EntitySqlException EntitySqlError(string queryText, string errorMessage, int errorPosition, string additionalErrorInformation, bool loadContextInfoFromResource);
    internal static ProviderIncompatibleException CannotCloneStoreProvider();
    internal static InvalidOperationException ClosedDataReaderError();
    internal static InvalidOperationException DataReaderClosed(string method);
    internal static InvalidOperationException ImplicitlyClosedDataReaderError();
    internal static IndexOutOfRangeException InvalidBufferSizeOrIndex(int numBytes, int bufferIndex);
    internal static IndexOutOfRangeException InvalidDataLength(long length);
    internal static ArgumentOutOfRangeException InvalidDestinationBufferIndex(int maxLen, int dstOffset, string parameterName);
    internal static ArgumentOutOfRangeException InvalidSourceBufferIndex(int maxLen, long srcOffset, string parameterName);
    internal static InvalidOperationException MustUseSequentialAccess();
    internal static InvalidOperationException NoData();
    internal static InvalidOperationException NonSequentialArrayOffsetAccess(long badIndex, long currIndex, string method);
    internal static InvalidOperationException NonSequentialColumnAccess(int badCol, int currCol);
    internal static NotSupportedException KeysRequiredForJoinOverNest(Op op);
    internal static NotSupportedException KeysRequiredForNesting();
    internal static NotSupportedException NestingNotSupported(Op parentOp, Op childOp);
    internal static NotSupportedException ProviderDoesNotSupportCommandTrees();
    internal static EntityCommandExecutionException CommandExecutionDataReaderFieldCountForScalarType();
    internal static EntityCommandExecutionException CommandExecutionDataReaderMissingColumnForType(EdmMember member, EdmType currentType);
    internal static EntityCommandExecutionException CommandExecutionDataReaderMissinDiscriminatorColumn(string columnName, EdmFunction functionImport);
    internal static ProviderIncompatibleException ProviderIncompatible(string error);
    internal static ProviderIncompatibleException ProviderIncompatible(string error, Exception innerException);
    internal static EntityException Provider(string error);
    internal static EntityException Provider(Exception inner);
    internal static EntityException Provider(string parameter, Exception inner);
    internal static EntityException ProviderExceptionWithMessage(string message, Exception inner);
    internal static InvalidOperationException SqlTypesAssemblyNotFound();
    internal static ProviderIncompatibleException GeographyValueNotSqlCompatible();
    internal static ProviderIncompatibleException GeometryValueNotSqlCompatible();
    internal static MetadataException InvalidSchemaEncountered(string errors);
    internal static MetadataException InvalidCollectionForMapping(DataSpace space);
    internal static ArgumentException MemberInvalidIdentity(string identity, string parameter);
    internal static ArgumentException ArrayTooSmall(string parameter);
    internal static ArgumentException ItemDuplicateIdentity(string identity, string parameter, Exception inner);
    internal static ArgumentException ItemInvalidIdentity(string identity, string parameter);
    internal static InvalidOperationException MoreThanOneItemMatchesIdentity(string identity);
    internal static InvalidOperationException OperationOnReadOnlyCollection();
    internal static InvalidOperationException ItemCollectionAlreadyRegistered(DataSpace space);
    internal static InvalidOperationException NoCollectionForSpace(DataSpace space);
    internal static InvalidOperationException InvalidCollectionSpecified(DataSpace space);
    internal static MetadataException DifferentSchemaVersionInCollection(string itemCollectionType, double versionToRegister, double currentSchemaVersion);
    internal static ArgumentException NotBinaryTypeForTypeUsage();
    internal static ArgumentException NotDateTimeTypeForTypeUsage();
    internal static ArgumentException NotDateTimeOffsetTypeForTypeUsage();
    internal static ArgumentException NotTimeTypeForTypeUsage();
    internal static ArgumentException NotDecimalTypeForTypeUsage();
    internal static ArgumentException NotStringTypeForTypeUsage();
    internal static ArgumentException InvalidEntitySetName(string name);
    internal static ArgumentException InvalidRelationshipSetName(string name);
    internal static ArgumentException InvalidEDMVersion(double edmVersion);
    internal static ArgumentException EntitySetInAnotherContainer(string parameter);
    internal static InvalidOperationException OperationOnReadOnlyItem();
    internal static ArgumentException MinAndMaxValueMustBeSameForConstantFacet(string facetName, string typeName);
    internal static ArgumentException MissingDefaultValueForConstantFacet(string facetName, string typeName);
    internal static ArgumentException BothMinAndMaxValueMustBeSpecifiedForNonConstantFacet(string facetName, string typeName);
    internal static ArgumentException MinAndMaxValueMustBeDifferentForNonConstantFacet(string facetName, string typeName);
    internal static ArgumentException MinAndMaxMustBePositive(string facetName, string typeName);
    internal static ArgumentException MinMustBeLessThanMax(string minimumValue, string facetName, string typeName);
    internal static ArgumentException EntitySetNotInCSpace(string name);
    internal static ArgumentException TypeNotInEntitySet(string entitySetName, string rootEntityTypeName, string entityTypeName);
    internal static ArgumentException AssociationSetNotInCSpace(string name);
    internal static ArgumentException TypeNotInAssociationSet(string setName, string rootEntityTypeName, string typeName);
    internal static Exception InternalError(InternalErrorCode internalError);
    internal static Exception InternalError(InternalErrorCode internalError, int location, object additionalInfo);
    internal static Exception InternalError(InternalErrorCode internalError, int location);
    internal static InvalidOperationException OriginalValuesDoesNotExist();
    internal static InvalidOperationException CurrentValuesDoesNotExist();
    internal static ArgumentException InvalidTypeForComplexTypeProperty(string argument);
    internal static InvalidOperationException ObjectStateEntryinInvalidState();
    internal static InvalidOperationException CantModifyDetachedDeletedEntries();
    internal static InvalidOperationException SetModifiedStates(string methodName);
    internal static InvalidOperationException EntityCantHaveMultipleChangeTrackers();
    internal static InvalidOperationException CantModifyRelationValues();
    internal static InvalidOperationException CantModifyRelationState();
    internal static InvalidOperationException CannotModifyKeyProperty(string fieldName);
    internal static InvalidOperationException CantSetEntityKey();
    internal static InvalidOperationException CannotAccessKeyEntryValues();
    internal static InvalidOperationException CannotModifyKeyEntryState();
    internal static InvalidOperationException CannotCallDeleteOnKeyEntry();
    internal static ArgumentException InvalidModifiedPropertyName(string propertyName);
    internal static InvalidOperationException NoEntryExistForEntityKey();
    internal static ArgumentException DetachedObjectStateEntriesDoesNotExistInObjectStateManager();
    internal static InvalidOperationException ObjectStateManagerContainsThisEntityKey();
    internal static InvalidOperationException ObjectStateManagerDoesnotAllowToReAddUnchangedOrModifiedOrDeletedEntity(EntityState state);
    internal static InvalidOperationException CannotFixUpKeyToExistingValues();
    internal static InvalidOperationException KeyPropertyDoesntMatchValueInKey(bool forAttach);
    internal static void CheckValidStateForChangeEntityState(EntityState state);
    internal static void CheckValidStateForChangeRelationshipState(EntityState state, string paramName);
    internal static InvalidOperationException InvalidKey();
    internal static InvalidOperationException AcceptChangesEntityKeyIsNotValid();
    internal static InvalidOperationException EntityConflictsWithKeyEntry();
    internal static InvalidOperationException ObjectDoesNotHaveAKey(object entity);
    internal static InvalidOperationException EntityValueChangedWithoutEntityValueChanging();
    internal static InvalidOperationException ChangedInDifferentStateFromChanging(EntityState currentState, EntityState previousState);
    internal static ArgumentException ChangeOnUnmappedProperty(string entityPropertyName);
    internal static ArgumentException ChangeOnUnmappedComplexProperty(string complexPropertyName);
    internal static ArgumentException EntityTypeDoesNotMatchEntitySet(string entityType, string entitysetName, string argument);
    internal static InvalidOperationException NoEntryExistsForObject(object entity);
    internal static InvalidOperationException EntityNotTracked();
    internal static InvalidOperationException SetOriginalComplexProperties(string propertyName);
    internal static InvalidOperationException NullOriginalValueForNonNullableProperty(string propertyName, string clrMemberName, string clrTypeName);
    internal static InvalidOperationException SetOriginalPrimaryKey(string propertyName);
    internal static void ThrowPropertyIsNotNullable(string propertyName);
    internal static void ThrowSetInvalidValue(object value, Type destinationType, string className, string propertyName);
    internal static InvalidOperationException ValueInvalidCast(Type valueType, Type destinationType);
    internal static InvalidOperationException ValueNullReferenceCast(Type destinationType);
    internal static NotSupportedException RecyclingEntity(EntityKey key, Type newEntityType, Type existingEntityType);
    internal static InvalidOperationException AddedEntityAlreadyExists(EntityKey key);
    internal static InvalidOperationException CannotReEnumerateQueryResults();
    internal static NotSupportedException MaterializerUnsupportedType();
    internal static InvalidOperationException CannotReplacetheEntityorRow();
    internal static NotSupportedException IndexBasedInsertIsNotSupported();
    internal static InvalidOperationException WriteOperationNotAllowedOnReadOnlyBindingList();
    internal static InvalidOperationException AddNewOperationNotAllowedOnAbstractBindingList();
    internal static ArgumentException IncompatibleArgument();
    internal static InvalidOperationException CannotResolveTheEntitySetforGivenEntity(Type type);
    internal static InvalidOperationException NoRelationshipSetMatched(string relationshipName);
    internal static InvalidOperationException ExpectedCollectionGotReference(string typeName, string roleName, string relationshipName);
    internal static InvalidOperationException CannotFillTryDifferentMergeOption(string relationshipName, string roleName);
    internal static InvalidOperationException CannotRemergeCollections();
    internal static InvalidOperationException ExpectedReferenceGotCollection(string typeName, string roleName, string relationshipName);
    internal static InvalidOperationException CannotAddMoreThanOneEntityToEntityReference(string roleName, string relationshipName);
    internal static ArgumentException CannotSetSpecialKeys();
    internal static InvalidOperationException EntityKeyValueMismatch();
    internal static InvalidOperationException RelatedEndNotAttachedToContext(string relatedEndType);
    internal static InvalidOperationException CannotCreateRelationshipBetweenTrackedAndNoTrackedEntities(string roleName);
    internal static InvalidOperationException CannotCreateRelationshipEntitiesInDifferentContexts();
    internal static InvalidOperationException InvalidContainedTypeCollection(string entityType, string relatedEndType);
    internal static InvalidOperationException InvalidContainedTypeReference(string entityType, string relatedEndType);
    internal static InvalidOperationException CannotAddToFixedSizeArray(object collectionType);
    internal static InvalidOperationException CannotRemoveFromFixedSizeArray(object collectionType);
    internal static InvalidOperationException OwnerIsNull();
    internal static InvalidOperationException UnableToAddRelationshipWithDeletedEntity();
    internal static InvalidOperationException ConflictingChangeOfRelationshipDetected();
    internal static InvalidOperationException InvalidRelationshipFixupDetected(string propertyName, string entityType);
    internal static InvalidOperationException LessThanExpectedRelatedEntitiesFound();
    internal static InvalidOperationException MoreThanExpectedRelatedEntitiesFound();
    internal static InvalidOperationException CannotChangeReferentialConstraintProperty();
    internal static InvalidOperationException RelatedEndNotFound();
    internal static InvalidOperationException LoadCalledOnNonEmptyNoTrackedRelatedEnd();
    internal static InvalidOperationException LoadCalledOnAlreadyLoadedNoTrackedRelatedEnd();
    internal static InvalidOperationException MismatchedMergeOptionOnLoad(MergeOption mergeOption);
    internal static InvalidOperationException EntitySetIsNotValidForRelationship(string entitySetContainerName, string entitySetName, string roleName, string associationSetContainerName, string associationSetName);
    internal static InvalidOperationException UnableToRetrieveReferentialConstraintProperties();
    internal static InvalidOperationException InconsistentReferentialConstraintProperties();
    internal static InvalidOperationException CircularRelationshipsWithReferentialConstraints();
    internal static ArgumentException UnableToFindRelationshipTypeInMetadata(string relationshipName, string parameterName);
    internal static ArgumentException InvalidTargetRole(string relationshipName, string targetRoleName, string parameterName);
    internal static InvalidOperationException OwnerIsNotSourceType(string ownerType, string sourceRoleType, string sourceRoleName, string relationshipName);
    internal static InvalidOperationException UnexpectedNullContext();
    internal static InvalidOperationException ReferenceAlreadyInitialized();
    internal static InvalidOperationException RelationshipManagerAttached();
    internal static InvalidOperationException CollectionAlreadyInitialized();
    internal static InvalidOperationException CollectionRelationshipManagerAttached();
    internal static void CheckContextNull(ObjectContext context);
    internal static void CheckArgumentMergeOption(MergeOption mergeOption);
    internal static void CheckArgumentRefreshMode(RefreshMode refreshMode);
    internal static InvalidOperationException InvalidEntityStateSource();
    internal static InvalidOperationException InvalidEntityStateLoad(string relatedEndType);
    internal static InvalidOperationException InvalidOwnerStateForAttach();
    internal static InvalidOperationException InvalidNthElementNullForAttach(int index);
    internal static InvalidOperationException InvalidNthElementContextForAttach(int index);
    internal static InvalidOperationException InvalidNthElementStateForAttach(int index);
    internal static InvalidOperationException InvalidEntityContextForAttach();
    internal static InvalidOperationException InvalidEntityStateForAttach();
    internal static InvalidOperationException UnableToAddToDisconnectedRelatedEnd();
    internal static InvalidOperationException UnableToRemoveFromDisconnectedRelatedEnd();
    internal static InvalidOperationException ProxyMetadataIsUnavailable(Type type, Exception inner);
    internal static InvalidOperationException DuplicateTypeForProxyType(Type type);
    internal static InvalidOperationException ClientEntityRemovedFromStore(string entitiesKeys);
    internal static InvalidOperationException StoreEntityNotPresentInClient();
    internal static InvalidOperationException ContextMetadataHasChanged();
    internal static ArgumentException InvalidConnection(bool isConnectionConstructor, Exception innerException);
    internal static ArgumentException InvalidConnectionString(string parameter, Exception inner);
    internal static ArgumentException InvalidConnection(string parameter, Exception inner);
    internal static InvalidOperationException InvalidDataAdapter();
    internal static ArgumentException InvalidDefaultContainerName(string parameter, string defaultContainerName);
    internal static InvalidOperationException NthElementInAddedState(int i);
    internal static InvalidOperationException NthElementIsDuplicate(int i);
    internal static InvalidOperationException NthElementIsNull(int i);
    internal static InvalidOperationException NthElementNotInObjectStateManager(int i);
    internal static ObjectDisposedException ObjectContextDisposed();
    internal static ObjectNotFoundException ObjectNotFound();
    internal static InvalidOperationException InvalidEntityType(Type type);
    internal static InvalidOperationException CannotDeleteEntityNotInObjectStateManager();
    internal static InvalidOperationException CannotDetachEntityNotInObjectStateManager();
    internal static InvalidOperationException EntitySetNotFoundForName(string entitySetName);
    internal static InvalidOperationException EntityContainterNotFoundForName(string entityContainerName);
    internal static ArgumentException InvalidCommandTimeout(string argument);
    internal static InvalidOperationException EntityAlreadyExistsInObjectStateManager();
    internal static InvalidOperationException InvalidEntitySetInKey(string keyContainer, string keyEntitySet, string expectedContainer, string expectedEntitySet);
    internal static InvalidOperationException InvalidEntitySetInKeyFromName(string keyContainer, string keyEntitySet, string expectedContainer, string expectedEntitySet, string argument);
    internal static InvalidOperationException CannotAttachEntityWithoutKey();
    internal static InvalidOperationException CannotAttachEntityWithTemporaryKey();
    internal static InvalidOperationException EntitySetNameOrEntityKeyRequired();
    internal static InvalidOperationException ExecuteFunctionTypeMismatch(Type typeArgument, EdmType expectedElementType);
    internal static InvalidOperationException ExecuteFunctionCalledWithNonReaderFunction(EdmFunction functionImport);
    internal static ArgumentException QualfiedEntitySetName(string parameterName);
    internal static ArgumentException ContainerQualifiedEntitySetNameRequired(string argument);
    internal static InvalidOperationException CannotSetDefaultContainerName();
    internal static ArgumentException EntitiesHaveDifferentType(string originalEntityTypeName, string changedEntityTypeName);
    internal static InvalidOperationException EntityMustBeUnchangedOrModified(EntityState state);
    internal static InvalidOperationException EntityMustBeUnchangedOrModifiedOrDeleted(EntityState state);
    internal static InvalidOperationException EntityNotTrackedOrHasTempKey();
    internal static InvalidOperationException AcceptAllChangesFailure(Exception e);
    internal static ArgumentException InvalidEntitySetOnEntity(string entitySetName, Type entityType, string parameter);
    internal static ArgumentException InvalidEntityTypeForObjectSet(string tEntityType, string entitySetType, string entitySetName, string parameter);
    internal static InvalidOperationException RequiredMetadataNotAvailable();
    internal static ArgumentException MultipleEntitySetsFoundInSingleContainer(string entityTypeName, string entityContainerName, string exceptionParameterName);
    internal static ArgumentException MultipleEntitySetsFoundInAllContainers(string entityTypeName, string exceptionParameterName);
    internal static ArgumentException NoEntitySetFoundForType(string entityTypeName, string exceptionParameterName);
    internal static InvalidOperationException EntityNotInObjectSet_Delete(string actualContainerName, string actualEntitySetName, string expectedContainerName, string expectedEntitySetName);
    internal static InvalidOperationException EntityNotInObjectSet_Detach(string actualContainerName, string actualEntitySetName, string expectedContainerName, string expectedEntitySetName);
    internal static ArgumentException InvalidRelationshipStateArgument(string paramName);
    internal static ArgumentException InvalidEntityStateArgument(string paramName);
    internal static InvalidOperationException NullableComplexTypesNotSupported(string propertyName);
    internal static InvalidOperationException ComplexObjectAlreadyAttachedToParent();
    internal static ArgumentException ComplexChangeRequestedOnScalarProperty(string propertyName);
    internal static ArgumentException SpanPathSyntaxError();
    internal static ArgumentException ADP_InvalidMultipartNameDelimiterUsage();
    internal static Exception InvalidConnectionOptionValue(string key);
    internal static ArgumentException InvalidSizeValue(int value);
    internal static ArgumentException ConnectionStringSyntax(int index);
    internal static InvalidOperationException DataRecordMustBeEntity();
    internal static ArgumentException EntitySetDoesNotMatch(string argument, string entitySetName);
    internal static InvalidOperationException EntityTypesDoNotMatch(string recordType, string entitySetType);
    internal static ArgumentException IncorrectNumberOfKeyValuePairs(string argument, string typeName, int expectedNumFields, int actualNumFields);
    internal static InvalidOperationException IncorrectNumberOfKeyValuePairsInvalidOperation(string typeName, int expectedNumFields, int actualNumFields);
    internal static ArgumentException IncorrectValueType(string argument, string keyField, string expectedTypeName, string actualTypeName);
    internal static InvalidOperationException IncorrectValueTypeInvalidOperation(string keyField, string expectedTypeName, string actualTypeName);
    internal static ArgumentException NoCorrespondingOSpaceTypeForEnumKeyField(string argument, string keyField, string cspaceTypeName);
    internal static InvalidOperationException NoCorrespondingOSpaceTypeForEnumKeyFieldInvalidOperation(string keyField, string cspaceTypeName);
    internal static ArgumentException MissingKeyValue(string argument, string keyField, string typeName);
    internal static ArgumentException MissingKeyValue(string argument, string keyField, string typeName, Exception inner);
    internal static InvalidOperationException NullKeyValue(string keyField, string typeName);
    internal static InvalidOperationException MissingKeyValueInvalidOperation(string keyField, string typeName);
    internal static ArgumentException NoNullsAllowedInKeyValuePairs(string argument);
    internal static ArgumentException EntityKeyMustHaveValues(string argument);
    internal static ArgumentException InvalidQualifiedEntitySetName();
    internal static ArgumentException EntityKeyInvalidName(string invalidName);
    internal static InvalidOperationException MissingQualifiedEntitySetName();
    internal static InvalidOperationException CannotChangeEntityKey();
    internal static InvalidOperationException UnexpectedNullEntityKey();
    internal static InvalidOperationException EntityKeyDoesntMatchKeySetOnEntity(object entity);
    internal static void CheckEntityKeyNull(EntityKey entityKey);
    internal static void CheckEntityKeysMatch(IEntityWrapper wrappedEntity, EntityKey key);
    internal static InvalidOperationException UnexpectedNullRelationshipManager();
    internal static InvalidOperationException InvalidRelationshipManagerOwner();
    internal static void ValidateEntitySetInKey(EntityKey key, EntitySet entitySet);
    internal static void ValidateEntitySetInKey(EntityKey key, EntitySet entitySet, string argument);
    internal static ArgumentOutOfRangeException InvalidMergeOption(MergeOption value);
    internal static ArgumentOutOfRangeException InvalidRefreshMode(RefreshMode value);
    internal static ArgumentException InvalidDataType(TypeCode typecode);
    internal static ArgumentException UnknownDataTypeCode(Type dataType, TypeCode typeCode);
    internal static ArgumentOutOfRangeException InvalidParameterDirection(ParameterDirection value);
    internal static ArgumentOutOfRangeException InvalidDataRowVersion(DataRowVersion value);
    internal static void ValidateNecessaryModificationFunctionMapping(StorageModificationFunctionMapping mapping, string currentState, IEntityStateEntry stateEntry, string type, string typeName);
    internal static UpdateException Update(string message, Exception innerException, IEntityStateEntry[] stateEntries);
    internal static UpdateException Update(string message, Exception innerException, IEnumerable`1<IEntityStateEntry> stateEntries);
    internal static OptimisticConcurrencyException UpdateConcurrency(long rowsAffected, Exception innerException, IEnumerable`1<IEntityStateEntry> stateEntries);
    internal static UpdateException UpdateRelationshipCardinalityConstraintViolation(string relationshipSetName, int minimumCount, Nullable`1<int> maximumCount, string entitySetName, int actualCount, string otherEndPluralName, IEntityStateEntry stateEntry);
    internal static UpdateException UpdateEntityMissingConstraintViolation(string relationshipSetName, string endName, IEntityStateEntry stateEntry);
    internal static UpdateException UpdateMissingEntity(string relationshipSetName, string entitySetName);
    internal static ArgumentException CollectionParameterElementIsNull(string parameterName);
    internal static ArgumentException CollectionParameterElementIsNullOrEmpty(string parameterName);
    internal static InvalidOperationException FunctionHasNoDefinition(EdmFunction function);
    internal static InvalidOperationException FunctionDefinitionResultTypeMismatch(EdmFunction function, TypeUsage generatedDefinitionResultType);
    internal static Exception EntityParameterCollectionInvalidIndex(int index, int count);
    internal static Exception EntityParameterCollectionInvalidParameterName(string parameterName);
    internal static Exception EntityParameterNull(string parameter);
    internal static Exception InvalidEntityParameterType(object invalidValue);
    internal static ArgumentException EntityParameterCollectionRemoveInvalidObject();
    internal static ArgumentException EntityParameterContainedByAnotherCollection();
    internal static void ThrowArgumentNullException(string parameterName);
    internal static void ThrowArgumentOutOfRangeException(string parameterName);
    internal static T CheckArgumentOutOfRange(T[] values, int index, string parameterName);
    internal static T CheckArgumentNull(T value, string parameterName);
    internal static IEnumerable`1<T> CheckArgumentContainsNull(IEnumerable`1& enumerableArgument, string argumentName);
    internal static IEnumerable`1<T> CheckArgumentEmpty(IEnumerable`1& enumerableArgument, Func`2<string, string> errorMessage, string argumentName);
    internal static T GenericCheckArgumentNull(T value, string parameterName);
    internal static ArgumentException KeywordNotSupported(string keyword);
    internal static ArgumentException ADP_KeywordNotSupported(string keyword);
    internal static ArgumentOutOfRangeException InvalidEnumerationValue(Type type, int value);
    internal static bool TryGetProviderInvariantName(DbProviderFactory providerFactory, String& invariantName);
    internal static bool AssemblyNamesMatch(string infoRowProviderAssemblyName, AssemblyName targetAssemblyName);
    internal static void CheckStringArgument(string value, string parameterName);
    internal static bool IsCatchableExceptionType(Exception e);
    internal static bool IsCatchableEntityExceptionType(Exception e);
    internal static bool IsNull(object value);
    internal static void BoolExprAssert(bool condition, string message);
    internal static PropertyInfo GetTopProperty(Type t, string propertyName);
    internal static PropertyInfo GetTopProperty(Type& t, string propertyName);
    internal static int SrcCompare(string strA, string strB);
    internal static int DstCompare(string strA, string strB);
    [SecuritySafeCriticalAttribute]
internal static string GetFullPath(string filename);
    public static Type[] GetTypesSpecial(Assembly assembly);
}
internal class System.Data.FieldNameLookup : object {
    public FieldNameLookup(ReadOnlyCollection`1<string> columnNames, int defaultLocaleID);
    public FieldNameLookup(IDataRecord reader, int defaultLocaleID);
    public int GetOrdinal(string fieldName);
    public int IndexOf(string fieldName);
}
internal interface System.Data.IEntityAdapter {
    public DbConnection Connection { get; public set; }
    public bool AcceptChangesDuringUpdate { get; public set; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    public abstract virtual DbConnection get_Connection();
    public abstract virtual void set_Connection(DbConnection value);
    public abstract virtual bool get_AcceptChangesDuringUpdate();
    public abstract virtual void set_AcceptChangesDuringUpdate(bool value);
    public abstract virtual Nullable`1<int> get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(Nullable`1<int> value);
    public abstract virtual int Update(IEntityStateManager cache);
}
internal interface System.Data.IEntityStateEntry {
    public IEntityStateManager StateManager { get; }
    public EntityKey EntityKey { get; }
    public EntitySetBase EntitySet { get; }
    public bool IsRelationship { get; }
    public bool IsKeyEntry { get; }
    public EntityState State { get; }
    public DbDataRecord OriginalValues { get; }
    public CurrentValueRecord CurrentValues { get; }
    public BitArray ModifiedProperties { get; }
    public abstract virtual IEntityStateManager get_StateManager();
    public abstract virtual EntityKey get_EntityKey();
    public abstract virtual EntitySetBase get_EntitySet();
    public abstract virtual bool get_IsRelationship();
    public abstract virtual bool get_IsKeyEntry();
    public abstract virtual EntityState get_State();
    public abstract virtual DbDataRecord get_OriginalValues();
    public abstract virtual CurrentValueRecord get_CurrentValues();
    public abstract virtual BitArray get_ModifiedProperties();
    public abstract virtual void AcceptChanges();
    public abstract virtual void Delete();
    public abstract virtual void SetModified();
    public abstract virtual void SetModifiedProperty(string propertyName);
    public abstract virtual IEnumerable`1<string> GetModifiedProperties();
}
internal interface System.Data.IEntityStateManager {
    public abstract virtual IEnumerable`1<IEntityStateEntry> GetEntityStateEntries(EntityState state);
    public abstract virtual IEnumerable`1<IEntityStateEntry> FindRelationshipsByKey(EntityKey key);
    public abstract virtual IEntityStateEntry GetEntityStateEntry(EntityKey key);
    public abstract virtual bool TryGetEntityStateEntry(EntityKey key, IEntityStateEntry& stateEntry);
    public abstract virtual bool TryGetReferenceKey(EntityKey dependentKey, AssociationEndMember principalRole, EntityKey& principalKey);
}
public interface System.Data.IExtendedDataRecord {
    public DataRecordInfo DataRecordInfo { get; }
    public abstract virtual DataRecordInfo get_DataRecordInfo();
    public abstract virtual DbDataRecord GetDataRecord(int i);
    public abstract virtual DbDataReader GetDataReader(int i);
}
internal class System.Data.InternalMappingException : EntityException {
    internal ErrorLog ErrorLog { get; }
    internal InternalMappingException(string message);
    internal InternalMappingException(string message, Exception innerException);
    protected InternalMappingException(SerializationInfo info, StreamingContext context);
    internal InternalMappingException(string message, ErrorLog errorLog);
    internal InternalMappingException(string message, Record record);
    internal ErrorLog get_ErrorLog();
}
public class System.Data.InvalidCommandTreeException : DataException {
    public InvalidCommandTreeException(string message);
    public InvalidCommandTreeException(string message, Exception innerException);
    private InvalidCommandTreeException(SerializationInfo info, StreamingContext context);
}
internal abstract class System.Data.Mapping.BaseMetadataMappingVisitor : object {
    protected virtual void Visit(StorageEntityContainerMapping storageEntityContainerMapping);
    protected virtual void Visit(EntitySetBase entitySetBase);
    protected virtual void Visit(StorageSetMapping storageSetMapping);
    protected virtual void Visit(EntityContainer entityContainer);
    protected virtual void Visit(EntitySet entitySet);
    protected virtual void Visit(AssociationSet associationSet);
    protected virtual void Visit(EntityType entityType);
    protected virtual void Visit(AssociationType associationType);
    protected virtual void Visit(AssociationSetEnd associationSetEnd);
    protected virtual void Visit(EdmProperty edmProperty);
    protected virtual void Visit(NavigationProperty navigationProperty);
    protected virtual void Visit(EdmMember edmMember);
    protected virtual void Visit(AssociationEndMember associationEndMember);
    protected virtual void Visit(ReferentialConstraint referentialConstraint);
    protected virtual void Visit(RelationshipEndMember relationshipEndMember);
    protected virtual void Visit(TypeUsage typeUsage);
    protected virtual void Visit(RelationshipType relationshipType);
    protected virtual void Visit(EdmType edmType);
    protected virtual void Visit(Facet facet);
    protected virtual void Visit(EdmFunction edmFunction);
    protected virtual void Visit(PrimitiveType primitiveType);
    protected virtual void Visit(ComplexType complexType);
    protected virtual void Visit(RefType refType);
    protected virtual void Visit(EnumType enumType);
    protected virtual void Visit(EnumMember enumMember);
    protected virtual void Visit(CollectionType collectionType);
    protected virtual void Visit(EntityTypeBase entityTypeBase);
    protected virtual void Visit(FunctionParameter functionParameter);
    protected virtual void Visit(DbProviderManifest providerManifest);
    protected virtual void Visit(StorageTypeMapping storageTypeMapping);
    protected virtual void Visit(StorageMappingFragment storageMappingFragment);
    protected virtual void Visit(StoragePropertyMapping storagePropertyMapping);
    protected virtual void Visit(StorageComplexPropertyMapping storageComplexPropertyMapping);
    protected virtual void Visit(StorageConditionPropertyMapping storageConditionPropertyMapping);
    protected virtual void Visit(StorageScalarPropertyMapping storageScalarPropertyMapping);
    protected virtual void Visit(StorageComplexTypeMapping storageComplexTypeMapping);
}
internal class System.Data.Mapping.CompressingHashBuilder : StringHashBuilder {
    internal CompressingHashBuilder(HashAlgorithm hashAlgorithm);
    internal virtual void Append(string content);
    internal virtual void AppendLine(string content);
    internal void AppendObjectStartDump(object o, int objectIndex);
    internal void AppendObjectEndDump();
}
internal class System.Data.Mapping.DefaultObjectMappingItemCollection : MappingItemCollection {
    public DefaultObjectMappingItemCollection(EdmItemCollection edmCollection, ObjectItemCollection objectCollection);
    internal virtual Map GetMap(string identity, DataSpace typeSpace, bool ignoreCase);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, bool ignoreCase, Map& map);
    internal virtual Map GetMap(string identity, DataSpace typeSpace);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, Map& map);
    internal virtual Map GetMap(GlobalItem item);
    internal virtual bool TryGetMap(GlobalItem item, Map& map);
    internal static ObjectTypeMapping LoadObjectMapping(EdmType cdmType, EdmType objectType, DefaultObjectMappingItemCollection ocItemCollection);
}
public abstract class System.Data.Mapping.EntityViewContainer : object {
    internal IEnumerable`1<KeyValuePair`2<string, string>> ExtentViews { get; }
    public string EdmEntityContainerName { get; public set; }
    public string StoreEntityContainerName { get; public set; }
    public string HashOverMappingClosure { get; public set; }
    public string HashOverAllExtentViews { get; public set; }
    public int ViewCount { get; protected set; }
    internal IEnumerable`1<KeyValuePair`2<string, string>> get_ExtentViews();
    protected abstract virtual KeyValuePair`2<string, string> GetViewAt(int index);
    public string get_EdmEntityContainerName();
    public void set_EdmEntityContainerName(string value);
    public string get_StoreEntityContainerName();
    public void set_StoreEntityContainerName(string value);
    public string get_HashOverMappingClosure();
    public void set_HashOverMappingClosure(string value);
    public string get_HashOverAllExtentViews();
    public void set_HashOverAllExtentViews(string value);
    public int get_ViewCount();
    protected void set_ViewCount(int value);
}
[AttributeUsageAttribute("1")]
public class System.Data.Mapping.EntityViewGenerationAttribute : Attribute {
    public Type ViewGenerationType { get; }
    public EntityViewGenerationAttribute(Type viewGenerationType);
    public Type get_ViewGenerationType();
}
internal class System.Data.Mapping.FunctionImportComplexTypeMapping : FunctionImportStructuralTypeMapping {
    internal ComplexType ReturnType;
    internal FunctionImportComplexTypeMapping(ComplexType returnType, Collection`1<FunctionImportReturnTypePropertyMapping> columnsRenameList, LineInfo lineInfo);
}
internal class System.Data.Mapping.FunctionImportEntityTypeMapping : FunctionImportStructuralTypeMapping {
    internal ReadOnlyCollection`1<FunctionImportEntityTypeMappingCondition> Conditions;
    internal ReadOnlyCollection`1<EntityType> EntityTypes;
    internal ReadOnlyCollection`1<EntityType> IsOfTypeEntityTypes;
    internal FunctionImportEntityTypeMapping(IEnumerable`1<EntityType> isOfTypeEntityTypes, IEnumerable`1<EntityType> entityTypes, IEnumerable`1<FunctionImportEntityTypeMappingCondition> conditions, Collection`1<FunctionImportReturnTypePropertyMapping> columnsRenameList, LineInfo lineInfo);
    internal IEnumerable`1<EntityType> GetMappedEntityTypes(ItemCollection itemCollection);
    internal IEnumerable`1<string> GetDiscriminatorColumns();
}
internal abstract class System.Data.Mapping.FunctionImportEntityTypeMappingCondition : object {
    internal string ColumnName;
    internal LineInfo LineInfo;
    internal ValueCondition ConditionValue { get; }
    protected FunctionImportEntityTypeMappingCondition(string columnName, LineInfo lineInfo);
    internal abstract virtual ValueCondition get_ConditionValue();
    internal abstract virtual bool ColumnValueMatchesCondition(object columnValue);
    public virtual string ToString();
}
internal class System.Data.Mapping.FunctionImportEntityTypeMappingConditionIsNull : FunctionImportEntityTypeMappingCondition {
    internal bool IsNull;
    internal ValueCondition ConditionValue { get; }
    internal FunctionImportEntityTypeMappingConditionIsNull(string columnName, bool isNull, LineInfo lineInfo);
    internal virtual ValueCondition get_ConditionValue();
    internal virtual bool ColumnValueMatchesCondition(object columnValue);
}
internal class System.Data.Mapping.FunctionImportEntityTypeMappingConditionValue : FunctionImportEntityTypeMappingCondition {
    internal ValueCondition ConditionValue { get; }
    internal FunctionImportEntityTypeMappingConditionValue(string columnName, XPathNavigator columnValue, LineInfo lineInfo);
    internal virtual ValueCondition get_ConditionValue();
    internal virtual bool ColumnValueMatchesCondition(object columnValue);
    internal object GetConditionValue(Type columnValueType, Action handleTypeNotComparable, Action handleInvalidConditionValue);
}
internal abstract class System.Data.Mapping.FunctionImportMapping : object {
    internal EdmFunction FunctionImport;
    internal EdmFunction TargetFunction;
    internal FunctionImportMapping(EdmFunction functionImport, EdmFunction targetFunction);
}
internal class System.Data.Mapping.FunctionImportMappingComposable : FunctionImportMapping {
    internal EdmProperty[] TvfKeys { get; }
    internal FunctionImportMappingComposable(EdmFunction functionImport, EdmFunction targetFunction, List`1<Tuple`3<StructuralType, List`1<StorageConditionPropertyMapping>, List`1<StoragePropertyMapping>>> structuralTypeMappings, EdmProperty[] targetFunctionKeys, StorageMappingItemCollection mappingItemCollection, string sourceLocation, LineInfo lineInfo);
    internal EdmProperty[] get_TvfKeys();
    internal Node GetInternalTree(Command targetIqtCommand, IList`1<Node> targetIqtArguments);
    internal DbQueryCommandTree GenerateFunctionView(IList`1<EdmSchemaError> errors, DiscriminatorMap& discriminatorMap);
    internal void ValidateFunctionView(IList`1<EdmSchemaError> errors);
}
internal class System.Data.Mapping.FunctionImportMappingNonComposable : FunctionImportMapping {
    internal ReadOnlyCollection`1<FunctionImportStructuralTypeMappingKB> ResultMappings;
    internal FunctionImportMappingNonComposable(EdmFunction functionImport, EdmFunction targetFunction, List`1<List`1<FunctionImportStructuralTypeMapping>> structuralTypeMappingsList, ItemCollection itemCollection);
    internal FunctionImportStructuralTypeMappingKB GetResultMapping(int resultSetIndex);
    internal IList`1<string> GetDiscriminatorColumns(int resultSetIndex);
    internal EntityType Discriminate(Object[] discriminatorValues, int resultSetIndex);
    internal TypeUsage GetExpectedTargetResultType(MetadataWorkspace workspace, int resultSetIndex);
}
internal class System.Data.Mapping.FunctionImportNormalizedEntityTypeMapping : object {
    internal ReadOnlyCollection`1<FunctionImportEntityTypeMappingCondition> ColumnConditions;
    internal BitArray ImpliedEntityTypes;
    internal BitArray ComplementImpliedEntityTypes;
    internal FunctionImportNormalizedEntityTypeMapping(FunctionImportStructuralTypeMappingKB parent, List`1<FunctionImportEntityTypeMappingCondition> columnConditions, BitArray impliedEntityTypes);
    public virtual string ToString();
}
internal class System.Data.Mapping.FunctionImportReturnTypeEntityTypeColumnsRenameBuilder : object {
    internal Dictionary`2<string, FunctionImportReturnTypeStructuralTypeColumnRenameMapping> ColumnRenameMapping;
    internal FunctionImportReturnTypeEntityTypeColumnsRenameBuilder(Dictionary`2<EntityType, Collection`1<FunctionImportReturnTypePropertyMapping>> isOfTypeEntityTypeColumnsRenameMapping, Dictionary`2<EntityType, Collection`1<FunctionImportReturnTypePropertyMapping>> entityTypeColumnsRenameMapping);
}
internal abstract class System.Data.Mapping.FunctionImportReturnTypePropertyMapping : object {
    internal string CMember;
    internal string SColumn;
    internal LineInfo LineInfo;
    internal FunctionImportReturnTypePropertyMapping(string cMember, string sColumn, LineInfo lineInfo);
}
internal class System.Data.Mapping.FunctionImportReturnTypeScalarPropertyMapping : FunctionImportReturnTypePropertyMapping {
    internal FunctionImportReturnTypeScalarPropertyMapping(string cMember, string sColumn, LineInfo lineInfo);
}
internal class System.Data.Mapping.FunctionImportReturnTypeStructuralTypeColumn : object {
    internal StructuralType Type;
    internal bool IsTypeOf;
    internal string ColumnName;
    internal LineInfo LineInfo;
    internal FunctionImportReturnTypeStructuralTypeColumn(string columnName, StructuralType type, bool isTypeOf, LineInfo lineInfo);
}
internal class System.Data.Mapping.FunctionImportReturnTypeStructuralTypeColumnRenameMapping : object {
    internal FunctionImportReturnTypeStructuralTypeColumnRenameMapping(string defaultMemberName);
    internal string GetRename(EdmType type);
    internal string GetRename(EdmType type, IXmlLineInfo& lineInfo);
    internal void AddRename(FunctionImportReturnTypeStructuralTypeColumn renamedColumn);
}
internal abstract class System.Data.Mapping.FunctionImportStructuralTypeMapping : object {
    internal LineInfo LineInfo;
    internal Collection`1<FunctionImportReturnTypePropertyMapping> ColumnsRenameList;
    internal FunctionImportStructuralTypeMapping(Collection`1<FunctionImportReturnTypePropertyMapping> columnsRenameList, LineInfo lineInfo);
}
internal class System.Data.Mapping.FunctionImportStructuralTypeMappingKB : object {
    internal ReadOnlyCollection`1<EntityType> MappedEntityTypes;
    internal ReadOnlyCollection`1<string> DiscriminatorColumns;
    internal ReadOnlyCollection`1<FunctionImportNormalizedEntityTypeMapping> NormalizedEntityTypeMappings;
    internal Dictionary`2<string, FunctionImportReturnTypeStructuralTypeColumnRenameMapping> ReturnTypeColumnsRenameMapping;
    internal FunctionImportStructuralTypeMappingKB(IEnumerable`1<FunctionImportStructuralTypeMapping> structuralTypeMappings, ItemCollection itemCollection);
    internal bool ValidateTypeConditions(bool validateAmbiguity, IList`1<EdmSchemaError> errors, string sourceLocation);
}
internal class System.Data.Mapping.InputForComputingCellGroups : ValueType {
    internal StorageEntityContainerMapping ContainerMapping;
    internal ConfigViewGenerator Config;
    internal InputForComputingCellGroups(StorageEntityContainerMapping containerMapping, ConfigViewGenerator config);
    public sealed virtual bool Equals(InputForComputingCellGroups other);
    public sealed virtual bool Equals(InputForComputingCellGroups one, InputForComputingCellGroups two);
    public sealed virtual int GetHashCode(InputForComputingCellGroups value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(InputForComputingCellGroups input1, InputForComputingCellGroups input2);
    public static bool op_Inequality(InputForComputingCellGroups input1, InputForComputingCellGroups input2);
}
internal class System.Data.Mapping.LineInfo : object {
    internal static LineInfo Empty;
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal LineInfo(XPathNavigator nav);
    internal LineInfo(IXmlLineInfo lineInfo);
    private static LineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public sealed virtual bool HasLineInfo();
}
internal abstract class System.Data.Mapping.Map : GlobalItem {
    internal MetadataItem EdmItem { get; }
    internal abstract virtual MetadataItem get_EdmItem();
}
[CLSCompliantAttribute("False")]
public abstract class System.Data.Mapping.MappingItemCollection : ItemCollection {
    internal MappingItemCollection(DataSpace dataSpace);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, Map& map);
    internal virtual Map GetMap(GlobalItem item);
    internal virtual bool TryGetMap(GlobalItem item, Map& map);
    internal virtual Map GetMap(string identity, DataSpace typeSpace, bool ignoreCase);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, bool ignoreCase, Map& map);
    internal virtual Map GetMap(string identity, DataSpace typeSpace);
}
internal enum System.Data.Mapping.MemberMappingKind : Enum {
    public int value__;
    public static MemberMappingKind ScalarPropertyMapping;
    public static MemberMappingKind NavigationPropertyMapping;
    public static MemberMappingKind AssociationEndMapping;
    public static MemberMappingKind ComplexPropertyMapping;
}
internal class System.Data.Mapping.MetadataMappingHasherVisitor : BaseMetadataMappingVisitor {
    internal string HashValue { get; }
    protected virtual void Visit(StorageEntityContainerMapping storageEntityContainerMapping);
    protected virtual void Visit(EntityContainer entityContainer);
    protected virtual void Visit(StorageSetMapping storageSetMapping);
    protected virtual void Visit(StorageTypeMapping storageTypeMapping);
    protected virtual void Visit(StorageMappingFragment storageMappingFragment);
    protected virtual void Visit(StoragePropertyMapping storagePropertyMapping);
    protected virtual void Visit(StorageComplexPropertyMapping storageComplexPropertyMapping);
    protected virtual void Visit(StorageComplexTypeMapping storageComplexTypeMapping);
    protected virtual void Visit(StorageConditionPropertyMapping storageConditionPropertyMapping);
    protected virtual void Visit(StorageScalarPropertyMapping storageScalarPropertyMapping);
    protected virtual void Visit(EntitySetBase entitySetBase);
    protected virtual void Visit(EntitySet entitySet);
    protected virtual void Visit(AssociationSet associationSet);
    protected virtual void Visit(EntityType entityType);
    protected virtual void Visit(AssociationSetEnd associationSetEnd);
    protected virtual void Visit(AssociationType associationType);
    protected virtual void Visit(EdmProperty edmProperty);
    protected virtual void Visit(NavigationProperty navigationProperty);
    protected virtual void Visit(EdmMember edmMember);
    protected virtual void Visit(AssociationEndMember associationEndMember);
    protected virtual void Visit(ReferentialConstraint referentialConstraint);
    protected virtual void Visit(RelationshipEndMember relationshipEndMember);
    protected virtual void Visit(TypeUsage typeUsage);
    protected virtual void Visit(RelationshipType relationshipType);
    protected virtual void Visit(EdmType edmType);
    protected virtual void Visit(EnumType enumType);
    protected virtual void Visit(EnumMember enumMember);
    protected virtual void Visit(CollectionType collectionType);
    protected virtual void Visit(RefType refType);
    protected virtual void Visit(EntityTypeBase entityTypeBase);
    protected virtual void Visit(Facet facet);
    protected virtual void Visit(EdmFunction edmFunction);
    protected virtual void Visit(ComplexType complexType);
    protected virtual void Visit(PrimitiveType primitiveType);
    protected virtual void Visit(FunctionParameter functionParameter);
    protected virtual void Visit(DbProviderManifest providerManifest);
    internal string get_HashValue();
    internal static string GetMappingClosureHash(double mappingVersion, StorageEntityContainerMapping storageEntityContainerMapping);
}
internal class System.Data.Mapping.ObjectAssociationEndMapping : ObjectMemberMapping {
    internal MemberMappingKind MemberMappingKind { get; }
    internal ObjectAssociationEndMapping(AssociationEndMember edmAssociationEnd, AssociationEndMember clrAssociationEnd);
    internal virtual MemberMappingKind get_MemberMappingKind();
}
internal class System.Data.Mapping.ObjectComplexPropertyMapping : ObjectPropertyMapping {
    internal MemberMappingKind MemberMappingKind { get; }
    internal ObjectComplexPropertyMapping(EdmProperty edmProperty, EdmProperty clrProperty, ObjectTypeMapping complexTypeMapping);
    internal virtual MemberMappingKind get_MemberMappingKind();
}
internal abstract class System.Data.Mapping.ObjectMemberMapping : object {
    internal EdmMember EdmMember { get; }
    internal EdmMember ClrMember { get; }
    internal MemberMappingKind MemberMappingKind { get; }
    protected ObjectMemberMapping(EdmMember edmMember, EdmMember clrMember);
    internal EdmMember get_EdmMember();
    internal EdmMember get_ClrMember();
    internal abstract virtual MemberMappingKind get_MemberMappingKind();
}
internal static class System.Data.Mapping.ObjectMslConstructs : object {
    internal static string MappingElement;
    internal static string AliasElement;
    internal static string AliasKeyAttribute;
    internal static string AliasValueAttribute;
    internal static char IdentitySeperator;
}
internal class System.Data.Mapping.ObjectNavigationPropertyMapping : ObjectMemberMapping {
    internal MemberMappingKind MemberMappingKind { get; }
    internal ObjectNavigationPropertyMapping(NavigationProperty edmNavigationProperty, NavigationProperty clrNavigationProperty);
    internal virtual MemberMappingKind get_MemberMappingKind();
}
internal class System.Data.Mapping.ObjectPropertyMapping : ObjectMemberMapping {
    internal EdmProperty ClrProperty { get; }
    internal MemberMappingKind MemberMappingKind { get; }
    internal ObjectPropertyMapping(EdmProperty edmProperty, EdmProperty clrProperty);
    internal EdmProperty get_ClrProperty();
    internal virtual MemberMappingKind get_MemberMappingKind();
}
internal class System.Data.Mapping.ObjectTypeMapping : Map {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal EdmType ClrType { get; }
    internal MetadataItem EdmItem { get; }
    internal EdmType EdmType { get; }
    internal string Identity { get; }
    internal ObjectTypeMapping(EdmType clrType, EdmType cdmType);
    private static ObjectTypeMapping();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal EdmType get_ClrType();
    internal virtual MetadataItem get_EdmItem();
    internal EdmType get_EdmType();
    internal virtual string get_Identity();
    internal ObjectPropertyMapping GetPropertyMap(string propertyName);
    internal void AddMemberMap(ObjectMemberMapping memberMapping);
    internal ObjectMemberMapping GetMemberMapForClrMember(string clrMemberName, bool ignoreCase);
    public virtual string ToString();
}
internal class System.Data.Mapping.OutputFromComputeCellGroups : ValueType {
    internal List`1<Cell> Cells;
    internal CqlIdentifiers Identifiers;
    internal List`1<Set`1<Cell>> CellGroups;
    internal List`1<ForeignConstraint> ForeignKeyConstraints;
    internal bool Success;
}
internal class System.Data.Mapping.StorageAssociationSetMapping : StorageSetMapping {
    internal StorageAssociationSetModificationFunctionMapping ModificationFunctionMapping { get; internal set; }
    internal EntitySetBase StoreEntitySet { get; }
    internal StorageAssociationSetMapping(AssociationSet extent, StorageEntityContainerMapping entityContainerMapping);
    internal StorageAssociationSetModificationFunctionMapping get_ModificationFunctionMapping();
    internal void set_ModificationFunctionMapping(StorageAssociationSetModificationFunctionMapping value);
    internal EntitySetBase get_StoreEntitySet();
    internal virtual void Print(int index);
}
internal class System.Data.Mapping.StorageAssociationSetModificationFunctionMapping : object {
    internal AssociationSet AssociationSet;
    internal StorageModificationFunctionMapping DeleteFunctionMapping;
    internal StorageModificationFunctionMapping InsertFunctionMapping;
    internal StorageAssociationSetModificationFunctionMapping(AssociationSet associationSet, StorageModificationFunctionMapping deleteFunctionMapping, StorageModificationFunctionMapping insertFunctionMapping);
    public virtual string ToString();
    internal void Print(int index);
}
internal class System.Data.Mapping.StorageAssociationTypeMapping : StorageTypeMapping {
    internal AssociationType AssociationType { get; }
    internal ReadOnlyCollection`1<EdmType> Types { get; }
    internal ReadOnlyCollection`1<EdmType> IsOfTypes { get; }
    internal StorageAssociationTypeMapping(AssociationType relation, StorageSetMapping setMapping);
    internal AssociationType get_AssociationType();
    internal virtual ReadOnlyCollection`1<EdmType> get_Types();
    internal virtual ReadOnlyCollection`1<EdmType> get_IsOfTypes();
    internal virtual void Print(int index);
}
internal class System.Data.Mapping.StorageComplexPropertyMapping : StoragePropertyMapping {
    internal ReadOnlyCollection`1<StorageComplexTypeMapping> TypeMappings { get; }
    internal StorageComplexPropertyMapping(EdmProperty cdmMember);
    internal ReadOnlyCollection`1<StorageComplexTypeMapping> get_TypeMappings();
    internal void AddTypeMapping(StorageComplexTypeMapping typeMapping);
    internal virtual void Print(int index);
}
internal class System.Data.Mapping.StorageComplexTypeMapping : object {
    internal ReadOnlyCollection`1<ComplexType> Types { get; }
    internal ReadOnlyCollection`1<ComplexType> IsOfTypes { get; }
    internal ReadOnlyCollection`1<StoragePropertyMapping> Properties { get; }
    internal ReadOnlyCollection`1<StoragePropertyMapping> AllProperties { get; }
    internal StorageComplexTypeMapping(bool isPartial);
    internal ReadOnlyCollection`1<ComplexType> get_Types();
    internal ReadOnlyCollection`1<ComplexType> get_IsOfTypes();
    internal ReadOnlyCollection`1<StoragePropertyMapping> get_Properties();
    internal ReadOnlyCollection`1<StoragePropertyMapping> get_AllProperties();
    internal void AddType(ComplexType type);
    internal void AddIsOfType(ComplexType type);
    internal void AddProperty(StoragePropertyMapping prop);
    internal void AddConditionProperty(StorageConditionPropertyMapping conditionPropertyMap, Action`1<EdmMember> duplicateMemberConditionError);
    internal ComplexType GetOwnerType(string memberName);
    internal void Print(int index);
}
internal class System.Data.Mapping.StorageConditionPropertyMapping : StoragePropertyMapping {
    internal object Value { get; }
    internal Nullable`1<bool> IsNull { get; }
    internal EdmProperty ColumnProperty { get; }
    internal StorageConditionPropertyMapping(EdmProperty cdmMember, EdmProperty columnMember, object value, Nullable`1<bool> isNull);
    internal object get_Value();
    internal Nullable`1<bool> get_IsNull();
    internal EdmProperty get_ColumnProperty();
    internal virtual void Print(int index);
}
internal class System.Data.Mapping.StorageEndPropertyMapping : StoragePropertyMapping {
    internal ReadOnlyCollection`1<StoragePropertyMapping> Properties { get; }
    internal RelationshipEndMember EndMember { get; internal set; }
    internal IEnumerable`1<EdmMember> StoreProperties { get; }
    internal StorageEndPropertyMapping(EdmProperty member);
    internal ReadOnlyCollection`1<StoragePropertyMapping> get_Properties();
    internal RelationshipEndMember get_EndMember();
    internal void set_EndMember(RelationshipEndMember value);
    internal IEnumerable`1<EdmMember> get_StoreProperties();
    internal void AddProperty(StoragePropertyMapping prop);
    internal virtual void Print(int index);
}
internal class System.Data.Mapping.StorageEntityContainerMapping : Map {
    public StorageMappingItemCollection StorageMappingItemCollection { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal MetadataItem EdmItem { get; }
    internal string Identity { get; }
    internal bool IsEmpty { get; }
    internal bool HasViews { get; }
    internal string SourceLocation { get; internal set; }
    internal EntityContainer EdmEntityContainer { get; }
    internal EntityContainer StorageEntityContainer { get; }
    internal ReadOnlyCollection`1<StorageSetMapping> EntitySetMaps { get; }
    internal ReadOnlyCollection`1<StorageSetMapping> RelationshipSetMaps { get; }
    internal IEnumerable`1<StorageSetMapping> AllSetMaps { get; }
    internal int StartLineNumber { get; internal set; }
    internal int StartLinePosition { get; internal set; }
    internal bool Validate { get; }
    internal bool GenerateUpdateViews { get; }
    internal StorageEntityContainerMapping(EntityContainer entityContainer, EntityContainer storageEntityContainer, StorageMappingItemCollection storageMappingItemCollection, bool validate, bool generateUpdateViews);
    public StorageMappingItemCollection get_StorageMappingItemCollection();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual MetadataItem get_EdmItem();
    internal virtual string get_Identity();
    internal bool get_IsEmpty();
    internal bool get_HasViews();
    internal string get_SourceLocation();
    internal void set_SourceLocation(string value);
    internal EntityContainer get_EdmEntityContainer();
    internal EntityContainer get_StorageEntityContainer();
    internal ReadOnlyCollection`1<StorageSetMapping> get_EntitySetMaps();
    internal ReadOnlyCollection`1<StorageSetMapping> get_RelationshipSetMaps();
    internal IEnumerable`1<StorageSetMapping> get_AllSetMaps();
    internal int get_StartLineNumber();
    internal void set_StartLineNumber(int value);
    internal int get_StartLinePosition();
    internal void set_StartLinePosition(int value);
    internal bool get_Validate();
    internal bool get_GenerateUpdateViews();
    internal StorageSetMapping GetEntitySetMapping(string entitySetName);
    internal StorageSetMapping GetRelationshipSetMapping(string relationshipSetName);
    internal IEnumerable`1<StorageAssociationSetMapping> GetRelationshipSetMappingsFor(EntitySetBase edmEntitySet, EntitySetBase storeEntitySet);
    internal StorageSetMapping GetSetMapping(string setName);
    internal void AddEntitySetMapping(StorageSetMapping setMapping);
    internal void AddAssociationSetMapping(StorageSetMapping setMapping);
    internal bool ContainsAssociationSetMapping(AssociationSet associationSet);
    internal bool HasQueryViewForSetMap(string setName);
    internal bool HasMappingFragments();
    internal static string GetPrettyPrintString(Int32& index);
    internal void Print(int index);
    internal void AddFunctionImportMapping(EdmFunction functionImport, FunctionImportMapping mapping);
    internal bool TryGetFunctionImportMapping(EdmFunction functionImport, FunctionImportMapping& mapping);
    internal OutputFromComputeCellGroups GetCellgroups(InputForComputingCellGroups args);
}
internal class System.Data.Mapping.StorageEntitySetMapping : StorageSetMapping {
    internal IList`1<StorageEntityTypeModificationFunctionMapping> ModificationFunctionMappings { get; }
    internal IList`1<AssociationSetEnd> ImplicitlyMappedAssociationSetEnds { get; }
    internal bool HasNoContent { get; }
    internal StorageEntitySetMapping(EntitySet extent, StorageEntityContainerMapping entityContainerMapping);
    internal IList`1<StorageEntityTypeModificationFunctionMapping> get_ModificationFunctionMappings();
    internal IList`1<AssociationSetEnd> get_ImplicitlyMappedAssociationSetEnds();
    internal virtual bool get_HasNoContent();
    internal virtual void Print(int index);
    internal void AddModificationFunctionMapping(StorageEntityTypeModificationFunctionMapping modificationFunctionMapping);
    [ConditionalAttribute("DEBUG")]
internal void AssertModificationFunctionMappingInvariants(StorageEntityTypeModificationFunctionMapping modificationFunctionMapping);
}
internal class System.Data.Mapping.StorageEntityTypeMapping : StorageTypeMapping {
    internal ReadOnlyCollection`1<EdmType> Types { get; }
    internal ReadOnlyCollection`1<EdmType> IsOfTypes { get; }
    internal StorageEntityTypeMapping(StorageSetMapping setMapping);
    internal virtual ReadOnlyCollection`1<EdmType> get_Types();
    internal virtual ReadOnlyCollection`1<EdmType> get_IsOfTypes();
    internal void AddType(EdmType type);
    internal void AddIsOfType(EdmType type);
    internal EntityType GetContainerType(string memberName);
    internal virtual void Print(int index);
}
internal class System.Data.Mapping.StorageEntityTypeModificationFunctionMapping : object {
    internal EntityType EntityType;
    internal StorageModificationFunctionMapping DeleteFunctionMapping;
    internal StorageModificationFunctionMapping InsertFunctionMapping;
    internal StorageModificationFunctionMapping UpdateFunctionMapping;
    internal StorageEntityTypeModificationFunctionMapping(EntityType entityType, StorageModificationFunctionMapping deleteFunctionMapping, StorageModificationFunctionMapping insertFunctionMapping, StorageModificationFunctionMapping updateFunctionMapping);
    public virtual string ToString();
    internal void Print(int index);
}
internal enum System.Data.Mapping.StorageMappingErrorCode : Enum {
    public int value__;
    public static StorageMappingErrorCode Value;
    public static StorageMappingErrorCode InvalidContent;
    public static StorageMappingErrorCode InvalidEntityContainer;
    public static StorageMappingErrorCode InvalidEntitySet;
    public static StorageMappingErrorCode InvalidEntityType;
    public static StorageMappingErrorCode InvalidAssociationSet;
    public static StorageMappingErrorCode InvalidAssociationType;
    public static StorageMappingErrorCode InvalidTable;
    public static StorageMappingErrorCode InvalidComplexType;
    public static StorageMappingErrorCode InvalidEdmMember;
    public static StorageMappingErrorCode InvalidStorageMember;
    public static StorageMappingErrorCode TableMappingFragmentExpected;
    public static StorageMappingErrorCode SetMappingExpected;
    public static StorageMappingErrorCode DuplicateSetMapping;
    public static StorageMappingErrorCode DuplicateTypeMapping;
    public static StorageMappingErrorCode ConditionError;
    public static StorageMappingErrorCode RootMappingElementMissing;
    public static StorageMappingErrorCode IncompatibleMemberMapping;
    public static StorageMappingErrorCode InvalidEnumValue;
    public static StorageMappingErrorCode XmlSchemaParsingError;
    public static StorageMappingErrorCode XmlSchemaValidationError;
    public static StorageMappingErrorCode AmbiguousModificationFunctionMappingForAssociationSet;
    public static StorageMappingErrorCode MissingSetClosureInModificationFunctionMapping;
    public static StorageMappingErrorCode MissingModificationFunctionMappingForEntityType;
    public static StorageMappingErrorCode InvalidTableNameAttributeWithModificationFunctionMapping;
    public static StorageMappingErrorCode InvalidModificationFunctionMappingForMultipleTypes;
    public static StorageMappingErrorCode AmbiguousResultBindingInModificationFunctionMapping;
    public static StorageMappingErrorCode InvalidAssociationSetRoleInModificationFunctionMapping;
    public static StorageMappingErrorCode InvalidAssociationSetCardinalityInModificationFunctionMapping;
    public static StorageMappingErrorCode RedundantEntityTypeMappingInModificationFunctionMapping;
    public static StorageMappingErrorCode MissingVersionInModificationFunctionMapping;
    public static StorageMappingErrorCode InvalidVersionInModificationFunctionMapping;
    public static StorageMappingErrorCode InvalidParameterInModificationFunctionMapping;
    public static StorageMappingErrorCode ParameterBoundTwiceInModificationFunctionMapping;
    public static StorageMappingErrorCode CSpaceMemberMappedToMultipleSSpaceMemberWithDifferentTypes;
    public static StorageMappingErrorCode NoEquivalentStorePrimitiveTypeFound;
    public static StorageMappingErrorCode NoEquivalentStorePrimitiveTypeWithFacetsFound;
    public static StorageMappingErrorCode InvalidModificationFunctionMappingPropertyParameterTypeMismatch;
    public static StorageMappingErrorCode InvalidModificationFunctionMappingMultipleEndsOfAssociationMapped;
    public static StorageMappingErrorCode InvalidModificationFunctionMappingUnknownFunction;
    public static StorageMappingErrorCode InvalidModificationFunctionMappingAmbiguousFunction;
    public static StorageMappingErrorCode InvalidModificationFunctionMappingNotValidFunction;
    public static StorageMappingErrorCode InvalidModificationFunctionMappingNotValidFunctionParameter;
    public static StorageMappingErrorCode InvalidModificationFunctionMappingAssociationSetNotMappedForOperation;
    public static StorageMappingErrorCode InvalidModificationFunctionMappingAssociationEndMappingInvalidForEntityType;
    public static StorageMappingErrorCode MappingFunctionImportStoreFunctionDoesNotExist;
    public static StorageMappingErrorCode MappingFunctionImportStoreFunctionAmbiguous;
    public static StorageMappingErrorCode MappingFunctionImportFunctionImportDoesNotExist;
    public static StorageMappingErrorCode MappingFunctionImportFunctionImportMappedMultipleTimes;
    public static StorageMappingErrorCode MappingFunctionImportTargetFunctionMustBeNonComposable;
    public static StorageMappingErrorCode MappingFunctionImportTargetParameterHasNoCorrespondingImportParameter;
    public static StorageMappingErrorCode MappingFunctionImportImportParameterHasNoCorrespondingTargetParameter;
    public static StorageMappingErrorCode MappingFunctionImportIncompatibleParameterMode;
    public static StorageMappingErrorCode MappingFunctionImportIncompatibleParameterType;
    public static StorageMappingErrorCode MappingFunctionImportRowsAffectedParameterDoesNotExist;
    public static StorageMappingErrorCode MappingFunctionImportRowsAffectedParameterHasWrongType;
    public static StorageMappingErrorCode MappingFunctionImportRowsAffectedParameterHasWrongMode;
    public static StorageMappingErrorCode EmptyContainerMapping;
    public static StorageMappingErrorCode EmptySetMapping;
    public static StorageMappingErrorCode TableNameAttributeWithQueryView;
    public static StorageMappingErrorCode EmptyQueryView;
    public static StorageMappingErrorCode PropertyMapsWithQueryView;
    public static StorageMappingErrorCode MissingSetClosureInQueryViews;
    public static StorageMappingErrorCode InvalidQueryView;
    public static StorageMappingErrorCode InvalidQueryViewResultType;
    public static StorageMappingErrorCode ItemWithSameNameExistsBothInCSpaceAndSSpace;
    public static StorageMappingErrorCode MappingUnsupportedExpressionKindQueryView;
    public static StorageMappingErrorCode MappingUnsupportedScanTargetQueryView;
    public static StorageMappingErrorCode MappingUnsupportedPropertyKindQueryView;
    public static StorageMappingErrorCode MappingUnsupportedInitializationQueryView;
    public static StorageMappingErrorCode MappingFunctionImportEntityTypeMappingForFunctionNotReturningEntitySet;
    public static StorageMappingErrorCode MappingFunctionImportAmbiguousTypeConditions;
    public static StorageMappingErrorCode MappingOfAbstractType;
    public static StorageMappingErrorCode StorageEntityContainerNameMismatchWhileSpecifyingPartialMapping;
    public static StorageMappingErrorCode TypeNameForFirstQueryView;
    public static StorageMappingErrorCode NoTypeNameForTypeSpecificQueryView;
    public static StorageMappingErrorCode QueryViewExistsForEntitySetAndType;
    public static StorageMappingErrorCode TypeNameContainsMultipleTypesForQueryView;
    public static StorageMappingErrorCode IsTypeOfQueryViewForBaseType;
    public static StorageMappingErrorCode InvalidTypeInScalarProperty;
    public static StorageMappingErrorCode AlreadyMappedStorageEntityContainer;
    public static StorageMappingErrorCode UnsupportedQueryViewInEntityContainerMapping;
    public static StorageMappingErrorCode MappingAllQueryViewAtCompileTime;
    public static StorageMappingErrorCode MappingNoViewsCanBeGenerated;
    public static StorageMappingErrorCode MappingStoreProviderReturnsNullEdmType;
    public static StorageMappingErrorCode DuplicateMemberMapping;
    public static StorageMappingErrorCode MappingFunctionImportUnexpectedEntityTypeMapping;
    public static StorageMappingErrorCode MappingFunctionImportUnexpectedComplexTypeMapping;
    public static StorageMappingErrorCode DistinctFragmentInReadWriteContainer;
    public static StorageMappingErrorCode EntitySetMismatchOnAssociationSetEnd;
    public static StorageMappingErrorCode InvalidModificationFunctionMappingAssociationEndForeignKey;
    public static StorageMappingErrorCode CannotLoadDifferentVersionOfSchemaInTheSameItemCollection;
    public static StorageMappingErrorCode MappingDifferentMappingEdmStoreVersion;
    public static StorageMappingErrorCode MappingDifferentEdmStoreVersion;
    public static StorageMappingErrorCode UnmappedFunctionImport;
    public static StorageMappingErrorCode MappingFunctionImportReturnTypePropertyNotMapped;
    public static StorageMappingErrorCode InvalidType;
    public static StorageMappingErrorCode MappingFunctionImportTVFExpected;
    public static StorageMappingErrorCode MappingFunctionImportScalarMappingTypeMismatch;
    public static StorageMappingErrorCode MappingFunctionImportScalarMappingToMulticolumnTVF;
    public static StorageMappingErrorCode MappingFunctionImportTargetFunctionMustBeComposable;
    public static StorageMappingErrorCode UnsupportedFunctionCallInQueryView;
    public static StorageMappingErrorCode FunctionResultMappingCountMismatch;
    public static StorageMappingErrorCode MappingFunctionImportCannotInferTargetFunctionKeys;
}
internal class System.Data.Mapping.StorageMappingFragment : object {
    internal EntitySet TableSet { get; }
    internal bool IsSQueryDistinct { get; }
    internal ReadOnlyCollection`1<StoragePropertyMapping> AllProperties { get; }
    internal ReadOnlyCollection`1<StoragePropertyMapping> Properties { get; }
    internal int StartLineNumber { get; internal set; }
    internal int StartLinePosition { get; internal set; }
    internal string SourceLocation { get; }
    internal StorageMappingFragment(EntitySet tableExtent, StorageTypeMapping typeMapping, bool distinctFlag);
    internal EntitySet get_TableSet();
    internal bool get_IsSQueryDistinct();
    internal ReadOnlyCollection`1<StoragePropertyMapping> get_AllProperties();
    internal ReadOnlyCollection`1<StoragePropertyMapping> get_Properties();
    internal int get_StartLineNumber();
    internal void set_StartLineNumber(int value);
    internal int get_StartLinePosition();
    internal void set_StartLinePosition(int value);
    internal string get_SourceLocation();
    internal void AddProperty(StoragePropertyMapping prop);
    internal void AddConditionProperty(StorageConditionPropertyMapping conditionPropertyMap, Action`1<EdmMember> duplicateMemberConditionError);
    internal virtual void Print(int index);
}
[CLSCompliantAttribute("False")]
public class System.Data.Mapping.StorageMappingItemCollection : MappingItemCollection {
    internal MetadataWorkspace Workspace { get; }
    internal EdmItemCollection EdmItemCollection { get; }
    public double MappingVersion { get; }
    internal StoreItemCollection StoreItemCollection { get; }
    public StorageMappingItemCollection(EdmItemCollection edmCollection, StoreItemCollection storeCollection, String[] filePaths);
    public StorageMappingItemCollection(EdmItemCollection edmCollection, StoreItemCollection storeCollection, IEnumerable`1<XmlReader> xmlReaders);
    internal StorageMappingItemCollection(EdmItemCollection edmCollection, StoreItemCollection storeCollection, IEnumerable`1<XmlReader> xmlReaders, List`1<string> filePaths, IList`1& errors);
    internal StorageMappingItemCollection(EdmItemCollection edmCollection, StoreItemCollection storeCollection, IEnumerable`1<XmlReader> xmlReaders, List`1<string> filePaths);
    internal MetadataWorkspace get_Workspace();
    internal EdmItemCollection get_EdmItemCollection();
    public double get_MappingVersion();
    internal StoreItemCollection get_StoreItemCollection();
    internal virtual Map GetMap(string identity, DataSpace typeSpace, bool ignoreCase);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, bool ignoreCase, Map& map);
    internal virtual Map GetMap(string identity, DataSpace typeSpace);
    internal virtual bool TryGetMap(string identity, DataSpace typeSpace, Map& map);
    internal virtual Map GetMap(GlobalItem item);
    internal virtual bool TryGetMap(GlobalItem item, Map& map);
    internal Dictionary`2<EntitySetBase, string> GenerateEntitySetViews(IList`1& errors);
    internal ReadOnlyCollection`1<EdmMember> GetInterestingMembers(EntitySetBase entitySet, EntityTypeBase entityType, InterestingMembersKind interestingMembersKind);
    internal GeneratedView GetGeneratedView(EntitySetBase extent, MetadataWorkspace workspace);
    internal bool ContainsStorageEntityContainer(string storageEntityContainerName);
    internal ViewLoader GetUpdateViewLoader();
    internal bool TryGetGeneratedViewOfType(MetadataWorkspace workspace, EntitySetBase entity, EntityTypeBase type, bool includeSubtypes, GeneratedView& generatedView);
}
internal class System.Data.Mapping.StorageMappingItemLoader : object {
    internal double MappingVersion { get; }
    internal IList`1<EdmSchemaError> ParsingErrors { get; }
    internal bool HasQueryViews { get; }
    internal StorageEntityContainerMapping ContainerMapping { get; }
    internal StorageMappingItemLoader(XmlReader reader, StorageMappingItemCollection storageMappingItemCollection, string fileName, Dictionary`2<EdmMember, KeyValuePair`2<TypeUsage, TypeUsage>> scalarMemberMappings);
    internal double get_MappingVersion();
    internal IList`1<EdmSchemaError> get_ParsingErrors();
    internal bool get_HasQueryViews();
    internal StorageEntityContainerMapping get_ContainerMapping();
    internal static bool TryInferTVFKeys(List`1<Tuple`3<StructuralType, List`1<StorageConditionPropertyMapping>, List`1<StoragePropertyMapping>>> structuralTypeMappings, EdmProperty[]& keys);
    internal static bool IsTypeSupportedForCondition(PrimitiveTypeKind primitiveTypeKind);
}
internal class System.Data.Mapping.StorageModificationFunctionMapping : object {
    internal FunctionParameter RowsAffectedParameter;
    internal EdmFunction Function;
    internal ReadOnlyCollection`1<StorageModificationFunctionParameterBinding> ParameterBindings;
    internal ReadOnlyCollection`1<AssociationSetEnd> CollocatedAssociationSetEnds;
    internal ReadOnlyCollection`1<StorageModificationFunctionResultBinding> ResultBindings;
    internal StorageModificationFunctionMapping(EntitySetBase entitySet, EntityTypeBase entityType, EdmFunction function, IEnumerable`1<StorageModificationFunctionParameterBinding> parameterBindings, FunctionParameter rowsAffectedParameter, IEnumerable`1<StorageModificationFunctionResultBinding> resultBindings);
    public virtual string ToString();
}
internal class System.Data.Mapping.StorageModificationFunctionMemberPath : object {
    internal ReadOnlyCollection`1<EdmMember> Members;
    internal AssociationSetEnd AssociationSetEnd;
    internal StorageModificationFunctionMemberPath(IEnumerable`1<EdmMember> members, AssociationSet associationSetNavigation);
    public virtual string ToString();
}
internal class System.Data.Mapping.StorageModificationFunctionParameterBinding : object {
    internal FunctionParameter Parameter;
    internal StorageModificationFunctionMemberPath MemberPath;
    internal bool IsCurrent;
    internal StorageModificationFunctionParameterBinding(FunctionParameter parameter, StorageModificationFunctionMemberPath memberPath, bool isCurrent);
    public virtual string ToString();
}
internal class System.Data.Mapping.StorageModificationFunctionResultBinding : object {
    internal string ColumnName;
    internal EdmProperty Property;
    internal StorageModificationFunctionResultBinding(string columnName, EdmProperty property);
    public virtual string ToString();
}
internal static class System.Data.Mapping.StorageMslConstructs : object {
    internal static string NamespaceUriV1;
    internal static string NamespaceUriV2;
    internal static string NamespaceUriV3;
    internal static double MappingVersionV1;
    internal static double MappingVersionV2;
    internal static double MappingVersionV3;
    internal static string MappingElement;
    internal static string GenerateUpdateViews;
    internal static string MappingSpaceAttribute;
    internal static string EntityContainerMappingElement;
    internal static string CdmEntityContainerAttribute;
    internal static string StorageEntityContainerAttribute;
    internal static string AliasElement;
    internal static string AliasKeyAttribute;
    internal static string AliasValueAttribute;
    internal static string EntitySetMappingElement;
    internal static string EntitySetMappingNameAttribute;
    internal static string EntitySetMappingTypeNameAttribute;
    internal static string EntitySetMappingStoreEntitySetAttribute;
    internal static string EntityTypeMappingElement;
    internal static string QueryViewElement;
    internal static string EntityTypeMappingTypeNameAttribute;
    internal static string EntityTypeMappingStoreEntitySetAttribute;
    internal static string AssociationSetMappingElement;
    internal static string AssociationSetMappingNameAttribute;
    internal static string AssociationSetMappingTypeNameAttribute;
    internal static string AssociationSetMappingStoreEntitySetAttribute;
    internal static string EndPropertyMappingElement;
    internal static string EndPropertyMappingNameAttribute;
    internal static string CompositionSetMappingNameAttribute;
    internal static string CompositionSetMappingTypeNameAttribute;
    internal static string CompositionSetMappingStoreEntitySetAttribute;
    internal static string FunctionImportMappingElement;
    internal static string FunctionImportMappingFunctionNameAttribute;
    internal static string FunctionImportMappingFunctionImportNameAttribute;
    internal static string CompositionSetParentEndName;
    internal static string CompositionSetChildEndName;
    internal static string MappingFragmentElement;
    internal static string MappingFragmentStoreEntitySetAttribute;
    internal static string MappingFragmentMakeColumnsDistinctAttribute;
    internal static string ScalarPropertyElement;
    internal static string ScalarPropertyNameAttribute;
    internal static string ScalarPropertyColumnNameAttribute;
    internal static string ScalarPropertyValueAttribute;
    internal static string ComplexPropertyElement;
    internal static string AssociationEndElement;
    internal static string ComplexPropertyNameAttribute;
    internal static string ComplexPropertyTypeNameAttribute;
    internal static string ComplexPropertyIsPartialAttribute;
    internal static string ComplexTypeMappingElement;
    internal static string ComplexTypeMappingTypeNameAttribute;
    internal static string ConditionElement;
    internal static string ConditionNameAttribute;
    internal static string ConditionValueAttribute;
    internal static string ConditionColumnNameAttribute;
    internal static string ConditionIsNullAttribute;
    internal static string CollectionPropertyNameAttribute;
    internal static string CollectionPropertyIsPartialAttribute;
    internal static string ResourceXsdNameV1;
    internal static string ResourceXsdNameV2;
    internal static string ResourceXsdNameV3;
    internal static string IsTypeOf;
    internal static string IsTypeOfTerminal;
    internal static string IsTypeOfOnly;
    internal static string IsTypeOfOnlyTerminal;
    internal static string ModificationFunctionMappingElement;
    internal static string DeleteFunctionElement;
    internal static string InsertFunctionElement;
    internal static string UpdateFunctionElement;
    internal static string FunctionNameAttribute;
    internal static string RowsAffectedParameterAttribute;
    internal static string ParameterNameAttribute;
    internal static string ParameterVersionAttribute;
    internal static string ParameterVersionAttributeCurrentValue;
    internal static string AssociationSetAttribute;
    internal static string FromAttribute;
    internal static string ToAttribute;
    internal static string ResultBindingElement;
    internal static string ResultBindingPropertyNameAttribute;
    internal static string ResultBindingColumnNameAttribute;
    internal static char TypeNameSperator;
    internal static char IdentitySeperator;
    internal static string EntityViewGenerationTypeName;
    internal static string FunctionImportMappingResultMapping;
}
internal abstract class System.Data.Mapping.StoragePropertyMapping : object {
    internal EdmProperty EdmProperty { get; }
    internal StoragePropertyMapping(EdmProperty cdmMember);
    internal virtual EdmProperty get_EdmProperty();
    internal virtual void Print(int index);
}
internal class System.Data.Mapping.StorageScalarPropertyMapping : StoragePropertyMapping {
    internal EdmProperty ColumnProperty { get; }
    internal StorageScalarPropertyMapping(EdmProperty member, EdmProperty columnMember);
    internal EdmProperty get_ColumnProperty();
    internal virtual void Print(int index);
}
internal abstract class System.Data.Mapping.StorageSetMapping : object {
    internal EntitySetBase Set { get; }
    internal ReadOnlyCollection`1<StorageTypeMapping> TypeMappings { get; }
    internal StorageEntityContainerMapping EntityContainerMapping { get; }
    internal bool HasNoContent { get; }
    internal string QueryView { get; internal set; }
    internal int StartLineNumber { get; internal set; }
    internal int StartLinePosition { get; internal set; }
    internal bool HasModificationFunctionMapping { get; internal set; }
    internal StorageSetMapping(EntitySetBase extent, StorageEntityContainerMapping entityContainerMapping);
    internal EntitySetBase get_Set();
    internal ReadOnlyCollection`1<StorageTypeMapping> get_TypeMappings();
    internal StorageEntityContainerMapping get_EntityContainerMapping();
    internal virtual bool get_HasNoContent();
    internal string get_QueryView();
    internal void set_QueryView(string value);
    internal int get_StartLineNumber();
    internal void set_StartLineNumber(int value);
    internal int get_StartLinePosition();
    internal void set_StartLinePosition(int value);
    internal bool get_HasModificationFunctionMapping();
    internal void set_HasModificationFunctionMapping(bool value);
    internal void AddTypeMapping(StorageTypeMapping typeMapping);
    internal abstract virtual void Print(int index);
    internal bool ContainsTypeSpecificQueryView(Pair`2<EntitySetBase, Pair`2<EntityTypeBase, bool>> key);
    internal void AddTypeSpecificQueryView(Pair`2<EntitySetBase, Pair`2<EntityTypeBase, bool>> key, string viewString);
    internal ReadOnlyCollection`1<Pair`2<EntitySetBase, Pair`2<EntityTypeBase, bool>>> GetTypeSpecificQVKeys();
    internal string GetTypeSpecificQueryView(Pair`2<EntitySetBase, Pair`2<EntityTypeBase, bool>> key);
}
internal abstract class System.Data.Mapping.StorageTypeMapping : object {
    internal ReadOnlyCollection`1<StorageMappingFragment> MappingFragments { get; }
    internal StorageSetMapping SetMapping { get; }
    internal ReadOnlyCollection`1<EdmType> Types { get; }
    internal ReadOnlyCollection`1<EdmType> IsOfTypes { get; }
    internal StorageTypeMapping(StorageSetMapping setMapping);
    internal ReadOnlyCollection`1<StorageMappingFragment> get_MappingFragments();
    internal StorageSetMapping get_SetMapping();
    internal abstract virtual ReadOnlyCollection`1<EdmType> get_Types();
    internal abstract virtual ReadOnlyCollection`1<EdmType> get_IsOfTypes();
    internal void AddFragment(StorageMappingFragment fragment);
    internal abstract virtual void Print(int index);
}
internal class System.Data.Mapping.StringHashBuilder : object {
    internal int CharCount { get; }
    internal StringHashBuilder(HashAlgorithm hashAlgorithm);
    internal StringHashBuilder(HashAlgorithm hashAlgorithm, int startingBufferSize);
    internal int get_CharCount();
    internal virtual void Append(string s);
    internal virtual void AppendLine(string s);
    internal string ComputeHash();
    internal void Clear();
    public virtual string ToString();
    public static string ComputeHash(HashAlgorithm hashAlgorithm, string source);
}
internal class System.Data.Mapping.Update.Internal.AssociationSetMetadata : object {
    internal Set`1<AssociationEndMember> RequiredEnds;
    internal Set`1<AssociationEndMember> OptionalEnds;
    internal Set`1<AssociationEndMember> IncludedValueEnds;
    internal bool HasEnds { get; }
    internal AssociationSetMetadata(Set`1<EntitySet> affectedTables, AssociationSet associationSet, MetadataWorkspace workspace);
    internal AssociationSetMetadata(IEnumerable`1<AssociationEndMember> requiredEnds);
    internal bool get_HasEnds();
}
internal class System.Data.Mapping.Update.Internal.ChangeNode : object {
    internal TypeUsage ElementType { get; }
    internal List`1<PropagatorResult> Inserted { get; }
    internal List`1<PropagatorResult> Deleted { get; }
    internal PropagatorResult Placeholder { get; internal set; }
    internal ChangeNode(TypeUsage elementType);
    internal TypeUsage get_ElementType();
    internal List`1<PropagatorResult> get_Inserted();
    internal List`1<PropagatorResult> get_Deleted();
    internal PropagatorResult get_Placeholder();
    internal void set_Placeholder(PropagatorResult value);
}
internal class System.Data.Mapping.Update.Internal.CompositeKey : object {
    internal PropagatorResult[] KeyComponents;
    internal CompositeKey(PropagatorResult[] constants);
    internal static IEqualityComparer`1<CompositeKey> CreateComparer(KeyManager keyManager);
    internal CompositeKey Merge(KeyManager keyManager, CompositeKey other);
}
internal class System.Data.Mapping.Update.Internal.DynamicUpdateCommand : UpdateCommand {
    internal ModificationOperator Operator { get; }
    internal EntitySet Table { get; }
    internal IEnumerable`1<int> InputIdentifiers { get; }
    internal IEnumerable`1<int> OutputIdentifiers { get; }
    internal UpdateCommandKind Kind { get; }
    internal DynamicUpdateCommand(TableChangeProcessor processor, UpdateTranslator translator, ModificationOperator op, PropagatorResult originalValues, PropagatorResult currentValues, DbModificationCommandTree tree, Dictionary`2<int, string> outputIdentifiers);
    internal virtual long Execute(UpdateTranslator translator, EntityConnection connection, Dictionary`2<int, object> identifierValues, List`1<KeyValuePair`2<PropagatorResult, object>> generatedValues);
    internal ModificationOperator get_Operator();
    internal virtual EntitySet get_Table();
    internal virtual IEnumerable`1<int> get_InputIdentifiers();
    internal virtual IEnumerable`1<int> get_OutputIdentifiers();
    internal virtual UpdateCommandKind get_Kind();
    internal virtual IList`1<IEntityStateEntry> GetStateEntries(UpdateTranslator translator);
    internal virtual int CompareToType(UpdateCommand otherCommand);
}
internal class System.Data.Mapping.Update.Internal.ExtractedStateEntry : ValueType {
    internal EntityState State;
    internal PropagatorResult Original;
    internal PropagatorResult Current;
    internal IEntityStateEntry Source;
    internal ExtractedStateEntry(UpdateTranslator translator, IEntityStateEntry stateEntry);
}
internal class System.Data.Mapping.Update.Internal.ExtractorMetadata : object {
    internal ExtractorMetadata(EntitySetBase entitySetBase, StructuralType type, UpdateTranslator translator);
    internal PropagatorResult RetrieveMember(IEntityStateEntry stateEntry, IExtendedDataRecord record, bool useCurrentValues, EntityKey key, int ordinal, ModifiedPropertiesBehavior modifiedPropertiesBehavior);
    internal static PropagatorResult ExtractResultFromRecord(IEntityStateEntry stateEntry, bool isModified, IExtendedDataRecord record, bool useCurrentValues, UpdateTranslator translator, ModifiedPropertiesBehavior modifiedPropertiesBehavior);
}
internal class System.Data.Mapping.Update.Internal.FunctionUpdateCommand : UpdateCommand {
    internal IEnumerable`1<int> InputIdentifiers { get; }
    internal IEnumerable`1<int> OutputIdentifiers { get; }
    internal UpdateCommandKind Kind { get; }
    internal FunctionUpdateCommand(StorageModificationFunctionMapping functionMapping, UpdateTranslator translator, ReadOnlyCollection`1<IEntityStateEntry> stateEntries, ExtractedStateEntry stateEntry);
    internal virtual IEnumerable`1<int> get_InputIdentifiers();
    internal virtual IEnumerable`1<int> get_OutputIdentifiers();
    internal virtual UpdateCommandKind get_Kind();
    internal virtual IList`1<IEntityStateEntry> GetStateEntries(UpdateTranslator translator);
    internal void SetParameterValue(PropagatorResult result, StorageModificationFunctionParameterBinding parameterBinding, UpdateTranslator translator);
    internal void RegisterRowsAffectedParameter(FunctionParameter rowsAffectedParameter);
    internal void AddResultColumn(UpdateTranslator translator, string columnName, PropagatorResult result);
    internal virtual long Execute(UpdateTranslator translator, EntityConnection connection, Dictionary`2<int, object> identifierValues, List`1<KeyValuePair`2<PropagatorResult, object>> generatedValues);
    internal virtual int CompareToType(UpdateCommand otherCommand);
}
internal class System.Data.Mapping.Update.Internal.Graph`1 : object {
    internal IEnumerable`1<TVertex> Vertices { get; }
    internal IEnumerable`1<KeyValuePair`2<TVertex, TVertex>> Edges { get; }
    internal Graph`1(IEqualityComparer`1<TVertex> comparer);
    internal IEnumerable`1<TVertex> get_Vertices();
    internal IEnumerable`1<KeyValuePair`2<TVertex, TVertex>> get_Edges();
    internal void AddVertex(TVertex vertex);
    internal void AddEdge(TVertex from, TVertex to);
    internal bool TryTopologicalSort(IEnumerable`1& orderedVertices, IEnumerable`1& remainder);
    public virtual string ToString();
}
internal class System.Data.Mapping.Update.Internal.KeyManager : object {
    internal KeyManager(UpdateTranslator translator);
    internal int GetCliqueIdentifier(int identifier);
    internal void AddReferentialConstraint(IEntityStateEntry dependentStateEntry, int dependentIdentifier, int principalIdentifier);
    internal void RegisterIdentifierOwner(PropagatorResult owner);
    internal bool TryGetIdentifierOwner(int identifier, PropagatorResult& owner);
    internal int GetKeyIdentifierForMemberOffset(EntityKey entityKey, int memberOffset, int keyMemberCount);
    internal int GetKeyIdentifierForMember(EntityKey entityKey, string member, bool currentValues);
    internal IEnumerable`1<IEntityStateEntry> GetDependentStateEntries(int identifier);
    internal object GetPrincipalValue(PropagatorResult result);
    internal IEnumerable`1<int> GetPrincipals(int identifier);
    internal IEnumerable`1<int> GetDirectReferences(int identifier);
    internal IEnumerable`1<int> GetDependents(int identifier);
    internal bool HasPrincipals(int identifier);
    internal void ValidateReferentialIntegrityGraphAcyclic();
    internal void RegisterKeyValueForAddedEntity(IEntityStateEntry addedEntry);
    internal bool TryGetTempKey(EntityKey valueKey, EntityKey& tempKey);
    internal void AssociateNodes(int firstId, int secondId);
}
internal abstract class System.Data.Mapping.Update.Internal.ModificationFunctionMappingTranslator : object {
    internal abstract virtual FunctionUpdateCommand Translate(UpdateTranslator translator, ExtractedStateEntry stateEntry);
    internal static ModificationFunctionMappingTranslator CreateEntitySetTranslator(StorageEntitySetMapping setMapping);
    internal static ModificationFunctionMappingTranslator CreateAssociationSetTranslator(StorageAssociationSetMapping setMapping);
}
internal enum System.Data.Mapping.Update.Internal.ModificationOperator : Enum {
    public byte value__;
    public static ModificationOperator Update;
    public static ModificationOperator Delete;
    public static ModificationOperator Insert;
}
internal enum System.Data.Mapping.Update.Internal.ModifiedPropertiesBehavior : Enum {
    public int value__;
    public static ModifiedPropertiesBehavior AllModified;
    public static ModifiedPropertiesBehavior NoneModified;
    public static ModifiedPropertiesBehavior SomeModified;
}
internal class System.Data.Mapping.Update.Internal.Propagator : UpdateExpressionVisitor`1<ChangeNode> {
    internal UpdateTranslator UpdateTranslator { get; }
    protected string VisitorName { get; }
    private static Propagator();
    internal UpdateTranslator get_UpdateTranslator();
    protected virtual string get_VisitorName();
    internal static ChangeNode Propagate(UpdateTranslator parent, EntitySet table, DbQueryCommandTree umView);
    public virtual ChangeNode Visit(DbCrossJoinExpression node);
    public virtual ChangeNode Visit(DbJoinExpression node);
    public virtual ChangeNode Visit(DbUnionAllExpression node);
    public virtual ChangeNode Visit(DbProjectExpression node);
    public virtual ChangeNode Visit(DbFilterExpression node);
    public virtual ChangeNode Visit(DbScanExpression node);
}
[FlagsAttribute]
internal enum System.Data.Mapping.Update.Internal.PropagatorFlags : Enum {
    public byte value__;
    public static PropagatorFlags NoFlags;
    public static PropagatorFlags Preserve;
    public static PropagatorFlags ConcurrencyValue;
    public static PropagatorFlags Unknown;
    public static PropagatorFlags Key;
    public static PropagatorFlags ForeignKey;
}
internal abstract class System.Data.Mapping.Update.Internal.PropagatorResult : object {
    internal static int NullIdentifier;
    internal static int NullOrdinal;
    internal bool IsNull { get; }
    internal bool IsSimple { get; }
    internal PropagatorFlags PropagatorFlags { get; }
    internal IEntityStateEntry StateEntry { get; }
    internal CurrentValueRecord Record { get; }
    internal StructuralType StructuralType { get; }
    internal int RecordOrdinal { get; }
    internal int Identifier { get; }
    internal PropagatorResult Next { get; }
    internal abstract virtual bool get_IsNull();
    internal abstract virtual bool get_IsSimple();
    internal virtual PropagatorFlags get_PropagatorFlags();
    internal virtual IEntityStateEntry get_StateEntry();
    internal virtual CurrentValueRecord get_Record();
    internal virtual StructuralType get_StructuralType();
    internal virtual int get_RecordOrdinal();
    internal virtual int get_Identifier();
    internal virtual PropagatorResult get_Next();
    internal virtual object GetSimpleValue();
    internal virtual PropagatorResult GetMemberValue(int ordinal);
    internal PropagatorResult GetMemberValue(EdmMember member);
    internal virtual PropagatorResult[] GetMemberValues();
    internal abstract virtual PropagatorResult ReplicateResultWithNewFlags(PropagatorFlags flags);
    internal virtual PropagatorResult ReplicateResultWithNewValue(object value);
    internal abstract virtual PropagatorResult Replace(Func`2<PropagatorResult, PropagatorResult> map);
    internal virtual PropagatorResult Merge(KeyManager keyManager, PropagatorResult other);
    internal static PropagatorResult CreateSimpleValue(PropagatorFlags flags, object value);
    internal static PropagatorResult CreateServerGenSimpleValue(PropagatorFlags flags, object value, CurrentValueRecord record, int recordOrdinal);
    internal static PropagatorResult CreateKeyValue(PropagatorFlags flags, object value, IEntityStateEntry stateEntry, int identifier);
    internal static PropagatorResult CreateServerGenKeyValue(PropagatorFlags flags, object value, IEntityStateEntry stateEntry, int identifier, int recordOrdinal);
    internal static PropagatorResult CreateStructuralValue(PropagatorResult[] values, StructuralType structuralType, bool isModified);
}
internal class System.Data.Mapping.Update.Internal.RecordConverter : object {
    internal RecordConverter(UpdateTranslator updateTranslator);
    internal PropagatorResult ConvertOriginalValuesToPropagatorResult(IEntityStateEntry stateEntry, ModifiedPropertiesBehavior modifiedPropertiesBehavior);
    internal PropagatorResult ConvertCurrentValuesToPropagatorResult(IEntityStateEntry stateEntry, ModifiedPropertiesBehavior modifiedPropertiesBehavior);
}
internal class System.Data.Mapping.Update.Internal.SourceInterpreter : object {
    internal static ReadOnlyCollection`1<IEntityStateEntry> GetAllStateEntries(PropagatorResult source, UpdateTranslator translator, EntitySet sourceTable);
}
internal class System.Data.Mapping.Update.Internal.TableChangeProcessor : object {
    internal EntitySet Table { get; }
    internal Int32[] KeyOrdinals { get; }
    internal TableChangeProcessor(EntitySet table);
    internal EntitySet get_Table();
    internal Int32[] get_KeyOrdinals();
    internal bool IsKeyProperty(int propertyOrdinal);
    internal List`1<UpdateCommand> CompileCommands(ChangeNode changeNode, UpdateCompiler compiler);
}
internal class System.Data.Mapping.Update.Internal.UndirectedGraph`1 : InternalBase {
    internal IEnumerable`1<TVertex> Vertices { get; }
    internal IEnumerable`1<KeyValuePair`2<TVertex, TVertex>> Edges { get; }
    internal UndirectedGraph`1(IEqualityComparer`1<TVertex> comparer);
    internal IEnumerable`1<TVertex> get_Vertices();
    internal IEnumerable`1<KeyValuePair`2<TVertex, TVertex>> get_Edges();
    internal void AddVertex(TVertex vertex);
    internal void AddEdge(TVertex first, TVertex second);
    internal KeyToListMap`2<int, TVertex> GenerateConnectedComponents();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal abstract class System.Data.Mapping.Update.Internal.UpdateCommand : object {
    internal IEnumerable`1<int> OutputIdentifiers { get; }
    internal IEnumerable`1<int> InputIdentifiers { get; }
    internal EntitySet Table { get; }
    internal UpdateCommandKind Kind { get; }
    internal PropagatorResult OriginalValues { get; }
    internal PropagatorResult CurrentValues { get; }
    protected UpdateCommand(PropagatorResult originalValues, PropagatorResult currentValues);
    internal abstract virtual IEnumerable`1<int> get_OutputIdentifiers();
    internal abstract virtual IEnumerable`1<int> get_InputIdentifiers();
    internal virtual EntitySet get_Table();
    internal abstract virtual UpdateCommandKind get_Kind();
    internal PropagatorResult get_OriginalValues();
    internal PropagatorResult get_CurrentValues();
    internal abstract virtual IList`1<IEntityStateEntry> GetStateEntries(UpdateTranslator translator);
    internal void GetRequiredAndProducedEntities(UpdateTranslator translator, KeyToListMap`2<EntityKey, UpdateCommand> addedEntities, KeyToListMap`2<EntityKey, UpdateCommand> deletedEntities, KeyToListMap`2<EntityKey, UpdateCommand> addedRelationships, KeyToListMap`2<EntityKey, UpdateCommand> deletedRelationships);
    internal abstract virtual long Execute(UpdateTranslator translator, EntityConnection connection, Dictionary`2<int, object> identifierValues, List`1<KeyValuePair`2<PropagatorResult, object>> generatedValues);
    internal abstract virtual int CompareToType(UpdateCommand other);
    public sealed virtual int CompareTo(UpdateCommand other);
    public sealed virtual bool Equals(UpdateCommand other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal enum System.Data.Mapping.Update.Internal.UpdateCommandKind : Enum {
    public int value__;
    public static UpdateCommandKind Dynamic;
    public static UpdateCommandKind Function;
}
internal class System.Data.Mapping.Update.Internal.UpdateCommandOrderer : Graph`1<UpdateCommand> {
    internal UpdateCommandOrderer(IEnumerable`1<UpdateCommand> commands, UpdateTranslator translator);
}
internal class System.Data.Mapping.Update.Internal.UpdateCompiler : object {
    internal UpdateTranslator m_translator;
    internal UpdateCompiler(UpdateTranslator translator);
    internal UpdateCommand BuildDeleteCommand(PropagatorResult oldRow, TableChangeProcessor processor);
    internal UpdateCommand BuildUpdateCommand(PropagatorResult oldRow, PropagatorResult newRow, TableChangeProcessor processor);
    internal UpdateCommand BuildInsertCommand(PropagatorResult newRow, TableChangeProcessor processor);
}
internal abstract class System.Data.Mapping.Update.Internal.UpdateExpressionVisitor`1 : DbExpressionVisitor`1<TReturn> {
    protected string VisitorName { get; }
    protected abstract virtual string get_VisitorName();
    protected NotSupportedException ConstructNotSupportedException(DbExpression node);
    public virtual TReturn Visit(DbExpression expression);
    public virtual TReturn Visit(DbAndExpression expression);
    public virtual TReturn Visit(DbApplyExpression expression);
    public virtual TReturn Visit(DbArithmeticExpression expression);
    public virtual TReturn Visit(DbCaseExpression expression);
    public virtual TReturn Visit(DbCastExpression expression);
    public virtual TReturn Visit(DbComparisonExpression expression);
    public virtual TReturn Visit(DbConstantExpression expression);
    public virtual TReturn Visit(DbCrossJoinExpression expression);
    public virtual TReturn Visit(DbDerefExpression expression);
    public virtual TReturn Visit(DbDistinctExpression expression);
    public virtual TReturn Visit(DbElementExpression expression);
    public virtual TReturn Visit(DbExceptExpression expression);
    public virtual TReturn Visit(DbFilterExpression expression);
    public virtual TReturn Visit(DbFunctionExpression expression);
    public virtual TReturn Visit(DbLambdaExpression expression);
    public virtual TReturn Visit(DbEntityRefExpression expression);
    public virtual TReturn Visit(DbRefKeyExpression expression);
    public virtual TReturn Visit(DbGroupByExpression expression);
    public virtual TReturn Visit(DbIntersectExpression expression);
    public virtual TReturn Visit(DbIsEmptyExpression expression);
    public virtual TReturn Visit(DbIsNullExpression expression);
    public virtual TReturn Visit(DbIsOfExpression expression);
    public virtual TReturn Visit(DbJoinExpression expression);
    public virtual TReturn Visit(DbLikeExpression expression);
    public virtual TReturn Visit(DbLimitExpression expression);
    public virtual TReturn Visit(DbNewInstanceExpression expression);
    public virtual TReturn Visit(DbNotExpression expression);
    public virtual TReturn Visit(DbNullExpression expression);
    public virtual TReturn Visit(DbOfTypeExpression expression);
    public virtual TReturn Visit(DbOrExpression expression);
    public virtual TReturn Visit(DbParameterReferenceExpression expression);
    public virtual TReturn Visit(DbProjectExpression expression);
    public virtual TReturn Visit(DbPropertyExpression expression);
    public virtual TReturn Visit(DbQuantifierExpression expression);
    public virtual TReturn Visit(DbRefExpression expression);
    public virtual TReturn Visit(DbRelationshipNavigationExpression expression);
    public virtual TReturn Visit(DbSkipExpression expression);
    public virtual TReturn Visit(DbSortExpression expression);
    public virtual TReturn Visit(DbTreatExpression expression);
    public virtual TReturn Visit(DbUnionAllExpression expression);
    public virtual TReturn Visit(DbVariableReferenceExpression expression);
    public virtual TReturn Visit(DbScanExpression expression);
}
internal class System.Data.Mapping.Update.Internal.UpdateTranslator : object {
    internal KeyManager KeyManager;
    internal IEqualityComparer`1<CompositeKey> KeyComparer;
    internal MetadataWorkspace MetadataWorkspace { get; }
    internal ViewLoader ViewLoader { get; }
    internal RecordConverter RecordConverter { get; }
    internal Nullable`1<int> CommandTimeout { get; }
    private static UpdateTranslator();
    internal MetadataWorkspace get_MetadataWorkspace();
    internal ViewLoader get_ViewLoader();
    internal RecordConverter get_RecordConverter();
    internal Nullable`1<int> get_CommandTimeout();
    internal void RegisterReferentialConstraints(IEntityStateEntry stateEntry);
    internal IEnumerable`1<IEntityStateEntry> GetRelationships(EntityKey entityKey);
    internal static int Update(IEntityStateManager stateManager, IEntityAdapter adapter);
    internal DbCommandDefinition GenerateCommandDefinition(StorageModificationFunctionMapping functionMapping);
    internal ExtractorMetadata GetExtractorMetadata(EntitySetBase entitySetBase, StructuralType type);
    internal DbCommand CreateCommand(DbModificationCommandTree commandTree);
    internal void SetParameterValue(DbParameter parameter, TypeUsage typeUsage, object value);
    internal static bool RequiresContext(Exception e);
    internal ChangeNode GetExtentModifications(EntitySetBase extent);
    internal List`1<ExtractedStateEntry> GetExtentFunctionModifications(EntitySetBase extent);
}
internal class System.Data.Mapping.Update.Internal.ViewLoader : object {
    internal ViewLoader(StorageMappingItemCollection mappingCollection);
    internal ModificationFunctionMappingTranslator GetFunctionMappingTranslator(EntitySetBase extent, MetadataWorkspace workspace);
    internal Set`1<EntitySet> GetAffectedTables(EntitySetBase extent, MetadataWorkspace workspace);
    internal AssociationSetMetadata GetAssociationSetMetadata(AssociationSet associationSet, MetadataWorkspace workspace);
    internal bool IsServerGen(EntitySetBase entitySetBase, MetadataWorkspace workspace, EdmMember member);
    internal bool IsNullConditionMember(EntitySetBase entitySetBase, MetadataWorkspace workspace, EdmMember member);
}
internal class System.Data.Mapping.ValueCondition : object {
    internal static string IsNullDescription;
    internal static string IsNotNullDescription;
    internal static string IsOtherDescription;
    internal string Description;
    internal bool IsSentinel;
    internal static ValueCondition IsNull;
    internal static ValueCondition IsNotNull;
    internal static ValueCondition IsOther;
    internal bool IsNotNullCondition { get; }
    internal ValueCondition(string description);
    private static ValueCondition();
    internal bool get_IsNotNullCondition();
    public sealed virtual bool Equals(ValueCondition other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Mapping.ViewGeneration.BasicViewGenerator : InternalBase {
    internal BasicViewGenerator(MemberProjectionIndex projectedSlotMap, List`1<LeftCellWrapper> usedCells, FragmentQuery activeDomain, ViewgenContext context, MemberDomainMap domainMap, ErrorLog errorLog, ConfigViewGenerator config);
    internal CellTreeNode CreateViewExpression();
    internal CellTreeNode GroupByRightExtent(CellTreeNode rootNode);
    internal CellTreeNode IsolateByOperator(CellTreeNode rootNode, CellTreeOpType opTypeToIsolate);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.CellCreator : InternalBase {
    internal CqlIdentifiers Identifiers { get; }
    internal CellCreator(StorageEntityContainerMapping containerMapping);
    internal CqlIdentifiers get_Identifiers();
    internal List`1<Cell> GenerateCells(ConfigViewGenerator config);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.CellGroupValidator : object {
    internal CellGroupValidator(IEnumerable`1<Cell> cells, ConfigViewGenerator config);
    internal ErrorLog Validate();
}
internal class System.Data.Mapping.ViewGeneration.CellPartitioner : InternalBase {
    internal CellPartitioner(IEnumerable`1<Cell> cells, IEnumerable`1<ForeignConstraint> foreignKeyConstraints);
    internal List`1<Set`1<Cell>> GroupRelatedCells();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.CellTreeSimplifier : InternalBase {
    internal static CellTreeNode MergeNodes(CellTreeNode rootNode);
    internal bool TryMergeTwoCellQueries(CellQuery query1, CellQuery query2, CellTreeOpType opType, MemberDomainMap memberDomainMap, CellQuery& mergedQuery);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.ConfigViewGenerator : InternalBase {
    internal bool GenerateEsql { get; internal set; }
    internal TimeSpan[] BreakdownTimes { get; }
    internal ViewGenTraceLevel TraceLevel { get; internal set; }
    internal bool IsValidationEnabled { get; internal set; }
    internal bool GenerateUpdateViews { get; internal set; }
    internal bool GenerateViewsForEachType { get; internal set; }
    internal bool IsViewTracing { get; }
    internal bool IsNormalTracing { get; }
    internal bool IsVerboseTracing { get; }
    internal bool get_GenerateEsql();
    internal void set_GenerateEsql(bool value);
    internal TimeSpan[] get_BreakdownTimes();
    internal ViewGenTraceLevel get_TraceLevel();
    internal void set_TraceLevel(ViewGenTraceLevel value);
    internal bool get_IsValidationEnabled();
    internal void set_IsValidationEnabled(bool value);
    internal bool get_GenerateUpdateViews();
    internal void set_GenerateUpdateViews(bool value);
    internal bool get_GenerateViewsForEachType();
    internal void set_GenerateViewsForEachType(bool value);
    internal bool get_IsViewTracing();
    internal bool get_IsNormalTracing();
    internal bool get_IsVerboseTracing();
    internal void StartSingleWatch(PerfType perfType);
    internal void StopSingleWatch(PerfType perfType);
    internal void SetTimeForFinishedActivity(PerfType perfType);
    internal bool IsTraceAllowed(ViewGenTraceLevel traceLevel);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.CqlGeneration.BooleanProjectedSlot : ProjectedSlot {
    internal BooleanProjectedSlot(BoolExpression expr, CqlIdentifiers identifiers, int originalCellNum);
    internal virtual string GetCqlFieldAlias(MemberPath outputMember);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.CqlGeneration.CaseCqlBlock : CqlBlock {
    internal CaseCqlBlock(SlotInfo[] slots, int caseSlot, CqlBlock child, BoolExpression whereClause, CqlIdentifiers identifiers, int blockAliasNum);
    internal virtual StringBuilder AsEsql(StringBuilder builder, bool isTopLevel, int indentLevel);
    internal virtual DbExpression AsCqt(bool isTopLevel);
}
internal abstract class System.Data.Mapping.ViewGeneration.CqlGeneration.CqlBlock : InternalBase {
    internal ReadOnlyCollection`1<SlotInfo> Slots { get; internal set; }
    protected ReadOnlyCollection`1<CqlBlock> Children { get; }
    protected BoolExpression WhereClause { get; }
    internal string CqlAlias { get; }
    protected CqlBlock(SlotInfo[] slotInfos, List`1<CqlBlock> children, BoolExpression whereClause, CqlIdentifiers identifiers, int blockAliasNum);
    internal ReadOnlyCollection`1<SlotInfo> get_Slots();
    internal void set_Slots(ReadOnlyCollection`1<SlotInfo> value);
    protected ReadOnlyCollection`1<CqlBlock> get_Children();
    protected BoolExpression get_WhereClause();
    internal string get_CqlAlias();
    internal abstract virtual StringBuilder AsEsql(StringBuilder builder, bool isTopLevel, int indentLevel);
    internal abstract virtual DbExpression AsCqt(bool isTopLevel);
    internal QualifiedSlot QualifySlotWithBlockAlias(int slotNum);
    internal ProjectedSlot SlotValue(int slotNum);
    internal MemberPath MemberPath(int slotNum);
    internal bool IsProjected(int slotNum);
    protected void GenerateProjectionEsql(StringBuilder builder, string blockAlias, bool addNewLineAfterEachSlot, int indentLevel, bool isTopLevel);
    protected DbExpression GenerateProjectionCqt(DbExpression row, bool isTopLevel);
    internal void SetJoinTreeContext(IList`1<string> parentQualifiers, string leafQualifier);
    internal DbExpression GetInput(DbExpression row);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal static class System.Data.Mapping.ViewGeneration.CqlGeneration.CqlWriter : object {
    private static CqlWriter();
    internal static string GetQualifiedName(string blockName, string field);
    internal static void AppendEscapedTypeName(StringBuilder builder, EdmType type);
    internal static void AppendEscapedQualifiedName(StringBuilder builder, string name1, string name2);
    internal static void AppendEscapedName(StringBuilder builder, string name);
}
internal class System.Data.Mapping.ViewGeneration.CqlGeneration.ExtentCqlBlock : CqlBlock {
    internal ExtentCqlBlock(EntitySetBase extent, SelectDistinct selectDistinct, SlotInfo[] slots, BoolExpression whereClause, CqlIdentifiers identifiers, int blockAliasNum);
    private static ExtentCqlBlock();
    internal virtual StringBuilder AsEsql(StringBuilder builder, bool isTopLevel, int indentLevel);
    internal virtual DbExpression AsCqt(bool isTopLevel);
}
internal class System.Data.Mapping.ViewGeneration.CqlGeneration.JoinCqlBlock : CqlBlock {
    internal JoinCqlBlock(CellTreeOpType opType, SlotInfo[] slotInfos, List`1<CqlBlock> children, List`1<OnClause> onClauses, CqlIdentifiers identifiers, int blockAliasNum);
    internal virtual StringBuilder AsEsql(StringBuilder builder, bool isTopLevel, int indentLevel);
    internal virtual DbExpression AsCqt(bool isTopLevel);
}
internal class System.Data.Mapping.ViewGeneration.CqlGeneration.QualifiedSlot : ProjectedSlot {
    internal QualifiedSlot(CqlBlock block, ProjectedSlot slot);
    internal virtual ProjectedSlot DeepQualify(CqlBlock block);
    internal virtual string GetCqlFieldAlias(MemberPath outputMember);
    internal ProjectedSlot GetOriginalSlot();
    internal string GetQualifiedCqlName(MemberPath outputMember);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.CqlGeneration.SlotInfo : InternalBase {
    internal bool IsRequiredByParent { get; }
    internal bool IsProjected { get; }
    internal MemberPath OutputMember { get; }
    internal ProjectedSlot SlotValue { get; }
    internal string CqlFieldAlias { get; }
    internal bool IsEnforcedNotNull { get; }
    internal SlotInfo(bool isRequiredByParent, bool isProjected, ProjectedSlot slotValue, MemberPath outputMember);
    internal SlotInfo(bool isRequiredByParent, bool isProjected, ProjectedSlot slotValue, MemberPath outputMember, bool enforceNotNull);
    internal bool get_IsRequiredByParent();
    internal bool get_IsProjected();
    internal MemberPath get_OutputMember();
    internal ProjectedSlot get_SlotValue();
    internal string get_CqlFieldAlias();
    internal bool get_IsEnforcedNotNull();
    internal void ResetIsRequiredByParent();
    internal StringBuilder AsEsql(StringBuilder builder, string blockAlias, int indentLevel);
    internal DbExpression AsCqt(DbExpression row);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.CqlGeneration.UnionCqlBlock : CqlBlock {
    internal UnionCqlBlock(SlotInfo[] slotInfos, List`1<CqlBlock> children, CqlIdentifiers identifiers, int blockAliasNum);
    internal virtual StringBuilder AsEsql(StringBuilder builder, bool isTopLevel, int indentLevel);
    internal virtual DbExpression AsCqt(bool isTopLevel);
}
internal class System.Data.Mapping.ViewGeneration.CqlGenerator : InternalBase {
    internal CqlGenerator(CellTreeNode view, Dictionary`2<MemberPath, CaseStatement> caseStatements, CqlIdentifiers identifiers, MemberProjectionIndex projectedSlotMap, int numCellsInView, BoolExpression topLevelWhereClause, StorageMappingItemCollection mappingItemCollection);
    internal string GenerateEsql();
    internal DbQueryCommandTree GenerateCqt();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.DiscriminatorMap : object {
    internal DbPropertyExpression Discriminator;
    internal ReadOnlyCollection`1<KeyValuePair`2<object, EntityType>> TypeMap;
    internal ReadOnlyCollection`1<KeyValuePair`2<EdmProperty, DbExpression>> PropertyMap;
    internal ReadOnlyCollection`1<KeyValuePair`2<RelProperty, DbExpression>> RelPropertyMap;
    internal EntitySet EntitySet;
    internal static bool TryCreateDiscriminatorMap(EntitySet entitySet, DbExpression queryView, DiscriminatorMap& discriminatorMap);
}
internal class System.Data.Mapping.ViewGeneration.GeneratedView : InternalBase {
    internal string eSQL { get; }
    internal static GeneratedView CreateGeneratedView(EntitySetBase extent, EdmType type, DbQueryCommandTree commandTree, string eSQL, StorageMappingItemCollection mappingItemCollection, ConfigViewGenerator config);
    internal static GeneratedView CreateGeneratedViewForFKAssociationSet(EntitySetBase extent, EdmType type, DbQueryCommandTree commandTree, StorageMappingItemCollection mappingItemCollection, ConfigViewGenerator config);
    internal static bool TryParseUserSpecifiedView(StorageSetMapping setMapping, EntityTypeBase type, string eSQL, bool includeSubtypes, StorageMappingItemCollection mappingItemCollection, ConfigViewGenerator config, IList`1<EdmSchemaError> errors, GeneratedView& generatedView);
    internal string get_eSQL();
    internal DbQueryCommandTree GetCommandTree();
    internal Node GetInternalTree(Command targetIqtCommand);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal enum System.Data.Mapping.ViewGeneration.PerfType : Enum {
    public int value__;
    public static PerfType InitialSetup;
    public static PerfType CellCreation;
    public static PerfType KeyConstraint;
    public static PerfType ViewgenContext;
    public static PerfType UpdateViews;
    public static PerfType DisjointConstraint;
    public static PerfType PartitionConstraint;
    public static PerfType DomainConstraint;
    public static PerfType ForeignConstraint;
    public static PerfType QueryViews;
    public static PerfType BoolResolution;
    public static PerfType Unsatisfiability;
    public static PerfType ViewParsing;
}
internal class System.Data.Mapping.ViewGeneration.QueryRewriting.DefaultTileProcessor`1 : TileProcessor`1<Tile`1<T_Query>> {
    internal TileQueryProcessor`1<T_Query> QueryProcessor { get; }
    internal DefaultTileProcessor`1(TileQueryProcessor`1<T_Query> tileQueryProcessor);
    internal TileQueryProcessor`1<T_Query> get_QueryProcessor();
    internal virtual bool IsEmpty(Tile`1<T_Query> tile);
    internal virtual Tile`1<T_Query> Union(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2);
    internal virtual Tile`1<T_Query> Join(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2);
    internal virtual Tile`1<T_Query> AntiSemiJoin(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2);
    internal virtual Tile`1<T_Query> GetArg1(Tile`1<T_Query> tile);
    internal virtual Tile`1<T_Query> GetArg2(Tile`1<T_Query> tile);
    internal virtual TileOpKind GetOpKind(Tile`1<T_Query> tile);
    internal bool IsContainedIn(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2);
    internal bool IsEquivalentTo(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2);
}
internal class System.Data.Mapping.ViewGeneration.QueryRewriting.FragmentQuery : object {
    public HashSet`1<MemberPath> Attributes { get; }
    public BoolExpression Condition { get; }
    public BoolExpression FromVariable { get; }
    public string Description { get; }
    internal FragmentQuery(string label, BoolExpression fromVariable, IEnumerable`1<MemberPath> attrs, BoolExpression condition);
    public HashSet`1<MemberPath> get_Attributes();
    public BoolExpression get_Condition();
    public static FragmentQuery Create(BoolExpression fromVariable, CellQuery cellQuery);
    public static FragmentQuery Create(string label, RoleBoolean roleBoolean, CellQuery cellQuery);
    public static FragmentQuery Create(IEnumerable`1<MemberPath> attrs, BoolExpression whereClause);
    public static FragmentQuery Create(BoolExpression whereClause);
    public BoolExpression get_FromVariable();
    public sealed virtual string get_Description();
    public virtual string ToString();
    internal static BoolExpression CreateMemberCondition(MemberPath path, Constant domainValue, MemberDomainMap domainMap);
    internal static IEqualityComparer`1<FragmentQuery> GetEqualityComparer(FragmentQueryProcessor qp);
}
internal class System.Data.Mapping.ViewGeneration.QueryRewriting.FragmentQueryKB : KnowledgeBase`1<DomainConstraint`2<BoolLiteral, Constant>> {
    internal BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> KbExpression { get; }
    internal virtual void AddFact(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> fact);
    internal BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> get_KbExpression();
    internal void CreateVariableConstraints(EntitySetBase extent, MemberDomainMap domainMap, EdmItemCollection edmItemCollection);
    internal void CreateAssociationConstraints(EntitySetBase extent, MemberDomainMap domainMap, EdmItemCollection edmItemCollection);
    internal void CreateEquivalenceConstraintForOneToOneForeignKeyAssociation(AssociationSet assocSet, MemberDomainMap domainMap, EdmItemCollection edmItemCollection);
}
internal class System.Data.Mapping.ViewGeneration.QueryRewriting.FragmentQueryProcessor : TileQueryProcessor`1<FragmentQuery> {
    internal FragmentQueryKB KnowledgeBase { get; }
    public FragmentQueryProcessor(FragmentQueryKB kb);
    internal static FragmentQueryProcessor Merge(FragmentQueryProcessor qp1, FragmentQueryProcessor qp2);
    internal FragmentQueryKB get_KnowledgeBase();
    internal virtual FragmentQuery Union(FragmentQuery q1, FragmentQuery q2);
    internal bool IsDisjointFrom(FragmentQuery q1, FragmentQuery q2);
    internal bool IsContainedIn(FragmentQuery q1, FragmentQuery q2);
    internal bool IsEquivalentTo(FragmentQuery q1, FragmentQuery q2);
    internal virtual FragmentQuery Intersect(FragmentQuery q1, FragmentQuery q2);
    internal virtual FragmentQuery Difference(FragmentQuery qA, FragmentQuery qB);
    internal virtual bool IsSatisfiable(FragmentQuery query);
    internal virtual FragmentQuery CreateDerivedViewBySelectingConstantAttributes(FragmentQuery view);
    public virtual string ToString();
}
internal interface System.Data.Mapping.ViewGeneration.QueryRewriting.ITileQuery {
    public string Description { get; }
    public abstract virtual string get_Description();
}
internal class System.Data.Mapping.ViewGeneration.QueryRewriting.QueryRewriter : object {
    internal ViewgenContext ViewgenContext { get; }
    internal Dictionary`2<MemberPath, CaseStatement> CaseStatements { get; }
    internal BoolExpression TopLevelWhereClause { get; }
    internal CellTreeNode BasicView { get; }
    internal List`1<LeftCellWrapper> UsedCells { get; }
    internal QueryRewriter(EdmType generatedType, ViewgenContext context, ViewGenMode typesGenerationMode);
    private static QueryRewriter();
    internal void GenerateViewComponents();
    internal ViewgenContext get_ViewgenContext();
    internal Dictionary`2<MemberPath, CaseStatement> get_CaseStatements();
    internal BoolExpression get_TopLevelWhereClause();
    internal CellTreeNode get_BasicView();
    internal List`1<LeftCellWrapper> get_UsedCells();
    internal FragmentQuery GetDomainQuery(IEnumerable`1<FragmentQuery> fragmentQueries, EdmType generatedType);
    internal void EnsureExtentIsFullyMapped(HashSet`1<FragmentQuery> outputUsedViews);
    internal void AddTrivialCaseStatementsForConditionMembers();
    internal static FragmentQuery CreateMemberConditionQuery(MemberPath currentPath, Constant domainValue, IEnumerable`1<MemberPath> keyAttributes, MemberDomainMap domainMap);
    internal static CellTreeNode TileToCellTree(Tile`1<FragmentQuery> tile, ViewgenContext context);
    [ConditionalAttribute("DEBUG")]
internal void TraceVerbose(string msg, Object[] parameters);
}
internal class System.Data.Mapping.ViewGeneration.QueryRewriting.RewritingPass`1 : object {
    public RewritingPass`1(T_Tile toFill, T_Tile toAvoid, List`1<T_Tile> views, RewritingProcessor`1<T_Tile> qp);
    public static bool RewriteQuery(T_Tile toFill, T_Tile toAvoid, T_Tile& rewriting, List`1<T_Tile> views, RewritingProcessor`1<T_Tile> qp);
}
internal class System.Data.Mapping.ViewGeneration.QueryRewriting.RewritingProcessor`1 : TileProcessor`1<T_Tile> {
    public double PERMUTE_FRACTION;
    public int MIN_PERMUTATIONS;
    public int MAX_PERMUTATIONS;
    public bool REORDER_VIEWS;
    internal TileProcessor`1<T_Tile> TileProcessor { get; }
    public RewritingProcessor`1(TileProcessor`1<T_Tile> tileProcessor);
    private static RewritingProcessor`1();
    internal TileProcessor`1<T_Tile> get_TileProcessor();
    public void GetStatistics(Int32& numSATChecks, Int32& numIntersection, Int32& numUnion, Int32& numDifference, Int32& numErrors);
    public void PrintStatistics();
    internal virtual T_Tile GetArg1(T_Tile tile);
    internal virtual T_Tile GetArg2(T_Tile tile);
    internal virtual TileOpKind GetOpKind(T_Tile tile);
    internal virtual bool IsEmpty(T_Tile a);
    public bool IsDisjointFrom(T_Tile a, T_Tile b);
    internal bool IsContainedIn(T_Tile a, T_Tile b);
    internal bool IsEquivalentTo(T_Tile a, T_Tile b);
    internal virtual T_Tile Union(T_Tile a, T_Tile b);
    internal virtual T_Tile Join(T_Tile a, T_Tile b);
    internal virtual T_Tile AntiSemiJoin(T_Tile a, T_Tile b);
    public void AddError();
    public int CountOperators(T_Tile query);
    public int CountViews(T_Tile query);
    public void GatherViews(T_Tile rewriting, HashSet`1<T_Tile> views);
    public static IEnumerable`1<T> AllButOne(IEnumerable`1<T> list, int toSkipPosition);
    public static IEnumerable`1<T> Concat(T value, IEnumerable`1<T> rest);
    public static IEnumerable`1<IEnumerable`1<T>> Permute(IEnumerable`1<T> list);
    public static List`1<T> RandomPermutation(IEnumerable`1<T> input);
    public static IEnumerable`1<T> Reverse(IEnumerable`1<T> input, HashSet`1<T> filter);
    public bool RewriteQuery(T_Tile toFill, T_Tile toAvoid, IEnumerable`1<T_Tile> views, T_Tile& rewriting);
    public bool RewriteQueryOnce(T_Tile toFill, T_Tile toAvoid, IEnumerable`1<T_Tile> views, T_Tile& rewriting);
}
internal class System.Data.Mapping.ViewGeneration.QueryRewriting.RewritingSimplifier`1 : object {
    internal static bool TrySimplifyUnionRewriting(T_Tile& rewriting, T_Tile toFill, T_Tile toAvoid, RewritingProcessor`1<T_Tile> qp);
    internal static bool TrySimplifyJoinRewriting(T_Tile& rewriting, T_Tile toAvoid, Dictionary`2<T_Tile, TileOpKind> usedViews, RewritingProcessor`1<T_Tile> qp);
}
internal abstract class System.Data.Mapping.ViewGeneration.QueryRewriting.Tile`1 : object {
    public T_Query Query { get; }
    public string Description { get; }
    public Tile`1<T_Query> Arg1 { get; }
    public Tile`1<T_Query> Arg2 { get; }
    public TileOpKind OpKind { get; }
    protected Tile`1(TileOpKind opKind, T_Query query);
    public T_Query get_Query();
    public abstract virtual string get_Description();
    public IEnumerable`1<T_Query> GetNamedQueries();
    public virtual string ToString();
    public abstract virtual Tile`1<T_Query> get_Arg1();
    public abstract virtual Tile`1<T_Query> get_Arg2();
    public TileOpKind get_OpKind();
    internal abstract virtual Tile`1<T_Query> Replace(Tile`1<T_Query> oldTile, Tile`1<T_Query> newTile);
}
internal class System.Data.Mapping.ViewGeneration.QueryRewriting.TileBinaryOperator`1 : Tile`1<T_Query> {
    public Tile`1<T_Query> Arg1 { get; }
    public Tile`1<T_Query> Arg2 { get; }
    public string Description { get; }
    public TileBinaryOperator`1(Tile`1<T_Query> arg1, Tile`1<T_Query> arg2, TileOpKind opKind, T_Query query);
    public virtual Tile`1<T_Query> get_Arg1();
    public virtual Tile`1<T_Query> get_Arg2();
    public virtual string get_Description();
    internal virtual Tile`1<T_Query> Replace(Tile`1<T_Query> oldTile, Tile`1<T_Query> newTile);
}
internal class System.Data.Mapping.ViewGeneration.QueryRewriting.TileNamed`1 : Tile`1<T_Query> {
    public T_Query NamedQuery { get; }
    public Tile`1<T_Query> Arg1 { get; }
    public Tile`1<T_Query> Arg2 { get; }
    public string Description { get; }
    public TileNamed`1(T_Query namedQuery);
    public T_Query get_NamedQuery();
    public virtual Tile`1<T_Query> get_Arg1();
    public virtual Tile`1<T_Query> get_Arg2();
    public virtual string get_Description();
    public virtual string ToString();
    internal virtual Tile`1<T_Query> Replace(Tile`1<T_Query> oldTile, Tile`1<T_Query> newTile);
}
internal enum System.Data.Mapping.ViewGeneration.QueryRewriting.TileOpKind : Enum {
    public int value__;
    public static TileOpKind Union;
    public static TileOpKind Join;
    public static TileOpKind AntiSemiJoin;
    public static TileOpKind Named;
}
internal abstract class System.Data.Mapping.ViewGeneration.QueryRewriting.TileProcessor`1 : object {
    internal abstract virtual bool IsEmpty(T_Tile tile);
    internal abstract virtual T_Tile Union(T_Tile a, T_Tile b);
    internal abstract virtual T_Tile Join(T_Tile a, T_Tile b);
    internal abstract virtual T_Tile AntiSemiJoin(T_Tile a, T_Tile b);
    internal abstract virtual T_Tile GetArg1(T_Tile tile);
    internal abstract virtual T_Tile GetArg2(T_Tile tile);
    internal abstract virtual TileOpKind GetOpKind(T_Tile tile);
}
internal abstract class System.Data.Mapping.ViewGeneration.QueryRewriting.TileQueryProcessor`1 : object {
    internal abstract virtual T_Query Intersect(T_Query arg1, T_Query arg2);
    internal abstract virtual T_Query Difference(T_Query arg1, T_Query arg2);
    internal abstract virtual T_Query Union(T_Query arg1, T_Query arg2);
    internal abstract virtual bool IsSatisfiable(T_Query query);
    internal abstract virtual T_Query CreateDerivedViewBySelectingConstantAttributes(T_Query query);
}
internal class System.Data.Mapping.ViewGeneration.Structures.BoolExpression : InternalBase {
    internal static IEqualityComparer`1<BoolExpression> EqualityComparer;
    internal static BoolExpression True;
    internal static BoolExpression False;
    internal IEnumerable`1<BoolExpression> Atoms { get; }
    internal IEnumerable`1<BoolLiteral> Leaves { get; }
    internal BoolLiteral AsLiteral { get; }
    internal bool IsTrue { get; }
    internal bool IsFalse { get; }
    internal BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> Tree { get; }
    internal IEnumerable`1<DomainConstraint`2<BoolLiteral, Constant>> VariableConstraints { get; }
    internal IEnumerable`1<DomainVariable`2<BoolLiteral, Constant>> Variables { get; }
    internal IEnumerable`1<MemberRestriction> MemberRestrictions { get; }
    internal bool RepresentsAllTypeConditions { get; }
    internal BoolExpression(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> expr, MemberDomainMap memberDomainMap);
    private static BoolExpression();
    internal static BoolExpression CreateLiteral(BoolLiteral literal, MemberDomainMap memberDomainMap);
    internal BoolExpression Create(BoolLiteral literal);
    internal static BoolExpression CreateNot(BoolExpression expression);
    internal static BoolExpression CreateAnd(BoolExpression[] children);
    internal static BoolExpression CreateOr(BoolExpression[] children);
    internal static BoolExpression CreateAndNot(BoolExpression e1, BoolExpression e2);
    internal BoolExpression Create(BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> expression);
    internal IEnumerable`1<BoolExpression> get_Atoms();
    internal IEnumerable`1<BoolLiteral> get_Leaves();
    internal BoolLiteral get_AsLiteral();
    internal static BoolLiteral GetBoolLiteral(TermExpr`1<DomainConstraint`2<BoolLiteral, Constant>> term);
    internal bool get_IsTrue();
    internal bool get_IsFalse();
    internal bool IsAlwaysTrue();
    internal bool IsSatisfiable();
    internal bool IsUnsatisfiable();
    internal BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> get_Tree();
    internal IEnumerable`1<DomainConstraint`2<BoolLiteral, Constant>> get_VariableConstraints();
    internal IEnumerable`1<DomainVariable`2<BoolLiteral, Constant>> get_Variables();
    internal IEnumerable`1<MemberRestriction> get_MemberRestrictions();
    internal bool get_RepresentsAllTypeConditions();
    internal BoolExpression RemapLiterals(Dictionary`2<BoolLiteral, BoolLiteral> remap);
    internal virtual void GetRequiredSlots(MemberProjectionIndex projectedSlotMap, Boolean[] requiredSlots);
    internal StringBuilder AsEsql(StringBuilder builder, string blockAlias);
    internal DbExpression AsCqt(DbExpression row);
    internal StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool writeRoundtrippingMessage);
    internal virtual void ToCompactString(StringBuilder builder);
    internal BoolExpression RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal static List`1<BoolExpression> AddConjunctionToBools(List`1<BoolExpression> bools, BoolExpression conjunct);
    internal BoolExpression MakeCopy();
    internal void ExpensiveSimplify();
    internal void FixDomainMap(MemberDomainMap domainMap);
}
internal abstract class System.Data.Mapping.ViewGeneration.Structures.BoolLiteral : InternalBase {
    internal static IEqualityComparer`1<BoolLiteral> EqualityComparer;
    internal static IEqualityComparer`1<BoolLiteral> EqualityIdentifierComparer;
    private static BoolLiteral();
    internal static TermExpr`1<DomainConstraint`2<BoolLiteral, Constant>> MakeTermExpression(BoolLiteral literal, IEnumerable`1<Constant> domain, IEnumerable`1<Constant> range);
    internal static TermExpr`1<DomainConstraint`2<BoolLiteral, Constant>> MakeTermExpression(BoolLiteral literal, Set`1<Constant> domain, Set`1<Constant> range);
    internal abstract virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> FixRange(Set`1<Constant> range, MemberDomainMap memberDomainMap);
    internal abstract virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> GetDomainBoolExpression(MemberDomainMap domainMap);
    internal abstract virtual BoolLiteral RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal abstract virtual void GetRequiredSlots(MemberProjectionIndex projectedSlotMap, Boolean[] requiredSlots);
    internal abstract virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal abstract virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
    internal abstract virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal abstract virtual StringBuilder AsNegatedUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    protected virtual bool IsIdentifierEqualTo(BoolLiteral right);
    protected abstract virtual bool IsEqualTo(BoolLiteral right);
    protected virtual int GetIdentifierHash();
}
internal class System.Data.Mapping.ViewGeneration.Structures.CaseStatement : InternalBase {
    internal MemberPath MemberPath { get; }
    internal List`1<WhenThen> Clauses { get; }
    internal ProjectedSlot ElseValue { get; }
    internal bool DependsOnMemberValue { get; }
    internal IEnumerable`1<EdmType> InstantiatedTypes { get; }
    internal CaseStatement(MemberPath memberPath);
    internal MemberPath get_MemberPath();
    internal List`1<WhenThen> get_Clauses();
    internal ProjectedSlot get_ElseValue();
    internal CaseStatement DeepQualify(CqlBlock block);
    internal void AddWhenThen(BoolExpression condition, ProjectedSlot value);
    internal bool get_DependsOnMemberValue();
    internal IEnumerable`1<EdmType> get_InstantiatedTypes();
    internal void Simplify();
    internal StringBuilder AsEsql(StringBuilder builder, IEnumerable`1<WithRelationship> withRelationships, string blockAlias, int indentLevel);
    internal DbExpression AsCqt(DbExpression row, IEnumerable`1<WithRelationship> withRelationships);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.CaseStatementProjectedSlot : ProjectedSlot {
    internal CaseStatementProjectedSlot(CaseStatement statement, IEnumerable`1<WithRelationship> withRelationships);
    internal virtual ProjectedSlot DeepQualify(CqlBlock block);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.Cell : InternalBase {
    internal CellQuery CQuery { get; }
    internal CellQuery SQuery { get; }
    internal CellLabel CellLabel { get; }
    internal int CellNumber { get; }
    internal string CellNumberAsString { get; }
    internal Cell(Cell source);
    internal CellQuery get_CQuery();
    internal CellQuery get_SQuery();
    internal CellLabel get_CellLabel();
    internal int get_CellNumber();
    internal string get_CellNumberAsString();
    internal void GetIdentifiers(CqlIdentifiers identifiers);
    internal Set`1<EdmProperty> GetCSlotsForTableColumns(IEnumerable`1<MemberPath> columns);
    internal CellQuery GetLeftQuery(ViewTarget side);
    internal CellQuery GetRightQuery(ViewTarget side);
    internal ViewCellRelation CreateViewCellRelation(int cellNumber);
    internal virtual void ToCompactString(StringBuilder builder);
    internal virtual void ToFullString(StringBuilder builder);
    public virtual string ToString();
    internal static void CellsToBuilder(StringBuilder builder, IEnumerable`1<Cell> cells);
    internal static Cell CreateCS(CellQuery cQuery, CellQuery sQuery, CellLabel label, int cellNumber);
}
internal class System.Data.Mapping.ViewGeneration.Structures.CellIdBoolean : TrueFalseLiteral {
    internal string SlotName { get; }
    internal CellIdBoolean(CqlIdentifiers identifiers, int index);
    internal string get_SlotName();
    internal virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
    internal virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual StringBuilder AsNegatedUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual void GetRequiredSlots(MemberProjectionIndex projectedSlotMap, Boolean[] requiredSlots);
    protected virtual bool IsEqualTo(BoolLiteral right);
    public virtual int GetHashCode();
    internal virtual BoolLiteral RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.CellLabel : object {
    internal int StartLineNumber { get; }
    internal int StartLinePosition { get; }
    internal string SourceLocation { get; }
    internal CellLabel(CellLabel source);
    internal CellLabel(StorageMappingFragment fragmentInfo);
    internal CellLabel(int startLineNumber, int startLinePosition, string sourceLocation);
    internal int get_StartLineNumber();
    internal int get_StartLinePosition();
    internal string get_SourceLocation();
}
internal class System.Data.Mapping.ViewGeneration.Structures.CellQuery : InternalBase {
    internal SelectDistinct SelectDistinctFlag { get; }
    internal EntitySetBase Extent { get; }
    internal int NumProjectedSlots { get; }
    internal ProjectedSlot[] ProjectedSlots { get; }
    internal List`1<BoolExpression> BoolVars { get; }
    internal int NumBoolVars { get; }
    internal BoolExpression WhereClause { get; }
    internal MemberPath SourceExtentMemberPath { get; }
    internal BasicCellRelation BasicCellRelation { get; }
    internal IEnumerable`1<MemberRestriction> Conditions { get; }
    internal CellQuery(List`1<ProjectedSlot> slots, BoolExpression whereClause, MemberPath rootMember, SelectDistinct eliminateDuplicates);
    internal CellQuery(ProjectedSlot[] projectedSlots, BoolExpression whereClause, List`1<BoolExpression> boolExprs, SelectDistinct elimDupl, MemberPath rootMember);
    internal CellQuery(CellQuery source);
    internal SelectDistinct get_SelectDistinctFlag();
    internal EntitySetBase get_Extent();
    internal int get_NumProjectedSlots();
    internal ProjectedSlot[] get_ProjectedSlots();
    internal List`1<BoolExpression> get_BoolVars();
    internal int get_NumBoolVars();
    internal BoolExpression get_WhereClause();
    internal MemberPath get_SourceExtentMemberPath();
    internal BasicCellRelation get_BasicCellRelation();
    internal IEnumerable`1<MemberRestriction> get_Conditions();
    internal ProjectedSlot ProjectedSlotAt(int slotNum);
    internal Record CheckForDuplicateFields(CellQuery cQuery, Cell sourceCell);
    internal Record CheckForProjectedNotNullSlots(Cell sourceCell, IEnumerable`1<Cell> associationSets);
    internal void FixMissingSlotAsDefaultConstant(int slotNumber, ConstantProjectedSlot slot);
    internal void CreateFieldAlignedCellQueries(CellQuery otherQuery, MemberProjectionIndex projectedSlotMap, CellQuery& newMainQuery, CellQuery& newOtherQuery);
    internal Set`1<MemberPath> GetNonNullSlots();
    internal Record VerifyKeysPresent(Cell ownerCell, Func`3<object, object, string> formatEntitySetMessage, Func`4<object, object, object, string> formatAssociationSetMessage, ViewGenErrorCode errorCode);
    internal IEnumerable`1<MemberPath> GetProjectedMembers();
    internal List`1<MemberProjectedSlot> GetAllQuerySlots();
    internal int GetProjectedPosition(MemberProjectedSlot slot);
    internal List`1<int> GetProjectedPositions(MemberPath member);
    internal List`1<int> GetProjectedPositions(IEnumerable`1<MemberPath> paths);
    internal List`1<int> GetAssociationEndSlots(AssociationEndMember endMember);
    internal List`1<int> GetProjectedPositions(IEnumerable`1<MemberPath> paths, List`1<int> slotsToSearchFrom);
    internal void UpdateWhereClause(MemberDomainMap domainMap);
    internal BoolExpression GetBoolVar(int varNum);
    internal void InitializeBoolExpressions(int numBoolVars, int cellNum);
    internal IEnumerable`1<MemberRestriction> GetConjunctsFromWhereClause();
    internal IEnumerable`1<MemberRestriction> GetConjunctsFromOriginalWhereClause();
    internal void WhereClauseToUserString(StringBuilder builder, MetadataWorkspace workspace);
    internal void GetIdentifiers(CqlIdentifiers identifiers);
    internal void CreateBasicCellRelation(ViewCellRelation viewCellRelation);
    internal virtual void ToCompactString(StringBuilder stringBuilder);
    internal virtual void ToFullString(StringBuilder builder);
    public virtual string ToString();
    internal string ToESqlString();
}
internal abstract class System.Data.Mapping.ViewGeneration.Structures.CellTreeNode : InternalBase {
    internal CellTreeOpType OpType { get; }
    internal MemberDomainMap RightDomainMap { get; }
    internal FragmentQuery LeftFragmentQuery { get; }
    internal FragmentQuery RightFragmentQuery { get; }
    internal bool IsEmptyRightFragmentQuery { get; }
    internal Set`1<MemberPath> Attributes { get; }
    internal List`1<CellTreeNode> Children { get; }
    internal int NumProjectedSlots { get; }
    internal int NumBoolSlots { get; }
    internal MemberProjectionIndex ProjectedSlotMap { get; }
    internal ViewgenContext ViewgenContext { get; }
    protected IEnumerable`1<int> KeySlots { get; }
    protected CellTreeNode(ViewgenContext context);
    internal CellTreeNode MakeCopy();
    internal abstract virtual CellTreeOpType get_OpType();
    internal abstract virtual MemberDomainMap get_RightDomainMap();
    internal abstract virtual FragmentQuery get_LeftFragmentQuery();
    internal abstract virtual FragmentQuery get_RightFragmentQuery();
    internal bool get_IsEmptyRightFragmentQuery();
    internal abstract virtual Set`1<MemberPath> get_Attributes();
    internal abstract virtual List`1<CellTreeNode> get_Children();
    internal abstract virtual int get_NumProjectedSlots();
    internal abstract virtual int get_NumBoolSlots();
    internal MemberProjectionIndex get_ProjectedSlotMap();
    internal ViewgenContext get_ViewgenContext();
    internal abstract virtual CqlBlock ToCqlBlock(Boolean[] requiredSlots, CqlIdentifiers identifiers, Int32& blockAliasNum, List`1& withRelationships);
    internal abstract virtual bool IsProjectedSlot(int slot);
    internal abstract virtual TOutput Accept(CellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal abstract virtual TOutput Accept(SimpleCellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal CellTreeNode Flatten();
    internal List`1<LeftCellWrapper> GetLeaves();
    internal IEnumerable`1<LeafCellTreeNode> GetLeafNodes();
    internal CellTreeNode AssociativeFlatten();
    internal static bool IsAssociativeOp(CellTreeOpType opType);
    internal Boolean[] GetProjectedSlots();
    protected MemberPath GetMemberPath(int slotNum);
    protected int BoolIndexToSlot(int boolIndex);
    protected int SlotToBoolIndex(int slotNum);
    protected bool IsKeySlot(int slotNum);
    protected bool IsBoolSlot(int slotNum);
    protected IEnumerable`1<int> get_KeySlots();
    internal virtual void ToFullString(StringBuilder builder);
}
internal enum System.Data.Mapping.ViewGeneration.Structures.CellTreeOpType : Enum {
    public int value__;
    public static CellTreeOpType Leaf;
    public static CellTreeOpType Union;
    public static CellTreeOpType FOJ;
    public static CellTreeOpType LOJ;
    public static CellTreeOpType IJ;
    public static CellTreeOpType LASJ;
}
internal abstract class System.Data.Mapping.ViewGeneration.Structures.Constant : InternalBase {
    internal static IEqualityComparer`1<Constant> EqualityComparer;
    internal static Constant Null;
    internal static Constant NotNull;
    internal static Constant Undefined;
    internal static Constant AllOtherConstants;
    private static Constant();
    internal abstract virtual bool IsNull();
    internal abstract virtual bool IsNotNull();
    internal abstract virtual bool IsUndefined();
    internal abstract virtual bool HasNotNull();
    internal abstract virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias);
    internal abstract virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected abstract virtual bool IsEqualTo(Constant right);
    internal abstract virtual string ToUserString();
    internal static void ConstantsToUserString(StringBuilder builder, Set`1<Constant> constants);
}
internal class System.Data.Mapping.ViewGeneration.Structures.ConstantProjectedSlot : ProjectedSlot {
    internal Constant CellConstant { get; }
    internal ConstantProjectedSlot(Constant value, MemberPath memberPath);
    internal Constant get_CellConstant();
    internal virtual ProjectedSlot DeepQualify(CqlBlock block);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    protected virtual bool IsEqualTo(ProjectedSlot right);
    protected virtual int GetHash();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.CqlIdentifiers : InternalBase {
    internal string GetFromVariable(int num);
    internal string GetBlockAlias(int num);
    internal string GetBlockAlias();
    internal void AddIdentifier(string identifier);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.Domain : InternalBase {
    internal IEnumerable`1<Constant> AllPossibleValues { get; }
    internal int Count { get; }
    internal IEnumerable`1<Constant> Values { get; }
    internal Domain(Constant value, IEnumerable`1<Constant> possibleDiscreteValues);
    internal Domain(IEnumerable`1<Constant> values, IEnumerable`1<Constant> possibleDiscreteValues);
    internal Domain(Domain domain);
    internal IEnumerable`1<Constant> get_AllPossibleValues();
    internal int get_Count();
    internal IEnumerable`1<Constant> get_Values();
    internal static Set`1<Constant> DeriveDomainFromMemberPath(MemberPath memberPath, EdmItemCollection edmItemCollection, bool leaveDomainUnbounded);
    internal static bool TryGetDefaultValueForMemberPath(MemberPath memberPath, Constant& defaultConstant);
    internal static Constant GetDefaultValueForMemberPath(MemberPath memberPath, IEnumerable`1<LeftCellWrapper> wrappersForErrorReporting, ConfigViewGenerator config);
    internal int GetHash();
    internal bool IsEqualTo(Domain second);
    internal bool ContainsNotNull();
    internal bool Contains(Constant constant);
    internal static Set`1<Constant> ExpandNegationsInDomain(IEnumerable`1<Constant> domain, IEnumerable`1<Constant> otherPossibleValues);
    internal static Set`1<Constant> ExpandNegationsInDomain(IEnumerable`1<Constant> domain);
    internal static Dictionary`2<MemberPath, Set`1<Constant>> ComputeConstantDomainSetsForSlotsInQueryViews(IEnumerable`1<Cell> cells, EdmItemCollection edmItemCollection, bool isValidationEnabled);
    internal static Dictionary`2<MemberPath, Set`1<Constant>> ComputeConstantDomainSetsForSlotsInUpdateViews(IEnumerable`1<Cell> cells, EdmItemCollection edmItemCollection);
    internal void AssertInvariant();
    internal string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.ErrorLog : InternalBase {
    internal int Count { get; }
    internal IEnumerable`1<EdmSchemaError> Errors { get; }
    internal int get_Count();
    internal IEnumerable`1<EdmSchemaError> get_Errors();
    internal void AddEntry(Record record);
    internal void Merge(ErrorLog log);
    internal void PrintTrace();
    internal virtual void ToCompactString(StringBuilder builder);
    internal string ToUserString();
}
internal class System.Data.Mapping.ViewGeneration.Structures.ExtentKey : InternalBase {
    internal IEnumerable`1<MemberPath> KeyFields { get; }
    internal ExtentKey(IEnumerable`1<MemberPath> keyFields);
    internal IEnumerable`1<MemberPath> get_KeyFields();
    internal static List`1<ExtentKey> GetKeysForEntityType(MemberPath prefix, EntityType entityType);
    internal static ExtentKey GetPrimaryKeyForEntityType(MemberPath prefix, EntityType entityType);
    internal static ExtentKey GetKeyForRelationType(MemberPath prefix, AssociationType relationType);
    internal string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.LeafCellTreeNode : CellTreeNode {
    internal static IEqualityComparer`1<LeafCellTreeNode> EqualityComparer;
    internal LeftCellWrapper LeftCellWrapper { get; }
    internal MemberDomainMap RightDomainMap { get; }
    internal FragmentQuery LeftFragmentQuery { get; }
    internal FragmentQuery RightFragmentQuery { get; }
    internal Set`1<MemberPath> Attributes { get; }
    internal List`1<CellTreeNode> Children { get; }
    internal CellTreeOpType OpType { get; }
    internal int NumProjectedSlots { get; }
    internal int NumBoolSlots { get; }
    internal LeafCellTreeNode(ViewgenContext context, LeftCellWrapper cellWrapper);
    internal LeafCellTreeNode(ViewgenContext context, LeftCellWrapper cellWrapper, FragmentQuery rightFragmentQuery);
    private static LeafCellTreeNode();
    internal LeftCellWrapper get_LeftCellWrapper();
    internal virtual MemberDomainMap get_RightDomainMap();
    internal virtual FragmentQuery get_LeftFragmentQuery();
    internal virtual FragmentQuery get_RightFragmentQuery();
    internal virtual Set`1<MemberPath> get_Attributes();
    internal virtual List`1<CellTreeNode> get_Children();
    internal virtual CellTreeOpType get_OpType();
    internal virtual int get_NumProjectedSlots();
    internal virtual int get_NumBoolSlots();
    internal virtual TOutput Accept(CellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal virtual TOutput Accept(SimpleCellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal virtual bool IsProjectedSlot(int slot);
    internal virtual CqlBlock ToCqlBlock(Boolean[] requiredSlots, CqlIdentifiers identifiers, Int32& blockAliasNum, List`1& withRelationships);
    internal virtual void ToCompactString(StringBuilder stringBuilder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.LeftCellWrapper : InternalBase {
    internal static IEqualityComparer`1<LeftCellWrapper> BoolEqualityComparer;
    internal static IComparer`1<LeftCellWrapper> Comparer;
    internal static IComparer`1<LeftCellWrapper> OriginalCellIdComparer;
    internal FragmentQuery FragmentQuery { get; }
    internal Set`1<MemberPath> Attributes { get; }
    internal string OriginalCellNumberString { get; }
    internal MemberDomainMap RightDomainMap { get; }
    internal IEnumerable`1<Cell> Cells { get; }
    internal Cell OnlyInputCell { get; }
    internal CellQuery RightCellQuery { get; }
    internal CellQuery LeftCellQuery { get; }
    internal EntitySetBase LeftExtent { get; }
    internal EntitySetBase RightExtent { get; }
    internal LeftCellWrapper(ViewTarget viewTarget, Set`1<MemberPath> attrs, FragmentQuery fragmentQuery, CellQuery leftCellQuery, CellQuery rightCellQuery, MemberMaps memberMaps, IEnumerable`1<Cell> inputCells);
    internal LeftCellWrapper(ViewTarget viewTarget, Set`1<MemberPath> attrs, FragmentQuery fragmentQuery, CellQuery leftCellQuery, CellQuery rightCellQuery, MemberMaps memberMaps, Cell inputCell);
    private static LeftCellWrapper();
    internal FragmentQuery get_FragmentQuery();
    internal Set`1<MemberPath> get_Attributes();
    internal string get_OriginalCellNumberString();
    internal MemberDomainMap get_RightDomainMap();
    [ConditionalAttribute("DEBUG")]
internal void AssertHasUniqueCell();
    internal IEnumerable`1<Cell> get_Cells();
    internal Cell get_OnlyInputCell();
    internal CellQuery get_RightCellQuery();
    internal CellQuery get_LeftCellQuery();
    internal EntitySetBase get_LeftExtent();
    internal EntitySetBase get_RightExtent();
    internal static IEnumerable`1<Cell> GetInputCellsForWrappers(IEnumerable`1<LeftCellWrapper> wrappers);
    internal RoleBoolean CreateRoleBoolean();
    internal static string GetExtentListAsUserString(IEnumerable`1<LeftCellWrapper> wrappers);
    internal virtual void ToFullString(StringBuilder builder);
    internal virtual void ToCompactString(StringBuilder stringBuilder);
    internal static void WrappersToStringBuilder(StringBuilder builder, List`1<LeftCellWrapper> wrappers, string header);
    internal MemberProjectedSlot GetLeftSideMappedSlotForRightSideMember(MemberPath member);
    internal MemberProjectedSlot GetRightSideMappedSlotForLeftSideMember(MemberPath member);
    internal MemberProjectedSlot GetCSideMappedSlotForSMember(MemberPath member);
}
internal class System.Data.Mapping.ViewGeneration.Structures.MemberDomainMap : InternalBase {
    internal MemberDomainMap(ViewTarget viewTarget, bool isValidationEnabled, IEnumerable`1<Cell> extentCells, EdmItemCollection edmItemCollection, ConfigViewGenerator config, Dictionary`2<EntityType, Set`1<EntityType>> inheritanceGraph);
    internal bool IsProjectedConditionMember(MemberPath memberPath);
    internal MemberDomainMap GetOpenDomain();
    internal MemberDomainMap MakeCopy();
    internal void ExpandDomainsToIncludeAllPossibleValues();
    internal void ReduceEnumerableDomainToEnumeratedValues(ViewTarget target, ConfigViewGenerator config);
    internal static void PropagateUpdateDomainToQueryDomain(IEnumerable`1<Cell> cells, MemberDomainMap queryDomainMap, MemberDomainMap updateDomainMap);
    internal bool IsConditionMember(MemberPath path);
    internal IEnumerable`1<MemberPath> ConditionMembers(EntitySetBase extent);
    internal IEnumerable`1<MemberPath> NonConditionMembers(EntitySetBase extent);
    internal void AddSentinel(MemberPath path);
    internal void RemoveSentinel(MemberPath path);
    internal IEnumerable`1<Constant> GetDomain(MemberPath path);
    internal void UpdateConditionMemberDomain(MemberPath path, IEnumerable`1<Constant> domainValues);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.MemberMaps : object {
    internal MemberProjectionIndex ProjectedSlotMap { get; }
    internal MemberDomainMap QueryDomainMap { get; }
    internal MemberDomainMap UpdateDomainMap { get; }
    internal MemberDomainMap RightDomainMap { get; }
    internal MemberDomainMap LeftDomainMap { get; }
    internal MemberMaps(ViewTarget viewTarget, MemberProjectionIndex projectedSlotMap, MemberDomainMap queryDomainMap, MemberDomainMap updateDomainMap);
    internal MemberProjectionIndex get_ProjectedSlotMap();
    internal MemberDomainMap get_QueryDomainMap();
    internal MemberDomainMap get_UpdateDomainMap();
    internal MemberDomainMap get_RightDomainMap();
    internal MemberDomainMap get_LeftDomainMap();
}
internal class System.Data.Mapping.ViewGeneration.Structures.MemberPath : InternalBase {
    internal static IEqualityComparer`1<MemberPath> EqualityComparer;
    internal EdmMember RootEdmMember { get; }
    internal EdmMember LeafEdmMember { get; }
    internal string LeafName { get; }
    internal bool IsComputed { get; }
    internal object DefaultValue { get; }
    internal bool IsPartOfKey { get; }
    internal bool IsNullable { get; }
    internal EntitySet EntitySet { get; }
    internal EntitySetBase Extent { get; }
    internal EdmType EdmType { get; }
    internal string CqlFieldAlias { get; }
    internal MemberPath(EntitySetBase extent, IEnumerable`1<EdmMember> path);
    internal MemberPath(EntitySetBase extent);
    internal MemberPath(EntitySetBase extent, EdmMember member);
    internal MemberPath(MemberPath prefix, EdmMember last);
    private static MemberPath();
    internal EdmMember get_RootEdmMember();
    internal EdmMember get_LeafEdmMember();
    internal string get_LeafName();
    internal bool get_IsComputed();
    internal object get_DefaultValue();
    internal bool get_IsPartOfKey();
    internal bool get_IsNullable();
    internal EntitySet get_EntitySet();
    internal EntitySetBase get_Extent();
    internal EdmType get_EdmType();
    internal string get_CqlFieldAlias();
    internal bool IsAlwaysDefined(Dictionary`2<EntityType, Set`1<EntityType>> inheritanceGraph);
    internal void GetIdentifiers(CqlIdentifiers identifiers);
    internal static bool AreAllMembersNullable(IEnumerable`1<MemberPath> members);
    internal static string PropertiesToUserString(IEnumerable`1<MemberPath> members, bool fullPath);
    internal StringBuilder AsEsql(StringBuilder inputBuilder, string blockAlias);
    internal DbExpression AsCqt(DbExpression row);
    internal void AsCql(Action`1<string> accessMember, Action getKey, Action`1<StructuralType> treatAs);
    public sealed virtual bool Equals(MemberPath right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal bool IsScalarType();
    internal static IEnumerable`1<MemberPath> GetKeyMembers(EntitySetBase extent, MemberDomainMap domainMap);
    internal IEnumerable`1<MemberPath> GetMembers(EdmType edmType, Nullable`1<bool> isScalar, Nullable`1<bool> isConditional, Nullable`1<bool> isPartOfKey, MemberDomainMap domainMap);
    internal bool IsEquivalentViaRefConstraint(MemberPath path1);
    internal EntitySet GetScopeOfRelationEnd();
    internal string PathToString(Nullable`1<bool> forAlias);
    internal virtual void ToCompactString(StringBuilder builder);
    internal void ToCompactString(StringBuilder builder, string instanceToken);
}
internal class System.Data.Mapping.ViewGeneration.Structures.MemberProjectedSlot : ProjectedSlot {
    internal MemberPath MemberPath { get; }
    internal MemberProjectedSlot(MemberPath node);
    internal MemberPath get_MemberPath();
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal virtual void ToCompactString(StringBuilder builder);
    internal string ToUserString();
    protected virtual bool IsEqualTo(ProjectedSlot right);
    protected virtual int GetHash();
    internal MemberProjectedSlot RemapSlot(Dictionary`2<MemberPath, MemberPath> remap);
    internal static List`1<MemberProjectedSlot> GetKeySlots(IEnumerable`1<MemberProjectedSlot> slots, MemberPath prefix);
    internal static List`1<MemberProjectedSlot> GetSlots(IEnumerable`1<MemberProjectedSlot> slots, IEnumerable`1<MemberPath> members);
    internal static MemberProjectedSlot GetSlotForMember(IEnumerable`1<ProjectedSlot> slots, MemberPath member);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Mapping.ViewGeneration.Structures.MemberProjectionIndex : InternalBase {
    internal int Count { get; }
    internal MemberPath Item { get; }
    internal IEnumerable`1<int> KeySlots { get; }
    internal IEnumerable`1<MemberPath> Members { get; }
    internal static MemberProjectionIndex Create(EntitySetBase extent, EdmItemCollection edmItemCollection);
    internal int get_Count();
    internal MemberPath get_Item(int index);
    internal IEnumerable`1<int> get_KeySlots();
    internal IEnumerable`1<MemberPath> get_Members();
    internal int IndexOf(MemberPath member);
    internal int CreateIndex(MemberPath member);
    internal MemberPath GetMemberPath(int slotNum, int numBoolSlots);
    internal int BoolIndexToSlot(int boolIndex, int numBoolSlots);
    internal int SlotToBoolIndex(int slotNum, int numBoolSlots);
    internal bool IsKeySlot(int slotNum, int numBoolSlots);
    internal bool IsBoolSlot(int slotNum, int numBoolSlots);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal abstract class System.Data.Mapping.ViewGeneration.Structures.MemberRestriction : BoolLiteral {
    internal bool IsComplete { get; }
    internal MemberProjectedSlot RestrictedMemberSlot { get; }
    internal Domain Domain { get; }
    protected MemberRestriction(MemberProjectedSlot slot, Constant value);
    protected MemberRestriction(MemberProjectedSlot slot, IEnumerable`1<Constant> values);
    protected MemberRestriction(MemberProjectedSlot slot, Domain domain);
    protected MemberRestriction(MemberProjectedSlot slot, IEnumerable`1<Constant> values, IEnumerable`1<Constant> possibleValues);
    internal bool get_IsComplete();
    internal MemberProjectedSlot get_RestrictedMemberSlot();
    internal Domain get_Domain();
    internal virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> GetDomainBoolExpression(MemberDomainMap domainMap);
    internal abstract virtual MemberRestriction CreateCompleteMemberRestriction(IEnumerable`1<Constant> possibleValues);
    internal virtual void GetRequiredSlots(MemberProjectionIndex projectedSlotMap, Boolean[] requiredSlots);
    protected virtual bool IsEqualTo(BoolLiteral right);
    public virtual int GetHashCode();
    protected virtual bool IsIdentifierEqualTo(BoolLiteral right);
    protected virtual int GetIdentifierHash();
    internal void ToUserString(bool invertOutput, StringBuilder builder, MetadataWorkspace workspace);
    internal virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual StringBuilder AsNegatedUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
}
internal class System.Data.Mapping.ViewGeneration.Structures.NegatedConstant : Constant {
    internal IEnumerable`1<Constant> Elements { get; }
    internal NegatedConstant(IEnumerable`1<Constant> values);
    internal IEnumerable`1<Constant> get_Elements();
    internal bool Contains(Constant constant);
    internal virtual bool IsNull();
    internal virtual bool IsNotNull();
    internal virtual bool IsUndefined();
    internal virtual bool HasNotNull();
    public virtual int GetHashCode();
    protected virtual bool IsEqualTo(Constant right);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal StringBuilder AsEsql(StringBuilder builder, string blockAlias, IEnumerable`1<Constant> constants, MemberPath outputMember, bool skipIsNotNull);
    internal DbExpression AsCqt(DbExpression row, IEnumerable`1<Constant> constants, MemberPath outputMember, bool skipIsNotNull);
    internal StringBuilder AsUserString(StringBuilder builder, string blockAlias, IEnumerable`1<Constant> constants, MemberPath outputMember, bool skipIsNotNull);
    internal virtual string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.OpCellTreeNode : CellTreeNode {
    internal CellTreeOpType OpType { get; }
    internal FragmentQuery LeftFragmentQuery { get; }
    internal FragmentQuery RightFragmentQuery { get; }
    internal MemberDomainMap RightDomainMap { get; }
    internal Set`1<MemberPath> Attributes { get; }
    internal List`1<CellTreeNode> Children { get; }
    internal int NumProjectedSlots { get; }
    internal int NumBoolSlots { get; }
    internal OpCellTreeNode(ViewgenContext context, CellTreeOpType opType);
    internal OpCellTreeNode(ViewgenContext context, CellTreeOpType opType, CellTreeNode[] children);
    internal OpCellTreeNode(ViewgenContext context, CellTreeOpType opType, IEnumerable`1<CellTreeNode> children);
    internal virtual CellTreeOpType get_OpType();
    internal virtual FragmentQuery get_LeftFragmentQuery();
    internal virtual FragmentQuery get_RightFragmentQuery();
    internal virtual MemberDomainMap get_RightDomainMap();
    internal virtual Set`1<MemberPath> get_Attributes();
    internal virtual List`1<CellTreeNode> get_Children();
    internal virtual int get_NumProjectedSlots();
    internal virtual int get_NumBoolSlots();
    internal virtual TOutput Accept(SimpleCellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal virtual TOutput Accept(CellTreeVisitor`2<TInput, TOutput> visitor, TInput param);
    internal void Add(CellTreeNode child);
    internal void AddFirst(CellTreeNode child);
    internal virtual CqlBlock ToCqlBlock(Boolean[] requiredSlots, CqlIdentifiers identifiers, Int32& blockAliasNum, List`1& withRelationships);
    internal virtual bool IsProjectedSlot(int slot);
    internal static string OpToEsql(CellTreeOpType opType);
    internal virtual void ToCompactString(StringBuilder stringBuilder);
}
internal abstract class System.Data.Mapping.ViewGeneration.Structures.ProjectedSlot : InternalBase {
    internal static IEqualityComparer`1<ProjectedSlot> EqualityComparer;
    private static ProjectedSlot();
    protected virtual bool IsEqualTo(ProjectedSlot right);
    protected virtual int GetHash();
    public sealed virtual bool Equals(ProjectedSlot right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual ProjectedSlot DeepQualify(CqlBlock block);
    internal virtual string GetCqlFieldAlias(MemberPath outputMember);
    internal abstract virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal abstract virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal static bool TryMergeRemapSlots(ProjectedSlot[] slots1, ProjectedSlot[] slots2, ProjectedSlot[]& result);
}
internal class System.Data.Mapping.ViewGeneration.Structures.QualifiedCellIdBoolean : CellIdBoolean {
    internal QualifiedCellIdBoolean(CqlBlock block, CqlIdentifiers identifiers, int originalCellNum);
    internal virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
}
internal class System.Data.Mapping.ViewGeneration.Structures.RoleBoolean : TrueFalseLiteral {
    internal RoleBoolean(EntitySetBase extent);
    internal RoleBoolean(AssociationSetEnd end);
    internal virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
    internal virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual StringBuilder AsNegatedUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual void GetRequiredSlots(MemberProjectionIndex projectedSlotMap, Boolean[] requiredSlots);
    protected virtual bool IsEqualTo(BoolLiteral right);
    public virtual int GetHashCode();
    internal virtual BoolLiteral RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.ScalarConstant : Constant {
    internal object Value { get; }
    internal ScalarConstant(object value);
    internal object get_Value();
    internal virtual bool IsNull();
    internal virtual bool IsNotNull();
    internal virtual bool IsUndefined();
    internal virtual bool HasNotNull();
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    protected virtual bool IsEqualTo(Constant right);
    public virtual int GetHashCode();
    internal virtual string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.ScalarRestriction : MemberRestriction {
    internal ScalarRestriction(MemberPath member, Constant value);
    internal ScalarRestriction(MemberPath member, IEnumerable`1<Constant> values, IEnumerable`1<Constant> possibleValues);
    internal ScalarRestriction(MemberProjectedSlot slot, Domain domain);
    internal virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> FixRange(Set`1<Constant> range, MemberDomainMap memberDomainMap);
    internal virtual BoolLiteral RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal virtual MemberRestriction CreateCompleteMemberRestriction(IEnumerable`1<Constant> possibleValues);
    internal virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
    internal virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal abstract class System.Data.Mapping.ViewGeneration.Structures.TrueFalseLiteral : BoolLiteral {
    internal virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> GetDomainBoolExpression(MemberDomainMap domainMap);
    internal virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> FixRange(Set`1<Constant> range, MemberDomainMap memberDomainMap);
}
internal class System.Data.Mapping.ViewGeneration.Structures.TypeConstant : Constant {
    internal EdmType EdmType { get; }
    internal TypeConstant(EdmType type);
    internal EdmType get_EdmType();
    internal virtual bool IsNull();
    internal virtual bool IsNotNull();
    internal virtual bool IsUndefined();
    internal virtual bool HasNotNull();
    protected virtual bool IsEqualTo(Constant right);
    public virtual int GetHashCode();
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal virtual string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Structures.TypeRestriction : MemberRestriction {
    internal TypeRestriction(MemberPath member, IEnumerable`1<EdmType> values);
    internal TypeRestriction(MemberPath member, Constant value);
    internal TypeRestriction(MemberProjectedSlot slot, Domain domain);
    internal virtual BoolExpr`1<DomainConstraint`2<BoolLiteral, Constant>> FixRange(Set`1<Constant> range, MemberDomainMap memberDomainMap);
    internal virtual BoolLiteral RemapBool(Dictionary`2<MemberPath, MemberPath> remap);
    internal virtual MemberRestriction CreateCompleteMemberRestriction(IEnumerable`1<Constant> possibleValues);
    internal virtual StringBuilder AsEsql(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual DbExpression AsCqt(DbExpression row, bool skipIsNotNull);
    internal virtual StringBuilder AsUserString(StringBuilder builder, string blockAlias, bool skipIsNotNull);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal enum System.Data.Mapping.ViewGeneration.Structures.ViewTarget : Enum {
    public int value__;
    public static ViewTarget QueryView;
    public static ViewTarget UpdateView;
}
internal class System.Data.Mapping.ViewGeneration.Structures.WithRelationship : InternalBase {
    internal EntityType FromEndEntityType { get; }
    internal WithRelationship(AssociationSet associationSet, AssociationEndMember fromEnd, EntityType fromEndEntityType, AssociationEndMember toEnd, EntityType toEndEntityType, IEnumerable`1<MemberPath> toEndEntityKeyMemberPaths);
    internal EntityType get_FromEndEntityType();
    internal StringBuilder AsEsql(StringBuilder builder, string blockAlias, int indentLevel);
    internal DbRelatedEntityRef AsCqt(DbExpression row);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal static class System.Data.Mapping.ViewGeneration.Utils.ExceptionHelpers : object {
    internal static void ThrowMappingException(Record errorRecord, ConfigViewGenerator config);
    internal static void ThrowMappingException(ErrorLog errorLog, ConfigViewGenerator config);
}
internal static class System.Data.Mapping.ViewGeneration.Utils.ExternalCalls : object {
    internal static bool IsReservedKeyword(string name);
    internal static DbCommandTree CompileView(string viewDef, StorageMappingItemCollection mappingItemCollection, CompilationMode compilationMode);
    internal static DbExpression CompileFunctionView(string viewDef, StorageMappingItemCollection mappingItemCollection, CompilationMode compilationMode, IEnumerable`1<DbParameterReferenceExpression> parameters);
    internal static DbLambda CompileFunctionDefinition(string functionFullName, string functionDefinition, IList`1<FunctionParameter> functionParameters, EdmItemCollection edmItemCollection);
}
internal enum System.Data.Mapping.ViewGeneration.Utils.ViewGenErrorCode : Enum {
    public int value__;
    public static ViewGenErrorCode Value;
    public static ViewGenErrorCode InvalidCondition;
    public static ViewGenErrorCode KeyConstraintViolation;
    public static ViewGenErrorCode KeyConstraintUpdateViolation;
    public static ViewGenErrorCode AttributesUnrecoverable;
    public static ViewGenErrorCode AmbiguousMultiConstants;
    public static ViewGenErrorCode NonKeyProjectedWithOverlappingPartitions;
    public static ViewGenErrorCode ConcurrencyDerivedClass;
    public static ViewGenErrorCode ConcurrencyTokenHasCondition;
    public static ViewGenErrorCode DomainConstraintViolation;
    public static ViewGenErrorCode ForeignKeyMissingTableMapping;
    public static ViewGenErrorCode ForeignKeyNotGuaranteedInCSpace;
    public static ViewGenErrorCode ForeignKeyMissingRelationshipMapping;
    public static ViewGenErrorCode ForeignKeyUpperBoundMustBeOne;
    public static ViewGenErrorCode ForeignKeyLowerBoundMustBeOne;
    public static ViewGenErrorCode ForeignKeyParentTableNotMappedToEnd;
    public static ViewGenErrorCode ForeignKeyColumnOrderIncorrect;
    public static ViewGenErrorCode DisjointConstraintViolation;
    public static ViewGenErrorCode DuplicateCPropertiesMapped;
    public static ViewGenErrorCode NotNullNoProjectedSlot;
    public static ViewGenErrorCode NoDefaultValue;
    public static ViewGenErrorCode KeyNotMappedForCSideExtent;
    public static ViewGenErrorCode KeyNotMappedForTable;
    public static ViewGenErrorCode PartitionConstraintViolation;
    public static ViewGenErrorCode MissingExtentMapping;
    public static ViewGenErrorCode ImpopssibleCondition;
    public static ViewGenErrorCode NullableMappingForNonNullableColumn;
    public static ViewGenErrorCode ErrorPatternConditionError;
    public static ViewGenErrorCode ErrorPatternSplittingError;
    public static ViewGenErrorCode ErrorPatternInvalidPartitionError;
    public static ViewGenErrorCode ErrorPatternMissingMappingError;
    public static ViewGenErrorCode NoJoinKeyOrFKProvidedInMapping;
    public static ViewGenErrorCode MultipleFragmentsBetweenCandSExtentWithDistinct;
}
internal class System.Data.Mapping.ViewGeneration.Validation.BasicCellRelation : CellRelation {
    internal ViewCellRelation ViewCellRelation { get; }
    internal BasicCellRelation(CellQuery cellQuery, ViewCellRelation viewCellRelation, IEnumerable`1<MemberProjectedSlot> slots);
    internal ViewCellRelation get_ViewCellRelation();
    internal void PopulateKeyConstraints(SchemaConstraints`1<BasicKeyConstraint> constraints);
    protected virtual int GetHash();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Validation.BasicKeyConstraint : KeyConstraint`2<BasicCellRelation, MemberProjectedSlot> {
    internal BasicKeyConstraint(BasicCellRelation relation, IEnumerable`1<MemberProjectedSlot> keySlots);
    internal ViewKeyConstraint Propagate();
}
internal abstract class System.Data.Mapping.ViewGeneration.Validation.CellRelation : InternalBase {
    internal int m_cellNumber;
    internal int CellNumber { get; }
    protected CellRelation(int cellNumber);
    internal int get_CellNumber();
    protected abstract virtual int GetHash();
}
internal class System.Data.Mapping.ViewGeneration.Validation.ConditionComparer : object {
    public sealed virtual bool Equals(Dictionary`2<MemberPath, Set`1<Constant>> one, Dictionary`2<MemberPath, Set`1<Constant>> two);
    public sealed virtual int GetHashCode(Dictionary`2<MemberPath, Set`1<Constant>> obj);
}
internal abstract class System.Data.Mapping.ViewGeneration.Validation.ConstraintBase : InternalBase {
    internal abstract virtual Record GetErrorRecord();
}
internal class System.Data.Mapping.ViewGeneration.Validation.ErrorPatternMatcher : object {
    public static bool FindMappingErrors(ViewgenContext context, MemberDomainMap domainMap, ErrorLog errorLog);
}
internal class System.Data.Mapping.ViewGeneration.Validation.ForeignConstraint : InternalBase {
    internal EntitySet ParentTable { get; }
    internal EntitySet ChildTable { get; }
    internal IEnumerable`1<MemberPath> ChildColumns { get; }
    internal IEnumerable`1<MemberPath> ParentColumns { get; }
    internal ForeignConstraint(AssociationSet i_fkeySet, EntitySet i_parentTable, EntitySet i_childTable, ReadOnlyMetadataCollection`1<EdmProperty> i_parentColumns, ReadOnlyMetadataCollection`1<EdmProperty> i_childColumns);
    internal EntitySet get_ParentTable();
    internal EntitySet get_ChildTable();
    internal IEnumerable`1<MemberPath> get_ChildColumns();
    internal IEnumerable`1<MemberPath> get_ParentColumns();
    internal static List`1<ForeignConstraint> GetForeignConstraints(EntityContainer container);
    internal void CheckConstraint(Set`1<Cell> cells, QueryRewriter childRewriter, QueryRewriter parentRewriter, ErrorLog errorLog, ConfigViewGenerator config);
    internal string ToUserString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Validation.KeyConstraint`2 : InternalBase {
    protected TCellRelation CellRelation { get; }
    protected Set`1<TSlot> KeySlots { get; }
    internal KeyConstraint`2(TCellRelation relation, IEnumerable`1<TSlot> keySlots, IEqualityComparer`1<TSlot> comparer);
    protected TCellRelation get_CellRelation();
    protected Set`1<TSlot> get_KeySlots();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Validation.LCWComparer : MulticastDelegate {
    public LCWComparer(object object, IntPtr method);
    public virtual bool Invoke(FragmentQuery query1, FragmentQuery query2);
    public virtual IAsyncResult BeginInvoke(FragmentQuery query1, FragmentQuery query2, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class System.Data.Mapping.ViewGeneration.Validation.RewritingValidator : object {
    internal RewritingValidator(ViewgenContext context, CellTreeNode basicView);
    internal void Validate();
    internal static BoolExpression PropagateCellConstantsToWhereClause(LeftCellWrapper wrapper, BoolExpression expression, Constant constant, MemberPath member, MemberMaps memberMaps);
    internal static void EntityConfigurationToUserString(BoolExpression condition, StringBuilder builder);
    internal static void EntityConfigurationToUserString(BoolExpression condition, StringBuilder builder, bool writeRoundTrippingMessage);
}
internal class System.Data.Mapping.ViewGeneration.Validation.SchemaConstraints`1 : InternalBase {
    internal IEnumerable`1<TKeyConstraint> KeyConstraints { get; }
    internal IEnumerable`1<TKeyConstraint> get_KeyConstraints();
    internal void Add(TKeyConstraint constraint);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Validation.ViewCellRelation : CellRelation {
    internal Cell Cell { get; }
    internal ViewCellRelation(Cell cell, List`1<ViewCellSlot> slots, int cellNumber);
    internal Cell get_Cell();
    internal ViewCellSlot LookupViewSlot(MemberProjectedSlot slot);
    protected virtual int GetHash();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Validation.ViewCellSlot : ProjectedSlot {
    internal MemberProjectedSlot CSlot { get; }
    internal MemberProjectedSlot SSlot { get; }
    internal ViewCellSlot(int slotNum, MemberProjectedSlot cSlot, MemberProjectedSlot sSlot);
    internal MemberProjectedSlot get_CSlot();
    internal MemberProjectedSlot get_SSlot();
    protected virtual bool IsEqualTo(ProjectedSlot right);
    protected virtual int GetHash();
    internal static string SlotsToUserString(IEnumerable`1<ViewCellSlot> slots, bool isFromCside);
    internal static string SlotToUserString(ViewCellSlot slot, bool isFromCside);
    internal virtual string GetCqlFieldAlias(MemberPath outputMember);
    internal virtual StringBuilder AsEsql(StringBuilder builder, MemberPath outputMember, string blockAlias, int indentLevel);
    internal virtual DbExpression AsCqt(DbExpression row, MemberPath outputMember);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.Validation.ViewKeyConstraint : KeyConstraint`2<ViewCellRelation, ViewCellSlot> {
    internal Cell Cell { get; }
    internal ViewKeyConstraint(ViewCellRelation relation, IEnumerable`1<ViewCellSlot> keySlots);
    internal Cell get_Cell();
    internal bool Implies(ViewKeyConstraint second);
    internal static Record GetErrorRecord(ViewKeyConstraint rightKeyConstraint);
    internal static Record GetErrorRecord(IEnumerable`1<ViewKeyConstraint> rightKeyConstraints);
}
internal class System.Data.Mapping.ViewGeneration.ViewgenContext : InternalBase {
    internal ViewTarget ViewTarget { get; }
    internal MemberMaps MemberMaps { get; }
    internal EntitySetBase Extent { get; }
    internal ConfigViewGenerator Config { get; }
    internal CqlIdentifiers CqlIdentifiers { get; }
    internal EdmItemCollection EdmItemCollection { get; }
    internal FragmentQueryProcessor LeftFragmentQP { get; }
    internal FragmentQueryProcessor RightFragmentQP { get; }
    internal List`1<LeftCellWrapper> AllWrappersForExtent { get; }
    internal StorageEntityContainerMapping EntityContainerMapping { get; }
    internal ViewgenContext(ViewTarget viewTarget, EntitySetBase extent, IEnumerable`1<Cell> extentCells, CqlIdentifiers identifiers, ConfigViewGenerator config, MemberDomainMap queryDomainMap, MemberDomainMap updateDomainMap, StorageEntityContainerMapping entityContainerMapping);
    internal ViewTarget get_ViewTarget();
    internal MemberMaps get_MemberMaps();
    internal EntitySetBase get_Extent();
    internal ConfigViewGenerator get_Config();
    internal CqlIdentifiers get_CqlIdentifiers();
    internal EdmItemCollection get_EdmItemCollection();
    internal FragmentQueryProcessor get_LeftFragmentQP();
    internal FragmentQueryProcessor get_RightFragmentQP();
    internal List`1<LeftCellWrapper> get_AllWrappersForExtent();
    internal StorageEntityContainerMapping get_EntityContainerMapping();
    internal bool TryGetCachedRewriting(FragmentQuery query, Tile`1& rewriting);
    internal void SetCachedRewriting(FragmentQuery query, Tile`1<FragmentQuery> rewriting);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal class System.Data.Mapping.ViewGeneration.ViewGenerator : InternalBase {
    internal ViewGenerator(Set`1<Cell> cellGroup, ConfigViewGenerator config, List`1<ForeignConstraint> foreignKeyConstraints, StorageEntityContainerMapping entityContainerMapping);
    internal ErrorLog GenerateAllBidirectionalViews(KeyToListMap`2<EntitySetBase, GeneratedView> views, CqlIdentifiers identifiers);
    internal ErrorLog GenerateQueryViewForSingleExtent(KeyToListMap`2<EntitySetBase, GeneratedView> views, CqlIdentifiers identifiers, EntitySetBase entity, EntityTypeBase type, ViewGenMode mode);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal abstract class System.Data.Mapping.ViewGeneration.ViewgenGatekeeper : InternalBase {
    internal static ViewGenResults GenerateViewsFromMapping(StorageEntityContainerMapping containerMapping, ConfigViewGenerator config);
    internal static ViewGenResults GenerateTypeSpecificQueryView(StorageEntityContainerMapping containerMapping, ConfigViewGenerator config, EntitySetBase entity, EntityTypeBase type, bool includeSubtypes, Boolean& success);
    internal virtual void ToCompactString(StringBuilder builder);
}
internal enum System.Data.Mapping.ViewGeneration.ViewGenMode : Enum {
    public int value__;
    public static ViewGenMode GenerateAllViews;
    public static ViewGenMode OfTypeViews;
    public static ViewGenMode OfTypeOnlyViews;
}
internal class System.Data.Mapping.ViewGeneration.ViewGenResults : InternalBase {
    internal KeyToListMap`2<EntitySetBase, GeneratedView> Views { get; }
    internal IEnumerable`1<EdmSchemaError> Errors { get; }
    internal bool HasErrors { get; }
    internal KeyToListMap`2<EntitySetBase, GeneratedView> get_Views();
    internal IEnumerable`1<EdmSchemaError> get_Errors();
    internal bool get_HasErrors();
    internal void AddErrors(ErrorLog errorLog);
    internal string ErrorsToString();
    internal virtual void ToCompactString(StringBuilder builder);
}
internal enum System.Data.Mapping.ViewGeneration.ViewGenTraceLevel : Enum {
    public int value__;
    public static ViewGenTraceLevel None;
    public static ViewGenTraceLevel ViewsOnly;
    public static ViewGenTraceLevel Normal;
    public static ViewGenTraceLevel Verbose;
}
internal static class System.Data.Mapping.ViewValidator : object {
    internal static IEnumerable`1<EdmSchemaError> ValidateQueryView(DbQueryCommandTree view, StorageSetMapping setMapping, EntityTypeBase elementType, bool includeSubtypes);
}
public class System.Data.MappingException : EntityException {
    public MappingException(string message);
    public MappingException(string message, Exception innerException);
    private MappingException(SerializationInfo info, StreamingContext context);
}
internal class System.Data.Metadata.Edm.AspProxy : object {
    internal bool IsAspNetEnvironment();
    internal string MapWebPath(string path);
    internal bool HasBuildManagerType();
    internal IEnumerable`1<Assembly> GetBuildManagerReferencedAssemblies();
}
internal static class System.Data.Metadata.Edm.AssemblyCache : object {
    internal static IList`1<Assembly> ViewGenerationAssemblies { get; }
    private static AssemblyCache();
    internal static LockedAssemblyCache AquireLockedAssemblyCache();
    internal static void LoadAssembly(Assembly assembly, bool loadReferencedAssemblies, KnownAssembliesSet knownAssemblies, Dictionary`2& typesInLoading, List`1& errors);
    internal static void LoadAssembly(Assembly assembly, bool loadReferencedAssemblies, KnownAssembliesSet knownAssemblies, EdmItemCollection edmItemCollection, Action`1<string> logLoadMessage, Object& loaderCookie, Dictionary`2& typesInLoading, List`1& errors);
    internal static IList`1<Assembly> get_ViewGenerationAssemblies();
}
internal abstract class System.Data.Metadata.Edm.AssemblyCacheEntry : object {
    internal IList`1<EdmType> TypesInAssembly { get; }
    internal IList`1<Assembly> ClosureAssemblies { get; }
    internal abstract virtual IList`1<EdmType> get_TypesInAssembly();
    internal abstract virtual IList`1<Assembly> get_ClosureAssemblies();
    internal bool TryGetEdmType(string typeName, EdmType& edmType);
    internal bool ContainsType(string typeName);
}
public class System.Data.Metadata.Edm.AssociationEndMember : RelationshipEndMember {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal Func`3<RelationshipManager, RelatedEnd, RelatedEnd> GetRelatedEnd { get; internal set; }
    internal AssociationEndMember(string name, RefType endRefType, RelationshipMultiplicity multiplicity);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal Func`3<RelationshipManager, RelatedEnd, RelatedEnd> get_GetRelatedEnd();
    internal void set_GetRelatedEnd(Func`3<RelationshipManager, RelatedEnd, RelatedEnd> value);
}
public class System.Data.Metadata.Edm.AssociationSet : RelationshipSet {
    public AssociationType ElementType { get; }
    [MetadataPropertyAttribute("1", "True")]
public ReadOnlyMetadataCollection`1<AssociationSetEnd> AssociationSetEnds { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal AssociationSet(string name, AssociationType associationType);
    public AssociationType get_ElementType();
    public ReadOnlyMetadataCollection`1<AssociationSetEnd> get_AssociationSetEnds();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual void SetReadOnly();
    internal void AddAssociationSetEnd(AssociationSetEnd associationSetEnd);
}
public class System.Data.Metadata.Edm.AssociationSetEnd : MetadataItem {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("2", "False")]
public AssociationSet ParentAssociationSet { get; }
    [MetadataPropertyAttribute("0", "False")]
public AssociationEndMember CorrespondingAssociationEndMember { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    [ObsoleteAttribute("This property is going away, please use the Name property instead")]
[MetadataPropertyAttribute("12", "False")]
public string Role { get; }
    [MetadataPropertyAttribute("13", "False")]
public EntitySet EntitySet { get; }
    internal string Identity { get; }
    internal AssociationSetEnd(EntitySet entitySet, AssociationSet parentSet, AssociationEndMember endMember);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public AssociationSet get_ParentAssociationSet();
    public AssociationEndMember get_CorrespondingAssociationEndMember();
    public string get_Name();
    public string get_Role();
    public EntitySet get_EntitySet();
    internal virtual string get_Identity();
    public virtual string ToString();
    internal virtual void SetReadOnly();
}
public class System.Data.Metadata.Edm.AssociationType : RelationshipType {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public ReadOnlyMetadataCollection`1<AssociationEndMember> AssociationEndMembers { get; }
    [MetadataPropertyAttribute("30", "True")]
public ReadOnlyMetadataCollection`1<ReferentialConstraint> ReferentialConstraints { get; }
    [MetadataPropertyAttribute("1", "False")]
public bool IsForeignKey { get; }
    internal AssociationType(string name, string namespaceName, bool foreignKey, DataSpace dataSpace);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public ReadOnlyMetadataCollection`1<AssociationEndMember> get_AssociationEndMembers();
    public ReadOnlyMetadataCollection`1<ReferentialConstraint> get_ReferentialConstraints();
    public bool get_IsForeignKey();
    internal virtual void ValidateMemberForAdd(EdmMember member);
    internal virtual void SetReadOnly();
    internal void AddReferentialConstraint(ReferentialConstraint referentialConstraint);
}
public enum System.Data.Metadata.Edm.BuiltInTypeKind : Enum {
    public int value__;
    public static BuiltInTypeKind AssociationEndMember;
    public static BuiltInTypeKind AssociationSetEnd;
    public static BuiltInTypeKind AssociationSet;
    public static BuiltInTypeKind AssociationType;
    public static BuiltInTypeKind EntitySetBase;
    public static BuiltInTypeKind EntityTypeBase;
    public static BuiltInTypeKind CollectionType;
    public static BuiltInTypeKind CollectionKind;
    public static BuiltInTypeKind ComplexType;
    public static BuiltInTypeKind Documentation;
    public static BuiltInTypeKind OperationAction;
    public static BuiltInTypeKind EdmType;
    public static BuiltInTypeKind EntityContainer;
    public static BuiltInTypeKind EntitySet;
    public static BuiltInTypeKind EntityType;
    public static BuiltInTypeKind EnumType;
    public static BuiltInTypeKind EnumMember;
    public static BuiltInTypeKind Facet;
    public static BuiltInTypeKind EdmFunction;
    public static BuiltInTypeKind FunctionParameter;
    public static BuiltInTypeKind GlobalItem;
    public static BuiltInTypeKind MetadataProperty;
    public static BuiltInTypeKind NavigationProperty;
    public static BuiltInTypeKind MetadataItem;
    public static BuiltInTypeKind EdmMember;
    public static BuiltInTypeKind ParameterMode;
    public static BuiltInTypeKind PrimitiveType;
    public static BuiltInTypeKind PrimitiveTypeKind;
    public static BuiltInTypeKind EdmProperty;
    public static BuiltInTypeKind ProviderManifest;
    public static BuiltInTypeKind ReferentialConstraint;
    public static BuiltInTypeKind RefType;
    public static BuiltInTypeKind RelationshipEndMember;
    public static BuiltInTypeKind RelationshipMultiplicity;
    public static BuiltInTypeKind RelationshipSet;
    public static BuiltInTypeKind RelationshipType;
    public static BuiltInTypeKind RowType;
    public static BuiltInTypeKind SimpleType;
    public static BuiltInTypeKind StructuralType;
    public static BuiltInTypeKind TypeUsage;
}
internal class System.Data.Metadata.Edm.CacheForPrimitiveTypes : object {
    internal void Add(PrimitiveType type);
    internal bool TryGetType(PrimitiveTypeKind primitiveTypeKind, IEnumerable`1<Facet> facets, PrimitiveType& type);
    internal ReadOnlyCollection`1<PrimitiveType> GetTypes();
}
internal class System.Data.Metadata.Edm.ClrComplexType : ComplexType {
    internal Delegate Constructor { get; internal set; }
    internal Type ClrType { get; }
    internal string CSpaceTypeName { get; }
    internal ClrComplexType(Type clrType, string cspaceNamespaceName, string cspaceTypeName);
    internal static ClrComplexType CreateReadonlyClrComplexType(Type clrType, string cspaceNamespaceName, string cspaceTypeName);
    internal Delegate get_Constructor();
    internal void set_Constructor(Delegate value);
    internal virtual Type get_ClrType();
    internal string get_CSpaceTypeName();
}
internal class System.Data.Metadata.Edm.ClrEntityType : EntityType {
    internal Delegate Constructor { get; internal set; }
    internal Type ClrType { get; }
    internal string CSpaceTypeName { get; }
    internal string CSpaceNamespaceName { get; }
    internal string HashedDescription { get; }
    internal ClrEntityType(Type type, string cspaceNamespaceName, string cspaceTypeName);
    internal Delegate get_Constructor();
    internal void set_Constructor(Delegate value);
    internal virtual Type get_ClrType();
    internal string get_CSpaceTypeName();
    internal string get_CSpaceNamespaceName();
    internal string get_HashedDescription();
}
internal class System.Data.Metadata.Edm.ClrEnumType : EnumType {
    internal Type ClrType { get; }
    internal string CSpaceTypeName { get; }
    internal ClrEnumType(Type clrType, string cspaceNamespaceName, string cspaceTypeName);
    internal virtual Type get_ClrType();
    internal string get_CSpaceTypeName();
}
internal class System.Data.Metadata.Edm.ClrPerspective : Perspective {
    internal ClrPerspective(MetadataWorkspace metadataWorkspace);
    internal bool TryGetType(Type clrType, TypeUsage& outTypeUsage);
    internal virtual bool TryGetMember(StructuralType type, string memberName, bool ignoreCase, EdmMember& outMember);
    internal virtual bool TryGetTypeByName(string fullName, bool ignoreCase, TypeUsage& typeUsage);
    internal virtual EntityContainer GetDefaultContainer();
    internal void SetDefaultContainer(string defaultContainerName);
}
internal class System.Data.Metadata.Edm.ClrProviderManifest : DbProviderManifest {
    internal static ClrProviderManifest Instance { get; }
    public string NamespaceName { get; }
    private static ClrProviderManifest();
    internal static ClrProviderManifest get_Instance();
    public virtual string get_NamespaceName();
    internal bool TryGetPrimitiveType(Type clrType, PrimitiveType& primitiveType);
    internal bool TryGetPrimitiveTypeKind(Type clrType, PrimitiveTypeKind& resolvedPrimitiveTypeKind);
    public virtual ReadOnlyCollection`1<EdmFunction> GetStoreFunctions();
    public virtual ReadOnlyCollection`1<FacetDescription> GetFacetDescriptions(EdmType type);
    public virtual ReadOnlyCollection`1<PrimitiveType> GetStoreTypes();
    public virtual TypeUsage GetEdmType(TypeUsage storeType);
    public virtual TypeUsage GetStoreType(TypeUsage edmType);
    protected virtual XmlReader GetDbInformation(string informationType);
}
public enum System.Data.Metadata.Edm.CollectionKind : Enum {
    public int value__;
    public static CollectionKind None;
    public static CollectionKind Bag;
    public static CollectionKind List;
}
public class System.Data.Metadata.Edm.CollectionType : EdmType {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("39", "False")]
public TypeUsage TypeUsage { get; }
    internal CollectionType(EdmType elementType);
    internal CollectionType(TypeUsage elementType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public TypeUsage get_TypeUsage();
    internal virtual bool EdmEquals(MetadataItem item);
}
public class System.Data.Metadata.Edm.ComplexType : StructuralType {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public ReadOnlyMetadataCollection`1<EdmProperty> Properties { get; }
    internal ComplexType(string name, string namespaceName, DataSpace dataSpace);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public ReadOnlyMetadataCollection`1<EdmProperty> get_Properties();
    internal virtual void ValidateMemberForAdd(EdmMember member);
}
public enum System.Data.Metadata.Edm.ConcurrencyMode : Enum {
    public int value__;
    public static ConcurrencyMode None;
    public static ConcurrencyMode Fixed;
}
internal static class System.Data.Metadata.Edm.Converter : object {
    internal static FacetDescription ConcurrencyModeFacet;
    internal static FacetDescription StoreGeneratedPatternFacet;
    internal static FacetDescription CollationFacet;
    private static Converter();
    internal static IEnumerable`1<GlobalItem> ConvertSchema(Schema somSchema, DbProviderManifest providerManifest, ItemCollection itemCollection);
    internal static IEnumerable`1<GlobalItem> ConvertSchema(IList`1<Schema> somSchemas, DbProviderManifest providerManifest, ItemCollection itemCollection);
    internal static MetadataItem LoadSchemaElement(SchemaType element, DbProviderManifest providerManifest, ConversionCache convertedItemCache, Dictionary`2<SchemaElement, GlobalItem> newGlobalItems);
}
internal class System.Data.Metadata.Edm.CustomAssemblyResolver : MetadataArtifactAssemblyResolver {
    internal CustomAssemblyResolver(Func`1<IEnumerable`1<Assembly>> wildcardAssemblyEnumerator, Func`2<AssemblyName, Assembly> referenceResolver);
    internal virtual bool TryResolveAssemblyReference(AssemblyName refernceName, Assembly& assembly);
    internal virtual IEnumerable`1<Assembly> GetWildcardAssemblies();
}
public enum System.Data.Metadata.Edm.DataSpace : Enum {
    public int value__;
    public static DataSpace OSpace;
    public static DataSpace CSpace;
    public static DataSpace SSpace;
    public static DataSpace OCSpace;
    public static DataSpace CSSpace;
}
internal class System.Data.Metadata.Edm.DefaultAssemblyResolver : MetadataArtifactAssemblyResolver {
    internal virtual bool TryResolveAssemblyReference(AssemblyName refernceName, Assembly& assembly);
    internal virtual IEnumerable`1<Assembly> GetWildcardAssemblies();
    internal Assembly ResolveAssembly(AssemblyName referenceName);
}
public class System.Data.Metadata.Edm.Documentation : MetadataItem {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public string Summary { get; internal set; }
    public string LongDescription { get; internal set; }
    internal string Identity { get; }
    public bool IsEmpty { get; }
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public string get_Summary();
    internal void set_Summary(string value);
    public string get_LongDescription();
    internal void set_LongDescription(string value);
    internal virtual string get_Identity();
    public bool get_IsEmpty();
    public virtual string ToString();
}
internal static class System.Data.Metadata.Edm.EdmConstants : object {
    internal static string EdmNamespace;
    internal static string ClrPrimitiveTypeNamespace;
    internal static string TransientNamespace;
    internal static int NumPrimitiveTypes;
    internal static int NumBuiltInTypes;
    internal static int MaxLength;
    internal static string AssociationEnd;
    internal static string AssociationSetType;
    internal static string AssociationSetEndType;
    internal static string AssociationType;
    internal static string BaseEntitySetType;
    internal static string CollectionType;
    internal static string ComplexType;
    internal static string DeleteAction;
    internal static string DeleteBehavior;
    internal static string Documentation;
    internal static string EdmType;
    internal static string ElementType;
    internal static string EntityContainerType;
    internal static string EntitySetType;
    internal static string EntityType;
    internal static string EnumerationMember;
    internal static string EnumerationType;
    internal static string Facet;
    internal static string Function;
    internal static string FunctionParameter;
    internal static string GlobalItem;
    internal static string ItemAttribute;
    internal static string ItemType;
    internal static string Member;
    internal static string NavigationProperty;
    internal static string OperationBehavior;
    internal static string OperationBehaviors;
    internal static string ParameterMode;
    internal static string PrimitiveType;
    internal static string PrimitiveTypeKind;
    internal static string Property;
    internal static string ProviderManifest;
    internal static string ReferentialConstraint;
    internal static string RefType;
    internal static string RelationshipEnd;
    internal static string RelationshipMultiplicity;
    internal static string RelationshipSet;
    internal static string RelationshipType;
    internal static string ReturnParameter;
    internal static string Role;
    internal static string RowType;
    internal static string SimpleType;
    internal static string StructuralType;
    internal static string TypeUsage;
    internal static string Utc;
    internal static string Unspecified;
    internal static string Local;
    internal static string One;
    internal static string ZeroToOne;
    internal static string Many;
    internal static string In;
    internal static string Out;
    internal static string InOut;
    internal static string None;
    internal static string Cascade;
    internal static string Restrict;
    internal static string NoneCollectionKind;
    internal static string ListCollectionKind;
    internal static string BagCollectionKind;
    internal static string MaxMaxLength;
    internal static string VariableSrid;
    internal static string AssociationSetEnds;
    internal static string Child;
    internal static string DefaultValue;
    internal static string Ends;
    internal static string EntitySet;
    internal static string AssociationSet;
    internal static string EntitySets;
    internal static string Facets;
    internal static string FromProperties;
    internal static string FromRole;
    internal static string IsParent;
    internal static string KeyMembers;
    internal static string Members;
    internal static string Mode;
    internal static string Nullable;
    internal static string Parameters;
    internal static string Parent;
    internal static string Properties;
    internal static string ToProperties;
    internal static string ToRole;
    internal static string ReferentialConstraints;
    internal static string RelationshipTypeName;
    internal static string ReturnType;
    internal static string ToEndMemberName;
    internal static string CollectionKind;
    internal static string Binary;
    internal static string Boolean;
    internal static string Byte;
    internal static string DateTime;
    internal static string Decimal;
    internal static string Double;
    internal static string Geometry;
    internal static string GeometryPoint;
    internal static string GeometryLineString;
    internal static string GeometryPolygon;
    internal static string GeometryMultiPoint;
    internal static string GeometryMultiLineString;
    internal static string GeometryMultiPolygon;
    internal static string GeometryCollection;
    internal static string Geography;
    internal static string GeographyPoint;
    internal static string GeographyLineString;
    internal static string GeographyPolygon;
    internal static string GeographyMultiPoint;
    internal static string GeographyMultiLineString;
    internal static string GeographyMultiPolygon;
    internal static string GeographyCollection;
    internal static string Guid;
    internal static string Single;
    internal static string SByte;
    internal static string Int16;
    internal static string Int32;
    internal static string Int64;
    internal static string Money;
    internal static string Null;
    internal static string String;
    internal static string DateTimeOffset;
    internal static string Time;
    internal static string UInt16;
    internal static string UInt32;
    internal static string UInt64;
    internal static string Xml;
    internal static string Name;
    internal static string Namespace;
    internal static string Abstract;
    internal static string BaseType;
    internal static string Sealed;
    internal static string ItemAttributes;
    internal static string Type;
    internal static string Schema;
    internal static string Table;
    internal static string FacetType;
    internal static string Value;
    internal static string EnumMembers;
    internal static string BuiltInAttribute;
    internal static string StoreFunctionNamespace;
    internal static string ParameterTypeSemanticsAttribute;
    internal static string ParameterTypeSemantics;
    internal static string NiladicFunctionAttribute;
    internal static string IsComposableFunctionAttribute;
    internal static string CommandTextFunctionAttribyte;
    internal static string StoreFunctionNameAttribute;
    internal static string WebHomeSymbol;
    internal static string Summary;
    internal static string LongDescription;
    internal static Unbounded UnboundedValue;
    internal static Variable VariableValue;
    private static EdmConstants();
}
public abstract class System.Data.Metadata.Edm.EdmError : object {
    public string Message { get; }
    internal EdmError(string message);
    public string get_Message();
}
public class System.Data.Metadata.Edm.EdmFunction : EdmType {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public string FullName { get; }
    public ReadOnlyMetadataCollection`1<FunctionParameter> Parameters { get; }
    internal bool HasUserDefinedBody { get; }
    [MetadataPropertyAttribute("13", "False")]
internal EntitySet EntitySet { get; }
    [MetadataPropertyAttribute("13", "True")]
internal ReadOnlyMetadataCollection`1<EntitySet> EntitySets { get; }
    [MetadataPropertyAttribute("19", "False")]
public FunctionParameter ReturnParameter { get; }
    [MetadataPropertyAttribute("19", "True")]
public ReadOnlyMetadataCollection`1<FunctionParameter> ReturnParameters { get; }
    [MetadataPropertyAttribute("12", "False")]
internal string StoreFunctionNameAttribute { get; }
    [MetadataPropertyAttribute("System.Data.Metadata.Edm.ParameterTypeSemantics", "False")]
internal ParameterTypeSemantics ParameterTypeSemanticsAttribute { get; }
    [MetadataPropertyAttribute("1", "False")]
internal bool AggregateAttribute { get; }
    [MetadataPropertyAttribute("1", "False")]
internal bool BuiltInAttribute { get; }
    [MetadataPropertyAttribute("1", "False")]
internal bool IsFromProviderManifest { get; }
    [MetadataPropertyAttribute("1", "False")]
internal bool NiladicFunctionAttribute { get; }
    [MetadataPropertyAttribute("1", "False")]
public bool IsComposableAttribute { get; }
    [MetadataPropertyAttribute("12", "False")]
public string CommandTextAttribute { get; }
    internal bool IsCachedStoreFunction { get; }
    internal bool IsModelDefinedFunction { get; }
    internal bool IsFunctionImport { get; }
    [MetadataPropertyAttribute("12", "False")]
internal string Schema { get; }
    internal EdmFunction(string name, string namespaceName, DataSpace dataSpace, EdmFunctionPayload payload);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public virtual string get_FullName();
    public ReadOnlyMetadataCollection`1<FunctionParameter> get_Parameters();
    internal bool get_HasUserDefinedBody();
    internal EntitySet get_EntitySet();
    internal ReadOnlyMetadataCollection`1<EntitySet> get_EntitySets();
    public FunctionParameter get_ReturnParameter();
    public ReadOnlyMetadataCollection`1<FunctionParameter> get_ReturnParameters();
    internal string get_StoreFunctionNameAttribute();
    internal ParameterTypeSemantics get_ParameterTypeSemanticsAttribute();
    internal bool get_AggregateAttribute();
    internal bool get_BuiltInAttribute();
    internal bool get_IsFromProviderManifest();
    internal bool get_NiladicFunctionAttribute();
    public bool get_IsComposableAttribute();
    public string get_CommandTextAttribute();
    internal bool get_IsCachedStoreFunction();
    internal bool get_IsModelDefinedFunction();
    internal bool get_IsFunctionImport();
    internal string get_Schema();
    internal virtual void SetReadOnly();
    internal virtual void BuildIdentity(StringBuilder builder);
    internal static string BuildIdentity(string functionName, IEnumerable`1<TypeUsage> functionParameters);
    internal static void BuildIdentity(StringBuilder builder, string functionName, IEnumerable`1<TParameterMetadata> functionParameters, Func`2<TParameterMetadata, TypeUsage> getParameterTypeUsage, Func`2<TParameterMetadata, ParameterMode> getParameterMode);
}
internal class System.Data.Metadata.Edm.EdmFunctionPayload : ValueType {
    public string Name;
    public string NamespaceName;
    public string Schema;
    public string StoreFunctionName;
    public string CommandText;
    public EntitySet[] EntitySets;
    public Nullable`1<bool> IsAggregate;
    public Nullable`1<bool> IsBuiltIn;
    public Nullable`1<bool> IsNiladic;
    public Nullable`1<bool> IsComposable;
    public Nullable`1<bool> IsFromProviderManifest;
    public Nullable`1<bool> IsCachedStoreFunction;
    public Nullable`1<bool> IsFunctionImport;
    public FunctionParameter[] ReturnParameters;
    public Nullable`1<ParameterTypeSemantics> ParameterTypeSemantics;
    public FunctionParameter[] Parameters;
    public DataSpace DataSpace;
}
[CLSCompliantAttribute("False")]
public class System.Data.Metadata.Edm.EdmItemCollection : ItemCollection {
    public double EdmVersion { get; internal set; }
    internal OcAssemblyCache ConventionalOcCache { get; }
    internal EdmItemCollection(IEnumerable`1<XmlReader> xmlReaders, ReadOnlyCollection`1<string> filePaths, IList`1& errors);
    internal EdmItemCollection(IList`1<Schema> schemas);
    internal EdmItemCollection(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> filePaths);
    public EdmItemCollection(IEnumerable`1<XmlReader> xmlReaders);
    public EdmItemCollection(String[] filePaths);
    public double get_EdmVersion();
    internal void set_EdmVersion(double value);
    internal OcAssemblyCache get_ConventionalOcCache();
    internal InitializerMetadata GetCanonicalInitializerMetadata(InitializerMetadata metadata);
    internal static bool IsSystemNamespace(DbProviderManifest manifest, string namespaceName);
    internal static IList`1<EdmSchemaError> LoadItems(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> sourceFilePaths, SchemaDataModelOption dataModelOption, DbProviderManifest providerManifest, ItemCollection itemCollection, bool throwOnError);
    internal static List`1<EdmSchemaError> LoadItems(DbProviderManifest manifest, IList`1<Schema> somSchemas, ItemCollection itemCollection);
    internal static IEnumerable`1<GlobalItem> LoadSomSchema(IList`1<Schema> somSchemas, DbProviderManifest providerManifest, ItemCollection itemCollection);
    public ReadOnlyCollection`1<PrimitiveType> GetPrimitiveTypes();
    public ReadOnlyCollection`1<PrimitiveType> GetPrimitiveTypes(double edmVersion);
    internal virtual PrimitiveType GetMappedPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
    internal DbLambda GetGeneratedFunctionDefinition(EdmFunction function);
    internal DbLambda GenerateFunctionDefinition(EdmFunction function);
}
internal class System.Data.Metadata.Edm.EdmItemError : EdmError {
    public EdmItemError(string message, MetadataItem item);
}
public abstract class System.Data.Metadata.Edm.EdmMember : MetadataItem {
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    public StructuralType DeclaringType { get; }
    [MetadataPropertyAttribute("39", "False")]
public TypeUsage TypeUsage { get; }
    internal bool IsStoreGeneratedComputed { get; }
    internal bool IsStoreGeneratedIdentity { get; }
    internal EdmMember(string name, TypeUsage memberTypeUsage);
    internal virtual string get_Identity();
    public string get_Name();
    public StructuralType get_DeclaringType();
    public TypeUsage get_TypeUsage();
    public virtual string ToString();
    internal virtual void SetReadOnly();
    internal void ChangeDeclaringTypeWithoutCollectionFixup(StructuralType newDeclaringType);
    internal bool get_IsStoreGeneratedComputed();
    internal bool get_IsStoreGeneratedIdentity();
}
public class System.Data.Metadata.Edm.EdmProperty : EdmMember {
    internal RuntimeMethodHandle PropertyGetterHandle;
    internal RuntimeMethodHandle PropertySetterHandle;
    internal RuntimeTypeHandle EntityDeclaringType;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public bool Nullable { get; }
    public object DefaultValue { get; }
    internal Func`2<object, object> ValueGetter { get; internal set; }
    internal Action`2<object, object> ValueSetter { get; internal set; }
    internal EdmProperty(string name, TypeUsage typeUsage);
    internal EdmProperty(string name, TypeUsage typeUsage, PropertyInfo propertyInfo, RuntimeTypeHandle entityDeclaringType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public bool get_Nullable();
    public object get_DefaultValue();
    internal Func`2<object, object> get_ValueGetter();
    internal void set_ValueGetter(Func`2<object, object> value);
    internal Action`2<object, object> get_ValueSetter();
    internal void set_ValueSetter(Action`2<object, object> value);
}
internal class System.Data.Metadata.Edm.EdmProviderManifest : DbProviderManifest {
    internal static string ConcurrencyModeFacetName;
    internal static string StoreGeneratedPatternFacetName;
    internal static byte MaximumDecimalPrecision;
    internal static byte MaximumDateTimePrecision;
    internal static EdmProviderManifest Instance { get; }
    public string NamespaceName { get; }
    internal string Token { get; }
    private static EdmProviderManifest();
    internal static EdmProviderManifest get_Instance();
    public virtual string get_NamespaceName();
    internal string get_Token();
    public virtual ReadOnlyCollection`1<EdmFunction> GetStoreFunctions();
    public virtual ReadOnlyCollection`1<FacetDescription> GetFacetDescriptions(EdmType type);
    public PrimitiveType GetPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
    internal static FacetDescription[] GetInitialFacetDescriptions(PrimitiveTypeKind primitiveTypeKind);
    internal ReadOnlyCollection`1<PrimitiveType> GetPromotionTypes(PrimitiveType primitiveType);
    internal TypeUsage GetCanonicalModelTypeUsage(PrimitiveTypeKind primitiveTypeKind);
    public virtual ReadOnlyCollection`1<PrimitiveType> GetStoreTypes();
    public virtual TypeUsage GetEdmType(TypeUsage storeType);
    public virtual TypeUsage GetStoreType(TypeUsage edmType);
    internal TypeUsage ForgetScalarConstraints(TypeUsage type);
    protected virtual XmlReader GetDbInformation(string informationType);
}
internal class System.Data.Metadata.Edm.EdmProviderManifestFunctionBuilder : object {
    internal EdmProviderManifestFunctionBuilder(ReadOnlyCollection`1<PrimitiveType> edmPrimitiveTypes);
    internal ReadOnlyCollection`1<EdmFunction> ToFunctionCollection();
    internal void ForAllTypes(Action`1<PrimitiveTypeKind> forEachType);
    internal void ForAllBasePrimitiveTypes(Action`1<PrimitiveTypeKind> forEachType);
    internal void ForTypes(IEnumerable`1<PrimitiveTypeKind> typeKinds, Action`1<PrimitiveTypeKind> forEachType);
    internal void AddAggregate(string aggregateFunctionName, PrimitiveTypeKind collectionArgumentElementTypeKind);
    internal void AddAggregate(PrimitiveTypeKind returnTypeKind, string aggregateFunctionName, PrimitiveTypeKind collectionArgumentElementTypeKind);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName, PrimitiveTypeKind argumentTypeKind, string argumentName);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName, PrimitiveTypeKind argument1TypeKind, string argument1Name, PrimitiveTypeKind argument2TypeKind, string argument2Name);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName, PrimitiveTypeKind argument1TypeKind, string argument1Name, PrimitiveTypeKind argument2TypeKind, string argument2Name, PrimitiveTypeKind argument3TypeKind, string argument3Name);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName, PrimitiveTypeKind argument1TypeKind, string argument1Name, PrimitiveTypeKind argument2TypeKind, string argument2Name, PrimitiveTypeKind argument3TypeKind, string argument3Name, PrimitiveTypeKind argument4TypeKind, string argument4Name, PrimitiveTypeKind argument5TypeKind, string argument5Name, PrimitiveTypeKind argument6TypeKind, string argument6Name);
    internal void AddFunction(PrimitiveTypeKind returnType, string functionName, PrimitiveTypeKind argument1TypeKind, string argument1Name, PrimitiveTypeKind argument2TypeKind, string argument2Name, PrimitiveTypeKind argument3TypeKind, string argument3Name, PrimitiveTypeKind argument4TypeKind, string argument4Name, PrimitiveTypeKind argument5TypeKind, string argument5Name, PrimitiveTypeKind argument6TypeKind, string argument6Name, PrimitiveTypeKind argument7TypeKind, string argument7Name);
}
internal static class System.Data.Metadata.Edm.EdmProviderManifestSpatialFunctions : object {
    internal static void AddFunctions(EdmProviderManifestFunctionBuilder functions);
}
public class System.Data.Metadata.Edm.EdmSchemaError : EdmError {
    public int ErrorCode { get; }
    public EdmSchemaErrorSeverity Severity { get; public set; }
    public int Line { get; }
    public int Column { get; }
    public string SchemaLocation { get; }
    public string SchemaName { get; }
    public string StackTrace { get; }
    internal EdmSchemaError(string message, int errorCode, EdmSchemaErrorSeverity severity);
    internal EdmSchemaError(string message, int errorCode, EdmSchemaErrorSeverity severity, Exception exception);
    internal EdmSchemaError(string message, int errorCode, EdmSchemaErrorSeverity severity, string schemaLocation, int line, int column);
    internal EdmSchemaError(string message, int errorCode, EdmSchemaErrorSeverity severity, string schemaLocation, int line, int column, Exception exception);
    public virtual string ToString();
    public int get_ErrorCode();
    public EdmSchemaErrorSeverity get_Severity();
    public void set_Severity(EdmSchemaErrorSeverity value);
    public int get_Line();
    public int get_Column();
    public string get_SchemaLocation();
    public string get_SchemaName();
    public string get_StackTrace();
}
public enum System.Data.Metadata.Edm.EdmSchemaErrorSeverity : Enum {
    public int value__;
    public static EdmSchemaErrorSeverity Warning;
    public static EdmSchemaErrorSeverity Error;
}
public abstract class System.Data.Metadata.Edm.EdmType : GlobalItem {
    internal string CacheIdentity { get; private set; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; internal set; }
    [MetadataPropertyAttribute("12", "False")]
public string NamespaceName { get; internal set; }
    [MetadataPropertyAttribute("1", "False")]
public bool Abstract { get; internal set; }
    [MetadataPropertyAttribute("11", "False")]
public EdmType BaseType { get; internal set; }
    public string FullName { get; }
    internal Type ClrType { get; }
    internal EdmType(string name, string namespaceName, DataSpace dataSpace);
    internal string get_CacheIdentity();
    private void set_CacheIdentity(string value);
    internal virtual string get_Identity();
    public string get_Name();
    internal void set_Name(string value);
    public string get_NamespaceName();
    internal void set_NamespaceName(string value);
    public bool get_Abstract();
    internal void set_Abstract(bool value);
    public EdmType get_BaseType();
    internal void set_BaseType(EdmType value);
    public virtual string get_FullName();
    internal virtual Type get_ClrType();
    internal virtual void BuildIdentity(StringBuilder builder);
    internal static string CreateEdmTypeIdentity(string namespaceName, string name);
    internal static void Initialize(EdmType edmType, string name, string namespaceName, DataSpace dataSpace, bool isAbstract, EdmType baseType);
    public virtual string ToString();
    public CollectionType GetCollectionType();
    internal virtual bool IsSubtypeOf(EdmType otherType);
    internal virtual bool IsBaseTypeOf(EdmType otherType);
    internal virtual bool IsAssignableFrom(EdmType otherType);
    internal virtual void SetReadOnly();
    internal virtual IEnumerable`1<FacetDescription> GetAssociatedFacetDescriptions();
}
internal class System.Data.Metadata.Edm.EdmValidator : object {
    internal bool SkipReadOnlyItems { get; internal set; }
    internal bool get_SkipReadOnlyItems();
    internal void set_SkipReadOnlyItems(bool value);
    public void Validate(IEnumerable`1<T> items, List`1<EdmItemError> ospaceErrors);
    protected virtual void OnValidationError(ValidationErrorEventArgs e);
    protected virtual IEnumerable`1<EdmItemError> CustomValidate(MetadataItem item);
}
public class System.Data.Metadata.Edm.EntityContainer : GlobalItem {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    [MetadataPropertyAttribute("4", "True")]
public ReadOnlyMetadataCollection`1<EntitySetBase> BaseEntitySets { get; }
    [MetadataPropertyAttribute("18", "True")]
public ReadOnlyMetadataCollection`1<EdmFunction> FunctionImports { get; }
    internal EntityContainer(string name, DataSpace dataSpace);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual string get_Identity();
    public string get_Name();
    public ReadOnlyMetadataCollection`1<EntitySetBase> get_BaseEntitySets();
    public ReadOnlyMetadataCollection`1<EdmFunction> get_FunctionImports();
    internal virtual void SetReadOnly();
    public EntitySet GetEntitySetByName(string name, bool ignoreCase);
    public bool TryGetEntitySetByName(string name, bool ignoreCase, EntitySet& entitySet);
    public RelationshipSet GetRelationshipSetByName(string name, bool ignoreCase);
    public bool TryGetRelationshipSetByName(string name, bool ignoreCase, RelationshipSet& relationshipSet);
    public virtual string ToString();
    internal void AddEntitySetBase(EntitySetBase entitySetBase);
    internal void AddFunctionImport(EdmFunction function);
}
public class System.Data.Metadata.Edm.EntitySet : EntitySetBase {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public EntityType ElementType { get; }
    internal ReadOnlyCollection`1<Tuple`2<AssociationSet, ReferentialConstraint>> ForeignKeyDependents { get; }
    internal ReadOnlyCollection`1<Tuple`2<AssociationSet, ReferentialConstraint>> ForeignKeyPrincipals { get; }
    internal bool HasForeignKeyRelationships { get; }
    internal bool HasIndependentRelationships { get; }
    internal EntitySet(string name, string schema, string table, string definingQuery, EntityType entityType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public EntityType get_ElementType();
    internal ReadOnlyCollection`1<Tuple`2<AssociationSet, ReferentialConstraint>> get_ForeignKeyDependents();
    internal ReadOnlyCollection`1<Tuple`2<AssociationSet, ReferentialConstraint>> get_ForeignKeyPrincipals();
    internal bool get_HasForeignKeyRelationships();
    internal bool get_HasIndependentRelationships();
}
public abstract class System.Data.Metadata.Edm.EntitySetBase : MetadataItem {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
internal string DefiningQuery { get; internal set; }
    internal string CachedProviderSql { get; internal set; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    public EntityContainer EntityContainer { get; }
    [MetadataPropertyAttribute("5", "False")]
public EntityTypeBase ElementType { get; internal set; }
    [MetadataPropertyAttribute("12", "False")]
internal string Table { get; }
    [MetadataPropertyAttribute("12", "False")]
internal string Schema { get; }
    internal EntitySetBase(string name, string schema, string table, string definingQuery, EntityTypeBase entityType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual string get_Identity();
    internal string get_DefiningQuery();
    internal void set_DefiningQuery(string value);
    internal string get_CachedProviderSql();
    internal void set_CachedProviderSql(string value);
    public string get_Name();
    public EntityContainer get_EntityContainer();
    public EntityTypeBase get_ElementType();
    internal void set_ElementType(EntityTypeBase value);
    internal string get_Table();
    internal string get_Schema();
    public virtual string ToString();
    internal virtual void SetReadOnly();
    internal void ChangeEntityContainerWithoutCollectionFixup(EntityContainer newEntityContainer);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Metadata.Edm.EntitySetBaseCollection : MetadataCollection`1<EntitySetBase> {
    public EntitySetBase Item { get; public set; }
    public EntitySetBase Item { get; public set; }
    internal EntitySetBaseCollection(EntityContainer entityContainer);
    internal EntitySetBaseCollection(EntityContainer entityContainer, IEnumerable`1<EntitySetBase> items);
    public virtual EntitySetBase get_Item(int index);
    public virtual void set_Item(int index, EntitySetBase value);
    public virtual EntitySetBase get_Item(string identity);
    public virtual void set_Item(string identity, EntitySetBase value);
    public virtual void Add(EntitySetBase item);
}
public class System.Data.Metadata.Edm.EntityType : EntityTypeBase {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public ReadOnlyMetadataCollection`1<NavigationProperty> NavigationProperties { get; }
    public ReadOnlyMetadataCollection`1<EdmProperty> Properties { get; }
    internal EntityType(string name, string namespaceName, DataSpace dataSpace);
    internal EntityType(string name, string namespaceName, DataSpace dataSpace, IEnumerable`1<string> keyMemberNames, IEnumerable`1<EdmMember> members);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual void ValidateMemberForAdd(EdmMember member);
    internal bool TryGetMemberSql(EdmMember member, String& sql);
    internal void SetMemberSql(EdmMember member, string sql);
    public ReadOnlyMetadataCollection`1<NavigationProperty> get_NavigationProperties();
    public ReadOnlyMetadataCollection`1<EdmProperty> get_Properties();
    public RefType GetReferenceType();
    internal RowType GetKeyRowType(MetadataWorkspace metadataWorkspace);
    internal bool TryGetNavigationProperty(string relationshipType, string fromName, string toName, NavigationProperty& navigationProperty);
}
public abstract class System.Data.Metadata.Edm.EntityTypeBase : StructuralType {
    [MetadataPropertyAttribute("24", "True")]
public ReadOnlyMetadataCollection`1<EdmMember> KeyMembers { get; }
    internal String[] KeyMemberNames { get; }
    internal EntityTypeBase(string name, string namespaceName, DataSpace dataSpace);
    public ReadOnlyMetadataCollection`1<EdmMember> get_KeyMembers();
    internal String[] get_KeyMemberNames();
    internal void AddKeyMember(EdmMember member);
    internal virtual void SetReadOnly();
    internal static void CheckAndAddMembers(IEnumerable`1<EdmMember> members, EntityType entityType);
    internal void CheckAndAddKeyMembers(IEnumerable`1<string> keyMembers);
}
public class System.Data.Metadata.Edm.EnumMember : MetadataItem {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    [MetadataPropertyAttribute("26", "False")]
public object Value { get; }
    internal string Identity { get; }
    internal EnumMember(string name, object value);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public string get_Name();
    public object get_Value();
    internal virtual string get_Identity();
    public virtual string ToString();
}
public class System.Data.Metadata.Edm.EnumType : SimpleType {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("16", "True")]
public ReadOnlyMetadataCollection`1<EnumMember> Members { get; }
    [MetadataPropertyAttribute("1", "False")]
public bool IsFlags { get; }
    [MetadataPropertyAttribute("26", "False")]
public PrimitiveType UnderlyingType { get; }
    internal EnumType(string name, string namespaceName, PrimitiveType underlyingType, bool isFlags, DataSpace dataSpace);
    internal EnumType(Type clrType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public ReadOnlyMetadataCollection`1<EnumMember> get_Members();
    public bool get_IsFlags();
    public PrimitiveType get_UnderlyingType();
    internal virtual void SetReadOnly();
    internal void AddMember(EnumMember enumMember);
}
[DebuggerDisplayAttribute("{Name,nq}={Value}")]
public class System.Data.Metadata.Edm.Facet : MetadataItem {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public FacetDescription Description { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    [MetadataPropertyAttribute("11", "False")]
public EdmType FacetType { get; }
    [MetadataPropertyAttribute("System.Object", "False")]
public object Value { get; }
    internal string Identity { get; }
    public bool IsUnbounded { get; }
    internal static Facet Create(FacetDescription facetDescription, object value);
    internal static Facet Create(FacetDescription facetDescription, object value, bool bypassKnownValues);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public FacetDescription get_Description();
    public string get_Name();
    public EdmType get_FacetType();
    public object get_Value();
    internal virtual string get_Identity();
    public bool get_IsUnbounded();
    public virtual string ToString();
}
public class System.Data.Metadata.Edm.FacetDescription : object {
    public string FacetName { get; }
    public EdmType FacetType { get; }
    public Nullable`1<int> MinValue { get; }
    public Nullable`1<int> MaxValue { get; }
    public object DefaultValue { get; }
    public bool IsConstant { get; }
    public bool IsRequired { get; }
    internal Facet DefaultValueFacet { get; }
    internal Facet NullValueFacet { get; }
    internal FacetDescription(string facetName, EdmType facetType, Nullable`1<int> minValue, Nullable`1<int> maxValue, object defaultValue, bool isConstant, string declaringTypeName);
    internal FacetDescription(string facetName, EdmType facetType, Nullable`1<int> minValue, Nullable`1<int> maxValue, object defaultValue);
    private static FacetDescription();
    public string get_FacetName();
    public EdmType get_FacetType();
    public Nullable`1<int> get_MinValue();
    public Nullable`1<int> get_MaxValue();
    public object get_DefaultValue();
    public bool get_IsConstant();
    public bool get_IsRequired();
    internal Facet get_DefaultValueFacet();
    internal Facet get_NullValueFacet();
    public virtual string ToString();
    internal Facet GetBooleanFacet(bool value);
    internal static bool IsNumericType(EdmType facetType);
}
internal class System.Data.Metadata.Edm.FacetValueContainer`1 : ValueType {
    private T _value;
    private bool _hasValue;
    private bool _isUnbounded;
    unknown T Value {internal set; }
    internal bool HasValue { get; }
    internal void set_Value(T value);
    public static FacetValueContainer`1<T> op_Implicit(Unbounded unbounded);
    public static FacetValueContainer`1<T> op_Implicit(T value);
    internal object GetValueAsObject();
    internal bool get_HasValue();
}
internal class System.Data.Metadata.Edm.FacetValues : object {
    unknown FacetValueContainer`1<Nullable`1<bool>> Nullable {internal set; }
    unknown FacetValueContainer`1<Nullable`1<int>> MaxLength {internal set; }
    unknown FacetValueContainer`1<Nullable`1<bool>> Unicode {internal set; }
    unknown FacetValueContainer`1<Nullable`1<bool>> FixedLength {internal set; }
    unknown FacetValueContainer`1<Nullable`1<byte>> Precision {internal set; }
    unknown FacetValueContainer`1<Nullable`1<byte>> Scale {internal set; }
    internal static FacetValues NullFacetValues { get; }
    internal void set_Nullable(FacetValueContainer`1<Nullable`1<bool>> value);
    internal void set_MaxLength(FacetValueContainer`1<Nullable`1<int>> value);
    internal void set_Unicode(FacetValueContainer`1<Nullable`1<bool>> value);
    internal void set_FixedLength(FacetValueContainer`1<Nullable`1<bool>> value);
    internal void set_Precision(FacetValueContainer`1<Nullable`1<byte>> value);
    internal void set_Scale(FacetValueContainer`1<Nullable`1<byte>> value);
    internal bool TryGetFacet(FacetDescription description, Facet& facet);
    internal static FacetValues get_NullFacetValues();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Metadata.Edm.FilteredReadOnlyMetadataCollection`2 : ReadOnlyMetadataCollection`1<TDerived> {
    public TDerived Item { get; }
    private TBase System.Data.Metadata.Edm.IBaseList<TBase>.Item { get; }
    internal FilteredReadOnlyMetadataCollection`2(ReadOnlyMetadataCollection`1<TBase> collection, Predicate`1<TBase> predicate);
    public virtual TDerived get_Item(string identity);
    public virtual TDerived GetValue(string identity, bool ignoreCase);
    public virtual bool Contains(string identity);
    public virtual bool TryGetValue(string identity, bool ignoreCase, TDerived& item);
    internal static List`1<TDerived> FilterCollection(ReadOnlyMetadataCollection`1<TBase> collection, Predicate`1<TBase> predicate);
    public virtual int IndexOf(TDerived value);
    private sealed virtual override TBase System.Data.Metadata.Edm.IBaseList<TBase>.get_Item(string identity);
    private sealed virtual override TBase System.Data.Metadata.Edm.IBaseList<TBase>.get_Item(int index);
    private sealed virtual override int System.Data.Metadata.Edm.IBaseList<TBase>.IndexOf(TBase item);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
}
public class System.Data.Metadata.Edm.FunctionParameter : MetadataItem {
    internal static Func`2<FunctionParameter, SafeLink`1<EdmFunction>> DeclaringFunctionLinker;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("25", "False")]
public ParameterMode Mode { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    [MetadataPropertyAttribute("39", "False")]
public TypeUsage TypeUsage { get; }
    public EdmFunction DeclaringFunction { get; }
    internal FunctionParameter(string name, TypeUsage typeUsage, ParameterMode parameterMode);
    private static FunctionParameter();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public ParameterMode get_Mode();
    internal virtual string get_Identity();
    public string get_Name();
    public TypeUsage get_TypeUsage();
    public EdmFunction get_DeclaringFunction();
    public virtual string ToString();
    internal virtual void SetReadOnly();
}
public abstract class System.Data.Metadata.Edm.GlobalItem : MetadataItem {
    [MetadataPropertyAttribute("System.Data.Metadata.Edm.DataSpace", "False")]
internal DataSpace DataSpace { get; internal set; }
    internal GlobalItem(MetadataFlags flags);
    internal DataSpace get_DataSpace();
    internal void set_DataSpace(DataSpace value);
}
internal static class System.Data.Metadata.Edm.Helper : object {
    internal static char PeriodSymbol;
    internal static char CommaSymbol;
    internal static ReadOnlyCollection`1<KeyValuePair`2<string, object>> EmptyKeyValueStringObjectList;
    internal static ReadOnlyCollection`1<string> EmptyStringList;
    internal static ReadOnlyCollection`1<FacetDescription> EmptyFacetDescriptionEnumerable;
    internal static ReadOnlyCollection`1<EdmFunction> EmptyEdmFunctionReadOnlyCollection;
    internal static ReadOnlyCollection`1<PrimitiveType> EmptyPrimitiveTypeReadOnlyCollection;
    internal static KeyValuePair`2[] EmptyKeyValueStringObjectArray;
    internal static EdmMember[] EmptyArrayEdmProperty;
    private static Helper();
    internal static string CombineErrorMessage(IEnumerable`1<EdmSchemaError> errors);
    internal static string CombineErrorMessage(IEnumerable`1<EdmItemError> errors);
    internal static IEnumerable`1<KeyValuePair`2<T, S>> PairEnumerations(IBaseList`1<T> left, IEnumerable`1<S> right);
    internal static TypeUsage GetModelTypeUsage(TypeUsage typeUsage);
    internal static TypeUsage GetModelTypeUsage(EdmMember member);
    internal static TypeUsage ValidateAndConvertTypeUsage(EdmProperty edmProperty, EdmProperty columnProperty, IXmlLineInfo lineInfo, string sourceLocation, List`1<EdmSchemaError> parsingErrors, StoreItemCollection storeItemCollection);
    internal static TypeUsage ValidateAndConvertTypeUsage(EdmMember edmMember, IXmlLineInfo lineInfo, string sourceLocation, TypeUsage cspaceType, TypeUsage sspaceType, List`1<EdmSchemaError> parsingErrors, StoreItemCollection storeItemCollection);
    internal static string GetAttributeValue(XPathNavigator nav, string attributeName);
    internal static object GetTypedAttributeValue(XPathNavigator nav, string attributeName, Type clrType);
    internal static FacetDescription GetFacet(IEnumerable`1<FacetDescription> facetCollection, string facetName);
    internal static bool IsAssignableFrom(EdmType firstType, EdmType secondType);
    internal static bool IsSubtypeOf(EdmType firstType, EdmType secondType);
    internal static IList GetAllStructuralMembers(EdmType edmType);
    internal static AssociationEndMember GetEndThatShouldBeMappedToKey(AssociationType associationType);
    internal static string GetCommaDelimitedString(IEnumerable`1<string> stringList);
    internal static IEnumerable`1<T> Concat(IEnumerable`1[] sources);
    internal static void DisposeXmlReaders(IEnumerable`1<XmlReader> xmlReaders);
    internal static bool IsStructuralType(EdmType type);
    internal static bool IsCollectionType(GlobalItem item);
    internal static bool IsEntityType(EdmType type);
    internal static bool IsComplexType(EdmType type);
    internal static bool IsPrimitiveType(EdmType type);
    internal static bool IsRefType(GlobalItem item);
    internal static bool IsRowType(GlobalItem item);
    internal static bool IsAssociationType(EdmType type);
    internal static bool IsRelationshipType(EdmType type);
    internal static bool IsEdmProperty(EdmMember member);
    internal static bool IsRelationshipEndMember(EdmMember member);
    internal static bool IsAssociationEndMember(EdmMember member);
    internal static bool IsNavigationProperty(EdmMember member);
    internal static bool IsEntityTypeBase(EdmType edmType);
    internal static bool IsTransientType(EdmType edmType);
    internal static bool IsEntitySet(EntitySetBase entitySetBase);
    internal static bool IsRelationshipSet(EntitySetBase entitySetBase);
    internal static bool IsEntityContainer(GlobalItem item);
    internal static bool IsEdmFunction(GlobalItem item);
    internal static string GetFileNameFromUri(Uri uri);
    internal static bool IsEnumType(EdmType edmType);
    internal static bool IsUnboundedFacetValue(Facet facet);
    internal static bool IsVariableFacetValue(Facet facet);
    internal static bool IsScalarType(EdmType edmType);
    internal static bool IsSpatialType(PrimitiveType type);
    internal static bool IsSpatialType(EdmType type, Boolean& isGeographic);
    internal static bool IsGeographicType(PrimitiveType type);
    internal static bool AreSameSpatialUnionType(PrimitiveType firstType, PrimitiveType secondType);
    internal static bool IsGeographicTypeKind(PrimitiveTypeKind kind);
    internal static bool IsGeometricType(PrimitiveType type);
    internal static bool IsGeometricTypeKind(PrimitiveTypeKind kind);
    internal static bool IsStrongSpatialTypeKind(PrimitiveTypeKind kind);
    internal static bool IsSpatialType(TypeUsage type);
    internal static bool IsSpatialType(TypeUsage type, PrimitiveTypeKind& spatialType);
    internal static string ToString(ParameterDirection value);
    internal static string ToString(ParameterMode value);
    internal static bool IsSupportedEnumUnderlyingType(PrimitiveTypeKind typeKind);
    internal static bool IsEnumMemberValueInRange(PrimitiveTypeKind underlyingTypeKind, long value);
    internal static PrimitiveType AsPrimitive(EdmType type);
    internal static PrimitiveType GetUnderlyingEdmTypeForEnumType(EdmType type);
    internal static PrimitiveType GetSpatialNormalizedPrimitiveType(EdmType type);
}
[DefaultMemberAttribute("Item")]
internal interface System.Data.Metadata.Edm.IBaseList`1 {
    public T Item { get; }
    public T Item { get; }
    public abstract virtual T get_Item(string identity);
    public abstract virtual T get_Item(int index);
    public abstract virtual int IndexOf(T item);
}
internal class System.Data.Metadata.Edm.ImmutableAssemblyCacheEntry : AssemblyCacheEntry {
    internal IList`1<EdmType> TypesInAssembly { get; }
    internal IList`1<Assembly> ClosureAssemblies { get; }
    internal ImmutableAssemblyCacheEntry(MutableAssemblyCacheEntry mutableEntry);
    internal virtual IList`1<EdmType> get_TypesInAssembly();
    internal virtual IList`1<Assembly> get_ClosureAssemblies();
}
[CLSCompliantAttribute("False")]
public abstract class System.Data.Metadata.Edm.ItemCollection : ReadOnlyMetadataCollection`1<GlobalItem> {
    public DataSpace DataSpace { get; }
    internal Dictionary`2<string, ReadOnlyCollection`1<EdmFunction>> FunctionLookUpTable { get; }
    internal ItemCollection(DataSpace dataspace);
    public DataSpace get_DataSpace();
    internal Dictionary`2<string, ReadOnlyCollection`1<EdmFunction>> get_FunctionLookUpTable();
    internal void AddInternal(GlobalItem item);
    internal bool AtomicAddRange(List`1<GlobalItem> items);
    public T GetItem(string identity);
    public bool TryGetItem(string identity, T& item);
    public bool TryGetItem(string identity, bool ignoreCase, T& item);
    public T GetItem(string identity, bool ignoreCase);
    public virtual ReadOnlyCollection`1<T> GetItems();
    internal ICollection InternalGetItems(Type type);
    public EdmType GetType(string name, string namespaceName);
    public bool TryGetType(string name, string namespaceName, EdmType& type);
    public EdmType GetType(string name, string namespaceName, bool ignoreCase);
    public bool TryGetType(string name, string namespaceName, bool ignoreCase, EdmType& type);
    public ReadOnlyCollection`1<EdmFunction> GetFunctions(string functionName);
    public ReadOnlyCollection`1<EdmFunction> GetFunctions(string functionName, bool ignoreCase);
    protected static ReadOnlyCollection`1<EdmFunction> GetFunctions(Dictionary`2<string, ReadOnlyCollection`1<EdmFunction>> functionCollection, string functionName, bool ignoreCase);
    internal static ReadOnlyCollection`1<EdmFunction> GetCaseSensitiveFunctions(ReadOnlyCollection`1<EdmFunction> functionOverloads, string functionName);
    internal bool TryGetFunction(string functionName, TypeUsage[] parameterTypes, bool ignoreCase, EdmFunction& function);
    public EntityContainer GetEntityContainer(string name);
    public bool TryGetEntityContainer(string name, EntityContainer& entityContainer);
    public EntityContainer GetEntityContainer(string name, bool ignoreCase);
    public bool TryGetEntityContainer(string name, bool ignoreCase, EntityContainer& entityContainer);
    internal virtual PrimitiveType GetMappedPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
    internal virtual bool MetadataEquals(ItemCollection other);
}
internal class System.Data.Metadata.Edm.KnownAssembliesSet : object {
    internal IEnumerable`1<Assembly> Assemblies { get; }
    internal KnownAssembliesSet(KnownAssembliesSet set);
    internal bool TryGetKnownAssembly(Assembly assembly, object loaderCookie, EdmItemCollection itemCollection, KnownAssemblyEntry& entry);
    internal IEnumerable`1<Assembly> get_Assemblies();
    public IEnumerable`1<KnownAssemblyEntry> GetEntries(object loaderCookie, EdmItemCollection itemCollection);
    internal bool Contains(Assembly assembly, object loaderCookie, EdmItemCollection itemCollection);
    internal void Add(Assembly assembly, KnownAssemblyEntry knownAssemblyEntry);
}
internal class System.Data.Metadata.Edm.KnownAssemblyEntry : object {
    internal AssemblyCacheEntry CacheEntry { get; }
    public bool ReferencedAssembliesAreLoaded { get; public set; }
    public bool SeenWithEdmItemCollection { get; public set; }
    internal KnownAssemblyEntry(AssemblyCacheEntry cacheEntry, bool seenWithEdmItemCollection);
    internal AssemblyCacheEntry get_CacheEntry();
    public bool get_ReferencedAssembliesAreLoaded();
    public void set_ReferencedAssembliesAreLoaded(bool value);
    public bool get_SeenWithEdmItemCollection();
    public void set_SeenWithEdmItemCollection(bool value);
    public bool HaveSeenInCompatibleContext(object loaderCookie, EdmItemCollection itemCollection);
}
internal class System.Data.Metadata.Edm.LoadMessageLogger : object {
    internal LoadMessageLogger(Action`1<string> logLoadMessage);
    internal void LogLoadMessage(string message, EdmType relatedType);
    internal string CreateErrorMessageWithTypeSpecificLoadLogs(string errorMessage, EdmType relatedType);
}
internal class System.Data.Metadata.Edm.LockedAssemblyCache : object {
    internal LockedAssemblyCache(object lockObject, Dictionary`2<Assembly, ImmutableAssemblyCacheEntry> globalAssemblyCache);
    public sealed virtual void Dispose();
    internal bool TryGetValue(Assembly assembly, ImmutableAssemblyCacheEntry& cacheEntry);
    internal void Add(Assembly assembly, ImmutableAssemblyCacheEntry assemblyCacheEntry);
    internal void Clear();
}
internal static class System.Data.Metadata.Edm.MappingMetadataHelper : object {
    internal static IEnumerable`1<StorageTypeMapping> GetMappingsForEntitySetAndType(StorageMappingItemCollection mappingCollection, EntityContainer container, EntitySetBase entitySet, EntityTypeBase entityType);
    internal static IEnumerable`1<StorageTypeMapping> GetMappingsForEntitySetAndSuperTypes(StorageMappingItemCollection mappingCollection, EntityContainer container, EntitySetBase entitySet, EntityTypeBase childEntityType);
    internal static IEnumerable`1<StorageEntityTypeModificationFunctionMapping> GetModificationFunctionMappingsForEntitySetAndType(StorageMappingItemCollection mappingCollection, EntityContainer container, EntitySetBase entitySet, EntityTypeBase entityType);
    internal static StorageEntityContainerMapping GetEntityContainerMap(StorageMappingItemCollection mappingCollection, EntityContainer entityContainer);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Metadata.Edm.MemberCollection : MetadataCollection`1<EdmMember> {
    public ReadOnlyCollection`1<EdmMember> AsReadOnly { get; }
    public int Count { get; }
    public EdmMember Item { get; public set; }
    public EdmMember Item { get; public set; }
    public MemberCollection(StructuralType declaringType);
    public MemberCollection(StructuralType declaringType, IEnumerable`1<EdmMember> items);
    public virtual ReadOnlyCollection`1<EdmMember> get_AsReadOnly();
    public virtual int get_Count();
    public virtual EdmMember get_Item(int index);
    public virtual void set_Item(int index, EdmMember value);
    public virtual EdmMember get_Item(string identity);
    public virtual void set_Item(string identity, EdmMember value);
    public virtual void Add(EdmMember member);
    public virtual bool ContainsIdentity(string identity);
    public virtual int IndexOf(EdmMember item);
    public virtual void CopyTo(EdmMember[] array, int arrayIndex);
    public virtual bool TryGetValue(string identity, bool ignoreCase, EdmMember& item);
    public virtual EdmMember GetValue(string identity, bool ignoreCase);
    internal ReadOnlyMetadataCollection`1<T> GetDeclaredOnlyMembers();
}
internal abstract class System.Data.Metadata.Edm.MetadataArtifactAssemblyResolver : object {
    internal abstract virtual bool TryResolveAssemblyReference(AssemblyName refernceName, Assembly& assembly);
    internal abstract virtual IEnumerable`1<Assembly> GetWildcardAssemblies();
}
internal abstract class System.Data.Metadata.Edm.MetadataArtifactLoader : object {
    protected static string resPathPrefix;
    protected static string resPathSeparator;
    protected static string altPathSeparator;
    protected static string wildcard;
    public string Path { get; }
    public bool IsComposite { get; }
    private static MetadataArtifactLoader();
    public abstract virtual string get_Path();
    public abstract virtual void CollectFilePermissionPaths(List`1<string> paths, DataSpace spaceToGet);
    public static MetadataArtifactLoader Create(string path, ExtensionCheck extensionCheck, string validExtension, ICollection`1<string> uriRegistry);
    internal static MetadataArtifactLoader Create(string path, ExtensionCheck extensionCheck, string validExtension, ICollection`1<string> uriRegistry, MetadataArtifactAssemblyResolver resolver);
    public static MetadataArtifactLoader Create(List`1<MetadataArtifactLoader> allCollections);
    public static MetadataArtifactLoader CreateCompositeFromFilePaths(IEnumerable`1<string> filePaths, string validExtension);
    internal static MetadataArtifactLoader CreateCompositeFromFilePaths(IEnumerable`1<string> filePaths, string validExtension, MetadataArtifactAssemblyResolver resolver);
    public static MetadataArtifactLoader CreateCompositeFromXmlReaders(IEnumerable`1<XmlReader> xmlReaders);
    internal static void CheckArtifactExtension(string path, string validExtension);
    public virtual List`1<string> GetOriginalPaths();
    public virtual List`1<string> GetOriginalPaths(DataSpace spaceToGet);
    public virtual bool get_IsComposite();
    public abstract virtual List`1<string> GetPaths();
    public abstract virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public List`1<XmlReader> GetReaders();
    public abstract virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public abstract virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
    internal static bool PathStartsWithResPrefix(string path);
    protected static bool IsCSpaceArtifact(string resource);
    protected static bool IsSSpaceArtifact(string resource);
    protected static bool IsCSSpaceArtifact(string resource);
    internal static bool IsValidArtifact(string resource);
    protected static bool IsArtifactOfDataSpace(string resource, DataSpace dataSpace);
    internal static string NormalizeFilePaths(string path);
}
internal class System.Data.Metadata.Edm.MetadataArtifactLoaderComposite : MetadataArtifactLoader {
    public string Path { get; }
    public bool IsComposite { get; }
    public MetadataArtifactLoaderComposite(List`1<MetadataArtifactLoader> children);
    public virtual string get_Path();
    public virtual void CollectFilePermissionPaths(List`1<string> paths, DataSpace spaceToGet);
    public virtual bool get_IsComposite();
    public virtual List`1<string> GetOriginalPaths();
    public virtual List`1<string> GetOriginalPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
    public sealed virtual IEnumerator`1<MetadataArtifactLoader> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class System.Data.Metadata.Edm.MetadataArtifactLoaderCompositeFile : MetadataArtifactLoader {
    public string Path { get; }
    public bool IsComposite { get; }
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> CsdlChildren { get; }
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> SsdlChildren { get; }
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> MslChildren { get; }
    public MetadataArtifactLoaderCompositeFile(string path, ICollection`1<string> uriRegistry);
    public virtual string get_Path();
    public virtual void CollectFilePermissionPaths(List`1<string> paths, DataSpace spaceToGet);
    public virtual bool get_IsComposite();
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> get_CsdlChildren();
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> get_SsdlChildren();
    internal ReadOnlyCollection`1<MetadataArtifactLoaderFile> get_MslChildren();
    public virtual List`1<string> GetOriginalPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
}
internal class System.Data.Metadata.Edm.MetadataArtifactLoaderCompositeResource : MetadataArtifactLoader {
    public string Path { get; }
    public bool IsComposite { get; }
    internal MetadataArtifactLoaderCompositeResource(string originalPath, string assemblyName, string resourceName, ICollection`1<string> uriRegistry, MetadataArtifactAssemblyResolver resolver);
    public virtual string get_Path();
    public virtual bool get_IsComposite();
    public virtual void CollectFilePermissionPaths(List`1<string> paths, DataSpace spaceToGet);
    public virtual List`1<string> GetOriginalPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
    internal static string CreateResPath(Assembly assembly, string resourceName);
    internal static String[] GetManifestResourceNamesForAssembly(Assembly assembly);
    internal static MetadataArtifactLoader CreateResourceLoader(string path, ExtensionCheck extensionCheck, string validExtension, ICollection`1<string> uriRegistry, MetadataArtifactAssemblyResolver resolver);
}
internal class System.Data.Metadata.Edm.MetadataArtifactLoaderFile : MetadataArtifactLoader {
    public string Path { get; }
    public MetadataArtifactLoaderFile(string path, ICollection`1<string> uriRegistry);
    public virtual string get_Path();
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void CollectFilePermissionPaths(List`1<string> paths, DataSpace spaceToGet);
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
}
internal class System.Data.Metadata.Edm.MetadataArtifactLoaderResource : MetadataArtifactLoader {
    public string Path { get; }
    internal MetadataArtifactLoaderResource(Assembly assembly, string resourceName, ICollection`1<string> uriRegistry);
    public virtual string get_Path();
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void CollectFilePermissionPaths(List`1<string> paths, DataSpace spaceToGet);
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
}
internal class System.Data.Metadata.Edm.MetadataArtifactLoaderXmlReaderWrapper : MetadataArtifactLoader {
    public string Path { get; }
    public MetadataArtifactLoaderXmlReaderWrapper(XmlReader xmlReader);
    public virtual string get_Path();
    public sealed virtual int CompareTo(object obj);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void CollectFilePermissionPaths(List`1<string> paths, DataSpace spaceToGet);
    public virtual List`1<string> GetPaths(DataSpace spaceToGet);
    public virtual List`1<string> GetPaths();
    public virtual List`1<XmlReader> GetReaders(Dictionary`2<MetadataArtifactLoader, XmlReader> sourceDictionary);
    public virtual List`1<XmlReader> CreateReaders(DataSpace spaceToGet);
}
internal static class System.Data.Metadata.Edm.MetadataAssemblyHelper : object {
    private static MetadataAssemblyHelper();
    internal static Assembly SafeLoadReferencedAssembly(AssemblyName assemblyName);
    internal static bool ShouldFilterAssembly(Assembly assembly);
    internal static IEnumerable`1<Assembly> GetNonSystemReferencedAssemblies(Assembly assembly);
}
internal static class System.Data.Metadata.Edm.MetadataCache : object {
    private static MetadataCache();
    internal static List`1<MetadataArtifactLoader> SplitPaths(string paths);
    internal static EdmItemCollection GetOrCreateEdmItemCollection(string cacheKey, MetadataArtifactLoader loader, Object& entryToken);
    internal static StorageMappingItemCollection GetOrCreateStoreAndMappingItemCollections(string cacheKey, MetadataArtifactLoader loader, EdmItemCollection edmItemCollection, Object& entryToken);
    internal static List`1<MetadataArtifactLoader> GetOrCreateMetdataArtifactLoader(string paths);
    internal static void Clear();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Metadata.Edm.MetadataCollection`1 : object {
    public bool IsReadOnly { get; }
    public ReadOnlyCollection`1<T> AsReadOnly { get; }
    public int Count { get; }
    public T Item { get; public set; }
    public T Item { get; public set; }
    internal MetadataCollection`1(IEnumerable`1<T> items);
    public sealed virtual bool get_IsReadOnly();
    public virtual ReadOnlyCollection`1<T> get_AsReadOnly();
    public virtual ReadOnlyMetadataCollection`1<T> AsReadOnlyMetadataCollection();
    public virtual int get_Count();
    public virtual T get_Item(int index);
    public virtual void set_Item(int index, T value);
    public virtual T get_Item(string identity);
    public virtual void set_Item(string identity, T value);
    public virtual T GetValue(string identity, bool ignoreCase);
    public virtual void Add(T item);
    internal bool AtomicAddRange(List`1<T> items);
    private sealed virtual override void System.Collections.Generic.IList<T>.Insert(int index, T item);
    private sealed virtual override bool System.Collections.Generic.ICollection<T>.Remove(T item);
    private sealed virtual override void System.Collections.Generic.IList<T>.RemoveAt(int index);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Clear();
    public sealed virtual bool Contains(T item);
    public virtual bool ContainsIdentity(string identity);
    public virtual int IndexOf(T item);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public MetadataCollection`1<T> SetReadOnly();
    public virtual bool TryGetValue(string identity, bool ignoreCase, T& item);
    internal void ThrowIfReadOnly();
}
public abstract class System.Data.Metadata.Edm.MetadataItem : object {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("21", "True")]
public ReadOnlyMetadataCollection`1<MetadataProperty> MetadataProperties { get; }
    internal MetadataCollection`1<MetadataProperty> RawMetadataProperties { get; }
    public Documentation Documentation { get; public set; }
    internal string Identity { get; }
    internal bool IsReadOnly { get; }
    internal static FacetDescription DefaultValueFacetDescription { get; }
    internal static FacetDescription CollectionKindFacetDescription { get; }
    internal static FacetDescription NullableFacetDescription { get; }
    internal static EdmProviderManifest EdmProviderManifest { get; }
    internal MetadataItem(MetadataFlags flags);
    private static MetadataItem();
    public abstract virtual BuiltInTypeKind get_BuiltInTypeKind();
    public ReadOnlyMetadataCollection`1<MetadataProperty> get_MetadataProperties();
    internal MetadataCollection`1<MetadataProperty> get_RawMetadataProperties();
    public Documentation get_Documentation();
    public void set_Documentation(Documentation value);
    internal abstract virtual string get_Identity();
    internal virtual bool EdmEquals(MetadataItem item);
    internal bool get_IsReadOnly();
    internal virtual void SetReadOnly();
    internal virtual void BuildIdentity(StringBuilder builder);
    internal void AddMetadataProperties(List`1<MetadataProperty> metadataProperties);
    internal DataSpace GetDataSpace();
    internal void SetDataSpace(DataSpace space);
    internal ParameterMode GetParameterMode();
    internal void SetParameterMode(ParameterMode mode);
    internal bool GetFlag(MetadataFlags flag);
    internal void SetFlag(MetadataFlags flag, bool value);
    internal static FacetDescription get_DefaultValueFacetDescription();
    internal static FacetDescription get_CollectionKindFacetDescription();
    internal static FacetDescription get_NullableFacetDescription();
    internal static EdmProviderManifest get_EdmProviderManifest();
    public static EdmType GetBuiltInType(BuiltInTypeKind builtInTypeKind);
    public static ReadOnlyCollection`1<FacetDescription> GetGeneralFacetDescriptions();
}
public class System.Data.Metadata.Edm.MetadataProperty : MetadataItem {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("12", "False")]
public string Name { get; }
    [MetadataPropertyAttribute("System.Object", "False")]
public object Value { get; }
    [MetadataPropertyAttribute("39", "False")]
public TypeUsage TypeUsage { get; }
    public PropertyKind PropertyKind { get; }
    internal MetadataProperty(string name, TypeUsage typeUsage, object value);
    internal MetadataProperty(string name, EdmType edmType, bool isCollectionType, object value);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual string get_Identity();
    public string get_Name();
    public object get_Value();
    public TypeUsage get_TypeUsage();
    internal virtual void SetReadOnly();
    public PropertyKind get_PropertyKind();
}
[AttributeUsageAttribute("128")]
internal class System.Data.Metadata.Edm.MetadataPropertyAttribute : Attribute {
    internal EdmType Type { get; }
    internal bool IsCollectionType { get; }
    internal MetadataPropertyAttribute(BuiltInTypeKind builtInTypeKind, bool isCollectionType);
    internal MetadataPropertyAttribute(PrimitiveTypeKind primitiveTypeKind, bool isCollectionType);
    internal MetadataPropertyAttribute(Type type, bool isCollection);
    internal EdmType get_Type();
    internal bool get_IsCollectionType();
}
internal class System.Data.Metadata.Edm.MetadataPropertyCollection : MetadataCollection`1<MetadataProperty> {
    internal MetadataPropertyCollection(MetadataItem item);
    private static MetadataPropertyCollection();
}
internal class System.Data.Metadata.Edm.MetadataPropertyValue : object {
    internal MetadataPropertyValue(PropertyInfo propertyInfo, MetadataItem item);
    internal object GetValue();
}
public class System.Data.Metadata.Edm.MetadataWorkspace : object {
    public static double MaximumEdmVersionSupported;
    internal Guid MetadataWorkspaceId { get; }
    public MetadataWorkspace(IEnumerable`1<string> paths, IEnumerable`1<Assembly> assembliesToConsider);
    private static MetadataWorkspace();
    public EntitySqlParser CreateEntitySqlParser();
    public DbQueryCommandTree CreateQueryCommandTree(DbExpression query);
    [CLSCompliantAttribute("False")]
public ItemCollection GetItemCollection(DataSpace dataSpace);
    [CLSCompliantAttribute("False")]
public void RegisterItemCollection(ItemCollection collection);
    internal void AddMetadataEntryToken(object token);
    public void LoadFromAssembly(Assembly assembly);
    public void LoadFromAssembly(Assembly assembly, Action`1<string> logLoadMessage);
    internal void ImplicitLoadAssemblyForType(Type type, Assembly callingAssembly);
    internal void ImplicitLoadFromEntityType(EntityType type, Assembly callingAssembly);
    public T GetItem(string identity, DataSpace dataSpace);
    public bool TryGetItem(string identity, DataSpace space, T& item);
    public T GetItem(string identity, bool ignoreCase, DataSpace dataSpace);
    public bool TryGetItem(string identity, bool ignoreCase, DataSpace dataSpace, T& item);
    public ReadOnlyCollection`1<T> GetItems(DataSpace dataSpace);
    public EdmType GetType(string name, string namespaceName, DataSpace dataSpace);
    public bool TryGetType(string name, string namespaceName, DataSpace dataSpace, EdmType& type);
    public EdmType GetType(string name, string namespaceName, bool ignoreCase, DataSpace dataSpace);
    public bool TryGetType(string name, string namespaceName, bool ignoreCase, DataSpace dataSpace, EdmType& type);
    public EntityContainer GetEntityContainer(string name, DataSpace dataSpace);
    public bool TryGetEntityContainer(string name, DataSpace dataSpace, EntityContainer& entityContainer);
    public EntityContainer GetEntityContainer(string name, bool ignoreCase, DataSpace dataSpace);
    public bool TryGetEntityContainer(string name, bool ignoreCase, DataSpace dataSpace, EntityContainer& entityContainer);
    public ReadOnlyCollection`1<EdmFunction> GetFunctions(string name, string namespaceName, DataSpace dataSpace);
    public ReadOnlyCollection`1<EdmFunction> GetFunctions(string name, string namespaceName, DataSpace dataSpace, bool ignoreCase);
    internal bool TryGetFunction(string name, string namespaceName, TypeUsage[] parameterTypes, bool ignoreCase, DataSpace dataSpace, EdmFunction& function);
    public ReadOnlyCollection`1<PrimitiveType> GetPrimitiveTypes(DataSpace dataSpace);
    public ReadOnlyCollection`1<GlobalItem> GetItems(DataSpace dataSpace);
    internal PrimitiveType GetMappedPrimitiveType(PrimitiveTypeKind primitiveTypeKind, DataSpace dataSpace);
    internal bool TryGetMap(string typeIdentity, DataSpace typeSpace, bool ignoreCase, DataSpace mappingSpace, Map& map);
    internal Map GetMap(string identity, DataSpace typeSpace, DataSpace dataSpace);
    internal Map GetMap(GlobalItem item, DataSpace dataSpace);
    internal bool TryGetMap(GlobalItem item, DataSpace dataSpace, Map& map);
    [CLSCompliantAttribute("False")]
public bool TryGetItemCollection(DataSpace dataSpace, ItemCollection& collection);
    internal ItemCollection GetItemCollection(DataSpace dataSpace, bool required);
    public StructuralType GetObjectSpaceType(StructuralType edmSpaceType);
    public bool TryGetObjectSpaceType(StructuralType edmSpaceType, StructuralType& objectSpaceType);
    public EnumType GetObjectSpaceType(EnumType edmSpaceType);
    public bool TryGetObjectSpaceType(EnumType edmSpaceType, EnumType& objectSpaceType);
    public StructuralType GetEdmSpaceType(StructuralType objectSpaceType);
    public bool TryGetEdmSpaceType(StructuralType objectSpaceType, StructuralType& edmSpaceType);
    public EnumType GetEdmSpaceType(EnumType objectSpaceType);
    public bool TryGetEdmSpaceType(EnumType objectSpaceType, EnumType& edmSpaceType);
    internal DbQueryCommandTree GetCqtView(EntitySetBase extent);
    internal GeneratedView GetGeneratedView(EntitySetBase extent);
    internal bool TryGetGeneratedViewOfType(EntitySetBase extent, EntityTypeBase type, bool includeSubtypes, GeneratedView& generatedView);
    internal DbLambda GetGeneratedFunctionDefinition(EdmFunction function);
    internal bool TryGetFunctionImportMapping(EdmFunction functionImport, FunctionImportMapping& targetFunctionMapping);
    internal ViewLoader GetUpdateViewLoader();
    internal TypeUsage GetOSpaceTypeUsage(TypeUsage edmSpaceTypeUsage);
    internal bool IsItemCollectionAlreadyRegistered(DataSpace dataSpace);
    internal bool IsMetadataWorkspaceCSCompatible(MetadataWorkspace other);
    public static void ClearCache();
    internal MetadataWorkspace ShallowCopy();
    internal TypeUsage GetCanonicalModelTypeUsage(PrimitiveTypeKind primitiveTypeKind);
    internal PrimitiveType GetModelPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
    [ObsoleteAttribute("Use MetadataWorkspace.GetRelevantMembersForUpdate(EntitySetBase, EntityTypeBase, bool) instead")]
public IEnumerable`1<EdmMember> GetRequiredOriginalValueMembers(EntitySetBase entitySet, EntityTypeBase entityType);
    public ReadOnlyCollection`1<EdmMember> GetRelevantMembersForUpdate(EntitySetBase entitySet, EntityTypeBase entityType, bool partialUpdateSupported);
    internal QueryCacheManager GetQueryCacheManager();
    internal Guid get_MetadataWorkspaceId();
}
internal class System.Data.Metadata.Edm.ModelPerspective : Perspective {
    internal ModelPerspective(MetadataWorkspace metadataWorkspace);
    internal virtual bool TryGetTypeByName(string fullName, bool ignoreCase, TypeUsage& typeUsage);
}
internal class System.Data.Metadata.Edm.MutableAssemblyCacheEntry : AssemblyCacheEntry {
    internal IList`1<EdmType> TypesInAssembly { get; }
    internal IList`1<Assembly> ClosureAssemblies { get; }
    internal virtual IList`1<EdmType> get_TypesInAssembly();
    internal virtual IList`1<Assembly> get_ClosureAssemblies();
}
public class System.Data.Metadata.Edm.NavigationProperty : EdmMember {
    internal static string RelationshipTypeNamePropertyName;
    internal static string ToEndMemberNamePropertyName;
    internal RuntimeMethodHandle PropertyGetterHandle;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("35", "False")]
public RelationshipType RelationshipType { get; internal set; }
    [MetadataPropertyAttribute("32", "False")]
public RelationshipEndMember ToEndMember { get; internal set; }
    [MetadataPropertyAttribute("32", "False")]
public RelationshipEndMember FromEndMember { get; internal set; }
    internal NavigationPropertyAccessor Accessor { get; }
    internal NavigationProperty(string name, TypeUsage typeUsage);
    internal NavigationProperty(string name, TypeUsage typeUsage, PropertyInfo propertyInfo);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public RelationshipType get_RelationshipType();
    internal void set_RelationshipType(RelationshipType value);
    public RelationshipEndMember get_ToEndMember();
    internal void set_ToEndMember(RelationshipEndMember value);
    public RelationshipEndMember get_FromEndMember();
    internal void set_FromEndMember(RelationshipEndMember value);
    internal NavigationPropertyAccessor get_Accessor();
    public IEnumerable`1<EdmProperty> GetDependentProperties();
}
internal class System.Data.Metadata.Edm.NavigationPropertyAccessor : object {
    public bool HasProperty { get; }
    public string PropertyName { get; }
    public Func`2<object, object> ValueGetter { get; public set; }
    public Action`2<object, object> ValueSetter { get; public set; }
    public Action`2<object, object> CollectionAdd { get; public set; }
    public Func`3<object, object, bool> CollectionRemove { get; public set; }
    public Func`1<object> CollectionCreate { get; public set; }
    public static NavigationPropertyAccessor NoNavigationProperty { get; }
    public NavigationPropertyAccessor(string propertyName);
    public bool get_HasProperty();
    public string get_PropertyName();
    public Func`2<object, object> get_ValueGetter();
    public void set_ValueGetter(Func`2<object, object> value);
    public Action`2<object, object> get_ValueSetter();
    public void set_ValueSetter(Action`2<object, object> value);
    public Action`2<object, object> get_CollectionAdd();
    public void set_CollectionAdd(Action`2<object, object> value);
    public Func`3<object, object, bool> get_CollectionRemove();
    public void set_CollectionRemove(Func`3<object, object, bool> value);
    public Func`1<object> get_CollectionCreate();
    public void set_CollectionCreate(Func`1<object> value);
    public static NavigationPropertyAccessor get_NoNavigationProperty();
}
internal abstract class System.Data.Metadata.Edm.ObjectItemAssemblyLoader : object {
    protected static BindingFlags PropertyReflectionBindingFlags;
    protected ObjectItemLoadingSessionData SessionData { get; }
    protected Assembly SourceAssembly { get; }
    protected AssemblyCacheEntry CacheEntry { get; }
    protected ObjectItemAssemblyLoader(Assembly assembly, AssemblyCacheEntry cacheEntry, ObjectItemLoadingSessionData sessionData);
    internal virtual void Load();
    protected abstract virtual void AddToAssembliesLoaded();
    protected abstract virtual void LoadTypesFromAssembly();
    protected virtual void LoadClosureAssemblies();
    internal virtual void OnLevel1SessionProcessing();
    internal virtual void OnLevel2SessionProcessing();
    internal static ObjectItemAssemblyLoader CreateLoader(Assembly assembly, ObjectItemLoadingSessionData sessionData);
    internal static bool IsAttributeLoader(object loaderCookie);
    internal static bool IsAttributeLoader(Func`3<Assembly, ObjectItemLoadingSessionData, ObjectItemAssemblyLoader> loaderFactory);
    internal static bool IsConventionLoader(Func`3<Assembly, ObjectItemLoadingSessionData, ObjectItemAssemblyLoader> loaderFactory);
    protected virtual void AddToKnownAssemblies();
    protected static void LoadAssemblies(IEnumerable`1<Assembly> assemblies, ObjectItemLoadingSessionData sessionData);
    protected bool TryGetPrimitiveType(Type type, PrimitiveType& primitiveType);
    protected ObjectItemLoadingSessionData get_SessionData();
    protected Assembly get_SourceAssembly();
    protected AssemblyCacheEntry get_CacheEntry();
}
internal class System.Data.Metadata.Edm.ObjectItemAttributeAssemblyLoader : ObjectItemAssemblyLoader {
    internal ObjectItemAttributeAssemblyLoader(Assembly assembly, ObjectItemLoadingSessionData sessionData);
    internal virtual void OnLevel1SessionProcessing();
    internal virtual void OnLevel2SessionProcessing();
    internal virtual void Load();
    protected virtual void AddToAssembliesLoaded();
    protected virtual void LoadTypesFromAssembly();
    internal void ResolveNavigationProperty(StructuralType declaringType, PropertyInfo propertyInfo);
    internal static bool IsSchemaAttributePresent(Assembly assembly);
    internal static ObjectItemAssemblyLoader Create(Assembly assembly, ObjectItemLoadingSessionData sessionData);
}
internal class System.Data.Metadata.Edm.ObjectItemCachedAssemblyLoader : ObjectItemAssemblyLoader {
    internal ObjectItemCachedAssemblyLoader(Assembly assembly, ImmutableAssemblyCacheEntry cacheEntry, ObjectItemLoadingSessionData sessionData);
    protected virtual void AddToAssembliesLoaded();
    protected virtual void LoadTypesFromAssembly();
}
[CLSCompliantAttribute("False")]
public class System.Data.Metadata.Edm.ObjectItemCollection : ItemCollection {
    internal object LoadAssemblyLock { get; }
    internal static IList`1<Assembly> ViewGenerationAssemblies { get; }
    internal object get_LoadAssemblyLock();
    internal static IList`1<Assembly> get_ViewGenerationAssemblies();
    internal static bool IsCompiledViewGenAttributePresent(Assembly assembly);
    internal void ImplicitLoadAllReferencedAssemblies(Assembly assembly, EdmItemCollection edmItemCollection);
    internal void ImplicitLoadViewsFromAllReferencedAssemblies(Assembly assembly);
    public void LoadFromAssembly(Assembly assembly);
    public void LoadFromAssembly(Assembly assembly, EdmItemCollection edmItemCollection, Action`1<string> logLoadMessage);
    public void LoadFromAssembly(Assembly assembly, EdmItemCollection edmItemCollection);
    internal void ExplicitLoadFromAssembly(Assembly assembly, EdmItemCollection edmItemCollection, Action`1<string> logLoadMessage);
    internal void ImplicitLoadFromAssembly(Assembly assembly, EdmItemCollection edmItemCollection);
    internal bool ImplicitLoadAssemblyForType(Type type, EdmItemCollection edmItemCollection);
    internal AssociationType GetRelationshipType(Type entityClrType, string relationshipName);
    internal static Dictionary`2<string, EdmType> LoadTypesExpensiveWay(Assembly assembly);
    internal static AssociationType GetRelationshipTypeExpensiveWay(Type entityClrType, string relationshipName);
    internal static IEnumerable`1<AssociationType> GetAllRelationshipTypesExpensiveWay(Assembly assembly);
    public IEnumerable`1<PrimitiveType> GetPrimitiveTypes();
    public Type GetClrType(StructuralType objectSpaceType);
    public bool TryGetClrType(StructuralType objectSpaceType, Type& clrType);
    public Type GetClrType(EnumType objectSpaceType);
    public bool TryGetClrType(EnumType objectSpaceType, Type& clrType);
    internal virtual PrimitiveType GetMappedPrimitiveType(PrimitiveTypeKind modelType);
    internal bool TryGetOSpaceType(EdmType cspaceType, EdmType& edmType);
    internal static string TryGetMappingCSpaceTypeIdentity(EdmType edmType);
    public virtual ReadOnlyCollection`1<T> GetItems();
}
internal class System.Data.Metadata.Edm.ObjectItemConventionAssemblyLoader : ObjectItemAssemblyLoader {
    internal ObjectItemConventionAssemblyLoader(Assembly assembly, ObjectItemLoadingSessionData sessionData);
    protected virtual void LoadTypesFromAssembly();
    protected virtual void AddToAssembliesLoaded();
    internal virtual void OnLevel1SessionProcessing();
    internal static bool SessionContainsConventionParameters(ObjectItemLoadingSessionData sessionData);
    internal static bool TypesMatchByConvention(Type type, EdmType cspaceType);
    internal static ObjectItemAssemblyLoader Create(Assembly assembly, ObjectItemLoadingSessionData sessionData);
}
internal class System.Data.Metadata.Edm.ObjectItemLoadingSessionData : object {
    internal Dictionary`2<string, EdmType> TypesInLoading { get; }
    internal Dictionary`2<Assembly, MutableAssemblyCacheEntry> AssembliesLoaded { get; }
    internal List`1<EdmItemError> EdmItemErrors { get; }
    internal KnownAssembliesSet KnownAssemblies { get; }
    internal LockedAssemblyCache LockedAssemblyCache { get; }
    internal EdmItemCollection EdmItemCollection { get; }
    internal Dictionary`2<EdmType, EdmType> CspaceToOspace { get; }
    internal bool ConventionBasedRelationshipsAreLoaded { get; internal set; }
    internal LoadMessageLogger LoadMessageLogger { get; }
    internal Dictionary`2<string, KeyValuePair`2<EdmType, int>> ConventionCSpaceTypeNames { get; }
    internal Func`3<Assembly, ObjectItemLoadingSessionData, ObjectItemAssemblyLoader> ObjectItemAssemblyLoaderFactory { get; internal set; }
    internal object LoaderCookie { get; }
    internal ObjectItemLoadingSessionData(KnownAssembliesSet knownAssemblies, LockedAssemblyCache lockedAssemblyCache, EdmItemCollection edmItemCollection, Action`1<string> logLoadMessage, object loaderCookie);
    internal Dictionary`2<string, EdmType> get_TypesInLoading();
    internal Dictionary`2<Assembly, MutableAssemblyCacheEntry> get_AssembliesLoaded();
    internal List`1<EdmItemError> get_EdmItemErrors();
    internal KnownAssembliesSet get_KnownAssemblies();
    internal LockedAssemblyCache get_LockedAssemblyCache();
    internal EdmItemCollection get_EdmItemCollection();
    internal Dictionary`2<EdmType, EdmType> get_CspaceToOspace();
    internal bool get_ConventionBasedRelationshipsAreLoaded();
    internal void set_ConventionBasedRelationshipsAreLoaded(bool value);
    internal LoadMessageLogger get_LoadMessageLogger();
    internal Dictionary`2<string, KeyValuePair`2<EdmType, int>> get_ConventionCSpaceTypeNames();
    internal Func`3<Assembly, ObjectItemLoadingSessionData, ObjectItemAssemblyLoader> get_ObjectItemAssemblyLoaderFactory();
    internal void set_ObjectItemAssemblyLoaderFactory(Func`3<Assembly, ObjectItemLoadingSessionData, ObjectItemAssemblyLoader> value);
    internal object get_LoaderCookie();
    internal void RegisterForLevel1PostSessionProcessing(ObjectItemAssemblyLoader loader);
    internal void RegisterForLevel2PostSessionProcessing(ObjectItemAssemblyLoader loader);
    internal void CompleteSession();
}
internal class System.Data.Metadata.Edm.ObjectItemNoOpAssemblyLoader : ObjectItemAssemblyLoader {
    internal ObjectItemNoOpAssemblyLoader(Assembly assembly, ObjectItemLoadingSessionData sessionData);
    internal virtual void Load();
    protected virtual void AddToAssembliesLoaded();
    protected virtual void LoadTypesFromAssembly();
}
internal class System.Data.Metadata.Edm.OcAssemblyCache : object {
    internal bool TryGetConventionalOcCacheFromAssemblyCache(Assembly assemblyToLookup, ImmutableAssemblyCacheEntry& cacheEntry);
    internal void AddAssemblyToOcCacheFromAssemblyCache(Assembly assembly, ImmutableAssemblyCacheEntry cacheEntry);
}
public enum System.Data.Metadata.Edm.OperationAction : Enum {
    public int value__;
    public static OperationAction None;
    public static OperationAction Cascade;
    public static OperationAction Restrict;
}
public enum System.Data.Metadata.Edm.ParameterMode : Enum {
    public int value__;
    public static ParameterMode In;
    public static ParameterMode Out;
    public static ParameterMode InOut;
    public static ParameterMode ReturnValue;
}
public enum System.Data.Metadata.Edm.ParameterTypeSemantics : Enum {
    public int value__;
    public static ParameterTypeSemantics AllowImplicitConversion;
    public static ParameterTypeSemantics AllowImplicitPromotion;
    public static ParameterTypeSemantics ExactMatchOnly;
}
internal abstract class System.Data.Metadata.Edm.Perspective : object {
    internal MetadataWorkspace MetadataWorkspace { get; }
    internal DataSpace TargetDataspace { get; }
    internal Perspective(MetadataWorkspace metadataWorkspace, DataSpace targetDataspace);
    internal virtual bool TryGetMember(StructuralType type, string memberName, bool ignoreCase, EdmMember& outMember);
    internal bool TryGetEnumMember(EnumType type, string memberName, bool ignoreCase, EnumMember& outMember);
    internal bool TryGetExtent(EntityContainer entityContainer, string extentName, bool ignoreCase, EntitySetBase& outSet);
    internal bool TryGetFunctionImport(EntityContainer entityContainer, string functionImportName, bool ignoreCase, EdmFunction& functionImport);
    internal virtual EntityContainer GetDefaultContainer();
    internal virtual bool TryGetEntityContainer(string name, bool ignoreCase, EntityContainer& entityContainer);
    internal abstract virtual bool TryGetTypeByName(string fullName, bool ignoreCase, TypeUsage& typeUsage);
    internal bool TryGetFunctionByName(string namespaceName, string functionName, bool ignoreCase, IList`1& functionOverloads);
    internal MetadataWorkspace get_MetadataWorkspace();
    internal virtual bool TryGetMappedPrimitiveType(PrimitiveTypeKind primitiveTypeKind, PrimitiveType& primitiveType);
    internal DataSpace get_TargetDataspace();
}
public class System.Data.Metadata.Edm.PrimitiveType : SimpleType {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal Type ClrType { get; }
    [MetadataPropertyAttribute("27", "False")]
public PrimitiveTypeKind PrimitiveTypeKind { get; internal set; }
    internal DbProviderManifest ProviderManifest { get; internal set; }
    public ReadOnlyCollection`1<FacetDescription> FacetDescriptions { get; }
    public Type ClrEquivalentType { get; }
    internal PrimitiveType(string name, string namespaceName, DataSpace dataSpace, PrimitiveType baseType, DbProviderManifest providerManifest);
    internal PrimitiveType(Type clrType, PrimitiveType baseType, DbProviderManifest providerManifest);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual Type get_ClrType();
    public PrimitiveTypeKind get_PrimitiveTypeKind();
    internal void set_PrimitiveTypeKind(PrimitiveTypeKind value);
    internal DbProviderManifest get_ProviderManifest();
    internal void set_ProviderManifest(DbProviderManifest value);
    public ReadOnlyCollection`1<FacetDescription> get_FacetDescriptions();
    public Type get_ClrEquivalentType();
    internal virtual IEnumerable`1<FacetDescription> GetAssociatedFacetDescriptions();
    internal static void Initialize(PrimitiveType primitiveType, PrimitiveTypeKind primitiveTypeKind, bool isDefaultType, DbProviderManifest providerManifest);
    public EdmType GetEdmPrimitiveType();
    public static ReadOnlyCollection`1<PrimitiveType> GetEdmPrimitiveTypes();
    public static PrimitiveType GetEdmPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
}
public enum System.Data.Metadata.Edm.PrimitiveTypeKind : Enum {
    public int value__;
    public static PrimitiveTypeKind Binary;
    public static PrimitiveTypeKind Boolean;
    public static PrimitiveTypeKind Byte;
    public static PrimitiveTypeKind DateTime;
    public static PrimitiveTypeKind Decimal;
    public static PrimitiveTypeKind Double;
    public static PrimitiveTypeKind Guid;
    public static PrimitiveTypeKind Single;
    public static PrimitiveTypeKind SByte;
    public static PrimitiveTypeKind Int16;
    public static PrimitiveTypeKind Int32;
    public static PrimitiveTypeKind Int64;
    public static PrimitiveTypeKind String;
    public static PrimitiveTypeKind Time;
    public static PrimitiveTypeKind DateTimeOffset;
    public static PrimitiveTypeKind Geometry;
    public static PrimitiveTypeKind Geography;
    public static PrimitiveTypeKind GeometryPoint;
    public static PrimitiveTypeKind GeometryLineString;
    public static PrimitiveTypeKind GeometryPolygon;
    public static PrimitiveTypeKind GeometryMultiPoint;
    public static PrimitiveTypeKind GeometryMultiLineString;
    public static PrimitiveTypeKind GeometryMultiPolygon;
    public static PrimitiveTypeKind GeometryCollection;
    public static PrimitiveTypeKind GeographyPoint;
    public static PrimitiveTypeKind GeographyLineString;
    public static PrimitiveTypeKind GeographyPolygon;
    public static PrimitiveTypeKind GeographyMultiPoint;
    public static PrimitiveTypeKind GeographyMultiLineString;
    public static PrimitiveTypeKind GeographyMultiPolygon;
    public static PrimitiveTypeKind GeographyCollection;
}
public enum System.Data.Metadata.Edm.PropertyKind : Enum {
    public int value__;
    public static PropertyKind System;
    public static PropertyKind Extended;
}
[DefaultMemberAttribute("Item")]
public class System.Data.Metadata.Edm.ReadOnlyMetadataCollection`1 : ReadOnlyCollection`1<T> {
    public bool IsReadOnly { get; }
    public T Item { get; }
    internal MetadataCollection`1<T> Source { get; }
    internal ReadOnlyMetadataCollection`1(IList`1<T> collection);
    public bool get_IsReadOnly();
    public virtual T get_Item(string identity);
    internal MetadataCollection`1<T> get_Source();
    public virtual T GetValue(string identity, bool ignoreCase);
    public virtual bool Contains(string identity);
    public virtual bool TryGetValue(string identity, bool ignoreCase, T& item);
    public Enumerator<T> GetEnumerator();
    public virtual int IndexOf(T value);
}
public class System.Data.Metadata.Edm.ReferentialConstraint : MetadataItem {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal string Identity { get; }
    [MetadataPropertyAttribute("32", "False")]
public RelationshipEndMember FromRole { get; }
    [MetadataPropertyAttribute("32", "False")]
public RelationshipEndMember ToRole { get; }
    [MetadataPropertyAttribute("28", "True")]
public ReadOnlyMetadataCollection`1<EdmProperty> FromProperties { get; }
    [MetadataPropertyAttribute("28", "True")]
public ReadOnlyMetadataCollection`1<EdmProperty> ToProperties { get; }
    internal ReferentialConstraint(RelationshipEndMember fromRole, RelationshipEndMember toRole, IEnumerable`1<EdmProperty> fromProperties, IEnumerable`1<EdmProperty> toProperties);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    internal virtual string get_Identity();
    public RelationshipEndMember get_FromRole();
    public RelationshipEndMember get_ToRole();
    public ReadOnlyMetadataCollection`1<EdmProperty> get_FromProperties();
    public ReadOnlyMetadataCollection`1<EdmProperty> get_ToProperties();
    public virtual string ToString();
    internal virtual void SetReadOnly();
}
public class System.Data.Metadata.Edm.RefType : EdmType {
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("5", "False")]
public EntityTypeBase ElementType { get; }
    internal RefType(EntityType entityType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public EntityTypeBase get_ElementType();
}
public abstract class System.Data.Metadata.Edm.RelationshipEndMember : EdmMember {
    [MetadataPropertyAttribute("10", "True")]
public OperationAction DeleteBehavior { get; internal set; }
    [MetadataPropertyAttribute("33", "False")]
public RelationshipMultiplicity RelationshipMultiplicity { get; }
    internal RelationshipEndMember(string name, RefType endRefType, RelationshipMultiplicity multiplicity);
    public OperationAction get_DeleteBehavior();
    internal void set_DeleteBehavior(OperationAction value);
    public RelationshipMultiplicity get_RelationshipMultiplicity();
    public EntityType GetEntityType();
}
public enum System.Data.Metadata.Edm.RelationshipMultiplicity : Enum {
    public int value__;
    public static RelationshipMultiplicity ZeroOrOne;
    public static RelationshipMultiplicity One;
    public static RelationshipMultiplicity Many;
}
public abstract class System.Data.Metadata.Edm.RelationshipSet : EntitySetBase {
    public RelationshipType ElementType { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    internal RelationshipSet(string name, string schema, string table, string definingQuery, RelationshipType relationshipType);
    public RelationshipType get_ElementType();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
}
public abstract class System.Data.Metadata.Edm.RelationshipType : EntityTypeBase {
    public ReadOnlyMetadataCollection`1<RelationshipEndMember> RelationshipEndMembers { get; }
    internal RelationshipType(string name, string namespaceName, DataSpace dataSpace);
    public ReadOnlyMetadataCollection`1<RelationshipEndMember> get_RelationshipEndMembers();
}
public class System.Data.Metadata.Edm.RowType : StructuralType {
    internal InitializerMetadata InitializerMetadata { get; }
    public BuiltInTypeKind BuiltInTypeKind { get; }
    public ReadOnlyMetadataCollection`1<EdmProperty> Properties { get; }
    internal RowType(IEnumerable`1<EdmProperty> properties);
    internal RowType(IEnumerable`1<EdmProperty> properties, InitializerMetadata initializerMetadata);
    internal InitializerMetadata get_InitializerMetadata();
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public ReadOnlyMetadataCollection`1<EdmProperty> get_Properties();
    internal virtual void ValidateMemberForAdd(EdmMember member);
    internal virtual bool EdmEquals(MetadataItem item);
}
internal class System.Data.Metadata.Edm.SafeLink`1 : object {
    public TParent Value { get; }
    public TParent get_Value();
    internal static IEnumerable`1<TChild> BindChildren(TParent parent, Func`2<TChild, SafeLink`1<TParent>> getLink, IEnumerable`1<TChild> children);
    internal static TChild BindChild(TParent parent, Func`2<TChild, SafeLink`1<TParent>> getLink, TChild child);
}
internal class System.Data.Metadata.Edm.SafeLinkCollection`2 : ReadOnlyMetadataCollection`1<TChild> {
    public SafeLinkCollection`2(TParent parent, Func`2<TChild, SafeLink`1<TParent>> getLink, MetadataCollection`1<TChild> children);
}
public abstract class System.Data.Metadata.Edm.SimpleType : EdmType {
    internal SimpleType(string name, string namespaceName, DataSpace dataSpace);
}
public enum System.Data.Metadata.Edm.StoreGeneratedPattern : Enum {
    public int value__;
    public static StoreGeneratedPattern None;
    public static StoreGeneratedPattern Identity;
    public static StoreGeneratedPattern Computed;
}
[CLSCompliantAttribute("False")]
public class System.Data.Metadata.Edm.StoreItemCollection : ItemCollection {
    internal QueryCacheManager QueryCacheManager { get; }
    internal DbProviderFactory StoreProviderFactory { get; }
    internal DbProviderManifest StoreProviderManifest { get; }
    internal string StoreProviderManifestToken { get; }
    public double StoreSchemaVersion { get; internal set; }
    internal StoreItemCollection(DbProviderFactory factory, DbProviderManifest manifest, string providerManifestToken);
    internal StoreItemCollection(IEnumerable`1<XmlReader> xmlReaders, ReadOnlyCollection`1<string> filePaths, IList`1& errors);
    internal StoreItemCollection(IEnumerable`1<XmlReader> xmlReaders, IEnumerable`1<string> filePaths);
    public StoreItemCollection(IEnumerable`1<XmlReader> xmlReaders);
    public StoreItemCollection(String[] filePaths);
    internal QueryCacheManager get_QueryCacheManager();
    internal DbProviderFactory get_StoreProviderFactory();
    internal DbProviderManifest get_StoreProviderManifest();
    internal string get_StoreProviderManifestToken();
    public double get_StoreSchemaVersion();
    internal void set_StoreSchemaVersion(double value);
    public ReadOnlyCollection`1<PrimitiveType> GetPrimitiveTypes();
    internal virtual PrimitiveType GetMappedPrimitiveType(PrimitiveTypeKind primitiveTypeKind);
    internal ReadOnlyCollection`1<EdmFunction> GetCTypeFunctions(string functionName, bool ignoreCase);
    internal EdmFunction ConvertToCTypeFunction(EdmFunction sTypeFunction);
}
public abstract class System.Data.Metadata.Edm.StructuralType : EdmType {
    [MetadataPropertyAttribute("24", "True")]
public ReadOnlyMetadataCollection`1<EdmMember> Members { get; }
    internal StructuralType(string name, string namespaceName, DataSpace dataSpace);
    public ReadOnlyMetadataCollection`1<EdmMember> get_Members();
    internal ReadOnlyMetadataCollection`1<T> GetDeclaredOnlyMembers();
    internal virtual void SetReadOnly();
    internal abstract virtual void ValidateMemberForAdd(EdmMember member);
    internal void AddMember(EdmMember member);
}
internal class System.Data.Metadata.Edm.TargetPerspective : Perspective {
    internal static DataSpace TargetPerspectiveDataSpace;
    internal TargetPerspective(MetadataWorkspace metadataWorkspace);
    internal virtual bool TryGetTypeByName(string fullName, bool ignoreCase, TypeUsage& usage);
    internal virtual bool TryGetEntityContainer(string name, bool ignoreCase, EntityContainer& entityContainer);
}
internal static class System.Data.Metadata.Edm.TypeSemantics : object {
    internal static bool IsEqual(TypeUsage type1, TypeUsage type2);
    internal static bool IsStructurallyEqual(TypeUsage fromType, TypeUsage toType);
    internal static bool IsStructurallyEqualOrPromotableTo(TypeUsage fromType, TypeUsage toType);
    internal static bool IsStructurallyEqualOrPromotableTo(EdmType fromType, EdmType toType);
    internal static bool IsSubTypeOf(TypeUsage subType, TypeUsage superType);
    internal static bool IsSubTypeOf(EdmType subEdmType, EdmType superEdmType);
    internal static bool IsPromotableTo(TypeUsage fromType, TypeUsage toType);
    internal static IEnumerable`1<TypeUsage> FlattenType(TypeUsage type);
    internal static bool IsCastAllowed(TypeUsage fromType, TypeUsage toType);
    internal static bool TryGetCommonType(TypeUsage type1, TypeUsage type2, TypeUsage& commonType);
    internal static TypeUsage GetCommonType(TypeUsage type1, TypeUsage type2);
    internal static bool IsAggregateFunction(EdmFunction function);
    internal static bool IsValidPolymorphicCast(TypeUsage fromType, TypeUsage toType);
    internal static bool IsValidPolymorphicCast(EdmType fromEdmType, EdmType toEdmType);
    internal static bool IsNominalType(TypeUsage type);
    internal static bool IsCollectionType(TypeUsage type);
    internal static bool IsComplexType(TypeUsage type);
    internal static bool IsEntityType(TypeUsage type);
    internal static bool IsRelationshipType(TypeUsage type);
    internal static bool IsEnumerationType(TypeUsage type);
    internal static bool IsScalarType(TypeUsage type);
    internal static bool IsScalarType(EdmType type);
    internal static bool IsNumericType(TypeUsage type);
    internal static bool IsIntegerNumericType(TypeUsage type);
    internal static bool IsFixedPointNumericType(TypeUsage type);
    internal static bool IsFloatPointNumericType(TypeUsage type);
    internal static bool IsUnsignedNumericType(TypeUsage type);
    internal static bool IsPolymorphicType(TypeUsage type);
    internal static bool IsBooleanType(TypeUsage type);
    internal static bool IsPrimitiveType(TypeUsage type);
    internal static bool IsPrimitiveType(TypeUsage type, PrimitiveTypeKind primitiveTypeKind);
    internal static bool IsRowType(TypeUsage type);
    internal static bool IsReferenceType(TypeUsage type);
    internal static bool IsSpatialType(TypeUsage type);
    internal static bool IsStrongSpatialType(TypeUsage type);
    internal static bool IsStructuralType(TypeUsage type);
    internal static bool IsPartOfKey(EdmMember edmMember);
    internal static bool IsNullable(TypeUsage type);
    internal static bool IsNullable(EdmMember edmMember);
    internal static bool IsEqualComparable(TypeUsage type);
    internal static bool IsEqualComparableTo(TypeUsage type1, TypeUsage type2);
    internal static bool IsOrderComparable(TypeUsage type);
    internal static bool IsOrderComparableTo(TypeUsage type1, TypeUsage type2);
    internal static TypeUsage ForgetConstraints(TypeUsage type);
    [ConditionalAttribute("DEBUG")]
internal static void AssertTypeInvariant(string message, Func`1<bool> assertPredicate);
}
[DebuggerDisplayAttribute("EdmType={EdmType}, Facets.Count={Facets.Count}")]
public class System.Data.Metadata.Edm.TypeUsage : MetadataItem {
    internal static Unbounded DefaultMaxLengthFacetValue;
    internal static Unbounded DefaultPrecisionFacetValue;
    internal static Unbounded DefaultScaleFacetValue;
    internal static bool DefaultUnicodeFacetValue;
    internal static bool DefaultFixedLengthFacetValue;
    internal static Nullable`1<byte> DefaultDateTimePrecisionFacetValue;
    public BuiltInTypeKind BuiltInTypeKind { get; }
    [MetadataPropertyAttribute("11", "False")]
public EdmType EdmType { get; }
    [MetadataPropertyAttribute("17", "True")]
public ReadOnlyMetadataCollection`1<Facet> Facets { get; }
    internal string Identity { get; }
    private static TypeUsage();
    internal static TypeUsage Create(EdmType edmType);
    internal static TypeUsage Create(EdmType edmType, FacetValues values);
    internal static TypeUsage Create(EdmType edmType, IEnumerable`1<Facet> facets);
    internal TypeUsage ShallowCopy(FacetValues facetValues);
    public static TypeUsage CreateDefaultTypeUsage(EdmType edmType);
    public static TypeUsage CreateStringTypeUsage(PrimitiveType primitiveType, bool isUnicode, bool isFixedLength, int maxLength);
    public static TypeUsage CreateStringTypeUsage(PrimitiveType primitiveType, bool isUnicode, bool isFixedLength);
    public static TypeUsage CreateBinaryTypeUsage(PrimitiveType primitiveType, bool isFixedLength, int maxLength);
    public static TypeUsage CreateBinaryTypeUsage(PrimitiveType primitiveType, bool isFixedLength);
    public static TypeUsage CreateDateTimeTypeUsage(PrimitiveType primitiveType, Nullable`1<byte> precision);
    public static TypeUsage CreateDateTimeOffsetTypeUsage(PrimitiveType primitiveType, Nullable`1<byte> precision);
    public static TypeUsage CreateTimeTypeUsage(PrimitiveType primitiveType, Nullable`1<byte> precision);
    public static TypeUsage CreateDecimalTypeUsage(PrimitiveType primitiveType, byte precision, byte scale);
    public static TypeUsage CreateDecimalTypeUsage(PrimitiveType primitiveType);
    public virtual BuiltInTypeKind get_BuiltInTypeKind();
    public EdmType get_EdmType();
    public ReadOnlyMetadataCollection`1<Facet> get_Facets();
    internal TypeUsage GetModelTypeUsage();
    public bool IsSubtypeOf(TypeUsage typeUsage);
    internal virtual void SetReadOnly();
    internal virtual string get_Identity();
    internal virtual void BuildIdentity(StringBuilder builder);
    public virtual string ToString();
    internal virtual bool EdmEquals(MetadataItem item);
}
internal static class System.Data.Metadata.Edm.Util : object {
    internal static void ThrowIfReadOnly(MetadataItem item);
    [ConditionalAttribute("DEBUG")]
internal static void AssertItemHasIdentity(MetadataItem item, string argumentName);
}
internal class System.Data.Metadata.Edm.ValidationErrorEventArgs : EventArgs {
    public EdmItemError ValidationError { get; }
    public ValidationErrorEventArgs(EdmItemError validationError);
    public EdmItemError get_ValidationError();
}
internal enum System.Data.Metadata.Edm.ValidationSeverity : Enum {
    public int value__;
    public static ValidationSeverity Warning;
    public static ValidationSeverity Error;
    public static ValidationSeverity Internal;
}
internal static class System.Data.Metadata.Edm.XmlConstants : object {
    internal static string ModelNamespace_1;
    internal static string ModelNamespace_1_1;
    internal static string ModelNamespace_2;
    internal static string ModelNamespace_3;
    internal static string ProviderManifestNamespace;
    internal static string TargetNamespace_1;
    internal static string TargetNamespace_2;
    internal static string TargetNamespace_3;
    internal static string CodeGenerationSchemaNamespace;
    internal static string EntityStoreSchemaGeneratorNamespace;
    internal static string AnnotationNamespace;
    internal static string Alias;
    internal static string Provider;
    internal static string ProviderManifestToken;
    internal static string CSSpaceSchemaExtension;
    internal static string CSpaceSchemaExtension;
    internal static string SSpaceSchemaExtension;
    internal static double UndefinedVersion;
    internal static double EdmVersionForV1;
    internal static double EdmVersionForV1_1;
    internal static double EdmVersionForV2;
    internal static double EdmVersionForV3;
    internal static double SchemaVersionLatest;
    internal static double StoreVersionForV1;
    internal static double StoreVersionForV2;
    internal static double StoreVersionForV3;
    internal static string Association;
    internal static string AssociationSet;
    internal static string ComplexType;
    internal static string DefiningQuery;
    internal static string DefiningExpression;
    internal static string Documentation;
    internal static string DependentRole;
    internal static string End;
    internal static string EntityType;
    internal static string EntityContainer;
    internal static string FunctionImport;
    internal static string Key;
    internal static string NavigationProperty;
    internal static string OnDelete;
    internal static string PrincipalRole;
    internal static string Property;
    internal static string PropertyRef;
    internal static string ReferentialConstraint;
    internal static string Role;
    internal static string Schema;
    internal static string Summary;
    internal static string LongDescription;
    internal static string SampleValue;
    internal static string EnumType;
    internal static string Member;
    internal static string ValueTerm;
    internal static string Annotations;
    internal static string ValueAnnotation;
    internal static string TypeAnnotation;
    internal static string Using;
    internal static string TypeAccess;
    internal static string MethodAccess;
    internal static string SetterAccess;
    internal static string GetterAccess;
    internal static string Abstract;
    internal static string OpenType;
    internal static string Action;
    internal static string BaseType;
    internal static string EntitySet;
    internal static string EntitySetPath;
    internal static string Extends;
    internal static string FromRole;
    internal static string Multiplicity;
    internal static string Name;
    internal static string Namespace;
    internal static string Table;
    internal static string ToRole;
    internal static string Relationship;
    internal static string ElementType;
    internal static string StoreGeneratedPattern;
    internal static string IsFlags;
    internal static string IsBindable;
    internal static string IsSideEffecting;
    internal static string UnderlyingType;
    internal static string Value;
    internal static string ContainsTarget;
    internal static string Max;
    internal static string None;
    internal static string Identity;
    internal static string Computed;
    internal static string Fixed;
    internal static string CollectionKind_None;
    internal static string CollectionKind_List;
    internal static string CollectionKind_Bag;
    internal static string CollectionKind;
    internal static string In;
    internal static string Out;
    internal static string InOut;
    internal static string Variable;
    internal static string True;
    internal static string False;
    internal static string Function;
    internal static string ReturnType;
    internal static string Parameter;
    internal static string Mode;
    internal static string StoreFunctionName;
    internal static string ProviderManifestElement;
    internal static string TypesElement;
    internal static string FunctionsElement;
    internal static string TypeElement;
    internal static string FunctionElement;
    internal static string ScaleElement;
    internal static string PrecisionElement;
    internal static string MaxLengthElement;
    internal static string FacetDescriptionsElement;
    internal static string UnicodeElement;
    internal static string FixedLengthElement;
    internal static string ReturnTypeElement;
    internal static string SridElement;
    internal static string IsStrictElement;
    internal static string TypeAttribute;
    internal static string MinimumAttribute;
    internal static string MaximumAttribute;
    internal static string NamespaceAttribute;
    internal static string DefaultValueAttribute;
    internal static string ConstantAttribute;
    internal static string DestinationTypeAttribute;
    internal static string PrimitiveTypeKindAttribute;
    internal static string AggregateAttribute;
    internal static string BuiltInAttribute;
    internal static string NameAttribute;
    internal static string IgnoreFacetsAttribute;
    internal static string NiladicFunction;
    internal static string IsComposable;
    internal static string CommandText;
    internal static string ParameterTypeSemantics;
    internal static string CollectionType;
    internal static string ReferenceType;
    internal static string RowType;
    internal static string TypeRef;
    internal static string UseStrongSpatialTypes;
    internal static string XmlCommentStartString;
    internal static string XmlCommentEndString;
}
public class System.Data.MetadataException : EntityException {
    public MetadataException(string message);
    public MetadataException(string message, Exception innerException);
    private MetadataException(SerializationInfo info, StreamingContext context);
}
public class System.Data.ObjectNotFoundException : DataException {
    public ObjectNotFoundException(string message);
    public ObjectNotFoundException(string message, Exception innerException);
    private ObjectNotFoundException(SerializationInfo info, StreamingContext context);
}
public class System.Data.Objects.CompiledQuery : object {
    public static Func`17<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult> Compile(Expression`1<Func`17<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>> query);
    public static Func`16<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult> Compile(Expression`1<Func`16<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>> query);
    public static Func`15<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult> Compile(Expression`1<Func`15<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>> query);
    public static Func`14<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult> Compile(Expression`1<Func`14<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>> query);
    public static Func`13<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult> Compile(Expression`1<Func`13<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>> query);
    public static Func`12<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult> Compile(Expression`1<Func`12<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>> query);
    public static Func`11<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult> Compile(Expression`1<Func`11<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>> query);
    public static Func`10<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult> Compile(Expression`1<Func`10<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>> query);
    public static Func`9<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> Compile(Expression`1<Func`9<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>> query);
    public static Func`8<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> Compile(Expression`1<Func`8<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>> query);
    public static Func`7<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Compile(Expression`1<Func`7<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> query);
    public static Func`6<TArg0, TArg1, TArg2, TArg3, TArg4, TResult> Compile(Expression`1<Func`6<TArg0, TArg1, TArg2, TArg3, TArg4, TResult>> query);
    public static Func`5<TArg0, TArg1, TArg2, TArg3, TResult> Compile(Expression`1<Func`5<TArg0, TArg1, TArg2, TArg3, TResult>> query);
    public static Func`4<TArg0, TArg1, TArg2, TResult> Compile(Expression`1<Func`4<TArg0, TArg1, TArg2, TResult>> query);
    public static Func`3<TArg0, TArg1, TResult> Compile(Expression`1<Func`3<TArg0, TArg1, TResult>> query);
    public static Func`2<TArg0, TResult> Compile(Expression`1<Func`2<TArg0, TResult>> query);
}
public abstract class System.Data.Objects.CurrentValueRecord : DbUpdatableDataRecord {
    internal CurrentValueRecord(ObjectStateEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
    internal CurrentValueRecord(ObjectStateEntry cacheEntry);
}
[DataContractAttribute]
public abstract class System.Data.Objects.DataClasses.ComplexObject : StructuralObject {
    internal bool IsChangeTracked { get; }
    internal void AttachToParent(StructuralObject parent, string parentPropertyName);
    internal void DetachFromParent();
    protected sealed virtual void ReportPropertyChanging(string property);
    protected sealed virtual void ReportPropertyChanged(string property);
    internal sealed virtual bool get_IsChangeTracked();
    internal sealed virtual void ReportComplexPropertyChanging(string entityMemberName, ComplexObject complexObject, string complexMemberName);
    internal sealed virtual void ReportComplexPropertyChanged(string entityMemberName, ComplexObject complexObject, string complexMemberName);
}
[AttributeUsageAttribute("128")]
public class System.Data.Objects.DataClasses.EdmComplexPropertyAttribute : EdmPropertyAttribute {
}
[AttributeUsageAttribute("4")]
public class System.Data.Objects.DataClasses.EdmComplexTypeAttribute : EdmTypeAttribute {
}
[AttributeUsageAttribute("4")]
public class System.Data.Objects.DataClasses.EdmEntityTypeAttribute : EdmTypeAttribute {
}
[AttributeUsageAttribute("16")]
public class System.Data.Objects.DataClasses.EdmEnumTypeAttribute : EdmTypeAttribute {
}
[AttributeUsageAttribute("64")]
public class System.Data.Objects.DataClasses.EdmFunctionAttribute : Attribute {
    public string NamespaceName { get; }
    public string FunctionName { get; }
    public EdmFunctionAttribute(string namespaceName, string functionName);
    public string get_NamespaceName();
    public string get_FunctionName();
}
[AttributeUsageAttribute("128")]
public abstract class System.Data.Objects.DataClasses.EdmPropertyAttribute : Attribute {
}
[AttributeUsageAttribute("1")]
public class System.Data.Objects.DataClasses.EdmRelationshipAttribute : Attribute {
    public string RelationshipNamespaceName { get; }
    public string RelationshipName { get; }
    public string Role1Name { get; }
    public RelationshipMultiplicity Role1Multiplicity { get; }
    public Type Role1Type { get; }
    public string Role2Name { get; }
    public RelationshipMultiplicity Role2Multiplicity { get; }
    public Type Role2Type { get; }
    public bool IsForeignKey { get; }
    public EdmRelationshipAttribute(string relationshipNamespaceName, string relationshipName, string role1Name, RelationshipMultiplicity role1Multiplicity, Type role1Type, string role2Name, RelationshipMultiplicity role2Multiplicity, Type role2Type);
    public EdmRelationshipAttribute(string relationshipNamespaceName, string relationshipName, string role1Name, RelationshipMultiplicity role1Multiplicity, Type role1Type, string role2Name, RelationshipMultiplicity role2Multiplicity, Type role2Type, bool isForeignKey);
    public string get_RelationshipNamespaceName();
    public string get_RelationshipName();
    public string get_Role1Name();
    public RelationshipMultiplicity get_Role1Multiplicity();
    public Type get_Role1Type();
    public string get_Role2Name();
    public RelationshipMultiplicity get_Role2Multiplicity();
    public Type get_Role2Type();
    public bool get_IsForeignKey();
}
[AttributeUsageAttribute("128")]
public class System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute : EdmPropertyAttribute {
    public string RelationshipNamespaceName { get; }
    public string RelationshipName { get; }
    public string TargetRoleName { get; }
    public EdmRelationshipNavigationPropertyAttribute(string relationshipNamespaceName, string relationshipName, string targetRoleName);
    public string get_RelationshipNamespaceName();
    public string get_RelationshipName();
    public string get_TargetRoleName();
}
[AttributeUsageAttribute("128")]
public class System.Data.Objects.DataClasses.EdmScalarPropertyAttribute : EdmPropertyAttribute {
    public bool IsNullable { get; public set; }
    public bool EntityKeyProperty { get; public set; }
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public bool get_EntityKeyProperty();
    public void set_EntityKeyProperty(bool value);
}
[AttributeUsageAttribute("5")]
public class System.Data.Objects.DataClasses.EdmSchemaAttribute : Attribute {
    public EdmSchemaAttribute(string assemblyGuid);
}
public abstract class System.Data.Objects.DataClasses.EdmTypeAttribute : Attribute {
    public string Name { get; public set; }
    public string NamespaceName { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_NamespaceName();
    public void set_NamespaceName(string value);
}
public class System.Data.Objects.DataClasses.EntityCollection`1 : RelatedEnd {
    public int Count { get; }
    internal int CountInternal { get; }
    public bool IsReadOnly { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    internal EntityCollection`1(IEntityWrapper wrappedOwner, RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    internal virtual void add_AssociationChangedForObjectView(CollectionChangeEventHandler value);
    internal virtual void remove_AssociationChangedForObjectView(CollectionChangeEventHandler value);
    public sealed virtual int get_Count();
    internal int get_CountInternal();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    internal virtual void OnAssociationChanged(CollectionChangeAction collectionChangeAction, object entity);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    public virtual void Load(MergeOption mergeOption);
    public void Attach(IEnumerable`1<TEntity> entities);
    public void Attach(TEntity entity);
    internal void Load(List`1<IEntityWrapper> collection, MergeOption mergeOption);
    public sealed virtual void Add(TEntity entity);
    internal virtual void DisconnectedAdd(IEntityWrapper wrappedEntity);
    internal virtual bool DisconnectedRemove(IEntityWrapper wrappedEntity);
    public sealed virtual bool Remove(TEntity entity);
    internal bool RemoveInternal(TEntity entity);
    internal virtual void Include(bool addRelationshipAsUnchanged, bool doAttach);
    internal virtual void Exclude();
    internal virtual void ClearCollectionOrRef(IEntityWrapper wrappedEntity, RelationshipNavigation navigation, bool doCascadeDelete);
    internal virtual void ClearWrappedValues();
    internal virtual bool VerifyEntityForAdd(IEntityWrapper wrappedEntity, bool relationshipAlreadyExists);
    internal virtual bool CanSetEntityType(IEntityWrapper wrappedEntity);
    internal virtual void VerifyType(IEntityWrapper wrappedEntity);
    internal virtual bool RemoveFromLocalCache(IEntityWrapper wrappedEntity, bool resetIsLoaded, bool preserveForeignKey);
    internal virtual bool RemoveFromObjectCache(IEntityWrapper wrappedEntity);
    internal virtual void RetrieveReferentialConstraintProperties(Dictionary`2<string, KeyValuePair`2<object, IntBox>> properties, HashSet`1<object> visited);
    internal virtual bool IsEmpty();
    internal virtual void VerifyMultiplicityConstraintsForAdd(bool applyConstraints);
    internal virtual void OnRelatedEndClear();
    internal virtual bool ContainsEntity(IEntityWrapper wrappedEntity);
    public sealed virtual IEnumerator`1<TEntity> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal virtual IEnumerable GetInternalEnumerable();
    internal virtual IEnumerable`1<IEntityWrapper> GetWrappedEntities();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TEntity entity);
    public sealed virtual void CopyTo(TEntity[] array, int arrayIndex);
    internal virtual void BulkDeleteAll(List`1<object> list);
    internal virtual bool CheckIfNavigationPropertyContainsEntity(IEntityWrapper wrapper);
    internal virtual void VerifyNavigationPropertyForAdd(IEntityWrapper wrapper);
    [OnSerializingAttribute]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public void OnSerializing(StreamingContext context);
    [EditorBrowsableAttribute("1")]
[OnDeserializedAttribute]
[BrowsableAttribute("False")]
public void OnCollectionDeserialized(StreamingContext context);
    public ObjectQuery`1<TEntity> CreateSourceQuery();
    internal virtual IEnumerable CreateSourceQueryInternal();
    internal virtual void AddToLocalCache(IEntityWrapper wrappedEntity, bool applyConstraints);
    internal virtual void AddToObjectCache(IEntityWrapper wrappedEntity);
}
[DataContractAttribute]
public abstract class System.Data.Objects.DataClasses.EntityObject : StructuralObject {
    [XmlIgnoreAttribute]
[BrowsableAttribute("False")]
public EntityState EntityState { get; }
    [BrowsableAttribute("False")]
[DataMemberAttribute]
public EntityKey EntityKey { get; public set; }
    private RelationshipManager System.Data.Objects.DataClasses.IEntityWithRelationships.RelationshipManager { get; }
    internal bool IsChangeTracked { get; }
    private static EntityObject();
    public EntityState get_EntityState();
    public sealed virtual EntityKey get_EntityKey();
    public sealed virtual void set_EntityKey(EntityKey value);
    private sealed virtual override void System.Data.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(IEntityChangeTracker changeTracker);
    private sealed virtual override RelationshipManager System.Data.Objects.DataClasses.IEntityWithRelationships.get_RelationshipManager();
    protected sealed virtual void ReportPropertyChanging(string property);
    protected sealed virtual void ReportPropertyChanged(string property);
    internal sealed virtual bool get_IsChangeTracked();
    internal sealed virtual void ReportComplexPropertyChanging(string entityMemberName, ComplexObject complexObject, string complexMemberName);
    internal sealed virtual void ReportComplexPropertyChanged(string entityMemberName, ComplexObject complexObject, string complexMemberName);
}
[DataContractAttribute]
public abstract class System.Data.Objects.DataClasses.EntityReference : RelatedEnd {
    [DataMemberAttribute]
public EntityKey EntityKey { get; public set; }
    internal EntityKey AttachedEntityKey { get; }
    internal EntityKey DetachedEntityKey { get; internal set; }
    internal EntityKey CachedForeignKey { get; }
    internal IEntityWrapper CachedValue { get; }
    internal IEntityWrapper ReferenceValue { get; internal set; }
    internal bool CanDeferredLoad { get; }
    internal EntityReference(IEntityWrapper wrappedOwner, RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    public EntityKey get_EntityKey();
    public void set_EntityKey(EntityKey value);
    internal void SetEntityKey(EntityKey value, bool forceFixup);
    internal bool AttemptToNullFKsOnRefOrKeySetToNull();
    internal EntityKey get_AttachedEntityKey();
    internal EntityKey get_DetachedEntityKey();
    internal void set_DetachedEntityKey(EntityKey value);
    internal EntityKey get_CachedForeignKey();
    internal void SetCachedForeignKey(EntityKey newForeignKey, EntityEntry source);
    internal IEnumerable`1<EntityKey> GetAllKeyValues();
    internal abstract virtual IEntityWrapper get_CachedValue();
    internal abstract virtual IEntityWrapper get_ReferenceValue();
    internal abstract virtual void set_ReferenceValue(IEntityWrapper value);
    internal EntityKey ValidateOwnerWithRIConstraints(IEntityWrapper targetEntity, EntityKey targetEntityKey, bool checkBothEnds);
    internal void ValidateSettingRIConstraints(IEntityWrapper targetEntity, bool settingToNull, bool changingForeignKeyValue);
    internal virtual bool get_CanDeferredLoad();
    internal void UpdateForeignKeyValues(IEntityWrapper dependentEntity, IEntityWrapper principalEntity, Dictionary`2<int, object> changedFKs, bool forceChange);
    internal void UpdateForeignKeyValues(IEntityWrapper dependentEntity, EntityKey principalKey);
    internal object GetDependentEndOfReferentialConstraint(object relatedValue);
    internal bool NavigationPropertyIsNullOrMissing();
    internal void NullAllForeignKeys();
}
[DataContractAttribute]
public class System.Data.Objects.DataClasses.EntityReference`1 : EntityReference {
    [XmlIgnoreAttribute]
[SoapIgnoreAttribute]
public TEntity Value { get; public set; }
    internal IEntityWrapper CachedValue { get; }
    internal IEntityWrapper ReferenceValue { get; internal set; }
    internal EntityReference`1(IEntityWrapper wrappedOwner, RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    public TEntity get_Value();
    public void set_Value(TEntity value);
    internal virtual IEntityWrapper get_CachedValue();
    internal virtual IEntityWrapper get_ReferenceValue();
    internal virtual void set_ReferenceValue(IEntityWrapper value);
    public virtual void Load(MergeOption mergeOption);
    internal virtual IEnumerable GetInternalEnumerable();
    internal virtual IEnumerable`1<IEntityWrapper> GetWrappedEntities();
    public void Attach(TEntity entity);
    internal virtual void Include(bool addRelationshipAsUnchanged, bool doAttach);
    internal virtual void Exclude();
    internal virtual void ClearCollectionOrRef(IEntityWrapper wrappedEntity, RelationshipNavigation navigation, bool doCascadeDelete);
    internal virtual void ClearWrappedValues();
    internal virtual bool VerifyEntityForAdd(IEntityWrapper wrappedEntity, bool relationshipAlreadyExists);
    internal virtual bool CanSetEntityType(IEntityWrapper wrappedEntity);
    internal virtual void VerifyType(IEntityWrapper wrappedEntity);
    internal virtual void DisconnectedAdd(IEntityWrapper wrappedEntity);
    internal virtual bool DisconnectedRemove(IEntityWrapper wrappedEntity);
    internal virtual bool RemoveFromLocalCache(IEntityWrapper wrappedEntity, bool resetIsLoaded, bool preserveForeignKey);
    internal virtual bool RemoveFromObjectCache(IEntityWrapper wrappedEntity);
    internal virtual void RetrieveReferentialConstraintProperties(Dictionary`2<string, KeyValuePair`2<object, IntBox>> properties, HashSet`1<object> visited);
    internal virtual bool IsEmpty();
    internal virtual void VerifyMultiplicityConstraintsForAdd(bool applyConstraints);
    internal virtual void OnRelatedEndClear();
    internal virtual bool ContainsEntity(IEntityWrapper wrappedEntity);
    public ObjectQuery`1<TEntity> CreateSourceQuery();
    internal virtual IEnumerable CreateSourceQueryInternal();
    internal void InitializeWithValue(RelatedEnd relatedEnd);
    internal virtual bool CheckIfNavigationPropertyContainsEntity(IEntityWrapper wrapper);
    internal virtual void VerifyNavigationPropertyForAdd(IEntityWrapper wrapper);
    [BrowsableAttribute("False")]
[OnDeserializedAttribute]
[EditorBrowsableAttribute("1")]
public void OnRefDeserialized(StreamingContext context);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[OnSerializingAttribute]
public void OnSerializing(StreamingContext context);
    internal virtual void AddToLocalCache(IEntityWrapper wrappedEntity, bool applyConstraints);
    internal virtual void AddToObjectCache(IEntityWrapper wrappedEntity);
}
public interface System.Data.Objects.DataClasses.IEntityChangeTracker {
    public EntityState EntityState { get; }
    public abstract virtual void EntityMemberChanging(string entityMemberName);
    public abstract virtual void EntityMemberChanged(string entityMemberName);
    public abstract virtual void EntityComplexMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName);
    public abstract virtual void EntityComplexMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName);
    public abstract virtual EntityState get_EntityState();
}
public interface System.Data.Objects.DataClasses.IEntityWithChangeTracker {
    public abstract virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
}
public interface System.Data.Objects.DataClasses.IEntityWithKey {
    public EntityKey EntityKey { get; public set; }
    public abstract virtual EntityKey get_EntityKey();
    public abstract virtual void set_EntityKey(EntityKey value);
}
public interface System.Data.Objects.DataClasses.IEntityWithRelationships {
    public RelationshipManager RelationshipManager { get; }
    public abstract virtual RelationshipManager get_RelationshipManager();
}
public interface System.Data.Objects.DataClasses.IRelatedEnd {
    public bool IsLoaded { get; }
    public string RelationshipName { get; }
    public string SourceRoleName { get; }
    public string TargetRoleName { get; }
    public RelationshipSet RelationshipSet { get; }
    public abstract virtual bool get_IsLoaded();
    public abstract virtual string get_RelationshipName();
    public abstract virtual string get_SourceRoleName();
    public abstract virtual string get_TargetRoleName();
    public abstract virtual RelationshipSet get_RelationshipSet();
    public abstract virtual void Load();
    public abstract virtual void Load(MergeOption mergeOption);
    public abstract virtual void Add(IEntityWithRelationships entity);
    public abstract virtual void Add(object entity);
    public abstract virtual bool Remove(IEntityWithRelationships entity);
    public abstract virtual bool Remove(object entity);
    public abstract virtual void Attach(IEntityWithRelationships entity);
    public abstract virtual void Attach(object entity);
    public abstract virtual IEnumerable CreateSourceQuery();
    public abstract virtual IEnumerator GetEnumerator();
}
internal interface System.Data.Objects.DataClasses.IRelationshipFixer {
    public abstract virtual RelatedEnd CreateSourceEnd(RelationshipNavigation navigation, RelationshipManager relationshipManager);
}
[DataContractAttribute]
public abstract class System.Data.Objects.DataClasses.RelatedEnd : object {
    internal bool _isLoaded;
    internal bool _suppressEvents;
    internal CollectionChangeEventHandler _onAssociationChanged;
    internal bool IsForeignKey { get; }
    internal RelationshipNavigation RelationshipNavigation { get; }
    [XmlIgnoreAttribute]
[SoapIgnoreAttribute]
public string RelationshipName { get; }
    [XmlIgnoreAttribute]
[SoapIgnoreAttribute]
public string SourceRoleName { get; }
    [XmlIgnoreAttribute]
[SoapIgnoreAttribute]
public string TargetRoleName { get; }
    internal IEntityWrapper WrappedOwner { get; }
    internal ObjectContext ObjectContext { get; }
    [XmlIgnoreAttribute]
[SoapIgnoreAttribute]
public RelationshipSet RelationshipSet { get; }
    internal RelationshipType RelationMetadata { get; }
    internal RelationshipEndMember ToEndMember { get; }
    internal bool UsingNoTracking { get; }
    internal MergeOption DefaultMergeOption { get; }
    internal RelationshipEndMember FromEndProperty { get; }
    [XmlIgnoreAttribute]
[SoapIgnoreAttribute]
public bool IsLoaded { get; }
    internal bool CanDeferredLoad { get; }
    internal NavigationProperty NavigationProperty { get; }
    internal NavigationPropertyAccessor TargetAccessor { get; }
    internal RelatedEnd(IEntityWrapper wrappedOwner, RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    public void add_AssociationChanged(CollectionChangeEventHandler value);
    public void remove_AssociationChanged(CollectionChangeEventHandler value);
    internal virtual void add_AssociationChangedForObjectView(CollectionChangeEventHandler value);
    internal virtual void remove_AssociationChangedForObjectView(CollectionChangeEventHandler value);
    internal bool get_IsForeignKey();
    internal RelationshipNavigation get_RelationshipNavigation();
    public sealed virtual string get_RelationshipName();
    public sealed virtual string get_SourceRoleName();
    public sealed virtual string get_TargetRoleName();
    private sealed virtual override IEnumerable System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery();
    internal IEntityWrapper get_WrappedOwner();
    internal ObjectContext get_ObjectContext();
    internal virtual void BulkDeleteAll(List`1<object> list);
    public sealed virtual RelationshipSet get_RelationshipSet();
    internal RelationshipType get_RelationMetadata();
    internal RelationshipEndMember get_ToEndMember();
    internal bool get_UsingNoTracking();
    internal MergeOption get_DefaultMergeOption();
    internal RelationshipEndMember get_FromEndProperty();
    public sealed virtual bool get_IsLoaded();
    internal void SetIsLoaded(bool value);
    internal ObjectQuery`1<TEntity> CreateSourceQuery(MergeOption mergeOption, Boolean& hasResults);
    internal ObjectQuery`1<TEntity> ValidateLoad(MergeOption mergeOption, string relatedEndName, Boolean& hasResults);
    public sealed virtual void Load();
    public abstract virtual void Load(MergeOption mergeOption);
    internal void DeferredLoad();
    internal virtual bool get_CanDeferredLoad();
    internal void Merge(IEnumerable`1<TEntity> collection, MergeOption mergeOption, bool setIsLoaded);
    internal void Merge(List`1<IEntityWrapper> collection, MergeOption mergeOption, bool setIsLoaded);
    private sealed virtual override void System.Data.Objects.DataClasses.IRelatedEnd.Attach(IEntityWithRelationships entity);
    private sealed virtual override void System.Data.Objects.DataClasses.IRelatedEnd.Attach(object entity);
    internal void Attach(IEnumerable`1<IEntityWrapper> wrappedEntities, bool allowCollection);
    internal void ValidateOwnerForAttach();
    internal void ValidateEntityForAttach(IEntityWrapper wrappedEntity, int index, bool allowCollection);
    internal abstract virtual IEnumerable CreateSourceQueryInternal();
    private sealed virtual override void System.Data.Objects.DataClasses.IRelatedEnd.Add(IEntityWithRelationships entity);
    private sealed virtual override void System.Data.Objects.DataClasses.IRelatedEnd.Add(object entity);
    internal void Add(IEntityWrapper wrappedEntity);
    private sealed virtual override bool System.Data.Objects.DataClasses.IRelatedEnd.Remove(IEntityWithRelationships entity);
    private sealed virtual override bool System.Data.Objects.DataClasses.IRelatedEnd.Remove(object entity);
    internal bool Remove(IEntityWrapper wrappedEntity, bool preserveForeignKey);
    internal abstract virtual void DisconnectedAdd(IEntityWrapper wrappedEntity);
    internal abstract virtual bool DisconnectedRemove(IEntityWrapper wrappedEntity);
    internal void Add(IEntityWrapper wrappedEntity, bool applyConstraints);
    internal void CheckRelationEntitySet(EntitySet set);
    internal void ValidateStateForAdd(IEntityWrapper wrappedEntity);
    internal void Add(IEntityWrapper wrappedTarget, bool applyConstraints, bool addRelationshipAsUnchanged, bool relationshipAlreadyExists, bool allowModifyingOtherEndOfRelationship, bool forceForeignKeyChanges);
    internal void Remove(IEntityWrapper wrappedEntity, bool doFixup, bool deleteEntity, bool deleteOwner, bool applyReferentialConstraints, bool preserveForeignKey);
    internal bool IsDependentEndOfReferentialConstraint(bool checkIdentifying);
    internal bool IsPrincipalEndOfReferentialConstraint();
    internal static bool CheckIfAllPropertiesAreKeyProperties(String[] keyMemberNames, ReadOnlyMetadataCollection`1<EdmProperty> toProperties);
    internal void IncludeEntity(IEntityWrapper wrappedEntity, bool addRelationshipAsUnchanged, bool doAttach);
    internal void MarkForeignKeyPropertiesModified();
    internal abstract virtual bool CheckIfNavigationPropertyContainsEntity(IEntityWrapper wrapper);
    internal abstract virtual void VerifyNavigationPropertyForAdd(IEntityWrapper wrapper);
    internal void AddToNavigationProperty(IEntityWrapper wrapper);
    internal void RemoveFromNavigationProperty(IEntityWrapper wrapper);
    internal void ExcludeEntity(IEntityWrapper wrappedEntity);
    internal RelationshipEntry FindRelationshipEntryInObjectStateManager(IEntityWrapper wrappedEntity);
    internal void Clear(IEntityWrapper wrappedEntity, RelationshipNavigation navigation, bool doCascadeDelete);
    internal bool CheckReferentialConstraintProperties(EntityEntry ownerEntry);
    internal static bool VerifyRIConstraintsWithRelatedEntry(ReferentialConstraint constraint, Func`2<string, object> getDependentPropertyValue, EntityKey principalKey);
    public sealed virtual IEnumerator GetEnumerator();
    internal void RemoveAll();
    internal void DetachAll(EntityState ownerEntityState);
    internal void AddToCache(IEntityWrapper wrappedEntity, bool applyConstraints);
    internal abstract virtual void AddToLocalCache(IEntityWrapper wrappedEntity, bool applyConstraints);
    internal abstract virtual void AddToObjectCache(IEntityWrapper wrappedEntity);
    internal bool RemoveFromCache(IEntityWrapper wrappedEntity, bool resetIsLoaded, bool preserveForeignKey);
    internal abstract virtual bool RemoveFromLocalCache(IEntityWrapper wrappedEntity, bool resetIsLoaded, bool preserveForeignKey);
    internal abstract virtual bool RemoveFromObjectCache(IEntityWrapper wrappedEntity);
    internal abstract virtual bool VerifyEntityForAdd(IEntityWrapper wrappedEntity, bool relationshipAlreadyExists);
    internal abstract virtual void VerifyType(IEntityWrapper wrappedEntity);
    internal abstract virtual bool CanSetEntityType(IEntityWrapper wrappedEntity);
    internal abstract virtual void Include(bool addRelationshipAsUnchanged, bool doAttach);
    internal abstract virtual void Exclude();
    internal abstract virtual void ClearCollectionOrRef(IEntityWrapper wrappedEntity, RelationshipNavigation navigation, bool doCascadeDelete);
    internal abstract virtual bool ContainsEntity(IEntityWrapper wrappedEntity);
    internal abstract virtual IEnumerable GetInternalEnumerable();
    internal abstract virtual IEnumerable`1<IEntityWrapper> GetWrappedEntities();
    internal abstract virtual void RetrieveReferentialConstraintProperties(Dictionary`2<string, KeyValuePair`2<object, IntBox>> keyValues, HashSet`1<object> visited);
    internal abstract virtual bool IsEmpty();
    internal abstract virtual void OnRelatedEndClear();
    internal abstract virtual void ClearWrappedValues();
    internal abstract virtual void VerifyMultiplicityConstraintsForAdd(bool applyConstraints);
    internal virtual void OnAssociationChanged(CollectionChangeAction collectionChangeAction, object entity);
    internal EntitySet GetTargetEntitySetFromRelationshipSet();
    internal static void RemoveEntityFromObjectStateManager(IEntityWrapper wrappedEntity);
    internal void AttachContext(ObjectContext context, MergeOption mergeOption);
    internal void AttachContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    internal void FindRelationshipSet(ObjectContext context, EntitySet entitySet, EdmType& relationshipType, RelationshipSet& relationshipSet);
    internal void DetachContext();
    internal static IEnumerable`1<U> GetResults(ObjectQuery`1<U> query);
    internal RelatedEnd GetOtherEndOfRelationship(IEntityWrapper wrappedEntity);
    internal void CheckOwnerNull();
    internal void InitializeRelatedEnd(IEntityWrapper wrappedOwner, RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    internal void SetWrappedOwner(IEntityWrapper wrappedOwner);
    internal static bool IsValidEntityKeyType(EntityKey entityKey);
    [EditorBrowsableAttribute("1")]
[OnDeserializedAttribute]
[BrowsableAttribute("False")]
public void OnDeserialized(StreamingContext context);
    internal NavigationProperty get_NavigationProperty();
    internal NavigationPropertyAccessor get_TargetAccessor();
}
internal class System.Data.Objects.DataClasses.RelationshipFixer`2 : object {
    internal RelationshipFixer`2(RelationshipMultiplicity sourceRoleMultiplicity, RelationshipMultiplicity targetRoleMultiplicity);
    private sealed virtual override RelatedEnd System.Data.Objects.DataClasses.IRelationshipFixer.CreateSourceEnd(RelationshipNavigation navigation, RelationshipManager relationshipManager);
}
public enum System.Data.Objects.DataClasses.RelationshipKind : Enum {
    public int value__;
    public static RelationshipKind Association;
}
public class System.Data.Objects.DataClasses.RelationshipManager : object {
    internal IEnumerable`1<RelatedEnd> Relationships { get; }
    internal bool NodeVisited { get; internal set; }
    internal IEntityWrapper WrappedOwner { get; }
    internal bool HasRelationships { get; }
    internal IEnumerable`1<RelatedEnd> get_Relationships();
    internal bool get_NodeVisited();
    internal void set_NodeVisited(bool value);
    internal IEntityWrapper get_WrappedOwner();
    public static RelationshipManager Create(IEntityWithRelationships owner);
    internal static RelationshipManager Create();
    internal void SetWrappedOwner(IEntityWrapper wrappedOwner, object expectedOwner);
    internal EntityCollection`1<TTargetEntity> GetRelatedCollection(string relationshipName, string sourceRoleName, string targetRoleName, NavigationPropertyAccessor sourceAccessor, NavigationPropertyAccessor targetAccessor, RelationshipMultiplicity sourceRoleMultiplicity, RelatedEnd existingRelatedEnd);
    internal EntityReference`1<TTargetEntity> GetRelatedReference(string relationshipName, string sourceRoleName, string targetRoleName, NavigationPropertyAccessor sourceAccessor, NavigationPropertyAccessor targetAccessor, RelationshipMultiplicity sourceRoleMultiplicity, RelatedEnd existingRelatedEnd);
    internal RelatedEnd GetRelatedEnd(string navigationProperty, bool throwArgumentException);
    public IRelatedEnd GetRelatedEnd(string relationshipName, string targetRoleName);
    internal RelatedEnd GetRelatedEndInternal(string relationshipName, string targetRoleName);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void InitializeRelatedReference(string relationshipName, string targetRoleName, EntityReference`1<TTargetEntity> entityReference);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void InitializeRelatedCollection(string relationshipName, string targetRoleName, EntityCollection`1<TTargetEntity> entityCollection);
    internal static bool TryGetRelationshipType(IEntityWrapper wrappedOwner, Type entityClrType, string relationshipName, AssociationType& associationType);
    internal static Exception UnableToGetMetadata(IEntityWrapper wrappedOwner, string relationshipName);
    public EntityCollection`1<TTargetEntity> GetRelatedCollection(string relationshipName, string targetRoleName);
    public EntityReference`1<TTargetEntity> GetRelatedReference(string relationshipName, string targetRoleName);
    internal RelatedEnd GetRelatedEnd(RelationshipNavigation navigation, IRelationshipFixer relationshipFixer);
    internal RelatedEnd CreateRelatedEnd(RelationshipNavigation navigation, RelationshipMultiplicity sourceRoleMultiplicity, RelationshipMultiplicity targetRoleMultiplicity, RelatedEnd existingRelatedEnd);
    public IEnumerable`1<IRelatedEnd> GetAllRelatedEnds();
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[OnSerializingAttribute]
public void OnSerializing(StreamingContext context);
    internal bool get_HasRelationships();
    internal void AddRelatedEntitiesToObjectStateManager(bool doAttach);
    internal static void RemoveRelatedEntitiesFromObjectStateManager(IEntityWrapper wrappedEntity);
    internal void RemoveEntityFromRelationships();
    internal void NullAllFKsInDependentsForWhichThisIsThePrincipal();
    internal void DetachEntityFromRelationships(EntityState ownerEntityState);
    internal void RemoveEntity(string toRole, string relationshipName, IEntityWrapper wrappedEntity);
    internal void ClearRelatedEndWrappers();
    internal void RetrieveReferentialConstraintProperties(Dictionary`2& properties, HashSet`1<object> visited, bool includeOwnValues);
    internal void CheckReferentialConstraintProperties(EntityEntry ownerEntry);
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[OnDeserializedAttribute]
public void OnDeserialized(StreamingContext context);
    internal bool FindNamesOfReferentialConstraintProperties(List`1& propertiesToRetrieve, Boolean& propertiesToPropagateExist, bool skipFK);
    internal bool IsOwner(IEntityWrapper wrappedEntity);
    internal void AttachContextToRelatedEnds(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    internal void ResetContextOnRelatedEnds(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    internal void DetachContextFromRelatedEnds();
    [ConditionalAttribute("DEBUG")]
internal void VerifyIsNotRelated();
}
internal class System.Data.Objects.DataClasses.RelationshipNavigation : object {
    internal string RelationshipName { get; }
    internal string From { get; }
    internal string To { get; }
    internal NavigationPropertyAccessor ToPropertyAccessor { get; }
    internal bool IsInitialized { get; }
    internal RelationshipNavigation Reverse { get; }
    internal RelationshipNavigation(string relationshipName, string from, string to, NavigationPropertyAccessor fromAccessor, NavigationPropertyAccessor toAccessor);
    internal string get_RelationshipName();
    internal string get_From();
    internal string get_To();
    internal NavigationPropertyAccessor get_ToPropertyAccessor();
    internal bool get_IsInitialized();
    internal void InitializeAccessors(NavigationPropertyAccessor fromAccessor, NavigationPropertyAccessor toAccessor);
    internal RelationshipNavigation get_Reverse();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[DataContractAttribute]
public abstract class System.Data.Objects.DataClasses.StructuralObject : object {
    public static string EntityKeyPropertyName;
    internal bool IsChangeTracked { get; }
    private static StructuralObject();
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    protected virtual void OnPropertyChanged(string property);
    protected virtual void OnPropertyChanging(string property);
    protected static DateTime DefaultDateTimeValue();
    protected virtual void ReportPropertyChanging(string property);
    protected virtual void ReportPropertyChanged(string property);
    protected internal T GetValidValue(T currentValue, string property, bool isNullable, bool isInitialized);
    internal abstract virtual void ReportComplexPropertyChanging(string entityMemberName, ComplexObject complexObject, string complexMemberName);
    internal abstract virtual void ReportComplexPropertyChanged(string entityMemberName, ComplexObject complexObject, string complexMemberName);
    internal abstract virtual bool get_IsChangeTracked();
    protected internal static bool BinaryEquals(Byte[] first, Byte[] second);
    protected internal static Byte[] GetValidValue(Byte[] currentValue);
    protected internal static Byte[] SetValidValue(Byte[] value, bool isNullable, string propertyName);
    protected internal static Byte[] SetValidValue(Byte[] value, bool isNullable);
    protected internal static bool SetValidValue(bool value, string propertyName);
    protected internal static bool SetValidValue(bool value);
    protected internal static Nullable`1<bool> SetValidValue(Nullable`1<bool> value, string propertyName);
    protected internal static Nullable`1<bool> SetValidValue(Nullable`1<bool> value);
    protected internal static byte SetValidValue(byte value, string propertyName);
    protected internal static byte SetValidValue(byte value);
    protected internal static Nullable`1<byte> SetValidValue(Nullable`1<byte> value, string propertyName);
    protected internal static Nullable`1<byte> SetValidValue(Nullable`1<byte> value);
    [CLSCompliantAttribute("False")]
protected internal static sbyte SetValidValue(sbyte value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static sbyte SetValidValue(sbyte value);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<sbyte> SetValidValue(Nullable`1<sbyte> value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<sbyte> SetValidValue(Nullable`1<sbyte> value);
    protected internal static DateTime SetValidValue(DateTime value, string propertyName);
    protected internal static DateTime SetValidValue(DateTime value);
    protected internal static Nullable`1<DateTime> SetValidValue(Nullable`1<DateTime> value, string propertyName);
    protected internal static Nullable`1<DateTime> SetValidValue(Nullable`1<DateTime> value);
    protected internal static TimeSpan SetValidValue(TimeSpan value, string propertyName);
    protected internal static TimeSpan SetValidValue(TimeSpan value);
    protected internal static Nullable`1<TimeSpan> SetValidValue(Nullable`1<TimeSpan> value, string propertyName);
    protected internal static Nullable`1<TimeSpan> SetValidValue(Nullable`1<TimeSpan> value);
    protected internal static DateTimeOffset SetValidValue(DateTimeOffset value, string propertyName);
    protected internal static DateTimeOffset SetValidValue(DateTimeOffset value);
    protected internal static Nullable`1<DateTimeOffset> SetValidValue(Nullable`1<DateTimeOffset> value, string propertyName);
    protected internal static Nullable`1<DateTimeOffset> SetValidValue(Nullable`1<DateTimeOffset> value);
    protected internal static decimal SetValidValue(decimal value, string propertyName);
    protected internal static decimal SetValidValue(decimal value);
    protected internal static Nullable`1<decimal> SetValidValue(Nullable`1<decimal> value, string propertyName);
    protected internal static Nullable`1<decimal> SetValidValue(Nullable`1<decimal> value);
    protected internal static double SetValidValue(double value, string propertyName);
    protected internal static double SetValidValue(double value);
    protected internal static Nullable`1<double> SetValidValue(Nullable`1<double> value, string propertyName);
    protected internal static Nullable`1<double> SetValidValue(Nullable`1<double> value);
    protected internal static float SetValidValue(float value, string propertyName);
    protected internal static float SetValidValue(float value);
    protected internal static Nullable`1<float> SetValidValue(Nullable`1<float> value, string propertyName);
    protected internal static Nullable`1<float> SetValidValue(Nullable`1<float> value);
    protected internal static Guid SetValidValue(Guid value, string propertyName);
    protected internal static Guid SetValidValue(Guid value);
    protected internal static Nullable`1<Guid> SetValidValue(Nullable`1<Guid> value, string propertyName);
    protected internal static Nullable`1<Guid> SetValidValue(Nullable`1<Guid> value);
    protected internal static short SetValidValue(short value, string propertyName);
    protected internal static short SetValidValue(short value);
    protected internal static Nullable`1<short> SetValidValue(Nullable`1<short> value, string propertyName);
    protected internal static Nullable`1<short> SetValidValue(Nullable`1<short> value);
    protected internal static int SetValidValue(int value, string propertyName);
    protected internal static int SetValidValue(int value);
    protected internal static Nullable`1<int> SetValidValue(Nullable`1<int> value, string propertyName);
    protected internal static Nullable`1<int> SetValidValue(Nullable`1<int> value);
    protected internal static long SetValidValue(long value, string propertyName);
    protected internal static long SetValidValue(long value);
    protected internal static Nullable`1<long> SetValidValue(Nullable`1<long> value, string propertyName);
    protected internal static Nullable`1<long> SetValidValue(Nullable`1<long> value);
    [CLSCompliantAttribute("False")]
protected internal static ushort SetValidValue(ushort value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static ushort SetValidValue(ushort value);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<ushort> SetValidValue(Nullable`1<ushort> value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<ushort> SetValidValue(Nullable`1<ushort> value);
    [CLSCompliantAttribute("False")]
protected internal static UInt32 SetValidValue(UInt32 value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static UInt32 SetValidValue(UInt32 value);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<UInt32> SetValidValue(Nullable`1<UInt32> value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<UInt32> SetValidValue(Nullable`1<UInt32> value);
    [CLSCompliantAttribute("False")]
protected internal static ulong SetValidValue(ulong value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static ulong SetValidValue(ulong value);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<ulong> SetValidValue(Nullable`1<ulong> value, string propertyName);
    [CLSCompliantAttribute("False")]
protected internal static Nullable`1<ulong> SetValidValue(Nullable`1<ulong> value);
    protected internal static string SetValidValue(string value, bool isNullable, string propertyName);
    protected internal static string SetValidValue(string value, bool isNullable);
    protected internal static DbGeography SetValidValue(DbGeography value, bool isNullable, string propertyName);
    protected internal static DbGeography SetValidValue(DbGeography value, bool isNullable);
    protected internal static DbGeometry SetValidValue(DbGeometry value, bool isNullable, string propertyName);
    protected internal static DbGeometry SetValidValue(DbGeometry value, bool isNullable);
    protected internal T SetValidValue(T oldValue, T newValue, string property);
    protected internal static TComplex VerifyComplexObjectIsNotNull(TComplex complexObject, string propertyName);
}
internal class System.Data.Objects.DataRecordObjectView : ObjectView`1<DbDataRecord> {
    internal DataRecordObjectView(IObjectViewData`1<DbDataRecord> viewData, object eventDataSource, RowType rowType, Type propertyComponentType);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Objects.DbUpdatableDataRecord : DbDataRecord {
    internal StateManagerTypeMetadata _metadata;
    internal ObjectStateEntry _cacheEntry;
    internal object _userObject;
    internal DataRecordInfo _recordInfo;
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public DataRecordInfo DataRecordInfo { get; }
    internal DbUpdatableDataRecord(ObjectStateEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
    internal DbUpdatableDataRecord(ObjectStateEntry cacheEntry);
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    protected abstract virtual object GetRecordValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public void SetBoolean(int ordinal, bool value);
    public void SetByte(int ordinal, byte value);
    public void SetChar(int ordinal, char value);
    public void SetDataRecord(int ordinal, IDataRecord value);
    public void SetDateTime(int ordinal, DateTime value);
    public void SetDecimal(int ordinal, decimal value);
    public void SetDouble(int ordinal, double value);
    public void SetFloat(int ordinal, float value);
    public void SetGuid(int ordinal, Guid value);
    public void SetInt16(int ordinal, short value);
    public void SetInt32(int ordinal, int value);
    public void SetInt64(int ordinal, long value);
    public void SetString(int ordinal, string value);
    public void SetValue(int ordinal, object value);
    public int SetValues(Object[] values);
    public void SetDBNull(int ordinal);
    public virtual DataRecordInfo get_DataRecordInfo();
    public sealed virtual DbDataRecord GetDataRecord(int ordinal);
    public sealed virtual DbDataReader GetDataReader(int i);
    protected abstract virtual void SetRecordValue(int ordinal, object value);
}
internal class System.Data.Objects.ELinq.Binding : object {
    internal Expression LinqExpression;
    internal DbExpression CqtExpression;
    internal Binding(Expression linqExpression, DbExpression cqtExpression);
}
internal class System.Data.Objects.ELinq.BindingContext : object {
    internal void PushBindingScope(Binding binding);
    internal void PopBindingScope();
    internal bool TryGetBoundExpression(Expression linqExpression, DbExpression& cqtExpression);
}
internal class System.Data.Objects.ELinq.CompiledELinqQueryState : ELinqQueryState {
    internal Expression Expression { get; }
    internal CompiledELinqQueryState(Type elementType, ObjectContext context, LambdaExpression lambda, Guid cacheToken, Object[] parameterValues);
    internal virtual ObjectQueryExecutionPlan GetExecutionPlan(Nullable`1<MergeOption> forMergeOption);
    protected virtual TypeUsage GetResultType();
    internal virtual Expression get_Expression();
    protected virtual ExpressionConverter CreateExpressionConverter();
}
internal class System.Data.Objects.ELinq.ELinqQueryState : ObjectQueryState {
    internal Expression Expression { get; }
    internal ELinqQueryState(Type elementType, ObjectContext context, Expression expression);
    internal ELinqQueryState(Type elementType, ObjectQuery query, Expression expression);
    protected virtual TypeUsage GetResultType();
    internal virtual ObjectQueryExecutionPlan GetExecutionPlan(Nullable`1<MergeOption> forMergeOption);
    internal virtual ObjectQueryState Include(ObjectQuery`1<TElementType> sourceQuery, string includePath);
    internal virtual bool TryGetCommandText(String& commandText);
    internal virtual bool TryGetExpression(Expression& expression);
    internal virtual Expression get_Expression();
    protected virtual ExpressionConverter CreateExpressionConverter();
}
internal class System.Data.Objects.ELinq.ExpressionConverter : object {
    internal static string s_entityCollectionCountPropertyName;
    internal static string s_nullableHasValuePropertyName;
    internal static string s_nullableValuePropertyName;
    internal static string KeyColumnName;
    internal static string GroupColumnName;
    internal static string EntityCollectionOwnerColumnName;
    internal static string EntityCollectionElementsColumnName;
    internal static string EdmNamespaceName;
    internal DbProviderManifest ProviderManifest { get; }
    internal Nullable`1<MergeOption> PropagatedMergeOption { get; }
    internal Span PropagatedSpan { get; }
    internal Func`1<bool> RecompileRequired { get; }
    internal int IgnoreInclude { get; internal set; }
    internal AliasGenerator AliasGenerator { get; }
    internal ExpressionConverter(Funcletizer funcletizer, Expression expression);
    private static ExpressionConverter();
    internal DbProviderManifest get_ProviderManifest();
    internal ReadOnlyCollection`1<KeyValuePair`2<ObjectParameter, QueryParameterExpression>> GetParameters();
    internal Nullable`1<MergeOption> get_PropagatedMergeOption();
    internal Span get_PropagatedSpan();
    internal Func`1<bool> get_RecompileRequired();
    internal int get_IgnoreInclude();
    internal void set_IgnoreInclude(int value);
    internal AliasGenerator get_AliasGenerator();
    internal DbExpression Convert();
    internal static bool CanFuncletizePropertyInfo(PropertyInfo propertyInfo);
    internal bool CanIncludeSpanInfo();
    internal void ValidateInitializerMetadata(InitializerMetadata metadata);
    internal static string DescribeClrType(Type clrType);
}
internal class System.Data.Objects.ELinq.Funcletizer : object {
    internal ObjectContext RootContext { get; }
    internal ParameterExpression RootContextParameter { get; }
    internal ConstantExpression RootContextExpression { get; }
    internal bool IsCompiledQuery { get; }
    private static Funcletizer();
    internal static Funcletizer CreateCompiledQueryEvaluationFuncletizer(ObjectContext rootContext, ParameterExpression rootContextParameter, ReadOnlyCollection`1<ParameterExpression> compiledQueryParameters);
    internal static Funcletizer CreateCompiledQueryLockdownFuncletizer();
    internal static Funcletizer CreateQueryFuncletizer(ObjectContext rootContext);
    internal ObjectContext get_RootContext();
    internal ParameterExpression get_RootContextParameter();
    internal ConstantExpression get_RootContextExpression();
    internal bool get_IsCompiledQuery();
    internal Expression Funcletize(Expression expression, Func`1& recompileRequired);
    internal string GenerateParameterName();
}
internal abstract class System.Data.Objects.ELinq.InitializerMetadata : object {
    internal Type ClrType;
    internal static MethodInfo UserExpressionMarker;
    internal string Identity;
    internal InitializerMetadataKind Kind { get; }
    private static InitializerMetadata();
    internal abstract virtual InitializerMetadataKind get_Kind();
    internal static bool TryGetInitializerMetadata(TypeUsage typeUsage, InitializerMetadata& initializerMetadata);
    internal static InitializerMetadata CreateGroupingInitializer(EdmItemCollection itemCollection, Type resultType);
    internal static InitializerMetadata CreateProjectionInitializer(EdmItemCollection itemCollection, MemberInitExpression initExpression, MemberInfo[] members);
    internal static InitializerMetadata CreateProjectionInitializer(EdmItemCollection itemCollection, NewExpression newExpression);
    internal static InitializerMetadata CreateEmptyProjectionInitializer(EdmItemCollection itemCollection, NewExpression newExpression);
    internal static InitializerMetadata CreateEntityCollectionInitializer(EdmItemCollection itemCollection, Type type, NavigationProperty navigationProperty);
    internal virtual void AppendColumnMapKey(ColumnMapKeyBuilder builder);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(InitializerMetadata other);
    public virtual int GetHashCode();
    protected virtual bool IsStructurallyEquivalent(InitializerMetadata other);
    internal abstract virtual Expression Emit(Translator translator, List`1<TranslatorResult> propertyTranslatorResults);
    internal abstract virtual IEnumerable`1<Type> GetChildTypes();
    protected static List`1<Expression> GetPropertyReaders(List`1<TranslatorResult> propertyTranslatorResults);
}
internal enum System.Data.Objects.ELinq.InitializerMetadataKind : Enum {
    public int value__;
    public static InitializerMetadataKind Grouping;
    public static InitializerMetadataKind ProjectionNew;
    public static InitializerMetadataKind ProjectionInitializer;
    public static InitializerMetadataKind EntityCollection;
}
internal class System.Data.Objects.ELinq.LinqExpressionNormalizer : EntityExpressionVisitor {
    private static LinqExpressionNormalizer();
    internal virtual Expression VisitBinary(BinaryExpression b);
    internal virtual Expression VisitMethodCall(MethodCallExpression m);
}
internal class System.Data.Objects.ELinq.ObjectQueryProvider : object {
    internal ObjectQueryProvider(ObjectContext context);
    internal ObjectQueryProvider(ObjectQuery query);
    private sealed virtual override IQueryable`1<S> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override S System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private ObjectQuery`1<S> CreateQuery(Expression expression);
    internal static TResult ExecuteSingle(IEnumerable`1<TResult> query, Expression queryRoot);
}
internal class System.Data.Objects.ELinq.QueryParameterExpression : Expression {
    internal DbParameterReferenceExpression ParameterReference { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    internal QueryParameterExpression(DbParameterReferenceExpression parameterReference, Expression funcletizedExpression, IEnumerable`1<ParameterExpression> compiledQueryParameters);
    internal object EvaluateParameter(Object[] arguments);
    internal QueryParameterExpression EscapeParameterForLike(Func`2<string, string> method);
    internal DbParameterReferenceExpression get_ParameterReference();
    public virtual Type get_Type();
    public virtual ExpressionType get_NodeType();
}
internal static class System.Data.Objects.ELinq.ReflectionUtil : object {
    private static ReflectionUtil();
    internal static bool TryIdentifySequenceMethod(MethodInfo method, SequenceMethod& sequenceMethod);
    internal static bool TryIdentifySequenceMethod(Expression expression, bool unwrapLambda, SequenceMethod& sequenceMethod);
    internal static bool TryLookupMethod(SequenceMethod sequenceMethod, MethodInfo& method);
    internal static string GetCanonicalMethodDescription(MethodInfo method);
    internal static IEnumerable`1<MethodInfo> GetAllLinqOperators();
}
internal enum System.Data.Objects.ELinq.SequenceMethod : Enum {
    public int value__;
    public static SequenceMethod Where;
    public static SequenceMethod WhereOrdinal;
    public static SequenceMethod OfType;
    public static SequenceMethod Cast;
    public static SequenceMethod Select;
    public static SequenceMethod SelectOrdinal;
    public static SequenceMethod SelectMany;
    public static SequenceMethod SelectManyOrdinal;
    public static SequenceMethod SelectManyResultSelector;
    public static SequenceMethod SelectManyOrdinalResultSelector;
    public static SequenceMethod Join;
    public static SequenceMethod JoinComparer;
    public static SequenceMethod GroupJoin;
    public static SequenceMethod GroupJoinComparer;
    public static SequenceMethod OrderBy;
    public static SequenceMethod OrderByComparer;
    public static SequenceMethod OrderByDescending;
    public static SequenceMethod OrderByDescendingComparer;
    public static SequenceMethod ThenBy;
    public static SequenceMethod ThenByComparer;
    public static SequenceMethod ThenByDescending;
    public static SequenceMethod ThenByDescendingComparer;
    public static SequenceMethod Take;
    public static SequenceMethod TakeWhile;
    public static SequenceMethod TakeWhileOrdinal;
    public static SequenceMethod Skip;
    public static SequenceMethod SkipWhile;
    public static SequenceMethod SkipWhileOrdinal;
    public static SequenceMethod GroupBy;
    public static SequenceMethod GroupByComparer;
    public static SequenceMethod GroupByElementSelector;
    public static SequenceMethod GroupByElementSelectorComparer;
    public static SequenceMethod GroupByResultSelector;
    public static SequenceMethod GroupByResultSelectorComparer;
    public static SequenceMethod GroupByElementSelectorResultSelector;
    public static SequenceMethod GroupByElementSelectorResultSelectorComparer;
    public static SequenceMethod Distinct;
    public static SequenceMethod DistinctComparer;
    public static SequenceMethod Concat;
    public static SequenceMethod Union;
    public static SequenceMethod UnionComparer;
    public static SequenceMethod Intersect;
    public static SequenceMethod IntersectComparer;
    public static SequenceMethod Except;
    public static SequenceMethod ExceptComparer;
    public static SequenceMethod First;
    public static SequenceMethod FirstPredicate;
    public static SequenceMethod FirstOrDefault;
    public static SequenceMethod FirstOrDefaultPredicate;
    public static SequenceMethod Last;
    public static SequenceMethod LastPredicate;
    public static SequenceMethod LastOrDefault;
    public static SequenceMethod LastOrDefaultPredicate;
    public static SequenceMethod Single;
    public static SequenceMethod SinglePredicate;
    public static SequenceMethod SingleOrDefault;
    public static SequenceMethod SingleOrDefaultPredicate;
    public static SequenceMethod ElementAt;
    public static SequenceMethod ElementAtOrDefault;
    public static SequenceMethod DefaultIfEmpty;
    public static SequenceMethod DefaultIfEmptyValue;
    public static SequenceMethod Contains;
    public static SequenceMethod ContainsComparer;
    public static SequenceMethod Reverse;
    public static SequenceMethod Empty;
    public static SequenceMethod SequenceEqual;
    public static SequenceMethod SequenceEqualComparer;
    public static SequenceMethod Any;
    public static SequenceMethod AnyPredicate;
    public static SequenceMethod All;
    public static SequenceMethod Count;
    public static SequenceMethod CountPredicate;
    public static SequenceMethod LongCount;
    public static SequenceMethod LongCountPredicate;
    public static SequenceMethod Min;
    public static SequenceMethod MinSelector;
    public static SequenceMethod Max;
    public static SequenceMethod MaxSelector;
    public static SequenceMethod MinInt;
    public static SequenceMethod MinNullableInt;
    public static SequenceMethod MinLong;
    public static SequenceMethod MinNullableLong;
    public static SequenceMethod MinDouble;
    public static SequenceMethod MinNullableDouble;
    public static SequenceMethod MinDecimal;
    public static SequenceMethod MinNullableDecimal;
    public static SequenceMethod MinSingle;
    public static SequenceMethod MinNullableSingle;
    public static SequenceMethod MinIntSelector;
    public static SequenceMethod MinNullableIntSelector;
    public static SequenceMethod MinLongSelector;
    public static SequenceMethod MinNullableLongSelector;
    public static SequenceMethod MinDoubleSelector;
    public static SequenceMethod MinNullableDoubleSelector;
    public static SequenceMethod MinDecimalSelector;
    public static SequenceMethod MinNullableDecimalSelector;
    public static SequenceMethod MinSingleSelector;
    public static SequenceMethod MinNullableSingleSelector;
    public static SequenceMethod MaxInt;
    public static SequenceMethod MaxNullableInt;
    public static SequenceMethod MaxLong;
    public static SequenceMethod MaxNullableLong;
    public static SequenceMethod MaxDouble;
    public static SequenceMethod MaxNullableDouble;
    public static SequenceMethod MaxDecimal;
    public static SequenceMethod MaxNullableDecimal;
    public static SequenceMethod MaxSingle;
    public static SequenceMethod MaxNullableSingle;
    public static SequenceMethod MaxIntSelector;
    public static SequenceMethod MaxNullableIntSelector;
    public static SequenceMethod MaxLongSelector;
    public static SequenceMethod MaxNullableLongSelector;
    public static SequenceMethod MaxDoubleSelector;
    public static SequenceMethod MaxNullableDoubleSelector;
    public static SequenceMethod MaxDecimalSelector;
    public static SequenceMethod MaxNullableDecimalSelector;
    public static SequenceMethod MaxSingleSelector;
    public static SequenceMethod MaxNullableSingleSelector;
    public static SequenceMethod SumInt;
    public static SequenceMethod SumNullableInt;
    public static SequenceMethod SumLong;
    public static SequenceMethod SumNullableLong;
    public static SequenceMethod SumDouble;
    public static SequenceMethod SumNullableDouble;
    public static SequenceMethod SumDecimal;
    public static SequenceMethod SumNullableDecimal;
    public static SequenceMethod SumSingle;
    public static SequenceMethod SumNullableSingle;
    public static SequenceMethod SumIntSelector;
    public static SequenceMethod SumNullableIntSelector;
    public static SequenceMethod SumLongSelector;
    public static SequenceMethod SumNullableLongSelector;
    public static SequenceMethod SumDoubleSelector;
    public static SequenceMethod SumNullableDoubleSelector;
    public static SequenceMethod SumDecimalSelector;
    public static SequenceMethod SumNullableDecimalSelector;
    public static SequenceMethod SumSingleSelector;
    public static SequenceMethod SumNullableSingleSelector;
    public static SequenceMethod AverageInt;
    public static SequenceMethod AverageNullableInt;
    public static SequenceMethod AverageLong;
    public static SequenceMethod AverageNullableLong;
    public static SequenceMethod AverageDouble;
    public static SequenceMethod AverageNullableDouble;
    public static SequenceMethod AverageDecimal;
    public static SequenceMethod AverageNullableDecimal;
    public static SequenceMethod AverageSingle;
    public static SequenceMethod AverageNullableSingle;
    public static SequenceMethod AverageIntSelector;
    public static SequenceMethod AverageNullableIntSelector;
    public static SequenceMethod AverageLongSelector;
    public static SequenceMethod AverageNullableLongSelector;
    public static SequenceMethod AverageDoubleSelector;
    public static SequenceMethod AverageNullableDoubleSelector;
    public static SequenceMethod AverageDecimalSelector;
    public static SequenceMethod AverageNullableDecimalSelector;
    public static SequenceMethod AverageSingleSelector;
    public static SequenceMethod AverageNullableSingleSelector;
    public static SequenceMethod Aggregate;
    public static SequenceMethod AggregateSeed;
    public static SequenceMethod AggregateSeedSelector;
    public static SequenceMethod AsQueryable;
    public static SequenceMethod AsQueryableGeneric;
    public static SequenceMethod AsEnumerable;
    public static SequenceMethod Zip;
    public static SequenceMethod NotSupported;
}
[ExtensionAttribute]
internal static class System.Data.Objects.ELinq.TypeSystem : object {
    private static TypeSystem();
    internal static object GetDefaultValue(Type type);
    internal static bool IsSequenceType(Type seqType);
    internal static Type GetDelegateType(IEnumerable`1<Type> inputTypes, Type returnType);
    internal static Expression EnsureType(Expression expression, Type requiredType);
    internal static MemberInfo PropertyOrField(MemberInfo member, String& name, Type& type);
    internal static Type GetElementType(Type seqType);
    internal static bool IsNullableType(Type type);
    internal static Type GetNonNullableType(Type type);
    [ExtensionAttribute]
internal static bool IsImplementationOfGenericInterfaceMethod(MethodInfo test, Type match, Type[]& genericTypeArguments);
    [ExtensionAttribute]
internal static bool IsImplementationOf(PropertyInfo propertyInfo, Type interfaceType);
}
internal class System.Data.Objects.EntityEntry : ObjectStateEntry {
    internal static int s_EntityRoot;
    public bool IsRelationship { get; }
    public object Entity { get; }
    public EntityKey EntityKey { get; internal set; }
    internal IEnumerable`1<Tuple`2<AssociationSet, ReferentialConstraint>> ForeignKeyDependents { get; }
    internal IEnumerable`1<Tuple`2<AssociationSet, ReferentialConstraint>> ForeignKeyPrincipals { get; }
    [DebuggerBrowsableAttribute("0")]
public DbDataRecord OriginalValues { get; }
    [DebuggerBrowsableAttribute("0")]
public CurrentValueRecord CurrentValues { get; }
    public RelationshipManager RelationshipManager { get; }
    internal BitArray ModifiedProperties { get; }
    internal bool IsKeyEntry { get; }
    internal IEntityWrapper WrappedEntity { get; }
    [DebuggerBrowsableAttribute("0")]
internal OriginalValueRecord EditableOriginalValues { get; }
    internal bool RequiresComplexChangeTracking { get; }
    internal bool RequiresScalarChangeTracking { get; }
    internal bool RequiresAnyChangeTracking { get; }
    internal EntityEntry(IEntityWrapper wrappedEntity, EntityKey entityKey, EntitySet entitySet, ObjectStateManager cache, StateManagerTypeMetadata typeMetadata, EntityState state);
    internal EntityEntry(EntityKey entityKey, EntitySet entitySet, ObjectStateManager cache, StateManagerTypeMetadata typeMetadata);
    public virtual bool get_IsRelationship();
    public virtual object get_Entity();
    public virtual EntityKey get_EntityKey();
    internal virtual void set_EntityKey(EntityKey value);
    internal IEnumerable`1<Tuple`2<AssociationSet, ReferentialConstraint>> get_ForeignKeyDependents();
    internal IEnumerable`1<Tuple`2<AssociationSet, ReferentialConstraint>> get_ForeignKeyPrincipals();
    public virtual IEnumerable`1<string> GetModifiedProperties();
    public virtual void SetModifiedProperty(string propertyName);
    internal void SetModifiedPropertyInternal(int ordinal);
    public virtual void RejectPropertyChanges(string propertyName);
    public virtual DbDataRecord get_OriginalValues();
    public virtual OriginalValueRecord GetUpdatableOriginalValues();
    public virtual CurrentValueRecord get_CurrentValues();
    public virtual void Delete();
    public virtual void AcceptChanges();
    public virtual void SetModified();
    public virtual RelationshipManager get_RelationshipManager();
    internal virtual BitArray get_ModifiedProperties();
    public virtual void ChangeState(EntityState state);
    public virtual void ApplyCurrentValues(object currentEntity);
    public virtual void ApplyOriginalValues(object originalEntity);
    internal void AddRelationshipEnd(RelationshipEntry item);
    internal bool ContainsRelationshipEnd(RelationshipEntry item);
    internal void RemoveRelationshipEnd(RelationshipEntry item);
    internal void UpdateRelationshipEnds(EntityKey oldKey, EntityEntry promotedEntry);
    internal RelationshipEndEnumerable GetRelationshipEnds();
    internal virtual bool get_IsKeyEntry();
    internal virtual DataRecordInfo GetDataRecordInfo(StateManagerTypeMetadata metadata, object userObject);
    internal virtual void Reset();
    internal virtual Type GetFieldType(int ordinal, StateManagerTypeMetadata metadata);
    internal virtual string GetCLayerName(int ordinal, StateManagerTypeMetadata metadata);
    internal virtual int GetOrdinalforCLayerName(string name, StateManagerTypeMetadata metadata);
    internal virtual void RevertDelete();
    internal virtual int GetFieldCount(StateManagerTypeMetadata metadata);
    internal virtual void SetModifiedAll();
    internal virtual void EntityMemberChanging(string entityMemberName);
    internal virtual void EntityMemberChanged(string entityMemberName);
    internal virtual void EntityComplexMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal virtual void EntityComplexMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal IEntityWrapper get_WrappedEntity();
    internal void SetCurrentEntityValue(string memberName, object newValue);
    internal void SetOriginalEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, object newValue);
    internal object GetOriginalEntityValue(string memberName);
    internal object GetOriginalEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, ObjectStateValueRecord updatableRecord);
    internal object GetOriginalEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, ObjectStateValueRecord updatableRecord, int parentEntityPropertyIndex);
    internal object GetCurrentEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, ObjectStateValueRecord updatableRecord);
    internal object GetCurrentEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, ObjectStateValueRecord updatableRecord, int parentEntityPropertyIndex);
    internal bool FindOriginalValue(StateManagerMemberMetadata metadata, object instance, Object& value);
    internal AssociationEndMember GetAssociationEndMember(RelationshipEntry relationshipEntry);
    internal EntityEntry GetOtherEndOfRelationship(RelationshipEntry relationshipEntry);
    internal int GetAndValidateChangeMemberInfo(string entityMemberName, object complexObject, string complexObjectMemberName, StateManagerTypeMetadata& typeMetadata, String& changingMemberName, Object& changingObject);
    internal OriginalValueRecord get_EditableOriginalValues();
    internal void DetachObjectStateManagerFromEntity();
    internal void TakeSnapshot(bool onlySnapshotComplexProperties);
    internal void TakeSnapshotOfForeignKeys();
    public virtual bool IsPropertyChanged(string propertyName);
    internal void DetectChangesInProperties(bool detectOnlyComplexProperties);
    internal void UpdateComplexObjectSnapshot(StateManagerMemberMetadata member, object userObject, int ordinal, object currentValue);
    internal void FixupFKValuesFromNonAddedReferences();
    internal void TakeSnapshotOfRelationships();
    internal void DetectChangesInRelationshipsOfSingleEntity();
    internal void Detach();
    internal void Delete(bool doFixup);
    internal void DeleteRelationshipsThatReferenceKeys(RelationshipSet relationshipSet, RelationshipEndMember endMember);
    internal void RetrieveReferentialConstraintPropertiesFromKeyEntries(Dictionary`2<string, KeyValuePair`2<object, IntBox>> properties);
    internal static void AddOrIncreaseCounter(Dictionary`2<string, KeyValuePair`2<object, IntBox>> properties, string propertyName, object propertyValue);
    internal void PromoteKeyEntry(IEntityWrapper wrappedEntity, IExtendedDataRecord shadowValues, StateManagerTypeMetadata typeMetadata);
    internal void DegradeEntry();
    internal void AttachObjectStateManagerToEntity();
    internal void GetOtherKeyProperties(Dictionary`2<string, KeyValuePair`2<object, IntBox>> properties);
    internal void AddOriginalValue(StateManagerMemberMetadata memberMetadata, object userObject, object value);
    internal void CompareKeyProperties(object changed);
    internal object GetCurrentEntityValue(string memberName);
    internal void VerifyEntityValueIsEditable(StateManagerTypeMetadata typeMetadata, int ordinal, string memberName);
    internal void SetCurrentEntityValue(StateManagerTypeMetadata metadata, int ordinal, object userObject, object newValue);
    internal void ChangeObjectState(EntityState requestedState);
    internal void UpdateOriginalValues(object entity);
    internal void UpdateRecordWithoutSetModified(object value, DbUpdatableDataRecord current);
    internal void UpdateRecordWithSetModified(object value, DbUpdatableDataRecord current);
    internal bool HasRecordValueChanged(DbDataRecord record, int propertyIndex, object newFieldValue);
    internal void ApplyCurrentValuesInternal(IEntityWrapper wrappedCurrentEntity);
    internal void UpdateCurrentValueRecord(object value);
    internal void ApplyOriginalValuesInternal(IEntityWrapper wrappedOriginalEntity);
    internal void RemoveFromForeignKeyIndex();
    internal void FixupReferencesByForeignKeys(bool replaceAddedRefs);
    internal void FixupEntityReferenceByForeignKey(EntityReference reference);
    internal void FixupEntityReferenceToPrincipal(EntityReference relatedEnd, EntityKey foreignKey, bool setIsLoaded, bool replaceExistingRef);
    internal bool TryGetReferenceKey(AssociationEndMember principalRole, EntityKey& principalKey);
    internal void FixupForeignKeysByReference();
    internal void FindRelatedEntityKeysByForeignKeys(Dictionary`2& relatedEntities, bool useOriginalValues);
    internal IEnumerable`1<EntityReference> FindFKRelatedEnds();
    internal void DetectChangesInForeignKeys();
    internal bool get_RequiresComplexChangeTracking();
    internal bool get_RequiresScalarChangeTracking();
    internal bool get_RequiresAnyChangeTracking();
}
public static class System.Data.Objects.EntityFunctions : object {
    public static string AsUnicode(string value);
    public static string AsNonUnicode(string value);
    [EdmFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<decimal> collection);
    [EdmFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<decimal>> collection);
    [EdmFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<double> collection);
    [EdmFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<double>> collection);
    [EdmFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<int> collection);
    [EdmFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<int>> collection);
    [EdmFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<long> collection);
    [EdmFunctionAttribute("Edm", "StDev")]
public static Nullable`1<double> StandardDeviation(IEnumerable`1<Nullable`1<long>> collection);
    [EdmFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<decimal> collection);
    [EdmFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<decimal>> collection);
    [EdmFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<double> collection);
    [EdmFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<double>> collection);
    [EdmFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<int> collection);
    [EdmFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<int>> collection);
    [EdmFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<long> collection);
    [EdmFunctionAttribute("Edm", "StDevP")]
public static Nullable`1<double> StandardDeviationP(IEnumerable`1<Nullable`1<long>> collection);
    [EdmFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<decimal> collection);
    [EdmFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<decimal>> collection);
    [EdmFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<double> collection);
    [EdmFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<double>> collection);
    [EdmFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<int> collection);
    [EdmFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<int>> collection);
    [EdmFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<long> collection);
    [EdmFunctionAttribute("Edm", "Var")]
public static Nullable`1<double> Var(IEnumerable`1<Nullable`1<long>> collection);
    [EdmFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<decimal> collection);
    [EdmFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<decimal>> collection);
    [EdmFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<double> collection);
    [EdmFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<double>> collection);
    [EdmFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<int> collection);
    [EdmFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<int>> collection);
    [EdmFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<long> collection);
    [EdmFunctionAttribute("Edm", "VarP")]
public static Nullable`1<double> VarP(IEnumerable`1<Nullable`1<long>> collection);
    [EdmFunctionAttribute("Edm", "Left")]
public static string Left(string stringArgument, Nullable`1<long> length);
    [EdmFunctionAttribute("Edm", "Right")]
public static string Right(string stringArgument, Nullable`1<long> length);
    [EdmFunctionAttribute("Edm", "Reverse")]
public static string Reverse(string stringArgument);
    [EdmFunctionAttribute("Edm", "GetTotalOffsetMinutes")]
public static Nullable`1<int> GetTotalOffsetMinutes(Nullable`1<DateTimeOffset> dateTimeOffsetArgument);
    [EdmFunctionAttribute("Edm", "TruncateTime")]
public static Nullable`1<DateTimeOffset> TruncateTime(Nullable`1<DateTimeOffset> dateValue);
    [EdmFunctionAttribute("Edm", "TruncateTime")]
public static Nullable`1<DateTime> TruncateTime(Nullable`1<DateTime> dateValue);
    [EdmFunctionAttribute("Edm", "CreateDateTime")]
public static Nullable`1<DateTime> CreateDateTime(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<double> second);
    [EdmFunctionAttribute("Edm", "CreateDateTimeOffset")]
public static Nullable`1<DateTimeOffset> CreateDateTimeOffset(Nullable`1<int> year, Nullable`1<int> month, Nullable`1<int> day, Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<double> second, Nullable`1<int> timeZoneOffset);
    [EdmFunctionAttribute("Edm", "CreateTime")]
public static Nullable`1<TimeSpan> CreateTime(Nullable`1<int> hour, Nullable`1<int> minute, Nullable`1<double> second);
    [EdmFunctionAttribute("Edm", "AddYears")]
public static Nullable`1<DateTimeOffset> AddYears(Nullable`1<DateTimeOffset> dateValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddYears")]
public static Nullable`1<DateTime> AddYears(Nullable`1<DateTime> dateValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddMonths")]
public static Nullable`1<DateTimeOffset> AddMonths(Nullable`1<DateTimeOffset> dateValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddMonths")]
public static Nullable`1<DateTime> AddMonths(Nullable`1<DateTime> dateValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddDays")]
public static Nullable`1<DateTimeOffset> AddDays(Nullable`1<DateTimeOffset> dateValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddDays")]
public static Nullable`1<DateTime> AddDays(Nullable`1<DateTime> dateValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddHours")]
public static Nullable`1<DateTimeOffset> AddHours(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddHours")]
public static Nullable`1<DateTime> AddHours(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddHours")]
public static Nullable`1<TimeSpan> AddHours(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddMinutes")]
public static Nullable`1<DateTimeOffset> AddMinutes(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddMinutes")]
public static Nullable`1<DateTime> AddMinutes(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddMinutes")]
public static Nullable`1<TimeSpan> AddMinutes(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddSeconds")]
public static Nullable`1<DateTimeOffset> AddSeconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddSeconds")]
public static Nullable`1<DateTime> AddSeconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddSeconds")]
public static Nullable`1<TimeSpan> AddSeconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddMilliseconds")]
public static Nullable`1<DateTimeOffset> AddMilliseconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddMilliseconds")]
public static Nullable`1<DateTime> AddMilliseconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddMilliseconds")]
public static Nullable`1<TimeSpan> AddMilliseconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddMicroseconds")]
public static Nullable`1<DateTimeOffset> AddMicroseconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddMicroseconds")]
public static Nullable`1<DateTime> AddMicroseconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddMicroseconds")]
public static Nullable`1<TimeSpan> AddMicroseconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddNanoseconds")]
public static Nullable`1<DateTimeOffset> AddNanoseconds(Nullable`1<DateTimeOffset> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddNanoseconds")]
public static Nullable`1<DateTime> AddNanoseconds(Nullable`1<DateTime> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "AddNanoseconds")]
public static Nullable`1<TimeSpan> AddNanoseconds(Nullable`1<TimeSpan> timeValue, Nullable`1<int> addValue);
    [EdmFunctionAttribute("Edm", "DiffYears")]
public static Nullable`1<int> DiffYears(Nullable`1<DateTimeOffset> dateValue1, Nullable`1<DateTimeOffset> dateValue2);
    [EdmFunctionAttribute("Edm", "DiffYears")]
public static Nullable`1<int> DiffYears(Nullable`1<DateTime> dateValue1, Nullable`1<DateTime> dateValue2);
    [EdmFunctionAttribute("Edm", "DiffMonths")]
public static Nullable`1<int> DiffMonths(Nullable`1<DateTimeOffset> dateValue1, Nullable`1<DateTimeOffset> dateValue2);
    [EdmFunctionAttribute("Edm", "DiffMonths")]
public static Nullable`1<int> DiffMonths(Nullable`1<DateTime> dateValue1, Nullable`1<DateTime> dateValue2);
    [EdmFunctionAttribute("Edm", "DiffDays")]
public static Nullable`1<int> DiffDays(Nullable`1<DateTimeOffset> dateValue1, Nullable`1<DateTimeOffset> dateValue2);
    [EdmFunctionAttribute("Edm", "DiffDays")]
public static Nullable`1<int> DiffDays(Nullable`1<DateTime> dateValue1, Nullable`1<DateTime> dateValue2);
    [EdmFunctionAttribute("Edm", "DiffHours")]
public static Nullable`1<int> DiffHours(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffHours")]
public static Nullable`1<int> DiffHours(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffHours")]
public static Nullable`1<int> DiffHours(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffMinutes")]
public static Nullable`1<int> DiffMinutes(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffMinutes")]
public static Nullable`1<int> DiffMinutes(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffMinutes")]
public static Nullable`1<int> DiffMinutes(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffSeconds")]
public static Nullable`1<int> DiffSeconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffSeconds")]
public static Nullable`1<int> DiffSeconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffSeconds")]
public static Nullable`1<int> DiffSeconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffMilliseconds")]
public static Nullable`1<int> DiffMilliseconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffMilliseconds")]
public static Nullable`1<int> DiffMilliseconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffMilliseconds")]
public static Nullable`1<int> DiffMilliseconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffMicroseconds")]
public static Nullable`1<int> DiffMicroseconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffMicroseconds")]
public static Nullable`1<int> DiffMicroseconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffMicroseconds")]
public static Nullable`1<int> DiffMicroseconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffNanoseconds")]
public static Nullable`1<int> DiffNanoseconds(Nullable`1<DateTimeOffset> timeValue1, Nullable`1<DateTimeOffset> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffNanoseconds")]
public static Nullable`1<int> DiffNanoseconds(Nullable`1<DateTime> timeValue1, Nullable`1<DateTime> timeValue2);
    [EdmFunctionAttribute("Edm", "DiffNanoseconds")]
public static Nullable`1<int> DiffNanoseconds(Nullable`1<TimeSpan> timeValue1, Nullable`1<TimeSpan> timeValue2);
    [EdmFunctionAttribute("Edm", "Truncate")]
public static Nullable`1<double> Truncate(Nullable`1<double> value, Nullable`1<int> digits);
    [EdmFunctionAttribute("Edm", "Truncate")]
public static Nullable`1<decimal> Truncate(Nullable`1<decimal> value, Nullable`1<int> digits);
}
internal class System.Data.Objects.EntitySetQualifiedType : ValueType {
    internal static IEqualityComparer`1<EntitySetQualifiedType> EqualityComparer;
    internal Type ClrType;
    internal EntitySet EntitySet;
    internal EntitySetQualifiedType(Type type, EntitySet set);
    private static EntitySetQualifiedType();
    public sealed virtual bool Equals(EntitySetQualifiedType x, EntitySetQualifiedType y);
    public sealed virtual int GetHashCode(EntitySetQualifiedType obj);
}
internal class System.Data.Objects.EntitySqlQueryState : ObjectQueryState {
    internal bool AllowsLimitSubclause { get; }
    internal EntitySqlQueryState(Type elementType, string commandText, bool allowsLimit, ObjectContext context, ObjectParameterCollection parameters, Span span);
    internal EntitySqlQueryState(Type elementType, string commandText, DbExpression expression, bool allowsLimit, ObjectContext context, ObjectParameterCollection parameters, Span span);
    internal bool get_AllowsLimitSubclause();
    internal virtual bool TryGetCommandText(String& commandText);
    internal virtual bool TryGetExpression(Expression& expression);
    protected virtual TypeUsage GetResultType();
    internal virtual ObjectQueryState Include(ObjectQuery`1<TElementType> sourceQuery, string includePath);
    internal virtual ObjectQueryExecutionPlan GetExecutionPlan(Nullable`1<MergeOption> forMergeOption);
    internal DbExpression Parse();
}
internal class System.Data.Objects.FieldDescriptor : PropertyDescriptor {
    internal EdmProperty EdmProperty { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public bool IsBrowsable { get; }
    internal FieldDescriptor(Type itemType, bool isReadOnly, EdmProperty property);
    internal EdmProperty get_EdmProperty();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object item);
    public virtual object GetValue(object item);
    public virtual void ResetValue(object item);
    public virtual void SetValue(object item, object value);
    public virtual bool ShouldSerializeValue(object item);
    public virtual bool get_IsBrowsable();
}
internal class System.Data.Objects.IntBox : object {
    internal int Value { get; internal set; }
    internal IntBox(int val);
    internal int get_Value();
    internal void set_Value(int value);
}
internal abstract class System.Data.Objects.Internal.BaseEntityWrapper`1 : object {
    public RelationshipManager RelationshipManager { get; }
    public ObjectContext Context { get; public set; }
    public MergeOption MergeOption { get; private set; }
    public bool InitializingProxyRelatedEnds { get; public set; }
    public EntityEntry ObjectStateEntry { get; public set; }
    public Type IdentityType { get; }
    public EntityKey EntityKey { get; public set; }
    public bool OwnsRelationshipManager { get; }
    public object Entity { get; }
    public TEntity TypedEntity { get; }
    public bool RequiresRelationshipChangeTracking { get; }
    protected BaseEntityWrapper`1(TEntity entity, RelationshipManager relationshipManager);
    protected BaseEntityWrapper`1(TEntity entity, RelationshipManager relationshipManager, EntitySet entitySet, ObjectContext context, MergeOption mergeOption, Type identityType);
    public sealed virtual RelationshipManager get_RelationshipManager();
    [CompilerGeneratedAttribute]
public sealed virtual ObjectContext get_Context();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Context(ObjectContext value);
    public sealed virtual MergeOption get_MergeOption();
    private void set_MergeOption(MergeOption value);
    public sealed virtual bool get_InitializingProxyRelatedEnds();
    public sealed virtual void set_InitializingProxyRelatedEnds(bool value);
    public sealed virtual void AttachContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public sealed virtual void ResetContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public sealed virtual void DetachContext();
    [CompilerGeneratedAttribute]
public sealed virtual EntityEntry get_ObjectStateEntry();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ObjectStateEntry(EntityEntry value);
    public sealed virtual Type get_IdentityType();
    public abstract virtual void EnsureCollectionNotNull(RelatedEnd relatedEnd);
    public abstract virtual EntityKey get_EntityKey();
    public abstract virtual void set_EntityKey(EntityKey value);
    public abstract virtual bool get_OwnsRelationshipManager();
    public abstract virtual EntityKey GetEntityKeyFromEntity();
    public abstract virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public abstract virtual void TakeSnapshot(EntityEntry entry);
    public abstract virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public abstract virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public abstract virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public abstract virtual void RemoveNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public abstract virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public abstract virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public abstract virtual object get_Entity();
    public abstract virtual TEntity get_TypedEntity();
    public abstract virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public abstract virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
    public abstract virtual bool get_RequiresRelationshipChangeTracking();
}
internal class System.Data.Objects.Internal.BaseProxyImplementor : object {
    public List`1<PropertyInfo> BaseGetters { get; }
    public List`1<PropertyInfo> BaseSetters { get; }
    private static BaseProxyImplementor();
    public List`1<PropertyInfo> get_BaseGetters();
    public List`1<PropertyInfo> get_BaseSetters();
    public void AddBasePropertyGetter(PropertyInfo baseProperty);
    public void AddBasePropertySetter(PropertyInfo baseProperty);
    public void Implement(TypeBuilder typeBuilder, Action`2<FieldBuilder, bool> registerField);
}
internal class System.Data.Objects.Internal.ComplexTypeMaterializer : object {
    internal ComplexTypeMaterializer(MetadataWorkspace workspace);
    internal object CreateComplex(IExtendedDataRecord record, DataRecordInfo recordInfo, object result);
}
internal class System.Data.Objects.Internal.DataContractImplementor : object {
    internal DataContractImplementor(EntityType ospaceEntityType);
    private static DataContractImplementor();
    internal void Implement(TypeBuilder typeBuilder, Action`2<FieldBuilder, bool> registerField);
}
internal class System.Data.Objects.Internal.EntityProxyFactory : object {
    internal static string ResetFKSetterFlagFieldName;
    internal static string CompareByteArraysFieldName;
    private static EntityProxyFactory();
    internal static bool TryGetProxyType(Type clrType, string entityTypeName, EntityProxyTypeInfo& proxyTypeInfo);
    internal static bool TryGetProxyType(Type proxyType, EntityProxyTypeInfo& proxyTypeInfo);
    internal static bool TryGetProxyWrapper(object instance, IEntityWrapper& wrapper);
    internal static EntityProxyTypeInfo GetProxyType(ClrEntityType ospaceEntityType);
    internal static bool TryGetAssociationTypeFromProxyInfo(IEntityWrapper wrappedEntity, string relationshipName, string targetRoleName, AssociationType& associationType);
    internal static void TryCreateProxyTypes(IEnumerable`1<EntityType> ospaceEntityTypes);
    internal static bool IsProxyType(Type type);
    internal static IEnumerable`1<Type> GetKnownProxyTypes();
    public Func`2<object, object> CreateBaseGetter(Type declaringType, PropertyInfo propertyInfo);
    public Action`2<object, object> CreateBaseSetter(Type declaringType, PropertyInfo propertyInfo);
    internal static bool CanProxyGetter(PropertyInfo clrProperty);
    internal static bool CanProxySetter(PropertyInfo clrProperty);
}
internal class System.Data.Objects.Internal.EntityProxyTypeInfo : object {
    internal static string EntityWrapperFieldName;
    internal Type ProxyType { get; }
    internal DynamicMethod InitializeEntityCollections { get; }
    public Func`3<object, string, object> BaseGetter { get; }
    public Action`3<object, string, object> BaseSetter { get; }
    internal Func`2<object, object> EntityWrapperDelegate { get; }
    internal EntityProxyTypeInfo(Type proxyType, ClrEntityType ospaceEntityType, DynamicMethod initializeCollections, List`1<PropertyInfo> baseGetters, List`1<PropertyInfo> baseSetters);
    internal object CreateProxyObject();
    internal Type get_ProxyType();
    internal DynamicMethod get_InitializeEntityCollections();
    public Func`3<object, string, object> get_BaseGetter();
    public bool ContainsBaseGetter(string propertyName);
    public bool ContainsBaseSetter(string propertyName);
    public Action`3<object, string, object> get_BaseSetter();
    public bool TryGetNavigationPropertyAssociationType(string relationshipName, string targetRoleName, AssociationType& associationType);
    public void ValidateType(ClrEntityType ospaceEntityType);
    internal IEntityWrapper SetEntityWrapper(IEntityWrapper wrapper);
    internal IEntityWrapper GetEntityWrapper(object entity);
    internal Func`2<object, object> get_EntityWrapperDelegate();
}
internal static class System.Data.Objects.Internal.EntitySqlQueryBuilder : object {
    internal static ObjectQueryState Distinct(ObjectQueryState query);
    internal static ObjectQueryState Except(ObjectQueryState leftQuery, ObjectQueryState rightQuery);
    internal static ObjectQueryState GroupBy(ObjectQueryState query, string alias, string keys, string projection, ObjectParameter[] parameters);
    internal static ObjectQueryState Intersect(ObjectQueryState leftQuery, ObjectQueryState rightQuery);
    internal static ObjectQueryState OfType(ObjectQueryState query, EdmType newType, Type clrOfType);
    internal static ObjectQueryState OrderBy(ObjectQueryState query, string alias, string keys, ObjectParameter[] parameters);
    internal static ObjectQueryState Select(ObjectQueryState query, string alias, string projection, ObjectParameter[] parameters);
    internal static ObjectQueryState SelectValue(ObjectQueryState query, string alias, string projection, ObjectParameter[] parameters, Type projectedType);
    internal static ObjectQueryState Skip(ObjectQueryState query, string alias, string keys, string count, ObjectParameter[] parameters);
    internal static ObjectQueryState Top(ObjectQueryState query, string alias, string count, ObjectParameter[] parameters);
    internal static ObjectQueryState Union(ObjectQueryState leftQuery, ObjectQueryState rightQuery);
    internal static ObjectQueryState UnionAll(ObjectQueryState leftQuery, ObjectQueryState rightQuery);
    internal static ObjectQueryState Where(ObjectQueryState query, string alias, string predicate, ObjectParameter[] parameters);
}
internal class System.Data.Objects.Internal.EntityWithChangeTrackerStrategy : object {
    public EntityWithChangeTrackerStrategy(IEntityWithChangeTracker entity);
    public sealed virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public sealed virtual void TakeSnapshot(EntityEntry entry);
    public sealed virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public sealed virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
}
internal class System.Data.Objects.Internal.EntityWithKeyStrategy : object {
    public EntityWithKeyStrategy(IEntityWithKey entity);
    public sealed virtual EntityKey GetEntityKey();
    public sealed virtual void SetEntityKey(EntityKey key);
    public sealed virtual EntityKey GetEntityKeyFromEntity();
}
internal abstract class System.Data.Objects.Internal.EntityWrapper`1 : BaseEntityWrapper`1<TEntity> {
    public EntityKey EntityKey { get; public set; }
    public object Entity { get; }
    public TEntity TypedEntity { get; }
    protected EntityWrapper`1(TEntity entity, RelationshipManager relationshipManager, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy);
    protected EntityWrapper`1(TEntity entity, RelationshipManager relationshipManager, EntityKey key, EntitySet set, ObjectContext context, MergeOption mergeOption, Type identityType, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy);
    public virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public virtual void TakeSnapshot(EntityEntry entry);
    public virtual EntityKey get_EntityKey();
    public virtual void set_EntityKey(EntityKey value);
    public virtual EntityKey GetEntityKeyFromEntity();
    public virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public virtual void EnsureCollectionNotNull(RelatedEnd relatedEnd);
    public virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public virtual void RemoveNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public virtual object get_Entity();
    public virtual TEntity get_TypedEntity();
    public virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
}
internal static class System.Data.Objects.Internal.EntityWrapperFactory : object {
    internal static IEntityWrapper NullWrapper { get; }
    private static EntityWrapperFactory();
    internal static IEntityWrapper get_NullWrapper();
    internal static IEntityWrapper CreateNewWrapper(object entity, EntityKey key);
    internal static IEntityWrapper WrapEntityUsingContext(object entity, ObjectContext context);
    internal static IEntityWrapper WrapEntityUsingContextGettingEntry(object entity, ObjectContext context, EntityEntry& existingEntry);
    internal static IEntityWrapper WrapEntityUsingStateManager(object entity, ObjectStateManager stateManager);
    internal static IEntityWrapper WrapEntityUsingStateManagerGettingEntry(object entity, ObjectStateManager stateManager, EntityEntry& existingEntry);
    internal static void UpdateNoTrackingWrapper(IEntityWrapper wrapper, ObjectContext context, EntitySet entitySet);
    internal static Func`2<object, IPropertyAccessorStrategy> GetPocoPropertyAccessorStrategyFunc();
    internal static Func`2<object, IPropertyAccessorStrategy> GetNullPropertyAccessorStrategyFunc();
    internal static Func`2<object, IChangeTrackingStrategy> GetEntityWithChangeTrackerStrategyFunc();
    internal static Func`2<object, IChangeTrackingStrategy> GetSnapshotChangeTrackingStrategyFunc();
    internal static Func`2<object, IEntityKeyStrategy> GetEntityWithKeyStrategyStrategyFunc();
    internal static Func`2<object, IEntityKeyStrategy> GetPocoEntityKeyStrategyFunc();
}
internal class System.Data.Objects.Internal.EntityWrapperWithoutRelationships`1 : EntityWrapper`1<TEntity> {
    public bool OwnsRelationshipManager { get; }
    public bool RequiresRelationshipChangeTracking { get; }
    internal EntityWrapperWithoutRelationships`1(TEntity entity, EntityKey key, EntitySet entitySet, ObjectContext context, MergeOption mergeOption, Type identityType, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy);
    internal EntityWrapperWithoutRelationships`1(TEntity entity, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy);
    public virtual bool get_OwnsRelationshipManager();
    public virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public virtual bool get_RequiresRelationshipChangeTracking();
}
internal class System.Data.Objects.Internal.EntityWrapperWithRelationships`1 : EntityWrapper`1<TEntity> {
    public bool OwnsRelationshipManager { get; }
    public bool RequiresRelationshipChangeTracking { get; }
    internal EntityWrapperWithRelationships`1(TEntity entity, EntityKey key, EntitySet entitySet, ObjectContext context, MergeOption mergeOption, Type identityType, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy);
    internal EntityWrapperWithRelationships`1(TEntity entity, Func`2<object, IPropertyAccessorStrategy> propertyStrategy, Func`2<object, IChangeTrackingStrategy> changeTrackingStrategy, Func`2<object, IEntityKeyStrategy> keyStrategy);
    public virtual bool get_OwnsRelationshipManager();
    public virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public virtual bool get_RequiresRelationshipChangeTracking();
}
internal class System.Data.Objects.Internal.ForeignKeyFactory : object {
    public static bool IsConceptualNullKey(EntityKey key);
    public static bool IsConceptualNullKeyChanged(EntityKey conceptualNullKey, EntityKey realKey);
    public static EntityKey CreateConceptualNullKey(EntityKey originalKey);
    public static EntityKey CreateKeyFromForeignKeyValues(EntityEntry dependentEntry, RelatedEnd relatedEnd);
    public static EntityKey CreateKeyFromForeignKeyValues(EntityEntry dependentEntry, ReferentialConstraint constraint, EntitySet principalEntitySet, bool useOriginalValues);
}
internal interface System.Data.Objects.Internal.IChangeTrackingStrategy {
    public abstract virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public abstract virtual void TakeSnapshot(EntityEntry entry);
    public abstract virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public abstract virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
}
internal interface System.Data.Objects.Internal.IEntityKeyStrategy {
    public abstract virtual EntityKey GetEntityKey();
    public abstract virtual void SetEntityKey(EntityKey key);
    public abstract virtual EntityKey GetEntityKeyFromEntity();
}
internal interface System.Data.Objects.Internal.IEntityWrapper {
    public RelationshipManager RelationshipManager { get; }
    public bool OwnsRelationshipManager { get; }
    public object Entity { get; }
    public EntityEntry ObjectStateEntry { get; public set; }
    public EntityKey EntityKey { get; public set; }
    public ObjectContext Context { get; public set; }
    public MergeOption MergeOption { get; }
    public Type IdentityType { get; }
    public bool InitializingProxyRelatedEnds { get; public set; }
    public bool RequiresRelationshipChangeTracking { get; }
    public abstract virtual RelationshipManager get_RelationshipManager();
    public abstract virtual bool get_OwnsRelationshipManager();
    public abstract virtual object get_Entity();
    public abstract virtual EntityEntry get_ObjectStateEntry();
    public abstract virtual void set_ObjectStateEntry(EntityEntry value);
    public abstract virtual void EnsureCollectionNotNull(RelatedEnd relatedEnd);
    public abstract virtual EntityKey get_EntityKey();
    public abstract virtual void set_EntityKey(EntityKey value);
    public abstract virtual EntityKey GetEntityKeyFromEntity();
    public abstract virtual ObjectContext get_Context();
    public abstract virtual void set_Context(ObjectContext value);
    public abstract virtual MergeOption get_MergeOption();
    public abstract virtual void AttachContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public abstract virtual void ResetContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public abstract virtual void DetachContext();
    public abstract virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public abstract virtual void TakeSnapshot(EntityEntry entry);
    public abstract virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public abstract virtual Type get_IdentityType();
    public abstract virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public abstract virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public abstract virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public abstract virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public abstract virtual void RemoveNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public abstract virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public abstract virtual bool get_InitializingProxyRelatedEnds();
    public abstract virtual void set_InitializingProxyRelatedEnds(bool value);
    public abstract virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
    public abstract virtual bool get_RequiresRelationshipChangeTracking();
}
internal class System.Data.Objects.Internal.IPOCOImplementor : object {
    public Type[] Interfaces { get; }
    public IPOCOImplementor(EntityType ospaceEntityType);
    private static IPOCOImplementor();
    public void Implement(TypeBuilder typeBuilder, Action`2<FieldBuilder, bool> registerField);
    public Type[] get_Interfaces();
    public DynamicMethod CreateInitalizeCollectionMethod(Type proxyType);
    public bool CanProxyMember(EdmMember member);
    public bool EmitMember(TypeBuilder typeBuilder, EdmMember member, PropertyBuilder propertyBuilder, PropertyInfo baseProperty, BaseProxyImplementor baseImplementor);
}
internal interface System.Data.Objects.Internal.IPropertyAccessorStrategy {
    public abstract virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public abstract virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public abstract virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public abstract virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public abstract virtual object CollectionCreate(RelatedEnd relatedEnd);
}
internal class System.Data.Objects.Internal.ISerializableImplementor : object {
    internal bool TypeIsSuitable { get; }
    internal bool TypeImplementsISerializable { get; }
    internal ISerializableImplementor(EntityType ospaceEntityType);
    internal bool get_TypeIsSuitable();
    internal bool get_TypeImplementsISerializable();
    internal void Implement(TypeBuilder typeBuilder, IEnumerable`1<FieldBuilder> serializedFields);
}
internal class System.Data.Objects.Internal.LazyLoadBehavior : object {
    internal static Func`3<TProxy, TItem, bool> GetInterceptorDelegate(EdmMember member, Func`2<object, object> getEntityWrapperDelegate);
    internal static bool IsLazyLoadCandidate(EntityType ospaceEntityType, EdmMember member);
}
internal class System.Data.Objects.Internal.LazyLoadImplementor : object {
    public IEnumerable`1<EdmMember> Members { get; }
    public LazyLoadImplementor(EntityType ospaceEntityType);
    public IEnumerable`1<EdmMember> get_Members();
    public bool CanProxyMember(EdmMember member);
    public void Implement(TypeBuilder typeBuilder, Action`2<FieldBuilder, bool> registerField);
    public bool EmitMember(TypeBuilder typeBuilder, EdmMember member, PropertyBuilder propertyBuilder, PropertyInfo baseProperty, BaseProxyImplementor baseImplementor);
    internal static string GetInterceptorFieldName(string memberName);
}
internal class System.Data.Objects.Internal.LightweightEntityWrapper`1 : BaseEntityWrapper`1<TEntity> {
    public EntityKey EntityKey { get; public set; }
    public bool OwnsRelationshipManager { get; }
    public object Entity { get; }
    public TEntity TypedEntity { get; }
    public bool RequiresRelationshipChangeTracking { get; }
    internal LightweightEntityWrapper`1(TEntity entity);
    internal LightweightEntityWrapper`1(TEntity entity, EntityKey key, EntitySet entitySet, ObjectContext context, MergeOption mergeOption, Type identityType);
    public virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public virtual void TakeSnapshot(EntityEntry entry);
    public virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public virtual EntityKey get_EntityKey();
    public virtual void set_EntityKey(EntityKey value);
    public virtual bool get_OwnsRelationshipManager();
    public virtual EntityKey GetEntityKeyFromEntity();
    public virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public virtual void RemoveNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public virtual void EnsureCollectionNotNull(RelatedEnd relatedEnd);
    public virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public virtual object get_Entity();
    public virtual TEntity get_TypedEntity();
    public virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
    public virtual bool get_RequiresRelationshipChangeTracking();
}
internal class System.Data.Objects.Internal.NullEntityWrapper : object {
    internal static IEntityWrapper NullWrapper { get; }
    public RelationshipManager RelationshipManager { get; }
    public bool OwnsRelationshipManager { get; }
    public object Entity { get; }
    public EntityEntry ObjectStateEntry { get; public set; }
    public EntityKey EntityKey { get; public set; }
    public ObjectContext Context { get; public set; }
    public MergeOption MergeOption { get; }
    public Type IdentityType { get; }
    public bool InitializingProxyRelatedEnds { get; public set; }
    public bool RequiresRelationshipChangeTracking { get; }
    private static NullEntityWrapper();
    internal static IEntityWrapper get_NullWrapper();
    public sealed virtual RelationshipManager get_RelationshipManager();
    public sealed virtual bool get_OwnsRelationshipManager();
    public sealed virtual object get_Entity();
    public sealed virtual EntityEntry get_ObjectStateEntry();
    public sealed virtual void set_ObjectStateEntry(EntityEntry value);
    public sealed virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public sealed virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public sealed virtual EntityKey get_EntityKey();
    public sealed virtual void set_EntityKey(EntityKey value);
    public sealed virtual EntityKey GetEntityKeyFromEntity();
    public sealed virtual ObjectContext get_Context();
    public sealed virtual void set_Context(ObjectContext value);
    public sealed virtual MergeOption get_MergeOption();
    public sealed virtual void AttachContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public sealed virtual void ResetContext(ObjectContext context, EntitySet entitySet, MergeOption mergeOption);
    public sealed virtual void DetachContext();
    public sealed virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public sealed virtual void TakeSnapshot(EntityEntry entry);
    public sealed virtual void TakeSnapshotOfRelationships(EntityEntry entry);
    public sealed virtual Type get_IdentityType();
    public sealed virtual void EnsureCollectionNotNull(RelatedEnd relatedEnd);
    public sealed virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public sealed virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public sealed virtual void RemoveNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public sealed virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public sealed virtual bool get_InitializingProxyRelatedEnds();
    public sealed virtual void set_InitializingProxyRelatedEnds(bool value);
    public sealed virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
    public sealed virtual bool get_RequiresRelationshipChangeTracking();
}
internal class System.Data.Objects.Internal.ObjectFullSpanRewriter : ObjectSpanRewriter {
    internal ObjectFullSpanRewriter(DbCommandTree tree, DbExpression toRewrite, Span span, AliasGenerator aliasGenerator);
    internal virtual SpanTrackingInfo CreateEntitySpanTrackingInfo(DbExpression expression, EntityType entityType);
}
internal class System.Data.Objects.Internal.ObjectQueryExecutionPlan : object {
    internal DbCommandDefinition CommandDefinition;
    internal ShaperFactory ResultShaperFactory;
    internal TypeUsage ResultType;
    internal MergeOption MergeOption;
    internal ReadOnlyCollection`1<KeyValuePair`2<ObjectParameter, QueryParameterExpression>> CompiledQueryParameters;
    internal static ObjectQueryExecutionPlan Prepare(ObjectContext context, DbQueryCommandTree tree, Type elementType, MergeOption mergeOption, Span span, ReadOnlyCollection`1<KeyValuePair`2<ObjectParameter, QueryParameterExpression>> compiledQueryParameters, AliasGenerator aliasGenerator);
    internal string ToTraceString();
    internal ObjectResult`1<TResultType> Execute(ObjectContext context, ObjectParameterCollection parameterValues);
    internal static ObjectResult`1<TResultType> ExecuteCommandTree(ObjectContext context, DbQueryCommandTree query, MergeOption mergeOption);
}
internal abstract class System.Data.Objects.Internal.ObjectQueryState : object {
    internal static MergeOption DefaultMergeOption;
    protected ObjectQueryExecutionPlan _cachedPlan;
    internal Type ElementType { get; }
    internal ObjectContext ObjectContext { get; }
    internal ObjectParameterCollection Parameters { get; }
    internal Span Span { get; }
    internal MergeOption EffectiveMergeOption { get; }
    internal Nullable`1<MergeOption> UserSpecifiedMergeOption { get; internal set; }
    internal bool PlanCachingEnabled { get; internal set; }
    internal TypeUsage ResultType { get; }
    protected ObjectQueryState(Type elementType, ObjectContext context, ObjectParameterCollection parameters, Span span);
    protected ObjectQueryState(Type elementType, ObjectQuery query);
    private static ObjectQueryState();
    internal Type get_ElementType();
    internal ObjectContext get_ObjectContext();
    internal ObjectParameterCollection get_Parameters();
    internal ObjectParameterCollection EnsureParameters();
    internal Span get_Span();
    internal MergeOption get_EffectiveMergeOption();
    internal Nullable`1<MergeOption> get_UserSpecifiedMergeOption();
    internal void set_UserSpecifiedMergeOption(Nullable`1<MergeOption> value);
    internal bool get_PlanCachingEnabled();
    internal void set_PlanCachingEnabled(bool value);
    internal TypeUsage get_ResultType();
    internal void ApplySettingsTo(ObjectQueryState other);
    internal abstract virtual bool TryGetCommandText(String& commandText);
    internal abstract virtual bool TryGetExpression(Expression& expression);
    internal abstract virtual ObjectQueryExecutionPlan GetExecutionPlan(Nullable`1<MergeOption> forMergeOption);
    internal abstract virtual ObjectQueryState Include(ObjectQuery`1<TElementType> sourceQuery, string includePath);
    protected abstract virtual TypeUsage GetResultType();
    protected static MergeOption EnsureMergeOption(Nullable`1[] preferredMergeOptions);
    protected static Nullable`1<MergeOption> GetMergeOption(Nullable`1[] preferredMergeOptions);
    internal ObjectQuery CreateQuery();
    public static ObjectQuery`1<TResultType> CreateObjectQuery(ObjectQueryState queryState);
}
internal class System.Data.Objects.Internal.ObjectSpanRewriter : object {
    internal MetadataWorkspace Metadata { get; }
    internal DbExpression Query { get; }
    internal bool RelationshipSpan { get; internal set; }
    internal SpanIndex SpanIndex { get; }
    internal ObjectSpanRewriter(DbCommandTree tree, DbExpression toRewrite, AliasGenerator aliasGenerator);
    internal static bool EntityTypeEquals(EntityTypeBase entityType1, EntityTypeBase entityType2);
    internal static bool TryRewrite(DbQueryCommandTree tree, Span span, MergeOption mergeOption, AliasGenerator aliasGenerator, DbExpression& newQuery, SpanIndex& spanInfo);
    internal MetadataWorkspace get_Metadata();
    internal DbExpression get_Query();
    internal bool get_RelationshipSpan();
    internal void set_RelationshipSpan(bool value);
    internal SpanIndex get_SpanIndex();
    internal DbExpression RewriteQuery();
    internal SpanTrackingInfo InitializeTrackingInfo(bool createAssociationEndTrackingInfo);
    internal virtual SpanTrackingInfo CreateEntitySpanTrackingInfo(DbExpression expression, EntityType entityType);
    protected DbExpression Rewrite(DbExpression expression);
}
internal class System.Data.Objects.Internal.PocoEntityKeyStrategy : object {
    public sealed virtual EntityKey GetEntityKey();
    public sealed virtual void SetEntityKey(EntityKey key);
    public sealed virtual EntityKey GetEntityKeyFromEntity();
}
internal class System.Data.Objects.Internal.PocoPropertyAccessorStrategy : object {
    public PocoPropertyAccessorStrategy(object entity);
    private static PocoPropertyAccessorStrategy();
    public sealed virtual object GetNavigationPropertyValue(RelatedEnd relatedEnd);
    public sealed virtual void SetNavigationPropertyValue(RelatedEnd relatedEnd, object value);
    public sealed virtual void CollectionAdd(RelatedEnd relatedEnd, object value);
    public sealed virtual bool CollectionRemove(RelatedEnd relatedEnd, object value);
    public sealed virtual object CollectionCreate(RelatedEnd relatedEnd);
}
internal class System.Data.Objects.Internal.SnapshotChangeTrackingStrategy : object {
    public static SnapshotChangeTrackingStrategy Instance { get; }
    private static SnapshotChangeTrackingStrategy();
    public static SnapshotChangeTrackingStrategy get_Instance();
    public sealed virtual void SetChangeTracker(IEntityChangeTracker changeTracker);
    public sealed virtual void TakeSnapshot(EntityEntry entry);
    public sealed virtual void SetCurrentValue(EntityEntry entry, StateManagerMemberMetadata member, int ordinal, object target, object value);
    public sealed virtual void UpdateCurrentValueRecord(object value, EntityEntry entry);
}
internal class System.Data.Objects.Internal.SpanIndex : object {
    internal void AddSpannedRowType(RowType spannedRowType, TypeUsage originalRowType);
    internal TypeUsage GetSpannedRowType(RowType spannedRowType);
    internal bool HasSpanMap(RowType spanRowType);
    internal void AddSpanMap(RowType rowType, Dictionary`2<int, AssociationEndMember> columnMap);
    internal Dictionary`2<int, AssociationEndMember> GetSpanMap(RowType rowType);
}
internal class System.Data.Objects.Internal.TransactionManager : object {
    internal Dictionary`2<RelatedEnd, IList`1<IEntityWrapper>> PromotedRelationships { get; private set; }
    internal Dictionary`2<object, EntityEntry> PromotedKeyEntries { get; private set; }
    internal HashSet`1<EntityReference> PopulatedEntityReferences { get; private set; }
    internal HashSet`1<EntityReference> AlignedEntityReferences { get; private set; }
    internal Nullable`1<MergeOption> OriginalMergeOption { get; internal set; }
    internal HashSet`1<IEntityWrapper> ProcessedEntities { get; private set; }
    internal Dictionary`2<object, IEntityWrapper> WrappedEntities { get; private set; }
    internal bool TrackProcessedEntities { get; private set; }
    internal bool IsAddTracking { get; private set; }
    internal bool IsAttachTracking { get; private set; }
    internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> AddedRelationshipsByGraph { get; private set; }
    internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> DeletedRelationshipsByGraph { get; private set; }
    internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> AddedRelationshipsByForeignKey { get; private set; }
    internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> AddedRelationshipsByPrincipalKey { get; private set; }
    internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> DeletedRelationshipsByForeignKey { get; private set; }
    internal Dictionary`2<IEntityWrapper, HashSet`1<RelatedEnd>> ChangedForeignKeys { get; private set; }
    internal bool IsDetectChanges { get; private set; }
    internal bool IsAlignChanges { get; private set; }
    internal bool IsLocalPublicAPI { get; private set; }
    internal bool IsOriginalValuesGetter { get; private set; }
    internal bool IsForeignKeyUpdate { get; private set; }
    internal bool IsRelatedEndAdd { get; private set; }
    internal bool IsGraphUpdate { get; }
    internal object EntityBeingReparented { get; internal set; }
    internal bool IsDetaching { get; private set; }
    internal EntityReference RelationshipBeingUpdated { get; private set; }
    internal bool IsFixupByReference { get; private set; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<RelatedEnd, IList`1<IEntityWrapper>> get_PromotedRelationships();
    [CompilerGeneratedAttribute]
private void set_PromotedRelationships(Dictionary`2<RelatedEnd, IList`1<IEntityWrapper>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<object, EntityEntry> get_PromotedKeyEntries();
    [CompilerGeneratedAttribute]
private void set_PromotedKeyEntries(Dictionary`2<object, EntityEntry> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<EntityReference> get_PopulatedEntityReferences();
    [CompilerGeneratedAttribute]
private void set_PopulatedEntityReferences(HashSet`1<EntityReference> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<EntityReference> get_AlignedEntityReferences();
    [CompilerGeneratedAttribute]
private void set_AlignedEntityReferences(HashSet`1<EntityReference> value);
    internal Nullable`1<MergeOption> get_OriginalMergeOption();
    internal void set_OriginalMergeOption(Nullable`1<MergeOption> value);
    [CompilerGeneratedAttribute]
internal HashSet`1<IEntityWrapper> get_ProcessedEntities();
    [CompilerGeneratedAttribute]
private void set_ProcessedEntities(HashSet`1<IEntityWrapper> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<object, IEntityWrapper> get_WrappedEntities();
    [CompilerGeneratedAttribute]
private void set_WrappedEntities(Dictionary`2<object, IEntityWrapper> value);
    [CompilerGeneratedAttribute]
internal bool get_TrackProcessedEntities();
    [CompilerGeneratedAttribute]
private void set_TrackProcessedEntities(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAddTracking();
    [CompilerGeneratedAttribute]
private void set_IsAddTracking(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAttachTracking();
    [CompilerGeneratedAttribute]
private void set_IsAttachTracking(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> get_AddedRelationshipsByGraph();
    [CompilerGeneratedAttribute]
private void set_AddedRelationshipsByGraph(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> get_DeletedRelationshipsByGraph();
    [CompilerGeneratedAttribute]
private void set_DeletedRelationshipsByGraph(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<IEntityWrapper>>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> get_AddedRelationshipsByForeignKey();
    [CompilerGeneratedAttribute]
private void set_AddedRelationshipsByForeignKey(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> get_AddedRelationshipsByPrincipalKey();
    [CompilerGeneratedAttribute]
private void set_AddedRelationshipsByPrincipalKey(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> get_DeletedRelationshipsByForeignKey();
    [CompilerGeneratedAttribute]
private void set_DeletedRelationshipsByForeignKey(Dictionary`2<IEntityWrapper, Dictionary`2<RelatedEnd, HashSet`1<EntityKey>>> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<IEntityWrapper, HashSet`1<RelatedEnd>> get_ChangedForeignKeys();
    [CompilerGeneratedAttribute]
private void set_ChangedForeignKeys(Dictionary`2<IEntityWrapper, HashSet`1<RelatedEnd>> value);
    [CompilerGeneratedAttribute]
internal bool get_IsDetectChanges();
    [CompilerGeneratedAttribute]
private void set_IsDetectChanges(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsAlignChanges();
    [CompilerGeneratedAttribute]
private void set_IsAlignChanges(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsLocalPublicAPI();
    [CompilerGeneratedAttribute]
private void set_IsLocalPublicAPI(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsOriginalValuesGetter();
    [CompilerGeneratedAttribute]
private void set_IsOriginalValuesGetter(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsForeignKeyUpdate();
    [CompilerGeneratedAttribute]
private void set_IsForeignKeyUpdate(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsRelatedEndAdd();
    [CompilerGeneratedAttribute]
private void set_IsRelatedEndAdd(bool value);
    internal bool get_IsGraphUpdate();
    [CompilerGeneratedAttribute]
internal object get_EntityBeingReparented();
    [CompilerGeneratedAttribute]
internal void set_EntityBeingReparented(object value);
    [CompilerGeneratedAttribute]
internal bool get_IsDetaching();
    [CompilerGeneratedAttribute]
private void set_IsDetaching(bool value);
    [CompilerGeneratedAttribute]
internal EntityReference get_RelationshipBeingUpdated();
    [CompilerGeneratedAttribute]
private void set_RelationshipBeingUpdated(EntityReference value);
    [CompilerGeneratedAttribute]
internal bool get_IsFixupByReference();
    [CompilerGeneratedAttribute]
private void set_IsFixupByReference(bool value);
    internal void BeginAddTracking();
    internal void EndAddTracking();
    internal void BeginAttachTracking();
    internal void EndAttachTracking();
    internal bool BeginDetectChanges();
    internal void EndDetectChanges();
    internal void BeginAlignChanges();
    internal void EndAlignChanges();
    internal void ResetProcessedEntities();
    internal void BeginLocalPublicAPI();
    internal void EndLocalPublicAPI();
    internal void BeginOriginalValuesGetter();
    internal void EndOriginalValuesGetter();
    internal void BeginForeignKeyUpdate(EntityReference relationship);
    internal void EndForeignKeyUpdate();
    internal void BeginRelatedEndAdd();
    internal void EndRelatedEndAdd();
    internal void BeginGraphUpdate();
    internal void EndGraphUpdate();
    internal void BeginDetaching();
    internal void EndDetaching();
    internal void BeginFixupKeysByReference();
    internal void EndFixupKeysByReference();
}
public interface System.Data.Objects.IObjectSet`1 {
    public abstract virtual void AddObject(TEntity entity);
    public abstract virtual void Attach(TEntity entity);
    public abstract virtual void DeleteObject(TEntity entity);
    public abstract virtual void Detach(TEntity entity);
}
internal interface System.Data.Objects.IObjectView {
    public abstract virtual void EntityPropertyChanged(object sender, PropertyChangedEventArgs e);
    public abstract virtual void CollectionChanged(object sender, CollectionChangeEventArgs e);
}
internal interface System.Data.Objects.IObjectViewData`1 {
    public IList`1<T> List { get; }
    public bool AllowNew { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public bool FiresEventOnAdd { get; }
    public bool FiresEventOnRemove { get; }
    public bool FiresEventOnClear { get; }
    public abstract virtual IList`1<T> get_List();
    public abstract virtual bool get_AllowNew();
    public abstract virtual bool get_AllowEdit();
    public abstract virtual bool get_AllowRemove();
    public abstract virtual bool get_FiresEventOnAdd();
    public abstract virtual bool get_FiresEventOnRemove();
    public abstract virtual bool get_FiresEventOnClear();
    public abstract virtual void EnsureCanAddNew();
    public abstract virtual int Add(T item, bool isAddNew);
    public abstract virtual void CommitItemAt(int index);
    public abstract virtual void Clear();
    public abstract virtual bool Remove(T item, bool isCancelNew);
    public abstract virtual ListChangedEventArgs OnCollectionChanged(object sender, CollectionChangeEventArgs e, ObjectViewListener listener);
}
internal static class System.Data.Objects.LightweightCodeGenerator : object {
    internal static ReflectionPermission MemberAccessReflectionPermission;
    private static LightweightCodeGenerator();
    internal static Delegate GetConstructorDelegateForType(ClrComplexType clrType);
    internal static Delegate GetConstructorDelegateForType(ClrEntityType clrType);
    internal static object GetValue(EdmProperty property, object target);
    internal static Func`2<object, object> GetGetterDelegateForProperty(EdmProperty property);
    internal static void SetValue(EdmProperty property, object target, object value);
    internal static Action`2<object, object> GetSetterDelegateForProperty(EdmProperty property);
    internal static RelatedEnd GetRelatedEnd(RelationshipManager sourceRelationshipManager, AssociationEndMember sourceMember, AssociationEndMember targetMember, RelatedEnd existingRelatedEnd);
    internal static Action`2<object, object> CreateNavigationPropertySetter(Type declaringType, PropertyInfo navigationProperty);
    internal static ConstructorInfo GetConstructorForType(Type type);
    internal static Delegate CreateConstructor(Type type);
    internal static void ValidateSetterProperty(RuntimeTypeHandle entityDeclaringType, RuntimeMethodHandle setterMethodHandle, MethodInfo& setterMethodInfo, Type& realType);
    internal static bool RequiresPermissionDemands(MethodBase mi);
    internal static bool IsPublic(MethodBase method);
    internal static bool IsPublic(Type type);
    internal static bool HasMemberAccessReflectionPermission();
    [SecuritySafeCriticalAttribute]
internal static DynamicMethod CreateDynamicMethod(string name, Type returnType, Type[] parameterTypes);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Objects.MaterializedDataRecord : DbDataRecord {
    public DataRecordInfo DataRecordInfo { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal MaterializedDataRecord(MetadataWorkspace workspace, TypeUsage edmUsage, Object[] values);
    public sealed virtual DataRecordInfo get_DataRecordInfo();
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public sealed virtual DbDataRecord GetDataRecord(int ordinal);
    public sealed virtual DbDataReader GetDataReader(int i);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    internal static PropertyDescriptorCollection CreatePropertyDescriptorCollection(StructuralType structuralType, Type componentType, bool isReadOnly);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
public enum System.Data.Objects.MergeOption : Enum {
    public int value__;
    public static MergeOption AppendOnly;
    public static MergeOption OverwriteChanges;
    public static MergeOption PreserveChanges;
    public static MergeOption NoTracking;
}
internal class System.Data.Objects.NextResultGenerator : object {
    internal NextResultGenerator(ObjectContext context, EntityCommand entityCommand, EdmType[] edmTypes, ReadOnlyMetadataCollection`1<EntitySet> entitySets, MergeOption mergeOption, int resultSetIndex);
    internal ObjectResult`1<TElement> GetNextResult(DbDataReader storeReader);
}
public class System.Data.Objects.ObjectContext : object {
    public DbConnection Connection { get; }
    public string DefaultContainerName { get; public set; }
    [CLSCompliantAttribute("False")]
public MetadataWorkspace MetadataWorkspace { get; }
    public ObjectStateManager ObjectStateManager { get; }
    internal ClrPerspective Perspective { get; }
    public Nullable`1<int> CommandTimeout { get; public set; }
    protected internal IQueryProvider QueryProvider { get; }
    internal bool InMaterialization { get; internal set; }
    public ObjectContextOptions ContextOptions { get; }
    internal bool OnMaterializedHasHandlers { get; }
    internal CollectionColumnMap ColumnMapBuilder { get; internal set; }
    public ObjectContext(EntityConnection connection);
    public ObjectContext(string connectionString);
    protected ObjectContext(string connectionString, string defaultContainerName);
    protected ObjectContext(EntityConnection connection, string defaultContainerName);
    public DbConnection get_Connection();
    public string get_DefaultContainerName();
    public void set_DefaultContainerName(string value);
    public MetadataWorkspace get_MetadataWorkspace();
    public ObjectStateManager get_ObjectStateManager();
    internal ClrPerspective get_Perspective();
    public Nullable`1<int> get_CommandTimeout();
    public void set_CommandTimeout(Nullable`1<int> value);
    protected internal IQueryProvider get_QueryProvider();
    [CompilerGeneratedAttribute]
internal bool get_InMaterialization();
    [CompilerGeneratedAttribute]
internal void set_InMaterialization(bool value);
    public ObjectContextOptions get_ContextOptions();
    public void add_SavingChanges(EventHandler value);
    public void remove_SavingChanges(EventHandler value);
    public void add_ObjectMaterialized(ObjectMaterializedEventHandler value);
    public void remove_ObjectMaterialized(ObjectMaterializedEventHandler value);
    internal void OnObjectMaterialized(object entity);
    internal bool get_OnMaterializedHasHandlers();
    public void AcceptAllChanges();
    public void AddObject(string entitySetName, object entity);
    internal void AddSingleObject(EntitySet entitySet, IEntityWrapper wrappedEntity, string argumentName);
    public void LoadProperty(object entity, string navigationProperty);
    public void LoadProperty(object entity, string navigationProperty, MergeOption mergeOption);
    public void LoadProperty(TEntity entity, Expression`1<Func`2<TEntity, object>> selector);
    public void LoadProperty(TEntity entity, Expression`1<Func`2<TEntity, object>> selector, MergeOption mergeOption);
    internal static string ParsePropertySelectorExpression(Expression`1<Func`2<TEntity, object>> selector, Boolean& removedConvert);
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[ObsoleteAttribute("Use ApplyCurrentValues instead")]
public void ApplyPropertyChanges(string entitySetName, object changed);
    public TEntity ApplyCurrentValues(string entitySetName, TEntity currentEntity);
    public TEntity ApplyOriginalValues(string entitySetName, TEntity originalEntity);
    public void AttachTo(string entitySetName, object entity);
    public void Attach(IEntityWithKey entity);
    internal void AttachSingleObject(IEntityWrapper wrappedEntity, EntitySet entitySet, string argumentName);
    public EntityKey CreateEntityKey(string entitySetName, object entity);
    internal EntitySet GetEntitySetFromName(string entitySetName);
    public ObjectSet`1<TEntity> CreateObjectSet();
    public ObjectSet`1<TEntity> CreateObjectSet(string entitySetName);
    internal void EnsureConnection();
    internal void ReleaseConnection();
    internal void EnsureMetadata();
    public ObjectQuery`1<T> CreateQuery(string queryString, ObjectParameter[] parameters);
    public void DeleteObject(object entity);
    internal void DeleteObject(object entity, EntitySet expectedEntitySet);
    public void Detach(object entity);
    internal void Detach(object entity, EntitySet expectedEntitySet);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal EntitySet GetEntitySet(string entitySetName, string entityContainerName);
    internal TypeUsage GetTypeUsage(Type entityCLRType);
    public object GetObjectByKey(EntityKey key);
    public void Refresh(RefreshMode refreshMode, IEnumerable collection);
    public void Refresh(RefreshMode refreshMode, object entity);
    public int SaveChanges();
    [ObsoleteAttribute("Use SaveChanges(SaveOptions options) instead.")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public int SaveChanges(bool acceptChangesDuringSave);
    public virtual int SaveChanges(SaveOptions options);
    public void DetectChanges();
    public bool TryGetObjectByKey(EntityKey key, Object& value);
    public ObjectResult`1<TElement> ExecuteFunction(string functionName, ObjectParameter[] parameters);
    public ObjectResult`1<TElement> ExecuteFunction(string functionName, MergeOption mergeOption, ObjectParameter[] parameters);
    public int ExecuteFunction(string functionName, ObjectParameter[] parameters);
    internal ObjectResult`1<TElement> MaterializedDataRecord(EntityCommand entityCommand, DbDataReader storeReader, int resultSetIndex, ReadOnlyMetadataCollection`1<EntitySet> entitySets, EdmType[] edmTypes, MergeOption mergeOption);
    public void CreateProxyTypes(IEnumerable`1<Type> types);
    public static IEnumerable`1<Type> GetKnownProxyTypes();
    public static Type GetObjectType(Type type);
    public T CreateObject();
    public int ExecuteStoreCommand(string commandText, Object[] parameters);
    public ObjectResult`1<TElement> ExecuteStoreQuery(string commandText, Object[] parameters);
    public ObjectResult`1<TEntity> ExecuteStoreQuery(string commandText, string entitySetName, MergeOption mergeOption, Object[] parameters);
    public ObjectResult`1<TElement> Translate(DbDataReader reader);
    public ObjectResult`1<TEntity> Translate(DbDataReader reader, string entitySetName, MergeOption mergeOption);
    public void CreateDatabase();
    public void DeleteDatabase();
    public bool DatabaseExists();
    public string CreateDatabaseScript();
    [CompilerGeneratedAttribute]
internal CollectionColumnMap get_ColumnMapBuilder();
    [CompilerGeneratedAttribute]
internal void set_ColumnMapBuilder(CollectionColumnMap value);
}
public class System.Data.Objects.ObjectContextOptions : object {
    public bool LazyLoadingEnabled { get; public set; }
    public bool ProxyCreationEnabled { get; public set; }
    public bool UseLegacyPreserveChangesBehavior { get; public set; }
    public bool UseConsistentNullReferenceBehavior { get; public set; }
    public bool UseCSharpNullComparisonBehavior { get; public set; }
    public bool get_LazyLoadingEnabled();
    public void set_LazyLoadingEnabled(bool value);
    public bool get_ProxyCreationEnabled();
    public void set_ProxyCreationEnabled(bool value);
    public bool get_UseLegacyPreserveChangesBehavior();
    public void set_UseLegacyPreserveChangesBehavior(bool value);
    public bool get_UseConsistentNullReferenceBehavior();
    public void set_UseConsistentNullReferenceBehavior(bool value);
    public bool get_UseCSharpNullComparisonBehavior();
    public void set_UseCSharpNullComparisonBehavior(bool value);
}
public class System.Data.Objects.ObjectMaterializedEventArgs : EventArgs {
    public object Entity { get; }
    internal ObjectMaterializedEventArgs(object entity);
    public object get_Entity();
}
public class System.Data.Objects.ObjectMaterializedEventHandler : MulticastDelegate {
    public ObjectMaterializedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectMaterializedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectMaterializedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.Objects.ObjectParameter : object {
    public string Name { get; }
    public Type ParameterType { get; }
    public object Value { get; public set; }
    internal TypeUsage TypeUsage { get; internal set; }
    internal Type MappableType { get; }
    public ObjectParameter(string name, Type type);
    public ObjectParameter(string name, object value);
    internal static bool ValidateParameterName(string name);
    public string get_Name();
    public Type get_ParameterType();
    public object get_Value();
    public void set_Value(object value);
    internal TypeUsage get_TypeUsage();
    internal void set_TypeUsage(TypeUsage value);
    internal Type get_MappableType();
    internal ObjectParameter ShallowCopy();
    internal bool ValidateParameterType(ClrPerspective perspective);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Objects.ObjectParameterCollection : object {
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Data.Objects.ObjectParameter>.IsReadOnly { get; }
    public ObjectParameter Item { get; }
    internal ObjectParameterCollection(ClrPerspective perspective);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Data.Objects.ObjectParameter>.get_IsReadOnly();
    public ObjectParameter get_Item(string name);
    public sealed virtual void Add(ObjectParameter parameter);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ObjectParameter parameter);
    public bool Contains(string name);
    public sealed virtual void CopyTo(ObjectParameter[] array, int index);
    public sealed virtual bool Remove(ObjectParameter parameter);
    private sealed virtual override IEnumerator`1<ObjectParameter> System.Collections.Generic.IEnumerable<System.Data.Objects.ObjectParameter>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal string GetCacheKey();
    internal void SetReadOnly(bool isReadOnly);
    internal static ObjectParameterCollection DeepCopy(ObjectParameterCollection copyParams);
}
public abstract class System.Data.Objects.ObjectQuery : object {
    internal ObjectQueryState QueryState { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public string CommandText { get; }
    public ObjectContext Context { get; }
    public MergeOption MergeOption { get; public set; }
    public ObjectParameterCollection Parameters { get; }
    public bool EnablePlanCaching { get; public set; }
    internal ObjectQuery(ObjectQueryState queryState);
    internal ObjectQueryState get_QueryState();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    internal abstract virtual Expression GetExpression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    public string get_CommandText();
    public ObjectContext get_Context();
    public MergeOption get_MergeOption();
    public void set_MergeOption(MergeOption value);
    public ObjectParameterCollection get_Parameters();
    public bool get_EnablePlanCaching();
    public void set_EnablePlanCaching(bool value);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    [BrowsableAttribute("False")]
public string ToTraceString();
    public TypeUsage GetResultType();
    public ObjectResult Execute(MergeOption mergeOption);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal abstract virtual IEnumerator GetEnumeratorInternal();
    internal abstract virtual IList GetIListSourceListInternal();
    internal abstract virtual ObjectResult ExecuteInternal(MergeOption mergeOption);
}
public class System.Data.Objects.ObjectQuery`1 : ObjectQuery {
    public string Name { get; public set; }
    public ObjectQuery`1(string commandText, ObjectContext context);
    public ObjectQuery`1(string commandText, ObjectContext context, MergeOption mergeOption);
    internal ObjectQuery`1(EntitySetBase entitySet, ObjectContext context, MergeOption mergeOption);
    internal ObjectQuery`1(ObjectQueryState queryState);
    public string get_Name();
    public void set_Name(string value);
    public ObjectQuery`1<T> Distinct();
    public ObjectQuery`1<T> Except(ObjectQuery`1<T> query);
    public ObjectQuery`1<DbDataRecord> GroupBy(string keys, string projection, ObjectParameter[] parameters);
    public ObjectQuery`1<T> Intersect(ObjectQuery`1<T> query);
    public ObjectQuery`1<TResultType> OfType();
    public ObjectQuery`1<T> OrderBy(string keys, ObjectParameter[] parameters);
    public ObjectQuery`1<DbDataRecord> Select(string projection, ObjectParameter[] parameters);
    public ObjectQuery`1<TResultType> SelectValue(string projection, ObjectParameter[] parameters);
    public ObjectQuery`1<T> Skip(string keys, string count, ObjectParameter[] parameters);
    public ObjectQuery`1<T> Top(string count, ObjectParameter[] parameters);
    public ObjectQuery`1<T> Union(ObjectQuery`1<T> query);
    public ObjectQuery`1<T> UnionAll(ObjectQuery`1<T> query);
    public ObjectQuery`1<T> Where(string predicate, ObjectParameter[] parameters);
    public ObjectResult`1<T> Execute(MergeOption mergeOption);
    public ObjectQuery`1<T> Include(string path);
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    internal virtual IEnumerator GetEnumeratorInternal();
    internal virtual IList GetIListSourceListInternal();
    internal virtual ObjectResult ExecuteInternal(MergeOption mergeOption);
    internal virtual Expression GetExpression();
    internal ObjectQuery`1<T> MergeAs(MergeOption mergeOption);
    internal ObjectQuery`1<T> IncludeSpan(Span span);
}
internal class System.Data.Objects.ObjectReferenceEqualityComparer : object {
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj);
}
public abstract class System.Data.Objects.ObjectResult : object {
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public Type ElementType { get; }
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    public abstract virtual Type get_ElementType();
    public abstract virtual void Dispose();
    public ObjectResult`1<TElement> GetNextResult();
    internal abstract virtual IEnumerator GetEnumeratorInternal();
    internal abstract virtual IList GetIListSourceListInternal();
    internal abstract virtual ObjectResult`1<TElement> GetNextResultInternal();
}
public class System.Data.Objects.ObjectResult`1 : ObjectResult {
    public Type ElementType { get; }
    internal ObjectResult`1(Shaper`1<T> shaper, EntitySet singleEntitySet, TypeUsage resultItemType);
    internal ObjectResult`1(Shaper`1<T> shaper, EntitySet singleEntitySet, TypeUsage resultItemType, bool readerOwned);
    internal ObjectResult`1(Shaper`1<T> shaper, EntitySet singleEntitySet, TypeUsage resultItemType, bool readerOwned, NextResultGenerator nextResultGenerator, Action`2<object, EventArgs> onReaderDispose);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public virtual void Dispose();
    internal virtual IEnumerator GetEnumeratorInternal();
    internal virtual IList GetIListSourceListInternal();
    internal virtual ObjectResult`1<TElement> GetNextResultInternal();
    public virtual Type get_ElementType();
}
public class System.Data.Objects.ObjectSet`1 : ObjectQuery`1<TEntity> {
    public EntitySet EntitySet { get; }
    internal ObjectSet`1(EntitySet entitySet, ObjectContext context);
    public EntitySet get_EntitySet();
    public sealed virtual void AddObject(TEntity entity);
    public sealed virtual void Attach(TEntity entity);
    public sealed virtual void DeleteObject(TEntity entity);
    public sealed virtual void Detach(TEntity entity);
    public TEntity ApplyCurrentValues(TEntity currentEntity);
    public TEntity ApplyOriginalValues(TEntity originalEntity);
    public TEntity CreateObject();
    public T CreateObject();
}
public abstract class System.Data.Objects.ObjectStateEntry : object {
    internal ObjectStateManager _cache;
    internal EntitySetBase _entitySet;
    internal EntityState _state;
    public ObjectStateManager ObjectStateManager { get; }
    public EntitySetBase EntitySet { get; }
    public EntityState State { get; internal set; }
    public object Entity { get; }
    public EntityKey EntityKey { get; internal set; }
    public bool IsRelationship { get; }
    internal BitArray ModifiedProperties { get; }
    private BitArray System.Data.IEntityStateEntry.ModifiedProperties { get; }
    [DebuggerBrowsableAttribute("0")]
public DbDataRecord OriginalValues { get; }
    [DebuggerBrowsableAttribute("0")]
public CurrentValueRecord CurrentValues { get; }
    public RelationshipManager RelationshipManager { get; }
    private IEntityStateManager System.Data.IEntityStateEntry.StateManager { get; }
    private bool System.Data.IEntityStateEntry.IsKeyEntry { get; }
    private EntityState System.Data.Objects.DataClasses.IEntityChangeTracker.EntityState { get; }
    internal bool IsKeyEntry { get; }
    internal ObjectStateEntry(ObjectStateManager cache, EntitySet entitySet, EntityState state);
    public ObjectStateManager get_ObjectStateManager();
    public sealed virtual EntitySetBase get_EntitySet();
    public sealed virtual EntityState get_State();
    internal void set_State(EntityState value);
    public abstract virtual object get_Entity();
    public abstract virtual EntityKey get_EntityKey();
    internal abstract virtual void set_EntityKey(EntityKey value);
    public abstract virtual bool get_IsRelationship();
    internal abstract virtual BitArray get_ModifiedProperties();
    private sealed virtual override BitArray System.Data.IEntityStateEntry.get_ModifiedProperties();
    public abstract virtual DbDataRecord get_OriginalValues();
    public abstract virtual OriginalValueRecord GetUpdatableOriginalValues();
    public abstract virtual CurrentValueRecord get_CurrentValues();
    public abstract virtual void AcceptChanges();
    public abstract virtual void Delete();
    public abstract virtual IEnumerable`1<string> GetModifiedProperties();
    public abstract virtual void SetModified();
    public abstract virtual void SetModifiedProperty(string propertyName);
    public abstract virtual void RejectPropertyChanges(string propertyName);
    public abstract virtual bool IsPropertyChanged(string propertyName);
    public abstract virtual RelationshipManager get_RelationshipManager();
    public abstract virtual void ChangeState(EntityState state);
    public abstract virtual void ApplyCurrentValues(object currentEntity);
    public abstract virtual void ApplyOriginalValues(object originalEntity);
    private sealed virtual override IEntityStateManager System.Data.IEntityStateEntry.get_StateManager();
    private sealed virtual override bool System.Data.IEntityStateEntry.get_IsKeyEntry();
    private sealed virtual override void System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(string entityMemberName);
    private sealed virtual override void System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(string entityMemberName);
    private sealed virtual override void System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName);
    private sealed virtual override void System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName);
    private sealed virtual override EntityState System.Data.Objects.DataClasses.IEntityChangeTracker.get_EntityState();
    internal abstract virtual bool get_IsKeyEntry();
    internal abstract virtual int GetFieldCount(StateManagerTypeMetadata metadata);
    internal abstract virtual Type GetFieldType(int ordinal, StateManagerTypeMetadata metadata);
    internal abstract virtual string GetCLayerName(int ordinal, StateManagerTypeMetadata metadata);
    internal abstract virtual int GetOrdinalforCLayerName(string name, StateManagerTypeMetadata metadata);
    internal abstract virtual void RevertDelete();
    internal abstract virtual void SetModifiedAll();
    internal abstract virtual void EntityMemberChanging(string entityMemberName);
    internal abstract virtual void EntityMemberChanged(string entityMemberName);
    internal abstract virtual void EntityComplexMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal abstract virtual void EntityComplexMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal abstract virtual DataRecordInfo GetDataRecordInfo(StateManagerTypeMetadata metadata, object userObject);
    internal virtual void Reset();
    internal void ValidateState();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Objects.ObjectStateEntryDbDataRecord : DbDataRecord {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public DataRecordInfo DataRecordInfo { get; }
    internal ObjectStateEntryDbDataRecord(EntityEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
    internal ObjectStateEntryDbDataRecord(RelationshipEntry cacheEntry);
    public virtual int get_FieldCount();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public sealed virtual DataRecordInfo get_DataRecordInfo();
    public sealed virtual DbDataRecord GetDataRecord(int ordinal);
    public sealed virtual DbDataReader GetDataReader(int i);
}
internal class System.Data.Objects.ObjectStateEntryDbUpdatableDataRecord : CurrentValueRecord {
    internal ObjectStateEntryDbUpdatableDataRecord(EntityEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
    internal ObjectStateEntryDbUpdatableDataRecord(RelationshipEntry cacheEntry);
    protected virtual object GetRecordValue(int ordinal);
    protected virtual void SetRecordValue(int ordinal, object value);
}
internal class System.Data.Objects.ObjectStateEntryOriginalDbUpdatableDataRecord_Internal : OriginalValueRecord {
    internal ObjectStateEntryOriginalDbUpdatableDataRecord_Internal(EntityEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
    protected virtual object GetRecordValue(int ordinal);
    protected virtual void SetRecordValue(int ordinal, object value);
}
internal class System.Data.Objects.ObjectStateEntryOriginalDbUpdatableDataRecord_Public : ObjectStateEntryOriginalDbUpdatableDataRecord_Internal {
    internal ObjectStateEntryOriginalDbUpdatableDataRecord_Public(EntityEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject, int parentEntityPropertyIndex);
    protected virtual object GetRecordValue(int ordinal);
    protected virtual void SetRecordValue(int ordinal, object value);
}
public class System.Data.Objects.ObjectStateManager : object {
    internal object ChangingObject { get; internal set; }
    internal string ChangingEntityMember { get; internal set; }
    internal string ChangingMember { get; internal set; }
    internal EntityState ChangingState { get; internal set; }
    internal bool SaveOriginalValues { get; internal set; }
    internal object ChangingOldValue { get; internal set; }
    internal bool InRelationshipFixup { get; }
    internal ComplexTypeMaterializer ComplexTypeMaterializer { get; }
    internal TransactionManager TransactionManager { get; private set; }
    [CLSCompliantAttribute("False")]
public MetadataWorkspace MetadataWorkspace { get; }
    internal bool IsDisposed { get; }
    internal object EntityInvokingFKSetter { get; internal set; }
    [CLSCompliantAttribute("False")]
public ObjectStateManager(MetadataWorkspace metadataWorkspace);
    internal object get_ChangingObject();
    internal void set_ChangingObject(object value);
    internal string get_ChangingEntityMember();
    internal void set_ChangingEntityMember(string value);
    internal string get_ChangingMember();
    internal void set_ChangingMember(string value);
    internal EntityState get_ChangingState();
    internal void set_ChangingState(EntityState value);
    internal bool get_SaveOriginalValues();
    internal void set_SaveOriginalValues(bool value);
    internal object get_ChangingOldValue();
    internal void set_ChangingOldValue(object value);
    internal bool get_InRelationshipFixup();
    internal ComplexTypeMaterializer get_ComplexTypeMaterializer();
    [CompilerGeneratedAttribute]
internal TransactionManager get_TransactionManager();
    [CompilerGeneratedAttribute]
private void set_TransactionManager(TransactionManager value);
    public MetadataWorkspace get_MetadataWorkspace();
    public void add_ObjectStateManagerChanged(CollectionChangeEventHandler value);
    public void remove_ObjectStateManagerChanged(CollectionChangeEventHandler value);
    internal void add_EntityDeleted(CollectionChangeEventHandler value);
    internal void remove_EntityDeleted(CollectionChangeEventHandler value);
    internal void OnObjectStateManagerChanged(CollectionChangeAction action, object entity);
    internal EntityEntry AddKeyEntry(EntityKey entityKey, EntitySet entitySet);
    internal EntityEntry AddEntry(IEntityWrapper wrappedObject, EntityKey passedKey, EntitySet entitySet, string argumentName, bool isAdded);
    internal void FixupReferencesByForeignKeys(EntityEntry newEntry, bool replaceAddedRefs);
    internal void AddEntryContainingForeignKeyToIndex(EntityKey foreignKey, EntityEntry entry);
    [ConditionalAttribute("DEBUG")]
internal void AssertEntryDoesNotExistInForeignKeyIndex(EntityEntry entry);
    [ConditionalAttribute("DEBUG")]
internal void AssertAllForeignKeyIndexEntriesAreValid();
    internal void RemoveEntryFromForeignKeyIndex(EntityKey foreignKey, EntityEntry entry);
    internal void RemoveForeignKeyFromIndex(EntityKey foreignKey);
    internal IEnumerable`1<EntityEntry> GetNonFixedupEntriesContainingForeignKey(EntityKey foreignKey);
    internal void RememberEntryWithConceptualNull(EntityEntry entry);
    internal bool SomeEntryWithConceptualNullExists();
    internal bool EntryHasConceptualNull(EntityEntry entry);
    internal void ForgetEntryWithConceptualNull(EntityEntry entry, bool resetAllKeys);
    internal void PromoteKeyEntryInitialization(ObjectContext contextToAttach, EntityEntry keyEntry, IEntityWrapper wrappedEntity, IExtendedDataRecord shadowValues, bool replacingEntry);
    internal void PromoteKeyEntry(EntityEntry keyEntry, IEntityWrapper wrappedEntity, IExtendedDataRecord shadowValues, bool replacingEntry, bool setIsLoaded, bool keyEntryInitialized, string argumentName);
    internal void TrackPromotedRelationship(RelatedEnd relatedEnd, IEntityWrapper wrappedEntity);
    internal void DegradePromotedRelationships();
    internal static void AddEntityToCollectionOrReference(MergeOption mergeOption, IEntityWrapper wrappedSource, AssociationEndMember sourceMember, IEntityWrapper wrappedTarget, AssociationEndMember targetMember, bool setIsLoaded, bool relationshipAlreadyExists, bool inKeyEntryPromotion);
    internal static int UpdateRelationships(ObjectContext context, MergeOption mergeOption, AssociationSet associationSet, AssociationEndMember sourceMember, EntityKey sourceKey, IEntityWrapper wrappedSource, AssociationEndMember targetMember, IList targets, bool setIsLoaded);
    internal static void RemoveRelationships(ObjectContext context, MergeOption mergeOption, AssociationSet associationSet, EntityKey sourceKey, AssociationEndMember sourceMember);
    internal static bool TryUpdateExistingRelationships(ObjectContext context, MergeOption mergeOption, AssociationSet associationSet, AssociationEndMember sourceMember, EntityKey sourceKey, IEntityWrapper wrappedSource, AssociationEndMember targetMember, EntityKey targetKey, bool setIsLoaded, EntityState& newEntryState);
    internal static void RemoveRelatedEndsAndDetachRelationship(RelationshipEntry relationshipToRemove, bool setIsLoaded);
    internal EntityEntry AttachEntry(EntityKey entityKey, IEntityWrapper wrappedObject, EntitySet entitySet, string argumentName);
    internal RelationshipEntry AddNewRelation(RelationshipWrapper wrapper, EntityState desiredState);
    internal RelationshipEntry AddRelation(RelationshipWrapper wrapper, EntityState desiredState);
    internal RelationshipEntry FindRelationship(RelationshipSet relationshipSet, KeyValuePair`2<string, EntityKey> roleAndKey1, KeyValuePair`2<string, EntityKey> roleAndKey2);
    internal RelationshipEntry FindRelationship(RelationshipWrapper relationshipWrapper);
    internal RelationshipEntry DeleteRelationship(RelationshipSet relationshipSet, KeyValuePair`2<string, EntityKey> roleAndKey1, KeyValuePair`2<string, EntityKey> roleAndKey2);
    internal void DeleteKeyEntry(EntityEntry keyEntry);
    internal RelationshipEntry[] CopyOfRelationshipsByKey(EntityKey key);
    internal RelationshipEndEnumerable FindRelationshipsByKey(EntityKey key);
    private sealed virtual override IEnumerable`1<IEntityStateEntry> System.Data.IEntityStateManager.FindRelationshipsByKey(EntityKey key);
    public IEnumerable`1<ObjectStateEntry> GetObjectStateEntries(EntityState state);
    private sealed virtual override IEnumerable`1<IEntityStateEntry> System.Data.IEntityStateManager.GetEntityStateEntries(EntityState state);
    internal int GetObjectStateEntriesCount(EntityState state);
    internal void FixupKey(EntityEntry entry);
    internal void ReplaceKeyWithTemporaryKey(EntityEntry entry);
    public ObjectStateEntry ChangeObjectState(object entity, EntityState entityState);
    public ObjectStateEntry ChangeRelationshipState(object sourceEntity, object targetEntity, string navigationProperty, EntityState relationshipState);
    public ObjectStateEntry ChangeRelationshipState(TEntity sourceEntity, object targetEntity, Expression`1<Func`2<TEntity, object>> navigationPropertySelector, EntityState relationshipState);
    public ObjectStateEntry ChangeRelationshipState(object sourceEntity, object targetEntity, string relationshipName, string targetRoleName, EntityState relationshipState);
    private sealed virtual override IEntityStateEntry System.Data.IEntityStateManager.GetEntityStateEntry(EntityKey key);
    public ObjectStateEntry GetObjectStateEntry(EntityKey key);
    internal EntityEntry GetEntityEntry(EntityKey key);
    public ObjectStateEntry GetObjectStateEntry(object entity);
    internal EntityEntry GetEntityEntry(object entity);
    public bool TryGetObjectStateEntry(object entity, ObjectStateEntry& entry);
    private sealed virtual override bool System.Data.IEntityStateManager.TryGetEntityStateEntry(EntityKey key, IEntityStateEntry& entry);
    private sealed virtual override bool System.Data.IEntityStateManager.TryGetReferenceKey(EntityKey dependentKey, AssociationEndMember principalRole, EntityKey& principalKey);
    public bool TryGetObjectStateEntry(EntityKey key, ObjectStateEntry& entry);
    internal bool TryGetEntityEntry(EntityKey key, EntityEntry& entry);
    internal EntityEntry FindEntityEntry(EntityKey key);
    internal EntityEntry FindEntityEntry(object entity);
    public RelationshipManager GetRelationshipManager(object entity);
    public bool TryGetRelationshipManager(object entity, RelationshipManager& relationshipManager);
    internal void ChangeState(RelationshipEntry entry, EntityState oldState, EntityState newState);
    internal void ChangeState(EntityEntry entry, EntityState oldState, EntityState newState);
    internal void RemoveEntryFromKeylessStore(IEntityWrapper wrappedEntity);
    internal StateManagerTypeMetadata GetOrAddStateManagerTypeMetadata(Type entityType, EntitySet entitySet);
    internal StateManagerTypeMetadata GetOrAddStateManagerTypeMetadata(EdmType edmType);
    internal void Dispose();
    internal bool get_IsDisposed();
    internal void DetectChanges();
    internal EntityKey GetPermanentKey(IEntityWrapper entityFrom, RelatedEnd relatedEndFrom, IEntityWrapper entityTo);
    internal EntityKey CreateEntityKey(EntitySet entitySet, object entity);
    [CompilerGeneratedAttribute]
internal object get_EntityInvokingFKSetter();
    [CompilerGeneratedAttribute]
internal void set_EntityInvokingFKSetter(object value);
}
internal enum System.Data.Objects.ObjectStateValueRecord : Enum {
    public int value__;
    public static ObjectStateValueRecord OriginalReadonly;
    public static ObjectStateValueRecord CurrentUpdatable;
    public static ObjectStateValueRecord OriginalUpdatableInternal;
    public static ObjectStateValueRecord OriginalUpdatablePublic;
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Objects.ObjectView`1 : object {
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    public TElement Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    internal ObjectView`1(IObjectViewData`1<TElement> viewData, object eventDataSource);
    private sealed virtual override void System.ComponentModel.ICancelAddNew.CancelNew(int itemIndex);
    private sealed virtual override void System.ComponentModel.ICancelAddNew.EndNew(int itemIndex);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    public TElement get_Item(int index);
    public void set_Item(int index, TElement value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public sealed virtual int get_Count();
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override void System.Data.Objects.IObjectView.EntityPropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override void System.Data.Objects.IObjectView.CollectionChanged(object sender, CollectionChangeEventArgs e);
}
internal class System.Data.Objects.ObjectViewEntityCollectionData`2 : object {
    public IList`1<TViewElement> List { get; }
    public bool AllowNew { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public bool FiresEventOnAdd { get; }
    public bool FiresEventOnRemove { get; }
    public bool FiresEventOnClear { get; }
    internal ObjectViewEntityCollectionData`2(EntityCollection`1<TItemElement> entityCollection);
    public sealed virtual IList`1<TViewElement> get_List();
    public sealed virtual bool get_AllowNew();
    public sealed virtual bool get_AllowEdit();
    public sealed virtual bool get_AllowRemove();
    public sealed virtual bool get_FiresEventOnAdd();
    public sealed virtual bool get_FiresEventOnRemove();
    public sealed virtual bool get_FiresEventOnClear();
    public sealed virtual void EnsureCanAddNew();
    public sealed virtual int Add(TViewElement item, bool isAddNew);
    public sealed virtual void CommitItemAt(int index);
    public sealed virtual void Clear();
    public sealed virtual bool Remove(TViewElement item, bool isCancelNew);
    public sealed virtual ListChangedEventArgs OnCollectionChanged(object sender, CollectionChangeEventArgs e, ObjectViewListener listener);
}
internal static class System.Data.Objects.ObjectViewFactory : object {
    private static ObjectViewFactory();
    internal static IBindingList CreateViewForQuery(TypeUsage elementEdmTypeUsage, IEnumerable`1<TElement> queryResults, ObjectContext objectContext, bool forceReadOnly, EntitySet singleEntitySet);
    internal static IBindingList CreateViewForEntityCollection(EntityType entityType, EntityCollection`1<TElement> entityCollection);
}
internal class System.Data.Objects.ObjectViewListener : object {
    internal ObjectViewListener(IObjectView view, IList list, object dataSource);
    internal void RegisterEntityEvents(object entity);
    internal void UnregisterEntityEvents(object entity);
}
internal class System.Data.Objects.ObjectViewQueryResultData`1 : object {
    public IList`1<TElement> List { get; }
    public bool AllowNew { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public bool FiresEventOnAdd { get; }
    public bool FiresEventOnRemove { get; }
    public bool FiresEventOnClear { get; }
    internal ObjectViewQueryResultData`1(IEnumerable queryResults, ObjectContext objectContext, bool forceReadOnlyList, EntitySet entitySet);
    public sealed virtual IList`1<TElement> get_List();
    public sealed virtual bool get_AllowNew();
    public sealed virtual bool get_AllowEdit();
    public sealed virtual bool get_AllowRemove();
    public sealed virtual bool get_FiresEventOnAdd();
    public sealed virtual bool get_FiresEventOnRemove();
    public sealed virtual bool get_FiresEventOnClear();
    public sealed virtual void EnsureCanAddNew();
    public sealed virtual int Add(TElement item, bool isAddNew);
    public sealed virtual void CommitItemAt(int index);
    public sealed virtual void Clear();
    public sealed virtual bool Remove(TElement item, bool isCancelNew);
    public sealed virtual ListChangedEventArgs OnCollectionChanged(object sender, CollectionChangeEventArgs e, ObjectViewListener listener);
}
public abstract class System.Data.Objects.OriginalValueRecord : DbUpdatableDataRecord {
    internal OriginalValueRecord(ObjectStateEntry cacheEntry, StateManagerTypeMetadata metadata, object userObject);
}
public class System.Data.Objects.ProxyDataContractResolver : DataContractResolver {
    public virtual Type ResolveName(string typeName, string typeNamespace, Type declaredType, DataContractResolver knownTypeResolver);
    public virtual bool TryResolveType(Type dataContractType, Type declaredType, DataContractResolver knownTypeResolver, XmlDictionaryString& typeName, XmlDictionaryString& typeNamespace);
}
public enum System.Data.Objects.RefreshMode : Enum {
    public int value__;
    public static RefreshMode ClientWins;
    public static RefreshMode StoreWins;
}
internal class System.Data.Objects.RelationshipEntry : ObjectStateEntry {
    internal RelationshipWrapper _relationshipWrapper;
    internal EntityKey Key0 { get; }
    internal EntityKey Key1 { get; }
    internal BitArray ModifiedProperties { get; }
    public bool IsRelationship { get; }
    public object Entity { get; }
    public EntityKey EntityKey { get; internal set; }
    [DebuggerBrowsableAttribute("0")]
public DbDataRecord OriginalValues { get; }
    [DebuggerBrowsableAttribute("0")]
public CurrentValueRecord CurrentValues { get; }
    public RelationshipManager RelationshipManager { get; }
    internal bool IsKeyEntry { get; }
    internal RelationshipWrapper RelationshipWrapper { get; internal set; }
    internal RelationshipEntry NextKey0 { get; internal set; }
    internal RelationshipEntry NextKey1 { get; internal set; }
    internal RelationshipEntry(ObjectStateManager cache, EntityState state, RelationshipWrapper relationshipWrapper);
    internal EntityKey get_Key0();
    internal EntityKey get_Key1();
    internal virtual BitArray get_ModifiedProperties();
    public virtual bool get_IsRelationship();
    public virtual void AcceptChanges();
    public virtual void Delete();
    public virtual IEnumerable`1<string> GetModifiedProperties();
    public virtual void SetModified();
    public virtual object get_Entity();
    public virtual EntityKey get_EntityKey();
    internal virtual void set_EntityKey(EntityKey value);
    public virtual void SetModifiedProperty(string propertyName);
    public virtual void RejectPropertyChanges(string propertyName);
    public virtual bool IsPropertyChanged(string propertyName);
    public virtual DbDataRecord get_OriginalValues();
    public virtual OriginalValueRecord GetUpdatableOriginalValues();
    public virtual CurrentValueRecord get_CurrentValues();
    public virtual RelationshipManager get_RelationshipManager();
    public virtual void ChangeState(EntityState state);
    public virtual void ApplyCurrentValues(object currentEntity);
    public virtual void ApplyOriginalValues(object originalEntity);
    internal virtual bool get_IsKeyEntry();
    internal virtual int GetFieldCount(StateManagerTypeMetadata metadata);
    internal virtual DataRecordInfo GetDataRecordInfo(StateManagerTypeMetadata metadata, object userObject);
    internal virtual void SetModifiedAll();
    internal virtual Type GetFieldType(int ordinal, StateManagerTypeMetadata metadata);
    internal virtual string GetCLayerName(int ordinal, StateManagerTypeMetadata metadata);
    internal virtual int GetOrdinalforCLayerName(string name, StateManagerTypeMetadata metadata);
    internal virtual void RevertDelete();
    internal virtual void EntityMemberChanging(string entityMemberName);
    internal virtual void EntityMemberChanged(string entityMemberName);
    internal virtual void EntityComplexMemberChanging(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal virtual void EntityComplexMemberChanged(string entityMemberName, object complexObject, string complexObjectMemberName);
    internal bool IsSameAssociationSetAndRole(AssociationSet associationSet, AssociationEndMember associationMember, EntityKey entityKey);
    internal object GetCurrentRelationValue(int ordinal);
    internal RelationshipWrapper get_RelationshipWrapper();
    internal void set_RelationshipWrapper(RelationshipWrapper value);
    internal virtual void Reset();
    internal void ChangeRelatedEnd(EntityKey oldKey, EntityKey newKey);
    internal void DeleteUnnecessaryKeyEntries();
    internal void Delete(bool doFixup);
    internal object GetOriginalRelationValue(int ordinal);
    internal void DetachRelationshipEntry();
    internal void ChangeRelationshipState(EntityEntry targetEntry, RelatedEnd relatedEnd, EntityState requestedState);
    internal RelationshipEntry GetNextRelationshipEnd(EntityKey entityKey);
    internal void SetNextRelationshipEnd(EntityKey entityKey, RelationshipEntry nextEnd);
    internal RelationshipEntry get_NextKey0();
    internal void set_NextKey0(RelationshipEntry value);
    internal RelationshipEntry get_NextKey1();
    internal void set_NextKey1(RelationshipEntry value);
}
internal class System.Data.Objects.RelationshipWrapper : object {
    internal AssociationSet AssociationSet;
    internal EntityKey Key0;
    internal EntityKey Key1;
    internal ReadOnlyMetadataCollection`1<AssociationEndMember> AssociationEndMembers { get; }
    internal RelationshipWrapper(AssociationSet extent, EntityKey key);
    internal RelationshipWrapper(RelationshipWrapper wrapper, int ordinal, EntityKey key);
    internal RelationshipWrapper(AssociationSet extent, KeyValuePair`2<string, EntityKey> roleAndKey1, KeyValuePair`2<string, EntityKey> roleAndKey2);
    internal RelationshipWrapper(AssociationSet extent, string role0, EntityKey key0, string role1, EntityKey key1);
    internal ReadOnlyMetadataCollection`1<AssociationEndMember> get_AssociationEndMembers();
    internal AssociationEndMember GetAssociationEndMember(EntityKey key);
    internal EntityKey GetOtherEntityKey(EntityKey key);
    internal EntityKey GetEntityKey(int ordinal);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(RelationshipWrapper wrapper);
}
[FlagsAttribute]
public enum System.Data.Objects.SaveOptions : Enum {
    public int value__;
    public static SaveOptions None;
    public static SaveOptions AcceptAllChangesAfterSave;
    public static SaveOptions DetectChangesBeforeSave;
}
internal class System.Data.Objects.Span : object {
    internal List`1<SpanPath> SpanList { get; }
    internal List`1<SpanPath> get_SpanList();
    internal static bool RequiresRelationshipSpan(MergeOption mergeOption);
    internal static Span IncludeIn(Span spanToIncludeIn, string pathToInclude);
    internal static Span CopyUnion(Span span1, Span span2);
    internal string GetCacheKey();
    public void Include(string path);
    internal Span Clone();
    internal void AddSpanPath(SpanPath spanPath);
}
public static class System.Data.Objects.SqlClient.SqlFunctions : object {
    [EdmFunctionAttribute("SqlServer", "CHECKSUM_AGG")]
public static Nullable`1<int> ChecksumAggregate(IEnumerable`1<int> arg);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM_AGG")]
public static Nullable`1<int> ChecksumAggregate(IEnumerable`1<Nullable`1<int>> arg);
    [EdmFunctionAttribute("SqlServer", "ASCII")]
public static Nullable`1<int> Ascii(string arg);
    [EdmFunctionAttribute("SqlServer", "CHAR")]
public static string Char(Nullable`1<int> arg);
    [EdmFunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<int> CharIndex(string toSearch, string target);
    [EdmFunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<int> CharIndex(Byte[] toSearch, Byte[] target);
    [EdmFunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<int> CharIndex(string toSearch, string target, Nullable`1<int> startLocation);
    [EdmFunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<int> CharIndex(Byte[] toSearch, Byte[] target, Nullable`1<int> startLocation);
    [EdmFunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<long> CharIndex(string toSearch, string target, Nullable`1<long> startLocation);
    [EdmFunctionAttribute("SqlServer", "CHARINDEX")]
public static Nullable`1<long> CharIndex(Byte[] toSearch, Byte[] target, Nullable`1<long> startLocation);
    [EdmFunctionAttribute("SqlServer", "DIFFERENCE")]
public static Nullable`1<int> Difference(string string1, string string2);
    [EdmFunctionAttribute("SqlServer", "NCHAR")]
public static string NChar(Nullable`1<int> arg);
    [EdmFunctionAttribute("SqlServer", "PATINDEX")]
public static Nullable`1<int> PatIndex(string stringPattern, string target);
    [EdmFunctionAttribute("SqlServer", "QUOTENAME")]
public static string QuoteName(string stringArg);
    [EdmFunctionAttribute("SqlServer", "QUOTENAME")]
public static string QuoteName(string stringArg, string quoteCharacter);
    [EdmFunctionAttribute("SqlServer", "REPLICATE")]
public static string Replicate(string target, Nullable`1<int> count);
    [EdmFunctionAttribute("SqlServer", "SOUNDEX")]
public static string SoundCode(string arg);
    [EdmFunctionAttribute("SqlServer", "SPACE")]
public static string Space(Nullable`1<int> arg1);
    [EdmFunctionAttribute("SqlServer", "STR")]
public static string StringConvert(Nullable`1<double> number);
    [EdmFunctionAttribute("SqlServer", "STR")]
public static string StringConvert(Nullable`1<decimal> number);
    [EdmFunctionAttribute("SqlServer", "STR")]
public static string StringConvert(Nullable`1<double> number, Nullable`1<int> length);
    [EdmFunctionAttribute("SqlServer", "STR")]
public static string StringConvert(Nullable`1<decimal> number, Nullable`1<int> length);
    [EdmFunctionAttribute("SqlServer", "STR")]
public static string StringConvert(Nullable`1<double> number, Nullable`1<int> length, Nullable`1<int> decimalArg);
    [EdmFunctionAttribute("SqlServer", "STR")]
public static string StringConvert(Nullable`1<decimal> number, Nullable`1<int> length, Nullable`1<int> decimalArg);
    [EdmFunctionAttribute("SqlServer", "STUFF")]
public static string Stuff(string stringInput, Nullable`1<int> start, Nullable`1<int> length, string stringReplacement);
    [EdmFunctionAttribute("SqlServer", "UNICODE")]
public static Nullable`1<int> Unicode(string arg);
    [EdmFunctionAttribute("SqlServer", "ACOS")]
public static Nullable`1<double> Acos(Nullable`1<double> arg1);
    [EdmFunctionAttribute("SqlServer", "ACOS")]
public static Nullable`1<double> Acos(Nullable`1<decimal> arg1);
    [EdmFunctionAttribute("SqlServer", "ASIN")]
public static Nullable`1<double> Asin(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "ASIN")]
public static Nullable`1<double> Asin(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "ATAN")]
public static Nullable`1<double> Atan(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "ATAN")]
public static Nullable`1<double> Atan(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "ATN2")]
public static Nullable`1<double> Atan2(Nullable`1<double> arg1, Nullable`1<double> arg2);
    [EdmFunctionAttribute("SqlServer", "ATN2")]
public static Nullable`1<double> Atan2(Nullable`1<decimal> arg1, Nullable`1<decimal> arg2);
    [EdmFunctionAttribute("SqlServer", "COS")]
public static Nullable`1<double> Cos(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "COS")]
public static Nullable`1<double> Cos(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "COT")]
public static Nullable`1<double> Cot(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "COT")]
public static Nullable`1<double> Cot(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "DEGREES")]
public static Nullable`1<int> Degrees(Nullable`1<int> arg1);
    [EdmFunctionAttribute("SqlServer", "DEGREES")]
public static Nullable`1<long> Degrees(Nullable`1<long> arg1);
    [EdmFunctionAttribute("SqlServer", "DEGREES")]
public static Nullable`1<decimal> Degrees(Nullable`1<decimal> arg1);
    [EdmFunctionAttribute("SqlServer", "DEGREES")]
public static Nullable`1<double> Degrees(Nullable`1<double> arg1);
    [EdmFunctionAttribute("SqlServer", "EXP")]
public static Nullable`1<double> Exp(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "EXP")]
public static Nullable`1<double> Exp(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "LOG")]
public static Nullable`1<double> Log(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "LOG")]
public static Nullable`1<double> Log(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "LOG10")]
public static Nullable`1<double> Log10(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "LOG10")]
public static Nullable`1<double> Log10(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "PI")]
public static Nullable`1<double> Pi();
    [EdmFunctionAttribute("SqlServer", "RADIANS")]
public static Nullable`1<int> Radians(Nullable`1<int> arg);
    [EdmFunctionAttribute("SqlServer", "RADIANS")]
public static Nullable`1<long> Radians(Nullable`1<long> arg);
    [EdmFunctionAttribute("SqlServer", "RADIANS")]
public static Nullable`1<decimal> Radians(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "RADIANS")]
public static Nullable`1<double> Radians(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "RAND")]
public static Nullable`1<double> Rand();
    [EdmFunctionAttribute("SqlServer", "RAND")]
public static Nullable`1<double> Rand(Nullable`1<int> seed);
    [EdmFunctionAttribute("SqlServer", "SIGN")]
public static Nullable`1<int> Sign(Nullable`1<int> arg);
    [EdmFunctionAttribute("SqlServer", "SIGN")]
public static Nullable`1<long> Sign(Nullable`1<long> arg);
    [EdmFunctionAttribute("SqlServer", "SIGN")]
public static Nullable`1<decimal> Sign(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "SIGN")]
public static Nullable`1<double> Sign(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "SIN")]
public static Nullable`1<double> Sin(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "SIN")]
public static Nullable`1<double> Sin(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "SQRT")]
public static Nullable`1<double> SquareRoot(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "SQRT")]
public static Nullable`1<double> SquareRoot(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "SQUARE")]
public static Nullable`1<double> Square(Nullable`1<double> arg1);
    [EdmFunctionAttribute("SqlServer", "SQUARE")]
public static Nullable`1<double> Square(Nullable`1<decimal> arg1);
    [EdmFunctionAttribute("SqlServer", "TAN")]
public static Nullable`1<double> Tan(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "TAN")]
public static Nullable`1<double> Tan(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "DATEADD")]
public static Nullable`1<DateTime> DateAdd(string datePartArg, Nullable`1<double> number, Nullable`1<DateTime> date);
    [EdmFunctionAttribute("SqlServer", "DATEADD")]
public static Nullable`1<TimeSpan> DateAdd(string datePartArg, Nullable`1<double> number, Nullable`1<TimeSpan> time);
    [EdmFunctionAttribute("SqlServer", "DATEADD")]
public static Nullable`1<DateTimeOffset> DateAdd(string datePartArg, Nullable`1<double> number, Nullable`1<DateTimeOffset> dateTimeOffsetArg);
    [EdmFunctionAttribute("SqlServer", "DATEADD")]
public static Nullable`1<DateTime> DateAdd(string datePartArg, Nullable`1<double> number, string date);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<TimeSpan> startDate, Nullable`1<TimeSpan> endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, string startDate, Nullable`1<DateTime> endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, string startDate, Nullable`1<DateTimeOffset> endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, string startDate, Nullable`1<TimeSpan> endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<TimeSpan> startDate, string endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTime> startDate, string endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTimeOffset> startDate, string endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, string startDate, string endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<TimeSpan> startDate, Nullable`1<DateTime> endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<TimeSpan> startDate, Nullable`1<DateTimeOffset> endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTime> startDate, Nullable`1<TimeSpan> endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTimeOffset> startDate, Nullable`1<TimeSpan> endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTime> startDate, Nullable`1<DateTimeOffset> endDate);
    [EdmFunctionAttribute("SqlServer", "DATEDIFF")]
public static Nullable`1<int> DateDiff(string datePartArg, Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTime> endDate);
    [EdmFunctionAttribute("SqlServer", "DATENAME")]
public static string DateName(string datePartArg, Nullable`1<DateTime> date);
    [EdmFunctionAttribute("SqlServer", "DATENAME")]
public static string DateName(string datePartArg, string date);
    [EdmFunctionAttribute("SqlServer", "DATENAME")]
public static string DateName(string datePartArg, Nullable`1<TimeSpan> date);
    [EdmFunctionAttribute("SqlServer", "DATENAME")]
public static string DateName(string datePartArg, Nullable`1<DateTimeOffset> date);
    [EdmFunctionAttribute("SqlServer", "DATEPART")]
public static Nullable`1<int> DatePart(string datePartArg, Nullable`1<DateTime> date);
    [EdmFunctionAttribute("SqlServer", "DATEPART")]
public static Nullable`1<int> DatePart(string datePartArg, Nullable`1<DateTimeOffset> date);
    [EdmFunctionAttribute("SqlServer", "DATEPART")]
public static Nullable`1<int> DatePart(string datePartArg, string date);
    [EdmFunctionAttribute("SqlServer", "DATEPART")]
public static Nullable`1<int> DatePart(string datePartArg, Nullable`1<TimeSpan> date);
    [EdmFunctionAttribute("SqlServer", "GETDATE")]
public static Nullable`1<DateTime> GetDate();
    [EdmFunctionAttribute("SqlServer", "GETUTCDATE")]
public static Nullable`1<DateTime> GetUtcDate();
    [EdmFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(Nullable`1<bool> arg);
    [EdmFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(Nullable`1<double> arg);
    [EdmFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(Nullable`1<decimal> arg);
    [EdmFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(Nullable`1<DateTime> arg);
    [EdmFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(Nullable`1<TimeSpan> arg);
    [EdmFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(Nullable`1<DateTimeOffset> arg);
    [EdmFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(string arg);
    [EdmFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(Byte[] arg);
    [EdmFunctionAttribute("SqlServer", "DATALENGTH")]
public static Nullable`1<int> DataLength(Nullable`1<Guid> arg);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<bool> arg1);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<double> arg1);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<decimal> arg1);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(string arg1);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<DateTime> arg1);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<TimeSpan> arg1);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<DateTimeOffset> arg1);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Byte[] arg1);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<Guid> arg1);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<bool> arg1, Nullable`1<bool> arg2);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<double> arg1, Nullable`1<double> arg2);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<decimal> arg1, Nullable`1<decimal> arg2);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(string arg1, string arg2);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<DateTime> arg1, Nullable`1<DateTime> arg2);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<TimeSpan> arg1, Nullable`1<TimeSpan> arg2);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<DateTimeOffset> arg1, Nullable`1<DateTimeOffset> arg2);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Byte[] arg1, Byte[] arg2);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<Guid> arg1, Nullable`1<Guid> arg2);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<bool> arg1, Nullable`1<bool> arg2, Nullable`1<bool> arg3);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<double> arg1, Nullable`1<double> arg2, Nullable`1<double> arg3);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<decimal> arg1, Nullable`1<decimal> arg2, Nullable`1<decimal> arg3);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(string arg1, string arg2, string arg3);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<DateTime> arg1, Nullable`1<DateTime> arg2, Nullable`1<DateTime> arg3);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<DateTimeOffset> arg1, Nullable`1<DateTimeOffset> arg2, Nullable`1<DateTimeOffset> arg3);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<TimeSpan> arg1, Nullable`1<TimeSpan> arg2, Nullable`1<TimeSpan> arg3);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Byte[] arg1, Byte[] arg2, Byte[] arg3);
    [EdmFunctionAttribute("SqlServer", "CHECKSUM")]
public static Nullable`1<int> Checksum(Nullable`1<Guid> arg1, Nullable`1<Guid> arg2, Nullable`1<Guid> arg3);
    [EdmFunctionAttribute("SqlServer", "CURRENT_TIMESTAMP")]
public static Nullable`1<DateTime> CurrentTimestamp();
    [EdmFunctionAttribute("SqlServer", "CURRENT_USER")]
public static string CurrentUser();
    [EdmFunctionAttribute("SqlServer", "HOST_NAME")]
public static string HostName();
    [EdmFunctionAttribute("SqlServer", "USER_NAME")]
public static string UserName(Nullable`1<int> arg);
    [EdmFunctionAttribute("SqlServer", "USER_NAME")]
public static string UserName();
    [EdmFunctionAttribute("SqlServer", "ISNUMERIC")]
public static Nullable`1<int> IsNumeric(string arg);
    [EdmFunctionAttribute("SqlServer", "ISDATE")]
public static Nullable`1<int> IsDate(string arg);
}
public static class System.Data.Objects.SqlClient.SqlSpatialFunctions : object {
    [EdmFunctionAttribute("SqlServer", "POINTGEOGRAPHY")]
public static DbGeography PointGeography(Nullable`1<double> latitude, Nullable`1<double> longitude, Nullable`1<int> spatialReferenceId);
    [EdmFunctionAttribute("SqlServer", "ASTEXTZM")]
public static string AsTextZM(DbGeography geographyValue);
    [EdmFunctionAttribute("SqlServer", "BUFFERWITHTOLERANCE")]
public static DbGeography BufferWithTolerance(DbGeography geographyValue, Nullable`1<double> distance, Nullable`1<double> tolerance, Nullable`1<bool> relative);
    [EdmFunctionAttribute("SqlServer", "ENVELOPEANGLE")]
public static Nullable`1<double> EnvelopeAngle(DbGeography geographyValue);
    [EdmFunctionAttribute("SqlServer", "ENVELOPECENTER")]
public static DbGeography EnvelopeCenter(DbGeography geographyValue);
    [EdmFunctionAttribute("SqlServer", "FILTER")]
public static Nullable`1<bool> Filter(DbGeography geographyValue, DbGeography geographyOther);
    [EdmFunctionAttribute("SqlServer", "INSTANCEOF")]
public static Nullable`1<bool> InstanceOf(DbGeography geographyValue, string geometryTypeName);
    [EdmFunctionAttribute("SqlServer", "NUMRINGS")]
public static Nullable`1<int> NumRings(DbGeography geographyValue);
    [EdmFunctionAttribute("SqlServer", "REDUCE")]
public static DbGeography Reduce(DbGeography geographyValue, Nullable`1<double> tolerance);
    [EdmFunctionAttribute("SqlServer", "RINGN")]
public static DbGeography RingN(DbGeography geographyValue, Nullable`1<int> index);
    [EdmFunctionAttribute("SqlServer", "POINTGEOMETRY")]
public static DbGeometry PointGeometry(Nullable`1<double> xCoordinate, Nullable`1<double> yCoordinate, Nullable`1<int> spatialReferenceId);
    [EdmFunctionAttribute("SqlServer", "ASTEXTZM")]
public static string AsTextZM(DbGeometry geometryValue);
    [EdmFunctionAttribute("SqlServer", "BUFFERWITHTOLERANCE")]
public static DbGeometry BufferWithTolerance(DbGeometry geometryValue, Nullable`1<double> distance, Nullable`1<double> tolerance, Nullable`1<bool> relative);
    [EdmFunctionAttribute("SqlServer", "INSTANCEOF")]
public static Nullable`1<bool> InstanceOf(DbGeometry geometryValue, string geometryTypeName);
    [EdmFunctionAttribute("SqlServer", "FILTER")]
public static Nullable`1<bool> Filter(DbGeometry geometryValue, DbGeometry geometryOther);
    [EdmFunctionAttribute("SqlServer", "MAKEVALID")]
public static DbGeometry MakeValid(DbGeometry geometryValue);
    [EdmFunctionAttribute("SqlServer", "REDUCE")]
public static DbGeometry Reduce(DbGeometry geometryValue, Nullable`1<double> tolerance);
}
internal class System.Data.Objects.StateManagerMemberMetadata : object {
    internal string CLayerName { get; }
    internal Type ClrType { get; }
    internal bool IsComplex { get; }
    internal EdmProperty CdmMetadata { get; }
    internal EdmProperty ClrMetadata { get; }
    internal bool IsPartOfKey { get; }
    internal StateManagerMemberMetadata(ObjectPropertyMapping memberMap, EdmProperty memberMetadata, bool isPartOfKey);
    internal string get_CLayerName();
    internal Type get_ClrType();
    internal bool get_IsComplex();
    internal EdmProperty get_CdmMetadata();
    internal EdmProperty get_ClrMetadata();
    internal bool get_IsPartOfKey();
    public object GetValue(object userObject);
    public void SetValue(object userObject, object value);
}
internal class System.Data.Objects.StateManagerTypeMetadata : object {
    internal TypeUsage CdmMetadata { get; }
    internal DataRecordInfo DataRecordInfo { get; }
    internal int FieldCount { get; }
    internal IEnumerable`1<StateManagerMemberMetadata> Members { get; }
    internal StateManagerTypeMetadata(EdmType edmType, ObjectTypeMapping mapping);
    internal TypeUsage get_CdmMetadata();
    internal DataRecordInfo get_DataRecordInfo();
    internal int get_FieldCount();
    internal Type GetFieldType(int ordinal);
    internal StateManagerMemberMetadata Member(int ordinal);
    internal IEnumerable`1<StateManagerMemberMetadata> get_Members();
    internal string CLayerMemberName(int ordinal);
    internal int GetOrdinalforOLayerMemberName(string name);
    internal int GetOrdinalforCLayerMemberName(string name);
    internal bool IsMemberPartofShadowState(int ordinal);
}
internal class System.Data.Objects.StateManagerValue : ValueType {
    internal StateManagerMemberMetadata memberMetadata;
    internal object userObject;
    internal object originalValue;
    internal StateManagerValue(StateManagerMemberMetadata metadata, object instance, object value);
}
public class System.Data.OptimisticConcurrencyException : UpdateException {
    public OptimisticConcurrencyException(string message);
    public OptimisticConcurrencyException(string message, Exception innerException);
    public OptimisticConcurrencyException(string message, Exception innerException, IEnumerable`1<ObjectStateEntry> stateEntries);
    private OptimisticConcurrencyException(SerializationInfo info, StreamingContext context);
}
public class System.Data.PropertyConstraintException : ConstraintException {
    public string PropertyName { get; }
    public PropertyConstraintException(string message);
    public PropertyConstraintException(string message, Exception innerException);
    public PropertyConstraintException(string message, string propertyName);
    public PropertyConstraintException(string message, string propertyName, Exception innerException);
    private PropertyConstraintException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_PropertyName();
}
public class System.Data.ProviderIncompatibleException : EntityException {
    public ProviderIncompatibleException(string message);
    public ProviderIncompatibleException(string message, Exception innerException);
    private ProviderIncompatibleException(SerializationInfo info, StreamingContext context);
}
internal class System.Data.Query.InternalTrees.AggregateOp : ScalarOp {
    internal static AggregateOp Pattern;
    internal EdmFunction AggFunc { get; }
    internal bool IsDistinctAggregate { get; }
    internal bool IsAggregateOp { get; }
    internal AggregateOp(EdmFunction aggFunc, bool distinctAgg);
    private static AggregateOp();
    internal EdmFunction get_AggFunc();
    internal bool get_IsDistinctAggregate();
    internal virtual bool get_IsAggregateOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.AncillaryOp : Op {
    internal bool IsAncillaryOp { get; }
    internal AncillaryOp(OpType opType);
    internal virtual bool get_IsAncillaryOp();
}
internal abstract class System.Data.Query.InternalTrees.ApplyBaseOp : RelOp {
    internal int Arity { get; }
    internal ApplyBaseOp(OpType opType);
    internal virtual int get_Arity();
}
internal class System.Data.Query.InternalTrees.ArithmeticOp : ScalarOp {
    internal ArithmeticOp(OpType opType, TypeUsage type);
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.BasicOpVisitor : object {
    protected virtual void VisitChildren(Node n);
    protected virtual void VisitChildrenReverse(Node n);
    internal virtual void VisitNode(Node n);
    protected virtual void VisitDefault(Node n);
    protected virtual void VisitConstantOp(ConstantBaseOp op, Node n);
    protected virtual void VisitTableOp(ScanTableBaseOp op, Node n);
    protected virtual void VisitJoinOp(JoinBaseOp op, Node n);
    protected virtual void VisitApplyOp(ApplyBaseOp op, Node n);
    protected virtual void VisitSetOp(SetOp op, Node n);
    protected virtual void VisitSortOp(SortBaseOp op, Node n);
    protected virtual void VisitGroupByOp(GroupByBaseOp op, Node n);
    public virtual void Visit(Op op, Node n);
    protected virtual void VisitScalarOpDefault(ScalarOp op, Node n);
    public virtual void Visit(ConstantOp op, Node n);
    public virtual void Visit(NullOp op, Node n);
    public virtual void Visit(NullSentinelOp op, Node n);
    public virtual void Visit(InternalConstantOp op, Node n);
    public virtual void Visit(ConstantPredicateOp op, Node n);
    public virtual void Visit(FunctionOp op, Node n);
    public virtual void Visit(PropertyOp op, Node n);
    public virtual void Visit(RelPropertyOp op, Node n);
    public virtual void Visit(CaseOp op, Node n);
    public virtual void Visit(ComparisonOp op, Node n);
    public virtual void Visit(LikeOp op, Node n);
    public virtual void Visit(AggregateOp op, Node n);
    public virtual void Visit(NewInstanceOp op, Node n);
    public virtual void Visit(NewEntityOp op, Node n);
    public virtual void Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual void Visit(NewMultisetOp op, Node n);
    public virtual void Visit(NewRecordOp op, Node n);
    public virtual void Visit(RefOp op, Node n);
    public virtual void Visit(VarRefOp op, Node n);
    public virtual void Visit(ConditionalOp op, Node n);
    public virtual void Visit(ArithmeticOp op, Node n);
    public virtual void Visit(TreatOp op, Node n);
    public virtual void Visit(CastOp op, Node n);
    public virtual void Visit(SoftCastOp op, Node n);
    public virtual void Visit(IsOfOp op, Node n);
    public virtual void Visit(ExistsOp op, Node n);
    public virtual void Visit(ElementOp op, Node n);
    public virtual void Visit(GetEntityRefOp op, Node n);
    public virtual void Visit(GetRefKeyOp op, Node n);
    public virtual void Visit(CollectOp op, Node n);
    public virtual void Visit(DerefOp op, Node n);
    public virtual void Visit(NavigateOp op, Node n);
    protected virtual void VisitAncillaryOpDefault(AncillaryOp op, Node n);
    public virtual void Visit(VarDefOp op, Node n);
    public virtual void Visit(VarDefListOp op, Node n);
    protected virtual void VisitRelOpDefault(RelOp op, Node n);
    public virtual void Visit(ScanTableOp op, Node n);
    public virtual void Visit(ScanViewOp op, Node n);
    public virtual void Visit(UnnestOp op, Node n);
    public virtual void Visit(ProjectOp op, Node n);
    public virtual void Visit(FilterOp op, Node n);
    public virtual void Visit(SortOp op, Node n);
    public virtual void Visit(ConstrainedSortOp op, Node n);
    public virtual void Visit(GroupByOp op, Node n);
    public virtual void Visit(GroupByIntoOp op, Node n);
    public virtual void Visit(CrossJoinOp op, Node n);
    public virtual void Visit(InnerJoinOp op, Node n);
    public virtual void Visit(LeftOuterJoinOp op, Node n);
    public virtual void Visit(FullOuterJoinOp op, Node n);
    public virtual void Visit(CrossApplyOp op, Node n);
    public virtual void Visit(OuterApplyOp op, Node n);
    public virtual void Visit(UnionAllOp op, Node n);
    public virtual void Visit(IntersectOp op, Node n);
    public virtual void Visit(ExceptOp op, Node n);
    public virtual void Visit(DistinctOp op, Node n);
    public virtual void Visit(SingleRowOp op, Node n);
    public virtual void Visit(SingleRowTableOp op, Node n);
    protected virtual void VisitPhysicalOpDefault(PhysicalOp op, Node n);
    public virtual void Visit(PhysicalProjectOp op, Node n);
    protected virtual void VisitNestOp(NestBaseOp op, Node n);
    public virtual void Visit(SingleStreamNestOp op, Node n);
    public virtual void Visit(MultiStreamNestOp op, Node n);
}
internal abstract class System.Data.Query.InternalTrees.BasicOpVisitorOfNode : BasicOpVisitorOfT`1<Node> {
    protected virtual void VisitChildren(Node n);
    protected virtual void VisitChildrenReverse(Node n);
    protected virtual Node VisitDefault(Node n);
    protected virtual Node VisitAncillaryOpDefault(AncillaryOp op, Node n);
    protected virtual Node VisitPhysicalOpDefault(PhysicalOp op, Node n);
    protected virtual Node VisitRelOpDefault(RelOp op, Node n);
    protected virtual Node VisitScalarOpDefault(ScalarOp op, Node n);
}
internal abstract class System.Data.Query.InternalTrees.BasicOpVisitorOfT`1 : object {
    protected virtual void VisitChildren(Node n);
    protected virtual void VisitChildrenReverse(Node n);
    internal TResultType VisitNode(Node n);
    protected virtual TResultType VisitDefault(Node n);
    internal virtual TResultType Unimplemented(Node n);
    public virtual TResultType Visit(Op op, Node n);
    protected virtual TResultType VisitAncillaryOpDefault(AncillaryOp op, Node n);
    public virtual TResultType Visit(VarDefOp op, Node n);
    public virtual TResultType Visit(VarDefListOp op, Node n);
    protected virtual TResultType VisitPhysicalOpDefault(PhysicalOp op, Node n);
    public virtual TResultType Visit(PhysicalProjectOp op, Node n);
    protected virtual TResultType VisitNestOp(NestBaseOp op, Node n);
    public virtual TResultType Visit(SingleStreamNestOp op, Node n);
    public virtual TResultType Visit(MultiStreamNestOp op, Node n);
    protected virtual TResultType VisitRelOpDefault(RelOp op, Node n);
    protected virtual TResultType VisitApplyOp(ApplyBaseOp op, Node n);
    public virtual TResultType Visit(CrossApplyOp op, Node n);
    public virtual TResultType Visit(OuterApplyOp op, Node n);
    protected virtual TResultType VisitJoinOp(JoinBaseOp op, Node n);
    public virtual TResultType Visit(CrossJoinOp op, Node n);
    public virtual TResultType Visit(FullOuterJoinOp op, Node n);
    public virtual TResultType Visit(LeftOuterJoinOp op, Node n);
    public virtual TResultType Visit(InnerJoinOp op, Node n);
    protected virtual TResultType VisitSetOp(SetOp op, Node n);
    public virtual TResultType Visit(ExceptOp op, Node n);
    public virtual TResultType Visit(IntersectOp op, Node n);
    public virtual TResultType Visit(UnionAllOp op, Node n);
    public virtual TResultType Visit(DistinctOp op, Node n);
    public virtual TResultType Visit(FilterOp op, Node n);
    protected virtual TResultType VisitGroupByOp(GroupByBaseOp op, Node n);
    public virtual TResultType Visit(GroupByOp op, Node n);
    public virtual TResultType Visit(GroupByIntoOp op, Node n);
    public virtual TResultType Visit(ProjectOp op, Node n);
    protected virtual TResultType VisitTableOp(ScanTableBaseOp op, Node n);
    public virtual TResultType Visit(ScanTableOp op, Node n);
    public virtual TResultType Visit(ScanViewOp op, Node n);
    public virtual TResultType Visit(SingleRowOp op, Node n);
    public virtual TResultType Visit(SingleRowTableOp op, Node n);
    protected virtual TResultType VisitSortOp(SortBaseOp op, Node n);
    public virtual TResultType Visit(SortOp op, Node n);
    public virtual TResultType Visit(ConstrainedSortOp op, Node n);
    public virtual TResultType Visit(UnnestOp op, Node n);
    protected virtual TResultType VisitScalarOpDefault(ScalarOp op, Node n);
    protected virtual TResultType VisitConstantOp(ConstantBaseOp op, Node n);
    public virtual TResultType Visit(AggregateOp op, Node n);
    public virtual TResultType Visit(ArithmeticOp op, Node n);
    public virtual TResultType Visit(CaseOp op, Node n);
    public virtual TResultType Visit(CastOp op, Node n);
    public virtual TResultType Visit(SoftCastOp op, Node n);
    public virtual TResultType Visit(CollectOp op, Node n);
    public virtual TResultType Visit(ComparisonOp op, Node n);
    public virtual TResultType Visit(ConditionalOp op, Node n);
    public virtual TResultType Visit(ConstantOp op, Node n);
    public virtual TResultType Visit(ConstantPredicateOp op, Node n);
    public virtual TResultType Visit(ElementOp op, Node n);
    public virtual TResultType Visit(ExistsOp op, Node n);
    public virtual TResultType Visit(FunctionOp op, Node n);
    public virtual TResultType Visit(GetEntityRefOp op, Node n);
    public virtual TResultType Visit(GetRefKeyOp op, Node n);
    public virtual TResultType Visit(InternalConstantOp op, Node n);
    public virtual TResultType Visit(IsOfOp op, Node n);
    public virtual TResultType Visit(LikeOp op, Node n);
    public virtual TResultType Visit(NewEntityOp op, Node n);
    public virtual TResultType Visit(NewInstanceOp op, Node n);
    public virtual TResultType Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual TResultType Visit(NewMultisetOp op, Node n);
    public virtual TResultType Visit(NewRecordOp op, Node n);
    public virtual TResultType Visit(NullOp op, Node n);
    public virtual TResultType Visit(NullSentinelOp op, Node n);
    public virtual TResultType Visit(PropertyOp op, Node n);
    public virtual TResultType Visit(RelPropertyOp op, Node n);
    public virtual TResultType Visit(RefOp op, Node n);
    public virtual TResultType Visit(TreatOp op, Node n);
    public virtual TResultType Visit(VarRefOp op, Node n);
    public virtual TResultType Visit(DerefOp op, Node n);
    public virtual TResultType Visit(NavigateOp op, Node n);
}
internal class System.Data.Query.InternalTrees.CaseOp : ScalarOp {
    internal static CaseOp Pattern;
    internal CaseOp(TypeUsage type);
    private static CaseOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.CastOp : ScalarOp {
    internal static CastOp Pattern;
    internal int Arity { get; }
    internal CastOp(TypeUsage type);
    private static CastOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.CollectionColumnMap : ColumnMap {
    internal SimpleColumnMap[] ForeignKeys { get; }
    internal SimpleColumnMap[] Keys { get; }
    internal ColumnMap Element { get; }
    internal CollectionColumnMap(TypeUsage type, string name, ColumnMap elementMap, SimpleColumnMap[] keys, SimpleColumnMap[] foreignKeys);
    internal SimpleColumnMap[] get_ForeignKeys();
    internal SimpleColumnMap[] get_Keys();
    internal ColumnMap get_Element();
}
internal class System.Data.Query.InternalTrees.CollectionInfo : object {
    internal Var CollectionVar { get; }
    internal ColumnMap ColumnMap { get; }
    internal VarList FlattenedElementVars { get; }
    internal VarVec Keys { get; }
    internal List`1<SortKey> SortKeys { get; }
    internal object DiscriminatorValue { get; }
    internal CollectionInfo(Var collectionVar, ColumnMap columnMap, VarList flattenedElementVars, VarVec keys, List`1<SortKey> sortKeys, object discriminatorValue);
    internal Var get_CollectionVar();
    internal ColumnMap get_ColumnMap();
    internal VarList get_FlattenedElementVars();
    internal VarVec get_Keys();
    internal List`1<SortKey> get_SortKeys();
    internal object get_DiscriminatorValue();
}
internal class System.Data.Query.InternalTrees.CollectOp : ScalarOp {
    internal static CollectOp Pattern;
    internal int Arity { get; }
    internal CollectOp(TypeUsage type);
    private static CollectOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.ColumnMap : object {
    internal static string DefaultColumnName;
    internal TypeUsage Type { get; }
    internal string Name { get; internal set; }
    internal bool IsNamed { get; }
    internal ColumnMap(TypeUsage type, string name);
    internal TypeUsage get_Type();
    internal string get_Name();
    internal void set_Name(string value);
    internal bool get_IsNamed();
    [DebuggerNonUserCodeAttribute]
internal abstract virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal abstract virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
}
internal class System.Data.Query.InternalTrees.ColumnMapCopier : ColumnMapVisitorWithResults`2<ColumnMap, VarMap> {
    private static ColumnMapCopier();
    internal static ColumnMap Copy(ColumnMap columnMap, VarMap replacementVarMap);
    internal TListType[] VisitList(TListType[] tList, VarMap replacementVarMap);
    protected virtual EntityIdentity VisitEntityIdentity(DiscriminatedEntityIdentity entityIdentity, VarMap replacementVarMap);
    protected virtual EntityIdentity VisitEntityIdentity(SimpleEntityIdentity entityIdentity, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(ComplexTypeColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(DiscriminatedCollectionColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(EntityColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(SimplePolymorphicColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(MultipleDiscriminatorPolymorphicColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(RecordColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(RefColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(ScalarColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(SimpleCollectionColumnMap columnMap, VarMap replacementVarMap);
    internal virtual ColumnMap Visit(VarRefColumnMap columnMap, VarMap replacementVarMap);
}
internal static class System.Data.Query.InternalTrees.ColumnMapFactory : object {
    internal static CollectionColumnMap CreateFunctionImportStructuralTypeColumnMap(DbDataReader storeDataReader, FunctionImportMappingNonComposable mapping, int resultSetIndex, EntitySet entitySet, StructuralType baseStructuralType);
    internal static CollectionColumnMap CreateColumnMapFromReaderAndType(DbDataReader storeDataReader, EdmType edmType, EntitySet entitySet, Dictionary`2<string, FunctionImportReturnTypeStructuralTypeColumnRenameMapping> renameList);
    internal static CollectionColumnMap CreateColumnMapFromReaderAndClrType(DbDataReader reader, Type type, MetadataWorkspace workspace);
}
internal abstract class System.Data.Query.InternalTrees.ColumnMapVisitor`1 : object {
    protected void VisitList(TListType[] columnMaps, TArgType arg);
    protected void VisitEntityIdentity(EntityIdentity entityIdentity, TArgType arg);
    protected virtual void VisitEntityIdentity(DiscriminatedEntityIdentity entityIdentity, TArgType arg);
    protected virtual void VisitEntityIdentity(SimpleEntityIdentity entityIdentity, TArgType arg);
    internal virtual void Visit(ComplexTypeColumnMap columnMap, TArgType arg);
    internal virtual void Visit(DiscriminatedCollectionColumnMap columnMap, TArgType arg);
    internal virtual void Visit(EntityColumnMap columnMap, TArgType arg);
    internal virtual void Visit(SimplePolymorphicColumnMap columnMap, TArgType arg);
    internal virtual void Visit(MultipleDiscriminatorPolymorphicColumnMap columnMap, TArgType arg);
    internal virtual void Visit(RecordColumnMap columnMap, TArgType arg);
    internal virtual void Visit(RefColumnMap columnMap, TArgType arg);
    internal virtual void Visit(ScalarColumnMap columnMap, TArgType arg);
    internal virtual void Visit(SimpleCollectionColumnMap columnMap, TArgType arg);
    internal virtual void Visit(VarRefColumnMap columnMap, TArgType arg);
}
internal abstract class System.Data.Query.InternalTrees.ColumnMapVisitorWithResults`2 : object {
    protected EntityIdentity VisitEntityIdentity(EntityIdentity entityIdentity, TArgType arg);
    protected virtual EntityIdentity VisitEntityIdentity(DiscriminatedEntityIdentity entityIdentity, TArgType arg);
    protected virtual EntityIdentity VisitEntityIdentity(SimpleEntityIdentity entityIdentity, TArgType arg);
    internal abstract virtual TResultType Visit(ComplexTypeColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(DiscriminatedCollectionColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(EntityColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(SimplePolymorphicColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(RecordColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(RefColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(ScalarColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(SimpleCollectionColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(VarRefColumnMap columnMap, TArgType arg);
    internal abstract virtual TResultType Visit(MultipleDiscriminatorPolymorphicColumnMap columnMap, TArgType arg);
}
internal class System.Data.Query.InternalTrees.ColumnMD : object {
    internal string Name { get; }
    internal TypeUsage Type { get; }
    internal bool IsNullable { get; }
    internal ColumnMD(TableMD table, string name, TypeUsage type);
    internal ColumnMD(TableMD table, EdmMember property);
    internal string get_Name();
    internal TypeUsage get_Type();
    internal bool get_IsNullable();
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.ColumnVar : Var {
    internal Table Table { get; }
    internal ColumnMD ColumnMetadata { get; }
    internal ColumnVar(int id, Table table, ColumnMD columnMetadata);
    internal Table get_Table();
    internal ColumnMD get_ColumnMetadata();
    internal virtual bool TryGetName(String& name);
}
internal class System.Data.Query.InternalTrees.Command : object {
    internal MetadataWorkspace MetadataWorkspace { get; }
    internal Node Root { get; internal set; }
    internal int NextBranchDiscriminatorValue { get; }
    internal int NextNodeId { get; }
    internal TypeUsage BooleanType { get; }
    internal TypeUsage IntegerType { get; }
    internal TypeUsage StringType { get; }
    internal IEnumerable`1<Var> Vars { get; }
    internal HashSet`1<RelProperty> ReferencedRelProperties { get; }
    internal Command(MetadataWorkspace metadataWorkspace);
    internal MetadataWorkspace get_MetadataWorkspace();
    internal Node get_Root();
    internal void set_Root(Node value);
    internal void DisableVarVecEnumCaching();
    internal int get_NextBranchDiscriminatorValue();
    internal int get_NextNodeId();
    internal TypeUsage get_BooleanType();
    internal TypeUsage get_IntegerType();
    internal TypeUsage get_StringType();
    internal VarVec CreateVarVec();
    internal VarVec CreateVarVec(Var v);
    internal VarVec CreateVarVec(IEnumerable`1<Var> v);
    internal VarVec CreateVarVec(VarVec v);
    internal void ReleaseVarVec(VarVec vec);
    internal VarVecEnumerator GetVarVecEnumerator(VarVec vec);
    internal void ReleaseVarVecEnumerator(VarVecEnumerator enumerator);
    internal static VarList CreateVarList();
    internal static VarList CreateVarList(IEnumerable`1<Var> vars);
    internal VarMap CreateVarMap();
    internal static TableMD CreateTableDefinition(TypeUsage elementType);
    internal static TableMD CreateTableDefinition(EntitySetBase extent);
    internal TableMD CreateFlatTableDefinition(RowType type);
    internal TableMD CreateFlatTableDefinition(IEnumerable`1<EdmProperty> properties, IEnumerable`1<EdmMember> keyMembers, EntitySetBase entitySet);
    internal Table CreateTableInstance(TableMD tableMetadata);
    internal IEnumerable`1<Var> get_Vars();
    internal Var GetVar(int id);
    internal ParameterVar GetParameter(string paramName);
    internal ParameterVar CreateParameterVar(string parameterName, TypeUsage parameterType);
    internal ParameterVar ReplaceEnumParameterVar(ParameterVar oldVar);
    internal ParameterVar ReplaceStrongSpatialParameterVar(ParameterVar oldVar);
    internal ColumnVar CreateColumnVar(Table table, ColumnMD columnMD);
    internal ComputedVar CreateComputedVar(TypeUsage type);
    internal SetOpVar CreateSetOpVar(TypeUsage type);
    internal Node CreateNode(Op op);
    internal Node CreateNode(Op op, Node arg1);
    internal Node CreateNode(Op op, Node arg1, Node arg2);
    internal Node CreateNode(Op op, Node arg1, Node arg2, Node arg3);
    internal Node CreateNode(Op op, IList`1<Node> args);
    internal Node CreateNode(Op op, List`1<Node> args);
    internal ConstantBaseOp CreateConstantOp(TypeUsage type, object value);
    internal InternalConstantOp CreateInternalConstantOp(TypeUsage type, object value);
    internal NullSentinelOp CreateNullSentinelOp();
    internal NullOp CreateNullOp(TypeUsage type);
    internal ConstantPredicateOp CreateConstantPredicateOp(bool value);
    internal ConstantPredicateOp CreateTrueOp();
    internal ConstantPredicateOp CreateFalseOp();
    internal FunctionOp CreateFunctionOp(EdmFunction function);
    internal TreatOp CreateTreatOp(TypeUsage type);
    internal TreatOp CreateFakeTreatOp(TypeUsage type);
    internal IsOfOp CreateIsOfOp(TypeUsage isOfType);
    internal IsOfOp CreateIsOfOnlyOp(TypeUsage isOfType);
    internal CastOp CreateCastOp(TypeUsage type);
    internal SoftCastOp CreateSoftCastOp(TypeUsage type);
    internal ComparisonOp CreateComparisonOp(OpType opType);
    internal LikeOp CreateLikeOp();
    internal ConditionalOp CreateConditionalOp(OpType opType);
    internal CaseOp CreateCaseOp(TypeUsage type);
    internal AggregateOp CreateAggregateOp(EdmFunction aggFunc, bool distinctAgg);
    internal NewInstanceOp CreateNewInstanceOp(TypeUsage type);
    internal NewEntityOp CreateScopedNewEntityOp(TypeUsage type, List`1<RelProperty> relProperties, EntitySet entitySet);
    internal NewEntityOp CreateNewEntityOp(TypeUsage type, List`1<RelProperty> relProperties);
    internal DiscriminatedNewEntityOp CreateDiscriminatedNewEntityOp(TypeUsage type, ExplicitDiscriminatorMap discriminatorMap, EntitySet entitySet, List`1<RelProperty> relProperties);
    internal NewMultisetOp CreateNewMultisetOp(TypeUsage type);
    internal NewRecordOp CreateNewRecordOp(TypeUsage type);
    internal NewRecordOp CreateNewRecordOp(RowType type);
    internal NewRecordOp CreateNewRecordOp(TypeUsage type, List`1<EdmProperty> fields);
    internal VarRefOp CreateVarRefOp(Var v);
    internal ArithmeticOp CreateArithmeticOp(OpType opType, TypeUsage type);
    internal PropertyOp CreatePropertyOp(EdmMember prop);
    internal RelPropertyOp CreateRelPropertyOp(RelProperty prop);
    internal RefOp CreateRefOp(EntitySet entitySet, TypeUsage type);
    internal ExistsOp CreateExistsOp();
    internal ElementOp CreateElementOp(TypeUsage type);
    internal GetEntityRefOp CreateGetEntityRefOp(TypeUsage type);
    internal GetRefKeyOp CreateGetRefKeyOp(TypeUsage type);
    internal CollectOp CreateCollectOp(TypeUsage type);
    internal DerefOp CreateDerefOp(TypeUsage type);
    internal NavigateOp CreateNavigateOp(TypeUsage type, RelProperty relProperty);
    internal VarDefListOp CreateVarDefListOp();
    internal VarDefOp CreateVarDefOp(Var v);
    internal Node CreateVarDefNode(Node definingExpr, Var& computedVar);
    internal Node CreateVarDefListNode(Node definingExpr, Var& computedVar);
    internal ScanTableOp CreateScanTableOp(TableMD tableMetadata);
    internal ScanTableOp CreateScanTableOp(Table table);
    internal ScanViewOp CreateScanViewOp(Table table);
    internal ScanViewOp CreateScanViewOp(TableMD tableMetadata);
    internal UnnestOp CreateUnnestOp(Var v);
    internal UnnestOp CreateUnnestOp(Var v, Table t);
    internal FilterOp CreateFilterOp();
    internal ProjectOp CreateProjectOp(VarVec vars);
    internal ProjectOp CreateProjectOp(Var v);
    internal InnerJoinOp CreateInnerJoinOp();
    internal LeftOuterJoinOp CreateLeftOuterJoinOp();
    internal FullOuterJoinOp CreateFullOuterJoinOp();
    internal CrossJoinOp CreateCrossJoinOp();
    internal CrossApplyOp CreateCrossApplyOp();
    internal OuterApplyOp CreateOuterApplyOp();
    internal static SortKey CreateSortKey(Var v, bool asc, string collation);
    internal static SortKey CreateSortKey(Var v, bool asc);
    internal static SortKey CreateSortKey(Var v);
    internal SortOp CreateSortOp(List`1<SortKey> sortKeys);
    internal ConstrainedSortOp CreateConstrainedSortOp(List`1<SortKey> sortKeys);
    internal ConstrainedSortOp CreateConstrainedSortOp(List`1<SortKey> sortKeys, bool withTies);
    internal GroupByOp CreateGroupByOp(VarVec gbyKeys, VarVec outputs);
    internal GroupByIntoOp CreateGroupByIntoOp(VarVec gbyKeys, VarVec inputs, VarVec outputs);
    internal DistinctOp CreateDistinctOp(VarVec keyVars);
    internal DistinctOp CreateDistinctOp(Var keyVar);
    internal UnionAllOp CreateUnionAllOp(VarMap leftMap, VarMap rightMap);
    internal UnionAllOp CreateUnionAllOp(VarMap leftMap, VarMap rightMap, Var branchDiscriminator);
    internal IntersectOp CreateIntersectOp(VarMap leftMap, VarMap rightMap);
    internal ExceptOp CreateExceptOp(VarMap leftMap, VarMap rightMap);
    internal SingleRowOp CreateSingleRowOp();
    internal SingleRowTableOp CreateSingleRowTableOp();
    internal PhysicalProjectOp CreatePhysicalProjectOp(VarList outputVars, SimpleCollectionColumnMap columnMap);
    internal PhysicalProjectOp CreatePhysicalProjectOp(Var outputVar);
    internal static CollectionInfo CreateCollectionInfo(Var collectionVar, ColumnMap columnMap, VarList flattenedElementVars, VarVec keys, List`1<SortKey> sortKeys, object discriminatorValue);
    internal SingleStreamNestOp CreateSingleStreamNestOp(VarVec keys, List`1<SortKey> prefixSortKeys, List`1<SortKey> postfixSortKeys, VarVec outputVars, List`1<CollectionInfo> collectionInfoList, Var discriminatorVar);
    internal MultiStreamNestOp CreateMultiStreamNestOp(List`1<SortKey> prefixSortKeys, VarVec outputVars, List`1<CollectionInfo> collectionInfoList);
    internal NodeInfo GetNodeInfo(Node n);
    internal ExtendedNodeInfo GetExtendedNodeInfo(Node n);
    internal void RecomputeNodeInfo(Node n);
    internal KeyVec PullupKeys(Node n);
    internal static bool EqualTypes(TypeUsage x, TypeUsage y);
    internal static bool EqualTypes(EdmType x, EdmType y);
    internal void BuildUnionAllLadder(IList`1<Node> inputNodes, IList`1<Var> inputVars, Node& resultNode, IList`1& resultVars);
    internal void BuildUnionAllLadder(IList`1<Node> inputNodes, IList`1<Var> inputVars, Node& resultNode, Var& resultVar);
    internal Node BuildProject(Node inputNode, IEnumerable`1<Var> inputVars, IEnumerable`1<Node> computedExpressions);
    internal Node BuildProject(Node input, Node computedExpression, Var& projectVar);
    internal void BuildOfTypeTree(Node inputNode, Var inputVar, TypeUsage desiredType, bool includeSubtypes, Node& resultNode, Var& resultVar);
    internal Node BuildFakeTreatProject(Node inputNode, Var inputVar, TypeUsage desiredType, Var& resultVar);
    internal Node BuildComparison(OpType opType, Node arg0, Node arg1);
    internal Node BuildCollect(Node relOpNode, Var relOpVar);
    internal HashSet`1<RelProperty> get_ReferencedRelProperties();
    internal bool IsRelPropertyReferenced(RelProperty relProperty);
}
internal class System.Data.Query.InternalTrees.ComparisonOp : ScalarOp {
    internal static ComparisonOp PatternEq;
    internal int Arity { get; }
    internal ComparisonOp(OpType opType, TypeUsage type);
    private static ComparisonOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.ComplexTypeColumnMap : TypedColumnMap {
    internal SimpleColumnMap NullSentinel { get; }
    internal ComplexTypeColumnMap(TypeUsage type, string name, ColumnMap[] properties, SimpleColumnMap nullSentinel);
    internal virtual SimpleColumnMap get_NullSentinel();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.ComputedVar : Var {
    internal ComputedVar(int id, TypeUsage type);
}
internal class System.Data.Query.InternalTrees.ConditionalOp : ScalarOp {
    internal static ConditionalOp PatternAnd;
    internal static ConditionalOp PatternOr;
    internal static ConditionalOp PatternNot;
    internal static ConditionalOp PatternIsNull;
    internal ConditionalOp(OpType optype, TypeUsage type);
    private static ConditionalOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.ConstantBaseOp : ScalarOp {
    internal object Value { get; }
    internal int Arity { get; }
    protected ConstantBaseOp(OpType opType, TypeUsage type, object value);
    protected ConstantBaseOp(OpType opType);
    internal virtual object get_Value();
    internal virtual int get_Arity();
    internal virtual bool IsEquivalent(Op other);
}
internal class System.Data.Query.InternalTrees.ConstantOp : ConstantBaseOp {
    internal static ConstantOp Pattern;
    internal ConstantOp(TypeUsage type, object value);
    private static ConstantOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.ConstantPredicateOp : ConstantBaseOp {
    internal static ConstantPredicateOp Pattern;
    internal bool Value { get; }
    internal bool IsTrue { get; }
    internal bool IsFalse { get; }
    internal ConstantPredicateOp(TypeUsage type, bool value);
    private static ConstantPredicateOp();
    internal bool get_Value();
    internal bool get_IsTrue();
    internal bool get_IsFalse();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.ConstrainedSortOp : SortBaseOp {
    internal static ConstrainedSortOp Pattern;
    internal bool WithTies { get; internal set; }
    internal int Arity { get; }
    internal ConstrainedSortOp(List`1<SortKey> sortKeys, bool withTies);
    private static ConstrainedSortOp();
    internal bool get_WithTies();
    internal void set_WithTies(bool value);
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.CrossApplyOp : ApplyBaseOp {
    internal static CrossApplyOp Instance;
    internal static CrossApplyOp Pattern;
    private static CrossApplyOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.CrossJoinOp : JoinBaseOp {
    internal static CrossJoinOp Instance;
    internal static CrossJoinOp Pattern;
    internal int Arity { get; }
    private static CrossJoinOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.DerefOp : ScalarOp {
    internal static DerefOp Pattern;
    internal int Arity { get; }
    internal DerefOp(TypeUsage type);
    private static DerefOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.DiscriminatedCollectionColumnMap : CollectionColumnMap {
    internal SimpleColumnMap Discriminator { get; }
    internal object DiscriminatorValue { get; }
    internal DiscriminatedCollectionColumnMap(TypeUsage type, string name, ColumnMap elementMap, SimpleColumnMap[] keys, SimpleColumnMap[] foreignKeys, SimpleColumnMap discriminator, object discriminatorValue);
    internal SimpleColumnMap get_Discriminator();
    internal object get_DiscriminatorValue();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.DiscriminatedEntityIdentity : EntityIdentity {
    internal SimpleColumnMap EntitySetColumnMap { get; }
    internal EntitySet[] EntitySetMap { get; }
    internal DiscriminatedEntityIdentity(SimpleColumnMap entitySetColumn, EntitySet[] entitySetMap, SimpleColumnMap[] keyColumns);
    internal SimpleColumnMap get_EntitySetColumnMap();
    internal EntitySet[] get_EntitySetMap();
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.DiscriminatedNewEntityOp : NewEntityBaseOp {
    internal static DiscriminatedNewEntityOp Pattern;
    internal ExplicitDiscriminatorMap DiscriminatorMap { get; }
    internal DiscriminatedNewEntityOp(TypeUsage type, ExplicitDiscriminatorMap discriminatorMap, EntitySet entitySet, List`1<RelProperty> relProperties);
    private static DiscriminatedNewEntityOp();
    internal ExplicitDiscriminatorMap get_DiscriminatorMap();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.DistinctOp : RelOp {
    internal static DistinctOp Pattern;
    internal int Arity { get; }
    internal VarVec Keys { get; }
    internal DistinctOp(VarVec keyVars);
    private static DistinctOp();
    internal virtual int get_Arity();
    internal VarVec get_Keys();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.Dump : BasicOpVisitor {
    internal static Encoding DefaultEncoding;
    private static Dump();
    internal static string ToXml(Command itree);
    internal static string ToXml(Command itree, Node subtree);
    internal static string ToXml(ColumnMap columnMap);
    private sealed virtual override void System.IDisposable.Dispose();
    internal void Begin(string name, Dictionary`2<string, object> attrs);
    internal void BeginExpression();
    internal void EndExpression();
    internal void End(string name);
    internal void WriteString(string value);
    protected virtual void VisitDefault(Node n);
    protected virtual void VisitScalarOpDefault(ScalarOp op, Node n);
    protected virtual void VisitJoinOp(JoinBaseOp op, Node n);
    public virtual void Visit(CaseOp op, Node n);
    public virtual void Visit(CollectOp op, Node n);
    protected virtual void VisitConstantOp(ConstantBaseOp op, Node n);
    public virtual void Visit(DistinctOp op, Node n);
    protected virtual void VisitGroupByOp(GroupByBaseOp op, Node n);
    public virtual void Visit(IsOfOp op, Node n);
    protected virtual void VisitNestOp(NestBaseOp op, Node n);
    public virtual void Visit(NewEntityOp op, Node n);
    public virtual void Visit(NewInstanceOp op, Node n);
    public virtual void Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual void Visit(NewMultisetOp op, Node n);
    public virtual void Visit(NewRecordOp op, Node n);
    public virtual void Visit(PhysicalProjectOp op, Node n);
    public virtual void Visit(ProjectOp op, Node n);
    public virtual void Visit(PropertyOp op, Node n);
    public virtual void Visit(RelPropertyOp op, Node n);
    public virtual void Visit(ScanTableOp op, Node n);
    public virtual void Visit(ScanViewOp op, Node n);
    protected virtual void VisitSetOp(SetOp op, Node n);
    public virtual void Visit(SortOp op, Node n);
    public virtual void Visit(ConstrainedSortOp op, Node n);
    protected virtual void VisitSortOp(SortBaseOp op, Node n);
    public virtual void Visit(UnnestOp op, Node n);
    public virtual void Visit(VarDefOp op, Node n);
    public virtual void Visit(VarRefOp op, Node n);
}
internal class System.Data.Query.InternalTrees.ElementOp : ScalarOp {
    internal static ElementOp Pattern;
    internal int Arity { get; }
    internal ElementOp(TypeUsage type);
    private static ElementOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.EntityColumnMap : TypedColumnMap {
    internal EntityIdentity EntityIdentity { get; }
    internal EntityColumnMap(TypeUsage type, string name, ColumnMap[] properties, EntityIdentity entityIdentity);
    internal EntityIdentity get_EntityIdentity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal abstract class System.Data.Query.InternalTrees.EntityIdentity : object {
    internal SimpleColumnMap[] Keys { get; }
    internal EntityIdentity(SimpleColumnMap[] keyColumns);
    internal SimpleColumnMap[] get_Keys();
}
internal class System.Data.Query.InternalTrees.ExceptOp : SetOp {
    internal static ExceptOp Pattern;
    internal ExceptOp(VarVec outputs, VarMap left, VarMap right);
    private static ExceptOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.ExistsOp : ScalarOp {
    internal static ExistsOp Pattern;
    internal int Arity { get; }
    internal ExistsOp(TypeUsage type);
    private static ExistsOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.ExplicitDiscriminatorMap : object {
    internal ReadOnlyCollection`1<KeyValuePair`2<object, EntityType>> TypeMap { get; }
    internal EdmMember DiscriminatorProperty { get; }
    internal ReadOnlyCollection`1<EdmProperty> Properties { get; }
    internal ExplicitDiscriminatorMap(DiscriminatorMap template);
    internal ReadOnlyCollection`1<KeyValuePair`2<object, EntityType>> get_TypeMap();
    internal EdmMember get_DiscriminatorProperty();
    internal ReadOnlyCollection`1<EdmProperty> get_Properties();
    internal object GetTypeId(EntityType entityType);
}
internal class System.Data.Query.InternalTrees.ExtendedNodeInfo : NodeInfo {
    internal VarVec LocalDefinitions { get; }
    internal VarVec Definitions { get; }
    internal KeyVec Keys { get; }
    internal VarVec NonNullableDefinitions { get; }
    internal VarVec NonNullableVisibleDefinitions { get; }
    internal RowCount MinRows { get; internal set; }
    internal RowCount MaxRows { get; internal set; }
    internal ExtendedNodeInfo(Command cmd);
    internal virtual void Clear();
    internal virtual void ComputeHashValue(Command cmd, Node n);
    internal VarVec get_LocalDefinitions();
    internal VarVec get_Definitions();
    internal KeyVec get_Keys();
    internal VarVec get_NonNullableDefinitions();
    internal VarVec get_NonNullableVisibleDefinitions();
    internal RowCount get_MinRows();
    internal void set_MinRows(RowCount value);
    internal RowCount get_MaxRows();
    internal void set_MaxRows(RowCount value);
    internal void SetRowCount(RowCount minRows, RowCount maxRows);
    internal void InitRowCountFrom(ExtendedNodeInfo source);
}
internal class System.Data.Query.InternalTrees.FilterOp : RelOp {
    internal static FilterOp Instance;
    internal static FilterOp Pattern;
    internal int Arity { get; }
    private static FilterOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.FullOuterJoinOp : JoinBaseOp {
    internal static FullOuterJoinOp Instance;
    internal static FullOuterJoinOp Pattern;
    private static FullOuterJoinOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.FunctionOp : ScalarOp {
    internal static FunctionOp Pattern;
    internal EdmFunction Function { get; }
    internal FunctionOp(EdmFunction function);
    private static FunctionOp();
    internal EdmFunction get_Function();
    internal virtual bool IsEquivalent(Op other);
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.GetEntityRefOp : ScalarOp {
    internal static GetEntityRefOp Pattern;
    internal int Arity { get; }
    internal GetEntityRefOp(TypeUsage type);
    private static GetEntityRefOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.GetRefKeyOp : ScalarOp {
    internal static GetRefKeyOp Pattern;
    internal int Arity { get; }
    internal GetRefKeyOp(TypeUsage type);
    private static GetRefKeyOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.GroupByBaseOp : RelOp {
    internal VarVec Keys { get; }
    internal VarVec Outputs { get; }
    protected GroupByBaseOp(OpType opType);
    internal GroupByBaseOp(OpType opType, VarVec keys, VarVec outputs);
    internal VarVec get_Keys();
    internal VarVec get_Outputs();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.GroupByIntoOp : GroupByBaseOp {
    internal static GroupByIntoOp Pattern;
    internal VarVec Inputs { get; }
    internal int Arity { get; }
    internal GroupByIntoOp(VarVec keys, VarVec inputs, VarVec outputs);
    private static GroupByIntoOp();
    internal VarVec get_Inputs();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.GroupByOp : GroupByBaseOp {
    internal static GroupByOp Pattern;
    internal int Arity { get; }
    internal GroupByOp(VarVec keys, VarVec outputs);
    private static GroupByOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.InnerJoinOp : JoinBaseOp {
    internal static InnerJoinOp Instance;
    internal static InnerJoinOp Pattern;
    private static InnerJoinOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.InternalConstantOp : ConstantBaseOp {
    internal static InternalConstantOp Pattern;
    internal InternalConstantOp(TypeUsage type, object value);
    private static InternalConstantOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.IntersectOp : SetOp {
    internal static IntersectOp Pattern;
    internal IntersectOp(VarVec outputs, VarMap left, VarMap right);
    private static IntersectOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.IsOfOp : ScalarOp {
    internal static IsOfOp Pattern;
    internal int Arity { get; }
    internal TypeUsage IsOfType { get; }
    internal bool IsOfOnly { get; }
    internal IsOfOp(TypeUsage isOfType, bool isOfOnly, TypeUsage type);
    private static IsOfOp();
    internal virtual int get_Arity();
    internal TypeUsage get_IsOfType();
    internal bool get_IsOfOnly();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.JoinBaseOp : RelOp {
    internal int Arity { get; }
    internal JoinBaseOp(OpType opType);
    internal virtual int get_Arity();
}
internal class System.Data.Query.InternalTrees.KeyVec : object {
    internal VarVec KeyVars { get; }
    internal bool NoKeys { get; internal set; }
    internal KeyVec(Command itree);
    internal void InitFrom(KeyVec keyset);
    internal void InitFrom(IEnumerable`1<Var> varSet);
    internal void InitFrom(IEnumerable`1<Var> varSet, bool ignoreParameters);
    internal void InitFrom(KeyVec left, KeyVec right);
    internal void InitFrom(List`1<KeyVec> keyVecList);
    internal void Clear();
    internal VarVec get_KeyVars();
    internal bool get_NoKeys();
    internal void set_NoKeys(bool value);
}
internal class System.Data.Query.InternalTrees.LeafOp : RulePatternOp {
    internal static LeafOp Instance;
    internal static LeafOp Pattern;
    internal int Arity { get; }
    private static LeafOp();
    internal virtual int get_Arity();
}
internal class System.Data.Query.InternalTrees.LeftOuterJoinOp : JoinBaseOp {
    internal static LeftOuterJoinOp Instance;
    internal static LeftOuterJoinOp Pattern;
    private static LeftOuterJoinOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.LikeOp : ScalarOp {
    internal static LikeOp Pattern;
    internal int Arity { get; }
    internal LikeOp(TypeUsage boolType);
    private static LikeOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.MultipleDiscriminatorPolymorphicColumnMap : TypedColumnMap {
    internal SimpleColumnMap[] TypeDiscriminators { get; }
    internal Dictionary`2<EntityType, TypedColumnMap> TypeChoices { get; }
    internal Func`2<Object[], EntityType> Discriminate { get; }
    internal MultipleDiscriminatorPolymorphicColumnMap(TypeUsage type, string name, ColumnMap[] baseTypeColumns, SimpleColumnMap[] typeDiscriminators, Dictionary`2<EntityType, TypedColumnMap> typeChoices, Func`2<Object[], EntityType> discriminate);
    internal SimpleColumnMap[] get_TypeDiscriminators();
    internal Dictionary`2<EntityType, TypedColumnMap> get_TypeChoices();
    internal Func`2<Object[], EntityType> get_Discriminate();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.MultiStreamNestOp : NestBaseOp {
    internal MultiStreamNestOp(List`1<SortKey> prefixSortKeys, VarVec outputVars, List`1<CollectionInfo> collectionInfoList);
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.NavigateOp : ScalarOp {
    internal static NavigateOp Pattern;
    internal int Arity { get; }
    internal RelProperty RelProperty { get; }
    internal RelationshipType Relationship { get; }
    internal RelationshipEndMember FromEnd { get; }
    internal RelationshipEndMember ToEnd { get; }
    internal NavigateOp(TypeUsage type, RelProperty relProperty);
    private static NavigateOp();
    internal virtual int get_Arity();
    internal RelProperty get_RelProperty();
    internal RelationshipType get_Relationship();
    internal RelationshipEndMember get_FromEnd();
    internal RelationshipEndMember get_ToEnd();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.NestBaseOp : PhysicalOp {
    internal List`1<SortKey> PrefixSortKeys { get; }
    internal VarVec Outputs { get; }
    internal List`1<CollectionInfo> CollectionInfo { get; }
    internal NestBaseOp(OpType opType, List`1<SortKey> prefixSortKeys, VarVec outputVars, List`1<CollectionInfo> collectionInfoList);
    internal List`1<SortKey> get_PrefixSortKeys();
    internal VarVec get_Outputs();
    internal List`1<CollectionInfo> get_CollectionInfo();
}
internal abstract class System.Data.Query.InternalTrees.NewEntityBaseOp : ScalarOp {
    internal bool Scoped { get; }
    internal EntitySet EntitySet { get; }
    internal List`1<RelProperty> RelationshipProperties { get; }
    internal NewEntityBaseOp(OpType opType, TypeUsage type, bool scoped, EntitySet entitySet, List`1<RelProperty> relProperties);
    protected NewEntityBaseOp(OpType opType);
    internal bool get_Scoped();
    internal EntitySet get_EntitySet();
    internal List`1<RelProperty> get_RelationshipProperties();
}
internal class System.Data.Query.InternalTrees.NewEntityOp : NewEntityBaseOp {
    internal static NewEntityOp Pattern;
    internal NewEntityOp(TypeUsage type, List`1<RelProperty> relProperties, bool scoped, EntitySet entitySet);
    private static NewEntityOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.NewInstanceOp : ScalarOp {
    internal static NewInstanceOp Pattern;
    internal NewInstanceOp(TypeUsage type);
    private static NewInstanceOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.NewMultisetOp : ScalarOp {
    internal static NewMultisetOp Pattern;
    internal NewMultisetOp(TypeUsage type);
    private static NewMultisetOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.NewRecordOp : ScalarOp {
    internal static NewRecordOp Pattern;
    internal List`1<EdmProperty> Properties { get; }
    internal NewRecordOp(TypeUsage type);
    internal NewRecordOp(TypeUsage type, List`1<EdmProperty> fields);
    private static NewRecordOp();
    internal bool GetFieldPosition(EdmProperty field, Int32& fieldPosition);
    internal List`1<EdmProperty> get_Properties();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.Node : object {
    internal List`1<Node> Children { get; }
    internal Op Op { get; internal set; }
    internal Node Child0 { get; internal set; }
    internal bool HasChild0 { get; }
    internal Node Child1 { get; internal set; }
    internal bool HasChild1 { get; }
    internal Node Child2 { get; internal set; }
    internal Node Child3 { get; }
    internal bool HasChild2 { get; }
    internal bool HasChild3 { get; }
    internal bool IsNodeInfoInitialized { get; }
    internal Node(int nodeId, Op op, List`1<Node> children);
    internal Node(Op op, Node[] children);
    internal List`1<Node> get_Children();
    internal Op get_Op();
    internal void set_Op(Op value);
    internal Node get_Child0();
    internal void set_Child0(Node value);
    internal bool get_HasChild0();
    internal Node get_Child1();
    internal void set_Child1(Node value);
    internal bool get_HasChild1();
    internal Node get_Child2();
    internal void set_Child2(Node value);
    internal Node get_Child3();
    internal bool get_HasChild2();
    internal bool get_HasChild3();
    internal bool IsEquivalent(Node other);
    internal bool get_IsNodeInfoInitialized();
    internal NodeInfo GetNodeInfo(Command command);
    internal ExtendedNodeInfo GetExtendedNodeInfo(Command command);
}
internal class System.Data.Query.InternalTrees.NodeCounter : BasicOpVisitorOfT`1<int> {
    internal static int Count(Node subTree);
    protected virtual int VisitDefault(Node n);
}
internal class System.Data.Query.InternalTrees.NodeInfo : object {
    protected int m_hashValue;
    internal VarVec ExternalReferences { get; }
    internal int HashValue { get; }
    internal NodeInfo(Command cmd);
    internal virtual void Clear();
    internal VarVec get_ExternalReferences();
    internal int get_HashValue();
    internal static int GetHashValue(VarVec vec);
    internal virtual void ComputeHashValue(Command cmd, Node n);
}
internal class System.Data.Query.InternalTrees.NodeInfoVisitor : BasicOpVisitorOfT`1<NodeInfo> {
    internal NodeInfoVisitor(Command command);
    internal void RecomputeNodeInfo(Node n);
    protected virtual NodeInfo VisitDefault(Node n);
    public virtual NodeInfo Visit(VarRefOp op, Node n);
    protected virtual NodeInfo VisitRelOpDefault(RelOp op, Node n);
    protected virtual NodeInfo VisitTableOp(ScanTableBaseOp op, Node n);
    public virtual NodeInfo Visit(UnnestOp op, Node n);
    internal static Dictionary`2<Var, Var> ComputeVarRemappings(Node varDefListNode);
    public virtual NodeInfo Visit(ProjectOp op, Node n);
    public virtual NodeInfo Visit(FilterOp op, Node n);
    protected virtual NodeInfo VisitGroupByOp(GroupByBaseOp op, Node n);
    public virtual NodeInfo Visit(CrossJoinOp op, Node n);
    protected virtual NodeInfo VisitJoinOp(JoinBaseOp op, Node n);
    protected virtual NodeInfo VisitApplyOp(ApplyBaseOp op, Node n);
    protected virtual NodeInfo VisitSetOp(SetOp op, Node n);
    protected virtual NodeInfo VisitSortOp(SortBaseOp op, Node n);
    public virtual NodeInfo Visit(DistinctOp op, Node n);
    public virtual NodeInfo Visit(SingleRowOp op, Node n);
    public virtual NodeInfo Visit(SingleRowTableOp op, Node n);
    public virtual NodeInfo Visit(PhysicalProjectOp op, Node n);
    protected virtual NodeInfo VisitNestOp(NestBaseOp op, Node n);
}
internal class System.Data.Query.InternalTrees.NullOp : ConstantBaseOp {
    internal static NullOp Pattern;
    internal NullOp(TypeUsage type);
    private static NullOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.NullSentinelOp : ConstantBaseOp {
    internal static NullSentinelOp Pattern;
    internal NullSentinelOp(TypeUsage type, object value);
    private static NullSentinelOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.Op : object {
    internal static int ArityVarying;
    internal OpType OpType { get; }
    internal int Arity { get; }
    internal bool IsScalarOp { get; }
    internal bool IsRulePatternOp { get; }
    internal bool IsRelOp { get; }
    internal bool IsAncillaryOp { get; }
    internal bool IsPhysicalOp { get; }
    internal TypeUsage Type { get; internal set; }
    internal Op(OpType opType);
    internal OpType get_OpType();
    internal virtual int get_Arity();
    internal virtual bool get_IsScalarOp();
    internal virtual bool get_IsRulePatternOp();
    internal virtual bool get_IsRelOp();
    internal virtual bool get_IsAncillaryOp();
    internal virtual bool get_IsPhysicalOp();
    internal virtual bool IsEquivalent(Op other);
    internal virtual TypeUsage get_Type();
    internal virtual void set_Type(TypeUsage value);
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.OpCopier : BasicOpVisitorOfNode {
    protected Command m_destCmd;
    protected VarMap m_varMap;
    protected OpCopier(Command cmd);
    internal static Node Copy(Command cmd, Node n);
    internal static Node Copy(Command cmd, Node node, VarList varList, VarList& newVarList);
    internal static Node Copy(Command cmd, Node n, VarMap& varMap);
    internal static List`1<SortKey> Copy(Command cmd, List`1<SortKey> sortKeys);
    protected Node CopyNode(Node n);
    public virtual Node Visit(Op op, Node n);
    public virtual Node Visit(ConstantOp op, Node n);
    public virtual Node Visit(NullOp op, Node n);
    public virtual Node Visit(ConstantPredicateOp op, Node n);
    public virtual Node Visit(InternalConstantOp op, Node n);
    public virtual Node Visit(NullSentinelOp op, Node n);
    public virtual Node Visit(FunctionOp op, Node n);
    public virtual Node Visit(PropertyOp op, Node n);
    public virtual Node Visit(RelPropertyOp op, Node n);
    public virtual Node Visit(CaseOp op, Node n);
    public virtual Node Visit(ComparisonOp op, Node n);
    public virtual Node Visit(LikeOp op, Node n);
    public virtual Node Visit(AggregateOp op, Node n);
    public virtual Node Visit(NewInstanceOp op, Node n);
    public virtual Node Visit(NewEntityOp op, Node n);
    public virtual Node Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual Node Visit(NewMultisetOp op, Node n);
    public virtual Node Visit(NewRecordOp op, Node n);
    public virtual Node Visit(RefOp op, Node n);
    public virtual Node Visit(VarRefOp op, Node n);
    public virtual Node Visit(ConditionalOp op, Node n);
    public virtual Node Visit(ArithmeticOp op, Node n);
    public virtual Node Visit(TreatOp op, Node n);
    public virtual Node Visit(CastOp op, Node n);
    public virtual Node Visit(SoftCastOp op, Node n);
    public virtual Node Visit(DerefOp op, Node n);
    public virtual Node Visit(NavigateOp op, Node n);
    public virtual Node Visit(IsOfOp op, Node n);
    public virtual Node Visit(ExistsOp op, Node n);
    public virtual Node Visit(ElementOp op, Node n);
    public virtual Node Visit(GetRefKeyOp op, Node n);
    public virtual Node Visit(GetEntityRefOp op, Node n);
    public virtual Node Visit(CollectOp op, Node n);
    public virtual Node Visit(ScanTableOp op, Node n);
    public virtual Node Visit(ScanViewOp op, Node n);
    public virtual Node Visit(UnnestOp op, Node n);
    public virtual Node Visit(ProjectOp op, Node n);
    public virtual Node Visit(FilterOp op, Node n);
    public virtual Node Visit(SortOp op, Node n);
    public virtual Node Visit(ConstrainedSortOp op, Node n);
    public virtual Node Visit(GroupByOp op, Node n);
    public virtual Node Visit(GroupByIntoOp op, Node n);
    public virtual Node Visit(CrossJoinOp op, Node n);
    public virtual Node Visit(InnerJoinOp op, Node n);
    public virtual Node Visit(LeftOuterJoinOp op, Node n);
    public virtual Node Visit(FullOuterJoinOp op, Node n);
    public virtual Node Visit(CrossApplyOp op, Node n);
    public virtual Node Visit(OuterApplyOp op, Node n);
    public virtual Node Visit(UnionAllOp op, Node n);
    public virtual Node Visit(IntersectOp op, Node n);
    public virtual Node Visit(ExceptOp op, Node n);
    public virtual Node Visit(DistinctOp op, Node n);
    public virtual Node Visit(SingleRowOp op, Node n);
    public virtual Node Visit(SingleRowTableOp op, Node n);
    public virtual Node Visit(VarDefOp op, Node n);
    public virtual Node Visit(VarDefListOp op, Node n);
    public virtual Node Visit(PhysicalProjectOp op, Node n);
    public virtual Node Visit(SingleStreamNestOp op, Node n);
    public virtual Node Visit(MultiStreamNestOp op, Node n);
}
internal class System.Data.Query.InternalTrees.OpDelegate : MulticastDelegate {
    public OpDelegate(object object, IntPtr method);
    public virtual void Invoke(RuleProcessingContext context, Node node);
    public virtual IAsyncResult BeginInvoke(RuleProcessingContext context, Node node, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum System.Data.Query.InternalTrees.OpType : Enum {
    public int value__;
    public static OpType Constant;
    public static OpType InternalConstant;
    public static OpType NullSentinel;
    public static OpType Null;
    public static OpType ConstantPredicate;
    public static OpType VarRef;
    public static OpType GT;
    public static OpType GE;
    public static OpType LE;
    public static OpType LT;
    public static OpType EQ;
    public static OpType NE;
    public static OpType Like;
    public static OpType Plus;
    public static OpType Minus;
    public static OpType Multiply;
    public static OpType Divide;
    public static OpType Modulo;
    public static OpType UnaryMinus;
    public static OpType And;
    public static OpType Or;
    public static OpType Not;
    public static OpType IsNull;
    public static OpType Case;
    public static OpType Treat;
    public static OpType IsOf;
    public static OpType Cast;
    public static OpType SoftCast;
    public static OpType Aggregate;
    public static OpType Function;
    public static OpType RelProperty;
    public static OpType Property;
    public static OpType NewEntity;
    public static OpType NewInstance;
    public static OpType DiscriminatedNewEntity;
    public static OpType NewMultiset;
    public static OpType NewRecord;
    public static OpType GetRefKey;
    public static OpType GetEntityRef;
    public static OpType Ref;
    public static OpType Exists;
    public static OpType Element;
    public static OpType Collect;
    public static OpType Deref;
    public static OpType Navigate;
    public static OpType ScanTable;
    public static OpType ScanView;
    public static OpType Filter;
    public static OpType Project;
    public static OpType InnerJoin;
    public static OpType LeftOuterJoin;
    public static OpType FullOuterJoin;
    public static OpType CrossJoin;
    public static OpType CrossApply;
    public static OpType OuterApply;
    public static OpType Unnest;
    public static OpType Sort;
    public static OpType ConstrainedSort;
    public static OpType GroupBy;
    public static OpType GroupByInto;
    public static OpType UnionAll;
    public static OpType Intersect;
    public static OpType Except;
    public static OpType Distinct;
    public static OpType SingleRow;
    public static OpType SingleRowTable;
    public static OpType VarDef;
    public static OpType VarDefList;
    public static OpType Leaf;
    public static OpType PhysicalProject;
    public static OpType SingleStreamNest;
    public static OpType MultiStreamNest;
    public static OpType MaxMarker;
    public static OpType NotValid;
}
internal class System.Data.Query.InternalTrees.OuterApplyOp : ApplyBaseOp {
    internal static OuterApplyOp Instance;
    internal static OuterApplyOp Pattern;
    private static OuterApplyOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.ParameterVar : Var {
    internal string ParameterName { get; }
    internal ParameterVar(int id, TypeUsage type, string paramName);
    internal string get_ParameterName();
    internal virtual bool TryGetName(String& name);
}
internal class System.Data.Query.InternalTrees.PatternMatchRule : Rule {
    internal PatternMatchRule(Node pattern, ProcessNodeDelegate processDelegate);
    internal virtual bool Match(Node node);
}
internal abstract class System.Data.Query.InternalTrees.PhysicalOp : Op {
    internal bool IsPhysicalOp { get; }
    internal PhysicalOp(OpType opType);
    internal virtual bool get_IsPhysicalOp();
}
internal class System.Data.Query.InternalTrees.PhysicalProjectOp : PhysicalOp {
    internal static PhysicalProjectOp Pattern;
    internal SimpleCollectionColumnMap ColumnMap { get; }
    internal VarList Outputs { get; }
    internal PhysicalProjectOp(VarList outputVars, SimpleCollectionColumnMap columnMap);
    private static PhysicalProjectOp();
    internal SimpleCollectionColumnMap get_ColumnMap();
    internal VarList get_Outputs();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.ProjectOp : RelOp {
    internal static ProjectOp Pattern;
    internal int Arity { get; }
    internal VarVec Outputs { get; }
    internal ProjectOp(VarVec vars);
    private static ProjectOp();
    internal virtual int get_Arity();
    internal VarVec get_Outputs();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.PropertyOp : ScalarOp {
    internal static PropertyOp Pattern;
    internal int Arity { get; }
    internal EdmMember PropertyInfo { get; }
    internal PropertyOp(TypeUsage type, EdmMember property);
    private static PropertyOp();
    internal virtual int get_Arity();
    internal EdmMember get_PropertyInfo();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.RecordColumnMap : StructuredColumnMap {
    internal SimpleColumnMap NullSentinel { get; }
    internal RecordColumnMap(TypeUsage type, string name, ColumnMap[] properties, SimpleColumnMap nullSentinel);
    internal virtual SimpleColumnMap get_NullSentinel();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
}
internal class System.Data.Query.InternalTrees.RefColumnMap : ColumnMap {
    internal EntityIdentity EntityIdentity { get; }
    internal RefColumnMap(TypeUsage type, string name, EntityIdentity entityIdentity);
    internal EntityIdentity get_EntityIdentity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
}
internal class System.Data.Query.InternalTrees.RefOp : ScalarOp {
    internal static RefOp Pattern;
    internal int Arity { get; }
    internal EntitySet EntitySet { get; }
    internal RefOp(EntitySet entitySet, TypeUsage type);
    private static RefOp();
    internal virtual int get_Arity();
    internal EntitySet get_EntitySet();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.RelOp : Op {
    internal bool IsRelOp { get; }
    internal RelOp(OpType opType);
    internal virtual bool get_IsRelOp();
}
internal class System.Data.Query.InternalTrees.RelProperty : object {
    public RelationshipType Relationship { get; }
    public RelationshipEndMember FromEnd { get; }
    public RelationshipEndMember ToEnd { get; }
    internal RelProperty(RelationshipType relationshipType, RelationshipEndMember fromEnd, RelationshipEndMember toEnd);
    public RelationshipType get_Relationship();
    public RelationshipEndMember get_FromEnd();
    public RelationshipEndMember get_ToEnd();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [DebuggerNonUserCodeAttribute]
public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.RelPropertyHelper : object {
    internal RelPropertyHelper(MetadataWorkspace ws, HashSet`1<RelProperty> interestingRelProperties);
    internal IEnumerable`1<RelProperty> GetDeclaredOnlyRelProperties(EntityTypeBase entityType);
    internal IEnumerable`1<RelProperty> GetRelProperties(EntityTypeBase entityType);
}
internal class System.Data.Query.InternalTrees.RelPropertyOp : ScalarOp {
    internal static RelPropertyOp Pattern;
    internal int Arity { get; }
    public RelProperty PropertyInfo { get; }
    internal RelPropertyOp(TypeUsage type, RelProperty property);
    private static RelPropertyOp();
    internal virtual int get_Arity();
    public RelProperty get_PropertyInfo();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal enum System.Data.Query.InternalTrees.RowCount : Enum {
    public byte value__;
    public static RowCount Zero;
    public static RowCount One;
    public static RowCount Unbounded;
}
internal abstract class System.Data.Query.InternalTrees.Rule : object {
    internal OpType RuleOpType { get; }
    protected Rule(OpType opType, ProcessNodeDelegate nodeProcessDelegate);
    internal abstract virtual bool Match(Node node);
    internal bool Apply(RuleProcessingContext ruleProcessingContext, Node node, Node& newNode);
    internal OpType get_RuleOpType();
}
internal abstract class System.Data.Query.InternalTrees.RulePatternOp : Op {
    internal bool IsRulePatternOp { get; }
    internal RulePatternOp(OpType opType);
    internal virtual bool get_IsRulePatternOp();
}
internal abstract class System.Data.Query.InternalTrees.RuleProcessingContext : object {
    internal Command Command { get; }
    internal RuleProcessingContext(Command command);
    internal Command get_Command();
    internal virtual void PreProcess(Node node);
    internal virtual void PreProcessSubTree(Node node);
    internal virtual void PostProcess(Node node, Rule rule);
    internal virtual void PostProcessSubTree(Node node);
    internal virtual int GetHashCode(Node node);
}
internal class System.Data.Query.InternalTrees.RuleProcessor : object {
    internal Node ApplyRulesToSubtree(RuleProcessingContext context, ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> rules, Node subTreeRoot);
}
internal class System.Data.Query.InternalTrees.ScalarColumnMap : SimpleColumnMap {
    internal int CommandId { get; }
    internal int ColumnPos { get; }
    internal ScalarColumnMap(TypeUsage type, string name, int commandId, int columnPos);
    internal int get_CommandId();
    internal int get_ColumnPos();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal abstract class System.Data.Query.InternalTrees.ScalarOp : Op {
    internal bool IsScalarOp { get; }
    internal TypeUsage Type { get; internal set; }
    internal bool IsAggregateOp { get; }
    internal ScalarOp(OpType opType, TypeUsage type);
    protected ScalarOp(OpType opType);
    internal virtual bool get_IsScalarOp();
    internal virtual bool IsEquivalent(Op other);
    internal virtual TypeUsage get_Type();
    internal virtual void set_Type(TypeUsage value);
    internal virtual bool get_IsAggregateOp();
}
internal abstract class System.Data.Query.InternalTrees.ScanTableBaseOp : RelOp {
    internal Table Table { get; }
    protected ScanTableBaseOp(OpType opType, Table table);
    protected ScanTableBaseOp(OpType opType);
    internal Table get_Table();
}
internal class System.Data.Query.InternalTrees.ScanTableOp : ScanTableBaseOp {
    internal static ScanTableOp Pattern;
    internal int Arity { get; }
    internal ScanTableOp(Table table);
    private static ScanTableOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.ScanViewOp : ScanTableBaseOp {
    internal static ScanViewOp Pattern;
    internal int Arity { get; }
    internal ScanViewOp(Table table);
    private static ScanViewOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.SetOp : RelOp {
    internal int Arity { get; }
    internal VarMap[] VarMap { get; }
    internal VarVec Outputs { get; }
    internal SetOp(OpType opType, VarVec outputs, VarMap left, VarMap right);
    protected SetOp(OpType opType);
    internal virtual int get_Arity();
    internal VarMap[] get_VarMap();
    internal VarVec get_Outputs();
}
internal class System.Data.Query.InternalTrees.SetOpVar : Var {
    internal SetOpVar(int id, TypeUsage type);
}
internal class System.Data.Query.InternalTrees.SimpleCollectionColumnMap : CollectionColumnMap {
    internal SimpleCollectionColumnMap(TypeUsage type, string name, ColumnMap elementMap, SimpleColumnMap[] keys, SimpleColumnMap[] foreignKeys);
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
}
internal abstract class System.Data.Query.InternalTrees.SimpleColumnMap : ColumnMap {
    internal SimpleColumnMap(TypeUsage type, string name);
}
internal class System.Data.Query.InternalTrees.SimpleEntityIdentity : EntityIdentity {
    internal EntitySet EntitySet { get; }
    internal SimpleEntityIdentity(EntitySet entitySet, SimpleColumnMap[] keyColumns);
    internal EntitySet get_EntitySet();
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.SimplePolymorphicColumnMap : TypedColumnMap {
    internal SimpleColumnMap TypeDiscriminator { get; }
    internal Dictionary`2<object, TypedColumnMap> TypeChoices { get; }
    internal SimplePolymorphicColumnMap(TypeUsage type, string name, ColumnMap[] baseTypeColumns, SimpleColumnMap typeDiscriminator, Dictionary`2<object, TypedColumnMap> typeChoices);
    internal SimpleColumnMap get_TypeDiscriminator();
    internal Dictionary`2<object, TypedColumnMap> get_TypeChoices();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.SimpleRule : Rule {
    internal SimpleRule(OpType opType, ProcessNodeDelegate processDelegate);
    internal virtual bool Match(Node node);
}
internal class System.Data.Query.InternalTrees.SingleRowOp : RelOp {
    internal static SingleRowOp Instance;
    internal static SingleRowOp Pattern;
    internal int Arity { get; }
    private static SingleRowOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.SingleRowTableOp : RelOp {
    internal static SingleRowTableOp Instance;
    internal static SingleRowTableOp Pattern;
    internal int Arity { get; }
    private static SingleRowTableOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.SingleStreamNestOp : NestBaseOp {
    internal int Arity { get; }
    internal Var Discriminator { get; }
    internal List`1<SortKey> PostfixSortKeys { get; }
    internal VarVec Keys { get; }
    internal SingleStreamNestOp(VarVec keys, List`1<SortKey> prefixSortKeys, List`1<SortKey> postfixSortKeys, VarVec outputVars, List`1<CollectionInfo> collectionInfoList, Var discriminatorVar);
    internal virtual int get_Arity();
    internal Var get_Discriminator();
    internal List`1<SortKey> get_PostfixSortKeys();
    internal VarVec get_Keys();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.SoftCastOp : ScalarOp {
    internal static SoftCastOp Pattern;
    internal int Arity { get; }
    internal SoftCastOp(TypeUsage type);
    private static SoftCastOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.SortBaseOp : RelOp {
    internal List`1<SortKey> Keys { get; }
    internal SortBaseOp(OpType opType);
    internal SortBaseOp(OpType opType, List`1<SortKey> sortKeys);
    internal List`1<SortKey> get_Keys();
}
internal class System.Data.Query.InternalTrees.SortKey : object {
    internal Var Var { get; internal set; }
    internal bool AscendingSort { get; }
    internal string Collation { get; }
    internal SortKey(Var v, bool asc, string collation);
    internal Var get_Var();
    internal void set_Var(Var value);
    internal bool get_AscendingSort();
    internal string get_Collation();
}
internal class System.Data.Query.InternalTrees.SortOp : SortBaseOp {
    internal static SortOp Pattern;
    internal int Arity { get; }
    internal SortOp(List`1<SortKey> sortKeys);
    private static SortOp();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.StructuredColumnMap : ColumnMap {
    internal SimpleColumnMap NullSentinel { get; }
    internal ColumnMap[] Properties { get; }
    internal StructuredColumnMap(TypeUsage type, string name, ColumnMap[] properties);
    internal virtual SimpleColumnMap get_NullSentinel();
    internal ColumnMap[] get_Properties();
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.SubTreeId : object {
    public Node m_subTreeRoot;
    internal SubTreeId(RuleProcessingContext context, Node node, Node parent, int childIndex);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class System.Data.Query.InternalTrees.Table : object {
    internal TableMD TableMetadata { get; }
    internal VarList Columns { get; }
    internal VarVec ReferencedColumns { get; }
    internal VarVec NonNullableColumns { get; }
    internal VarVec Keys { get; }
    internal int TableId { get; }
    internal Table(Command command, TableMD tableMetadata, int tableId);
    internal TableMD get_TableMetadata();
    internal VarList get_Columns();
    internal VarVec get_ReferencedColumns();
    internal VarVec get_NonNullableColumns();
    internal VarVec get_Keys();
    internal int get_TableId();
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.TableMD : object {
    internal EntitySetBase Extent { get; }
    internal List`1<ColumnMD> Columns { get; }
    internal List`1<ColumnMD> Keys { get; }
    internal bool Flattened { get; }
    internal TableMD(TypeUsage type, EntitySetBase extent);
    internal TableMD(IEnumerable`1<EdmProperty> properties, IEnumerable`1<EdmMember> keyProperties, EntitySetBase extent);
    internal EntitySetBase get_Extent();
    internal List`1<ColumnMD> get_Columns();
    internal List`1<ColumnMD> get_Keys();
    internal bool get_Flattened();
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.TreatOp : ScalarOp {
    internal static TreatOp Pattern;
    internal int Arity { get; }
    internal bool IsFakeTreat { get; }
    internal TreatOp(TypeUsage type, bool isFake);
    private static TreatOp();
    internal virtual int get_Arity();
    internal bool get_IsFakeTreat();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.TypedColumnMap : StructuredColumnMap {
    internal TypedColumnMap(TypeUsage type, string name, ColumnMap[] properties);
}
internal class System.Data.Query.InternalTrees.UnionAllOp : SetOp {
    internal static UnionAllOp Pattern;
    internal Var BranchDiscriminator { get; }
    internal UnionAllOp(VarVec outputs, VarMap left, VarMap right, Var branchDiscriminator);
    private static UnionAllOp();
    internal Var get_BranchDiscriminator();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.UnnestOp : RelOp {
    internal static UnnestOp Pattern;
    internal Var Var { get; }
    internal Table Table { get; }
    internal int Arity { get; }
    internal UnnestOp(Var v, Table t);
    private static UnnestOp();
    internal Var get_Var();
    internal Table get_Table();
    internal virtual int get_Arity();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal abstract class System.Data.Query.InternalTrees.Var : object {
    internal int Id { get; }
    internal VarType VarType { get; }
    internal TypeUsage Type { get; }
    internal Var(int id, VarType varType, TypeUsage type);
    internal int get_Id();
    internal VarType get_VarType();
    internal TypeUsage get_Type();
    internal virtual bool TryGetName(String& name);
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.VarDefListOp : AncillaryOp {
    internal static VarDefListOp Instance;
    internal static VarDefListOp Pattern;
    private static VarDefListOp();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal class System.Data.Query.InternalTrees.VarDefOp : AncillaryOp {
    internal static VarDefOp Pattern;
    internal int Arity { get; }
    internal Var Var { get; }
    internal VarDefOp(Var v);
    private static VarDefOp();
    internal virtual int get_Arity();
    internal Var get_Var();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
[DebuggerDisplayAttribute("{{{ToString()}}}")]
internal class System.Data.Query.InternalTrees.VarList : List`1<Var> {
    internal VarList(IEnumerable`1<Var> vars);
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.VarMap : Dictionary`2<Var, Var> {
    internal VarMap GetReverseMap();
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.VarRefColumnMap : SimpleColumnMap {
    internal Var Var { get; }
    internal VarRefColumnMap(TypeUsage type, string name, Var v);
    internal VarRefColumnMap(Var v);
    internal Var get_Var();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(ColumnMapVisitor`1<TArgType> visitor, TArgType arg);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(ColumnMapVisitorWithResults`2<TResultType, TArgType> visitor, TArgType arg);
    public virtual string ToString();
}
internal class System.Data.Query.InternalTrees.VarRefOp : ScalarOp {
    internal static VarRefOp Pattern;
    internal int Arity { get; }
    internal Var Var { get; }
    internal VarRefOp(Var v);
    private static VarRefOp();
    internal virtual int get_Arity();
    internal virtual bool IsEquivalent(Op other);
    internal Var get_Var();
    [DebuggerNonUserCodeAttribute]
internal virtual void Accept(BasicOpVisitor v, Node n);
    [DebuggerNonUserCodeAttribute]
internal virtual TResultType Accept(BasicOpVisitorOfT`1<TResultType> v, Node n);
}
internal enum System.Data.Query.InternalTrees.VarType : Enum {
    public int value__;
    public static VarType Parameter;
    public static VarType Column;
    public static VarType Computed;
    public static VarType SetOp;
    public static VarType NotValid;
}
internal class System.Data.Query.InternalTrees.VarVec : object {
    internal int Count { get; }
    internal bool IsEmpty { get; }
    internal Var First { get; }
    internal VarVec(Command command);
    internal void Clear();
    internal void And(VarVec other);
    internal void Or(VarVec other);
    internal void Minus(VarVec other);
    internal bool Overlaps(VarVec other);
    internal bool Subsumes(VarVec other);
    internal void InitFrom(VarVec other);
    internal void InitFrom(IEnumerable`1<Var> other);
    internal void InitFrom(IEnumerable`1<Var> other, bool ignoreParameters);
    public sealed virtual IEnumerator`1<Var> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal int get_Count();
    internal bool IsSet(Var v);
    internal void Set(Var v);
    internal void Clear(Var v);
    internal bool get_IsEmpty();
    internal Var get_First();
    internal VarVec Remap(Dictionary`2<Var, Var> varMap);
    public virtual string ToString();
    public VarVec Clone();
}
internal class System.Data.Query.PlanCompiler.AggregatePushdown : object {
    internal static void Process(PlanCompiler planCompilerState);
}
internal static class System.Data.Query.PlanCompiler.AggregatePushdownUtil : object {
    internal static bool IsVarRefOverGivenVar(Node node, Var var);
}
internal class System.Data.Query.PlanCompiler.AllPropertyRef : PropertyRef {
    internal static AllPropertyRef Instance;
    private static AllPropertyRef();
    internal virtual PropertyRef CreateNestedPropertyRef(PropertyRef p);
    public virtual string ToString();
}
internal static class System.Data.Query.PlanCompiler.ApplyOpRules : object {
    internal static PatternMatchRule Rule_CrossApplyOverFilter;
    internal static PatternMatchRule Rule_OuterApplyOverFilter;
    internal static PatternMatchRule Rule_OuterApplyOverProjectInternalConstantOverFilter;
    internal static PatternMatchRule Rule_OuterApplyOverProjectNullSentinelOverFilter;
    internal static PatternMatchRule Rule_CrossApplyOverProject;
    internal static PatternMatchRule Rule_OuterApplyOverProject;
    internal static PatternMatchRule Rule_CrossApplyOverAnything;
    internal static PatternMatchRule Rule_OuterApplyOverAnything;
    internal static PatternMatchRule Rule_CrossApplyIntoScalarSubquery;
    internal static PatternMatchRule Rule_OuterApplyIntoScalarSubquery;
    internal static PatternMatchRule Rule_CrossApplyOverLeftOuterJoinOverSingleRowTable;
    internal static Rule[] Rules;
    private static ApplyOpRules();
}
internal class System.Data.Query.PlanCompiler.AugmentedJoinNode : AugmentedNode {
    internal Node OtherPredicate { get; }
    internal List`1<ColumnVar> LeftVars { get; }
    internal List`1<ColumnVar> RightVars { get; }
    internal AugmentedJoinNode(int id, Node node, AugmentedNode leftChild, AugmentedNode rightChild, List`1<ColumnVar> leftVars, List`1<ColumnVar> rightVars, Node otherPredicate);
    internal AugmentedJoinNode(int id, Node node, List`1<AugmentedNode> children);
    internal Node get_OtherPredicate();
    internal List`1<ColumnVar> get_LeftVars();
    internal List`1<ColumnVar> get_RightVars();
}
internal class System.Data.Query.PlanCompiler.AugmentedNode : object {
    protected AugmentedNode m_parent;
    internal int Id { get; }
    internal Node Node { get; }
    internal AugmentedNode Parent { get; }
    internal List`1<AugmentedNode> Children { get; }
    internal List`1<JoinEdge> JoinEdges { get; }
    internal AugmentedNode(int id, Node node);
    internal AugmentedNode(int id, Node node, List`1<AugmentedNode> children);
    internal int get_Id();
    internal Node get_Node();
    internal AugmentedNode get_Parent();
    internal List`1<AugmentedNode> get_Children();
    internal List`1<JoinEdge> get_JoinEdges();
}
internal class System.Data.Query.PlanCompiler.AugmentedTableNode : AugmentedNode {
    internal Table Table { get; }
    internal int LastVisibleId { get; internal set; }
    internal bool IsEliminated { get; }
    internal AugmentedTableNode ReplacementTable { get; internal set; }
    internal int NewLocationId { get; internal set; }
    internal bool IsMoved { get; }
    internal VarVec NullableColumns { get; internal set; }
    internal AugmentedTableNode(int id, Node node);
    internal Table get_Table();
    internal int get_LastVisibleId();
    internal void set_LastVisibleId(int value);
    internal bool get_IsEliminated();
    internal AugmentedTableNode get_ReplacementTable();
    internal void set_ReplacementTable(AugmentedTableNode value);
    internal int get_NewLocationId();
    internal void set_NewLocationId(int value);
    internal bool get_IsMoved();
    internal VarVec get_NullableColumns();
    internal void set_NullableColumns(VarVec value);
}
internal class System.Data.Query.PlanCompiler.CodeGen : object {
    internal static void Process(PlanCompiler compilerState, List`1& childCommands, ColumnMap& resultColumnMap, Int32& columnCount);
}
internal class System.Data.Query.PlanCompiler.CollectionVarInfo : VarInfo {
    internal Var NewVar { get; }
    internal VarInfoKind Kind { get; }
    internal List`1<Var> NewVars { get; }
    internal CollectionVarInfo(Var newVar);
    internal Var get_NewVar();
    internal virtual VarInfoKind get_Kind();
    internal virtual List`1<Var> get_NewVars();
}
internal class System.Data.Query.PlanCompiler.ColumnMapProcessor : object {
    internal ColumnMapProcessor(VarRefColumnMap columnMap, VarInfo varInfo, StructuredTypeInfo typeInfo);
    internal ColumnMap ExpandColumnMap();
}
internal class System.Data.Query.PlanCompiler.ColumnMapTranslator : ColumnMapVisitorWithResults`2<ColumnMap, ColumnMapTranslatorTranslationDelegate> {
    private static ColumnMapTranslator();
    internal static ColumnMap Translate(ColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal static ColumnMap Translate(ColumnMap columnMapToTranslate, Dictionary`2<Var, ColumnMap> varToColumnMap);
    internal static ColumnMap Translate(ColumnMap columnMapToTranslate, Dictionary`2<Var, Var> varToVarMap);
    internal static ColumnMap Translate(ColumnMap columnMapToTranslate, Dictionary`2<Var, KeyValuePair`2<int, int>> varToCommandColumnMap);
    protected virtual EntityIdentity VisitEntityIdentity(DiscriminatedEntityIdentity entityIdentity, ColumnMapTranslatorTranslationDelegate translationDelegate);
    protected virtual EntityIdentity VisitEntityIdentity(SimpleEntityIdentity entityIdentity, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(ComplexTypeColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(DiscriminatedCollectionColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(EntityColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(SimplePolymorphicColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(MultipleDiscriminatorPolymorphicColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(RecordColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(RefColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(ScalarColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(SimpleCollectionColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
    internal virtual ColumnMap Visit(VarRefColumnMap columnMap, ColumnMapTranslatorTranslationDelegate translationDelegate);
}
internal class System.Data.Query.PlanCompiler.ColumnMapTranslatorTranslationDelegate : MulticastDelegate {
    public ColumnMapTranslatorTranslationDelegate(object object, IntPtr method);
    public virtual ColumnMap Invoke(ColumnMap columnMap);
    public virtual IAsyncResult BeginInvoke(ColumnMap columnMap, AsyncCallback callback, object object);
    public virtual ColumnMap EndInvoke(IAsyncResult result);
}
internal static class System.Data.Query.PlanCompiler.ConstrainedSortOpRules : object {
    internal static SimpleRule Rule_ConstrainedSortOpOverEmptySet;
    internal static Rule[] Rules;
    private static ConstrainedSortOpRules();
}
internal class System.Data.Query.PlanCompiler.ConstraintManager : object {
    internal bool IsParentChildRelationship(EntitySetBase table1, EntitySetBase table2, List`1& constraints);
    internal void LoadRelationships(EntityContainer entityContainer);
}
internal class System.Data.Query.PlanCompiler.CTreeGenerator : BasicOpVisitorOfT`1<DbExpression> {
    internal static DbCommandTree Generate(Command itree, Node toConvert);
    protected virtual DbExpression VisitConstantOp(ConstantBaseOp op, Node n);
    public virtual DbExpression Visit(ConstantOp op, Node n);
    public virtual DbExpression Visit(InternalConstantOp op, Node n);
    public virtual DbExpression Visit(NullOp op, Node n);
    public virtual DbExpression Visit(NullSentinelOp op, Node n);
    public virtual DbExpression Visit(ConstantPredicateOp op, Node n);
    public virtual DbExpression Visit(FunctionOp op, Node n);
    public virtual DbExpression Visit(PropertyOp op, Node n);
    public virtual DbExpression Visit(RelPropertyOp op, Node n);
    public virtual DbExpression Visit(ArithmeticOp op, Node n);
    public virtual DbExpression Visit(CaseOp op, Node n);
    public virtual DbExpression Visit(ComparisonOp op, Node n);
    public virtual DbExpression Visit(ConditionalOp op, Node n);
    public virtual DbExpression Visit(LikeOp op, Node n);
    public virtual DbExpression Visit(AggregateOp op, Node n);
    public virtual DbExpression Visit(NavigateOp op, Node n);
    public virtual DbExpression Visit(NewEntityOp op, Node n);
    public virtual DbExpression Visit(NewInstanceOp op, Node n);
    public virtual DbExpression Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual DbExpression Visit(NewMultisetOp op, Node n);
    public virtual DbExpression Visit(NewRecordOp op, Node n);
    public virtual DbExpression Visit(RefOp op, Node n);
    public virtual DbExpression Visit(VarRefOp op, Node n);
    public virtual DbExpression Visit(TreatOp op, Node n);
    public virtual DbExpression Visit(CastOp op, Node n);
    public virtual DbExpression Visit(SoftCastOp op, Node n);
    public virtual DbExpression Visit(IsOfOp op, Node n);
    public virtual DbExpression Visit(ExistsOp op, Node n);
    public virtual DbExpression Visit(ElementOp op, Node n);
    public virtual DbExpression Visit(GetRefKeyOp op, Node n);
    public virtual DbExpression Visit(GetEntityRefOp op, Node n);
    public virtual DbExpression Visit(CollectOp op, Node n);
    public virtual DbExpression Visit(ScanTableOp op, Node n);
    public virtual DbExpression Visit(ScanViewOp op, Node n);
    public virtual DbExpression Visit(UnnestOp op, Node n);
    public virtual DbExpression Visit(ProjectOp op, Node n);
    public virtual DbExpression Visit(FilterOp op, Node n);
    public virtual DbExpression Visit(SortOp op, Node n);
    public virtual DbExpression Visit(ConstrainedSortOp op, Node n);
    public virtual DbExpression Visit(GroupByOp op, Node n);
    public virtual DbExpression Visit(GroupByIntoOp op, Node n);
    public virtual DbExpression Visit(CrossJoinOp op, Node n);
    public virtual DbExpression Visit(InnerJoinOp op, Node n);
    public virtual DbExpression Visit(LeftOuterJoinOp op, Node n);
    public virtual DbExpression Visit(FullOuterJoinOp op, Node n);
    public virtual DbExpression Visit(CrossApplyOp op, Node n);
    public virtual DbExpression Visit(OuterApplyOp op, Node n);
    public virtual DbExpression Visit(UnionAllOp op, Node n);
    public virtual DbExpression Visit(IntersectOp op, Node n);
    public virtual DbExpression Visit(ExceptOp op, Node n);
    public virtual DbExpression Visit(DerefOp op, Node n);
    public virtual DbExpression Visit(DistinctOp op, Node n);
    public virtual DbExpression Visit(SingleRowOp op, Node n);
    public virtual DbExpression Visit(SingleRowTableOp op, Node n);
    public virtual DbExpression Visit(VarDefOp op, Node n);
    public virtual DbExpression Visit(VarDefListOp op, Node n);
    public virtual DbExpression Visit(PhysicalProjectOp op, Node n);
    public virtual DbExpression Visit(SingleStreamNestOp op, Node n);
    public virtual DbExpression Visit(MultiStreamNestOp op, Node n);
}
internal class System.Data.Query.PlanCompiler.DiscriminatorMapInfo : object {
    internal EntityTypeBase RootEntityType;
    internal bool IncludesSubTypes;
    internal ExplicitDiscriminatorMap DiscriminatorMap;
    internal DiscriminatorMapInfo(EntityTypeBase rootEntityType, bool includesSubTypes, ExplicitDiscriminatorMap discriminatorMap);
    internal void Merge(EntityTypeBase neededRootEntityType, bool includesSubtypes, ExplicitDiscriminatorMap discriminatorMap);
}
internal static class System.Data.Query.PlanCompiler.DistinctOpRules : object {
    internal static SimpleRule Rule_DistinctOpOfKeys;
    internal static Rule[] Rules;
    private static DistinctOpRules();
}
internal class System.Data.Query.PlanCompiler.EntitySetIdPropertyRef : PropertyRef {
    internal static EntitySetIdPropertyRef Instance;
    private static EntitySetIdPropertyRef();
    public virtual string ToString();
}
internal class System.Data.Query.PlanCompiler.ExtentPair : object {
    internal EntitySetBase Left { get; }
    internal EntitySetBase Right { get; }
    internal ExtentPair(EntitySetBase left, EntitySetBase right);
    internal EntitySetBase get_Left();
    internal EntitySetBase get_Right();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.Data.Query.PlanCompiler.FilterOpRules : object {
    internal static PatternMatchRule Rule_FilterOverFilter;
    internal static PatternMatchRule Rule_FilterOverProject;
    internal static PatternMatchRule Rule_FilterOverUnionAll;
    internal static PatternMatchRule Rule_FilterOverIntersect;
    internal static PatternMatchRule Rule_FilterOverExcept;
    internal static PatternMatchRule Rule_FilterOverDistinct;
    internal static PatternMatchRule Rule_FilterOverGroupBy;
    internal static PatternMatchRule Rule_FilterOverCrossJoin;
    internal static PatternMatchRule Rule_FilterOverInnerJoin;
    internal static PatternMatchRule Rule_FilterOverLeftOuterJoin;
    internal static PatternMatchRule Rule_FilterOverOuterApply;
    internal static PatternMatchRule Rule_FilterWithConstantPredicate;
    internal static Rule[] Rules;
    private static FilterOpRules();
}
internal class System.Data.Query.PlanCompiler.ForeignKeyConstraint : object {
    internal List`1<string> ParentKeys { get; }
    internal List`1<string> ChildKeys { get; }
    internal ExtentPair Pair { get; }
    internal RelationshipMultiplicity ChildMultiplicity { get; }
    internal ForeignKeyConstraint(RelationshipType relType, RelationshipSet relationshipSet, ReferentialConstraint constraint);
    internal List`1<string> get_ParentKeys();
    internal List`1<string> get_ChildKeys();
    internal ExtentPair get_Pair();
    internal RelationshipMultiplicity get_ChildMultiplicity();
    internal bool GetParentProperty(string childPropertyName, String& parentPropertyName);
}
internal class System.Data.Query.PlanCompiler.GroupAggregateRefComputingVisitor : BasicOpVisitor {
    internal static IEnumerable`1<GroupAggregateVarInfo> Process(Command itree, TryGetValue& tryGetParent);
    public virtual void Visit(VarDefOp op, Node n);
    public virtual void Visit(GroupByIntoOp op, Node n);
    public virtual void Visit(UnnestOp op, Node n);
    public virtual void Visit(FunctionOp op, Node n);
    protected virtual void VisitDefault(Node n);
}
internal class System.Data.Query.PlanCompiler.GroupAggregateVarComputationTranslator : BasicOpVisitorOfNode {
    public static bool TryTranslateOverGroupAggregateVar(Node subtree, bool isVarDefinition, Command command, GroupAggregateVarInfoManager groupAggregateVarInfoManager, GroupAggregateVarInfo& groupAggregateVarInfo, Node& templateNode, Boolean& isUnnested);
    public virtual Node Visit(VarRefOp op, Node n);
    public virtual Node Visit(PropertyOp op, Node n);
    protected virtual Node VisitDefault(Node n);
    protected virtual Node VisitRelOpDefault(RelOp op, Node n);
    public virtual Node Visit(AggregateOp op, Node n);
    public virtual Node Visit(CollectOp op, Node n);
    public virtual Node Visit(ElementOp op, Node n);
    public virtual Node Visit(NewRecordOp op, Node n);
}
internal class System.Data.Query.PlanCompiler.GroupAggregateVarInfo : object {
    internal HashSet`1<KeyValuePair`2<Node, Node>> CandidateAggregateNodes { get; }
    internal bool HasCandidateAggregateNodes { get; }
    internal Node DefiningGroupNode { get; }
    internal Var GroupAggregateVar { get; }
    internal GroupAggregateVarInfo(Node defingingGroupNode, Var groupAggregateVar);
    internal HashSet`1<KeyValuePair`2<Node, Node>> get_CandidateAggregateNodes();
    internal bool get_HasCandidateAggregateNodes();
    internal Node get_DefiningGroupNode();
    internal Var get_GroupAggregateVar();
}
internal class System.Data.Query.PlanCompiler.GroupAggregateVarInfoManager : object {
    internal IEnumerable`1<GroupAggregateVarInfo> GroupAggregateVarInfos { get; }
    internal IEnumerable`1<GroupAggregateVarInfo> get_GroupAggregateVarInfos();
    internal void Add(Var var, GroupAggregateVarInfo groupAggregateVarInfo, Node computationTemplate, bool isUnnested);
    internal void Add(Var var, GroupAggregateVarInfo groupAggregateVarInfo, Node computationTemplate, bool isUnnested, EdmMember property);
    internal bool TryGetReferencedGroupAggregateVarInfo(Var var, GroupAggregateVarRefInfo& groupAggregateVarRefInfo);
    internal bool TryGetReferencedGroupAggregateVarInfo(Var var, EdmMember property, GroupAggregateVarRefInfo& groupAggregateVarRefInfo);
}
internal class System.Data.Query.PlanCompiler.GroupAggregateVarRefInfo : object {
    internal Node Computation { get; }
    internal GroupAggregateVarInfo GroupAggregateVarInfo { get; }
    internal bool IsUnnested { get; }
    internal GroupAggregateVarRefInfo(GroupAggregateVarInfo groupAggregateVarInfo, Node computation, bool isUnnested);
    internal Node get_Computation();
    internal GroupAggregateVarInfo get_GroupAggregateVarInfo();
    internal bool get_IsUnnested();
}
internal static class System.Data.Query.PlanCompiler.GroupByOpRules : object {
    internal static SimpleRule Rule_GroupByOpWithSimpleVarRedefinitions;
    internal static PatternMatchRule Rule_GroupByOverProject;
    internal static PatternMatchRule Rule_GroupByOpWithNoAggregates;
    internal static Rule[] Rules;
    private static GroupByOpRules();
}
internal class System.Data.Query.PlanCompiler.ITreeGenerator : DbExpressionVisitor`1<Node> {
    internal Dictionary`2<Node, Var> VarMap { get; }
    private static ITreeGenerator();
    internal Dictionary`2<Node, Var> get_VarMap();
    public static Command Generate(DbQueryCommandTree ctree);
    internal static Command Generate(DbQueryCommandTree ctree, DiscriminatorMap discriminatorMap);
    public virtual Node Visit(DbExpression e);
    public virtual Node Visit(DbConstantExpression e);
    public virtual Node Visit(DbNullExpression e);
    public virtual Node Visit(DbVariableReferenceExpression e);
    public virtual Node Visit(DbParameterReferenceExpression e);
    public virtual Node Visit(DbFunctionExpression e);
    public virtual Node Visit(DbLambdaExpression e);
    public virtual Node Visit(DbPropertyExpression e);
    public virtual Node Visit(DbComparisonExpression e);
    public virtual Node Visit(DbLikeExpression e);
    public virtual Node Visit(DbLimitExpression expression);
    public virtual Node Visit(DbIsNullExpression e);
    public virtual Node Visit(DbArithmeticExpression e);
    public virtual Node Visit(DbAndExpression e);
    public virtual Node Visit(DbOrExpression e);
    public virtual Node Visit(DbNotExpression e);
    public virtual Node Visit(DbDistinctExpression e);
    public virtual Node Visit(DbElementExpression e);
    public virtual Node Visit(DbIsEmptyExpression e);
    public virtual Node Visit(DbUnionAllExpression e);
    public virtual Node Visit(DbIntersectExpression e);
    public virtual Node Visit(DbExceptExpression e);
    public virtual Node Visit(DbTreatExpression e);
    public virtual Node Visit(DbIsOfExpression e);
    public virtual Node Visit(DbCastExpression e);
    public virtual Node Visit(DbCaseExpression e);
    public virtual Node Visit(DbOfTypeExpression e);
    public virtual Node Visit(DbNewInstanceExpression e);
    public virtual Node Visit(DbRefExpression e);
    public virtual Node Visit(DbRelationshipNavigationExpression e);
    public virtual Node Visit(DbDerefExpression e);
    public virtual Node Visit(DbRefKeyExpression e);
    public virtual Node Visit(DbEntityRefExpression e);
    public virtual Node Visit(DbScanExpression e);
    public virtual Node Visit(DbFilterExpression e);
    public virtual Node Visit(DbProjectExpression e);
    public virtual Node Visit(DbCrossJoinExpression e);
    public virtual Node Visit(DbJoinExpression e);
    public virtual Node Visit(DbApplyExpression e);
    public virtual Node Visit(DbGroupByExpression e);
    public virtual Node Visit(DbSkipExpression expression);
    public virtual Node Visit(DbSortExpression e);
    public virtual Node Visit(DbQuantifierExpression e);
}
internal class System.Data.Query.PlanCompiler.JoinEdge : object {
    internal AugmentedTableNode Left { get; }
    internal AugmentedTableNode Right { get; }
    internal AugmentedJoinNode JoinNode { get; }
    internal JoinKind JoinKind { get; internal set; }
    internal List`1<ColumnVar> LeftVars { get; }
    internal List`1<ColumnVar> RightVars { get; }
    internal bool IsEliminated { get; }
    internal AugmentedTableNode get_Left();
    internal AugmentedTableNode get_Right();
    internal AugmentedJoinNode get_JoinNode();
    internal JoinKind get_JoinKind();
    internal void set_JoinKind(JoinKind value);
    internal List`1<ColumnVar> get_LeftVars();
    internal List`1<ColumnVar> get_RightVars();
    internal bool get_IsEliminated();
    internal static JoinEdge CreateJoinEdge(AugmentedTableNode left, AugmentedTableNode right, AugmentedJoinNode joinNode, ColumnVar leftVar, ColumnVar rightVar);
    internal static JoinEdge CreateTransitiveJoinEdge(AugmentedTableNode left, AugmentedTableNode right, JoinKind joinKind, List`1<ColumnVar> leftVars, List`1<ColumnVar> rightVars);
    internal bool AddCondition(AugmentedJoinNode joinNode, ColumnVar leftVar, ColumnVar rightVar);
}
internal class System.Data.Query.PlanCompiler.JoinElimination : BasicOpVisitorOfNode {
    internal static bool Process(PlanCompiler compilerState);
    protected virtual Node VisitDefault(Node n);
    protected virtual Node VisitJoinOp(JoinBaseOp op, Node joinNode);
}
internal class System.Data.Query.PlanCompiler.JoinGraph : object {
    internal JoinGraph(Command command, ConstraintManager constraintManager, VarRefManager varRefManager, Node joinNode);
    internal Node DoJoinElimination(VarMap& varMap, Dictionary`2& processedNodes);
}
internal enum System.Data.Query.PlanCompiler.JoinKind : Enum {
    public int value__;
    public static JoinKind Inner;
    public static JoinKind LeftOuter;
}
internal static class System.Data.Query.PlanCompiler.JoinOpRules : object {
    internal static PatternMatchRule Rule_CrossJoinOverProject1;
    internal static PatternMatchRule Rule_CrossJoinOverProject2;
    internal static PatternMatchRule Rule_InnerJoinOverProject1;
    internal static PatternMatchRule Rule_InnerJoinOverProject2;
    internal static PatternMatchRule Rule_OuterJoinOverProject2;
    internal static PatternMatchRule Rule_CrossJoinOverFilter1;
    internal static PatternMatchRule Rule_CrossJoinOverFilter2;
    internal static PatternMatchRule Rule_InnerJoinOverFilter1;
    internal static PatternMatchRule Rule_InnerJoinOverFilter2;
    internal static PatternMatchRule Rule_OuterJoinOverFilter2;
    internal static PatternMatchRule Rule_CrossJoinOverSingleRowTable1;
    internal static PatternMatchRule Rule_CrossJoinOverSingleRowTable2;
    internal static PatternMatchRule Rule_LeftOuterJoinOverSingleRowTable;
    internal static Rule[] Rules;
    private static JoinOpRules();
}
internal class System.Data.Query.PlanCompiler.KeyPullup : BasicOpVisitor {
    internal KeyPullup(Command command);
    internal KeyVec GetKeys(Node node);
    protected virtual void VisitChildren(Node n);
    protected virtual void VisitRelOpDefault(RelOp op, Node n);
    public virtual void Visit(ScanTableOp op, Node n);
    public virtual void Visit(ProjectOp op, Node n);
    public virtual void Visit(UnionAllOp op, Node n);
}
internal class System.Data.Query.PlanCompiler.NestedPropertyRef : PropertyRef {
    internal PropertyRef OuterProperty { get; }
    internal PropertyRef InnerProperty { get; }
    internal NestedPropertyRef(PropertyRef innerProperty, PropertyRef outerProperty);
    internal PropertyRef get_OuterProperty();
    internal PropertyRef get_InnerProperty();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Query.PlanCompiler.NestPullup : BasicOpVisitorOfNode {
    internal static void Process(PlanCompiler compilerState);
    public virtual Node Visit(VarDefOp op, Node n);
    public virtual Node Visit(VarRefOp op, Node n);
    public virtual Node Visit(CaseOp op, Node n);
    public virtual Node Visit(ExistsOp op, Node n);
    protected virtual Node VisitRelOpDefault(RelOp op, Node n);
    protected virtual Node VisitApplyOp(ApplyBaseOp op, Node n);
    public virtual Node Visit(DistinctOp op, Node n);
    public virtual Node Visit(FilterOp op, Node n);
    public virtual Node Visit(GroupByOp op, Node n);
    public virtual Node Visit(GroupByIntoOp op, Node n);
    protected virtual Node VisitJoinOp(JoinBaseOp op, Node n);
    public virtual Node Visit(ProjectOp op, Node n);
    protected virtual Node VisitSetOp(SetOp op, Node n);
    public virtual Node Visit(SingleRowOp op, Node n);
    public virtual Node Visit(SortOp op, Node n);
    public virtual Node Visit(ConstrainedSortOp op, Node n);
    public virtual Node Visit(UnnestOp op, Node n);
    protected virtual Node VisitNestOp(NestBaseOp op, Node n);
    public virtual Node Visit(PhysicalProjectOp op, Node n);
}
internal class System.Data.Query.PlanCompiler.NominalTypeEliminator : BasicOpVisitorOfNode {
    internal static void Process(PlanCompiler compilerState, StructuredTypeInfo structuredTypeInfo, Dictionary`2<EdmFunction, EdmProperty[]> tvfResultKeys);
    public virtual Node Visit(VarDefListOp op, Node n);
    public virtual Node Visit(PhysicalProjectOp op, Node n);
    public virtual Node Visit(DistinctOp op, Node n);
    public virtual Node Visit(GroupByOp op, Node n);
    public virtual Node Visit(GroupByIntoOp op, Node n);
    public virtual Node Visit(ProjectOp op, Node n);
    public virtual Node Visit(ScanTableOp op, Node n);
    internal static Var GetSingletonVar(Node n);
    public virtual Node Visit(ScanViewOp op, Node n);
    public virtual Node Visit(SortOp op, Node n);
    public virtual Node Visit(UnnestOp op, Node n);
    protected virtual Node VisitSetOp(SetOp op, Node n);
    public virtual Node Visit(SoftCastOp op, Node n);
    public virtual Node Visit(CastOp op, Node n);
    public virtual Node Visit(ConstantOp op, Node n);
    public virtual Node Visit(CaseOp op, Node n);
    public virtual Node Visit(CollectOp op, Node n);
    public virtual Node Visit(ComparisonOp op, Node n);
    public virtual Node Visit(ConditionalOp op, Node n);
    public virtual Node Visit(ConstrainedSortOp op, Node n);
    public virtual Node Visit(GetEntityRefOp op, Node n);
    public virtual Node Visit(GetRefKeyOp op, Node n);
    public virtual Node Visit(PropertyOp op, Node n);
    public virtual Node Visit(RelPropertyOp op, Node n);
    public virtual Node Visit(RefOp op, Node n);
    public virtual Node Visit(VarRefOp op, Node n);
    public virtual Node Visit(NewEntityOp op, Node n);
    public virtual Node Visit(NewInstanceOp op, Node n);
    public virtual Node Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual Node Visit(NewRecordOp op, Node n);
    public virtual Node Visit(NullOp op, Node n);
    public virtual Node Visit(IsOfOp op, Node n);
    public virtual Node Visit(TreatOp op, Node n);
}
internal class System.Data.Query.PlanCompiler.Normalizer : SubqueryTrackingVisitor {
    internal static void Process(PlanCompiler planCompilerState);
    public virtual Node Visit(ExistsOp op, Node n);
    public virtual Node Visit(FunctionOp op, Node n);
    protected virtual Node VisitJoinOp(JoinBaseOp op, Node n);
}
internal class System.Data.Query.PlanCompiler.NullSentinelPropertyRef : PropertyRef {
    internal static NullSentinelPropertyRef Instance { get; }
    private static NullSentinelPropertyRef();
    internal static NullSentinelPropertyRef get_Instance();
    public virtual string ToString();
}
internal class System.Data.Query.PlanCompiler.OpCopierTrackingCollectionVars : OpCopier {
    internal static Node Copy(Command cmd, Node n, VarMap& varMap, Dictionary`2& newCollectionVarDefinitions);
    public virtual Node Visit(MultiStreamNestOp op, Node n);
}
internal class System.Data.Query.PlanCompiler.PlanCompiler : object {
    internal Command Command { get; }
    internal bool HasSortingOnNullSentinels { get; internal set; }
    internal ConstraintManager ConstraintManager { get; }
    internal MetadataWorkspace MetadataWorkspace { get; }
    private static PlanCompiler();
    internal static void Assert(bool condition, string message);
    internal static void Compile(DbCommandTree ctree, List`1& providerCommands, ColumnMap& resultColumnMap, Int32& columnCount, Set`1& entitySets);
    internal Command get_Command();
    internal bool get_HasSortingOnNullSentinels();
    internal void set_HasSortingOnNullSentinels(bool value);
    internal ConstraintManager get_ConstraintManager();
    internal MetadataWorkspace get_MetadataWorkspace();
    internal bool IsPhaseNeeded(PlanCompilerPhase phase);
    internal void MarkPhaseAsNeeded(PlanCompilerPhase phase);
}
internal enum System.Data.Query.PlanCompiler.PlanCompilerPhase : Enum {
    public int value__;
    public static PlanCompilerPhase PreProcessor;
    public static PlanCompilerPhase AggregatePushdown;
    public static PlanCompilerPhase Normalization;
    public static PlanCompilerPhase NTE;
    public static PlanCompilerPhase ProjectionPruning;
    public static PlanCompilerPhase NestPullup;
    public static PlanCompilerPhase Transformations;
    public static PlanCompilerPhase JoinElimination;
    public static PlanCompilerPhase CodeGen;
    public static PlanCompilerPhase PostCodeGen;
    public static PlanCompilerPhase MaxMarker;
}
internal static class System.Data.Query.PlanCompiler.PlanCompilerUtil : object {
    internal static bool IsRowTypeCaseOpWithNullability(CaseOp op, Node n, Boolean& thenClauseIsNull);
    internal static bool IsCollectionAggregateFunction(FunctionOp op, Node n);
    internal static bool IsConstantBaseOp(OpType opType);
    internal static Node CombinePredicates(Node predicate1, Node predicate2, Command command);
}
internal class System.Data.Query.PlanCompiler.Predicate : object {
    internal Predicate(Command command);
    internal Predicate(Command command, Node andTree);
    internal void AddPart(Node n);
    internal Node BuildAndTree();
    internal Predicate GetSingleTablePredicates(VarVec tableDefinitions, Predicate& otherPredicates);
    internal void GetEquiJoinPredicates(VarVec leftTableDefinitions, VarVec rightTableDefinitions, List`1& leftTableEquiJoinColumns, List`1& rightTableEquiJoinColumns, Predicate& otherPredicates);
    internal Predicate GetJoinPredicates(VarVec leftTableDefinitions, VarVec rightTableDefinitions, Predicate& otherPredicates);
    internal bool SatisfiesKey(VarVec keyVars, VarVec definitions);
    internal bool PreservesNulls(VarVec tableColumns, bool ansiNullSemantics);
}
internal class System.Data.Query.PlanCompiler.PreProcessor : SubqueryTrackingVisitor {
    internal static void Process(PlanCompiler planCompilerState, StructuredTypeInfo& typeInfo, Dictionary`2& tvfResultKeys);
    internal void Process(Dictionary`2& tvfResultKeys);
    protected virtual Node VisitScalarOpDefault(ScalarOp op, Node n);
    public virtual Node Visit(DerefOp op, Node n);
    public virtual Node Visit(ElementOp op, Node n);
    public virtual Node Visit(ExistsOp op, Node n);
    public virtual Node Visit(FunctionOp op, Node n);
    public virtual Node Visit(CaseOp op, Node n);
    public virtual Node Visit(ConditionalOp op, Node n);
    public virtual Node Visit(PropertyOp op, Node n);
    public virtual Node Visit(RefOp op, Node n);
    public virtual Node Visit(TreatOp op, Node n);
    public virtual Node Visit(IsOfOp op, Node n);
    public virtual Node Visit(NavigateOp op, Node n);
    public virtual Node Visit(NewEntityOp op, Node n);
    public virtual Node Visit(DiscriminatedNewEntityOp op, Node n);
    public virtual Node Visit(NewMultisetOp op, Node n);
    public virtual Node Visit(CollectOp op, Node n);
    public virtual Node Visit(ScanTableOp op, Node n);
    public virtual Node Visit(ScanViewOp op, Node n);
    protected virtual Node VisitJoinOp(JoinBaseOp op, Node n);
    protected virtual Node VisitApplyOp(ApplyBaseOp op, Node n);
    public virtual Node Visit(SortOp op, Node n);
    public virtual Node Visit(FilterOp op, Node n);
    public virtual Node Visit(ProjectOp op, Node n);
    public virtual Node Visit(GroupByIntoOp op, Node n);
}
internal class System.Data.Query.PlanCompiler.PrimitiveTypeVarInfo : VarInfo {
    internal Var NewVar { get; }
    internal VarInfoKind Kind { get; }
    internal List`1<Var> NewVars { get; }
    internal PrimitiveTypeVarInfo(Var newVar);
    internal Var get_NewVar();
    internal virtual VarInfoKind get_Kind();
    internal virtual List`1<Var> get_NewVars();
}
internal class System.Data.Query.PlanCompiler.ProjectionPruner : BasicOpVisitorOfNode {
    internal static void Process(PlanCompiler compilerState);
    internal static Node Process(PlanCompiler compilerState, Node node);
    protected virtual void VisitChildren(Node n);
    protected virtual void VisitChildrenReverse(Node n);
    public virtual Node Visit(VarDefListOp op, Node n);
    public virtual Node Visit(PhysicalProjectOp op, Node n);
    protected virtual Node VisitNestOp(NestBaseOp op, Node n);
    public virtual Node Visit(SingleStreamNestOp op, Node n);
    public virtual Node Visit(MultiStreamNestOp op, Node n);
    protected virtual Node VisitApplyOp(ApplyBaseOp op, Node n);
    public virtual Node Visit(DistinctOp op, Node n);
    public virtual Node Visit(ElementOp op, Node n);
    public virtual Node Visit(FilterOp op, Node n);
    protected virtual Node VisitGroupByOp(GroupByBaseOp op, Node n);
    public virtual Node Visit(GroupByIntoOp op, Node n);
    protected virtual Node VisitJoinOp(JoinBaseOp op, Node n);
    public virtual Node Visit(ProjectOp op, Node n);
    public virtual Node Visit(ScanTableOp op, Node n);
    protected virtual Node VisitSetOp(SetOp op, Node n);
    protected virtual Node VisitSortOp(SortBaseOp op, Node n);
    public virtual Node Visit(UnnestOp op, Node n);
    public virtual Node Visit(VarRefOp op, Node n);
    public virtual Node Visit(ExistsOp op, Node n);
}
internal static class System.Data.Query.PlanCompiler.ProjectOpRules : object {
    internal static PatternMatchRule Rule_ProjectOverProject;
    internal static PatternMatchRule Rule_ProjectWithNoLocalDefs;
    internal static SimpleRule Rule_ProjectOpWithSimpleVarRedefinitions;
    internal static SimpleRule Rule_ProjectOpWithNullSentinel;
    internal static Rule[] Rules;
    private static ProjectOpRules();
}
internal class System.Data.Query.PlanCompiler.PropertyPushdownHelper : BasicOpVisitor {
    internal static void Process(Command itree, StructuredTypeInfo structuredTypeInfo, Dictionary`2& varPropertyRefs, Dictionary`2& nodePropertyRefs);
    protected virtual void VisitDefault(Node n);
    public virtual void Visit(SoftCastOp op, Node n);
    public virtual void Visit(CaseOp op, Node n);
    public virtual void Visit(CollectOp op, Node n);
    public virtual void Visit(ComparisonOp op, Node n);
    public virtual void Visit(ElementOp op, Node n);
    public virtual void Visit(GetEntityRefOp op, Node n);
    public virtual void Visit(IsOfOp op, Node n);
    public virtual void Visit(RelPropertyOp op, Node n);
    public virtual void Visit(PropertyOp op, Node n);
    public virtual void Visit(TreatOp op, Node n);
    public virtual void Visit(VarRefOp op, Node n);
    public virtual void Visit(VarDefOp op, Node n);
    public virtual void Visit(VarDefListOp op, Node n);
    protected virtual void VisitApplyOp(ApplyBaseOp op, Node n);
    public virtual void Visit(DistinctOp op, Node n);
    public virtual void Visit(FilterOp op, Node n);
    protected virtual void VisitGroupByOp(GroupByBaseOp op, Node n);
    protected virtual void VisitJoinOp(JoinBaseOp op, Node n);
    public virtual void Visit(ProjectOp op, Node n);
    public virtual void Visit(ScanTableOp op, Node n);
    public virtual void Visit(ScanViewOp op, Node n);
    protected virtual void VisitSetOp(SetOp op, Node n);
    protected virtual void VisitSortOp(SortBaseOp op, Node n);
    public virtual void Visit(UnnestOp op, Node n);
    public virtual void Visit(PhysicalProjectOp op, Node n);
    public virtual void Visit(MultiStreamNestOp op, Node n);
    public virtual void Visit(SingleStreamNestOp op, Node n);
}
internal abstract class System.Data.Query.PlanCompiler.PropertyRef : object {
    internal virtual PropertyRef CreateNestedPropertyRef(PropertyRef p);
    internal PropertyRef CreateNestedPropertyRef(EdmMember p);
    internal PropertyRef CreateNestedPropertyRef(RelProperty p);
    public virtual string ToString();
}
internal class System.Data.Query.PlanCompiler.PropertyRefList : object {
    internal static PropertyRefList All;
    internal bool AllProperties { get; }
    internal IEnumerable`1<PropertyRef> Properties { get; }
    private static PropertyRefList();
    internal void Add(PropertyRef property);
    internal void Append(PropertyRefList propertyRefs);
    internal bool get_AllProperties();
    internal PropertyRefList Clone();
    internal bool Contains(PropertyRef p);
    internal IEnumerable`1<PropertyRef> get_Properties();
    public virtual string ToString();
}
internal class System.Data.Query.PlanCompiler.ProviderCommandInfo : object {
    internal DbCommandTree CommandTree { get; }
    internal ProviderCommandInfo(DbCommandTree commandTree, List`1<ProviderCommandInfo> children);
    internal DbCommandTree get_CommandTree();
}
internal static class System.Data.Query.PlanCompiler.ProviderCommandInfoUtils : object {
    internal static ProviderCommandInfo Create(Command command, Node node, List`1<ProviderCommandInfo> children);
    internal static ProviderCommandInfo Create(Command command, Node node);
}
internal class System.Data.Query.PlanCompiler.RelPropertyRef : PropertyRef {
    internal RelProperty Property { get; }
    internal RelPropertyRef(RelProperty property);
    internal RelProperty get_Property();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Data.Query.PlanCompiler.RootTypeInfo : TypeInfo {
    internal TypeIdKind TypeIdKind { get; internal set; }
    internal TypeUsage TypeIdType { get; internal set; }
    internal RowType FlattenedType { get; internal set; }
    internal TypeUsage FlattenedTypeUsage { get; }
    internal ExplicitDiscriminatorMap DiscriminatorMap { get; }
    internal EdmProperty EntitySetIdProperty { get; }
    internal EdmProperty NullSentinelProperty { get; }
    internal IEnumerable`1<PropertyRef> PropertyRefList { get; }
    internal EdmProperty TypeIdProperty { get; }
    internal RootTypeInfo(TypeUsage type, ExplicitDiscriminatorMap discriminatorMap);
    internal TypeIdKind get_TypeIdKind();
    internal void set_TypeIdKind(TypeIdKind value);
    internal TypeUsage get_TypeIdType();
    internal void set_TypeIdType(TypeUsage value);
    internal void AddPropertyMapping(PropertyRef propertyRef, EdmProperty newProperty);
    internal void AddPropertyRef(PropertyRef propertyRef);
    internal RowType get_FlattenedType();
    internal void set_FlattenedType(RowType value);
    internal TypeUsage get_FlattenedTypeUsage();
    internal ExplicitDiscriminatorMap get_DiscriminatorMap();
    internal EdmProperty get_EntitySetIdProperty();
    internal EdmProperty get_NullSentinelProperty();
    internal IEnumerable`1<PropertyRef> get_PropertyRefList();
    internal int GetNestedStructureOffset(PropertyRef property);
    internal bool TryGetNewProperty(PropertyRef propertyRef, bool throwIfMissing, EdmProperty& property);
    internal EdmProperty get_TypeIdProperty();
}
internal static class System.Data.Query.PlanCompiler.ScalarOpRules : object {
    internal static SimpleRule Rule_SimplifyCase;
    internal static SimpleRule Rule_FlattenCase;
    internal static PatternMatchRule Rule_EqualsOverConstant;
    internal static PatternMatchRule Rule_LikeOverConstants;
    internal static PatternMatchRule Rule_AndOverConstantPred1;
    internal static PatternMatchRule Rule_AndOverConstantPred2;
    internal static PatternMatchRule Rule_OrOverConstantPred1;
    internal static PatternMatchRule Rule_OrOverConstantPred2;
    internal static PatternMatchRule Rule_NotOverConstantPred;
    internal static PatternMatchRule Rule_IsNullOverConstant;
    internal static PatternMatchRule Rule_IsNullOverNullSentinel;
    internal static PatternMatchRule Rule_IsNullOverNull;
    internal static PatternMatchRule Rule_NullCast;
    internal static PatternMatchRule Rule_IsNullOverVarRef;
    internal static Rule[] Rules;
    private static ScalarOpRules();
}
internal static class System.Data.Query.PlanCompiler.SetOpRules : object {
    internal static SimpleRule Rule_UnionAllOverEmptySet;
    internal static SimpleRule Rule_IntersectOverEmptySet;
    internal static SimpleRule Rule_ExceptOverEmptySet;
    internal static Rule[] Rules;
    private static SetOpRules();
}
internal class System.Data.Query.PlanCompiler.SimplePropertyRef : PropertyRef {
    internal EdmMember Property { get; }
    internal SimplePropertyRef(EdmMember property);
    internal EdmMember get_Property();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal static class System.Data.Query.PlanCompiler.SingleRowOpRules : object {
    internal static PatternMatchRule Rule_SingleRowOpOverAnything;
    internal static PatternMatchRule Rule_SingleRowOpOverProject;
    internal static Rule[] Rules;
    private static SingleRowOpRules();
}
internal static class System.Data.Query.PlanCompiler.SortOpRules : object {
    internal static SimpleRule Rule_SortOpOverAtMostOneRow;
    internal static Rule[] Rules;
    private static SortOpRules();
}
internal class System.Data.Query.PlanCompiler.SortRemover : BasicOpVisitorOfNode {
    internal static void Process(Command command);
    protected virtual void VisitChildren(Node n);
    public virtual Node Visit(SortOp op, Node n);
}
internal class System.Data.Query.PlanCompiler.StructuredTypeInfo : object {
    internal EntitySet[] EntitySetIdToEntitySetMap { get; }
    internal RelPropertyHelper RelPropertyHelper { get; }
    internal static void Process(Command itree, HashSet`1<TypeUsage> referencedTypes, HashSet`1<EntitySet> referencedEntitySets, HashSet`1<EntityType> freeFloatingEntityConstructorTypes, Dictionary`2<EntitySetBase, DiscriminatorMapInfo> discriminatorMaps, RelPropertyHelper relPropertyHelper, HashSet`1<string> typesNeedingNullSentinel, StructuredTypeInfo& structuredTypeInfo);
    internal EntitySet[] get_EntitySetIdToEntitySetMap();
    internal RelPropertyHelper get_RelPropertyHelper();
    internal EntitySet GetEntitySet(EntityTypeBase type);
    internal int GetEntitySetId(EntitySet e);
    internal Set`1<EntitySet> GetEntitySets();
    internal TypeInfo GetTypeInfo(TypeUsage type);
}
internal class System.Data.Query.PlanCompiler.StructuredTypeNullabilityAnalyzer : ColumnMapVisitor`1<HashSet`1<string>> {
    internal static StructuredTypeNullabilityAnalyzer Instance;
    private static StructuredTypeNullabilityAnalyzer();
    internal virtual void Visit(VarRefColumnMap columnMap, HashSet`1<string> typesNeedingNullSentinel);
    internal static void MarkAsNeedingNullSentinel(HashSet`1<string> typesNeedingNullSentinel, TypeUsage typeUsage);
}
internal class System.Data.Query.PlanCompiler.StructuredVarInfo : VarInfo {
    internal VarInfoKind Kind { get; }
    internal List`1<Var> NewVars { get; }
    internal List`1<EdmProperty> Fields { get; }
    internal bool NewVarsIncludeNullSentinelVar { get; }
    internal RowType NewType { get; }
    internal TypeUsage NewTypeUsage { get; }
    internal StructuredVarInfo(RowType newType, List`1<Var> newVars, List`1<EdmProperty> newTypeProperties, bool newVarsIncludeNullSentinelVar);
    internal virtual VarInfoKind get_Kind();
    internal virtual List`1<Var> get_NewVars();
    internal List`1<EdmProperty> get_Fields();
    internal bool get_NewVarsIncludeNullSentinelVar();
    internal bool TryGetVar(EdmProperty p, Var& v);
    internal RowType get_NewType();
    internal TypeUsage get_NewTypeUsage();
}
internal abstract class System.Data.Query.PlanCompiler.SubqueryTrackingVisitor : BasicOpVisitorOfNode {
    protected PlanCompiler m_compilerState;
    protected Stack`1<Node> m_ancestors;
    protected Command m_command { get; }
    protected SubqueryTrackingVisitor(PlanCompiler planCompilerState);
    protected Command get_m_command();
    protected void AddSubqueryToRelOpNode(Node relOpNode, Node subquery);
    protected Node AddSubqueryToParentRelOp(Var outputVar, Node subquery);
    protected Node FindRelOpAncestor();
    protected virtual void VisitChildren(Node n);
    protected virtual Node VisitRelOpDefault(RelOp op, Node n);
    protected bool ProcessJoinOp(JoinBaseOp op, Node n);
    public virtual Node Visit(UnnestOp op, Node n);
}
internal static class System.Data.Query.PlanCompiler.TransformationRules : object {
    internal static ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> AllRulesTable;
    internal static ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> ProjectRulesTable;
    internal static ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> PostJoinEliminationRulesTable;
    internal static ReadOnlyCollection`1<ReadOnlyCollection`1<Rule>> NullabilityRulesTable;
    internal static HashSet`1<Rule> RulesRequiringProjectionPruning;
    internal static HashSet`1<Rule> RulesRequiringNullabilityRulesToBeReapplied;
    private static TransformationRules();
    internal static bool Process(PlanCompiler compilerState, TransformationRulesGroup rulesGroup);
}
internal class System.Data.Query.PlanCompiler.TransformationRulesContext : RuleProcessingContext {
    internal bool ProjectionPrunningRequired { get; }
    internal bool ReapplyNullabilityRules { get; }
    internal bool CanChangeNullSentinelValue { get; }
    internal TransformationRulesContext(PlanCompiler compilerState);
    internal bool get_ProjectionPrunningRequired();
    internal bool get_ReapplyNullabilityRules();
    internal void RemapSubtree(Node subTree);
    internal void AddVarMapping(Var oldVar, Var newVar);
    internal Node ReMap(Node node, Dictionary`2<Var, Node> varMap);
    internal Node Copy(Node node);
    internal bool IsScalarOpTree(Node node);
    internal bool IsNonNullable(Var var);
    internal bool get_CanChangeNullSentinelValue();
    internal static bool IsOpNotSafeForNullSentinelValueChange(OpType optype);
    internal static bool HasOpNotSafeForNullSentinelValueChange(Node n);
    internal bool IsScalarOpTree(Node node, Dictionary`2<Var, int> varRefMap);
    internal Dictionary`2<Var, Node> GetVarMap(Node varDefListNode, Dictionary`2<Var, int> varRefMap);
    internal Node BuildNullIfExpression(Var conditionVar, Node expr);
    internal void SuppressFilterPushdown(Node n);
    internal bool IsFilterPushdownSuppressed(Node n);
    internal static bool TryGetInt32Var(IEnumerable`1<Var> varList, Var& int32Var);
    internal virtual void PreProcess(Node n);
    internal virtual void PreProcessSubTree(Node subTree);
    internal virtual void PostProcessSubTree(Node subtree);
    internal virtual void PostProcess(Node n, Rule rule);
    internal virtual int GetHashCode(Node node);
}
internal enum System.Data.Query.PlanCompiler.TransformationRulesGroup : Enum {
    public int value__;
    public static TransformationRulesGroup All;
    public static TransformationRulesGroup Project;
    public static TransformationRulesGroup PostJoinElimination;
}
internal class System.Data.Query.PlanCompiler.TryGetValue : MulticastDelegate {
    public TryGetValue(object object, IntPtr method);
    public virtual bool Invoke(Node key, Node& value);
    public virtual IAsyncResult BeginInvoke(Node key, Node& value, AsyncCallback callback, object object);
    public virtual bool EndInvoke(Node& value, IAsyncResult result);
}
internal enum System.Data.Query.PlanCompiler.TypeIdKind : Enum {
    public int value__;
    public static TypeIdKind UserSpecified;
    public static TypeIdKind Generated;
}
internal class System.Data.Query.PlanCompiler.TypeIdPropertyRef : PropertyRef {
    internal static TypeIdPropertyRef Instance;
    private static TypeIdPropertyRef();
    public virtual string ToString();
}
internal class System.Data.Query.PlanCompiler.TypeInfo : object {
    internal bool IsRootType { get; }
    internal List`1<TypeInfo> ImmediateSubTypes { get; }
    internal TypeInfo SuperType { get; }
    internal RootTypeInfo RootType { get; }
    internal TypeUsage Type { get; }
    internal object TypeId { get; internal set; }
    internal RowType FlattenedType { get; }
    internal TypeUsage FlattenedTypeUsage { get; }
    internal EdmProperty EntitySetIdProperty { get; }
    internal bool HasEntitySetIdProperty { get; }
    internal EdmProperty NullSentinelProperty { get; }
    internal bool HasNullSentinelProperty { get; }
    internal EdmProperty TypeIdProperty { get; }
    internal bool HasTypeIdProperty { get; }
    internal IEnumerable`1<PropertyRef> PropertyRefList { get; }
    protected TypeInfo(TypeUsage type, TypeInfo superType);
    internal static TypeInfo Create(TypeUsage type, TypeInfo superTypeInfo, ExplicitDiscriminatorMap discriminatorMap);
    internal bool get_IsRootType();
    internal List`1<TypeInfo> get_ImmediateSubTypes();
    internal TypeInfo get_SuperType();
    internal RootTypeInfo get_RootType();
    internal TypeUsage get_Type();
    internal object get_TypeId();
    internal void set_TypeId(object value);
    internal virtual RowType get_FlattenedType();
    internal virtual TypeUsage get_FlattenedTypeUsage();
    internal virtual EdmProperty get_EntitySetIdProperty();
    internal bool get_HasEntitySetIdProperty();
    internal virtual EdmProperty get_NullSentinelProperty();
    internal bool get_HasNullSentinelProperty();
    internal virtual EdmProperty get_TypeIdProperty();
    internal bool get_HasTypeIdProperty();
    internal virtual IEnumerable`1<PropertyRef> get_PropertyRefList();
    internal EdmProperty GetNewProperty(PropertyRef propertyRef);
    internal bool TryGetNewProperty(PropertyRef propertyRef, bool throwIfMissing, EdmProperty& newProperty);
    internal IEnumerable`1<PropertyRef> GetKeyPropertyRefs();
    internal IEnumerable`1<PropertyRef> GetIdentityPropertyRefs();
    internal IEnumerable`1<PropertyRef> GetAllPropertyRefs();
    internal IEnumerable`1<EdmProperty> GetAllProperties();
    internal List`1<TypeInfo> GetTypeHierarchy();
}
internal class System.Data.Query.PlanCompiler.TypeUsageEqualityComparer : object {
    internal static TypeUsageEqualityComparer Instance;
    private static TypeUsageEqualityComparer();
    public sealed virtual bool Equals(TypeUsage x, TypeUsage y);
    public sealed virtual int GetHashCode(TypeUsage obj);
    internal static bool Equals(EdmType x, EdmType y);
}
internal static class System.Data.Query.PlanCompiler.TypeUtils : object {
    internal static bool IsUdt(TypeUsage type);
    internal static bool IsUdt(EdmType type);
    internal static bool IsStructuredType(TypeUsage type);
    internal static bool IsCollectionType(TypeUsage type);
    internal static bool IsEnumerationType(TypeUsage type);
    internal static TypeUsage CreateCollectionType(TypeUsage elementType);
}
internal abstract class System.Data.Query.PlanCompiler.VarInfo : object {
    internal VarInfoKind Kind { get; }
    internal List`1<Var> NewVars { get; }
    internal abstract virtual VarInfoKind get_Kind();
    internal virtual List`1<Var> get_NewVars();
}
internal enum System.Data.Query.PlanCompiler.VarInfoKind : Enum {
    public int value__;
    public static VarInfoKind PrimitiveTypeVarInfo;
    public static VarInfoKind StructuredTypeVarInfo;
    public static VarInfoKind CollectionVarInfo;
}
internal class System.Data.Query.PlanCompiler.VarInfoMap : object {
    internal VarInfo CreateStructuredVarInfo(Var v, RowType newType, List`1<Var> newVars, List`1<EdmProperty> newProperties, bool newVarsIncludeNullSentinelVar);
    internal VarInfo CreateStructuredVarInfo(Var v, RowType newType, List`1<Var> newVars, List`1<EdmProperty> newProperties);
    internal VarInfo CreateCollectionVarInfo(Var v, Var newVar);
    internal VarInfo CreatePrimitiveTypeVarInfo(Var v, Var newVar);
    internal bool TryGetVarInfo(Var v, VarInfo& varInfo);
}
internal class System.Data.Query.PlanCompiler.VarRefManager : object {
    internal VarRefManager(Command command);
    internal void AddChildren(Node parent);
    internal bool HasKeyReferences(VarVec keys, Node definingNode, Node targetJoinNode);
}
internal class System.Data.Query.PlanCompiler.VarRemapper : BasicOpVisitor {
    protected Command m_command;
    internal VarRemapper(Command command);
    internal VarRemapper(Command command, Dictionary`2<Var, Var> varMap);
    internal void AddMapping(Var oldVar, Var newVar);
    internal virtual void RemapNode(Node node);
    internal virtual void RemapSubtree(Node subTree);
    internal VarList RemapVarList(VarList varList);
    internal static VarList RemapVarList(Command command, Dictionary`2<Var, Var> varMap, VarList varList);
    protected virtual void VisitDefault(Node n);
    public virtual void Visit(VarRefOp op, Node n);
    protected virtual void VisitNestOp(NestBaseOp op, Node n);
    public virtual void Visit(PhysicalProjectOp op, Node n);
    protected virtual void VisitGroupByOp(GroupByBaseOp op, Node n);
    public virtual void Visit(GroupByIntoOp op, Node n);
    public virtual void Visit(DistinctOp op, Node n);
    public virtual void Visit(ProjectOp op, Node n);
    public virtual void Visit(UnnestOp op, Node n);
    protected virtual void VisitSetOp(SetOp op, Node n);
    protected virtual void VisitSortOp(SortBaseOp op, Node n);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Query.ResultAssembly.BridgeDataReader : DbDataReader {
    public int Depth { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public DataRecordInfo DataRecordInfo { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal BridgeDataReader(Shaper`1<RecordState> shaper, CoordinatorFactory`1<RecordState> coordinatorFactory, int depth, IEnumerator`1<KeyValuePair`2<Shaper`1<RecordState>, CoordinatorFactory`1<RecordState>>> nextResultShaperInfos);
    internal static DbDataReader Create(DbDataReader storeDataReader, ColumnMap columnMap, MetadataWorkspace workspace, IEnumerable`1<ColumnMap> nextResultColumnMaps);
    internal void CloseImplicitly();
    internal static Type GetClrTypeFromTypeMetadata(TypeUsage typeUsage);
    public virtual int get_Depth();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual void Close();
    [EditorBrowsableAttribute("1")]
public virtual IEnumerator GetEnumerator();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual bool Read();
    public sealed virtual DataRecordInfo get_DataRecordInfo();
    public virtual int get_FieldCount();
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    [EditorBrowsableAttribute("1")]
public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    [EditorBrowsableAttribute("1")]
public virtual object GetProviderSpecificValue(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual int GetProviderSpecificValues(Object[] values);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public sealed virtual DbDataRecord GetDataRecord(int ordinal);
    public sealed virtual DbDataReader GetDataReader(int ordinal);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Query.ResultAssembly.BridgeDataRecord : DbDataRecord {
    internal int Depth;
    internal bool HasData { get; }
    internal bool IsClosed { get; }
    internal bool IsExplicitlyClosed { get; }
    internal bool IsImplicitlyClosed { get; }
    public DataRecordInfo DataRecordInfo { get; }
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal BridgeDataRecord(Shaper`1<RecordState> shaper, int depth);
    internal void CloseExplicitly();
    internal void CloseImplicitly();
    internal void SetRecordSource(RecordState newSource, bool hasData);
    internal bool get_HasData();
    internal bool get_IsClosed();
    internal bool get_IsExplicitlyClosed();
    internal bool get_IsImplicitlyClosed();
    public sealed virtual DataRecordInfo get_DataRecordInfo();
    public virtual int get_FieldCount();
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual char GetChar(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public sealed virtual DbDataRecord GetDataRecord(int ordinal);
    public sealed virtual DbDataReader GetDataReader(int ordinal);
}
[BindableTypeAttribute]
[DataContractAttribute]
public class System.Data.Spatial.DbGeography : object {
    public static int DefaultCoordinateSystemId { get; }
    public object ProviderValue { get; }
    [DataMemberAttribute]
public DbGeographyWellKnownValue WellKnownValue { get; public set; }
    public int CoordinateSystemId { get; }
    public int Dimension { get; }
    public string SpatialTypeName { get; }
    public bool IsEmpty { get; }
    public Nullable`1<int> ElementCount { get; }
    public Nullable`1<double> Latitude { get; }
    public Nullable`1<double> Longitude { get; }
    public Nullable`1<double> Elevation { get; }
    public Nullable`1<double> Measure { get; }
    public Nullable`1<double> Length { get; }
    public DbGeography StartPoint { get; }
    public DbGeography EndPoint { get; }
    public Nullable`1<bool> IsClosed { get; }
    public Nullable`1<int> PointCount { get; }
    public Nullable`1<double> Area { get; }
    internal DbGeography(DbSpatialServices spatialServices, object spatialProviderValue);
    public static int get_DefaultCoordinateSystemId();
    public object get_ProviderValue();
    public DbGeographyWellKnownValue get_WellKnownValue();
    public void set_WellKnownValue(DbGeographyWellKnownValue value);
    public static DbGeography FromBinary(Byte[] wellKnownBinary);
    public static DbGeography FromBinary(Byte[] wellKnownBinary, int coordinateSystemId);
    public static DbGeography LineFromBinary(Byte[] lineWellKnownBinary, int coordinateSystemId);
    public static DbGeography PointFromBinary(Byte[] pointWellKnownBinary, int coordinateSystemId);
    public static DbGeography PolygonFromBinary(Byte[] polygonWellKnownBinary, int coordinateSystemId);
    public static DbGeography MultiLineFromBinary(Byte[] multiLineWellKnownBinary, int coordinateSystemId);
    public static DbGeography MultiPointFromBinary(Byte[] multiPointWellKnownBinary, int coordinateSystemId);
    public static DbGeography MultiPolygonFromBinary(Byte[] multiPolygonWellKnownBinary, int coordinateSystemId);
    public static DbGeography GeographyCollectionFromBinary(Byte[] geographyCollectionWellKnownBinary, int coordinateSystemId);
    public static DbGeography FromGml(string geographyMarkup);
    public static DbGeography FromGml(string geographyMarkup, int coordinateSystemId);
    public static DbGeography FromText(string wellKnownText);
    public static DbGeography FromText(string wellKnownText, int coordinateSystemId);
    public static DbGeography LineFromText(string lineWellKnownText, int coordinateSystemId);
    public static DbGeography PointFromText(string pointWellKnownText, int coordinateSystemId);
    public static DbGeography PolygonFromText(string polygonWellKnownText, int coordinateSystemId);
    public static DbGeography MultiLineFromText(string multiLineWellKnownText, int coordinateSystemId);
    public static DbGeography MultiPointFromText(string multiPointWellKnownText, int coordinateSystemId);
    public static DbGeography MultiPolygonFromText(string multiPolygonWellKnownText, int coordinateSystemId);
    public static DbGeography GeographyCollectionFromText(string geographyCollectionWellKnownText, int coordinateSystemId);
    public int get_CoordinateSystemId();
    public int get_Dimension();
    public string get_SpatialTypeName();
    public bool get_IsEmpty();
    public string AsText();
    internal string AsTextIncludingElevationAndMeasure();
    public Byte[] AsBinary();
    public string AsGml();
    public bool SpatialEquals(DbGeography other);
    public bool Disjoint(DbGeography other);
    public bool Intersects(DbGeography other);
    public DbGeography Buffer(Nullable`1<double> distance);
    public Nullable`1<double> Distance(DbGeography other);
    public DbGeography Intersection(DbGeography other);
    public DbGeography Union(DbGeography other);
    public DbGeography Difference(DbGeography other);
    public DbGeography SymmetricDifference(DbGeography other);
    public Nullable`1<int> get_ElementCount();
    public DbGeography ElementAt(int index);
    public Nullable`1<double> get_Latitude();
    public Nullable`1<double> get_Longitude();
    public Nullable`1<double> get_Elevation();
    public Nullable`1<double> get_Measure();
    public Nullable`1<double> get_Length();
    public DbGeography get_StartPoint();
    public DbGeography get_EndPoint();
    public Nullable`1<bool> get_IsClosed();
    public Nullable`1<int> get_PointCount();
    public DbGeography PointAt(int index);
    public Nullable`1<double> get_Area();
    public virtual string ToString();
}
[DataContractAttribute]
public class System.Data.Spatial.DbGeographyWellKnownValue : object {
    [DataMemberAttribute]
public int CoordinateSystemId { get; public set; }
    [DataMemberAttribute]
public string WellKnownText { get; public set; }
    [DataMemberAttribute]
public Byte[] WellKnownBinary { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CoordinateSystemId();
    [CompilerGeneratedAttribute]
public void set_CoordinateSystemId(int value);
    [CompilerGeneratedAttribute]
public string get_WellKnownText();
    [CompilerGeneratedAttribute]
public void set_WellKnownText(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_WellKnownBinary();
    [CompilerGeneratedAttribute]
public void set_WellKnownBinary(Byte[] value);
}
[DataContractAttribute]
[BindableTypeAttribute]
public class System.Data.Spatial.DbGeometry : object {
    public static int DefaultCoordinateSystemId { get; }
    public object ProviderValue { get; }
    [DataMemberAttribute]
public DbGeometryWellKnownValue WellKnownValue { get; public set; }
    public int CoordinateSystemId { get; }
    public DbGeometry Boundary { get; }
    public int Dimension { get; }
    public DbGeometry Envelope { get; }
    public string SpatialTypeName { get; }
    public bool IsEmpty { get; }
    public bool IsSimple { get; }
    public bool IsValid { get; }
    public DbGeometry ConvexHull { get; }
    public Nullable`1<int> ElementCount { get; }
    public Nullable`1<double> XCoordinate { get; }
    public Nullable`1<double> YCoordinate { get; }
    public Nullable`1<double> Elevation { get; }
    public Nullable`1<double> Measure { get; }
    public Nullable`1<double> Length { get; }
    public DbGeometry StartPoint { get; }
    public DbGeometry EndPoint { get; }
    public Nullable`1<bool> IsClosed { get; }
    public Nullable`1<bool> IsRing { get; }
    public Nullable`1<int> PointCount { get; }
    public Nullable`1<double> Area { get; }
    public DbGeometry Centroid { get; }
    public DbGeometry PointOnSurface { get; }
    public DbGeometry ExteriorRing { get; }
    public Nullable`1<int> InteriorRingCount { get; }
    internal DbGeometry(DbSpatialServices spatialServices, object spatialProviderValue);
    public static int get_DefaultCoordinateSystemId();
    public object get_ProviderValue();
    public DbGeometryWellKnownValue get_WellKnownValue();
    public void set_WellKnownValue(DbGeometryWellKnownValue value);
    public static DbGeometry FromBinary(Byte[] wellKnownBinary);
    public static DbGeometry FromBinary(Byte[] wellKnownBinary, int coordinateSystemId);
    public static DbGeometry LineFromBinary(Byte[] lineWellKnownBinary, int coordinateSystemId);
    public static DbGeometry PointFromBinary(Byte[] pointWellKnownBinary, int coordinateSystemId);
    public static DbGeometry PolygonFromBinary(Byte[] polygonWellKnownBinary, int coordinateSystemId);
    public static DbGeometry MultiLineFromBinary(Byte[] multiLineWellKnownBinary, int coordinateSystemId);
    public static DbGeometry MultiPointFromBinary(Byte[] multiPointWellKnownBinary, int coordinateSystemId);
    public static DbGeometry MultiPolygonFromBinary(Byte[] multiPolygonWellKnownBinary, int coordinateSystemId);
    public static DbGeometry GeometryCollectionFromBinary(Byte[] geometryCollectionWellKnownBinary, int coordinateSystemId);
    public static DbGeometry FromGml(string geometryMarkup);
    public static DbGeometry FromGml(string geometryMarkup, int coordinateSystemId);
    public static DbGeometry FromText(string wellKnownText);
    public static DbGeometry FromText(string wellKnownText, int coordinateSystemId);
    public static DbGeometry LineFromText(string lineWellKnownText, int coordinateSystemId);
    public static DbGeometry PointFromText(string pointWellKnownText, int coordinateSystemId);
    public static DbGeometry PolygonFromText(string polygonWellKnownText, int coordinateSystemId);
    public static DbGeometry MultiLineFromText(string multiLineWellKnownText, int coordinateSystemId);
    public static DbGeometry MultiPointFromText(string multiPointWellKnownText, int coordinateSystemId);
    public static DbGeometry MultiPolygonFromText(string multiPolygonWellKnownText, int coordinateSystemId);
    public static DbGeometry GeometryCollectionFromText(string geometryCollectionWellKnownText, int coordinateSystemId);
    public int get_CoordinateSystemId();
    public DbGeometry get_Boundary();
    public int get_Dimension();
    public DbGeometry get_Envelope();
    public string get_SpatialTypeName();
    public bool get_IsEmpty();
    public bool get_IsSimple();
    public bool get_IsValid();
    public string AsText();
    internal string AsTextIncludingElevationAndMeasure();
    public Byte[] AsBinary();
    public string AsGml();
    public bool SpatialEquals(DbGeometry other);
    public bool Disjoint(DbGeometry other);
    public bool Intersects(DbGeometry other);
    public bool Touches(DbGeometry other);
    public bool Crosses(DbGeometry other);
    public bool Within(DbGeometry other);
    public bool Contains(DbGeometry other);
    public bool Overlaps(DbGeometry other);
    public bool Relate(DbGeometry other, string matrix);
    public DbGeometry Buffer(Nullable`1<double> distance);
    public Nullable`1<double> Distance(DbGeometry other);
    public DbGeometry get_ConvexHull();
    public DbGeometry Intersection(DbGeometry other);
    public DbGeometry Union(DbGeometry other);
    public DbGeometry Difference(DbGeometry other);
    public DbGeometry SymmetricDifference(DbGeometry other);
    public Nullable`1<int> get_ElementCount();
    public DbGeometry ElementAt(int index);
    public Nullable`1<double> get_XCoordinate();
    public Nullable`1<double> get_YCoordinate();
    public Nullable`1<double> get_Elevation();
    public Nullable`1<double> get_Measure();
    public Nullable`1<double> get_Length();
    public DbGeometry get_StartPoint();
    public DbGeometry get_EndPoint();
    public Nullable`1<bool> get_IsClosed();
    public Nullable`1<bool> get_IsRing();
    public Nullable`1<int> get_PointCount();
    public DbGeometry PointAt(int index);
    public Nullable`1<double> get_Area();
    public DbGeometry get_Centroid();
    public DbGeometry get_PointOnSurface();
    public DbGeometry get_ExteriorRing();
    public Nullable`1<int> get_InteriorRingCount();
    public DbGeometry InteriorRingAt(int index);
    public virtual string ToString();
}
[DataContractAttribute]
public class System.Data.Spatial.DbGeometryWellKnownValue : object {
    [DataMemberAttribute]
public int CoordinateSystemId { get; public set; }
    [DataMemberAttribute]
public string WellKnownText { get; public set; }
    [DataMemberAttribute]
public Byte[] WellKnownBinary { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CoordinateSystemId();
    [CompilerGeneratedAttribute]
public void set_CoordinateSystemId(int value);
    [CompilerGeneratedAttribute]
public string get_WellKnownText();
    [CompilerGeneratedAttribute]
public void set_WellKnownText(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_WellKnownBinary();
    [CompilerGeneratedAttribute]
public void set_WellKnownBinary(Byte[] value);
}
public abstract class System.Data.Spatial.DbSpatialDataReader : object {
    public abstract virtual DbGeography GetGeography(int ordinal);
    public abstract virtual DbGeometry GetGeometry(int ordinal);
}
public abstract class System.Data.Spatial.DbSpatialServices : object {
    public static DbSpatialServices Default { get; }
    private static DbSpatialServices();
    public static DbSpatialServices get_Default();
    protected static DbGeography CreateGeography(DbSpatialServices spatialServices, object providerValue);
    public abstract virtual DbGeography GeographyFromProviderValue(object providerValue);
    public abstract virtual object CreateProviderValue(DbGeographyWellKnownValue wellKnownValue);
    public abstract virtual DbGeographyWellKnownValue CreateWellKnownValue(DbGeography geographyValue);
    public abstract virtual DbGeography GeographyFromBinary(Byte[] wellKnownBinary);
    public abstract virtual DbGeography GeographyFromBinary(Byte[] wellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyLineFromBinary(Byte[] lineWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyPointFromBinary(Byte[] pointWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyPolygonFromBinary(Byte[] polygonWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiLineFromBinary(Byte[] multiLineWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiPointFromBinary(Byte[] multiPointWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiPolygonFromBinary(Byte[] multiPolygonWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyCollectionFromBinary(Byte[] geographyCollectionWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeography GeographyFromText(string wellKnownText);
    public abstract virtual DbGeography GeographyFromText(string wellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyLineFromText(string lineWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyPointFromText(string pointWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyPolygonFromText(string polygonWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiLineFromText(string multiLineWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiPointFromText(string multiPointWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyMultiPolygonFromText(string multiPolygonWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyCollectionFromText(string geographyCollectionWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeography GeographyFromGml(string geographyMarkup);
    public abstract virtual DbGeography GeographyFromGml(string geographyMarkup, int coordinateSystemId);
    public abstract virtual int GetCoordinateSystemId(DbGeography geographyValue);
    public abstract virtual int GetDimension(DbGeography geographyValue);
    public abstract virtual string GetSpatialTypeName(DbGeography geographyValue);
    public abstract virtual bool GetIsEmpty(DbGeography geographyValue);
    public abstract virtual string AsText(DbGeography geographyValue);
    public virtual string AsTextIncludingElevationAndMeasure(DbGeography geographyValue);
    public abstract virtual Byte[] AsBinary(DbGeography geographyValue);
    public abstract virtual string AsGml(DbGeography geographyValue);
    public abstract virtual bool SpatialEquals(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual bool Disjoint(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual bool Intersects(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual DbGeography Buffer(DbGeography geographyValue, double distance);
    public abstract virtual double Distance(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual DbGeography Intersection(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual DbGeography Union(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual DbGeography Difference(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual DbGeography SymmetricDifference(DbGeography geographyValue, DbGeography otherGeography);
    public abstract virtual Nullable`1<int> GetElementCount(DbGeography geographyValue);
    public abstract virtual DbGeography ElementAt(DbGeography geographyValue, int index);
    public abstract virtual Nullable`1<double> GetLatitude(DbGeography geographyValue);
    public abstract virtual Nullable`1<double> GetLongitude(DbGeography geographyValue);
    public abstract virtual Nullable`1<double> GetElevation(DbGeography geographyValue);
    public abstract virtual Nullable`1<double> GetMeasure(DbGeography geographyValue);
    public abstract virtual Nullable`1<double> GetLength(DbGeography geographyValue);
    public abstract virtual DbGeography GetStartPoint(DbGeography geographyValue);
    public abstract virtual DbGeography GetEndPoint(DbGeography geographyValue);
    public abstract virtual Nullable`1<bool> GetIsClosed(DbGeography geographyValue);
    public abstract virtual Nullable`1<int> GetPointCount(DbGeography geographyValue);
    public abstract virtual DbGeography PointAt(DbGeography geographyValue, int index);
    public abstract virtual Nullable`1<double> GetArea(DbGeography geographyValue);
    protected static DbGeometry CreateGeometry(DbSpatialServices spatialServices, object providerValue);
    public abstract virtual object CreateProviderValue(DbGeometryWellKnownValue wellKnownValue);
    public abstract virtual DbGeometryWellKnownValue CreateWellKnownValue(DbGeometry geometryValue);
    public abstract virtual DbGeometry GeometryFromProviderValue(object providerValue);
    public abstract virtual DbGeometry GeometryFromBinary(Byte[] wellKnownBinary);
    public abstract virtual DbGeometry GeometryFromBinary(Byte[] wellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryLineFromBinary(Byte[] lineWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryPointFromBinary(Byte[] pointWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryPolygonFromBinary(Byte[] polygonWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiLineFromBinary(Byte[] multiLineWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiPointFromBinary(Byte[] multiPointWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiPolygonFromBinary(Byte[] multiPolygonWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryCollectionFromBinary(Byte[] geometryCollectionWellKnownBinary, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryFromText(string wellKnownText);
    public abstract virtual DbGeometry GeometryFromText(string wellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryLineFromText(string lineWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryPointFromText(string pointWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryPolygonFromText(string polygonWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiLineFromText(string multiLineWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiPointFromText(string multiPointWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryMultiPolygonFromText(string multiPolygonKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryCollectionFromText(string geometryCollectionWellKnownText, int coordinateSystemId);
    public abstract virtual DbGeometry GeometryFromGml(string geometryMarkup);
    public abstract virtual DbGeometry GeometryFromGml(string geometryMarkup, int coordinateSystemId);
    public abstract virtual int GetCoordinateSystemId(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetBoundary(DbGeometry geometryValue);
    public abstract virtual int GetDimension(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetEnvelope(DbGeometry geometryValue);
    public abstract virtual string GetSpatialTypeName(DbGeometry geometryValue);
    public abstract virtual bool GetIsEmpty(DbGeometry geometryValue);
    public abstract virtual bool GetIsSimple(DbGeometry geometryValue);
    public abstract virtual bool GetIsValid(DbGeometry geometryValue);
    public abstract virtual string AsText(DbGeometry geometryValue);
    public virtual string AsTextIncludingElevationAndMeasure(DbGeometry geometryValue);
    public abstract virtual Byte[] AsBinary(DbGeometry geometryValue);
    public abstract virtual string AsGml(DbGeometry geometryValue);
    public abstract virtual bool SpatialEquals(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Disjoint(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Intersects(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Touches(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Crosses(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Within(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Contains(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Overlaps(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual bool Relate(DbGeometry geometryValue, DbGeometry otherGeometry, string matrix);
    public abstract virtual DbGeometry Buffer(DbGeometry geometryValue, double distance);
    public abstract virtual double Distance(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual DbGeometry GetConvexHull(DbGeometry geometryValue);
    public abstract virtual DbGeometry Intersection(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual DbGeometry Union(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual DbGeometry Difference(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual DbGeometry SymmetricDifference(DbGeometry geometryValue, DbGeometry otherGeometry);
    public abstract virtual Nullable`1<int> GetElementCount(DbGeometry geometryValue);
    public abstract virtual DbGeometry ElementAt(DbGeometry geometryValue, int index);
    public abstract virtual Nullable`1<double> GetXCoordinate(DbGeometry geometryValue);
    public abstract virtual Nullable`1<double> GetYCoordinate(DbGeometry geometryValue);
    public abstract virtual Nullable`1<double> GetElevation(DbGeometry geometryValue);
    public abstract virtual Nullable`1<double> GetMeasure(DbGeometry geometryValue);
    public abstract virtual Nullable`1<double> GetLength(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetStartPoint(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetEndPoint(DbGeometry geometryValue);
    public abstract virtual Nullable`1<bool> GetIsClosed(DbGeometry geometryValue);
    public abstract virtual Nullable`1<bool> GetIsRing(DbGeometry geometryValue);
    public abstract virtual Nullable`1<int> GetPointCount(DbGeometry geometryValue);
    public abstract virtual DbGeometry PointAt(DbGeometry geometryValue, int index);
    public abstract virtual Nullable`1<double> GetArea(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetCentroid(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetPointOnSurface(DbGeometry geometryValue);
    public abstract virtual DbGeometry GetExteriorRing(DbGeometry geometryValue);
    public abstract virtual Nullable`1<int> GetInteriorRingCount(DbGeometry geometryValue);
    public abstract virtual DbGeometry InteriorRingAt(DbGeometry geometryValue, int index);
}
internal class System.Data.Spatial.DefaultSpatialServices : DbSpatialServices {
    internal static DefaultSpatialServices Instance;
    private static DefaultSpatialServices();
    public virtual DbGeography GeographyFromProviderValue(object providerValue);
    public virtual object CreateProviderValue(DbGeographyWellKnownValue wellKnownValue);
    public virtual DbGeographyWellKnownValue CreateWellKnownValue(DbGeography geographyValue);
    public virtual DbGeography GeographyFromBinary(Byte[] geographyBinary);
    public virtual DbGeography GeographyFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyLineFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyPointFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyPolygonFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiLineFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiPointFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiPolygonFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyCollectionFromBinary(Byte[] geographyBinary, int spatialReferenceSystemId);
    public virtual DbGeography GeographyFromText(string geographyText);
    public virtual DbGeography GeographyFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyLineFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyPointFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyPolygonFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiLineFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiPointFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyMultiPolygonFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyCollectionFromText(string geographyText, int spatialReferenceSystemId);
    public virtual DbGeography GeographyFromGml(string geographyMarkup);
    public virtual DbGeography GeographyFromGml(string geographyMarkup, int spatialReferenceSystemId);
    public virtual int GetCoordinateSystemId(DbGeography geographyValue);
    public virtual int GetDimension(DbGeography geographyValue);
    public virtual string GetSpatialTypeName(DbGeography geographyValue);
    public virtual bool GetIsEmpty(DbGeography geographyValue);
    public virtual string AsText(DbGeography geographyValue);
    public virtual Byte[] AsBinary(DbGeography geographyValue);
    public virtual string AsGml(DbGeography geographyValue);
    public virtual bool SpatialEquals(DbGeography geographyValue, DbGeography otherGeography);
    public virtual bool Disjoint(DbGeography geographyValue, DbGeography otherGeography);
    public virtual bool Intersects(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Buffer(DbGeography geographyValue, double distance);
    public virtual double Distance(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Intersection(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Union(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography Difference(DbGeography geographyValue, DbGeography otherGeography);
    public virtual DbGeography SymmetricDifference(DbGeography geographyValue, DbGeography otherGeography);
    public virtual Nullable`1<int> GetElementCount(DbGeography geographyValue);
    public virtual DbGeography ElementAt(DbGeography geographyValue, int index);
    public virtual Nullable`1<double> GetLatitude(DbGeography geographyValue);
    public virtual Nullable`1<double> GetLongitude(DbGeography geographyValue);
    public virtual Nullable`1<double> GetElevation(DbGeography geographyValue);
    public virtual Nullable`1<double> GetMeasure(DbGeography geographyValue);
    public virtual Nullable`1<double> GetLength(DbGeography geographyValue);
    public virtual DbGeography GetEndPoint(DbGeography geographyValue);
    public virtual DbGeography GetStartPoint(DbGeography geographyValue);
    public virtual Nullable`1<bool> GetIsClosed(DbGeography geographyValue);
    public virtual Nullable`1<int> GetPointCount(DbGeography geographyValue);
    public virtual DbGeography PointAt(DbGeography geographyValue, int index);
    public virtual Nullable`1<double> GetArea(DbGeography geographyValue);
    public virtual object CreateProviderValue(DbGeometryWellKnownValue wellKnownValue);
    public virtual DbGeometryWellKnownValue CreateWellKnownValue(DbGeometry geometryValue);
    public virtual DbGeometry GeometryFromProviderValue(object providerValue);
    public virtual DbGeometry GeometryFromBinary(Byte[] geometryBinary);
    public virtual DbGeometry GeometryFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryLineFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryPointFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryPolygonFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiLineFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiPointFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiPolygonFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryCollectionFromBinary(Byte[] geometryBinary, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryFromText(string geometryText);
    public virtual DbGeometry GeometryFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryLineFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryPointFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryPolygonFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiLineFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiPointFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryMultiPolygonFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryCollectionFromText(string geometryText, int spatialReferenceSystemId);
    public virtual DbGeometry GeometryFromGml(string geometryMarkup);
    public virtual DbGeometry GeometryFromGml(string geometryMarkup, int spatialReferenceSystemId);
    public virtual int GetCoordinateSystemId(DbGeometry geometryValue);
    public virtual DbGeometry GetBoundary(DbGeometry geometryValue);
    public virtual int GetDimension(DbGeometry geometryValue);
    public virtual DbGeometry GetEnvelope(DbGeometry geometryValue);
    public virtual string GetSpatialTypeName(DbGeometry geometryValue);
    public virtual bool GetIsEmpty(DbGeometry geometryValue);
    public virtual bool GetIsSimple(DbGeometry geometryValue);
    public virtual bool GetIsValid(DbGeometry geometryValue);
    public virtual string AsText(DbGeometry geometryValue);
    public virtual Byte[] AsBinary(DbGeometry geometryValue);
    public virtual string AsGml(DbGeometry geometryValue);
    public virtual bool SpatialEquals(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Disjoint(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Intersects(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Touches(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Crosses(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Within(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Contains(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Overlaps(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual bool Relate(DbGeometry geometryValue, DbGeometry otherGeometry, string matrix);
    public virtual DbGeometry Buffer(DbGeometry geometryValue, double distance);
    public virtual double Distance(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry GetConvexHull(DbGeometry geometryValue);
    public virtual DbGeometry Intersection(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry Union(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry Difference(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual DbGeometry SymmetricDifference(DbGeometry geometryValue, DbGeometry otherGeometry);
    public virtual Nullable`1<int> GetElementCount(DbGeometry geometryValue);
    public virtual DbGeometry ElementAt(DbGeometry geometryValue, int index);
    public virtual Nullable`1<double> GetXCoordinate(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetYCoordinate(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetElevation(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetMeasure(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetLength(DbGeometry geometryValue);
    public virtual DbGeometry GetEndPoint(DbGeometry geometryValue);
    public virtual DbGeometry GetStartPoint(DbGeometry geometryValue);
    public virtual Nullable`1<bool> GetIsClosed(DbGeometry geometryValue);
    public virtual Nullable`1<bool> GetIsRing(DbGeometry geometryValue);
    public virtual Nullable`1<int> GetPointCount(DbGeometry geometryValue);
    public virtual DbGeometry PointAt(DbGeometry geometryValue, int index);
    public virtual Nullable`1<double> GetArea(DbGeometry geometryValue);
    public virtual DbGeometry GetCentroid(DbGeometry geometryValue);
    public virtual DbGeometry GetPointOnSurface(DbGeometry geometryValue);
    public virtual DbGeometry GetExteriorRing(DbGeometry geometryValue);
    public virtual Nullable`1<int> GetInteriorRingCount(DbGeometry geometryValue);
    public virtual DbGeometry InteriorRingAt(DbGeometry geometryValue, int index);
}
[ExtensionAttribute]
internal static class System.Data.Spatial.ExtensionMethods : object {
    [ExtensionAttribute]
internal static void CheckNull(T value, string argumentName);
}
internal static class System.Data.Spatial.Internal.SpatialExceptions : object {
    internal static ArgumentNullException ArgumentNull(string argumentName);
    internal static Exception ProviderValueNotCompatibleWithSpatialServices();
    internal static InvalidOperationException WellKnownValueSerializationPropertyNotDirectlySettable();
    internal static Exception GeographyValueNotCompatibleWithSpatialServices(string argumentName);
    internal static Exception WellKnownGeographyValueNotValid(string argumentName);
    internal static Exception CouldNotCreateWellKnownGeographyValueNoSrid(string argumentName);
    internal static Exception CouldNotCreateWellKnownGeographyValueNoWkbOrWkt(string argumentName);
    internal static Exception GeometryValueNotCompatibleWithSpatialServices(string argumentName);
    internal static Exception WellKnownGeometryValueNotValid(string argumentName);
    internal static Exception CouldNotCreateWellKnownGeometryValueNoSrid(string argumentName);
    internal static Exception CouldNotCreateWellKnownGeometryValueNoWkbOrWkt(string argumentName);
    internal static Exception SqlSpatialServices_ProviderValueNotSqlType(Type requiredType);
}
internal static class System.Data.Spatial.SpatialHelpers : object {
    internal static object GetSpatialValue(MetadataWorkspace workspace, DbDataReader reader, TypeUsage columnType, int columnOrdinal);
    internal static DbSpatialDataReader CreateSpatialDataReader(MetadataWorkspace workspace, DbDataReader reader);
}
[ExtensionAttribute]
internal static class System.Data.SqlClient.Expressions : object {
    internal static Expression Null();
    internal static Expression Null(Type nullType);
    internal static Expression`1<Func`2<TArg, TResult>> Lambda(string argumentName, Func`2<ParameterExpression, Expression> createLambdaBodyGivenParameter);
    [ExtensionAttribute]
internal static Expression Call(Expression exp, string methodName);
    [ExtensionAttribute]
internal static Expression ConvertTo(Expression exp, Type convertToType);
    [ExtensionAttribute]
internal static Expression ConvertTo(Expression exp);
    [ExtensionAttribute]
internal static ConditionalExpressionBuilder IfTrueThen(Expression conditionExp, Expression resultIfTrue);
    [ExtensionAttribute]
internal static Expression Property(Expression exp, string propertyName);
}
internal class System.Data.SqlClient.Internal.DbGeographyAdapter : ValueType {
    private DbGeography value;
    public bool IsGeography { get; }
    public PrimitiveTypeKind PrimitiveType { get; }
    public object ProviderValue { get; }
    public Nullable`1<int> CoordinateSystemId { get; }
    public string WellKnownText { get; }
    public Byte[] WellKnownBinary { get; }
    public string GmlString { get; }
    internal DbGeographyAdapter(DbGeography geomValue);
    public sealed virtual bool get_IsGeography();
    public sealed virtual PrimitiveTypeKind get_PrimitiveType();
    public sealed virtual object get_ProviderValue();
    public sealed virtual Nullable`1<int> get_CoordinateSystemId();
    public sealed virtual string get_WellKnownText();
    public sealed virtual Byte[] get_WellKnownBinary();
    public sealed virtual string get_GmlString();
    public sealed virtual Exception NotSqlCompatible();
}
internal class System.Data.SqlClient.Internal.DbGeometryAdapter : ValueType {
    private DbGeometry value;
    public bool IsGeography { get; }
    public PrimitiveTypeKind PrimitiveType { get; }
    public object ProviderValue { get; }
    public Nullable`1<int> CoordinateSystemId { get; }
    public string WellKnownText { get; }
    public Byte[] WellKnownBinary { get; }
    public string GmlString { get; }
    internal DbGeometryAdapter(DbGeometry geomValue);
    public sealed virtual bool get_IsGeography();
    public sealed virtual PrimitiveTypeKind get_PrimitiveType();
    public sealed virtual object get_ProviderValue();
    public sealed virtual Nullable`1<int> get_CoordinateSystemId();
    public sealed virtual string get_WellKnownText();
    public sealed virtual Byte[] get_WellKnownBinary();
    public sealed virtual string get_GmlString();
    public sealed virtual Exception NotSqlCompatible();
}
internal interface System.Data.SqlClient.Internal.IDbSpatialValue {
    public bool IsGeography { get; }
    public PrimitiveTypeKind PrimitiveType { get; }
    public object ProviderValue { get; }
    public Nullable`1<int> CoordinateSystemId { get; }
    public string WellKnownText { get; }
    public Byte[] WellKnownBinary { get; }
    public string GmlString { get; }
    public abstract virtual bool get_IsGeography();
    public abstract virtual PrimitiveTypeKind get_PrimitiveType();
    public abstract virtual object get_ProviderValue();
    public abstract virtual Nullable`1<int> get_CoordinateSystemId();
    public abstract virtual string get_WellKnownText();
    public abstract virtual Byte[] get_WellKnownBinary();
    public abstract virtual string get_GmlString();
    public abstract virtual Exception NotSqlCompatible();
}
[ExtensionAttribute]
internal static class System.Data.SqlClient.Internal.IDbSpatialValueExtensionMethods : object {
    [ExtensionAttribute]
internal static IDbSpatialValue AsSpatialValue(DbGeography geographyValue);
    [ExtensionAttribute]
internal static IDbSpatialValue AsSpatialValue(DbGeometry geometryValue);
}
internal class System.Data.SqlClient.SqlDdlBuilder : object {
    internal static string CreateObjectsScript(StoreItemCollection itemCollection, bool createSchemas);
    internal static string CreateDatabaseScript(string databaseName, string dataFileName, string logFileName);
    internal static string CreateDatabaseExistsScript(string databaseName, bool useDeprecatedSystemTable);
    internal static string CreateGetDatabaseNamesBasedOnFileNameScript(string databaseFileName, bool useDeprecatedSystemTable);
    internal static string CreateCountDatabasesBasedOnFileNameScript(string databaseFileName, bool useDeprecatedSystemTable);
    internal static string DropDatabaseScript(string databaseName);
    internal string GetCommandText();
}
internal class System.Data.SqlClient.SqlGen.BoolWrapper : object {
    internal bool Value { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(bool value);
}
internal static class System.Data.SqlClient.SqlGen.DmlSqlGenerator : object {
    internal static string GenerateUpdateSql(DbUpdateCommandTree tree, SqlVersion sqlVersion, List`1& parameters);
    internal static string GenerateDeleteSql(DbDeleteCommandTree tree, SqlVersion sqlVersion, List`1& parameters);
    internal static string GenerateInsertSql(DbInsertCommandTree tree, SqlVersion sqlVersion, List`1& parameters);
}
internal interface System.Data.SqlClient.SqlGen.ISqlFragment {
    public abstract virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SqlClient.SqlGen.JoinSymbol : Symbol {
    internal List`1<Symbol> ColumnList { get; internal set; }
    internal List`1<Symbol> ExtentList { get; }
    internal List`1<Symbol> FlattenedExtentList { get; internal set; }
    internal Dictionary`2<string, Symbol> NameToExtent { get; }
    internal bool IsNestedJoin { get; internal set; }
    public JoinSymbol(string name, TypeUsage type, List`1<Symbol> extents);
    internal List`1<Symbol> get_ColumnList();
    internal void set_ColumnList(List`1<Symbol> value);
    internal List`1<Symbol> get_ExtentList();
    internal List`1<Symbol> get_FlattenedExtentList();
    internal void set_FlattenedExtentList(List`1<Symbol> value);
    internal Dictionary`2<string, Symbol> get_NameToExtent();
    internal bool get_IsNestedJoin();
    internal void set_IsNestedJoin(bool value);
}
internal class System.Data.SqlClient.SqlGen.OptionalColumn : object {
    internal OptionalColumn(SymbolUsageManager usageManager, Symbol symbol);
    internal void Append(object s);
    internal void MarkAsUsed();
    public bool WriteSqlIfUsed(SqlWriter writer, SqlGenerator sqlGenerator, string separator);
}
internal class System.Data.SqlClient.SqlGen.Sql8ConformanceChecker : DbExpressionVisitor`1<bool> {
    internal static bool NeedsRewrite(DbExpression expr);
    public virtual bool Visit(DbExpression expression);
    public virtual bool Visit(DbAndExpression expression);
    public virtual bool Visit(DbApplyExpression expression);
    public virtual bool Visit(DbArithmeticExpression expression);
    public virtual bool Visit(DbCaseExpression expression);
    public virtual bool Visit(DbCastExpression expression);
    public virtual bool Visit(DbComparisonExpression expression);
    public virtual bool Visit(DbConstantExpression expression);
    public virtual bool Visit(DbCrossJoinExpression expression);
    public virtual bool Visit(DbDerefExpression expression);
    public virtual bool Visit(DbDistinctExpression expression);
    public virtual bool Visit(DbElementExpression expression);
    public virtual bool Visit(DbEntityRefExpression expression);
    public virtual bool Visit(DbExceptExpression expression);
    public virtual bool Visit(DbFilterExpression expression);
    public virtual bool Visit(DbFunctionExpression expression);
    public virtual bool Visit(DbLambdaExpression expression);
    public virtual bool Visit(DbGroupByExpression expression);
    public virtual bool Visit(DbIntersectExpression expression);
    public virtual bool Visit(DbIsEmptyExpression expression);
    public virtual bool Visit(DbIsNullExpression expression);
    public virtual bool Visit(DbIsOfExpression expression);
    public virtual bool Visit(DbJoinExpression expression);
    public virtual bool Visit(DbLikeExpression expression);
    public virtual bool Visit(DbLimitExpression expression);
    public virtual bool Visit(DbNewInstanceExpression expression);
    public virtual bool Visit(DbNotExpression expression);
    public virtual bool Visit(DbNullExpression expression);
    public virtual bool Visit(DbOfTypeExpression expression);
    public virtual bool Visit(DbOrExpression expression);
    public virtual bool Visit(DbParameterReferenceExpression expression);
    public virtual bool Visit(DbProjectExpression expression);
    public virtual bool Visit(DbPropertyExpression expression);
    public virtual bool Visit(DbQuantifierExpression expression);
    public virtual bool Visit(DbRefExpression expression);
    public virtual bool Visit(DbRefKeyExpression expression);
    public virtual bool Visit(DbRelationshipNavigationExpression expression);
    public virtual bool Visit(DbScanExpression expression);
    public virtual bool Visit(DbSkipExpression expression);
    public virtual bool Visit(DbSortExpression expression);
    public virtual bool Visit(DbTreatExpression expression);
    public virtual bool Visit(DbUnionAllExpression expression);
    public virtual bool Visit(DbVariableReferenceExpression expression);
}
internal class System.Data.SqlClient.SqlGen.Sql8ExpressionRewriter : DbExpressionRebinder {
    internal static DbQueryCommandTree Rewrite(DbQueryCommandTree originalTree);
    public virtual DbExpression Visit(DbExceptExpression e);
    public virtual DbExpression Visit(DbIntersectExpression e);
    public virtual DbExpression Visit(DbSkipExpression e);
}
internal class System.Data.SqlClient.SqlGen.SqlBuilder : object {
    public bool IsEmpty { get; }
    public void Append(object s);
    public void AppendLine();
    public virtual bool get_IsEmpty();
    public virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal static class System.Data.SqlClient.SqlGen.SqlFunctionCallHandler : object {
    private static SqlFunctionCallHandler();
    internal static ISqlFragment GenerateFunctionCallSql(SqlGenerator sqlgen, DbFunctionExpression functionExpression);
    internal static void WriteFunctionName(SqlBuilder result, EdmFunction function);
    internal static bool IsStoreFunction(EdmFunction function);
}
internal class System.Data.SqlClient.SqlGen.SqlGenerator : DbExpressionVisitor`1<ISqlFragment> {
    internal Dictionary`2<string, int> AllExtentNames { get; }
    internal Dictionary`2<string, int> AllColumnNames { get; }
    internal SqlVersion SqlVersion { get; }
    internal bool IsPreKatmai { get; }
    internal MetadataWorkspace Workspace { get; }
    internal TypeUsage IntegerType { get; }
    internal string DefaultStringTypeName { get; }
    internal StoreItemCollection StoreItemCollection { get; }
    private static SqlGenerator();
    internal Dictionary`2<string, int> get_AllExtentNames();
    internal Dictionary`2<string, int> get_AllColumnNames();
    internal SqlVersion get_SqlVersion();
    internal bool get_IsPreKatmai();
    internal MetadataWorkspace get_Workspace();
    internal TypeUsage get_IntegerType();
    internal string get_DefaultStringTypeName();
    internal StoreItemCollection get_StoreItemCollection();
    internal static string GenerateSql(DbCommandTree tree, SqlVersion sqlVersion, List`1& parameters, CommandType& commandType, HashSet`1& paramsToForceNonUnicode);
    public virtual ISqlFragment Visit(DbAndExpression e);
    public virtual ISqlFragment Visit(DbApplyExpression e);
    public virtual ISqlFragment Visit(DbArithmeticExpression e);
    public virtual ISqlFragment Visit(DbCaseExpression e);
    public virtual ISqlFragment Visit(DbCastExpression e);
    public virtual ISqlFragment Visit(DbComparisonExpression e);
    public virtual ISqlFragment Visit(DbConstantExpression e);
    public virtual ISqlFragment Visit(DbDerefExpression e);
    public virtual ISqlFragment Visit(DbDistinctExpression e);
    public virtual ISqlFragment Visit(DbElementExpression e);
    public virtual ISqlFragment Visit(DbExceptExpression e);
    public virtual ISqlFragment Visit(DbExpression e);
    public virtual ISqlFragment Visit(DbScanExpression e);
    internal static string GetTargetTSql(EntitySetBase entitySetBase);
    public virtual ISqlFragment Visit(DbFilterExpression e);
    public virtual ISqlFragment Visit(DbFunctionExpression e);
    public virtual ISqlFragment Visit(DbLambdaExpression expression);
    public virtual ISqlFragment Visit(DbEntityRefExpression e);
    public virtual ISqlFragment Visit(DbRefKeyExpression e);
    public virtual ISqlFragment Visit(DbGroupByExpression e);
    public virtual ISqlFragment Visit(DbIntersectExpression e);
    public virtual ISqlFragment Visit(DbIsEmptyExpression e);
    public virtual ISqlFragment Visit(DbIsNullExpression e);
    public virtual ISqlFragment Visit(DbIsOfExpression e);
    public virtual ISqlFragment Visit(DbCrossJoinExpression e);
    public virtual ISqlFragment Visit(DbJoinExpression e);
    public virtual ISqlFragment Visit(DbLikeExpression e);
    public virtual ISqlFragment Visit(DbLimitExpression e);
    public virtual ISqlFragment Visit(DbNewInstanceExpression e);
    public virtual ISqlFragment Visit(DbNotExpression e);
    public virtual ISqlFragment Visit(DbNullExpression e);
    public virtual ISqlFragment Visit(DbOfTypeExpression e);
    public virtual ISqlFragment Visit(DbOrExpression e);
    public virtual ISqlFragment Visit(DbParameterReferenceExpression e);
    public virtual ISqlFragment Visit(DbProjectExpression e);
    public virtual ISqlFragment Visit(DbPropertyExpression e);
    public virtual ISqlFragment Visit(DbQuantifierExpression e);
    public virtual ISqlFragment Visit(DbRefExpression e);
    public virtual ISqlFragment Visit(DbRelationshipNavigationExpression e);
    public virtual ISqlFragment Visit(DbSkipExpression e);
    public virtual ISqlFragment Visit(DbSortExpression e);
    public virtual ISqlFragment Visit(DbTreatExpression e);
    public virtual ISqlFragment Visit(DbUnionAllExpression e);
    public virtual ISqlFragment Visit(DbVariableReferenceExpression e);
    internal void ParenthesizeExpressionIfNeeded(DbExpression e, SqlBuilder result);
    internal static string GenerateSqlForStoreType(SqlVersion sqlVersion, TypeUsage storeTypeUsage);
    internal static string QuoteIdentifier(string name);
    internal void AssertKatmaiOrNewer(DbFunctionExpression e);
}
internal class System.Data.SqlClient.SqlGen.SqlSelectClauseBuilder : SqlBuilder {
    internal TopClause Top { get; internal set; }
    internal bool IsDistinct { get; internal set; }
    public bool IsEmpty { get; }
    internal SqlSelectClauseBuilder(Func`1<bool> isPartOfTopMostStatement);
    internal void AddOptionalColumn(OptionalColumn column);
    internal TopClause get_Top();
    internal void set_Top(TopClause value);
    [CompilerGeneratedAttribute]
internal bool get_IsDistinct();
    [CompilerGeneratedAttribute]
internal void set_IsDistinct(bool value);
    public virtual bool get_IsEmpty();
    public virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SqlClient.SqlGen.SqlSelectStatement : object {
    internal bool OutputColumnsRenamed { get; internal set; }
    internal Dictionary`2<string, Symbol> OutputColumns { get; internal set; }
    internal List`1<Symbol> AllJoinExtents { get; internal set; }
    internal List`1<Symbol> FromExtents { get; }
    internal Dictionary`2<Symbol, bool> OuterExtents { get; }
    internal SqlSelectClauseBuilder Select { get; }
    internal SqlBuilder From { get; }
    internal SqlBuilder Where { get; }
    internal SqlBuilder GroupBy { get; }
    public SqlBuilder OrderBy { get; }
    internal bool IsTopMost { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_OutputColumnsRenamed();
    [CompilerGeneratedAttribute]
internal void set_OutputColumnsRenamed(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, Symbol> get_OutputColumns();
    [CompilerGeneratedAttribute]
internal void set_OutputColumns(Dictionary`2<string, Symbol> value);
    [CompilerGeneratedAttribute]
internal List`1<Symbol> get_AllJoinExtents();
    [CompilerGeneratedAttribute]
internal void set_AllJoinExtents(List`1<Symbol> value);
    internal List`1<Symbol> get_FromExtents();
    internal Dictionary`2<Symbol, bool> get_OuterExtents();
    internal SqlSelectClauseBuilder get_Select();
    internal SqlBuilder get_From();
    internal SqlBuilder get_Where();
    internal SqlBuilder get_GroupBy();
    public SqlBuilder get_OrderBy();
    [CompilerGeneratedAttribute]
internal bool get_IsTopMost();
    [CompilerGeneratedAttribute]
internal void set_IsTopMost(bool value);
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SqlClient.SqlGen.SqlWriter : StringWriter {
    internal int Indent { get; internal set; }
    public SqlWriter(StringBuilder b);
    internal int get_Indent();
    internal void set_Indent(int value);
    public virtual void Write(string value);
    public virtual void WriteLine();
}
internal class System.Data.SqlClient.SqlGen.Symbol : object {
    internal Dictionary`2<string, Symbol> Columns { get; }
    internal Dictionary`2<string, Symbol> OutputColumns { get; }
    internal bool NeedsRenaming { get; internal set; }
    internal bool OutputColumnsRenamed { get; internal set; }
    public string Name { get; }
    public string NewName { get; public set; }
    internal TypeUsage Type { get; internal set; }
    public Symbol(string name, TypeUsage type);
    public Symbol(string name, TypeUsage type, Dictionary`2<string, Symbol> outputColumns, bool outputColumnsRenamed);
    internal Dictionary`2<string, Symbol> get_Columns();
    internal Dictionary`2<string, Symbol> get_OutputColumns();
    internal bool get_NeedsRenaming();
    internal void set_NeedsRenaming(bool value);
    internal bool get_OutputColumnsRenamed();
    internal void set_OutputColumnsRenamed(bool value);
    public string get_Name();
    public string get_NewName();
    public void set_NewName(string value);
    internal TypeUsage get_Type();
    internal void set_Type(TypeUsage value);
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SqlClient.SqlGen.SymbolPair : object {
    public Symbol Source;
    public Symbol Column;
    public SymbolPair(Symbol source, Symbol column);
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SqlClient.SqlGen.SymbolTable : object {
    internal void EnterScope();
    internal void ExitScope();
    internal void Add(string name, Symbol value);
    internal Symbol Lookup(string name);
}
internal class System.Data.SqlClient.SqlGen.SymbolUsageManager : object {
    internal bool ContainsKey(Symbol key);
    internal bool TryGetValue(Symbol key, Boolean& value);
    internal void Add(Symbol sourceSymbol, Symbol symbolToAdd);
    internal void MarkAsUsed(Symbol key);
    internal bool IsUsed(Symbol key);
}
internal class System.Data.SqlClient.SqlGen.TopClause : object {
    internal bool WithTies { get; }
    internal ISqlFragment TopCount { get; }
    internal TopClause(ISqlFragment topCount, bool withTies);
    internal TopClause(int topCount, bool withTies);
    internal bool get_WithTies();
    internal ISqlFragment get_TopCount();
    public sealed virtual void WriteSql(SqlWriter writer, SqlGenerator sqlGenerator);
}
internal class System.Data.SqlClient.SqlProviderManifest : DbXmlEnabledProviderManifest {
    internal static string TokenSql8;
    internal static string TokenSql9;
    internal static string TokenSql10;
    internal static char LikeEscapeChar;
    internal static string LikeEscapeCharToString;
    internal SqlVersion SqlVersion { get; }
    public SqlProviderManifest(string manifestToken);
    internal SqlVersion get_SqlVersion();
    internal static string EscapeLikeText(string text, bool alwaysEscapeEscapeChar, Boolean& usedEscapeChar);
    protected virtual XmlReader GetDbInformation(string informationType);
    public virtual ReadOnlyCollection`1<PrimitiveType> GetStoreTypes();
    public virtual ReadOnlyCollection`1<EdmFunction> GetStoreFunctions();
    public virtual TypeUsage GetEdmType(TypeUsage storeType);
    public virtual TypeUsage GetStoreType(TypeUsage edmType);
    public virtual bool SupportsEscapingLikeArgument(Char& escapeCharacter);
    public virtual string EscapeLikeArgument(string argument);
}
[CLSCompliantAttribute("False")]
public class System.Data.SqlClient.SqlProviderServices : DbProviderServices {
    internal static SqlProviderServices Instance;
    public static SqlProviderServices SingletonInstance { get; }
    internal static bool SqlTypesAssemblyIsAvailable { get; }
    private static SqlProviderServices();
    public static SqlProviderServices get_SingletonInstance();
    protected virtual DbCommandDefinition CreateDbCommandDefinition(DbProviderManifest providerManifest, DbCommandTree commandTree);
    internal virtual DbCommand CreateCommand(DbCommandTree commandTree);
    protected virtual void SetDbParameterValue(DbParameter parameter, TypeUsage parameterType, object value);
    protected virtual string GetDbProviderManifestToken(DbConnection connection);
    protected virtual DbProviderManifest GetDbProviderManifest(string versionHint);
    protected virtual DbSpatialDataReader GetDbSpatialDataReader(DbDataReader fromReader, string versionHint);
    protected virtual DbSpatialServices DbGetSpatialServices(string versionHint);
    internal static SqlTypesAssembly GetSqlTypesAssembly();
    internal static bool get_SqlTypesAssemblyIsAvailable();
    internal static SqlParameter CreateSqlParameter(string name, TypeUsage type, ParameterMode mode, object value, bool preventTruncation, SqlVersion version);
    internal static object EnsureSqlParameterValue(object value);
    protected virtual string DbCreateDatabaseScript(string providerManifestToken, StoreItemCollection storeItemCollection);
    protected virtual void DbCreateDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    protected virtual bool DbDatabaseExists(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
    protected virtual void DbDeleteDatabase(DbConnection connection, Nullable`1<int> commandTimeout, StoreItemCollection storeItemCollection);
}
internal class System.Data.SqlClient.SqlProviderUtilities : object {
    internal static SqlConnection GetRequiredSqlConnection(DbConnection connection);
}
internal class System.Data.SqlClient.SqlSpatialDataReader : DbSpatialDataReader {
    internal SqlSpatialDataReader(SqlDataReader underlyingReader);
    private static SqlSpatialDataReader();
    public virtual DbGeography GetGeography(int ordinal);
    public virtual DbGeometry GetGeometry(int ordinal);
}
internal class System.Data.SqlClient.SqlSpatialServices : DbSpatialServices {
    internal static SqlSpatialServices Instance;
    private static SqlSpatialServices();
    public virtual object CreateProviderValue(DbGeographyWellKnownValue wellKnownValue);
    public virtual DbGeography GeographyFromProviderValue(object providerValue);
    public virtual DbGeographyWellKnownValue CreateWellKnownValue(DbGeography geographyValue);
    public virtual object CreateProviderValue(DbGeometryWellKnownValue wellKnownValue);
    public virtual DbGeometry GeometryFromProviderValue(object providerValue);
    public virtual DbGeometryWellKnownValue CreateWellKnownValue(DbGeometry geometryValue);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string AsTextIncludingElevationAndMeasure(DbGeography geographyValue);
    public virtual string AsTextIncludingElevationAndMeasure(DbGeometry geometryValue);
    public virtual DbGeography GeographyFromText(string geographyText);
    public virtual DbGeography GeographyFromText(string geographyText, int srid);
    public virtual DbGeography GeographyPointFromText(string pointText, int srid);
    public virtual DbGeography GeographyLineFromText(string lineText, int srid);
    public virtual DbGeography GeographyPolygonFromText(string polygonText, int srid);
    public virtual DbGeography GeographyMultiPointFromText(string multiPointText, int srid);
    public virtual DbGeography GeographyMultiLineFromText(string multiLineText, int srid);
    public virtual DbGeography GeographyMultiPolygonFromText(string multiPolygonText, int srid);
    public virtual DbGeography GeographyCollectionFromText(string geographyCollectionText, int srid);
    public virtual DbGeography GeographyFromBinary(Byte[] geographyBytes, int srid);
    public virtual DbGeography GeographyFromBinary(Byte[] geographyBytes);
    public virtual DbGeography GeographyPointFromBinary(Byte[] pointBytes, int srid);
    public virtual DbGeography GeographyLineFromBinary(Byte[] lineBytes, int srid);
    public virtual DbGeography GeographyPolygonFromBinary(Byte[] polygonBytes, int srid);
    public virtual DbGeography GeographyMultiPointFromBinary(Byte[] multiPointBytes, int srid);
    public virtual DbGeography GeographyMultiLineFromBinary(Byte[] multiLineBytes, int srid);
    public virtual DbGeography GeographyMultiPolygonFromBinary(Byte[] multiPolygonBytes, int srid);
    public virtual DbGeography GeographyCollectionFromBinary(Byte[] geographyCollectionBytes, int srid);
    public virtual DbGeography GeographyFromGml(string geographyGml);
    public virtual DbGeography GeographyFromGml(string geographyGml, int srid);
    public virtual int GetCoordinateSystemId(DbGeography geographyValue);
    public virtual string GetSpatialTypeName(DbGeography geographyValue);
    public virtual int GetDimension(DbGeography geographyValue);
    public virtual Byte[] AsBinary(DbGeography geographyValue);
    public virtual string AsGml(DbGeography geographyValue);
    public virtual string AsText(DbGeography geographyValue);
    public virtual bool GetIsEmpty(DbGeography geographyValue);
    public virtual bool SpatialEquals(DbGeography geographyValue1, DbGeography geographyValue2);
    public virtual bool Disjoint(DbGeography geographyValue1, DbGeography geographyValue2);
    public virtual bool Intersects(DbGeography geographyValue1, DbGeography geographyValue2);
    public virtual DbGeography Buffer(DbGeography geographyValue, double distance);
    public virtual double Distance(DbGeography geographyValue1, DbGeography geographyValue2);
    public virtual DbGeography Intersection(DbGeography geographyValue1, DbGeography geographyValue2);
    public virtual DbGeography Union(DbGeography geographyValue1, DbGeography geographyValue2);
    public virtual DbGeography Difference(DbGeography geometryValue1, DbGeography geometryValue2);
    public virtual DbGeography SymmetricDifference(DbGeography geometryValue1, DbGeography geometryValue2);
    public virtual Nullable`1<int> GetElementCount(DbGeography geographyValue);
    public virtual DbGeography ElementAt(DbGeography geographyValue, int nValue);
    public virtual Nullable`1<double> GetLatitude(DbGeography geographyValue);
    public virtual Nullable`1<double> GetLongitude(DbGeography geographyValue);
    public virtual Nullable`1<double> GetElevation(DbGeography geographyValue);
    public virtual Nullable`1<double> GetMeasure(DbGeography geographyValue);
    public virtual Nullable`1<double> GetLength(DbGeography geographyValue);
    public virtual DbGeography GetStartPoint(DbGeography geographyValue);
    public virtual DbGeography GetEndPoint(DbGeography geographyValue);
    public virtual Nullable`1<bool> GetIsClosed(DbGeography geographyValue);
    public virtual Nullable`1<int> GetPointCount(DbGeography geographyValue);
    public virtual DbGeography PointAt(DbGeography geographyValue, int nValue);
    public virtual Nullable`1<double> GetArea(DbGeography geographyValue);
    public virtual DbGeometry GeometryFromText(string geometryText);
    public virtual DbGeometry GeometryFromText(string geometryText, int srid);
    public virtual DbGeometry GeometryPointFromText(string pointText, int srid);
    public virtual DbGeometry GeometryLineFromText(string lineText, int srid);
    public virtual DbGeometry GeometryPolygonFromText(string polygonText, int srid);
    public virtual DbGeometry GeometryMultiPointFromText(string multiPointText, int srid);
    public virtual DbGeometry GeometryMultiLineFromText(string multiLineText, int srid);
    public virtual DbGeometry GeometryMultiPolygonFromText(string multiPolygonText, int srid);
    public virtual DbGeometry GeometryCollectionFromText(string geometryCollectionText, int srid);
    public virtual DbGeometry GeometryFromBinary(Byte[] geometryBytes);
    public virtual DbGeometry GeometryFromBinary(Byte[] geometryBytes, int srid);
    public virtual DbGeometry GeometryPointFromBinary(Byte[] pointBytes, int srid);
    public virtual DbGeometry GeometryLineFromBinary(Byte[] lineBytes, int srid);
    public virtual DbGeometry GeometryPolygonFromBinary(Byte[] polygonBytes, int srid);
    public virtual DbGeometry GeometryMultiPointFromBinary(Byte[] multiPointBytes, int srid);
    public virtual DbGeometry GeometryMultiLineFromBinary(Byte[] multiLineBytes, int srid);
    public virtual DbGeometry GeometryMultiPolygonFromBinary(Byte[] multiPolygonBytes, int srid);
    public virtual DbGeometry GeometryCollectionFromBinary(Byte[] geometryCollectionBytes, int srid);
    public virtual DbGeometry GeometryFromGml(string geometryGml);
    public virtual DbGeometry GeometryFromGml(string geometryGml, int srid);
    public virtual int GetCoordinateSystemId(DbGeometry geometryValue);
    public virtual string GetSpatialTypeName(DbGeometry geometryValue);
    public virtual int GetDimension(DbGeometry geometryValue);
    public virtual DbGeometry GetEnvelope(DbGeometry geometryValue);
    public virtual Byte[] AsBinary(DbGeometry geometryValue);
    public virtual string AsGml(DbGeometry geometryValue);
    public virtual string AsText(DbGeometry geometryValue);
    public virtual bool GetIsEmpty(DbGeometry geometryValue);
    public virtual bool GetIsSimple(DbGeometry geometryValue);
    public virtual DbGeometry GetBoundary(DbGeometry geometryValue);
    public virtual bool GetIsValid(DbGeometry geometryValue);
    public virtual bool SpatialEquals(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual bool Disjoint(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual bool Intersects(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual bool Touches(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual bool Crosses(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual bool Within(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual bool Contains(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual bool Overlaps(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual bool Relate(DbGeometry geometryValue1, DbGeometry geometryValue2, string matrix);
    public virtual DbGeometry Buffer(DbGeometry geometryValue, double distance);
    public virtual double Distance(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual DbGeometry GetConvexHull(DbGeometry geometryValue);
    public virtual DbGeometry Intersection(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual DbGeometry Union(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual DbGeometry Difference(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual DbGeometry SymmetricDifference(DbGeometry geometryValue1, DbGeometry geometryValue2);
    public virtual Nullable`1<int> GetElementCount(DbGeometry geometryValue);
    public virtual DbGeometry ElementAt(DbGeometry geometryValue, int nValue);
    public virtual Nullable`1<double> GetXCoordinate(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetYCoordinate(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetElevation(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetMeasure(DbGeometry geometryValue);
    public virtual Nullable`1<double> GetLength(DbGeometry geometryValue);
    public virtual DbGeometry GetStartPoint(DbGeometry geometryValue);
    public virtual DbGeometry GetEndPoint(DbGeometry geometryValue);
    public virtual Nullable`1<bool> GetIsClosed(DbGeometry geometryValue);
    public virtual Nullable`1<bool> GetIsRing(DbGeometry geometryValue);
    public virtual Nullable`1<int> GetPointCount(DbGeometry geometryValue);
    public virtual DbGeometry PointAt(DbGeometry geometryValue, int nValue);
    public virtual Nullable`1<double> GetArea(DbGeometry geometryValue);
    public virtual DbGeometry GetCentroid(DbGeometry geometryValue);
    public virtual DbGeometry GetPointOnSurface(DbGeometry geometryValue);
    public virtual DbGeometry GetExteriorRing(DbGeometry geometryValue);
    public virtual Nullable`1<int> GetInteriorRingCount(DbGeometry geometryValue);
    public virtual DbGeometry InteriorRingAt(DbGeometry geometryValue, int nValue);
}
internal class System.Data.SqlClient.SqlTypesAssembly : object {
    internal static SqlTypesAssembly Latest { get; }
    internal Type SqlBooleanType { get; private set; }
    internal Type SqlBytesType { get; private set; }
    internal Type SqlCharsType { get; private set; }
    internal Type SqlStringType { get; private set; }
    internal Type SqlDoubleType { get; private set; }
    internal Type SqlInt32Type { get; private set; }
    internal Type SqlXmlType { get; private set; }
    internal Type SqlGeographyType { get; private set; }
    internal Type SqlGeometryType { get; private set; }
    private static SqlTypesAssembly();
    internal static bool TryGetSqlTypesAssembly(Assembly assembly, SqlTypesAssembly& sqlAssembly);
    internal static SqlTypesAssembly get_Latest();
    [CompilerGeneratedAttribute]
internal Type get_SqlBooleanType();
    [CompilerGeneratedAttribute]
private void set_SqlBooleanType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlBytesType();
    [CompilerGeneratedAttribute]
private void set_SqlBytesType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlCharsType();
    [CompilerGeneratedAttribute]
private void set_SqlCharsType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlStringType();
    [CompilerGeneratedAttribute]
private void set_SqlStringType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlDoubleType();
    [CompilerGeneratedAttribute]
private void set_SqlDoubleType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlInt32Type();
    [CompilerGeneratedAttribute]
private void set_SqlInt32Type(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlXmlType();
    [CompilerGeneratedAttribute]
private void set_SqlXmlType(Type value);
    internal bool SqlBooleanToBoolean(object sqlBooleanValue);
    internal Nullable`1<bool> SqlBooleanToNullableBoolean(object sqlBooleanValue);
    internal object SqlBytesFromByteArray(Byte[] binaryValue);
    internal Byte[] SqlBytesToByteArray(object sqlBytesValue);
    internal object SqlStringFromString(string stringValue);
    internal object SqlCharsFromString(string stringValue);
    internal string SqlCharsToString(object sqlCharsValue);
    internal string SqlStringToString(object sqlStringValue);
    internal double SqlDoubleToDouble(object sqlDoubleValue);
    internal Nullable`1<double> SqlDoubleToNullableDouble(object sqlDoubleValue);
    internal int SqlInt32ToInt(object sqlInt32Value);
    internal Nullable`1<int> SqlInt32ToNullableInt(object sqlInt32Value);
    internal object SqlXmlFromString(string stringValue);
    internal string SqlXmlToString(object sqlXmlValue);
    internal bool IsSqlGeographyNull(object sqlGeographyValue);
    internal bool IsSqlGeometryNull(object sqlGeometryValue);
    internal string GeographyAsTextZM(DbGeography geographyValue);
    internal string GeometryAsTextZM(DbGeometry geometryValue);
    [CompilerGeneratedAttribute]
internal Type get_SqlGeographyType();
    [CompilerGeneratedAttribute]
private void set_SqlGeographyType(Type value);
    [CompilerGeneratedAttribute]
internal Type get_SqlGeometryType();
    [CompilerGeneratedAttribute]
private void set_SqlGeometryType(Type value);
    internal object ConvertToSqlTypesGeography(DbGeography geographyValue);
    internal object SqlTypesGeographyFromBinary(Byte[] wellKnownBinary, int srid);
    internal object SqlTypesGeographyFromText(string wellKnownText, int srid);
    internal object ConvertToSqlTypesGeometry(DbGeometry geometryValue);
    internal object SqlTypesGeometryFromBinary(Byte[] wellKnownBinary, int srid);
    internal object SqlTypesGeometryFromText(string wellKnownText, int srid);
}
internal enum System.Data.SqlClient.SqlVersion : Enum {
    public int value__;
    public static SqlVersion Sql8;
    public static SqlVersion Sql9;
    public static SqlVersion Sql10;
}
internal static class System.Data.SqlClient.SqlVersionUtils : object {
    internal static SqlVersion GetSqlVersion(SqlConnection connection);
    internal static string GetVersionHint(SqlVersion version);
    internal static SqlVersion GetSqlVersion(string versionHint);
    internal static bool IsPreKatmai(SqlVersion sqlVersion);
}
public class System.Data.UpdateException : DataException {
    public ReadOnlyCollection`1<ObjectStateEntry> StateEntries { get; }
    public UpdateException(string message);
    public UpdateException(string message, Exception innerException);
    public UpdateException(string message, Exception innerException, IEnumerable`1<ObjectStateEntry> stateEntries);
    protected UpdateException(SerializationInfo info, StreamingContext context);
    public ReadOnlyCollection`1<ObjectStateEntry> get_StateEntries();
}
internal static class System.HResults : object {
    internal static int Configuration;
    internal static int Xml;
    internal static int XmlSchema;
    internal static int XmlXslt;
    internal static int XmlXPath;
    internal static int Data;
    internal static int DataDeletedRowInaccessible;
    internal static int DataDuplicateName;
    internal static int DataInRowChangingEvent;
    internal static int DataInvalidConstraint;
    internal static int DataMissingPrimaryKey;
    internal static int DataNoNullAllowed;
    internal static int DataReadOnly;
    internal static int DataRowNotInTable;
    internal static int DataVersionNotFound;
    internal static int DataConstraint;
    internal static int StrongTyping;
    internal static int SqlType;
    internal static int SqlNullValue;
    internal static int SqlTruncate;
    internal static int AdapterMapping;
    internal static int DataAdapter;
    internal static int DBConcurrency;
    internal static int OperationAborted;
    internal static int InvalidUdt;
    internal static int Metadata;
    internal static int InvalidQuery;
    internal static int CommandCompilation;
    internal static int CommandExecution;
    internal static int SqlException;
    internal static int OdbcException;
    internal static int OracleException;
    internal static int ConnectionPlanException;
    internal static int NteBadKeySet;
    internal static int Win32AccessDenied;
    internal static int Win32InvalidHandle;
    internal static int License;
    internal static int InternalBufferOverflow;
    internal static int ServiceControllerTimeout;
    internal static int Install;
    internal static int EFail;
}
internal abstract class System.Linq.Expressions.EntityExpressionVisitor : object {
    internal static ExpressionType CustomExpression;
    internal virtual Expression Visit(Expression exp);
    internal virtual MemberBinding VisitBinding(MemberBinding binding);
    internal virtual ElementInit VisitElementInitializer(ElementInit initializer);
    internal virtual Expression VisitUnary(UnaryExpression u);
    internal virtual Expression VisitBinary(BinaryExpression b);
    internal virtual Expression VisitTypeIs(TypeBinaryExpression b);
    internal virtual Expression VisitConstant(ConstantExpression c);
    internal virtual Expression VisitConditional(ConditionalExpression c);
    internal virtual Expression VisitParameter(ParameterExpression p);
    internal virtual Expression VisitMemberAccess(MemberExpression m);
    internal virtual Expression VisitMethodCall(MethodCallExpression m);
    internal virtual ReadOnlyCollection`1<Expression> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    internal virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment);
    internal virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding);
    internal virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding);
    internal virtual IEnumerable`1<MemberBinding> VisitBindingList(ReadOnlyCollection`1<MemberBinding> original);
    internal virtual IEnumerable`1<ElementInit> VisitElementInitializerList(ReadOnlyCollection`1<ElementInit> original);
    internal virtual Expression VisitLambda(LambdaExpression lambda);
    internal virtual NewExpression VisitNew(NewExpression nex);
    internal virtual Expression VisitMemberInit(MemberInitExpression init);
    internal virtual Expression VisitListInit(ListInitExpression init);
    internal virtual Expression VisitNewArray(NewArrayExpression na);
    internal virtual Expression VisitInvocation(InvocationExpression iv);
    internal virtual Expression VisitExtension(Expression ext);
    internal static Expression Visit(Expression exp, Func`3<Expression, Func`2<Expression, Expression>, Expression> visit);
}
internal static class System.Linq.Expressions.Internal.Error : object {
    internal static Exception UnhandledExpressionType(ExpressionType expressionType);
    internal static Exception UnhandledBindingType(MemberBindingType memberBindingType);
}
[ExtensionAttribute]
internal static class System.Linq.Expressions.Internal.ReadOnlyCollectionExtensions : object {
    [ExtensionAttribute]
internal static ReadOnlyCollection`1<T> ToReadOnlyCollection(IEnumerable`1<T> sequence);
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
