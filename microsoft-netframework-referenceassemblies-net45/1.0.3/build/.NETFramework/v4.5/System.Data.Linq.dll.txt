internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemThreadingTasksDataflow;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemNetHttp;
    internal static string SystemNetHttpWebRequest;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemRuntimeWindowsRuntime;
    internal static string SystemRuntimeWindowsRuntimeUIXaml;
    internal static string SystemSecurity;
    internal static string SystemServiceModelWeb;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal class LinqToSqlShared.Mapping.AssociationMapping : MemberMapping {
    internal string ThisKey { get; internal set; }
    internal string OtherKey { get; internal set; }
    internal string DeleteRule { get; internal set; }
    internal bool DeleteOnNull { get; internal set; }
    internal bool IsForeignKey { get; internal set; }
    internal string XmlIsForeignKey { get; internal set; }
    internal string XmlDeleteOnNull { get; internal set; }
    internal bool IsUnique { get; internal set; }
    internal string XmlIsUnique { get; internal set; }
    internal string get_ThisKey();
    internal void set_ThisKey(string value);
    internal string get_OtherKey();
    internal void set_OtherKey(string value);
    internal string get_DeleteRule();
    internal void set_DeleteRule(string value);
    internal bool get_DeleteOnNull();
    internal void set_DeleteOnNull(bool value);
    internal bool get_IsForeignKey();
    internal void set_IsForeignKey(bool value);
    internal string get_XmlIsForeignKey();
    internal void set_XmlIsForeignKey(string value);
    internal string get_XmlDeleteOnNull();
    internal void set_XmlDeleteOnNull(string value);
    internal bool get_IsUnique();
    internal void set_IsUnique(bool value);
    internal string get_XmlIsUnique();
    internal void set_XmlIsUnique(string value);
}
internal class LinqToSqlShared.Mapping.ColumnMapping : MemberMapping {
    internal string DbType { get; internal set; }
    internal Nullable`1<bool> CanBeNull { get; internal set; }
    internal string XmlCanBeNull { get; internal set; }
    internal string Expression { get; internal set; }
    internal bool IsPrimaryKey { get; internal set; }
    internal string XmlIsPrimaryKey { get; internal set; }
    internal bool IsDbGenerated { get; internal set; }
    internal string XmlIsDbGenerated { get; internal set; }
    internal bool IsVersion { get; internal set; }
    internal string XmlIsVersion { get; internal set; }
    internal bool IsDiscriminator { get; internal set; }
    internal string XmlIsDiscriminator { get; internal set; }
    internal UpdateCheck UpdateCheck { get; internal set; }
    internal string XmlUpdateCheck { get; internal set; }
    internal AutoSync AutoSync { get; internal set; }
    internal string XmlAutoSync { get; internal set; }
    internal string get_DbType();
    internal void set_DbType(string value);
    internal Nullable`1<bool> get_CanBeNull();
    internal void set_CanBeNull(Nullable`1<bool> value);
    internal string get_XmlCanBeNull();
    internal void set_XmlCanBeNull(string value);
    internal string get_Expression();
    internal void set_Expression(string value);
    internal bool get_IsPrimaryKey();
    internal void set_IsPrimaryKey(bool value);
    internal string get_XmlIsPrimaryKey();
    internal void set_XmlIsPrimaryKey(string value);
    internal bool get_IsDbGenerated();
    internal void set_IsDbGenerated(bool value);
    internal string get_XmlIsDbGenerated();
    internal void set_XmlIsDbGenerated(string value);
    internal bool get_IsVersion();
    internal void set_IsVersion(bool value);
    internal string get_XmlIsVersion();
    internal void set_XmlIsVersion(string value);
    internal bool get_IsDiscriminator();
    internal void set_IsDiscriminator(bool value);
    internal string get_XmlIsDiscriminator();
    internal void set_XmlIsDiscriminator(string value);
    internal UpdateCheck get_UpdateCheck();
    internal void set_UpdateCheck(UpdateCheck value);
    internal string get_XmlUpdateCheck();
    internal void set_XmlUpdateCheck(string value);
    internal AutoSync get_AutoSync();
    internal void set_AutoSync(AutoSync value);
    internal string get_XmlAutoSync();
    internal void set_XmlAutoSync(string value);
}
internal class LinqToSqlShared.Mapping.DatabaseMapping : object {
    internal string DatabaseName { get; internal set; }
    internal string Provider { get; internal set; }
    internal List`1<TableMapping> Tables { get; }
    internal List`1<FunctionMapping> Functions { get; }
    internal string get_DatabaseName();
    internal void set_DatabaseName(string value);
    internal string get_Provider();
    internal void set_Provider(string value);
    internal List`1<TableMapping> get_Tables();
    internal List`1<FunctionMapping> get_Functions();
    internal TableMapping GetTable(string tableName);
    internal TableMapping GetTable(Type rowType);
    internal FunctionMapping GetFunction(string functionName);
}
internal class LinqToSqlShared.Mapping.FunctionMapping : object {
    internal string Name { get; internal set; }
    internal string MethodName { get; internal set; }
    internal bool IsComposable { get; internal set; }
    internal string XmlIsComposable { get; internal set; }
    internal List`1<ParameterMapping> Parameters { get; }
    internal List`1<TypeMapping> Types { get; }
    internal ReturnMapping FunReturn { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_MethodName();
    internal void set_MethodName(string value);
    internal bool get_IsComposable();
    internal void set_IsComposable(bool value);
    internal string get_XmlIsComposable();
    internal void set_XmlIsComposable(string value);
    internal List`1<ParameterMapping> get_Parameters();
    internal List`1<TypeMapping> get_Types();
    internal ReturnMapping get_FunReturn();
    internal void set_FunReturn(ReturnMapping value);
}
internal enum LinqToSqlShared.Mapping.MappingParameterDirection : Enum {
    public int value__;
    public static MappingParameterDirection In;
    public static MappingParameterDirection Out;
    public static MappingParameterDirection InOut;
}
internal static class LinqToSqlShared.Mapping.MappingSystem : object {
    internal static bool IsSupportedDiscriminatorType(Type type);
    internal static bool IsSupportedDiscriminatorType(SqlDbType type);
    internal static bool IsSupportedIdentityType(Type type);
    internal static bool IsSupportedIdentityType(SqlDbType type);
}
internal abstract class LinqToSqlShared.Mapping.MemberMapping : object {
    internal string DbName { get; internal set; }
    internal string MemberName { get; internal set; }
    internal string StorageMemberName { get; internal set; }
    internal string get_DbName();
    internal void set_DbName(string value);
    internal string get_MemberName();
    internal void set_MemberName(string value);
    internal string get_StorageMemberName();
    internal void set_StorageMemberName(string value);
}
internal class LinqToSqlShared.Mapping.ParameterMapping : object {
    internal string Name { get; internal set; }
    internal string ParameterName { get; internal set; }
    internal string DbType { get; internal set; }
    public string XmlDirection { get; public set; }
    public MappingParameterDirection Direction { get; public set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_ParameterName();
    internal void set_ParameterName(string value);
    internal string get_DbType();
    internal void set_DbType(string value);
    public string get_XmlDirection();
    public void set_XmlDirection(string value);
    public MappingParameterDirection get_Direction();
    public void set_Direction(MappingParameterDirection value);
}
internal class LinqToSqlShared.Mapping.ReturnMapping : object {
    internal string DbType { get; internal set; }
    internal string get_DbType();
    internal void set_DbType(string value);
}
internal class LinqToSqlShared.Mapping.TableMapping : object {
    internal string TableName { get; internal set; }
    internal string Member { get; internal set; }
    internal TypeMapping RowType { get; internal set; }
    internal string get_TableName();
    internal void set_TableName(string value);
    internal string get_Member();
    internal void set_Member(string value);
    internal TypeMapping get_RowType();
    internal void set_RowType(TypeMapping value);
}
internal class LinqToSqlShared.Mapping.TypeMapping : object {
    internal TypeMapping BaseType { get; internal set; }
    internal string Name { get; internal set; }
    internal List`1<MemberMapping> Members { get; }
    internal string InheritanceCode { get; internal set; }
    internal bool IsInheritanceDefault { get; internal set; }
    internal string XmlIsInheritanceDefault { get; internal set; }
    internal List`1<TypeMapping> DerivedTypes { get; }
    internal TypeMapping get_BaseType();
    internal void set_BaseType(TypeMapping value);
    internal string get_Name();
    internal void set_Name(string value);
    internal List`1<MemberMapping> get_Members();
    internal string get_InheritanceCode();
    internal void set_InheritanceCode(string value);
    internal bool get_IsInheritanceDefault();
    internal void set_IsInheritanceDefault(bool value);
    internal string get_XmlIsInheritanceDefault();
    internal void set_XmlIsInheritanceDefault(string value);
    internal List`1<TypeMapping> get_DerivedTypes();
}
internal class LinqToSqlShared.Mapping.XmlMappingConstant : object {
    internal static string Association;
    internal static string AutoSync;
    internal static string Column;
    internal static string Database;
    internal static string DbType;
    internal static string DeleteRule;
    internal static string DeleteOnNull;
    internal static string Direction;
    internal static string ElementType;
    internal static string Expression;
    internal static string False;
    internal static string Function;
    internal static string InheritanceCode;
    internal static string IsComposable;
    internal static string IsDbGenerated;
    internal static string IsDiscriminator;
    internal static string IsPrimaryKey;
    internal static string IsInheritanceDefault;
    internal static string IsForeignKey;
    internal static string IsUnique;
    internal static string IsVersion;
    internal static string MappingNamespace;
    internal static string Member;
    internal static string Method;
    internal static string Name;
    internal static string CanBeNull;
    internal static string OtherKey;
    internal static string Parameter;
    internal static string Provider;
    internal static string Return;
    internal static string Storage;
    internal static string Table;
    internal static string ThisKey;
    internal static string True;
    internal static string Type;
    internal static string UpdateCheck;
}
[DataContractAttribute]
public class System.Data.Linq.Binary : object {
    public int Length { get; }
    public Binary(Byte[] value);
    public Byte[] ToArray();
    public int get_Length();
    public static Binary op_Implicit(Byte[] value);
    public sealed virtual bool Equals(Binary other);
    public static bool op_Equality(Binary binary1, Binary binary2);
    public static bool op_Inequality(Binary binary1, Binary binary2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum System.Data.Linq.ChangeAction : Enum {
    public int value__;
    public static ChangeAction None;
    public static ChangeAction Delete;
    public static ChangeAction Insert;
    public static ChangeAction Update;
}
[DefaultMemberAttribute("Item")]
public class System.Data.Linq.ChangeConflictCollection : object {
    public int Count { get; }
    public ObjectChangeConflict Item { get; }
    private bool System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public ObjectChangeConflict get_Item(int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Data.Linq.ObjectChangeConflict>.Add(ObjectChangeConflict item);
    public sealed virtual bool Remove(ObjectChangeConflict item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ObjectChangeConflict item);
    public sealed virtual void CopyTo(ObjectChangeConflict[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<ObjectChangeConflict> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void ResolveAll(RefreshMode mode);
    public void ResolveAll(RefreshMode mode, bool autoResolveDeletes);
    internal void Fill(List`1<ObjectChangeConflict> conflictList);
}
public class System.Data.Linq.ChangeConflictException : Exception {
    public ChangeConflictException(string message);
    public ChangeConflictException(string message, Exception innerException);
}
internal class System.Data.Linq.ChangeConflictSession : object {
    internal DataContext Context { get; }
    internal DataContext RefreshContext { get; }
    internal ChangeConflictSession(DataContext context);
    internal DataContext get_Context();
    internal DataContext get_RefreshContext();
}
internal abstract class System.Data.Linq.ChangeDirector : object {
    internal abstract virtual int Insert(TrackedObject item);
    internal abstract virtual int DynamicInsert(TrackedObject item);
    internal abstract virtual void AppendInsertText(TrackedObject item, StringBuilder appendTo);
    internal abstract virtual int Update(TrackedObject item);
    internal abstract virtual int DynamicUpdate(TrackedObject item);
    internal abstract virtual void AppendUpdateText(TrackedObject item, StringBuilder appendTo);
    internal abstract virtual int Delete(TrackedObject item);
    internal abstract virtual int DynamicDelete(TrackedObject item);
    internal abstract virtual void AppendDeleteText(TrackedObject item, StringBuilder appendTo);
    internal abstract virtual void RollbackAutoSync();
    internal abstract virtual void ClearAutoSyncRollback();
    internal static ChangeDirector CreateChangeDirector(DataContext context);
}
internal class System.Data.Linq.ChangeProcessor : object {
    internal ChangeProcessor(CommonDataServices services, DataContext context);
    internal void SubmitChanges(ConflictMode failureMode);
    internal string GetChangeText();
    internal ChangeSet GetChangeSet();
    internal void TrackUntrackedObjects();
    internal void ApplyInferredDeletions();
    internal void ObserveUntrackedObjects();
}
public class System.Data.Linq.ChangeSet : object {
    public IList`1<object> Inserts { get; }
    public IList`1<object> Deletes { get; }
    public IList`1<object> Updates { get; }
    internal ChangeSet(ReadOnlyCollection`1<object> inserts, ReadOnlyCollection`1<object> deletes, ReadOnlyCollection`1<object> updates);
    public IList`1<object> get_Inserts();
    public IList`1<object> get_Deletes();
    public IList`1<object> get_Updates();
    public virtual string ToString();
}
internal abstract class System.Data.Linq.ChangeTracker : object {
    internal abstract virtual TrackedObject Track(object obj);
    internal abstract virtual TrackedObject Track(object obj, bool recurse);
    internal abstract virtual void FastTrack(object obj);
    internal abstract virtual bool IsTracked(object obj);
    internal abstract virtual TrackedObject GetTrackedObject(object obj);
    internal abstract virtual void StopTracking(object obj);
    internal abstract virtual void AcceptChanges();
    internal abstract virtual IEnumerable`1<TrackedObject> GetInterestingObjects();
    internal static ChangeTracker CreateChangeTracker(CommonDataServices dataServices, bool asReadOnly);
}
internal class System.Data.Linq.CommonDataServices : object {
    public DataContext Context { get; }
    public MetaModel Model { get; }
    internal IdentityManager IdentityManager { get; }
    internal ChangeTracker ChangeTracker { get; }
    internal ChangeDirector ChangeDirector { get; }
    internal bool HasCachedObjects { get; }
    internal CommonDataServices(DataContext context, MetaModel model);
    public sealed virtual DataContext get_Context();
    public sealed virtual MetaModel get_Model();
    internal void SetModel(MetaModel model);
    internal IdentityManager get_IdentityManager();
    internal ChangeTracker get_ChangeTracker();
    internal ChangeDirector get_ChangeDirector();
    internal IEnumerable`1<RelatedItem> GetParents(MetaType type, object item);
    internal IEnumerable`1<RelatedItem> GetChildren(MetaType type, object item);
    internal void ResetServices();
    internal static Object[] GetKeyValues(MetaType type, object instance);
    internal static Object[] GetForeignKeyValues(MetaAssociation association, object instance);
    internal object GetCachedObject(MetaType type, Object[] keyValues);
    internal object GetCachedObjectLike(MetaType type, object instance);
    public sealed virtual bool IsCachedObject(MetaType type, object instance);
    public sealed virtual object InsertLookupCachedObject(MetaType type, object instance);
    public bool RemoveCachedObjectLike(MetaType type, object instance);
    public sealed virtual void OnEntityMaterialized(MetaType type, object instance);
    internal Expression GetObjectQuery(MetaType type, Object[] keyValues);
    internal Expression GetObjectQuery(MetaType type, Expression[] keyValues);
    internal Expression GetDataMemberQuery(MetaDataMember member, Expression[] keyValues);
    public sealed virtual IDeferredSourceFactory GetDeferredSourceFactory(MetaDataMember member);
    internal bool get_HasCachedObjects();
    public sealed virtual object GetCachedObject(Expression query);
    internal Object[] GetKeyValues(MetaType type, LambdaExpression predicate);
    internal object GetObjectByKey(MetaType type, Object[] keyValues);
}
public class System.Data.Linq.CompiledQuery : object {
    public LambdaExpression Expression { get; }
    public LambdaExpression get_Expression();
    public static Func`2<TArg0, TResult> Compile(Expression`1<Func`2<TArg0, TResult>> query);
    public static Func`3<TArg0, TArg1, TResult> Compile(Expression`1<Func`3<TArg0, TArg1, TResult>> query);
    public static Func`4<TArg0, TArg1, TArg2, TResult> Compile(Expression`1<Func`4<TArg0, TArg1, TArg2, TResult>> query);
    public static Func`5<TArg0, TArg1, TArg2, TArg3, TResult> Compile(Expression`1<Func`5<TArg0, TArg1, TArg2, TArg3, TResult>> query);
    public static Func`6<TArg0, TArg1, TArg2, TArg3, TArg4, TResult> Compile(Expression`1<Func`6<TArg0, TArg1, TArg2, TArg3, TArg4, TResult>> query);
    public static Func`7<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Compile(Expression`1<Func`7<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> query);
    public static Func`8<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> Compile(Expression`1<Func`8<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>> query);
    public static Func`9<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> Compile(Expression`1<Func`9<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>> query);
    public static Func`10<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult> Compile(Expression`1<Func`10<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>> query);
    public static Func`11<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult> Compile(Expression`1<Func`11<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>> query);
    public static Func`12<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult> Compile(Expression`1<Func`12<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>> query);
    public static Func`13<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult> Compile(Expression`1<Func`13<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>> query);
    public static Func`14<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult> Compile(Expression`1<Func`14<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>> query);
    public static Func`15<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult> Compile(Expression`1<Func`15<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>> query);
    public static Func`16<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult> Compile(Expression`1<Func`16<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>> query);
    public static Func`17<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult> Compile(Expression`1<Func`17<TArg0, TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>> query);
}
public enum System.Data.Linq.ConflictMode : Enum {
    public int value__;
    public static ConflictMode FailOnFirstConflict;
    public static ConflictMode ContinueOnConflict;
}
public class System.Data.Linq.DataContext : object {
    internal CommonDataServices Services { get; }
    public DbConnection Connection { get; }
    public DbTransaction Transaction { get; public set; }
    public int CommandTimeout { get; public set; }
    public TextWriter Log { get; public set; }
    public bool ObjectTrackingEnabled { get; public set; }
    public bool DeferredLoadingEnabled { get; public set; }
    public MetaModel Mapping { get; }
    internal IProvider Provider { get; }
    public DataLoadOptions LoadOptions { get; public set; }
    public ChangeConflictCollection ChangeConflicts { get; }
    public DataContext(string fileOrServerOrConnection);
    public DataContext(string fileOrServerOrConnection, MappingSource mapping);
    public DataContext(IDbConnection connection);
    public DataContext(IDbConnection connection, MappingSource mapping);
    internal DataContext(DataContext context);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void CheckDispose();
    internal object Clone();
    internal void ClearCache();
    internal CommonDataServices get_Services();
    public DbConnection get_Connection();
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    public int get_CommandTimeout();
    public void set_CommandTimeout(int value);
    public TextWriter get_Log();
    public void set_Log(TextWriter value);
    public bool get_ObjectTrackingEnabled();
    public void set_ObjectTrackingEnabled(bool value);
    public bool get_DeferredLoadingEnabled();
    public void set_DeferredLoadingEnabled(bool value);
    public MetaModel get_Mapping();
    internal void VerifyTrackingEnabled();
    internal void CheckNotInSubmitChanges();
    internal void CheckInSubmitChanges();
    public Table`1<TEntity> GetTable();
    public ITable GetTable(Type type);
    internal IProvider get_Provider();
    public bool DatabaseExists();
    public void CreateDatabase();
    public void DeleteDatabase();
    public void SubmitChanges();
    public virtual void SubmitChanges(ConflictMode failureMode);
    public void Refresh(RefreshMode mode, object entity);
    public void Refresh(RefreshMode mode, Object[] entities);
    public void Refresh(RefreshMode mode, IEnumerable entities);
    internal DataContext CreateRefreshContext();
    internal string GetQueryText(IQueryable query);
    public DbCommand GetCommand(IQueryable query);
    internal string GetChangeText();
    public ChangeSet GetChangeSet();
    public int ExecuteCommand(string command, Object[] parameters);
    public IEnumerable`1<TResult> ExecuteQuery(string query, Object[] parameters);
    public IEnumerable ExecuteQuery(Type elementType, string query, Object[] parameters);
    protected internal IExecuteResult ExecuteMethodCall(object instance, MethodInfo methodInfo, Object[] parameters);
    protected internal IQueryable`1<TResult> CreateMethodCallQuery(object instance, MethodInfo methodInfo, Object[] parameters);
    protected internal void ExecuteDynamicInsert(object entity);
    protected internal void ExecuteDynamicUpdate(object entity);
    protected internal void ExecuteDynamicDelete(object entity);
    public IEnumerable`1<TResult> Translate(DbDataReader reader);
    public IEnumerable Translate(Type elementType, DbDataReader reader);
    public IMultipleResults Translate(DbDataReader reader);
    internal void ResetLoadOptions();
    public DataLoadOptions get_LoadOptions();
    public void set_LoadOptions(DataLoadOptions value);
    public ChangeConflictCollection get_ChangeConflicts();
}
public class System.Data.Linq.DataLoadOptions : object {
    internal bool IsEmpty { get; }
    public void LoadWith(Expression`1<Func`2<T, object>> expression);
    public void LoadWith(LambdaExpression expression);
    public void AssociateWith(Expression`1<Func`2<T, object>> expression);
    public void AssociateWith(LambdaExpression expression);
    internal bool IsPreloaded(MemberInfo member);
    internal static bool ShapesAreEquivalent(DataLoadOptions ds1, DataLoadOptions ds2);
    internal LambdaExpression GetAssociationSubquery(MemberInfo member);
    internal void Freeze();
    internal void Preload(MemberInfo association);
    internal bool get_IsEmpty();
}
internal class System.Data.Linq.DataQuery`1 : object {
    private Expression System.Linq.IQueryable.Expression { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public DataQuery`1(DataContext context, Expression expression);
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable`1<S> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override S System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    internal IBindingList GetNewBindingList();
    public virtual string ToString();
}
public static class System.Data.Linq.DBConvert : object {
    private static DBConvert();
    public static T ChangeType(object value);
    public static object ChangeType(object value, Type type);
}
public class System.Data.Linq.DuplicateKeyException : InvalidOperationException {
    public object Object { get; }
    public DuplicateKeyException(object duplicate);
    public DuplicateKeyException(object duplicate, string message);
    public DuplicateKeyException(object duplicate, string message, Exception innerException);
    public object get_Object();
}
public class System.Data.Linq.EntityRef`1 : ValueType {
    private IEnumerable`1<TEntity> source;
    private TEntity entity;
    public TEntity Entity { get; public set; }
    public bool HasLoadedOrAssignedValue { get; }
    internal bool HasValue { get; }
    internal bool HasLoadedValue { get; }
    internal bool HasAssignedValue { get; }
    internal bool HasSource { get; }
    internal IEnumerable`1<TEntity> Source { get; }
    internal TEntity UnderlyingValue { get; }
    public EntityRef`1(TEntity entity);
    public EntityRef`1(IEnumerable`1<TEntity> source);
    public EntityRef`1(EntityRef`1<TEntity> entityRef);
    public TEntity get_Entity();
    public void set_Entity(TEntity value);
    public bool get_HasLoadedOrAssignedValue();
    internal bool get_HasValue();
    internal bool get_HasLoadedValue();
    internal bool get_HasAssignedValue();
    internal bool get_HasSource();
    internal IEnumerable`1<TEntity> get_Source();
    internal TEntity get_UnderlyingValue();
}
[DefaultMemberAttribute("Item")]
public class System.Data.Linq.EntitySet`1 : object {
    public int Count { get; }
    public TEntity Item { get; public set; }
    public bool IsDeferred { get; }
    internal bool HasValues { get; }
    public bool HasLoadedOrAssignedValues { get; }
    internal bool HasAssignedValues { get; }
    internal bool HasLoadedValues { get; }
    internal bool HasSource { get; }
    internal bool IsLoaded { get; }
    internal IEnumerable`1<TEntity> Source { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.Generic.ICollection<TEntity>.IsReadOnly { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public EntitySet`1(Action`1<TEntity> onAdd, Action`1<TEntity> onRemove);
    internal EntitySet`1(EntitySet`1<TEntity> es, bool copyNotifications);
    public sealed virtual int get_Count();
    public sealed virtual TEntity get_Item(int index);
    public sealed virtual void set_Item(int index, TEntity value);
    public sealed virtual void Add(TEntity entity);
    public void AddRange(IEnumerable`1<TEntity> collection);
    public void Assign(IEnumerable`1<TEntity> entitySource);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(TEntity entity);
    public sealed virtual void CopyTo(TEntity[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<TEntity> GetEnumerator();
    internal IEnumerable`1<TEntity> GetUnderlyingValues();
    public sealed virtual int IndexOf(TEntity entity);
    public sealed virtual void Insert(int index, TEntity entity);
    public bool get_IsDeferred();
    internal bool get_HasValues();
    public bool get_HasLoadedOrAssignedValues();
    internal bool get_HasAssignedValues();
    internal bool get_HasLoadedValues();
    internal bool get_HasSource();
    internal bool get_IsLoaded();
    internal IEnumerable`1<TEntity> get_Source();
    public void Load();
    public sealed virtual bool Remove(TEntity entity);
    public sealed virtual void RemoveAt(int index);
    public void SetSource(IEnumerable`1<TEntity> entitySource);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.Generic.ICollection<TEntity>.get_IsReadOnly();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void add_ListChanged(ListChangedEventHandler value);
    public void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    public IBindingList GetNewBindingList();
}
internal class System.Data.Linq.EntitySetBindingList`1 : SortableBindingList`1<TEntity> {
    internal EntitySetBindingList`1(IList`1<TEntity> sequence, EntitySet`1<TEntity> data);
    protected virtual object AddNewCore();
    protected virtual void InsertItem(int index, TEntity item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, TEntity item);
    protected virtual void ClearItems();
    public virtual void EndNew(int itemIndex);
    public virtual void CancelNew(int itemIndex);
}
internal static class System.Data.Linq.Error : object {
    internal static Exception CannotAddChangeConflicts();
    internal static Exception CannotRemoveChangeConflicts();
    internal static Exception InconsistentAssociationAndKeyChange(object p0, object p1);
    internal static Exception UnableToDetermineDataContext();
    internal static Exception ArgumentTypeHasNoIdentityKey(object p0);
    internal static Exception CouldNotConvert(object p0, object p1);
    internal static Exception CannotRemoveUnattachedEntity();
    internal static Exception ColumnMappedMoreThanOnce(object p0);
    internal static Exception CouldNotAttach();
    internal static Exception CouldNotGetTableForSubtype(object p0, object p1);
    internal static Exception CouldNotRemoveRelationshipBecauseOneSideCannotBeNull(object p0, object p1, object p2);
    internal static Exception EntitySetAlreadyLoaded();
    internal static Exception EntitySetModifiedDuringEnumeration();
    internal static Exception ExpectedQueryableArgument(object p0, object p1);
    internal static Exception ExpectedUpdateDeleteOrChange();
    internal static Exception KeyIsWrongSize(object p0, object p1);
    internal static Exception KeyValueIsWrongType(object p0, object p1);
    internal static Exception IdentityChangeNotAllowed(object p0, object p1);
    internal static Exception DbGeneratedChangeNotAllowed(object p0, object p1);
    internal static Exception ModifyDuringAddOrRemove();
    internal static Exception ProviderDoesNotImplementRequiredInterface(object p0, object p1);
    internal static Exception ProviderTypeNull();
    internal static Exception TypeCouldNotBeAdded(object p0);
    internal static Exception TypeCouldNotBeRemoved(object p0);
    internal static Exception TypeCouldNotBeTracked(object p0);
    internal static Exception TypeIsNotEntity(object p0);
    internal static Exception UnrecognizedRefreshObject();
    internal static Exception UnhandledExpressionType(object p0);
    internal static Exception UnhandledBindingType(object p0);
    internal static Exception ObjectTrackingRequired();
    internal static Exception OptionsCannotBeModifiedAfterQuery();
    internal static Exception DeferredLoadingRequiresObjectTracking();
    internal static Exception SubqueryDoesNotSupportOperator(object p0);
    internal static Exception SubqueryNotSupportedOn(object p0);
    internal static Exception SubqueryNotSupportedOnType(object p0, object p1);
    internal static Exception SubqueryNotAllowedAfterFreeze();
    internal static Exception IncludeNotAllowedAfterFreeze();
    internal static Exception LoadOptionsChangeNotAllowedAfterQuery();
    internal static Exception IncludeCycleNotAllowed();
    internal static Exception SubqueryMustBeSequence();
    internal static Exception RefreshOfDeletedObject();
    internal static Exception RefreshOfNewObject();
    internal static Exception CannotChangeInheritanceType(object p0, object p1, object p2, object p3);
    internal static Exception DataContextCannotBeUsedAfterDispose();
    internal static Exception TypeIsNotMarkedAsTable(object p0);
    internal static Exception NonEntityAssociationMapping(object p0, object p1, object p2);
    internal static Exception CannotPerformCUDOnReadOnlyTable(object p0);
    internal static Exception CycleDetected();
    internal static Exception CantAddAlreadyExistingItem();
    internal static Exception InsertAutoSyncFailure();
    internal static Exception EntitySetDataBindingWithAbstractBaseClass(object p0);
    internal static Exception EntitySetDataBindingWithNonPublicDefaultConstructor(object p0);
    internal static Exception InvalidLoadOptionsLoadMemberSpecification();
    internal static Exception EntityIsTheWrongType();
    internal static Exception OriginalEntityIsWrongType();
    internal static Exception CannotAttachAlreadyExistingEntity();
    internal static Exception CannotAttachAsModifiedWithoutOriginalState();
    internal static Exception CannotPerformOperationDuringSubmitChanges();
    internal static Exception CannotPerformOperationOutsideSubmitChanges();
    internal static Exception CannotPerformOperationForUntrackedObject();
    internal static Exception CannotAttachAddNonNewEntities();
    internal static Exception QueryWasCompiledForDifferentMappingSource();
    internal static Exception ArgumentNull(string paramName);
    internal static Exception ArgumentOutOfRange(string paramName);
    internal static Exception NotImplemented();
    internal static Exception NotSupported();
}
public class System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException : InvalidOperationException {
    public ForeignKeyReferenceAlreadyHasValueException(string message);
    public ForeignKeyReferenceAlreadyHasValueException(string message, Exception innerException);
}
internal abstract class System.Data.Linq.IdentityManager : object {
    internal abstract virtual object InsertLookup(MetaType type, object instance);
    internal abstract virtual bool RemoveLike(MetaType type, object instance);
    internal abstract virtual object Find(MetaType type, Object[] keyValues);
    internal abstract virtual object FindLike(MetaType type, object instance);
    internal static IdentityManager CreateIdentityManager(bool asReadOnly);
}
public interface System.Data.Linq.IExecuteResult {
    public object ReturnValue { get; }
    public abstract virtual object get_ReturnValue();
    public abstract virtual object GetParameterValue(int parameterIndex);
}
public interface System.Data.Linq.IFunctionResult {
    public object ReturnValue { get; }
    public abstract virtual object get_ReturnValue();
}
public interface System.Data.Linq.IMultipleResults {
    public abstract virtual IEnumerable`1<TElement> GetResult();
}
public interface System.Data.Linq.ISingleResult`1 {
}
public interface System.Data.Linq.ITable {
    public DataContext Context { get; }
    public bool IsReadOnly { get; }
    public abstract virtual DataContext get_Context();
    public abstract virtual void InsertOnSubmit(object entity);
    public abstract virtual void InsertAllOnSubmit(IEnumerable entities);
    public abstract virtual void Attach(object entity);
    public abstract virtual void Attach(object entity, bool asModified);
    public abstract virtual void Attach(object entity, object original);
    public abstract virtual void AttachAll(IEnumerable entities);
    public abstract virtual void AttachAll(IEnumerable entities, bool asModified);
    public abstract virtual void DeleteOnSubmit(object entity);
    public abstract virtual void DeleteAllOnSubmit(IEnumerable entities);
    public abstract virtual object GetOriginalEntityState(object entity);
    public abstract virtual ModifiedMemberInfo[] GetModifiedMembers(object entity);
    public abstract virtual bool get_IsReadOnly();
}
public interface System.Data.Linq.ITable`1 {
    public abstract virtual void InsertOnSubmit(TEntity entity);
    public abstract virtual void Attach(TEntity entity);
    public abstract virtual void DeleteOnSubmit(TEntity entity);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Linq.ItemList`1 : ValueType {
    private T[] items;
    private int count;
    public int Count { get; }
    public T[] Items { get; }
    public T Item { get; public set; }
    public int get_Count();
    public T[] get_Items();
    public T get_Item(int index);
    public void set_Item(int index, T value);
    public void Add(T item);
    public bool Contains(T item);
    public Enumerator<T> GetEnumerator();
    public bool Include(T item);
    public int IndexOf(T item);
    public void Insert(int index, T item);
    public int LastIndexOf(T item);
    public bool Remove(T item);
    public void RemoveAt(int index);
}
public class System.Data.Linq.Link`1 : ValueType {
    private T underlyingValue;
    private IEnumerable`1<T> source;
    public bool HasValue { get; }
    public bool HasLoadedOrAssignedValue { get; }
    internal bool HasLoadedValue { get; }
    internal bool HasAssignedValue { get; }
    internal T UnderlyingValue { get; }
    internal IEnumerable`1<T> Source { get; }
    internal bool HasSource { get; }
    public T Value { get; public set; }
    public Link`1(T value);
    public Link`1(IEnumerable`1<T> source);
    public Link`1(Link`1<T> link);
    public bool get_HasValue();
    public bool get_HasLoadedOrAssignedValue();
    internal bool get_HasLoadedValue();
    internal bool get_HasAssignedValue();
    internal T get_UnderlyingValue();
    internal IEnumerable`1<T> get_Source();
    internal bool get_HasSource();
    public T get_Value();
    public void set_Value(T value);
}
[AttributeUsageAttribute("384")]
public class System.Data.Linq.Mapping.AssociationAttribute : DataAttribute {
    public string ThisKey { get; public set; }
    public string OtherKey { get; public set; }
    public bool IsUnique { get; public set; }
    public bool IsForeignKey { get; public set; }
    public string DeleteRule { get; public set; }
    public bool DeleteOnNull { get; public set; }
    public string get_ThisKey();
    public void set_ThisKey(string value);
    public string get_OtherKey();
    public void set_OtherKey(string value);
    public bool get_IsUnique();
    public void set_IsUnique(bool value);
    public bool get_IsForeignKey();
    public void set_IsForeignKey(bool value);
    public string get_DeleteRule();
    public void set_DeleteRule(string value);
    public bool get_DeleteOnNull();
    public void set_DeleteOnNull(bool value);
}
internal class System.Data.Linq.Mapping.AttributedMetaAssociation : MetaAssociationImpl {
    public MetaType OtherType { get; }
    public MetaDataMember ThisMember { get; }
    public MetaDataMember OtherMember { get; }
    public ReadOnlyCollection`1<MetaDataMember> ThisKey { get; }
    public ReadOnlyCollection`1<MetaDataMember> OtherKey { get; }
    public bool ThisKeyIsPrimaryKey { get; }
    public bool OtherKeyIsPrimaryKey { get; }
    public bool IsMany { get; }
    public bool IsForeignKey { get; }
    public bool IsUnique { get; }
    public bool IsNullable { get; }
    public string DeleteRule { get; }
    public bool DeleteOnNull { get; }
    internal AttributedMetaAssociation(AttributedMetaDataMember member, AssociationAttribute attr);
    public virtual MetaType get_OtherType();
    public virtual MetaDataMember get_ThisMember();
    public virtual MetaDataMember get_OtherMember();
    public virtual ReadOnlyCollection`1<MetaDataMember> get_ThisKey();
    public virtual ReadOnlyCollection`1<MetaDataMember> get_OtherKey();
    public virtual bool get_ThisKeyIsPrimaryKey();
    public virtual bool get_OtherKeyIsPrimaryKey();
    public virtual bool get_IsMany();
    public virtual bool get_IsForeignKey();
    public virtual bool get_IsUnique();
    public virtual bool get_IsNullable();
    public virtual string get_DeleteRule();
    public virtual bool get_DeleteOnNull();
}
internal class System.Data.Linq.Mapping.AttributedMetaDataMember : MetaDataMember {
    public MetaType DeclaringType { get; }
    public MemberInfo Member { get; }
    public MemberInfo StorageMember { get; }
    public string Name { get; }
    public int Ordinal { get; }
    public Type Type { get; }
    public MetaAccessor MemberAccessor { get; }
    public MetaAccessor StorageAccessor { get; }
    public MetaAccessor DeferredValueAccessor { get; }
    public MetaAccessor DeferredSourceAccessor { get; }
    public bool IsDeferred { get; }
    public bool IsPersistent { get; }
    public bool IsAssociation { get; }
    public bool IsPrimaryKey { get; }
    public bool IsDbGenerated { get; }
    public bool IsVersion { get; }
    public bool IsDiscriminator { get; }
    public bool CanBeNull { get; }
    public string DbType { get; }
    public string Expression { get; }
    public string MappedName { get; }
    public UpdateCheck UpdateCheck { get; }
    public AutoSync AutoSync { get; }
    public MetaAssociation Association { get; }
    public MethodInfo LoadMethod { get; }
    internal AttributedMetaDataMember(AttributedMetaType metaType, MemberInfo mi, int ordinal);
    public virtual MetaType get_DeclaringType();
    public virtual bool IsDeclaredBy(MetaType declaringMetaType);
    public virtual MemberInfo get_Member();
    public virtual MemberInfo get_StorageMember();
    public virtual string get_Name();
    public virtual int get_Ordinal();
    public virtual Type get_Type();
    public virtual MetaAccessor get_MemberAccessor();
    public virtual MetaAccessor get_StorageAccessor();
    public virtual MetaAccessor get_DeferredValueAccessor();
    public virtual MetaAccessor get_DeferredSourceAccessor();
    public virtual bool get_IsDeferred();
    public virtual bool get_IsPersistent();
    public virtual bool get_IsAssociation();
    public virtual bool get_IsPrimaryKey();
    public virtual bool get_IsDbGenerated();
    public virtual bool get_IsVersion();
    public virtual bool get_IsDiscriminator();
    public virtual bool get_CanBeNull();
    public virtual string get_DbType();
    public virtual string get_Expression();
    public virtual string get_MappedName();
    public virtual UpdateCheck get_UpdateCheck();
    public virtual AutoSync get_AutoSync();
    public virtual MetaAssociation get_Association();
    public virtual MethodInfo get_LoadMethod();
    public virtual string ToString();
}
internal class System.Data.Linq.Mapping.AttributedMetaFunction : MetaFunction {
    public MetaModel Model { get; }
    public MethodInfo Method { get; }
    public string Name { get; }
    public string MappedName { get; }
    public bool IsComposable { get; }
    public ReadOnlyCollection`1<MetaParameter> Parameters { get; }
    public MetaParameter ReturnParameter { get; }
    public bool HasMultipleResults { get; }
    public ReadOnlyCollection`1<MetaType> ResultRowTypes { get; }
    public AttributedMetaFunction(AttributedMetaModel model, MethodInfo mi);
    private static AttributedMetaFunction();
    public virtual MetaModel get_Model();
    public virtual MethodInfo get_Method();
    public virtual string get_Name();
    public virtual string get_MappedName();
    public virtual bool get_IsComposable();
    public virtual ReadOnlyCollection`1<MetaParameter> get_Parameters();
    public virtual MetaParameter get_ReturnParameter();
    public virtual bool get_HasMultipleResults();
    public virtual ReadOnlyCollection`1<MetaType> get_ResultRowTypes();
}
internal class System.Data.Linq.Mapping.AttributedMetaModel : MetaModel {
    public MappingSource MappingSource { get; }
    public Type ContextType { get; }
    public string DatabaseName { get; }
    public Type ProviderType { get; }
    internal AttributedMetaModel(MappingSource mappingSource, Type contextType);
    public virtual MappingSource get_MappingSource();
    public virtual Type get_ContextType();
    public virtual string get_DatabaseName();
    public virtual Type get_ProviderType();
    public virtual IEnumerable`1<MetaTable> GetTables();
    public virtual MetaTable GetTable(Type rowType);
    internal MetaTable GetTableNoLocks(Type rowType);
    public virtual MetaType GetMetaType(Type type);
    public virtual MetaFunction GetFunction(MethodInfo method);
    public virtual IEnumerable`1<MetaFunction> GetFunctions();
}
internal class System.Data.Linq.Mapping.AttributedMetaParameter : MetaParameter {
    public ParameterInfo Parameter { get; }
    public string Name { get; }
    public string MappedName { get; }
    public Type ParameterType { get; }
    public string DbType { get; }
    public AttributedMetaParameter(ParameterInfo parameterInfo);
    public virtual ParameterInfo get_Parameter();
    public virtual string get_Name();
    public virtual string get_MappedName();
    public virtual Type get_ParameterType();
    public virtual string get_DbType();
}
internal class System.Data.Linq.Mapping.AttributedMetaTable : MetaTable {
    public MetaModel Model { get; }
    public string TableName { get; }
    public MetaType RowType { get; }
    public MethodInfo InsertMethod { get; }
    public MethodInfo UpdateMethod { get; }
    public MethodInfo DeleteMethod { get; }
    internal AttributedMetaTable(AttributedMetaModel model, TableAttribute attr, Type rowType);
    public virtual MetaModel get_Model();
    public virtual string get_TableName();
    public virtual MetaType get_RowType();
    public virtual MethodInfo get_InsertMethod();
    public virtual MethodInfo get_UpdateMethod();
    public virtual MethodInfo get_DeleteMethod();
}
internal class System.Data.Linq.Mapping.AttributedMetaType : MetaType {
    internal object inheritanceCode;
    public MetaModel Model { get; }
    public MetaTable Table { get; }
    public Type Type { get; }
    public string Name { get; }
    public bool IsEntity { get; }
    public bool CanInstantiate { get; }
    public MetaDataMember DBGeneratedIdentityMember { get; }
    public MetaDataMember VersionMember { get; }
    public MetaDataMember Discriminator { get; }
    public bool HasUpdateCheck { get; }
    public bool HasInheritance { get; }
    public bool HasInheritanceCode { get; }
    public object InheritanceCode { get; }
    public MetaType InheritanceRoot { get; }
    public MetaType InheritanceBase { get; }
    public MetaType InheritanceDefault { get; }
    public bool IsInheritanceDefault { get; }
    public ReadOnlyCollection`1<MetaType> InheritanceTypes { get; }
    public ReadOnlyCollection`1<MetaType> DerivedTypes { get; }
    public ReadOnlyCollection`1<MetaDataMember> DataMembers { get; }
    public ReadOnlyCollection`1<MetaDataMember> PersistentDataMembers { get; }
    public ReadOnlyCollection`1<MetaDataMember> IdentityMembers { get; }
    public ReadOnlyCollection`1<MetaAssociation> Associations { get; }
    public MethodInfo OnLoadedMethod { get; }
    public MethodInfo OnValidateMethod { get; }
    public bool HasAnyValidateMethod { get; }
    public bool HasAnyLoadMethod { get; }
    internal AttributedMetaType(MetaModel model, MetaTable table, Type type, MetaType inheritanceRoot);
    public virtual MetaModel get_Model();
    public virtual MetaTable get_Table();
    public virtual Type get_Type();
    public virtual string get_Name();
    public virtual bool get_IsEntity();
    public virtual bool get_CanInstantiate();
    public virtual MetaDataMember get_DBGeneratedIdentityMember();
    public virtual MetaDataMember get_VersionMember();
    public virtual MetaDataMember get_Discriminator();
    public virtual bool get_HasUpdateCheck();
    public virtual bool get_HasInheritance();
    public virtual bool get_HasInheritanceCode();
    public virtual object get_InheritanceCode();
    public virtual MetaType get_InheritanceRoot();
    public virtual MetaType get_InheritanceBase();
    public virtual MetaType get_InheritanceDefault();
    public virtual bool get_IsInheritanceDefault();
    public virtual ReadOnlyCollection`1<MetaType> get_InheritanceTypes();
    public virtual MetaType GetInheritanceType(Type inheritanceType);
    public virtual ReadOnlyCollection`1<MetaType> get_DerivedTypes();
    public virtual MetaType GetTypeForInheritanceCode(object key);
    public virtual ReadOnlyCollection`1<MetaDataMember> get_DataMembers();
    public virtual ReadOnlyCollection`1<MetaDataMember> get_PersistentDataMembers();
    public virtual ReadOnlyCollection`1<MetaDataMember> get_IdentityMembers();
    public virtual ReadOnlyCollection`1<MetaAssociation> get_Associations();
    public virtual MetaDataMember GetDataMember(MemberInfo mi);
    public virtual MethodInfo get_OnLoadedMethod();
    public virtual MethodInfo get_OnValidateMethod();
    public virtual bool get_HasAnyValidateMethod();
    public virtual bool get_HasAnyLoadMethod();
    public virtual string ToString();
}
internal class System.Data.Linq.Mapping.AttributedRootType : AttributedMetaType {
    public bool HasInheritance { get; }
    public ReadOnlyCollection`1<MetaType> InheritanceTypes { get; }
    public MetaType InheritanceDefault { get; }
    internal AttributedRootType(AttributedMetaModel model, AttributedMetaTable table, Type type);
    public virtual bool get_HasInheritance();
    public virtual ReadOnlyCollection`1<MetaType> get_InheritanceTypes();
    public virtual MetaType GetInheritanceType(Type type);
    public virtual MetaType get_InheritanceDefault();
}
public class System.Data.Linq.Mapping.AttributeMappingSource : MappingSource {
    protected virtual MetaModel CreateModel(Type dataContextType);
}
public enum System.Data.Linq.Mapping.AutoSync : Enum {
    public int value__;
    public static AutoSync Default;
    public static AutoSync Always;
    public static AutoSync Never;
    public static AutoSync OnInsert;
    public static AutoSync OnUpdate;
}
[AttributeUsageAttribute("384")]
public class System.Data.Linq.Mapping.ColumnAttribute : DataAttribute {
    public string DbType { get; public set; }
    public string Expression { get; public set; }
    public bool IsPrimaryKey { get; public set; }
    public bool IsDbGenerated { get; public set; }
    public bool IsVersion { get; public set; }
    public UpdateCheck UpdateCheck { get; public set; }
    public AutoSync AutoSync { get; public set; }
    public bool IsDiscriminator { get; public set; }
    public bool CanBeNull { get; public set; }
    internal bool CanBeNullSet { get; }
    public string get_DbType();
    public void set_DbType(string value);
    public string get_Expression();
    public void set_Expression(string value);
    public bool get_IsPrimaryKey();
    public void set_IsPrimaryKey(bool value);
    public bool get_IsDbGenerated();
    public void set_IsDbGenerated(bool value);
    public bool get_IsVersion();
    public void set_IsVersion(bool value);
    public UpdateCheck get_UpdateCheck();
    public void set_UpdateCheck(UpdateCheck value);
    public AutoSync get_AutoSync();
    public void set_AutoSync(AutoSync value);
    public bool get_IsDiscriminator();
    public void set_IsDiscriminator(bool value);
    public bool get_CanBeNull();
    public void set_CanBeNull(bool value);
    internal bool get_CanBeNullSet();
}
public abstract class System.Data.Linq.Mapping.DataAttribute : Attribute {
    public string Name { get; public set; }
    public string Storage { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Storage();
    public void set_Storage(string value);
}
[AttributeUsageAttribute("4")]
public class System.Data.Linq.Mapping.DatabaseAttribute : Attribute {
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
internal class System.Data.Linq.Mapping.DGet`2 : MulticastDelegate {
    public DGet`2(object object, IntPtr method);
    public virtual V Invoke(T t);
    public virtual IAsyncResult BeginInvoke(T t, AsyncCallback callback, object object);
    public virtual V EndInvoke(IAsyncResult result);
}
internal class System.Data.Linq.Mapping.DRSet`2 : MulticastDelegate {
    public DRSet`2(object object, IntPtr method);
    public virtual void Invoke(T& t, V v);
    public virtual IAsyncResult BeginInvoke(T& t, V v, AsyncCallback callback, object object);
    public virtual void EndInvoke(T& t, IAsyncResult result);
}
internal class System.Data.Linq.Mapping.DSet`2 : MulticastDelegate {
    public DSet`2(object object, IntPtr method);
    public virtual void Invoke(T t, V v);
    public virtual IAsyncResult BeginInvoke(T t, V v, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.Linq.Mapping.EntityRefDefSourceAccessor`2 : MetaAccessor`2<T, IEnumerable`1<V>> {
    internal EntityRefDefSourceAccessor`2(MetaAccessor`2<T, EntityRef`1<V>> acc);
    public virtual IEnumerable`1<V> GetValue(T instance);
    public virtual void SetValue(T& instance, IEnumerable`1<V> value);
}
internal class System.Data.Linq.Mapping.EntityRefDefValueAccessor`2 : MetaAccessor`2<T, V> {
    internal EntityRefDefValueAccessor`2(MetaAccessor`2<T, EntityRef`1<V>> acc);
    public virtual V GetValue(T instance);
    public virtual void SetValue(T& instance, V value);
}
internal class System.Data.Linq.Mapping.EntityRefValueAccessor`2 : MetaAccessor`2<T, V> {
    internal EntityRefValueAccessor`2(MetaAccessor`2<T, EntityRef`1<V>> acc);
    public virtual V GetValue(T instance);
    public virtual void SetValue(T& instance, V value);
    public virtual bool HasValue(object instance);
    public virtual bool HasAssignedValue(object instance);
    public virtual bool HasLoadedValue(object instance);
}
internal class System.Data.Linq.Mapping.EntitySetDefSourceAccessor`2 : MetaAccessor`2<T, IEnumerable`1<V>> {
    internal EntitySetDefSourceAccessor`2(MetaAccessor`2<T, EntitySet`1<V>> acc);
    public virtual IEnumerable`1<V> GetValue(T instance);
    public virtual void SetValue(T& instance, IEnumerable`1<V> value);
}
internal class System.Data.Linq.Mapping.EntitySetDefValueAccessor`2 : MetaAccessor`2<T, IEnumerable`1<V>> {
    internal EntitySetDefValueAccessor`2(MetaAccessor`2<T, EntitySet`1<V>> acc);
    public virtual IEnumerable`1<V> GetValue(T instance);
    public virtual void SetValue(T& instance, IEnumerable`1<V> value);
}
internal class System.Data.Linq.Mapping.EntitySetValueAccessor`2 : MetaAccessor`2<T, EntitySet`1<V>> {
    internal EntitySetValueAccessor`2(MetaAccessor`2<T, EntitySet`1<V>> acc);
    public virtual EntitySet`1<V> GetValue(T instance);
    public virtual void SetValue(T& instance, EntitySet`1<V> value);
    public virtual bool HasValue(object instance);
    public virtual bool HasAssignedValue(object instance);
    public virtual bool HasLoadedValue(object instance);
}
internal static class System.Data.Linq.Mapping.Error : object {
    internal static Exception InvalidFieldInfo(object p0, object p1, object p2);
    internal static Exception CouldNotCreateAccessorToProperty(object p0, object p1, object p2);
    internal static Exception UnableToAssignValueToReadonlyProperty(object p0);
    internal static Exception LinkAlreadyLoaded();
    internal static Exception EntityRefAlreadyLoaded();
    internal static Exception NoDiscriminatorFound(object p0);
    internal static Exception InheritanceTypeDoesNotDeriveFromRoot(object p0, object p1);
    internal static Exception AbstractClassAssignInheritanceDiscriminator(object p0);
    internal static Exception CannotGetInheritanceDefaultFromNonInheritanceClass();
    internal static Exception InheritanceCodeMayNotBeNull();
    internal static Exception InheritanceTypeHasMultipleDiscriminators(object p0);
    internal static Exception InheritanceCodeUsedForMultipleTypes(object p0);
    internal static Exception InheritanceTypeHasMultipleDefaults(object p0);
    internal static Exception InheritanceHierarchyDoesNotDefineDefault(object p0);
    internal static Exception InheritanceSubTypeIsAlsoRoot(object p0);
    internal static Exception NonInheritanceClassHasDiscriminator(object p0);
    internal static Exception MemberMappedMoreThanOnce(object p0);
    internal static Exception BadStorageProperty(object p0, object p1, object p2);
    internal static Exception IncorrectAutoSyncSpecification(object p0);
    internal static Exception UnhandledDeferredStorageType(object p0);
    internal static Exception BadKeyMember(object p0, object p1, object p2);
    internal static Exception ProviderTypeNotFound(object p0);
    internal static Exception MethodCannotBeFound(object p0);
    internal static Exception UnableToResolveRootForType(object p0);
    internal static Exception MappingForTableUndefined(object p0);
    internal static Exception CouldNotFindTypeFromMapping(object p0);
    internal static Exception TwoMembersMarkedAsPrimaryKeyAndDBGenerated(object p0, object p1);
    internal static Exception TwoMembersMarkedAsRowVersion(object p0, object p1);
    internal static Exception TwoMembersMarkedAsInheritanceDiscriminator(object p0, object p1);
    internal static Exception CouldNotFindRuntimeTypeForMapping(object p0);
    internal static Exception UnexpectedNull(object p0);
    internal static Exception CouldNotFindElementTypeInModel(object p0);
    internal static Exception BadFunctionTypeInMethodMapping(object p0);
    internal static Exception IncorrectNumberOfParametersMappedForMethod(object p0);
    internal static Exception CouldNotFindRequiredAttribute(object p0, object p1);
    internal static Exception InvalidDeleteOnNullSpecification(object p0);
    internal static Exception MappedMemberHadNoCorrespondingMemberInType(object p0, object p1);
    internal static Exception UnrecognizedAttribute(object p0);
    internal static Exception UnrecognizedElement(object p0);
    internal static Exception TooManyResultTypesDeclaredForFunction(object p0);
    internal static Exception NoResultTypesDeclaredForFunction(object p0);
    internal static Exception UnexpectedElement(object p0, object p1);
    internal static Exception ExpectedEmptyElement(object p0, object p1, object p2);
    internal static Exception DatabaseNodeNotFound(object p0);
    internal static Exception DiscriminatorClrTypeNotSupported(object p0, object p1, object p2);
    internal static Exception IdentityClrTypeNotSupported(object p0, object p1, object p2);
    internal static Exception PrimaryKeyInSubTypeNotSupported(object p0, object p1);
    internal static Exception MismatchedThisKeyOtherKey(object p0, object p1);
    internal static Exception InvalidUseOfGenericMethodAsMappedFunction(object p0);
    internal static Exception MappingOfInterfacesMemberIsNotSupported(object p0, object p1);
    internal static Exception UnmappedClassMember(object p0, object p1);
    internal static Exception ArgumentNull(string paramName);
    internal static Exception ArgumentOutOfRange(string paramName);
    internal static Exception NotImplemented();
    internal static Exception NotSupported();
}
internal static class System.Data.Linq.Mapping.FieldAccessor : object {
    internal static MetaAccessor Create(Type objectType, FieldInfo fi);
}
[AttributeUsageAttribute("64")]
public class System.Data.Linq.Mapping.FunctionAttribute : Attribute {
    public string Name { get; public set; }
    public bool IsComposable { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsComposable();
    public void set_IsComposable(bool value);
}
internal static class System.Data.Linq.Mapping.InheritanceBaseFinder : object {
    internal static MetaType FindBase(MetaType derivedType);
}
[AttributeUsageAttribute("4")]
public class System.Data.Linq.Mapping.InheritanceMappingAttribute : Attribute {
    public object Code { get; public set; }
    public Type Type { get; public set; }
    public bool IsDefault { get; public set; }
    public object get_Code();
    public void set_Code(object value);
    public Type get_Type();
    public void set_Type(Type value);
    public bool get_IsDefault();
    public void set_IsDefault(bool value);
}
internal class System.Data.Linq.Mapping.LinkDefSourceAccessor`2 : MetaAccessor`2<T, IEnumerable`1<V>> {
    internal LinkDefSourceAccessor`2(MetaAccessor`2<T, Link`1<V>> acc);
    public virtual IEnumerable`1<V> GetValue(T instance);
    public virtual void SetValue(T& instance, IEnumerable`1<V> value);
}
internal class System.Data.Linq.Mapping.LinkDefValueAccessor`2 : MetaAccessor`2<T, V> {
    internal LinkDefValueAccessor`2(MetaAccessor`2<T, Link`1<V>> acc);
    public virtual V GetValue(T instance);
    public virtual void SetValue(T& instance, V value);
}
internal class System.Data.Linq.Mapping.LinkValueAccessor`2 : MetaAccessor`2<T, V> {
    internal LinkValueAccessor`2(MetaAccessor`2<T, Link`1<V>> acc);
    public virtual bool HasValue(object instance);
    public virtual bool HasAssignedValue(object instance);
    public virtual bool HasLoadedValue(object instance);
    public virtual V GetValue(T instance);
    public virtual void SetValue(T& instance, V value);
}
internal class System.Data.Linq.Mapping.MappedAssociation : MetaAssociationImpl {
    public MetaDataMember ThisMember { get; }
    public ReadOnlyCollection`1<MetaDataMember> ThisKey { get; }
    public MetaDataMember OtherMember { get; }
    public ReadOnlyCollection`1<MetaDataMember> OtherKey { get; }
    public MetaType OtherType { get; }
    public bool IsMany { get; }
    public bool IsForeignKey { get; }
    public bool IsUnique { get; }
    public bool IsNullable { get; }
    public bool ThisKeyIsPrimaryKey { get; }
    public bool OtherKeyIsPrimaryKey { get; }
    public string DeleteRule { get; }
    public bool DeleteOnNull { get; }
    internal MappedAssociation(MappedDataMember mm, AssociationMapping assocMap);
    public virtual MetaDataMember get_ThisMember();
    public virtual ReadOnlyCollection`1<MetaDataMember> get_ThisKey();
    public virtual MetaDataMember get_OtherMember();
    public virtual ReadOnlyCollection`1<MetaDataMember> get_OtherKey();
    public virtual MetaType get_OtherType();
    public virtual bool get_IsMany();
    public virtual bool get_IsForeignKey();
    public virtual bool get_IsUnique();
    public virtual bool get_IsNullable();
    public virtual bool get_ThisKeyIsPrimaryKey();
    public virtual bool get_OtherKeyIsPrimaryKey();
    public virtual string get_DeleteRule();
    public virtual bool get_DeleteOnNull();
}
internal class System.Data.Linq.Mapping.MappedDataMember : MetaDataMember {
    public MetaType DeclaringType { get; }
    public MemberInfo Member { get; }
    public MemberInfo StorageMember { get; }
    public string Name { get; }
    public int Ordinal { get; }
    public Type Type { get; }
    public MetaAccessor MemberAccessor { get; }
    public MetaAccessor StorageAccessor { get; }
    public MetaAccessor DeferredValueAccessor { get; }
    public MetaAccessor DeferredSourceAccessor { get; }
    public bool IsDeferred { get; }
    public bool IsPersistent { get; }
    public bool IsAssociation { get; }
    public bool IsPrimaryKey { get; }
    public bool IsDbGenerated { get; }
    public bool IsVersion { get; }
    public bool IsDiscriminator { get; }
    public bool CanBeNull { get; }
    public string DbType { get; }
    public string Expression { get; }
    public string MappedName { get; }
    public UpdateCheck UpdateCheck { get; }
    public AutoSync AutoSync { get; }
    public MetaAssociation Association { get; }
    public MethodInfo LoadMethod { get; }
    internal MappedDataMember(MetaType declaringType, MemberInfo mi, MemberMapping map, int ordinal);
    public virtual MetaType get_DeclaringType();
    public virtual bool IsDeclaredBy(MetaType metaType);
    public virtual MemberInfo get_Member();
    public virtual MemberInfo get_StorageMember();
    public virtual string get_Name();
    public virtual int get_Ordinal();
    public virtual Type get_Type();
    public virtual MetaAccessor get_MemberAccessor();
    public virtual MetaAccessor get_StorageAccessor();
    public virtual MetaAccessor get_DeferredValueAccessor();
    public virtual MetaAccessor get_DeferredSourceAccessor();
    public virtual bool get_IsDeferred();
    public virtual bool get_IsPersistent();
    public virtual bool get_IsAssociation();
    public virtual bool get_IsPrimaryKey();
    public virtual bool get_IsDbGenerated();
    public virtual bool get_IsVersion();
    public virtual bool get_IsDiscriminator();
    public virtual bool get_CanBeNull();
    public virtual string get_DbType();
    public virtual string get_Expression();
    public virtual string get_MappedName();
    public virtual UpdateCheck get_UpdateCheck();
    public virtual AutoSync get_AutoSync();
    public virtual MetaAssociation get_Association();
    public virtual MethodInfo get_LoadMethod();
}
internal class System.Data.Linq.Mapping.MappedFunction : MetaFunction {
    public ReadOnlyCollection`1<MetaParameter> Parameters { get; }
    public string MappedName { get; }
    public MethodInfo Method { get; }
    public MetaModel Model { get; }
    public string Name { get; }
    public bool IsComposable { get; }
    public MetaParameter ReturnParameter { get; }
    public bool HasMultipleResults { get; }
    public ReadOnlyCollection`1<MetaType> ResultRowTypes { get; }
    internal MappedFunction(MappedMetaModel model, FunctionMapping map, MethodInfo method);
    private static MappedFunction();
    public virtual ReadOnlyCollection`1<MetaParameter> get_Parameters();
    public virtual string get_MappedName();
    public virtual MethodInfo get_Method();
    public virtual MetaModel get_Model();
    public virtual string get_Name();
    public virtual bool get_IsComposable();
    public virtual MetaParameter get_ReturnParameter();
    public virtual bool get_HasMultipleResults();
    public virtual ReadOnlyCollection`1<MetaType> get_ResultRowTypes();
}
internal class System.Data.Linq.Mapping.MappedMetaModel : MetaModel {
    public MappingSource MappingSource { get; }
    public Type ContextType { get; }
    public string DatabaseName { get; }
    public Type ProviderType { get; }
    internal MappedMetaModel(MappingSource mappingSource, Type contextType, DatabaseMapping mapping);
    public virtual MappingSource get_MappingSource();
    public virtual Type get_ContextType();
    public virtual string get_DatabaseName();
    public virtual Type get_ProviderType();
    public virtual IEnumerable`1<MetaTable> GetTables();
    public virtual MetaTable GetTable(Type rowType);
    public virtual MetaType GetMetaType(Type type);
    public virtual MetaFunction GetFunction(MethodInfo method);
    public virtual IEnumerable`1<MetaFunction> GetFunctions();
    internal Type FindType(string name);
    internal Type FindType(string name, string defaultNamespace);
}
internal class System.Data.Linq.Mapping.MappedParameter : MetaParameter {
    public ParameterInfo Parameter { get; }
    public string Name { get; }
    public string MappedName { get; }
    public Type ParameterType { get; }
    public string DbType { get; }
    public MappedParameter(ParameterInfo parameterInfo, ParameterMapping map);
    public virtual ParameterInfo get_Parameter();
    public virtual string get_Name();
    public virtual string get_MappedName();
    public virtual Type get_ParameterType();
    public virtual string get_DbType();
}
internal class System.Data.Linq.Mapping.MappedReturnParameter : MetaParameter {
    public ParameterInfo Parameter { get; }
    public string Name { get; }
    public string MappedName { get; }
    public Type ParameterType { get; }
    public string DbType { get; }
    public MappedReturnParameter(ParameterInfo parameterInfo, ReturnMapping map);
    public virtual ParameterInfo get_Parameter();
    public virtual string get_Name();
    public virtual string get_MappedName();
    public virtual Type get_ParameterType();
    public virtual string get_DbType();
}
internal class System.Data.Linq.Mapping.MappedRootType : MappedType {
    public bool HasInheritance { get; }
    public bool HasInheritanceCode { get; }
    public ReadOnlyCollection`1<MetaType> InheritanceTypes { get; }
    public MetaType InheritanceDefault { get; }
    public MappedRootType(MappedMetaModel model, MappedTable table, TypeMapping typeMapping, Type type);
    public virtual bool get_HasInheritance();
    public virtual bool get_HasInheritanceCode();
    public virtual ReadOnlyCollection`1<MetaType> get_InheritanceTypes();
    public virtual MetaType GetInheritanceType(Type type);
    public virtual MetaType get_InheritanceDefault();
}
internal class System.Data.Linq.Mapping.MappedTable : MetaTable {
    public MetaModel Model { get; }
    public string TableName { get; }
    public MetaType RowType { get; }
    public MethodInfo InsertMethod { get; }
    public MethodInfo UpdateMethod { get; }
    public MethodInfo DeleteMethod { get; }
    internal MappedTable(MappedMetaModel model, TableMapping mapping, Type rowType);
    public virtual MetaModel get_Model();
    public virtual string get_TableName();
    public virtual MetaType get_RowType();
    public virtual MethodInfo get_InsertMethod();
    public virtual MethodInfo get_UpdateMethod();
    public virtual MethodInfo get_DeleteMethod();
}
internal class System.Data.Linq.Mapping.MappedType : MetaType {
    internal object inheritanceCode;
    public MetaModel Model { get; }
    public MetaTable Table { get; }
    public Type Type { get; }
    public string Name { get; }
    public bool IsEntity { get; }
    public bool CanInstantiate { get; }
    public MetaDataMember DBGeneratedIdentityMember { get; }
    public MetaDataMember VersionMember { get; }
    public MetaDataMember Discriminator { get; }
    public bool HasUpdateCheck { get; }
    public bool HasInheritance { get; }
    public object InheritanceCode { get; }
    public bool HasInheritanceCode { get; }
    public bool IsInheritanceDefault { get; }
    public MetaType InheritanceDefault { get; }
    public MetaType InheritanceRoot { get; }
    public MetaType InheritanceBase { get; }
    public ReadOnlyCollection`1<MetaType> InheritanceTypes { get; }
    public ReadOnlyCollection`1<MetaType> DerivedTypes { get; }
    public ReadOnlyCollection`1<MetaDataMember> DataMembers { get; }
    public ReadOnlyCollection`1<MetaDataMember> PersistentDataMembers { get; }
    public ReadOnlyCollection`1<MetaDataMember> IdentityMembers { get; }
    public ReadOnlyCollection`1<MetaAssociation> Associations { get; }
    public MethodInfo OnLoadedMethod { get; }
    public MethodInfo OnValidateMethod { get; }
    public bool HasAnyValidateMethod { get; }
    public bool HasAnyLoadMethod { get; }
    internal MappedType(MetaModel model, MetaTable table, TypeMapping typeMapping, Type type, MetaType inheritanceRoot);
    public virtual MetaModel get_Model();
    public virtual MetaTable get_Table();
    public virtual Type get_Type();
    public virtual string get_Name();
    public virtual bool get_IsEntity();
    public virtual bool get_CanInstantiate();
    public virtual MetaDataMember get_DBGeneratedIdentityMember();
    public virtual MetaDataMember get_VersionMember();
    public virtual MetaDataMember get_Discriminator();
    public virtual bool get_HasUpdateCheck();
    public virtual bool get_HasInheritance();
    public virtual object get_InheritanceCode();
    public virtual bool get_HasInheritanceCode();
    public virtual bool get_IsInheritanceDefault();
    public virtual MetaType get_InheritanceDefault();
    public virtual MetaType get_InheritanceRoot();
    public virtual MetaType get_InheritanceBase();
    public virtual ReadOnlyCollection`1<MetaType> get_InheritanceTypes();
    public virtual ReadOnlyCollection`1<MetaType> get_DerivedTypes();
    public virtual MetaType GetInheritanceType(Type inheritanceType);
    public virtual MetaType GetTypeForInheritanceCode(object key);
    public virtual ReadOnlyCollection`1<MetaDataMember> get_DataMembers();
    public virtual ReadOnlyCollection`1<MetaDataMember> get_PersistentDataMembers();
    public virtual ReadOnlyCollection`1<MetaDataMember> get_IdentityMembers();
    public virtual ReadOnlyCollection`1<MetaAssociation> get_Associations();
    public virtual MetaDataMember GetDataMember(MemberInfo mi);
    public virtual MethodInfo get_OnLoadedMethod();
    public virtual MethodInfo get_OnValidateMethod();
    public virtual bool get_HasAnyValidateMethod();
    public virtual bool get_HasAnyLoadMethod();
    public virtual string ToString();
}
public abstract class System.Data.Linq.Mapping.MappingSource : object {
    public MetaModel GetModel(Type dataContextType);
    protected abstract virtual MetaModel CreateModel(Type dataContextType);
}
public abstract class System.Data.Linq.Mapping.MetaAccessor : object {
    public Type Type { get; }
    public abstract virtual Type get_Type();
    public abstract virtual object GetBoxedValue(object instance);
    public abstract virtual void SetBoxedValue(Object& instance, object value);
    public virtual bool HasValue(object instance);
    public virtual bool HasAssignedValue(object instance);
    public virtual bool HasLoadedValue(object instance);
}
public abstract class System.Data.Linq.Mapping.MetaAccessor`2 : MetaAccessor {
    public Type Type { get; }
    public virtual Type get_Type();
    public virtual void SetBoxedValue(Object& instance, object value);
    public virtual object GetBoxedValue(object instance);
    public abstract virtual TMember GetValue(TEntity instance);
    public abstract virtual void SetValue(TEntity& instance, TMember value);
}
public abstract class System.Data.Linq.Mapping.MetaAssociation : object {
    public MetaType OtherType { get; }
    public MetaDataMember ThisMember { get; }
    public MetaDataMember OtherMember { get; }
    public ReadOnlyCollection`1<MetaDataMember> ThisKey { get; }
    public ReadOnlyCollection`1<MetaDataMember> OtherKey { get; }
    public bool IsMany { get; }
    public bool IsForeignKey { get; }
    public bool IsUnique { get; }
    public bool IsNullable { get; }
    public bool ThisKeyIsPrimaryKey { get; }
    public bool OtherKeyIsPrimaryKey { get; }
    public string DeleteRule { get; }
    public bool DeleteOnNull { get; }
    public abstract virtual MetaType get_OtherType();
    public abstract virtual MetaDataMember get_ThisMember();
    public abstract virtual MetaDataMember get_OtherMember();
    public abstract virtual ReadOnlyCollection`1<MetaDataMember> get_ThisKey();
    public abstract virtual ReadOnlyCollection`1<MetaDataMember> get_OtherKey();
    public abstract virtual bool get_IsMany();
    public abstract virtual bool get_IsForeignKey();
    public abstract virtual bool get_IsUnique();
    public abstract virtual bool get_IsNullable();
    public abstract virtual bool get_ThisKeyIsPrimaryKey();
    public abstract virtual bool get_OtherKeyIsPrimaryKey();
    public abstract virtual string get_DeleteRule();
    public abstract virtual bool get_DeleteOnNull();
}
internal abstract class System.Data.Linq.Mapping.MetaAssociationImpl : MetaAssociation {
    private static MetaAssociationImpl();
    protected static ReadOnlyCollection`1<MetaDataMember> MakeKeys(MetaType mtype, string keyFields);
    protected static bool AreEqual(IEnumerable`1<MetaDataMember> key1, IEnumerable`1<MetaDataMember> key2);
    public virtual string ToString();
}
public abstract class System.Data.Linq.Mapping.MetaDataMember : object {
    public MetaType DeclaringType { get; }
    public MemberInfo Member { get; }
    public MemberInfo StorageMember { get; }
    public string Name { get; }
    public string MappedName { get; }
    public int Ordinal { get; }
    public Type Type { get; }
    public MetaAccessor MemberAccessor { get; }
    public MetaAccessor StorageAccessor { get; }
    public MetaAccessor DeferredValueAccessor { get; }
    public MetaAccessor DeferredSourceAccessor { get; }
    public bool IsDeferred { get; }
    public bool IsPersistent { get; }
    public bool IsAssociation { get; }
    public bool IsPrimaryKey { get; }
    public bool IsDbGenerated { get; }
    public bool IsVersion { get; }
    public bool IsDiscriminator { get; }
    public bool CanBeNull { get; }
    public string DbType { get; }
    public string Expression { get; }
    public UpdateCheck UpdateCheck { get; }
    public AutoSync AutoSync { get; }
    public MetaAssociation Association { get; }
    public MethodInfo LoadMethod { get; }
    public abstract virtual MetaType get_DeclaringType();
    public abstract virtual MemberInfo get_Member();
    public abstract virtual MemberInfo get_StorageMember();
    public abstract virtual string get_Name();
    public abstract virtual string get_MappedName();
    public abstract virtual int get_Ordinal();
    public abstract virtual Type get_Type();
    public abstract virtual bool IsDeclaredBy(MetaType type);
    public abstract virtual MetaAccessor get_MemberAccessor();
    public abstract virtual MetaAccessor get_StorageAccessor();
    public abstract virtual MetaAccessor get_DeferredValueAccessor();
    public abstract virtual MetaAccessor get_DeferredSourceAccessor();
    public abstract virtual bool get_IsDeferred();
    public abstract virtual bool get_IsPersistent();
    public abstract virtual bool get_IsAssociation();
    public abstract virtual bool get_IsPrimaryKey();
    public abstract virtual bool get_IsDbGenerated();
    public abstract virtual bool get_IsVersion();
    public abstract virtual bool get_IsDiscriminator();
    public abstract virtual bool get_CanBeNull();
    public abstract virtual string get_DbType();
    public abstract virtual string get_Expression();
    public abstract virtual UpdateCheck get_UpdateCheck();
    public abstract virtual AutoSync get_AutoSync();
    public abstract virtual MetaAssociation get_Association();
    public abstract virtual MethodInfo get_LoadMethod();
}
public abstract class System.Data.Linq.Mapping.MetaFunction : object {
    public MetaModel Model { get; }
    public MethodInfo Method { get; }
    public string Name { get; }
    public string MappedName { get; }
    public bool IsComposable { get; }
    public ReadOnlyCollection`1<MetaParameter> Parameters { get; }
    public MetaParameter ReturnParameter { get; }
    public bool HasMultipleResults { get; }
    public ReadOnlyCollection`1<MetaType> ResultRowTypes { get; }
    public abstract virtual MetaModel get_Model();
    public abstract virtual MethodInfo get_Method();
    public abstract virtual string get_Name();
    public abstract virtual string get_MappedName();
    public abstract virtual bool get_IsComposable();
    public abstract virtual ReadOnlyCollection`1<MetaParameter> get_Parameters();
    public abstract virtual MetaParameter get_ReturnParameter();
    public abstract virtual bool get_HasMultipleResults();
    public abstract virtual ReadOnlyCollection`1<MetaType> get_ResultRowTypes();
}
public abstract class System.Data.Linq.Mapping.MetaModel : object {
    public MappingSource MappingSource { get; }
    public Type ContextType { get; }
    public string DatabaseName { get; }
    public Type ProviderType { get; }
    internal object Identity { get; }
    public abstract virtual MappingSource get_MappingSource();
    public abstract virtual Type get_ContextType();
    public abstract virtual string get_DatabaseName();
    public abstract virtual Type get_ProviderType();
    public abstract virtual MetaTable GetTable(Type rowType);
    public abstract virtual MetaFunction GetFunction(MethodInfo method);
    public abstract virtual IEnumerable`1<MetaTable> GetTables();
    public abstract virtual IEnumerable`1<MetaFunction> GetFunctions();
    public abstract virtual MetaType GetMetaType(Type type);
    internal object get_Identity();
}
public abstract class System.Data.Linq.Mapping.MetaParameter : object {
    public ParameterInfo Parameter { get; }
    public string Name { get; }
    public string MappedName { get; }
    public Type ParameterType { get; }
    public string DbType { get; }
    public abstract virtual ParameterInfo get_Parameter();
    public abstract virtual string get_Name();
    public abstract virtual string get_MappedName();
    public abstract virtual Type get_ParameterType();
    public abstract virtual string get_DbType();
}
public abstract class System.Data.Linq.Mapping.MetaTable : object {
    public MetaModel Model { get; }
    public string TableName { get; }
    public MetaType RowType { get; }
    public MethodInfo InsertMethod { get; }
    public MethodInfo UpdateMethod { get; }
    public MethodInfo DeleteMethod { get; }
    public abstract virtual MetaModel get_Model();
    public abstract virtual string get_TableName();
    public abstract virtual MetaType get_RowType();
    public abstract virtual MethodInfo get_InsertMethod();
    public abstract virtual MethodInfo get_UpdateMethod();
    public abstract virtual MethodInfo get_DeleteMethod();
}
public abstract class System.Data.Linq.Mapping.MetaType : object {
    public MetaModel Model { get; }
    public MetaTable Table { get; }
    public Type Type { get; }
    public string Name { get; }
    public bool IsEntity { get; }
    public bool CanInstantiate { get; }
    public MetaDataMember DBGeneratedIdentityMember { get; }
    public MetaDataMember VersionMember { get; }
    public MetaDataMember Discriminator { get; }
    public bool HasUpdateCheck { get; }
    public bool HasInheritance { get; }
    public bool HasInheritanceCode { get; }
    public object InheritanceCode { get; }
    public bool IsInheritanceDefault { get; }
    public MetaType InheritanceRoot { get; }
    public MetaType InheritanceBase { get; }
    public MetaType InheritanceDefault { get; }
    public ReadOnlyCollection`1<MetaType> InheritanceTypes { get; }
    public bool HasAnyLoadMethod { get; }
    public bool HasAnyValidateMethod { get; }
    public ReadOnlyCollection`1<MetaType> DerivedTypes { get; }
    public ReadOnlyCollection`1<MetaDataMember> DataMembers { get; }
    public ReadOnlyCollection`1<MetaDataMember> PersistentDataMembers { get; }
    public ReadOnlyCollection`1<MetaDataMember> IdentityMembers { get; }
    public ReadOnlyCollection`1<MetaAssociation> Associations { get; }
    public MethodInfo OnLoadedMethod { get; }
    public MethodInfo OnValidateMethod { get; }
    public abstract virtual MetaModel get_Model();
    public abstract virtual MetaTable get_Table();
    public abstract virtual Type get_Type();
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsEntity();
    public abstract virtual bool get_CanInstantiate();
    public abstract virtual MetaDataMember get_DBGeneratedIdentityMember();
    public abstract virtual MetaDataMember get_VersionMember();
    public abstract virtual MetaDataMember get_Discriminator();
    public abstract virtual bool get_HasUpdateCheck();
    public abstract virtual bool get_HasInheritance();
    public abstract virtual bool get_HasInheritanceCode();
    public abstract virtual object get_InheritanceCode();
    public abstract virtual bool get_IsInheritanceDefault();
    public abstract virtual MetaType get_InheritanceRoot();
    public abstract virtual MetaType get_InheritanceBase();
    public abstract virtual MetaType get_InheritanceDefault();
    public abstract virtual MetaType GetInheritanceType(Type type);
    public abstract virtual MetaType GetTypeForInheritanceCode(object code);
    public abstract virtual ReadOnlyCollection`1<MetaType> get_InheritanceTypes();
    public abstract virtual bool get_HasAnyLoadMethod();
    public abstract virtual bool get_HasAnyValidateMethod();
    public abstract virtual ReadOnlyCollection`1<MetaType> get_DerivedTypes();
    public abstract virtual ReadOnlyCollection`1<MetaDataMember> get_DataMembers();
    public abstract virtual ReadOnlyCollection`1<MetaDataMember> get_PersistentDataMembers();
    public abstract virtual ReadOnlyCollection`1<MetaDataMember> get_IdentityMembers();
    public abstract virtual ReadOnlyCollection`1<MetaAssociation> get_Associations();
    public abstract virtual MetaDataMember GetDataMember(MemberInfo member);
    public abstract virtual MethodInfo get_OnLoadedMethod();
    public abstract virtual MethodInfo get_OnValidateMethod();
}
internal static class System.Data.Linq.Mapping.MethodFinder : object {
    internal static MethodInfo FindMethod(Type type, string name, BindingFlags flags, Type[] argTypes);
    internal static MethodInfo FindMethod(Type type, string name, BindingFlags flags, Type[] argTypes, bool allowInherit);
}
[AttributeUsageAttribute("10240")]
public class System.Data.Linq.Mapping.ParameterAttribute : Attribute {
    public string Name { get; public set; }
    public string DbType { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_DbType();
    public void set_DbType(string value);
}
internal static class System.Data.Linq.Mapping.PropertyAccessor : object {
    internal static MetaAccessor Create(Type objectType, PropertyInfo pi, MetaAccessor storageAccessor);
}
[AttributeUsageAttribute("4")]
public class System.Data.Linq.Mapping.ProviderAttribute : Attribute {
    public Type Type { get; }
    public ProviderAttribute(Type type);
    public Type get_Type();
}
[AttributeUsageAttribute("64")]
public class System.Data.Linq.Mapping.ResultTypeAttribute : Attribute {
    public Type Type { get; }
    public ResultTypeAttribute(Type type);
    public Type get_Type();
}
internal class System.Data.Linq.Mapping.SR : object {
    internal static string OwningTeam;
    internal static string InvalidFieldInfo;
    internal static string CouldNotCreateAccessorToProperty;
    internal static string UnableToAssignValueToReadonlyProperty;
    internal static string LinkAlreadyLoaded;
    internal static string EntityRefAlreadyLoaded;
    internal static string NoDiscriminatorFound;
    internal static string InheritanceTypeDoesNotDeriveFromRoot;
    internal static string AbstractClassAssignInheritanceDiscriminator;
    internal static string CannotGetInheritanceDefaultFromNonInheritanceClass;
    internal static string InheritanceCodeMayNotBeNull;
    internal static string InheritanceTypeHasMultipleDiscriminators;
    internal static string InheritanceCodeUsedForMultipleTypes;
    internal static string InheritanceTypeHasMultipleDefaults;
    internal static string InheritanceHierarchyDoesNotDefineDefault;
    internal static string InheritanceSubTypeIsAlsoRoot;
    internal static string NonInheritanceClassHasDiscriminator;
    internal static string MemberMappedMoreThanOnce;
    internal static string BadStorageProperty;
    internal static string IncorrectAutoSyncSpecification;
    internal static string UnhandledDeferredStorageType;
    internal static string BadKeyMember;
    internal static string ProviderTypeNotFound;
    internal static string MethodCannotBeFound;
    internal static string UnableToResolveRootForType;
    internal static string MappingForTableUndefined;
    internal static string CouldNotFindTypeFromMapping;
    internal static string TwoMembersMarkedAsPrimaryKeyAndDBGenerated;
    internal static string TwoMembersMarkedAsRowVersion;
    internal static string TwoMembersMarkedAsInheritanceDiscriminator;
    internal static string CouldNotFindRuntimeTypeForMapping;
    internal static string UnexpectedNull;
    internal static string CouldNotFindElementTypeInModel;
    internal static string BadFunctionTypeInMethodMapping;
    internal static string IncorrectNumberOfParametersMappedForMethod;
    internal static string CouldNotFindRequiredAttribute;
    internal static string InvalidDeleteOnNullSpecification;
    internal static string MappedMemberHadNoCorrespondingMemberInType;
    internal static string UnrecognizedAttribute;
    internal static string UnrecognizedElement;
    internal static string TooManyResultTypesDeclaredForFunction;
    internal static string NoResultTypesDeclaredForFunction;
    internal static string UnexpectedElement;
    internal static string ExpectedEmptyElement;
    internal static string DatabaseNodeNotFound;
    internal static string DiscriminatorClrTypeNotSupported;
    internal static string IdentityClrTypeNotSupported;
    internal static string PrimaryKeyInSubTypeNotSupported;
    internal static string MismatchedThisKeyOtherKey;
    internal static string InvalidUseOfGenericMethodAsMappedFunction;
    internal static string MappingOfInterfacesMemberIsNotSupported;
    internal static string UnmappedClassMember;
    public static ResourceManager Resources { get; }
    private static SR();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.Linq.Mapping.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.Linq.Mapping.SRDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal static class System.Data.Linq.Mapping.Strings : object {
    internal static string OwningTeam { get; }
    internal static string LinkAlreadyLoaded { get; }
    internal static string EntityRefAlreadyLoaded { get; }
    internal static string CannotGetInheritanceDefaultFromNonInheritanceClass { get; }
    internal static string InheritanceCodeMayNotBeNull { get; }
    internal static string get_OwningTeam();
    internal static string InvalidFieldInfo(object p0, object p1, object p2);
    internal static string CouldNotCreateAccessorToProperty(object p0, object p1, object p2);
    internal static string UnableToAssignValueToReadonlyProperty(object p0);
    internal static string get_LinkAlreadyLoaded();
    internal static string get_EntityRefAlreadyLoaded();
    internal static string NoDiscriminatorFound(object p0);
    internal static string InheritanceTypeDoesNotDeriveFromRoot(object p0, object p1);
    internal static string AbstractClassAssignInheritanceDiscriminator(object p0);
    internal static string get_CannotGetInheritanceDefaultFromNonInheritanceClass();
    internal static string get_InheritanceCodeMayNotBeNull();
    internal static string InheritanceTypeHasMultipleDiscriminators(object p0);
    internal static string InheritanceCodeUsedForMultipleTypes(object p0);
    internal static string InheritanceTypeHasMultipleDefaults(object p0);
    internal static string InheritanceHierarchyDoesNotDefineDefault(object p0);
    internal static string InheritanceSubTypeIsAlsoRoot(object p0);
    internal static string NonInheritanceClassHasDiscriminator(object p0);
    internal static string MemberMappedMoreThanOnce(object p0);
    internal static string BadStorageProperty(object p0, object p1, object p2);
    internal static string IncorrectAutoSyncSpecification(object p0);
    internal static string UnhandledDeferredStorageType(object p0);
    internal static string BadKeyMember(object p0, object p1, object p2);
    internal static string ProviderTypeNotFound(object p0);
    internal static string MethodCannotBeFound(object p0);
    internal static string UnableToResolveRootForType(object p0);
    internal static string MappingForTableUndefined(object p0);
    internal static string CouldNotFindTypeFromMapping(object p0);
    internal static string TwoMembersMarkedAsPrimaryKeyAndDBGenerated(object p0, object p1);
    internal static string TwoMembersMarkedAsRowVersion(object p0, object p1);
    internal static string TwoMembersMarkedAsInheritanceDiscriminator(object p0, object p1);
    internal static string CouldNotFindRuntimeTypeForMapping(object p0);
    internal static string UnexpectedNull(object p0);
    internal static string CouldNotFindElementTypeInModel(object p0);
    internal static string BadFunctionTypeInMethodMapping(object p0);
    internal static string IncorrectNumberOfParametersMappedForMethod(object p0);
    internal static string CouldNotFindRequiredAttribute(object p0, object p1);
    internal static string InvalidDeleteOnNullSpecification(object p0);
    internal static string MappedMemberHadNoCorrespondingMemberInType(object p0, object p1);
    internal static string UnrecognizedAttribute(object p0);
    internal static string UnrecognizedElement(object p0);
    internal static string TooManyResultTypesDeclaredForFunction(object p0);
    internal static string NoResultTypesDeclaredForFunction(object p0);
    internal static string UnexpectedElement(object p0, object p1);
    internal static string ExpectedEmptyElement(object p0, object p1, object p2);
    internal static string DatabaseNodeNotFound(object p0);
    internal static string DiscriminatorClrTypeNotSupported(object p0, object p1, object p2);
    internal static string IdentityClrTypeNotSupported(object p0, object p1, object p2);
    internal static string PrimaryKeyInSubTypeNotSupported(object p0, object p1);
    internal static string MismatchedThisKeyOtherKey(object p0, object p1);
    internal static string InvalidUseOfGenericMethodAsMappedFunction(object p0);
    internal static string MappingOfInterfacesMemberIsNotSupported(object p0, object p1);
    internal static string UnmappedClassMember(object p0, object p1);
}
[AttributeUsageAttribute("4")]
public class System.Data.Linq.Mapping.TableAttribute : Attribute {
    public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
internal class System.Data.Linq.Mapping.UnmappedDataMember : MetaDataMember {
    public MetaType DeclaringType { get; }
    public MemberInfo Member { get; }
    public MemberInfo StorageMember { get; }
    public string Name { get; }
    public int Ordinal { get; }
    public Type Type { get; }
    public MetaAccessor MemberAccessor { get; }
    public MetaAccessor StorageAccessor { get; }
    public MetaAccessor DeferredValueAccessor { get; }
    public MetaAccessor DeferredSourceAccessor { get; }
    public bool IsDeferred { get; }
    public bool IsPersistent { get; }
    public bool IsAssociation { get; }
    public bool IsPrimaryKey { get; }
    public bool IsDbGenerated { get; }
    public bool IsVersion { get; }
    public bool IsDiscriminator { get; }
    public bool CanBeNull { get; }
    public string DbType { get; }
    public string Expression { get; }
    public string MappedName { get; }
    public UpdateCheck UpdateCheck { get; }
    public AutoSync AutoSync { get; }
    public MetaAssociation Association { get; }
    public MethodInfo LoadMethod { get; }
    internal UnmappedDataMember(MetaType declaringType, MemberInfo mi, int ordinal);
    public virtual MetaType get_DeclaringType();
    public virtual bool IsDeclaredBy(MetaType metaType);
    public virtual MemberInfo get_Member();
    public virtual MemberInfo get_StorageMember();
    public virtual string get_Name();
    public virtual int get_Ordinal();
    public virtual Type get_Type();
    public virtual MetaAccessor get_MemberAccessor();
    public virtual MetaAccessor get_StorageAccessor();
    public virtual MetaAccessor get_DeferredValueAccessor();
    public virtual MetaAccessor get_DeferredSourceAccessor();
    public virtual bool get_IsDeferred();
    public virtual bool get_IsPersistent();
    public virtual bool get_IsAssociation();
    public virtual bool get_IsPrimaryKey();
    public virtual bool get_IsDbGenerated();
    public virtual bool get_IsVersion();
    public virtual bool get_IsDiscriminator();
    public virtual bool get_CanBeNull();
    public virtual string get_DbType();
    public virtual string get_Expression();
    public virtual string get_MappedName();
    public virtual UpdateCheck get_UpdateCheck();
    public virtual AutoSync get_AutoSync();
    public virtual MetaAssociation get_Association();
    public virtual MethodInfo get_LoadMethod();
}
internal class System.Data.Linq.Mapping.UnmappedType : MetaType {
    public MetaModel Model { get; }
    public MetaTable Table { get; }
    public Type Type { get; }
    public string Name { get; }
    public bool IsEntity { get; }
    public bool CanInstantiate { get; }
    public MetaDataMember DBGeneratedIdentityMember { get; }
    public MetaDataMember VersionMember { get; }
    public MetaDataMember Discriminator { get; }
    public bool HasUpdateCheck { get; }
    public ReadOnlyCollection`1<MetaType> InheritanceTypes { get; }
    public ReadOnlyCollection`1<MetaType> DerivedTypes { get; }
    public bool HasInheritance { get; }
    public bool HasInheritanceCode { get; }
    public object InheritanceCode { get; }
    public MetaType InheritanceRoot { get; }
    public MetaType InheritanceBase { get; }
    public MetaType InheritanceDefault { get; }
    public bool IsInheritanceDefault { get; }
    public ReadOnlyCollection`1<MetaDataMember> DataMembers { get; }
    public ReadOnlyCollection`1<MetaDataMember> PersistentDataMembers { get; }
    public ReadOnlyCollection`1<MetaDataMember> IdentityMembers { get; }
    public ReadOnlyCollection`1<MetaAssociation> Associations { get; }
    public MethodInfo OnLoadedMethod { get; }
    public MethodInfo OnValidateMethod { get; }
    public bool HasAnyValidateMethod { get; }
    public bool HasAnyLoadMethod { get; }
    internal UnmappedType(MetaModel model, Type type);
    private static UnmappedType();
    public virtual MetaModel get_Model();
    public virtual MetaTable get_Table();
    public virtual Type get_Type();
    public virtual string get_Name();
    public virtual bool get_IsEntity();
    public virtual bool get_CanInstantiate();
    public virtual MetaDataMember get_DBGeneratedIdentityMember();
    public virtual MetaDataMember get_VersionMember();
    public virtual MetaDataMember get_Discriminator();
    public virtual bool get_HasUpdateCheck();
    public virtual ReadOnlyCollection`1<MetaType> get_InheritanceTypes();
    public virtual MetaType GetInheritanceType(Type inheritanceType);
    public virtual ReadOnlyCollection`1<MetaType> get_DerivedTypes();
    public virtual MetaType GetTypeForInheritanceCode(object key);
    public virtual bool get_HasInheritance();
    public virtual bool get_HasInheritanceCode();
    public virtual object get_InheritanceCode();
    public virtual MetaType get_InheritanceRoot();
    public virtual MetaType get_InheritanceBase();
    public virtual MetaType get_InheritanceDefault();
    public virtual bool get_IsInheritanceDefault();
    public virtual ReadOnlyCollection`1<MetaDataMember> get_DataMembers();
    public virtual ReadOnlyCollection`1<MetaDataMember> get_PersistentDataMembers();
    public virtual ReadOnlyCollection`1<MetaDataMember> get_IdentityMembers();
    public virtual ReadOnlyCollection`1<MetaAssociation> get_Associations();
    public virtual MetaDataMember GetDataMember(MemberInfo mi);
    public virtual string ToString();
    public virtual MethodInfo get_OnLoadedMethod();
    public virtual MethodInfo get_OnValidateMethod();
    public virtual bool get_HasAnyValidateMethod();
    public virtual bool get_HasAnyLoadMethod();
}
public enum System.Data.Linq.Mapping.UpdateCheck : Enum {
    public int value__;
    public static UpdateCheck Always;
    public static UpdateCheck Never;
    public static UpdateCheck WhenChanged;
}
internal class System.Data.Linq.Mapping.XmlMappingReader : object {
    internal static DatabaseMapping ReadDatabaseMapping(XmlReader reader);
    internal static bool IsInNamespace(XmlReader reader);
    internal static void ValidateAttributes(XmlReader reader, String[] validAttributes);
    internal static FunctionMapping ReadFunctionMapping(XmlReader reader);
}
public class System.Data.Linq.Mapping.XmlMappingSource : MappingSource {
    protected virtual MetaModel CreateModel(Type dataContextType);
    public static XmlMappingSource FromXml(string xml);
    public static XmlMappingSource FromReader(XmlReader reader);
    public static XmlMappingSource FromStream(Stream stream);
    public static XmlMappingSource FromUrl(string url);
}
public class System.Data.Linq.MemberChangeConflict : object {
    public object OriginalValue { get; }
    public object DatabaseValue { get; }
    public object CurrentValue { get; }
    public MemberInfo Member { get; }
    public bool IsModified { get; }
    public bool IsResolved { get; }
    internal MemberChangeConflict(ObjectChangeConflict conflict, MetaDataMember metaMember);
    public object get_OriginalValue();
    public object get_DatabaseValue();
    public object get_CurrentValue();
    public MemberInfo get_Member();
    public void Resolve(object value);
    public void Resolve(RefreshMode refreshMode);
    public bool get_IsModified();
    public bool get_IsResolved();
}
public class System.Data.Linq.ModifiedMemberInfo : ValueType {
    private MemberInfo member;
    private object current;
    private object original;
    public MemberInfo Member { get; }
    public object CurrentValue { get; }
    public object OriginalValue { get; }
    internal ModifiedMemberInfo(MemberInfo member, object current, object original);
    public MemberInfo get_Member();
    public object get_CurrentValue();
    public object get_OriginalValue();
}
public class System.Data.Linq.ObjectChangeConflict : object {
    internal ChangeConflictSession Session { get; }
    internal TrackedObject TrackedObject { get; }
    public object Object { get; }
    internal object Original { get; }
    public bool IsResolved { get; }
    public bool IsDeleted { get; }
    internal object Database { get; }
    public ReadOnlyCollection`1<MemberChangeConflict> MemberConflicts { get; }
    internal ObjectChangeConflict(ChangeConflictSession session, TrackedObject trackedObject);
    internal ObjectChangeConflict(ChangeConflictSession session, TrackedObject trackedObject, bool isDeleted);
    internal ChangeConflictSession get_Session();
    internal TrackedObject get_TrackedObject();
    public object get_Object();
    internal object get_Original();
    public bool get_IsResolved();
    public bool get_IsDeleted();
    internal object get_Database();
    public void Resolve();
    public void Resolve(RefreshMode refreshMode);
    public void Resolve(RefreshMode refreshMode, bool autoResolveDeletes);
    public ReadOnlyCollection`1<MemberChangeConflict> get_MemberConflicts();
    internal void OnMemberResolved();
}
internal static class System.Data.Linq.Provider.BindingList : object {
    internal static IBindingList Create(DataContext context, IEnumerable`1<T> sequence);
}
internal class System.Data.Linq.Provider.DataBindingList`1 : SortableBindingList`1<TEntity> {
    internal DataBindingList`1(IList`1<TEntity> sequence, Table`1<TEntity> data);
    protected virtual object AddNewCore();
    protected virtual void InsertItem(int index, TEntity item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, TEntity item);
    protected virtual void ClearItems();
    public virtual void EndNew(int itemIndex);
    public virtual void CancelNew(int itemIndex);
}
internal static class System.Data.Linq.Provider.DataManipulation : object {
    public static TResult Insert(TEntity item, Func`2<TEntity, TResult> resultSelector);
    public static int Insert(TEntity item);
    public static TResult Update(TEntity item, Func`2<TEntity, bool> check, Func`2<TEntity, TResult> resultSelector);
    public static TResult Update(TEntity item, Func`2<TEntity, TResult> resultSelector);
    public static int Update(TEntity item, Func`2<TEntity, bool> check);
    public static int Update(TEntity item);
    public static int Delete(TEntity item, Func`2<TEntity, bool> check);
    public static int Delete(TEntity item);
}
internal interface System.Data.Linq.Provider.ICompiledQuery {
    public abstract virtual IExecuteResult Execute(IProvider provider, Object[] arguments);
}
internal interface System.Data.Linq.Provider.IDataServices {
    public DataContext Context { get; }
    public MetaModel Model { get; }
    public abstract virtual DataContext get_Context();
    public abstract virtual MetaModel get_Model();
    public abstract virtual IDeferredSourceFactory GetDeferredSourceFactory(MetaDataMember member);
    public abstract virtual object GetCachedObject(Expression query);
    public abstract virtual bool IsCachedObject(MetaType type, object instance);
    public abstract virtual object InsertLookupCachedObject(MetaType type, object instance);
    public abstract virtual void OnEntityMaterialized(MetaType type, object instance);
}
internal interface System.Data.Linq.Provider.IDeferredSourceFactory {
    public abstract virtual IEnumerable CreateDeferredSource(object instance);
    public abstract virtual IEnumerable CreateDeferredSource(Object[] keyValues);
}
internal interface System.Data.Linq.Provider.IProvider {
    public TextWriter Log { get; public set; }
    public DbConnection Connection { get; }
    public DbTransaction Transaction { get; public set; }
    public int CommandTimeout { get; public set; }
    public abstract virtual void Initialize(IDataServices dataServices, object connection);
    public abstract virtual TextWriter get_Log();
    public abstract virtual void set_Log(TextWriter value);
    public abstract virtual DbConnection get_Connection();
    public abstract virtual DbTransaction get_Transaction();
    public abstract virtual void set_Transaction(DbTransaction value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual void ClearConnection();
    public abstract virtual void CreateDatabase();
    public abstract virtual void DeleteDatabase();
    public abstract virtual bool DatabaseExists();
    public abstract virtual IExecuteResult Execute(Expression query);
    public abstract virtual ICompiledQuery Compile(Expression query);
    public abstract virtual IEnumerable Translate(Type elementType, DbDataReader reader);
    public abstract virtual IMultipleResults Translate(DbDataReader reader);
    public abstract virtual string GetQueryText(Expression query);
    public abstract virtual DbCommand GetCommand(Expression query);
}
public enum System.Data.Linq.RefreshMode : Enum {
    public int value__;
    public static RefreshMode KeepCurrentValues;
    public static RefreshMode KeepChanges;
    public static RefreshMode OverwriteCurrentValues;
}
internal class System.Data.Linq.RelatedItem : ValueType {
    internal MetaType Type;
    internal object Item;
    internal RelatedItem(MetaType type, object item);
}
internal class System.Data.Linq.SortableBindingList`1 : BindingList`1<T> {
    protected ListSortDirection SortDirectionCore { get; }
    protected PropertyDescriptor SortPropertyCore { get; }
    protected bool IsSortedCore { get; }
    protected bool SupportsSortingCore { get; }
    internal SortableBindingList`1(IList`1<T> list);
    protected virtual void RemoveSortCore();
    protected virtual ListSortDirection get_SortDirectionCore();
    protected virtual PropertyDescriptor get_SortPropertyCore();
    protected virtual bool get_IsSortedCore();
    protected virtual bool get_SupportsSortingCore();
    protected virtual void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction);
}
internal static class System.Data.Linq.SourceState`1 : object {
    internal static IEnumerable`1<T> Loaded;
    internal static IEnumerable`1<T> Assigned;
    private static SourceState`1();
}
internal class System.Data.Linq.SqlClient.BigJoinChecker : object {
    internal static bool CanBigJoin(SqlSelect select);
}
internal class System.Data.Linq.SqlClient.ColumnTypeValidator : SqlVisitor {
    internal virtual SqlRow VisitRow(SqlRow row);
}
internal enum System.Data.Linq.SqlClient.ConverterSpecialTypes : Enum {
    public int value__;
    public static ConverterSpecialTypes Row;
    public static ConverterSpecialTypes Table;
}
[FlagsAttribute]
internal enum System.Data.Linq.SqlClient.ConverterStrategy : Enum {
    public int value__;
    public static ConverterStrategy Default;
    public static ConverterStrategy SkipWithRowNumber;
    public static ConverterStrategy CanUseScopeIdentity;
    public static ConverterStrategy CanUseOuterApply;
    public static ConverterStrategy CanUseRowStatus;
    public static ConverterStrategy CanUseJoinOn;
    public static ConverterStrategy CanOutputFromInsert;
}
internal abstract class System.Data.Linq.SqlClient.DbFormatter : object {
    internal abstract virtual string Format(SqlNode node, bool isDebug);
    internal abstract virtual string Format(SqlNode node);
}
internal static class System.Data.Linq.SqlClient.Error : object {
    internal static Exception VbLikeDoesNotSupportMultipleCharacterRanges();
    internal static Exception VbLikeUnclosedBracket();
    internal static Exception UnrecognizedProviderMode(object p0);
    internal static Exception CompiledQueryCannotReturnType(object p0);
    internal static Exception ArgumentEmpty(object p0);
    internal static Exception ProviderCannotBeUsedAfterDispose();
    internal static Exception ArgumentTypeMismatch(object p0);
    internal static Exception ContextNotInitialized();
    internal static Exception CouldNotDetermineSqlType(object p0);
    internal static Exception CouldNotDetermineDbGeneratedSqlType(object p0);
    internal static Exception CouldNotDetermineCatalogName();
    internal static Exception CreateDatabaseFailedBecauseOfClassWithNoMembers(object p0);
    internal static Exception CreateDatabaseFailedBecauseOfContextWithNoTables(object p0);
    internal static Exception CreateDatabaseFailedBecauseSqlCEDatabaseAlreadyExists(object p0);
    internal static Exception DistributedTransactionsAreNotAllowed();
    internal static Exception InvalidConnectionArgument(object p0);
    internal static Exception CannotEnumerateResultsMoreThanOnce();
    internal static Exception IifReturnTypesMustBeEqual(object p0, object p1);
    internal static Exception MethodNotMappedToStoredProcedure(object p0);
    internal static Exception ResultTypeNotMappedToFunction(object p0, object p1);
    internal static Exception ToStringOnlySupportedForPrimitiveTypes();
    internal static Exception TransactionDoesNotMatchConnection();
    internal static Exception UnexpectedTypeCode(object p0);
    internal static Exception UnsupportedDateTimeConstructorForm();
    internal static Exception UnsupportedDateTimeOffsetConstructorForm();
    internal static Exception UnsupportedStringConstructorForm();
    internal static Exception UnsupportedTimeSpanConstructorForm();
    internal static Exception UnsupportedTypeConstructorForm(object p0);
    internal static Exception WrongNumberOfValuesInCollectionArgument(object p0, object p1, object p2);
    internal static Exception MemberCannotBeTranslated(object p0, object p1);
    internal static Exception NonConstantExpressionsNotSupportedFor(object p0);
    internal static Exception MathRoundNotSupported();
    internal static Exception SqlMethodOnlyForSql(object p0);
    internal static Exception NonConstantExpressionsNotSupportedForRounding();
    internal static Exception CompiledQueryAgainstMultipleShapesNotSupported();
    internal static Exception IndexOfWithStringComparisonArgNotSupported();
    internal static Exception LastIndexOfWithStringComparisonArgNotSupported();
    internal static Exception ConvertToCharFromBoolNotSupported();
    internal static Exception ConvertToDateTimeOnlyForDateTimeOrString();
    internal static Exception SkipIsValidOnlyOverOrderedQueries();
    internal static Exception SkipRequiresSingleTableQueryWithPKs();
    internal static Exception NoMethodInTypeMatchingArguments(object p0);
    internal static Exception CannotConvertToEntityRef(object p0);
    internal static Exception ExpressionNotDeferredQuerySource();
    internal static Exception DeferredMemberWrongType();
    internal static Exception ArgumentWrongType(object p0, object p1, object p2);
    internal static Exception ArgumentWrongValue(object p0);
    internal static Exception BadProjectionInSelect();
    internal static Exception InvalidReturnFromSproc(object p0);
    internal static Exception WrongDataContext();
    internal static Exception BinaryOperatorNotRecognized(object p0);
    internal static Exception CannotAggregateType(object p0);
    internal static Exception CannotCompareItemsAssociatedWithDifferentTable();
    internal static Exception CannotDeleteTypesOf(object p0);
    internal static Exception ClassLiteralsNotAllowed(object p0);
    internal static Exception ClientCaseShouldNotHold(object p0);
    internal static Exception ClrBoolDoesNotAgreeWithSqlType(object p0);
    internal static Exception ColumnCannotReferToItself();
    internal static Exception ColumnClrTypeDoesNotAgreeWithExpressionsClrType();
    internal static Exception ColumnIsDefinedInMultiplePlaces(object p0);
    internal static Exception ColumnIsNotAccessibleThroughGroupBy(object p0);
    internal static Exception ColumnIsNotAccessibleThroughDistinct(object p0);
    internal static Exception ColumnReferencedIsNotInScope(object p0);
    internal static Exception ConstructedArraysNotSupported();
    internal static Exception ParametersCannotBeSequences();
    internal static Exception CapturedValuesCannotBeSequences();
    internal static Exception IQueryableCannotReturnSelfReferencingConstantExpression();
    internal static Exception CouldNotAssignSequence(object p0, object p1);
    internal static Exception CouldNotTranslateExpressionForReading(object p0);
    internal static Exception CouldNotGetClrType();
    internal static Exception CouldNotGetSqlType();
    internal static Exception CouldNotHandleAliasRef(object p0);
    internal static Exception DidNotExpectAs(object p0);
    internal static Exception DidNotExpectTypeBinding();
    internal static Exception DidNotExpectTypeChange(object p0, object p1);
    internal static Exception EmptyCaseNotSupported();
    internal static Exception ExpectedNoObjectType();
    internal static Exception ExpectedBitFoundPredicate();
    internal static Exception ExpectedClrTypesToAgree(object p0, object p1);
    internal static Exception ExpectedPredicateFoundBit();
    internal static Exception ExpectedQueryableArgument(object p0, object p1, object p2);
    internal static Exception InvalidGroupByExpressionType(object p0);
    internal static Exception InvalidGroupByExpression();
    internal static Exception InvalidOrderByExpression(object p0);
    internal static Exception Impossible();
    internal static Exception InfiniteDescent();
    internal static Exception InvalidFormatNode(object p0);
    internal static Exception InvalidReferenceToRemovedAliasDuringDeflation();
    internal static Exception InvalidSequenceOperatorCall(object p0);
    internal static Exception ParameterNotInScope(object p0);
    internal static Exception MemberAccessIllegal(object p0, object p1, object p2);
    internal static Exception MemberCouldNotBeTranslated(object p0, object p1);
    internal static Exception MemberNotPartOfProjection(object p0, object p1);
    internal static Exception MethodHasNoSupportConversionToSql(object p0);
    internal static Exception MethodFormHasNoSupportConversionToSql(object p0, object p1);
    internal static Exception UnableToBindUnmappedMember(object p0, object p1, object p2);
    internal static Exception QueryOperatorNotSupported(object p0);
    internal static Exception QueryOperatorOverloadNotSupported(object p0);
    internal static Exception ReaderUsedAfterDispose();
    internal static Exception RequiredColumnDoesNotExist(object p0);
    internal static Exception SimpleCaseShouldNotHold(object p0);
    internal static Exception TypeBinaryOperatorNotRecognized();
    internal static Exception UnexpectedNode(object p0);
    internal static Exception UnexpectedFloatingColumn();
    internal static Exception UnexpectedSharedExpression();
    internal static Exception UnexpectedSharedExpressionReference();
    internal static Exception UnhandledBindingType(object p0);
    internal static Exception UnhandledStringTypeComparison();
    internal static Exception UnhandledMemberAccess(object p0, object p1);
    internal static Exception UnmappedDataMember(object p0, object p1, object p2);
    internal static Exception UnrecognizedExpressionNode(object p0);
    internal static Exception ValueHasNoLiteralInSql(object p0);
    internal static Exception UnionIncompatibleConstruction();
    internal static Exception UnionDifferentMembers();
    internal static Exception UnionDifferentMemberOrder();
    internal static Exception UnionOfIncompatibleDynamicTypes();
    internal static Exception UnionWithHierarchy();
    internal static Exception UnhandledExpressionType(object p0);
    internal static Exception IntersectNotSupportedForHierarchicalTypes();
    internal static Exception ExceptNotSupportedForHierarchicalTypes();
    internal static Exception NonCountAggregateFunctionsAreNotValidOnProjections(object p0);
    internal static Exception GroupingNotSupportedAsOrderCriterion();
    internal static Exception SelectManyDoesNotSupportStrings();
    internal static Exception SequenceOperatorsNotSupportedForType(object p0);
    internal static Exception SkipNotSupportedForSequenceTypes();
    internal static Exception ComparisonNotSupportedForType(object p0);
    internal static Exception QueryOnLocalCollectionNotSupported();
    internal static Exception UnsupportedNodeType(object p0);
    internal static Exception TypeColumnWithUnhandledSource();
    internal static Exception GeneralCollectionMaterializationNotSupported();
    internal static Exception TypeCannotBeOrdered(object p0);
    internal static Exception InvalidMethodExecution(object p0);
    internal static Exception SprocsCannotBeComposed();
    internal static Exception InsertItemMustBeConstant();
    internal static Exception UpdateItemMustBeConstant();
    internal static Exception CouldNotConvertToPropertyOrField(object p0);
    internal static Exception BadParameterType(object p0);
    internal static Exception CannotAssignToMember(object p0);
    internal static Exception MappedTypeMustHaveDefaultConstructor(object p0);
    internal static Exception UnsafeStringConversion(object p0, object p1);
    internal static Exception CannotAssignNull(object p0);
    internal static Exception ProviderNotInstalled(object p0, object p1);
    internal static Exception InvalidProviderType(object p0);
    internal static Exception InvalidDbGeneratedType(object p0);
    internal static Exception DatabaseDeleteThroughContext();
    internal static Exception CannotMaterializeEntityType(object p0);
    internal static Exception CannotMaterializeList(object p0);
    internal static Exception CouldNotConvert(object p0, object p1);
    internal static Exception ArgumentNull(string paramName);
    internal static Exception ArgumentOutOfRange(string paramName);
    internal static Exception NotImplemented();
    internal static Exception NotSupported();
    internal static Exception ExpressionNotSupportedForSqlServerVersion(Collection`1<string> reasons);
}
internal class System.Data.Linq.SqlClient.ExpectNoAliasRefs : SqlVisitor {
    internal virtual SqlExpression VisitAliasRef(SqlAliasRef aref);
}
internal class System.Data.Linq.SqlClient.ExpectNoFloatingColumns : SqlVisitor {
    internal virtual SqlRow VisitRow(SqlRow row);
    internal virtual SqlTable VisitTable(SqlTable tab);
    internal virtual SqlExpression VisitColumn(SqlColumn col);
}
internal class System.Data.Linq.SqlClient.ExpectNoMethodCalls : SqlVisitor {
    internal virtual SqlExpression VisitMethodCall(SqlMethodCall mc);
    internal virtual SqlSelect VisitSelect(SqlSelect select);
}
internal class System.Data.Linq.SqlClient.ExpectNoSharedExpressions : SqlVisitor {
    internal virtual SqlExpression VisitSharedExpression(SqlSharedExpression shared);
    internal virtual SqlExpression VisitSharedExpressionRef(SqlSharedExpressionRef sref);
}
internal class System.Data.Linq.SqlClient.ExpectRationalizedBooleans : SqlBooleanMismatchVisitor {
    internal virtual SqlExpression ConvertValueToPredicate(SqlExpression bitExpression);
    internal virtual SqlExpression ConvertPredicateToValue(SqlExpression predicateExpression);
}
internal abstract class System.Data.Linq.SqlClient.ExpressionVisitor : object {
    internal virtual Expression Visit(Expression exp);
    internal virtual MemberBinding VisitBinding(MemberBinding binding);
    internal virtual ElementInit VisitElementInitializer(ElementInit initializer);
    internal virtual Expression VisitUnary(UnaryExpression u);
    internal virtual Expression VisitBinary(BinaryExpression b);
    internal virtual Expression VisitTypeIs(TypeBinaryExpression b);
    internal virtual Expression VisitConstant(ConstantExpression c);
    internal virtual Expression VisitConditional(ConditionalExpression c);
    internal virtual Expression VisitParameter(ParameterExpression p);
    internal virtual Expression VisitMemberAccess(MemberExpression m);
    internal virtual Expression VisitMethodCall(MethodCallExpression m);
    internal virtual ReadOnlyCollection`1<Expression> VisitExpressionList(ReadOnlyCollection`1<Expression> original);
    internal virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment);
    internal virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding);
    internal virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding);
    internal virtual IEnumerable`1<MemberBinding> VisitBindingList(ReadOnlyCollection`1<MemberBinding> original);
    internal virtual IEnumerable`1<ElementInit> VisitElementInitializerList(ReadOnlyCollection`1<ElementInit> original);
    internal virtual Expression VisitLambda(LambdaExpression lambda);
    internal virtual NewExpression VisitNew(NewExpression nex);
    internal virtual Expression VisitMemberInit(MemberInitExpression init);
    internal virtual Expression VisitListInit(ListInitExpression init);
    internal virtual Expression VisitNewArray(NewArrayExpression na);
    internal virtual Expression VisitInvocation(InvocationExpression iv);
}
internal static class System.Data.Linq.SqlClient.Funcletizer : object {
    internal static Expression Funcletize(Expression expression);
}
internal class System.Data.Linq.SqlClient.HierarchyChecker : object {
    internal static bool HasHierarchy(SqlExpression expr);
}
internal interface System.Data.Linq.SqlClient.ICompiledSubQuery {
    public abstract virtual IExecuteResult Execute(IProvider provider, Object[] parentArgs, Object[] userArgs);
}
internal interface System.Data.Linq.SqlClient.IConnectionManager {
    public abstract virtual DbConnection UseConnection(IConnectionUser user);
    public abstract virtual void ReleaseConnection(IConnectionUser user);
}
internal interface System.Data.Linq.SqlClient.IConnectionUser {
    public abstract virtual void CompleteUse();
}
public abstract class System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1 : object {
    public Int32[] Ordinals;
    public Object[] Globals;
    public Object[] Locals;
    public Object[] Arguments;
    public TDataReader DataReader;
    public DbDataReader BufferReader;
    public bool CanDeferLoad { get; }
    public abstract virtual object InsertLookup(int globalMetaType, object instance);
    public abstract virtual void SendEntityMaterialized(int globalMetaType, object instance);
    public abstract virtual IEnumerable ExecuteSubQuery(int iSubQuery, Object[] args);
    public abstract virtual IEnumerable`1<T> GetLinkSource(int globalLink, int localFactory, Object[] keyValues);
    public abstract virtual IEnumerable`1<T> GetNestedLinkSource(int globalLink, int localFactory, object instance);
    public abstract virtual bool Read();
    public abstract virtual bool get_CanDeferLoad();
    public static IEnumerable`1<TOutput> Convert(IEnumerable source);
    public static IGrouping`2<TKey, TElement> CreateGroup(TKey key, IEnumerable`1<TElement> items);
    public static IOrderedEnumerable`1<TElement> CreateOrderedEnumerable(IEnumerable`1<TElement> items);
    public static Exception ErrorAssignmentToNull(Type type);
}
internal static class System.Data.Linq.SqlClient.InheritanceRules : object {
    internal static object DistinguishedMemberName(MemberInfo mi);
    internal static bool AreSameMember(MemberInfo mi1, MemberInfo mi2);
    internal static object InheritanceCodeForClientCompare(object rawCode, ProviderType providerType);
}
internal abstract class System.Data.Linq.SqlClient.InternalExpression : Expression {
    internal InternalExpression(InternalExpressionType nt, Type type);
    internal static KnownExpression Known(SqlExpression expr);
    internal static KnownExpression Known(SqlNode node, Type type);
}
internal enum System.Data.Linq.SqlClient.InternalExpressionType : Enum {
    public int value__;
    public static InternalExpressionType Known;
    public static InternalExpressionType LinkedTable;
}
internal interface System.Data.Linq.SqlClient.IObjectReader {
    public IObjectReaderSession Session { get; }
    public abstract virtual IObjectReaderSession get_Session();
}
internal interface System.Data.Linq.SqlClient.IObjectReaderCompiler {
    public abstract virtual IObjectReaderFactory Compile(SqlExpression expression, Type elementType);
    public abstract virtual IObjectReaderSession CreateSession(DbDataReader reader, IReaderProvider provider, Object[] parentArgs, Object[] userArgs, ICompiledSubQuery[] subQueries);
}
internal interface System.Data.Linq.SqlClient.IObjectReaderFactory {
    public abstract virtual IObjectReader Create(DbDataReader reader, bool disposeReader, IReaderProvider provider, Object[] parentArgs, Object[] userArgs, ICompiledSubQuery[] subQueries);
    public abstract virtual IObjectReader GetNextResult(IObjectReaderSession session, bool disposeReader);
}
internal interface System.Data.Linq.SqlClient.IObjectReaderSession {
    public bool IsBuffered { get; }
    public abstract virtual bool get_IsBuffered();
    public abstract virtual void Buffer();
}
internal interface System.Data.Linq.SqlClient.IReaderProvider {
    public IDataServices Services { get; }
    public IConnectionManager ConnectionManager { get; }
    public abstract virtual IDataServices get_Services();
    public abstract virtual IConnectionManager get_ConnectionManager();
}
internal class System.Data.Linq.SqlClient.KnownExpression : InternalExpression {
    internal SqlNode Node { get; }
    internal KnownExpression(SqlNode node, Type type);
    internal SqlNode get_Node();
}
internal class System.Data.Linq.SqlClient.LinkedTableExpression : InternalExpression {
    internal SqlLink Link { get; }
    internal ITable Table { get; }
    internal LinkedTableExpression(SqlLink link, ITable table, Type type);
    internal SqlLink get_Link();
    internal ITable get_Table();
}
internal class System.Data.Linq.SqlClient.LiteralValidator : SqlVisitor {
    internal virtual SqlExpression VisitValue(SqlValue value);
    internal virtual SqlExpression VisitBinaryOperator(SqlBinary bo);
}
internal class System.Data.Linq.SqlClient.LongTypeConverter : object {
    internal LongTypeConverter(SqlFactory sql);
    internal SqlNode AddConversions(SqlNode node, SqlNodeAnnotations annotations);
}
internal class System.Data.Linq.SqlClient.MetaPosition : ValueType {
    private int metadataToken;
    private Assembly assembly;
    internal MetaPosition(MemberInfo mi);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(MetaPosition x, MetaPosition y);
    public sealed virtual int GetHashCode(MetaPosition obj);
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object x, object y);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
    public static bool op_Equality(MetaPosition x, MetaPosition y);
    public static bool op_Inequality(MetaPosition x, MetaPosition y);
    internal static bool AreSameMember(MemberInfo x, MemberInfo y);
}
internal class System.Data.Linq.SqlClient.MultisetChecker : object {
    internal static bool HasMultiset(SqlExpression expr);
}
internal class System.Data.Linq.SqlClient.ObjectReaderCompiler : object {
    private static ObjectReaderCompiler();
    internal ObjectReaderCompiler(Type dataReaderType, IDataServices services);
    public sealed virtual IObjectReaderFactory Compile(SqlExpression expression, Type elementType);
    public sealed virtual IObjectReaderSession CreateSession(DbDataReader reader, IReaderProvider provider, Object[] parentArgs, Object[] userArgs, ICompiledSubQuery[] subQueries);
}
[FlagsAttribute]
internal enum System.Data.Linq.SqlClient.OptimizationFlags : Enum {
    public int value__;
    public static OptimizationFlags None;
    public static OptimizationFlags SimplifyCaseStatements;
    public static OptimizationFlags OptimizeLinkExpansions;
    public static OptimizationFlags All;
}
internal static class System.Data.Linq.SqlClient.PostBindDotNetConverter : object {
    private static PostBindDotNetConverter();
    internal static SqlNode Convert(SqlNode node, SqlFactory sql, ProviderMode providerMode);
    internal static bool CanConvert(SqlNode node);
}
internal static class System.Data.Linq.SqlClient.PreBindDotNetConverter : object {
    internal static SqlNode Convert(SqlNode node, SqlFactory sql, MetaModel model);
    internal static bool CanConvert(SqlNode node);
}
internal abstract class System.Data.Linq.SqlClient.ProviderType : object {
    internal bool IsUnicodeType { get; }
    internal bool IsRuntimeOnlyType { get; }
    internal bool IsApplicationType { get; }
    internal bool SupportsComparison { get; }
    internal bool SupportsLength { get; }
    internal bool IsLargeType { get; }
    internal bool IsFixedSize { get; }
    internal bool HasSizeOrIsLarge { get; }
    internal Nullable`1<int> Size { get; }
    internal bool IsOrderable { get; }
    internal bool IsGroupable { get; }
    internal bool CanBeColumn { get; }
    internal bool CanBeParameter { get; }
    internal bool IsChar { get; }
    internal bool IsString { get; }
    internal bool IsNumeric { get; }
    internal bool HasPrecisionAndScale { get; }
    internal bool CanSuppressSizeForConversionToString { get; }
    internal abstract virtual bool get_IsUnicodeType();
    internal abstract virtual ProviderType GetNonUnicodeEquivalent();
    internal abstract virtual bool get_IsRuntimeOnlyType();
    internal abstract virtual bool get_IsApplicationType();
    internal abstract virtual bool IsApplicationTypeOf(int index);
    internal abstract virtual Type GetClosestRuntimeType();
    internal abstract virtual int ComparePrecedenceTo(ProviderType type);
    internal abstract virtual bool IsSameTypeFamily(ProviderType type);
    internal abstract virtual bool get_SupportsComparison();
    internal abstract virtual bool get_SupportsLength();
    internal abstract virtual bool AreValuesEqual(object o1, object o2);
    internal abstract virtual bool get_IsLargeType();
    internal abstract virtual string ToQueryString();
    internal abstract virtual string ToQueryString(QueryFormatOptions formatOptions);
    internal abstract virtual bool get_IsFixedSize();
    internal abstract virtual bool get_HasSizeOrIsLarge();
    internal abstract virtual Nullable`1<int> get_Size();
    internal abstract virtual bool get_IsOrderable();
    internal abstract virtual bool get_IsGroupable();
    internal abstract virtual bool get_CanBeColumn();
    internal abstract virtual bool get_CanBeParameter();
    internal abstract virtual bool get_IsChar();
    internal abstract virtual bool get_IsString();
    internal abstract virtual bool get_IsNumeric();
    internal abstract virtual bool get_HasPrecisionAndScale();
    internal abstract virtual bool get_CanSuppressSizeForConversionToString();
    public static bool op_Equality(ProviderType typeA, ProviderType typeB);
    public static bool op_Inequality(ProviderType typeA, ProviderType typeB);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Data.Linq.SqlClient.QueryConverter : object {
    internal ConverterStrategy ConverterStrategy { get; internal set; }
    internal QueryConverter(IDataServices services, TypeSystemProvider typeProvider, Translator translator, SqlFactory sql);
    internal ConverterStrategy get_ConverterStrategy();
    internal void set_ConverterStrategy(ConverterStrategy value);
    internal SqlNode ConvertOuter(Expression node);
    internal SqlNode Visit(Expression node);
    internal SqlNode ConvertInner(Expression node, Expression dominantExpression);
}
internal class System.Data.Linq.SqlClient.QueryExtractor : object {
    internal static SqlClientQuery Extract(SqlSubSelect subquery, IEnumerable`1<SqlParameter> parentParameters);
}
[FlagsAttribute]
internal enum System.Data.Linq.SqlClient.QueryFormatOptions : Enum {
    public int value__;
    public static QueryFormatOptions None;
    public static QueryFormatOptions SuppressSize;
}
internal static class System.Data.Linq.SqlClient.SimpleExpression : object {
    internal static bool IsSimple(SqlExpression expr);
}
internal class System.Data.Linq.SqlClient.SingleTableQueryVisitor : SqlVisitor {
    public bool IsValid;
    internal virtual SqlNode Visit(SqlNode node);
    internal virtual SqlTable VisitTable(SqlTable tab);
    internal virtual SqlSource VisitSource(SqlSource source);
    internal virtual SqlSelect VisitSelect(SqlSelect select);
    internal virtual SqlExpression VisitNew(SqlNew sox);
    internal virtual SqlNode VisitUnion(SqlUnion su);
}
public class System.Data.Linq.SqlClient.Sql2000Provider : SqlProvider {
}
public class System.Data.Linq.SqlClient.Sql2005Provider : SqlProvider {
}
public class System.Data.Linq.SqlClient.Sql2008Provider : SqlProvider {
}
internal class System.Data.Linq.SqlClient.SqlAggregateChecker : object {
    internal bool HasAggregates(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlAlias : SqlSource {
    internal string Name { get; internal set; }
    internal SqlNode Node { get; internal set; }
    internal SqlAlias(SqlNode node);
    internal string get_Name();
    internal void set_Name(string value);
    internal SqlNode get_Node();
    internal void set_Node(SqlNode value);
}
internal class System.Data.Linq.SqlClient.SqlAliaser : object {
    internal SqlNode AssociateColumnsWithAliases(SqlNode node);
}
internal static class System.Data.Linq.SqlClient.SqlAliasesReferenced : object {
    internal static bool ReferencesAny(SqlNode node, IEnumerable`1<SqlAlias> aliases);
}
internal class System.Data.Linq.SqlClient.SqlAliasRef : SqlExpression {
    internal SqlAlias Alias { get; }
    internal ProviderType SqlType { get; }
    internal SqlAliasRef(SqlAlias alias);
    internal SqlAlias get_Alias();
    internal virtual ProviderType get_SqlType();
}
internal class System.Data.Linq.SqlClient.SqlAssign : SqlStatement {
    internal SqlExpression LValue { get; internal set; }
    internal SqlExpression RValue { get; internal set; }
    internal SqlAssign(SqlExpression lValue, SqlExpression rValue, Expression sourceExpression);
    internal SqlExpression get_LValue();
    internal void set_LValue(SqlExpression value);
    internal SqlExpression get_RValue();
    internal void set_RValue(SqlExpression value);
}
internal class System.Data.Linq.SqlClient.SqlBetween : SqlSimpleTypeExpression {
    internal SqlExpression Expression { get; internal set; }
    internal SqlExpression Start { get; internal set; }
    internal SqlExpression End { get; internal set; }
    internal SqlBetween(Type clrType, ProviderType sqlType, SqlExpression expr, SqlExpression start, SqlExpression end, Expression source);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal SqlExpression get_Start();
    internal void set_Start(SqlExpression value);
    internal SqlExpression get_End();
    internal void set_End(SqlExpression value);
}
internal class System.Data.Linq.SqlClient.SqlBinary : SqlSimpleTypeExpression {
    internal SqlExpression Left { get; internal set; }
    internal SqlExpression Right { get; internal set; }
    internal MethodInfo Method { get; }
    internal SqlBinary(SqlNodeType nt, Type clrType, ProviderType sqlType, SqlExpression left, SqlExpression right);
    internal SqlBinary(SqlNodeType nt, Type clrType, ProviderType sqlType, SqlExpression left, SqlExpression right, MethodInfo method);
    internal SqlExpression get_Left();
    internal void set_Left(SqlExpression value);
    internal SqlExpression get_Right();
    internal void set_Right(SqlExpression value);
    internal MethodInfo get_Method();
}
internal class System.Data.Linq.SqlClient.SqlBinder : object {
    internal Func`2<SqlNode, SqlNode> PreBinder { get; internal set; }
    internal bool OptimizeLinkExpansions { get; internal set; }
    internal bool SimplifyCaseStatements { get; internal set; }
    internal SqlBinder(Translator translator, SqlFactory sqlFactory, MetaModel model, DataLoadOptions shape, SqlColumnizer columnizer, bool canUseOuterApply);
    internal Func`2<SqlNode, SqlNode> get_PreBinder();
    internal void set_PreBinder(Func`2<SqlNode, SqlNode> value);
    internal SqlNode Bind(SqlNode node);
    internal bool get_OptimizeLinkExpansions();
    internal void set_OptimizeLinkExpansions(bool value);
    internal bool get_SimplifyCaseStatements();
    internal void set_SimplifyCaseStatements(bool value);
}
internal class System.Data.Linq.SqlClient.SqlBlock : SqlStatement {
    internal List`1<SqlStatement> Statements { get; }
    internal SqlBlock(Expression sourceExpression);
    internal List`1<SqlStatement> get_Statements();
}
internal class System.Data.Linq.SqlClient.SqlBooleanizer : object {
    internal static SqlNode Rationalize(SqlNode node, TypeSystemProvider typeProvider, MetaModel model);
}
internal abstract class System.Data.Linq.SqlClient.SqlBooleanMismatchVisitor : SqlVisitor {
    internal abstract virtual SqlExpression ConvertValueToPredicate(SqlExpression valueExpression);
    internal abstract virtual SqlExpression ConvertPredicateToValue(SqlExpression predicateExpression);
    internal virtual SqlSelect VisitSelect(SqlSelect select);
    internal virtual SqlSource VisitJoin(SqlJoin join);
    internal virtual SqlExpression VisitUnaryOperator(SqlUnary uo);
    internal virtual SqlExpression VisitBinaryOperator(SqlBinary bo);
    internal virtual SqlStatement VisitAssign(SqlAssign sa);
    internal virtual SqlExpression VisitSearchedCase(SqlSearchedCase c);
    internal virtual SqlExpression VisitLift(SqlLift lift);
    internal SqlExpression VisitPredicate(SqlExpression exp);
    internal virtual SqlExpression VisitExpression(SqlExpression exp);
}
internal static class System.Data.Linq.SqlClient.SqlBuilder : object {
    internal static string GetCreateDatabaseCommand(string catalog, string dataFilename, string logFilename);
    internal static string GetDropDatabaseCommand(string catalog);
    internal static string GetCreateSchemaForTableCommand(MetaTable table);
    internal static string GetCreateTableCommand(MetaTable table);
    internal static void BuildFieldDeclarations(MetaTable table, StringBuilder sb);
    internal static IEnumerable`1<string> GetCreateForeignKeyCommands(MetaTable table);
    internal static bool IsNullable(Type type);
}
internal class System.Data.Linq.SqlClient.SqlCaseSimplifier : object {
    internal static SqlNode Simplify(SqlNode node, SqlFactory sql);
}
internal class System.Data.Linq.SqlClient.SqlClientArray : SqlSimpleTypeExpression {
    internal List`1<SqlExpression> Expressions { get; }
    internal SqlClientArray(Type clrType, ProviderType sqlType, SqlExpression[] exprs, Expression sourceExpression);
    internal List`1<SqlExpression> get_Expressions();
}
internal class System.Data.Linq.SqlClient.SqlClientCase : SqlExpression {
    internal SqlExpression Expression { get; internal set; }
    internal List`1<SqlClientWhen> Whens { get; }
    internal ProviderType SqlType { get; }
    internal SqlClientCase(Type clrType, SqlExpression expr, IEnumerable`1<SqlClientWhen> whens, Expression sourceExpression);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal List`1<SqlClientWhen> get_Whens();
    internal virtual ProviderType get_SqlType();
}
internal class System.Data.Linq.SqlClient.SqlClientParameter : SqlSimpleTypeExpression {
    internal LambdaExpression Accessor { get; }
    internal SqlClientParameter(Type clrType, ProviderType sqlType, LambdaExpression accessor, Expression sourceExpression);
    internal LambdaExpression get_Accessor();
}
internal class System.Data.Linq.SqlClient.SqlClientQuery : SqlSimpleTypeExpression {
    internal SqlSubSelect Query { get; internal set; }
    internal List`1<SqlExpression> Arguments { get; }
    internal List`1<SqlParameter> Parameters { get; }
    internal int Ordinal { get; internal set; }
    internal SqlClientQuery(SqlSubSelect subquery);
    internal SqlSubSelect get_Query();
    internal void set_Query(SqlSubSelect value);
    internal List`1<SqlExpression> get_Arguments();
    internal List`1<SqlParameter> get_Parameters();
    internal int get_Ordinal();
    internal void set_Ordinal(int value);
}
internal class System.Data.Linq.SqlClient.SqlClientWhen : object {
    internal SqlExpression Match { get; internal set; }
    internal SqlExpression Value { get; internal set; }
    internal SqlClientWhen(SqlExpression match, SqlExpression value);
    internal SqlExpression get_Match();
    internal void set_Match(SqlExpression value);
    internal SqlExpression get_Value();
    internal void set_Value(SqlExpression value);
}
internal class System.Data.Linq.SqlClient.SqlColumn : SqlExpression {
    internal SqlAlias Alias { get; internal set; }
    internal string Name { get; internal set; }
    internal int Ordinal { get; internal set; }
    internal MetaDataMember MetaMember { get; }
    internal SqlExpression Expression { get; internal set; }
    internal ProviderType SqlType { get; }
    internal SqlColumn(Type clrType, ProviderType sqlType, string name, MetaDataMember member, SqlExpression expr, Expression sourceExpression);
    internal SqlColumn(string name, SqlExpression expr);
    internal SqlAlias get_Alias();
    internal void set_Alias(SqlAlias value);
    internal string get_Name();
    internal void set_Name(string value);
    internal int get_Ordinal();
    internal void set_Ordinal(int value);
    internal MetaDataMember get_MetaMember();
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal virtual ProviderType get_SqlType();
}
internal class System.Data.Linq.SqlClient.SqlColumnizer : object {
    internal SqlExpression ColumnizeSelection(SqlExpression selection);
    internal static bool CanBeColumn(SqlExpression expression);
}
internal class System.Data.Linq.SqlClient.SqlColumnRef : SqlExpression {
    internal SqlColumn Column { get; }
    internal ProviderType SqlType { get; }
    internal SqlColumnRef(SqlColumn col);
    internal SqlColumn get_Column();
    internal virtual ProviderType get_SqlType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal SqlColumn GetRootColumn();
}
internal class System.Data.Linq.SqlClient.SqlComparer : object {
    internal static bool AreEqual(SqlNode node1, SqlNode node2);
}
internal class System.Data.Linq.SqlClient.SqlConnectionManager : object {
    internal DbConnection Connection { get; }
    internal int MaxUsers { get; }
    internal bool AutoClose { get; internal set; }
    internal DbTransaction Transaction { get; internal set; }
    internal SqlConnectionManager(IProvider provider, DbConnection con, int maxUsers, bool disposeConnection);
    public sealed virtual DbConnection UseConnection(IConnectionUser user);
    internal DbConnection get_Connection();
    internal int get_MaxUsers();
    internal void DisposeConnection();
    internal void ClearConnection();
    internal bool get_AutoClose();
    internal void set_AutoClose(bool value);
    internal DbTransaction get_Transaction();
    internal void set_Transaction(DbTransaction value);
    public sealed virtual void ReleaseConnection(IConnectionUser user);
}
internal class System.Data.Linq.SqlClient.SqlCrossApplyToCrossJoin : object {
    internal static SqlNode Reduce(SqlNode node, SqlNodeAnnotations annotations);
}
internal class System.Data.Linq.SqlClient.SqlDeflator : object {
    internal SqlNode Deflate(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlDelete : SqlStatement {
    internal SqlSelect Select { get; internal set; }
    internal SqlDelete(SqlSelect select, Expression sourceExpression);
    internal SqlSelect get_Select();
    internal void set_Select(SqlSelect value);
}
internal class System.Data.Linq.SqlClient.SqlDiscriminatedType : SqlExpression {
    internal ProviderType SqlType { get; }
    internal SqlExpression Discriminator { get; internal set; }
    internal MetaType TargetType { get; }
    internal SqlDiscriminatedType(ProviderType sqlType, SqlExpression discriminator, MetaType targetType, Expression sourceExpression);
    internal virtual ProviderType get_SqlType();
    internal SqlExpression get_Discriminator();
    internal void set_Discriminator(SqlExpression value);
    internal MetaType get_TargetType();
}
internal class System.Data.Linq.SqlClient.SqlDiscriminatorOf : SqlSimpleTypeExpression {
    internal SqlExpression Object { get; internal set; }
    internal SqlDiscriminatorOf(SqlExpression obj, Type clrType, ProviderType sqlType, Expression sourceExpression);
    internal SqlExpression get_Object();
    internal void set_Object(SqlExpression value);
}
internal class System.Data.Linq.SqlClient.SqlDoNotVisitExpression : SqlExpression {
    internal SqlExpression Expression { get; }
    internal ProviderType SqlType { get; }
    internal SqlDoNotVisitExpression(SqlExpression expr);
    internal SqlExpression get_Expression();
    internal virtual ProviderType get_SqlType();
}
internal class System.Data.Linq.SqlClient.SqlDuplicator : object {
    internal SqlDuplicator(bool ignoreExternalRefs);
    internal static SqlNode Copy(SqlNode node);
    internal SqlNode Duplicate(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlExpander : object {
    internal SqlExpander(SqlFactory factory);
    internal SqlExpression Expand(SqlExpression exp);
}
internal abstract class System.Data.Linq.SqlClient.SqlExpression : SqlNode {
    internal Type ClrType { get; }
    internal ProviderType SqlType { get; }
    internal bool IsConstantColumn { get; }
    internal SqlExpression(SqlNodeType nodeType, Type clrType, Expression sourceExpression);
    internal Type get_ClrType();
    internal void SetClrType(Type type);
    internal abstract virtual ProviderType get_SqlType();
    internal bool get_IsConstantColumn();
}
internal static class System.Data.Linq.SqlClient.SqlExpressionNullability : object {
    internal static Nullable`1<bool> CanBeNull(SqlExpression expr);
}
internal class System.Data.Linq.SqlClient.SqlExprSet : SqlExpression {
    internal List`1<SqlExpression> Expressions { get; }
    internal ProviderType SqlType { get; }
    internal SqlExprSet(Type clrType, IEnumerable`1<SqlExpression> exprs, Expression sourceExpression);
    internal List`1<SqlExpression> get_Expressions();
    internal SqlExpression GetFirstExpression();
    internal virtual ProviderType get_SqlType();
}
internal class System.Data.Linq.SqlClient.SqlFactory : object {
    internal TypeSystemProvider TypeProvider { get; }
    internal SqlFactory(TypeSystemProvider typeProvider, MetaModel model);
    internal TypeSystemProvider get_TypeProvider();
    internal SqlExpression ConvertTo(Type clrType, ProviderType sqlType, SqlExpression expr);
    internal SqlExpression ConvertTo(Type clrType, SqlExpression expr);
    internal SqlExpression ConvertToBigint(SqlExpression expr);
    internal SqlExpression ConvertToInt(SqlExpression expr);
    internal SqlExpression ConvertToDouble(SqlExpression expr);
    internal SqlExpression ConvertTimeToDouble(SqlExpression exp);
    internal SqlExpression ConvertToBool(SqlExpression expr);
    internal SqlExpression ConvertToDateTime(SqlExpression expr);
    internal SqlExpression AndAccumulate(SqlExpression left, SqlExpression right);
    internal SqlExpression OrAccumulate(SqlExpression left, SqlExpression right);
    internal SqlExpression Concat(SqlExpression[] expressions);
    internal SqlExpression Add(SqlExpression[] expressions);
    internal SqlExpression Subtract(SqlExpression first, SqlExpression second);
    internal SqlExpression Multiply(SqlExpression[] expressions);
    internal SqlExpression Divide(SqlExpression first, SqlExpression second);
    internal SqlExpression Add(SqlExpression expr, int second);
    internal SqlExpression Subtract(SqlExpression expr, int second);
    internal SqlExpression Multiply(SqlExpression expr, long second);
    internal SqlExpression Divide(SqlExpression expr, long second);
    internal SqlExpression Mod(SqlExpression expr, long second);
    internal SqlExpression LEN(SqlExpression expr);
    internal SqlExpression DATALENGTH(SqlExpression expr);
    internal SqlExpression CLRLENGTH(SqlExpression expr);
    internal SqlExpression DATEPART(string partName, SqlExpression expr);
    internal SqlExpression DATEADD(string partName, SqlExpression value, SqlExpression expr);
    internal SqlExpression DATEADD(string partName, SqlExpression value, SqlExpression expr, Expression sourceExpression, bool asNullable);
    internal SqlExpression DATETIMEOFFSETADD(string partName, SqlExpression value, SqlExpression expr);
    internal SqlExpression DATETIMEOFFSETADD(string partName, SqlExpression value, SqlExpression expr, Expression sourceExpression, bool asNullable);
    internal SqlExpression AddTimeSpan(SqlExpression dateTime, SqlExpression timeSpan);
    internal SqlExpression AddTimeSpan(SqlExpression dateTime, SqlExpression timeSpan, bool asNullable);
    internal static bool IsSqlDateTimeType(SqlExpression exp);
    internal static bool IsSqlDateType(SqlExpression exp);
    internal static bool IsSqlTimeType(SqlExpression exp);
    internal static bool IsSqlDateTimeOffsetType(SqlExpression exp);
    internal static bool IsSqlHighPrecisionDateTimeType(SqlExpression exp);
    internal SqlExpression Value(Type clrType, ProviderType sqlType, object value, bool isClientSpecified, Expression sourceExpression);
    internal SqlExpression StaticType(MetaType typeOf, Expression sourceExpression);
    internal SqlExpression DiscriminatedType(SqlExpression discriminator, MetaType targetType);
    internal SqlTable Table(MetaTable table, MetaType rowType, Expression sourceExpression);
    internal SqlUnary Unary(SqlNodeType nodeType, SqlExpression expression);
    internal SqlRowNumber RowNumber(List`1<SqlOrderExpression> orderBy, Expression sourceExpression);
    internal SqlUnary Unary(SqlNodeType nodeType, SqlExpression expression, Expression sourceExpression);
    internal SqlUnary Unary(SqlNodeType nodeType, SqlExpression expression, MethodInfo method, Expression sourceExpression);
    internal SqlUnary UnaryConvert(Type targetClrType, ProviderType targetSqlType, SqlExpression expression, Expression sourceExpression);
    internal SqlUnary UnaryValueOf(SqlExpression expression, Expression sourceExpression);
    internal SqlBinary Binary(SqlNodeType nodeType, SqlExpression left, SqlExpression right);
    internal SqlBinary Binary(SqlNodeType nodeType, SqlExpression left, SqlExpression right, MethodInfo method);
    internal SqlBinary Binary(SqlNodeType nodeType, SqlExpression left, SqlExpression right, Type clrType);
    internal SqlBinary Binary(SqlNodeType nodeType, SqlExpression left, SqlExpression right, MethodInfo method, Type clrType);
    internal SqlBetween Between(SqlExpression expr, SqlExpression start, SqlExpression end, Expression source);
    internal SqlIn In(SqlExpression expr, IEnumerable`1<SqlExpression> values, Expression source);
    internal SqlLike Like(SqlExpression expr, SqlExpression pattern, SqlExpression escape, Expression source);
    internal SqlSearchedCase SearchedCase(SqlWhen[] whens, SqlExpression else, Expression sourceExpression);
    internal SqlExpression Case(Type clrType, SqlExpression discriminator, List`1<SqlExpression> matches, List`1<SqlExpression> values, Expression sourceExpression);
    internal SqlExpression Parameter(object value, Expression source);
    internal SqlExpression ValueFromObject(object value, Expression sourceExpression);
    internal SqlExpression ValueFromObject(object value, bool isClientSpecified, Expression sourceExpression);
    internal SqlExpression ValueFromObject(object value, Type clrType, bool isClientSpecified, Expression sourceExpression);
    public SqlExpression TypedLiteralNull(Type type, Expression sourceExpression);
    internal SqlMember Member(SqlExpression expr, MetaDataMember member);
    internal SqlMember Member(SqlExpression expr, MemberInfo member);
    internal SqlExpression TypeCase(Type clrType, MetaType rowType, SqlExpression discriminator, IEnumerable`1<SqlTypeCaseWhen> whens, Expression sourceExpression);
    internal SqlNew New(MetaType type, ConstructorInfo cons, IEnumerable`1<SqlExpression> args, IEnumerable`1<MemberInfo> argMembers, IEnumerable`1<SqlMemberAssign> bindings, Expression sourceExpression);
    internal SqlMethodCall MethodCall(MethodInfo method, SqlExpression obj, SqlExpression[] args, Expression sourceExpression);
    internal SqlMethodCall MethodCall(Type returnType, MethodInfo method, SqlExpression obj, SqlExpression[] args, Expression sourceExpression);
    internal SqlExprSet ExprSet(SqlExpression[] exprs, Expression sourceExpression);
    internal SqlSubSelect SubSelect(SqlNodeType nt, SqlSelect select);
    internal SqlSubSelect SubSelect(SqlNodeType nt, SqlSelect select, Type clrType);
    internal SqlDoNotVisitExpression DoNotVisitExpression(SqlExpression expr);
    internal SqlFunctionCall FunctionCall(Type clrType, string name, IEnumerable`1<SqlExpression> args, Expression source);
    internal SqlFunctionCall FunctionCall(Type clrType, ProviderType sqlType, string name, IEnumerable`1<SqlExpression> args, Expression source);
    internal SqlTableValuedFunctionCall TableValuedFunctionCall(MetaType rowType, Type clrType, string name, IEnumerable`1<SqlExpression> args, Expression source);
    internal ProviderType Default(Type clrType);
    internal ProviderType Default(MetaDataMember member);
    internal SqlJoin MakeJoin(SqlJoinType joinType, SqlSource location, SqlAlias alias, SqlExpression condition, Expression source);
}
internal class System.Data.Linq.SqlClient.SqlFlattener : object {
    internal SqlFlattener(SqlFactory sql, SqlColumnizer columnizer);
    internal SqlNode Flatten(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlFormatter : DbFormatter {
    internal bool ParenthesizeTop { get; internal set; }
    internal virtual string Format(SqlNode node, bool isDebug);
    internal String[] FormatBlock(SqlBlock block, bool isDebug);
    internal virtual string Format(SqlNode node);
    internal bool get_ParenthesizeTop();
    internal void set_ParenthesizeTop(bool value);
}
internal class System.Data.Linq.SqlClient.SqlFunctionCall : SqlSimpleTypeExpression {
    internal string Name { get; }
    internal List`1<SqlExpression> Arguments { get; }
    internal SqlFunctionCall(Type clrType, ProviderType sqlType, string name, IEnumerable`1<SqlExpression> args, Expression source);
    internal SqlFunctionCall(SqlNodeType nodeType, Type clrType, ProviderType sqlType, string name, IEnumerable`1<SqlExpression> args, Expression source);
    internal string get_Name();
    internal List`1<SqlExpression> get_Arguments();
}
internal class System.Data.Linq.SqlClient.SqlGatherConsumedAliases : object {
    internal static HashSet`1<SqlAlias> Gather(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlGatherProducedAliases : object {
    internal static HashSet`1<SqlAlias> Gather(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlGrouping : SqlSimpleTypeExpression {
    internal SqlExpression Key { get; internal set; }
    internal SqlExpression Group { get; internal set; }
    internal SqlGrouping(Type clrType, ProviderType sqlType, SqlExpression key, SqlExpression group, Expression sourceExpression);
    internal SqlExpression get_Key();
    internal void set_Key(SqlExpression value);
    internal SqlExpression get_Group();
    internal void set_Group(SqlExpression value);
}
public static class System.Data.Linq.SqlClient.SqlHelpers : object {
    public static string GetStringContainsPattern(string text, char escape);
    internal static string GetStringContainsPattern(string text, char escape, Boolean& usedEscapeChar);
    internal static string GetStringContainsPatternForced(string text, char escape);
    public static string GetStringStartsWithPattern(string text, char escape);
    internal static string GetStringStartsWithPattern(string text, char escape, Boolean& usedEscapeChar);
    internal static string GetStringStartsWithPatternForced(string text, char escape);
    public static string GetStringEndsWithPattern(string text, char escape);
    internal static string GetStringEndsWithPattern(string text, char escape, Boolean& usedEscapeChar);
    internal static string GetStringEndsWithPatternForced(string text, char escape);
    public static string TranslateVBLikePattern(string pattern, char escape);
}
internal static class System.Data.Linq.SqlClient.SqlIdentifier : object {
    private static SqlIdentifier();
    internal static string QuoteCompoundIdentifier(string s);
    internal static string QuoteIdentifier(string s);
    internal static IEnumerable`1<string> GetCompoundIdentifierParts(string s);
}
internal class System.Data.Linq.SqlClient.SqlIn : SqlSimpleTypeExpression {
    internal SqlExpression Expression { get; internal set; }
    internal List`1<SqlExpression> Values { get; }
    internal SqlIn(Type clrType, ProviderType sqlType, SqlExpression expression, IEnumerable`1<SqlExpression> values, Expression sourceExpression);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal List`1<SqlExpression> get_Values();
}
internal class System.Data.Linq.SqlClient.SqlIncludeScope : SqlNode {
    internal SqlNode Child { get; internal set; }
    internal SqlIncludeScope(SqlNode child, Expression sourceExpression);
    internal SqlNode get_Child();
    internal void set_Child(SqlNode value);
}
internal class System.Data.Linq.SqlClient.SqlInsert : SqlStatement {
    internal SqlTable Table { get; internal set; }
    internal SqlRow Row { get; internal set; }
    internal SqlExpression Expression { get; internal set; }
    internal SqlColumn OutputKey { get; internal set; }
    internal bool OutputToLocal { get; internal set; }
    internal SqlInsert(SqlTable table, SqlExpression expr, Expression sourceExpression);
    internal SqlTable get_Table();
    internal void set_Table(SqlTable value);
    internal SqlRow get_Row();
    internal void set_Row(SqlRow value);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal SqlColumn get_OutputKey();
    internal void set_OutputKey(SqlColumn value);
    internal bool get_OutputToLocal();
    internal void set_OutputToLocal(bool value);
}
internal class System.Data.Linq.SqlClient.SqlJoin : SqlSource {
    internal SqlJoinType JoinType { get; internal set; }
    internal SqlSource Left { get; internal set; }
    internal SqlSource Right { get; internal set; }
    internal SqlExpression Condition { get; internal set; }
    internal SqlJoin(SqlJoinType type, SqlSource left, SqlSource right, SqlExpression cond, Expression sourceExpression);
    internal SqlJoinType get_JoinType();
    internal void set_JoinType(SqlJoinType value);
    internal SqlSource get_Left();
    internal void set_Left(SqlSource value);
    internal SqlSource get_Right();
    internal void set_Right(SqlSource value);
    internal SqlExpression get_Condition();
    internal void set_Condition(SqlExpression value);
}
internal class System.Data.Linq.SqlClient.SqlJoinedCollection : SqlSimpleTypeExpression {
    internal SqlExpression Expression { get; internal set; }
    internal SqlExpression Count { get; internal set; }
    internal SqlJoinedCollection(Type clrType, ProviderType sqlType, SqlExpression expression, SqlExpression count, Expression sourceExpression);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal SqlExpression get_Count();
    internal void set_Count(SqlExpression value);
}
internal enum System.Data.Linq.SqlClient.SqlJoinType : Enum {
    public int value__;
    public static SqlJoinType Cross;
    public static SqlJoinType Inner;
    public static SqlJoinType LeftOuter;
    public static SqlJoinType CrossApply;
    public static SqlJoinType OuterApply;
}
internal class System.Data.Linq.SqlClient.SqlLift : SqlExpression {
    internal SqlExpression liftedExpression;
    internal SqlExpression Expression { get; internal set; }
    internal ProviderType SqlType { get; }
    internal SqlLift(Type type, SqlExpression liftedExpression, Expression sourceExpression);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal virtual ProviderType get_SqlType();
}
internal class System.Data.Linq.SqlClient.SqlLiftIndependentRowExpressions : object {
    internal static SqlNode Lift(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlLiftWhereClauses : object {
    internal static SqlNode Lift(SqlNode node, TypeSystemProvider typeProvider, MetaModel model);
}
internal class System.Data.Linq.SqlClient.SqlLike : SqlSimpleTypeExpression {
    internal SqlExpression Expression { get; internal set; }
    internal SqlExpression Pattern { get; internal set; }
    internal SqlExpression Escape { get; internal set; }
    internal SqlLike(Type clrType, ProviderType sqlType, SqlExpression expr, SqlExpression pattern, SqlExpression escape, Expression source);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal SqlExpression get_Pattern();
    internal void set_Pattern(SqlExpression value);
    internal SqlExpression get_Escape();
    internal void set_Escape(SqlExpression value);
}
internal class System.Data.Linq.SqlClient.SqlLink : SqlSimpleTypeExpression {
    internal MetaType RowType { get; }
    internal SqlExpression Expansion { get; internal set; }
    internal SqlExpression Expression { get; internal set; }
    internal MetaDataMember Member { get; }
    internal List`1<SqlExpression> KeyExpressions { get; }
    internal object Id { get; }
    internal SqlLink(object id, MetaType rowType, Type clrType, ProviderType sqlType, SqlExpression expression, MetaDataMember member, IEnumerable`1<SqlExpression> keyExpressions, SqlExpression expansion, Expression sourceExpression);
    internal MetaType get_RowType();
    internal SqlExpression get_Expansion();
    internal void set_Expansion(SqlExpression value);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal MetaDataMember get_Member();
    internal List`1<SqlExpression> get_KeyExpressions();
    internal object get_Id();
}
internal class System.Data.Linq.SqlClient.SqlMember : SqlSimpleTypeExpression {
    internal MemberInfo Member { get; }
    internal SqlExpression Expression { get; internal set; }
    internal SqlMember(Type clrType, ProviderType sqlType, SqlExpression expr, MemberInfo member);
    internal MemberInfo get_Member();
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
}
internal class System.Data.Linq.SqlClient.SqlMemberAssign : SqlNode {
    internal MemberInfo Member { get; }
    internal SqlExpression Expression { get; internal set; }
    internal SqlMemberAssign(MemberInfo member, SqlExpression expr);
    internal MemberInfo get_Member();
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
}
internal class System.Data.Linq.SqlClient.SqlMethodCall : SqlSimpleTypeExpression {
    internal MethodInfo Method { get; }
    internal SqlExpression Object { get; internal set; }
    internal List`1<SqlExpression> Arguments { get; }
    internal SqlMethodCall(Type clrType, ProviderType sqlType, MethodInfo method, SqlExpression obj, IEnumerable`1<SqlExpression> args, Expression sourceExpression);
    internal MethodInfo get_Method();
    internal SqlExpression get_Object();
    internal void set_Object(SqlExpression value);
    internal List`1<SqlExpression> get_Arguments();
}
public static class System.Data.Linq.SqlClient.SqlMethods : object {
    public static int DateDiffYear(DateTime startDate, DateTime endDate);
    public static Nullable`1<int> DateDiffYear(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static int DateDiffYear(DateTimeOffset startDate, DateTimeOffset endDate);
    public static Nullable`1<int> DateDiffYear(Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    public static int DateDiffMonth(DateTime startDate, DateTime endDate);
    public static Nullable`1<int> DateDiffMonth(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static int DateDiffMonth(DateTimeOffset startDate, DateTimeOffset endDate);
    public static Nullable`1<int> DateDiffMonth(Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    public static int DateDiffDay(DateTime startDate, DateTime endDate);
    public static Nullable`1<int> DateDiffDay(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static int DateDiffDay(DateTimeOffset startDate, DateTimeOffset endDate);
    public static Nullable`1<int> DateDiffDay(Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    public static int DateDiffHour(DateTime startDate, DateTime endDate);
    public static Nullable`1<int> DateDiffHour(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static int DateDiffHour(DateTimeOffset startDate, DateTimeOffset endDate);
    public static Nullable`1<int> DateDiffHour(Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    public static int DateDiffMinute(DateTime startDate, DateTime endDate);
    public static Nullable`1<int> DateDiffMinute(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static int DateDiffMinute(DateTimeOffset startDate, DateTimeOffset endDate);
    public static Nullable`1<int> DateDiffMinute(Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    public static int DateDiffSecond(DateTime startDate, DateTime endDate);
    public static Nullable`1<int> DateDiffSecond(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static int DateDiffSecond(DateTimeOffset startDate, DateTimeOffset endDate);
    public static Nullable`1<int> DateDiffSecond(Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    public static int DateDiffMillisecond(DateTime startDate, DateTime endDate);
    public static Nullable`1<int> DateDiffMillisecond(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static int DateDiffMillisecond(DateTimeOffset startDate, DateTimeOffset endDate);
    public static Nullable`1<int> DateDiffMillisecond(Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    public static int DateDiffMicrosecond(DateTime startDate, DateTime endDate);
    public static Nullable`1<int> DateDiffMicrosecond(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static int DateDiffMicrosecond(DateTimeOffset startDate, DateTimeOffset endDate);
    public static Nullable`1<int> DateDiffMicrosecond(Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    public static int DateDiffNanosecond(DateTime startDate, DateTime endDate);
    public static Nullable`1<int> DateDiffNanosecond(Nullable`1<DateTime> startDate, Nullable`1<DateTime> endDate);
    public static int DateDiffNanosecond(DateTimeOffset startDate, DateTimeOffset endDate);
    public static Nullable`1<int> DateDiffNanosecond(Nullable`1<DateTimeOffset> startDate, Nullable`1<DateTimeOffset> endDate);
    public static bool Like(string matchExpression, string pattern);
    public static bool Like(string matchExpression, string pattern, char escapeCharacter);
    internal static int RawLength(string value);
    internal static int RawLength(Byte[] value);
    internal static int RawLength(Binary value);
}
internal class System.Data.Linq.SqlClient.SqlMethodTransformer : SqlVisitor {
    protected SqlFactory sql;
    internal SqlMethodTransformer(SqlFactory sql);
    internal virtual SqlExpression VisitFunctionCall(SqlFunctionCall fc);
    internal virtual SqlExpression VisitUnaryOperator(SqlUnary fc);
}
internal class System.Data.Linq.SqlClient.SqlMultiplexer : object {
    internal SqlMultiplexer(Options options, IEnumerable`1<SqlParameter> parentParameters, SqlFactory sqlFactory);
    internal SqlNode Multiplex(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlNamer : object {
    internal SqlNode AssignNames(SqlNode node);
    internal static string DiscoverName(SqlExpression e);
}
internal class System.Data.Linq.SqlClient.SqlNew : SqlSimpleTypeExpression {
    internal MetaType MetaType { get; }
    internal ConstructorInfo Constructor { get; }
    internal List`1<SqlExpression> Args { get; }
    internal List`1<MemberInfo> ArgMembers { get; }
    internal List`1<SqlMemberAssign> Members { get; }
    internal SqlNew(MetaType metaType, ProviderType sqlType, ConstructorInfo cons, IEnumerable`1<SqlExpression> args, IEnumerable`1<MemberInfo> argMembers, IEnumerable`1<SqlMemberAssign> members, Expression sourceExpression);
    internal MetaType get_MetaType();
    internal ConstructorInfo get_Constructor();
    internal List`1<SqlExpression> get_Args();
    internal List`1<MemberInfo> get_ArgMembers();
    internal List`1<SqlMemberAssign> get_Members();
    internal SqlExpression Find(MemberInfo mi);
}
[DebuggerDisplayAttribute("text = {Text}, 
source = {SourceExpression}")]
internal abstract class System.Data.Linq.SqlClient.SqlNode : object {
    internal Expression SourceExpression { get; }
    internal SqlNodeType NodeType { get; }
    internal SqlNode(SqlNodeType nodeType, Expression sourceExpression);
    internal Expression get_SourceExpression();
    internal void ClearSourceExpression();
    internal SqlNodeType get_NodeType();
}
internal abstract class System.Data.Linq.SqlClient.SqlNodeAnnotation : object {
    internal string Message { get; }
    internal SqlNodeAnnotation(string message);
    internal string get_Message();
}
internal class System.Data.Linq.SqlClient.SqlNodeAnnotations : object {
    internal void Add(SqlNode node, SqlNodeAnnotation annotation);
    internal List`1<SqlNodeAnnotation> Get(SqlNode node);
    internal bool NodeIsAnnotated(SqlNode node);
    internal bool HasAnnotationType(Type type);
}
internal enum System.Data.Linq.SqlClient.SqlNodeType : Enum {
    public int value__;
    public static SqlNodeType Add;
    public static SqlNodeType Alias;
    public static SqlNodeType AliasRef;
    public static SqlNodeType And;
    public static SqlNodeType Assign;
    public static SqlNodeType Avg;
    public static SqlNodeType Between;
    public static SqlNodeType BitAnd;
    public static SqlNodeType BitNot;
    public static SqlNodeType BitOr;
    public static SqlNodeType BitXor;
    public static SqlNodeType Block;
    public static SqlNodeType ClientArray;
    public static SqlNodeType ClientCase;
    public static SqlNodeType ClientParameter;
    public static SqlNodeType ClientQuery;
    public static SqlNodeType ClrLength;
    public static SqlNodeType Coalesce;
    public static SqlNodeType Column;
    public static SqlNodeType ColumnRef;
    public static SqlNodeType Concat;
    public static SqlNodeType Convert;
    public static SqlNodeType Count;
    public static SqlNodeType Delete;
    public static SqlNodeType DiscriminatedType;
    public static SqlNodeType DiscriminatorOf;
    public static SqlNodeType Div;
    public static SqlNodeType DoNotVisit;
    public static SqlNodeType Element;
    public static SqlNodeType ExprSet;
    public static SqlNodeType EQ;
    public static SqlNodeType EQ2V;
    public static SqlNodeType Exists;
    public static SqlNodeType FunctionCall;
    public static SqlNodeType In;
    public static SqlNodeType IncludeScope;
    public static SqlNodeType IsNotNull;
    public static SqlNodeType IsNull;
    public static SqlNodeType LE;
    public static SqlNodeType Lift;
    public static SqlNodeType Link;
    public static SqlNodeType Like;
    public static SqlNodeType LongCount;
    public static SqlNodeType LT;
    public static SqlNodeType GE;
    public static SqlNodeType Grouping;
    public static SqlNodeType GT;
    public static SqlNodeType Insert;
    public static SqlNodeType Join;
    public static SqlNodeType JoinedCollection;
    public static SqlNodeType Max;
    public static SqlNodeType MethodCall;
    public static SqlNodeType Member;
    public static SqlNodeType MemberAssign;
    public static SqlNodeType Min;
    public static SqlNodeType Mod;
    public static SqlNodeType Mul;
    public static SqlNodeType Multiset;
    public static SqlNodeType NE;
    public static SqlNodeType NE2V;
    public static SqlNodeType Negate;
    public static SqlNodeType New;
    public static SqlNodeType Not;
    public static SqlNodeType Not2V;
    public static SqlNodeType Nop;
    public static SqlNodeType Or;
    public static SqlNodeType OptionalValue;
    public static SqlNodeType OuterJoinedValue;
    public static SqlNodeType Parameter;
    public static SqlNodeType Property;
    public static SqlNodeType Row;
    public static SqlNodeType RowNumber;
    public static SqlNodeType ScalarSubSelect;
    public static SqlNodeType SearchedCase;
    public static SqlNodeType Select;
    public static SqlNodeType SharedExpression;
    public static SqlNodeType SharedExpressionRef;
    public static SqlNodeType SimpleCase;
    public static SqlNodeType SimpleExpression;
    public static SqlNodeType Stddev;
    public static SqlNodeType StoredProcedureCall;
    public static SqlNodeType Sub;
    public static SqlNodeType Sum;
    public static SqlNodeType Table;
    public static SqlNodeType TableValuedFunctionCall;
    public static SqlNodeType Treat;
    public static SqlNodeType TypeCase;
    public static SqlNodeType Union;
    public static SqlNodeType Update;
    public static SqlNodeType UserColumn;
    public static SqlNodeType UserQuery;
    public static SqlNodeType UserRow;
    public static SqlNodeType Variable;
    public static SqlNodeType Value;
    public static SqlNodeType ValueOf;
}
[ExtensionAttribute]
internal static class System.Data.Linq.SqlClient.SqlNodeTypeOperators : object {
    [ExtensionAttribute]
internal static bool IsPredicateUnaryOperator(SqlNodeType nodeType);
    [ExtensionAttribute]
internal static bool IsUnaryOperatorExpectingPredicateOperand(SqlNodeType nodeType);
    [ExtensionAttribute]
internal static bool IsPredicateBinaryOperator(SqlNodeType nodeType);
    [ExtensionAttribute]
internal static bool IsComparisonOperator(SqlNodeType nodeType);
    [ExtensionAttribute]
internal static bool IsBinaryOperatorExpectingPredicateOperands(SqlNodeType nodeType);
    [ExtensionAttribute]
internal static bool IsClientAidedExpression(SqlExpression expr);
}
internal class System.Data.Linq.SqlClient.SqlNop : SqlSimpleTypeExpression {
    internal SqlNop(Type clrType, ProviderType sqlType, Expression sourceExpression);
}
internal class System.Data.Linq.SqlClient.SqlOptionalValue : SqlSimpleTypeExpression {
    internal SqlExpression HasValue { get; internal set; }
    internal SqlExpression Value { get; internal set; }
    internal SqlOptionalValue(SqlExpression hasValue, SqlExpression value);
    internal SqlExpression get_HasValue();
    internal void set_HasValue(SqlExpression value);
    internal SqlExpression get_Value();
    internal void set_Value(SqlExpression value);
}
internal class System.Data.Linq.SqlClient.SqlOrderExpression : object {
    internal SqlOrderType OrderType { get; internal set; }
    internal SqlExpression Expression { get; internal set; }
    internal SqlOrderExpression(SqlOrderType type, SqlExpression expr);
    internal SqlOrderType get_OrderType();
    internal void set_OrderType(SqlOrderType value);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SqlOrderExpression other);
    public virtual int GetHashCode();
}
internal enum System.Data.Linq.SqlClient.SqlOrderingType : Enum {
    public int value__;
    public static SqlOrderingType Default;
    public static SqlOrderingType Never;
    public static SqlOrderingType Blocked;
    public static SqlOrderingType Always;
}
internal enum System.Data.Linq.SqlClient.SqlOrderType : Enum {
    public int value__;
    public static SqlOrderType Ascending;
    public static SqlOrderType Descending;
}
internal class System.Data.Linq.SqlClient.SqlOuterApplyReducer : object {
    internal static SqlNode Reduce(SqlNode node, SqlFactory factory, SqlNodeAnnotations annotations);
}
internal class System.Data.Linq.SqlClient.SqlParameter : SqlSimpleTypeExpression {
    internal string Name { get; }
    internal ParameterDirection Direction { get; internal set; }
    internal SqlParameter(Type clrType, ProviderType sqlType, string name, Expression sourceExpression);
    internal string get_Name();
    internal ParameterDirection get_Direction();
    internal void set_Direction(ParameterDirection value);
}
internal class System.Data.Linq.SqlClient.SqlParameterInfo : object {
    internal SqlParameterType Type { get; }
    internal SqlParameter Parameter { get; }
    internal Delegate Accessor { get; }
    internal object Value { get; }
    internal SqlParameterInfo(SqlParameter parameter, Delegate accessor);
    internal SqlParameterInfo(SqlParameter parameter, object value);
    internal SqlParameterInfo(SqlParameter parameter);
    internal SqlParameterType get_Type();
    internal SqlParameter get_Parameter();
    internal Delegate get_Accessor();
    internal object get_Value();
}
internal class System.Data.Linq.SqlClient.SqlParameterizer : object {
    internal SqlParameterizer(TypeSystemProvider typeProvider, SqlNodeAnnotations annotations);
    internal ReadOnlyCollection`1<SqlParameterInfo> Parameterize(SqlNode node);
    internal ReadOnlyCollection`1<ReadOnlyCollection`1<SqlParameterInfo>> ParameterizeBlock(SqlBlock block);
    internal virtual string CreateParameterName();
}
internal enum System.Data.Linq.SqlClient.SqlParameterType : Enum {
    public int value__;
    public static SqlParameterType Value;
    public static SqlParameterType UserArgument;
    public static SqlParameterType PreviousResult;
}
public class System.Data.Linq.SqlClient.SqlProvider : object {
    internal ProviderMode Mode { get; }
    private DbConnection System.Data.Linq.Provider.IProvider.Connection { get; }
    private TextWriter System.Data.Linq.Provider.IProvider.Log { get; private set; }
    private DbTransaction System.Data.Linq.Provider.IProvider.Transaction { get; private set; }
    private int System.Data.Linq.Provider.IProvider.CommandTimeout { get; private set; }
    internal OptimizationFlags OptimizationFlags { get; internal set; }
    internal bool CheckQueries { get; internal set; }
    internal bool EnableCacheLookup { get; internal set; }
    internal int QueryCount { get; }
    internal int MaxUsers { get; }
    private IDataServices System.Data.Linq.SqlClient.IReaderProvider.Services { get; }
    private IConnectionManager System.Data.Linq.SqlClient.IReaderProvider.ConnectionManager { get; }
    internal SqlProvider(ProviderMode mode);
    internal ProviderMode get_Mode();
    private sealed virtual override DbConnection System.Data.Linq.Provider.IProvider.get_Connection();
    private sealed virtual override TextWriter System.Data.Linq.Provider.IProvider.get_Log();
    private sealed virtual override void System.Data.Linq.Provider.IProvider.set_Log(TextWriter value);
    private sealed virtual override DbTransaction System.Data.Linq.Provider.IProvider.get_Transaction();
    private sealed virtual override void System.Data.Linq.Provider.IProvider.set_Transaction(DbTransaction value);
    private sealed virtual override int System.Data.Linq.Provider.IProvider.get_CommandTimeout();
    private sealed virtual override void System.Data.Linq.Provider.IProvider.set_CommandTimeout(int value);
    internal OptimizationFlags get_OptimizationFlags();
    internal void set_OptimizationFlags(OptimizationFlags value);
    internal bool get_CheckQueries();
    internal void set_CheckQueries(bool value);
    internal bool get_EnableCacheLookup();
    internal void set_EnableCacheLookup(bool value);
    internal int get_QueryCount();
    internal int get_MaxUsers();
    private sealed virtual override IDataServices System.Data.Linq.SqlClient.IReaderProvider.get_Services();
    private sealed virtual override IConnectionManager System.Data.Linq.SqlClient.IReaderProvider.get_ConnectionManager();
    private sealed virtual override void System.Data.Linq.Provider.IProvider.Initialize(IDataServices dataServices, object connection);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal void CheckDispose();
    private sealed virtual override void System.Data.Linq.Provider.IProvider.CreateDatabase();
    private sealed virtual override void System.Data.Linq.Provider.IProvider.DeleteDatabase();
    private sealed virtual override bool System.Data.Linq.Provider.IProvider.DatabaseExists();
    private sealed virtual override void System.Data.Linq.SqlClient.IConnectionUser.CompleteUse();
    private sealed virtual override void System.Data.Linq.Provider.IProvider.ClearConnection();
    private sealed virtual override ICompiledQuery System.Data.Linq.Provider.IProvider.Compile(Expression query);
    private sealed virtual override IExecuteResult System.Data.Linq.Provider.IProvider.Execute(Expression query);
    private sealed virtual override IEnumerable System.Data.Linq.Provider.IProvider.Translate(Type elementType, DbDataReader reader);
    private sealed virtual override IMultipleResults System.Data.Linq.Provider.IProvider.Translate(DbDataReader reader);
    private sealed virtual override string System.Data.Linq.Provider.IProvider.GetQueryText(Expression query);
    private sealed virtual override DbCommand System.Data.Linq.Provider.IProvider.GetCommand(Expression query);
    internal QueryInfo[] BuildQuery(Expression query, SqlNodeAnnotations annotations);
}
internal class System.Data.Linq.SqlClient.SqlRemoveConstantOrderBy : object {
    internal static SqlNode Remove(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlReorderer : object {
    internal SqlReorderer(TypeSystemProvider typeProvider, SqlFactory sqlFactory);
    internal SqlNode Reorder(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlResolver : object {
    internal SqlNode Resolve(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlRetyper : object {
    internal SqlRetyper(TypeSystemProvider typeProvider, MetaModel model);
    internal SqlNode Retype(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlRewriteScalarSubqueries : object {
    internal SqlRewriteScalarSubqueries(SqlFactory sqlFactory);
    internal SqlNode Rewrite(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlRow : SqlNode {
    internal List`1<SqlColumn> Columns { get; }
    internal SqlRow(Expression sourceExpression);
    internal List`1<SqlColumn> get_Columns();
    internal SqlColumn Find(string name);
}
internal class System.Data.Linq.SqlClient.SqlRowNumber : SqlSimpleTypeExpression {
    internal List`1<SqlOrderExpression> OrderBy { get; }
    internal SqlRowNumber(Type clrType, ProviderType sqlType, List`1<SqlOrderExpression> orderByList, Expression sourceExpression);
    internal List`1<SqlOrderExpression> get_OrderBy();
}
internal class System.Data.Linq.SqlClient.SqlRowNumberChecker : object {
    internal SqlColumn RowNumberColumn { get; }
    internal bool HasRowNumber(SqlNode node);
    internal bool HasRowNumber(SqlRow row);
    internal SqlColumn get_RowNumberColumn();
}
internal class System.Data.Linq.SqlClient.SqlSearchedCase : SqlExpression {
    internal List`1<SqlWhen> Whens { get; }
    internal SqlExpression Else { get; internal set; }
    internal ProviderType SqlType { get; }
    internal SqlSearchedCase(Type clrType, IEnumerable`1<SqlWhen> whens, SqlExpression else, Expression sourceExpression);
    internal List`1<SqlWhen> get_Whens();
    internal SqlExpression get_Else();
    internal void set_Else(SqlExpression value);
    internal virtual ProviderType get_SqlType();
}
internal class System.Data.Linq.SqlClient.SqlSelect : SqlStatement {
    internal SqlExpression Top { get; internal set; }
    internal bool IsPercent { get; internal set; }
    internal bool IsDistinct { get; internal set; }
    internal SqlExpression Selection { get; internal set; }
    internal SqlRow Row { get; internal set; }
    internal SqlSource From { get; internal set; }
    internal SqlExpression Where { get; internal set; }
    internal List`1<SqlExpression> GroupBy { get; }
    internal SqlExpression Having { get; internal set; }
    internal List`1<SqlOrderExpression> OrderBy { get; }
    internal SqlOrderingType OrderingType { get; internal set; }
    internal bool DoNotOutput { get; internal set; }
    internal SqlSelect(SqlExpression selection, SqlSource from, Expression sourceExpression);
    internal SqlExpression get_Top();
    internal void set_Top(SqlExpression value);
    internal bool get_IsPercent();
    internal void set_IsPercent(bool value);
    internal bool get_IsDistinct();
    internal void set_IsDistinct(bool value);
    internal SqlExpression get_Selection();
    internal void set_Selection(SqlExpression value);
    internal SqlRow get_Row();
    internal void set_Row(SqlRow value);
    internal SqlSource get_From();
    internal void set_From(SqlSource value);
    internal SqlExpression get_Where();
    internal void set_Where(SqlExpression value);
    internal List`1<SqlExpression> get_GroupBy();
    internal SqlExpression get_Having();
    internal void set_Having(SqlExpression value);
    internal List`1<SqlOrderExpression> get_OrderBy();
    internal SqlOrderingType get_OrderingType();
    internal void set_OrderingType(SqlOrderingType value);
    internal bool get_DoNotOutput();
    internal void set_DoNotOutput(bool value);
}
internal class System.Data.Linq.SqlClient.SqlServerCompatibilityAnnotation : SqlNodeAnnotation {
    internal SqlServerCompatibilityAnnotation(string message, ProviderMode[] providers);
    internal bool AppliesTo(ProviderMode provider);
}
internal static class System.Data.Linq.SqlClient.SqlServerCompatibilityCheck : object {
    internal static void ThrowIfUnsupported(SqlNode node, SqlNodeAnnotations annotations, ProviderMode provider);
}
internal class System.Data.Linq.SqlClient.SqlSharedExpression : SqlExpression {
    internal SqlExpression Expression { get; internal set; }
    internal ProviderType SqlType { get; }
    internal SqlSharedExpression(SqlExpression expr);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal virtual ProviderType get_SqlType();
}
internal class System.Data.Linq.SqlClient.SqlSharedExpressionRef : SqlExpression {
    internal SqlSharedExpression SharedExpression { get; }
    internal ProviderType SqlType { get; }
    internal SqlSharedExpressionRef(SqlSharedExpression expr);
    internal SqlSharedExpression get_SharedExpression();
    internal virtual ProviderType get_SqlType();
}
internal class System.Data.Linq.SqlClient.SqlSimpleCase : SqlExpression {
    internal SqlExpression Expression { get; internal set; }
    internal List`1<SqlWhen> Whens { get; }
    internal ProviderType SqlType { get; }
    internal SqlSimpleCase(Type clrType, SqlExpression expr, IEnumerable`1<SqlWhen> whens, Expression sourceExpression);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal List`1<SqlWhen> get_Whens();
    internal virtual ProviderType get_SqlType();
}
internal class System.Data.Linq.SqlClient.SqlSimpleExpression : SqlExpression {
    internal SqlExpression Expression { get; internal set; }
    internal ProviderType SqlType { get; }
    internal SqlSimpleExpression(SqlExpression expr);
    internal SqlExpression get_Expression();
    internal void set_Expression(SqlExpression value);
    internal virtual ProviderType get_SqlType();
}
internal abstract class System.Data.Linq.SqlClient.SqlSimpleTypeExpression : SqlExpression {
    internal ProviderType SqlType { get; }
    internal SqlSimpleTypeExpression(SqlNodeType nodeType, Type clrType, ProviderType sqlType, Expression sourceExpression);
    internal virtual ProviderType get_SqlType();
    internal void SetSqlType(ProviderType type);
}
internal abstract class System.Data.Linq.SqlClient.SqlSource : SqlNode {
    internal SqlSource(SqlNodeType nt, Expression sourceExpression);
}
internal abstract class System.Data.Linq.SqlClient.SqlStatement : SqlNode {
    internal SqlStatement(SqlNodeType nodeType, Expression sourceExpression);
}
internal class System.Data.Linq.SqlClient.SqlStoredProcedureCall : SqlUserQuery {
    internal MetaFunction Function { get; }
    internal SqlStoredProcedureCall(MetaFunction function, SqlExpression projection, IEnumerable`1<SqlExpression> args, Expression source);
    internal MetaFunction get_Function();
}
internal class System.Data.Linq.SqlClient.SqlSubSelect : SqlSimpleTypeExpression {
    internal SqlSelect Select { get; internal set; }
    internal SqlSubSelect(SqlNodeType nt, Type clrType, ProviderType sqlType, SqlSelect select);
    internal SqlSelect get_Select();
    internal void set_Select(SqlSelect value);
}
internal class System.Data.Linq.SqlClient.SqlSupersetValidator : object {
    internal void AddValidator(SqlVisitor validator);
    internal void Validate(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlTable : SqlNode {
    internal MetaTable MetaTable { get; }
    internal string Name { get; }
    internal List`1<SqlColumn> Columns { get; }
    internal MetaType RowType { get; }
    internal ProviderType SqlRowType { get; }
    internal SqlTable(MetaTable table, MetaType rowType, ProviderType sqlRowType, Expression sourceExpression);
    internal MetaTable get_MetaTable();
    internal string get_Name();
    internal List`1<SqlColumn> get_Columns();
    internal MetaType get_RowType();
    internal ProviderType get_SqlRowType();
    internal SqlColumn Find(string columnName);
}
internal class System.Data.Linq.SqlClient.SqlTableValuedFunctionCall : SqlFunctionCall {
    internal MetaType RowType { get; }
    internal List`1<SqlColumn> Columns { get; }
    internal SqlTableValuedFunctionCall(MetaType rowType, Type clrType, ProviderType sqlType, string name, IEnumerable`1<SqlExpression> args, Expression source);
    internal MetaType get_RowType();
    internal List`1<SqlColumn> get_Columns();
    internal SqlColumn Find(string name);
}
internal class System.Data.Linq.SqlClient.SqlTopReducer : object {
    internal static SqlNode Reduce(SqlNode node, SqlNodeAnnotations annotations, SqlFactory sql);
}
internal class System.Data.Linq.SqlClient.SqlTypeCase : SqlExpression {
    internal SqlExpression Discriminator { get; internal set; }
    internal List`1<SqlTypeCaseWhen> Whens { get; }
    internal ProviderType SqlType { get; }
    internal MetaType RowType { get; }
    internal SqlTypeCase(Type clrType, ProviderType sqlType, MetaType rowType, SqlExpression discriminator, IEnumerable`1<SqlTypeCaseWhen> whens, Expression sourceExpression);
    internal SqlExpression get_Discriminator();
    internal void set_Discriminator(SqlExpression value);
    internal List`1<SqlTypeCaseWhen> get_Whens();
    internal virtual ProviderType get_SqlType();
    internal MetaType get_RowType();
}
internal class System.Data.Linq.SqlClient.SqlTypeCaseWhen : object {
    internal SqlExpression Match { get; internal set; }
    internal SqlExpression TypeBinding { get; internal set; }
    internal SqlTypeCaseWhen(SqlExpression match, SqlExpression typeBinding);
    internal SqlExpression get_Match();
    internal void set_Match(SqlExpression value);
    internal SqlExpression get_TypeBinding();
    internal void set_TypeBinding(SqlExpression value);
}
internal class System.Data.Linq.SqlClient.SqlTypeConverter : SqlVisitor {
    protected SqlFactory sql;
    internal SqlTypeConverter(SqlFactory sql);
    internal virtual SqlExpression VisitUnaryOperator(SqlUnary uo);
}
internal static class System.Data.Linq.SqlClient.SqlTypeSystem : object {
    internal static short LargeTypeSizeIndicator;
    private static SqlTypeSystem();
    internal static TypeSystemProvider Create2000Provider();
    internal static TypeSystemProvider Create2005Provider();
    internal static TypeSystemProvider Create2008Provider();
    internal static TypeSystemProvider CreateCEProvider();
}
internal class System.Data.Linq.SqlClient.SqlUnary : SqlSimpleTypeExpression {
    internal SqlExpression Operand { get; internal set; }
    internal MethodInfo Method { get; }
    internal SqlUnary(SqlNodeType nt, Type clrType, ProviderType sqlType, SqlExpression expr, Expression sourceExpression);
    internal SqlUnary(SqlNodeType nt, Type clrType, ProviderType sqlType, SqlExpression expr, MethodInfo method, Expression sourceExpression);
    internal SqlExpression get_Operand();
    internal void set_Operand(SqlExpression value);
    internal MethodInfo get_Method();
}
internal class System.Data.Linq.SqlClient.SqlUnion : SqlNode {
    internal SqlNode Left { get; internal set; }
    internal SqlNode Right { get; internal set; }
    internal bool All { get; internal set; }
    internal SqlUnion(SqlNode left, SqlNode right, bool all);
    internal SqlNode get_Left();
    internal void set_Left(SqlNode value);
    internal SqlNode get_Right();
    internal void set_Right(SqlNode value);
    internal bool get_All();
    internal void set_All(bool value);
    internal Type GetClrType();
    internal ProviderType GetSqlType();
}
internal class System.Data.Linq.SqlClient.SqlUnionizer : object {
    internal static SqlNode Unionize(SqlNode node);
}
internal class System.Data.Linq.SqlClient.SqlUpdate : SqlStatement {
    internal SqlSelect Select { get; internal set; }
    internal List`1<SqlAssign> Assignments { get; }
    internal SqlUpdate(SqlSelect select, IEnumerable`1<SqlAssign> assignments, Expression sourceExpression);
    internal SqlSelect get_Select();
    internal void set_Select(SqlSelect value);
    internal List`1<SqlAssign> get_Assignments();
}
internal class System.Data.Linq.SqlClient.SqlUserColumn : SqlSimpleTypeExpression {
    internal SqlUserQuery Query { get; internal set; }
    internal string Name { get; }
    internal bool IsRequired { get; }
    internal SqlUserColumn(Type clrType, ProviderType sqlType, SqlUserQuery query, string name, bool isRequired, Expression source);
    internal SqlUserQuery get_Query();
    internal void set_Query(SqlUserQuery value);
    internal string get_Name();
    internal bool get_IsRequired();
}
internal class System.Data.Linq.SqlClient.SqlUserQuery : SqlNode {
    internal string QueryText { get; }
    internal SqlExpression Projection { get; internal set; }
    internal List`1<SqlExpression> Arguments { get; }
    internal List`1<SqlUserColumn> Columns { get; }
    internal SqlUserQuery(SqlNodeType nt, SqlExpression projection, IEnumerable`1<SqlExpression> args, Expression source);
    internal SqlUserQuery(string queryText, SqlExpression projection, IEnumerable`1<SqlExpression> args, Expression source);
    internal string get_QueryText();
    internal SqlExpression get_Projection();
    internal void set_Projection(SqlExpression value);
    internal List`1<SqlExpression> get_Arguments();
    internal List`1<SqlUserColumn> get_Columns();
    internal SqlUserColumn Find(string name);
}
internal class System.Data.Linq.SqlClient.SqlUserRow : SqlSimpleTypeExpression {
    internal MetaType RowType { get; }
    internal SqlUserQuery Query { get; internal set; }
    internal SqlUserRow(MetaType rowType, ProviderType sqlType, SqlUserQuery query, Expression source);
    internal MetaType get_RowType();
    internal SqlUserQuery get_Query();
    internal void set_Query(SqlUserQuery value);
}
internal class System.Data.Linq.SqlClient.SqlValue : SqlSimpleTypeExpression {
    internal object Value { get; }
    internal bool IsClientSpecified { get; }
    internal SqlValue(Type clrType, ProviderType sqlType, object value, bool isClientSpecified, Expression sourceExpression);
    internal object get_Value();
    internal bool get_IsClientSpecified();
}
internal class System.Data.Linq.SqlClient.SqlVariable : SqlSimpleTypeExpression {
    internal string Name { get; }
    internal SqlVariable(Type clrType, ProviderType sqlType, string name, Expression sourceExpression);
    internal string get_Name();
}
internal abstract class System.Data.Linq.SqlClient.SqlVisitor : object {
    internal virtual SqlNode Visit(SqlNode node);
    [ConditionalAttribute("DEBUG")]
internal static void CheckRecursionDepth(int maxLevel, int level);
    internal object Eval(SqlExpression expr);
    internal virtual SqlExpression VisitDoNotVisit(SqlDoNotVisitExpression expr);
    internal virtual SqlRowNumber VisitRowNumber(SqlRowNumber rowNumber);
    internal virtual SqlExpression VisitExpression(SqlExpression exp);
    internal virtual SqlSelect VisitSequence(SqlSelect sel);
    internal virtual SqlExpression VisitNop(SqlNop nop);
    internal virtual SqlExpression VisitLift(SqlLift lift);
    internal virtual SqlExpression VisitUnaryOperator(SqlUnary uo);
    internal virtual SqlExpression VisitBinaryOperator(SqlBinary bo);
    internal virtual SqlAlias VisitAlias(SqlAlias a);
    internal virtual SqlExpression VisitAliasRef(SqlAliasRef aref);
    internal virtual SqlNode VisitMember(SqlMember m);
    internal virtual SqlExpression VisitCast(SqlUnary c);
    internal virtual SqlExpression VisitTreat(SqlUnary t);
    internal virtual SqlTable VisitTable(SqlTable tab);
    internal virtual SqlUserQuery VisitUserQuery(SqlUserQuery suq);
    internal virtual SqlStoredProcedureCall VisitStoredProcedureCall(SqlStoredProcedureCall spc);
    internal virtual SqlExpression VisitUserColumn(SqlUserColumn suc);
    internal virtual SqlExpression VisitUserRow(SqlUserRow row);
    internal virtual SqlRow VisitRow(SqlRow row);
    internal virtual SqlExpression VisitNew(SqlNew sox);
    internal virtual SqlNode VisitLink(SqlLink link);
    internal virtual SqlExpression VisitClientQuery(SqlClientQuery cq);
    internal virtual SqlExpression VisitJoinedCollection(SqlJoinedCollection jc);
    internal virtual SqlExpression VisitClientArray(SqlClientArray scar);
    internal virtual SqlExpression VisitClientParameter(SqlClientParameter cp);
    internal virtual SqlExpression VisitColumn(SqlColumn col);
    internal virtual SqlExpression VisitColumnRef(SqlColumnRef cref);
    internal virtual SqlExpression VisitParameter(SqlParameter p);
    internal virtual SqlExpression VisitValue(SqlValue value);
    internal virtual SqlExpression VisitSubSelect(SqlSubSelect ss);
    internal virtual SqlExpression VisitScalarSubSelect(SqlSubSelect ss);
    internal virtual SqlExpression VisitMultiset(SqlSubSelect sms);
    internal virtual SqlExpression VisitElement(SqlSubSelect elem);
    internal virtual SqlExpression VisitExists(SqlSubSelect sqlExpr);
    internal virtual SqlSource VisitJoin(SqlJoin join);
    internal virtual SqlSource VisitSource(SqlSource source);
    internal virtual SqlSelect VisitSelectCore(SqlSelect select);
    internal virtual SqlSelect VisitSelect(SqlSelect select);
    internal virtual SqlStatement VisitInsert(SqlInsert insert);
    internal virtual SqlStatement VisitUpdate(SqlUpdate update);
    internal virtual SqlStatement VisitDelete(SqlDelete delete);
    internal virtual SqlMemberAssign VisitMemberAssign(SqlMemberAssign ma);
    internal virtual SqlStatement VisitAssign(SqlAssign sa);
    internal virtual SqlBlock VisitBlock(SqlBlock b);
    internal virtual SqlExpression VisitSearchedCase(SqlSearchedCase c);
    internal virtual SqlExpression VisitClientCase(SqlClientCase c);
    internal virtual SqlExpression VisitSimpleCase(SqlSimpleCase c);
    internal virtual SqlExpression VisitTypeCase(SqlTypeCase tc);
    internal virtual SqlNode VisitUnion(SqlUnion su);
    internal virtual SqlExpression VisitExprSet(SqlExprSet xs);
    internal virtual SqlExpression VisitVariable(SqlVariable v);
    internal virtual SqlExpression VisitOptionalValue(SqlOptionalValue sov);
    internal virtual SqlExpression VisitBetween(SqlBetween between);
    internal virtual SqlExpression VisitIn(SqlIn sin);
    internal virtual SqlExpression VisitLike(SqlLike like);
    internal virtual SqlExpression VisitFunctionCall(SqlFunctionCall fc);
    internal virtual SqlExpression VisitTableValuedFunctionCall(SqlTableValuedFunctionCall fc);
    internal virtual SqlExpression VisitMethodCall(SqlMethodCall mc);
    internal virtual SqlExpression VisitSharedExpression(SqlSharedExpression shared);
    internal virtual SqlExpression VisitSharedExpressionRef(SqlSharedExpressionRef sref);
    internal virtual SqlExpression VisitSimpleExpression(SqlSimpleExpression simple);
    internal virtual SqlExpression VisitGrouping(SqlGrouping g);
    internal virtual SqlExpression VisitDiscriminatedType(SqlDiscriminatedType dt);
    internal virtual SqlExpression VisitDiscriminatorOf(SqlDiscriminatorOf dof);
    internal virtual SqlNode VisitIncludeScope(SqlIncludeScope node);
    internal bool RefersToColumn(SqlExpression exp, SqlColumn col);
}
internal class System.Data.Linq.SqlClient.SqlWhen : object {
    internal SqlExpression Match { get; internal set; }
    internal SqlExpression Value { get; internal set; }
    internal SqlWhen(SqlExpression match, SqlExpression value);
    internal SqlExpression get_Match();
    internal void set_Match(SqlExpression value);
    internal SqlExpression get_Value();
    internal void set_Value(SqlExpression value);
}
internal class System.Data.Linq.SqlClient.SR : object {
    internal static string OwningTeam;
    internal static string VbLikeDoesNotSupportMultipleCharacterRanges;
    internal static string VbLikeUnclosedBracket;
    internal static string UnrecognizedProviderMode;
    internal static string CompiledQueryCannotReturnType;
    internal static string ArgumentEmpty;
    internal static string ProviderCannotBeUsedAfterDispose;
    internal static string ArgumentTypeMismatch;
    internal static string ContextNotInitialized;
    internal static string CouldNotDetermineSqlType;
    internal static string CouldNotDetermineDbGeneratedSqlType;
    internal static string CouldNotDetermineCatalogName;
    internal static string CreateDatabaseFailedBecauseOfClassWithNoMembers;
    internal static string CreateDatabaseFailedBecauseOfContextWithNoTables;
    internal static string CreateDatabaseFailedBecauseSqlCEDatabaseAlreadyExists;
    internal static string DistributedTransactionsAreNotAllowed;
    internal static string InvalidConnectionArgument;
    internal static string CannotEnumerateResultsMoreThanOnce;
    internal static string IifReturnTypesMustBeEqual;
    internal static string MethodNotMappedToStoredProcedure;
    internal static string ResultTypeNotMappedToFunction;
    internal static string ToStringOnlySupportedForPrimitiveTypes;
    internal static string TransactionDoesNotMatchConnection;
    internal static string UnexpectedTypeCode;
    internal static string UnsupportedDateTimeConstructorForm;
    internal static string UnsupportedDateTimeOffsetConstructorForm;
    internal static string UnsupportedStringConstructorForm;
    internal static string UnsupportedTimeSpanConstructorForm;
    internal static string UnsupportedTypeConstructorForm;
    internal static string WrongNumberOfValuesInCollectionArgument;
    internal static string LogGeneralInfoMessage;
    internal static string LogAttemptingToDeleteDatabase;
    internal static string LogStoredProcedureExecution;
    internal static string MemberCannotBeTranslated;
    internal static string NonConstantExpressionsNotSupportedFor;
    internal static string MathRoundNotSupported;
    internal static string SqlMethodOnlyForSql;
    internal static string NonConstantExpressionsNotSupportedForRounding;
    internal static string CompiledQueryAgainstMultipleShapesNotSupported;
    internal static string LenOfTextOrNTextNotSupported;
    internal static string TextNTextAndImageCannotOccurInDistinct;
    internal static string TextNTextAndImageCannotOccurInUnion;
    internal static string MaxSizeNotSupported;
    internal static string IndexOfWithStringComparisonArgNotSupported;
    internal static string LastIndexOfWithStringComparisonArgNotSupported;
    internal static string ConvertToCharFromBoolNotSupported;
    internal static string ConvertToDateTimeOnlyForDateTimeOrString;
    internal static string CannotTranslateExpressionToSql;
    internal static string SkipIsValidOnlyOverOrderedQueries;
    internal static string SkipRequiresSingleTableQueryWithPKs;
    internal static string NoMethodInTypeMatchingArguments;
    internal static string CannotConvertToEntityRef;
    internal static string ExpressionNotDeferredQuerySource;
    internal static string DeferredMemberWrongType;
    internal static string ArgumentWrongType;
    internal static string ArgumentWrongValue;
    internal static string BadProjectionInSelect;
    internal static string InvalidReturnFromSproc;
    internal static string WrongDataContext;
    internal static string BinaryOperatorNotRecognized;
    internal static string CannotAggregateType;
    internal static string CannotCompareItemsAssociatedWithDifferentTable;
    internal static string CannotDeleteTypesOf;
    internal static string ClassLiteralsNotAllowed;
    internal static string ClientCaseShouldNotHold;
    internal static string ClrBoolDoesNotAgreeWithSqlType;
    internal static string ColumnCannotReferToItself;
    internal static string ColumnClrTypeDoesNotAgreeWithExpressionsClrType;
    internal static string ColumnIsDefinedInMultiplePlaces;
    internal static string ColumnIsNotAccessibleThroughGroupBy;
    internal static string ColumnIsNotAccessibleThroughDistinct;
    internal static string ColumnReferencedIsNotInScope;
    internal static string ConstructedArraysNotSupported;
    internal static string ParametersCannotBeSequences;
    internal static string CapturedValuesCannotBeSequences;
    internal static string IQueryableCannotReturnSelfReferencingConstantExpression;
    internal static string CouldNotAssignSequence;
    internal static string CouldNotTranslateExpressionForReading;
    internal static string CouldNotGetClrType;
    internal static string CouldNotGetSqlType;
    internal static string CouldNotHandleAliasRef;
    internal static string DidNotExpectAs;
    internal static string DidNotExpectTypeBinding;
    internal static string DidNotExpectTypeChange;
    internal static string EmptyCaseNotSupported;
    internal static string ExpectedNoObjectType;
    internal static string ExpectedBitFoundPredicate;
    internal static string ExpectedClrTypesToAgree;
    internal static string ExpectedPredicateFoundBit;
    internal static string ExpectedQueryableArgument;
    internal static string InvalidGroupByExpressionType;
    internal static string InvalidGroupByExpression;
    internal static string InvalidOrderByExpression;
    internal static string Impossible;
    internal static string InfiniteDescent;
    internal static string InvalidFormatNode;
    internal static string InvalidReferenceToRemovedAliasDuringDeflation;
    internal static string InvalidSequenceOperatorCall;
    internal static string ParameterNotInScope;
    internal static string MemberAccessIllegal;
    internal static string MemberCouldNotBeTranslated;
    internal static string MemberNotPartOfProjection;
    internal static string MethodHasNoSupportConversionToSql;
    internal static string MethodFormHasNoSupportConversionToSql;
    internal static string UnableToBindUnmappedMember;
    internal static string QueryOperatorNotSupported;
    internal static string QueryOperatorOverloadNotSupported;
    internal static string ReaderUsedAfterDispose;
    internal static string RequiredColumnDoesNotExist;
    internal static string SimpleCaseShouldNotHold;
    internal static string TypeBinaryOperatorNotRecognized;
    internal static string UnexpectedNode;
    internal static string UnexpectedFloatingColumn;
    internal static string UnexpectedSharedExpression;
    internal static string UnexpectedSharedExpressionReference;
    internal static string UnhandledBindingType;
    internal static string UnhandledStringTypeComparison;
    internal static string UnhandledMemberAccess;
    internal static string UnmappedDataMember;
    internal static string UnrecognizedExpressionNode;
    internal static string ValueHasNoLiteralInSql;
    internal static string UnionIncompatibleConstruction;
    internal static string UnionDifferentMembers;
    internal static string UnionDifferentMemberOrder;
    internal static string UnionOfIncompatibleDynamicTypes;
    internal static string UnionWithHierarchy;
    internal static string UnhandledExpressionType;
    internal static string IntersectNotSupportedForHierarchicalTypes;
    internal static string ExceptNotSupportedForHierarchicalTypes;
    internal static string NonCountAggregateFunctionsAreNotValidOnProjections;
    internal static string GroupingNotSupportedAsOrderCriterion;
    internal static string SourceExpressionAnnotation;
    internal static string SelectManyDoesNotSupportStrings;
    internal static string SequenceOperatorsNotSupportedForType;
    internal static string SkipNotSupportedForSequenceTypes;
    internal static string ComparisonNotSupportedForType;
    internal static string QueryOnLocalCollectionNotSupported;
    internal static string UnsupportedNodeType;
    internal static string TypeColumnWithUnhandledSource;
    internal static string GeneralCollectionMaterializationNotSupported;
    internal static string TypeCannotBeOrdered;
    internal static string InvalidMethodExecution;
    internal static string SprocsCannotBeComposed;
    internal static string InsertItemMustBeConstant;
    internal static string UpdateItemMustBeConstant;
    internal static string CouldNotConvertToPropertyOrField;
    internal static string BadParameterType;
    internal static string CannotAssignToMember;
    internal static string MappedTypeMustHaveDefaultConstructor;
    internal static string UnsafeStringConversion;
    internal static string CannotAssignNull;
    internal static string ProviderNotInstalled;
    internal static string InvalidProviderType;
    internal static string InvalidDbGeneratedType;
    internal static string DatabaseDeleteThroughContext;
    internal static string CannotMaterializeEntityType;
    internal static string CannotMaterializeList;
    internal static string CouldNotConvert;
    public static ResourceManager Resources { get; }
    private static SR();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.Linq.SqlClient.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.Linq.SqlClient.SRDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal static class System.Data.Linq.SqlClient.Strings : object {
    internal static string OwningTeam { get; }
    internal static string VbLikeDoesNotSupportMultipleCharacterRanges { get; }
    internal static string VbLikeUnclosedBracket { get; }
    internal static string ProviderCannotBeUsedAfterDispose { get; }
    internal static string ContextNotInitialized { get; }
    internal static string CouldNotDetermineCatalogName { get; }
    internal static string DistributedTransactionsAreNotAllowed { get; }
    internal static string CannotEnumerateResultsMoreThanOnce { get; }
    internal static string ToStringOnlySupportedForPrimitiveTypes { get; }
    internal static string TransactionDoesNotMatchConnection { get; }
    internal static string UnsupportedDateTimeConstructorForm { get; }
    internal static string UnsupportedDateTimeOffsetConstructorForm { get; }
    internal static string UnsupportedStringConstructorForm { get; }
    internal static string UnsupportedTimeSpanConstructorForm { get; }
    internal static string MathRoundNotSupported { get; }
    internal static string NonConstantExpressionsNotSupportedForRounding { get; }
    internal static string CompiledQueryAgainstMultipleShapesNotSupported { get; }
    internal static string IndexOfWithStringComparisonArgNotSupported { get; }
    internal static string LastIndexOfWithStringComparisonArgNotSupported { get; }
    internal static string ConvertToCharFromBoolNotSupported { get; }
    internal static string ConvertToDateTimeOnlyForDateTimeOrString { get; }
    internal static string CannotTranslateExpressionToSql { get; }
    internal static string SkipIsValidOnlyOverOrderedQueries { get; }
    internal static string SkipRequiresSingleTableQueryWithPKs { get; }
    internal static string ExpressionNotDeferredQuerySource { get; }
    internal static string DeferredMemberWrongType { get; }
    internal static string BadProjectionInSelect { get; }
    internal static string WrongDataContext { get; }
    internal static string CannotCompareItemsAssociatedWithDifferentTable { get; }
    internal static string ColumnCannotReferToItself { get; }
    internal static string ColumnClrTypeDoesNotAgreeWithExpressionsClrType { get; }
    internal static string ConstructedArraysNotSupported { get; }
    internal static string ParametersCannotBeSequences { get; }
    internal static string CapturedValuesCannotBeSequences { get; }
    internal static string IQueryableCannotReturnSelfReferencingConstantExpression { get; }
    internal static string CouldNotGetClrType { get; }
    internal static string CouldNotGetSqlType { get; }
    internal static string DidNotExpectTypeBinding { get; }
    internal static string EmptyCaseNotSupported { get; }
    internal static string ExpectedNoObjectType { get; }
    internal static string ExpectedBitFoundPredicate { get; }
    internal static string ExpectedPredicateFoundBit { get; }
    internal static string InvalidGroupByExpression { get; }
    internal static string Impossible { get; }
    internal static string InfiniteDescent { get; }
    internal static string InvalidReferenceToRemovedAliasDuringDeflation { get; }
    internal static string ReaderUsedAfterDispose { get; }
    internal static string TypeBinaryOperatorNotRecognized { get; }
    internal static string UnexpectedFloatingColumn { get; }
    internal static string UnexpectedSharedExpression { get; }
    internal static string UnexpectedSharedExpressionReference { get; }
    internal static string UnhandledStringTypeComparison { get; }
    internal static string UnionIncompatibleConstruction { get; }
    internal static string UnionDifferentMembers { get; }
    internal static string UnionDifferentMemberOrder { get; }
    internal static string UnionOfIncompatibleDynamicTypes { get; }
    internal static string UnionWithHierarchy { get; }
    internal static string IntersectNotSupportedForHierarchicalTypes { get; }
    internal static string ExceptNotSupportedForHierarchicalTypes { get; }
    internal static string GroupingNotSupportedAsOrderCriterion { get; }
    internal static string SelectManyDoesNotSupportStrings { get; }
    internal static string SkipNotSupportedForSequenceTypes { get; }
    internal static string QueryOnLocalCollectionNotSupported { get; }
    internal static string TypeColumnWithUnhandledSource { get; }
    internal static string GeneralCollectionMaterializationNotSupported { get; }
    internal static string SprocsCannotBeComposed { get; }
    internal static string InsertItemMustBeConstant { get; }
    internal static string UpdateItemMustBeConstant { get; }
    internal static string DatabaseDeleteThroughContext { get; }
    internal static string get_OwningTeam();
    internal static string get_VbLikeDoesNotSupportMultipleCharacterRanges();
    internal static string get_VbLikeUnclosedBracket();
    internal static string UnrecognizedProviderMode(object p0);
    internal static string CompiledQueryCannotReturnType(object p0);
    internal static string ArgumentEmpty(object p0);
    internal static string get_ProviderCannotBeUsedAfterDispose();
    internal static string ArgumentTypeMismatch(object p0);
    internal static string get_ContextNotInitialized();
    internal static string CouldNotDetermineSqlType(object p0);
    internal static string CouldNotDetermineDbGeneratedSqlType(object p0);
    internal static string get_CouldNotDetermineCatalogName();
    internal static string CreateDatabaseFailedBecauseOfClassWithNoMembers(object p0);
    internal static string CreateDatabaseFailedBecauseOfContextWithNoTables(object p0);
    internal static string CreateDatabaseFailedBecauseSqlCEDatabaseAlreadyExists(object p0);
    internal static string get_DistributedTransactionsAreNotAllowed();
    internal static string InvalidConnectionArgument(object p0);
    internal static string get_CannotEnumerateResultsMoreThanOnce();
    internal static string IifReturnTypesMustBeEqual(object p0, object p1);
    internal static string MethodNotMappedToStoredProcedure(object p0);
    internal static string ResultTypeNotMappedToFunction(object p0, object p1);
    internal static string get_ToStringOnlySupportedForPrimitiveTypes();
    internal static string get_TransactionDoesNotMatchConnection();
    internal static string UnexpectedTypeCode(object p0);
    internal static string get_UnsupportedDateTimeConstructorForm();
    internal static string get_UnsupportedDateTimeOffsetConstructorForm();
    internal static string get_UnsupportedStringConstructorForm();
    internal static string get_UnsupportedTimeSpanConstructorForm();
    internal static string UnsupportedTypeConstructorForm(object p0);
    internal static string WrongNumberOfValuesInCollectionArgument(object p0, object p1, object p2);
    internal static string LogGeneralInfoMessage(object p0, object p1);
    internal static string LogAttemptingToDeleteDatabase(object p0);
    internal static string LogStoredProcedureExecution(object p0, object p1);
    internal static string MemberCannotBeTranslated(object p0, object p1);
    internal static string NonConstantExpressionsNotSupportedFor(object p0);
    internal static string get_MathRoundNotSupported();
    internal static string SqlMethodOnlyForSql(object p0);
    internal static string get_NonConstantExpressionsNotSupportedForRounding();
    internal static string get_CompiledQueryAgainstMultipleShapesNotSupported();
    internal static string LenOfTextOrNTextNotSupported(object p0);
    internal static string TextNTextAndImageCannotOccurInDistinct(object p0);
    internal static string TextNTextAndImageCannotOccurInUnion(object p0);
    internal static string MaxSizeNotSupported(object p0);
    internal static string get_IndexOfWithStringComparisonArgNotSupported();
    internal static string get_LastIndexOfWithStringComparisonArgNotSupported();
    internal static string get_ConvertToCharFromBoolNotSupported();
    internal static string get_ConvertToDateTimeOnlyForDateTimeOrString();
    internal static string get_CannotTranslateExpressionToSql();
    internal static string get_SkipIsValidOnlyOverOrderedQueries();
    internal static string get_SkipRequiresSingleTableQueryWithPKs();
    internal static string NoMethodInTypeMatchingArguments(object p0);
    internal static string CannotConvertToEntityRef(object p0);
    internal static string get_ExpressionNotDeferredQuerySource();
    internal static string get_DeferredMemberWrongType();
    internal static string ArgumentWrongType(object p0, object p1, object p2);
    internal static string ArgumentWrongValue(object p0);
    internal static string get_BadProjectionInSelect();
    internal static string InvalidReturnFromSproc(object p0);
    internal static string get_WrongDataContext();
    internal static string BinaryOperatorNotRecognized(object p0);
    internal static string CannotAggregateType(object p0);
    internal static string get_CannotCompareItemsAssociatedWithDifferentTable();
    internal static string CannotDeleteTypesOf(object p0);
    internal static string ClassLiteralsNotAllowed(object p0);
    internal static string ClientCaseShouldNotHold(object p0);
    internal static string ClrBoolDoesNotAgreeWithSqlType(object p0);
    internal static string get_ColumnCannotReferToItself();
    internal static string get_ColumnClrTypeDoesNotAgreeWithExpressionsClrType();
    internal static string ColumnIsDefinedInMultiplePlaces(object p0);
    internal static string ColumnIsNotAccessibleThroughGroupBy(object p0);
    internal static string ColumnIsNotAccessibleThroughDistinct(object p0);
    internal static string ColumnReferencedIsNotInScope(object p0);
    internal static string get_ConstructedArraysNotSupported();
    internal static string get_ParametersCannotBeSequences();
    internal static string get_CapturedValuesCannotBeSequences();
    internal static string get_IQueryableCannotReturnSelfReferencingConstantExpression();
    internal static string CouldNotAssignSequence(object p0, object p1);
    internal static string CouldNotTranslateExpressionForReading(object p0);
    internal static string get_CouldNotGetClrType();
    internal static string get_CouldNotGetSqlType();
    internal static string CouldNotHandleAliasRef(object p0);
    internal static string DidNotExpectAs(object p0);
    internal static string get_DidNotExpectTypeBinding();
    internal static string DidNotExpectTypeChange(object p0, object p1);
    internal static string get_EmptyCaseNotSupported();
    internal static string get_ExpectedNoObjectType();
    internal static string get_ExpectedBitFoundPredicate();
    internal static string ExpectedClrTypesToAgree(object p0, object p1);
    internal static string get_ExpectedPredicateFoundBit();
    internal static string ExpectedQueryableArgument(object p0, object p1, object p2);
    internal static string InvalidGroupByExpressionType(object p0);
    internal static string get_InvalidGroupByExpression();
    internal static string InvalidOrderByExpression(object p0);
    internal static string get_Impossible();
    internal static string get_InfiniteDescent();
    internal static string InvalidFormatNode(object p0);
    internal static string get_InvalidReferenceToRemovedAliasDuringDeflation();
    internal static string InvalidSequenceOperatorCall(object p0);
    internal static string ParameterNotInScope(object p0);
    internal static string MemberAccessIllegal(object p0, object p1, object p2);
    internal static string MemberCouldNotBeTranslated(object p0, object p1);
    internal static string MemberNotPartOfProjection(object p0, object p1);
    internal static string MethodHasNoSupportConversionToSql(object p0);
    internal static string MethodFormHasNoSupportConversionToSql(object p0, object p1);
    internal static string UnableToBindUnmappedMember(object p0, object p1, object p2);
    internal static string QueryOperatorNotSupported(object p0);
    internal static string QueryOperatorOverloadNotSupported(object p0);
    internal static string get_ReaderUsedAfterDispose();
    internal static string RequiredColumnDoesNotExist(object p0);
    internal static string SimpleCaseShouldNotHold(object p0);
    internal static string get_TypeBinaryOperatorNotRecognized();
    internal static string UnexpectedNode(object p0);
    internal static string get_UnexpectedFloatingColumn();
    internal static string get_UnexpectedSharedExpression();
    internal static string get_UnexpectedSharedExpressionReference();
    internal static string UnhandledBindingType(object p0);
    internal static string get_UnhandledStringTypeComparison();
    internal static string UnhandledMemberAccess(object p0, object p1);
    internal static string UnmappedDataMember(object p0, object p1, object p2);
    internal static string UnrecognizedExpressionNode(object p0);
    internal static string ValueHasNoLiteralInSql(object p0);
    internal static string get_UnionIncompatibleConstruction();
    internal static string get_UnionDifferentMembers();
    internal static string get_UnionDifferentMemberOrder();
    internal static string get_UnionOfIncompatibleDynamicTypes();
    internal static string get_UnionWithHierarchy();
    internal static string UnhandledExpressionType(object p0);
    internal static string get_IntersectNotSupportedForHierarchicalTypes();
    internal static string get_ExceptNotSupportedForHierarchicalTypes();
    internal static string NonCountAggregateFunctionsAreNotValidOnProjections(object p0);
    internal static string get_GroupingNotSupportedAsOrderCriterion();
    internal static string SourceExpressionAnnotation(object p0);
    internal static string get_SelectManyDoesNotSupportStrings();
    internal static string SequenceOperatorsNotSupportedForType(object p0);
    internal static string get_SkipNotSupportedForSequenceTypes();
    internal static string ComparisonNotSupportedForType(object p0);
    internal static string get_QueryOnLocalCollectionNotSupported();
    internal static string UnsupportedNodeType(object p0);
    internal static string get_TypeColumnWithUnhandledSource();
    internal static string get_GeneralCollectionMaterializationNotSupported();
    internal static string TypeCannotBeOrdered(object p0);
    internal static string InvalidMethodExecution(object p0);
    internal static string get_SprocsCannotBeComposed();
    internal static string get_InsertItemMustBeConstant();
    internal static string get_UpdateItemMustBeConstant();
    internal static string CouldNotConvertToPropertyOrField(object p0);
    internal static string BadParameterType(object p0);
    internal static string CannotAssignToMember(object p0);
    internal static string MappedTypeMustHaveDefaultConstructor(object p0);
    internal static string UnsafeStringConversion(object p0, object p1);
    internal static string CannotAssignNull(object p0);
    internal static string ProviderNotInstalled(object p0, object p1);
    internal static string InvalidProviderType(object p0);
    internal static string InvalidDbGeneratedType(object p0);
    internal static string get_DatabaseDeleteThroughContext();
    internal static string CannotMaterializeEntityType(object p0);
    internal static string CannotMaterializeList(object p0);
    internal static string CouldNotConvert(object p0, object p1);
}
internal class System.Data.Linq.SqlClient.Translator : object {
    internal Translator(IDataServices services, SqlFactory sqlFactory, TypeSystemProvider typeProvider);
    internal SqlSelect BuildDefaultQuery(MetaType rowType, bool allowDeferred, SqlLink link, Expression source);
    internal SqlExpression BuildProjection(SqlExpression item, MetaType rowType, bool allowDeferred, SqlLink link, Expression source);
    internal SqlNode TranslateLink(SqlLink link, bool asExpression);
    internal static Expression TranslateAssociation(DataContext context, MetaAssociation association, Expression otherSource, Expression[] keyValues, Expression thisInstance);
    internal static Expression WhereClauseFromSourceAndKeys(Expression source, MetaDataMember[] keyMembers, Expression[] keyValues);
    internal SqlNode TranslateLink(SqlLink link, List`1<SqlExpression> keyExpressions, bool asExpression);
    internal SqlExpression TranslateEquals(SqlBinary expr);
    internal SqlExpression TranslateLinkEquals(SqlBinary bo);
    internal SqlExpression TranslateLinkIsNull(SqlUnary expr);
}
internal static class System.Data.Linq.SqlClient.TypeSource : object {
    internal static MetaType GetSourceMetaType(SqlNode node, MetaModel model);
    internal static SqlExpression GetTypeSource(SqlExpression expr);
}
internal static class System.Data.Linq.SqlClient.TypeSystem : object {
    internal static bool IsSequenceType(Type seqType);
    internal static bool HasIEnumerable(Type seqType);
    internal static Type GetFlatSequenceType(Type elementType);
    internal static Type GetSequenceType(Type elementType);
    internal static Type GetElementType(Type seqType);
    internal static bool IsNullableType(Type type);
    internal static bool IsNullAssignable(Type type);
    internal static Type GetNonNullableType(Type type);
    internal static Type GetMemberType(MemberInfo mi);
    internal static IEnumerable`1<FieldInfo> GetAllFields(Type type, BindingFlags flags);
    internal static IEnumerable`1<PropertyInfo> GetAllProperties(Type type, BindingFlags flags);
    internal static MethodInfo FindSequenceMethod(string name, Type[] args, Type[] typeArgs);
    internal static MethodInfo FindSequenceMethod(string name, IEnumerable sequence);
    internal static MethodInfo FindQueryableMethod(string name, Type[] args, Type[] typeArgs);
    internal static MethodInfo FindStaticMethod(Type type, string name, Type[] args, Type[] typeArgs);
    internal static bool IsSimpleType(Type type);
}
internal abstract class System.Data.Linq.SqlClient.TypeSystemProvider : object {
    internal abstract virtual ProviderType PredictTypeForUnary(SqlNodeType unaryOp, ProviderType operandType);
    internal abstract virtual ProviderType PredictTypeForBinary(SqlNodeType binaryOp, ProviderType leftType, ProviderType rightType);
    internal abstract virtual ProviderType From(Type runtimeType);
    internal abstract virtual ProviderType From(object o);
    internal abstract virtual ProviderType From(Type type, Nullable`1<int> size);
    internal abstract virtual ProviderType Parse(string text);
    internal abstract virtual ProviderType GetApplicationType(int index);
    internal abstract virtual ProviderType MostPreciseTypeInFamily(ProviderType type);
    internal abstract virtual ProviderType GetBestLargeType(ProviderType type);
    internal abstract virtual ProviderType GetBestType(ProviderType typeA, ProviderType typeB);
    internal abstract virtual ProviderType ReturnTypeOfFunction(SqlFunctionCall functionCall);
    internal abstract virtual ProviderType ChangeTypeFamilyTo(ProviderType type, ProviderType typeWithFamily);
    internal abstract virtual void InitializeParameter(ProviderType type, DbParameter parameter, object value);
}
internal class System.Data.Linq.SqlClient.ValidateNoInvalidComparison : SqlVisitor {
    internal virtual SqlExpression VisitBinaryOperator(SqlBinary bo);
}
internal class System.Data.Linq.SR : object {
    internal static string OwningTeam;
    internal static string CannotAddChangeConflicts;
    internal static string CannotRemoveChangeConflicts;
    internal static string InconsistentAssociationAndKeyChange;
    internal static string UnableToDetermineDataContext;
    internal static string ArgumentTypeHasNoIdentityKey;
    internal static string CouldNotConvert;
    internal static string CannotRemoveUnattachedEntity;
    internal static string ColumnMappedMoreThanOnce;
    internal static string CouldNotAttach;
    internal static string CouldNotGetTableForSubtype;
    internal static string CouldNotRemoveRelationshipBecauseOneSideCannotBeNull;
    internal static string EntitySetAlreadyLoaded;
    internal static string EntitySetModifiedDuringEnumeration;
    internal static string ExpectedQueryableArgument;
    internal static string ExpectedUpdateDeleteOrChange;
    internal static string KeyIsWrongSize;
    internal static string KeyValueIsWrongType;
    internal static string IdentityChangeNotAllowed;
    internal static string DbGeneratedChangeNotAllowed;
    internal static string ModifyDuringAddOrRemove;
    internal static string ProviderDoesNotImplementRequiredInterface;
    internal static string ProviderTypeNull;
    internal static string TypeCouldNotBeAdded;
    internal static string TypeCouldNotBeRemoved;
    internal static string TypeCouldNotBeTracked;
    internal static string TypeIsNotEntity;
    internal static string UnrecognizedRefreshObject;
    internal static string UnhandledExpressionType;
    internal static string UnhandledBindingType;
    internal static string ObjectTrackingRequired;
    internal static string OptionsCannotBeModifiedAfterQuery;
    internal static string DeferredLoadingRequiresObjectTracking;
    internal static string SubqueryDoesNotSupportOperator;
    internal static string SubqueryNotSupportedOn;
    internal static string SubqueryNotSupportedOnType;
    internal static string SubqueryNotAllowedAfterFreeze;
    internal static string IncludeNotAllowedAfterFreeze;
    internal static string LoadOptionsChangeNotAllowedAfterQuery;
    internal static string IncludeCycleNotAllowed;
    internal static string SubqueryMustBeSequence;
    internal static string RefreshOfDeletedObject;
    internal static string RefreshOfNewObject;
    internal static string CannotChangeInheritanceType;
    internal static string DataContextCannotBeUsedAfterDispose;
    internal static string TypeIsNotMarkedAsTable;
    internal static string NonEntityAssociationMapping;
    internal static string CannotPerformCUDOnReadOnlyTable;
    internal static string InsertCallbackComment;
    internal static string UpdateCallbackComment;
    internal static string DeleteCallbackComment;
    internal static string RowNotFoundOrChanged;
    internal static string UpdatesFailedMessage;
    internal static string CycleDetected;
    internal static string CantAddAlreadyExistingItem;
    internal static string CantAddAlreadyExistingKey;
    internal static string DatabaseGeneratedAlreadyExistingKey;
    internal static string InsertAutoSyncFailure;
    internal static string EntitySetDataBindingWithAbstractBaseClass;
    internal static string EntitySetDataBindingWithNonPublicDefaultConstructor;
    internal static string InvalidLoadOptionsLoadMemberSpecification;
    internal static string EntityIsTheWrongType;
    internal static string OriginalEntityIsWrongType;
    internal static string CannotAttachAlreadyExistingEntity;
    internal static string CannotAttachAsModifiedWithoutOriginalState;
    internal static string CannotPerformOperationDuringSubmitChanges;
    internal static string CannotPerformOperationOutsideSubmitChanges;
    internal static string CannotPerformOperationForUntrackedObject;
    internal static string CannotAttachAddNonNewEntities;
    internal static string QueryWasCompiledForDifferentMappingSource;
    public static ResourceManager Resources { get; }
    private static SR();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.Linq.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Data.Linq.SRDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal static class System.Data.Linq.Strings : object {
    internal static string OwningTeam { get; }
    internal static string CannotAddChangeConflicts { get; }
    internal static string CannotRemoveChangeConflicts { get; }
    internal static string UnableToDetermineDataContext { get; }
    internal static string CannotRemoveUnattachedEntity { get; }
    internal static string CouldNotAttach { get; }
    internal static string EntitySetAlreadyLoaded { get; }
    internal static string EntitySetModifiedDuringEnumeration { get; }
    internal static string ExpectedUpdateDeleteOrChange { get; }
    internal static string ModifyDuringAddOrRemove { get; }
    internal static string ProviderTypeNull { get; }
    internal static string UnrecognizedRefreshObject { get; }
    internal static string ObjectTrackingRequired { get; }
    internal static string OptionsCannotBeModifiedAfterQuery { get; }
    internal static string DeferredLoadingRequiresObjectTracking { get; }
    internal static string SubqueryNotAllowedAfterFreeze { get; }
    internal static string IncludeNotAllowedAfterFreeze { get; }
    internal static string LoadOptionsChangeNotAllowedAfterQuery { get; }
    internal static string IncludeCycleNotAllowed { get; }
    internal static string SubqueryMustBeSequence { get; }
    internal static string RefreshOfDeletedObject { get; }
    internal static string RefreshOfNewObject { get; }
    internal static string DataContextCannotBeUsedAfterDispose { get; }
    internal static string InsertCallbackComment { get; }
    internal static string UpdateCallbackComment { get; }
    internal static string DeleteCallbackComment { get; }
    internal static string RowNotFoundOrChanged { get; }
    internal static string CycleDetected { get; }
    internal static string CantAddAlreadyExistingItem { get; }
    internal static string CantAddAlreadyExistingKey { get; }
    internal static string DatabaseGeneratedAlreadyExistingKey { get; }
    internal static string InsertAutoSyncFailure { get; }
    internal static string InvalidLoadOptionsLoadMemberSpecification { get; }
    internal static string EntityIsTheWrongType { get; }
    internal static string OriginalEntityIsWrongType { get; }
    internal static string CannotAttachAlreadyExistingEntity { get; }
    internal static string CannotAttachAsModifiedWithoutOriginalState { get; }
    internal static string CannotPerformOperationDuringSubmitChanges { get; }
    internal static string CannotPerformOperationOutsideSubmitChanges { get; }
    internal static string CannotPerformOperationForUntrackedObject { get; }
    internal static string CannotAttachAddNonNewEntities { get; }
    internal static string QueryWasCompiledForDifferentMappingSource { get; }
    internal static string get_OwningTeam();
    internal static string get_CannotAddChangeConflicts();
    internal static string get_CannotRemoveChangeConflicts();
    internal static string InconsistentAssociationAndKeyChange(object p0, object p1);
    internal static string get_UnableToDetermineDataContext();
    internal static string ArgumentTypeHasNoIdentityKey(object p0);
    internal static string CouldNotConvert(object p0, object p1);
    internal static string get_CannotRemoveUnattachedEntity();
    internal static string ColumnMappedMoreThanOnce(object p0);
    internal static string get_CouldNotAttach();
    internal static string CouldNotGetTableForSubtype(object p0, object p1);
    internal static string CouldNotRemoveRelationshipBecauseOneSideCannotBeNull(object p0, object p1, object p2);
    internal static string get_EntitySetAlreadyLoaded();
    internal static string get_EntitySetModifiedDuringEnumeration();
    internal static string ExpectedQueryableArgument(object p0, object p1);
    internal static string get_ExpectedUpdateDeleteOrChange();
    internal static string KeyIsWrongSize(object p0, object p1);
    internal static string KeyValueIsWrongType(object p0, object p1);
    internal static string IdentityChangeNotAllowed(object p0, object p1);
    internal static string DbGeneratedChangeNotAllowed(object p0, object p1);
    internal static string get_ModifyDuringAddOrRemove();
    internal static string ProviderDoesNotImplementRequiredInterface(object p0, object p1);
    internal static string get_ProviderTypeNull();
    internal static string TypeCouldNotBeAdded(object p0);
    internal static string TypeCouldNotBeRemoved(object p0);
    internal static string TypeCouldNotBeTracked(object p0);
    internal static string TypeIsNotEntity(object p0);
    internal static string get_UnrecognizedRefreshObject();
    internal static string UnhandledExpressionType(object p0);
    internal static string UnhandledBindingType(object p0);
    internal static string get_ObjectTrackingRequired();
    internal static string get_OptionsCannotBeModifiedAfterQuery();
    internal static string get_DeferredLoadingRequiresObjectTracking();
    internal static string SubqueryDoesNotSupportOperator(object p0);
    internal static string SubqueryNotSupportedOn(object p0);
    internal static string SubqueryNotSupportedOnType(object p0, object p1);
    internal static string get_SubqueryNotAllowedAfterFreeze();
    internal static string get_IncludeNotAllowedAfterFreeze();
    internal static string get_LoadOptionsChangeNotAllowedAfterQuery();
    internal static string get_IncludeCycleNotAllowed();
    internal static string get_SubqueryMustBeSequence();
    internal static string get_RefreshOfDeletedObject();
    internal static string get_RefreshOfNewObject();
    internal static string CannotChangeInheritanceType(object p0, object p1, object p2, object p3);
    internal static string get_DataContextCannotBeUsedAfterDispose();
    internal static string TypeIsNotMarkedAsTable(object p0);
    internal static string NonEntityAssociationMapping(object p0, object p1, object p2);
    internal static string CannotPerformCUDOnReadOnlyTable(object p0);
    internal static string get_InsertCallbackComment();
    internal static string get_UpdateCallbackComment();
    internal static string get_DeleteCallbackComment();
    internal static string get_RowNotFoundOrChanged();
    internal static string UpdatesFailedMessage(object p0, object p1);
    internal static string get_CycleDetected();
    internal static string get_CantAddAlreadyExistingItem();
    internal static string get_CantAddAlreadyExistingKey();
    internal static string get_DatabaseGeneratedAlreadyExistingKey();
    internal static string get_InsertAutoSyncFailure();
    internal static string EntitySetDataBindingWithAbstractBaseClass(object p0);
    internal static string EntitySetDataBindingWithNonPublicDefaultConstructor(object p0);
    internal static string get_InvalidLoadOptionsLoadMemberSpecification();
    internal static string get_EntityIsTheWrongType();
    internal static string get_OriginalEntityIsWrongType();
    internal static string get_CannotAttachAlreadyExistingEntity();
    internal static string get_CannotAttachAsModifiedWithoutOriginalState();
    internal static string get_CannotPerformOperationDuringSubmitChanges();
    internal static string get_CannotPerformOperationOutsideSubmitChanges();
    internal static string get_CannotPerformOperationForUntrackedObject();
    internal static string get_CannotAttachAddNonNewEntities();
    internal static string get_QueryWasCompiledForDifferentMappingSource();
}
internal static class System.Data.Linq.SubqueryRules : object {
    internal static bool IsSupportedTopLevelMethod(MethodInfo mi);
}
public class System.Data.Linq.Table`1 : object {
    public DataContext Context { get; }
    public bool IsReadOnly { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    internal Table`1(DataContext context, MetaTable metaTable);
    public sealed virtual DataContext get_Context();
    public sealed virtual bool get_IsReadOnly();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable`1<TResult> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override TResult System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator();
    public IEnumerator`1<TEntity> GetEnumerator();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    public IBindingList GetNewBindingList();
    public sealed virtual void InsertOnSubmit(TEntity entity);
    private sealed virtual override void System.Data.Linq.ITable.InsertOnSubmit(object entity);
    public void InsertAllOnSubmit(IEnumerable`1<TSubEntity> entities);
    private sealed virtual override void System.Data.Linq.ITable.InsertAllOnSubmit(IEnumerable entities);
    public sealed virtual void DeleteOnSubmit(TEntity entity);
    private sealed virtual override void System.Data.Linq.ITable.DeleteOnSubmit(object entity);
    public void DeleteAllOnSubmit(IEnumerable`1<TSubEntity> entities);
    private sealed virtual override void System.Data.Linq.ITable.DeleteAllOnSubmit(IEnumerable entities);
    public sealed virtual void Attach(TEntity entity);
    private sealed virtual override void System.Data.Linq.ITable.Attach(object entity);
    public void Attach(TEntity entity, bool asModified);
    private sealed virtual override void System.Data.Linq.ITable.Attach(object entity, bool asModified);
    public void Attach(TEntity entity, TEntity original);
    private sealed virtual override void System.Data.Linq.ITable.Attach(object entity, object original);
    public void AttachAll(IEnumerable`1<TSubEntity> entities);
    private sealed virtual override void System.Data.Linq.ITable.AttachAll(IEnumerable entities);
    public void AttachAll(IEnumerable`1<TSubEntity> entities, bool asModified);
    private sealed virtual override void System.Data.Linq.ITable.AttachAll(IEnumerable entities, bool asModified);
    public TEntity GetOriginalEntityState(TEntity entity);
    private sealed virtual override object System.Data.Linq.ITable.GetOriginalEntityState(object entity);
    public ModifiedMemberInfo[] GetModifiedMembers(TEntity entity);
    private sealed virtual override ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity);
    public virtual string ToString();
}
internal abstract class System.Data.Linq.TrackedObject : object {
    internal MetaType Type { get; }
    internal object Current { get; }
    internal object Original { get; }
    internal bool IsInteresting { get; }
    internal bool IsNew { get; }
    internal bool IsDeleted { get; }
    internal bool IsModified { get; }
    internal bool IsUnmodified { get; }
    internal bool IsPossiblyModified { get; }
    internal bool IsRemoved { get; }
    internal bool IsDead { get; }
    internal bool IsWeaklyTracked { get; }
    internal bool HasDeferredLoaders { get; }
    internal abstract virtual MetaType get_Type();
    internal abstract virtual object get_Current();
    internal abstract virtual object get_Original();
    internal abstract virtual bool get_IsInteresting();
    internal abstract virtual bool get_IsNew();
    internal abstract virtual bool get_IsDeleted();
    internal abstract virtual bool get_IsModified();
    internal abstract virtual bool get_IsUnmodified();
    internal abstract virtual bool get_IsPossiblyModified();
    internal abstract virtual bool get_IsRemoved();
    internal abstract virtual bool get_IsDead();
    internal abstract virtual bool get_IsWeaklyTracked();
    internal abstract virtual bool get_HasDeferredLoaders();
    internal abstract virtual bool HasChangedValues();
    internal abstract virtual IEnumerable`1<ModifiedMemberInfo> GetModifiedMembers();
    internal abstract virtual bool HasChangedValue(MetaDataMember mm);
    internal abstract virtual bool CanInferDelete();
    internal abstract virtual void AcceptChanges();
    internal abstract virtual void ConvertToNew();
    internal abstract virtual void ConvertToPossiblyModified();
    internal abstract virtual void ConvertToPossiblyModified(object original);
    internal abstract virtual void ConvertToUnmodified();
    internal abstract virtual void ConvertToModified();
    internal abstract virtual void ConvertToDeleted();
    internal abstract virtual void ConvertToRemoved();
    internal abstract virtual void ConvertToDead();
    internal abstract virtual void Refresh(RefreshMode mode, object freshInstance);
    internal abstract virtual void RefreshMember(MetaDataMember member, RefreshMode mode, object freshValue);
    internal abstract virtual object CreateDataCopy(object instance);
    internal abstract virtual bool SynchDependentData();
    internal abstract virtual bool IsPendingGeneration(IEnumerable`1<MetaDataMember> keyMembers);
    internal abstract virtual bool IsMemberPendingGeneration(MetaDataMember keyMember);
    internal abstract virtual void InitializeDeferredLoaders();
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
