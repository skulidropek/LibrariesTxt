[SecurityCriticalAttribute]
[FolderLevelBuildProviderAppliesToAttribute("2")]
public class System.Data.Services.BuildProvider.DataServiceBuildProvider : BuildProvider {
    [SecuritySafeCriticalAttribute]
public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
}
public enum System.Data.Services.Design.DataServiceCodeVersion : Enum {
    public int value__;
    public static DataServiceCodeVersion V1;
    public static DataServiceCodeVersion V2;
}
[DefaultMemberAttribute("Item")]
public class System.Data.Services.Design.EdmToObjectNamespaceMap : object {
    public ICollection`1<string> EdmNamespaces { get; }
    public string Item { get; public set; }
    public int Count { get; }
    public void Add(string edmNamespace, string objectNamespace);
    public bool Contains(string edmNamespace);
    public ICollection`1<string> get_EdmNamespaces();
    public bool Remove(string edmNamespace);
    public bool TryGetObjectNamespace(string edmNamespace, String& objectNamespace);
    public string get_Item(string edmNamespace);
    public void set_Item(string edmNamespace, string value);
    public void Clear();
    public int get_Count();
}
public class System.Data.Services.Design.EntityClassGenerator : object {
    public bool UseDataServiceCollection { get; public set; }
    public DataServiceCodeVersion Version { get; public set; }
    public LanguageOption LanguageOption { get; public set; }
    public EdmToObjectNamespaceMap EdmToObjectNamespaceMap { get; }
    public EntityClassGenerator(LanguageOption languageOption);
    public void add_OnTypeGenerated(EventHandler`1<TypeGeneratedEventArgs> value);
    public void remove_OnTypeGenerated(EventHandler`1<TypeGeneratedEventArgs> value);
    public void add_OnPropertyGenerated(EventHandler`1<PropertyGeneratedEventArgs> value);
    public void remove_OnPropertyGenerated(EventHandler`1<PropertyGeneratedEventArgs> value);
    public bool get_UseDataServiceCollection();
    public void set_UseDataServiceCollection(bool value);
    public DataServiceCodeVersion get_Version();
    public void set_Version(DataServiceCodeVersion value);
    public LanguageOption get_LanguageOption();
    public void set_LanguageOption(LanguageOption value);
    public EdmToObjectNamespaceMap get_EdmToObjectNamespaceMap();
    public IList`1<EdmSchemaError> GenerateCode(XmlReader sourceReader, string targetFilePath);
    public IList`1<EdmSchemaError> GenerateCode(XmlReader sourceReader, TextWriter targetWriter, string namespacePrefix);
}
public enum System.Data.Services.Design.LanguageOption : Enum {
    public int value__;
    public static LanguageOption GenerateCSharpCode;
    public static LanguageOption GenerateVBCode;
}
public class System.Data.Services.Design.PropertyGeneratedEventArgs : EventArgs {
    public MetadataItem PropertySource { get; }
    public string BackingFieldName { get; }
    public CodeTypeReference ReturnType { get; public set; }
    public List`1<CodeStatement> AdditionalGetStatements { get; }
    public List`1<CodeStatement> AdditionalSetStatements { get; }
    public List`1<CodeAttributeDeclaration> AdditionalAttributes { get; }
    public PropertyGeneratedEventArgs(MetadataItem propertySource, string backingFieldName, CodeTypeReference returnType);
    public MetadataItem get_PropertySource();
    public string get_BackingFieldName();
    public CodeTypeReference get_ReturnType();
    public void set_ReturnType(CodeTypeReference value);
    public List`1<CodeStatement> get_AdditionalGetStatements();
    public List`1<CodeStatement> get_AdditionalSetStatements();
    public List`1<CodeAttributeDeclaration> get_AdditionalAttributes();
}
public class System.Data.Services.Design.TypeGeneratedEventArgs : EventArgs {
    public GlobalItem TypeSource { get; }
    public CodeTypeReference BaseType { get; public set; }
    public List`1<Type> AdditionalInterfaces { get; }
    public List`1<CodeTypeMember> AdditionalMembers { get; }
    public List`1<CodeAttributeDeclaration> AdditionalAttributes { get; }
    public TypeGeneratedEventArgs(GlobalItem typeSource, CodeTypeReference baseType);
    public GlobalItem get_TypeSource();
    public CodeTypeReference get_BaseType();
    public void set_BaseType(CodeTypeReference value);
    public List`1<Type> get_AdditionalInterfaces();
    public List`1<CodeTypeMember> get_AdditionalMembers();
    public List`1<CodeAttributeDeclaration> get_AdditionalAttributes();
}
