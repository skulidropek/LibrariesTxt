public class System.DirectoryServices.AccountManagement.AdvancedFilters : object {
    protected internal AdvancedFilters(Principal p);
    public void LastBadPasswordAttempt(DateTime lastAttempt, MatchType match);
    public void AccountExpirationDate(DateTime expirationTime, MatchType match);
    public void AccountLockoutTime(DateTime lockoutTime, MatchType match);
    public void BadLogonCount(int badLogonCount, MatchType match);
    public void LastLogonTime(DateTime logonTime, MatchType match);
    public void LastPasswordSetTime(DateTime passwordSetTime, MatchType match);
    [SecurityCriticalAttribute]
protected void AdvancedFilterSet(string attribute, object value, Type objectType, MatchType mt);
}
[DirectoryRdnPrefixAttribute("CN")]
[SecurityCriticalAttribute("1")]
public class System.DirectoryServices.AccountManagement.AuthenticablePrincipal : Principal {
    public Nullable`1<bool> Enabled { get; public set; }
    public Nullable`1<DateTime> AccountLockoutTime { get; }
    public Nullable`1<DateTime> LastLogon { get; }
    public PrincipalValueCollection`1<string> PermittedWorkstations { get; }
    public Byte[] PermittedLogonTimes { get; public set; }
    public Nullable`1<DateTime> AccountExpirationDate { get; public set; }
    public bool SmartcardLogonRequired { get; public set; }
    public bool DelegationPermitted { get; public set; }
    public int BadLogonCount { get; }
    public string HomeDirectory { get; public set; }
    public string HomeDrive { get; public set; }
    public string ScriptPath { get; public set; }
    public Nullable`1<DateTime> LastPasswordSet { get; }
    public Nullable`1<DateTime> LastBadPasswordAttempt { get; }
    public bool PasswordNotRequired { get; public set; }
    public bool PasswordNeverExpires { get; public set; }
    public bool UserCannotChangePassword { get; public set; }
    public bool AllowReversiblePasswordEncryption { get; public set; }
    public AdvancedFilters AdvancedSearchFilter { get; }
    public X509Certificate2Collection Certificates { get; }
    protected internal AuthenticablePrincipal(PrincipalContext context);
    protected internal AuthenticablePrincipal(PrincipalContext context, string samAccountName, string password, bool enabled);
    public Nullable`1<bool> get_Enabled();
    public void set_Enabled(Nullable`1<bool> value);
    public Nullable`1<DateTime> get_AccountLockoutTime();
    public Nullable`1<DateTime> get_LastLogon();
    public PrincipalValueCollection`1<string> get_PermittedWorkstations();
    public Byte[] get_PermittedLogonTimes();
    public void set_PermittedLogonTimes(Byte[] value);
    public Nullable`1<DateTime> get_AccountExpirationDate();
    public void set_AccountExpirationDate(Nullable`1<DateTime> value);
    public bool get_SmartcardLogonRequired();
    public void set_SmartcardLogonRequired(bool value);
    public bool get_DelegationPermitted();
    public void set_DelegationPermitted(bool value);
    public int get_BadLogonCount();
    public string get_HomeDirectory();
    public void set_HomeDirectory(string value);
    public string get_HomeDrive();
    public void set_HomeDrive(string value);
    public string get_ScriptPath();
    public void set_ScriptPath(string value);
    public bool IsAccountLockedOut();
    public void UnlockAccount();
    public Nullable`1<DateTime> get_LastPasswordSet();
    public Nullable`1<DateTime> get_LastBadPasswordAttempt();
    public bool get_PasswordNotRequired();
    public void set_PasswordNotRequired(bool value);
    public bool get_PasswordNeverExpires();
    public void set_PasswordNeverExpires(bool value);
    public bool get_UserCannotChangePassword();
    public void set_UserCannotChangePassword(bool value);
    public bool get_AllowReversiblePasswordEncryption();
    public void set_AllowReversiblePasswordEncryption(bool value);
    public virtual AdvancedFilters get_AdvancedSearchFilter();
    public void SetPassword(string newPassword);
    public void ChangePassword(string oldPassword, string newPassword);
    public void ExpirePasswordNow();
    public void RefreshExpiredPassword();
    public X509Certificate2Collection get_Certificates();
    public static PrincipalSearchResult`1<AuthenticablePrincipal> FindByLockoutTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<AuthenticablePrincipal> FindByLogonTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<AuthenticablePrincipal> FindByExpirationTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<AuthenticablePrincipal> FindByBadPasswordAttempt(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<AuthenticablePrincipal> FindByPasswordSetTime(PrincipalContext context, DateTime time, MatchType type);
    protected static PrincipalSearchResult`1<T> FindByLockoutTime(PrincipalContext context, DateTime time, MatchType type);
    protected static PrincipalSearchResult`1<T> FindByLogonTime(PrincipalContext context, DateTime time, MatchType type);
    protected static PrincipalSearchResult`1<T> FindByExpirationTime(PrincipalContext context, DateTime time, MatchType type);
    protected static PrincipalSearchResult`1<T> FindByBadPasswordAttempt(PrincipalContext context, DateTime time, MatchType type);
    protected static PrincipalSearchResult`1<T> FindByPasswordSetTime(PrincipalContext context, DateTime time, MatchType type);
}
[DirectoryRdnPrefixAttribute("CN")]
[SecurityCriticalAttribute("1")]
public class System.DirectoryServices.AccountManagement.ComputerPrincipal : AuthenticablePrincipal {
    public PrincipalValueCollection`1<string> ServicePrincipalNames { get; }
    public ComputerPrincipal(PrincipalContext context);
    public ComputerPrincipal(PrincipalContext context, string samAccountName, string password, bool enabled);
    public PrincipalValueCollection`1<string> get_ServicePrincipalNames();
    public static PrincipalSearchResult`1<ComputerPrincipal> FindByLockoutTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<ComputerPrincipal> FindByLogonTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<ComputerPrincipal> FindByExpirationTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<ComputerPrincipal> FindByBadPasswordAttempt(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<ComputerPrincipal> FindByPasswordSetTime(PrincipalContext context, DateTime time, MatchType type);
    public static ComputerPrincipal FindByIdentity(PrincipalContext context, string identityValue);
    public static ComputerPrincipal FindByIdentity(PrincipalContext context, IdentityType identityType, string identityValue);
}
[FlagsAttribute]
public enum System.DirectoryServices.AccountManagement.ContextOptions : Enum {
    public int value__;
    public static ContextOptions Negotiate;
    public static ContextOptions SimpleBind;
    public static ContextOptions SecureSocketLayer;
    public static ContextOptions Signing;
    public static ContextOptions Sealing;
    public static ContextOptions ServerBind;
}
public enum System.DirectoryServices.AccountManagement.ContextType : Enum {
    public int value__;
    public static ContextType Machine;
    public static ContextType Domain;
    public static ContextType ApplicationDirectory;
}
[AttributeUsageAttribute("4")]
public class System.DirectoryServices.AccountManagement.DirectoryObjectClassAttribute : Attribute {
    public string ObjectClass { get; }
    public Nullable`1<ContextType> Context { get; }
    public DirectoryObjectClassAttribute(string objectClass);
    public string get_ObjectClass();
    public Nullable`1<ContextType> get_Context();
}
[AttributeUsageAttribute("128")]
public class System.DirectoryServices.AccountManagement.DirectoryPropertyAttribute : Attribute {
    public string SchemaAttributeName { get; }
    public Nullable`1<ContextType> Context { get; public set; }
    public DirectoryPropertyAttribute(string schemaAttributeName);
    public string get_SchemaAttributeName();
    public Nullable`1<ContextType> get_Context();
    public void set_Context(Nullable`1<ContextType> value);
}
[AttributeUsageAttribute("4")]
public class System.DirectoryServices.AccountManagement.DirectoryRdnPrefixAttribute : Attribute {
    public string RdnPrefix { get; }
    public Nullable`1<ContextType> Context { get; }
    public DirectoryRdnPrefixAttribute(string rdnPrefix);
    public string get_RdnPrefix();
    public Nullable`1<ContextType> get_Context();
}
[DirectoryRdnPrefixAttribute("CN")]
[SecurityCriticalAttribute("1")]
public class System.DirectoryServices.AccountManagement.GroupPrincipal : Principal {
    public Nullable`1<bool> IsSecurityGroup { get; public set; }
    public Nullable`1<GroupScope> GroupScope { get; public set; }
    public PrincipalCollection Members { get; }
    public GroupPrincipal(PrincipalContext context);
    public GroupPrincipal(PrincipalContext context, string samAccountName);
    public Nullable`1<bool> get_IsSecurityGroup();
    public void set_IsSecurityGroup(Nullable`1<bool> value);
    public Nullable`1<GroupScope> get_GroupScope();
    public void set_GroupScope(Nullable`1<GroupScope> value);
    public PrincipalCollection get_Members();
    public static GroupPrincipal FindByIdentity(PrincipalContext context, string identityValue);
    public static GroupPrincipal FindByIdentity(PrincipalContext context, IdentityType identityType, string identityValue);
    public PrincipalSearchResult`1<Principal> GetMembers();
    public PrincipalSearchResult`1<Principal> GetMembers(bool recursive);
    public virtual void Dispose();
}
public enum System.DirectoryServices.AccountManagement.GroupScope : Enum {
    public int value__;
    public static GroupScope Local;
    public static GroupScope Global;
    public static GroupScope Universal;
}
public enum System.DirectoryServices.AccountManagement.IdentityType : Enum {
    public int value__;
    public static IdentityType SamAccountName;
    public static IdentityType Name;
    public static IdentityType UserPrincipalName;
    public static IdentityType DistinguishedName;
    public static IdentityType Sid;
    public static IdentityType Guid;
}
public enum System.DirectoryServices.AccountManagement.MatchType : Enum {
    public int value__;
    public static MatchType Equals;
    public static MatchType NotEquals;
    public static MatchType GreaterThan;
    public static MatchType GreaterThanOrEquals;
    public static MatchType LessThan;
    public static MatchType LessThanOrEquals;
}
public class System.DirectoryServices.AccountManagement.MultipleMatchesException : PrincipalException {
    public MultipleMatchesException(string message);
    public MultipleMatchesException(string message, Exception innerException);
    protected MultipleMatchesException(SerializationInfo info, StreamingContext context);
}
public class System.DirectoryServices.AccountManagement.NoMatchingPrincipalException : PrincipalException {
    public NoMatchingPrincipalException(string message);
    public NoMatchingPrincipalException(string message, Exception innerException);
    protected NoMatchingPrincipalException(SerializationInfo info, StreamingContext context);
}
public class System.DirectoryServices.AccountManagement.PasswordException : PrincipalException {
    public PasswordException(string message);
    public PasswordException(string message, Exception innerException);
    protected PasswordException(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("Name ( {Name} )")]
public abstract class System.DirectoryServices.AccountManagement.Principal : object {
    public PrincipalContext Context { get; }
    public ContextType ContextType { get; }
    public string Description { get; public set; }
    public string DisplayName { get; public set; }
    public string SamAccountName { get; public set; }
    public string UserPrincipalName { get; public set; }
    public SecurityIdentifier Sid { get; }
    public Nullable`1<Guid> Guid { get; }
    public string DistinguishedName { get; }
    public string StructuralObjectClass { get; }
    public string Name { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
protected internal PrincipalContext ContextRaw { get; protected internal set; }
    [SecurityCriticalAttribute]
public virtual string ToString();
    [SecuritySafeCriticalAttribute]
public PrincipalContext get_Context();
    [SecurityCriticalAttribute]
public ContextType get_ContextType();
    [SecurityCriticalAttribute]
public string get_Description();
    [SecurityCriticalAttribute]
public void set_Description(string value);
    [SecurityCriticalAttribute]
public string get_DisplayName();
    [SecurityCriticalAttribute]
public void set_DisplayName(string value);
    [SecurityCriticalAttribute]
public string get_SamAccountName();
    [SecurityCriticalAttribute]
public void set_SamAccountName(string value);
    [SecurityCriticalAttribute]
public string get_UserPrincipalName();
    [SecurityCriticalAttribute]
public void set_UserPrincipalName(string value);
    [SecurityCriticalAttribute]
public SecurityIdentifier get_Sid();
    [SecurityCriticalAttribute]
public Nullable`1<Guid> get_Guid();
    [SecurityCriticalAttribute]
public string get_DistinguishedName();
    [SecurityCriticalAttribute]
public string get_StructuralObjectClass();
    [SecurityCriticalAttribute]
public string get_Name();
    [SecurityCriticalAttribute]
public void set_Name(string value);
    [SecurityCriticalAttribute]
public static Principal FindByIdentity(PrincipalContext context, string identityValue);
    [SecurityCriticalAttribute]
public static Principal FindByIdentity(PrincipalContext context, IdentityType identityType, string identityValue);
    [SecurityCriticalAttribute]
public void Save();
    [SecurityCriticalAttribute]
public void Save(PrincipalContext context);
    [SecurityCriticalAttribute]
public void Delete();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    [SecurityCriticalAttribute]
public object GetUnderlyingObject();
    [SecurityCriticalAttribute]
public Type GetUnderlyingObjectType();
    [SecurityCriticalAttribute]
public PrincipalSearchResult`1<Principal> GetGroups();
    [SecurityCriticalAttribute]
public PrincipalSearchResult`1<Principal> GetGroups(PrincipalContext contextToQuery);
    [SecurityCriticalAttribute]
public bool IsMemberOf(GroupPrincipal group);
    [SecurityCriticalAttribute]
public bool IsMemberOf(PrincipalContext context, IdentityType identityType, string identityValue);
    [SecurityCriticalAttribute]
public virtual void Dispose();
    [SecurityCriticalAttribute]
protected Object[] ExtensionGet(string attribute);
    [SecurityCriticalAttribute]
protected void ExtensionSet(string attribute, object value);
    [SecurityCriticalAttribute]
protected internal PrincipalContext get_ContextRaw();
    [SecurityCriticalAttribute]
protected internal void set_ContextRaw(PrincipalContext value);
    [SecuritySafeCriticalAttribute]
[EditorBrowsableAttribute("2")]
protected void CheckDisposedOrDeleted();
    [EditorBrowsableAttribute("2")]
[SecurityCriticalAttribute]
protected static Principal FindByIdentityWithType(PrincipalContext context, Type principalType, string identityValue);
    [EditorBrowsableAttribute("2")]
[SecurityCriticalAttribute]
protected static Principal FindByIdentityWithType(PrincipalContext context, Type principalType, IdentityType identityType, string identityValue);
}
public class System.DirectoryServices.AccountManagement.PrincipalCollection : object {
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool IsReadOnly { get; }
    public int Count { get; }
    [SecurityCriticalAttribute]
private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    [SecurityCriticalAttribute]
private sealed virtual override int System.Collections.ICollection.get_Count();
    [SecurityCriticalAttribute]
private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [SecurityCriticalAttribute]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public bool get_IsSynchronized();
    public object get_SyncRoot();
    [SecurityCriticalAttribute]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void CopyTo(Principal[] array, int index);
    public sealed virtual bool get_IsReadOnly();
    [SecurityCriticalAttribute]
public sealed virtual int get_Count();
    [SecurityCriticalAttribute]
public sealed virtual IEnumerator`1<Principal> GetEnumerator();
    [SecurityCriticalAttribute]
public void Add(UserPrincipal user);
    [SecurityCriticalAttribute]
public void Add(GroupPrincipal group);
    [SecurityCriticalAttribute]
public void Add(ComputerPrincipal computer);
    [SecurityCriticalAttribute]
public sealed virtual void Add(Principal principal);
    [SecurityCriticalAttribute]
public void Add(PrincipalContext context, IdentityType identityType, string identityValue);
    [SecurityCriticalAttribute]
public sealed virtual void Clear();
    [SecurityCriticalAttribute]
public bool Remove(UserPrincipal user);
    [SecurityCriticalAttribute]
public bool Remove(GroupPrincipal group);
    [SecurityCriticalAttribute]
public bool Remove(ComputerPrincipal computer);
    [SecurityCriticalAttribute]
public sealed virtual bool Remove(Principal principal);
    [SecurityCriticalAttribute]
public bool Remove(PrincipalContext context, IdentityType identityType, string identityValue);
    [SecurityCriticalAttribute]
public bool Contains(UserPrincipal user);
    [SecurityCriticalAttribute]
public bool Contains(GroupPrincipal group);
    [SecurityCriticalAttribute]
public bool Contains(ComputerPrincipal computer);
    [SecurityCriticalAttribute]
public sealed virtual bool Contains(Principal principal);
    [SecurityCriticalAttribute]
public bool Contains(PrincipalContext context, IdentityType identityType, string identityValue);
}
[SecurityCriticalAttribute("1")]
public class System.DirectoryServices.AccountManagement.PrincipalContext : object {
    public ContextType ContextType { get; }
    public string Name { get; }
    public string Container { get; }
    public string UserName { get; }
    public ContextOptions Options { get; }
    public string ConnectedServer { get; }
    public PrincipalContext(ContextType contextType);
    public PrincipalContext(ContextType contextType, string name);
    public PrincipalContext(ContextType contextType, string name, string container);
    public PrincipalContext(ContextType contextType, string name, string container, ContextOptions options);
    public PrincipalContext(ContextType contextType, string name, string userName, string password);
    public PrincipalContext(ContextType contextType, string name, string container, string userName, string password);
    public PrincipalContext(ContextType contextType, string name, string container, ContextOptions options, string userName, string password);
    public ContextType get_ContextType();
    public string get_Name();
    public string get_Container();
    public string get_UserName();
    public ContextOptions get_Options();
    public string get_ConnectedServer();
    public bool ValidateCredentials(string userName, string password);
    public bool ValidateCredentials(string userName, string password, ContextOptions options);
    public sealed virtual void Dispose();
}
public abstract class System.DirectoryServices.AccountManagement.PrincipalException : SystemException {
    internal PrincipalException(string message);
    internal PrincipalException(string message, Exception innerException);
    internal PrincipalException(SerializationInfo info, StreamingContext context);
}
public class System.DirectoryServices.AccountManagement.PrincipalExistsException : PrincipalException {
    public PrincipalExistsException(string message);
    public PrincipalExistsException(string message, Exception innerException);
    protected PrincipalExistsException(SerializationInfo info, StreamingContext context);
}
public class System.DirectoryServices.AccountManagement.PrincipalOperationException : PrincipalException {
    public int ErrorCode { get; }
    public PrincipalOperationException(string message);
    public PrincipalOperationException(string message, Exception innerException);
    public PrincipalOperationException(string message, int errorCode);
    public PrincipalOperationException(string message, Exception innerException, int errorCode);
    protected PrincipalOperationException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public int get_ErrorCode();
}
public class System.DirectoryServices.AccountManagement.PrincipalSearcher : object {
    public PrincipalContext Context { get; }
    public Principal QueryFilter { get; public set; }
    [SecurityCriticalAttribute]
public PrincipalSearcher(Principal queryFilter);
    [SecuritySafeCriticalAttribute]
public PrincipalContext get_Context();
    [SecurityCriticalAttribute]
public Principal get_QueryFilter();
    [SecurityCriticalAttribute]
public void set_QueryFilter(Principal value);
    [SecurityCriticalAttribute]
public PrincipalSearchResult`1<Principal> FindAll();
    [SecurityCriticalAttribute]
public Principal FindOne();
    [SecurityCriticalAttribute]
public object GetUnderlyingSearcher();
    [SecurityCriticalAttribute]
public Type GetUnderlyingSearcherType();
    [SecurityCriticalAttribute]
public virtual void Dispose();
}
public class System.DirectoryServices.AccountManagement.PrincipalSearchResult`1 : object {
    [SecurityCriticalAttribute]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    [SecurityCriticalAttribute]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Dispose();
}
public class System.DirectoryServices.AccountManagement.PrincipalServerDownException : PrincipalException {
    public PrincipalServerDownException(string message);
    public PrincipalServerDownException(string message, Exception innerException);
    public PrincipalServerDownException(string message, int errorCode);
    public PrincipalServerDownException(string message, Exception innerException, int errorCode);
    public PrincipalServerDownException(string message, Exception innerException, int errorCode, string serverName);
    protected PrincipalServerDownException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
public class System.DirectoryServices.AccountManagement.PrincipalValueCollection`1 : object {
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public T Item { get; public set; }
    public int Count { get; }
    [SecurityCriticalAttribute]
private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    [SecurityCriticalAttribute]
private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    [SecurityCriticalAttribute]
private sealed virtual override int System.Collections.IList.Add(object value);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    [SecurityCriticalAttribute]
private sealed virtual override int System.Collections.IList.IndexOf(object value);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    [SecurityCriticalAttribute]
private sealed virtual override object System.Collections.IList.get_Item(int index);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    [SecurityCriticalAttribute]
private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    [SecurityCriticalAttribute]
private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public bool get_IsSynchronized();
    public object get_SyncRoot();
    [SecurityCriticalAttribute]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T value);
    public sealed virtual int IndexOf(T value);
    public sealed virtual void Insert(int index, T value);
    public sealed virtual bool Remove(T value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual T get_Item(int index);
    public sealed virtual void set_Item(int index, T value);
    public sealed virtual void CopyTo(T[] array, int index);
    public sealed virtual int get_Count();
    [SecurityCriticalAttribute]
public sealed virtual IEnumerator`1<T> GetEnumerator();
}
[SecurityCriticalAttribute("1")]
[DirectoryRdnPrefixAttribute("CN")]
public class System.DirectoryServices.AccountManagement.UserPrincipal : AuthenticablePrincipal {
    public string GivenName { get; public set; }
    public string MiddleName { get; public set; }
    public string Surname { get; public set; }
    public string EmailAddress { get; public set; }
    public string VoiceTelephoneNumber { get; public set; }
    public string EmployeeId { get; public set; }
    public AdvancedFilters AdvancedSearchFilter { get; }
    public static UserPrincipal Current { get; }
    public UserPrincipal(PrincipalContext context);
    public UserPrincipal(PrincipalContext context, string samAccountName, string password, bool enabled);
    public string get_GivenName();
    public void set_GivenName(string value);
    public string get_MiddleName();
    public void set_MiddleName(string value);
    public string get_Surname();
    public void set_Surname(string value);
    public string get_EmailAddress();
    public void set_EmailAddress(string value);
    public string get_VoiceTelephoneNumber();
    public void set_VoiceTelephoneNumber(string value);
    public string get_EmployeeId();
    public void set_EmployeeId(string value);
    public virtual AdvancedFilters get_AdvancedSearchFilter();
    public static UserPrincipal get_Current();
    public static PrincipalSearchResult`1<UserPrincipal> FindByLockoutTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<UserPrincipal> FindByLogonTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<UserPrincipal> FindByExpirationTime(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<UserPrincipal> FindByBadPasswordAttempt(PrincipalContext context, DateTime time, MatchType type);
    public static PrincipalSearchResult`1<UserPrincipal> FindByPasswordSetTime(PrincipalContext context, DateTime time, MatchType type);
    public static UserPrincipal FindByIdentity(PrincipalContext context, string identityValue);
    public static UserPrincipal FindByIdentity(PrincipalContext context, IdentityType identityType, string identityValue);
    public PrincipalSearchResult`1<Principal> GetAuthorizationGroups();
}
