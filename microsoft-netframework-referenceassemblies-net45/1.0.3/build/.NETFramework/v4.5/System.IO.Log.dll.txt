public class System.IO.Log.FileRecordSequence : object {
    public SequenceNumber BaseSequenceNumber { get; }
    public SequenceNumber LastSequenceNumber { get; }
    public long MaximumRecordLength { get; }
    public long ReservedBytes { get; }
    public bool RetryAppend { get; public set; }
    public SequenceNumber RestartSequenceNumber { get; }
    public FileRecordSequence(string path);
    public FileRecordSequence(string path, FileAccess access);
    public FileRecordSequence(string path, FileAccess access, int size);
    public sealed virtual SequenceNumber get_BaseSequenceNumber();
    public sealed virtual SequenceNumber get_LastSequenceNumber();
    public sealed virtual long get_MaximumRecordLength();
    public sealed virtual long get_ReservedBytes();
    public sealed virtual bool get_RetryAppend();
    public sealed virtual void set_RetryAppend(bool value);
    public sealed virtual SequenceNumber get_RestartSequenceNumber();
    public sealed virtual void add_TailPinned(EventHandler`1<TailPinnedEventArgs> value);
    public sealed virtual void remove_TailPinned(EventHandler`1<TailPinnedEventArgs> value);
    public sealed virtual void AdvanceBaseSequenceNumber(SequenceNumber newBaseSequenceNumber);
    public sealed virtual SequenceNumber Append(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions);
    public sealed virtual SequenceNumber Append(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations);
    public sealed virtual SequenceNumber Append(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions);
    public sealed virtual SequenceNumber Append(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations);
    public sealed virtual IAsyncResult BeginAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginFlush(SequenceNumber sequenceNumber, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginReserveAndAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginReserveAndAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginWriteRestartArea(ArraySegment`1<byte> data, SequenceNumber newBaseSeqNum, ReservationCollection reservation, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginWriteRestartArea(IList`1<ArraySegment`1<byte>> data, SequenceNumber newBaseSeqNum, ReservationCollection reservation, AsyncCallback callback, object state);
    public sealed virtual ReservationCollection CreateReservationCollection();
    public sealed virtual void Dispose();
    public sealed virtual SequenceNumber EndAppend(IAsyncResult result);
    public sealed virtual SequenceNumber EndFlush(IAsyncResult result);
    public sealed virtual SequenceNumber EndReserveAndAppend(IAsyncResult result);
    public sealed virtual SequenceNumber EndWriteRestartArea(IAsyncResult result);
    public sealed virtual SequenceNumber Flush();
    public sealed virtual SequenceNumber Flush(SequenceNumber sequenceNumber);
    public sealed virtual IEnumerable`1<LogRecord> ReadLogRecords(SequenceNumber start, LogRecordEnumeratorType logRecordEnum);
    public sealed virtual IEnumerable`1<LogRecord> ReadRestartAreas();
    public sealed virtual SequenceNumber ReserveAndAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations);
    public sealed virtual SequenceNumber ReserveAndAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations);
    public sealed virtual SequenceNumber WriteRestartArea(ArraySegment`1<byte> data);
    public sealed virtual SequenceNumber WriteRestartArea(ArraySegment`1<byte> data, SequenceNumber newBaseSeqNum);
    public sealed virtual SequenceNumber WriteRestartArea(ArraySegment`1<byte> data, SequenceNumber newBaseSeqNum, ReservationCollection reservations);
    public sealed virtual SequenceNumber WriteRestartArea(IList`1<ArraySegment`1<byte>> data);
    public sealed virtual SequenceNumber WriteRestartArea(IList`1<ArraySegment`1<byte>> data, SequenceNumber newBaseSeqNum);
    public sealed virtual SequenceNumber WriteRestartArea(IList`1<ArraySegment`1<byte>> data, SequenceNumber newBaseSeqNum, ReservationCollection reservations);
}
public class System.IO.Log.FileRegion : object {
    public long FileLength { get; }
    public long Offset { get; }
    public string Path { get; }
    public long get_FileLength();
    public long get_Offset();
    public string get_Path();
    public Stream GetStream();
}
public interface System.IO.Log.IRecordSequence {
    public SequenceNumber BaseSequenceNumber { get; }
    public SequenceNumber LastSequenceNumber { get; }
    public long MaximumRecordLength { get; }
    public long ReservedBytes { get; }
    public bool RetryAppend { get; public set; }
    public SequenceNumber RestartSequenceNumber { get; }
    public abstract virtual SequenceNumber get_BaseSequenceNumber();
    public abstract virtual SequenceNumber get_LastSequenceNumber();
    public abstract virtual long get_MaximumRecordLength();
    public abstract virtual long get_ReservedBytes();
    public abstract virtual bool get_RetryAppend();
    public abstract virtual void set_RetryAppend(bool value);
    public abstract virtual SequenceNumber get_RestartSequenceNumber();
    public abstract virtual void add_TailPinned(EventHandler`1<TailPinnedEventArgs> value);
    public abstract virtual void remove_TailPinned(EventHandler`1<TailPinnedEventArgs> value);
    public abstract virtual void AdvanceBaseSequenceNumber(SequenceNumber newBaseSequenceNumber);
    public abstract virtual SequenceNumber Append(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions);
    public abstract virtual SequenceNumber Append(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations);
    public abstract virtual SequenceNumber Append(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions);
    public abstract virtual SequenceNumber Append(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations);
    public abstract virtual IAsyncResult BeginAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousUndoRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginFlush(SequenceNumber sequenceNumber, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginReserveAndAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginReserveAndAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginWriteRestartArea(ArraySegment`1<byte> data, SequenceNumber newBaseSequenceNumber, ReservationCollection reservation, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginWriteRestartArea(IList`1<ArraySegment`1<byte>> data, SequenceNumber newBaseSequenceNumber, ReservationCollection reservation, AsyncCallback callback, object state);
    public abstract virtual ReservationCollection CreateReservationCollection();
    public abstract virtual SequenceNumber EndAppend(IAsyncResult result);
    public abstract virtual SequenceNumber EndFlush(IAsyncResult result);
    public abstract virtual SequenceNumber EndReserveAndAppend(IAsyncResult result);
    public abstract virtual SequenceNumber EndWriteRestartArea(IAsyncResult result);
    public abstract virtual SequenceNumber Flush();
    public abstract virtual SequenceNumber Flush(SequenceNumber sequenceNumber);
    public abstract virtual IEnumerable`1<LogRecord> ReadLogRecords(SequenceNumber start, LogRecordEnumeratorType logRecordEnum);
    public abstract virtual IEnumerable`1<LogRecord> ReadRestartAreas();
    public abstract virtual SequenceNumber ReserveAndAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations);
    public abstract virtual SequenceNumber ReserveAndAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations);
    public abstract virtual SequenceNumber WriteRestartArea(ArraySegment`1<byte> data);
    public abstract virtual SequenceNumber WriteRestartArea(IList`1<ArraySegment`1<byte>> data);
    public abstract virtual SequenceNumber WriteRestartArea(ArraySegment`1<byte> data, SequenceNumber newBaseSequenceNumber);
    public abstract virtual SequenceNumber WriteRestartArea(IList`1<ArraySegment`1<byte>> data, SequenceNumber newBaseSequenceNumber);
    public abstract virtual SequenceNumber WriteRestartArea(ArraySegment`1<byte> data, SequenceNumber newBaseSequenceNumber, ReservationCollection reservation);
    public abstract virtual SequenceNumber WriteRestartArea(IList`1<ArraySegment`1<byte>> data, SequenceNumber newBaseSequenceNumber, ReservationCollection reservation);
}
public class System.IO.Log.LogArchiveSnapshot : object {
    public IEnumerable`1<FileRegion> ArchiveRegions { get; }
    public SequenceNumber ArchiveTail { get; }
    public SequenceNumber BaseSequenceNumber { get; }
    public SequenceNumber LastSequenceNumber { get; }
    public IEnumerable`1<FileRegion> get_ArchiveRegions();
    public SequenceNumber get_ArchiveTail();
    public SequenceNumber get_BaseSequenceNumber();
    public SequenceNumber get_LastSequenceNumber();
}
public class System.IO.Log.LogExtent : object {
    public string Path { get; }
    public long Size { get; }
    public LogExtentState State { get; }
    public string get_Path();
    public long get_Size();
    public LogExtentState get_State();
}
public class System.IO.Log.LogExtentCollection : object {
    public int Count { get; }
    public int FreeCount { get; }
    public int get_Count();
    public int get_FreeCount();
    public void Add(string path);
    public void Add(string path, long size);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<LogExtent> GetEnumerator();
    public void Remove(string path, bool force);
    public void Remove(LogExtent extent, bool force);
}
public enum System.IO.Log.LogExtentState : Enum {
    public int value__;
    public static LogExtentState Unknown;
    public static LogExtentState Initializing;
    public static LogExtentState Inactive;
    public static LogExtentState Active;
    public static LogExtentState ActivePendingDelete;
    public static LogExtentState PendingArchive;
    public static LogExtentState PendingArchiveAndDelete;
}
public class System.IO.Log.LogPolicy : object {
    public bool AutoGrow { get; public set; }
    public int MinimumExtentCount { get; public set; }
    public int MaximumExtentCount { get; public set; }
    public PolicyUnit GrowthRate { get; public set; }
    public PolicyUnit PinnedTailThreshold { get; public set; }
    public int AutoShrinkPercentage { get; public set; }
    public string NewExtentPrefix { get; public set; }
    public long NextExtentSuffix { get; public set; }
    public bool get_AutoGrow();
    public void set_AutoGrow(bool value);
    public int get_MinimumExtentCount();
    public void set_MinimumExtentCount(int value);
    public int get_MaximumExtentCount();
    public void set_MaximumExtentCount(int value);
    public PolicyUnit get_GrowthRate();
    public void set_GrowthRate(PolicyUnit value);
    public PolicyUnit get_PinnedTailThreshold();
    public void set_PinnedTailThreshold(PolicyUnit value);
    public int get_AutoShrinkPercentage();
    public void set_AutoShrinkPercentage(int value);
    public string get_NewExtentPrefix();
    public void set_NewExtentPrefix(string value);
    public long get_NextExtentSuffix();
    public void set_NextExtentSuffix(long value);
    public void Commit();
    public void Refresh();
}
public abstract class System.IO.Log.LogRecord : object {
    public Stream Data { get; }
    public SequenceNumber Previous { get; }
    public SequenceNumber SequenceNumber { get; }
    public SequenceNumber User { get; }
    public abstract virtual Stream get_Data();
    public abstract virtual SequenceNumber get_Previous();
    public abstract virtual SequenceNumber get_SequenceNumber();
    public abstract virtual SequenceNumber get_User();
    public abstract virtual void Dispose();
}
public enum System.IO.Log.LogRecordEnumeratorType : Enum {
    public int value__;
    public static LogRecordEnumeratorType User;
    public static LogRecordEnumeratorType Previous;
    public static LogRecordEnumeratorType Next;
}
public class System.IO.Log.LogRecordSequence : object {
    public SequenceNumber BaseSequenceNumber { get; }
    public SequenceNumber LastSequenceNumber { get; }
    public LogStore LogStore { get; }
    public long MaximumRecordLength { get; }
    public long ReservedBytes { get; }
    public bool RetryAppend { get; public set; }
    public SequenceNumber RestartSequenceNumber { get; }
    public LogRecordSequence(string path, FileMode mode);
    public LogRecordSequence(string path, FileMode mode, FileAccess access);
    public LogRecordSequence(string path, FileMode mode, FileAccess access, FileShare share);
    public LogRecordSequence(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, int bufferCount);
    public LogRecordSequence(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, int bufferCount, FileSecurity fileSecurity);
    public LogRecordSequence(LogStore logStore);
    public LogRecordSequence(LogStore logStore, int bufferSize, int bufferCount);
    public sealed virtual SequenceNumber get_BaseSequenceNumber();
    public sealed virtual SequenceNumber get_LastSequenceNumber();
    public LogStore get_LogStore();
    public sealed virtual long get_MaximumRecordLength();
    public sealed virtual long get_ReservedBytes();
    public sealed virtual bool get_RetryAppend();
    public sealed virtual void set_RetryAppend(bool value);
    public sealed virtual SequenceNumber get_RestartSequenceNumber();
    public sealed virtual void add_TailPinned(EventHandler`1<TailPinnedEventArgs> value);
    public sealed virtual void remove_TailPinned(EventHandler`1<TailPinnedEventArgs> value);
    public sealed virtual void AdvanceBaseSequenceNumber(SequenceNumber newBaseSequenceNumber);
    public sealed virtual SequenceNumber Append(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions);
    public sealed virtual SequenceNumber Append(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations);
    public sealed virtual SequenceNumber Append(IList`1<ArraySegment`1<byte>> data, SequenceNumber userRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions);
    public sealed virtual SequenceNumber Append(IList`1<ArraySegment`1<byte>> data, SequenceNumber userRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations);
    public sealed virtual IAsyncResult BeginAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber userRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber userRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservations, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginFlush(SequenceNumber sequenceNumber, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginReserveAndAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginReserveAndAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber userRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginWriteRestartArea(ArraySegment`1<byte> data, SequenceNumber newBaseSeqNum, ReservationCollection reservation, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginWriteRestartArea(IList`1<ArraySegment`1<byte>> data, SequenceNumber newBaseSeqNum, ReservationCollection reservationCollection, AsyncCallback callback, object state);
    public sealed virtual ReservationCollection CreateReservationCollection();
    public sealed virtual void Dispose();
    public sealed virtual SequenceNumber EndAppend(IAsyncResult result);
    public sealed virtual SequenceNumber EndFlush(IAsyncResult result);
    public sealed virtual SequenceNumber EndReserveAndAppend(IAsyncResult result);
    public sealed virtual SequenceNumber EndWriteRestartArea(IAsyncResult result);
    public sealed virtual SequenceNumber Flush();
    public sealed virtual SequenceNumber Flush(SequenceNumber sequenceNumber);
    public sealed virtual IEnumerable`1<LogRecord> ReadLogRecords(SequenceNumber start, LogRecordEnumeratorType logRecordEnum);
    public sealed virtual IEnumerable`1<LogRecord> ReadRestartAreas();
    public sealed virtual SequenceNumber ReserveAndAppend(ArraySegment`1<byte> data, SequenceNumber nextUndoRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations);
    public sealed virtual SequenceNumber ReserveAndAppend(IList`1<ArraySegment`1<byte>> data, SequenceNumber userRecord, SequenceNumber previousRecord, RecordAppendOptions recordAppendOptions, ReservationCollection reservationCollection, Int64[] reservations);
    public void SetLastRecord(SequenceNumber sequenceNumber);
    public sealed virtual SequenceNumber WriteRestartArea(ArraySegment`1<byte> data);
    public sealed virtual SequenceNumber WriteRestartArea(IList`1<ArraySegment`1<byte>> data);
    public sealed virtual SequenceNumber WriteRestartArea(ArraySegment`1<byte> data, SequenceNumber newBaseSeqNum);
    public sealed virtual SequenceNumber WriteRestartArea(IList`1<ArraySegment`1<byte>> data, SequenceNumber newBaseSeqNum);
    public sealed virtual SequenceNumber WriteRestartArea(ArraySegment`1<byte> data, SequenceNumber newBaseSeqNum, ReservationCollection reservations);
    public sealed virtual SequenceNumber WriteRestartArea(IList`1<ArraySegment`1<byte>> data, SequenceNumber newBaseSeqNum, ReservationCollection reservationCollection);
}
public class System.IO.Log.LogStore : object {
    public bool Archivable { get; public set; }
    public SequenceNumber BaseSequenceNumber { get; }
    public LogExtentCollection Extents { get; }
    public long FreeBytes { get; }
    public SafeFileHandle Handle { get; }
    public SequenceNumber LastSequenceNumber { get; }
    public long Length { get; }
    public int StreamCount { get; }
    public LogPolicy Policy { get; }
    public LogStore(string path, FileMode mode);
    public LogStore(string path, FileMode mode, FileAccess access);
    public LogStore(string path, FileMode mode, FileAccess access, FileShare share);
    public LogStore(string path, FileMode mode, FileAccess access, FileShare share, FileSecurity fileSecurity);
    public LogStore(SafeFileHandle handle);
    public bool get_Archivable();
    public void set_Archivable(bool value);
    public SequenceNumber get_BaseSequenceNumber();
    public static void Delete(string path);
    public LogExtentCollection get_Extents();
    public long get_FreeBytes();
    public SafeFileHandle get_Handle();
    public SequenceNumber get_LastSequenceNumber();
    public long get_Length();
    public int get_StreamCount();
    public LogPolicy get_Policy();
    public LogArchiveSnapshot CreateLogArchiveSnapshot();
    public LogArchiveSnapshot CreateLogArchiveSnapshot(SequenceNumber first, SequenceNumber last);
    public sealed virtual void Dispose();
    public void SetArchiveTail(SequenceNumber archiveTail);
}
public class System.IO.Log.PolicyUnit : ValueType {
    private PolicyUnitType type;
    private long value;
    public PolicyUnitType Type { get; }
    public long Value { get; }
    public PolicyUnit(long value, PolicyUnitType type);
    public PolicyUnitType get_Type();
    public long get_Value();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public static bool op_Equality(PolicyUnit left, PolicyUnit right);
    public static bool op_Inequality(PolicyUnit left, PolicyUnit right);
    public static PolicyUnit Percentage(long value);
    public static PolicyUnit Extents(long value);
    public virtual string ToString();
}
public enum System.IO.Log.PolicyUnitType : Enum {
    public int value__;
    public static PolicyUnitType Extents;
    public static PolicyUnitType Percentage;
}
[FlagsAttribute]
public enum System.IO.Log.RecordAppendOptions : Enum {
    public int value__;
    public static RecordAppendOptions None;
    public static RecordAppendOptions ForceAppend;
    public static RecordAppendOptions ForceFlush;
}
public abstract class System.IO.Log.ReservationCollection : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    protected virtual void Finalize();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(long size);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(long size);
    public sealed virtual void CopyTo(Int64[] array, int arrayIndex);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<long> GetEnumerator();
    public sealed virtual bool Remove(long item);
    protected abstract virtual void MakeReservation(long size);
    protected abstract virtual void FreeReservation(long size);
    protected void ReservationMade(long size);
    protected void ReservationFreed(long size);
    protected long GetBestMatchingReservation(long size);
}
public class System.IO.Log.ReservationNotFoundException : ArgumentException {
    public ReservationNotFoundException(string message);
    public ReservationNotFoundException(string message, Exception inner);
    protected ReservationNotFoundException(SerializationInfo info, StreamingContext context);
}
public class System.IO.Log.SequenceFullException : Exception {
    public SequenceFullException(string message);
    public SequenceFullException(string message, Exception inner);
    protected SequenceFullException(SerializationInfo info, StreamingContext context);
}
public class System.IO.Log.SequenceNumber : ValueType {
    private ulong sequenceNumberHigh;
    private ulong sequenceNumberLow;
    public static SequenceNumber Invalid { get; }
    public SequenceNumber(Byte[] sequenceNumber);
    public static SequenceNumber get_Invalid();
    public static bool op_Inequality(SequenceNumber c1, SequenceNumber c2);
    public static bool op_LessThan(SequenceNumber c1, SequenceNumber c2);
    public static bool op_LessThanOrEqual(SequenceNumber c1, SequenceNumber c2);
    public static bool op_Equality(SequenceNumber c1, SequenceNumber c2);
    public static bool op_GreaterThan(SequenceNumber c1, SequenceNumber c2);
    public static bool op_GreaterThanOrEqual(SequenceNumber c1, SequenceNumber c2);
    public sealed virtual int CompareTo(SequenceNumber other);
    public bool Equals(SequenceNumber other);
    public virtual bool Equals(object other);
    public Byte[] GetBytes();
    public virtual int GetHashCode();
}
public class System.IO.Log.TailPinnedEventArgs : EventArgs {
    public SequenceNumber TargetSequenceNumber { get; }
    public TailPinnedEventArgs(SequenceNumber sequenceNumber);
    public SequenceNumber get_TargetSequenceNumber();
}
