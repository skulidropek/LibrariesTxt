internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemThreadingTasksDataflow;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemNetHttp;
    internal static string SystemNetHttpWebRequest;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemRuntimeWindowsRuntime;
    internal static string SystemRuntimeWindowsRuntimeUIXaml;
    internal static string SystemSecurity;
    internal static string SystemServiceModelWeb;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FXAssembly : object {
    internal static string Version;
}
public enum System.IdentityModel.Services.ApplicationType : Enum {
    public int value__;
    public static ApplicationType AspNetWebApplication;
    public static ApplicationType WcfServiceApplication;
}
public class System.IdentityModel.Services.AsynchronousOperationException : Exception {
    public AsynchronousOperationException(string message);
    public AsynchronousOperationException(string message, Exception innerException);
    public AsynchronousOperationException(Exception innerException);
    protected AsynchronousOperationException(SerializationInfo info, StreamingContext context);
}
internal abstract class System.IdentityModel.Services.AsyncResult : object {
    public object AsyncState { get; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    protected AsyncResult(object state);
    protected AsyncResult(AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual void Finalize();
    protected void Complete(bool completedSynchronously);
    protected void Complete(bool completedSynchronously, Exception exception);
    protected virtual void Dispose(bool isExplicitDispose);
    public sealed virtual object get_AsyncState();
    public virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    public sealed virtual void Dispose();
}
public class System.IdentityModel.Services.AttributeRequestMessage : WSFederationMessage {
    public string Attribute { get; public set; }
    public string AttributePtr { get; public set; }
    public string Reply { get; public set; }
    public string Result { get; public set; }
    public string ResultPtr { get; public set; }
    public AttributeRequestMessage(Uri baseUrl);
    public string get_Attribute();
    public void set_Attribute(string value);
    public string get_AttributePtr();
    public void set_AttributePtr(string value);
    public string get_Reply();
    public void set_Reply(string value);
    public string get_Result();
    public void set_Result(string value);
    public string get_ResultPtr();
    public void set_ResultPtr(string value);
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
}
public class System.IdentityModel.Services.AuthorizationFailedEventArgs : EventArgs {
    public bool RedirectToIdentityProvider { get; public set; }
    public bool get_RedirectToIdentityProvider();
    public void set_RedirectToIdentityProvider(bool value);
}
public class System.IdentityModel.Services.ChunkedCookieHandler : CookieHandler {
    public static int DefaultChunkSize;
    public static int MinimumChunkSize;
    public int ChunkSize { get; }
    public ChunkedCookieHandler(int chunkSize);
    public int get_ChunkSize();
    protected virtual void DeleteCore(string name, string path, string domain, HttpContext context);
    internal void DeleteInternal(string name, string path, string domain, HttpCookieCollection requestCookies, HttpCookieCollection responseCookies);
    protected virtual Byte[] ReadCore(string name, HttpContext context);
    internal Byte[] ReadInternal(string name, HttpCookieCollection requestCookies);
    protected virtual void WriteCore(Byte[] value, string name, string path, string domain, DateTime expirationTime, bool secure, bool httpOnly, HttpContext context);
    internal void WriteInternal(Byte[] value, string name, string path, string domain, DateTime expirationTime, bool secure, bool httpOnly, HttpCookieCollection requestCookies, HttpCookieCollection responseCookies);
}
public class System.IdentityModel.Services.ChunkedCookieHandlerElement : ConfigurationElement {
    [IntegerValidatorAttribute]
[ConfigurationPropertyAttribute("chunkSize")]
public int ChunkSize { get; public set; }
    internal bool IsConfigured { get; }
    public int get_ChunkSize();
    public void set_ChunkSize(int value);
    internal bool get_IsConfigured();
}
internal class System.IdentityModel.Services.ChunkedCookieHandlerTraceRecord : TraceRecord {
    internal string EventId { get; }
    public ChunkedCookieHandlerTraceRecord(Action action, HttpCookie cookie, string cookiePath);
    internal virtual string get_EventId();
    internal virtual void WriteTo(XmlWriter writer);
}
public class System.IdentityModel.Services.ClaimsAuthorizationModule : HttpModuleBase {
    public ClaimsAuthorizationManager ClaimsAuthorizationManager { get; public set; }
    protected virtual bool Authorize();
    public ClaimsAuthorizationManager get_ClaimsAuthorizationManager();
    public void set_ClaimsAuthorizationManager(ClaimsAuthorizationManager value);
    protected virtual void OnAuthorizeRequest(object sender, EventArgs args);
    public virtual void Dispose();
    protected virtual void InitializeModule(HttpApplication context);
    protected virtual void InitializePropertiesFromConfiguration();
}
public class System.IdentityModel.Services.ClaimsPrincipalPermission : object {
    public ClaimsPrincipalPermission(string resource, string action);
    private static ClaimsPrincipalPermission();
    [SuppressMessageAttribute("Microsoft.Security", "CA2103:ReviewImperativeSecurity")]
public static void CheckAccess(string resource, string action);
    [SuppressMessageAttribute("Microsoft.Security", "CA2103:ReviewImperativeSecurity")]
public sealed virtual IPermission Copy();
    public sealed virtual void Demand();
    public sealed virtual IPermission Intersect(IPermission target);
    public sealed virtual bool IsSubsetOf(IPermission target);
    public sealed virtual IPermission Union(IPermission target);
    public sealed virtual void FromXml(SecurityElement element);
    public sealed virtual SecurityElement ToXml();
    public sealed virtual bool IsUnrestricted();
}
[AttributeUsageAttribute("196")]
public class System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute : CodeAccessSecurityAttribute {
    public string Operation { get; public set; }
    public string Resource { get; public set; }
    public ClaimsPrincipalPermissionAttribute(SecurityAction action);
    [CompilerGeneratedAttribute]
public string get_Operation();
    [CompilerGeneratedAttribute]
public void set_Operation(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [SuppressMessageAttribute("Microsoft.Security", "CA2103:ReviewImperativeSecurity")]
public virtual IPermission CreatePermission();
}
public class System.IdentityModel.Services.Configuration.FederationConfiguration : object {
    public static string DefaultFederationConfigurationName;
    internal bool IsAmbiguous { get; internal set; }
    public bool IsInitialized { get; protected set; }
    public IdentityConfiguration IdentityConfiguration { get; public set; }
    public WsFederationConfiguration WsFederationConfiguration { get; public set; }
    public CookieHandler CookieHandler { get; public set; }
    public XmlElement CustomElement { get; public set; }
    public string Name { get; }
    public X509Certificate2 ServiceCertificate { get; public set; }
    public FederationConfiguration(bool loadConfig);
    public FederationConfiguration(string federationConfigurationName);
    private static FederationConfiguration();
    [CompilerGeneratedAttribute]
internal bool get_IsAmbiguous();
    [CompilerGeneratedAttribute]
internal void set_IsAmbiguous(bool value);
    public virtual bool get_IsInitialized();
    protected virtual void set_IsInitialized(bool value);
    public virtual void Initialize();
    protected void LoadConfiguration(FederationConfigurationElement element);
    public IdentityConfiguration get_IdentityConfiguration();
    public void set_IdentityConfiguration(IdentityConfiguration value);
    public WsFederationConfiguration get_WsFederationConfiguration();
    public void set_WsFederationConfiguration(WsFederationConfiguration value);
    public CookieHandler get_CookieHandler();
    public void set_CookieHandler(CookieHandler value);
    public XmlElement get_CustomElement();
    public void set_CustomElement(XmlElement value);
    public string get_Name();
    public X509Certificate2 get_ServiceCertificate();
    public void set_ServiceCertificate(X509Certificate2 value);
}
public class System.IdentityModel.Services.Configuration.FederationConfigurationCreatedEventArgs : EventArgs {
    public FederationConfiguration FederationConfiguration { get; public set; }
    public FederationConfigurationCreatedEventArgs(FederationConfiguration config);
    [CompilerGeneratedAttribute]
public FederationConfiguration get_FederationConfiguration();
    [CompilerGeneratedAttribute]
public void set_FederationConfiguration(FederationConfiguration value);
}
public class System.IdentityModel.Services.Configuration.FederationConfigurationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("cookieHandler")]
public CookieHandlerElement CookieHandler { get; public set; }
    public XmlElement CustomElement { get; public set; }
    [ConfigurationPropertyAttribute("serviceCertificate")]
public ServiceCertificateElement ServiceCertificate { get; public set; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("identityConfigurationName")]
public string IdentityConfigurationName { get; public set; }
    [ConfigurationPropertyAttribute("wsFederation")]
public WSFederationElement WsFederation { get; public set; }
    public bool IsConfigured { get; }
    public CookieHandlerElement get_CookieHandler();
    public void set_CookieHandler(CookieHandlerElement value);
    public XmlElement get_CustomElement();
    public void set_CustomElement(XmlElement value);
    public ServiceCertificateElement get_ServiceCertificate();
    public void set_ServiceCertificate(ServiceCertificateElement value);
    public string get_Name();
    public void set_Name(string value);
    public string get_IdentityConfigurationName();
    public void set_IdentityConfigurationName(string value);
    public WSFederationElement get_WsFederation();
    public void set_WsFederation(WSFederationElement value);
    public bool get_IsConfigured();
    protected virtual bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader);
}
[ConfigurationCollectionAttribute("System.IdentityModel.Services.Configuration.FederationConfigurationElement")]
public class System.IdentityModel.Services.Configuration.FederationConfigurationElementCollection : ConfigurationElementCollection {
    protected bool ThrowOnDuplicate { get; }
    internal bool IsConfigured { get; }
    protected virtual bool get_ThrowOnDuplicate();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public FederationConfigurationElement GetElement(string name);
    protected virtual void BaseAdd(ConfigurationElement element);
    internal bool get_IsConfigured();
}
public class System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection : ConfigurationSection {
    public static string SectionName;
    public static SystemIdentityModelServicesSection Current { get; }
    public static FederationConfigurationElement DefaultFederationConfigurationElement { get; }
    [ConfigurationPropertyAttribute("")]
public FederationConfigurationElementCollection FederationConfigurationElements { get; }
    internal bool IsConfigured { get; }
    public static SystemIdentityModelServicesSection get_Current();
    public static FederationConfigurationElement get_DefaultFederationConfigurationElement();
    public FederationConfigurationElementCollection get_FederationConfigurationElements();
    internal bool get_IsConfigured();
}
public class System.IdentityModel.Services.Configuration.WsFederationConfiguration : object {
    public static int DefaultMaxArrayLength;
    public static int DefaultMaxStringContentLength;
    public static bool DefaultPassiveRedirectEnabled;
    public static bool DefaultPersistentCookiesOnPassiveRedirects;
    public static bool DefaultRequireHttps;
    public static string DefaultFreshness;
    public string AuthenticationType { get; public set; }
    public Dictionary`2<string, string> CustomAttributes { get; }
    public string Freshness { get; public set; }
    public string HomeRealm { get; public set; }
    public string Issuer { get; public set; }
    public string Policy { get; public set; }
    public string Realm { get; public set; }
    public string Reply { get; public set; }
    public string Request { get; public set; }
    public string RequestPtr { get; public set; }
    public string Resource { get; public set; }
    public string SignInQueryString { get; public set; }
    public string SignOutQueryString { get; public set; }
    public string SignOutReply { get; public set; }
    public bool PassiveRedirectEnabled { get; public set; }
    public bool PersistentCookiesOnPassiveRedirects { get; public set; }
    public bool RequireHttps { get; public set; }
    public XmlDictionaryReaderQuotas XmlDictionaryReaderQuotas { get; public set; }
    public WsFederationConfiguration(string issuer, string realm);
    public WsFederationConfiguration(WSFederationElement federationElement);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public Dictionary`2<string, string> get_CustomAttributes();
    public string get_Freshness();
    public void set_Freshness(string value);
    public string get_HomeRealm();
    public void set_HomeRealm(string value);
    public string get_Issuer();
    public void set_Issuer(string value);
    public string get_Policy();
    public void set_Policy(string value);
    public string get_Realm();
    public void set_Realm(string value);
    public string get_Reply();
    public void set_Reply(string value);
    public string get_Request();
    public void set_Request(string value);
    public string get_RequestPtr();
    public void set_RequestPtr(string value);
    public string get_Resource();
    public void set_Resource(string value);
    public string get_SignInQueryString();
    public void set_SignInQueryString(string value);
    public string get_SignOutQueryString();
    public void set_SignOutQueryString(string value);
    public string get_SignOutReply();
    public void set_SignOutReply(string value);
    public bool get_PassiveRedirectEnabled();
    public void set_PassiveRedirectEnabled(bool value);
    public bool get_PersistentCookiesOnPassiveRedirects();
    public void set_PersistentCookiesOnPassiveRedirects(bool value);
    public bool get_RequireHttps();
    public void set_RequireHttps(bool value);
    public XmlDictionaryReaderQuotas get_XmlDictionaryReaderQuotas();
    public void set_XmlDictionaryReaderQuotas(XmlDictionaryReaderQuotas value);
}
public class System.IdentityModel.Services.Configuration.WSFederationElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("authenticationType")]
public string AuthenticationType { get; public set; }
    public Dictionary`2<string, string> CustomAttributes { get; }
    [ConfigurationPropertyAttribute("freshness")]
public string Freshness { get; public set; }
    [ConfigurationPropertyAttribute("homeRealm")]
public string HomeRealm { get; public set; }
    [ConfigurationPropertyAttribute("issuer")]
public string Issuer { get; public set; }
    [ConfigurationPropertyAttribute("policy")]
public string Policy { get; public set; }
    [ConfigurationPropertyAttribute("realm")]
public string Realm { get; public set; }
    [ConfigurationPropertyAttribute("reply")]
public string Reply { get; public set; }
    [ConfigurationPropertyAttribute("request")]
public string Request { get; public set; }
    [ConfigurationPropertyAttribute("requestPtr")]
public string RequestPtr { get; public set; }
    [ConfigurationPropertyAttribute("resource")]
public string Resource { get; public set; }
    [ConfigurationPropertyAttribute("signInQueryString")]
public string SignInQueryString { get; public set; }
    [ConfigurationPropertyAttribute("signOutQueryString")]
public string SignOutQueryString { get; public set; }
    [ConfigurationPropertyAttribute("signOutReply")]
public string SignOutReply { get; public set; }
    [ConfigurationPropertyAttribute("passiveRedirectEnabled")]
public bool PassiveRedirectEnabled { get; public set; }
    [ConfigurationPropertyAttribute("persistentCookiesOnPassiveRedirects")]
public bool PersistentCookiesOnPassiveRedirects { get; public set; }
    [ConfigurationPropertyAttribute("requireHttps")]
public bool RequireHttps { get; public set; }
    public bool IsConfigured { get; }
    internal void Verify();
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public Dictionary`2<string, string> get_CustomAttributes();
    public string get_Freshness();
    public void set_Freshness(string value);
    public string get_HomeRealm();
    public void set_HomeRealm(string value);
    public string get_Issuer();
    public void set_Issuer(string value);
    public string get_Policy();
    public void set_Policy(string value);
    public string get_Realm();
    public void set_Realm(string value);
    public string get_Reply();
    public void set_Reply(string value);
    public string get_Request();
    public void set_Request(string value);
    public string get_RequestPtr();
    public void set_RequestPtr(string value);
    public string get_Resource();
    public void set_Resource(string value);
    public string get_SignInQueryString();
    public void set_SignInQueryString(string value);
    public string get_SignOutQueryString();
    public void set_SignOutQueryString(string value);
    public string get_SignOutReply();
    public void set_SignOutReply(string value);
    public bool get_PassiveRedirectEnabled();
    public void set_PassiveRedirectEnabled(bool value);
    public bool get_PersistentCookiesOnPassiveRedirects();
    public void set_PersistentCookiesOnPassiveRedirects(bool value);
    public bool get_RequireHttps();
    public void set_RequireHttps(bool value);
    public bool get_IsConfigured();
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
}
internal static class System.IdentityModel.Services.ConfigurationStrings : object {
    public static string AuthenticationSection;
    public static string ChunkedCookieHandler;
    public static string ChunkSize;
    public static string CookieHandler;
    public static string ConnectionString;
    public static string CertificateReference;
    public static string CustomCookieHandler;
    public static string DefaultCollectionName;
    public static string DefaultConfigurationElementName;
    public static string DefaultFederationConfigurationName;
    public static string DefaultProvider;
    public static string DefaultUrl;
    public static string Domain;
    public static string Enabled;
    public static string FederationConfiguration;
    public static string FindValue;
    public static string HideFromScript;
    public static string IdentityConfigurationName;
    public static string IdentityModelServicesSection;
    public static string Mode;
    public static string Name;
    public static string PassiveRedirectEnabled;
    public static string Path;
    public static string PersistentCookiesOnPassiveRedirects;
    public static string PersistentSessionLifetime;
    public static string Providers;
    public static string RequireHttps;
    public static string RequireSsl;
    public static string ServiceCertificate;
    public static string SignInMode;
    public static string Type;
    public static string WsFederation;
}
internal static class System.IdentityModel.Services.ControlUtil : object {
    public static string ReturnUrl;
    public static bool IsHttps(Uri url);
    public static bool IsHttps(string urlPath);
    public static void EnsureSessionAuthenticationModule();
    public static bool OnLoginPage(HttpContext context);
    public static bool AccessingPage(HttpContextBase context, string loginUrl);
    public static string GetPathAndQuery(FederationMessage request);
    public static string GetCompleteLoginUrl(string loginUrl);
    public static string EnsureEndWithSemiColon(string value);
    public static bool IsAppRelative(string path);
    public static bool IsAppRelative(Uri basePath, string path);
    public static bool IsDangerousUrl(string s);
    public static void CopyBaseAttributesToInnerControl(WebControl control, WebControl child);
    public static void SetTableCellStyle(Control control, Style style);
    public static bool EnsureCrossAppRedirect(string toUri, HttpContext context, bool throwIfFail);
    internal static bool IsPathOnSameServer(string absUriOrLocalPath, Uri currentRequestUri);
    public static string GetLoginPage(HttpContext context, string extraQueryString, bool reuseReturnUrl);
    public static string RemoveQueryStringVariableFromUrl(string strUrl, string QSVar);
    internal static string GetReturnUrl(HttpContext context, bool useDefaultIfAbsent);
    public static void RemoveQSVar(String& strUrl, int posQ, string token, string sep, int lenAtStartToLeave);
}
public abstract class System.IdentityModel.Services.CookieHandler : object {
    public string Domain { get; public set; }
    public bool HideFromClientScript { get; public set; }
    public string Name { get; public set; }
    public string Path { get; public set; }
    public Nullable`1<TimeSpan> PersistentSessionLifetime { get; public set; }
    public bool RequireSsl { get; public set; }
    public void Delete();
    public void Delete(string name);
    public void Delete(HttpContext context);
    public void Delete(string name, HttpContext context);
    public void Delete(string name, string path, string domain, HttpContext context);
    protected abstract virtual void DeleteCore(string name, string path, string domain, HttpContext context);
    public virtual string get_Domain();
    public virtual void set_Domain(string value);
    public virtual bool get_HideFromClientScript();
    public virtual void set_HideFromClientScript(bool value);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_Path();
    public virtual void set_Path(string value);
    public virtual Nullable`1<TimeSpan> get_PersistentSessionLifetime();
    public virtual void set_PersistentSessionLifetime(Nullable`1<TimeSpan> value);
    public virtual bool get_RequireSsl();
    public virtual void set_RequireSsl(bool value);
    public Byte[] Read();
    public Byte[] Read(string name);
    public Byte[] Read(HttpContext context);
    public Byte[] Read(string name, HttpContext context);
    protected abstract virtual Byte[] ReadCore(string name, HttpContext context);
    public void Write(Byte[] value, bool isPersistent, DateTime tokenExpirationTime);
    public void Write(Byte[] value, string name, DateTime expirationTime);
    public void Write(Byte[] value, string name, DateTime expirationTime, HttpContext context);
    public void Write(Byte[] value, string name, string path, string domain, DateTime expirationTime, bool requiresSsl, bool hideFromClientScript, HttpContext context);
    protected abstract virtual void WriteCore(Byte[] value, string name, string path, string domain, DateTime expirationTime, bool secure, bool httpOnly, HttpContext context);
    public virtual string MatchCookiePath(Uri baseUri, Uri targetUri);
    internal static string MatchCookiePath(string targetUrl);
}
public class System.IdentityModel.Services.CookieHandlerElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("mode")]
public CookieHandlerMode Mode { get; public set; }
    [ConfigurationPropertyAttribute("chunkedCookieHandler")]
public ChunkedCookieHandlerElement ChunkedCookieHandler { get; public set; }
    [ConfigurationPropertyAttribute("customCookieHandler")]
public CustomTypeElement CustomCookieHandler { get; public set; }
    [ConfigurationPropertyAttribute("domain")]
public string Domain { get; public set; }
    [ConfigurationPropertyAttribute("hideFromScript")]
public bool HideFromScript { get; public set; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("path")]
public string Path { get; public set; }
    [TimeSpanValidatorAttribute]
[ConfigurationPropertyAttribute("persistentSessionLifetime")]
public TimeSpan PersistentSessionLifetime { get; public set; }
    [ConfigurationPropertyAttribute("requireSsl")]
public bool RequireSsl { get; public set; }
    internal bool IsConfigured { get; }
    public CookieHandler GetConfiguredCookieHandler();
    public CookieHandlerMode get_Mode();
    public void set_Mode(CookieHandlerMode value);
    public ChunkedCookieHandlerElement get_ChunkedCookieHandler();
    public void set_ChunkedCookieHandler(ChunkedCookieHandlerElement value);
    public CustomTypeElement get_CustomCookieHandler();
    public void set_CustomCookieHandler(CustomTypeElement value);
    public string get_Domain();
    public void set_Domain(string value);
    public bool get_HideFromScript();
    public void set_HideFromScript(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Path();
    public void set_Path(string value);
    public TimeSpan get_PersistentSessionLifetime();
    public void set_PersistentSessionLifetime(TimeSpan value);
    public bool get_RequireSsl();
    public void set_RequireSsl(bool value);
    internal bool get_IsConfigured();
}
public enum System.IdentityModel.Services.CookieHandlerMode : Enum {
    public int value__;
    public static CookieHandlerMode Default;
    public static CookieHandlerMode Chunked;
    public static CookieHandlerMode Custom;
}
internal class System.IdentityModel.Services.Diagnostics.Application.TD : object {
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal static CultureInfo Culture { get; internal set; }
    private static TD();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static bool FederationMessageCreationStartedIsEnabled();
    internal static void FederationMessageCreationStarted(EventTraceActivity eventTraceActivity);
    internal static bool FederationMessageCreationSuccessIsEnabled();
    internal static void FederationMessageCreationSuccess(EventTraceActivity eventTraceActivity);
    internal static bool FederationMessageProcessingStartedIsEnabled();
    internal static void FederationMessageProcessingStarted(EventTraceActivity eventTraceActivity);
    internal static bool FederationMessageProcessingSuccessIsEnabled();
    internal static void FederationMessageProcessingSuccess(EventTraceActivity eventTraceActivity);
    internal static bool PrincipalSettingFromSessionTokenStartedIsEnabled();
    internal static void PrincipalSettingFromSessionTokenStarted(EventTraceActivity eventTraceActivity);
    internal static bool PrincipalSettingFromSessionTokenSuccessIsEnabled();
    internal static void PrincipalSettingFromSessionTokenSuccess(EventTraceActivity eventTraceActivity);
    internal static bool SessionCookieReadingStartedIsEnabled();
    internal static void SessionCookieReadingStarted(EventTraceActivity eventTraceActivity);
    internal static bool SessionCookieReadingSuccessIsEnabled();
    internal static void SessionCookieReadingSuccess(EventTraceActivity eventTraceActivity);
}
internal static class System.IdentityModel.Services.Diagnostics.DiagnosticStrings : object {
    internal static string DiagnosticsNamespace;
    internal static string Action;
    internal static string DomainTag;
    internal static string ExpiresTag;
    internal static string HttpOnlyTag;
    internal static string NameTag;
    internal static string NamespaceTag;
    internal static string PathTag;
    internal static string SecureTag;
}
internal static class System.IdentityModel.Services.DiagnosticUtil : object {
    internal static ExceptionUtility ExceptionUtil { get; }
    internal static ExceptionUtility get_ExceptionUtil();
}
internal static class System.IdentityModel.Services.DiagnosticUtility : object {
    internal static string EventSourceName;
    internal static string DefaultTraceListenerName;
    internal static LegacyDiagnosticTrace DiagnosticTrace { get; }
    internal static ExceptionUtility ExceptionUtility { get; }
    internal static Utility Utility { get; }
    internal static bool TracingEnabled { get; }
    internal static bool ShouldTraceCritical { get; }
    internal static bool ShouldUseActivity { get; }
    internal static bool ShouldTraceError { get; }
    internal static bool ShouldTraceWarning { get; }
    internal static bool ShouldTraceInformation { get; }
    internal static bool ShouldTraceVerbose { get; }
    private static DiagnosticUtility();
    internal static LegacyDiagnosticTrace get_DiagnosticTrace();
    internal static ExceptionUtility get_ExceptionUtility();
    public static int CeilingDivide(int dividend, int divisor);
    public static Exception ThrowHelperArgumentNullOrEmptyString(string arg);
    public static Exception ThrowHelperArgumentOutOfRange(string arg);
    public static Exception ThrowHelperArgumentOutOfRange(string arg, string message);
    public static Exception ThrowHelperArgumentOutOfRange(string arg, object actualValue, string message);
    public static Exception ThrowHelperConfigurationError(ConfigurationElement configElement, string propertyName, Exception inner);
    public static Exception ThrowHelperConfigurationError(ConfigurationElement configElement, string propertyName, string message);
    public static Exception ThrowHelperInvalidOperation(string message);
    public static Exception ThrowHelperProviderError(string attributeName);
    public static Exception ThrowHelperProviderError(string p, ArgumentException e);
    public static void WriteDecoded(string startElement, string wresult, XmlWriter writer);
    internal static Utility get_Utility();
    [SecuritySafeCriticalAttribute]
internal static void InitDiagnosticTraceImpl(TraceSourceKind sourceType, string traceSourceName);
    internal static bool get_TracingEnabled();
    internal static bool ShouldTrace(TraceEventType type);
    internal static bool get_ShouldTraceCritical();
    internal static bool get_ShouldUseActivity();
    internal static bool get_ShouldTraceError();
    internal static bool get_ShouldTraceWarning();
    internal static bool get_ShouldTraceInformation();
    internal static bool get_ShouldTraceVerbose();
    [ConditionalAttribute("DEBUG")]
internal static void DebugAssert(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
internal static void DebugAssert(string message);
}
internal static class System.IdentityModel.Services.EmptySecurityTokenResolver : object {
    public static SecurityTokenResolver Instance { get; }
    private static EmptySecurityTokenResolver();
    public static SecurityTokenResolver get_Instance();
}
public class System.IdentityModel.Services.ErrorEventArgs : CancelEventArgs {
    public Exception Exception { get; }
    public ErrorEventArgs(Exception exception);
    public ErrorEventArgs(bool cancel, Exception exception);
    public Exception get_Exception();
}
public static class System.IdentityModel.Services.FederatedAuthentication : object {
    internal static string AuthenticationSectionName;
    internal static string ModulesKey;
    [ThreadStaticAttribute]
internal static IDictionary _currentItemsOverride;
    public static FederationConfiguration FederationConfiguration { get; }
    public static ClaimsAuthorizationModule ClaimsAuthorizationModule { get; }
    public static SessionAuthenticationModule SessionAuthenticationModule { get; }
    public static WSFederationAuthenticationModule WSFederationAuthenticationModule { get; }
    private static FederatedAuthentication();
    public static FederationConfiguration get_FederationConfiguration();
    public static ClaimsAuthorizationModule get_ClaimsAuthorizationModule();
    public static SessionAuthenticationModule get_SessionAuthenticationModule();
    public static WSFederationAuthenticationModule get_WSFederationAuthenticationModule();
    public static void add_FederationConfigurationCreated(EventHandler`1<FederationConfigurationCreatedEventArgs> value);
    public static void remove_FederationConfigurationCreated(EventHandler`1<FederationConfigurationCreatedEventArgs> value);
    public static T GetHttpModule();
}
public class System.IdentityModel.Services.FederatedAuthenticationSessionEndingException : Exception {
    public FederatedAuthenticationSessionEndingException(string message);
    public FederatedAuthenticationSessionEndingException(string message, Exception inner);
    protected FederatedAuthenticationSessionEndingException(SerializationInfo info, StreamingContext context);
}
internal class System.IdentityModel.Services.FederatedPassiveContext : object {
    public string ControlId { get; }
    public string SignInContext { get; }
    public string ReturnUrl { get; }
    public bool RememberMe { get; }
    public string WCtx { get; }
    public FederatedPassiveContext(string controlId, string signInContext, string returnUrl, bool rememberMe);
    public FederatedPassiveContext(string wctx);
    public string get_ControlId();
    public string get_SignInContext();
    public string get_ReturnUrl();
    public bool get_RememberMe();
    public string get_WCtx();
}
public static class System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations : object {
    public static void ProcessRequest(HttpRequest request, ClaimsPrincipal principal, SecurityTokenService sts, HttpResponse response);
    public static void ProcessRequest(HttpRequest request, ClaimsPrincipal principal, SecurityTokenService sts, HttpResponse response, WSFederationSerializer federationSerializer);
    public static SignInResponseMessage ProcessSignInRequest(SignInRequestMessage requestMessage, ClaimsPrincipal principal, SecurityTokenService sts);
    public static SignInResponseMessage ProcessSignInRequest(SignInRequestMessage requestMessage, ClaimsPrincipal principal, SecurityTokenService sts, WSFederationSerializer federationSerializer);
    public static void ProcessSignInResponse(SignInResponseMessage signInResponseMessage, HttpResponse httpResponse);
    public static void ProcessSignOutRequest(FederationMessage requestMessage, ClaimsPrincipal principal, string reply, HttpResponse httpResponse);
}
public class System.IdentityModel.Services.FederatedSessionExpiredException : FederatedAuthenticationSessionEndingException {
    public DateTime Expired { get; }
    public DateTime Tested { get; }
    public FederatedSessionExpiredException(DateTime tested, DateTime expired);
    public FederatedSessionExpiredException(DateTime tested, DateTime expired, Exception inner);
    public FederatedSessionExpiredException(string message);
    public FederatedSessionExpiredException(string message, Exception inner);
    protected FederatedSessionExpiredException(SerializationInfo info, StreamingContext context);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public DateTime get_Expired();
    public DateTime get_Tested();
}
public class System.IdentityModel.Services.FederationException : Exception {
    public FederationException(string message);
    public FederationException(string message, Exception inner);
    protected FederationException(SerializationInfo info, StreamingContext context);
}
public static class System.IdentityModel.Services.FederationManagement : object {
    public static XmlReader CreateApplicationFederationMetadata(Uri applicationUri, X509Certificate2 certificate, Collection`1<DisplayClaim> claimsRequired, ApplicationType applicationType, Collection`1<Uri> audienceUris);
    public static XmlReader UpdateIdentityProviderTrustInfo(XmlReader metadataReader, XmlReader inputConfiguration, bool claimsOfferedUpdate);
    public static XmlReader UpdateIdentityProviderTrustInfo(XmlReader metadataReader, XmlReader inputConfiguration, bool claimsOfferedUpdate, MetadataSerializer metadataSerializer);
    public static void UpdateIdentityProviderTrustInfo(XmlReader metadataReader, XmlReader inputConfiguration, XmlNodeReader& newIssuerNameRegistry, XmlNodeReader& claimTypesOffered);
    public static void UpdateIdentityProviderTrustInfo(XmlReader metadataReader, XmlReader inputConfiguration, XmlNodeReader& newIssuerNameRegistry, XmlNodeReader& claimTypesOffered, MetadataSerializer metadataSerializer);
}
public abstract class System.IdentityModel.Services.FederationMessage : object {
    public IDictionary`2<string, string> Parameters { get; }
    public Uri BaseUri { get; public set; }
    protected FederationMessage(Uri baseUrl);
    public IDictionary`2<string, string> get_Parameters();
    public Uri get_BaseUri();
    public void set_BaseUri(Uri value);
    protected virtual void Validate();
    public abstract virtual void Write(TextWriter writer);
    public static NameValueCollection ParseQueryString(Uri data);
    public string GetParameter(string parameter);
    public void SetParameter(string parameter, string value);
    public void SetUriParameter(string parameter, string value);
    public void RemoveParameter(string parameter);
    public static Uri GetBaseUrl(Uri uri);
    public virtual string WriteQueryString();
    public virtual string WriteFormPost();
}
internal static class System.IdentityModel.Services.FxTrace : object {
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool ShouldTraceCritical { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool TracingEnabled { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool ShouldTraceError { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool ShouldTraceInformation { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool ShouldTraceVerbose { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool ShouldTraceWarning { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool ShouldTraceCriticalToTraceSource { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool ShouldTraceErrorToTraceSource { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool ShouldTraceInformationToTraceSource { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool ShouldTraceVerboseToTraceSource { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool ShouldTraceWarningToTraceSource { get; }
    public static ExceptionTrace Exception { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static EtwDiagnosticTrace Trace { get; }
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static EventLogger EventLog { get; }
    private static FxTrace();
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
[SecuritySafeCriticalAttribute]
public static void UpdateEventDefinitions(EventDescriptor[] eventDescriptors);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
public static bool IsEventEnabled(int index);
    public static bool get_ShouldTraceCritical();
    public static bool get_TracingEnabled();
    public static bool get_ShouldTraceError();
    public static bool get_ShouldTraceInformation();
    public static bool get_ShouldTraceVerbose();
    public static bool get_ShouldTraceWarning();
    public static bool get_ShouldTraceCriticalToTraceSource();
    public static bool get_ShouldTraceErrorToTraceSource();
    public static bool get_ShouldTraceInformationToTraceSource();
    public static bool get_ShouldTraceVerboseToTraceSource();
    public static bool get_ShouldTraceWarningToTraceSource();
    public static ExceptionTrace get_Exception();
    public static EtwDiagnosticTrace get_Trace();
    public static EventLogger get_EventLog();
}
public abstract class System.IdentityModel.Services.HttpModuleBase : object {
    public FederationConfiguration FederationConfiguration { get; public set; }
    public FederationConfiguration get_FederationConfiguration();
    public void set_FederationConfiguration(FederationConfiguration value);
    public virtual void Dispose();
    public sealed virtual void Init(HttpApplication context);
    protected abstract virtual void InitializeModule(HttpApplication context);
    protected abstract virtual void InitializePropertiesFromConfiguration();
}
public class System.IdentityModel.Services.MachineKeyTransform : CookieTransform {
    public virtual Byte[] Decode(Byte[] encoded);
    public virtual Byte[] Encode(Byte[] value);
}
internal class System.IdentityModel.Services.PassiveMessageTraceRecord : TraceRecord {
    internal string EventId { get; }
    public PassiveMessageTraceRecord(IDictionary`2<string, string> dictionary);
    internal virtual string get_EventId();
    internal virtual void WriteTo(XmlWriter writer);
}
public class System.IdentityModel.Services.PseudonymRequestMessage : WSFederationMessage {
    public string Pseudonym { get; public set; }
    public string PseudonymPtr { get; public set; }
    public string Reply { get; public set; }
    public string Result { get; public set; }
    public string ResultPtr { get; public set; }
    public PseudonymRequestMessage(Uri baseUrl);
    public string get_Pseudonym();
    public void set_Pseudonym(string value);
    public string get_PseudonymPtr();
    public void set_PseudonymPtr(string value);
    public string get_Reply();
    public void set_Reply(string value);
    public string get_Result();
    public void set_Result(string value);
    public string get_ResultPtr();
    public void set_ResultPtr(string value);
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
}
public class System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs : CancelEventArgs {
    public SignInRequestMessage SignInRequestMessage { get; public set; }
    public RedirectingToIdentityProviderEventArgs(SignInRequestMessage signInRequestMessage);
    public SignInRequestMessage get_SignInRequestMessage();
    public void set_SignInRequestMessage(SignInRequestMessage value);
}
public class System.IdentityModel.Services.SecurityTokenReceivedEventArgs : CancelEventArgs {
    public SecurityToken SecurityToken { get; public set; }
    public string SignInContext { get; }
    public SecurityTokenReceivedEventArgs(SecurityToken securityToken);
    public SecurityTokenReceivedEventArgs(SecurityToken securityToken, string signInContext);
    public SecurityToken get_SecurityToken();
    public void set_SecurityToken(SecurityToken value);
    public string get_SignInContext();
}
internal class System.IdentityModel.Services.SecurityTokenServiceMetadata : object {
    public EntityDescriptor EntityDescriptor { get; }
    public SecurityTokenServiceDescriptor SecurityTokenServiceDescriptor { get; }
    public SecurityTokenServiceMetadata(MetadataBase baseMeta);
    public EntityDescriptor get_EntityDescriptor();
    public SecurityTokenServiceDescriptor get_SecurityTokenServiceDescriptor();
    public Collection`1<X509Certificate2> GetSecurityTokenServiceSigningCertificates();
}
public class System.IdentityModel.Services.SecurityTokenValidatedEventArgs : CancelEventArgs {
    public ClaimsPrincipal ClaimsPrincipal { get; public set; }
    public SecurityTokenValidatedEventArgs(ClaimsPrincipal claimsPrincipal);
    public ClaimsPrincipal get_ClaimsPrincipal();
    public void set_ClaimsPrincipal(ClaimsPrincipal value);
}
internal class System.IdentityModel.Services.Serialization.ClaimTypeRequiredElement : object {
    public Uri Type { get; }
    public bool Optional { get; public set; }
    public ClaimTypeRequiredElement(Uri type);
    public ClaimTypeRequiredElement(Uri type, bool optional);
    public Uri get_Type();
    public bool get_Optional();
    public void set_Optional(bool value);
}
internal static class System.IdentityModel.Services.Serialization.ConfigurationConstants : object {
    public static string NamespacePrefix;
}
internal class System.IdentityModel.Services.Serialization.ConfigurationManager : object {
    public XmlDocument Document { get; }
    public XmlNamespaceManager NamespaceManager { get; }
    public ConfigurationManager(XmlReader configurationXmlReader);
    private static ConfigurationManager();
    public XmlDocument get_Document();
    public XmlNamespaceManager get_NamespaceManager();
    public IssuerNameRegistryElement ReadIssuerNameRegistry(string serviceName);
    public void WriteIssuerNameRegistry(IssuerNameRegistryElement issuerNameRegistry, string serviceName);
    public void UpdateIssuerNameRegistryElement(string serviceName, Collection`1<X509Certificate2> stsCertificates, string issuerName);
    public static string GetFormattedXPath(string xPath, String[] args);
    public static string GetServiceXPath(string serviceName);
    public XmlNode SelectSingleNodeFromDocument(string xPath);
    public bool RemoveNode(string xPath);
    public XmlNode WriteXPathNodes(string xPath);
    public void WriteRequiredClaimType(Collection`1<ClaimTypeRequiredElement> claimTypeRequiredCollection, string entityId, bool isSilentMode);
}
internal class System.IdentityModel.Services.Serialization.IssuerNameRegistryElement : object {
    public string Type { get; }
    public Collection`1<TrustedIssuerElement> TrustedIssuers { get; public set; }
    public IssuerNameRegistryElement(string type);
    public IssuerNameRegistryElement(string type, TrustedIssuerElement trustedIssuer);
    public string get_Type();
    public Collection`1<TrustedIssuerElement> get_TrustedIssuers();
    public void set_TrustedIssuers(Collection`1<TrustedIssuerElement> value);
}
internal class System.IdentityModel.Services.Serialization.TrustedIssuerElement : object {
    public string Thumbprint { get; public set; }
    public string Name { get; public set; }
    public TrustedIssuerElement(string thumbprint);
    public TrustedIssuerElement(string thumbprint, string name);
    public string get_Thumbprint();
    public void set_Thumbprint(string value);
    public string get_Name();
    public void set_Name(string value);
}
public class System.IdentityModel.Services.ServiceCertificateElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("certificateReference")]
public CertificateReferenceElement CertificateReference { get; public set; }
    internal bool IsConfigured { get; }
    public CertificateReferenceElement get_CertificateReference();
    public void set_CertificateReference(CertificateReferenceElement value);
    internal X509Certificate2 GetCertificate();
    internal bool get_IsConfigured();
}
public class System.IdentityModel.Services.SessionAuthenticationModule : HttpModuleBase {
    public CookieHandler CookieHandler { get; public set; }
    public SessionSecurityToken ContextSessionSecurityToken { get; internal set; }
    public bool IsReferenceMode { get; public set; }
    internal static SessionAuthenticationModule Current { get; }
    [CompilerGeneratedAttribute]
public CookieHandler get_CookieHandler();
    [CompilerGeneratedAttribute]
public void set_CookieHandler(CookieHandler value);
    public virtual SessionSecurityToken get_ContextSessionSecurityToken();
    internal virtual void set_ContextSessionSecurityToken(SessionSecurityToken value);
    [CompilerGeneratedAttribute]
public bool get_IsReferenceMode();
    [CompilerGeneratedAttribute]
public void set_IsReferenceMode(bool value);
    internal static SessionAuthenticationModule get_Current();
    internal static void CheckForCurrent();
    public virtual void AuthenticateSessionSecurityToken(SessionSecurityToken sessionToken, bool writeCookie);
    public bool ContainsSessionTokenCookie(HttpCookieCollection httpCookieCollection);
    public void DeleteSessionTokenCookie();
    internal void RemoveSessionTokenFromCache(SessionSecurityToken token);
    internal Uri GetSignOutUrlFromSessionToken();
    protected virtual void InitializeModule(HttpApplication context);
    protected virtual void InitializePropertiesFromConfiguration();
    internal static string MatchCookiePath(string targetUrl);
    protected virtual void OnAuthenticateRequest(object sender, EventArgs eventArgs);
    protected virtual void OnPostAuthenticateRequest(object sender, EventArgs e);
    public virtual void SignOut();
    protected virtual void OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs args);
    protected virtual void OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs args);
    protected virtual void OnSignedOut(EventArgs e);
    protected virtual void OnSigningOut(SigningOutEventArgs e);
    protected virtual void OnSignOutError(ErrorEventArgs e);
    public SessionSecurityToken CreateSessionSecurityToken(ClaimsPrincipal principal, string context, DateTime validFrom, DateTime validTo, bool isPersistent);
    public SessionSecurityToken ReadSessionTokenFromCookie(Byte[] sessionCookie);
    protected virtual void SetPrincipalFromSessionToken(SessionSecurityToken sessionSecurityToken);
    public bool TryReadSessionTokenFromCookie(SessionSecurityToken& sessionToken);
    protected ReadOnlyCollection`1<ClaimsIdentity> ValidateSessionToken(SessionSecurityToken sessionSecurityToken);
    public void WriteSessionTokenToCookie(SessionSecurityToken sessionToken);
    public void add_SessionSecurityTokenCreated(EventHandler`1<SessionSecurityTokenCreatedEventArgs> value);
    public void remove_SessionSecurityTokenCreated(EventHandler`1<SessionSecurityTokenCreatedEventArgs> value);
    public void add_SessionSecurityTokenReceived(EventHandler`1<SessionSecurityTokenReceivedEventArgs> value);
    public void remove_SessionSecurityTokenReceived(EventHandler`1<SessionSecurityTokenReceivedEventArgs> value);
    public void add_SigningOut(EventHandler`1<SigningOutEventArgs> value);
    public void remove_SigningOut(EventHandler`1<SigningOutEventArgs> value);
    public void add_SignedOut(EventHandler value);
    public void remove_SignedOut(EventHandler value);
    public void add_SignOutError(EventHandler`1<ErrorEventArgs> value);
    public void remove_SignOutError(EventHandler`1<ErrorEventArgs> value);
}
public class System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs : EventArgs {
    public SessionSecurityToken SessionToken { get; public set; }
    public bool WriteSessionCookie { get; public set; }
    public SessionSecurityTokenCreatedEventArgs(SessionSecurityToken sessionToken);
    public SessionSecurityToken get_SessionToken();
    public void set_SessionToken(SessionSecurityToken value);
    public bool get_WriteSessionCookie();
    public void set_WriteSessionCookie(bool value);
}
public class System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs : CancelEventArgs {
    public SessionSecurityToken SessionToken { get; public set; }
    public bool ReissueCookie { get; public set; }
    public SessionSecurityTokenReceivedEventArgs(SessionSecurityToken sessionToken);
    public SessionSecurityToken get_SessionToken();
    public void set_SessionToken(SessionSecurityToken value);
    public bool get_ReissueCookie();
    public void set_ReissueCookie(bool value);
}
public class System.IdentityModel.Services.SessionSecurityTokenResolver : SecurityTokenResolver {
    public SessionSecurityTokenResolver(SessionSecurityTokenCache tokenCache, string endpointId);
    protected virtual bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityKey& key);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, SecurityToken& token);
    protected virtual bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, SecurityToken& token);
}
public class System.IdentityModel.Services.SigningOutEventArgs : EventArgs {
    public static SigningOutEventArgs IPInitiated { get; }
    public static SigningOutEventArgs RPInitiated { get; }
    public bool IsIPInitiated { get; }
    public SigningOutEventArgs(bool isIPInitiated);
    private static SigningOutEventArgs();
    public static SigningOutEventArgs get_IPInitiated();
    public static SigningOutEventArgs get_RPInitiated();
    public bool get_IsIPInitiated();
}
public class System.IdentityModel.Services.SignInRequestMessage : WSFederationMessage {
    public string RequestUrl { get; }
    public string Federation { get; public set; }
    public string Reply { get; public set; }
    public string CurrentTime { get; public set; }
    public string Freshness { get; public set; }
    public string HomeRealm { get; public set; }
    public string AuthenticationType { get; public set; }
    public string Policy { get; public set; }
    public string Resource { get; public set; }
    public string Realm { get; public set; }
    public string Request { get; public set; }
    public string RequestPtr { get; public set; }
    public SignInRequestMessage(Uri baseUrl, string realm);
    internal SignInRequestMessage(Uri baseUrl);
    public SignInRequestMessage(Uri baseUrl, string realm, string reply);
    public string get_RequestUrl();
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
    public string get_Federation();
    public void set_Federation(string value);
    public string get_Reply();
    public void set_Reply(string value);
    public string get_CurrentTime();
    public void set_CurrentTime(string value);
    public string get_Freshness();
    public void set_Freshness(string value);
    public string get_HomeRealm();
    public void set_HomeRealm(string value);
    public string get_AuthenticationType();
    public void set_AuthenticationType(string value);
    public string get_Policy();
    public void set_Policy(string value);
    public string get_Resource();
    public void set_Resource(string value);
    public string get_Realm();
    public void set_Realm(string value);
    public string get_Request();
    public void set_Request(string value);
    public string get_RequestPtr();
    public void set_RequestPtr(string value);
}
public class System.IdentityModel.Services.SignInResponseMessage : WSFederationMessage {
    public string Result { get; public set; }
    public string ResultPtr { get; public set; }
    public SignInResponseMessage(Uri baseUrl, string result);
    public SignInResponseMessage(Uri baseUrl, Uri resultPtr);
    public SignInResponseMessage(Uri baseUrl, RequestSecurityTokenResponse response, WSFederationSerializer federationSerializer, WSTrustSerializationContext context);
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
    public string get_Result();
    public void set_Result(string value);
    public string get_ResultPtr();
    public void set_ResultPtr(string value);
}
public class System.IdentityModel.Services.SignOutCleanupRequestMessage : WSFederationMessage {
    public string Reply { get; public set; }
    public SignOutCleanupRequestMessage(Uri baseUrl);
    public SignOutCleanupRequestMessage(Uri baseUrl, string reply);
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
    public string get_Reply();
    public void set_Reply(string value);
}
public class System.IdentityModel.Services.SignOutRequestMessage : WSFederationMessage {
    public string Reply { get; public set; }
    public SignOutRequestMessage(Uri baseUrl);
    public SignOutRequestMessage(Uri baseUrl, string reply);
    protected virtual void Validate();
    public virtual void Write(TextWriter writer);
    public string get_Reply();
    public void set_Reply(string value);
}
internal class System.IdentityModel.Services.SR : object {
    internal static string ID0003;
    internal static string ID0005;
    internal static string ID0006;
    internal static string ID0010;
    internal static string ID0013;
    internal static string ID0014;
    internal static string ID0018;
    internal static string ID0022;
    internal static string ID0023;
    internal static string ID1003;
    internal static string ID1004;
    internal static string ID1016;
    internal static string ID1020;
    internal static string ID1022;
    internal static string ID1024;
    internal static string ID1027;
    internal static string ID1028;
    internal static string ID1041;
    internal static string ID1044;
    internal static string ID1045;
    internal static string ID1046;
    internal static string ID1047;
    internal static string ID1048;
    internal static string ID1050;
    internal static string ID1052;
    internal static string ID1055;
    internal static string ID1056;
    internal static string ID1057;
    internal static string ID1058;
    internal static string ID1059;
    internal static string ID1060;
    internal static string ID1061;
    internal static string ID1071;
    internal static string ID1075;
    internal static string ID3000;
    internal static string ID3001;
    internal static string ID3003;
    internal static string ID3005;
    internal static string ID3014;
    internal static string ID3016;
    internal static string ID3019;
    internal static string ID3074;
    internal static string ID3075;
    internal static string ID3094;
    internal static string ID3142;
    internal static string ID3143;
    internal static string ID3204;
    internal static string ID3206;
    internal static string ID3210;
    internal static string ID3211;
    internal static string ID3261;
    internal static string ID3272;
    internal static string ID3273;
    internal static string ID3277;
    internal static string ID4001;
    internal static string ID4002;
    internal static string ID4003;
    internal static string ID4004;
    internal static string ID4005;
    internal static string ID4010;
    internal static string ID4011;
    internal static string ID4014;
    internal static string ID4040;
    internal static string ID4058;
    internal static string ID4064;
    internal static string ID4274;
    internal static string ID4266;
    internal static string ID4284;
    internal static string ID4285;
    internal static string ID4286;
    internal static string ID4287;
    internal static string ID4288;
    internal static string ID5001;
    internal static string ID5002;
    internal static string ID5004;
    internal static string ID5007;
    internal static string ID5015;
    internal static string ID5023;
    internal static string ID5024;
    internal static string ID8008;
    internal static string ID8020;
    internal static string ID8021;
    internal static string ID8022;
    internal static string ID7004;
    internal static string ID7005;
    internal static string ID7006;
    internal static string ID7027;
    internal static string ID7009;
    internal static string ID7012;
    internal static string ID7013;
    internal static string ID7014;
    internal static string ID7015;
    internal static string ID7016;
    internal static string ID7017;
    internal static string ID7018;
    internal static string ID7019;
    internal static string ID7020;
    internal static string ID7021;
    internal static string ID7022;
    internal static string ID7023;
    internal static string ID7024;
    internal static string NoCert;
    internal static string HtmlPostTitle;
    internal static string HtmlPostNoScriptButtonText;
    internal static string HtmlPostNoScriptMessage;
    internal static string TraceAuthorize;
    internal static string TraceOnAuthorizeRequestFailed;
    internal static string TraceOnAuthorizeRequestSucceed;
    internal static string TraceChunkedCookieHandlerWriting;
    internal static string TraceChunkedCookieHandlerReading;
    internal static string TraceChunkedCookieHandlerDeleting;
    internal static string TraceGetReturnUrlFromResponse;
    internal static string TracePassiveOperationProcessRequest;
    internal static string TraceRedirectArgsSignInRequestMessageRequestUrl;
    internal static string TraceResponseRedirect;
    internal static string TraceResponseRedirectNotTrusted;
    internal static string TraceSetPrincipalFromSessionToken;
    internal static string TraceSignInWithResponseMessage;
    internal static string TraceValidateToken;
    internal static string TraceOnEndRequestRedirect;
    internal static string RequestedClaimTypeComment;
    internal static string InputConfigurationNotValid;
    public static ResourceManager Resources { get; }
    private static SR();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class System.IdentityModel.Services.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.IdentityModel.Services.SRDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal class System.IdentityModel.Services.TokenReceiver : object {
    public TimeSpan ConfiguredSessionTokenLifeTime { get; }
    public TokenReceiver(IdentityConfiguration identityConfiguration);
    public SecurityToken ReadToken(XmlReader reader);
    public SecurityToken ReadToken(string tokenXml, XmlDictionaryReaderQuotas readerQuotas, FederationConfiguration federationConfiguration);
    public ClaimsPrincipal AuthenticateToken(SecurityToken token, bool ensureBearerToken, string endpointUri);
    public TimeSpan get_ConfiguredSessionTokenLifeTime();
    public void ComputeSessionTokenLifeTime(SecurityToken securityToken, DateTime& validFrom, DateTime& validTo);
}
public class System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler : SessionSecurityTokenHandler {
    public MachineKeySessionSecurityTokenHandler(TimeSpan tokenLifetime);
    private static MachineKeySessionSecurityTokenHandler();
}
public class System.IdentityModel.Services.Tokens.MembershipUserNameSecurityTokenHandler : UserNameSecurityTokenHandler {
    public bool CanValidateToken { get; }
    public MembershipProvider MembershipProvider { get; public set; }
    public MembershipUserNameSecurityTokenHandler(MembershipProvider provider);
    public virtual void LoadCustomConfiguration(XmlNodeList customConfigElements);
    public virtual bool get_CanValidateToken();
    public MembershipProvider get_MembershipProvider();
    public void set_MembershipProvider(MembershipProvider value);
    [SecuritySafeCriticalAttribute]
public virtual ReadOnlyCollection`1<ClaimsIdentity> ValidateToken(SecurityToken token);
}
internal static class System.IdentityModel.Services.TraceCode : object {
    public static int IdentityModel;
    public static int AuthorizationContextCreated;
    public static int AuthorizationPolicyEvaluated;
    public static int ServiceBindingCheck;
    public static int ChannelBindingCheck;
    public static int Diagnostics;
}
internal static class System.IdentityModel.Services.TraceUtility : object {
    private static TraceUtility();
    internal static void TraceEvent(TraceEventType severity, int traceCode, string traceDescription);
    internal static void TraceEvent(TraceEventType severity, int traceCode, string traceDescription, TraceRecord extendedData, object source);
    internal static void TraceEvent(TraceEventType severity, int traceCode, string traceDescription, TraceRecord extendedData, object source, Exception exception);
    internal static void TraceString(TraceEventType eventType, string formatString, Object[] args);
}
public class System.IdentityModel.Services.WSFederationAuthenticationModule : HttpModuleBase {
    public string AuthenticationType { get; public set; }
    public string Freshness { get; public set; }
    public string HomeRealm { get; public set; }
    public string Issuer { get; public set; }
    public string Realm { get; public set; }
    public string Policy { get; public set; }
    public string Reply { get; public set; }
    public string SignOutReply { get; public set; }
    public string Request { get; public set; }
    public string RequestPtr { get; public set; }
    public string Resource { get; public set; }
    public bool PassiveRedirectEnabled { get; public set; }
    public bool PersistentCookiesOnPassiveRedirects { get; public set; }
    public bool RequireHttps { get; public set; }
    public string SignInContext { get; public set; }
    public string SignInQueryString { get; public set; }
    public string SignOutQueryString { get; public set; }
    public XmlDictionaryReaderQuotas XmlDictionaryReaderQuotas { get; public set; }
    internal static string SessionTokenContextPrefix { get; }
    private static WSFederationAuthenticationModule();
    public void add_SecurityTokenReceived(EventHandler`1<SecurityTokenReceivedEventArgs> value);
    public void remove_SecurityTokenReceived(EventHandler`1<SecurityTokenReceivedEventArgs> value);
    public void add_SecurityTokenValidated(EventHandler`1<SecurityTokenValidatedEventArgs> value);
    public void remove_SecurityTokenValidated(EventHandler`1<SecurityTokenValidatedEventArgs> value);
    public void add_SessionSecurityTokenCreated(EventHandler`1<SessionSecurityTokenCreatedEventArgs> value);
    public void remove_SessionSecurityTokenCreated(EventHandler`1<SessionSecurityTokenCreatedEventArgs> value);
    public void add_SignedIn(EventHandler value);
    public void remove_SignedIn(EventHandler value);
    public void add_SignedOut(EventHandler value);
    public void remove_SignedOut(EventHandler value);
    public void add_SignInError(EventHandler`1<ErrorEventArgs> value);
    public void remove_SignInError(EventHandler`1<ErrorEventArgs> value);
    public void add_SigningOut(EventHandler`1<SigningOutEventArgs> value);
    public void remove_SigningOut(EventHandler`1<SigningOutEventArgs> value);
    public void add_SignOutError(EventHandler`1<ErrorEventArgs> value);
    public void remove_SignOutError(EventHandler`1<ErrorEventArgs> value);
    public void add_RedirectingToIdentityProvider(EventHandler`1<RedirectingToIdentityProviderEventArgs> value);
    public void remove_RedirectingToIdentityProvider(EventHandler`1<RedirectingToIdentityProviderEventArgs> value);
    public void add_AuthorizationFailed(EventHandler`1<AuthorizationFailedEventArgs> value);
    public void remove_AuthorizationFailed(EventHandler`1<AuthorizationFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationType();
    [CompilerGeneratedAttribute]
public void set_AuthenticationType(string value);
    [CompilerGeneratedAttribute]
public string get_Freshness();
    [CompilerGeneratedAttribute]
public void set_Freshness(string value);
    [CompilerGeneratedAttribute]
public string get_HomeRealm();
    [CompilerGeneratedAttribute]
public void set_HomeRealm(string value);
    public string get_Issuer();
    public void set_Issuer(string value);
    public string get_Realm();
    public void set_Realm(string value);
    [CompilerGeneratedAttribute]
public string get_Policy();
    [CompilerGeneratedAttribute]
public void set_Policy(string value);
    public string get_Reply();
    public void set_Reply(string value);
    [CompilerGeneratedAttribute]
public string get_SignOutReply();
    [CompilerGeneratedAttribute]
public void set_SignOutReply(string value);
    [CompilerGeneratedAttribute]
public string get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(string value);
    public string get_RequestPtr();
    public void set_RequestPtr(string value);
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public void set_Resource(string value);
    [CompilerGeneratedAttribute]
public bool get_PassiveRedirectEnabled();
    [CompilerGeneratedAttribute]
public void set_PassiveRedirectEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_PersistentCookiesOnPassiveRedirects();
    [CompilerGeneratedAttribute]
public void set_PersistentCookiesOnPassiveRedirects(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireHttps();
    [CompilerGeneratedAttribute]
public void set_RequireHttps(bool value);
    [CompilerGeneratedAttribute]
public string get_SignInContext();
    [CompilerGeneratedAttribute]
public void set_SignInContext(string value);
    public string get_SignInQueryString();
    public void set_SignInQueryString(string value);
    public string get_SignOutQueryString();
    public void set_SignOutQueryString(string value);
    public XmlDictionaryReaderQuotas get_XmlDictionaryReaderQuotas();
    public void set_XmlDictionaryReaderQuotas(XmlDictionaryReaderQuotas value);
    internal static string get_SessionTokenContextPrefix();
    public bool CanReadSignInResponse(HttpRequestBase request);
    public virtual bool CanReadSignInResponse(HttpRequestBase request, bool onPage);
    protected virtual string GetSignOutRedirectUrl(SignOutCleanupRequestMessage signOutMessage);
    protected virtual string GetReturnUrlFromResponse(HttpRequestBase request);
    public virtual SecurityToken GetSecurityToken(HttpRequestBase request);
    public void VerifyProperties();
    public virtual void RedirectToIdentityProvider(string uniqueId, string returnUrl, bool persist);
    protected virtual void InitializeModule(HttpApplication context);
    protected virtual void InitializePropertiesFromConfiguration();
    protected virtual void OnAuthenticateRequest(object sender, EventArgs args);
    protected virtual void OnEndRequest(object sender, EventArgs args);
    protected virtual void OnPostAuthenticateRequest(object sender, EventArgs e);
    protected virtual void OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs args);
    protected virtual void OnSignedIn(EventArgs args);
    protected virtual void OnSignedOut(EventArgs args);
    protected virtual void OnSignInError(ErrorEventArgs args);
    protected virtual void OnSigningOut(SigningOutEventArgs args);
    protected virtual void OnSignOutError(ErrorEventArgs args);
    protected virtual void OnRedirectingToIdentityProvider(RedirectingToIdentityProviderEventArgs e);
    protected virtual void OnAuthorizationFailed(AuthorizationFailedEventArgs e);
    public void SetPrincipalAndWriteSessionToken(SessionSecurityToken sessionToken, bool isSession);
    public virtual void SignOut();
    public virtual void SignOut(string redirectUrl);
    public virtual void SignOut(string redirectUrl, bool initiateSignoutCleanup);
    internal static void Redirect(string redirectUrl);
    public virtual void SignOut(bool isIPRequest);
    public static void FederatedSignOut(Uri signOutUrl, Uri replyUrl);
    public virtual void SignIn(string ControlId);
    public SignInRequestMessage CreateSignInRequest(string uniqueId, string returnUrl, bool rememberMeSet);
    protected virtual string GetReferencedResult(string resultPtr);
    public virtual SecurityToken GetSecurityToken(SignInResponseMessage message);
    public virtual SignInResponseMessage GetSignInResponseMessage(HttpRequestBase request);
    public virtual string GetXmlTokenFromMessage(SignInResponseMessage message);
    public virtual string GetXmlTokenFromMessage(SignInResponseMessage message, WSFederationSerializer federationSerializer);
    public virtual bool IsSignInResponse(HttpRequestBase request);
    internal static SignOutCleanupRequestMessage GetSignOutCleanupMessage(HttpRequestBase request);
    protected virtual string GetSessionTokenContext();
    internal static Uri GetFederationPassiveSignOutUrl(Uri signOutUrl, Uri replyUrl);
    public static string GetFederationPassiveSignOutUrl(string issuer, string signOutReply, string signOutQueryString);
}
public abstract class System.IdentityModel.Services.WSFederationMessage : FederationMessage {
    public string Context { get; public set; }
    public string Encoding { get; public set; }
    public string Action { get; public set; }
    public WSFederationMessage(Uri baseUrl, string action);
    public string get_Context();
    public void set_Context(string value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_Action();
    public void set_Action(string value);
    public static WSFederationMessage CreateFromUri(Uri requestUri);
    public static bool TryCreateFromUri(Uri requestUri, WSFederationMessage& fedMsg);
    public static WSFederationMessage CreateFromNameValueCollection(Uri baseUrl, NameValueCollection collection);
    public static WSFederationMessage CreateFromFormPost(HttpRequestBase request);
}
public class System.IdentityModel.Services.WSFederationMessageException : Exception {
    public WSFederationMessageException(string message);
    public WSFederationMessageException(string message, Exception inner);
    protected WSFederationMessageException(SerializationInfo info, StreamingContext context);
}
internal static class System.IdentityModel.Services.WSFederationMetadataConstants : object {
    internal static string Namespace;
    internal static string Prefix;
    internal static string WSTransferAction;
    internal static string WSTransferResponseAction;
    internal static string FederationMetadataHandler;
}
public class System.IdentityModel.Services.WSFederationSerializer : object {
    public WSFederationSerializer(XmlDictionaryReader reader);
    public WSFederationSerializer(WSTrustRequestSerializer requestSerializer, WSTrustResponseSerializer responseSerializer);
    public virtual RequestSecurityToken CreateRequest(FederationMessage message, WSTrustSerializationContext context);
    public virtual RequestSecurityTokenResponse CreateResponse(FederationMessage message, WSTrustSerializationContext context);
    public virtual string GetReferencedRequest(string wreqptr);
    public virtual string GetReferencedResult(string wresultptr);
    public virtual string GetRequestAsString(RequestSecurityToken request, WSTrustSerializationContext context);
    public virtual string GetResponseAsString(RequestSecurityTokenResponse response, WSTrustSerializationContext context);
    public virtual bool CanReadRequest(string trustMessage);
    public virtual bool CanReadResponse(string trustMessage);
}
internal class System.IdentityModel.Services.WSFedMessageTraceRecord : TraceRecord {
    internal string EventId { get; }
    public WSFedMessageTraceRecord(FederationMessage wsFederationMessage);
    internal virtual string get_EventId();
    internal virtual void WriteTo(XmlWriter writer);
}
internal static class System.IdentityModel.WSAuthorizationConstants : object {
    internal static string Prefix;
    internal static string Namespace;
    internal static string Dialect;
    internal static string Action;
}
internal static class System.IdentityModel.WSFederationConstants : object {
    internal static string Namespace;
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
