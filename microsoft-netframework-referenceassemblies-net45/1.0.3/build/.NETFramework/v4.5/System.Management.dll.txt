public enum System.Management.AuthenticationLevel : Enum {
    public int value__;
    public static AuthenticationLevel Default;
    public static AuthenticationLevel None;
    public static AuthenticationLevel Connect;
    public static AuthenticationLevel Call;
    public static AuthenticationLevel Packet;
    public static AuthenticationLevel PacketIntegrity;
    public static AuthenticationLevel PacketPrivacy;
    public static AuthenticationLevel Unchanged;
}
public enum System.Management.CimType : Enum {
    public int value__;
    public static CimType None;
    public static CimType SInt8;
    public static CimType UInt8;
    public static CimType SInt16;
    public static CimType UInt16;
    public static CimType SInt32;
    public static CimType UInt32;
    public static CimType SInt64;
    public static CimType UInt64;
    public static CimType Real32;
    public static CimType Real64;
    public static CimType Boolean;
    public static CimType String;
    public static CimType DateTime;
    public static CimType Reference;
    public static CimType Char16;
    public static CimType Object;
}
public enum System.Management.CodeLanguage : Enum {
    public int value__;
    public static CodeLanguage CSharp;
    public static CodeLanguage JScript;
    public static CodeLanguage VB;
    public static CodeLanguage VJSharp;
    public static CodeLanguage Mcpp;
}
[FlagsAttribute]
public enum System.Management.ComparisonSettings : Enum {
    public int value__;
    public static ComparisonSettings IncludeAll;
    public static ComparisonSettings IgnoreQualifiers;
    public static ComparisonSettings IgnoreObjectSource;
    public static ComparisonSettings IgnoreDefaultValues;
    public static ComparisonSettings IgnoreClass;
    public static ComparisonSettings IgnoreCase;
    public static ComparisonSettings IgnoreFlavor;
}
public class System.Management.CompletedEventArgs : ManagementEventArgs {
    public ManagementBaseObject StatusObject { get; }
    public ManagementStatus Status { get; }
    public ManagementBaseObject get_StatusObject();
    public ManagementStatus get_Status();
}
public class System.Management.CompletedEventHandler : MulticastDelegate {
    public CompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.ConnectionOptions : ManagementOptions {
    public string Locale { get; public set; }
    public string Username { get; public set; }
    unknown string Password {public set; }
    unknown SecureString SecurePassword {public set; }
    public string Authority { get; public set; }
    public ImpersonationLevel Impersonation { get; public set; }
    public AuthenticationLevel Authentication { get; public set; }
    public bool EnablePrivileges { get; public set; }
    public ConnectionOptions(string locale, string username, string password, string authority, ImpersonationLevel impersonation, AuthenticationLevel authentication, bool enablePrivileges, ManagementNamedValueCollection context, TimeSpan timeout);
    public ConnectionOptions(string locale, string username, SecureString password, string authority, ImpersonationLevel impersonation, AuthenticationLevel authentication, bool enablePrivileges, ManagementNamedValueCollection context, TimeSpan timeout);
    public string get_Locale();
    public void set_Locale(string value);
    public string get_Username();
    public void set_Username(string value);
    public void set_Password(string value);
    public void set_SecurePassword(SecureString value);
    public string get_Authority();
    public void set_Authority(string value);
    public ImpersonationLevel get_Impersonation();
    public void set_Impersonation(ImpersonationLevel value);
    public AuthenticationLevel get_Authentication();
    public void set_Authentication(AuthenticationLevel value);
    public bool get_EnablePrivileges();
    public void set_EnablePrivileges(bool value);
    public virtual object Clone();
}
public class System.Management.DeleteOptions : ManagementOptions {
    public DeleteOptions(ManagementNamedValueCollection context, TimeSpan timeout);
    public virtual object Clone();
}
public class System.Management.EnumerationOptions : ManagementOptions {
    public bool ReturnImmediately { get; public set; }
    public int BlockSize { get; public set; }
    public bool Rewindable { get; public set; }
    public bool UseAmendedQualifiers { get; public set; }
    public bool EnsureLocatable { get; public set; }
    public bool PrototypeOnly { get; public set; }
    public bool DirectRead { get; public set; }
    public bool EnumerateDeep { get; public set; }
    public EnumerationOptions(ManagementNamedValueCollection context, TimeSpan timeout, int blockSize, bool rewindable, bool returnImmediatley, bool useAmendedQualifiers, bool ensureLocatable, bool prototypeOnly, bool directRead, bool enumerateDeep);
    public bool get_ReturnImmediately();
    public void set_ReturnImmediately(bool value);
    public int get_BlockSize();
    public void set_BlockSize(int value);
    public bool get_Rewindable();
    public void set_Rewindable(bool value);
    public bool get_UseAmendedQualifiers();
    public void set_UseAmendedQualifiers(bool value);
    public bool get_EnsureLocatable();
    public void set_EnsureLocatable(bool value);
    public bool get_PrototypeOnly();
    public void set_PrototypeOnly(bool value);
    public bool get_DirectRead();
    public void set_DirectRead(bool value);
    public bool get_EnumerateDeep();
    public void set_EnumerateDeep(bool value);
    public virtual object Clone();
}
public class System.Management.EventArrivedEventArgs : ManagementEventArgs {
    public ManagementBaseObject NewEvent { get; }
    public ManagementBaseObject get_NewEvent();
}
public class System.Management.EventArrivedEventHandler : MulticastDelegate {
    public EventArrivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, EventArrivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, EventArrivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.EventQuery : ManagementQuery {
    public EventQuery(string query);
    public EventQuery(string language, string query);
    public virtual object Clone();
}
public class System.Management.EventWatcherOptions : ManagementOptions {
    public int BlockSize { get; public set; }
    public EventWatcherOptions(ManagementNamedValueCollection context, TimeSpan timeout, int blockSize);
    public int get_BlockSize();
    public void set_BlockSize(int value);
    public virtual object Clone();
}
public enum System.Management.ImpersonationLevel : Enum {
    public int value__;
    public static ImpersonationLevel Default;
    public static ImpersonationLevel Anonymous;
    public static ImpersonationLevel Identify;
    public static ImpersonationLevel Impersonate;
    public static ImpersonationLevel Delegate;
}
[InstrumentationClassAttribute("1")]
public abstract class System.Management.Instrumentation.BaseEvent : object {
    public sealed virtual void Fire();
}
public class System.Management.Instrumentation.DefaultManagementProjectInstaller : Installer {
}
public interface System.Management.Instrumentation.IEvent {
    public abstract virtual void Fire();
}
[AttributeUsageAttribute("448")]
public class System.Management.Instrumentation.IgnoreMemberAttribute : Attribute {
}
public interface System.Management.Instrumentation.IInstance {
    public bool Published { get; public set; }
    public abstract virtual bool get_Published();
    public abstract virtual void set_Published(bool value);
}
[InstrumentationClassAttribute("0")]
public abstract class System.Management.Instrumentation.Instance : object {
    [IgnoreMemberAttribute]
public bool Published { get; public set; }
    public sealed virtual bool get_Published();
    public sealed virtual void set_Published(bool value);
}
public class System.Management.Instrumentation.Instrumentation : object {
    private static Instrumentation();
    public static void RegisterAssembly(Assembly assemblyToRegister);
    public static bool IsAssemblyRegistered(Assembly assemblyToRegister);
    public static void Fire(object eventData);
    public static void Publish(object instanceData);
    public static void Revoke(object instanceData);
    public static void SetBatchSize(Type instrumentationClass, int batchSize);
}
[AttributeUsageAttribute("12")]
public class System.Management.Instrumentation.InstrumentationClassAttribute : Attribute {
    public InstrumentationType InstrumentationType { get; }
    public string ManagedBaseClassName { get; }
    public InstrumentationClassAttribute(InstrumentationType instrumentationType);
    public InstrumentationClassAttribute(InstrumentationType instrumentationType, string managedBaseClassName);
    public InstrumentationType get_InstrumentationType();
    public string get_ManagedBaseClassName();
}
public enum System.Management.Instrumentation.InstrumentationType : Enum {
    public int value__;
    public static InstrumentationType Instance;
    public static InstrumentationType Event;
    public static InstrumentationType Abstract;
}
[AttributeUsageAttribute("1")]
public class System.Management.Instrumentation.InstrumentedAttribute : Attribute {
    public string NamespaceName { get; }
    public string SecurityDescriptor { get; }
    public InstrumentedAttribute(string namespaceName);
    public InstrumentedAttribute(string namespaceName, string securityDescriptor);
    public string get_NamespaceName();
    public string get_SecurityDescriptor();
}
[AttributeUsageAttribute("460")]
public class System.Management.Instrumentation.ManagedNameAttribute : Attribute {
    public string Name { get; }
    public ManagedNameAttribute(string name);
    public string get_Name();
}
public class System.Management.Instrumentation.ManagementInstaller : Installer {
    public string HelpText { get; }
    private static ManagementInstaller();
    public virtual string get_HelpText();
    public virtual void Install(IDictionary savedState);
    public virtual void Commit(IDictionary savedState);
    public virtual void Rollback(IDictionary savedState);
    public virtual void Uninstall(IDictionary savedState);
}
public class System.Management.InvokeMethodOptions : ManagementOptions {
    public InvokeMethodOptions(ManagementNamedValueCollection context, TimeSpan timeout);
    public virtual object Clone();
}
[DefaultMemberAttribute("Item")]
[ToolboxItemAttribute("False")]
public class System.Management.ManagementBaseObject : Component {
    public PropertyDataCollection Properties { get; }
    public PropertyDataCollection SystemProperties { get; }
    public QualifierDataCollection Qualifiers { get; }
    public ManagementPath ClassPath { get; }
    public object Item { get; public set; }
    protected ManagementBaseObject(SerializationInfo info, StreamingContext context);
    private static ManagementBaseObject();
    public void Dispose();
    public static IntPtr op_Explicit(ManagementBaseObject managementObject);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual object Clone();
    public virtual PropertyDataCollection get_Properties();
    public virtual PropertyDataCollection get_SystemProperties();
    public virtual QualifierDataCollection get_Qualifiers();
    public virtual ManagementPath get_ClassPath();
    public object get_Item(string propertyName);
    public void set_Item(string propertyName, object value);
    public object GetPropertyValue(string propertyName);
    public object GetQualifierValue(string qualifierName);
    public void SetQualifierValue(string qualifierName, object qualifierValue);
    public object GetPropertyQualifierValue(string propertyName, string qualifierName);
    public void SetPropertyQualifierValue(string propertyName, string qualifierName, object qualifierValue);
    public string GetText(TextFormat format);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool CompareTo(ManagementBaseObject otherObject, ComparisonSettings settings);
    public void SetPropertyValue(string propertyName, object propertyValue);
}
public class System.Management.ManagementClass : ManagementObject {
    public ManagementPath Path { get; public set; }
    public StringCollection Derivation { get; }
    public MethodDataCollection Methods { get; }
    public ManagementClass(ManagementPath path);
    public ManagementClass(string path);
    public ManagementClass(ManagementPath path, ObjectGetOptions options);
    public ManagementClass(string path, ObjectGetOptions options);
    public ManagementClass(ManagementScope scope, ManagementPath path, ObjectGetOptions options);
    public ManagementClass(string scope, string path, ObjectGetOptions options);
    protected ManagementClass(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual ManagementPath get_Path();
    public virtual void set_Path(ManagementPath value);
    public StringCollection get_Derivation();
    public MethodDataCollection get_Methods();
    public ManagementObjectCollection GetInstances();
    public ManagementObjectCollection GetInstances(EnumerationOptions options);
    public void GetInstances(ManagementOperationObserver watcher);
    public void GetInstances(ManagementOperationObserver watcher, EnumerationOptions options);
    public ManagementObjectCollection GetSubclasses();
    public ManagementObjectCollection GetSubclasses(EnumerationOptions options);
    public void GetSubclasses(ManagementOperationObserver watcher);
    public void GetSubclasses(ManagementOperationObserver watcher, EnumerationOptions options);
    public ManagementClass Derive(string newClassName);
    public ManagementObject CreateInstance();
    public virtual object Clone();
    public ManagementObjectCollection GetRelatedClasses();
    public ManagementObjectCollection GetRelatedClasses(string relatedClass);
    public ManagementObjectCollection GetRelatedClasses(string relatedClass, string relationshipClass, string relationshipQualifier, string relatedQualifier, string relatedRole, string thisRole, EnumerationOptions options);
    public void GetRelatedClasses(ManagementOperationObserver watcher);
    public void GetRelatedClasses(ManagementOperationObserver watcher, string relatedClass);
    public void GetRelatedClasses(ManagementOperationObserver watcher, string relatedClass, string relationshipClass, string relationshipQualifier, string relatedQualifier, string relatedRole, string thisRole, EnumerationOptions options);
    public ManagementObjectCollection GetRelationshipClasses();
    public ManagementObjectCollection GetRelationshipClasses(string relationshipClass);
    public ManagementObjectCollection GetRelationshipClasses(string relationshipClass, string relationshipQualifier, string thisRole, EnumerationOptions options);
    public void GetRelationshipClasses(ManagementOperationObserver watcher);
    public void GetRelationshipClasses(ManagementOperationObserver watcher, string relationshipClass);
    public void GetRelationshipClasses(ManagementOperationObserver watcher, string relationshipClass, string relationshipQualifier, string thisRole, EnumerationOptions options);
    public CodeTypeDeclaration GetStronglyTypedClassCode(bool includeSystemClassInClassDef, bool systemPropertyClass);
    public bool GetStronglyTypedClassCode(CodeLanguage lang, string filePath, string classNamespace);
}
public class System.Management.ManagementDateTimeConverter : object {
    public static DateTime ToDateTime(string dmtfDate);
    public static string ToDmtfDateTime(DateTime date);
    public static TimeSpan ToTimeSpan(string dmtfTimespan);
    public static string ToDmtfTimeInterval(TimeSpan timespan);
}
public abstract class System.Management.ManagementEventArgs : EventArgs {
    public object Context { get; }
    public object get_Context();
}
[ToolboxItemAttribute("False")]
public class System.Management.ManagementEventWatcher : Component {
    public ManagementScope Scope { get; public set; }
    public EventQuery Query { get; public set; }
    public EventWatcherOptions Options { get; public set; }
    public ManagementEventWatcher(EventQuery query);
    public ManagementEventWatcher(string query);
    public ManagementEventWatcher(ManagementScope scope, EventQuery query);
    public ManagementEventWatcher(string scope, string query);
    public ManagementEventWatcher(string scope, string query, EventWatcherOptions options);
    public ManagementEventWatcher(ManagementScope scope, EventQuery query, EventWatcherOptions options);
    protected virtual void Finalize();
    public void add_EventArrived(EventArrivedEventHandler value);
    public void remove_EventArrived(EventArrivedEventHandler value);
    public void add_Stopped(StoppedEventHandler value);
    public void remove_Stopped(StoppedEventHandler value);
    public ManagementScope get_Scope();
    public void set_Scope(ManagementScope value);
    public EventQuery get_Query();
    public void set_Query(EventQuery value);
    public EventWatcherOptions get_Options();
    public void set_Options(EventWatcherOptions value);
    public ManagementBaseObject WaitForNextEvent();
    public void Start();
    public void Stop();
}
public class System.Management.ManagementException : SystemException {
    public ManagementBaseObject ErrorInformation { get; }
    public ManagementStatus ErrorCode { get; }
    protected ManagementException(SerializationInfo info, StreamingContext context);
    public ManagementException(string message);
    public ManagementException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public ManagementBaseObject get_ErrorInformation();
    public ManagementStatus get_ErrorCode();
}
[DefaultMemberAttribute("Item")]
public class System.Management.ManagementNamedValueCollection : NameObjectCollectionBase {
    public object Item { get; }
    protected ManagementNamedValueCollection(SerializationInfo info, StreamingContext context);
    public void Add(string name, object value);
    public void Remove(string name);
    public void RemoveAll();
    public ManagementNamedValueCollection Clone();
    public object get_Item(string name);
}
public class System.Management.ManagementObject : ManagementBaseObject {
    public ManagementScope Scope { get; public set; }
    public ManagementPath Path { get; public set; }
    public ObjectGetOptions Options { get; public set; }
    public ManagementPath ClassPath { get; }
    public ManagementObject(ManagementPath path);
    public ManagementObject(string path);
    public ManagementObject(ManagementPath path, ObjectGetOptions options);
    public ManagementObject(string path, ObjectGetOptions options);
    public ManagementObject(ManagementScope scope, ManagementPath path, ObjectGetOptions options);
    public ManagementObject(string scopeString, string pathString, ObjectGetOptions options);
    protected ManagementObject(SerializationInfo info, StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public void Dispose();
    public ManagementScope get_Scope();
    public void set_Scope(ManagementScope value);
    public virtual ManagementPath get_Path();
    public virtual void set_Path(ManagementPath value);
    public ObjectGetOptions get_Options();
    public void set_Options(ObjectGetOptions value);
    public virtual ManagementPath get_ClassPath();
    public void Get();
    public void Get(ManagementOperationObserver watcher);
    public ManagementObjectCollection GetRelated();
    public ManagementObjectCollection GetRelated(string relatedClass);
    public ManagementObjectCollection GetRelated(string relatedClass, string relationshipClass, string relationshipQualifier, string relatedQualifier, string relatedRole, string thisRole, bool classDefinitionsOnly, EnumerationOptions options);
    public void GetRelated(ManagementOperationObserver watcher);
    public void GetRelated(ManagementOperationObserver watcher, string relatedClass);
    public void GetRelated(ManagementOperationObserver watcher, string relatedClass, string relationshipClass, string relationshipQualifier, string relatedQualifier, string relatedRole, string thisRole, bool classDefinitionsOnly, EnumerationOptions options);
    public ManagementObjectCollection GetRelationships();
    public ManagementObjectCollection GetRelationships(string relationshipClass);
    public ManagementObjectCollection GetRelationships(string relationshipClass, string relationshipQualifier, string thisRole, bool classDefinitionsOnly, EnumerationOptions options);
    public void GetRelationships(ManagementOperationObserver watcher);
    public void GetRelationships(ManagementOperationObserver watcher, string relationshipClass);
    public void GetRelationships(ManagementOperationObserver watcher, string relationshipClass, string relationshipQualifier, string thisRole, bool classDefinitionsOnly, EnumerationOptions options);
    public ManagementPath Put();
    public ManagementPath Put(PutOptions options);
    public void Put(ManagementOperationObserver watcher);
    public void Put(ManagementOperationObserver watcher, PutOptions options);
    public ManagementPath CopyTo(ManagementPath path);
    public ManagementPath CopyTo(string path);
    public ManagementPath CopyTo(string path, PutOptions options);
    public ManagementPath CopyTo(ManagementPath path, PutOptions options);
    public void CopyTo(ManagementOperationObserver watcher, ManagementPath path);
    public void CopyTo(ManagementOperationObserver watcher, string path);
    public void CopyTo(ManagementOperationObserver watcher, string path, PutOptions options);
    public void CopyTo(ManagementOperationObserver watcher, ManagementPath path, PutOptions options);
    public void Delete();
    public void Delete(DeleteOptions options);
    public void Delete(ManagementOperationObserver watcher);
    public void Delete(ManagementOperationObserver watcher, DeleteOptions options);
    public object InvokeMethod(string methodName, Object[] args);
    public void InvokeMethod(ManagementOperationObserver watcher, string methodName, Object[] args);
    public ManagementBaseObject InvokeMethod(string methodName, ManagementBaseObject inParameters, InvokeMethodOptions options);
    public void InvokeMethod(ManagementOperationObserver watcher, string methodName, ManagementBaseObject inParameters, InvokeMethodOptions options);
    public ManagementBaseObject GetMethodParameters(string methodName);
    public virtual object Clone();
    public virtual string ToString();
}
public class System.Management.ManagementObjectCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private static ManagementObjectCollection();
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(ManagementBaseObject[] objectCollection, int index);
    public ManagementObjectEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ToolboxItemAttribute("False")]
public class System.Management.ManagementObjectSearcher : Component {
    public ManagementScope Scope { get; public set; }
    public ObjectQuery Query { get; public set; }
    public EnumerationOptions Options { get; public set; }
    public ManagementObjectSearcher(string queryString);
    public ManagementObjectSearcher(ObjectQuery query);
    public ManagementObjectSearcher(string scope, string queryString);
    public ManagementObjectSearcher(ManagementScope scope, ObjectQuery query);
    public ManagementObjectSearcher(string scope, string queryString, EnumerationOptions options);
    public ManagementObjectSearcher(ManagementScope scope, ObjectQuery query, EnumerationOptions options);
    public ManagementScope get_Scope();
    public void set_Scope(ManagementScope value);
    public ObjectQuery get_Query();
    public void set_Query(ObjectQuery value);
    public EnumerationOptions get_Options();
    public void set_Options(EnumerationOptions value);
    public ManagementObjectCollection Get();
    public void Get(ManagementOperationObserver watcher);
}
public class System.Management.ManagementOperationObserver : object {
    public void add_ObjectReady(ObjectReadyEventHandler value);
    public void remove_ObjectReady(ObjectReadyEventHandler value);
    public void add_Completed(CompletedEventHandler value);
    public void remove_Completed(CompletedEventHandler value);
    public void add_Progress(ProgressEventHandler value);
    public void remove_Progress(ProgressEventHandler value);
    public void add_ObjectPut(ObjectPutEventHandler value);
    public void remove_ObjectPut(ObjectPutEventHandler value);
    public void Cancel();
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public abstract class System.Management.ManagementOptions : object {
    public static TimeSpan InfiniteTimeout;
    public ManagementNamedValueCollection Context { get; public set; }
    public TimeSpan Timeout { get; public set; }
    private static ManagementOptions();
    public ManagementNamedValueCollection get_Context();
    public void set_Context(ManagementNamedValueCollection value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public abstract virtual object Clone();
}
[TypeConverterAttribute("System.Management.ManagementPathConverter")]
public class System.Management.ManagementPath : object {
    public static ManagementPath DefaultPath { get; public set; }
    [RefreshPropertiesAttribute("1")]
public string Path { get; public set; }
    [RefreshPropertiesAttribute("1")]
public string RelativePath { get; public set; }
    [RefreshPropertiesAttribute("1")]
public string Server { get; public set; }
    [RefreshPropertiesAttribute("1")]
public string NamespacePath { get; public set; }
    [RefreshPropertiesAttribute("1")]
public string ClassName { get; public set; }
    public bool IsClass { get; }
    public bool IsInstance { get; }
    public bool IsSingleton { get; }
    public ManagementPath(string path);
    private static ManagementPath();
    public virtual string ToString();
    public ManagementPath Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public static ManagementPath get_DefaultPath();
    public static void set_DefaultPath(ManagementPath value);
    public void SetAsClass();
    public void SetAsSingleton();
    public string get_Path();
    public void set_Path(string value);
    public string get_RelativePath();
    public void set_RelativePath(string value);
    public string get_Server();
    public void set_Server(string value);
    public string get_NamespacePath();
    public void set_NamespacePath(string value);
    public string get_ClassName();
    public void set_ClassName(string value);
    public bool get_IsClass();
    public bool get_IsInstance();
    public bool get_IsSingleton();
}
internal class System.Management.ManagementPathConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("System.Management.ManagementQueryConverter")]
public abstract class System.Management.ManagementQuery : object {
    public string QueryString { get; public set; }
    public string QueryLanguage { get; public set; }
    private static ManagementQuery();
    protected internal virtual void ParseQuery(string query);
    public virtual string get_QueryString();
    public virtual void set_QueryString(string value);
    public virtual string get_QueryLanguage();
    public virtual void set_QueryLanguage(string value);
    public abstract virtual object Clone();
}
internal class System.Management.ManagementQueryConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeConverterAttribute("System.Management.ManagementScopeConverter")]
public class System.Management.ManagementScope : object {
    public bool IsConnected { get; }
    public ConnectionOptions Options { get; public set; }
    public ManagementPath Path { get; public set; }
    public ManagementScope(ManagementPath path);
    public ManagementScope(string path);
    public ManagementScope(string path, ConnectionOptions options);
    public ManagementScope(ManagementPath path, ConnectionOptions options);
    public bool get_IsConnected();
    public ConnectionOptions get_Options();
    public void set_Options(ConnectionOptions value);
    public ManagementPath get_Path();
    public void set_Path(ManagementPath value);
    public ManagementScope Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public void Connect();
}
internal class System.Management.ManagementScopeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum System.Management.ManagementStatus : Enum {
    public int value__;
    public static ManagementStatus NoError;
    public static ManagementStatus False;
    public static ManagementStatus ResetToDefault;
    public static ManagementStatus Different;
    public static ManagementStatus Timedout;
    public static ManagementStatus NoMoreData;
    public static ManagementStatus OperationCanceled;
    public static ManagementStatus Pending;
    public static ManagementStatus DuplicateObjects;
    public static ManagementStatus PartialResults;
    public static ManagementStatus Failed;
    public static ManagementStatus NotFound;
    public static ManagementStatus AccessDenied;
    public static ManagementStatus ProviderFailure;
    public static ManagementStatus TypeMismatch;
    public static ManagementStatus OutOfMemory;
    public static ManagementStatus InvalidContext;
    public static ManagementStatus InvalidParameter;
    public static ManagementStatus NotAvailable;
    public static ManagementStatus CriticalError;
    public static ManagementStatus InvalidStream;
    public static ManagementStatus NotSupported;
    public static ManagementStatus InvalidSuperclass;
    public static ManagementStatus InvalidNamespace;
    public static ManagementStatus InvalidObject;
    public static ManagementStatus InvalidClass;
    public static ManagementStatus ProviderNotFound;
    public static ManagementStatus InvalidProviderRegistration;
    public static ManagementStatus ProviderLoadFailure;
    public static ManagementStatus InitializationFailure;
    public static ManagementStatus TransportFailure;
    public static ManagementStatus InvalidOperation;
    public static ManagementStatus InvalidQuery;
    public static ManagementStatus InvalidQueryType;
    public static ManagementStatus AlreadyExists;
    public static ManagementStatus OverrideNotAllowed;
    public static ManagementStatus PropagatedQualifier;
    public static ManagementStatus PropagatedProperty;
    public static ManagementStatus Unexpected;
    public static ManagementStatus IllegalOperation;
    public static ManagementStatus CannotBeKey;
    public static ManagementStatus IncompleteClass;
    public static ManagementStatus InvalidSyntax;
    public static ManagementStatus NondecoratedObject;
    public static ManagementStatus ReadOnly;
    public static ManagementStatus ProviderNotCapable;
    public static ManagementStatus ClassHasChildren;
    public static ManagementStatus ClassHasInstances;
    public static ManagementStatus QueryNotImplemented;
    public static ManagementStatus IllegalNull;
    public static ManagementStatus InvalidQualifierType;
    public static ManagementStatus InvalidPropertyType;
    public static ManagementStatus ValueOutOfRange;
    public static ManagementStatus CannotBeSingleton;
    public static ManagementStatus InvalidCimType;
    public static ManagementStatus InvalidMethod;
    public static ManagementStatus InvalidMethodParameters;
    public static ManagementStatus SystemProperty;
    public static ManagementStatus InvalidProperty;
    public static ManagementStatus CallCanceled;
    public static ManagementStatus ShuttingDown;
    public static ManagementStatus PropagatedMethod;
    public static ManagementStatus UnsupportedParameter;
    public static ManagementStatus MissingParameterID;
    public static ManagementStatus InvalidParameterID;
    public static ManagementStatus NonconsecutiveParameterIDs;
    public static ManagementStatus ParameterIDOnRetval;
    public static ManagementStatus InvalidObjectPath;
    public static ManagementStatus OutOfDiskSpace;
    public static ManagementStatus BufferTooSmall;
    public static ManagementStatus UnsupportedPutExtension;
    public static ManagementStatus UnknownObjectType;
    public static ManagementStatus UnknownPacketType;
    public static ManagementStatus MarshalVersionMismatch;
    public static ManagementStatus MarshalInvalidSignature;
    public static ManagementStatus InvalidQualifier;
    public static ManagementStatus InvalidDuplicateParameter;
    public static ManagementStatus TooMuchData;
    public static ManagementStatus ServerTooBusy;
    public static ManagementStatus InvalidFlavor;
    public static ManagementStatus CircularReference;
    public static ManagementStatus UnsupportedClassUpdate;
    public static ManagementStatus CannotChangeKeyInheritance;
    public static ManagementStatus CannotChangeIndexInheritance;
    public static ManagementStatus TooManyProperties;
    public static ManagementStatus UpdateTypeMismatch;
    public static ManagementStatus UpdateOverrideNotAllowed;
    public static ManagementStatus UpdatePropagatedMethod;
    public static ManagementStatus MethodNotImplemented;
    public static ManagementStatus MethodDisabled;
    public static ManagementStatus RefresherBusy;
    public static ManagementStatus UnparsableQuery;
    public static ManagementStatus NotEventClass;
    public static ManagementStatus MissingGroupWithin;
    public static ManagementStatus MissingAggregationList;
    public static ManagementStatus PropertyNotAnObject;
    public static ManagementStatus AggregatingByObject;
    public static ManagementStatus UninterpretableProviderQuery;
    public static ManagementStatus BackupRestoreWinmgmtRunning;
    public static ManagementStatus QueueOverflow;
    public static ManagementStatus PrivilegeNotHeld;
    public static ManagementStatus InvalidOperator;
    public static ManagementStatus LocalCredentials;
    public static ManagementStatus CannotBeAbstract;
    public static ManagementStatus AmendedObject;
    public static ManagementStatus ClientTooSlow;
    public static ManagementStatus RegistrationTooBroad;
    public static ManagementStatus RegistrationTooPrecise;
}
public class System.Management.MethodData : object {
    public string Name { get; }
    public ManagementBaseObject InParameters { get; }
    public ManagementBaseObject OutParameters { get; }
    public string Origin { get; }
    public QualifierDataCollection Qualifiers { get; }
    public string get_Name();
    public ManagementBaseObject get_InParameters();
    public ManagementBaseObject get_OutParameters();
    public string get_Origin();
    public QualifierDataCollection get_Qualifiers();
}
[DefaultMemberAttribute("Item")]
public class System.Management.MethodDataCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public MethodData Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(MethodData[] methodArray, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public MethodDataEnumerator GetEnumerator();
    public virtual MethodData get_Item(string methodName);
    public virtual void Remove(string methodName);
    public virtual void Add(string methodName);
    public virtual void Add(string methodName, ManagementBaseObject inParameters, ManagementBaseObject outParameters);
}
public class System.Management.ObjectGetOptions : ManagementOptions {
    public bool UseAmendedQualifiers { get; public set; }
    public ObjectGetOptions(ManagementNamedValueCollection context);
    public ObjectGetOptions(ManagementNamedValueCollection context, TimeSpan timeout, bool useAmendedQualifiers);
    public bool get_UseAmendedQualifiers();
    public void set_UseAmendedQualifiers(bool value);
    public virtual object Clone();
}
public class System.Management.ObjectPutEventArgs : ManagementEventArgs {
    public ManagementPath Path { get; }
    public ManagementPath get_Path();
}
public class System.Management.ObjectPutEventHandler : MulticastDelegate {
    public ObjectPutEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectPutEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectPutEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.ObjectQuery : ManagementQuery {
    public ObjectQuery(string query);
    public ObjectQuery(string language, string query);
    public virtual object Clone();
}
public class System.Management.ObjectReadyEventArgs : ManagementEventArgs {
    public ManagementBaseObject NewObject { get; }
    public ManagementBaseObject get_NewObject();
}
public class System.Management.ObjectReadyEventHandler : MulticastDelegate {
    public ObjectReadyEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ObjectReadyEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ObjectReadyEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.ProgressEventArgs : ManagementEventArgs {
    public int UpperBound { get; }
    public int Current { get; }
    public string Message { get; }
    public int get_UpperBound();
    public int get_Current();
    public string get_Message();
}
public class System.Management.ProgressEventHandler : MulticastDelegate {
    public ProgressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ProgressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ProgressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Management.PropertyData : object {
    public string Name { get; }
    public object Value { get; public set; }
    public CimType Type { get; }
    public bool IsLocal { get; }
    public bool IsArray { get; }
    public string Origin { get; }
    public QualifierDataCollection Qualifiers { get; }
    public string get_Name();
    public object get_Value();
    public void set_Value(object value);
    public CimType get_Type();
    public bool get_IsLocal();
    public bool get_IsArray();
    public string get_Origin();
    public QualifierDataCollection get_Qualifiers();
}
[DefaultMemberAttribute("Item")]
public class System.Management.PropertyDataCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public PropertyData Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(PropertyData[] propertyArray, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public PropertyDataEnumerator GetEnumerator();
    public virtual PropertyData get_Item(string propertyName);
    public virtual void Remove(string propertyName);
    public virtual void Add(string propertyName, object propertyValue);
    public void Add(string propertyName, object propertyValue, CimType propertyType);
    public void Add(string propertyName, CimType propertyType, bool isArray);
}
public class System.Management.PutOptions : ManagementOptions {
    public bool UseAmendedQualifiers { get; public set; }
    public PutType Type { get; public set; }
    public PutOptions(ManagementNamedValueCollection context);
    public PutOptions(ManagementNamedValueCollection context, TimeSpan timeout, bool useAmendedQualifiers, PutType putType);
    public bool get_UseAmendedQualifiers();
    public void set_UseAmendedQualifiers(bool value);
    public PutType get_Type();
    public void set_Type(PutType value);
    public virtual object Clone();
}
public enum System.Management.PutType : Enum {
    public int value__;
    public static PutType None;
    public static PutType UpdateOnly;
    public static PutType CreateOnly;
    public static PutType UpdateOrCreate;
}
public class System.Management.QualifierData : object {
    public string Name { get; }
    public object Value { get; public set; }
    public bool IsAmended { get; public set; }
    public bool IsLocal { get; }
    public bool PropagatesToInstance { get; public set; }
    public bool PropagatesToSubclass { get; public set; }
    public bool IsOverridable { get; public set; }
    public string get_Name();
    public object get_Value();
    public void set_Value(object value);
    public bool get_IsAmended();
    public void set_IsAmended(bool value);
    public bool get_IsLocal();
    public bool get_PropagatesToInstance();
    public void set_PropagatesToInstance(bool value);
    public bool get_PropagatesToSubclass();
    public void set_PropagatesToSubclass(bool value);
    public bool get_IsOverridable();
    public void set_IsOverridable(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Management.QualifierDataCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public QualifierData Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(QualifierData[] qualifierArray, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public QualifierDataEnumerator GetEnumerator();
    public virtual QualifierData get_Item(string qualifierName);
    public virtual void Remove(string qualifierName);
    public virtual void Add(string qualifierName, object qualifierValue);
    public virtual void Add(string qualifierName, object qualifierValue, bool isAmended, bool propagatesToInstance, bool propagatesToSubclass, bool isOverridable);
}
public class System.Management.RelatedObjectQuery : WqlObjectQuery {
    public bool IsSchemaQuery { get; public set; }
    public string SourceObject { get; public set; }
    public string RelatedClass { get; public set; }
    public string RelationshipClass { get; public set; }
    public string RelatedQualifier { get; public set; }
    public string RelationshipQualifier { get; public set; }
    public string RelatedRole { get; public set; }
    public string ThisRole { get; public set; }
    public bool ClassDefinitionsOnly { get; public set; }
    public RelatedObjectQuery(string queryOrSourceObject);
    public RelatedObjectQuery(string sourceObject, string relatedClass);
    public RelatedObjectQuery(string sourceObject, string relatedClass, string relationshipClass, string relatedQualifier, string relationshipQualifier, string relatedRole, string thisRole, bool classDefinitionsOnly);
    public RelatedObjectQuery(bool isSchemaQuery, string sourceObject, string relatedClass, string relationshipClass, string relatedQualifier, string relationshipQualifier, string relatedRole, string thisRole);
    private static RelatedObjectQuery();
    public bool get_IsSchemaQuery();
    public void set_IsSchemaQuery(bool value);
    public string get_SourceObject();
    public void set_SourceObject(string value);
    public string get_RelatedClass();
    public void set_RelatedClass(string value);
    public string get_RelationshipClass();
    public void set_RelationshipClass(string value);
    public string get_RelatedQualifier();
    public void set_RelatedQualifier(string value);
    public string get_RelationshipQualifier();
    public void set_RelationshipQualifier(string value);
    public string get_RelatedRole();
    public void set_RelatedRole(string value);
    public string get_ThisRole();
    public void set_ThisRole(string value);
    public bool get_ClassDefinitionsOnly();
    public void set_ClassDefinitionsOnly(bool value);
    protected internal void BuildQuery();
    protected internal virtual void ParseQuery(string query);
    public virtual object Clone();
}
public class System.Management.RelationshipQuery : WqlObjectQuery {
    public bool IsSchemaQuery { get; public set; }
    public string SourceObject { get; public set; }
    public string RelationshipClass { get; public set; }
    public string RelationshipQualifier { get; public set; }
    public string ThisRole { get; public set; }
    public bool ClassDefinitionsOnly { get; public set; }
    public RelationshipQuery(string queryOrSourceObject);
    public RelationshipQuery(string sourceObject, string relationshipClass);
    public RelationshipQuery(string sourceObject, string relationshipClass, string relationshipQualifier, string thisRole, bool classDefinitionsOnly);
    public RelationshipQuery(bool isSchemaQuery, string sourceObject, string relationshipClass, string relationshipQualifier, string thisRole);
    private static RelationshipQuery();
    public bool get_IsSchemaQuery();
    public void set_IsSchemaQuery(bool value);
    public string get_SourceObject();
    public void set_SourceObject(string value);
    public string get_RelationshipClass();
    public void set_RelationshipClass(string value);
    public string get_RelationshipQualifier();
    public void set_RelationshipQualifier(string value);
    public string get_ThisRole();
    public void set_ThisRole(string value);
    public bool get_ClassDefinitionsOnly();
    public void set_ClassDefinitionsOnly(bool value);
    protected internal void BuildQuery();
    protected internal virtual void ParseQuery(string query);
    public virtual object Clone();
}
public class System.Management.SelectQuery : WqlObjectQuery {
    public string QueryString { get; public set; }
    public bool IsSchemaQuery { get; public set; }
    public string ClassName { get; public set; }
    public string Condition { get; public set; }
    public StringCollection SelectedProperties { get; public set; }
    public SelectQuery(string queryOrClassName);
    public SelectQuery(string className, string condition);
    public SelectQuery(string className, string condition, String[] selectedProperties);
    public SelectQuery(bool isSchemaQuery, string condition);
    public virtual string get_QueryString();
    public virtual void set_QueryString(string value);
    public bool get_IsSchemaQuery();
    public void set_IsSchemaQuery(bool value);
    public string get_ClassName();
    public void set_ClassName(string value);
    public string get_Condition();
    public void set_Condition(string value);
    public StringCollection get_SelectedProperties();
    public void set_SelectedProperties(StringCollection value);
    protected internal void BuildQuery();
    protected internal virtual void ParseQuery(string query);
    public virtual object Clone();
}
public class System.Management.StoppedEventArgs : ManagementEventArgs {
    public ManagementStatus Status { get; }
    public ManagementStatus get_Status();
}
public class System.Management.StoppedEventHandler : MulticastDelegate {
    public StoppedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StoppedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StoppedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Management.TextFormat : Enum {
    public int value__;
    public static TextFormat Mof;
    public static TextFormat CimDtd20;
    public static TextFormat WmiDtd20;
}
public class System.Management.WqlEventQuery : EventQuery {
    public string QueryLanguage { get; }
    public string QueryString { get; public set; }
    public string EventClassName { get; public set; }
    public string Condition { get; public set; }
    public TimeSpan WithinInterval { get; public set; }
    public TimeSpan GroupWithinInterval { get; public set; }
    public StringCollection GroupByPropertyList { get; public set; }
    public string HavingCondition { get; public set; }
    public WqlEventQuery(string queryOrEventClassName);
    public WqlEventQuery(string eventClassName, string condition);
    public WqlEventQuery(string eventClassName, TimeSpan withinInterval);
    public WqlEventQuery(string eventClassName, TimeSpan withinInterval, string condition);
    public WqlEventQuery(string eventClassName, string condition, TimeSpan groupWithinInterval);
    public WqlEventQuery(string eventClassName, string condition, TimeSpan groupWithinInterval, String[] groupByPropertyList);
    public WqlEventQuery(string eventClassName, TimeSpan withinInterval, string condition, TimeSpan groupWithinInterval, String[] groupByPropertyList, string havingCondition);
    private static WqlEventQuery();
    public virtual string get_QueryLanguage();
    public virtual string get_QueryString();
    public virtual void set_QueryString(string value);
    public string get_EventClassName();
    public void set_EventClassName(string value);
    public string get_Condition();
    public void set_Condition(string value);
    public TimeSpan get_WithinInterval();
    public void set_WithinInterval(TimeSpan value);
    public TimeSpan get_GroupWithinInterval();
    public void set_GroupWithinInterval(TimeSpan value);
    public StringCollection get_GroupByPropertyList();
    public void set_GroupByPropertyList(StringCollection value);
    public string get_HavingCondition();
    public void set_HavingCondition(string value);
    protected internal void BuildQuery();
    protected internal virtual void ParseQuery(string query);
    public virtual object Clone();
}
public class System.Management.WqlObjectQuery : ObjectQuery {
    public string QueryLanguage { get; }
    public WqlObjectQuery(string query);
    public virtual string get_QueryLanguage();
    public virtual object Clone();
}
