internal static class System.ServiceModel.Activities.AppSettings : object {
    internal static bool DefaultAutomaticInstanceKeyDisassociation { get; }
    private static AppSettings();
    internal static bool get_DefaultAutomaticInstanceKeyDisassociation();
}
internal static class System.ServiceModel.Activities.BookmarkNameHelper : object {
    public static string CreateBookmarkName(string operationName, XName serviceContractName);
}
public class System.ServiceModel.Activities.CallbackCorrelationInitializer : CorrelationInitializer {
    internal virtual CorrelationInitializer CloneCore();
}
internal static class System.ServiceModel.Activities.ChannelCacheDefaults : object {
    internal static string DefaultIdleTimeoutString;
    internal static string DefaultMaxItemsPerCacheString;
    internal static string DefaultLeaseTimeoutString;
    internal static string DefaultFactoryLeaseTimeoutString;
    internal static string DefaultChannelLeaseTimeoutString;
    internal static bool DefaultAllowUnsafeSharing;
    internal static TimeSpan DefaultIdleTimeout;
    internal static int DefaultMaxItemsPerCache;
    internal static TimeSpan DefaultLeaseTimeout;
    internal static TimeSpan DefaultFactoryLeaseTimeout;
    internal static TimeSpan DefaultChannelLeaseTimeout;
    private static ChannelCacheDefaults();
}
public class System.ServiceModel.Activities.ChannelCacheSettings : object {
    internal static ChannelCacheSettings EmptyCacheSettings;
    public TimeSpan IdleTimeout { get; public set; }
    public TimeSpan LeaseTimeout { get; public set; }
    public int MaxItemsInCache { get; public set; }
    private static ChannelCacheSettings();
    public TimeSpan get_IdleTimeout();
    public void set_IdleTimeout(TimeSpan value);
    public TimeSpan get_LeaseTimeout();
    public void set_LeaseTimeout(TimeSpan value);
    public int get_MaxItemsInCache();
    public void set_MaxItemsInCache(int value);
}
internal static class System.ServiceModel.Activities.ClientOperationFormatterProvider : object {
    internal static IClientMessageFormatter GetFormatterFromRuntime(OperationDescription operationDescription);
}
public class System.ServiceModel.Activities.Configuration.BufferedReceiveElement : BehaviorExtensionElement {
    [IntegerValidatorAttribute]
[ConfigurationPropertyAttribute("maxPendingMessagesPerChannel")]
[TypeConverterAttribute("System.ComponentModel.Int32Converter")]
public int MaxPendingMessagesPerChannel { get; public set; }
    public Type BehaviorType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public int get_MaxPendingMessagesPerChannel();
    public void set_MaxPendingMessagesPerChannel(int value);
    protected internal virtual object CreateBehavior();
    public virtual Type get_BehaviorType();
    protected virtual ConfigurationPropertyCollection get_Properties();
}
public class System.ServiceModel.Activities.Configuration.ChannelSettingsElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("idleTimeout")]
[ServiceModelTimeSpanValidatorAttribute]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
public TimeSpan IdleTimeout { get; public set; }
    [ServiceModelTimeSpanValidatorAttribute]
[ConfigurationPropertyAttribute("leaseTimeout")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
public TimeSpan LeaseTimeout { get; public set; }
    [ConfigurationPropertyAttribute("maxItemsInCache")]
[IntegerValidatorAttribute]
public int MaxItemsInCache { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public TimeSpan get_IdleTimeout();
    public void set_IdleTimeout(TimeSpan value);
    public TimeSpan get_LeaseTimeout();
    public void set_LeaseTimeout(TimeSpan value);
    public int get_MaxItemsInCache();
    public void set_MaxItemsInCache(int value);
    protected virtual ConfigurationPropertyCollection get_Properties();
}
internal static class System.ServiceModel.Activities.Configuration.ConfigurationStrings : object {
    public static string AllowUnsafeCaching;
    public static string ChannelSettings;
    public static string FactorySettings;
    public static string IdleTimeout;
    public static string LeaseTimeout;
    public static string MaxItemsInCache;
    public static string TimeSpanZero;
    public static string SectionGroupName;
    public static string WorkflowHostingOptionsSectionName;
    public static string OverrideSiteName;
    internal static string WorkflowHostingOptionsSectionPath { get; }
    internal static string get_WorkflowHostingOptionsSectionPath();
}
public class System.ServiceModel.Activities.Configuration.EtwTrackingBehaviorElement : BehaviorExtensionElement {
    public Type BehaviorType { get; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("profileName")]
public string ProfileName { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public virtual Type get_BehaviorType();
    public string get_ProfileName();
    public void set_ProfileName(string value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual object CreateBehavior();
}
public class System.ServiceModel.Activities.Configuration.FactorySettingsElement : ConfigurationElement {
    [TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[ServiceModelTimeSpanValidatorAttribute]
[ConfigurationPropertyAttribute("idleTimeout")]
public TimeSpan IdleTimeout { get; public set; }
    [ConfigurationPropertyAttribute("leaseTimeout")]
[ServiceModelTimeSpanValidatorAttribute]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
public TimeSpan LeaseTimeout { get; public set; }
    [ConfigurationPropertyAttribute("maxItemsInCache")]
[IntegerValidatorAttribute]
public int MaxItemsInCache { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public TimeSpan get_IdleTimeout();
    public void set_IdleTimeout(TimeSpan value);
    public TimeSpan get_LeaseTimeout();
    public void set_LeaseTimeout(TimeSpan value);
    public int get_MaxItemsInCache();
    public void set_MaxItemsInCache(int value);
    protected virtual ConfigurationPropertyCollection get_Properties();
}
public class System.ServiceModel.Activities.Configuration.SendMessageChannelCacheElement : BehaviorExtensionElement {
    [ConfigurationPropertyAttribute("allowUnsafeCaching")]
public bool AllowUnsafeCaching { get; public set; }
    [ConfigurationPropertyAttribute("factorySettings")]
public FactorySettingsElement FactorySettings { get; }
    [ConfigurationPropertyAttribute("channelSettings")]
public ChannelSettingsElement ChannelSettings { get; }
    public Type BehaviorType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public bool get_AllowUnsafeCaching();
    public void set_AllowUnsafeCaching(bool value);
    public FactorySettingsElement get_FactorySettings();
    public ChannelSettingsElement get_ChannelSettings();
    public virtual Type get_BehaviorType();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual object CreateBehavior();
}
internal class System.ServiceModel.Activities.Configuration.ServiceModelActivitiesEnumValidator : ConfigurationValidatorBase {
    public ServiceModelActivitiesEnumValidator(Type enumHelperType);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
internal class System.ServiceModel.Activities.Configuration.ServiceModelActivitiesEnumValidatorAttribute : ConfigurationValidatorAttribute {
    public Type EnumHelperType { get; public set; }
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public ServiceModelActivitiesEnumValidatorAttribute(Type enumHelperType);
    public Type get_EnumHelperType();
    public void set_EnumHelperType(Type value);
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
}
public class System.ServiceModel.Activities.Configuration.ServiceModelActivitiesSectionGroup : ConfigurationSectionGroup {
    public WorkflowHostingOptionsSection WorkflowHostingOptionsSection { get; }
    public WorkflowHostingOptionsSection get_WorkflowHostingOptionsSection();
    public static ServiceModelActivitiesSectionGroup GetSectionGroup(Configuration config);
}
public class System.ServiceModel.Activities.Configuration.SqlWorkflowInstanceStoreElement : BehaviorExtensionElement {
    public Type BehaviorType { get; }
    [ConfigurationPropertyAttribute("connectionString")]
[StringValidatorAttribute]
public string ConnectionString { get; public set; }
    [ConfigurationPropertyAttribute("connectionStringName")]
[StringValidatorAttribute]
public string ConnectionStringName { get; public set; }
    [PositiveTimeSpanValidatorAttribute]
[ConfigurationPropertyAttribute("hostLockRenewalPeriod")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
public TimeSpan HostLockRenewalPeriod { get; public set; }
    [ConfigurationPropertyAttribute("runnableInstancesDetectionPeriod")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[PositiveTimeSpanValidatorAttribute]
public TimeSpan RunnableInstancesDetectionPeriod { get; public set; }
    [ConfigurationPropertyAttribute("instanceEncodingOption")]
public InstanceEncodingOption InstanceEncodingOption { get; public set; }
    [ConfigurationPropertyAttribute("instanceCompletionAction")]
public InstanceCompletionAction InstanceCompletionAction { get; public set; }
    [ConfigurationPropertyAttribute("instanceLockedExceptionAction")]
public InstanceLockedExceptionAction InstanceLockedExceptionAction { get; public set; }
    [ConfigurationPropertyAttribute("maxConnectionRetries")]
[IntegerValidatorAttribute]
public int MaxConnectionRetries { get; public set; }
    public virtual Type get_BehaviorType();
    protected internal virtual object CreateBehavior();
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public string get_ConnectionStringName();
    public void set_ConnectionStringName(string value);
    public TimeSpan get_HostLockRenewalPeriod();
    public void set_HostLockRenewalPeriod(TimeSpan value);
    public TimeSpan get_RunnableInstancesDetectionPeriod();
    public void set_RunnableInstancesDetectionPeriod(TimeSpan value);
    public InstanceEncodingOption get_InstanceEncodingOption();
    public void set_InstanceEncodingOption(InstanceEncodingOption value);
    public InstanceCompletionAction get_InstanceCompletionAction();
    public void set_InstanceCompletionAction(InstanceCompletionAction value);
    public InstanceLockedExceptionAction get_InstanceLockedExceptionAction();
    public void set_InstanceLockedExceptionAction(InstanceLockedExceptionAction value);
    public int get_MaxConnectionRetries();
    public void set_MaxConnectionRetries(int value);
}
public class System.ServiceModel.Activities.Configuration.WorkflowControlEndpointCollectionElement : StandardEndpointCollectionElement`2<WorkflowControlEndpoint, WorkflowControlEndpointElement> {
}
public class System.ServiceModel.Activities.Configuration.WorkflowControlEndpointElement : StandardEndpointElement {
    protected internal Type EndpointType { get; }
    [ConfigurationPropertyAttribute("address")]
public Uri Address { get; public set; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("binding")]
public string Binding { get; public set; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("bindingConfiguration")]
public string BindingConfiguration { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    protected internal virtual Type get_EndpointType();
    public Uri get_Address();
    public void set_Address(Uri value);
    public string get_Binding();
    public void set_Binding(string value);
    public string get_BindingConfiguration();
    public void set_BindingConfiguration(string value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual ServiceEndpoint CreateServiceEndpoint(ContractDescription contractDescription);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ChannelEndpointElement channelEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnInitializeAndValidate(ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnInitializeAndValidate(ChannelEndpointElement channelEndpointElement);
}
public class System.ServiceModel.Activities.Configuration.WorkflowHostingOptionsSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("overrideSiteName")]
public bool OverrideSiteName { get; public set; }
    public bool get_OverrideSiteName();
    public void set_OverrideSiteName(bool value);
    internal static WorkflowHostingOptionsSection GetSection();
}
public class System.ServiceModel.Activities.Configuration.WorkflowIdleElement : BehaviorExtensionElement {
    [ConfigurationPropertyAttribute("timeToPersist")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[ServiceModelTimeSpanValidatorAttribute]
public TimeSpan TimeToPersist { get; public set; }
    [TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[ConfigurationPropertyAttribute("timeToUnload")]
[ServiceModelTimeSpanValidatorAttribute]
public TimeSpan TimeToUnload { get; public set; }
    public Type BehaviorType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public TimeSpan get_TimeToPersist();
    public void set_TimeToPersist(TimeSpan value);
    public TimeSpan get_TimeToUnload();
    public void set_TimeToUnload(TimeSpan value);
    protected internal virtual object CreateBehavior();
    public virtual Type get_BehaviorType();
    protected virtual ConfigurationPropertyCollection get_Properties();
}
public class System.ServiceModel.Activities.Configuration.WorkflowInstanceManagementElement : BehaviorExtensionElement {
    public Type BehaviorType { get; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("authorizedWindowsGroup")]
public string AuthorizedWindowsGroup { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public virtual Type get_BehaviorType();
    public string get_AuthorizedWindowsGroup();
    public void set_AuthorizedWindowsGroup(string value);
    protected internal virtual object CreateBehavior();
    protected virtual ConfigurationPropertyCollection get_Properties();
}
public class System.ServiceModel.Activities.Configuration.WorkflowUnhandledExceptionElement : BehaviorExtensionElement {
    [ConfigurationPropertyAttribute("action")]
[ServiceModelActivitiesEnumValidatorAttribute("System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionActionHelper")]
public WorkflowUnhandledExceptionAction Action { get; public set; }
    public Type BehaviorType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public WorkflowUnhandledExceptionAction get_Action();
    public void set_Action(WorkflowUnhandledExceptionAction value);
    protected internal virtual object CreateBehavior();
    public virtual Type get_BehaviorType();
    protected virtual ConfigurationPropertyCollection get_Properties();
}
internal static class System.ServiceModel.Activities.Constants : object {
    public static string CorrelatesWith;
    public static string EndpointAddress;
    public static string Message;
    public static string Parameter;
    public static string RequestMessage;
    public static string Result;
    public static string TransactionHandle;
    public static string NoPersistHandle;
    public static Type MessageType;
    public static Type CorrelationHandleType;
    public static Type UriType;
    public static Type NoPersistHandleType;
    public static Object[] EmptyArray;
    public static String[] EmptyStringArray;
    public static Type[] EmptyTypeArray;
    private static Constants();
}
public class System.ServiceModel.Activities.ContextCorrelationInitializer : CorrelationInitializer {
    internal virtual CorrelationInitializer CloneCore();
}
internal static class System.ServiceModel.Activities.ContractInferenceHelper : object {
    public static DataContractFormatAttribute DataContractFormatAttribute { get; }
    public static XmlSerializerFormatAttribute XmlSerializerFormatAttribute { get; }
    public static Type ExceptionType { get; }
    public static Type FaultExceptionType { get; }
    public static DataContractFormatAttribute get_DataContractFormatAttribute();
    public static XmlSerializerFormatAttribute get_XmlSerializerFormatAttribute();
    public static Type get_ExceptionType();
    public static Type get_FaultExceptionType();
    public static void ProvideDefaultNamespace(XName& serviceContractName);
    public static ContractDescription CreateContractFromOperation(XName serviceContractName, OperationDescription operation);
    public static ContractDescription CreateOutputChannelContractDescription(XName serviceContractName, Nullable`1<ProtectionLevel> protectionLevel);
    public static ContractDescription CreateRequestChannelContractDescription(XName serviceContractName, Nullable`1<ProtectionLevel> protectionLevel);
    public static void EnsureTransactionFlowOnContract(ServiceEndpoint& serviceEndpoint, XName serviceContractName, string operationName, string action, Nullable`1<ProtectionLevel> protectionLevel);
    public static OperationDescription CreateOneWayOperationDescription(Send send);
    public static OperationDescription CreateTwoWayOperationDescription(Send send, ReceiveReply receiveReply);
    public static OperationDescription CreateOperationDescription(Receive receive, ContractDescription contract);
    public static void AddInputMessage(OperationDescription operation, string overridingAction, Type type, SerializerOption serializerOption);
    public static void AddInputMessage(OperationDescription operation, string overridingAction, String[] argumentNames, Type[] argumentTypes);
    public static void AddOutputMessage(OperationDescription operation, string overridingAction, Type type, SerializerOption serializerOption);
    public static void AddOutputMessage(OperationDescription operation, string overridingAction, String[] argumentNames, Type[] argumentTypes);
    public static void CheckForDisposableParameters(OperationDescription operation, Type type);
    public static void CheckForDisposableParameters(OperationDescription operation, Type[] types);
    public static void CorrectOutMessageForOperation(Receive receive, OperationDescription operation);
    public static void UpdateIsOneWayFlag(Receive receive, OperationDescription operation);
    public static void AddFaultDescription(Receive activity, OperationDescription operation);
    public static void AddKnownTypesToOperation(Receive receive, OperationDescription operation);
    public static void AddReceiveToFormatterBehavior(Receive receive, OperationDescription operation);
    public static void RemoveReceiveFromFormatterBehavior(Receive receive, OperationDescription operation);
    public static CorrelationQuery CreateServerCorrelationQuery(MessageQuerySet select, Collection`1<CorrelationInitializer> correlationInitializers, OperationDescription operation, bool isResponse);
    public static Collection`1<CorrelationQuery> CreateClientCorrelationQueries(MessageQuerySet select, Collection`1<CorrelationInitializer> correlationInitializers, string overridingAction, XName serviceContractName, string operationName, bool isResponse);
}
internal static class System.ServiceModel.Activities.ContractValidationHelper : object {
    public static void ValidateReceiveWithReceive(Receive receive1, Receive receive2);
    public static void ValidateSendReplyWithSendReply(SendReply sendReply1, SendReply sendReply2);
    public static void ValidateFault(NativeActivityContext context, OperationDescription targetOperation, string overridingAction, Type faultType);
    public static void ValidateAction(NativeActivityContext context, MessageDescription targetMessage, string overridingAction, OperationDescription targetOperation, bool isResponse);
    public static void ValidateMessageContent(NativeActivityContext context, MessageDescription targetMessage, Type declaredMessageType, SerializerOption serializerOption, OperationDescription operation, bool isResponse);
    public static void ValidateParametersContent(NativeActivityContext context, MessageDescription targetMessage, IDictionary parameters, OperationDescription targetOperation, bool isResponse);
    public static bool IsReceiveParameterContent(OperationDescription operation);
    public static bool IsSendParameterContent(OperationDescription operation);
    public static string GetErrorMessageEndpointName(string endpointName);
    public static string GetErrorMessageEndpointServiceContractName(XName serviceContractName);
    public static string GetErrorMessageOperationName(string operationName);
}
[DataContractAttribute]
internal class System.ServiceModel.Activities.CorrelationCallbackContext : object {
    [DataMemberAttribute]
public EndpointAddress10 ListenAddress { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> Context { get; public set; }
    [CompilerGeneratedAttribute]
public EndpointAddress10 get_ListenAddress();
    [CompilerGeneratedAttribute]
public void set_ListenAddress(EndpointAddress10 value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(IDictionary`2<string, string> value);
}
[DataContractAttribute]
internal class System.ServiceModel.Activities.CorrelationContext : object {
    [DataMemberAttribute]
public IDictionary`2<string, string> Context { get; public set; }
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(IDictionary`2<string, string> value);
}
internal class System.ServiceModel.Activities.CorrelationExtension : object {
    public XName ScopeName { get; private set; }
    public CorrelationExtension(XName scopeName);
    [CompilerGeneratedAttribute]
public XName get_ScopeName();
    [CompilerGeneratedAttribute]
private void set_ScopeName(XName value);
    public InstanceKey GenerateKey(IDictionary`2<string, string> keyData);
}
[DataContractAttribute]
public class System.ServiceModel.Activities.CorrelationHandle : Handle {
    internal static string StaticExecutionPropertyName;
    [DataMemberAttribute]
internal NoPersistHandle SerializedNoPersistHandle { get; internal set; }
    [DataMemberAttribute]
internal BookmarkScopeHandle SerializedBookmarkScopeHandle { get; internal set; }
    [DataMemberAttribute]
internal Guid E2ETraceId { get; internal set; }
    internal InstanceKey InstanceKey { get; private set; }
    internal InstanceKey TransientInstanceKey { get; internal set; }
    [DataMemberAttribute]
internal SerializableInstanceKey SerializableInstanceKey { get; internal set; }
    internal CorrelationRequestContext RequestContext { get; private set; }
    internal CorrelationResponseContext ResponseContext { get; private set; }
    [DataMemberAttribute]
internal CorrelationCallbackContext CallbackContext { get; internal set; }
    [DataMemberAttribute]
internal CorrelationContext Context { get; internal set; }
    [DataMemberAttribute]
internal BookmarkScope Scope { get; internal set; }
    private static CorrelationHandle();
    internal NoPersistHandle get_SerializedNoPersistHandle();
    internal void set_SerializedNoPersistHandle(NoPersistHandle value);
    internal BookmarkScopeHandle get_SerializedBookmarkScopeHandle();
    internal void set_SerializedBookmarkScopeHandle(BookmarkScopeHandle value);
    [CompilerGeneratedAttribute]
internal Guid get_E2ETraceId();
    [CompilerGeneratedAttribute]
internal void set_E2ETraceId(Guid value);
    internal InstanceKey get_InstanceKey();
    private void set_InstanceKey(InstanceKey value);
    [CompilerGeneratedAttribute]
internal InstanceKey get_TransientInstanceKey();
    [CompilerGeneratedAttribute]
internal void set_TransientInstanceKey(InstanceKey value);
    internal SerializableInstanceKey get_SerializableInstanceKey();
    internal void set_SerializableInstanceKey(SerializableInstanceKey value);
    [CompilerGeneratedAttribute]
internal CorrelationRequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
private void set_RequestContext(CorrelationRequestContext value);
    [CompilerGeneratedAttribute]
internal CorrelationResponseContext get_ResponseContext();
    [CompilerGeneratedAttribute]
private void set_ResponseContext(CorrelationResponseContext value);
    internal CorrelationCallbackContext get_CallbackContext();
    internal void set_CallbackContext(CorrelationCallbackContext value);
    internal CorrelationContext get_Context();
    internal void set_Context(CorrelationContext value);
    [CompilerGeneratedAttribute]
internal BookmarkScope get_Scope();
    [CompilerGeneratedAttribute]
internal void set_Scope(BookmarkScope value);
    protected virtual void OnInitialize(HandleInitializationContext context);
    protected virtual void OnUninitialize(HandleInitializationContext context);
    internal BookmarkScope EnsureBookmarkScope(NativeActivityContext executionContext);
    internal bool TryRegisterRequestContext(NativeActivityContext executionContext, CorrelationRequestContext requestContext);
    internal bool TryRegisterResponseContext(NativeActivityContext executionContext, CorrelationResponseContext responseContext);
    internal bool TryAcquireRequestContext(NativeActivityContext executionContext, CorrelationRequestContext& requestContext);
    internal bool TryAcquireResponseContext(NativeActivityContext executionContext, CorrelationResponseContext& responseContext);
    internal void InitializeBookmarkScope(NativeActivityContext context, InstanceKey instanceKey);
    internal bool IsInitalized();
    internal static CorrelationHandle GetAmbientCorrelation(NativeActivityContext context);
    internal static CorrelationHandle GetExplicitRequestReplyCorrelation(NativeActivityContext context, Collection`1<CorrelationInitializer> correlationInitializers);
    internal static CorrelationHandle GetExplicitCallbackCorrelation(NativeActivityContext context, Collection`1<CorrelationInitializer> correlationInitializers);
    internal static CorrelationHandle GetExplicitContextCorrelation(NativeActivityContext context, Collection`1<CorrelationInitializer> correlationInitializers);
    internal static CorrelationHandle GetTypedCorrelationHandle(NativeActivityContext context, Collection`1<CorrelationInitializer> correlationInitializers, Type correlationInitializerType);
}
public abstract class System.ServiceModel.Activities.CorrelationInitializer : object {
    [DefaultValueAttribute("")]
public InArgument`1<CorrelationHandle> CorrelationHandle { get; public set; }
    internal string ArgumentName { get; internal set; }
    [CompilerGeneratedAttribute]
public InArgument`1<CorrelationHandle> get_CorrelationHandle();
    [CompilerGeneratedAttribute]
public void set_CorrelationHandle(InArgument`1<CorrelationHandle> value);
    [CompilerGeneratedAttribute]
internal string get_ArgumentName();
    [CompilerGeneratedAttribute]
internal void set_ArgumentName(string value);
    internal abstract virtual CorrelationInitializer CloneCore();
    internal CorrelationInitializer Clone();
}
[ExtensionAttribute]
internal static class System.ServiceModel.Activities.CorrelationInitializerCollectionExtensions : object {
    [ExtensionAttribute]
public static bool TryGetRequestReplyCorrelationHandle(Collection`1<CorrelationInitializer> correlationInitializers, NativeActivityContext context, CorrelationHandle& correlationHandle);
    [ExtensionAttribute]
public static bool TryGetContextCorrelationHandle(Collection`1<CorrelationInitializer> correlationInitializers, NativeActivityContext context, CorrelationHandle& correlationHandle);
    [ExtensionAttribute]
public static bool TryGetCallbackCorrelationHandle(Collection`1<CorrelationInitializer> correlationInitializers, NativeActivityContext context, CorrelationHandle& correlationHandle);
}
internal class System.ServiceModel.Activities.CorrelationRequestContext : object {
    public OperationContext OperationContext { get; public set; }
    public Message Reply { get; public set; }
    public Exception Exception { get; public set; }
    public CorrelationKeyCalculator CorrelationKeyCalculator { get; public set; }
    [CompilerGeneratedAttribute]
public OperationContext get_OperationContext();
    [CompilerGeneratedAttribute]
public void set_OperationContext(OperationContext value);
    [CompilerGeneratedAttribute]
public Message get_Reply();
    [CompilerGeneratedAttribute]
public void set_Reply(Message value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public CorrelationKeyCalculator get_CorrelationKeyCalculator();
    [CompilerGeneratedAttribute]
public void set_CorrelationKeyCalculator(CorrelationKeyCalculator value);
    public void EnsureAsyncWaitHandle();
    public bool TryGetReply();
    public bool WaitForReplyAsync(Action`2<object, TimeoutException> onReceiveReply, object state);
    public void ReceiveReply(OperationContext operationContext, Message reply);
    public void ReceiveAsyncReply(OperationContext operationContext, Message reply, Exception replyException);
    public void Cancel();
}
internal class System.ServiceModel.Activities.CorrelationResponseContext : object {
    internal WorkflowOperationContext WorkflowOperationContext { get; internal set; }
    internal Exception Exception { get; internal set; }
    internal MessageVersion MessageVersion { get; internal set; }
    [CompilerGeneratedAttribute]
internal WorkflowOperationContext get_WorkflowOperationContext();
    [CompilerGeneratedAttribute]
internal void set_WorkflowOperationContext(WorkflowOperationContext value);
    [CompilerGeneratedAttribute]
internal Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
internal MessageVersion get_MessageVersion();
    [CompilerGeneratedAttribute]
internal void set_MessageVersion(MessageVersion value);
}
public class System.ServiceModel.Activities.CorrelationScope : NativeActivity {
    public InArgument`1<CorrelationHandle> CorrelatesWith { get; public set; }
    public Activity Body { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<CorrelationHandle> get_CorrelatesWith();
    [CompilerGeneratedAttribute]
public void set_CorrelatesWith(InArgument`1<CorrelationHandle> value);
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeCorrelatesWith();
}
public class System.ServiceModel.Activities.Description.BufferedReceiveServiceBehavior : object {
    internal static int DefaultMaxPendingMessagesPerChannel;
    public int MaxPendingMessagesPerChannel { get; public set; }
    public int get_MaxPendingMessagesPerChannel();
    public void set_MaxPendingMessagesPerChannel(int value);
    public sealed virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    public sealed virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    public sealed virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    internal static bool IsWorkflowEndpoint(ServiceEndpoint serviceEndpoint);
}
internal class System.ServiceModel.Activities.Description.ControlOperationBehavior : object {
    public ControlOperationBehavior(bool isWrappedMode);
    public sealed virtual void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation);
    public sealed virtual void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation);
    public sealed virtual void Validate(OperationDescription operationDescription);
}
internal class System.ServiceModel.Activities.Description.CorrelationQueryBehavior : object {
    public ICollection`1<CorrelationQuery> CorrelationQueries { get; }
    public ICollection`1<string> ReceiveNames { get; }
    public ICollection`1<string> SendNames { get; }
    internal XName ScopeName { get; internal set; }
    public XName ServiceContractName { get; public set; }
    public CorrelationQueryBehavior(ICollection`1<CorrelationQuery> queries);
    private static CorrelationQueryBehavior();
    public ICollection`1<CorrelationQuery> get_CorrelationQueries();
    public ICollection`1<string> get_ReceiveNames();
    public ICollection`1<string> get_SendNames();
    [CompilerGeneratedAttribute]
internal void set_ScopeName(XName value);
    [CompilerGeneratedAttribute]
internal XName get_ScopeName();
    [CompilerGeneratedAttribute]
public XName get_ServiceContractName();
    [CompilerGeneratedAttribute]
public void set_ServiceContractName(XName value);
    internal bool IsCookieBasedQueryPresent();
    public sealed virtual void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public sealed virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    public static bool BindingHasDefaultQueries(Binding binding);
    public sealed virtual void Validate(ServiceEndpoint endpoint);
    private sealed virtual override void System.ServiceModel.Dispatcher.IChannelInitializer.Initialize(IClientChannel channel);
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.IContextChannel>.Attach(IContextChannel owner);
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.IContextChannel>.Detach(IContextChannel owner);
    public CorrelationKeyCalculator GetKeyCalculator();
}
internal enum System.ServiceModel.Activities.Description.DurableConsistencyScope : Enum {
    public int value__;
    public static DurableConsistencyScope Global;
    public static DurableConsistencyScope InstanceGlobalKeyLocal;
    public static DurableConsistencyScope Local;
}
public class System.ServiceModel.Activities.Description.EtwTrackingBehavior : object {
    public string ProfileName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProfileName();
    [CompilerGeneratedAttribute]
public void set_ProfileName(string value);
    public virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    public virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    public virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
}
internal class System.ServiceModel.Activities.Description.SendMessageChannelCacheBehavior : object {
    public bool AllowUnsafeCaching { get; public set; }
    public ChannelCacheSettings FactorySettings { get; public set; }
    public ChannelCacheSettings ChannelSettings { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowUnsafeCaching();
    [CompilerGeneratedAttribute]
public void set_AllowUnsafeCaching(bool value);
    [CompilerGeneratedAttribute]
public ChannelCacheSettings get_FactorySettings();
    [CompilerGeneratedAttribute]
public void set_FactorySettings(ChannelCacheSettings value);
    [CompilerGeneratedAttribute]
public ChannelCacheSettings get_ChannelSettings();
    [CompilerGeneratedAttribute]
public void set_ChannelSettings(ChannelCacheSettings value);
    public sealed virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    public sealed virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
}
internal class System.ServiceModel.Activities.Description.ServiceDescriptionData : object {
    public bool IsInsideTransactedReceiveScope { get; public set; }
    public bool IsFirstReceiveOfTransactedReceiveScopeTree { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsInsideTransactedReceiveScope();
    [CompilerGeneratedAttribute]
public void set_IsInsideTransactedReceiveScope(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsFirstReceiveOfTransactedReceiveScopeTree();
    [CompilerGeneratedAttribute]
public void set_IsFirstReceiveOfTransactedReceiveScopeTree(bool value);
}
public class System.ServiceModel.Activities.Description.SqlWorkflowInstanceStoreBehavior : object {
    internal static int defaultMaximumRetries;
    internal static string defaultHostRenewalString;
    internal static string defaultRunnableInstancesDetectionPeriodString;
    internal static InstanceEncodingOption defaultEncodingOption;
    internal static InstanceCompletionAction defaultInstanceCompletionAction;
    internal static InstanceLockedExceptionAction defaultInstanceLockedExceptionAction;
    public InstanceEncodingOption InstanceEncodingOption { get; public set; }
    public InstanceCompletionAction InstanceCompletionAction { get; public set; }
    public InstanceLockedExceptionAction InstanceLockedExceptionAction { get; public set; }
    public string ConnectionString { get; public set; }
    public TimeSpan HostLockRenewalPeriod { get; public set; }
    public TimeSpan RunnableInstancesDetectionPeriod { get; public set; }
    public int MaxConnectionRetries { get; public set; }
    public SqlWorkflowInstanceStoreBehavior(string connectionString);
    private static SqlWorkflowInstanceStoreBehavior();
    public InstanceEncodingOption get_InstanceEncodingOption();
    public void set_InstanceEncodingOption(InstanceEncodingOption value);
    public InstanceCompletionAction get_InstanceCompletionAction();
    public void set_InstanceCompletionAction(InstanceCompletionAction value);
    public InstanceLockedExceptionAction get_InstanceLockedExceptionAction();
    public void set_InstanceLockedExceptionAction(InstanceLockedExceptionAction value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public TimeSpan get_HostLockRenewalPeriod();
    public void set_HostLockRenewalPeriod(TimeSpan value);
    public TimeSpan get_RunnableInstancesDetectionPeriod();
    public void set_RunnableInstancesDetectionPeriod(TimeSpan value);
    public int get_MaxConnectionRetries();
    public void set_MaxConnectionRetries(int value);
    public void Promote(string name, IEnumerable`1<XName> promoteAsSqlVariant, IEnumerable`1<XName> promoteAsBinary);
    public sealed virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    public sealed virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
}
[AttributeUsageAttribute("1024")]
public class System.ServiceModel.Activities.Description.WorkflowContractBehaviorAttribute : Attribute {
    public sealed virtual void AddBindingParameters(ContractDescription contractDescription, ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public sealed virtual void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime);
    public sealed virtual void Validate(ContractDescription contractDescription, ServiceEndpoint endpoint);
}
internal class System.ServiceModel.Activities.Description.WorkflowFormatterBehavior : object {
    public Collection`1<Receive> Receives { get; }
    public Collection`1<Receive> get_Receives();
    public sealed virtual void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation);
    public sealed virtual void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation);
    public sealed virtual void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters);
    public sealed virtual void Validate(OperationDescription operationDescription);
}
public class System.ServiceModel.Activities.Description.WorkflowIdleBehavior : object {
    internal static string defaultTimeToPersistString;
    internal static string defaultTimeToUnloadString;
    internal static TimeSpan defaultTimeToPersist;
    internal static TimeSpan defaultTimeToUnload;
    public TimeSpan TimeToPersist { get; public set; }
    public TimeSpan TimeToUnload { get; public set; }
    private static WorkflowIdleBehavior();
    public TimeSpan get_TimeToPersist();
    public void set_TimeToPersist(TimeSpan value);
    public TimeSpan get_TimeToUnload();
    public void set_TimeToUnload(TimeSpan value);
    public sealed virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    public sealed virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
}
public class System.ServiceModel.Activities.Description.WorkflowInstanceManagementBehavior : object {
    public static string ControlEndpointAddress;
    public string WindowsGroup { get; public set; }
    public static Binding HttpControlEndpointBinding { get; }
    public static Binding NamedPipeControlEndpointBinding { get; }
    public string get_WindowsGroup();
    public void set_WindowsGroup(string value);
    public static Binding get_HttpControlEndpointBinding();
    public static Binding get_NamedPipeControlEndpointBinding();
    public sealed virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    public sealed virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    internal static string GetDefaultBuiltinAdministratorsGroup();
}
internal class System.ServiceModel.Activities.Description.WorkflowOperationBehavior : object {
    internal bool CanCreateInstance { get; internal set; }
    public WorkflowOperationBehavior(Bookmark bookmark, bool canCreateInstance);
    protected WorkflowOperationBehavior(bool canCreateInstance);
    [CompilerGeneratedAttribute]
internal bool get_CanCreateInstance();
    [CompilerGeneratedAttribute]
internal void set_CanCreateInstance(bool value);
    public sealed virtual void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation);
    public sealed virtual void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation);
    public sealed virtual void Validate(OperationDescription operationDescription);
    protected internal virtual Bookmark OnResolveBookmark(WorkflowOperationContext context, BookmarkScope& bookmarkScope, Object& value);
}
internal class System.ServiceModel.Activities.Description.WorkflowServiceBehavior : object {
    public WorkflowDefinitionProvider WorkflowDefinitionProvider { get; private set; }
    public WorkflowServiceBehavior(WorkflowDefinitionProvider workflowDefinitionProvider);
    [CompilerGeneratedAttribute]
public WorkflowDefinitionProvider get_WorkflowDefinitionProvider();
    [CompilerGeneratedAttribute]
private void set_WorkflowDefinitionProvider(WorkflowDefinitionProvider value);
    public sealed virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    public sealed virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    internal static bool IsWorkflowEndpoint(EndpointDispatcher endpointDispatcher);
}
public enum System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionAction : Enum {
    public int value__;
    public static WorkflowUnhandledExceptionAction Abandon;
    public static WorkflowUnhandledExceptionAction Cancel;
    public static WorkflowUnhandledExceptionAction Terminate;
    public static WorkflowUnhandledExceptionAction AbandonAndSuspend;
}
internal static class System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionActionHelper : object {
    internal static bool IsDefined(WorkflowUnhandledExceptionAction value);
}
public class System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior : object {
    internal static WorkflowUnhandledExceptionAction defaultAction;
    public WorkflowUnhandledExceptionAction Action { get; public set; }
    public WorkflowUnhandledExceptionAction get_Action();
    public void set_Action(WorkflowUnhandledExceptionAction value);
    public sealed virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    public sealed virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
}
internal class System.ServiceModel.Activities.Diagnostics.WorkflowServiceHostPerformanceCounters : PerformanceCountersBase {
    internal string InstanceName { get; }
    internal String[] CounterNames { get; }
    internal int PerfCounterStart { get; }
    internal int PerfCounterEnd { get; }
    internal bool PerformanceCountersEnabled { get; }
    internal bool Initialized { get; }
    internal WorkflowServiceHostPerformanceCounters(WorkflowServiceHost serviceHost);
    private static WorkflowServiceHostPerformanceCounters();
    internal virtual string get_InstanceName();
    internal virtual String[] get_CounterNames();
    internal virtual int get_PerfCounterStart();
    internal virtual int get_PerfCounterEnd();
    internal bool get_PerformanceCountersEnabled();
    internal virtual bool get_Initialized();
    internal static void EnsureCounterSet();
    internal static string CreateFriendlyInstanceName(ServiceHostBase serviceHost);
    internal void InitializePerformanceCounters();
    protected virtual void Dispose(bool disposing);
    internal void WorkflowCreated();
    internal void WorkflowExecuting(bool increment);
    internal void WorkflowCompleted();
    internal void WorkflowAborted();
    internal void WorkflowInMemory();
    internal void WorkflowOutOfMemory();
    internal void WorkflowPersisted();
    internal void WorkflowTerminated();
    internal void WorkflowLoaded();
    internal void WorkflowUnloaded();
    internal void WorkflowSuspended();
    internal void WorkflowIdle();
    internal void WorkflowLoadDuration(long time);
    internal void WorkflowPersistDuration(long time);
}
internal class System.ServiceModel.Activities.Dispatcher.BufferedReceiveManager : object {
    public BufferedReceiveManager(int maxPendingMessagesPerChannel);
    public bool BufferReceive(OperationContext operationContext, ReceiveContext receiveContext, string bookmarkName, BufferedReceiveState state, bool retry);
    public void Retry(HashSet`1<InstanceKey> associatedInstances, ReadOnlyCollection`1<BookmarkInfo> availableBookmarks);
    public void AbandonBufferedReceives(HashSet`1<InstanceKey> associatedInstances);
    internal void AbandonBufferedReceives();
    internal static void AbandonReceiveContext(ReceiveContext receiveContext);
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Attach(ServiceHostBase owner);
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Detach(ServiceHostBase owner);
}
internal enum System.ServiceModel.Activities.Dispatcher.BufferedReceiveState : Enum {
    public int value__;
    public static BufferedReceiveState WaitingOnInstance;
    public static BufferedReceiveState WaitingOnBookmark;
}
internal class System.ServiceModel.Activities.Dispatcher.ControlOperationInvoker : object {
    protected static Object[] emptyObjectArray;
    protected ServiceEndpoint endpoint;
    public bool IsSynchronous { get; }
    protected bool CanCreateInstance { get; protected set; }
    protected string StaticBookmarkName { get; protected set; }
    protected string OperationName { get; }
    public BufferedReceiveManager BufferedReceiveManager { get; }
    public DurableInstanceManager InstanceManager { get; }
    private bool System.ServiceModel.Dispatcher.IManualConcurrencyOperationInvoker.OwnsFormatter { get; }
    public ControlOperationInvoker(OperationDescription description, ServiceEndpoint endpoint, CorrelationKeyCalculator correlationKeyCalculator, ServiceHostBase host);
    public ControlOperationInvoker(OperationDescription description, ServiceEndpoint endpoint, CorrelationKeyCalculator correlationKeyCalculator, IOperationInvoker innerInvoker, ServiceHostBase host);
    private static ControlOperationInvoker();
    public sealed virtual bool get_IsSynchronous();
    [CompilerGeneratedAttribute]
protected bool get_CanCreateInstance();
    [CompilerGeneratedAttribute]
protected void set_CanCreateInstance(bool value);
    [CompilerGeneratedAttribute]
protected string get_StaticBookmarkName();
    [CompilerGeneratedAttribute]
protected void set_StaticBookmarkName(string value);
    protected string get_OperationName();
    public BufferedReceiveManager get_BufferedReceiveManager();
    public DurableInstanceManager get_InstanceManager();
    public virtual Object[] AllocateInputs();
    private sealed virtual override bool System.ServiceModel.Dispatcher.IManualConcurrencyOperationInvoker.get_OwnsFormatter();
    public sealed virtual object Invoke(object instance, Object[] inputs, Object[]& outputs);
    public sealed virtual object Invoke(object instance, Object[] inputs, IInvokeReceivedNotification notification, Object[]& outputs);
    public sealed virtual IAsyncResult InvokeBegin(object instance, Object[] inputs, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult InvokeBegin(object instance, Object[] inputs, IInvokeReceivedNotification notification, AsyncCallback callback, object state);
    public sealed virtual object InvokeEnd(object instance, Object[]& outputs, IAsyncResult result);
    protected virtual IAsyncResult OnBeginServiceOperation(WorkflowServiceInstance durableInstance, OperationContext operationContext, Object[] inputs, Transaction currentTransaction, IInvokeReceivedNotification notification, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual object OnEndServiceOperation(WorkflowServiceInstance durableInstance, Object[]& outputs, IAsyncResult result);
    protected void GetInstanceKeys(OperationContext operationContext, InstanceKey& instanceKey, ICollection`1& additionalKeys);
}
internal class System.ServiceModel.Activities.Dispatcher.CorrelationKeyCalculator : object {
    public CorrelationKeyCalculator(XName scopeName);
    public void AddQuery(MessageFilter where, MessageQueryTable`1<string> select, IDictionary`2<string, MessageQueryTable`1<string>> selectAdditional, bool isContextQuery);
    public bool CalculateKeys(Message message, InstanceKey& instanceKey, ICollection`1& additionalKeys);
    public bool CalculateKeys(MessageBuffer buffer, Message messageToReadHeaders, InstanceKey& instanceKey, ICollection`1& additionalKeys);
}
internal class System.ServiceModel.Activities.Dispatcher.DurableDispatcherAddressingFault : MessageFault {
    public FaultCode Code { get; }
    public bool HasDetail { get; }
    public FaultReason Reason { get; }
    public virtual FaultCode get_Code();
    public virtual bool get_HasDetail();
    public virtual FaultReason get_Reason();
    protected virtual void OnWriteDetailContents(XmlDictionaryWriter writer);
}
internal class System.ServiceModel.Activities.Dispatcher.DurableInstanceContextProvider : object {
    public DurableInstanceContextProvider(ServiceHostBase serviceHost);
    public sealed virtual InstanceContext GetExistingInstanceContext(Message message, IContextChannel channel);
    public sealed virtual void InitializeInstanceContext(InstanceContext instanceContext, Message message, IContextChannel channel);
    public sealed virtual bool IsIdle(InstanceContext instanceContext);
    public sealed virtual void NotifyIdle(InstanceContextIdleCallback callback, InstanceContext instanceContext);
}
internal class System.ServiceModel.Activities.Dispatcher.DurableInstanceManager : object {
    internal PersistenceProviderDirectory PersistenceProviderDirectory { get; internal set; }
    public DurableInstancingOptions DurableInstancingOptions { get; private set; }
    public InstanceStore InstanceStore { get; public set; }
    internal DurableInstanceManager(WorkflowServiceHost host);
    private static DurableInstanceManager();
    [CompilerGeneratedAttribute]
internal PersistenceProviderDirectory get_PersistenceProviderDirectory();
    [CompilerGeneratedAttribute]
internal void set_PersistenceProviderDirectory(PersistenceProviderDirectory value);
    [CompilerGeneratedAttribute]
public DurableInstancingOptions get_DurableInstancingOptions();
    [CompilerGeneratedAttribute]
private void set_DurableInstancingOptions(DurableInstancingOptions value);
    public InstanceStore get_InstanceStore();
    public void set_InstanceStore(InstanceStore value);
    public void AddInstanceOwnerValues(IDictionary`2<XName, object> readWriteValues, IDictionary`2<XName, object> writeOnlyValues);
    public void AddInitialInstanceValues(IDictionary`2<XName, object> writeOnlyValues);
    internal IAsyncResult BeginGetInstance(InstanceKey instanceKey, ICollection`1<InstanceKey> additionalKeys, WorkflowGetInstanceContext parameters, TimeSpan timeout, AsyncCallback callback, object state);
    internal IAsyncResult BeginGetInstance(Guid instanceId, WorkflowGetInstanceContext parameters, WorkflowIdentityKey updatedIdentity, TimeSpan timeout, AsyncCallback callback, object state);
    internal WorkflowServiceInstance EndGetInstance(IAsyncResult result);
    public void Open(TimeSpan timeout);
    public IAsyncResult BeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndOpen(IAsyncResult result);
    public void Close(TimeSpan timeout);
    public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndClose(IAsyncResult result);
    public void Abort();
}
internal class System.ServiceModel.Activities.Dispatcher.DurableInstanceProvider : object {
    public DurableInstanceProvider(ServiceHostBase serviceHost);
    public sealed virtual object GetInstance(InstanceContext instanceContext, Message message);
    public sealed virtual object GetInstance(InstanceContext instanceContext);
    public sealed virtual void ReleaseInstance(InstanceContext instanceContext, object instance);
}
internal class System.ServiceModel.Activities.Dispatcher.OperationExecutionFault : MessageFault {
    public FaultCode Code { get; }
    public bool HasDetail { get; }
    public FaultReason Reason { get; }
    public virtual FaultCode get_Code();
    public virtual bool get_HasDetail();
    public virtual FaultReason get_Reason();
    public static OperationExecutionFault CreateTransactedLockException(Guid instanceId, string operationName);
    public static OperationExecutionFault CreateInstanceUnloadedFault(string description);
    public static OperationExecutionFault CreateInstanceNotFoundFault(string description);
    public static OperationExecutionFault CreateCompletedFault(string description);
    public static OperationExecutionFault CreateTerminatedFault(string description);
    public static OperationExecutionFault CreateSuspendedFault(Guid instanceId, string operationName);
    public static OperationExecutionFault CreateOperationNotAvailableFault(Guid instanceId, string operationName);
    public static OperationExecutionFault CreateAbortedFault(string description);
    public static OperationExecutionFault CreateUpdateFailedFault(string description);
    public static bool IsAbortedFaultException(FaultException exception);
    protected virtual void OnWriteDetailContents(XmlDictionaryWriter writer);
}
internal class System.ServiceModel.Activities.Dispatcher.OptionalMessageQuery : MessageQuery {
    public MessageQuery Query { get; public set; }
    [CompilerGeneratedAttribute]
public MessageQuery get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(MessageQuery value);
    public virtual TResult Evaluate(MessageBuffer buffer);
    public virtual TResult Evaluate(Message message);
}
internal class System.ServiceModel.Activities.Dispatcher.PersistenceContext : CommunicationObject {
    internal static Dictionary`2<int, PersistenceContextEnlistment> Enlistments;
    public Guid InstanceId { get; private set; }
    public bool IsLocked { get; private set; }
    public bool IsInitialized { get; private set; }
    public bool IsCompleted { get; private set; }
    public bool IsVisible { get; internal set; }
    public bool IsSuspended { get; public set; }
    public string SuspendedReason { get; public set; }
    internal bool Detaching { get; internal set; }
    public bool CanPersist { get; }
    public bool IsHandleValid { get; }
    internal Transaction LockingTransaction { get; }
    internal bool IsPermanentlyRemoved { get; internal set; }
    internal HashSet`1<InstanceKey> AssociatedKeys { get; private set; }
    internal ReadOnlyCollection`1<BookmarkInfo> Bookmarks { get; internal set; }
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    internal PersistenceContext(PersistenceProviderDirectory directory, Guid instanceId, InstanceKey key, IEnumerable`1<InstanceKey> associatedKeys);
    internal PersistenceContext(PersistenceProviderDirectory directory, InstanceStore store, InstanceHandle handle, Guid instanceId, IEnumerable`1<InstanceKey> associatedKeys, bool newInstance, bool locked, InstanceView view, WorkflowIdentityKey updatedIdentity);
    private static PersistenceContext();
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
private void set_InstanceId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
private void set_IsLocked(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsInitialized();
    [CompilerGeneratedAttribute]
private void set_IsInitialized(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCompleted();
    [CompilerGeneratedAttribute]
private void set_IsCompleted(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
internal void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsSuspended();
    [CompilerGeneratedAttribute]
public void set_IsSuspended(bool value);
    [CompilerGeneratedAttribute]
public string get_SuspendedReason();
    [CompilerGeneratedAttribute]
public void set_SuspendedReason(string value);
    [CompilerGeneratedAttribute]
internal bool get_Detaching();
    [CompilerGeneratedAttribute]
internal void set_Detaching(bool value);
    public bool get_CanPersist();
    public bool get_IsHandleValid();
    internal Transaction get_LockingTransaction();
    [CompilerGeneratedAttribute]
internal bool get_IsPermanentlyRemoved();
    [CompilerGeneratedAttribute]
internal void set_IsPermanentlyRemoved(bool value);
    [CompilerGeneratedAttribute]
internal HashSet`1<InstanceKey> get_AssociatedKeys();
    [CompilerGeneratedAttribute]
private void set_AssociatedKeys(HashSet`1<InstanceKey> value);
    [CompilerGeneratedAttribute]
internal ReadOnlyCollection`1<BookmarkInfo> get_Bookmarks();
    [CompilerGeneratedAttribute]
internal void set_Bookmarks(ReadOnlyCollection`1<BookmarkInfo> value);
    protected virtual TimeSpan get_DefaultCloseTimeout();
    protected virtual TimeSpan get_DefaultOpenTimeout();
    public void DisassociateKeys(ICollection`1<InstanceKey> expiredKeys);
    public IAsyncResult BeginSave(IDictionary`2<XName, InstanceValue> instance, SaveStatus saveStatus, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndSave(IAsyncResult result);
    public IAsyncResult BeginRelease(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndRelease(IAsyncResult result);
    public IAsyncResult BeginAssociateKeys(ICollection`1<InstanceKey> associatedKeys, TimeSpan timeout, AsyncCallback callback, object state);
    internal IAsyncResult BeginAssociateInfrastructureKeys(ICollection`1<InstanceKey> associatedKeys, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndAssociateKeys(IAsyncResult result);
    internal void EndAssociateInfrastructureKeys(IAsyncResult result);
    public IAsyncResult BeginUpdateSuspendMetadata(Exception reason, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndUpdateSuspendMetadata(IAsyncResult result);
    public WorkflowServiceInstance GetInstance(WorkflowGetInstanceContext parameters);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual void OnClosing();
    protected virtual void OnFaulted();
    internal static bool TryGetValue(IDictionary`2<XName, InstanceValue> data, XName key, T& value);
    internal TransactionWaitAsyncResult BeginEnlist(TimeSpan timeout, AsyncCallback callback, object state);
    internal void EndEnlist(IAsyncResult result);
    internal bool QueueForTransactionLock(Transaction requestingTransaction, TransactionWaitAsyncResult txWaitAsyncResult);
    internal void ScheduleNextTransactionWaiter();
}
internal class System.ServiceModel.Activities.Dispatcher.PersistenceContextEnlistment : object {
    internal static Action`1<object> PrepareCallback { get; }
    internal static Action`1<object> CommitCallback { get; }
    internal static Action`1<object> RollbackCallback { get; }
    internal static Action`1<object> IndoubtCallback { get; }
    internal PersistenceContextEnlistment(PersistenceContext context, Transaction transaction);
    internal void AddToEnlistment(PersistenceContext context);
    internal static Action`1<object> get_PrepareCallback();
    internal static Action`1<object> get_CommitCallback();
    internal static Action`1<object> get_RollbackCallback();
    internal static Action`1<object> get_IndoubtCallback();
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment preparingEnlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Commit(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Rollback(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.InDoubt(Enlistment enlistment);
    internal static void DoPrepare(object state);
    internal static void DoCommit(object state);
    internal static void DoRollback(object state);
    internal static void DoIndoubt(object state);
}
internal class System.ServiceModel.Activities.Dispatcher.PersistenceProviderDirectory : object {
    public IDictionary`2<XName, InstanceValue> InstanceMetadataChanges { get; private set; }
    public DurableConsistencyScope ConsistencyScope { get; private set; }
    public int MaxInstances { get; private set; }
    internal PersistenceProviderDirectory(InstanceStore store, InstanceOwner owner, IDictionary`2<XName, InstanceValue> instanceMetadataChanges, WorkflowDefinitionProvider workflowDefinitionProvider, WorkflowServiceHost serviceHost, DurableConsistencyScope consistencyScope, int maxInstances);
    internal PersistenceProviderDirectory(WorkflowDefinitionProvider workflowDefinitionProvider, WorkflowServiceHost serviceHost, int maxInstances);
    [CompilerGeneratedAttribute]
public IDictionary`2<XName, InstanceValue> get_InstanceMetadataChanges();
    [CompilerGeneratedAttribute]
private void set_InstanceMetadataChanges(IDictionary`2<XName, InstanceValue> value);
    [CompilerGeneratedAttribute]
public DurableConsistencyScope get_ConsistencyScope();
    [CompilerGeneratedAttribute]
private void set_ConsistencyScope(DurableConsistencyScope value);
    [CompilerGeneratedAttribute]
public int get_MaxInstances();
    [CompilerGeneratedAttribute]
private void set_MaxInstances(int value);
    public WorkflowServiceInstance InitializeInstance(Guid instanceId, PersistenceContext context, IDictionary`2<XName, InstanceValue> instance, WorkflowCreationContext creationContext);
    public WorkflowServiceInstance InitializeInstance(Guid instanceId, PersistenceContext context, WorkflowIdentity definitionIdentity, WorkflowIdentityKey updatedIdentity, IDictionary`2<XName, InstanceValue> instance, WorkflowCreationContext creationContext);
    public IEnumerable`1<PersistenceContext> GetContexts();
    public IAsyncResult BeginLoad(InstanceKey key, ICollection`1<InstanceKey> associatedKeys, Transaction transaction, TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginLoad(Guid instanceId, ICollection`1<InstanceKey> associatedKeys, Transaction transaction, bool loadAny, WorkflowIdentityKey updatedIdentity, TimeSpan timeout, AsyncCallback callback, object state);
    public PersistenceContext EndLoad(IAsyncResult result, Boolean& fromCache);
    public IAsyncResult BeginLoadOrCreate(InstanceKey key, Guid suggestedId, ICollection`1<InstanceKey> associatedKeys, Transaction transaction, TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginLoadOrCreate(Guid instanceId, ICollection`1<InstanceKey> associatedKeys, Transaction transaction, TimeSpan timeout, AsyncCallback callback, object state);
    public PersistenceContext EndLoadOrCreate(IAsyncResult result, Boolean& fromCache);
    public void Close();
    public void Abort();
    public Transaction GetTransactionForInstance(InstanceKey instanceKey);
    internal ReadOnlyCollection`1<BookmarkInfo> GetBookmarksForInstance(InstanceKey instanceKey);
    internal bool TryAddAssociations(PersistenceContext context, IEnumerable`1<InstanceKey> keys, HashSet`1<InstanceKey> keysToAssociate, HashSet`1<InstanceKey> keysToDisassociate);
    internal void RemoveAssociations(PersistenceContext context, IEnumerable`1<InstanceKey> keys);
    internal void RemoveInstance(PersistenceContext context);
    internal void RemoveInstance(PersistenceContext context, bool permanent);
    internal void ReleaseThrottle();
    internal IAsyncResult BeginReserveThrottle(TimeSpan timeout, AsyncCallback callback, object state);
    internal void EndReserveThrottle(Boolean& ownsThrottle, IAsyncResult result);
}
internal enum System.ServiceModel.Activities.Dispatcher.SaveStatus : Enum {
    public int value__;
    public static SaveStatus Locked;
    public static SaveStatus Unlocked;
    public static SaveStatus Completed;
}
internal class System.ServiceModel.Activities.Dispatcher.TransactionContext : object {
    public Transaction CurrentTransaction { get; }
    public TransactionContext(WorkflowServiceInstance durableInstance, Transaction currentTransaction);
    private static TransactionContext();
    public Transaction get_CurrentTransaction();
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Commit(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.InDoubt(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment preparingEnlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Rollback(Enlistment enlistment);
}
internal class System.ServiceModel.Activities.Dispatcher.TransactionWaitAsyncResult : AsyncResult {
    internal PersistenceContext PersistenceContext { get; internal set; }
    internal Transaction Transaction { get; }
    internal static Action`1<object> TimeoutCallbackAction { get; }
    internal TransactionWaitAsyncResult(Transaction transaction, PersistenceContext persistenceContext, TimeSpan timeout, AsyncCallback callback, object state);
    [CompilerGeneratedAttribute]
internal PersistenceContext get_PersistenceContext();
    [CompilerGeneratedAttribute]
internal void set_PersistenceContext(PersistenceContext value);
    internal Transaction get_Transaction();
    internal static Action`1<object> get_TimeoutCallbackAction();
    internal bool Complete();
    public static void End(IAsyncResult result);
}
internal class System.ServiceModel.Activities.Dispatcher.WorkflowServiceInstance : WorkflowInstance {
    internal List`1<IPersistencePipelineModule> PipelineModules { get; private set; }
    public BufferedReceiveManager BufferedReceiveManager { get; }
    public Guid Id { get; }
    public bool IsActive { get; }
    public bool HasBeenUpdated { get; private set; }
    protected bool SupportsInstanceKeys { get; }
    private static WorkflowServiceInstance();
    [CompilerGeneratedAttribute]
internal List`1<IPersistencePipelineModule> get_PipelineModules();
    [CompilerGeneratedAttribute]
private void set_PipelineModules(List`1<IPersistencePipelineModule> value);
    public BufferedReceiveManager get_BufferedReceiveManager();
    public virtual Guid get_Id();
    public bool get_IsActive();
    [CompilerGeneratedAttribute]
public bool get_HasBeenUpdated();
    [CompilerGeneratedAttribute]
private void set_HasBeenUpdated(bool value);
    protected virtual bool get_SupportsInstanceKeys();
    public static bool IsLoadTransactionRequired(WorkflowServiceHost host);
    public static WorkflowServiceInstance InitializeInstance(PersistenceContext persistenceContext, Guid instanceId, Activity workflowDefinition, WorkflowIdentity definitionIdentity, IDictionary`2<XName, InstanceValue> loadedObject, WorkflowCreationContext creationContext, SynchronizationContext synchronizationContext, WorkflowServiceHost serviceHost, DynamicUpdateMap updateMap);
    public int ReleaseReference();
    public IAsyncResult BeginAbandon(Exception reason, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndAbandon(IAsyncResult result);
    public IAsyncResult BeginTerminate(string reason, Transaction transaction, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndTerminate(IAsyncResult result);
    public IAsyncResult BeginCancel(Transaction transaction, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndCancel(IAsyncResult result);
    public IAsyncResult BeginRun(Transaction transaction, TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginRun(Transaction transaction, string operationName, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndRun(IAsyncResult result);
    protected virtual void OnNotifyPaused();
    protected virtual void OnRequestAbort(Exception reason);
    protected virtual void OnNotifyUnhandledException(Exception exception, Activity exceptionSource, string exceptionSourceInstanceId);
    public IAsyncResult BeginSuspend(bool isUnlocked, string reason, Transaction transaction, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndSuspend(IAsyncResult result);
    public IAsyncResult BeginUnsuspend(Transaction transaction, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndUnsuspend(IAsyncResult result);
    public IAsyncResult BeginPersist(TimeSpan timeout, AsyncCallback callback, object state);
    public bool EndPersist(IAsyncResult result);
    protected virtual IAsyncResult OnBeginFlushTrackingRecords(AsyncCallback callback, object state);
    protected virtual void OnEndFlushTrackingRecords(IAsyncResult result);
    protected virtual IAsyncResult OnBeginPersist(AsyncCallback callback, object state);
    protected virtual void OnEndPersist(IAsyncResult result);
    protected virtual IAsyncResult OnBeginAssociateKeys(ICollection`1<InstanceKey> keys, AsyncCallback callback, object state);
    protected virtual void OnEndAssociateKeys(IAsyncResult result);
    protected virtual void OnDisassociateKeys(ICollection`1<InstanceKey> keys);
    public IAsyncResult BeginResumeProtocolBookmark(Bookmark bookmark, BookmarkScope bookmarkScope, object value, TimeSpan timeout, AsyncCallback callback, object state);
    public BookmarkResumptionResult EndResumeProtocolBookmark(IAsyncResult result);
    protected virtual IAsyncResult OnBeginResumeBookmark(Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual BookmarkResumptionResult OnEndResumeBookmark(IAsyncResult result);
    public IAsyncResult BeginTryAcquireReference(TimeSpan timeout, AsyncCallback callback, object state);
    public bool EndTryAcquireReference(IAsyncResult result);
    public IAsyncResult BeginReleaseInstance(bool isTryUnload, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndReleaseInstance(IAsyncResult result);
    public static void EndReleaseInstanceForClose(IAsyncResult result);
    public IAsyncResult BeginAssociateInfrastructureKeys(ICollection`1<InstanceKey> associatedKeys, Transaction transaction, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndAssociateInfrastructureKeys(IAsyncResult result);
    public void ReleaseContext(WorkflowOperationContext context);
    public IAsyncResult BeginWaitForPendingOperations(string sessionId, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndWaitForPendingOperations(IAsyncResult result);
    public void RemovePendingOperation(string sessionId, IAsyncResult result);
    public void TransactionCommitted();
    public void OnTransactionPrepared();
    public void OnTransactionAbortOrInDoubt(TransactionException exception);
}
internal class System.ServiceModel.Activities.Dispatcher.WorkflowSynchronizationContext : SynchronizationContext {
    public static WorkflowSynchronizationContext Instance { get; }
    public static WorkflowSynchronizationContext get_Instance();
    public virtual SynchronizationContext CreateCopy();
    public virtual void Post(SendOrPostCallback d, object state);
    public virtual void Send(SendOrPostCallback d, object state);
}
public class System.ServiceModel.Activities.DurableInstancingOptions : object {
    public InstanceStore InstanceStore { get; public set; }
    internal XName ScopeName { get; internal set; }
    internal DurableInstancingOptions(DurableInstanceManager instanceManager);
    public InstanceStore get_InstanceStore();
    public void set_InstanceStore(InstanceStore value);
    [CompilerGeneratedAttribute]
internal void set_ScopeName(XName value);
    [CompilerGeneratedAttribute]
internal XName get_ScopeName();
    private sealed virtual override void System.Runtime.DurableInstancing.IDurableInstancingOptions.SetScopeName(XName scopeName);
    public void AddInstanceOwnerValues(IDictionary`2<XName, object> readWriteValues, IDictionary`2<XName, object> writeOnlyValues);
    public void AddInitialInstanceValues(IDictionary`2<XName, object> writeOnlyValues);
}
internal class System.ServiceModel.Activities.FromReply : CodeActivity {
    public InArgument`1<Message> Message { get; public set; }
    public IClientMessageFormatter Formatter { get; public set; }
    public IClientFaultFormatter FaultFormatter { get; public set; }
    public OutArgument Result { get; public set; }
    public Collection`1<OutArgument> Parameters { get; }
    [CompilerGeneratedAttribute]
public InArgument`1<Message> get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(InArgument`1<Message> value);
    [CompilerGeneratedAttribute]
public IClientMessageFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(IClientMessageFormatter value);
    [CompilerGeneratedAttribute]
public IClientFaultFormatter get_FaultFormatter();
    [CompilerGeneratedAttribute]
public void set_FaultFormatter(IClientFaultFormatter value);
    [CompilerGeneratedAttribute]
public OutArgument get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(OutArgument value);
    public Collection`1<OutArgument> get_Parameters();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual void Execute(CodeActivityContext context);
}
internal class System.ServiceModel.Activities.FromRequest : NativeActivity {
    public InOutArgument`1<Message> Message { get; public set; }
    public IDispatchMessageFormatter Formatter { get; public set; }
    public Collection`1<OutArgument> Parameters { get; }
    public InArgument`1<NoPersistHandle> NoPersistHandle { get; public set; }
    internal bool CloseMessage { get; internal set; }
    [CompilerGeneratedAttribute]
public InOutArgument`1<Message> get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(InOutArgument`1<Message> value);
    [CompilerGeneratedAttribute]
public IDispatchMessageFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(IDispatchMessageFormatter value);
    public Collection`1<OutArgument> get_Parameters();
    [CompilerGeneratedAttribute]
public InArgument`1<NoPersistHandle> get_NoPersistHandle();
    [CompilerGeneratedAttribute]
public void set_NoPersistHandle(InArgument`1<NoPersistHandle> value);
    [CompilerGeneratedAttribute]
internal bool get_CloseMessage();
    [CompilerGeneratedAttribute]
internal void set_CloseMessage(bool value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
internal static class System.ServiceModel.Activities.FxTrace : object {
    public static bool ShouldTraceCritical { get; }
    public static bool TracingEnabled { get; }
    public static bool ShouldTraceError { get; }
    public static bool ShouldTraceInformation { get; }
    public static bool ShouldTraceVerbose { get; }
    public static bool ShouldTraceWarning { get; }
    public static bool ShouldTraceCriticalToTraceSource { get; }
    public static bool ShouldTraceErrorToTraceSource { get; }
    public static bool ShouldTraceInformationToTraceSource { get; }
    public static bool ShouldTraceVerboseToTraceSource { get; }
    public static bool ShouldTraceWarningToTraceSource { get; }
    public static ExceptionTrace Exception { get; }
    public static EtwDiagnosticTrace Trace { get; }
    public static EventLogger EventLog { get; }
    private static FxTrace();
    [SecuritySafeCriticalAttribute]
public static void UpdateEventDefinitions(EventDescriptor[] eventDescriptors, UInt16[] end2EndEvents);
    public static bool IsEventEnabled(int index);
    public static bool get_ShouldTraceCritical();
    public static bool get_TracingEnabled();
    public static bool get_ShouldTraceError();
    public static bool get_ShouldTraceInformation();
    public static bool get_ShouldTraceVerbose();
    public static bool get_ShouldTraceWarning();
    public static bool get_ShouldTraceCriticalToTraceSource();
    public static bool get_ShouldTraceErrorToTraceSource();
    public static bool get_ShouldTraceInformationToTraceSource();
    public static bool get_ShouldTraceVerboseToTraceSource();
    public static bool get_ShouldTraceWarningToTraceSource();
    public static ExceptionTrace get_Exception();
    public static EtwDiagnosticTrace get_Trace();
    public static EventLogger get_EventLog();
}
public class System.ServiceModel.Activities.HostSettings : object {
    public bool IncludeExceptionDetailInFaults { get; public set; }
    public bool UseNoPersistHandle { get; public set; }
    public XName ScopeName { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeExceptionDetailInFaults();
    [CompilerGeneratedAttribute]
public void set_IncludeExceptionDetailInFaults(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNoPersistHandle();
    [CompilerGeneratedAttribute]
public void set_UseNoPersistHandle(bool value);
    [CompilerGeneratedAttribute]
public XName get_ScopeName();
    [CompilerGeneratedAttribute]
public void set_ScopeName(XName value);
}
[ContentPropertyAttribute("CorrelationData")]
public class System.ServiceModel.Activities.InitializeCorrelation : NativeActivity {
    [DefaultValueAttribute("")]
public InArgument`1<CorrelationHandle> Correlation { get; public set; }
    public IDictionary`2<string, InArgument`1<string>> CorrelationData { get; private set; }
    [CompilerGeneratedAttribute]
public InArgument`1<CorrelationHandle> get_Correlation();
    [CompilerGeneratedAttribute]
public void set_Correlation(InArgument`1<CorrelationHandle> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, InArgument`1<string>> get_CorrelationData();
    [CompilerGeneratedAttribute]
private void set_CorrelationData(IDictionary`2<string, InArgument`1<string>> value);
    protected virtual void Execute(NativeActivityContext context);
}
internal class System.ServiceModel.Activities.InternalReceiveMessage : NativeActivity {
    public string Action { get; public set; }
    public bool CanCreateInstance { get; public set; }
    public Collection`1<CorrelationInitializer> CorrelationInitializers { get; }
    public InArgument`1<CorrelationHandle> CorrelatesWith { get; public set; }
    public OutArgument`1<Message> Message { get; public set; }
    public InArgument`1<NoPersistHandle> NoPersistHandle { get; public set; }
    public string OperationName { get; public set; }
    protected bool CanInduceIdle { get; }
    internal bool IsOneWay { get; internal set; }
    internal bool IsReceiveReply { get; internal set; }
    internal ServiceDescriptionData AdditionalData { get; }
    public XName ServiceContractName { get; public set; }
    internal string OperationBookmarkName { get; }
    internal string OwnerDisplayName { get; internal set; }
    internal static Guid TraceCorrelationActivityId { get; }
    private static InternalReceiveMessage();
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public bool get_CanCreateInstance();
    [CompilerGeneratedAttribute]
public void set_CanCreateInstance(bool value);
    public Collection`1<CorrelationInitializer> get_CorrelationInitializers();
    [CompilerGeneratedAttribute]
public InArgument`1<CorrelationHandle> get_CorrelatesWith();
    [CompilerGeneratedAttribute]
public void set_CorrelatesWith(InArgument`1<CorrelationHandle> value);
    [CompilerGeneratedAttribute]
public OutArgument`1<Message> get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(OutArgument`1<Message> value);
    [CompilerGeneratedAttribute]
public InArgument`1<NoPersistHandle> get_NoPersistHandle();
    [CompilerGeneratedAttribute]
public void set_NoPersistHandle(InArgument`1<NoPersistHandle> value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    protected virtual bool get_CanInduceIdle();
    [CompilerGeneratedAttribute]
internal bool get_IsOneWay();
    [CompilerGeneratedAttribute]
internal void set_IsOneWay(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsReceiveReply();
    [CompilerGeneratedAttribute]
internal void set_IsReceiveReply(bool value);
    internal ServiceDescriptionData get_AdditionalData();
    [CompilerGeneratedAttribute]
public XName get_ServiceContractName();
    [CompilerGeneratedAttribute]
public void set_ServiceContractName(XName value);
    internal string get_OperationBookmarkName();
    [CompilerGeneratedAttribute]
internal string get_OwnerDisplayName();
    [CompilerGeneratedAttribute]
internal void set_OwnerDisplayName(string value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void UpdateInstance(NativeActivityUpdateContext updateContext);
    protected virtual void Abort(NativeActivityAbortContext context);
    protected virtual void Cancel(NativeActivityContext context);
    protected virtual void Execute(NativeActivityContext executionContext);
    [SecuritySafeCriticalAttribute]
internal static Guid get_TraceCorrelationActivityId();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
}
internal class System.ServiceModel.Activities.InternalSendMessage : NativeActivity {
    public TokenImpersonationLevel TokenImpersonationLevel { get; public set; }
    public Endpoint Endpoint { get; public set; }
    public string EndpointConfigurationName { get; public set; }
    public InArgument`1<Uri> EndpointAddress { get; public set; }
    public InArgument`1<CorrelationHandle> CorrelatesWith { get; public set; }
    public string OperationName { get; public set; }
    public string Action { get; public set; }
    public bool IsOneWay { get; public set; }
    protected bool CanInduceIdle { get; }
    internal bool IsSendReply { get; internal set; }
    internal OutArgument`1<Message> MessageOut { get; internal set; }
    internal bool ShouldPersistBeforeSend { get; internal set; }
    internal string OwnerDisplayName { get; internal set; }
    public Collection`1<CorrelationInitializer> CorrelationInitializers { get; }
    public CorrelationQuery CorrelationQuery { get; public set; }
    internal ICollection`1<CorrelationQuery> ReplyCorrelationQueries { get; }
    public XName ServiceContractName { get; public set; }
    public InArgument`1<Message> Message { get; public set; }
    internal Send Parent { get; internal set; }
    internal static Guid TraceCorrelationActivityId { get; }
    private static InternalSendMessage();
    [CompilerGeneratedAttribute]
public TokenImpersonationLevel get_TokenImpersonationLevel();
    [CompilerGeneratedAttribute]
public void set_TokenImpersonationLevel(TokenImpersonationLevel value);
    [CompilerGeneratedAttribute]
public Endpoint get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(Endpoint value);
    [CompilerGeneratedAttribute]
public string get_EndpointConfigurationName();
    [CompilerGeneratedAttribute]
public void set_EndpointConfigurationName(string value);
    [CompilerGeneratedAttribute]
public InArgument`1<Uri> get_EndpointAddress();
    [CompilerGeneratedAttribute]
public void set_EndpointAddress(InArgument`1<Uri> value);
    [CompilerGeneratedAttribute]
public InArgument`1<CorrelationHandle> get_CorrelatesWith();
    [CompilerGeneratedAttribute]
public void set_CorrelatesWith(InArgument`1<CorrelationHandle> value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public bool get_IsOneWay();
    [CompilerGeneratedAttribute]
public void set_IsOneWay(bool value);
    protected virtual bool get_CanInduceIdle();
    [CompilerGeneratedAttribute]
internal bool get_IsSendReply();
    [CompilerGeneratedAttribute]
internal void set_IsSendReply(bool value);
    [CompilerGeneratedAttribute]
internal OutArgument`1<Message> get_MessageOut();
    [CompilerGeneratedAttribute]
internal void set_MessageOut(OutArgument`1<Message> value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldPersistBeforeSend();
    [CompilerGeneratedAttribute]
internal void set_ShouldPersistBeforeSend(bool value);
    [CompilerGeneratedAttribute]
internal string get_OwnerDisplayName();
    [CompilerGeneratedAttribute]
internal void set_OwnerDisplayName(string value);
    public Collection`1<CorrelationInitializer> get_CorrelationInitializers();
    [CompilerGeneratedAttribute]
public CorrelationQuery get_CorrelationQuery();
    [CompilerGeneratedAttribute]
public void set_CorrelationQuery(CorrelationQuery value);
    internal ICollection`1<CorrelationQuery> get_ReplyCorrelationQueries();
    [CompilerGeneratedAttribute]
public XName get_ServiceContractName();
    [CompilerGeneratedAttribute]
public void set_ServiceContractName(XName value);
    [CompilerGeneratedAttribute]
public InArgument`1<Message> get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(InArgument`1<Message> value);
    [CompilerGeneratedAttribute]
internal Send get_Parent();
    [CompilerGeneratedAttribute]
internal void set_Parent(Send value);
    [SecuritySafeCriticalAttribute]
internal static Guid get_TraceCorrelationActivityId();
    internal MessageVersion GetMessageVersion();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Cancel(NativeActivityContext context);
    protected virtual void Abort(NativeActivityAbortContext context);
    protected virtual void Execute(NativeActivityContext context);
}
public interface System.ServiceModel.Activities.IReceiveMessageCallback {
    public abstract virtual void OnReceiveMessage(OperationContext operationContext, ExecutionProperties activityExecutionProperties);
}
public interface System.ServiceModel.Activities.ISendMessageCallback {
    public abstract virtual void OnSendMessage(OperationContext operationContext);
}
[WorkflowContractBehaviorAttribute]
[ServiceContractAttribute]
public interface System.ServiceModel.Activities.IWorkflowInstanceManagement {
    [OperationContractAttribute]
public abstract virtual void Abandon(Guid instanceId, string reason);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginAbandon(Guid instanceId, string reason, AsyncCallback callback, object state);
    public abstract virtual void EndAbandon(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual void Cancel(Guid instanceId);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginCancel(Guid instanceId, AsyncCallback callback, object state);
    public abstract virtual void EndCancel(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual void Run(Guid instanceId);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginRun(Guid instanceId, AsyncCallback callback, object state);
    public abstract virtual void EndRun(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual void Suspend(Guid instanceId, string reason);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginSuspend(Guid instanceId, string reason, AsyncCallback callback, object state);
    public abstract virtual void EndSuspend(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual void Terminate(Guid instanceId, string reason);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTerminate(Guid instanceId, string reason, AsyncCallback callback, object state);
    public abstract virtual void EndTerminate(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual void Unsuspend(Guid instanceId);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginUnsuspend(Guid instanceId, AsyncCallback callback, object state);
    public abstract virtual void EndUnsuspend(IAsyncResult result);
    [TransactionFlowAttribute("1")]
[OperationContractAttribute]
public abstract virtual void TransactedCancel(Guid instanceId);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTransactedCancel(Guid instanceId, AsyncCallback callback, object state);
    public abstract virtual void EndTransactedCancel(IAsyncResult result);
    [OperationContractAttribute]
[TransactionFlowAttribute("1")]
public abstract virtual void TransactedRun(Guid instanceId);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTransactedRun(Guid instanceId, AsyncCallback callback, object state);
    public abstract virtual void EndTransactedRun(IAsyncResult result);
    [OperationContractAttribute]
[TransactionFlowAttribute("1")]
public abstract virtual void TransactedSuspend(Guid instanceId, string reason);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTransactedSuspend(Guid instanceId, string reason, AsyncCallback callback, object state);
    public abstract virtual void EndTransactedSuspend(IAsyncResult result);
    [TransactionFlowAttribute("1")]
[OperationContractAttribute]
public abstract virtual void TransactedTerminate(Guid instanceId, string reason);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTransactedTerminate(Guid instanceId, string reason, AsyncCallback callback, object state);
    public abstract virtual void EndTransactedTerminate(IAsyncResult result);
    [TransactionFlowAttribute("1")]
[OperationContractAttribute]
public abstract virtual void TransactedUnsuspend(Guid instanceId);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTransactedUnsuspend(Guid instanceId, AsyncCallback callback, object state);
    public abstract virtual void EndTransactedUnsuspend(IAsyncResult result);
}
[WorkflowContractBehaviorAttribute]
[ServiceContractAttribute]
public interface System.ServiceModel.Activities.IWorkflowUpdateableInstanceManagement {
    [OperationContractAttribute]
public abstract virtual void Update(Guid instanceId, WorkflowIdentity updatedDefinitionIdentity);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginUpdate(Guid instanceId, WorkflowIdentity updatedDefinitionIdentity, AsyncCallback callback, object state);
    public abstract virtual void EndUpdate(IAsyncResult result);
    [OperationContractAttribute]
[TransactionFlowAttribute("1")]
public abstract virtual void TransactedUpdate(Guid instanceId, WorkflowIdentity updatedDefinitionIdentity);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginTransactedUpdate(Guid instanceId, WorkflowIdentity updatedDefinitionIdentity, AsyncCallback callback, object state);
    public abstract virtual void EndTransactedUpdate(IAsyncResult result);
}
internal static class System.ServiceModel.Activities.MessageBuilder : object {
    public static Type MessageContractAttributeType { get; }
    public static XsdDataContractExporter XsdDataContractExporter { get; }
    public static XmlReflectionImporter XmlReflectionImporter { get; }
    public static Type get_MessageContractAttributeType();
    public static XsdDataContractExporter get_XsdDataContractExporter();
    public static XmlReflectionImporter get_XmlReflectionImporter();
    public static MessageDescription CreateMessageDescription(OperationDescription operation, bool isResponse, MessageDirection direction, string overridingAction, Type type, SerializerOption serializerOption);
    public static MessageDescription CreateMessageDescription(OperationDescription operation, bool isResponse, MessageDirection direction, string overridingAction, String[] argumentNames, Type[] argumentTypes);
    public static bool IsMessageContract(Type type);
    public static MessageDescription CreateFromMessageContract(OperationDescription operation, bool isResponse, MessageDirection direction, string overridingAction, Type messageContractType);
    public static MessageDescription CreateEmptyMessageDescription(OperationDescription operation, bool isResponse, MessageDirection direction, string overridingAction);
    public static void AddMessagePartDescription(OperationDescription operation, bool isResponse, MessageDescription message, Type type, SerializerOption serializerOption);
    public static void AddMessagePartDescription(OperationDescription operation, bool isResponse, MessageDescription message, String[] argumentNames, Type[] argumentTypes);
    public static void SetWrapperName(OperationDescription operation, bool isResponse, MessageDescription message);
    public static void ClearWrapperNames(OperationDescription operation);
    public static FaultDescription CreateFaultDescription(OperationDescription operation, Type faultType, string overridingAction);
}
public class System.ServiceModel.Activities.MessageContext : object {
    public Message Message { get; public set; }
    public Guid EndToEndTracingId { get; public set; }
    internal MessageContext(Message message);
    public virtual Message get_Message();
    public virtual void set_Message(Message value);
    public virtual Guid get_EndToEndTracingId();
    public virtual void set_EndToEndTracingId(Guid value);
}
internal static class System.ServiceModel.Activities.MessagingActivityHelper : object {
    public static string ActivityInstanceId;
    public static string ActivityName;
    public static string ActivityType;
    public static string ActivityTypeExecuteUserCode;
    public static string MessagingActivityTypeActivityExecution;
    public static string E2EActivityId;
    public static string MessageId;
    public static string ActivityNameWorkflowOperationInvoke;
    public static string MessageCorrelationReceiveRecord;
    public static string MessageCorrelationSendRecord;
    private static MessagingActivityHelper();
    public static void FixMessageArgument(Argument messageArgument, ArgumentDirection direction, ActivityMetadata metadata);
    public static void AddRuntimeArgument(Argument messageArgument, string runtimeArgumentName, Type runtimeArgumentType, ArgumentDirection runtimeArgumentDirection, ActivityMetadata metadata);
    public static IList`1<T> GetCallbacks(ExecutionProperties executionProperties);
    public static Message InitializeCorrelationHandles(NativeActivityContext context, CorrelationHandle selectHandle, CorrelationHandle ambientHandle, Collection`1<CorrelationInitializer> additionalCorrelations, CorrelationKeyCalculator keyCalculator, Message message);
    public static void InitializeCorrelationHandles(NativeActivityContext context, CorrelationHandle selectHandle, CorrelationHandle ambientHandle, Collection`1<CorrelationInitializer> additionalCorrelations, MessageProperties messageProperties);
    internal static void InitializeCorrelationHandles(NativeActivityContext context, CorrelationHandle selectHandle, CorrelationHandle ambientHandle, Collection`1<CorrelationInitializer> additionalCorrelations, InstanceKey instanceKey, ICollection`1<InstanceKey> additionalKeys);
    public static CorrelationCallbackContext CreateCorrelationCallbackContext(MessageProperties messageProperties);
    public static CorrelationContext CreateCorrelationContext(MessageProperties messageProperties);
    public static bool CompareContextEquality(IDictionary`2<string, string> context1, IDictionary`2<string, string> context2);
    public static InArgument`1<CorrelationHandle> CreateReplyCorrelatesWith(InArgument`1<CorrelationHandle> requestCorrelatesWith);
    public static void ValidateCorrelationInitializer(ActivityMetadata metadata, Collection`1<CorrelationInitializer> correlationInitializers, bool isReply, string displayName, string operationName);
}
[ContentPropertyAttribute("Body")]
internal class System.ServiceModel.Activities.MessagingNoPersistScope : NativeActivity {
    [DefaultValueAttribute("")]
public Activity Body { get; public set; }
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Body")]
internal class System.ServiceModel.Activities.NoPersistScope : NativeActivity {
    [DefaultValueAttribute("")]
public Activity Body { get; public set; }
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
internal class System.ServiceModel.Activities.OperationIdentifier : ValueType {
    public string ContractName;
    public string ContractNamespace;
    public string OperationName;
    public OperationIdentifier(string contractName, string contractNamespace, string operationName);
    public sealed virtual bool Equals(OperationIdentifier other);
}
internal class System.ServiceModel.Activities.OperationProperty : object {
    public OperationDescription Operation { get; private set; }
    public HashSet`1<Receive> ImplementingReceives { get; }
    public HashSet`1<Receive> ImplementingSendRepliesRequests { get; }
    public OperationProperty(OperationDescription operation);
    [CompilerGeneratedAttribute]
public OperationDescription get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(OperationDescription value);
    public HashSet`1<Receive> get_ImplementingReceives();
    public HashSet`1<Receive> get_ImplementingSendRepliesRequests();
}
[ContentPropertyAttribute("MessageQuerySet")]
public class System.ServiceModel.Activities.QueryCorrelationInitializer : CorrelationInitializer {
    public MessageQuerySet MessageQuerySet { get; public set; }
    public MessageQuerySet get_MessageQuerySet();
    public void set_MessageQuerySet(MessageQuerySet value);
    internal virtual CorrelationInitializer CloneCore();
}
[ContentPropertyAttribute("Content")]
public class System.ServiceModel.Activities.Receive : Activity {
    public MessageQuerySet CorrelatesOn { get; public set; }
    [DefaultValueAttribute("")]
public ReceiveContent Content { get; public set; }
    internal ReceiveContent InternalContent { get; }
    public Collection`1<CorrelationInitializer> CorrelationInitializers { get; }
    [DefaultValueAttribute("")]
public string Action { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanCreateInstance { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CorrelationHandle> CorrelatesWith { get; public set; }
    [DefaultValueAttribute("")]
public string OperationName { get; public set; }
    [DefaultValueAttribute("")]
public Nullable`1<ProtectionLevel> ProtectionLevel { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SerializerOption SerializerOption { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter")]
public XName ServiceContractName { get; public set; }
    public Collection`1<Type> KnownTypes { get; }
    internal string OperationBookmarkName { get; }
    internal Collection`1<Type> InternalKnownTypes { get; }
    internal bool HasCorrelatesOn { get; }
    internal bool HasCorrelationInitializers { get; }
    internal IList`1<SendReply> FollowingReplies { get; }
    internal IList`1<SendReply> FollowingFaults { get; }
    internal bool HasReply { get; }
    internal bool HasFault { get; }
    internal InternalReceiveMessage InternalReceive { get; }
    public MessageQuerySet get_CorrelatesOn();
    public void set_CorrelatesOn(MessageQuerySet value);
    [CompilerGeneratedAttribute]
public ReceiveContent get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(ReceiveContent value);
    internal ReceiveContent get_InternalContent();
    public Collection`1<CorrelationInitializer> get_CorrelationInitializers();
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public bool get_CanCreateInstance();
    [CompilerGeneratedAttribute]
public void set_CanCreateInstance(bool value);
    [CompilerGeneratedAttribute]
public InArgument`1<CorrelationHandle> get_CorrelatesWith();
    [CompilerGeneratedAttribute]
public void set_CorrelatesWith(InArgument`1<CorrelationHandle> value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ProtectionLevel> get_ProtectionLevel();
    [CompilerGeneratedAttribute]
public void set_ProtectionLevel(Nullable`1<ProtectionLevel> value);
    [CompilerGeneratedAttribute]
public SerializerOption get_SerializerOption();
    [CompilerGeneratedAttribute]
public void set_SerializerOption(SerializerOption value);
    [CompilerGeneratedAttribute]
public XName get_ServiceContractName();
    [CompilerGeneratedAttribute]
public void set_ServiceContractName(XName value);
    public Collection`1<Type> get_KnownTypes();
    internal string get_OperationBookmarkName();
    internal Collection`1<Type> get_InternalKnownTypes();
    internal bool get_HasCorrelatesOn();
    internal bool get_HasCorrelationInitializers();
    internal IList`1<SendReply> get_FollowingReplies();
    internal IList`1<SendReply> get_FollowingFaults();
    internal bool get_HasReply();
    internal bool get_HasFault();
    internal InternalReceiveMessage get_InternalReceive();
    protected virtual void OnCreateDynamicUpdateMap(UpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(ActivityMetadata metadata);
    internal void SetIsOneWay(bool flag);
    internal void SetDefaultFormatters(OperationDescription operationDescription);
    internal void SetFormatter(IDispatchMessageFormatter formatter, IDispatchFaultFormatter faultFormatter, bool includeExceptionDetailInFaults);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeCorrelatesOn();
    public static Receive FromOperationDescription(OperationDescription operation);
}
public abstract class System.ServiceModel.Activities.ReceiveContent : object {
    internal static ReceiveContent DefaultReceiveContent { get; }
    internal static ReceiveContent get_DefaultReceiveContent();
    public static ReceiveMessageContent Create(OutArgument message);
    public static ReceiveMessageContent Create(OutArgument message, Type declaredMessageType);
    public static ReceiveParametersContent Create(IDictionary`2<string, OutArgument> parameters);
    internal abstract virtual void CacheMetadata(ActivityMetadata metadata, Activity owner, string operationName);
    internal abstract virtual void ConfigureInternalReceive(InternalReceiveMessage internalReceiveMessage, FromRequest& requestFormatter);
    internal abstract virtual void ConfigureInternalReceiveReply(InternalReceiveMessage internalReceiveMessage, FromReply& responseFormatter);
    internal abstract virtual void InferMessageDescription(OperationDescription operation, object owner, MessageDirection direction);
    internal abstract virtual void ValidateContract(NativeActivityContext context, OperationDescription targetOperation, object owner, MessageDirection direction);
}
[ContentPropertyAttribute("Message")]
public class System.ServiceModel.Activities.ReceiveMessageContent : ReceiveContent {
    [DefaultValueAttribute("")]
public OutArgument Message { get; public set; }
    [DefaultValueAttribute("")]
public Type DeclaredMessageType { get; public set; }
    internal Type InternalDeclaredMessageType { get; }
    public ReceiveMessageContent(OutArgument message);
    public ReceiveMessageContent(OutArgument message, Type declaredMessageType);
    [CompilerGeneratedAttribute]
public OutArgument get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(OutArgument value);
    [CompilerGeneratedAttribute]
public Type get_DeclaredMessageType();
    [CompilerGeneratedAttribute]
public void set_DeclaredMessageType(Type value);
    internal Type get_InternalDeclaredMessageType();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeDeclaredMessageType();
    internal virtual void CacheMetadata(ActivityMetadata metadata, Activity owner, string operationName);
    internal virtual void ConfigureInternalReceive(InternalReceiveMessage internalReceiveMessage, FromRequest& requestFormatter);
    internal virtual void ConfigureInternalReceiveReply(InternalReceiveMessage internalReceiveMessage, FromReply& responseFormatter);
    internal virtual void InferMessageDescription(OperationDescription operation, object owner, MessageDirection direction);
    internal virtual void ValidateContract(NativeActivityContext context, OperationDescription targetOperation, object owner, MessageDirection direction);
}
[ContentPropertyAttribute("Parameters")]
public class System.ServiceModel.Activities.ReceiveParametersContent : ReceiveContent {
    public IDictionary`2<string, OutArgument> Parameters { get; private set; }
    internal String[] ArgumentNames { get; }
    internal Type[] ArgumentTypes { get; }
    public ReceiveParametersContent(IDictionary`2<string, OutArgument> parameters);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, OutArgument> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(IDictionary`2<string, OutArgument> value);
    internal String[] get_ArgumentNames();
    internal Type[] get_ArgumentTypes();
    internal virtual void CacheMetadata(ActivityMetadata metadata, Activity owner, string operationName);
    internal virtual void ConfigureInternalReceive(InternalReceiveMessage internalReceiveMessage, FromRequest& requestFormatter);
    internal virtual void ConfigureInternalReceiveReply(InternalReceiveMessage internalReceiveMessage, FromReply& responseFormatter);
    internal virtual void InferMessageDescription(OperationDescription operation, object owner, MessageDirection direction);
    internal virtual void ValidateContract(NativeActivityContext context, OperationDescription targetOperation, object owner, MessageDirection direction);
}
[ContentPropertyAttribute("Content")]
public class System.ServiceModel.Activities.ReceiveReply : Activity {
    [DefaultValueAttribute("")]
public ReceiveContent Content { get; public set; }
    internal ReceiveContent InternalContent { get; }
    [DefaultValueAttribute("")]
public string Action { get; public set; }
    [DefaultValueAttribute("")]
public Send Request { get; public set; }
    public Collection`1<CorrelationInitializer> CorrelationInitializers { get; }
    [CompilerGeneratedAttribute]
public ReceiveContent get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(ReceiveContent value);
    internal ReceiveContent get_InternalContent();
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public Send get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(Send value);
    public Collection`1<CorrelationInitializer> get_CorrelationInitializers();
    protected virtual void CacheMetadata(ActivityMetadata metadata);
}
public class System.ServiceModel.Activities.ReceiveSettings : object {
    public string Action { get; public set; }
    public bool CanCreateInstance { get; public set; }
    public string OwnerDisplayName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public bool get_CanCreateInstance();
    [CompilerGeneratedAttribute]
public void set_CanCreateInstance(bool value);
    [CompilerGeneratedAttribute]
public string get_OwnerDisplayName();
    [CompilerGeneratedAttribute]
public void set_OwnerDisplayName(string value);
}
public class System.ServiceModel.Activities.RequestReplyCorrelationInitializer : CorrelationInitializer {
    internal virtual CorrelationInitializer CloneCore();
}
[ContentPropertyAttribute("Content")]
public class System.ServiceModel.Activities.Send : Activity {
    [DefaultValueAttribute("")]
public SendContent Content { get; public set; }
    internal SendContent InternalContent { get; }
    public Collection`1<CorrelationInitializer> CorrelationInitializers { get; }
    [DefaultValueAttribute("")]
public string Action { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<CorrelationHandle> CorrelatesWith { get; public set; }
    [DefaultValueAttribute("")]
public Endpoint Endpoint { get; public set; }
    [DefaultValueAttribute("")]
public string EndpointConfigurationName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Uri> EndpointAddress { get; public set; }
    public Collection`1<Type> KnownTypes { get; }
    [DefaultValueAttribute("")]
public string OperationName { get; public set; }
    [DefaultValueAttribute("")]
public Nullable`1<ProtectionLevel> ProtectionLevel { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SerializerOption SerializerOption { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter")]
public XName ServiceContractName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TokenImpersonationLevel TokenImpersonationLevel { get; public set; }
    internal bool ChannelCacheEnabled { get; }
    internal bool OperationUsesMessageContract { get; internal set; }
    internal OperationDescription OperationDescription { get; internal set; }
    [CompilerGeneratedAttribute]
public SendContent get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(SendContent value);
    internal SendContent get_InternalContent();
    public Collection`1<CorrelationInitializer> get_CorrelationInitializers();
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public InArgument`1<CorrelationHandle> get_CorrelatesWith();
    [CompilerGeneratedAttribute]
public void set_CorrelatesWith(InArgument`1<CorrelationHandle> value);
    [CompilerGeneratedAttribute]
public Endpoint get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(Endpoint value);
    [CompilerGeneratedAttribute]
public string get_EndpointConfigurationName();
    [CompilerGeneratedAttribute]
public void set_EndpointConfigurationName(string value);
    [CompilerGeneratedAttribute]
public InArgument`1<Uri> get_EndpointAddress();
    [CompilerGeneratedAttribute]
public void set_EndpointAddress(InArgument`1<Uri> value);
    public Collection`1<Type> get_KnownTypes();
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public void set_OperationName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<ProtectionLevel> get_ProtectionLevel();
    [CompilerGeneratedAttribute]
public void set_ProtectionLevel(Nullable`1<ProtectionLevel> value);
    [CompilerGeneratedAttribute]
public SerializerOption get_SerializerOption();
    [CompilerGeneratedAttribute]
public void set_SerializerOption(SerializerOption value);
    [CompilerGeneratedAttribute]
public XName get_ServiceContractName();
    [CompilerGeneratedAttribute]
public void set_ServiceContractName(XName value);
    [CompilerGeneratedAttribute]
public TokenImpersonationLevel get_TokenImpersonationLevel();
    [CompilerGeneratedAttribute]
public void set_TokenImpersonationLevel(TokenImpersonationLevel value);
    internal bool get_ChannelCacheEnabled();
    [CompilerGeneratedAttribute]
internal bool get_OperationUsesMessageContract();
    [CompilerGeneratedAttribute]
internal void set_OperationUsesMessageContract(bool value);
    [CompilerGeneratedAttribute]
internal OperationDescription get_OperationDescription();
    [CompilerGeneratedAttribute]
internal void set_OperationDescription(OperationDescription value);
    protected virtual void CacheMetadata(ActivityMetadata metadata);
    internal void SetIsOneWay(bool value);
    internal MessageVersion GetMessageVersion();
    internal void SetFormatter(IClientMessageFormatter formatter);
    internal void SetReplyCorrelationQuery(CorrelationQuery replyQuery);
    internal void InitializeChannelCacheEnabledSetting(ActivityContext context);
    internal void InitializeChannelCacheEnabledSetting(SendMessageChannelCache channelCacheExtension);
}
public abstract class System.ServiceModel.Activities.SendContent : object {
    internal static SendContent DefaultSendContent { get; }
    internal bool IsFault { get; }
    internal static SendContent get_DefaultSendContent();
    public static SendMessageContent Create(InArgument message);
    public static SendMessageContent Create(InArgument message, Type declaredMessageType);
    public static SendParametersContent Create(IDictionary`2<string, InArgument> parameters);
    internal abstract virtual bool get_IsFault();
    internal abstract virtual void CacheMetadata(ActivityMetadata metadata, Activity owner, string operationName);
    internal abstract virtual void ConfigureInternalSend(InternalSendMessage internalSendMessage, ToRequest& requestFormatter);
    internal abstract virtual void ConfigureInternalSendReply(InternalSendMessage internalSendMessage, ToReply& responseFormatter);
    internal abstract virtual void InferMessageDescription(OperationDescription operation, object owner, MessageDirection direction);
    internal abstract virtual void ValidateContract(NativeActivityContext context, OperationDescription targetOperation, object owner, MessageDirection direction);
}
public class System.ServiceModel.Activities.SendMessageChannelCache : object {
    internal static Func`1<SendMessageChannelCache> DefaultExtensionProvider { get; }
    public bool AllowUnsafeCaching { get; public set; }
    public ChannelCacheSettings ChannelSettings { get; public set; }
    public ChannelCacheSettings FactorySettings { get; public set; }
    public SendMessageChannelCache(ChannelCacheSettings factorySettings, ChannelCacheSettings channelSettings);
    public SendMessageChannelCache(ChannelCacheSettings factorySettings, ChannelCacheSettings channelSettings, bool allowUnsafeCaching);
    private static SendMessageChannelCache();
    internal static Func`1<SendMessageChannelCache> get_DefaultExtensionProvider();
    public bool get_AllowUnsafeCaching();
    public void set_AllowUnsafeCaching(bool value);
    public ChannelCacheSettings get_ChannelSettings();
    public void set_ChannelSettings(ChannelCacheSettings value);
    public ChannelCacheSettings get_FactorySettings();
    public void set_FactorySettings(ChannelCacheSettings value);
    internal ObjectCache`2<FactoryCacheKey, ChannelFactoryReference> GetFactoryCache();
    public sealed virtual void Dispose();
    private sealed virtual override void System.Runtime.ICancelable.Cancel();
}
[ContentPropertyAttribute("Message")]
public class System.ServiceModel.Activities.SendMessageContent : SendContent {
    [DefaultValueAttribute("")]
public InArgument Message { get; public set; }
    [DefaultValueAttribute("")]
public Type DeclaredMessageType { get; public set; }
    internal Type InternalDeclaredMessageType { get; }
    internal bool IsFault { get; }
    public SendMessageContent(InArgument message);
    public SendMessageContent(InArgument message, Type declaredMessageType);
    [CompilerGeneratedAttribute]
public InArgument get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(InArgument value);
    [CompilerGeneratedAttribute]
public Type get_DeclaredMessageType();
    [CompilerGeneratedAttribute]
public void set_DeclaredMessageType(Type value);
    internal Type get_InternalDeclaredMessageType();
    internal virtual bool get_IsFault();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeDeclaredMessageType();
    internal virtual void CacheMetadata(ActivityMetadata metadata, Activity owner, string operationName);
    internal virtual void ConfigureInternalSend(InternalSendMessage internalSendMessage, ToRequest& requestFormatter);
    internal virtual void ConfigureInternalSendReply(InternalSendMessage internalSendMessage, ToReply& responseFormatter);
    internal virtual void InferMessageDescription(OperationDescription operation, object owner, MessageDirection direction);
    internal virtual void ValidateContract(NativeActivityContext context, OperationDescription targetOperation, object owner, MessageDirection direction);
}
[ContentPropertyAttribute("Parameters")]
public class System.ServiceModel.Activities.SendParametersContent : SendContent {
    public IDictionary`2<string, InArgument> Parameters { get; private set; }
    internal String[] ArgumentNames { get; }
    internal Type[] ArgumentTypes { get; }
    internal bool IsFault { get; }
    public SendParametersContent(IDictionary`2<string, InArgument> parameters);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, InArgument> get_Parameters();
    [CompilerGeneratedAttribute]
private void set_Parameters(IDictionary`2<string, InArgument> value);
    internal String[] get_ArgumentNames();
    internal Type[] get_ArgumentTypes();
    internal virtual bool get_IsFault();
    internal virtual void CacheMetadata(ActivityMetadata metadata, Activity owner, string operationName);
    internal virtual void ConfigureInternalSend(InternalSendMessage internalSendMessage, ToRequest& requestFormatter);
    internal virtual void ConfigureInternalSendReply(InternalSendMessage internalSendMessage, ToReply& responseFormatter);
    internal virtual void InferMessageDescription(OperationDescription operation, object owner, MessageDirection direction);
    internal virtual void ValidateContract(NativeActivityContext context, OperationDescription targetOperation, object owner, MessageDirection direction);
}
public abstract class System.ServiceModel.Activities.SendReceiveExtension : object {
    public HostSettings HostSettings { get; }
    public abstract virtual HostSettings get_HostSettings();
    public abstract virtual void Send(MessageContext message, SendSettings settings, InstanceKey correlatesWith, Bookmark sendCompleteBookmark);
    public abstract virtual void Cancel(Bookmark bookmark);
    public abstract virtual void OnUninitializeCorrelation(InstanceKey correlationKey);
    public void RegisterReceive(ReceiveSettings settings, InstanceKey correlatesWith, Bookmark receiveBookmark);
    protected abstract virtual void OnRegisterReceive(ReceiveSettings settings, InstanceKey correlatesWith, Bookmark receiveBookmark);
}
[ContentPropertyAttribute("Content")]
public class System.ServiceModel.Activities.SendReply : Activity {
    [DefaultValueAttribute("")]
public SendContent Content { get; public set; }
    internal SendContent InternalContent { get; }
    [DefaultValueAttribute("")]
public Receive Request { get; public set; }
    [DefaultValueAttribute("")]
public string Action { get; public set; }
    [DefaultValueAttribute("")]
public Collection`1<CorrelationInitializer> CorrelationInitializers { get; }
    [DefaultValueAttribute("False")]
public bool PersistBeforeSend { get; public set; }
    [CompilerGeneratedAttribute]
public SendContent get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(SendContent value);
    internal SendContent get_InternalContent();
    [CompilerGeneratedAttribute]
public Receive get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(Receive value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    public Collection`1<CorrelationInitializer> get_CorrelationInitializers();
    [CompilerGeneratedAttribute]
public bool get_PersistBeforeSend();
    [CompilerGeneratedAttribute]
public void set_PersistBeforeSend(bool value);
    protected virtual void CacheMetadata(ActivityMetadata metadata);
    internal void SetFormatter(IDispatchMessageFormatter formatter);
    internal void SetFaultFormatter(IDispatchFaultFormatter faultFormatter, bool includeExceptionDetailInFaults);
    internal void SetContractName(XName contractName);
    public static SendReply FromOperationDescription(OperationDescription operation, IEnumerable`1& faultReplies);
}
public class System.ServiceModel.Activities.SendSettings : object {
    public bool IsOneWay { get; public set; }
    public Endpoint Endpoint { get; public set; }
    public Uri EndpointAddress { get; public set; }
    public string EndpointConfigurationName { get; public set; }
    public TokenImpersonationLevel TokenImpersonationLevel { get; public set; }
    public Nullable`1<ProtectionLevel> ProtectionLevel { get; public set; }
    public string OwnerDisplayName { get; public set; }
    public bool RequirePersistBeforeSend { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsOneWay();
    [CompilerGeneratedAttribute]
public void set_IsOneWay(bool value);
    [CompilerGeneratedAttribute]
public Endpoint get_Endpoint();
    [CompilerGeneratedAttribute]
public void set_Endpoint(Endpoint value);
    [CompilerGeneratedAttribute]
public Uri get_EndpointAddress();
    [CompilerGeneratedAttribute]
public void set_EndpointAddress(Uri value);
    [CompilerGeneratedAttribute]
public string get_EndpointConfigurationName();
    [CompilerGeneratedAttribute]
public void set_EndpointConfigurationName(string value);
    [CompilerGeneratedAttribute]
public TokenImpersonationLevel get_TokenImpersonationLevel();
    [CompilerGeneratedAttribute]
public void set_TokenImpersonationLevel(TokenImpersonationLevel value);
    [CompilerGeneratedAttribute]
public Nullable`1<ProtectionLevel> get_ProtectionLevel();
    [CompilerGeneratedAttribute]
public void set_ProtectionLevel(Nullable`1<ProtectionLevel> value);
    [CompilerGeneratedAttribute]
public string get_OwnerDisplayName();
    [CompilerGeneratedAttribute]
public void set_OwnerDisplayName(string value);
    [CompilerGeneratedAttribute]
public bool get_RequirePersistBeforeSend();
    [CompilerGeneratedAttribute]
public void set_RequirePersistBeforeSend(bool value);
}
[DataContractAttribute]
internal class System.ServiceModel.Activities.SerializableInstanceKey : object {
    [DataMemberAttribute]
internal Guid Value { get; internal set; }
    [DataMemberAttribute]
internal IDictionary`2<XName, SerializableInstanceValue> Metadata { get; internal set; }
    public SerializableInstanceKey(InstanceKey instanceKey);
    internal Guid get_Value();
    internal void set_Value(Guid value);
    internal IDictionary`2<XName, SerializableInstanceValue> get_Metadata();
    internal void set_Metadata(IDictionary`2<XName, SerializableInstanceValue> value);
    public InstanceKey ToInstanceKey();
}
[DataContractAttribute]
internal class System.ServiceModel.Activities.SerializableInstanceValue : object {
    [DataMemberAttribute]
internal object Value { get; internal set; }
    [DataMemberAttribute]
internal int Options { get; internal set; }
    public SerializableInstanceValue(InstanceValue instanceValue);
    internal object get_Value();
    internal void set_Value(object value);
    internal int get_Options();
    internal void set_Options(int value);
    public InstanceValue ToInstanceValue();
}
public enum System.ServiceModel.Activities.SerializerOption : Enum {
    public int value__;
    public static SerializerOption DataContractSerializer;
    public static SerializerOption XmlSerializer;
}
internal static class System.ServiceModel.Activities.ServiceOperationFormatterProvider : object {
    internal static IDispatchMessageFormatter GetDispatcherFormatterFromRuntime(OperationDescription operationDescription);
}
internal class System.ServiceModel.Activities.SR : object {
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string CurrentOperationCannotCreateInstance { get; }
    internal static string InternalServerError { get; }
    internal static string DispatchOperationInInvalidState { get; }
    internal static string PartialTrustPerformanceCounterNotEnabled { get; }
    internal static string InvalidServiceImplementation { get; }
    internal static string DefaultAbortReason { get; }
    internal static string InstanceMustNotBeSuspended { get; }
    internal static string PersistenceProviderRequiredToPersist { get; }
    internal static string ErrorTimeToPersistLessThanZero { get; }
    internal static string ErrorTimeToUnloadLessThanZero { get; }
    internal static string MissingDisplayNameInRootActivity { get; }
    internal static string MissingBodyInWorkflowService { get; }
    internal static string ContextMismatchInContextAndCallBackContext { get; }
    internal static string TransactionPersistenceTimeout { get; }
    internal static string PersistenceTooLateToEnlist { get; }
    internal static string InvalidKey { get; }
    internal static string InvalidInstanceId { get; }
    internal static string HandleFreedInDirectory { get; }
    internal static string NoAdditionalKeysOnInstanceIdLoad { get; }
    internal static string DirectoryAborted { get; }
    internal static string StoreViolationNoInstanceBound { get; }
    internal static string PersistenceViolationNoCreate { get; }
    internal static string LoadingAborted { get; }
    internal static string DefaultTerminationReason { get; }
    internal static string DefaultCreateOnlyReason { get; }
    internal static string DefaultSuspendReason { get; }
    internal static string TryRegisterRequestContextFailed { get; }
    internal static string RequestReplyHandleShouldNotBePresentForOneWay { get; }
    internal static string CorrelatedContextRequiredForAnonymousSend { get; }
    internal static string WorkflowMustBeHosted { get; }
    internal static string NullCorrelationHandleInMultipleQueryCorrelation { get; }
    internal static string QueryCorrelationInitializerCannotBeInitialized { get; }
    internal static string EmptyCorrelationQueryResults { get; }
    internal static string NotSpecified { get; }
    internal static string FlowedTransactionDifferentFromAmbient { get; }
    internal static string ReceiveNotWithinATransactedReceiveScope { get; }
    internal static string ContractInferenceValidationForTransactionFlowBehavior { get; }
    internal static string NullReplyMessageContractMismatch { get; }
    internal static string CannotCreateMessageFault { get; }
    internal static string CorrelationResponseContextShouldNotBeNull { get; }
    internal static string DanglingReceive { get; }
    internal static string DifferentContractsSameConfigName { get; }
    internal static string OperationFormatterAndFaultFormatterNotSet { get; }
    internal static string OperationFormatterAndFaultFormatterIncorrectlySet { get; }
    internal static string ResponseContextIsNotNull { get; }
    internal static string SendRepliesHaveSameFaultTypeDifferentAction { get; }
    internal static string CompensableActivityInsideTransactedReceiveScope { get; }
    internal static string CannotUseAddServiceEndpointOverloadForWorkflowServices { get; }
    internal static string CacheSettingsLocked { get; }
    internal static string ServiceHostExtensionAborted { get; }
    internal static string ServiceHostExtensionImmutable { get; }
    internal static string UnableToOpenAndRegisterStore { get; }
    internal static string UseInstanceStoreInsteadOfPersistenceProvider { get; }
    internal static string BufferedReceiveBehaviorUsedWithoutProperty { get; }
    internal static string BufferedReceiveBehaviorMultipleUse { get; }
    internal static string MaxPendingMessagesPerChannelMustBeGreaterThanZero { get; }
    internal static string CannotSpecifyBothConnectionStringAndName { get; }
    internal static string MustSpecifyConnectionStringOrName { get; }
    internal static string WorkflowCompletionAsyncResultCannotBeNull { get; }
    internal static string NoRunnableInstances { get; }
    internal static string FailedToGetInstanceIdForControlOperation { get; }
    internal static string FailedToGetWorkflowIdentityForControlOperation { get; }
    internal static string BodyCannotBeNull { get; }
    internal static string DuplexContractsNotSupported { get; }
    internal static string ExtraReturnValue { get; }
    internal static string InvalidReceiveStateForDU { get; }
    internal static string ReceiveContentChanged { get; }
    internal static string ReceiveCorrelationInitializiersChanged { get; }
    internal static string WorkflowControlEndpointDefaultBaseUriNotSupportedInPartialTrust { get; }
    internal static string WorkflowServiceHostCannotAddOrRemoveServiceDefinitionAfterOpen { get; }
    internal static string SendReceiveExtensionNotFound { get; }
    internal static string MessageVersionInformationNotFound { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_CurrentOperationCannotCreateInstance();
    internal static string get_InternalServerError();
    internal static string get_DispatchOperationInInvalidState();
    internal static string get_PartialTrustPerformanceCounterNotEnabled();
    internal static string get_InvalidServiceImplementation();
    internal static string get_DefaultAbortReason();
    internal static string get_InstanceMustNotBeSuspended();
    internal static string get_PersistenceProviderRequiredToPersist();
    internal static string get_ErrorTimeToPersistLessThanZero();
    internal static string get_ErrorTimeToUnloadLessThanZero();
    internal static string get_MissingDisplayNameInRootActivity();
    internal static string get_MissingBodyInWorkflowService();
    internal static string get_ContextMismatchInContextAndCallBackContext();
    internal static string get_TransactionPersistenceTimeout();
    internal static string get_PersistenceTooLateToEnlist();
    internal static string get_InvalidKey();
    internal static string get_InvalidInstanceId();
    internal static string get_HandleFreedInDirectory();
    internal static string get_NoAdditionalKeysOnInstanceIdLoad();
    internal static string get_DirectoryAborted();
    internal static string get_StoreViolationNoInstanceBound();
    internal static string get_PersistenceViolationNoCreate();
    internal static string get_LoadingAborted();
    internal static string get_DefaultTerminationReason();
    internal static string get_DefaultCreateOnlyReason();
    internal static string get_DefaultSuspendReason();
    internal static string get_TryRegisterRequestContextFailed();
    internal static string get_RequestReplyHandleShouldNotBePresentForOneWay();
    internal static string get_CorrelatedContextRequiredForAnonymousSend();
    internal static string get_WorkflowMustBeHosted();
    internal static string get_NullCorrelationHandleInMultipleQueryCorrelation();
    internal static string get_QueryCorrelationInitializerCannotBeInitialized();
    internal static string get_EmptyCorrelationQueryResults();
    internal static string get_NotSpecified();
    internal static string get_FlowedTransactionDifferentFromAmbient();
    internal static string get_ReceiveNotWithinATransactedReceiveScope();
    internal static string get_ContractInferenceValidationForTransactionFlowBehavior();
    internal static string get_NullReplyMessageContractMismatch();
    internal static string get_CannotCreateMessageFault();
    internal static string get_CorrelationResponseContextShouldNotBeNull();
    internal static string get_DanglingReceive();
    internal static string get_DifferentContractsSameConfigName();
    internal static string get_OperationFormatterAndFaultFormatterNotSet();
    internal static string get_OperationFormatterAndFaultFormatterIncorrectlySet();
    internal static string get_ResponseContextIsNotNull();
    internal static string get_SendRepliesHaveSameFaultTypeDifferentAction();
    internal static string get_CompensableActivityInsideTransactedReceiveScope();
    internal static string get_CannotUseAddServiceEndpointOverloadForWorkflowServices();
    internal static string get_CacheSettingsLocked();
    internal static string get_ServiceHostExtensionAborted();
    internal static string get_ServiceHostExtensionImmutable();
    internal static string get_UnableToOpenAndRegisterStore();
    internal static string get_UseInstanceStoreInsteadOfPersistenceProvider();
    internal static string get_BufferedReceiveBehaviorUsedWithoutProperty();
    internal static string get_BufferedReceiveBehaviorMultipleUse();
    internal static string get_MaxPendingMessagesPerChannelMustBeGreaterThanZero();
    internal static string get_CannotSpecifyBothConnectionStringAndName();
    internal static string get_MustSpecifyConnectionStringOrName();
    internal static string get_WorkflowCompletionAsyncResultCannotBeNull();
    internal static string get_NoRunnableInstances();
    internal static string get_FailedToGetInstanceIdForControlOperation();
    internal static string get_FailedToGetWorkflowIdentityForControlOperation();
    internal static string get_BodyCannotBeNull();
    internal static string get_DuplexContractsNotSupported();
    internal static string get_ExtraReturnValue();
    internal static string get_InvalidReceiveStateForDU();
    internal static string get_ReceiveContentChanged();
    internal static string get_ReceiveCorrelationInitializiersChanged();
    internal static string get_WorkflowControlEndpointDefaultBaseUriNotSupportedInPartialTrust();
    internal static string get_WorkflowServiceHostCannotAddOrRemoveServiceDefinitionAfterOpen();
    internal static string get_SendReceiveExtensionNotFound();
    internal static string get_MessageVersionInformationNotFound();
    internal static string WorkflowBehaviorWithNonWorkflowHost(object param0);
    internal static string TransactedReceiveScopeRequiresReceive(object param0);
    internal static string WorkflowInstanceAborted(object param0);
    internal static string WorkflowInstanceTerminated(object param0);
    internal static string WorkflowInstanceUnloaded(object param0);
    internal static string WorkflowInstanceCompleted(object param0);
    internal static string WorkflowInstanceUpdateFailed(object param0, object param1);
    internal static string CannotUpdateLoadedInstance(object param0);
    internal static string UpdateDefinitionNotFound(object param0);
    internal static string UpdateMapNotFound(object param0, object param1);
    internal static string InstanceLockedUnderTransaction(object param0, object param1);
    internal static string ServiceInstanceUnloaded(object param0);
    internal static string ServiceInstanceTerminated(object param0);
    internal static string InstanceSuspended(object param0, object param1);
    internal static string MissingUriInEndpoint(object param0, object param1);
    internal static string MissingBindingInEndpoint(object param0, object param1);
    internal static string OperationHasSerializerBehavior(object param0, object param1, object param2);
    internal static string OperationNotAvailable(object param0, object param1);
    internal static string TimeoutOnOperation(object param0);
    internal static string DuplicateInstanceKeyExists(object param0);
    internal static string RelativeUriRequiresBinding(object param0, object param1, object param2);
    internal static string RelativeUriRequiresHost(object param0, object param1, object param2);
    internal static string SendWithUninitializedCorrelatesWith(object param0);
    internal static string ReceiveMessageNeedsToPairWithSendMessageForTwoWayContract(object param0);
    internal static string SendMessageNeedsToPairWithReceiveMessageForTwoWayContract(object param0);
    internal static string CorrelationHandleInUse(object param0, object param1);
    internal static string NullCorrelationHandleInInitializeCorrelation(object param0);
    internal static string InitializeCorrelationRequiresWorkflowServiceHost(object param0);
    internal static string CannotNestTransactedReceiveScopeWhenAmbientHandleIsSuppressed(object param0);
    internal static string TransactedReceiveScopeMustHaveValidReceive(object param0);
    internal static string ServiceMetadataBehaviorNotFoundForServiceMetadataEndpoint(object param0);
    internal static string ContractNotFoundInAddServiceEndpoint(object param0, object param1);
    internal static string EndpointNotSet(object param0, object param1);
    internal static string EndpointIncorrectlySet(object param0, object param1);
    internal static string EndpointAddressNotSetInEndpoint(object param0);
    internal static string ReceiveReplyRequestCannotBeNull(object param0);
    internal static string MissingOperationName(object param0);
    internal static string SendReplyRequestCannotBeNull(object param0);
    internal static string ReplyShouldNotIncludeRequestReplyHandle(object param0, object param1);
    internal static string QueryCorrelationInitializerWithEmptyMessageQuerySet(object param0, object param1);
    internal static string ValueArgumentTypeNotDerivedFromValueType(object param0, object param1);
    internal static string ValueCannotBeNull(object param0, object param1);
    internal static string SendParametersContentDoesNotSupportMessage(object param0, object param1);
    internal static string ReceiveParametersContentDoesNotSupportMessage(object param0, object param1);
    internal static string ReceiveAndReceiveParametersHaveSameName(object param0);
    internal static string TwoReceivesWithSameNameButDifferentIsOneWay(object param0);
    internal static string TwoReceivesWithSameNameButDifferentAction(object param0);
    internal static string TwoReceivesWithSameNameButDifferentValueType(object param0);
    internal static string TwoReceivesWithSameNameButDifferentTxProperties(object param0);
    internal static string TwoSendRepliesWithSameNameButDifferentAction(object param0);
    internal static string TwoSendRepliesWithSameNameButDifferentValueType(object param0);
    internal static string TwoReceiveParametersWithSameNameButDifferentParameterCount(object param0);
    internal static string TwoReceiveParametersWithSameNameButDifferentParameterName(object param0);
    internal static string TwoReceiveParametersWithSameNameButDifferentParameterType(object param0);
    internal static string TwoSendReplyParametersWithSameNameButDifferentParameterCount(object param0);
    internal static string TwoSendReplyParametersWithSameNameButDifferentParameterName(object param0);
    internal static string TwoSendReplyParametersWithSameNameButDifferentParameterType(object param0);
    internal static string MissingServiceContractName(object param0, object param1);
    internal static string ReceivePairedWithSendReplyAndSendReplyParameters(object param0);
    internal static string ArgumentCannotHaveNullOrVoidType(object param0, object param1);
    internal static string AbortInstanceOnTransactionFailureDoesNotMatch(object param0, object param1);
    internal static string ValueCannotBeNegative(object param0);
    internal static string ValueTooLarge(object param0);
    internal static string ConflictingValueName(object param0);
    internal static string WorkflowInstanceNotFoundInStore(object param0);
    internal static string BufferedReceiveRequiresReceiveContext(object param0);
    internal static string ConnectionStringNameWrong(object param0);
    internal static string WindowsGroupNotFound(object param0);
    internal static string BusyCountTraceFormatString(object param0);
    internal static string FailedToLoadBindingInControlEndpoint(object param0, object param1, object param2);
    internal static string FailedToCreateSecurityToken(object param0);
    internal static string UriBaseMustBeSpecified(object param0);
    internal static string UnableToDeserializeHttpResponseContent(object param0);
    internal static string RequestMustBeSpecified(object param0);
    internal static string ResultMustBeSpecified(object param0);
    internal static string DifferentWorkflowServiceNameNotSupported(object param0, object param1);
    internal static string DuplicateDefinitionIdentity(object param0);
    internal static string OperationNotFound(object param0, object param1);
    internal static string WorkflowServiceDefinitionIdentityNotMatched(object param0);
    internal static string PropertyMismatch(object param0, object param1, object param2, object param3, object param4);
    internal static string DuplicatedContract(object param0, object param1);
    internal static string ExtraParameter(object param0, object param1, object param2);
    internal static string FaultTypeMismatch(object param0, object param1, object param2);
    internal static string FirstParameterDoesnotMatchTheReturnValue(object param0, object param1, object param2, object param3);
    internal static string MessageCannotBeEmpty(object param0, object param1);
    internal static string MessageContentCannotHaveMoreThanOneParameter(object param0, object param1);
    internal static string MessageHeaderNotSupported(object param0, object param1);
    internal static string MessagePropertyIsNotSupported(object param0, object param1);
    internal static string MissingKnownTypes(object param0, object param1, object param2);
    internal static string MissingParameter(object param0, object param1, object param2);
    internal static string NotSupportMoreThanOneParametersInMessageContract(object param0, object param1);
    internal static string OperationDoesNotExistInContract(object param0, object param1, object param2);
    internal static string OperationIsNotImplemented(object param0, object param1);
    internal static string ParameterNumberMismatch(object param0, object param1, object param2);
    internal static string ParameterPositionMismatch(object param0, object param1, object param2, object param3);
    internal static string ParameterTypeMismatch(object param0, object param1, object param2, object param3);
    internal static string ProtectionLevelIsNotSupported(object param0, object param1);
    internal static string ProtectionLevelNotSupported(object param0, object param1);
    internal static string ReceiveIsInTRSWhenTransactionFlowNotAllowed(object param0, object param1);
    internal static string ReceiveIsNotInTRS(object param0, object param1);
    internal static string ReturnValueMissing(object param0, object param1, object param2);
    internal static string TwoWayIsImplementedAsOneWay(object param0, object param1);
    internal static string UnwrappedMessageNotSupported(object param0, object param1);
    internal static string WrapperNotSupportedInMessageContract(object param0, object param1);
    internal static string MisuseOfParameterContent(object param0, object param1);
    internal static string MessageTypeMismatch(object param0, object param1, object param2);
    internal static string TargetContractCannotBeOneWayWithTransactionFlow(object param0, object param1);
    internal static string MisuseOfMessageContent(object param0, object param1);
    internal static string OnewayContractIsImplementedAsTwoWay(object param0, object param1);
    internal static string ExtensionTypeNotSupported(object param0);
    internal static string InvalidDataFromReceiveBookmarkState(object param0);
    internal static string InvalidDataFromSendBookmarkState(object param0);
    internal static string SendActivityCorrelationHandleNotFound(object param0);
    internal static string FailedToInitializeRequestReplyCorrelationHandle(object param0);
}
internal class System.ServiceModel.Activities.TD : object {
    internal static CultureInfo Culture { get; internal set; }
    private static TD();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static bool MaxInstancesExceededIsEnabled();
    internal static void MaxInstancesExceeded(int limit);
    internal static bool InferredContractDescriptionIsEnabled();
    internal static void InferredContractDescription(string param0, string param1);
    internal static bool InferredOperationDescriptionIsEnabled();
    internal static void InferredOperationDescription(string param0, string param1, string param2);
    internal static bool DuplicateCorrelationQueryIsEnabled();
    internal static void DuplicateCorrelationQuery(string param0);
    internal static bool ServiceEndpointAddedIsEnabled();
    internal static void ServiceEndpointAdded(string param0, string param1, string param2);
    internal static bool StartSignpostEventIsEnabled();
    internal static void StartSignpostEvent(TraceRecord traceRecord);
    internal static bool StopSignpostEventIsEnabled();
    internal static void StopSignpostEvent(TraceRecord traceRecord);
    internal static bool BufferOutOfOrderMessageNoInstanceIsEnabled();
    internal static void BufferOutOfOrderMessageNoInstance(string param0);
    internal static bool BufferOutOfOrderMessageNoBookmarkIsEnabled();
    internal static void BufferOutOfOrderMessageNoBookmark(EventTraceActivity eventTraceActivity, string param0, string param1);
    internal static bool MaxPendingMessagesPerChannelExceededIsEnabled();
    internal static void MaxPendingMessagesPerChannelExceeded(int limit);
    internal static bool CreateWorkflowServiceHostStartIsEnabled();
    internal static void CreateWorkflowServiceHostStart();
    internal static bool CreateWorkflowServiceHostStopIsEnabled();
    internal static void CreateWorkflowServiceHostStop();
    internal static bool TransactedReceiveScopeEndCommitFailedIsEnabled();
    internal static void TransactedReceiveScopeEndCommitFailed(string param0, string param1);
    internal static bool TrackingProfileNotFoundIsEnabled();
    internal static void TrackingProfileNotFound(string TrackingProfile, string ActivityDefinitionId);
    internal static bool TraceCorrelationKeysIsEnabled();
    internal static void TraceCorrelationKeys(Guid InstanceKey, string Values, string ParentScope);
    internal static bool SendMessageChannelCacheMissIsEnabled();
    internal static void SendMessageChannelCacheMiss();
    internal static bool WfMessageSentIsEnabled();
    internal static void WfMessageSent(EventTraceActivity eventTraceActivity, Guid relatedActivityId);
    internal static bool WfMessageReceivedIsEnabled();
    internal static void WfMessageReceived(EventTraceActivity eventTraceActivity, Guid relatedActivityId);
    internal static bool PendingMessagesPerChannelRatioIsEnabled();
    internal static void PendingMessagesPerChannelRatio(int cur, int max);
}
internal class System.ServiceModel.Activities.ToReply : NativeActivity {
    public IDispatchMessageFormatter Formatter { get; public set; }
    public IDispatchFaultFormatter FaultFormatter { get; public set; }
    public bool IncludeExceptionDetailInFaults { get; public set; }
    public InArgument Result { get; public set; }
    public Collection`1<InArgument> Parameters { get; }
    public InArgument`1<CorrelationHandle> CorrelatesWith { get; public set; }
    public OutArgument`1<Message> Message { get; public set; }
    public IDispatchMessageFormatter get_Formatter();
    public void set_Formatter(IDispatchMessageFormatter value);
    public IDispatchFaultFormatter get_FaultFormatter();
    public void set_FaultFormatter(IDispatchFaultFormatter value);
    [CompilerGeneratedAttribute]
public bool get_IncludeExceptionDetailInFaults();
    [CompilerGeneratedAttribute]
public void set_IncludeExceptionDetailInFaults(bool value);
    [CompilerGeneratedAttribute]
public InArgument get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(InArgument value);
    public Collection`1<InArgument> get_Parameters();
    [CompilerGeneratedAttribute]
public InArgument`1<CorrelationHandle> get_CorrelatesWith();
    [CompilerGeneratedAttribute]
public void set_CorrelatesWith(InArgument`1<CorrelationHandle> value);
    [CompilerGeneratedAttribute]
public OutArgument`1<Message> get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(OutArgument`1<Message> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
internal class System.ServiceModel.Activities.ToRequest : CodeActivity {
    public Send Send { get; public set; }
    public IClientMessageFormatter Formatter { get; public set; }
    public Collection`1<InArgument> Parameters { get; }
    public OutArgument`1<Message> Message { get; public set; }
    internal MessageVersion MessageVersion { get; }
    [CompilerGeneratedAttribute]
public Send get_Send();
    [CompilerGeneratedAttribute]
public void set_Send(Send value);
    [CompilerGeneratedAttribute]
public IClientMessageFormatter get_Formatter();
    [CompilerGeneratedAttribute]
public void set_Formatter(IClientMessageFormatter value);
    public Collection`1<InArgument> get_Parameters();
    [CompilerGeneratedAttribute]
public OutArgument`1<Message> get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(OutArgument`1<Message> value);
    internal MessageVersion get_MessageVersion();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual void Execute(CodeActivityContext context);
}
public class System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement : TrackingQueryElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("activityName")]
public string ActivityName { get; public set; }
    [ConfigurationPropertyAttribute("childActivityName")]
[StringValidatorAttribute]
public string ChildActivityName { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_ActivityName();
    public void set_ActivityName(string value);
    public string get_ChildActivityName();
    public void set_ChildActivityName(string value);
    protected virtual TrackingQuery NewTrackingQuery();
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.ActivityScheduledQueryElementCollection : TrackingConfigurationCollection`1<ActivityScheduledQueryElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
public class System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement : TrackingQueryElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("activityName")]
[StringValidatorAttribute]
public string ActivityName { get; public set; }
    [ConfigurationPropertyAttribute("states")]
public StateElementCollection States { get; }
    [ConfigurationPropertyAttribute("variables")]
public VariableElementCollection Variables { get; }
    [ConfigurationPropertyAttribute("arguments")]
public ArgumentElementCollection Arguments { get; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_ActivityName();
    public void set_ActivityName(string value);
    public StateElementCollection get_States();
    public VariableElementCollection get_Variables();
    public ArgumentElementCollection get_Arguments();
    protected virtual TrackingQuery NewTrackingQuery();
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.ActivityStateQueryElementCollection : TrackingConfigurationCollection`1<ActivityStateQueryElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
public class System.ServiceModel.Activities.Tracking.Configuration.AnnotationElement : TrackingConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    public object ElementKey { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("value")]
[StringValidatorAttribute]
public string Value { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual object get_ElementKey();
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.AnnotationElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.AnnotationElementCollection : TrackingConfigurationCollection`1<AnnotationElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
public class System.ServiceModel.Activities.Tracking.Configuration.ArgumentElement : TrackingConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    public object ElementKey { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual object get_ElementKey();
    public string get_Name();
    public void set_Name(string value);
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.ArgumentElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.ArgumentElementCollection : TrackingConfigurationCollection`1<ArgumentElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
public class System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElement : TrackingQueryElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    protected virtual TrackingQuery NewTrackingQuery();
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.BookmarkResumptionQueryElementCollection : TrackingConfigurationCollection`1<BookmarkResumptionQueryElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
public class System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement : TrackingQueryElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("activityName")]
public string ActivityName { get; public set; }
    [ConfigurationPropertyAttribute("childActivityName")]
[StringValidatorAttribute]
public string ChildActivityName { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_ActivityName();
    public void set_ActivityName(string value);
    public string get_ChildActivityName();
    public void set_ChildActivityName(string value);
    protected virtual TrackingQuery NewTrackingQuery();
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.CancelRequestedQueryElementCollection : TrackingConfigurationCollection`1<CancelRequestedQueryElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
public class System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElement : TrackingQueryElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("activityName")]
[StringValidatorAttribute]
public string ActivityName { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public string get_ActivityName();
    public void set_ActivityName(string value);
    protected virtual TrackingQuery NewTrackingQuery();
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.CustomTrackingQueryElementCollection : TrackingConfigurationCollection`1<CustomTrackingQueryElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
public class System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement : TrackingQueryElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("faultSourceActivityName")]
[StringValidatorAttribute]
public string FaultSourceActivityName { get; public set; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("faultHandlerActivityName")]
public string FaultHandlerActivityName { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_FaultSourceActivityName();
    public void set_FaultSourceActivityName(string value);
    public string get_FaultHandlerActivityName();
    public void set_FaultHandlerActivityName(string value);
    protected virtual TrackingQuery NewTrackingQuery();
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.FaultPropagationQueryElementCollection : TrackingConfigurationCollection`1<FaultPropagationQueryElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
internal static class System.ServiceModel.Activities.Tracking.Configuration.ImplementationVisibilityHelper : object {
    public static bool IsDefined(ImplementationVisibility value);
}
public class System.ServiceModel.Activities.Tracking.Configuration.ProfileElement : TrackingConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    public object ElementKey { get; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("implementationVisibility")]
[ServiceModelActivitiesEnumValidatorAttribute("System.ServiceModel.Activities.Tracking.Configuration.ImplementationVisibilityHelper")]
public ImplementationVisibility ImplementationVisibility { get; public set; }
    [ConfigurationPropertyAttribute("")]
public ProfileWorkflowElementCollection Workflows { get; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual object get_ElementKey();
    public string get_Name();
    public void set_Name(string value);
    public ImplementationVisibility get_ImplementationVisibility();
    public void set_ImplementationVisibility(ImplementationVisibility value);
    public ProfileWorkflowElementCollection get_Workflows();
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.ProfileElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.ProfileElementCollection : TrackingConfigurationCollection`1<ProfileElement> {
    public ConfigurationElementCollectionType CollectionType { get; }
    public virtual ConfigurationElementCollectionType get_CollectionType();
}
public class System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement : TrackingConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    public object ElementKey { get; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("activityDefinitionId")]
public string ActivityDefinitionId { get; public set; }
    [ConfigurationPropertyAttribute("workflowInstanceQueries")]
public WorkflowInstanceQueryElementCollection WorkflowInstanceQueries { get; }
    [ConfigurationPropertyAttribute("activityStateQueries")]
public ActivityStateQueryElementCollection ActivityStateQueries { get; }
    [ConfigurationPropertyAttribute("activityScheduledQueries")]
public ActivityScheduledQueryElementCollection ActivityScheduledQueries { get; }
    [ConfigurationPropertyAttribute("cancelRequestedQueries")]
public CancelRequestedQueryElementCollection CancelRequestedQueries { get; }
    [ConfigurationPropertyAttribute("faultPropagationQueries")]
public FaultPropagationQueryElementCollection FaultPropagationQueries { get; }
    [ConfigurationPropertyAttribute("bookmarkResumptionQueries")]
public BookmarkResumptionQueryElementCollection BookmarkResumptionQueries { get; }
    [ConfigurationPropertyAttribute("customTrackingQueries")]
public CustomTrackingQueryElementCollection CustomTrackingQueries { get; }
    [ConfigurationPropertyAttribute("stateMachineStateQueries")]
public StateMachineStateQueryElementCollection StateMachineStateQueries { get; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual object get_ElementKey();
    public string get_ActivityDefinitionId();
    public void set_ActivityDefinitionId(string value);
    public WorkflowInstanceQueryElementCollection get_WorkflowInstanceQueries();
    public ActivityStateQueryElementCollection get_ActivityStateQueries();
    public ActivityScheduledQueryElementCollection get_ActivityScheduledQueries();
    public CancelRequestedQueryElementCollection get_CancelRequestedQueries();
    public FaultPropagationQueryElementCollection get_FaultPropagationQueries();
    public BookmarkResumptionQueryElementCollection get_BookmarkResumptionQueries();
    public CustomTrackingQueryElementCollection get_CustomTrackingQueries();
    public StateMachineStateQueryElementCollection get_StateMachineStateQueries();
    internal void AddQueries(Collection`1<TrackingQuery> queries);
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.ProfileWorkflowElementCollection : TrackingConfigurationCollection`1<ProfileWorkflowElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
public class System.ServiceModel.Activities.Tracking.Configuration.StateElement : TrackingConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    public object ElementKey { get; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual object get_ElementKey();
    public string get_Name();
    public void set_Name(string value);
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.StateElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.StateElementCollection : TrackingConfigurationCollection`1<StateElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
public class System.ServiceModel.Activities.Tracking.Configuration.StateMachineStateQueryElement : TrackingQueryElement {
    [ConfigurationPropertyAttribute("activityName")]
[StringValidatorAttribute]
public string ActivityName { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    private static StateMachineStateQueryElement();
    public string get_ActivityName();
    public void set_ActivityName(string value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected virtual TrackingQuery NewTrackingQuery();
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.StateMachineStateQueryElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.StateMachineStateQueryElementCollection : TrackingConfigurationCollection`1<StateMachineStateQueryElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
[DefaultMemberAttribute("Item")]
public class System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationCollection`1 : ConfigurationElementCollection {
    public ConfigurationElementCollectionType CollectionType { get; }
    public TConfigurationElement Item { get; public set; }
    public virtual ConfigurationElementCollectionType get_CollectionType();
    public TConfigurationElement get_Item(int index);
    public void set_Item(int index, TConfigurationElement value);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(TConfigurationElement element);
    public void Clear();
    public int IndexOf(TConfigurationElement element);
    public void Remove(TConfigurationElement element);
    public void RemoveAt(int index);
}
public abstract class System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationElement : ConfigurationElement {
    public object ElementKey { get; }
    public abstract virtual object get_ElementKey();
    protected static string GetStringPairKey(string value1, string value2);
}
internal static class System.ServiceModel.Activities.Tracking.Configuration.TrackingConfigurationStrings : object {
    internal static string ActivityDefinitionId;
    internal static string ActivityName;
    internal static string ActivityQueries;
    internal static string ActivityQuery;
    internal static string ActivityScheduledQueries;
    internal static string ActivityScheduledQuery;
    internal static string ArgumentQueries;
    internal static string ArgumentQuery;
    internal static string StarWildcard;
    internal static string Annotation;
    internal static string Annotations;
    internal static string BookmarkResumptionQueries;
    internal static string BookmarkResumptionQuery;
    internal static string CancelRequestedQueries;
    internal static string CancelRequestedQuery;
    internal static string ChildActivityName;
    internal static string Clear;
    internal static string FaultHandlerActivityName;
    internal static string FaultSourceActivityName;
    internal static string FaultPropagationQueries;
    internal static string FaultPropagationQuery;
    internal static string ImplementationVisibility;
    internal static string Name;
    internal static string Profiles;
    internal static string Remove;
    internal static string State;
    internal static string States;
    internal static string Tracking;
    internal static string TrackingProfile;
    internal static string CustomTrackingQueries;
    internal static string CustomTrackingQuery;
    internal static string StateMachineStateQueries;
    internal static string StateMachineStateQuery;
    internal static string Value;
    internal static string VariableQueries;
    internal static string VariableQuery;
    internal static string Workflow;
    internal static string WorkflowInstanceQuery;
    internal static string WorkflowInstanceQueries;
}
public abstract class System.ServiceModel.Activities.Tracking.Configuration.TrackingQueryElement : TrackingConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("annotations")]
public AnnotationElementCollection Annotations { get; }
    public object ElementKey { get; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public AnnotationElementCollection get_Annotations();
    public virtual object get_ElementKey();
    internal TrackingQuery CreateTrackingQuery();
    protected abstract virtual TrackingQuery NewTrackingQuery();
    protected virtual void UpdateTrackingQuery(TrackingQuery trackingQuery);
}
public class System.ServiceModel.Activities.Tracking.Configuration.TrackingSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("profiles")]
public ProfileElementCollection Profiles { get; }
    public Collection`1<TrackingProfile> TrackingProfiles { get; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public ProfileElementCollection get_Profiles();
    public Collection`1<TrackingProfile> get_TrackingProfiles();
}
public class System.ServiceModel.Activities.Tracking.Configuration.VariableElement : TrackingConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    public object ElementKey { get; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual object get_ElementKey();
    public string get_Name();
    public void set_Name(string value);
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.VariableElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.VariableElementCollection : TrackingConfigurationCollection`1<VariableElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
public class System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElement : TrackingQueryElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("states")]
public StateElementCollection States { get; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public StateElementCollection get_States();
    protected virtual TrackingQuery NewTrackingQuery();
}
[ConfigurationCollectionAttribute("System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElement")]
public class System.ServiceModel.Activities.Tracking.Configuration.WorkflowInstanceQueryElementCollection : TrackingConfigurationCollection`1<WorkflowInstanceQueryElement> {
    protected string ElementName { get; }
    protected virtual string get_ElementName();
}
internal class System.ServiceModel.Activities.Tracking.DefaultProfileManager : TrackingProfileManager {
    public virtual TrackingProfile Load(string profileName, string activityDefinitionId, TimeSpan timeout);
    internal TrackingProfile GetProfile(string profileName, string activityDefinitionId);
}
public class System.ServiceModel.Activities.Tracking.ReceiveMessageRecord : CustomTrackingRecord {
    public Guid E2EActivityId { get; internal set; }
    public Guid MessageId { get; }
    public ReceiveMessageRecord(string name);
    protected ReceiveMessageRecord(ReceiveMessageRecord record);
    public Guid get_E2EActivityId();
    internal void set_E2EActivityId(Guid value);
    public Guid get_MessageId();
    protected virtual TrackingRecord Clone();
}
public class System.ServiceModel.Activities.Tracking.SendMessageRecord : CustomTrackingRecord {
    public Guid E2EActivityId { get; public set; }
    public SendMessageRecord(string name);
    protected SendMessageRecord(SendMessageRecord record);
    public void set_E2EActivityId(Guid value);
    public Guid get_E2EActivityId();
    protected virtual TrackingRecord Clone();
}
internal abstract class System.ServiceModel.Activities.Tracking.TrackingProfileManager : object {
    public virtual IAsyncResult BeginLoad(string profileName, string activityDefinitionId, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual TrackingProfile Load(string profileName, string activityDefinitionId, TimeSpan timeout);
    public virtual TrackingProfile EndLoad(IAsyncResult result);
}
[DataContractAttribute]
internal class System.ServiceModel.Activities.TransactedReceiveData : object {
    public static string TransactedReceiveDataExecutionPropertyName { get; }
    public Transaction InitiatingTransaction { get; public set; }
    public static string get_TransactedReceiveDataExecutionPropertyName();
    [CompilerGeneratedAttribute]
public Transaction get_InitiatingTransaction();
    [CompilerGeneratedAttribute]
public void set_InitiatingTransaction(Transaction value);
}
[ContentPropertyAttribute("Body")]
public class System.ServiceModel.Activities.TransactedReceiveScope : NativeActivity {
    [DefaultValueAttribute("")]
public Receive Request { get; public set; }
    [DefaultValueAttribute("")]
public Activity Body { get; public set; }
    public Collection`1<Variable> Variables { get; }
    internal static AsyncCallback TransactionCommitAsyncCallback { get; }
    [CompilerGeneratedAttribute]
public Receive get_Request();
    [CompilerGeneratedAttribute]
public void set_Request(Receive value);
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    public Collection`1<Variable> get_Variables();
    internal static AsyncCallback get_TransactionCommitAsyncCallback();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
public class System.ServiceModel.Activities.WorkflowControlClient : ClientBase`1<IWorkflowInstanceManagement> {
    public WorkflowControlClient(string endpointConfigurationName);
    public WorkflowControlClient(string endpointConfigurationName, EndpointAddress remoteAddress);
    public WorkflowControlClient(string endpointConfigurationName, string remoteAddress);
    public WorkflowControlClient(Binding binding, EndpointAddress remoteAddress);
    public WorkflowControlClient(WorkflowControlEndpoint workflowEndpoint);
    public void add_AbandonCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_AbandonCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_CancelCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_CancelCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_RunCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_RunCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_SuspendCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_SuspendCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_UnsuspendCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_UnsuspendCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_TerminateCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_TerminateCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void Abandon(Guid instanceId);
    public void Abandon(Guid instanceId, string reason);
    public void AbandonAsync(Guid instanceId);
    public void AbandonAsync(Guid instanceId, object userState);
    public void AbandonAsync(Guid instanceId, string reason);
    public void AbandonAsync(Guid instanceId, string reason, object userState);
    public void Cancel(Guid instanceId);
    public void CancelAsync(Guid instanceId);
    public void CancelAsync(Guid instanceId, object userState);
    public void Run(Guid instanceId);
    public void RunAsync(Guid instanceId);
    public void RunAsync(Guid instanceId, object userState);
    public void Suspend(Guid instanceId);
    public void Suspend(Guid instanceId, string reason);
    public void SuspendAsync(Guid instanceId);
    public void SuspendAsync(Guid instanceId, string reason);
    public void SuspendAsync(Guid instanceId, object userState);
    public void SuspendAsync(Guid instanceId, string reason, object userState);
    public void Unsuspend(Guid instanceId);
    public void UnsuspendAsync(Guid instanceId);
    public void UnsuspendAsync(Guid instanceId, object userState);
    public void Terminate(Guid instanceId);
    public void Terminate(Guid instanceId, string reason);
    public void TerminateAsync(Guid instanceId);
    public void TerminateAsync(Guid instanceId, string reason);
    public void TerminateAsync(Guid instanceId, object userState);
    public void TerminateAsync(Guid instanceId, string reason, object userState);
    public IAsyncResult BeginAbandon(Guid instanceId, AsyncCallback callback, object state);
    public IAsyncResult BeginAbandon(Guid instanceId, string reason, AsyncCallback callback, object state);
    public void EndAbandon(IAsyncResult result);
    public IAsyncResult BeginCancel(Guid instanceId, AsyncCallback callback, object state);
    public void EndCancel(IAsyncResult result);
    public IAsyncResult BeginRun(Guid instanceId, AsyncCallback callback, object state);
    public void EndRun(IAsyncResult result);
    public IAsyncResult BeginSuspend(Guid instanceId, AsyncCallback callback, object state);
    public IAsyncResult BeginSuspend(Guid instanceId, string reason, AsyncCallback callback, object state);
    public void EndSuspend(IAsyncResult result);
    public IAsyncResult BeginUnsuspend(Guid instanceId, AsyncCallback callback, object state);
    public void EndUnsuspend(IAsyncResult result);
    public IAsyncResult BeginTerminate(Guid instanceId, AsyncCallback callback, object state);
    public IAsyncResult BeginTerminate(Guid instanceId, string reason, AsyncCallback callback, object state);
    public void EndTerminate(IAsyncResult result);
}
public class System.ServiceModel.Activities.WorkflowControlEndpoint : ServiceEndpoint {
    internal static ContractDescription WorkflowControlServiceBaseContract { get; }
    internal static ContractDescription WorkflowControlServiceContract { get; }
    public WorkflowControlEndpoint(Binding binding, EndpointAddress address);
    private static WorkflowControlEndpoint();
    internal static ContractDescription get_WorkflowControlServiceBaseContract();
    internal static ContractDescription get_WorkflowControlServiceContract();
}
[DataContractAttribute]
public class System.ServiceModel.Activities.WorkflowCreationContext : object {
    public IDictionary`2<string, object> WorkflowArguments { get; }
    internal IDictionary`2<string, object> RawWorkflowArguments { get; }
    [DataMemberAttribute]
public bool CreateOnly { get; public set; }
    [DataMemberAttribute]
public bool IsCompletionTransactionRequired { get; public set; }
    public IDictionary`2<string, object> get_WorkflowArguments();
    internal IDictionary`2<string, object> get_RawWorkflowArguments();
    [CompilerGeneratedAttribute]
public bool get_CreateOnly();
    [CompilerGeneratedAttribute]
public void set_CreateOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsCompletionTransactionRequired();
    [CompilerGeneratedAttribute]
public void set_IsCompletionTransactionRequired(bool value);
    protected internal virtual IAsyncResult OnBeginWorkflowCompleted(ActivityInstanceState completionState, IDictionary`2<string, object> workflowOutputs, Exception terminationException, TimeSpan timeout, AsyncCallback callback, object state);
    protected internal virtual void OnEndWorkflowCompleted(IAsyncResult result);
    protected internal virtual void OnAbort();
}
internal class System.ServiceModel.Activities.WorkflowDefinitionProvider : object {
    public ICollection`1<WorkflowService> SupportedVersions { get; }
    public WorkflowIdentity DefaultDefinitionIdentity { get; }
    public WorkflowDefinitionProvider(WorkflowService workflowService, WorkflowServiceHost wfsh);
    public ICollection`1<WorkflowService> get_SupportedVersions();
    public WorkflowIdentity get_DefaultDefinitionIdentity();
    public void GetDefinitionIdentityMetadata(IDictionary`2<XName, InstanceValue> metadataCollection);
    public bool TryGetDefinition(WorkflowIdentity workflowIdentity, Activity& workflowDefinition);
    public bool TryGetDefinitionAndMap(WorkflowIdentity currentIdentity, WorkflowIdentity updatedIdentity, Activity& workflowDefinition, DynamicUpdateMap& updateMap);
}
internal class System.ServiceModel.Activities.WorkflowGetInstanceContext : object {
    public WorkflowHostingEndpoint WorkflowHostingEndpoint { get; public set; }
    public bool CanCreateInstance { get; public set; }
    public Object[] Inputs { get; public set; }
    public OperationContext OperationContext { get; public set; }
    public WorkflowCreationContext WorkflowCreationContext { get; public set; }
    public WorkflowHostingResponseContext WorkflowHostingResponseContext { get; public set; }
    [CompilerGeneratedAttribute]
public WorkflowHostingEndpoint get_WorkflowHostingEndpoint();
    [CompilerGeneratedAttribute]
public void set_WorkflowHostingEndpoint(WorkflowHostingEndpoint value);
    [CompilerGeneratedAttribute]
public bool get_CanCreateInstance();
    [CompilerGeneratedAttribute]
public void set_CanCreateInstance(bool value);
    [CompilerGeneratedAttribute]
public Object[] get_Inputs();
    [CompilerGeneratedAttribute]
public void set_Inputs(Object[] value);
    [CompilerGeneratedAttribute]
public OperationContext get_OperationContext();
    [CompilerGeneratedAttribute]
public void set_OperationContext(OperationContext value);
    [CompilerGeneratedAttribute]
public WorkflowCreationContext get_WorkflowCreationContext();
    [CompilerGeneratedAttribute]
public void set_WorkflowCreationContext(WorkflowCreationContext value);
    [CompilerGeneratedAttribute]
public WorkflowHostingResponseContext get_WorkflowHostingResponseContext();
    [CompilerGeneratedAttribute]
public void set_WorkflowHostingResponseContext(WorkflowHostingResponseContext value);
}
public abstract class System.ServiceModel.Activities.WorkflowHostingEndpoint : ServiceEndpoint {
    public Collection`1<CorrelationQuery> CorrelationQueries { get; }
    protected WorkflowHostingEndpoint(Type contractType);
    protected WorkflowHostingEndpoint(Type contractType, Binding binding, EndpointAddress address);
    public Collection`1<CorrelationQuery> get_CorrelationQueries();
    protected internal virtual Guid OnGetInstanceId(Object[] inputs, OperationContext operationContext);
    protected internal virtual WorkflowCreationContext OnGetCreationContext(Object[] inputs, OperationContext operationContext, Guid instanceId, WorkflowHostingResponseContext responseContext);
    protected internal virtual Bookmark OnResolveBookmark(Object[] inputs, OperationContext operationContext, WorkflowHostingResponseContext responseContext, Object& value);
    internal static FaultException CreateDispatchFaultException();
}
public class System.ServiceModel.Activities.WorkflowHostingResponseContext : object {
    internal WorkflowHostingResponseContext(WorkflowOperationContext context);
    public void SendResponse(object returnValue, Object[] outputs);
    internal IAsyncResult BeginGetResponse(TimeSpan timeout, AsyncCallback callback, object state);
    internal object EndGetResponse(IAsyncResult result, Object[]& outputs);
}
internal class System.ServiceModel.Activities.WorkflowIdentityKey : object {
    public WorkflowIdentity Identity { get; private set; }
    public WorkflowIdentityKey(WorkflowIdentity definitionIdentity);
    [CompilerGeneratedAttribute]
public WorkflowIdentity get_Identity();
    [CompilerGeneratedAttribute]
private void set_Identity(WorkflowIdentity value);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(WorkflowIdentityKey other);
}
internal class System.ServiceModel.Activities.WorkflowOperationContext : AsyncResult {
    public Object[] Inputs { get; }
    public OperationContext OperationContext { get; private set; }
    public ServiceEndpoint ServiceEndpoint { get; private set; }
    public Transaction CurrentTransaction { get; private set; }
    public object BookmarkValue { get; }
    public bool HasResponse { get; }
    public Guid E2EActivityId { get; }
    private static WorkflowOperationContext();
    public Object[] get_Inputs();
    [CompilerGeneratedAttribute]
public OperationContext get_OperationContext();
    [CompilerGeneratedAttribute]
private void set_OperationContext(OperationContext value);
    [CompilerGeneratedAttribute]
public ServiceEndpoint get_ServiceEndpoint();
    [CompilerGeneratedAttribute]
private void set_ServiceEndpoint(ServiceEndpoint value);
    [CompilerGeneratedAttribute]
public Transaction get_CurrentTransaction();
    [CompilerGeneratedAttribute]
private void set_CurrentTransaction(Transaction value);
    public object get_BookmarkValue();
    public bool get_HasResponse();
    public Guid get_E2EActivityId();
    public static IAsyncResult BeginProcessRequest(WorkflowServiceInstance workflowInstance, OperationContext operationContext, string operationName, Object[] inputs, bool performanceCountersEnabled, bool propagateActivity, Transaction currentTransaction, IInvokeReceivedNotification notification, WorkflowOperationBehavior behavior, ServiceEndpoint endpoint, TimeSpan timeout, AsyncCallback callback, object state);
    public static object EndProcessRequest(IAsyncResult result, Object[]& outputs);
    public void SendFault(Exception exception);
    public void SendReply(Message returnValue);
    public void SendReply(object returnValue, Object[] outputs);
    public void SetOperationCompleted();
}
[ContentPropertyAttribute("Body")]
public class System.ServiceModel.Activities.WorkflowService : object {
    [DefaultValueAttribute("")]
public Activity Body { get; public set; }
    [TypeConverterAttribute("System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter")]
[DefaultValueAttribute("")]
public XName Name { get; public set; }
    [DefaultValueAttribute("")]
public string ConfigurationName { get; public set; }
    [DefaultValueAttribute("False")]
public bool AllowBufferedReceive { get; public set; }
    public Collection`1<Endpoint> Endpoints { get; }
    [DefaultValueAttribute("")]
public WorkflowIdentity DefinitionIdentity { get; public set; }
    public Collection`1<Type> ImplementedContracts { get; }
    public IDictionary`2<WorkflowIdentity, DynamicUpdateMap> UpdateMaps { get; }
    internal bool HasImplementedContracts { get; }
    [DefaultValueAttribute("")]
internal Dictionary`2<OperationIdentifier, OperationProperty> OperationProperties { get; internal set; }
    internal XName InternalName { get; }
    internal IDictionary`2<XName, Collection`1<CorrelationQuery>> CorrelationQueries { get; }
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    [CompilerGeneratedAttribute]
public XName get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(XName value);
    [CompilerGeneratedAttribute]
public string get_ConfigurationName();
    [CompilerGeneratedAttribute]
public void set_ConfigurationName(string value);
    [CompilerGeneratedAttribute]
public bool get_AllowBufferedReceive();
    [CompilerGeneratedAttribute]
public void set_AllowBufferedReceive(bool value);
    public Collection`1<Endpoint> get_Endpoints();
    [CompilerGeneratedAttribute]
public WorkflowIdentity get_DefinitionIdentity();
    [CompilerGeneratedAttribute]
public void set_DefinitionIdentity(WorkflowIdentity value);
    public Collection`1<Type> get_ImplementedContracts();
    public IDictionary`2<WorkflowIdentity, DynamicUpdateMap> get_UpdateMaps();
    internal bool get_HasImplementedContracts();
    [CompilerGeneratedAttribute]
internal Dictionary`2<OperationIdentifier, OperationProperty> get_OperationProperties();
    [CompilerGeneratedAttribute]
internal void set_OperationProperties(Dictionary`2<OperationIdentifier, OperationProperty> value);
    internal XName get_InternalName();
    internal IDictionary`2<XName, Collection`1<CorrelationQuery>> get_CorrelationQueries();
    public sealed virtual Activity GetWorkflowRoot();
    internal ServiceDescription GetEmptyServiceDescription();
    public ValidationResults Validate(ValidationSettings settings);
    public virtual IDictionary`2<XName, ContractDescription> GetContractDescriptions();
    internal void ValidateForVersioning(WorkflowService baseWorkflowService);
    internal void DetachFromVersioning(WorkflowService baseWorkflowService);
    internal void ResetServiceDescription();
}
public class System.ServiceModel.Activities.WorkflowServiceHost : ServiceHostBase {
    public Activity Activity { get; }
    public WorkflowInstanceExtensionManager WorkflowExtensions { get; }
    public DurableInstancingOptions DurableInstancingOptions { get; }
    public ICollection`1<WorkflowService> SupportedVersions { get; }
    internal XName ServiceName { get; internal set; }
    internal TimeSpan PersistTimeout { get; internal set; }
    internal TimeSpan TrackTimeout { get; internal set; }
    internal TimeSpan FilterResumeTimeout { get; internal set; }
    internal DurableInstanceManager DurableInstanceManager { get; }
    internal bool IsLoadTransactionRequired { get; private set; }
    internal WorkflowUnhandledExceptionAction UnhandledExceptionAction { get; internal set; }
    internal TimeSpan IdleTimeToPersist { get; internal set; }
    internal TimeSpan IdleTimeToUnload { get; internal set; }
    internal bool IsConfigurable { get; }
    internal WorkflowServiceHostPerformanceCounters WorkflowServiceHostPerformanceCounters { get; }
    internal bool OverrideSiteName { get; internal set; }
    public WorkflowServiceHost(object serviceImplementation, Uri[] baseAddresses);
    public WorkflowServiceHost(Activity activity, Uri[] baseAddresses);
    public WorkflowServiceHost(WorkflowService serviceDefinition, Uri[] baseAddresses);
    private static WorkflowServiceHost();
    public Activity get_Activity();
    public WorkflowInstanceExtensionManager get_WorkflowExtensions();
    public DurableInstancingOptions get_DurableInstancingOptions();
    public ICollection`1<WorkflowService> get_SupportedVersions();
    [CompilerGeneratedAttribute]
internal XName get_ServiceName();
    [CompilerGeneratedAttribute]
internal void set_ServiceName(XName value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_PersistTimeout();
    [CompilerGeneratedAttribute]
internal void set_PersistTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_TrackTimeout();
    [CompilerGeneratedAttribute]
internal void set_TrackTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
internal TimeSpan get_FilterResumeTimeout();
    [CompilerGeneratedAttribute]
internal void set_FilterResumeTimeout(TimeSpan value);
    internal DurableInstanceManager get_DurableInstanceManager();
    [CompilerGeneratedAttribute]
internal bool get_IsLoadTransactionRequired();
    [CompilerGeneratedAttribute]
private void set_IsLoadTransactionRequired(bool value);
    internal WorkflowUnhandledExceptionAction get_UnhandledExceptionAction();
    internal void set_UnhandledExceptionAction(WorkflowUnhandledExceptionAction value);
    internal TimeSpan get_IdleTimeToPersist();
    internal void set_IdleTimeToPersist(TimeSpan value);
    internal TimeSpan get_IdleTimeToUnload();
    internal void set_IdleTimeToUnload(TimeSpan value);
    internal bool get_IsConfigurable();
    internal WorkflowServiceHostPerformanceCounters get_WorkflowServiceHostPerformanceCounters();
    [CompilerGeneratedAttribute]
internal bool get_OverrideSiteName();
    [CompilerGeneratedAttribute]
internal void set_OverrideSiteName(bool value);
    public ServiceEndpoint AddServiceEndpoint(XName serviceContractName, Binding binding, string address, Uri listenUri, string behaviorConfigurationName);
    public ServiceEndpoint AddServiceEndpoint(XName serviceContractName, Binding binding, Uri address, Uri listenUri, string behaviorConfigurationName);
    public ServiceEndpoint AddServiceEndpoint(string implementedContract, Binding binding, string address);
    public ServiceEndpoint AddServiceEndpoint(string implementedContract, Binding binding, Uri address);
    public ServiceEndpoint AddServiceEndpoint(string implementedContract, Binding binding, string address, Uri listenUri);
    public ServiceEndpoint AddServiceEndpoint(string implementedContract, Binding binding, Uri address, Uri listenUri);
    public virtual void AddServiceEndpoint(ServiceEndpoint endpoint);
    internal virtual void AddDefaultEndpoints(Binding defaultBinding, List`1<ServiceEndpoint> defaultEndpoints);
    protected virtual ServiceDescription CreateDescription(IDictionary`2& implementedContracts);
    protected virtual void InitializeRuntime();
    internal virtual void AfterInitializeRuntime(TimeSpan timeout);
    internal virtual IAsyncResult BeginAfterInitializeRuntime(TimeSpan timeout, AsyncCallback callback, object state);
    internal virtual void EndAfterInitializeRuntime(IAsyncResult result);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnAbort();
    internal void FaultServiceHostIfNecessary(Exception exception);
}
public class System.ServiceModel.Activities.WorkflowUpdateableControlClient : ClientBase`1<IWorkflowUpdateableInstanceManagement> {
    public WorkflowUpdateableControlClient(string endpointConfigurationName);
    public WorkflowUpdateableControlClient(string endpointConfigurationName, EndpointAddress remoteAddress);
    public WorkflowUpdateableControlClient(string endpointConfigurationName, string remoteAddress);
    public WorkflowUpdateableControlClient(Binding binding, EndpointAddress remoteAddress);
    public WorkflowUpdateableControlClient(WorkflowControlEndpoint workflowEndpoint);
    public void add_AbandonCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_AbandonCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_CancelCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_CancelCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_RunCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_RunCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_SuspendCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_SuspendCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_UnsuspendCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_UnsuspendCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_TerminateCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_TerminateCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_UpdateCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_UpdateCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void Abandon(Guid instanceId);
    public void Abandon(Guid instanceId, string reason);
    public void AbandonAsync(Guid instanceId);
    public void AbandonAsync(Guid instanceId, object userState);
    public void AbandonAsync(Guid instanceId, string reason);
    public void AbandonAsync(Guid instanceId, string reason, object userState);
    public void Cancel(Guid instanceId);
    public void CancelAsync(Guid instanceId);
    public void CancelAsync(Guid instanceId, object userState);
    public void Run(Guid instanceId);
    public void RunAsync(Guid instanceId);
    public void RunAsync(Guid instanceId, object userState);
    public void Suspend(Guid instanceId);
    public void Suspend(Guid instanceId, string reason);
    public void SuspendAsync(Guid instanceId);
    public void SuspendAsync(Guid instanceId, string reason);
    public void SuspendAsync(Guid instanceId, object userState);
    public void SuspendAsync(Guid instanceId, string reason, object userState);
    public void Unsuspend(Guid instanceId);
    public void UnsuspendAsync(Guid instanceId);
    public void UnsuspendAsync(Guid instanceId, object userState);
    public void Terminate(Guid instanceId);
    public void Terminate(Guid instanceId, string reason);
    public void TerminateAsync(Guid instanceId);
    public void TerminateAsync(Guid instanceId, string reason);
    public void TerminateAsync(Guid instanceId, object userState);
    public void TerminateAsync(Guid instanceId, string reason, object userState);
    public void Update(Guid instanceId, WorkflowIdentity updatedDefinitionIdentity);
    public void UpdateAsync(Guid instanceId, WorkflowIdentity updatedDefinitionIdentity);
    public void UpdateAsync(Guid instanceId, WorkflowIdentity updatedDefinitionIdentity, object userState);
    public IAsyncResult BeginAbandon(Guid instanceId, AsyncCallback callback, object state);
    public IAsyncResult BeginAbandon(Guid instanceId, string reason, AsyncCallback callback, object state);
    public void EndAbandon(IAsyncResult result);
    public IAsyncResult BeginCancel(Guid instanceId, AsyncCallback callback, object state);
    public void EndCancel(IAsyncResult result);
    public IAsyncResult BeginRun(Guid instanceId, AsyncCallback callback, object state);
    public void EndRun(IAsyncResult result);
    public IAsyncResult BeginSuspend(Guid instanceId, AsyncCallback callback, object state);
    public IAsyncResult BeginSuspend(Guid instanceId, string reason, AsyncCallback callback, object state);
    public void EndSuspend(IAsyncResult result);
    public IAsyncResult BeginUnsuspend(Guid instanceId, AsyncCallback callback, object state);
    public void EndUnsuspend(IAsyncResult result);
    public IAsyncResult BeginTerminate(Guid instanceId, AsyncCallback callback, object state);
    public IAsyncResult BeginTerminate(Guid instanceId, string reason, AsyncCallback callback, object state);
    public void EndTerminate(IAsyncResult result);
    public IAsyncResult BeginUpdate(Guid instanceId, WorkflowIdentity updatedDefinitionIdentity, AsyncCallback callback, object state);
    public void EndUpdate(IAsyncResult result);
}
public class System.ServiceModel.CorrelationActionMessageFilter : MessageFilter {
    public string Action { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    public virtual bool Match(Message message);
    public virtual bool Match(MessageBuffer messageBuffer);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.ServiceModel.CorrelationQuery : object {
    [DefaultValueAttribute("")]
public MessageQuerySet Select { get; public set; }
    public Collection`1<MessageQuerySet> SelectAdditional { get; }
    [DefaultValueAttribute("")]
public MessageFilter Where { get; public set; }
    internal bool IsDefaultContextQuery { get; internal set; }
    [CompilerGeneratedAttribute]
public MessageQuerySet get_Select();
    [CompilerGeneratedAttribute]
public void set_Select(MessageQuerySet value);
    public Collection`1<MessageQuerySet> get_SelectAdditional();
    [CompilerGeneratedAttribute]
public MessageFilter get_Where();
    [CompilerGeneratedAttribute]
public void set_Where(MessageFilter value);
    [CompilerGeneratedAttribute]
internal bool get_IsDefaultContextQuery();
    [CompilerGeneratedAttribute]
internal void set_IsDefaultContextQuery(bool value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    internal static bool IsQueryCollectionSearchable(IEnumerable`1<CorrelationQuery> queries);
    internal static CorrelationQuery FindCorrelationQueryForAction(IEnumerable`1<CorrelationQuery> queries, string action);
    internal CorrelationQuery Clone();
}
public class System.ServiceModel.Endpoint : object {
    [DefaultValueAttribute("")]
public string BehaviorConfigurationName { get; public set; }
    [DefaultValueAttribute("")]
public Binding Binding { get; public set; }
    [TypeConverterAttribute("System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter")]
[DefaultValueAttribute("")]
public XName ServiceContractName { get; public set; }
    public Collection`1<AddressHeader> Headers { get; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.ServiceModel.XamlIntegration.EndpointIdentityConverter")]
public EndpointIdentity Identity { get; public set; }
    [DefaultValueAttribute("")]
public Uri ListenUri { get; public set; }
    [DefaultValueAttribute("")]
public string Name { get; public set; }
    [DefaultValueAttribute("")]
public Uri AddressUri { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BehaviorConfigurationName();
    [CompilerGeneratedAttribute]
public void set_BehaviorConfigurationName(string value);
    [CompilerGeneratedAttribute]
public Binding get_Binding();
    [CompilerGeneratedAttribute]
public void set_Binding(Binding value);
    [CompilerGeneratedAttribute]
public XName get_ServiceContractName();
    [CompilerGeneratedAttribute]
public void set_ServiceContractName(XName value);
    public Collection`1<AddressHeader> get_Headers();
    [CompilerGeneratedAttribute]
public EndpointIdentity get_Identity();
    [CompilerGeneratedAttribute]
public void set_Identity(EndpointIdentity value);
    [CompilerGeneratedAttribute]
public Uri get_ListenUri();
    [CompilerGeneratedAttribute]
public void set_ListenUri(Uri value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Uri get_AddressUri();
    [CompilerGeneratedAttribute]
public void set_AddressUri(Uri value);
    public EndpointAddress GetAddress();
    public EndpointAddress GetAddress(ServiceHostBase host);
}
[MarkupExtensionReturnTypeAttribute("System.ServiceModel.EndpointIdentity")]
public class System.ServiceModel.EndpointIdentityExtension : MarkupExtension {
    public string ClaimType { get; public set; }
    public string ClaimRight { get; public set; }
    public object ClaimResource { get; public set; }
    public EndpointIdentityExtension(EndpointIdentity identity);
    [CompilerGeneratedAttribute]
public string get_ClaimType();
    [CompilerGeneratedAttribute]
public void set_ClaimType(string value);
    [CompilerGeneratedAttribute]
public string get_ClaimRight();
    [CompilerGeneratedAttribute]
public void set_ClaimRight(string value);
    [CompilerGeneratedAttribute]
public object get_ClaimResource();
    [CompilerGeneratedAttribute]
public void set_ClaimResource(object value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class System.ServiceModel.MessageQuerySet : Dictionary`2<string, MessageQuery> {
    [DefaultValueAttribute("")]
public string Name { get; public set; }
    public MessageQuerySet(MessageQueryTable`1<string> queryTable);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public MessageQueryTable`1<string> GetMessageQueryTable();
}
public class System.ServiceModel.XamlIntegration.EndpointIdentityConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[MarkupExtensionReturnTypeAttribute("System.ServiceModel.SpnEndpointIdentity")]
public class System.ServiceModel.XamlIntegration.SpnEndpointIdentityExtension : MarkupExtension {
    public string SpnName { get; public set; }
    public SpnEndpointIdentityExtension(SpnEndpointIdentity identity);
    [CompilerGeneratedAttribute]
public string get_SpnName();
    [CompilerGeneratedAttribute]
public void set_SpnName(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
[MarkupExtensionReturnTypeAttribute("System.ServiceModel.UpnEndpointIdentity")]
public class System.ServiceModel.XamlIntegration.UpnEndpointIdentityExtension : MarkupExtension {
    public string UpnName { get; public set; }
    public UpnEndpointIdentityExtension(UpnEndpointIdentity identity);
    [CompilerGeneratedAttribute]
public string get_UpnName();
    [CompilerGeneratedAttribute]
public void set_UpnName(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
internal static class System.ServiceModel.XamlIntegration.XNameTypeConverterHelper : object {
    public static bool CanConvertFrom(Type sourceType);
    public static object ConvertFrom(ITypeDescriptorContext context, object value);
    public static bool CanConvertTo(Type destinationType);
    public static object ConvertTo(ITypeDescriptorContext context, object value, Type destinationType);
    internal static object ConvertFromHelper(ITypeDescriptorContext context, object value);
    internal static object ConvertToHelper(ITypeDescriptorContext context, object value, Type destinationType);
}
internal static class System.ServiceModel.XD2 : object {
}
