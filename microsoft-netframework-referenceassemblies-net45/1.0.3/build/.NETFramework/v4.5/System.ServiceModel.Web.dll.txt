internal static class System.Runtime.Serialization.Configuration.AppSettings : object {
    public static bool EnableAutomaticEndpointsCompatibility { get; }
    private static AppSettings();
    public static bool get_EnableAutomaticEndpointsCompatibility();
}
public class System.ServiceModel.Activation.WebScriptServiceHostFactory : ServiceHostFactory {
    protected virtual ServiceHost CreateServiceHost(Type serviceType, Uri[] baseAddresses);
}
public class System.ServiceModel.Activation.WebServiceHostFactory : ServiceHostFactory {
    protected virtual ServiceHost CreateServiceHost(Type serviceType, Uri[] baseAddresses);
}
internal class System.ServiceModel.Channels.HttpStreamMessage : Message {
    internal static string StreamElementName;
    public MessageHeaders Headers { get; }
    public bool IsEmpty { get; }
    public bool IsFault { get; }
    public MessageProperties Properties { get; }
    public MessageVersion Version { get; }
    public HttpStreamMessage(BodyWriter writer);
    public HttpStreamMessage(MessageHeaders headers, MessageProperties properties, BodyWriter bodyWriter);
    public virtual MessageHeaders get_Headers();
    public virtual bool get_IsEmpty();
    public virtual bool get_IsFault();
    public virtual MessageProperties get_Properties();
    public virtual MessageVersion get_Version();
    protected virtual void OnBodyToString(XmlDictionaryWriter writer);
    protected virtual void OnClose();
    protected virtual MessageBuffer OnCreateBufferedCopy(int maxBufferSize);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
}
public class System.ServiceModel.Channels.JavascriptCallbackResponseMessageProperty : object {
    public static string Name { get; }
    public string CallbackFunctionName { get; public set; }
    public Nullable`1<HttpStatusCode> StatusCode { get; public set; }
    private static JavascriptCallbackResponseMessageProperty();
    public static string get_Name();
    [CompilerGeneratedAttribute]
public string get_CallbackFunctionName();
    [CompilerGeneratedAttribute]
public void set_CallbackFunctionName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<HttpStatusCode> get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(Nullable`1<HttpStatusCode> value);
}
internal class System.ServiceModel.Channels.JavascriptXmlWriterWrapper : XmlDictionaryWriter {
    public JavascriptCallbackResponseMessageProperty JavascriptResponseMessageProperty { get; public set; }
    public XmlDictionaryWriter XmlJsonWriter { get; }
    public WriteState WriteState { get; }
    public JavascriptXmlWriterWrapper(Encoding encoding);
    [CompilerGeneratedAttribute]
public JavascriptCallbackResponseMessageProperty get_JavascriptResponseMessageProperty();
    [CompilerGeneratedAttribute]
public void set_JavascriptResponseMessageProperty(JavascriptCallbackResponseMessageProperty value);
    public XmlDictionaryWriter get_XmlJsonWriter();
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteComment(string text);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndAttribute();
    public virtual void WriteEndDocument();
    public virtual void WriteEndElement();
    public virtual void WriteEntityRef(string name);
    public virtual void WriteFullEndElement();
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteRaw(string data);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteStartDocument();
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual WriteState get_WriteState();
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public void SetOutput(Stream stream, XmlDictionaryWriter writer);
}
internal class System.ServiceModel.Channels.JsonMessageEncoderFactory : MessageEncoderFactory {
    public MessageEncoder Encoder { get; }
    public MessageVersion MessageVersion { get; }
    public JsonMessageEncoderFactory(Encoding writeEncoding, int maxReadPoolSize, int maxWritePoolSize, XmlDictionaryReaderQuotas quotas, bool crossDomainScriptAccessEnabled);
    private static JsonMessageEncoderFactory();
    public virtual MessageEncoder get_Encoder();
    public virtual MessageVersion get_MessageVersion();
    internal static string GetContentType(WebMessageEncodingBindingElement encodingElement);
}
internal class System.ServiceModel.Channels.RawContentTypeMapper : WebContentTypeMapper {
    public static RawContentTypeMapper Instance { get; }
    private static RawContentTypeMapper();
    public static RawContentTypeMapper get_Instance();
    public virtual WebContentFormat GetMessageFormatForContentType(string contentType);
}
public abstract class System.ServiceModel.Channels.StreamBodyWriter : BodyWriter {
    protected StreamBodyWriter(bool isBuffered);
    internal static StreamBodyWriter CreateStreamBodyWriter(Action`1<Stream> streamAction);
    protected abstract virtual void OnWriteBodyContents(Stream stream);
    protected virtual BodyWriter OnCreateBufferedCopy(int maxBufferSize);
    protected virtual void OnWriteBodyContents(XmlDictionaryWriter writer);
}
public class System.ServiceModel.Channels.WebBodyFormatMessageProperty : object {
    public static string Name;
    public WebContentFormat Format { get; }
    internal static WebBodyFormatMessageProperty JsonProperty { get; }
    internal static WebBodyFormatMessageProperty XmlProperty { get; }
    internal static WebBodyFormatMessageProperty RawProperty { get; }
    public WebBodyFormatMessageProperty(WebContentFormat format);
    public WebContentFormat get_Format();
    internal static WebBodyFormatMessageProperty get_JsonProperty();
    internal static WebBodyFormatMessageProperty get_XmlProperty();
    internal static WebBodyFormatMessageProperty get_RawProperty();
    public sealed virtual IMessageProperty CreateCopy();
    public virtual string ToString();
}
public enum System.ServiceModel.Channels.WebContentFormat : Enum {
    public int value__;
    public static WebContentFormat Default;
    public static WebContentFormat Xml;
    public static WebContentFormat Json;
    public static WebContentFormat Raw;
}
internal static class System.ServiceModel.Channels.WebContentFormatHelper : object {
    internal static bool IsDefined(WebContentFormat format);
}
public abstract class System.ServiceModel.Channels.WebContentTypeMapper : object {
    public abstract virtual WebContentFormat GetMessageFormatForContentType(string contentType);
}
internal static class System.ServiceModel.Channels.WebHttpBindingDefaults : object {
    internal static TransferMode TransferMode;
}
internal class System.ServiceModel.Channels.WebMessageEncoderFactory : MessageEncoderFactory {
    public MessageEncoder Encoder { get; }
    public MessageVersion MessageVersion { get; }
    public WebMessageEncoderFactory(Encoding writeEncoding, int maxReadPoolSize, int maxWritePoolSize, XmlDictionaryReaderQuotas quotas, WebContentTypeMapper contentTypeMapper, bool javascriptCallbackEnabled);
    public virtual MessageEncoder get_Encoder();
    public virtual MessageVersion get_MessageVersion();
    internal static string GetContentType(string mediaType, Encoding encoding);
}
public class System.ServiceModel.Channels.WebMessageEncodingBindingElement : MessageEncodingBindingElement {
    public WebContentTypeMapper ContentTypeMapper { get; public set; }
    public int MaxReadPoolSize { get; public set; }
    public int MaxWritePoolSize { get; public set; }
    public MessageVersion MessageVersion { get; public set; }
    internal bool IsWsdlExportable { get; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; }
    public Encoding WriteEncoding { get; public set; }
    public bool CrossDomainScriptAccessEnabled { get; public set; }
    public WebMessageEncodingBindingElement(Encoding writeEncoding);
    public WebContentTypeMapper get_ContentTypeMapper();
    public void set_ContentTypeMapper(WebContentTypeMapper value);
    public int get_MaxReadPoolSize();
    public void set_MaxReadPoolSize(int value);
    public int get_MaxWritePoolSize();
    public void set_MaxWritePoolSize(int value);
    public virtual MessageVersion get_MessageVersion();
    public virtual void set_MessageVersion(MessageVersion value);
    internal virtual bool get_IsWsdlExportable();
    public XmlDictionaryReaderQuotas get_ReaderQuotas();
    public Encoding get_WriteEncoding();
    public void set_WriteEncoding(Encoding value);
    [CompilerGeneratedAttribute]
public bool get_CrossDomainScriptAccessEnabled();
    [CompilerGeneratedAttribute]
public void set_CrossDomainScriptAccessEnabled(bool value);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual IChannelListener`1<TChannel> BuildChannelListener(BindingContext context);
    public virtual bool CanBuildChannelListener(BindingContext context);
    public virtual BindingElement Clone();
    public virtual MessageEncoderFactory CreateMessageEncoderFactory();
    public virtual T GetProperty(BindingContext context);
    private sealed virtual override void System.ServiceModel.Administration.IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance);
    private sealed virtual override string System.ServiceModel.Administration.IWmiInstanceProvider.GetInstanceType();
    private sealed virtual override void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context);
    private sealed virtual override void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context);
    internal virtual bool CheckEncodingVersion(EnvelopeVersion version);
    internal virtual bool IsMatch(BindingElement b);
}
internal class System.ServiceModel.Channels.WebScriptMetadataMessage : BodyWriterMessage {
    public WebScriptMetadataMessage(string action, string proxyContent);
    protected virtual void OnBodyToString(XmlDictionaryWriter writer);
}
internal class System.ServiceModel.Channels.WebScriptMetadataMessageEncoderFactory : MessageEncoderFactory {
    public MessageEncoder Encoder { get; }
    public MessageVersion MessageVersion { get; }
    public WebScriptMetadataMessageEncoderFactory(XmlDictionaryReaderQuotas quotas);
    public virtual MessageEncoder get_Encoder();
    public virtual MessageVersion get_MessageVersion();
}
internal class System.ServiceModel.Channels.WebScriptMetadataMessageEncodingBindingElement : MessageEncodingBindingElement {
    public MessageVersion MessageVersion { get; public set; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; }
    public virtual MessageVersion get_MessageVersion();
    public virtual void set_MessageVersion(MessageVersion value);
    public XmlDictionaryReaderQuotas get_ReaderQuotas();
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual IChannelListener`1<TChannel> BuildChannelListener(BindingContext context);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public virtual bool CanBuildChannelListener(BindingContext context);
    public virtual BindingElement Clone();
    public virtual MessageEncoderFactory CreateMessageEncoderFactory();
    public virtual T GetProperty(BindingContext context);
}
internal class System.ServiceModel.Configuration.InternalEnumValidator : ConfigurationValidatorBase {
    public InternalEnumValidator(Type enumHelperType);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
internal class System.ServiceModel.Configuration.InternalEnumValidatorAttribute : ConfigurationValidatorAttribute {
    public Type EnumHelperType { get; public set; }
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public InternalEnumValidatorAttribute(Type enumHelperType);
    public Type get_EnumHelperType();
    public void set_EnumHelperType(Type value);
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
}
internal static class System.ServiceModel.Configuration.WebConfigurationStrings : object {
    internal static string DefaultBodyStyle;
    internal static string HelpEnabled;
    internal static string DefaultOutgoingResponseFormat;
    internal static string AutomaticFormatSelectionEnabled;
    internal static string ContentTypeMapper;
    internal static string CrossDomainScriptAccessEnabled;
    internal static string FaultExceptionEnabled;
}
internal class System.ServiceModel.Configuration.WebEncodingValidator : ConfigurationValidatorBase {
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
internal class System.ServiceModel.Configuration.WebEncodingValidatorAttribute : ConfigurationValidatorAttribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
}
public class System.ServiceModel.Configuration.WebHttpBindingCollectionElement : StandardBindingCollectionElement`2<WebHttpBinding, WebHttpBindingElement> {
    protected internal virtual Binding GetDefault();
    internal static WebHttpBindingCollectionElement GetBindingCollectionElement();
}
public class System.ServiceModel.Configuration.WebHttpBindingElement : StandardBindingElement {
    [ConfigurationPropertyAttribute("allowCookies")]
public bool AllowCookies { get; public set; }
    [ConfigurationPropertyAttribute("bypassProxyOnLocal")]
public bool BypassProxyOnLocal { get; public set; }
    [ServiceModelEnumValidatorAttribute("System.ServiceModel.HostNameComparisonModeHelper")]
[ConfigurationPropertyAttribute("hostNameComparisonMode")]
public HostNameComparisonMode HostNameComparisonMode { get; public set; }
    [LongValidatorAttribute]
[ConfigurationPropertyAttribute("maxBufferPoolSize")]
public long MaxBufferPoolSize { get; public set; }
    [ConfigurationPropertyAttribute("maxBufferSize")]
[IntegerValidatorAttribute]
public int MaxBufferSize { get; public set; }
    [ConfigurationPropertyAttribute("maxReceivedMessageSize")]
[LongValidatorAttribute]
public long MaxReceivedMessageSize { get; public set; }
    [ConfigurationPropertyAttribute("proxyAddress")]
public Uri ProxyAddress { get; public set; }
    [ConfigurationPropertyAttribute("readerQuotas")]
public XmlDictionaryReaderQuotasElement ReaderQuotas { get; }
    [ConfigurationPropertyAttribute("security")]
public WebHttpSecurityElement Security { get; }
    [ServiceModelEnumValidatorAttribute("System.ServiceModel.TransferModeHelper")]
[ConfigurationPropertyAttribute("transferMode")]
public TransferMode TransferMode { get; public set; }
    [ConfigurationPropertyAttribute("useDefaultWebProxy")]
public bool UseDefaultWebProxy { get; public set; }
    [WebEncodingValidatorAttribute]
[ConfigurationPropertyAttribute("writeEncoding")]
[TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
public Encoding WriteEncoding { get; public set; }
    [ConfigurationPropertyAttribute("contentTypeMapper")]
[StringValidatorAttribute]
public string ContentTypeMapper { get; public set; }
    [ConfigurationPropertyAttribute("crossDomainScriptAccessEnabled")]
public bool CrossDomainScriptAccessEnabled { get; public set; }
    protected Type BindingElementType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public WebHttpBindingElement(string name);
    private static WebHttpBindingElement();
    public bool get_AllowCookies();
    public void set_AllowCookies(bool value);
    public bool get_BypassProxyOnLocal();
    public void set_BypassProxyOnLocal(bool value);
    public HostNameComparisonMode get_HostNameComparisonMode();
    public void set_HostNameComparisonMode(HostNameComparisonMode value);
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public Uri get_ProxyAddress();
    public void set_ProxyAddress(Uri value);
    public XmlDictionaryReaderQuotasElement get_ReaderQuotas();
    public WebHttpSecurityElement get_Security();
    public TransferMode get_TransferMode();
    public void set_TransferMode(TransferMode value);
    public bool get_UseDefaultWebProxy();
    public void set_UseDefaultWebProxy(bool value);
    public Encoding get_WriteEncoding();
    public void set_WriteEncoding(Encoding value);
    public string get_ContentTypeMapper();
    public void set_ContentTypeMapper(string value);
    public bool get_CrossDomainScriptAccessEnabled();
    public void set_CrossDomainScriptAccessEnabled(bool value);
    protected virtual Type get_BindingElementType();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual void InitializeFrom(Binding binding);
    internal void InitializeReaderQuotas(XmlDictionaryReaderQuotas readerQuotas);
    protected virtual void OnApplyConfiguration(Binding binding);
    internal static WebContentTypeMapper GetContentTypeMapper(string contentTypeMapperType);
    internal static void ApplyReaderQuotasConfiguration(XmlDictionaryReaderQuotas webBindingReaderQuotas, XmlDictionaryReaderQuotasElement elementReaderQuotas);
}
public class System.ServiceModel.Configuration.WebHttpElement : BehaviorExtensionElement {
    [ConfigurationPropertyAttribute("helpEnabled")]
public bool HelpEnabled { get; public set; }
    [ConfigurationPropertyAttribute("defaultBodyStyle")]
[InternalEnumValidatorAttribute("System.ServiceModel.Web.WebMessageBodyStyleHelper")]
public WebMessageBodyStyle DefaultBodyStyle { get; public set; }
    [ConfigurationPropertyAttribute("defaultOutgoingResponseFormat")]
[InternalEnumValidatorAttribute("System.ServiceModel.Web.WebMessageFormatHelper")]
public WebMessageFormat DefaultOutgoingResponseFormat { get; public set; }
    [ConfigurationPropertyAttribute("automaticFormatSelectionEnabled")]
public bool AutomaticFormatSelectionEnabled { get; public set; }
    [ConfigurationPropertyAttribute("faultExceptionEnabled")]
public bool FaultExceptionEnabled { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public Type BehaviorType { get; }
    public bool get_HelpEnabled();
    public void set_HelpEnabled(bool value);
    public WebMessageBodyStyle get_DefaultBodyStyle();
    public void set_DefaultBodyStyle(WebMessageBodyStyle value);
    public WebMessageFormat get_DefaultOutgoingResponseFormat();
    public void set_DefaultOutgoingResponseFormat(WebMessageFormat value);
    public bool get_AutomaticFormatSelectionEnabled();
    public void set_AutomaticFormatSelectionEnabled(bool value);
    public bool get_FaultExceptionEnabled();
    public void set_FaultExceptionEnabled(bool value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual Type get_BehaviorType();
    protected internal virtual object CreateBehavior();
}
public class System.ServiceModel.Configuration.WebHttpEndpointCollectionElement : StandardEndpointCollectionElement`2<WebHttpEndpoint, WebHttpEndpointElement> {
}
public class System.ServiceModel.Configuration.WebHttpEndpointElement : StandardEndpointElement {
    protected internal Type EndpointType { get; }
    [ServiceModelEnumValidatorAttribute("System.ServiceModel.HostNameComparisonModeHelper")]
[ConfigurationPropertyAttribute("hostNameComparisonMode")]
public HostNameComparisonMode HostNameComparisonMode { get; public set; }
    [ConfigurationPropertyAttribute("maxBufferPoolSize")]
[LongValidatorAttribute]
public long MaxBufferPoolSize { get; public set; }
    [IntegerValidatorAttribute]
[ConfigurationPropertyAttribute("maxBufferSize")]
public int MaxBufferSize { get; public set; }
    [ConfigurationPropertyAttribute("maxReceivedMessageSize")]
[LongValidatorAttribute]
public long MaxReceivedMessageSize { get; public set; }
    [ConfigurationPropertyAttribute("readerQuotas")]
public XmlDictionaryReaderQuotasElement ReaderQuotas { get; }
    [ConfigurationPropertyAttribute("security")]
public WebHttpSecurityElement Security { get; }
    [ConfigurationPropertyAttribute("transferMode")]
[ServiceModelEnumValidatorAttribute("System.ServiceModel.TransferModeHelper")]
public TransferMode TransferMode { get; public set; }
    [TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
[WebEncodingValidatorAttribute]
[ConfigurationPropertyAttribute("writeEncoding")]
public Encoding WriteEncoding { get; public set; }
    [ConfigurationPropertyAttribute("contentTypeMapper")]
[StringValidatorAttribute]
public string ContentTypeMapper { get; public set; }
    [ConfigurationPropertyAttribute("helpEnabled")]
public bool HelpEnabled { get; public set; }
    [ConfigurationPropertyAttribute("faultExceptionEnabled")]
public bool FaultExceptionEnabled { get; public set; }
    [ConfigurationPropertyAttribute("defaultOutgoingResponseFormat")]
[InternalEnumValidatorAttribute("System.ServiceModel.Web.WebMessageFormatHelper")]
public WebMessageFormat DefaultOutgoingResponseFormat { get; public set; }
    [ConfigurationPropertyAttribute("automaticFormatSelectionEnabled")]
public bool AutomaticFormatSelectionEnabled { get; public set; }
    [ConfigurationPropertyAttribute("crossDomainScriptAccessEnabled")]
public bool CrossDomainScriptAccessEnabled { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    protected internal virtual Type get_EndpointType();
    public HostNameComparisonMode get_HostNameComparisonMode();
    public void set_HostNameComparisonMode(HostNameComparisonMode value);
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public XmlDictionaryReaderQuotasElement get_ReaderQuotas();
    public WebHttpSecurityElement get_Security();
    public TransferMode get_TransferMode();
    public void set_TransferMode(TransferMode value);
    public Encoding get_WriteEncoding();
    public void set_WriteEncoding(Encoding value);
    public string get_ContentTypeMapper();
    public void set_ContentTypeMapper(string value);
    public bool get_HelpEnabled();
    public void set_HelpEnabled(bool value);
    public bool get_FaultExceptionEnabled();
    public void set_FaultExceptionEnabled(bool value);
    public WebMessageFormat get_DefaultOutgoingResponseFormat();
    public void set_DefaultOutgoingResponseFormat(WebMessageFormat value);
    public bool get_AutomaticFormatSelectionEnabled();
    public void set_AutomaticFormatSelectionEnabled(bool value);
    public bool get_CrossDomainScriptAccessEnabled();
    public void set_CrossDomainScriptAccessEnabled(bool value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual ServiceEndpoint CreateServiceEndpoint(ContractDescription contractDescription);
    protected virtual void OnInitializeAndValidate(ChannelEndpointElement channelEndpointElement);
    protected virtual void OnInitializeAndValidate(ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ChannelEndpointElement serviceEndpointElement);
}
public class System.ServiceModel.Configuration.WebHttpSecurityElement : ServiceModelConfigurationElement {
    [InternalEnumValidatorAttribute("System.ServiceModel.WebHttpSecurityModeHelper")]
[ConfigurationPropertyAttribute("mode")]
public WebHttpSecurityMode Mode { get; public set; }
    [ConfigurationPropertyAttribute("transport")]
public HttpTransportSecurityElement Transport { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public WebHttpSecurityMode get_Mode();
    public void set_Mode(WebHttpSecurityMode value);
    public HttpTransportSecurityElement get_Transport();
    protected virtual ConfigurationPropertyCollection get_Properties();
    internal void ApplyConfiguration(WebHttpSecurity security);
    internal void InitializeFrom(WebHttpSecurity security);
}
public class System.ServiceModel.Configuration.WebMessageEncodingElement : BindingElementExtensionElement {
    public Type BindingElementType { get; }
    [ConfigurationPropertyAttribute("maxReadPoolSize")]
[IntegerValidatorAttribute]
public int MaxReadPoolSize { get; public set; }
    [IntegerValidatorAttribute]
[ConfigurationPropertyAttribute("maxWritePoolSize")]
public int MaxWritePoolSize { get; public set; }
    [ConfigurationPropertyAttribute("readerQuotas")]
public XmlDictionaryReaderQuotasElement ReaderQuotas { get; }
    [ConfigurationPropertyAttribute("webContentTypeMapperType")]
[StringValidatorAttribute]
public string WebContentTypeMapperType { get; public set; }
    [ConfigurationPropertyAttribute("writeEncoding")]
[TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
[WebEncodingValidatorAttribute]
public Encoding WriteEncoding { get; public set; }
    public virtual Type get_BindingElementType();
    public int get_MaxReadPoolSize();
    public void set_MaxReadPoolSize(int value);
    public int get_MaxWritePoolSize();
    public void set_MaxWritePoolSize(int value);
    public XmlDictionaryReaderQuotasElement get_ReaderQuotas();
    public string get_WebContentTypeMapperType();
    public void set_WebContentTypeMapperType(string value);
    public Encoding get_WriteEncoding();
    public void set_WriteEncoding(Encoding value);
    public virtual void ApplyConfiguration(BindingElement bindingElement);
    public virtual void CopyFrom(ServiceModelExtensionElement from);
    protected internal virtual BindingElement CreateBindingElement();
    internal void ApplyConfiguration(XmlDictionaryReaderQuotasElement currentQuotas, XmlDictionaryReaderQuotas readerQuotas);
}
public class System.ServiceModel.Configuration.WebScriptEnablingElement : BehaviorExtensionElement {
    public Type BehaviorType { get; }
    public virtual Type get_BehaviorType();
    protected internal virtual object CreateBehavior();
}
public class System.ServiceModel.Configuration.WebScriptEndpointCollectionElement : StandardEndpointCollectionElement`2<WebScriptEndpoint, WebScriptEndpointElement> {
}
public class System.ServiceModel.Configuration.WebScriptEndpointElement : StandardEndpointElement {
    protected internal Type EndpointType { get; }
    [ConfigurationPropertyAttribute("hostNameComparisonMode")]
[ServiceModelEnumValidatorAttribute("System.ServiceModel.HostNameComparisonModeHelper")]
public HostNameComparisonMode HostNameComparisonMode { get; public set; }
    [LongValidatorAttribute]
[ConfigurationPropertyAttribute("maxBufferPoolSize")]
public long MaxBufferPoolSize { get; public set; }
    [IntegerValidatorAttribute]
[ConfigurationPropertyAttribute("maxBufferSize")]
public int MaxBufferSize { get; public set; }
    [LongValidatorAttribute]
[ConfigurationPropertyAttribute("maxReceivedMessageSize")]
public long MaxReceivedMessageSize { get; public set; }
    [ConfigurationPropertyAttribute("readerQuotas")]
public XmlDictionaryReaderQuotasElement ReaderQuotas { get; }
    [ConfigurationPropertyAttribute("security")]
public WebHttpSecurityElement Security { get; }
    [ConfigurationPropertyAttribute("transferMode")]
[ServiceModelEnumValidatorAttribute("System.ServiceModel.TransferModeHelper")]
public TransferMode TransferMode { get; public set; }
    [ConfigurationPropertyAttribute("writeEncoding")]
[TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
[WebEncodingValidatorAttribute]
public Encoding WriteEncoding { get; public set; }
    [ConfigurationPropertyAttribute("contentTypeMapper")]
[StringValidatorAttribute]
public string ContentTypeMapper { get; public set; }
    [ConfigurationPropertyAttribute("crossDomainScriptAccessEnabled")]
public bool CrossDomainScriptAccessEnabled { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    protected internal virtual Type get_EndpointType();
    public HostNameComparisonMode get_HostNameComparisonMode();
    public void set_HostNameComparisonMode(HostNameComparisonMode value);
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public XmlDictionaryReaderQuotasElement get_ReaderQuotas();
    public WebHttpSecurityElement get_Security();
    public TransferMode get_TransferMode();
    public void set_TransferMode(TransferMode value);
    public Encoding get_WriteEncoding();
    public void set_WriteEncoding(Encoding value);
    public string get_ContentTypeMapper();
    public void set_ContentTypeMapper(string value);
    public bool get_CrossDomainScriptAccessEnabled();
    public void set_CrossDomainScriptAccessEnabled(bool value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual ServiceEndpoint CreateServiceEndpoint(ContractDescription contractDescription);
    protected virtual void OnInitializeAndValidate(ChannelEndpointElement channelEndpointElement);
    protected virtual void OnInitializeAndValidate(ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ChannelEndpointElement serviceEndpointElement);
}
internal class System.ServiceModel.Description.FormatSelectingMessageInspector : object {
    public FormatSelectingMessageInspector(WebHttpBehavior webHttpBehavior, List`1<MultiplexingFormatMapping> mappings);
    private static FormatSelectingMessageInspector();
    public void RegisterOperation(string operationName, MultiplexingDispatchMessageFormatter formatter);
    public sealed virtual object AfterReceiveRequest(Message& request, IClientChannel channel, InstanceContext instanceContext);
    public sealed virtual void BeforeSendReply(Message& reply, object correlationState);
}
[DataContractAttribute]
public class System.ServiceModel.Description.JsonFaultDetail : object {
    [DataMemberAttribute]
public ExceptionDetail ExceptionDetail { get; public set; }
    [DataMemberAttribute]
public string ExceptionType { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public string StackTrace { get; public set; }
    public ExceptionDetail get_ExceptionDetail();
    public void set_ExceptionDetail(ExceptionDetail value);
    public string get_ExceptionType();
    public void set_ExceptionType(string value);
    public string get_Message();
    public void set_Message(string value);
    public string get_StackTrace();
    public void set_StackTrace(string value);
}
internal class System.ServiceModel.Description.WCFServiceClientProxyGenerator : ClientProxyGenerator {
    internal WCFServiceClientProxyGenerator(string path, bool debugMode, ServiceEndpoint serviceEndpoint);
    protected virtual string GetProxyPath();
    protected virtual string GetJsonpCallbackParameterName();
    protected virtual bool GetSupportsJsonp();
    internal static string GetClientProxyScript(Type contractType, string path, bool debugMode, ServiceEndpoint serviceEndpoint);
    protected virtual string GetClientTypeNamespace(string ns);
    protected virtual string GetProxyTypeName(WebServiceData data);
}
public class System.ServiceModel.Description.WebHttpBehavior : object {
    internal static string GET;
    internal static string POST;
    internal static string WildcardAction;
    internal static string WildcardMethod;
    internal static string defaultStreamContentType;
    internal static string defaultCallbackParameterName;
    public WebMessageBodyStyle DefaultBodyStyle { get; public set; }
    public WebMessageFormat DefaultOutgoingRequestFormat { get; public set; }
    public WebMessageFormat DefaultOutgoingResponseFormat { get; public set; }
    public bool HelpEnabled { get; public set; }
    public bool AutomaticFormatSelectionEnabled { get; public set; }
    public bool FaultExceptionEnabled { get; public set; }
    internal Uri HelpUri { get; internal set; }
    protected internal string JavascriptCallbackParameterName { get; protected internal set; }
    private static WebHttpBehavior();
    public virtual WebMessageBodyStyle get_DefaultBodyStyle();
    public virtual void set_DefaultBodyStyle(WebMessageBodyStyle value);
    public virtual WebMessageFormat get_DefaultOutgoingRequestFormat();
    public virtual void set_DefaultOutgoingRequestFormat(WebMessageFormat value);
    public virtual WebMessageFormat get_DefaultOutgoingResponseFormat();
    public virtual void set_DefaultOutgoingResponseFormat(WebMessageFormat value);
    [CompilerGeneratedAttribute]
public virtual bool get_HelpEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_HelpEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_AutomaticFormatSelectionEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_AutomaticFormatSelectionEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_FaultExceptionEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_FaultExceptionEnabled(bool value);
    [CompilerGeneratedAttribute]
internal Uri get_HelpUri();
    [CompilerGeneratedAttribute]
internal void set_HelpUri(Uri value);
    [CompilerGeneratedAttribute]
protected internal string get_JavascriptCallbackParameterName();
    [CompilerGeneratedAttribute]
protected internal void set_JavascriptCallbackParameterName(string value);
    public virtual void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    internal virtual Dictionary`2<string, string> GetWmiProperties();
    internal virtual string GetWmiTypeName();
    private sealed virtual override void System.ServiceModel.Administration.IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance);
    private sealed virtual override string System.ServiceModel.Administration.IWmiInstanceProvider.GetInstanceType();
    public virtual void Validate(ServiceEndpoint endpoint);
    protected virtual void ValidateBinding(ServiceEndpoint endpoint);
    internal static string GetWebMethod(OperationDescription od);
    internal static string GetWebUriTemplate(OperationDescription od);
    internal static string GetDescription(OperationDescription od);
    internal static bool IsTypedMessage(MessageDescription message);
    internal static bool IsUntypedMessage(MessageDescription message);
    internal static MessageDescription MakeDummyMessageDescription(MessageDirection direction);
    internal static bool SupportsJsonFormat(OperationDescription od);
    internal static void ValidateIsWebHttpBinding(ServiceEndpoint serviceEndpoint, string behaviorName);
    internal WebMessageBodyStyle GetBodyStyle(OperationDescription od);
    internal IClientMessageFormatter GetDefaultClientFormatter(OperationDescription od, bool useJson, bool isWrapped);
    protected virtual void AddClientErrorInspector(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    protected virtual void AddServerErrorHandlers(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    protected virtual WebHttpDispatchOperationSelector GetOperationSelector(ServiceEndpoint endpoint);
    protected virtual QueryStringConverter GetQueryStringConverter(OperationDescription operationDescription);
    protected virtual IClientMessageFormatter GetReplyClientFormatter(OperationDescription operationDescription, ServiceEndpoint endpoint);
    internal virtual bool UseBareReplyFormatter(WebMessageBodyStyle style, OperationDescription operationDescription, WebMessageFormat responseFormat, Type& parameterType);
    protected virtual IDispatchMessageFormatter GetReplyDispatchFormatter(OperationDescription operationDescription, ServiceEndpoint endpoint);
    protected virtual IClientMessageFormatter GetRequestClientFormatter(OperationDescription operationDescription, ServiceEndpoint endpoint);
    protected virtual IDispatchMessageFormatter GetRequestDispatchFormatter(OperationDescription operationDescription, ServiceEndpoint endpoint);
    internal virtual bool UseBareRequestFormatter(WebMessageBodyStyle style, OperationDescription operationDescription, Type& parameterType);
    internal static void HideRequestUriTemplateParameters(OperationDescription operationDescription, UriTemplateDispatchFormatter throwAway, Effect effect);
    internal static bool TryGetNonMessageParameterType(MessageDescription message, OperationDescription declaringOperation, bool isRequest, Type& type);
    internal virtual DataContractJsonSerializerOperationFormatter CreateDataContractJsonSerializerOperationFormatter(OperationDescription od, DataContractSerializerOperationBehavior dcsob, bool isWrapped);
    internal WebMessageFormat GetRequestFormat(OperationDescription od);
    internal WebMessageFormat GetResponseFormat(OperationDescription od);
    internal static bool IsXmlSerializerFaultFormat(OperationDescription operationDescription);
    internal static JavascriptCallbackResponseMessageProperty TrySetupJavascriptCallback(string callbackParameterName);
}
[DebuggerDisplayAttribute("Address={address}")]
[DebuggerDisplayAttribute("Name={name}")]
public class System.ServiceModel.Description.WebHttpEndpoint : WebServiceEndpoint {
    public bool HelpEnabled { get; public set; }
    public WebMessageFormat DefaultOutgoingResponseFormat { get; public set; }
    public bool AutomaticFormatSelectionEnabled { get; public set; }
    public bool FaultExceptionEnabled { get; public set; }
    protected Type WebEndpointType { get; }
    public WebHttpEndpoint(ContractDescription contract);
    public WebHttpEndpoint(ContractDescription contract, EndpointAddress address);
    private static WebHttpEndpoint();
    public bool get_HelpEnabled();
    public void set_HelpEnabled(bool value);
    public WebMessageFormat get_DefaultOutgoingResponseFormat();
    public void set_DefaultOutgoingResponseFormat(WebMessageFormat value);
    public bool get_AutomaticFormatSelectionEnabled();
    public void set_AutomaticFormatSelectionEnabled(bool value);
    public bool get_FaultExceptionEnabled();
    public void set_FaultExceptionEnabled(bool value);
    protected virtual Type get_WebEndpointType();
}
internal class System.ServiceModel.Description.WebScriptClientGenerator : object {
    internal static string DebugMetadataEndpointSuffix;
    internal static string MetadataEndpointSuffix;
    public WebScriptClientGenerator(ServiceEndpoint endpoint, bool debugMode, bool crossDomainScriptAccessEnabled);
    public sealed virtual Message Get(Message message);
    internal static string GetMetadataEndpointSuffix(bool debugMode);
}
public class System.ServiceModel.Description.WebScriptEnablingBehavior : WebHttpBehavior {
    public WebMessageBodyStyle DefaultBodyStyle { get; public set; }
    public WebMessageFormat DefaultOutgoingRequestFormat { get; public set; }
    public WebMessageFormat DefaultOutgoingResponseFormat { get; public set; }
    public bool HelpEnabled { get; public set; }
    public bool AutomaticFormatSelectionEnabled { get; public set; }
    public bool FaultExceptionEnabled { get; public set; }
    private static WebScriptEnablingBehavior();
    public virtual WebMessageBodyStyle get_DefaultBodyStyle();
    public virtual void set_DefaultBodyStyle(WebMessageBodyStyle value);
    public virtual WebMessageFormat get_DefaultOutgoingRequestFormat();
    public virtual void set_DefaultOutgoingRequestFormat(WebMessageFormat value);
    public virtual WebMessageFormat get_DefaultOutgoingResponseFormat();
    public virtual void set_DefaultOutgoingResponseFormat(WebMessageFormat value);
    public virtual bool get_HelpEnabled();
    public virtual void set_HelpEnabled(bool value);
    public virtual bool get_AutomaticFormatSelectionEnabled();
    public virtual void set_AutomaticFormatSelectionEnabled(bool value);
    public virtual bool get_FaultExceptionEnabled();
    public virtual void set_FaultExceptionEnabled(bool value);
    public virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    public virtual void Validate(ServiceEndpoint endpoint);
    internal virtual DataContractJsonSerializerOperationFormatter CreateDataContractJsonSerializerOperationFormatter(OperationDescription od, DataContractSerializerOperationBehavior dcsob, bool isWrapped);
    internal virtual string GetWmiTypeName();
    internal virtual bool UseBareReplyFormatter(WebMessageBodyStyle style, OperationDescription operationDescription, WebMessageFormat responseFormat, Type& parameterType);
    protected virtual void AddClientErrorInspector(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    protected virtual void AddServerErrorHandlers(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    protected virtual QueryStringConverter GetQueryStringConverter(OperationDescription operationDescription);
}
[DebuggerDisplayAttribute("Address={address}")]
[DebuggerDisplayAttribute("Name={name}")]
public class System.ServiceModel.Description.WebScriptEndpoint : WebServiceEndpoint {
    protected Type WebEndpointType { get; }
    public WebScriptEndpoint(ContractDescription contract);
    public WebScriptEndpoint(ContractDescription contract, EndpointAddress address);
    private static WebScriptEndpoint();
    protected virtual Type get_WebEndpointType();
}
public abstract class System.ServiceModel.Description.WebServiceEndpoint : ServiceEndpoint {
    public HostNameComparisonMode HostNameComparisonMode { get; public set; }
    public long MaxBufferPoolSize { get; public set; }
    public int MaxBufferSize { get; public set; }
    public long MaxReceivedMessageSize { get; public set; }
    public TransferMode TransferMode { get; public set; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; public set; }
    public WebHttpSecurity Security { get; }
    public Encoding WriteEncoding { get; public set; }
    public WebContentTypeMapper ContentTypeMapper { get; public set; }
    public bool CrossDomainScriptAccessEnabled { get; public set; }
    protected Type WebEndpointType { get; }
    internal WebServiceEndpoint(ContractDescription contract, EndpointAddress address);
    public HostNameComparisonMode get_HostNameComparisonMode();
    public void set_HostNameComparisonMode(HostNameComparisonMode value);
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public TransferMode get_TransferMode();
    public void set_TransferMode(TransferMode value);
    public XmlDictionaryReaderQuotas get_ReaderQuotas();
    public void set_ReaderQuotas(XmlDictionaryReaderQuotas value);
    public WebHttpSecurity get_Security();
    public Encoding get_WriteEncoding();
    public void set_WriteEncoding(Encoding value);
    public WebContentTypeMapper get_ContentTypeMapper();
    public void set_ContentTypeMapper(WebContentTypeMapper value);
    public bool get_CrossDomainScriptAccessEnabled();
    public void set_CrossDomainScriptAccessEnabled(bool value);
    protected abstract virtual Type get_WebEndpointType();
}
internal class System.ServiceModel.Dispatcher.CompositeClientFormatter : object {
    public CompositeClientFormatter(IClientMessageFormatter request, IClientMessageFormatter reply);
    public sealed virtual object DeserializeReply(Message message, Object[] parameters);
    public sealed virtual Message SerializeRequest(MessageVersion messageVersion, Object[] parameters);
}
internal class System.ServiceModel.Dispatcher.CompositeDispatchFormatter : object {
    public CompositeDispatchFormatter(IDispatchMessageFormatter request, IDispatchMessageFormatter reply);
    public sealed virtual void DeserializeRequest(Message message, Object[] parameters);
    public sealed virtual Message SerializeReply(MessageVersion messageVersion, Object[] parameters, object result);
}
internal class System.ServiceModel.Dispatcher.ContentTypeSettingClientMessageFormatter : object {
    public ContentTypeSettingClientMessageFormatter(string outgoingContentType, IClientMessageFormatter innerFormatter);
    public sealed virtual object DeserializeReply(Message message, Object[] parameters);
    public sealed virtual Message SerializeRequest(MessageVersion messageVersion, Object[] parameters);
}
internal class System.ServiceModel.Dispatcher.ContentTypeSettingDispatchMessageFormatter : object {
    public ContentTypeSettingDispatchMessageFormatter(string outgoingContentType, IDispatchMessageFormatter innerFormatter);
    public sealed virtual void DeserializeRequest(Message message, Object[] parameters);
    public sealed virtual Message SerializeReply(MessageVersion messageVersion, Object[] parameters, object result);
}
internal class System.ServiceModel.Dispatcher.DataContractJsonSerializerOperationBehavior : DataContractSerializerOperationBehavior {
    public DataContractJsonSerializerOperationBehavior(OperationDescription description, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, IDataContractSurrogate dataContractSurrogate, bool alwaysEmitTypeInformation);
    public virtual XmlObjectSerializer CreateSerializer(Type type, string name, string ns, IList`1<Type> knownTypes);
    public virtual XmlObjectSerializer CreateSerializer(Type type, XmlDictionaryString name, XmlDictionaryString ns, IList`1<Type> knownTypes);
}
internal class System.ServiceModel.Dispatcher.DataContractJsonSerializerOperationFormatter : DataContractSerializerOperationFormatter {
    public DataContractJsonSerializerOperationFormatter(OperationDescription description, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, IDataContractSurrogate dataContractSurrogate, bool isWrapped, bool useAspNetAjaxJson, string callbackParameterName);
    internal static bool IsJsonLocalName(XmlDictionaryReader reader, string elementName);
    internal static bool IsStartElement(XmlDictionaryReader reader, string elementName);
    internal static bool IsStartElement(XmlDictionaryReader reader, XmlDictionaryString elementName, XmlDictionaryString elementNamespace);
    protected virtual void AddHeadersToMessage(Message message, MessageDescription messageDescription, Object[] parameters, bool isRequest);
    protected virtual object DeserializeBody(XmlDictionaryReader reader, MessageVersion version, string action, MessageDescription messageDescription, Object[] parameters, bool isRequest);
    protected virtual void GetHeadersFromMessage(Message message, MessageDescription messageDescription, Object[] parameters, bool isRequest);
    protected virtual void SerializeBody(XmlDictionaryWriter writer, MessageVersion version, string action, MessageDescription messageDescription, object returnValue, Object[] parameters, bool isRequest);
}
internal class System.ServiceModel.Dispatcher.DemultiplexingClientMessageFormatter : object {
    public DemultiplexingClientMessageFormatter(IDictionary`2<WebContentFormat, IClientMessageFormatter> formatters, IClientMessageFormatter defaultFormatter);
    public sealed virtual object DeserializeReply(Message message, Object[] parameters);
    public sealed virtual Message SerializeRequest(MessageVersion messageVersion, Object[] parameters);
}
internal class System.ServiceModel.Dispatcher.DemultiplexingDispatchMessageFormatter : object {
    public DemultiplexingDispatchMessageFormatter(IDictionary`2<WebContentFormat, IDispatchMessageFormatter> formatters, IDispatchMessageFormatter defaultFormatter);
    public sealed virtual void DeserializeRequest(Message message, Object[] parameters);
    public sealed virtual Message SerializeReply(MessageVersion messageVersion, Object[] parameters, object result);
    internal static string GetSupportedFormats(IEnumerable`1<WebContentFormat> formats);
    internal static bool TryGetEncodingFormat(Message message, WebContentFormat& format);
}
internal class System.ServiceModel.Dispatcher.HelpExampleGenerator : object {
    public static string XmlSchemaNamespace;
    public static string XmlNamespacePrefix;
    public static string XmlSchemaInstanceNamespace;
    public static string XmlSchemaInstanceNil;
    public static string XmlSchemaInstanceType;
    private static HelpExampleGenerator();
    public static void GenerateJsonSample(XmlSchemaSet schemaSet, XmlQualifiedName name, XmlWriter writer, IDictionary`2<XmlQualifiedName, Type> knownTypes);
    public static void GenerateXmlSample(XmlSchemaSet schemaSet, XmlQualifiedName name, XmlWriter writer);
}
internal class System.ServiceModel.Dispatcher.HelpHtmlBuilder : object {
    public static XDocument CreateHelpPage(Uri baseUri, IEnumerable`1<OperationHelpInformation> operations);
    public static XDocument CreateOperationHelpPage(Uri baseUri, OperationHelpInformation operationInfo);
    public static XDocument CreateMethodNotAllowedPage(Uri helpUri);
    public static XDocument CreateServerErrorPage(Uri helpUri, Exception error);
    public static XDocument CreateEndpointNotFound(Uri helpUri);
    public static XDocument CreateTransferRedirectPage(string originalTo, string newLocation);
}
internal class System.ServiceModel.Dispatcher.HelpPage : object {
    public static string OperationListHelpPageUriTemplate;
    public static string OperationHelpPageUriTemplate;
    public HelpPage(WebHttpBehavior behavior, ContractDescription description);
    public static IEnumerable`1<KeyValuePair`2<UriTemplate, object>> GetOperationTemplatePairs();
    public object Invoke(UriTemplateMatch match);
}
internal class System.ServiceModel.Dispatcher.HttpStreamFormatter : object {
    public HttpStreamFormatter(OperationDescription operation);
    public sealed virtual object DeserializeReply(Message message, Object[] parameters);
    public sealed virtual void DeserializeRequest(Message message, Object[] parameters);
    public sealed virtual Message SerializeReply(MessageVersion messageVersion, Object[] parameters, object result);
    public sealed virtual Message SerializeRequest(MessageVersion messageVersion, Object[] parameters);
    internal static bool IsEmptyMessage(Message message);
}
internal class System.ServiceModel.Dispatcher.HttpUnhandledOperationInvoker : object {
    public bool IsSynchronous { get; }
    public Uri HelpUri { get; public set; }
    public sealed virtual bool get_IsSynchronous();
    public sealed virtual Object[] AllocateInputs();
    [CompilerGeneratedAttribute]
public Uri get_HelpUri();
    [CompilerGeneratedAttribute]
public void set_HelpUri(Uri value);
    public sealed virtual object Invoke(object instance, Object[] inputs, Object[]& outputs);
    public sealed virtual IAsyncResult InvokeBegin(object instance, Object[] inputs, AsyncCallback callback, object state);
    public sealed virtual object InvokeEnd(object instance, Object[]& outputs, IAsyncResult result);
}
internal class System.ServiceModel.Dispatcher.JavascriptCallbackMessageInspector : object {
    internal static string applicationJavaScriptMediaType;
    public JavascriptCallbackMessageInspector(string callbackParameterName);
    private static JavascriptCallbackMessageInspector();
    public sealed virtual object AfterReceiveRequest(Message& request, IClientChannel channel, InstanceContext instanceContext);
    public sealed virtual void BeforeSendReply(Message& reply, object correlationState);
}
internal class System.ServiceModel.Dispatcher.JsonFormatMapping : MultiplexingFormatMapping {
    public static WebContentFormat WebContentFormat;
    public WebContentFormat ContentFormat { get; }
    public WebMessageFormat MessageFormat { get; }
    public string DefaultMediaType { get; }
    protected MessageEncoder Encoder { get; }
    public JsonFormatMapping(Encoding writeEncoding, WebContentTypeMapper contentTypeMapper);
    private static JsonFormatMapping();
    public virtual WebContentFormat get_ContentFormat();
    public virtual WebMessageFormat get_MessageFormat();
    public virtual string get_DefaultMediaType();
    protected virtual MessageEncoder get_Encoder();
}
public class System.ServiceModel.Dispatcher.JsonQueryStringConverter : QueryStringConverter {
    internal JsonQueryStringConverter(OperationDescription operationDescription);
    public virtual bool CanConvert(Type type);
    public virtual object ConvertStringToValue(string parameter, Type parameterType);
    public virtual string ConvertValueToString(object parameter, Type parameterType);
}
internal class System.ServiceModel.Dispatcher.MessageHelpInformation : object {
    public string BodyDescription { get; private set; }
    public string FormatString { get; private set; }
    public Type Type { get; private set; }
    public bool SupportsJson { get; private set; }
    public XmlSchemaSet SchemaSet { get; private set; }
    public XmlSchema Schema { get; private set; }
    public XElement XmlExample { get; private set; }
    public XElement JsonExample { get; private set; }
    internal MessageHelpInformation(OperationDescription od, bool isRequest, Type type, bool wrapped);
    [CompilerGeneratedAttribute]
public string get_BodyDescription();
    [CompilerGeneratedAttribute]
private void set_BodyDescription(string value);
    [CompilerGeneratedAttribute]
public string get_FormatString();
    [CompilerGeneratedAttribute]
private void set_FormatString(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public bool get_SupportsJson();
    [CompilerGeneratedAttribute]
private void set_SupportsJson(bool value);
    [CompilerGeneratedAttribute]
public XmlSchemaSet get_SchemaSet();
    [CompilerGeneratedAttribute]
private void set_SchemaSet(XmlSchemaSet value);
    [CompilerGeneratedAttribute]
public XmlSchema get_Schema();
    [CompilerGeneratedAttribute]
private void set_Schema(XmlSchema value);
    [CompilerGeneratedAttribute]
public XElement get_XmlExample();
    [CompilerGeneratedAttribute]
private void set_XmlExample(XElement value);
    [CompilerGeneratedAttribute]
public XElement get_JsonExample();
    [CompilerGeneratedAttribute]
private void set_JsonExample(XElement value);
}
internal class System.ServiceModel.Dispatcher.MultiplexingDispatchMessageFormatter : object {
    public WebMessageFormat DefaultFormat { get; }
    public Dictionary`2<WebMessageFormat, string> DefaultContentTypes { get; }
    public MultiplexingDispatchMessageFormatter(Dictionary`2<WebMessageFormat, IDispatchMessageFormatter> formatters, WebMessageFormat defaultFormat);
    public WebMessageFormat get_DefaultFormat();
    public Dictionary`2<WebMessageFormat, string> get_DefaultContentTypes();
    public sealed virtual void DeserializeRequest(Message message, Object[] parameters);
    public sealed virtual Message SerializeReply(MessageVersion messageVersion, Object[] parameters, object result);
    public bool SupportsMessageFormat(WebMessageFormat format);
}
internal abstract class System.ServiceModel.Dispatcher.MultiplexingFormatMapping : object {
    protected Encoding writeEncoding;
    protected string writeCharset;
    protected WebContentTypeMapper contentTypeMapper;
    public WebMessageFormat MessageFormat { get; }
    public WebContentFormat ContentFormat { get; }
    public string DefaultMediaType { get; }
    protected MessageEncoder Encoder { get; }
    public ContentType DefaultContentType { get; }
    public MultiplexingFormatMapping(Encoding writeEncoding, WebContentTypeMapper contentTypeMapper);
    public abstract virtual WebMessageFormat get_MessageFormat();
    public abstract virtual WebContentFormat get_ContentFormat();
    public abstract virtual string get_DefaultMediaType();
    protected abstract virtual MessageEncoder get_Encoder();
    public ContentType get_DefaultContentType();
    public bool CanFormatResponse(ContentType acceptHeaderElement, bool matchCharset, ContentType& contentType);
}
internal class System.ServiceModel.Dispatcher.NameValueCache`1 : object {
    internal static int maxNumberofEntriesInCache;
    public NameValueCache`1(int maxCacheEntries);
    public T Lookup(string key);
    public void AddOrUpdate(string key, T value);
}
internal class System.ServiceModel.Dispatcher.OperationHelpInformation : object {
    public string Name { get; }
    public string UriTemplate { get; }
    public string Method { get; }
    public string Description { get; }
    public string JavascriptCallbackParameterName { get; }
    public WebMessageBodyStyle BodyStyle { get; }
    public MessageHelpInformation Request { get; }
    public MessageHelpInformation Response { get; }
    internal OperationHelpInformation(WebHttpBehavior behavior, OperationDescription od);
    public string get_Name();
    public string get_UriTemplate();
    public string get_Method();
    public string get_Description();
    public string get_JavascriptCallbackParameterName();
    public WebMessageBodyStyle get_BodyStyle();
    public MessageHelpInformation get_Request();
    public MessageHelpInformation get_Response();
}
public class System.ServiceModel.Dispatcher.QueryStringConverter : object {
    public virtual bool CanConvert(Type type);
    public virtual object ConvertStringToValue(string parameter, Type parameterType);
    public virtual string ConvertValueToString(object parameter, Type parameterType);
}
internal class System.ServiceModel.Dispatcher.SingleBodyParameterDataContractMessageFormatter : SingleBodyParameterMessageFormatter {
    public SingleBodyParameterDataContractMessageFormatter(OperationDescription operation, Type parameterType, bool isRequestFormatter, bool useJsonFormat, DataContractSerializerOperationBehavior dcsob);
    private static SingleBodyParameterDataContractMessageFormatter();
    internal static Type UnwrapNullableType(Type type);
    protected virtual object ReadObject(Message message);
    protected virtual void AttachMessageProperties(Message message, bool isRequest);
    protected virtual XmlObjectSerializer[] GetInputSerializers();
    protected virtual XmlObjectSerializer GetOutputSerializer(Type type);
    protected virtual void ValidateMessageFormatProperty(Message message);
}
internal abstract class System.ServiceModel.Dispatcher.SingleBodyParameterMessageFormatter : object {
    protected string ContractName { get; }
    protected string ContractNs { get; }
    protected string OperationName { get; }
    protected SingleBodyParameterMessageFormatter(OperationDescription operation, bool isRequestFormatter, string serializerType);
    protected string get_ContractName();
    protected string get_ContractNs();
    protected string get_OperationName();
    public static IClientMessageFormatter CreateXmlAndJsonClientFormatter(OperationDescription operation, Type type, bool isRequestFormatter, UnwrappedTypesXmlSerializerManager xmlSerializerManager);
    public static IDispatchMessageFormatter CreateXmlAndJsonDispatchFormatter(OperationDescription operation, Type type, bool isRequestFormatter, UnwrappedTypesXmlSerializerManager xmlSerializerManager, string callbackParameterName);
    public sealed virtual object DeserializeReply(Message message, Object[] parameters);
    public sealed virtual void DeserializeRequest(Message message, Object[] parameters);
    public sealed virtual Message SerializeReply(MessageVersion messageVersion, Object[] parameters, object result);
    public sealed virtual Message SerializeRequest(MessageVersion messageVersion, Object[] parameters);
    internal static IClientMessageFormatter CreateClientFormatter(OperationDescription operation, Type type, bool isRequestFormatter, bool useJson, UnwrappedTypesXmlSerializerManager xmlSerializerManager);
    internal static IDispatchMessageFormatter CreateDispatchFormatter(OperationDescription operation, Type type, bool isRequestFormatter, bool useJson, UnwrappedTypesXmlSerializerManager xmlSerializerManager, string callbackParameterName);
    internal static void SuppressReplyEntityBody(Message message);
    internal static void SuppressRequestEntityBody(Message message);
    protected virtual void AttachMessageProperties(Message message, bool isRequest);
    protected abstract virtual XmlObjectSerializer[] GetInputSerializers();
    protected abstract virtual XmlObjectSerializer GetOutputSerializer(Type type);
    protected virtual void ValidateMessageFormatProperty(Message message);
    protected Type GetTypeForSerializer(Type type, Type parameterType, IList`1<Type> knownTypes);
    public static SingleBodyParameterMessageFormatter CreateXmlFormatter(OperationDescription operation, Type type, bool isRequestFormatter, UnwrappedTypesXmlSerializerManager xmlSerializerManager);
    public static SingleBodyParameterMessageFormatter CreateJsonFormatter(OperationDescription operation, Type type, bool isRequestFormatter);
    protected virtual object ReadObject(Message message);
}
internal class System.ServiceModel.Dispatcher.SingleBodyParameterXmlSerializerMessageFormatter : SingleBodyParameterMessageFormatter {
    public SingleBodyParameterXmlSerializerMessageFormatter(OperationDescription operation, Type parameterType, bool isRequestFormatter, XmlSerializerOperationBehavior xsob, UnwrappedTypesXmlSerializerManager serializerManager);
    protected virtual XmlObjectSerializer[] GetInputSerializers();
    protected virtual XmlObjectSerializer GetOutputSerializer(Type type);
}
internal class System.ServiceModel.Dispatcher.UnwrappedTypesXmlSerializerManager : object {
    public TypeSerializerPair[] GetOperationSerializers(object key);
    public void RegisterType(object key, IList`1<Type> types);
}
internal class System.ServiceModel.Dispatcher.UriTemplateClientFormatter : object {
    internal Dictionary`2<int, string> pathMapping;
    internal Dictionary`2<int, KeyValuePair`2<string, Type>> queryMapping;
    public UriTemplateClientFormatter(OperationDescription operationDescription, IClientMessageFormatter inner, QueryStringConverter qsc, Uri baseUri, bool innerIsUntypedMessage, string contractName);
    public sealed virtual object DeserializeReply(Message message, Object[] parameters);
    public sealed virtual Message SerializeRequest(MessageVersion messageVersion, Object[] parameters);
    internal static string GetUTStringOrDefault(OperationDescription operationDescription);
    internal static void Populate(Dictionary`2& pathMapping, Dictionary`2& queryMapping, Int32& totalNumUTVars, UriTemplate& uriTemplate, OperationDescription operationDescription, QueryStringConverter qsc, string contractName);
}
internal class System.ServiceModel.Dispatcher.UriTemplateDispatchFormatter : object {
    internal Dictionary`2<int, string> pathMapping;
    internal Dictionary`2<int, KeyValuePair`2<string, Type>> queryMapping;
    public UriTemplateDispatchFormatter(OperationDescription operationDescription, IDispatchMessageFormatter inner, QueryStringConverter qsc, string contractName, Uri baseAddress);
    public sealed virtual void DeserializeRequest(Message message, Object[] parameters);
    public sealed virtual Message SerializeReply(MessageVersion messageVersion, Object[] parameters, object result);
}
internal class System.ServiceModel.Dispatcher.WebErrorHandler : object {
    public WebErrorHandler(WebHttpBehavior webHttpBehavior, ContractDescription contractDescription, bool includeExceptionDetailInFaults);
    public sealed virtual bool HandleError(Exception error);
    public sealed virtual void ProvideFault(Exception error, MessageVersion version, Message& fault);
}
internal class System.ServiceModel.Dispatcher.WebFaultClientMessageInspector : object {
    public virtual void AfterReceiveReply(Message& reply, object correlationState);
    public sealed virtual object BeforeSendRequest(Message& request, IClientChannel channel);
}
internal class System.ServiceModel.Dispatcher.WebFaultFormatter : object {
    public IDispatchFaultFormatter InnerFaultFormatter { get; public set; }
    internal WebFaultFormatter(IDispatchFaultFormatter faultFormatter);
    public sealed virtual MessageFault Serialize(FaultException faultException, String& action);
    public sealed virtual IDispatchFaultFormatter get_InnerFaultFormatter();
    public sealed virtual void set_InnerFaultFormatter(IDispatchFaultFormatter value);
}
public class System.ServiceModel.Dispatcher.WebHttpDispatchOperationSelector : object {
    public static string HttpOperationSelectorUriMatchedPropertyName;
    internal static string HttpOperationSelectorDataPropertyName;
    public static string HttpOperationNamePropertyName;
    internal static string redirectOperationName;
    internal static string RedirectPropertyName;
    public WebHttpDispatchOperationSelector(ServiceEndpoint endpoint);
    public virtual UriTemplate GetUriTemplate(string operationName);
    public sealed virtual string SelectOperation(Message& message);
    protected virtual string SelectOperation(Message& message, Boolean& uriMatched);
}
internal class System.ServiceModel.Dispatcher.WebHttpDispatchOperationSelectorData : object {
    internal List`1<string> AllowedMethods { get; internal set; }
    internal string AllowHeader { get; }
    [CompilerGeneratedAttribute]
internal List`1<string> get_AllowedMethods();
    [CompilerGeneratedAttribute]
internal void set_AllowedMethods(List`1<string> value);
    internal string get_AllowHeader();
}
internal class System.ServiceModel.Dispatcher.WebScriptMetadataFormatter : object {
    public sealed virtual void DeserializeRequest(Message message, Object[] parameters);
    public sealed virtual Message SerializeReply(MessageVersion messageVersion, Object[] parameters, object result);
}
internal class System.ServiceModel.Dispatcher.XmlFormatMapping : MultiplexingFormatMapping {
    public static WebContentFormat WebContentFormat;
    internal static string defaultMediaType;
    public WebContentFormat ContentFormat { get; }
    public WebMessageFormat MessageFormat { get; }
    public string DefaultMediaType { get; }
    protected MessageEncoder Encoder { get; }
    public XmlFormatMapping(Encoding writeEncoding, WebContentTypeMapper contentTypeMapper);
    private static XmlFormatMapping();
    public virtual WebContentFormat get_ContentFormat();
    public virtual WebMessageFormat get_MessageFormat();
    public virtual string get_DefaultMediaType();
    protected virtual MessageEncoder get_Encoder();
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class System.ServiceModel.SR2 : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AtMostOneRequestBodyParameterAllowedForStream { get; }
    internal static string AtMostOneRequestBodyParameterAllowedForUnwrappedMessages { get; }
    internal static string AutomaticFormatSelectionNotSupportedInScripts { get; }
    internal static string BodyStyleNotSupportedByWebScript { get; }
    internal static string CacheProfileAttributeOnlyWithGet { get; }
    internal static string CacheProfileLocationNotSupported { get; }
    internal static string CacheProfileNameNullOrEmpty { get; }
    internal static string CacheProfileNotConfigured { get; }
    internal static string CacheProfileOnlySupportedInAspNetCompatibilityMode { get; }
    internal static string CacheProfileSqlDependencyIsInvalid { get; }
    internal static string CacheProfileValueMissing { get; }
    internal static string CannotDeserializeBody { get; }
    internal static string CannotSerializeType { get; }
    internal static string ChannelDispatcherMustBePresent { get; }
    internal static string CommandNotificationSqlDependencyNotSupported { get; }
    internal static string ConditionalRetrieveGetAndHeadOnly { get; }
    internal static string ConditionalUpdatePutPostAndDeleteOnly { get; }
    internal static string ConfigInvalidBindingConfigurationName { get; }
    internal static string ConfigInvalidWebContentTypeMapper { get; }
    internal static string ConfigInvalidWebContentTypeMapperType { get; }
    internal static string ConfigWebContentTypeMapperNoConstructor { get; }
    internal static string CrossDomainJavascriptAuthNotSupported { get; }
    internal static string CrossDomainJavascriptNotsupported { get; }
    internal static string DefaultContentFormatNotAllowedInProperty { get; }
    internal static string EndpointAddressCannotBeNull { get; }
    internal static string ErrorEncounteredInContentTypeMapper { get; }
    internal static string FaultExceptionEnabledNotSupportedInScripts { get; }
    internal static string FormatterCannotBeUsedForReplyMessages { get; }
    internal static string FormatterCannotBeUsedForRequestMessages { get; }
    internal static string GETCannotHaveBody { get; }
    internal static string GETCannotHaveMCParameter { get; }
    internal static string HelpExampleGeneratorHandlerNotFound { get; }
    internal static string HelpExampleGeneratorLanguage { get; }
    internal static string HelpExampleGeneratorMaxDepthLevelReached { get; }
    internal static string HelpExampleGeneratorSchemaObjectNotSupported { get; }
    internal static string HelpExampleGeneratorStringContent { get; }
    internal static string HelpExampleGeneratorThisElementContainsText { get; }
    internal static string HelpPageAdditionalRequestSchema { get; }
    internal static string HelpPageAdditionalResponseSchema { get; }
    internal static string HelpPageBody { get; }
    internal static string HelpPageBodyIsEmpty { get; }
    internal static string HelpPageBodyIsWrapped { get; }
    internal static string HelpPageCallbackText { get; }
    internal static string HelpPageCouldNotGenerateSchema { get; }
    internal static string HelpPageDefaultDescription { get; }
    internal static string HelpPageDescription { get; }
    internal static string HelpPageEndpointNotFound { get; }
    internal static string HelpPageEndpointNotFoundWithLink { get; }
    internal static string HelpPageExample { get; }
    internal static string HelpPageFailedToCreateErrorMessage { get; }
    internal static string HelpPageFormat { get; }
    internal static string HelpPageHtml { get; }
    internal static string HelpPageIsAtom10Entry { get; }
    internal static string HelpPageIsAtom10Feed { get; }
    internal static string HelpPageIsAtomPubCategoriesDocument { get; }
    internal static string HelpPageIsAtomPubServiceDocument { get; }
    internal static string HelpPageIsMessage { get; }
    internal static string HelpPageIsRSS20Feed { get; }
    internal static string HelpPageIsStream { get; }
    internal static string HelpPageIsSyndication { get; }
    internal static string HelpPageIsXML { get; }
    internal static string HelpPageJsonRequest { get; }
    internal static string HelpPageJsonResponse { get; }
    internal static string HelpPageMessageDirection { get; }
    internal static string HelpPageMethod { get; }
    internal static string HelpPageMethodNotAllowed { get; }
    internal static string HelpPageMethodNotAllowedWithLink { get; }
    internal static string HelpPageNA { get; }
    internal static string HelpPageNotSupportedInScripts { get; }
    internal static string HelpPageOperationMethod { get; }
    internal static string HelpPageOperationsAt { get; }
    internal static string HelpPageOperationUri { get; }
    internal static string HelpPageRedirect { get; }
    internal static string HelpPageReferenceFor { get; }
    internal static string HelpPageRequest { get; }
    internal static string HelpPageRequestErrorTitle { get; }
    internal static string HelpPageRequestSchema { get; }
    internal static string HelpPageResponse { get; }
    internal static string HelpPageResponseSchema { get; }
    internal static string HelpPageSchema { get; }
    internal static string HelpPageStaticText { get; }
    internal static string HelpPageTitleText { get; }
    internal static string HelpPageUnknown { get; }
    internal static string HelpPageUri { get; }
    internal static string HelpPageValidElementOfType { get; }
    internal static string HelpPageXmlRequest { get; }
    internal static string HelpPageXmlResponse { get; }
    internal static string HelpServerErrorProcessingRequest { get; }
    internal static string HelpServerErrorProcessingRequestWithDetails { get; }
    internal static string HelpServerErrorProcessingRequestWithDetailsAndLink { get; }
    internal static string HelpServerErrorProcessingRequestWithLink { get; }
    internal static string HttpContextNoIncomingMessageProperty { get; }
    internal static string HttpTransferServiceHostMultipleContracts { get; }
    internal static string HttpTransferServiceHostNoContract { get; }
    internal static string HttpUnhandledOperationInvokerCalledWithoutMessage { get; }
    internal static string InvalidHttpMessageFormat { get; }
    internal static string InvalidHttpMessageFormat3 { get; }
    internal static string InvalidMessageContractWithoutWrapperName { get; }
    internal static string InvalidMethodWithSOAPHeaders { get; }
    internal static string InvalidXmlCharactersInNameUsedWithPOSTMethod { get; }
    internal static string JavascriptCallbackNotEnabled { get; }
    internal static string JavascriptCallbackNotsupported { get; }
    internal static string JsonEncodingNotSupported { get; }
    internal static string JsonFormatRequiresDataContract { get; }
    internal static string JsonFormatterExpectedAttributeNull { get; }
    internal static string JsonFormatterExpectedAttributeObject { get; }
    internal static string JsonNoEndpointAtMetadataAddress { get; }
    internal static string JsonOnlySupportsMessageVersionNone { get; }
    internal static string JsonValueMustBeInRange { get; }
    internal static string JsonWebScriptServiceHostAtLeastOneServiceContract { get; }
    internal static string JsonWebScriptServiceHostOneServiceContract { get; }
    internal static string ManualAddressingCannotBeFalseWithTransportBindingElement { get; }
    internal static string MaxReceivedMessageSizeExceeded { get; }
    internal static string MCAtMostOneRequestBodyParameterAllowedForUnwrappedMessages { get; }
    internal static string MessageBodyIsStream { get; }
    internal static string MessageBufferIsClosed { get; }
    internal static string MessageClosed { get; }
    internal static string MessageFormatPropertyNotFound { get; }
    internal static string MessageFormatPropertyNotFound2 { get; }
    internal static string MessageFormatPropertyNotFound3 { get; }
    internal static string MultipleOperationsInContractWithPathMethod { get; }
    internal static string MultipleWebAttributes { get; }
    internal static string NoOutOrRefParametersAllowedWithStreamResult { get; }
    internal static string NoOutOrRefStreamParametersAllowed { get; }
    internal static string OnlyDataContractAndXmlSerializerTypesInUnWrappedMode { get; }
    internal static string OnlyReturnValueBodyParameterAllowedForUnwrappedMessages { get; }
    internal static string OperationDoesNotSupportFormat { get; }
    internal static string OperationNameNotFound { get; }
    internal static string OperationSelectorNotWebSelector { get; }
    internal static string ParameterIsNotStreamType { get; }
    internal static string QueryStringFormatterOperationNotSupportedClientSide { get; }
    internal static string QueryStringFormatterOperationNotSupportedServerSide { get; }
    internal static string RpcEncodedNotSupportedForNoneMessageVersion { get; }
    internal static string SerializingReplyNotSupportedByFormatter { get; }
    internal static string SerializingRequestNotSupportedByFormatter { get; }
    internal static string ServiceEndpointMustHaveNonNullAddress { get; }
    internal static string StreamBodyMemberNotSupported { get; }
    internal static string TraceCodeAddingAuthenticatedResponseToOutputCache { get; }
    internal static string TraceCodeAddingResponseToOutputCache { get; }
    internal static string TraceCodeAutomaticFormatSelectedOperationDefault { get; }
    internal static string TraceCodeAutomaticFormatSelectedRequestBased { get; }
    internal static string TraceCodeJsonpCallbackNameSet { get; }
    internal static string TraceCodeRequestFormatSelectedByEncoderDefaults { get; }
    internal static string TraceCodeRequestFormatSelectedFromContentTypeMapper { get; }
    internal static string TraceCodeWebRequestMatchesOperation { get; }
    internal static string TraceCodeWebRequestRedirect { get; }
    internal static string TraceCodeWebRequestUnknownQueryParameterIgnored { get; }
    internal static string TypeIsNotParameterTypeAndIsNotPresentInKnownTypes { get; }
    internal static string TypeNotSupportedByQueryStringConverter { get; }
    internal static string UnknownWebEncodingFormat { get; }
    internal static string UnrecognizedHttpMessageFormat { get; }
    internal static string UriTemplateMissingVar { get; }
    internal static string UriTemplatePathVarMustBeString { get; }
    internal static string UriTemplateQueryVarMustBeConvertible { get; }
    internal static string UriTemplateVarCaseDistinction { get; }
    internal static string UTParamsDoNotComposeWithMessage { get; }
    internal static string UTParamsDoNotComposeWithMessageContract { get; }
    internal static string ValueMustBeNonNegative { get; }
    internal static string ValueMustBePositive { get; }
    internal static string WCFBindingCannotBeUsedWithUriOperationSelectorBehaviorBadMessageVersion { get; }
    internal static string WCFBindingCannotBeUsedWithUriOperationSelectorBehaviorBadScheme { get; }
    internal static string WeakEntityTagsNotSupported { get; }
    internal static string WebBehaviorNotFoundWithEndpoint { get; }
    internal static string WebBodyFormatPropertyToString { get; }
    internal static string WebEndpointRequiredBinding { get; }
    internal static string WebHttpBindingNotFoundWithEndpoint { get; }
    internal static string WebHttpServiceEndpointCannotHaveMessageHeaders { get; }
    internal static string WebRequestDidNotMatchMethod { get; }
    internal static string WebRequestDidNotMatchOperation { get; }
    internal static string WebScriptInvalidHttpRequestMethod { get; }
    internal static string WebScriptNotSupportedForXmlSerializerFormat { get; }
    internal static string WebScriptOutRefOperationsNotSupported { get; }
    internal static string XmlSerializersCreatedBeforeRegistration { get; }
    internal static string XmlWriterBackedStreamMethodNotSupported { get; }
    internal static string XmlWriterBackedStreamPropertyGetNotSupported { get; }
    internal static string XmlWriterBackedStreamPropertySetNotSupported { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AtMostOneRequestBodyParameterAllowedForStream();
    internal static string get_AtMostOneRequestBodyParameterAllowedForUnwrappedMessages();
    internal static string get_AutomaticFormatSelectionNotSupportedInScripts();
    internal static string get_BodyStyleNotSupportedByWebScript();
    internal static string get_CacheProfileAttributeOnlyWithGet();
    internal static string get_CacheProfileLocationNotSupported();
    internal static string get_CacheProfileNameNullOrEmpty();
    internal static string get_CacheProfileNotConfigured();
    internal static string get_CacheProfileOnlySupportedInAspNetCompatibilityMode();
    internal static string get_CacheProfileSqlDependencyIsInvalid();
    internal static string get_CacheProfileValueMissing();
    internal static string get_CannotDeserializeBody();
    internal static string get_CannotSerializeType();
    internal static string get_ChannelDispatcherMustBePresent();
    internal static string get_CommandNotificationSqlDependencyNotSupported();
    internal static string get_ConditionalRetrieveGetAndHeadOnly();
    internal static string get_ConditionalUpdatePutPostAndDeleteOnly();
    internal static string get_ConfigInvalidBindingConfigurationName();
    internal static string get_ConfigInvalidWebContentTypeMapper();
    internal static string get_ConfigInvalidWebContentTypeMapperType();
    internal static string get_ConfigWebContentTypeMapperNoConstructor();
    internal static string get_CrossDomainJavascriptAuthNotSupported();
    internal static string get_CrossDomainJavascriptNotsupported();
    internal static string get_DefaultContentFormatNotAllowedInProperty();
    internal static string get_EndpointAddressCannotBeNull();
    internal static string get_ErrorEncounteredInContentTypeMapper();
    internal static string get_FaultExceptionEnabledNotSupportedInScripts();
    internal static string get_FormatterCannotBeUsedForReplyMessages();
    internal static string get_FormatterCannotBeUsedForRequestMessages();
    internal static string get_GETCannotHaveBody();
    internal static string get_GETCannotHaveMCParameter();
    internal static string get_HelpExampleGeneratorHandlerNotFound();
    internal static string get_HelpExampleGeneratorLanguage();
    internal static string get_HelpExampleGeneratorMaxDepthLevelReached();
    internal static string get_HelpExampleGeneratorSchemaObjectNotSupported();
    internal static string get_HelpExampleGeneratorStringContent();
    internal static string get_HelpExampleGeneratorThisElementContainsText();
    internal static string get_HelpPageAdditionalRequestSchema();
    internal static string get_HelpPageAdditionalResponseSchema();
    internal static string get_HelpPageBody();
    internal static string get_HelpPageBodyIsEmpty();
    internal static string get_HelpPageBodyIsWrapped();
    internal static string get_HelpPageCallbackText();
    internal static string get_HelpPageCouldNotGenerateSchema();
    internal static string get_HelpPageDefaultDescription();
    internal static string get_HelpPageDescription();
    internal static string get_HelpPageEndpointNotFound();
    internal static string get_HelpPageEndpointNotFoundWithLink();
    internal static string get_HelpPageExample();
    internal static string get_HelpPageFailedToCreateErrorMessage();
    internal static string get_HelpPageFormat();
    internal static string get_HelpPageHtml();
    internal static string get_HelpPageIsAtom10Entry();
    internal static string get_HelpPageIsAtom10Feed();
    internal static string get_HelpPageIsAtomPubCategoriesDocument();
    internal static string get_HelpPageIsAtomPubServiceDocument();
    internal static string get_HelpPageIsMessage();
    internal static string get_HelpPageIsRSS20Feed();
    internal static string get_HelpPageIsStream();
    internal static string get_HelpPageIsSyndication();
    internal static string get_HelpPageIsXML();
    internal static string get_HelpPageJsonRequest();
    internal static string get_HelpPageJsonResponse();
    internal static string get_HelpPageMessageDirection();
    internal static string get_HelpPageMethod();
    internal static string get_HelpPageMethodNotAllowed();
    internal static string get_HelpPageMethodNotAllowedWithLink();
    internal static string get_HelpPageNA();
    internal static string get_HelpPageNotSupportedInScripts();
    internal static string get_HelpPageOperationMethod();
    internal static string get_HelpPageOperationsAt();
    internal static string get_HelpPageOperationUri();
    internal static string get_HelpPageRedirect();
    internal static string get_HelpPageReferenceFor();
    internal static string get_HelpPageRequest();
    internal static string get_HelpPageRequestErrorTitle();
    internal static string get_HelpPageRequestSchema();
    internal static string get_HelpPageResponse();
    internal static string get_HelpPageResponseSchema();
    internal static string get_HelpPageSchema();
    internal static string get_HelpPageStaticText();
    internal static string get_HelpPageTitleText();
    internal static string get_HelpPageUnknown();
    internal static string get_HelpPageUri();
    internal static string get_HelpPageValidElementOfType();
    internal static string get_HelpPageXmlRequest();
    internal static string get_HelpPageXmlResponse();
    internal static string get_HelpServerErrorProcessingRequest();
    internal static string get_HelpServerErrorProcessingRequestWithDetails();
    internal static string get_HelpServerErrorProcessingRequestWithDetailsAndLink();
    internal static string get_HelpServerErrorProcessingRequestWithLink();
    internal static string get_HttpContextNoIncomingMessageProperty();
    internal static string get_HttpTransferServiceHostMultipleContracts();
    internal static string get_HttpTransferServiceHostNoContract();
    internal static string get_HttpUnhandledOperationInvokerCalledWithoutMessage();
    internal static string get_InvalidHttpMessageFormat();
    internal static string get_InvalidHttpMessageFormat3();
    internal static string get_InvalidMessageContractWithoutWrapperName();
    internal static string get_InvalidMethodWithSOAPHeaders();
    internal static string get_InvalidXmlCharactersInNameUsedWithPOSTMethod();
    internal static string get_JavascriptCallbackNotEnabled();
    internal static string get_JavascriptCallbackNotsupported();
    internal static string get_JsonEncodingNotSupported();
    internal static string get_JsonFormatRequiresDataContract();
    internal static string get_JsonFormatterExpectedAttributeNull();
    internal static string get_JsonFormatterExpectedAttributeObject();
    internal static string get_JsonNoEndpointAtMetadataAddress();
    internal static string get_JsonOnlySupportsMessageVersionNone();
    internal static string get_JsonValueMustBeInRange();
    internal static string get_JsonWebScriptServiceHostAtLeastOneServiceContract();
    internal static string get_JsonWebScriptServiceHostOneServiceContract();
    internal static string get_ManualAddressingCannotBeFalseWithTransportBindingElement();
    internal static string get_MaxReceivedMessageSizeExceeded();
    internal static string get_MCAtMostOneRequestBodyParameterAllowedForUnwrappedMessages();
    internal static string get_MessageBodyIsStream();
    internal static string get_MessageBufferIsClosed();
    internal static string get_MessageClosed();
    internal static string get_MessageFormatPropertyNotFound();
    internal static string get_MessageFormatPropertyNotFound2();
    internal static string get_MessageFormatPropertyNotFound3();
    internal static string get_MultipleOperationsInContractWithPathMethod();
    internal static string get_MultipleWebAttributes();
    internal static string get_NoOutOrRefParametersAllowedWithStreamResult();
    internal static string get_NoOutOrRefStreamParametersAllowed();
    internal static string get_OnlyDataContractAndXmlSerializerTypesInUnWrappedMode();
    internal static string get_OnlyReturnValueBodyParameterAllowedForUnwrappedMessages();
    internal static string get_OperationDoesNotSupportFormat();
    internal static string get_OperationNameNotFound();
    internal static string get_OperationSelectorNotWebSelector();
    internal static string get_ParameterIsNotStreamType();
    internal static string get_QueryStringFormatterOperationNotSupportedClientSide();
    internal static string get_QueryStringFormatterOperationNotSupportedServerSide();
    internal static string get_RpcEncodedNotSupportedForNoneMessageVersion();
    internal static string get_SerializingReplyNotSupportedByFormatter();
    internal static string get_SerializingRequestNotSupportedByFormatter();
    internal static string get_ServiceEndpointMustHaveNonNullAddress();
    internal static string get_StreamBodyMemberNotSupported();
    internal static string get_TraceCodeAddingAuthenticatedResponseToOutputCache();
    internal static string get_TraceCodeAddingResponseToOutputCache();
    internal static string get_TraceCodeAutomaticFormatSelectedOperationDefault();
    internal static string get_TraceCodeAutomaticFormatSelectedRequestBased();
    internal static string get_TraceCodeJsonpCallbackNameSet();
    internal static string get_TraceCodeRequestFormatSelectedByEncoderDefaults();
    internal static string get_TraceCodeRequestFormatSelectedFromContentTypeMapper();
    internal static string get_TraceCodeWebRequestMatchesOperation();
    internal static string get_TraceCodeWebRequestRedirect();
    internal static string get_TraceCodeWebRequestUnknownQueryParameterIgnored();
    internal static string get_TypeIsNotParameterTypeAndIsNotPresentInKnownTypes();
    internal static string get_TypeNotSupportedByQueryStringConverter();
    internal static string get_UnknownWebEncodingFormat();
    internal static string get_UnrecognizedHttpMessageFormat();
    internal static string get_UriTemplateMissingVar();
    internal static string get_UriTemplatePathVarMustBeString();
    internal static string get_UriTemplateQueryVarMustBeConvertible();
    internal static string get_UriTemplateVarCaseDistinction();
    internal static string get_UTParamsDoNotComposeWithMessage();
    internal static string get_UTParamsDoNotComposeWithMessageContract();
    internal static string get_ValueMustBeNonNegative();
    internal static string get_ValueMustBePositive();
    internal static string get_WCFBindingCannotBeUsedWithUriOperationSelectorBehaviorBadMessageVersion();
    internal static string get_WCFBindingCannotBeUsedWithUriOperationSelectorBehaviorBadScheme();
    internal static string get_WeakEntityTagsNotSupported();
    internal static string get_WebBehaviorNotFoundWithEndpoint();
    internal static string get_WebBodyFormatPropertyToString();
    internal static string get_WebEndpointRequiredBinding();
    internal static string get_WebHttpBindingNotFoundWithEndpoint();
    internal static string get_WebHttpServiceEndpointCannotHaveMessageHeaders();
    internal static string get_WebRequestDidNotMatchMethod();
    internal static string get_WebRequestDidNotMatchOperation();
    internal static string get_WebScriptInvalidHttpRequestMethod();
    internal static string get_WebScriptNotSupportedForXmlSerializerFormat();
    internal static string get_WebScriptOutRefOperationsNotSupported();
    internal static string get_XmlSerializersCreatedBeforeRegistration();
    internal static string get_XmlWriterBackedStreamMethodNotSupported();
    internal static string get_XmlWriterBackedStreamPropertyGetNotSupported();
    internal static string get_XmlWriterBackedStreamPropertySetNotSupported();
    internal static string GetString(string name, Object[] args);
    internal static string GetString(CultureInfo culture, string name, Object[] args);
}
[AttributeUsageAttribute("32767")]
internal class System.ServiceModel.SR2CategoryAttribute : CategoryAttribute {
    public SR2CategoryAttribute(string category);
    public SR2CategoryAttribute(string category, string resourceSet);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.ServiceModel.SR2DescriptionAttribute : DescriptionAttribute {
    public SR2DescriptionAttribute(string description);
    public SR2DescriptionAttribute(string description, string resourceSet);
}
[AttributeUsageAttribute("32767")]
internal class System.ServiceModel.SR2DisplayNameAttribute : DisplayNameAttribute {
    public SR2DisplayNameAttribute(string name);
    public SR2DisplayNameAttribute(string name, string resourceSet);
}
internal class System.ServiceModel.Web.AcceptHeaderElementComparer : object {
    private static AcceptHeaderElementComparer();
    public sealed virtual int Compare(ContentType x, ContentType y);
}
[AttributeUsageAttribute("64")]
public class System.ServiceModel.Web.AspNetCacheProfileAttribute : Attribute {
    public string CacheProfileName { get; }
    public AspNetCacheProfileAttribute(string cacheProfileName);
    public string get_CacheProfileName();
    public sealed virtual void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation);
    public sealed virtual void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation);
    public sealed virtual void Validate(OperationDescription operationDescription);
}
internal abstract class System.ServiceModel.Web.AutomaticEndpointGenerator : object {
    protected string BindingCollectionElementName { get; }
    protected AutomaticEndpointGenerator(IDictionary`2<string, ContractDescription> implementedContracts, string multipleContractsErrorMessage, string noContractErrorMessage, string standardEndpointKind);
    protected abstract virtual string get_BindingCollectionElementName();
    public ServiceEndpoint GenerateServiceEndpoint(ServiceHostBase serviceHost, Uri baseAddress);
    protected abstract virtual void ConfigureBinding(Binding binding, string uriScheme, AuthenticationSchemes supportedAuthenticationSchemes, bool hostedEnvironment);
}
internal class System.ServiceModel.Web.CachingParameterInspector : object {
    [SecuritySafeCriticalAttribute]
public CachingParameterInspector(string cacheProfileName);
    [SecuritySafeCriticalAttribute]
public sealed virtual void AfterCall(string operationName, Object[] outputs, object returnValue, object correlationState);
    public sealed virtual object BeforeCall(string operationName, Object[] inputs);
}
internal class System.ServiceModel.Web.Diagnostics.Application.TD : object {
    internal static CultureInfo Culture { get; internal set; }
    private static TD();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static bool JsonMessageDecodingStartIsEnabled();
    internal static void JsonMessageDecodingStart();
    internal static bool JsonMessageEncodingStartIsEnabled();
    internal static void JsonMessageEncodingStart(EventTraceActivity eventTraceActivity);
}
internal static class System.ServiceModel.Web.FxTrace : object {
    public static bool ShouldTraceCritical { get; }
    public static bool TracingEnabled { get; }
    public static bool ShouldTraceError { get; }
    public static bool ShouldTraceInformation { get; }
    public static bool ShouldTraceVerbose { get; }
    public static bool ShouldTraceWarning { get; }
    public static bool ShouldTraceCriticalToTraceSource { get; }
    public static bool ShouldTraceErrorToTraceSource { get; }
    public static bool ShouldTraceInformationToTraceSource { get; }
    public static bool ShouldTraceVerboseToTraceSource { get; }
    public static bool ShouldTraceWarningToTraceSource { get; }
    public static ExceptionTrace Exception { get; }
    public static EtwDiagnosticTrace Trace { get; }
    public static EventLogger EventLog { get; }
    private static FxTrace();
    [SecuritySafeCriticalAttribute]
public static void UpdateEventDefinitions(EventDescriptor[] eventDescriptors, UInt16[] end2EndEvents);
    public static bool IsEventEnabled(int index);
    public static bool get_ShouldTraceCritical();
    public static bool get_TracingEnabled();
    public static bool get_ShouldTraceError();
    public static bool get_ShouldTraceInformation();
    public static bool get_ShouldTraceVerbose();
    public static bool get_ShouldTraceWarning();
    public static bool get_ShouldTraceCriticalToTraceSource();
    public static bool get_ShouldTraceErrorToTraceSource();
    public static bool get_ShouldTraceInformationToTraceSource();
    public static bool get_ShouldTraceVerboseToTraceSource();
    public static bool get_ShouldTraceWarningToTraceSource();
    public static ExceptionTrace get_Exception();
    public static EtwDiagnosticTrace get_Trace();
    public static EventLogger get_EventLog();
}
internal class System.ServiceModel.Web.HelpOperationInvoker : object {
    public static string OperationName;
    public bool IsSynchronous { get; }
    public HelpOperationInvoker(HelpPage helpPage, IOperationInvoker unhandledDispatchOperation);
    public sealed virtual Object[] AllocateInputs();
    public sealed virtual object Invoke(object instance, Object[] inputs, Object[]& outputs);
    public sealed virtual IAsyncResult InvokeBegin(object instance, Object[] inputs, AsyncCallback callback, object state);
    public sealed virtual object InvokeEnd(object instance, Object[]& outputs, IAsyncResult result);
    public sealed virtual bool get_IsSynchronous();
}
internal static class System.ServiceModel.Web.HttpDateParse : object {
    internal static bool ParseHttpDate(string DateString, DateTime& dtOut);
}
public class System.ServiceModel.Web.IncomingWebRequestContext : object {
    internal static string UriTemplateMatchResultsPropertyName;
    public string Accept { get; }
    public long ContentLength { get; }
    public string ContentType { get; }
    public IEnumerable`1<string> IfMatch { get; }
    public IEnumerable`1<string> IfNoneMatch { get; }
    public Nullable`1<DateTime> IfModifiedSince { get; }
    public Nullable`1<DateTime> IfUnmodifiedSince { get; }
    public WebHeaderCollection Headers { get; }
    public string Method { get; }
    public UriTemplateMatch UriTemplateMatch { get; public set; }
    public string UserAgent { get; }
    internal IncomingWebRequestContext(OperationContext operationContext);
    private static IncomingWebRequestContext();
    public string get_Accept();
    public long get_ContentLength();
    public string get_ContentType();
    public IEnumerable`1<string> get_IfMatch();
    public IEnumerable`1<string> get_IfNoneMatch();
    public Nullable`1<DateTime> get_IfModifiedSince();
    public Nullable`1<DateTime> get_IfUnmodifiedSince();
    public WebHeaderCollection get_Headers();
    public string get_Method();
    public UriTemplateMatch get_UriTemplateMatch();
    public void set_UriTemplateMatch(UriTemplateMatch value);
    public string get_UserAgent();
    public void CheckConditionalRetrieve(string entityTag);
    public void CheckConditionalRetrieve(int entityTag);
    public void CheckConditionalRetrieve(long entityTag);
    public void CheckConditionalRetrieve(Guid entityTag);
    public void CheckConditionalRetrieve(DateTime lastModified);
    public void CheckConditionalUpdate(string entityTag);
    public void CheckConditionalUpdate(int entityTag);
    public void CheckConditionalUpdate(long entityTag);
    public void CheckConditionalUpdate(Guid entityTag);
    public Collection`1<ContentType> GetAcceptHeaderElements();
}
public class System.ServiceModel.Web.IncomingWebResponseContext : object {
    public long ContentLength { get; }
    public string ContentType { get; }
    public string ETag { get; }
    public WebHeaderCollection Headers { get; }
    public string Location { get; }
    public HttpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    internal IncomingWebResponseContext(OperationContext operationContext);
    public long get_ContentLength();
    public string get_ContentType();
    public string get_ETag();
    public WebHeaderCollection get_Headers();
    public string get_Location();
    public HttpStatusCode get_StatusCode();
    public string get_StatusDescription();
}
internal interface System.ServiceModel.Web.IWebFaultException {
    public HttpStatusCode StatusCode { get; }
    public Type DetailType { get; }
    public object DetailObject { get; }
    public Type[] KnownTypes { get; }
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual Type get_DetailType();
    public abstract virtual object get_DetailObject();
    public abstract virtual Type[] get_KnownTypes();
}
[AttributeUsageAttribute("4")]
public class System.ServiceModel.Web.JavascriptCallbackBehaviorAttribute : Attribute {
    public string UrlParameterName { get; public set; }
    public string get_UrlParameterName();
    public void set_UrlParameterName(string value);
    public sealed virtual void AddBindingParameters(ContractDescription contractDescription, ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public sealed virtual void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime);
    public sealed virtual void Validate(ContractDescription contractDescription, ServiceEndpoint endpoint);
}
public class System.ServiceModel.Web.OutgoingWebRequestContext : object {
    public string Accept { get; public set; }
    public long ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public WebHeaderCollection Headers { get; }
    public string IfMatch { get; public set; }
    public string IfModifiedSince { get; public set; }
    public string IfNoneMatch { get; public set; }
    public string IfUnmodifiedSince { get; public set; }
    public string Method { get; public set; }
    public bool SuppressEntityBody { get; public set; }
    public string UserAgent { get; public set; }
    internal OutgoingWebRequestContext(OperationContext operationContext);
    public string get_Accept();
    public void set_Accept(string value);
    public long get_ContentLength();
    public void set_ContentLength(long value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public WebHeaderCollection get_Headers();
    public string get_IfMatch();
    public void set_IfMatch(string value);
    public string get_IfModifiedSince();
    public void set_IfModifiedSince(string value);
    public string get_IfNoneMatch();
    public void set_IfNoneMatch(string value);
    public string get_IfUnmodifiedSince();
    public void set_IfUnmodifiedSince(string value);
    public string get_Method();
    public void set_Method(string value);
    public bool get_SuppressEntityBody();
    public void set_SuppressEntityBody(bool value);
    public string get_UserAgent();
    public void set_UserAgent(string value);
}
public class System.ServiceModel.Web.OutgoingWebResponseContext : object {
    internal static string WebResponseFormatPropertyName;
    internal static string AutomatedFormatSelectionContentTypePropertyName;
    public long ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public string ETag { get; public set; }
    public WebHeaderCollection Headers { get; }
    public DateTime LastModified { get; public set; }
    public string Location { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public bool SuppressEntityBody { get; public set; }
    public Nullable`1<WebMessageFormat> Format { get; public set; }
    internal string AutomatedFormatSelectionContentType { get; internal set; }
    public Encoding BindingWriteEncoding { get; }
    internal HttpResponseMessageProperty MessageProperty { get; }
    internal OutgoingWebResponseContext(OperationContext operationContext);
    private static OutgoingWebResponseContext();
    public long get_ContentLength();
    public void set_ContentLength(long value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_ETag();
    public void set_ETag(string value);
    public WebHeaderCollection get_Headers();
    public DateTime get_LastModified();
    public void set_LastModified(DateTime value);
    public string get_Location();
    public void set_Location(string value);
    public HttpStatusCode get_StatusCode();
    public void set_StatusCode(HttpStatusCode value);
    public string get_StatusDescription();
    public void set_StatusDescription(string value);
    public bool get_SuppressEntityBody();
    public void set_SuppressEntityBody(bool value);
    public Nullable`1<WebMessageFormat> get_Format();
    public void set_Format(Nullable`1<WebMessageFormat> value);
    internal string get_AutomatedFormatSelectionContentType();
    internal void set_AutomatedFormatSelectionContentType(string value);
    public Encoding get_BindingWriteEncoding();
    internal HttpResponseMessageProperty get_MessageProperty();
    public void SetETag(string entityTag);
    public void SetETag(int entityTag);
    public void SetETag(long entityTag);
    public void SetETag(Guid entityTag);
    public void SetStatusAsCreated(Uri locationUri);
    public void SetStatusAsNotFound();
    public void SetStatusAsNotFound(string description);
    internal static string GenerateValidEtagFromString(string entityTag);
    internal static string GenerateValidEtag(object entityTag);
}
[ExtensionAttribute]
internal static class System.ServiceModel.Web.Utility : object {
    public static string applicationXml;
    public static string textXml;
    public static string applicationJson;
    public static string textJson;
    public static string GET;
    [ExtensionAttribute]
public static bool IsXmlContent(string contentType);
    [ExtensionAttribute]
public static bool IsJsonContent(string contentType);
    public static string CombineUri(string former, string latter);
    public static List`1<string> QuoteAwareStringSplit(string str);
    public static string QuoteAwareSubString(string str, Int32& offset);
    public static ContentType GetContentType(string contentType);
    public static ContentType GetContentTypeOrNull(string contentType);
    public static string IEnumerableToCommaSeparatedString(IEnumerable`1<string> items);
    public static void AddRange(ICollection`1<T> list, IEnumerable`1<T> itemsToAdd);
}
public class System.ServiceModel.Web.WebChannelFactory`1 : ChannelFactory`1<TChannel> {
    public WebChannelFactory`1(Binding binding);
    public WebChannelFactory`1(ServiceEndpoint endpoint);
    public WebChannelFactory`1(string endpointConfigurationName);
    public WebChannelFactory`1(Type channelType);
    public WebChannelFactory`1(Uri remoteAddress);
    public WebChannelFactory`1(Binding binding, Uri remoteAddress);
    public WebChannelFactory`1(string endpointConfigurationName, Uri remoteAddress);
    protected virtual void OnOpening();
}
public class System.ServiceModel.Web.WebFaultException : FaultException {
    internal static string WebFaultCodeNamespace;
    public HttpStatusCode StatusCode { get; private set; }
    private Type System.ServiceModel.Web.IWebFaultException.DetailType { get; }
    private object System.ServiceModel.Web.IWebFaultException.DetailObject { get; }
    private Type[] System.ServiceModel.Web.IWebFaultException.KnownTypes { get; }
    public WebFaultException(HttpStatusCode statusCode);
    protected WebFaultException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    private sealed virtual override Type System.ServiceModel.Web.IWebFaultException.get_DetailType();
    private sealed virtual override object System.ServiceModel.Web.IWebFaultException.get_DetailObject();
    private sealed virtual override Type[] System.ServiceModel.Web.IWebFaultException.get_KnownTypes();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static FaultCode GetFaultCode(HttpStatusCode statusCode);
    internal static string GetDefaultReason(HttpStatusCode statusCode);
}
public class System.ServiceModel.Web.WebFaultException`1 : FaultException`1<T> {
    public HttpStatusCode StatusCode { get; private set; }
    private Type System.ServiceModel.Web.IWebFaultException.DetailType { get; }
    private object System.ServiceModel.Web.IWebFaultException.DetailObject { get; }
    private Type[] System.ServiceModel.Web.IWebFaultException.KnownTypes { get; }
    public WebFaultException`1(T detail, HttpStatusCode statusCode);
    public WebFaultException`1(T detail, HttpStatusCode statusCode, IEnumerable`1<Type> knownTypes);
    protected WebFaultException`1(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public sealed virtual HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
private void set_StatusCode(HttpStatusCode value);
    private sealed virtual override Type System.ServiceModel.Web.IWebFaultException.get_DetailType();
    private sealed virtual override object System.ServiceModel.Web.IWebFaultException.get_DetailObject();
    private sealed virtual override Type[] System.ServiceModel.Web.IWebFaultException.get_KnownTypes();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("64")]
public class System.ServiceModel.Web.WebGetAttribute : Attribute {
    public WebMessageBodyStyle BodyStyle { get; public set; }
    public bool IsBodyStyleSetExplicitly { get; }
    public bool IsRequestFormatSetExplicitly { get; }
    public bool IsResponseFormatSetExplicitly { get; }
    public WebMessageFormat RequestFormat { get; public set; }
    public WebMessageFormat ResponseFormat { get; public set; }
    public string UriTemplate { get; public set; }
    public WebMessageBodyStyle get_BodyStyle();
    public void set_BodyStyle(WebMessageBodyStyle value);
    public bool get_IsBodyStyleSetExplicitly();
    public bool get_IsRequestFormatSetExplicitly();
    public bool get_IsResponseFormatSetExplicitly();
    public WebMessageFormat get_RequestFormat();
    public void set_RequestFormat(WebMessageFormat value);
    public WebMessageFormat get_ResponseFormat();
    public void set_ResponseFormat(WebMessageFormat value);
    public string get_UriTemplate();
    public void set_UriTemplate(string value);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.Validate(OperationDescription operationDescription);
    private sealed virtual override void System.ServiceModel.Administration.IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance);
    private sealed virtual override string System.ServiceModel.Administration.IWmiInstanceProvider.GetInstanceType();
    internal WebMessageBodyStyle GetBodyStyleOrDefault(WebMessageBodyStyle defaultStyle);
    private sealed virtual override OperationContractAttribute System.ServiceModel.IOperationContractAttributeProvider.GetOperationContractAttribute();
}
[AttributeUsageAttribute("64")]
public class System.ServiceModel.Web.WebInvokeAttribute : Attribute {
    public WebMessageBodyStyle BodyStyle { get; public set; }
    public bool IsBodyStyleSetExplicitly { get; }
    public bool IsRequestFormatSetExplicitly { get; }
    public bool IsResponseFormatSetExplicitly { get; }
    public string Method { get; public set; }
    public WebMessageFormat RequestFormat { get; public set; }
    public WebMessageFormat ResponseFormat { get; public set; }
    public string UriTemplate { get; public set; }
    public WebMessageBodyStyle get_BodyStyle();
    public void set_BodyStyle(WebMessageBodyStyle value);
    public bool get_IsBodyStyleSetExplicitly();
    public bool get_IsRequestFormatSetExplicitly();
    public bool get_IsResponseFormatSetExplicitly();
    public string get_Method();
    public void set_Method(string value);
    public WebMessageFormat get_RequestFormat();
    public void set_RequestFormat(WebMessageFormat value);
    public WebMessageFormat get_ResponseFormat();
    public void set_ResponseFormat(WebMessageFormat value);
    public string get_UriTemplate();
    public void set_UriTemplate(string value);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.Validate(OperationDescription operationDescription);
    internal WebMessageBodyStyle GetBodyStyleOrDefault(WebMessageBodyStyle defaultStyle);
    private sealed virtual override void System.ServiceModel.Administration.IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance);
    private sealed virtual override string System.ServiceModel.Administration.IWmiInstanceProvider.GetInstanceType();
    private sealed virtual override OperationContractAttribute System.ServiceModel.IOperationContractAttributeProvider.GetOperationContractAttribute();
}
public enum System.ServiceModel.Web.WebMessageBodyStyle : Enum {
    public int value__;
    public static WebMessageBodyStyle Bare;
    public static WebMessageBodyStyle Wrapped;
    public static WebMessageBodyStyle WrappedRequest;
    public static WebMessageBodyStyle WrappedResponse;
}
internal static class System.ServiceModel.Web.WebMessageBodyStyleHelper : object {
    internal static bool IsDefined(WebMessageBodyStyle style);
}
public enum System.ServiceModel.Web.WebMessageFormat : Enum {
    public int value__;
    public static WebMessageFormat Xml;
    public static WebMessageFormat Json;
}
internal static class System.ServiceModel.Web.WebMessageFormatHelper : object {
    internal static bool IsDefined(WebMessageFormat format);
}
public class System.ServiceModel.Web.WebOperationContext : object {
    internal static string DefaultTextMediaType;
    internal static string DefaultJsonMediaType;
    internal static string DefaultXmlMediaType;
    internal static string DefaultAtomMediaType;
    internal static string DefaultStreamMediaType;
    public static WebOperationContext Current { get; }
    public IncomingWebRequestContext IncomingRequest { get; }
    public IncomingWebResponseContext IncomingResponse { get; }
    public OutgoingWebRequestContext OutgoingRequest { get; }
    public OutgoingWebResponseContext OutgoingResponse { get; }
    public WebOperationContext(OperationContext operationContext);
    private static WebOperationContext();
    public static WebOperationContext get_Current();
    public IncomingWebRequestContext get_IncomingRequest();
    public IncomingWebResponseContext get_IncomingResponse();
    public OutgoingWebRequestContext get_OutgoingRequest();
    public OutgoingWebResponseContext get_OutgoingResponse();
    public sealed virtual void Attach(OperationContext owner);
    public sealed virtual void Detach(OperationContext owner);
    public Message CreateJsonResponse(T instance);
    public Message CreateJsonResponse(T instance, DataContractJsonSerializer serializer);
    public Message CreateXmlResponse(T instance);
    public Message CreateXmlResponse(T instance, XmlObjectSerializer serializer);
    public Message CreateXmlResponse(T instance, XmlSerializer serializer);
    public Message CreateXmlResponse(XDocument document);
    public Message CreateXmlResponse(XElement element);
    public Message CreateAtom10Response(SyndicationItem item);
    public Message CreateAtom10Response(SyndicationFeed feed);
    public Message CreateAtom10Response(ServiceDocument document);
    public Message CreateTextResponse(string text);
    public Message CreateTextResponse(string text, string contentType);
    public Message CreateTextResponse(string text, string contentType, Encoding encoding);
    public Message CreateTextResponse(Action`1<TextWriter> textWriter, string contentType);
    public Message CreateTextResponse(Action`1<TextWriter> textWriter, string contentType, Encoding encoding);
    public Message CreateStreamResponse(Stream stream, string contentType);
    public Message CreateStreamResponse(StreamBodyWriter bodyWriter, string contentType);
    public Message CreateStreamResponse(Action`1<Stream> streamWriter, string contentType);
    public UriTemplate GetUriTemplate(string operationName);
}
public class System.ServiceModel.Web.WebServiceHost : ServiceHost {
    public WebServiceHost(object singletonInstance, Uri[] baseAddresses);
    public WebServiceHost(Type serviceType, Uri[] baseAddresses);
    private static WebServiceHost();
    internal static void AddAutomaticWebHttpBindingEndpoints(ServiceHost host, IDictionary`2<string, ContractDescription> implementedContracts, string multipleContractsErrorMessage, string noContractErrorMessage, string standardEndpointKind);
    internal static void SetRawContentTypeMapperIfNecessary(ServiceEndpoint endpoint, bool isDispatch);
    protected virtual void OnOpening();
}
public class System.ServiceModel.WebHttpBinding : Binding {
    [DefaultValueAttribute("False")]
public bool AllowCookies { get; public set; }
    [DefaultValueAttribute("False")]
public bool BypassProxyOnLocal { get; public set; }
    public EnvelopeVersion EnvelopeVersion { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public HostNameComparisonMode HostNameComparisonMode { get; public set; }
    [DefaultValueAttribute("524288")]
public long MaxBufferPoolSize { get; public set; }
    [DefaultValueAttribute("65536")]
public int MaxBufferSize { get; public set; }
    [DefaultValueAttribute("65536")]
public long MaxReceivedMessageSize { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Uri ProxyAddress { get; public set; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; public set; }
    public string Scheme { get; }
    public WebHttpSecurity Security { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TransferMode TransferMode { get; public set; }
    [DefaultValueAttribute("True")]
public bool UseDefaultWebProxy { get; public set; }
    [TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
public Encoding WriteEncoding { get; public set; }
    public WebContentTypeMapper ContentTypeMapper { get; public set; }
    public bool CrossDomainScriptAccessEnabled { get; public set; }
    private bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }
    public WebHttpBinding(string configurationName);
    public WebHttpBinding(WebHttpSecurityMode securityMode);
    public bool get_AllowCookies();
    public void set_AllowCookies(bool value);
    public bool get_BypassProxyOnLocal();
    public void set_BypassProxyOnLocal(bool value);
    public EnvelopeVersion get_EnvelopeVersion();
    public HostNameComparisonMode get_HostNameComparisonMode();
    public void set_HostNameComparisonMode(HostNameComparisonMode value);
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public Uri get_ProxyAddress();
    public void set_ProxyAddress(Uri value);
    public XmlDictionaryReaderQuotas get_ReaderQuotas();
    public void set_ReaderQuotas(XmlDictionaryReaderQuotas value);
    public virtual string get_Scheme();
    public WebHttpSecurity get_Security();
    public void set_Security(WebHttpSecurity value);
    public TransferMode get_TransferMode();
    public void set_TransferMode(TransferMode value);
    public bool get_UseDefaultWebProxy();
    public void set_UseDefaultWebProxy(bool value);
    public Encoding get_WriteEncoding();
    public void set_WriteEncoding(Encoding value);
    public WebContentTypeMapper get_ContentTypeMapper();
    public void set_ContentTypeMapper(WebContentTypeMapper value);
    public bool get_CrossDomainScriptAccessEnabled();
    public void set_CrossDomainScriptAccessEnabled(bool value);
    private sealed virtual override bool System.ServiceModel.Channels.IBindingRuntimePreferences.get_ReceiveSynchronously();
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingParameterCollection parameters);
    public virtual BindingElementCollection CreateBindingElements();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeReaderQuotas();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeWriteEncoding();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeSecurity();
}
public class System.ServiceModel.WebHttpSecurity : object {
    internal static WebHttpSecurityMode DefaultMode;
    public WebHttpSecurityMode Mode { get; public set; }
    internal bool IsModeSet { get; }
    public HttpTransportSecurity Transport { get; public set; }
    public WebHttpSecurityMode get_Mode();
    public void set_Mode(WebHttpSecurityMode value);
    internal bool get_IsModeSet();
    public HttpTransportSecurity get_Transport();
    public void set_Transport(HttpTransportSecurity value);
    internal void DisableTransportAuthentication(HttpTransportBindingElement http);
    internal void EnableTransportAuthentication(HttpTransportBindingElement http);
    internal void EnableTransportSecurity(HttpsTransportBindingElement https);
    internal bool InternalShouldSerialize();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeMode();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeTransport();
}
public enum System.ServiceModel.WebHttpSecurityMode : Enum {
    public int value__;
    public static WebHttpSecurityMode None;
    public static WebHttpSecurityMode Transport;
    public static WebHttpSecurityMode TransportCredentialOnly;
}
internal static class System.ServiceModel.WebHttpSecurityModeHelper : object {
    internal static bool IsDefined(WebHttpSecurityMode value);
}
internal class System.ServiceModel.WebScriptServiceHost : ServiceHost {
    public WebScriptServiceHost(Type serviceType, Uri[] baseAddresses);
    private static WebScriptServiceHost();
    protected virtual void OnOpening();
}
