public class System.ServiceProcess.Design.ServiceInstallerDialog : Form {
    public string Password { get; public set; }
    public ServiceInstallerDialogResult Result { get; }
    public string Username { get; public set; }
    public string get_Password();
    public void set_Password(string value);
    public ServiceInstallerDialogResult get_Result();
    public string get_Username();
    public void set_Username(string value);
    [STAThreadAttribute]
public static void Main();
}
public enum System.ServiceProcess.Design.ServiceInstallerDialogResult : Enum {
    public int value__;
    public static ServiceInstallerDialogResult OK;
    public static ServiceInstallerDialogResult UseSystem;
    public static ServiceInstallerDialogResult Canceled;
}
internal class System.ServiceProcess.Design.ServiceNameConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public enum System.ServiceProcess.PowerBroadcastStatus : Enum {
    public int value__;
    public static PowerBroadcastStatus BatteryLow;
    public static PowerBroadcastStatus OemEvent;
    public static PowerBroadcastStatus PowerStatusChange;
    public static PowerBroadcastStatus QuerySuspend;
    public static PowerBroadcastStatus QuerySuspendFailed;
    public static PowerBroadcastStatus ResumeAutomatic;
    public static PowerBroadcastStatus ResumeCritical;
    public static PowerBroadcastStatus ResumeSuspend;
    public static PowerBroadcastStatus Suspend;
}
public enum System.ServiceProcess.ServiceAccount : Enum {
    public int value__;
    public static ServiceAccount LocalService;
    public static ServiceAccount NetworkService;
    public static ServiceAccount LocalSystem;
    public static ServiceAccount User;
}
[InstallerTypeAttribute("System.ServiceProcess.ServiceProcessInstaller")]
public class System.ServiceProcess.ServiceBase : Component {
    public static int MaxNameLength;
    [DefaultValueAttribute("True")]
[ServiceProcessDescriptionAttribute("SBAutoLog")]
public bool AutoLog { get; public set; }
    [ComVisibleAttribute("False")]
public int ExitCode { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanHandlePowerEvent { get; public set; }
    [ComVisibleAttribute("False")]
[DefaultValueAttribute("False")]
public bool CanHandleSessionChangeEvent { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanPauseAndContinue { get; public set; }
    [DefaultValueAttribute("False")]
public bool CanShutdown { get; public set; }
    [DefaultValueAttribute("True")]
public bool CanStop { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public EventLog EventLog { get; }
    [EditorBrowsableAttribute("2")]
protected IntPtr ServiceHandle { get; }
    [ServiceProcessDescriptionAttribute("SBServiceName")]
[TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string ServiceName { get; public set; }
    [ComVisibleAttribute("False")]
public void RequestAdditionalTime(int milliseconds);
    public bool get_AutoLog();
    public void set_AutoLog(bool value);
    public int get_ExitCode();
    public void set_ExitCode(int value);
    public bool get_CanHandlePowerEvent();
    public void set_CanHandlePowerEvent(bool value);
    public bool get_CanHandleSessionChangeEvent();
    public void set_CanHandleSessionChangeEvent(bool value);
    public bool get_CanPauseAndContinue();
    public void set_CanPauseAndContinue(bool value);
    public bool get_CanShutdown();
    public void set_CanShutdown(bool value);
    public bool get_CanStop();
    public void set_CanStop(bool value);
    public virtual EventLog get_EventLog();
    protected IntPtr get_ServiceHandle();
    public string get_ServiceName();
    public void set_ServiceName(string value);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnContinue();
    protected virtual void OnPause();
    protected virtual bool OnPowerEvent(PowerBroadcastStatus powerStatus);
    protected virtual void OnSessionChange(SessionChangeDescription changeDescription);
    protected virtual void OnShutdown();
    protected virtual void OnStart(String[] args);
    protected virtual void OnStop();
    protected virtual void OnCustomCommand(int command);
    public static void Run(ServiceBase[] services);
    public static void Run(ServiceBase service);
    public void Stop();
    [EditorBrowsableAttribute("1")]
[ComVisibleAttribute("False")]
public void ServiceMainCallback(int argCount, IntPtr argPointer);
}
[ServiceProcessDescriptionAttribute("ServiceControllerDesc")]
[DesignerAttribute("System.ServiceProcess.Design.ServiceControllerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.ServiceProcess.ServiceController : Component {
    [ServiceProcessDescriptionAttribute("SPCanPauseAndContinue")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CanPauseAndContinue { get; }
    [ServiceProcessDescriptionAttribute("SPCanShutdown")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CanShutdown { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[ServiceProcessDescriptionAttribute("SPCanStop")]
public bool CanStop { get; }
    [ReadOnlyAttribute("True")]
[ServiceProcessDescriptionAttribute("SPDisplayName")]
[DesignerSerializationVisibilityAttribute("0")]
public string DisplayName { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[ServiceProcessDescriptionAttribute("SPDependentServices")]
public ServiceController[] DependentServices { get; }
    [ServiceProcessDescriptionAttribute("SPMachineName")]
[SettingsBindableAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute(".")]
public string MachineName { get; public set; }
    [DefaultValueAttribute("")]
[ServiceProcessDescriptionAttribute("SPServiceName")]
[SettingsBindableAttribute("True")]
[TypeConverterAttribute("System.ServiceProcess.Design.ServiceNameConverter")]
[ReadOnlyAttribute("True")]
public string ServiceName { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[ServiceProcessDescriptionAttribute("SPServicesDependedOn")]
public ServiceController[] ServicesDependedOn { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SafeHandle ServiceHandle { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[ServiceProcessDescriptionAttribute("SPStatus")]
public ServiceControllerStatus Status { get; }
    [ServiceProcessDescriptionAttribute("SPServiceType")]
[DesignerSerializationVisibilityAttribute("0")]
public ServiceType ServiceType { get; }
    public ServiceController(string name);
    public ServiceController(string name, string machineName);
    private static ServiceController();
    public bool get_CanPauseAndContinue();
    public bool get_CanShutdown();
    public bool get_CanStop();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public ServiceController[] get_DependentServices();
    public string get_MachineName();
    public void set_MachineName(string value);
    public string get_ServiceName();
    public void set_ServiceName(string value);
    public ServiceController[] get_ServicesDependedOn();
    public SafeHandle get_ServiceHandle();
    public ServiceControllerStatus get_Status();
    public ServiceType get_ServiceType();
    public void Close();
    protected virtual void Dispose(bool disposing);
    public static ServiceController[] GetDevices();
    public static ServiceController[] GetDevices(string machineName);
    public static ServiceController[] GetServices();
    public static ServiceController[] GetServices(string machineName);
    public void Pause();
    public void Continue();
    public void ExecuteCommand(int command);
    public void Refresh();
    public void Start();
    public void Start(String[] args);
    public void Stop();
    public void WaitForStatus(ServiceControllerStatus desiredStatus);
    public void WaitForStatus(ServiceControllerStatus desiredStatus, TimeSpan timeout);
}
public class System.ServiceProcess.ServiceControllerPermission : ResourcePermissionBase {
    public ServiceControllerPermissionEntryCollection PermissionEntries { get; }
    public ServiceControllerPermission(PermissionState state);
    public ServiceControllerPermission(ServiceControllerPermissionAccess permissionAccess, string machineName, string serviceName);
    public ServiceControllerPermission(ServiceControllerPermissionEntry[] permissionAccessEntries);
    public ServiceControllerPermissionEntryCollection get_PermissionEntries();
    internal void Clear();
}
[FlagsAttribute]
public enum System.ServiceProcess.ServiceControllerPermissionAccess : Enum {
    public int value__;
    public static ServiceControllerPermissionAccess None;
    public static ServiceControllerPermissionAccess Browse;
    public static ServiceControllerPermissionAccess Control;
}
[AttributeUsageAttribute("621")]
public class System.ServiceProcess.ServiceControllerPermissionAttribute : CodeAccessSecurityAttribute {
    public string MachineName { get; public set; }
    public ServiceControllerPermissionAccess PermissionAccess { get; public set; }
    public string ServiceName { get; public set; }
    public ServiceControllerPermissionAttribute(SecurityAction action);
    public string get_MachineName();
    public void set_MachineName(string value);
    public ServiceControllerPermissionAccess get_PermissionAccess();
    public void set_PermissionAccess(ServiceControllerPermissionAccess value);
    public string get_ServiceName();
    public void set_ServiceName(string value);
    public virtual IPermission CreatePermission();
}
public class System.ServiceProcess.ServiceControllerPermissionEntry : object {
    public string MachineName { get; }
    public ServiceControllerPermissionAccess PermissionAccess { get; }
    public string ServiceName { get; }
    public ServiceControllerPermissionEntry(ServiceControllerPermissionAccess permissionAccess, string machineName, string serviceName);
    public string get_MachineName();
    public ServiceControllerPermissionAccess get_PermissionAccess();
    public string get_ServiceName();
}
[DefaultMemberAttribute("Item")]
public class System.ServiceProcess.ServiceControllerPermissionEntryCollection : CollectionBase {
    public ServiceControllerPermissionEntry Item { get; public set; }
    public ServiceControllerPermissionEntry get_Item(int index);
    public void set_Item(int index, ServiceControllerPermissionEntry value);
    public int Add(ServiceControllerPermissionEntry value);
    public void AddRange(ServiceControllerPermissionEntry[] value);
    public void AddRange(ServiceControllerPermissionEntryCollection value);
    public bool Contains(ServiceControllerPermissionEntry value);
    public void CopyTo(ServiceControllerPermissionEntry[] array, int index);
    public int IndexOf(ServiceControllerPermissionEntry value);
    public void Insert(int index, ServiceControllerPermissionEntry value);
    public void Remove(ServiceControllerPermissionEntry value);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
}
public enum System.ServiceProcess.ServiceControllerStatus : Enum {
    public int value__;
    public static ServiceControllerStatus ContinuePending;
    public static ServiceControllerStatus Paused;
    public static ServiceControllerStatus PausePending;
    public static ServiceControllerStatus Running;
    public static ServiceControllerStatus StartPending;
    public static ServiceControllerStatus Stopped;
    public static ServiceControllerStatus StopPending;
}
public class System.ServiceProcess.ServiceInstaller : ComponentInstaller {
    [DefaultValueAttribute("")]
[ServiceProcessDescriptionAttribute("ServiceInstallerDisplayName")]
public string DisplayName { get; public set; }
    [DefaultValueAttribute("")]
[ComVisibleAttribute("False")]
[ServiceProcessDescriptionAttribute("ServiceInstallerDescription")]
public string Description { get; public set; }
    [ServiceProcessDescriptionAttribute("ServiceInstallerServicesDependedOn")]
public String[] ServicesDependedOn { get; public set; }
    [ServiceProcessDescriptionAttribute("ServiceInstallerServiceName")]
[TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultValueAttribute("")]
public string ServiceName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ServiceProcessDescriptionAttribute("ServiceInstallerStartType")]
public ServiceStartMode StartType { get; public set; }
    [DefaultValueAttribute("False")]
[ServiceProcessDescriptionAttribute("ServiceInstallerDelayedAutoStart")]
public bool DelayedAutoStart { get; public set; }
    private static ServiceInstaller();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Description();
    public void set_Description(string value);
    public String[] get_ServicesDependedOn();
    public void set_ServicesDependedOn(String[] value);
    public string get_ServiceName();
    public void set_ServiceName(string value);
    public ServiceStartMode get_StartType();
    public void set_StartType(ServiceStartMode value);
    public bool get_DelayedAutoStart();
    public void set_DelayedAutoStart(bool value);
    public virtual void CopyFromComponent(IComponent component);
    public virtual void Install(IDictionary stateSaver);
    public virtual bool IsEquivalentInstaller(ComponentInstaller otherInstaller);
    public virtual void Rollback(IDictionary savedState);
    public virtual void Uninstall(IDictionary savedState);
}
[AttributeUsageAttribute("32767")]
public class System.ServiceProcess.ServiceProcessDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public ServiceProcessDescriptionAttribute(string description);
    public virtual string get_Description();
}
public class System.ServiceProcess.ServiceProcessInstaller : ComponentInstaller {
    public string HelpText { get; }
    [BrowsableAttribute("False")]
public string Password { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ServiceProcessDescriptionAttribute("ServiceProcessInstallerAccount")]
public ServiceAccount Account { get; public set; }
    [BrowsableAttribute("False")]
[TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string Username { get; public set; }
    public virtual string get_HelpText();
    public string get_Password();
    public void set_Password(string value);
    public ServiceAccount get_Account();
    public void set_Account(ServiceAccount value);
    public string get_Username();
    public void set_Username(string value);
    public virtual void CopyFromComponent(IComponent comp);
    public virtual void Install(IDictionary stateSaver);
    public virtual void Rollback(IDictionary savedState);
}
public enum System.ServiceProcess.ServiceStartMode : Enum {
    public int value__;
    public static ServiceStartMode Manual;
    public static ServiceStartMode Automatic;
    public static ServiceStartMode Disabled;
}
[FlagsAttribute]
public enum System.ServiceProcess.ServiceType : Enum {
    public int value__;
    public static ServiceType Adapter;
    public static ServiceType FileSystemDriver;
    public static ServiceType InteractiveProcess;
    public static ServiceType KernelDriver;
    public static ServiceType RecognizerDriver;
    public static ServiceType Win32OwnProcess;
    public static ServiceType Win32ShareProcess;
}
public class System.ServiceProcess.SessionChangeDescription : ValueType {
    private SessionChangeReason _reason;
    private int _id;
    public SessionChangeReason Reason { get; }
    public int SessionId { get; }
    public SessionChangeReason get_Reason();
    public int get_SessionId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public bool Equals(SessionChangeDescription changeDescription);
    public static bool op_Equality(SessionChangeDescription a, SessionChangeDescription b);
    public static bool op_Inequality(SessionChangeDescription a, SessionChangeDescription b);
}
public enum System.ServiceProcess.SessionChangeReason : Enum {
    public int value__;
    public static SessionChangeReason ConsoleConnect;
    public static SessionChangeReason ConsoleDisconnect;
    public static SessionChangeReason RemoteConnect;
    public static SessionChangeReason RemoteDisconnect;
    public static SessionChangeReason SessionLogon;
    public static SessionChangeReason SessionLogoff;
    public static SessionChangeReason SessionLock;
    public static SessionChangeReason SessionUnlock;
    public static SessionChangeReason SessionRemoteControl;
}
public class System.ServiceProcess.TimeoutException : SystemException {
    public TimeoutException(string message);
    public TimeoutException(string message, Exception innerException);
    protected TimeoutException(SerializationInfo info, StreamingContext context);
}
