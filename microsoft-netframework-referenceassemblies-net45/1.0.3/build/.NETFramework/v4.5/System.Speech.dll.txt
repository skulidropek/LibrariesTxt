public enum System.Speech.AudioFormat.AudioBitsPerSample : Enum {
    public int value__;
    public static AudioBitsPerSample Eight;
    public static AudioBitsPerSample Sixteen;
}
public enum System.Speech.AudioFormat.AudioChannel : Enum {
    public int value__;
    public static AudioChannel Mono;
    public static AudioChannel Stereo;
}
public enum System.Speech.AudioFormat.EncodingFormat : Enum {
    public int value__;
    public static EncodingFormat Pcm;
    public static EncodingFormat ALaw;
    public static EncodingFormat ULaw;
}
public class System.Speech.AudioFormat.SpeechAudioFormatInfo : object {
    [EditorBrowsableAttribute("2")]
public int AverageBytesPerSecond { get; }
    [EditorBrowsableAttribute("2")]
public int BitsPerSample { get; }
    [EditorBrowsableAttribute("2")]
public int BlockAlign { get; }
    public EncodingFormat EncodingFormat { get; }
    public int ChannelCount { get; }
    public int SamplesPerSecond { get; }
    [EditorBrowsableAttribute("2")]
public SpeechAudioFormatInfo(EncodingFormat encodingFormat, int samplesPerSecond, int bitsPerSample, int channelCount, int averageBytesPerSecond, int blockAlign, Byte[] formatSpecificData);
    public SpeechAudioFormatInfo(int samplesPerSecond, AudioBitsPerSample bitsPerSample, AudioChannel channel);
    public int get_AverageBytesPerSecond();
    public int get_BitsPerSample();
    public int get_BlockAlign();
    public EncodingFormat get_EncodingFormat();
    public int get_ChannelCount();
    public int get_SamplesPerSecond();
    public Byte[] FormatSpecificData();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Speech.Recognition.AudioLevelUpdatedEventArgs : EventArgs {
    public int AudioLevel { get; }
    public int get_AudioLevel();
}
public enum System.Speech.Recognition.AudioSignalProblem : Enum {
    public int value__;
    public static AudioSignalProblem None;
    public static AudioSignalProblem TooNoisy;
    public static AudioSignalProblem NoSignal;
    public static AudioSignalProblem TooLoud;
    public static AudioSignalProblem TooSoft;
    public static AudioSignalProblem TooFast;
    public static AudioSignalProblem TooSlow;
}
public class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs : EventArgs {
    public AudioSignalProblem AudioSignalProblem { get; }
    public int AudioLevel { get; }
    public TimeSpan AudioPosition { get; }
    public TimeSpan RecognizerAudioPosition { get; }
    public AudioSignalProblem get_AudioSignalProblem();
    public int get_AudioLevel();
    public TimeSpan get_AudioPosition();
    public TimeSpan get_RecognizerAudioPosition();
}
public enum System.Speech.Recognition.AudioState : Enum {
    public int value__;
    public static AudioState Stopped;
    public static AudioState Silence;
    public static AudioState Speech;
}
public class System.Speech.Recognition.AudioStateChangedEventArgs : EventArgs {
    public AudioState AudioState { get; }
    public AudioState get_AudioState();
}
[DebuggerDisplayAttribute("{_oneOf.DebugSummary}")]
public class System.Speech.Recognition.Choices : object {
    public Choices(String[] phrases);
    public Choices(GrammarBuilder[] alternateChoices);
    public void Add(String[] phrases);
    public void Add(GrammarBuilder[] alternateChoices);
    public GrammarBuilder ToGrammarBuilder();
}
public class System.Speech.Recognition.DictationGrammar : Grammar {
    public DictationGrammar(string topic);
    private static DictationGrammar();
    public void SetDictationContext(string precedingText, string subsequentText);
}
[FlagsAttribute]
public enum System.Speech.Recognition.DisplayAttributes : Enum {
    public int value__;
    public static DisplayAttributes None;
    public static DisplayAttributes ZeroTrailingSpaces;
    public static DisplayAttributes OneTrailingSpace;
    public static DisplayAttributes TwoTrailingSpaces;
    public static DisplayAttributes ConsumeLeadingSpaces;
}
public class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs : AsyncCompletedEventArgs {
    public RecognitionResult Result { get; }
    public RecognitionResult get_Result();
}
[DebuggerDisplayAttribute("Grammar: {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")]
public class System.Speech.Recognition.Grammar : object {
    public bool Enabled { get; public set; }
    public float Weight { get; public set; }
    public int Priority { get; public set; }
    public string Name { get; public set; }
    public string RuleName { get; }
    public bool Loaded { get; }
    protected internal bool IsStg { get; }
    protected string ResourceName { get; protected set; }
    public Grammar(string path);
    public Grammar(string path, string ruleName);
    public Grammar(string path, string ruleName, Object[] parameters);
    public Grammar(SrgsDocument srgsDocument);
    public Grammar(SrgsDocument srgsDocument, string ruleName);
    public Grammar(SrgsDocument srgsDocument, string ruleName, Object[] parameters);
    [EditorBrowsableAttribute("2")]
public Grammar(SrgsDocument srgsDocument, string ruleName, Uri baseUri);
    [EditorBrowsableAttribute("2")]
public Grammar(SrgsDocument srgsDocument, string ruleName, Uri baseUri, Object[] parameters);
    public Grammar(Stream stream);
    public Grammar(Stream stream, string ruleName);
    public Grammar(Stream stream, string ruleName, Object[] parameters);
    [EditorBrowsableAttribute("2")]
public Grammar(Stream stream, string ruleName, Uri baseUri);
    [EditorBrowsableAttribute("2")]
public Grammar(Stream stream, string ruleName, Uri baseUri, Object[] parameters);
    public Grammar(GrammarBuilder builder);
    private static Grammar();
    protected void StgInit(Object[] parameters);
    public static Grammar LoadLocalizedGrammarFromType(Type type, Object[] onInitParameters);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public float get_Weight();
    public void set_Weight(float value);
    public int get_Priority();
    public void set_Priority(int value);
    public string get_Name();
    public void set_Name(string value);
    public string get_RuleName();
    public bool get_Loaded();
    public void add_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    public void remove_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    protected internal virtual bool get_IsStg();
    protected string get_ResourceName();
    protected void set_ResourceName(string value);
}
[DebuggerDisplayAttribute("{DebugSummary}")]
public class System.Speech.Recognition.GrammarBuilder : object {
    public string DebugShowPhrases { get; }
    public CultureInfo Culture { get; public set; }
    public GrammarBuilder(string phrase);
    public GrammarBuilder(string phrase, SubsetMatchingMode subsetMatchingCriteria);
    public GrammarBuilder(string phrase, int minRepeat, int maxRepeat);
    public GrammarBuilder(GrammarBuilder builder, int minRepeat, int maxRepeat);
    public GrammarBuilder(Choices alternateChoices);
    public GrammarBuilder(SemanticResultKey key);
    public GrammarBuilder(SemanticResultValue value);
    public void Append(string phrase);
    public void Append(string phrase, SubsetMatchingMode subsetMatchingCriteria);
    public void Append(string phrase, int minRepeat, int maxRepeat);
    public void Append(GrammarBuilder builder);
    public void Append(Choices alternateChoices);
    public void Append(SemanticResultKey key);
    public void Append(SemanticResultValue value);
    public void Append(GrammarBuilder builder, int minRepeat, int maxRepeat);
    public void AppendDictation();
    public void AppendDictation(string category);
    public void AppendWildcard();
    public void AppendRuleReference(string path);
    public void AppendRuleReference(string path, string rule);
    public string get_DebugShowPhrases();
    public void set_Culture(CultureInfo value);
    public CultureInfo get_Culture();
    public static GrammarBuilder op_Addition(string phrase, GrammarBuilder builder);
    public static GrammarBuilder Add(string phrase, GrammarBuilder builder);
    public static GrammarBuilder op_Addition(GrammarBuilder builder, string phrase);
    public static GrammarBuilder Add(GrammarBuilder builder, string phrase);
    public static GrammarBuilder op_Addition(Choices choices, GrammarBuilder builder);
    public static GrammarBuilder Add(Choices choices, GrammarBuilder builder);
    public static GrammarBuilder op_Addition(GrammarBuilder builder, Choices choices);
    public static GrammarBuilder Add(GrammarBuilder builder, Choices choices);
    public static GrammarBuilder op_Addition(GrammarBuilder builder1, GrammarBuilder builder2);
    public static GrammarBuilder Add(GrammarBuilder builder1, GrammarBuilder builder2);
    public static GrammarBuilder op_Implicit(string phrase);
    public static GrammarBuilder op_Implicit(Choices choices);
    public static GrammarBuilder op_Implicit(SemanticResultKey semanticKey);
    public static GrammarBuilder op_Implicit(SemanticResultValue semanticValue);
}
public class System.Speech.Recognition.LoadGrammarCompletedEventArgs : AsyncCompletedEventArgs {
    public Grammar Grammar { get; }
    public Grammar get_Grammar();
}
public abstract class System.Speech.Recognition.RecognitionEventArgs : EventArgs {
    public RecognitionResult Result { get; }
    public RecognitionResult get_Result();
}
[DebuggerDisplayAttribute("{DebuggerDisplayString ()}")]
public class System.Speech.Recognition.RecognitionResult : RecognizedPhrase {
    public RecognizedAudio Audio { get; }
    public ReadOnlyCollection`1<RecognizedPhrase> Alternates { get; }
    public RecognizedAudio GetAudioForWordRange(RecognizedWordUnit firstWord, RecognizedWordUnit lastWord);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public RecognizedAudio get_Audio();
    public ReadOnlyCollection`1<RecognizedPhrase> get_Alternates();
}
public class System.Speech.Recognition.RecognizeCompletedEventArgs : AsyncCompletedEventArgs {
    public RecognitionResult Result { get; }
    public bool InitialSilenceTimeout { get; }
    public bool BabbleTimeout { get; }
    public bool InputStreamEnded { get; }
    public TimeSpan AudioPosition { get; }
    public RecognitionResult get_Result();
    public bool get_InitialSilenceTimeout();
    public bool get_BabbleTimeout();
    public bool get_InputStreamEnded();
    public TimeSpan get_AudioPosition();
}
public class System.Speech.Recognition.RecognizedAudio : object {
    public SpeechAudioFormatInfo Format { get; }
    public DateTime StartTime { get; }
    public TimeSpan AudioPosition { get; }
    public TimeSpan Duration { get; }
    public SpeechAudioFormatInfo get_Format();
    public DateTime get_StartTime();
    public TimeSpan get_AudioPosition();
    public TimeSpan get_Duration();
    public void WriteToWaveStream(Stream outputStream);
    public void WriteToAudioStream(Stream outputStream);
    public RecognizedAudio GetRange(TimeSpan audioPosition, TimeSpan duration);
}
[DebuggerDisplayAttribute("{Text}")]
public class System.Speech.Recognition.RecognizedPhrase : object {
    public string Text { get; }
    public float Confidence { get; }
    public ReadOnlyCollection`1<RecognizedWordUnit> Words { get; }
    public SemanticValue Semantics { get; }
    public ReadOnlyCollection`1<RecognizedPhrase> Homophones { get; }
    public Grammar Grammar { get; }
    public Collection`1<ReplacementText> ReplacementWordUnits { get; }
    public int HomophoneGroupId { get; }
    public IXPathNavigable ConstructSmlFromSemantics();
    public string get_Text();
    public float get_Confidence();
    public ReadOnlyCollection`1<RecognizedWordUnit> get_Words();
    public SemanticValue get_Semantics();
    public ReadOnlyCollection`1<RecognizedPhrase> get_Homophones();
    public Grammar get_Grammar();
    public Collection`1<ReplacementText> get_ReplacementWordUnits();
    public int get_HomophoneGroupId();
}
[DebuggerDisplayAttribute("Text: {Text}")]
public class System.Speech.Recognition.RecognizedWordUnit : object {
    public string Text { get; }
    public float Confidence { get; }
    public string Pronunciation { get; }
    public string LexicalForm { get; }
    public DisplayAttributes DisplayAttributes { get; }
    public RecognizedWordUnit(string text, float confidence, string pronunciation, string lexicalForm, DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);
    public string get_Text();
    public float get_Confidence();
    public string get_Pronunciation();
    public string get_LexicalForm();
    public DisplayAttributes get_DisplayAttributes();
}
public enum System.Speech.Recognition.RecognizeMode : Enum {
    public int value__;
    public static RecognizeMode Single;
    public static RecognizeMode Multiple;
}
public class System.Speech.Recognition.RecognizerInfo : object {
    public string Id { get; }
    public string Name { get; }
    public string Description { get; }
    public CultureInfo Culture { get; }
    public ReadOnlyCollection`1<SpeechAudioFormatInfo> SupportedAudioFormats { get; }
    public IDictionary`2<string, string> AdditionalInfo { get; }
    public sealed virtual void Dispose();
    public string get_Id();
    public string get_Name();
    public string get_Description();
    public CultureInfo get_Culture();
    public ReadOnlyCollection`1<SpeechAudioFormatInfo> get_SupportedAudioFormats();
    public IDictionary`2<string, string> get_AdditionalInfo();
}
public enum System.Speech.Recognition.RecognizerState : Enum {
    public int value__;
    public static RecognizerState Stopped;
    public static RecognizerState Listening;
}
public class System.Speech.Recognition.RecognizerUpdateReachedEventArgs : EventArgs {
    public object UserToken { get; }
    public TimeSpan AudioPosition { get; }
    public object get_UserToken();
    public TimeSpan get_AudioPosition();
}
public class System.Speech.Recognition.ReplacementText : object {
    public DisplayAttributes DisplayAttributes { get; }
    public string Text { get; }
    public int FirstWordIndex { get; }
    public int CountOfWords { get; }
    public DisplayAttributes get_DisplayAttributes();
    public string get_Text();
    public int get_FirstWordIndex();
    public int get_CountOfWords();
}
[DebuggerDisplayAttribute("{_semanticKey.DebugSummary}")]
public class System.Speech.Recognition.SemanticResultKey : object {
    public SemanticResultKey(string semanticResultKey, String[] phrases);
    public SemanticResultKey(string semanticResultKey, GrammarBuilder[] builders);
    public GrammarBuilder ToGrammarBuilder();
}
[DebuggerDisplayAttribute("{_tag.DebugSummary}")]
public class System.Speech.Recognition.SemanticResultValue : object {
    public SemanticResultValue(object value);
    public SemanticResultValue(string phrase, object value);
    public SemanticResultValue(GrammarBuilder builder, object value);
    public GrammarBuilder ToGrammarBuilder();
}
[DebuggerDisplayAttribute("'{_keyName}'= {Value}  -  Children = {_dictionary.Count}")]
[DefaultMemberAttribute("Item")]
[DebuggerTypeProxyAttribute("System.Speech.Recognition.SemanticValue/SemanticValueDebugDisplay")]
public class System.Speech.Recognition.SemanticValue : object {
    public object Value { get; internal set; }
    public float Confidence { get; }
    public SemanticValue Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.IsReadOnly { get; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Keys { get; }
    private ICollection`1<SemanticValue> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Values { get; }
    public SemanticValue(string keyName, object value, float confidence);
    public SemanticValue(object value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public object get_Value();
    internal void set_Value(object value);
    public float get_Confidence();
    public sealed virtual SemanticValue get_Item(string key);
    public sealed virtual void set_Item(string key, SemanticValue value);
    public sealed virtual bool Contains(KeyValuePair`2<string, SemanticValue> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual int get_Count();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Add(KeyValuePair`2<string, SemanticValue> key);
    private sealed virtual override void System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Add(string key, SemanticValue value);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.Remove(KeyValuePair`2<string, SemanticValue> key);
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.Remove(string key);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.CopyTo(KeyValuePair`2[] array, int index);
    private sealed virtual override IEnumerator`1<KeyValuePair`2<string, SemanticValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,System.Speech.Recognition.SemanticValue>>.get_IsReadOnly();
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.get_Keys();
    private sealed virtual override ICollection`1<SemanticValue> System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.get_Values();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool System.Collections.Generic.IDictionary<System.String,System.Speech.Recognition.SemanticValue>.TryGetValue(string key, SemanticValue& value);
}
public class System.Speech.Recognition.SpeechDetectedEventArgs : EventArgs {
    public TimeSpan AudioPosition { get; }
    public TimeSpan get_AudioPosition();
}
public class System.Speech.Recognition.SpeechHypothesizedEventArgs : RecognitionEventArgs {
}
public class System.Speech.Recognition.SpeechRecognitionEngine : object {
    [EditorBrowsableAttribute("2")]
public TimeSpan InitialSilenceTimeout { get; public set; }
    [EditorBrowsableAttribute("2")]
public TimeSpan BabbleTimeout { get; public set; }
    [EditorBrowsableAttribute("2")]
public TimeSpan EndSilenceTimeout { get; public set; }
    [EditorBrowsableAttribute("2")]
public TimeSpan EndSilenceTimeoutAmbiguous { get; public set; }
    public ReadOnlyCollection`1<Grammar> Grammars { get; }
    public RecognizerInfo RecognizerInfo { get; }
    public AudioState AudioState { get; }
    public int AudioLevel { get; }
    public TimeSpan RecognizerAudioPosition { get; }
    public TimeSpan AudioPosition { get; }
    public SpeechAudioFormatInfo AudioFormat { get; }
    public int MaxAlternates { get; public set; }
    public SpeechRecognitionEngine(CultureInfo culture);
    public SpeechRecognitionEngine(string recognizerId);
    public SpeechRecognitionEngine(RecognizerInfo recognizerInfo);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static ReadOnlyCollection`1<RecognizerInfo> InstalledRecognizers();
    public TimeSpan get_InitialSilenceTimeout();
    public void set_InitialSilenceTimeout(TimeSpan value);
    public TimeSpan get_BabbleTimeout();
    public void set_BabbleTimeout(TimeSpan value);
    public TimeSpan get_EndSilenceTimeout();
    public void set_EndSilenceTimeout(TimeSpan value);
    public TimeSpan get_EndSilenceTimeoutAmbiguous();
    public void set_EndSilenceTimeoutAmbiguous(TimeSpan value);
    public ReadOnlyCollection`1<Grammar> get_Grammars();
    public RecognizerInfo get_RecognizerInfo();
    public AudioState get_AudioState();
    public int get_AudioLevel();
    public TimeSpan get_RecognizerAudioPosition();
    public TimeSpan get_AudioPosition();
    public SpeechAudioFormatInfo get_AudioFormat();
    public int get_MaxAlternates();
    public void set_MaxAlternates(int value);
    public void SetInputToWaveFile(string path);
    public void SetInputToWaveStream(Stream audioSource);
    public void SetInputToAudioStream(Stream audioSource, SpeechAudioFormatInfo audioFormat);
    public void SetInputToNull();
    public void SetInputToDefaultAudioDevice();
    public RecognitionResult Recognize();
    public RecognitionResult Recognize(TimeSpan initialSilenceTimeout);
    public void RecognizeAsync();
    public void RecognizeAsync(RecognizeMode mode);
    public void RecognizeAsyncCancel();
    public void RecognizeAsyncStop();
    public object QueryRecognizerSetting(string settingName);
    public void UpdateRecognizerSetting(string settingName, string updatedValue);
    public void UpdateRecognizerSetting(string settingName, int updatedValue);
    public void LoadGrammar(Grammar grammar);
    public void LoadGrammarAsync(Grammar grammar);
    public void UnloadGrammar(Grammar grammar);
    public void UnloadAllGrammars();
    public RecognitionResult EmulateRecognize(string inputText);
    public RecognitionResult EmulateRecognize(string inputText, CompareOptions compareOptions);
    public RecognitionResult EmulateRecognize(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(string inputText);
    public void EmulateRecognizeAsync(string inputText, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public void RequestRecognizerUpdate();
    public void RequestRecognizerUpdate(object userToken);
    public void RequestRecognizerUpdate(object userToken, TimeSpan audioPositionAheadToRaiseUpdate);
    public void add_RecognizeCompleted(EventHandler`1<RecognizeCompletedEventArgs> value);
    public void remove_RecognizeCompleted(EventHandler`1<RecognizeCompletedEventArgs> value);
    public void add_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    public void remove_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    public void add_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    public void remove_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    public void add_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    public void remove_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    public void add_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    public void remove_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    public void add_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    public void remove_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    public void add_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    public void remove_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    public void add_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void remove_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void add_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void remove_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void add_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void remove_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void add_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    public void remove_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
}
public class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs : RecognitionEventArgs {
}
public class System.Speech.Recognition.SpeechRecognizedEventArgs : RecognitionEventArgs {
}
public class System.Speech.Recognition.SpeechRecognizer : object {
    public RecognizerState State { get; }
    public bool Enabled { get; public set; }
    public bool PauseRecognizerOnRecognition { get; public set; }
    public ReadOnlyCollection`1<Grammar> Grammars { get; }
    public RecognizerInfo RecognizerInfo { get; }
    public AudioState AudioState { get; }
    public int AudioLevel { get; }
    public TimeSpan AudioPosition { get; }
    public TimeSpan RecognizerAudioPosition { get; }
    public SpeechAudioFormatInfo AudioFormat { get; }
    public int MaxAlternates { get; public set; }
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public RecognizerState get_State();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_PauseRecognizerOnRecognition();
    public void set_PauseRecognizerOnRecognition(bool value);
    public ReadOnlyCollection`1<Grammar> get_Grammars();
    public RecognizerInfo get_RecognizerInfo();
    public AudioState get_AudioState();
    public int get_AudioLevel();
    public TimeSpan get_AudioPosition();
    public TimeSpan get_RecognizerAudioPosition();
    public SpeechAudioFormatInfo get_AudioFormat();
    public int get_MaxAlternates();
    public void set_MaxAlternates(int value);
    public void LoadGrammar(Grammar grammar);
    public void LoadGrammarAsync(Grammar grammar);
    public void UnloadGrammar(Grammar grammar);
    public void UnloadAllGrammars();
    public RecognitionResult EmulateRecognize(string inputText);
    public RecognitionResult EmulateRecognize(string inputText, CompareOptions compareOptions);
    public RecognitionResult EmulateRecognize(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(string inputText);
    public void EmulateRecognizeAsync(string inputText, CompareOptions compareOptions);
    public void EmulateRecognizeAsync(RecognizedWordUnit[] wordUnits, CompareOptions compareOptions);
    public void RequestRecognizerUpdate();
    public void RequestRecognizerUpdate(object userToken);
    public void RequestRecognizerUpdate(object userToken, TimeSpan audioPositionAheadToRaiseUpdate);
    public void add_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    public void remove_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    public void add_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    public void remove_EmulateRecognizeCompleted(EventHandler`1<EmulateRecognizeCompletedEventArgs> value);
    public void add_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    public void remove_LoadGrammarCompleted(EventHandler`1<LoadGrammarCompletedEventArgs> value);
    public void add_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    public void remove_SpeechDetected(EventHandler`1<SpeechDetectedEventArgs> value);
    public void add_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    public void remove_SpeechRecognized(EventHandler`1<SpeechRecognizedEventArgs> value);
    public void add_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    public void remove_SpeechRecognitionRejected(EventHandler`1<SpeechRecognitionRejectedEventArgs> value);
    public void add_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    public void remove_RecognizerUpdateReached(EventHandler`1<RecognizerUpdateReachedEventArgs> value);
    public void add_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void remove_SpeechHypothesized(EventHandler`1<SpeechHypothesizedEventArgs> value);
    public void add_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void remove_AudioSignalProblemOccurred(EventHandler`1<AudioSignalProblemOccurredEventArgs> value);
    public void add_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void remove_AudioLevelUpdated(EventHandler`1<AudioLevelUpdatedEventArgs> value);
    public void add_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
    public void remove_AudioStateChanged(EventHandler`1<AudioStateChangedEventArgs> value);
}
public class System.Speech.Recognition.SpeechUI : object {
    public static bool SendTextFeedback(RecognitionResult result, string feedback, bool isSuccessfulAction);
}
public class System.Speech.Recognition.SrgsGrammar.SrgsDocument : object {
    public Uri XmlBase { get; public set; }
    public CultureInfo Culture { get; public set; }
    public SrgsRule Root { get; public set; }
    public SrgsGrammarMode Mode { get; public set; }
    public SrgsPhoneticAlphabet PhoneticAlphabet { get; public set; }
    public SrgsRulesCollection Rules { get; }
    public string Language { get; public set; }
    public string Namespace { get; public set; }
    public Collection`1<string> CodeBehind { get; }
    public bool Debug { get; public set; }
    public string Script { get; public set; }
    public Collection`1<string> ImportNamespaces { get; }
    public Collection`1<string> AssemblyReferences { get; }
    public SrgsDocument(string path);
    public SrgsDocument(XmlReader srgsGrammar);
    public SrgsDocument(GrammarBuilder builder);
    public SrgsDocument(SrgsRule grammarRootRule);
    public void WriteSrgs(XmlWriter srgsGrammar);
    public void set_XmlBase(Uri value);
    public Uri get_XmlBase();
    public void set_Culture(CultureInfo value);
    public CultureInfo get_Culture();
    public void set_Root(SrgsRule value);
    public SrgsRule get_Root();
    public void set_Mode(SrgsGrammarMode value);
    public SrgsGrammarMode get_Mode();
    public void set_PhoneticAlphabet(SrgsPhoneticAlphabet value);
    public SrgsPhoneticAlphabet get_PhoneticAlphabet();
    public SrgsRulesCollection get_Rules();
    public void set_Language(string value);
    public string get_Language();
    public void set_Namespace(string value);
    public string get_Namespace();
    public Collection`1<string> get_CodeBehind();
    public bool get_Debug();
    public void set_Debug(bool value);
    public void set_Script(string value);
    public string get_Script();
    public Collection`1<string> get_ImportNamespaces();
    public Collection`1<string> get_AssemblyReferences();
}
[DebuggerTypeProxyAttribute("System.Speech.Recognition.SrgsGrammar.SrgsElement/SrgsElementDebugDisplay")]
[DebuggerDisplayAttribute("SrgsElement Children:[{_items.Count}]")]
public abstract class System.Speech.Recognition.SrgsGrammar.SrgsElement : MarshalByRefObject {
}
public static class System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler : object {
    public static void Compile(string inputPath, Stream outputStream);
    public static void Compile(SrgsDocument srgsGrammar, Stream outputStream);
    public static void Compile(XmlReader reader, Stream outputStream);
    public static void CompileClassLibrary(String[] inputPaths, string outputPath, String[] referencedAssemblies, string keyFile);
    public static void CompileClassLibrary(SrgsDocument srgsGrammar, string outputPath, String[] referencedAssemblies, string keyFile);
    public static void CompileClassLibrary(XmlReader reader, string outputPath, String[] referencedAssemblies, string keyFile);
}
public enum System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode : Enum {
    public int value__;
    public static SrgsGrammarMode Voice;
    public static SrgsGrammarMode Dtmf;
}
[DebuggerTypeProxyAttribute("System.Speech.Recognition.SrgsGrammar.SrgsItem/SrgsItemDebugDisplay")]
[DebuggerDisplayAttribute("{DebuggerDisplayString ()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsItem : SrgsElement {
    public Collection`1<SrgsElement> Elements { get; }
    public float RepeatProbability { get; public set; }
    public int MinRepeat { get; }
    public int MaxRepeat { get; }
    public float Weight { get; public set; }
    public SrgsItem(string text);
    public SrgsItem(SrgsElement[] elements);
    public SrgsItem(int repeatCount);
    public SrgsItem(int min, int max);
    public SrgsItem(int min, int max, string text);
    public SrgsItem(int min, int max, SrgsElement[] elements);
    public void SetRepeat(int count);
    public void SetRepeat(int minRepeat, int maxRepeat);
    public void Add(SrgsElement element);
    public Collection`1<SrgsElement> get_Elements();
    public float get_RepeatProbability();
    public void set_RepeatProbability(float value);
    public int get_MinRepeat();
    public int get_MaxRepeat();
    public float get_Weight();
    public void set_Weight(float value);
}
[DebuggerDisplayAttribute("{DebuggerDisplayString ()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsNameValueTag : SrgsElement {
    public string Name { get; public set; }
    public object Value { get; public set; }
    public SrgsNameValueTag(object value);
    public SrgsNameValueTag(string name, object value);
    public string get_Name();
    public void set_Name(string value);
    public object get_Value();
    public void set_Value(object value);
}
[DebuggerDisplayAttribute("{DebuggerDisplayString ()}")]
[DebuggerTypeProxyAttribute("System.Speech.Recognition.SrgsGrammar.SrgsOneOf/OneOfDebugDisplay")]
public class System.Speech.Recognition.SrgsGrammar.SrgsOneOf : SrgsElement {
    public Collection`1<SrgsItem> Items { get; }
    public SrgsOneOf(String[] items);
    public SrgsOneOf(SrgsItem[] items);
    public void Add(SrgsItem item);
    public Collection`1<SrgsItem> get_Items();
}
public enum System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet : Enum {
    public int value__;
    public static SrgsPhoneticAlphabet Sapi;
    public static SrgsPhoneticAlphabet Ipa;
    public static SrgsPhoneticAlphabet Ups;
}
[DebuggerTypeProxyAttribute("System.Speech.Recognition.SrgsGrammar.SrgsRule/SrgsRuleDebugDisplay")]
[DebuggerDisplayAttribute("Rule={_id.ToString()} Scope={_scope.ToString()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsRule : object {
    public Collection`1<SrgsElement> Elements { get; }
    public string Id { get; public set; }
    public SrgsRuleScope Scope { get; public set; }
    public string BaseClass { get; public set; }
    public string Script { get; public set; }
    public string OnInit { get; public set; }
    public string OnParse { get; public set; }
    public string OnError { get; public set; }
    public string OnRecognition { get; public set; }
    public SrgsRule(string id);
    public SrgsRule(string id, SrgsElement[] elements);
    private static SrgsRule();
    public void Add(SrgsElement element);
    public Collection`1<SrgsElement> get_Elements();
    public string get_Id();
    public void set_Id(string value);
    public SrgsRuleScope get_Scope();
    public void set_Scope(SrgsRuleScope value);
    public sealed virtual void set_BaseClass(string value);
    public sealed virtual string get_BaseClass();
    public void set_Script(string value);
    public string get_Script();
    public void set_OnInit(string value);
    public string get_OnInit();
    public void set_OnParse(string value);
    public string get_OnParse();
    public void set_OnError(string value);
    public string get_OnError();
    public void set_OnRecognition(string value);
    public string get_OnRecognition();
}
[DebuggerDisplayAttribute("{DebuggerDisplayString()}")]
[ImmutableObjectAttribute("True")]
public class System.Speech.Recognition.SrgsGrammar.SrgsRuleRef : SrgsElement {
    public static SrgsRuleRef Null;
    public static SrgsRuleRef Void;
    public static SrgsRuleRef Garbage;
    public static SrgsRuleRef Dictation;
    public static SrgsRuleRef MnemonicSpelling;
    public Uri Uri { get; }
    public string SemanticKey { get; }
    public string Params { get; }
    public SrgsRuleRef(Uri uri);
    public SrgsRuleRef(Uri uri, string rule);
    public SrgsRuleRef(Uri uri, string rule, string semanticKey);
    public SrgsRuleRef(Uri uri, string rule, string semanticKey, string parameters);
    public SrgsRuleRef(SrgsRule rule);
    public SrgsRuleRef(SrgsRule rule, string semanticKey);
    public SrgsRuleRef(SrgsRule rule, string semanticKey, string parameters);
    private static SrgsRuleRef();
    public Uri get_Uri();
    public string get_SemanticKey();
    public string get_Params();
}
public class System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection : KeyedCollection`2<string, SrgsRule> {
    public void Add(SrgsRule[] rules);
    protected virtual string GetKeyForItem(SrgsRule rule);
}
public enum System.Speech.Recognition.SrgsGrammar.SrgsRuleScope : Enum {
    public int value__;
    public static SrgsRuleScope Public;
    public static SrgsRuleScope Private;
}
[DebuggerDisplayAttribute("{DebuggerDisplayString ()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag : SrgsElement {
    public string Script { get; public set; }
    public SrgsSemanticInterpretationTag(string script);
    public string get_Script();
    public void set_Script(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplayString ()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsSubset : SrgsElement {
    public SubsetMatchingMode MatchingMode { get; public set; }
    public string Text { get; public set; }
    public SrgsSubset(string text);
    public SrgsSubset(string text, SubsetMatchingMode matchingMode);
    public SubsetMatchingMode get_MatchingMode();
    public void set_MatchingMode(SubsetMatchingMode value);
    public string get_Text();
    public void set_Text(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplayString ()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsText : SrgsElement {
    public string Text { get; public set; }
    public SrgsText(string text);
    public string get_Text();
    public void set_Text(string value);
}
[DebuggerDisplayAttribute("{DebuggerDisplayString ()}")]
public class System.Speech.Recognition.SrgsGrammar.SrgsToken : SrgsElement {
    public string Text { get; public set; }
    public string Pronunciation { get; public set; }
    public string Display { get; public set; }
    public SrgsToken(string text);
    public string get_Text();
    public sealed virtual void set_Text(string value);
    public string get_Pronunciation();
    public sealed virtual void set_Pronunciation(string value);
    public string get_Display();
    public sealed virtual void set_Display(string value);
}
public class System.Speech.Recognition.StateChangedEventArgs : EventArgs {
    public RecognizerState RecognizerState { get; }
    public RecognizerState get_RecognizerState();
}
public enum System.Speech.Recognition.SubsetMatchingMode : Enum {
    public int value__;
    public static SubsetMatchingMode Subsequence;
    public static SubsetMatchingMode OrderedSubset;
    public static SubsetMatchingMode SubsequenceContentRequired;
    public static SubsetMatchingMode OrderedSubsetContentRequired;
}
public class System.Speech.Synthesis.BookmarkReachedEventArgs : PromptEventArgs {
    public string Bookmark { get; }
    public TimeSpan AudioPosition { get; }
    public string get_Bookmark();
    public TimeSpan get_AudioPosition();
}
[DebuggerDisplayAttribute("{_text}")]
public class System.Speech.Synthesis.FilePrompt : Prompt {
    public FilePrompt(string path, SynthesisMediaType media);
    public FilePrompt(Uri promptFile, SynthesisMediaType media);
}
[DebuggerDisplayAttribute("{VoiceInfo.Name} [{Enabled ? "Enabled" : "Disabled"}]")]
public class System.Speech.Synthesis.InstalledVoice : object {
    public VoiceInfo VoiceInfo { get; }
    public bool Enabled { get; public set; }
    public VoiceInfo get_VoiceInfo();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Speech.Synthesis.PhonemeReachedEventArgs : PromptEventArgs {
    public string Phoneme { get; }
    public TimeSpan AudioPosition { get; }
    public TimeSpan Duration { get; }
    public SynthesizerEmphasis Emphasis { get; }
    public string NextPhoneme { get; }
    public string get_Phoneme();
    public TimeSpan get_AudioPosition();
    public TimeSpan get_Duration();
    public SynthesizerEmphasis get_Emphasis();
    public string get_NextPhoneme();
}
[DebuggerDisplayAttribute("{_text}")]
public class System.Speech.Synthesis.Prompt : object {
    public bool IsCompleted { get; internal set; }
    public Prompt(string textToSpeak);
    public Prompt(PromptBuilder promptBuilder);
    public Prompt(string textToSpeak, SynthesisTextFormat media);
    private static Prompt();
    public bool get_IsCompleted();
    internal void set_IsCompleted(bool value);
}
public enum System.Speech.Synthesis.PromptBreak : Enum {
    public int value__;
    public static PromptBreak None;
    public static PromptBreak ExtraSmall;
    public static PromptBreak Small;
    public static PromptBreak Medium;
    public static PromptBreak Large;
    public static PromptBreak ExtraLarge;
}
public class System.Speech.Synthesis.PromptBuilder : object {
    public bool IsEmpty { get; }
    public CultureInfo Culture { get; public set; }
    public PromptBuilder(CultureInfo culture);
    private static PromptBuilder();
    public void ClearContent();
    public void AppendText(string textToSpeak);
    public void AppendText(string textToSpeak, PromptRate rate);
    public void AppendText(string textToSpeak, PromptVolume volume);
    public void AppendText(string textToSpeak, PromptEmphasis emphasis);
    public void StartStyle(PromptStyle style);
    public void EndStyle();
    public void StartVoice(VoiceInfo voice);
    public void StartVoice(string name);
    public void StartVoice(VoiceGender gender);
    public void StartVoice(VoiceGender gender, VoiceAge age);
    public void StartVoice(VoiceGender gender, VoiceAge age, int voiceAlternate);
    public void StartVoice(CultureInfo culture);
    public void EndVoice();
    public void StartParagraph();
    public void StartParagraph(CultureInfo culture);
    public void EndParagraph();
    public void StartSentence();
    public void StartSentence(CultureInfo culture);
    public void EndSentence();
    public void AppendTextWithHint(string textToSpeak, SayAs sayAs);
    public void AppendTextWithHint(string textToSpeak, string sayAs);
    public void AppendTextWithPronunciation(string textToSpeak, string pronunciation);
    public void AppendTextWithAlias(string textToSpeak, string substitute);
    public void AppendBreak();
    public void AppendBreak(PromptBreak strength);
    public void AppendBreak(TimeSpan duration);
    public void AppendAudio(string path);
    public void AppendAudio(Uri audioFile);
    public void AppendAudio(Uri audioFile, string alternateText);
    public void AppendBookmark(string bookmarkName);
    public void AppendPromptBuilder(PromptBuilder promptBuilder);
    public void AppendSsml(string path);
    public void AppendSsml(Uri ssmlFile);
    public void AppendSsml(XmlReader ssmlFile);
    [EditorBrowsableAttribute("2")]
public void AppendSsmlMarkup(string ssmlMarkup);
    public string ToXml();
    public bool get_IsEmpty();
    public void set_Culture(CultureInfo value);
    public CultureInfo get_Culture();
}
public enum System.Speech.Synthesis.PromptEmphasis : Enum {
    public int value__;
    public static PromptEmphasis NotSet;
    public static PromptEmphasis Strong;
    public static PromptEmphasis Moderate;
    public static PromptEmphasis None;
    public static PromptEmphasis Reduced;
}
public abstract class System.Speech.Synthesis.PromptEventArgs : AsyncCompletedEventArgs {
    public Prompt Prompt { get; }
    public Prompt get_Prompt();
}
public enum System.Speech.Synthesis.PromptRate : Enum {
    public int value__;
    public static PromptRate NotSet;
    public static PromptRate ExtraFast;
    public static PromptRate Fast;
    public static PromptRate Medium;
    public static PromptRate Slow;
    public static PromptRate ExtraSlow;
}
public class System.Speech.Synthesis.PromptStyle : object {
    public PromptRate Rate { get; public set; }
    public PromptVolume Volume { get; public set; }
    public PromptEmphasis Emphasis { get; public set; }
    public PromptStyle(PromptRate rate);
    public PromptStyle(PromptVolume volume);
    public PromptStyle(PromptEmphasis emphasis);
    public PromptRate get_Rate();
    public void set_Rate(PromptRate value);
    public PromptVolume get_Volume();
    public void set_Volume(PromptVolume value);
    public PromptEmphasis get_Emphasis();
    public void set_Emphasis(PromptEmphasis value);
}
public enum System.Speech.Synthesis.PromptVolume : Enum {
    public int value__;
    public static PromptVolume NotSet;
    public static PromptVolume Silent;
    public static PromptVolume ExtraSoft;
    public static PromptVolume Soft;
    public static PromptVolume Medium;
    public static PromptVolume Loud;
    public static PromptVolume ExtraLoud;
    public static PromptVolume Default;
}
public enum System.Speech.Synthesis.SayAs : Enum {
    public int value__;
    public static SayAs SpellOut;
    public static SayAs NumberOrdinal;
    public static SayAs NumberCardinal;
    public static SayAs Date;
    public static SayAs DayMonthYear;
    public static SayAs MonthDayYear;
    public static SayAs YearMonthDay;
    public static SayAs YearMonth;
    public static SayAs MonthYear;
    public static SayAs MonthDay;
    public static SayAs DayMonth;
    public static SayAs Year;
    public static SayAs Month;
    public static SayAs Day;
    public static SayAs Time;
    public static SayAs Time24;
    public static SayAs Time12;
    public static SayAs Telephone;
    public static SayAs Text;
}
public class System.Speech.Synthesis.SpeakCompletedEventArgs : PromptEventArgs {
}
public class System.Speech.Synthesis.SpeakProgressEventArgs : PromptEventArgs {
    public TimeSpan AudioPosition { get; }
    public int CharacterPosition { get; }
    public int CharacterCount { get; internal set; }
    public string Text { get; internal set; }
    public TimeSpan get_AudioPosition();
    public int get_CharacterPosition();
    public int get_CharacterCount();
    internal void set_CharacterCount(int value);
    public string get_Text();
    internal void set_Text(string value);
}
public class System.Speech.Synthesis.SpeakStartedEventArgs : PromptEventArgs {
}
public class System.Speech.Synthesis.SpeechSynthesizer : object {
    public SynthesizerState State { get; }
    public int Rate { get; public set; }
    public int Volume { get; public set; }
    public VoiceInfo Voice { get; }
    protected virtual void Finalize();
    public sealed virtual void Dispose();
    public void SelectVoice(string name);
    public void SelectVoiceByHints(VoiceGender gender);
    public void SelectVoiceByHints(VoiceGender gender, VoiceAge age);
    public void SelectVoiceByHints(VoiceGender gender, VoiceAge age, int voiceAlternate);
    public void SelectVoiceByHints(VoiceGender gender, VoiceAge age, int voiceAlternate, CultureInfo culture);
    public Prompt SpeakAsync(string textToSpeak);
    public void SpeakAsync(Prompt prompt);
    public Prompt SpeakSsmlAsync(string textToSpeak);
    public Prompt SpeakAsync(PromptBuilder promptBuilder);
    public void Speak(string textToSpeak);
    public void Speak(Prompt prompt);
    public void Speak(PromptBuilder promptBuilder);
    public void SpeakSsml(string textToSpeak);
    public void Pause();
    public void Resume();
    public void SpeakAsyncCancel(Prompt prompt);
    public void SpeakAsyncCancelAll();
    public void SetOutputToWaveFile(string path);
    public void SetOutputToWaveFile(string path, SpeechAudioFormatInfo formatInfo);
    public void SetOutputToWaveStream(Stream audioDestination);
    public void SetOutputToAudioStream(Stream audioDestination, SpeechAudioFormatInfo formatInfo);
    public void SetOutputToDefaultAudioDevice();
    public void SetOutputToNull();
    public Prompt GetCurrentlySpokenPrompt();
    public ReadOnlyCollection`1<InstalledVoice> GetInstalledVoices();
    public ReadOnlyCollection`1<InstalledVoice> GetInstalledVoices(CultureInfo culture);
    public void AddLexicon(Uri uri, string mediaType);
    public void RemoveLexicon(Uri uri);
    public void add_SpeakStarted(EventHandler`1<SpeakStartedEventArgs> value);
    public void remove_SpeakStarted(EventHandler`1<SpeakStartedEventArgs> value);
    public void add_SpeakCompleted(EventHandler`1<SpeakCompletedEventArgs> value);
    public void remove_SpeakCompleted(EventHandler`1<SpeakCompletedEventArgs> value);
    public void add_SpeakProgress(EventHandler`1<SpeakProgressEventArgs> value);
    public void remove_SpeakProgress(EventHandler`1<SpeakProgressEventArgs> value);
    public void add_BookmarkReached(EventHandler`1<BookmarkReachedEventArgs> value);
    public void remove_BookmarkReached(EventHandler`1<BookmarkReachedEventArgs> value);
    public void add_VoiceChange(EventHandler`1<VoiceChangeEventArgs> value);
    public void remove_VoiceChange(EventHandler`1<VoiceChangeEventArgs> value);
    public void add_PhonemeReached(EventHandler`1<PhonemeReachedEventArgs> value);
    public void remove_PhonemeReached(EventHandler`1<PhonemeReachedEventArgs> value);
    public void add_VisemeReached(EventHandler`1<VisemeReachedEventArgs> value);
    public void remove_VisemeReached(EventHandler`1<VisemeReachedEventArgs> value);
    public void add_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    public void remove_StateChanged(EventHandler`1<StateChangedEventArgs> value);
    public SynthesizerState get_State();
    public void set_Rate(int value);
    public int get_Rate();
    public void set_Volume(int value);
    public int get_Volume();
    public VoiceInfo get_Voice();
}
public class System.Speech.Synthesis.StateChangedEventArgs : EventArgs {
    public SynthesizerState State { get; }
    public SynthesizerState PreviousState { get; }
    public SynthesizerState get_State();
    public SynthesizerState get_PreviousState();
}
public enum System.Speech.Synthesis.SynthesisMediaType : Enum {
    public int value__;
    public static SynthesisMediaType Text;
    public static SynthesisMediaType Ssml;
    public static SynthesisMediaType WaveAudio;
}
public enum System.Speech.Synthesis.SynthesisTextFormat : Enum {
    public int value__;
    public static SynthesisTextFormat Text;
    public static SynthesisTextFormat Ssml;
}
[FlagsAttribute]
public enum System.Speech.Synthesis.SynthesizerEmphasis : Enum {
    public int value__;
    public static SynthesizerEmphasis Stressed;
    public static SynthesizerEmphasis Emphasized;
}
public enum System.Speech.Synthesis.SynthesizerState : Enum {
    public int value__;
    public static SynthesizerState Ready;
    public static SynthesizerState Speaking;
    public static SynthesizerState Paused;
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.ContourPoint : ValueType {
    private float _start;
    private float _change;
    private ContourPointChangeType _changeType;
    public float Start { get; }
    public float Change { get; }
    public ContourPointChangeType ChangeType { get; }
    public ContourPoint(float start, float change, ContourPointChangeType changeType);
    public float get_Start();
    public float get_Change();
    public ContourPointChangeType get_ChangeType();
    public static bool op_Equality(ContourPoint point1, ContourPoint point2);
    public static bool op_Inequality(ContourPoint point1, ContourPoint point2);
    public sealed virtual bool Equals(ContourPoint other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum System.Speech.Synthesis.TtsEngine.ContourPointChangeType : Enum {
    public int value__;
    public static ContourPointChangeType Hz;
    public static ContourPointChangeType Percentage;
}
public enum System.Speech.Synthesis.TtsEngine.EmphasisBreak : Enum {
    public int value__;
    public static EmphasisBreak None;
    public static EmphasisBreak ExtraWeak;
    public static EmphasisBreak Weak;
    public static EmphasisBreak Medium;
    public static EmphasisBreak Strong;
    public static EmphasisBreak ExtraStrong;
    public static EmphasisBreak Default;
}
public enum System.Speech.Synthesis.TtsEngine.EmphasisWord : Enum {
    public int value__;
    public static EmphasisWord Default;
    public static EmphasisWord Strong;
    public static EmphasisWord Moderate;
    public static EmphasisWord None;
    public static EmphasisWord Reduced;
}
public enum System.Speech.Synthesis.TtsEngine.EventParameterType : Enum {
    public int value__;
    public static EventParameterType Undefined;
    public static EventParameterType Token;
    public static EventParameterType Object;
    public static EventParameterType Pointer;
    public static EventParameterType String;
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.FragmentState : ValueType {
    private TtsEngineAction _action;
    private int _langId;
    private int _emphasis;
    private int _duration;
    private SayAs _sayAs;
    private Prosody _prosody;
    private Char[] _phoneme;
    public TtsEngineAction Action { get; internal set; }
    public int LangId { get; internal set; }
    public int Emphasis { get; internal set; }
    public int Duration { get; internal set; }
    public SayAs SayAs { get; internal set; }
    public Prosody Prosody { get; internal set; }
    public Char[] Phoneme { get; internal set; }
    public FragmentState(TtsEngineAction action, int langId, int emphasis, int duration, SayAs sayAs, Prosody prosody, Char[] phonemes);
    public TtsEngineAction get_Action();
    internal void set_Action(TtsEngineAction value);
    public int get_LangId();
    internal void set_LangId(int value);
    public int get_Emphasis();
    internal void set_Emphasis(int value);
    public int get_Duration();
    internal void set_Duration(int value);
    public SayAs get_SayAs();
    internal void set_SayAs(SayAs value);
    public Prosody get_Prosody();
    internal void set_Prosody(Prosody value);
    public Char[] get_Phoneme();
    internal void set_Phoneme(Char[] value);
    public static bool op_Equality(FragmentState state1, FragmentState state2);
    public static bool op_Inequality(FragmentState state1, FragmentState state2);
    public sealed virtual bool Equals(FragmentState other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public interface System.Speech.Synthesis.TtsEngine.ITtsEngineSite {
    public int EventInterest { get; }
    public int Actions { get; }
    public int Rate { get; }
    public int Volume { get; }
    public abstract virtual void AddEvents(SpeechEventInfo[] events, int count);
    public abstract virtual int Write(IntPtr data, int count);
    public abstract virtual SkipInfo GetSkipInfo();
    public abstract virtual void CompleteSkip(int skipped);
    public abstract virtual Stream LoadResource(Uri uri, string mediaType);
    public abstract virtual int get_EventInterest();
    public abstract virtual int get_Actions();
    public abstract virtual int get_Rate();
    public abstract virtual int get_Volume();
}
public class System.Speech.Synthesis.TtsEngine.Prosody : object {
    public ProsodyNumber Pitch { get; public set; }
    public ProsodyNumber Range { get; public set; }
    public ProsodyNumber Rate { get; public set; }
    public int Duration { get; public set; }
    public ProsodyNumber Volume { get; public set; }
    public ProsodyNumber get_Pitch();
    public void set_Pitch(ProsodyNumber value);
    public ProsodyNumber get_Range();
    public void set_Range(ProsodyNumber value);
    public ProsodyNumber get_Rate();
    public void set_Rate(ProsodyNumber value);
    public int get_Duration();
    public void set_Duration(int value);
    public ProsodyNumber get_Volume();
    public void set_Volume(ProsodyNumber value);
    public ContourPoint[] GetContourPoints();
    public void SetContourPoints(ContourPoint[] points);
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.ProsodyNumber : ValueType {
    public static int AbsoluteNumber;
    private int _ssmlAttributeId;
    private bool _isPercent;
    private float _number;
    private ProsodyUnit _unit;
    public int SsmlAttributeId { get; internal set; }
    public bool IsNumberPercent { get; internal set; }
    public float Number { get; internal set; }
    public ProsodyUnit Unit { get; internal set; }
    public ProsodyNumber(int ssmlAttributeId);
    public ProsodyNumber(float number);
    public int get_SsmlAttributeId();
    internal void set_SsmlAttributeId(int value);
    public bool get_IsNumberPercent();
    internal void set_IsNumberPercent(bool value);
    public float get_Number();
    internal void set_Number(float value);
    public ProsodyUnit get_Unit();
    internal void set_Unit(ProsodyUnit value);
    public static bool op_Equality(ProsodyNumber prosodyNumber1, ProsodyNumber prosodyNumber2);
    public static bool op_Inequality(ProsodyNumber prosodyNumber1, ProsodyNumber prosodyNumber2);
    public sealed virtual bool Equals(ProsodyNumber other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyPitch : Enum {
    public int value__;
    public static ProsodyPitch Default;
    public static ProsodyPitch ExtraLow;
    public static ProsodyPitch Low;
    public static ProsodyPitch Medium;
    public static ProsodyPitch High;
    public static ProsodyPitch ExtraHigh;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyRange : Enum {
    public int value__;
    public static ProsodyRange Default;
    public static ProsodyRange ExtraLow;
    public static ProsodyRange Low;
    public static ProsodyRange Medium;
    public static ProsodyRange High;
    public static ProsodyRange ExtraHigh;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyRate : Enum {
    public int value__;
    public static ProsodyRate Default;
    public static ProsodyRate ExtraSlow;
    public static ProsodyRate Slow;
    public static ProsodyRate Medium;
    public static ProsodyRate Fast;
    public static ProsodyRate ExtraFast;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyUnit : Enum {
    public int value__;
    public static ProsodyUnit Default;
    public static ProsodyUnit Hz;
    public static ProsodyUnit Semitone;
}
public enum System.Speech.Synthesis.TtsEngine.ProsodyVolume : Enum {
    public int value__;
    public static ProsodyVolume Default;
    public static ProsodyVolume Silent;
    public static ProsodyVolume ExtraSoft;
    public static ProsodyVolume Soft;
    public static ProsodyVolume Medium;
    public static ProsodyVolume Loud;
    public static ProsodyVolume ExtraLoud;
}
public class System.Speech.Synthesis.TtsEngine.SayAs : object {
    public string InterpretAs { get; public set; }
    public string Format { get; public set; }
    public string Detail { get; public set; }
    public string get_InterpretAs();
    public void set_InterpretAs(string value);
    public string get_Format();
    public void set_Format(string value);
    public string get_Detail();
    public void set_Detail(string value);
}
public class System.Speech.Synthesis.TtsEngine.SkipInfo : object {
    public int Type { get; public set; }
    public int Count { get; public set; }
    public void set_Type(int value);
    public int get_Type();
    public void set_Count(int value);
    public int get_Count();
}
public enum System.Speech.Synthesis.TtsEngine.SpeakOutputFormat : Enum {
    public int value__;
    public static SpeakOutputFormat WaveFormat;
    public static SpeakOutputFormat Text;
}
[ImmutableObjectAttribute("True")]
public class System.Speech.Synthesis.TtsEngine.SpeechEventInfo : ValueType {
    private short _eventId;
    private short _parameterType;
    private int _param1;
    private IntPtr _param2;
    public short EventId { get; internal set; }
    public short ParameterType { get; internal set; }
    public int Param1 { get; internal set; }
    public IntPtr Param2 { get; internal set; }
    public SpeechEventInfo(short eventId, short parameterType, int param1, IntPtr param2);
    public short get_EventId();
    internal void set_EventId(short value);
    public short get_ParameterType();
    internal void set_ParameterType(short value);
    public int get_Param1();
    internal void set_Param1(int value);
    public IntPtr get_Param2();
    internal void set_Param2(IntPtr value);
    public static bool op_Equality(SpeechEventInfo event1, SpeechEventInfo event2);
    public static bool op_Inequality(SpeechEventInfo event1, SpeechEventInfo event2);
    public sealed virtual bool Equals(SpeechEventInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Speech.Synthesis.TtsEngine.TextFragment : object {
    public FragmentState State { get; public set; }
    public string TextToSpeak { get; public set; }
    public int TextOffset { get; public set; }
    public int TextLength { get; public set; }
    public FragmentState get_State();
    public void set_State(FragmentState value);
    public string get_TextToSpeak();
    public void set_TextToSpeak(string value);
    public int get_TextOffset();
    public void set_TextOffset(int value);
    public int get_TextLength();
    public void set_TextLength(int value);
}
public enum System.Speech.Synthesis.TtsEngine.TtsEngineAction : Enum {
    public int value__;
    public static TtsEngineAction Speak;
    public static TtsEngineAction Silence;
    public static TtsEngineAction Pronounce;
    public static TtsEngineAction Bookmark;
    public static TtsEngineAction SpellOut;
    public static TtsEngineAction StartSentence;
    public static TtsEngineAction StartParagraph;
    public static TtsEngineAction ParseUnknownTag;
}
public abstract class System.Speech.Synthesis.TtsEngine.TtsEngineSsml : object {
    protected TtsEngineSsml(string registryKey);
    public abstract virtual IntPtr GetOutputFormat(SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);
    public abstract virtual void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site);
    public abstract virtual void RemoveLexicon(Uri uri, ITtsEngineSite site);
    public abstract virtual void Speak(TextFragment[] fragment, IntPtr waveHeader, ITtsEngineSite site);
}
public enum System.Speech.Synthesis.TtsEngine.TtsEventId : Enum {
    public int value__;
    public static TtsEventId StartInputStream;
    public static TtsEventId EndInputStream;
    public static TtsEventId VoiceChange;
    public static TtsEventId Bookmark;
    public static TtsEventId WordBoundary;
    public static TtsEventId Phoneme;
    public static TtsEventId SentenceBoundary;
    public static TtsEventId Viseme;
    public static TtsEventId AudioLevel;
}
public class System.Speech.Synthesis.VisemeReachedEventArgs : PromptEventArgs {
    public int Viseme { get; }
    public TimeSpan AudioPosition { get; }
    public TimeSpan Duration { get; }
    public SynthesizerEmphasis Emphasis { get; }
    public int NextViseme { get; }
    public int get_Viseme();
    public TimeSpan get_AudioPosition();
    public TimeSpan get_Duration();
    public SynthesizerEmphasis get_Emphasis();
    public int get_NextViseme();
}
public enum System.Speech.Synthesis.VoiceAge : Enum {
    public int value__;
    public static VoiceAge NotSet;
    public static VoiceAge Child;
    public static VoiceAge Teen;
    public static VoiceAge Adult;
    public static VoiceAge Senior;
}
public class System.Speech.Synthesis.VoiceChangeEventArgs : PromptEventArgs {
    public VoiceInfo Voice { get; }
    public VoiceInfo get_Voice();
}
public enum System.Speech.Synthesis.VoiceGender : Enum {
    public int value__;
    public static VoiceGender NotSet;
    public static VoiceGender Male;
    public static VoiceGender Female;
    public static VoiceGender Neutral;
}
[DebuggerDisplayAttribute("{(_name != null ? "'" + _name + "' " : "") +  (_culture != null ? " '" + _culture.ToString () + "' " : "") + (_gender != VoiceGender.NotSet ? " '" + _gender.ToString () + "' " : "") + (_age != VoiceAge.NotSet ? " '" + _age.ToString () + "' " : "") + (_variant > 0 ? " " + _variant.ToString () : "")}")]
public class System.Speech.Synthesis.VoiceInfo : object {
    public VoiceGender Gender { get; }
    public VoiceAge Age { get; }
    public string Name { get; }
    public CultureInfo Culture { get; }
    public string Id { get; }
    public string Description { get; }
    [EditorBrowsableAttribute("2")]
public ReadOnlyCollection`1<SpeechAudioFormatInfo> SupportedAudioFormats { get; }
    [EditorBrowsableAttribute("2")]
public IDictionary`2<string, string> AdditionalInfo { get; }
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public VoiceGender get_Gender();
    public VoiceAge get_Age();
    public string get_Name();
    public CultureInfo get_Culture();
    public string get_Id();
    public string get_Description();
    public ReadOnlyCollection`1<SpeechAudioFormatInfo> get_SupportedAudioFormats();
    public IDictionary`2<string, string> get_AdditionalInfo();
}
