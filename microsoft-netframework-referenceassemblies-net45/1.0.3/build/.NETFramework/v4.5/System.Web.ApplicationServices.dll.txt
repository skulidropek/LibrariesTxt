internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemThreadingTasksDataflow;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemNetHttp;
    internal static string SystemNetHttpWebRequest;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemRuntimeWindowsRuntime;
    internal static string SystemRuntimeWindowsRuntimeUIXaml;
    internal static string SystemSecurity;
    internal static string SystemServiceModelWeb;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FXAssembly : object {
    internal static string Version;
}
[CompilerGeneratedAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
internal class System.Web.ApplicationServicesStrings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Can_not_use_encrypted_passwords_with_autogen_keys { get; }
    internal static string Membership_DuplicateEmail { get; }
    internal static string Membership_DuplicateProviderUserKey { get; }
    internal static string Membership_DuplicateUserName { get; }
    internal static string Membership_InvalidAnswer { get; }
    internal static string Membership_InvalidEmail { get; }
    internal static string Membership_InvalidPassword { get; }
    internal static string Membership_InvalidProviderUserKey { get; }
    internal static string Membership_InvalidQuestion { get; }
    internal static string Membership_InvalidUserName { get; }
    internal static string Membership_no_error { get; }
    internal static string Membership_provider_name_invalid { get; }
    internal static string Membership_UserRejected { get; }
    internal static string Parameter_can_not_be_empty { get; }
    internal static string Platform_not_supported { get; }
    internal static string Provider_Error { get; }
    internal static string Provider_must_implement_type { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Can_not_use_encrypted_passwords_with_autogen_keys();
    internal static string get_Membership_DuplicateEmail();
    internal static string get_Membership_DuplicateProviderUserKey();
    internal static string get_Membership_DuplicateUserName();
    internal static string get_Membership_InvalidAnswer();
    internal static string get_Membership_InvalidEmail();
    internal static string get_Membership_InvalidPassword();
    internal static string get_Membership_InvalidProviderUserKey();
    internal static string get_Membership_InvalidQuestion();
    internal static string get_Membership_InvalidUserName();
    internal static string get_Membership_no_error();
    internal static string get_Membership_provider_name_invalid();
    internal static string get_Membership_UserRejected();
    internal static string get_Parameter_can_not_be_empty();
    internal static string get_Platform_not_supported();
    internal static string get_Provider_Error();
    internal static string get_Provider_must_implement_type();
}
public enum System.Web.Configuration.MembershipPasswordCompatibilityMode : Enum {
    public int value__;
    public static MembershipPasswordCompatibilityMode Framework20;
    public static MembershipPasswordCompatibilityMode Framework40;
}
internal class System.Web.Security.DefaultMembershipAdapter : object {
    public MembershipProviderCollection Providers { get; }
    public int UserIsOnlineTimeWindow { get; }
    public bool IsDecryptionKeyAutogenerated { get; }
    public bool UsingCustomEncryption { get; }
    public sealed virtual MembershipProviderCollection get_Providers();
    public sealed virtual int get_UserIsOnlineTimeWindow();
    public sealed virtual bool get_IsDecryptionKeyAutogenerated();
    public sealed virtual bool get_UsingCustomEncryption();
    public sealed virtual Byte[] EncryptOrDecryptData(bool encrypt, Byte[] buffer, bool useLegacyMode);
}
internal interface System.Web.Security.IMembershipAdapter {
    public MembershipProviderCollection Providers { get; }
    public int UserIsOnlineTimeWindow { get; }
    public bool IsDecryptionKeyAutogenerated { get; }
    public bool UsingCustomEncryption { get; }
    public abstract virtual MembershipProviderCollection get_Providers();
    public abstract virtual int get_UserIsOnlineTimeWindow();
    public abstract virtual bool get_IsDecryptionKeyAutogenerated();
    public abstract virtual bool get_UsingCustomEncryption();
    public abstract virtual Byte[] EncryptOrDecryptData(bool encrypt, Byte[] buffer, bool useLegacyMode);
}
[TypeForwardedFromAttribute("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public enum System.Web.Security.MembershipCreateStatus : Enum {
    public int value__;
    public static MembershipCreateStatus Success;
    public static MembershipCreateStatus InvalidUserName;
    public static MembershipCreateStatus InvalidPassword;
    public static MembershipCreateStatus InvalidQuestion;
    public static MembershipCreateStatus InvalidAnswer;
    public static MembershipCreateStatus InvalidEmail;
    public static MembershipCreateStatus DuplicateUserName;
    public static MembershipCreateStatus DuplicateEmail;
    public static MembershipCreateStatus UserRejected;
    public static MembershipCreateStatus InvalidProviderUserKey;
    public static MembershipCreateStatus DuplicateProviderUserKey;
    public static MembershipCreateStatus ProviderError;
}
[TypeForwardedFromAttribute("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.Security.MembershipCreateUserException : Exception {
    public MembershipCreateStatus StatusCode { get; }
    public MembershipCreateUserException(MembershipCreateStatus statusCode);
    public MembershipCreateUserException(string message);
    protected MembershipCreateUserException(SerializationInfo info, StreamingContext context);
    public MembershipCreateUserException(string message, Exception innerException);
    public MembershipCreateStatus get_StatusCode();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static string GetMessageFromStatusCode(MembershipCreateStatus statusCode);
}
[TypeForwardedFromAttribute("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.Security.MembershipPasswordException : Exception {
    public MembershipPasswordException(string message);
    protected MembershipPasswordException(SerializationInfo info, StreamingContext context);
    public MembershipPasswordException(string message, Exception innerException);
}
[TypeForwardedFromAttribute("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public enum System.Web.Security.MembershipPasswordFormat : Enum {
    public int value__;
    public static MembershipPasswordFormat Clear;
    public static MembershipPasswordFormat Hashed;
    public static MembershipPasswordFormat Encrypted;
}
[TypeForwardedFromAttribute("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.Security.MembershipProvider : ProviderBase {
    public bool EnablePasswordRetrieval { get; }
    public bool EnablePasswordReset { get; }
    public bool RequiresQuestionAndAnswer { get; }
    public string ApplicationName { get; public set; }
    public int MaxInvalidPasswordAttempts { get; }
    public int PasswordAttemptWindow { get; }
    public bool RequiresUniqueEmail { get; }
    public MembershipPasswordFormat PasswordFormat { get; }
    public int MinRequiredPasswordLength { get; }
    public int MinRequiredNonAlphanumericCharacters { get; }
    public string PasswordStrengthRegularExpression { get; }
    public abstract virtual bool get_EnablePasswordRetrieval();
    public abstract virtual bool get_EnablePasswordReset();
    public abstract virtual bool get_RequiresQuestionAndAnswer();
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
    public abstract virtual int get_MaxInvalidPasswordAttempts();
    public abstract virtual int get_PasswordAttemptWindow();
    public abstract virtual bool get_RequiresUniqueEmail();
    public abstract virtual MembershipPasswordFormat get_PasswordFormat();
    public abstract virtual int get_MinRequiredPasswordLength();
    public abstract virtual int get_MinRequiredNonAlphanumericCharacters();
    public abstract virtual string get_PasswordStrengthRegularExpression();
    public abstract virtual MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status);
    public abstract virtual bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer);
    public abstract virtual string GetPassword(string username, string answer);
    public abstract virtual bool ChangePassword(string username, string oldPassword, string newPassword);
    public abstract virtual string ResetPassword(string username, string answer);
    public abstract virtual void UpdateUser(MembershipUser user);
    public abstract virtual bool ValidateUser(string username, string password);
    public abstract virtual bool UnlockUser(string userName);
    public abstract virtual MembershipUser GetUser(object providerUserKey, bool userIsOnline);
    public abstract virtual MembershipUser GetUser(string username, bool userIsOnline);
    internal MembershipUser GetUser(string username, bool userIsOnline, bool throwOnError);
    public abstract virtual string GetUserNameByEmail(string email);
    public abstract virtual bool DeleteUser(string username, bool deleteAllRelatedData);
    public abstract virtual MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, Int32& totalRecords);
    public abstract virtual int GetNumberOfUsersOnline();
    public abstract virtual MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public abstract virtual MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    protected virtual Byte[] EncryptPassword(Byte[] password);
    protected virtual Byte[] EncryptPassword(Byte[] password, MembershipPasswordCompatibilityMode legacyPasswordCompatibilityMode);
    protected virtual Byte[] DecryptPassword(Byte[] encodedPassword);
    public void add_ValidatingPassword(MembershipValidatePasswordEventHandler value);
    public void remove_ValidatingPassword(MembershipValidatePasswordEventHandler value);
    protected virtual void OnValidatingPassword(ValidatePasswordEventArgs e);
}
[TypeForwardedFromAttribute("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultMemberAttribute("Item")]
public class System.Web.Security.MembershipProviderCollection : ProviderCollection {
    public MembershipProvider Item { get; }
    public virtual void Add(ProviderBase provider);
    public MembershipProvider get_Item(string name);
    public void CopyTo(MembershipProvider[] array, int index);
}
[TypeForwardedFromAttribute("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.Security.MembershipUser : object {
    public string UserName { get; }
    public object ProviderUserKey { get; }
    public string Email { get; public set; }
    public string PasswordQuestion { get; }
    public string Comment { get; public set; }
    public bool IsApproved { get; public set; }
    public bool IsLockedOut { get; }
    public DateTime LastLockoutDate { get; }
    public DateTime CreationDate { get; }
    public DateTime LastLoginDate { get; public set; }
    public DateTime LastActivityDate { get; public set; }
    public DateTime LastPasswordChangedDate { get; }
    public bool IsOnline { get; }
    public string ProviderName { get; }
    public MembershipUser(string providerName, string name, object providerUserKey, string email, string passwordQuestion, string comment, bool isApproved, bool isLockedOut, DateTime creationDate, DateTime lastLoginDate, DateTime lastActivityDate, DateTime lastPasswordChangedDate, DateTime lastLockoutDate);
    public virtual string get_UserName();
    public virtual object get_ProviderUserKey();
    public virtual string get_Email();
    public virtual void set_Email(string value);
    public virtual string get_PasswordQuestion();
    public virtual string get_Comment();
    public virtual void set_Comment(string value);
    public virtual bool get_IsApproved();
    public virtual void set_IsApproved(bool value);
    public virtual bool get_IsLockedOut();
    public virtual DateTime get_LastLockoutDate();
    public virtual DateTime get_CreationDate();
    public virtual DateTime get_LastLoginDate();
    public virtual void set_LastLoginDate(DateTime value);
    public virtual DateTime get_LastActivityDate();
    public virtual void set_LastActivityDate(DateTime value);
    public virtual DateTime get_LastPasswordChangedDate();
    public virtual bool get_IsOnline();
    public virtual string ToString();
    public virtual string get_ProviderName();
    internal virtual void Update();
    public virtual string GetPassword();
    public virtual string GetPassword(string passwordAnswer);
    internal string GetPassword(bool throwOnError);
    internal string GetPassword(string answer, bool throwOnError);
    public virtual bool ChangePassword(string oldPassword, string newPassword);
    internal bool ChangePassword(string oldPassword, string newPassword, bool throwOnError);
    public virtual bool ChangePasswordQuestionAndAnswer(string password, string newPasswordQuestion, string newPasswordAnswer);
    public virtual string ResetPassword(string passwordAnswer);
    public virtual string ResetPassword();
    internal string ResetPassword(bool throwOnError);
    internal string ResetPassword(string passwordAnswer, bool throwOnError);
    public virtual bool UnlockUser();
}
[DefaultMemberAttribute("Item")]
[TypeForwardedFromAttribute("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.Security.MembershipUserCollection : object {
    public MembershipUser Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public void Add(MembershipUser user);
    public void Remove(string name);
    public MembershipUser get_Item(string name);
    public sealed virtual IEnumerator GetEnumerator();
    public void SetReadOnly();
    public void Clear();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(MembershipUser[] array, int index);
}
[TypeForwardedFromAttribute("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.Security.MembershipValidatePasswordEventHandler : MulticastDelegate {
    public MembershipValidatePasswordEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValidatePasswordEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValidatePasswordEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TypeForwardedFromAttribute("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Web.Security.RoleProvider : ProviderBase {
    public string ApplicationName { get; public set; }
    public abstract virtual string get_ApplicationName();
    public abstract virtual void set_ApplicationName(string value);
    public abstract virtual bool IsUserInRole(string username, string roleName);
    public abstract virtual String[] GetRolesForUser(string username);
    public abstract virtual void CreateRole(string roleName);
    public abstract virtual bool DeleteRole(string roleName, bool throwOnPopulatedRole);
    public abstract virtual bool RoleExists(string roleName);
    public abstract virtual void AddUsersToRoles(String[] usernames, String[] roleNames);
    public abstract virtual void RemoveUsersFromRoles(String[] usernames, String[] roleNames);
    public abstract virtual String[] GetUsersInRole(string roleName);
    public abstract virtual String[] GetAllRoles();
    public abstract virtual String[] FindUsersInRole(string roleName, string usernameToMatch);
}
[TypeForwardedFromAttribute("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Web.Security.ValidatePasswordEventArgs : EventArgs {
    public string UserName { get; }
    public string Password { get; }
    public bool IsNewUser { get; }
    public bool Cancel { get; public set; }
    public Exception FailureInformation { get; public set; }
    public ValidatePasswordEventArgs(string userName, string password, bool isNewUser);
    public string get_UserName();
    public string get_Password();
    public bool get_IsNewUser();
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public Exception get_FailureInformation();
    public void set_FailureInformation(Exception value);
}
internal static class System.Web.Util.SecurityServices : object {
    internal static void CheckPasswordParameter(string param, string paramName);
    internal static void CheckForEmptyOrWhiteSpaceParameter(String& param, string paramName);
    internal static void CheckForEmptyParameter(string param, string paramName);
}
internal static class System.Web.Util.SystemWebProxy : object {
    public static IMembershipAdapter Membership;
    private static SystemWebProxy();
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
