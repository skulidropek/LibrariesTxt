internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemThreadingTasksDataflow;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemNetHttp;
    internal static string SystemNetHttpWebRequest;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemRuntimeWindowsRuntime;
    internal static string SystemRuntimeWindowsRuntimeUIXaml;
    internal static string SystemSecurity;
    internal static string SystemServiceModelWeb;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal class System.Web.UI.Design.DataVisualization.Charting.ActionPropertyDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public string DisplayName { get; }
    public bool IsBrowsable { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    internal object Instance { get; }
    internal ChartActionList ActionList { get; }
    internal ActionPropertyDescriptor(object target, PropertyDescriptor basePropertyDescriptor, ChartActionList actionList);
    public virtual Type get_ComponentType();
    public virtual string get_DisplayName();
    public virtual bool get_IsBrowsable();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    internal object get_Instance();
    internal ChartActionList get_ActionList();
    public virtual object GetEditor(Type editorBaseType);
    internal object GetPropertyOwner();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void SetValue(object component, object value);
}
internal class System.Web.UI.Design.DataVisualization.Charting.AnchorPointNameTreeView : TreeView {
    public AnchorPointNameTreeView(IWindowsFormsEditorService edSvc, Annotation annotation, DataPoint dataPoint);
    public DataPoint GetNewValue();
    protected virtual void OnDoubleClick(EventArgs e);
}
internal class System.Web.UI.Design.DataVisualization.Charting.AnchorPointUITypeEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.DataVisualization.Charting.AnnotationAxisNameTreeView : TreeView {
    public AnnotationAxisNameTreeView(IWindowsFormsEditorService edSvc, Annotation annotation, Axis axis, bool showXAxes);
    public Axis GetNewValue();
    protected virtual void OnDoubleClick(EventArgs e);
}
internal class System.Web.UI.Design.DataVisualization.Charting.AnnotationAxisUITypeEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.DataVisualization.Charting.AnnotationCollectionEditor : ChartCollectionEditor {
    protected virtual Type[] CreateNewItemTypes();
    protected virtual object CreateInstance(Type itemType);
}
internal class System.Web.UI.Design.DataVisualization.Charting.AreaCollectionEditor : ChartCollectionEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
internal class System.Web.UI.Design.DataVisualization.Charting.AxesArrayEditor : ArrayEditor {
    protected string HelpTopic { get; }
    protected virtual bool CanRemoveInstance(object value);
    protected virtual string get_HelpTopic();
    protected virtual void ShowHelp();
    protected virtual CollectionForm CreateCollectionForm();
}
internal class System.Web.UI.Design.DataVisualization.Charting.ChartActionList : DesignerActionList {
    [EditorAttribute("System.Web.UI.Design.DataVisualization.Charting.ChartTypeEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SeriesChartType ChartTypeImpl { get; public set; }
    public bool AutoShow { get; public set; }
    private IChartElement System.Web.UI.DataVisualization.Charting.IChartElement.Parent { get; private set; }
    private CommonElements System.Web.UI.DataVisualization.Charting.IChartElement.Common { get; }
    internal Chart Chart { get; }
    public ChartActionList(ChartWebDesigner chartDesigner);
    public virtual DesignerActionItemCollection GetSortedActionItems();
    public SeriesChartType get_ChartTypeImpl();
    public void set_ChartTypeImpl(SeriesChartType value);
    internal bool IsBrowsableChartType();
    internal ChartWebDesigner GetDesigner();
    public virtual bool get_AutoShow();
    public virtual void set_AutoShow(bool value);
    private sealed virtual override IChartElement System.Web.UI.DataVisualization.Charting.IChartElement.get_Parent();
    private sealed virtual override void System.Web.UI.DataVisualization.Charting.IChartElement.set_Parent(IChartElement value);
    private sealed virtual override CommonElements System.Web.UI.DataVisualization.Charting.IChartElement.get_Common();
    private sealed virtual override void System.Web.UI.DataVisualization.Charting.IChartElement.Invalidate();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.CloseDropDown();
    private sealed virtual override void System.Windows.Forms.Design.IWindowsFormsEditorService.DropDownControl(Control control);
    private sealed virtual override DialogResult System.Windows.Forms.Design.IWindowsFormsEditorService.ShowDialog(Form dialog);
    [EditorBrowsableAttribute("1")]
private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    [EditorBrowsableAttribute("1")]
private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    [EditorBrowsableAttribute("1")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    [EditorBrowsableAttribute("1")]
private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    [EditorBrowsableAttribute("1")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    [EditorBrowsableAttribute("1")]
private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    [EditorBrowsableAttribute("1")]
private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    [EditorBrowsableAttribute("1")]
private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    [EditorBrowsableAttribute("1")]
private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    [EditorBrowsableAttribute("1")]
private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    [EditorBrowsableAttribute("1")]
private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    [EditorBrowsableAttribute("1")]
private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    internal Chart get_Chart();
}
internal class System.Web.UI.Design.DataVisualization.Charting.ChartBuilder : ControlBuilder {
    public virtual Type GetChildControlType(string tagName, IDictionary attributes);
    public virtual void AppendLiteralString(string s);
}
internal class System.Web.UI.Design.DataVisualization.Charting.ChartCollectionEditor : CollectionEditor {
    protected string HelpTopic { get; }
    public ChartCollectionEditor(Type type);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    protected virtual object SetItems(object editValue, Object[] value);
    protected virtual string get_HelpTopic();
    protected virtual void ShowHelp();
    protected virtual CollectionForm CreateCollectionForm();
    public static object GetChartReference(object instance);
    protected virtual void DestroyInstance(object instance);
}
internal class System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor : ColorEditor {
}
internal class System.Web.UI.Design.DataVisualization.Charting.ChartTypeEditor : UITypeEditor {
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
}
internal class System.Web.UI.Design.DataVisualization.Charting.ChartUrlEditor : UrlEditor {
}
internal class System.Web.UI.Design.DataVisualization.Charting.ChartWebDesigner : DataBoundControlDesigner {
    internal static ChartWebDesigner controlDesigner;
    public DesignerActionListCollection ActionLists { get; }
    private static ChartWebDesigner();
    public virtual void Initialize(IComponent component);
    protected virtual void Dispose(bool disposing);
    protected virtual void PostFilterProperties(IDictionary properties);
    public virtual string GetPersistenceContent();
    [ObsoleteAttribute]
public virtual string GetPersistInnerHtml();
    protected virtual string GetErrorDesignTimeHtml(Exception e);
    public virtual string GetDesignTimeHtml();
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnDataSourceChanged(bool forceUpdateView);
    internal void SetDirtyFlag();
    internal void SetDirtyFlag(bool raiseComponentChanged);
    public object GetDataSource();
    public virtual DesignerActionListCollection get_ActionLists();
}
[EditorAttribute("System.Web.UI.Design.DataVisualization.Charting.ColorExtendedEditor", "System.Drawing.Design.UITypeEditor")]
internal class System.Web.UI.Design.DataVisualization.Charting.ColorExtended : object {
    [EditorAttribute("System.Web.UI.Design.DataVisualization.Charting.ChartColorEditor", "System.Drawing.Design.UITypeEditor")]
public Color Value { get; public set; }
    public ColorExtended(Color color);
    public Color get_Value();
    public void set_Value(Color value);
    public virtual string ToString();
}
internal class System.Web.UI.Design.DataVisualization.Charting.ColorExtendedArrayConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public static string ColorArrayToString(ColorExtended[] colors);
    public static ColorExtended[] StringToColorArray(string colorNames);
}
internal class System.Web.UI.Design.DataVisualization.Charting.ColorExtendedArrayPropertyDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public ColorExtendedArrayPropertyDescriptor(PropertyDescriptor basePropertyDescriptor);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
internal class System.Web.UI.Design.DataVisualization.Charting.ColorExtendedEditor : UITypeEditor {
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
}
internal class System.Web.UI.Design.DataVisualization.Charting.ColorPaletteEditor : UITypeEditor {
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
}
internal class System.Web.UI.Design.DataVisualization.Charting.DataPointCollectionEditor : ChartCollectionEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    protected virtual object CreateInstance(Type itemType);
}
internal class System.Web.UI.Design.DataVisualization.Charting.DataPointCustomPropertiesConverter : TypeConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Web.UI.Design.DataVisualization.Charting.DesignerActionVerbItem : DesignerActionMethodItem {
    internal DesignerActionVerbItem(DesignerActionList list, DesignerVerb verb, string category);
    public virtual void Invoke();
}
internal class System.Web.UI.Design.DataVisualization.Charting.DesignerMessageBoxDialog : object {
    private sealed virtual override bool System.Web.UI.DataVisualization.Charting.IDesignerMessageBoxDialog.ShowQuestion(string message);
    internal static MessageBoxOptions GetMessageBoxOptions();
}
internal class System.Web.UI.Design.DataVisualization.Charting.FlagsEnumCheckedListBox : CheckedListBox {
    public FlagsEnumCheckedListBox(object editValue, Type editType);
    public object GetNewValue();
}
internal class System.Web.UI.Design.DataVisualization.Charting.FlagsEnumUITypeEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.DataVisualization.Charting.GradientEditor : UITypeEditor {
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
    protected virtual void Finalize();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Web.UI.Design.DataVisualization.Charting.HatchStyleEditor : UITypeEditor {
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
    protected virtual void Finalize();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Web.UI.Design.DataVisualization.Charting.ImageValueEditor : ImageUrlEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
internal class System.Web.UI.Design.DataVisualization.Charting.KeywordEditor : Form {
    internal string Keyword;
    public KeywordEditor(ArrayList applicableKeywords, string keyword, int maxYValueIndex);
    private static KeywordEditor();
    protected virtual void Dispose(bool disposing);
}
internal class System.Web.UI.Design.DataVisualization.Charting.KeywordsStringEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.DataVisualization.Charting.KeywordsStringEditorForm : Form {
    public string ResultString;
    internal ArrayList applicableKeywords;
    internal KeywordsRegistry KeywordsRegistry;
    public KeywordsStringEditorForm(string initialString, string classTypeName, string propertyName, int maxYValueIndex);
    private static KeywordsStringEditorForm();
    protected virtual void Dispose(bool disposing);
}
internal class System.Web.UI.Design.DataVisualization.Charting.LegendCellCollectionEditor : ChartCollectionEditor {
    protected virtual object CreateInstance(Type itemType);
}
internal class System.Web.UI.Design.DataVisualization.Charting.LegendCellColumnCollectionEditor : ChartCollectionEditor {
    protected virtual object CreateInstance(Type itemType);
}
internal class System.Web.UI.Design.DataVisualization.Charting.LegendCollectionEditor : ChartCollectionEditor {
    protected virtual object CreateInstance(Type itemType);
}
internal class System.Web.UI.Design.DataVisualization.Charting.LegendItemCollectionEditor : ChartCollectionEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
internal class System.Web.UI.Design.DataVisualization.Charting.MarkerStyleEditor : UITypeEditor {
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
    protected virtual void Finalize();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
}
internal class System.Web.UI.Design.DataVisualization.Charting.SeriesCollectionEditor : ChartCollectionEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    internal static Series CreateNewSeries(Chart control, string suggestedChartArea);
    protected virtual object CreateInstance(Type itemType);
}
internal class System.Web.UI.Design.DataVisualization.Charting.SeriesDataFieldValueAxisUITypeEditor : SeriesDataSourceMemberValueAxisUITypeEditor {
    internal virtual SeriesDataSourceMemberYCheckedListBox GetDropDownControl(Chart chart, ITypeDescriptorContext context, object value, bool flag);
}
internal class System.Web.UI.Design.DataVisualization.Charting.SeriesDataFieldXConvertor : DataFieldConverter {
    protected virtual bool IsApplicable(IDataSourceFieldSchema shema);
    protected virtual bool IsApplicable(PropertyDescriptor descriptor);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.DataVisualization.Charting.SeriesDataFieldYCheckedListBox : SeriesDataSourceMemberYCheckedListBox {
    public SeriesDataFieldYCheckedListBox(Chart chart, ITypeDescriptorContext context, object editValue, bool usedForYValue);
    internal virtual ArrayList GetMemberNames();
}
internal class System.Web.UI.Design.DataVisualization.Charting.SeriesDataFieldYConvertor : SeriesDataFieldXConvertor {
    protected virtual bool IsApplicable(PropertyDescriptor descriptor);
    protected virtual bool IsApplicable(IDataSourceFieldSchema shema);
}
internal class System.Web.UI.Design.DataVisualization.Charting.SeriesDataSourceMemberValueAxisUITypeEditor : UITypeEditor {
    internal virtual SeriesDataSourceMemberYCheckedListBox GetDropDownControl(Chart chart, ITypeDescriptorContext context, object value, bool flag);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Web.UI.Design.DataVisualization.Charting.SeriesDataSourceMemberYCheckedListBox : CheckedListBox {
    protected object editValue;
    protected bool usedForYValue;
    public SeriesDataSourceMemberYCheckedListBox(Chart chart, object editValue, bool usedForYValue);
    protected virtual void OnCreateControl();
    internal virtual ArrayList GetMemberNames();
    public string GetNewValue();
}
internal class System.Web.UI.Design.DataVisualization.Charting.UITypeEditorProxy : UITypeEditor {
    public bool IsDropDownResizable { get; }
    private IContainer System.ComponentModel.ITypeDescriptorContext.Container { get; }
    private object System.ComponentModel.ITypeDescriptorContext.Instance { get; }
    private PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor { get; }
    public UITypeEditorProxy(UITypeEditor targetEditor, PropertyDescriptor actionPropDesc, object instance);
    public virtual bool get_IsDropDownResizable();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
    private sealed virtual override IContainer System.ComponentModel.ITypeDescriptorContext.get_Container();
    private sealed virtual override object System.ComponentModel.ITypeDescriptorContext.get_Instance();
    private sealed virtual override void System.ComponentModel.ITypeDescriptorContext.OnComponentChanged();
    private sealed virtual override bool System.ComponentModel.ITypeDescriptorContext.OnComponentChanging();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ITypeDescriptorContext.get_PropertyDescriptor();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    public sealed virtual void Dispose();
}
internal class System.Web.UI.Design.DataVisualization.Charting.UrlValueEditor : UrlEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
