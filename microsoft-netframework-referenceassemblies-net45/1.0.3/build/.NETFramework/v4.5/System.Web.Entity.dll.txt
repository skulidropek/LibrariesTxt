[DefaultPropertyAttribute("EntitySetName")]
[PersistChildrenAttribute("False")]
[ResourceDescriptionAttribute("EntityDataSource_Description")]
[ToolboxBitmapAttribute("System.Web.UI.WebControls.EntityDataSource", "EntityDataSource.ico")]
[DefaultEventAttribute("Selecting")]
[ResourceDisplayNameAttribute("EntityDataSource_DisplayName")]
[DesignerAttribute("System.Web.UI.Design.WebControls.EntityDataSourceDesigner, System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[ParseChildrenAttribute("True")]
public class System.Web.UI.WebControls.EntityDataSource : DataSourceControl {
    [ResourceDescriptionAttribute("PropertyDescription_AutoGenerateOrderByClause")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
public bool AutoGenerateOrderByClause { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[ResourceDescriptionAttribute("PropertyDescription_AutoGenerateWhereClause")]
public bool AutoGenerateWhereClause { get; public set; }
    [DefaultValueAttribute("True")]
[ResourceDescriptionAttribute("PropertyDescription_AutoPage")]
[CategoryAttribute("Behavior")]
public bool AutoPage { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[ResourceDescriptionAttribute("PropertyDescription_AutoSort")]
public bool AutoSort { get; public set; }
    public string DefaultContainerName { get; public set; }
    public string ConnectionString { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public Type ContextType { get; public set; }
    [ResourceDescriptionAttribute("PropertyDescription_ContextTypeName")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string ContextTypeName { get; public set; }
    [DefaultValueAttribute("True")]
[ResourceDescriptionAttribute("PropertyDescription_EnableFlattening")]
[CategoryAttribute("Behavior")]
public bool EnableFlattening { get; public set; }
    [PersistenceModeAttribute("1")]
[DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[BrowsableAttribute("False")]
public ParameterCollection DeleteParameters { get; }
    [DefaultValueAttribute("False")]
[ResourceDescriptionAttribute("PropertyDescription_EnableDelete")]
[CategoryAttribute("Behavior")]
public bool EnableDelete { get; public set; }
    [ResourceDescriptionAttribute("PropertyDescription_EnableInsert")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool EnableInsert { get; public set; }
    [CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("PropertyDescription_EnableUpdate")]
[DefaultValueAttribute("False")]
public bool EnableUpdate { get; public set; }
    public string EntitySetName { get; public set; }
    public string CommandText { get; public set; }
    [PersistenceModeAttribute("1")]
[BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public ParameterCollection CommandParameters { get; }
    [CategoryAttribute("Data")]
[ResourceDescriptionAttribute("PropertyDescription_GroupBy")]
[DefaultValueAttribute("")]
public string GroupBy { get; public set; }
    [ResourceDescriptionAttribute("PropertyDescription_Include")]
[DefaultValueAttribute("")]
[CategoryAttribute("Data")]
public string Include { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public ParameterCollection InsertParameters { get; }
    public string OrderBy { get; public set; }
    [MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[BrowsableAttribute("False")]
public ParameterCollection OrderByParameters { get; }
    public string EntityTypeFilter { get; public set; }
    public string Select { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute("1")]
[DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
public ParameterCollection SelectParameters { get; }
    [DefaultValueAttribute("True")]
[ResourceDescriptionAttribute("PropertyDescription_StoreOriginalValuesInViewState")]
[CategoryAttribute("Behavior")]
public bool StoreOriginalValuesInViewState { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[BrowsableAttribute("False")]
public ParameterCollection UpdateParameters { get; }
    public string Where { get; public set; }
    [MergablePropertyAttribute("False")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
public ParameterCollection WhereParameters { get; }
    public EntityDataSource(EntityConnection connection);
    public bool get_AutoGenerateOrderByClause();
    public void set_AutoGenerateOrderByClause(bool value);
    public sealed virtual bool get_AutoGenerateWhereClause();
    public sealed virtual void set_AutoGenerateWhereClause(bool value);
    public bool get_AutoPage();
    public void set_AutoPage(bool value);
    public bool get_AutoSort();
    public void set_AutoSort(bool value);
    public string get_DefaultContainerName();
    public void set_DefaultContainerName(string value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public sealed virtual Type get_ContextType();
    public sealed virtual void set_ContextType(Type value);
    public string get_ContextTypeName();
    public void set_ContextTypeName(string value);
    public bool get_EnableFlattening();
    public void set_EnableFlattening(bool value);
    public ParameterCollection get_DeleteParameters();
    public sealed virtual bool get_EnableDelete();
    public sealed virtual void set_EnableDelete(bool value);
    public sealed virtual bool get_EnableInsert();
    public sealed virtual void set_EnableInsert(bool value);
    public sealed virtual bool get_EnableUpdate();
    public sealed virtual void set_EnableUpdate(bool value);
    public sealed virtual string get_EntitySetName();
    public sealed virtual void set_EntitySetName(string value);
    public string get_CommandText();
    public void set_CommandText(string value);
    public ParameterCollection get_CommandParameters();
    public string get_GroupBy();
    public void set_GroupBy(string value);
    public string get_Include();
    public void set_Include(string value);
    public ParameterCollection get_InsertParameters();
    public string get_OrderBy();
    public void set_OrderBy(string value);
    public ParameterCollection get_OrderByParameters();
    public string get_EntityTypeFilter();
    public void set_EntityTypeFilter(string value);
    public string get_Select();
    public void set_Select(string value);
    public ParameterCollection get_SelectParameters();
    public bool get_StoreOriginalValuesInViewState();
    public void set_StoreOriginalValuesInViewState(bool value);
    public ParameterCollection get_UpdateParameters();
    public sealed virtual string get_Where();
    public sealed virtual void set_Where(string value);
    public sealed virtual ParameterCollection get_WhereParameters();
    protected virtual DataSourceView GetView(string viewName);
    protected virtual ICollection GetViewNames();
    protected virtual EntityDataSourceView CreateView();
    protected virtual object SaveControlState();
    protected virtual void LoadControlState(object savedState);
    protected virtual void TrackViewState();
    private sealed virtual override void System.Web.DynamicData.IDynamicDataSource.add_Exception(EventHandler`1<DynamicValidatorEventArgs> value);
    private sealed virtual override void System.Web.DynamicData.IDynamicDataSource.remove_Exception(EventHandler`1<DynamicValidatorEventArgs> value);
    public void add_ContextCreating(EventHandler`1<EntityDataSourceContextCreatingEventArgs> value);
    public void remove_ContextCreating(EventHandler`1<EntityDataSourceContextCreatingEventArgs> value);
    public void add_ContextCreated(EventHandler`1<EntityDataSourceContextCreatedEventArgs> value);
    public void remove_ContextCreated(EventHandler`1<EntityDataSourceContextCreatedEventArgs> value);
    public void add_ContextDisposing(EventHandler`1<EntityDataSourceContextDisposingEventArgs> value);
    public void remove_ContextDisposing(EventHandler`1<EntityDataSourceContextDisposingEventArgs> value);
    public void add_Selecting(EventHandler`1<EntityDataSourceSelectingEventArgs> value);
    public void remove_Selecting(EventHandler`1<EntityDataSourceSelectingEventArgs> value);
    public void add_Selected(EventHandler`1<EntityDataSourceSelectedEventArgs> value);
    public void remove_Selected(EventHandler`1<EntityDataSourceSelectedEventArgs> value);
    public void add_Deleting(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public void remove_Deleting(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public void add_Deleted(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    public void remove_Deleted(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    public void add_Inserting(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public void remove_Inserting(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public void add_Inserted(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    public void remove_Inserted(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    public void add_Updated(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    public void remove_Updated(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    public void add_Updating(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public void remove_Updating(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public sealed virtual void add_QueryCreated(EventHandler`1<QueryCreatedEventArgs> value);
    public sealed virtual void remove_QueryCreated(EventHandler`1<QueryCreatedEventArgs> value);
    private sealed virtual override void System.Web.UI.WebControls.IQueryableDataSource.RaiseViewChanged();
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnUnload(EventArgs e);
}
public class System.Web.UI.WebControls.EntityDataSourceChangedEventArgs : EventArgs {
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public object Entity { get; }
    public ObjectContext Context { get; }
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public object get_Entity();
    public ObjectContext get_Context();
}
public class System.Web.UI.WebControls.EntityDataSourceChangingEventArgs : CancelEventArgs {
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public object Entity { get; }
    public ObjectContext Context { get; }
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public object get_Entity();
    public ObjectContext get_Context();
}
public class System.Web.UI.WebControls.EntityDataSourceContextCreatedEventArgs : EventArgs {
    public ObjectContext Context { get; }
    public ObjectContext get_Context();
}
public class System.Web.UI.WebControls.EntityDataSourceContextCreatingEventArgs : EventArgs {
    public ObjectContext Context { get; public set; }
    public ObjectContext get_Context();
    public void set_Context(ObjectContext value);
}
public class System.Web.UI.WebControls.EntityDataSourceContextDisposingEventArgs : CancelEventArgs {
    public ObjectContext Context { get; }
    public ObjectContext get_Context();
}
public class System.Web.UI.WebControls.EntityDataSourceSelectedEventArgs : EventArgs {
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public IEnumerable Results { get; }
    public ObjectContext Context { get; }
    public int TotalRowCount { get; }
    public DataSourceSelectArguments SelectArguments { get; }
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public IEnumerable get_Results();
    public ObjectContext get_Context();
    public int get_TotalRowCount();
    public DataSourceSelectArguments get_SelectArguments();
}
public class System.Web.UI.WebControls.EntityDataSourceSelectingEventArgs : CancelEventArgs {
    public EntityDataSource DataSource { get; }
    public DataSourceSelectArguments SelectArguments { get; }
    public EntityDataSource get_DataSource();
    public DataSourceSelectArguments get_SelectArguments();
}
public class System.Web.UI.WebControls.EntityDataSourceValidationException : Exception {
    private IDictionary`2<string, Exception> System.Web.DynamicData.IDynamicValidatorException.InnerExceptions { get; }
    public EntityDataSourceValidationException(string message);
    public EntityDataSourceValidationException(string message, Exception innerException);
    private sealed virtual override IDictionary`2<string, Exception> System.Web.DynamicData.IDynamicValidatorException.get_InnerExceptions();
}
public class System.Web.UI.WebControls.EntityDataSourceView : DataSourceView {
    public bool CanInsert { get; }
    public bool CanUpdate { get; }
    public bool CanDelete { get; }
    public bool CanSort { get; }
    public bool CanPage { get; }
    public bool CanRetrieveTotalRowCount { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    public EntityDataSourceView(EntityDataSource owner, string viewName);
    private static EntityDataSourceView();
    protected virtual IEnumerable ExecuteSelect(DataSourceSelectArguments arguments);
    protected virtual int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues);
    protected virtual int ExecuteDelete(IDictionary keys, IDictionary oldValues);
    protected virtual int ExecuteInsert(IDictionary values);
    public DataTable GetViewSchema();
    public void add_QueryCreated(EventHandler`1<QueryCreatedEventArgs> value);
    public void remove_QueryCreated(EventHandler`1<QueryCreatedEventArgs> value);
    public virtual bool get_CanInsert();
    public virtual bool get_CanUpdate();
    public virtual bool get_CanDelete();
    public virtual bool get_CanSort();
    public virtual bool get_CanPage();
    public virtual bool get_CanRetrieveTotalRowCount();
    public void add_Exception(EventHandler`1<DynamicValidatorEventArgs> value);
    public void remove_Exception(EventHandler`1<DynamicValidatorEventArgs> value);
    public void add_ContextCreating(EventHandler`1<EntityDataSourceContextCreatingEventArgs> value);
    public void remove_ContextCreating(EventHandler`1<EntityDataSourceContextCreatingEventArgs> value);
    public void add_ContextCreated(EventHandler`1<EntityDataSourceContextCreatedEventArgs> value);
    public void remove_ContextCreated(EventHandler`1<EntityDataSourceContextCreatedEventArgs> value);
    public void add_ContextDisposing(EventHandler`1<EntityDataSourceContextDisposingEventArgs> value);
    public void remove_ContextDisposing(EventHandler`1<EntityDataSourceContextDisposingEventArgs> value);
    public void add_Selecting(EventHandler`1<EntityDataSourceSelectingEventArgs> value);
    public void remove_Selecting(EventHandler`1<EntityDataSourceSelectingEventArgs> value);
    public void add_Selected(EventHandler`1<EntityDataSourceSelectedEventArgs> value);
    public void remove_Selected(EventHandler`1<EntityDataSourceSelectedEventArgs> value);
    public void add_Deleting(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public void remove_Deleting(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public void add_Deleted(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    public void remove_Deleted(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    public void add_Inserting(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public void remove_Inserting(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public void add_Inserted(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    public void remove_Inserted(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    public void add_Updating(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public void remove_Updating(EventHandler`1<EntityDataSourceChangingEventArgs> value);
    public void add_Updated(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    public void remove_Updated(EventHandler`1<EntityDataSourceChangedEventArgs> value);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object savedState);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
[AttributeUsageAttribute("644")]
internal class System.Web.UI.WebControls.ResourceDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public ResourceDescriptionAttribute(string descriptionResourceName);
    public virtual string get_Description();
}
[AttributeUsageAttribute("4")]
internal class System.Web.UI.WebControls.ResourceDisplayNameAttribute : DisplayNameAttribute {
    public string DisplayName { get; }
    public ResourceDisplayNameAttribute(string displayNameResourceName);
    public virtual string get_DisplayName();
}
