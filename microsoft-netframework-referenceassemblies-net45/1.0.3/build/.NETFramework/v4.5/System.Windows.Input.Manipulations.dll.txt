public class System.Windows.Input.Manipulations.InertiaExpansionBehavior2D : InertiaParameters2D {
    public float InitialRadius { get; public set; }
    public float DesiredDeceleration { get; public set; }
    public float DesiredExpansionX { get; public set; }
    public float DesiredExpansionY { get; public set; }
    public float InitialVelocityX { get; public set; }
    public float InitialVelocityY { get; public set; }
    public float get_InitialRadius();
    public void set_InitialRadius(float value);
    public float get_DesiredDeceleration();
    public void set_DesiredDeceleration(float value);
    public float get_DesiredExpansionX();
    public void set_DesiredExpansionX(float value);
    public float get_DesiredExpansionY();
    public void set_DesiredExpansionY(float value);
    public float get_InitialVelocityX();
    public void set_InitialVelocityX(float value);
    public float get_InitialVelocityY();
    public void set_InitialVelocityY(float value);
}
public abstract class System.Windows.Input.Manipulations.InertiaParameters2D : object {
}
public class System.Windows.Input.Manipulations.InertiaProcessor2D : object {
    public float InitialOriginX { get; public set; }
    public float InitialOriginY { get; public set; }
    public bool IsRunning { get; }
    public InertiaTranslationBehavior2D TranslationBehavior { get; public set; }
    public InertiaRotationBehavior2D RotationBehavior { get; public set; }
    public InertiaExpansionBehavior2D ExpansionBehavior { get; public set; }
    public float get_InitialOriginX();
    public void set_InitialOriginX(float value);
    public float get_InitialOriginY();
    public void set_InitialOriginY(float value);
    public bool get_IsRunning();
    public InertiaTranslationBehavior2D get_TranslationBehavior();
    public void set_TranslationBehavior(InertiaTranslationBehavior2D value);
    public InertiaRotationBehavior2D get_RotationBehavior();
    public void set_RotationBehavior(InertiaRotationBehavior2D value);
    public InertiaExpansionBehavior2D get_ExpansionBehavior();
    public void set_ExpansionBehavior(InertiaExpansionBehavior2D value);
    public void add_Delta(EventHandler`1<Manipulation2DDeltaEventArgs> value);
    public void remove_Delta(EventHandler`1<Manipulation2DDeltaEventArgs> value);
    public void add_Completed(EventHandler`1<Manipulation2DCompletedEventArgs> value);
    public void remove_Completed(EventHandler`1<Manipulation2DCompletedEventArgs> value);
    public bool Process(long timestamp);
    public void Complete(long timestamp);
    [EditorBrowsableAttribute("1")]
public void SetParameters(InertiaParameters2D parameters);
}
public class System.Windows.Input.Manipulations.InertiaRotationBehavior2D : InertiaParameters2D {
    public float DesiredDeceleration { get; public set; }
    public float DesiredRotation { get; public set; }
    public float InitialVelocity { get; public set; }
    public float get_DesiredDeceleration();
    public void set_DesiredDeceleration(float value);
    public float get_DesiredRotation();
    public void set_DesiredRotation(float value);
    public float get_InitialVelocity();
    public void set_InitialVelocity(float value);
}
public class System.Windows.Input.Manipulations.InertiaTranslationBehavior2D : InertiaParameters2D {
    public float DesiredDeceleration { get; public set; }
    public float DesiredDisplacement { get; public set; }
    public float InitialVelocityX { get; public set; }
    public float InitialVelocityY { get; public set; }
    public float get_DesiredDeceleration();
    public void set_DesiredDeceleration(float value);
    public float get_DesiredDisplacement();
    public void set_DesiredDisplacement(float value);
    public float get_InitialVelocityX();
    public void set_InitialVelocityX(float value);
    public float get_InitialVelocityY();
    public void set_InitialVelocityY(float value);
}
public class System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs : EventArgs {
    public float OriginX { get; }
    public float OriginY { get; }
    public ManipulationVelocities2D Velocities { get; }
    public ManipulationDelta2D Total { get; }
    public float get_OriginX();
    public float get_OriginY();
    public ManipulationVelocities2D get_Velocities();
    public ManipulationDelta2D get_Total();
}
public class System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs : EventArgs {
    public float OriginX { get; }
    public float OriginY { get; }
    public ManipulationVelocities2D Velocities { get; }
    public ManipulationDelta2D Delta { get; }
    public ManipulationDelta2D Cumulative { get; }
    public float get_OriginX();
    public float get_OriginY();
    public ManipulationVelocities2D get_Velocities();
    public ManipulationDelta2D get_Delta();
    public ManipulationDelta2D get_Cumulative();
}
public class System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs : EventArgs {
    public float OriginX { get; }
    public float OriginY { get; }
    public float get_OriginX();
    public float get_OriginY();
}
public class System.Windows.Input.Manipulations.ManipulationDelta2D : object {
    public float TranslationX { get; }
    public float TranslationY { get; }
    public float Rotation { get; }
    public float ScaleX { get; }
    public float ScaleY { get; }
    public float ExpansionX { get; }
    public float ExpansionY { get; }
    public float get_TranslationX();
    public float get_TranslationY();
    public float get_Rotation();
    public float get_ScaleX();
    public float get_ScaleY();
    public float get_ExpansionX();
    public float get_ExpansionY();
}
public abstract class System.Windows.Input.Manipulations.ManipulationParameters2D : object {
}
public class System.Windows.Input.Manipulations.ManipulationPivot2D : ManipulationParameters2D {
    public float X { get; public set; }
    public float Y { get; public set; }
    public float Radius { get; public set; }
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public float get_Radius();
    public void set_Radius(float value);
}
public class System.Windows.Input.Manipulations.ManipulationProcessor2D : object {
    public float MinimumScaleRotateRadius { get; public set; }
    public ManipulationPivot2D Pivot { get; public set; }
    public Manipulations2D SupportedManipulations { get; public set; }
    public ManipulationProcessor2D(Manipulations2D supportedManipulations);
    public ManipulationProcessor2D(Manipulations2D supportedManipulations, ManipulationPivot2D pivot);
    public sealed virtual float get_MinimumScaleRotateRadius();
    public void set_MinimumScaleRotateRadius(float value);
    public sealed virtual ManipulationPivot2D get_Pivot();
    public void set_Pivot(ManipulationPivot2D value);
    public sealed virtual Manipulations2D get_SupportedManipulations();
    public void set_SupportedManipulations(Manipulations2D value);
    public void add_Started(EventHandler`1<Manipulation2DStartedEventArgs> value);
    public void remove_Started(EventHandler`1<Manipulation2DStartedEventArgs> value);
    public void add_Delta(EventHandler`1<Manipulation2DDeltaEventArgs> value);
    public void remove_Delta(EventHandler`1<Manipulation2DDeltaEventArgs> value);
    public void add_Completed(EventHandler`1<Manipulation2DCompletedEventArgs> value);
    public void remove_Completed(EventHandler`1<Manipulation2DCompletedEventArgs> value);
    public void ProcessManipulators(long timestamp, IEnumerable`1<Manipulator2D> manipulators);
    public void CompleteManipulation(long timestamp);
    [EditorBrowsableAttribute("1")]
public void SetParameters(ManipulationParameters2D parameters);
}
[FlagsAttribute]
public enum System.Windows.Input.Manipulations.Manipulations2D : Enum {
    public int value__;
    public static Manipulations2D None;
    public static Manipulations2D TranslateX;
    public static Manipulations2D TranslateY;
    public static Manipulations2D Translate;
    public static Manipulations2D Scale;
    public static Manipulations2D Rotate;
    public static Manipulations2D All;
}
public class System.Windows.Input.Manipulations.ManipulationVelocities2D : object {
    public static ManipulationVelocities2D Zero;
    public float LinearVelocityX { get; }
    public float LinearVelocityY { get; }
    public float AngularVelocity { get; }
    public float ExpansionVelocityX { get; }
    public float ExpansionVelocityY { get; }
    private static ManipulationVelocities2D();
    public float get_LinearVelocityX();
    public float get_LinearVelocityY();
    public float get_AngularVelocity();
    public float get_ExpansionVelocityX();
    public float get_ExpansionVelocityY();
}
public class System.Windows.Input.Manipulations.Manipulator2D : ValueType {
    private int id;
    private float x;
    private float y;
    public int Id { get; public set; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public Manipulator2D(int id, float x, float y);
    public static bool op_Equality(Manipulator2D manipulator1, Manipulator2D manipulator2);
    public static bool op_Inequality(Manipulator2D manipulator1, Manipulator2D manipulator2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public int get_Id();
    public void set_Id(int value);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
}
