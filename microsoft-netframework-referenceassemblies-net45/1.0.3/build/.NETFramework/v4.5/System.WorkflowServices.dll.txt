[BuildProviderAppliesToAttribute("7")]
[ServiceActivationBuildProviderAttribute]
internal class System.ServiceModel.Activation.WorkflowServiceBuildProvider : BuildProvider {
    internal static string ruleFileExtension;
    public ICollection VirtualPathDependencies { get; }
    public virtual ICollection get_VirtualPathDependencies();
    public virtual string GetCustomString(CompilerResults results);
    public virtual BuildProviderResultFlags GetResultFlags(CompilerResults results);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public class System.ServiceModel.Activation.WorkflowServiceHostFactory : ServiceHostFactoryBase {
    public virtual ServiceHostBase CreateServiceHost(string constructorString, Uri[] baseAddresses);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public class System.ServiceModel.Activities.Description.WorkflowRuntimeEndpoint : WorkflowHostingEndpoint {
    internal static string ExternalDataExchangeNamespace;
    internal static string RaiseEventAction;
    internal static Binding netNamedPipeContextBinding;
    private static WorkflowRuntimeEndpoint();
    protected virtual Guid OnGetInstanceId(Object[] inputs, OperationContext operationContext);
    protected virtual Bookmark OnResolveBookmark(Object[] inputs, OperationContext operationContext, WorkflowHostingResponseContext responseContext, Object& value);
    public void AddService(object service);
    public void RemoveService(object service);
    public object GetService(Type serviceType);
    public T GetService();
}
internal class System.ServiceModel.Activities.Description.WorkflowRuntimeServicesBehavior : object {
    public void AddService(object service);
    public void RemoveService(object service);
    public object GetService(Type serviceType);
    public T GetService();
    public sealed virtual void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public sealed virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    public sealed virtual void Validate(ServiceEndpoint endpoint);
}
internal class System.ServiceModel.Activities.ExternalDataExchangeClient : ClientBase`1<IExternalDataExchange> {
    public ExternalDataExchangeClient(Binding binding, EndpointAddress address);
    public void RaiseEvent(ExternalDataEventArgs eventArgs, IComparable queueName, object message);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Activities.IExternalDataExchange {
    [OperationContractAttribute]
public abstract virtual void RaiseEvent(EventArgs eventArgs, IComparable queueName, object message);
}
internal class System.ServiceModel.Activities.WorkflowClientDeliverMessageWrapper : object {
    public WorkflowClientDeliverMessageWrapper(string baseUri);
    public sealed virtual Object[] PrepareEventArgsArray(object sender, ExternalDataEventArgs eventArgs, Object& workItem, IPendingWork& workHandler);
    public sealed virtual void DeliverMessage(ExternalDataEventArgs eventArgs, IComparable queueName, object message, object workItem, IPendingWork workHandler);
}
internal class System.ServiceModel.Activities.WorkflowRuntimeServicesExtensionProvider : object {
    public void AddService(object service);
    public void RemoveService(object service);
    public object GetService(Type serviceType);
    public T GetService();
    internal void PopulateExtensions(WorkflowServiceHost host, string baseUri);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
[ConfigurationCollectionAttribute("System.Workflow.Runtime.Configuration.WorkflowRuntimeServiceElement")]
public class System.ServiceModel.Configuration.ExtendedWorkflowRuntimeServiceElementCollection : WorkflowRuntimeServiceElementCollection {
    public void Remove(WorkflowRuntimeServiceElement serviceSettings);
    public void Remove(string key);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public class System.ServiceModel.Configuration.PersistenceProviderElement : BehaviorExtensionElement {
    public Type BehaviorType { get; }
    [PositiveTimeSpanValidatorAttribute]
[ConfigurationPropertyAttribute("persistenceOperationTimeout")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
public TimeSpan PersistenceOperationTimeout { get; public set; }
    public NameValueCollection PersistenceProviderArguments { get; }
    [ConfigurationPropertyAttribute("type")]
[StringValidatorAttribute]
public string Type { get; public set; }
    public virtual Type get_BehaviorType();
    public TimeSpan get_PersistenceOperationTimeout();
    public void set_PersistenceOperationTimeout(TimeSpan value);
    public NameValueCollection get_PersistenceProviderArguments();
    public string get_Type();
    public void set_Type(string value);
    protected internal virtual object CreateBehavior();
    protected virtual bool IsModified();
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    protected virtual void PostDeserialize();
    protected virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
    protected virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public class System.ServiceModel.Configuration.WorkflowRuntimeElement : BehaviorExtensionElement {
    public Type BehaviorType { get; }
    [ConfigurationPropertyAttribute("cachedInstanceExpiration")]
[PositiveTimeSpanValidatorAttribute]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
public TimeSpan CachedInstanceExpiration { get; public set; }
    [ConfigurationPropertyAttribute("commonParameters")]
public NameValueConfigurationCollection CommonParameters { get; }
    [ConfigurationPropertyAttribute("enablePerformanceCounters")]
public bool EnablePerformanceCounters { get; public set; }
    [StringValidatorAttribute]
[ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("services")]
public ExtendedWorkflowRuntimeServiceElementCollection Services { get; }
    [ConfigurationPropertyAttribute("validateOnCreate")]
public bool ValidateOnCreate { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public virtual Type get_BehaviorType();
    public TimeSpan get_CachedInstanceExpiration();
    public void set_CachedInstanceExpiration(TimeSpan value);
    public NameValueConfigurationCollection get_CommonParameters();
    public bool get_EnablePerformanceCounters();
    public void set_EnablePerformanceCounters(bool value);
    public string get_Name();
    public void set_Name(string value);
    public ExtendedWorkflowRuntimeServiceElementCollection get_Services();
    public bool get_ValidateOnCreate();
    public void set_ValidateOnCreate(bool value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual object CreateBehavior();
}
internal class System.ServiceModel.Description.DescriptionCreator : object {
    public DescriptionCreator(WorkflowDefinitionContext workflowDefinitionContext);
    public ServiceDescription BuildServiceDescription(IDictionary`2& implementedContracts, IList`1& reflectedContracts);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
[AttributeUsageAttribute("64")]
public class System.ServiceModel.Description.DurableOperationAttribute : Attribute {
    public bool CanCreateInstance { get; public set; }
    public bool CompletesInstance { get; public set; }
    internal static DurableOperationAttribute DefaultInstance { get; }
    private static DurableOperationAttribute();
    public bool get_CanCreateInstance();
    public void set_CanCreateInstance(bool value);
    public bool get_CompletesInstance();
    public void set_CompletesInstance(bool value);
    internal static DurableOperationAttribute get_DefaultInstance();
    public sealed virtual void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation);
    public sealed virtual void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation);
    private sealed virtual override void System.ServiceModel.Administration.IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance);
    private sealed virtual override string System.ServiceModel.Administration.IWmiInstanceProvider.GetInstanceType();
    public sealed virtual void Validate(OperationDescription operationDescription);
    internal bool CanCreateInstanceForOperation(bool isOneWay);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
[AttributeUsageAttribute("4")]
public class System.ServiceModel.Description.DurableServiceAttribute : Attribute {
    public bool SaveStateInOperationTransaction { get; public set; }
    public UnknownExceptionAction UnknownExceptionAction { get; public set; }
    private static DurableServiceAttribute();
    public bool get_SaveStateInOperationTransaction();
    public void set_SaveStateInOperationTransaction(bool value);
    public UnknownExceptionAction get_UnknownExceptionAction();
    public void set_UnknownExceptionAction(UnknownExceptionAction value);
    public sealed virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    private sealed virtual override void System.ServiceModel.Administration.IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance);
    private sealed virtual override string System.ServiceModel.Administration.IWmiInstanceProvider.GetInstanceType();
    public sealed virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
}
internal interface System.ServiceModel.Description.IServiceDescriptionBuilder {
    public abstract virtual void BuildServiceDescription(ServiceDescriptionContext context);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public class System.ServiceModel.Description.PersistenceProviderBehavior : object {
    internal static string DefaultPersistenceOperationTimeoutString;
    internal static TimeSpan DefaultPersistenceOperationTimeout;
    public TimeSpan PersistenceOperationTimeout { get; public set; }
    public PersistenceProviderFactory PersistenceProviderFactory { get; public set; }
    public PersistenceProviderBehavior(PersistenceProviderFactory providerFactory);
    public PersistenceProviderBehavior(PersistenceProviderFactory providerFactory, TimeSpan persistenceOperationTimeout);
    private static PersistenceProviderBehavior();
    public TimeSpan get_PersistenceOperationTimeout();
    public void set_PersistenceOperationTimeout(TimeSpan value);
    public PersistenceProviderFactory get_PersistenceProviderFactory();
    public void set_PersistenceProviderFactory(PersistenceProviderFactory value);
    public virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    public virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    private sealed virtual override void System.ServiceModel.Administration.IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance);
    private sealed virtual override string System.ServiceModel.Administration.IWmiInstanceProvider.GetInstanceType();
    public virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
}
internal class System.ServiceModel.Description.ServiceDescriptionContext : object {
    public IDictionary`2<string, ContractDescription> Contracts { get; }
    public IList`1<Type> ReflectedContracts { get; }
    public ServiceDescription ServiceDescription { get; public set; }
    internal IDictionary`2<KeyValuePair`2<Type, string>, WorkflowOperationBehavior> WorkflowOperationBehaviors { get; }
    public IDictionary`2<string, ContractDescription> get_Contracts();
    public IList`1<Type> get_ReflectedContracts();
    public ServiceDescription get_ServiceDescription();
    public void set_ServiceDescription(ServiceDescription value);
    internal IDictionary`2<KeyValuePair`2<Type, string>, WorkflowOperationBehavior> get_WorkflowOperationBehaviors();
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public enum System.ServiceModel.Description.UnknownExceptionAction : Enum {
    public int value__;
    public static UnknownExceptionAction TerminateInstance;
    public static UnknownExceptionAction AbortInstance;
}
internal static class System.ServiceModel.Description.UnknownExceptionActionHelper : object {
    public static bool IsDefined(UnknownExceptionAction action);
}
internal class System.ServiceModel.Description.WorkflowOperationBehavior : object {
    public bool CanCreateInstance { get; public set; }
    public ServiceAuthorizationManager ServiceAuthorizationManager { get; public set; }
    public bool get_CanCreateInstance();
    public void set_CanCreateInstance(bool value);
    public ServiceAuthorizationManager get_ServiceAuthorizationManager();
    public void set_ServiceAuthorizationManager(ServiceAuthorizationManager value);
    public sealed virtual void AddBindingParameters(OperationDescription description, BindingParameterCollection parameters);
    public sealed virtual void ApplyClientBehavior(OperationDescription description, ClientOperation proxy);
    public sealed virtual void ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch);
    private sealed virtual override void System.ServiceModel.Administration.IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance);
    private sealed virtual override string System.ServiceModel.Administration.IWmiInstanceProvider.GetInstanceType();
    public sealed virtual void Validate(OperationDescription description);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public class System.ServiceModel.Description.WorkflowRuntimeBehavior : object {
    internal static string DefaultCachedInstanceExpirationString;
    internal static string defaultName;
    internal static bool DefaultValidateOnCreate;
    internal static TimeSpan DefaultCachedInstanceExpiration;
    public TimeSpan CachedInstanceExpiration { get; public set; }
    public WorkflowRuntime WorkflowRuntime { get; }
    internal bool ValidateOnCreate { get; }
    internal WorkflowRuntimeBehavior(WorkflowRuntime workflowRuntime, TimeSpan cachedInstanceExpiration, bool validateOnCreate);
    private static WorkflowRuntimeBehavior();
    public TimeSpan get_CachedInstanceExpiration();
    public void set_CachedInstanceExpiration(TimeSpan value);
    public WorkflowRuntime get_WorkflowRuntime();
    internal bool get_ValidateOnCreate();
    public sealed virtual void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    private sealed virtual override void System.ServiceModel.Administration.IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance);
    private sealed virtual override string System.ServiceModel.Administration.IWmiInstanceProvider.GetInstanceType();
    public sealed virtual void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
}
internal class System.ServiceModel.Description.WorkflowServiceBehavior : object {
    public AddressFilterMode AddressFilterMode { get; public set; }
    public string ConfigurationName { get; public set; }
    public bool IgnoreExtensionDataObject { get; public set; }
    public bool IncludeExceptionDetailInFaults { get; public set; }
    public int MaxItemsInObjectGraph { get; public set; }
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public bool UseSynchronizationContext { get; public set; }
    public bool ValidateMustUnderstand { get; public set; }
    public WorkflowServiceBehavior(Type workflowType);
    public WorkflowServiceBehavior(string workflowDefinitionPath);
    public WorkflowServiceBehavior(string workflowDefinitionPath, string ruleDefinitionPath);
    public WorkflowServiceBehavior(Stream workflowDefinitionStream);
    public WorkflowServiceBehavior(Stream workflowDefinitionStream, Stream ruleDefinitionStream);
    internal WorkflowServiceBehavior(WorkflowDefinitionContext workflowDefinitionContext);
    private static WorkflowServiceBehavior();
    public AddressFilterMode get_AddressFilterMode();
    public void set_AddressFilterMode(AddressFilterMode value);
    public string get_ConfigurationName();
    public void set_ConfigurationName(string value);
    public bool get_IgnoreExtensionDataObject();
    public void set_IgnoreExtensionDataObject(bool value);
    public bool get_IncludeExceptionDetailInFaults();
    public void set_IncludeExceptionDetailInFaults(bool value);
    public int get_MaxItemsInObjectGraph();
    public void set_MaxItemsInObjectGraph(int value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public bool get_UseSynchronizationContext();
    public void set_UseSynchronizationContext(bool value);
    public bool get_ValidateMustUnderstand();
    public void set_ValidateMustUnderstand(bool value);
    public sealed virtual void AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection parameters);
    public sealed virtual void ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase);
    private sealed virtual override void System.ServiceModel.Administration.IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance);
    private sealed virtual override string System.ServiceModel.Administration.IWmiInstanceProvider.GetInstanceType();
    public sealed virtual void Validate(ServiceDescription description, ServiceHostBase serviceHostBase);
    internal static void SetContractFilterToIncludeAllOperations(EndpointDispatcher dispatcher, ContractDescription contract);
}
internal class System.ServiceModel.Dispatcher.DurableDispatcherAddressingFault : MessageFault {
    public FaultCode Code { get; }
    public bool HasDetail { get; }
    public FaultReason Reason { get; }
    public virtual FaultCode get_Code();
    public virtual bool get_HasDetail();
    public virtual FaultReason get_Reason();
    protected virtual void OnWriteDetailContents(XmlDictionaryWriter writer);
}
internal abstract class System.ServiceModel.Dispatcher.DurableErrorHandler : object {
    public DurableErrorHandler(bool debug);
    public static void CleanUpInstanceContextAtOperationCompletion();
    public sealed virtual bool HandleError(Exception error);
    public sealed virtual void ProvideFault(Exception error, MessageVersion version, Message& fault);
    protected virtual Exception GetExceptionToTrace(Exception error);
    protected abstract virtual bool IsUserCodeException(Exception error);
}
internal abstract class System.ServiceModel.Dispatcher.DurableInstance : CommunicationObject {
    public Guid InstanceId { get; }
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    protected DurableInstance(DurableInstanceContextProvider instanceContextProvider, Guid instanceId);
    public Guid get_InstanceId();
    protected virtual TimeSpan get_DefaultCloseTimeout();
    protected virtual TimeSpan get_DefaultOpenTimeout();
    public void DecrementActivityCount();
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.InstanceContext>.Attach(InstanceContext owner);
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.InstanceContext>.Detach(InstanceContext owner);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
}
internal abstract class System.ServiceModel.Dispatcher.DurableInstanceContextProvider : object {
    protected ContextCache Cache { get; }
    protected DurableInstanceContextProvider(ServiceHostBase serviceHostBase, bool isPerCall);
    protected ContextCache get_Cache();
    public virtual InstanceContext GetExistingInstanceContext(Message message, IContextChannel channel);
    public int GetReferenceCount(Guid instanceId);
    public virtual void InitializeInstanceContext(InstanceContext instanceContext, Message message, IContextChannel channel);
    public virtual bool IsIdle(InstanceContext instanceContext);
    public virtual void NotifyIdle(InstanceContextIdleCallback callback, InstanceContext instanceContext);
    internal void DecrementActivityCount(Guid instanceId);
    internal void UnbindAbortedInstance(InstanceContext instanceContext, Guid instanceId);
    protected virtual Guid GetInstanceIdFromMessage(Message message);
    protected abstract virtual DurableInstance OnCreateNewInstance(Guid instanceId);
    protected abstract virtual DurableInstance OnGetExistingInstance(Guid instanceId);
}
internal class System.ServiceModel.Dispatcher.DurableInstanceProvider : object {
    public DurableInstanceProvider(DurableInstanceContextProvider instanceContextProvider);
    public sealed virtual object GetInstance(InstanceContext instanceContext);
    public sealed virtual object GetInstance(InstanceContext instanceContext, Message message);
    public virtual void ReleaseInstance(InstanceContext instanceContext, object instance);
}
internal class System.ServiceModel.Dispatcher.DurableMessageDispatchInspector : object {
    public static string NewDurableInstanceIdPropertyName;
    public DurableMessageDispatchInspector(SessionMode sessionMode);
    public static void SuppressContextOnReply(OperationContext operationContext);
    public sealed virtual object AfterReceiveRequest(Message& request, IClientChannel channel, InstanceContext instanceContext);
    public sealed virtual void BeforeSendReply(Message& reply, object correlationState);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public static class System.ServiceModel.Dispatcher.DurableOperationContext : object {
    public static Guid InstanceId { get; }
    public static Guid get_InstanceId();
    public static void AbortInstance();
    public static void CompleteInstance();
    internal static void BeginOperation();
    internal static void EndOperation();
}
internal class System.ServiceModel.Dispatcher.DurableRuntimeValidator : object {
    public ConcurrencyMode ConcurrencyMode { get; }
    public DurableRuntimeValidator(bool saveStateInOperationTransaction, UnknownExceptionAction exceptionAction);
    public ConcurrencyMode get_ConcurrencyMode();
    public void ValidateRuntime();
}
internal class System.ServiceModel.Dispatcher.ServiceDurableInstance : DurableInstance {
    public object Instance { get; }
    public ServiceDurableInstance(PersistenceProvider persistenceProvider, ServiceDurableInstanceContextProvider contextManager, bool saveStateInOperationTransaction, UnknownExceptionAction unknownExceptionAction, DurableRuntimeValidator runtimeValidator, TimeSpan operationTimeout);
    public ServiceDurableInstance(PersistenceProvider persistenceProvider, ServiceDurableInstanceContextProvider contextManager, bool saveStateInOperationTransaction, UnknownExceptionAction unknownExceptionAction, DurableRuntimeValidator runtimeValidator, TimeSpan operationTimeout, Type serviceType);
    public object get_Instance();
    public void AbortInstance();
    public IAsyncResult BeginFinishOperation(bool completeInstance, bool performPersistence, Exception operationException, AsyncCallback callback, object state);
    public IAsyncResult BeginStartOperation(bool canCreateInstance, AsyncCallback callback, object state);
    public void EndFinishOperation(IAsyncResult result);
    public object EndStartOperation(IAsyncResult result);
    public void FinishOperation(bool completeInstance, bool performPersistence, Exception operationException);
    public void MarkForCompletion();
    public object StartOperation(bool canCreateInstance);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
}
internal class System.ServiceModel.Dispatcher.ServiceDurableInstanceContextProvider : DurableInstanceContextProvider {
    public ServiceDurableInstanceContextProvider(ServiceHostBase serviceHostBase, bool isPercall, Type serviceType, PersistenceProviderFactory providerFactory, bool saveStateInOperationTransaction, UnknownExceptionAction unknownExceptionAction, DurableRuntimeValidator runtimeValidator, TimeSpan operationTimeout);
    protected virtual DurableInstance OnCreateNewInstance(Guid instanceId);
    protected virtual DurableInstance OnGetExistingInstance(Guid instanceId);
}
internal class System.ServiceModel.Dispatcher.ServiceErrorHandler : DurableErrorHandler {
    public ServiceErrorHandler(bool debug);
    public static void MarkException(Exception toMark);
    protected virtual bool IsUserCodeException(Exception error);
}
internal class System.ServiceModel.Dispatcher.ServiceOperationInvoker : object {
    public bool IsSynchronous { get; }
    public ServiceOperationInvoker(IOperationInvoker innerInvoker, bool completesInstance, bool canCreateInstance, bool contractCausesSave);
    public sealed virtual bool get_IsSynchronous();
    public sealed virtual Object[] AllocateInputs();
    public sealed virtual object Invoke(object instance, Object[] inputs, Object[]& outputs);
    public sealed virtual IAsyncResult InvokeBegin(object instance, Object[] inputs, AsyncCallback callback, object state);
    public sealed virtual object InvokeEnd(object instance, Object[]& outputs, IAsyncResult result);
}
internal static class System.ServiceModel.Dispatcher.WellKnownContextProperties : object {
    public static string ConversationId;
    public static string InstanceId;
}
internal class System.ServiceModel.Dispatcher.WorkflowDispatchContext : object {
    public static WorkflowDispatchContext Current { get; }
    public bool IsSynchronous { get; }
    public bool IsWorkflowStarting { get; }
    public WorkflowDispatchContext(bool synchronous);
    public WorkflowDispatchContext(bool synchronous, bool isWorkflowStarting);
    private static WorkflowDispatchContext();
    public static WorkflowDispatchContext get_Current();
    public bool get_IsSynchronous();
    public bool get_IsWorkflowStarting();
    public sealed virtual void Dispose();
}
internal class System.ServiceModel.Dispatcher.WorkflowDurableInstance : DurableInstance {
    public WorkflowOperationAsyncResult CurrentOperationInvocation { get; public set; }
    public WorkflowDurableInstance(WorkflowInstanceContextProvider instanceContextProvider, Guid instanceId, WorkflowDefinitionContext workflowDefinition, bool createNew);
    public WorkflowOperationAsyncResult get_CurrentOperationInvocation();
    public void set_CurrentOperationInvocation(WorkflowOperationAsyncResult value);
    public WorkflowInstance GetWorkflowInstance(bool canCreateInstance);
}
internal class System.ServiceModel.Dispatcher.WorkflowInstanceContextProvider : DurableInstanceContextProvider {
    public WorkflowInstanceLifetimeManagerExtension InstanceLifeTimeManager { get; }
    public WorkflowInstanceContextProvider(ServiceHostBase serviceHostBase, bool isPerCall, WorkflowDefinitionContext workflowDefinitionContext);
    public WorkflowInstanceLifetimeManagerExtension get_InstanceLifeTimeManager();
    public virtual InstanceContext GetExistingInstanceContext(Message message, IContextChannel channel);
    public virtual void InitializeInstanceContext(InstanceContext instanceContext, Message message, IContextChannel channel);
    public virtual bool IsIdle(InstanceContext instanceContext);
    public virtual void NotifyIdle(InstanceContextIdleCallback callback, InstanceContext instanceContext);
    protected virtual DurableInstance OnCreateNewInstance(Guid instanceId);
    protected virtual DurableInstance OnGetExistingInstance(Guid instanceId);
}
internal class System.ServiceModel.Dispatcher.WorkflowInstanceLifetimeManagerExtension : object {
    public WorkflowInstanceLifetimeManagerExtension(WorkflowRuntime workflowRuntime, TimeSpan cachedInstanceExpiration, bool hasPersistenceService);
    public void CleanUp(Guid instanceId);
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Attach(ServiceHostBase owner);
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Detach(ServiceHostBase owner);
    public bool IsInstanceInMemory(Guid instanceId);
    public void NotifyMessageArrived(Guid instanceId);
    public void NotifyWorkflowActivationComplete(Guid instanceId, WaitCallback callback, object state, bool fireImmediatelyIfDontExist);
    public void ScheduleTimer(Guid instanceId);
}
internal class System.ServiceModel.Dispatcher.WorkflowInstanceProvider : DurableInstanceProvider {
    public WorkflowInstanceProvider(WorkflowInstanceContextProvider instanceContextProvider);
    public virtual void ReleaseInstance(InstanceContext instanceContext, object instance);
}
internal class System.ServiceModel.Dispatcher.WorkflowOperationAsyncResult : AsyncResult {
    public long BeginTime { get; }
    public bool HasWorkflowRequestContextBeenSerialized { get; public set; }
    internal string InstanceId { get; }
    public WorkflowOperationAsyncResult(WorkflowOperationInvoker workflowOperationInvoker, WorkflowDurableInstance workflowDurableInstance, Object[] inputs, AsyncCallback callback, object state, long time);
    private static WorkflowOperationAsyncResult();
    public long get_BeginTime();
    [CompilerGeneratedAttribute]
public bool get_HasWorkflowRequestContextBeenSerialized();
    [CompilerGeneratedAttribute]
public void set_HasWorkflowRequestContextBeenSerialized(bool value);
    internal string get_InstanceId();
    public static object End(WorkflowOperationAsyncResult result, Object[]& outputs);
    public void SendFault(Exception exception, IDictionary`2<string, string> contextProperties);
    public void SendResponse(object returnValue, Object[] outputs, IDictionary`2<string, string> contextProperties);
    internal void MarkOneWayOperationCompleted();
}
internal class System.ServiceModel.Dispatcher.WorkflowOperationErrorHandler : DurableErrorHandler {
    public WorkflowOperationErrorHandler(bool includeDebugInfo);
    public static Exception CreateUnhandledException(Exception innerException);
    protected virtual Exception GetExceptionToTrace(Exception error);
    protected virtual bool IsUserCodeException(Exception error);
}
internal class System.ServiceModel.Dispatcher.WorkflowOperationFault : MessageFault {
    public FaultCode Code { get; }
    public bool HasDetail { get; }
    public FaultReason Reason { get; }
    public WorkflowOperationFault(MessageQueueErrorCode errorCode);
    public virtual FaultCode get_Code();
    public virtual bool get_HasDetail();
    public virtual FaultReason get_Reason();
    protected virtual void OnWriteDetailContents(XmlDictionaryWriter writer);
}
internal class System.ServiceModel.Dispatcher.WorkflowOperationInvoker : object {
    public bool CanCreateInstance { get; }
    public DispatchRuntime DispatchRuntime { get; }
    public WorkflowInstanceLifetimeManagerExtension InstanceLifetimeManager { get; }
    public bool IsOneWay { get; }
    public bool IsSynchronous { get; }
    public string StaticQueueName { get; }
    public WorkflowOperationInvoker(OperationDescription operationDescription, WorkflowOperationBehavior workflowOperationBehavior, WorkflowRuntime workflowRuntime, DispatchRuntime dispatchRuntime);
    private static WorkflowOperationInvoker();
    public bool get_CanCreateInstance();
    public DispatchRuntime get_DispatchRuntime();
    public WorkflowInstanceLifetimeManagerExtension get_InstanceLifetimeManager();
    public bool get_IsOneWay();
    public sealed virtual bool get_IsSynchronous();
    public string get_StaticQueueName();
    public sealed virtual Object[] AllocateInputs();
    public sealed virtual object Invoke(object instance, Object[] inputs, Object[]& outputs);
    public sealed virtual IAsyncResult InvokeBegin(object instance, Object[] inputs, AsyncCallback callback, object state);
    public sealed virtual object InvokeEnd(object instance, Object[]& outputs, IAsyncResult result);
}
internal class System.ServiceModel.Dispatcher.WorkflowRequestContext : object {
    public AuthorizationContext AuthorizationContext { get; }
    public IDictionary`2<string, string> ContextProperties { get; }
    public ReadOnlyCollection`1<object> Inputs { get; }
    public WorkflowRequestContext(WorkflowOperationAsyncResult asyncResult, Object[] inputs, IDictionary`2<string, string> contextProperties);
    public AuthorizationContext get_AuthorizationContext();
    public IDictionary`2<string, string> get_ContextProperties();
    public ReadOnlyCollection`1<object> get_Inputs();
    public void PopulateAuthorizationState();
    public void SendFault(Exception exception, IDictionary`2<string, string> outgoingContextProperties);
    public void SendReply(object returnValue, Object[] outputs, IDictionary`2<string, string> outgoingContextProperties);
    public void SetOperationCompleted();
    internal WorkflowOperationAsyncResult GetAsyncResult();
    internal void SetOperationBegin();
}
[CompilerGeneratedAttribute]
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
internal class System.ServiceModel.ImageResources : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static Bitmap Add { get; }
    internal static Bitmap AddContract { get; }
    internal static Bitmap AddOperation { get; }
    internal static Bitmap Arrow { get; }
    internal static Bitmap Check { get; }
    internal static Bitmap Contract { get; }
    internal static Bitmap Delete { get; }
    internal static Bitmap Down { get; }
    internal static Bitmap Import { get; }
    internal static Bitmap ImportedContract { get; }
    internal static Bitmap Operation { get; }
    internal static Bitmap Up { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static Bitmap get_Add();
    internal static Bitmap get_AddContract();
    internal static Bitmap get_AddOperation();
    internal static Bitmap get_Arrow();
    internal static Bitmap get_Check();
    internal static Bitmap get_Contract();
    internal static Bitmap get_Delete();
    internal static Bitmap get_Down();
    internal static Bitmap get_Import();
    internal static Bitmap get_ImportedContract();
    internal static Bitmap get_Operation();
    internal static Bitmap get_Up();
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public class System.ServiceModel.Persistence.InstanceLockException : PersistenceException {
    public Guid InstanceId { get; }
    public InstanceLockException(string message);
    public InstanceLockException(string message, Exception innerException);
    public InstanceLockException(Guid id);
    public InstanceLockException(Guid id, string message);
    public InstanceLockException(Guid id, string message, Exception innerException);
    public InstanceLockException(Guid id, Exception innerException);
    protected InstanceLockException(SerializationInfo info, StreamingContext context);
    public Guid get_InstanceId();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public class System.ServiceModel.Persistence.InstanceNotFoundException : PersistenceException {
    public Guid InstanceId { get; }
    public InstanceNotFoundException(string message);
    public InstanceNotFoundException(string message, Exception innerException);
    public InstanceNotFoundException(Guid id);
    public InstanceNotFoundException(Guid id, string message);
    public InstanceNotFoundException(Guid id, string message, Exception innerException);
    public InstanceNotFoundException(Guid id, Exception innerException);
    protected InstanceNotFoundException(SerializationInfo info, StreamingContext context);
    public Guid get_InstanceId();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public abstract class System.ServiceModel.Persistence.LockingPersistenceProvider : PersistenceProvider {
    protected LockingPersistenceProvider(Guid id);
    public virtual IAsyncResult BeginCreate(object instance, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginCreate(object instance, TimeSpan timeout, bool unlockInstance, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginLoad(TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginLoad(TimeSpan timeout, bool lockInstance, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginLoadIfChanged(TimeSpan timeout, object instanceToken, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginLoadIfChanged(TimeSpan timeout, object instanceToken, bool lockInstance, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginUnlock(TimeSpan timeout, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginUpdate(object instance, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginUpdate(object instance, TimeSpan timeout, bool unlockInstance, AsyncCallback callback, object state);
    public virtual object Create(object instance, TimeSpan timeout);
    public abstract virtual object Create(object instance, TimeSpan timeout, bool unlockInstance);
    public abstract virtual void EndUnlock(IAsyncResult result);
    public virtual object Load(TimeSpan timeout);
    public abstract virtual object Load(TimeSpan timeout, bool lockInstance);
    public virtual bool LoadIfChanged(TimeSpan timeout, object instanceToken, Object& instance);
    public virtual bool LoadIfChanged(TimeSpan timeout, object instanceToken, bool lockInstance, Object& instance);
    public abstract virtual void Unlock(TimeSpan timeout);
    public virtual object Update(object instance, TimeSpan timeout);
    public abstract virtual object Update(object instance, TimeSpan timeout, bool unlockInstance);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public class System.ServiceModel.Persistence.PersistenceException : CommunicationException {
    public PersistenceException(string message);
    public PersistenceException(string message, Exception innerException);
    protected PersistenceException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public abstract class System.ServiceModel.Persistence.PersistenceProvider : CommunicationObject {
    internal static TimeSpan DefaultOpenClosePersistenceTimout;
    public Guid Id { get; }
    protected PersistenceProvider(Guid id);
    private static PersistenceProvider();
    public Guid get_Id();
    public abstract virtual IAsyncResult BeginCreate(object instance, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginDelete(object instance, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginLoad(TimeSpan timeout, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginLoadIfChanged(TimeSpan timeout, object instanceToken, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginUpdate(object instance, TimeSpan timeout, AsyncCallback callback, object state);
    public abstract virtual object Create(object instance, TimeSpan timeout);
    public abstract virtual void Delete(object instance, TimeSpan timeout);
    public abstract virtual object EndCreate(IAsyncResult result);
    public abstract virtual void EndDelete(IAsyncResult result);
    public abstract virtual object EndLoad(IAsyncResult result);
    public virtual bool EndLoadIfChanged(IAsyncResult result, Object& instance);
    public abstract virtual object EndUpdate(IAsyncResult result);
    public abstract virtual object Load(TimeSpan timeout);
    public virtual bool LoadIfChanged(TimeSpan timeout, object instanceToken, Object& instance);
    public abstract virtual object Update(object instance, TimeSpan timeout);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public abstract class System.ServiceModel.Persistence.PersistenceProviderFactory : CommunicationObject {
    public abstract virtual PersistenceProvider CreateProvider(Guid id);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public class System.ServiceModel.Persistence.SqlPersistenceProviderFactory : PersistenceProviderFactory {
    public string ConnectionString { get; public set; }
    public TimeSpan LockTimeout { get; public set; }
    public bool SerializeAsText { get; public set; }
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    public SqlPersistenceProviderFactory(string connectionString);
    public SqlPersistenceProviderFactory(string connectionString, bool serializeAsText);
    public SqlPersistenceProviderFactory(string connectionString, bool serializeAsText, TimeSpan lockTimeout);
    public SqlPersistenceProviderFactory(NameValueCollection parameters);
    private static SqlPersistenceProviderFactory();
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public TimeSpan get_LockTimeout();
    public void set_LockTimeout(TimeSpan value);
    public bool get_SerializeAsText();
    public void set_SerializeAsText(bool value);
    protected virtual TimeSpan get_DefaultCloseTimeout();
    protected virtual TimeSpan get_DefaultOpenTimeout();
    public virtual PersistenceProvider CreateProvider(Guid id);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
}
internal static class System.ServiceModel.QueueNameHelper : object {
    public static string Create(Type contractType, string operationName);
    public static string Create(string typeName, string operationName);
    public static string Create(string partialQueueName, IDictionary`2<string, string> contextProperties);
}
internal class System.ServiceModel.Security.SerializableAuthorizationContext : object {
    private static SerializableAuthorizationContext();
    public static SerializableAuthorizationContext From(AuthorizationContext authorizationContext);
    public AuthorizationContext Retrieve();
}
[DefaultMemberAttribute("Item")]
internal class System.ServiceModel.SerializableReadOnlyDictionary`2 : object {
    public static IDictionary`2<K, V> Empty { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<K> Keys { get; }
    public ICollection`1<V> Values { get; }
    public V Item { get; public set; }
    public SerializableReadOnlyDictionary`2(IDictionary`2<K, V> dictionary);
    public SerializableReadOnlyDictionary`2(IDictionary`2<K, V> dictionary, bool makeCopy);
    public SerializableReadOnlyDictionary`2(KeyValuePair`2[] entries);
    public static IDictionary`2<K, V> get_Empty();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<K> get_Keys();
    public sealed virtual ICollection`1<V> get_Values();
    public sealed virtual V get_Item(K key);
    public sealed virtual void set_Item(K key, V value);
    public sealed virtual void Add(K key, V value);
    public sealed virtual void Add(KeyValuePair`2<K, V> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<K, V> item);
    public sealed virtual bool ContainsKey(K key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<KeyValuePair`2<K, V>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Remove(K key);
    public sealed virtual bool Remove(KeyValuePair`2<K, V> item);
    public sealed virtual bool TryGetValue(K key, V& value);
}
[DebuggerNonUserCodeAttribute]
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[CompilerGeneratedAttribute]
internal class System.ServiceModel.SR2 : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AbortInstanceRequiresSingle { get; }
    internal static string Activity { get; }
    internal static string AddOperationsUsingImportAddButtons { get; }
    internal static string AutoAbortingInactiveInstance { get; }
    internal static string BaseAddressesNotProvided { get; }
    internal static string BrowseType { get; }
    internal static string CanCreateInstanceMustBeTrue { get; }
    internal static string CanCreateInstanceMustBeTwoWay { get; }
    internal static string CannotAbortWithSaveStateInTransaction { get; }
    internal static string CannotAcquireLockDefault { get; }
    internal static string CannotAcquireLockSpecific { get; }
    internal static string CannotResolveConstructorStringToWorkflowType { get; }
    internal static string ChannelToken_EndpointName_Description { get; }
    internal static string ChannelToken_Name_Description { get; }
    internal static string ChannelToken_OwnerActivityName_Description { get; }
    internal static string ChooseAParameterTypeFromBelow { get; }
    internal static string ChooseAServiceContractFromBelow { get; }
    internal static string CommandTimeoutOutOfRange { get; }
    internal static string ConcurrencyMultipleNotSupported { get; }
    internal static string ConcurrencyReentrantAndAbortNotSupported { get; }
    internal static string ConnectionStringNameIncorrect { get; }
    internal static string ConnectionStringNameParameterRequired { get; }
    internal static string ContextToken_Name_Description { get; }
    internal static string ContextToken_OwnerActivityName_Description { get; }
    internal static string ContractNameCannotBeEmpty { get; }
    internal static string ContractNameMustBeUnique { get; }
    internal static string CurrentOperationCannotCreateInstance { get; }
    internal static string DidNotOwnLock { get; }
    internal static string DispatchOperationInInvalidState { get; }
    internal static string DuplicateOfExistingParameter { get; }
    internal static string DurableInstanceRefCountToInstanceContext { get; }
    internal static string DurableOperationMethodInvalid { get; }
    internal static string Error_ArgumentTypeInvalid { get; }
    internal static string Error_ArgumentValueNullOrEmptyString { get; }
    internal static string Error_Cache_InvalidWorkflowId { get; }
    internal static string Error_CannotFindReceiveContext { get; }
    internal static string Error_CannotProvideChannel { get; }
    internal static string Error_CannotProvideChannel_ServiceStopped { get; }
    internal static string Error_ContextOwnerActivityMissing { get; }
    internal static string Error_ContextStackItemMissing { get; }
    internal static string Error_ContextStackMissing { get; }
    internal static string Error_CurrentTypeNotAnArray { get; }
    internal static string Error_DuplicatedOperationName { get; }
    internal static string Error_FailedToRegisterChannel { get; }
    internal static string Error_FailedToValidateActivatingMessage { get; }
    internal static string Error_InputValueUnavailable { get; }
    internal static string Error_InvalidIdleTimeout { get; }
    internal static string Error_InvalidLeaseTimeout { get; }
    internal static string Error_InvalidListItem { get; }
    internal static string Error_InvalidMaxIdleChannelsPerEndpoint { get; }
    internal static string Error_LogicalChannelAlreadyInitialized { get; }
    internal static string Error_MethodInfoNotAvailable { get; }
    internal static string Error_OperationContractAttributeMissing { get; }
    internal static string Error_OperationIsAlreadyAssociatedWithActivity { get; }
    internal static string Error_OperationNameNotSpecified { get; }
    internal static string Error_OperationNotImplemented { get; }
    internal static string Error_OperationNotInContract { get; }
    internal static string Error_OperationNotInitiating { get; }
    internal static string Error_ParameterBindingMissing { get; }
    internal static string Error_QueueNotFound { get; }
    internal static string Error_ReceiveActivityInvalidParameterValue { get; }
    internal static string Error_ReceiveActivityInvalidReturnValue { get; }
    internal static string Error_RequestContextUnavailable { get; }
    internal static string Error_RuntimeNotSupported { get; }
    internal static string Error_ServiceContractAttributeMissing { get; }
    internal static string Error_ServiceOperationInfoNotSpecified { get; }
    internal static string Error_UnexpectedArgumentType { get; }
    internal static string Error_UnknownConfigurationParameter { get; }
    internal static string Error_Validation_AsyncPatternOperationNotSupported { get; }
    internal static string Error_Validation_ChannelTokenConfigurationNameNotSpecified { get; }
    internal static string Error_Validation_ChannelTokenNameNotSpecified { get; }
    internal static string Error_Validation_ChannelTokenNotSpecified { get; }
    internal static string Error_Validation_ContextTokenNameNotSpecified { get; }
    internal static string Error_Validation_ContractNameDuplicate { get; }
    internal static string Error_Validation_ContractNameInvalid { get; }
    internal static string Error_Validation_ContractNameNotSpecified { get; }
    internal static string Error_Validation_ContractTypeNotFound { get; }
    internal static string Error_Validation_ContractTypeNotInterface { get; }
    internal static string Error_Validation_ContractTypeNotSpecified { get; }
    internal static string Error_Validation_InvalidMaxItemsInObjectGraph { get; }
    internal static string Error_Validation_OperationInfoNotSpecified { get; }
    internal static string Error_Validation_OperationIsOneWay { get; }
    internal static string Error_Validation_OperationNameInvalid { get; }
    internal static string Error_Validation_OperationNameNotSpecified { get; }
    internal static string Error_Validation_OperationNotInContract { get; }
    internal static string Error_Validation_OperationParameterDirectionInOneWayOperation { get; }
    internal static string Error_Validation_OperationParameterNameDuplicate { get; }
    internal static string Error_Validation_OperationParameterNameInvalid { get; }
    internal static string Error_Validation_OperationParameterPosition { get; }
    internal static string Error_Validation_OperationParameterPositionDuplicate { get; }
    internal static string Error_Validation_OperationParameterType { get; }
    internal static string Error_Validation_OwnerActivityNameNotFound { get; }
    internal static string Error_Validation_ReturnTypeInOneWayOperation { get; }
    internal static string Error_Validation_RootContextScope { get; }
    internal static string ErrorOpeningSqlPersistenceProvider { get; }
    internal static string ExistingIOperationInvokerRequired { get; }
    internal static string General_MissingService { get; }
    internal static string GeneratedContractNameFormat { get; }
    internal static string GeneratedOperationNameFormat { get; }
    internal static string GeneratedParameterNameBase { get; }
    internal static string Handlers { get; }
    internal static string InsertFailed { get; }
    internal static string InstanceAlreadyExists { get; }
    internal static string InstanceContextModeMustBePerSession { get; }
    internal static string InstanceContextProviderCreatedNewInstance { get; }
    internal static string InstanceNotFoundDefault { get; }
    internal static string InstanceNotFoundForUpdate { get; }
    internal static string InstanceNotFoundSpecific { get; }
    internal static string InvalidCompiledString { get; }
    internal static string InvalidParameterType { get; }
    internal static string InvokeCalledWithWrongType { get; }
    internal static string LockTimeoutOutOfRange { get; }
    internal static string MetadataEndpointCannotBeAdded { get; }
    internal static string NoBehaviors { get; }
    internal static string NoContract { get; }
    internal static string NoEndpoints { get; }
    internal static string NonNullPersistenceProviderRequired { get; }
    internal static string NoOperationContext { get; }
    internal static string NotAnActivityType { get; }
    internal static string NoWorkflowRuntimeBehavior { get; }
    internal static string NoWorkflowServiceBehavior { get; }
    internal static string OnlyCallableFromDurableService { get; }
    internal static string OnlyCallableFromServiceOperation { get; }
    internal static string OnlyCallableWhileInOperation { get; }
    internal static string OperationDescriptionNeedsDeclaringContract { get; }
    internal static string OperationNameCannotBeEmpty { get; }
    internal static string OperationNameMustBeUnique { get; }
    internal static string OperationNotAvailable { get; }
    internal static string OperationNotImplemented { get; }
    internal static string ParameterColumnHeaderDirection { get; }
    internal static string ParameterColumnHeaderName { get; }
    internal static string ParameterColumnHeaderType { get; }
    internal static string ParameterDirectionIn { get; }
    internal static string ParameterDirectionOut { get; }
    internal static string ParameterDirectionRef { get; }
    internal static string ParameterNameCannotBeEmpty { get; }
    internal static string ParameterNameIsInvalid { get; }
    internal static string ParameterTemplateRowName { get; }
    internal static string PersistenceOperationError { get; }
    internal static string PersistenceOperationTimeoutOutOfRange { get; }
    internal static string PersistenceProviderTypeNotFound { get; }
    internal static string ProcessNotExecutingUnderHostedContext { get; }
    internal static string Receive_CanCreateInstance_Description { get; }
    internal static string Receive_ContextToken_Description { get; }
    internal static string Receive_FaultMessage_Description { get; }
    internal static string Receive_OperationInfo_Description { get; }
    internal static string Receive_OperationValidation_Description { get; }
    internal static string ReceiveActivityDescription { get; }
    internal static string ReflectedContractKeyNotFound { get; }
    internal static string ReflectedContractsNotInitialized { get; }
    internal static string RequiredInstanceContextExtensionNotFound { get; }
    internal static string ReturnValueString { get; }
    internal static string SaveStateInTransactionRequiresSingle { get; }
    internal static string SaveStateInTransactionValidationFailed { get; }
    internal static string SecurityCheckFailed { get; }
    internal static string Send_AfterResponse_Description { get; }
    internal static string Send_BeforeSend_Description { get; }
    internal static string Send_ChannelToken_Description { get; }
    internal static string Send_CustomAddress_Description { get; }
    internal static string Send_OperationInfo_Description { get; }
    internal static string SendActivityDescription { get; }
    internal static string SerializationFormatMismatch { get; }
    internal static string SerializedAuthorizationContextVersionUnsupported { get; }
    internal static string ServiceContractAttributeNotFound { get; }
    internal static string ServiceDurableInstanceLoadedDetails { get; }
    internal static string ServiceDurableInstanceSavedDetails { get; }
    internal static string SessionfulContractNotFound { get; }
    internal static string ShowActivitiesWithSameContract { get; }
    internal static string ShowActivitiesWithSameOperation { get; }
    internal static string SqlPersistenceProviderRequiresNonEmptyGuid { get; }
    internal static string SqlPrsistenceProviderOperationAndInstanceId { get; }
    internal static string Standard { get; }
    internal static string UnknownSqlPersistenceConfigurationParameter { get; }
    internal static string UnknownStoredProcResult { get; }
    internal static string UnloadedBeforeResponse { get; }
    internal static string UseRuntimeDefaults { get; }
    internal static string VoidIsNotAValidParameterType { get; }
    internal static string Warning_ReceiveActivityParameterBindingMissing { get; }
    internal static string Warning_ReceiveActivityReturnValueBindingMissing { get; }
    internal static string Warning_SendActivityParameterBindingMissing { get; }
    internal static string WorkflowOperationInvokerItemQueued { get; }
    internal static string WorkflowOperationUnhandledException { get; }
    internal static string WorkflowRuntimeStartedBeforeHostOpen { get; }
    internal static string WorkflowServiceHostFactoryConstructorStringNotProvided { get; }
    internal static string WorkflowServiceUnloadedWithoutSendingResponse { get; }
    internal static string WorkflowValidationFailed { get; }
    internal static string WrongSchedulerServiceRegistered { get; }
    internal static string XomlWorkflowHasClassName { get; }
    internal static string XomlWorkflowHasCode { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AbortInstanceRequiresSingle();
    internal static string get_Activity();
    internal static string get_AddOperationsUsingImportAddButtons();
    internal static string get_AutoAbortingInactiveInstance();
    internal static string get_BaseAddressesNotProvided();
    internal static string get_BrowseType();
    internal static string get_CanCreateInstanceMustBeTrue();
    internal static string get_CanCreateInstanceMustBeTwoWay();
    internal static string get_CannotAbortWithSaveStateInTransaction();
    internal static string get_CannotAcquireLockDefault();
    internal static string get_CannotAcquireLockSpecific();
    internal static string get_CannotResolveConstructorStringToWorkflowType();
    internal static string get_ChannelToken_EndpointName_Description();
    internal static string get_ChannelToken_Name_Description();
    internal static string get_ChannelToken_OwnerActivityName_Description();
    internal static string get_ChooseAParameterTypeFromBelow();
    internal static string get_ChooseAServiceContractFromBelow();
    internal static string get_CommandTimeoutOutOfRange();
    internal static string get_ConcurrencyMultipleNotSupported();
    internal static string get_ConcurrencyReentrantAndAbortNotSupported();
    internal static string get_ConnectionStringNameIncorrect();
    internal static string get_ConnectionStringNameParameterRequired();
    internal static string get_ContextToken_Name_Description();
    internal static string get_ContextToken_OwnerActivityName_Description();
    internal static string get_ContractNameCannotBeEmpty();
    internal static string get_ContractNameMustBeUnique();
    internal static string get_CurrentOperationCannotCreateInstance();
    internal static string get_DidNotOwnLock();
    internal static string get_DispatchOperationInInvalidState();
    internal static string get_DuplicateOfExistingParameter();
    internal static string get_DurableInstanceRefCountToInstanceContext();
    internal static string get_DurableOperationMethodInvalid();
    internal static string get_Error_ArgumentTypeInvalid();
    internal static string get_Error_ArgumentValueNullOrEmptyString();
    internal static string get_Error_Cache_InvalidWorkflowId();
    internal static string get_Error_CannotFindReceiveContext();
    internal static string get_Error_CannotProvideChannel();
    internal static string get_Error_CannotProvideChannel_ServiceStopped();
    internal static string get_Error_ContextOwnerActivityMissing();
    internal static string get_Error_ContextStackItemMissing();
    internal static string get_Error_ContextStackMissing();
    internal static string get_Error_CurrentTypeNotAnArray();
    internal static string get_Error_DuplicatedOperationName();
    internal static string get_Error_FailedToRegisterChannel();
    internal static string get_Error_FailedToValidateActivatingMessage();
    internal static string get_Error_InputValueUnavailable();
    internal static string get_Error_InvalidIdleTimeout();
    internal static string get_Error_InvalidLeaseTimeout();
    internal static string get_Error_InvalidListItem();
    internal static string get_Error_InvalidMaxIdleChannelsPerEndpoint();
    internal static string get_Error_LogicalChannelAlreadyInitialized();
    internal static string get_Error_MethodInfoNotAvailable();
    internal static string get_Error_OperationContractAttributeMissing();
    internal static string get_Error_OperationIsAlreadyAssociatedWithActivity();
    internal static string get_Error_OperationNameNotSpecified();
    internal static string get_Error_OperationNotImplemented();
    internal static string get_Error_OperationNotInContract();
    internal static string get_Error_OperationNotInitiating();
    internal static string get_Error_ParameterBindingMissing();
    internal static string get_Error_QueueNotFound();
    internal static string get_Error_ReceiveActivityInvalidParameterValue();
    internal static string get_Error_ReceiveActivityInvalidReturnValue();
    internal static string get_Error_RequestContextUnavailable();
    internal static string get_Error_RuntimeNotSupported();
    internal static string get_Error_ServiceContractAttributeMissing();
    internal static string get_Error_ServiceOperationInfoNotSpecified();
    internal static string get_Error_UnexpectedArgumentType();
    internal static string get_Error_UnknownConfigurationParameter();
    internal static string get_Error_Validation_AsyncPatternOperationNotSupported();
    internal static string get_Error_Validation_ChannelTokenConfigurationNameNotSpecified();
    internal static string get_Error_Validation_ChannelTokenNameNotSpecified();
    internal static string get_Error_Validation_ChannelTokenNotSpecified();
    internal static string get_Error_Validation_ContextTokenNameNotSpecified();
    internal static string get_Error_Validation_ContractNameDuplicate();
    internal static string get_Error_Validation_ContractNameInvalid();
    internal static string get_Error_Validation_ContractNameNotSpecified();
    internal static string get_Error_Validation_ContractTypeNotFound();
    internal static string get_Error_Validation_ContractTypeNotInterface();
    internal static string get_Error_Validation_ContractTypeNotSpecified();
    internal static string get_Error_Validation_InvalidMaxItemsInObjectGraph();
    internal static string get_Error_Validation_OperationInfoNotSpecified();
    internal static string get_Error_Validation_OperationIsOneWay();
    internal static string get_Error_Validation_OperationNameInvalid();
    internal static string get_Error_Validation_OperationNameNotSpecified();
    internal static string get_Error_Validation_OperationNotInContract();
    internal static string get_Error_Validation_OperationParameterDirectionInOneWayOperation();
    internal static string get_Error_Validation_OperationParameterNameDuplicate();
    internal static string get_Error_Validation_OperationParameterNameInvalid();
    internal static string get_Error_Validation_OperationParameterPosition();
    internal static string get_Error_Validation_OperationParameterPositionDuplicate();
    internal static string get_Error_Validation_OperationParameterType();
    internal static string get_Error_Validation_OwnerActivityNameNotFound();
    internal static string get_Error_Validation_ReturnTypeInOneWayOperation();
    internal static string get_Error_Validation_RootContextScope();
    internal static string get_ErrorOpeningSqlPersistenceProvider();
    internal static string get_ExistingIOperationInvokerRequired();
    internal static string get_General_MissingService();
    internal static string get_GeneratedContractNameFormat();
    internal static string get_GeneratedOperationNameFormat();
    internal static string get_GeneratedParameterNameBase();
    internal static string get_Handlers();
    internal static string get_InsertFailed();
    internal static string get_InstanceAlreadyExists();
    internal static string get_InstanceContextModeMustBePerSession();
    internal static string get_InstanceContextProviderCreatedNewInstance();
    internal static string get_InstanceNotFoundDefault();
    internal static string get_InstanceNotFoundForUpdate();
    internal static string get_InstanceNotFoundSpecific();
    internal static string get_InvalidCompiledString();
    internal static string get_InvalidParameterType();
    internal static string get_InvokeCalledWithWrongType();
    internal static string get_LockTimeoutOutOfRange();
    internal static string get_MetadataEndpointCannotBeAdded();
    internal static string get_NoBehaviors();
    internal static string get_NoContract();
    internal static string get_NoEndpoints();
    internal static string get_NonNullPersistenceProviderRequired();
    internal static string get_NoOperationContext();
    internal static string get_NotAnActivityType();
    internal static string get_NoWorkflowRuntimeBehavior();
    internal static string get_NoWorkflowServiceBehavior();
    internal static string get_OnlyCallableFromDurableService();
    internal static string get_OnlyCallableFromServiceOperation();
    internal static string get_OnlyCallableWhileInOperation();
    internal static string get_OperationDescriptionNeedsDeclaringContract();
    internal static string get_OperationNameCannotBeEmpty();
    internal static string get_OperationNameMustBeUnique();
    internal static string get_OperationNotAvailable();
    internal static string get_OperationNotImplemented();
    internal static string get_ParameterColumnHeaderDirection();
    internal static string get_ParameterColumnHeaderName();
    internal static string get_ParameterColumnHeaderType();
    internal static string get_ParameterDirectionIn();
    internal static string get_ParameterDirectionOut();
    internal static string get_ParameterDirectionRef();
    internal static string get_ParameterNameCannotBeEmpty();
    internal static string get_ParameterNameIsInvalid();
    internal static string get_ParameterTemplateRowName();
    internal static string get_PersistenceOperationError();
    internal static string get_PersistenceOperationTimeoutOutOfRange();
    internal static string get_PersistenceProviderTypeNotFound();
    internal static string get_ProcessNotExecutingUnderHostedContext();
    internal static string get_Receive_CanCreateInstance_Description();
    internal static string get_Receive_ContextToken_Description();
    internal static string get_Receive_FaultMessage_Description();
    internal static string get_Receive_OperationInfo_Description();
    internal static string get_Receive_OperationValidation_Description();
    internal static string get_ReceiveActivityDescription();
    internal static string get_ReflectedContractKeyNotFound();
    internal static string get_ReflectedContractsNotInitialized();
    internal static string get_RequiredInstanceContextExtensionNotFound();
    internal static string get_ReturnValueString();
    internal static string get_SaveStateInTransactionRequiresSingle();
    internal static string get_SaveStateInTransactionValidationFailed();
    internal static string get_SecurityCheckFailed();
    internal static string get_Send_AfterResponse_Description();
    internal static string get_Send_BeforeSend_Description();
    internal static string get_Send_ChannelToken_Description();
    internal static string get_Send_CustomAddress_Description();
    internal static string get_Send_OperationInfo_Description();
    internal static string get_SendActivityDescription();
    internal static string get_SerializationFormatMismatch();
    internal static string get_SerializedAuthorizationContextVersionUnsupported();
    internal static string get_ServiceContractAttributeNotFound();
    internal static string get_ServiceDurableInstanceLoadedDetails();
    internal static string get_ServiceDurableInstanceSavedDetails();
    internal static string get_SessionfulContractNotFound();
    internal static string get_ShowActivitiesWithSameContract();
    internal static string get_ShowActivitiesWithSameOperation();
    internal static string get_SqlPersistenceProviderRequiresNonEmptyGuid();
    internal static string get_SqlPrsistenceProviderOperationAndInstanceId();
    internal static string get_Standard();
    internal static string get_UnknownSqlPersistenceConfigurationParameter();
    internal static string get_UnknownStoredProcResult();
    internal static string get_UnloadedBeforeResponse();
    internal static string get_UseRuntimeDefaults();
    internal static string get_VoidIsNotAValidParameterType();
    internal static string get_Warning_ReceiveActivityParameterBindingMissing();
    internal static string get_Warning_ReceiveActivityReturnValueBindingMissing();
    internal static string get_Warning_SendActivityParameterBindingMissing();
    internal static string get_WorkflowOperationInvokerItemQueued();
    internal static string get_WorkflowOperationUnhandledException();
    internal static string get_WorkflowRuntimeStartedBeforeHostOpen();
    internal static string get_WorkflowServiceHostFactoryConstructorStringNotProvided();
    internal static string get_WorkflowServiceUnloadedWithoutSendingResponse();
    internal static string get_WorkflowValidationFailed();
    internal static string get_WrongSchedulerServiceRegistered();
    internal static string get_XomlWorkflowHasClassName();
    internal static string get_XomlWorkflowHasCode();
    internal static string GetString(string name, Object[] args);
    internal static string GetString(CultureInfo culture, string name, Object[] args);
}
[AttributeUsageAttribute("32767")]
internal class System.ServiceModel.SR2CategoryAttribute : CategoryAttribute {
    internal static string Activity;
    internal static string Standard;
    internal static string Handlers;
    public SR2CategoryAttribute(string category);
    public SR2CategoryAttribute(string category, string resourceSet);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.ServiceModel.SR2DescriptionAttribute : DescriptionAttribute {
    internal static string SendActivityDescription;
    internal static string ReceiveActivityDescription;
    internal static string Receive_OperationValidation_Description;
    internal static string Receive_CanCreateInstance_Description;
    internal static string Receive_ContextToken_Description;
    internal static string Receive_FaultMessage_Description;
    internal static string Receive_OperationInfo_Description;
    internal static string Send_AfterResponse_Description;
    internal static string Send_BeforeSend_Description;
    internal static string Send_ChannelToken_Description;
    internal static string Send_CustomAddress_Description;
    internal static string Send_OperationInfo_Description;
    internal static string ContextToken_Name_Description;
    internal static string ContextToken_OwnerActivityName_Description;
    internal static string ChannelToken_EndpointName_Description;
    internal static string ChannelToken_Name_Description;
    internal static string ChannelToken_OwnerActivityName_Description;
    public SR2DescriptionAttribute(string description);
    public SR2DescriptionAttribute(string description, string resourceSet);
}
[ObsoleteAttribute("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]
public class System.ServiceModel.WorkflowServiceHost : ServiceHostBase {
    public WorkflowServiceHost(Type workflowType, Uri[] baseAddress);
    public WorkflowServiceHost(string workflowDefinitionPath, Uri[] baseAddress);
    public WorkflowServiceHost(string workflowDefinitionPath, string ruleDefinitionPath, Uri[] baseAddress);
    public WorkflowServiceHost(string workflowDefinitionPath, string ruleDefinitionPath, ITypeProvider typeProvider, Uri[] baseAddress);
    public WorkflowServiceHost(Stream workflowDefinition, Uri[] baseAddress);
    public WorkflowServiceHost(Stream workflowDefinition, Stream ruleDefinition, Uri[] baseAddress);
    public WorkflowServiceHost(Stream workflowDefinition, Stream ruleDefinition, ITypeProvider typeProvider, Uri[] baseAddress);
    internal WorkflowServiceHost(WorkflowDefinitionContext workflowDefinitionContext, Uri[] baseAddress);
    public ServiceEndpoint AddServiceEndpoint(Type implementedContract, Binding binding, string address);
    public ServiceEndpoint AddServiceEndpoint(Type implementedContract, Binding binding, Uri address);
    public ServiceEndpoint AddServiceEndpoint(Type implementedContract, Binding binding, string address, Uri listenUri);
    public ServiceEndpoint AddServiceEndpoint(Type implementedContract, Binding binding, Uri address, Uri listenUri);
    protected virtual ServiceDescription CreateDescription(IDictionary`2& implementedContracts);
    protected virtual void OnClosing();
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
[TypeConverterAttribute("System.Workflow.Activities.ChannelTokenTypeConverter")]
public class System.Workflow.Activities.ChannelToken : DependencyObject {
    internal static DependencyProperty EndpointNameProperty;
    internal static DependencyProperty NameProperty;
    internal static DependencyProperty OwnerActivityNameProperty;
    [SR2DescriptionAttribute("ChannelToken_EndpointName_Description")]
[DefaultValueAttribute("")]
public string EndpointName { get; public set; }
    [SR2DescriptionAttribute("ChannelToken_Name_Description")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
public string Name { get; public set; }
    [DefaultValueAttribute("")]
[SR2DescriptionAttribute("ChannelToken_OwnerActivityName_Description")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.PropertyValueProviderTypeConverter")]
public string OwnerActivityName { get; public set; }
    internal ChannelToken(string name);
    private static ChannelToken();
    public string get_EndpointName();
    public void set_EndpointName(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_OwnerActivityName();
    public void set_OwnerActivityName(string value);
    private sealed virtual override ICollection System.Workflow.ComponentModel.Design.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
    internal static LogicalChannel GetLogicalChannel(Activity activity, ChannelToken endpoint, Type contractType);
    internal static LogicalChannel GetLogicalChannel(Activity activity, string name, string ownerActivityName, Type contractType);
    internal static LogicalChannel Register(Activity activity, ChannelToken endpoint, Type contractType);
}
internal class System.Workflow.Activities.ChannelTokenTypeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
public class System.Workflow.Activities.ContextToken : DependencyObject {
    public static string RootContextName;
    internal static DependencyProperty NameProperty;
    internal static DependencyProperty OwnerActivityNameProperty;
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[SR2DescriptionAttribute("ContextToken_Name_Description")]
public string Name { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Workflow.ComponentModel.Design.PropertyValueProviderTypeConverter")]
[SR2DescriptionAttribute("ContextToken_OwnerActivityName_Description")]
public string OwnerActivityName { get; public set; }
    internal bool IsRootContext { get; }
    public ContextToken(string name);
    private static ContextToken();
    public string get_Name();
    public void set_Name(string value);
    public string get_OwnerActivityName();
    public void set_OwnerActivityName(string value);
    internal bool get_IsRootContext();
    private sealed virtual override ICollection System.Workflow.ComponentModel.Design.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
    internal static ReceiveContext GetReceiveContext(Activity activity, string contextName, string ownerActivityName);
    internal static ReceiveContext GetRootReceiveContext(Activity activity);
    internal static void Register(ReceiveActivity activity, Guid workflowId);
}
internal class System.Workflow.Activities.ContextTokenTypeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal class System.Workflow.Activities.ContractMethodInfo : MethodInfo {
    public MethodAttributes Attributes { get; }
    public Type DeclaringType { get; }
    public RuntimeMethodHandle MethodHandle { get; }
    public string Name { get; }
    public Type ReflectedType { get; }
    public ParameterInfo ReturnParameter { get; }
    public Type ReturnType { get; }
    public ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    internal ContractMethodInfo(ContractType declaringType, OperationInfo operationInfo);
    public virtual MethodAttributes get_Attributes();
    public virtual Type get_DeclaringType();
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual string get_Name();
    public virtual Type get_ReflectedType();
    public virtual ParameterInfo get_ReturnParameter();
    public virtual Type get_ReturnType();
    public virtual ICustomAttributeProvider get_ReturnTypeCustomAttributes();
    public virtual MethodInfo GetBaseDefinition();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual ParameterInfo[] GetParameters();
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual string ToString();
}
internal class System.Workflow.Activities.ContractMethodParameterInfo : ParameterInfo {
    internal ContractMethodParameterInfo(ContractMethodInfo member, OperationParameterInfo parameterInfo);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
internal class System.Workflow.Activities.ContractType : Type {
    public Assembly Assembly { get; }
    public string AssemblyQualifiedName { get; }
    public Type BaseType { get; }
    public Type DeclaringType { get; }
    public string FullName { get; }
    public Guid GUID { get; }
    public Module Module { get; }
    public string Name { get; }
    public string Namespace { get; }
    public RuntimeTypeHandle TypeHandle { get; }
    public Type UnderlyingSystemType { get; }
    internal ContractType(string name);
    private static ContractType();
    public virtual Assembly get_Assembly();
    public virtual string get_AssemblyQualifiedName();
    public virtual Type get_BaseType();
    public virtual Type get_DeclaringType();
    public virtual string get_FullName();
    public virtual Guid get_GUID();
    public virtual Module get_Module();
    public virtual string get_Name();
    public virtual string get_Namespace();
    public virtual RuntimeTypeHandle get_TypeHandle();
    public virtual Type get_UnderlyingSystemType();
    public sealed virtual object Clone();
    public virtual bool Equals(object obj);
    public virtual int GetArrayRank();
    public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual MemberInfo[] GetDefaultMembers();
    public virtual Type GetElementType();
    public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr);
    public virtual EventInfo[] GetEvents(BindingFlags bindingAttr);
    public virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public virtual int GetHashCode();
    public virtual Type GetInterface(string name, bool ignoreCase);
    public virtual Type[] GetInterfaces();
    public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr);
    public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    public virtual Type GetNestedType(string name, BindingFlags bindingAttr);
    public virtual Type[] GetNestedTypes(BindingFlags bindingAttr);
    public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    public virtual object InvokeMember(string name, BindingFlags bindingFlags, Binder binder, object target, Object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParams);
    public virtual bool IsAssignableFrom(Type type);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual bool IsSubclassOf(Type type);
    public virtual Type MakeByRefType();
    public virtual string ToString();
    internal void AddMethod(ContractMethodInfo methodInfo);
    protected virtual TypeAttributes GetAttributeFlagsImpl();
    protected virtual ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    protected virtual MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);
    protected virtual PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    protected virtual bool HasElementTypeImpl();
    protected virtual bool IsArrayImpl();
    protected virtual bool IsByRefImpl();
    protected virtual bool IsCOMObjectImpl();
    protected virtual bool IsContextfulImpl();
    protected virtual bool IsMarshalByRefImpl();
    protected virtual bool IsPointerImpl();
    protected virtual bool IsPrimitiveImpl();
}
internal class System.Workflow.Activities.Design.EditableLabelControl : Panel {
    public TextBox TextBox;
    public Font Font { get; public set; }
    public Color ForeColor { get; public set; }
    public string Text { get; public set; }
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
}
internal class System.Workflow.Activities.Design.GradientPanel : Panel {
    protected Rectangle frameRect;
    public Color BaseColor { get; public set; }
    public Color BorderColor { get; public set; }
    public bool DropShadow { get; public set; }
    public bool Glossy { get; public set; }
    public Color LightingColor { get; public set; }
    public int Radius { get; public set; }
    public Color get_BaseColor();
    public void set_BaseColor(Color value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public bool get_DropShadow();
    public void set_DropShadow(bool value);
    public bool get_Glossy();
    public void set_Glossy(bool value);
    public Color get_LightingColor();
    public void set_LightingColor(Color value);
    public int get_Radius();
    public void set_Radius(int value);
    protected virtual void OnPaint(PaintEventArgs e);
}
[AttributeUsageAttribute("32767")]
internal class System.Workflow.Activities.Design.ListItemDetailViewAttribute : Attribute {
    public Type ViewType { get; public set; }
    public ListItemDetailViewAttribute(Type viewType);
    public Type get_ViewType();
    public void set_ViewType(Type value);
}
[AttributeUsageAttribute("32767")]
internal class System.Workflow.Activities.Design.ListItemViewAttribute : Attribute {
    public Type ViewType { get; public set; }
    public ListItemViewAttribute(Type viewType);
    public Type get_ViewType();
    public void set_ViewType(Type value);
}
internal class System.Workflow.Activities.Design.ListItemViewControl : UserControl {
    public DrawItemState DrawItemState { get; public set; }
    public object Item { get; public set; }
    public IServiceProvider ServiceProvider { get; public set; }
    public virtual void add_ItemChanged(EventHandler value);
    public virtual void remove_ItemChanged(EventHandler value);
    public virtual DrawItemState get_DrawItemState();
    public virtual void set_DrawItemState(DrawItemState value);
    public virtual object get_Item();
    public virtual void set_Item(object value);
    public IServiceProvider get_ServiceProvider();
    public void set_ServiceProvider(IServiceProvider value);
    public virtual void UpdateView();
}
internal abstract class System.Workflow.Activities.Design.NamedObjectList`1 : List`1<T> {
    protected string GeneratedNameFormatResource { get; }
    protected abstract virtual string get_GeneratedNameFormatResource();
    public T CreateWithUniqueName();
    public T Find(string name);
    protected abstract virtual T CreateObject(string name);
    protected abstract virtual string GetName(T obj);
}
internal class System.Workflow.Activities.Design.OperationPickerDialog : Form {
    public OperationInfoBase SelectedOperation { get; internal set; }
    public OperationPickerDialog(IServiceProvider serviceProvider, bool allowNewContracts);
    public OperationInfoBase get_SelectedOperation();
    internal void set_SelectedOperation(OperationInfoBase value);
    public void AddServiceOperation(OperationInfoBase operationInfo, Activity implementingActivity);
    protected virtual void OnHelpButtonClicked(CancelEventArgs e);
    protected virtual void OnHelpRequested(HelpEventArgs e);
    protected virtual void Dispose(bool disposing);
}
internal class System.Workflow.Activities.Design.RichListBox : ListBox {
    public bool Editable { get; public set; }
    public ListItemViewControl SelectedItemViewControl { get; public set; }
    unknown IServiceProvider ServiceProvider {public set; }
    public bool get_Editable();
    public void set_Editable(bool value);
    public ListItemViewControl get_SelectedItemViewControl();
    public void set_SelectedItemViewControl(ListItemViewControl value);
    public void set_ServiceProvider(IServiceProvider value);
    public static Type GetDetailViewType(Type editableListItemType);
    public static Type GetItemViewType(Type editableListItemType);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnMeasureItem(MeasureItemEventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
}
internal class System.Workflow.Activities.Design.ServiceContractDetailViewControl : ListItemViewControl {
    public virtual void add_ItemChanged(EventHandler value);
    public virtual void remove_ItemChanged(EventHandler value);
    public virtual void UpdateView();
    protected virtual void Dispose(bool disposing);
}
[ListItemViewAttribute("System.Workflow.Activities.Design.ServiceContractViewControl")]
[ListItemDetailViewAttribute("System.Workflow.Activities.Design.ServiceContractDetailViewControl")]
internal class System.Workflow.Activities.Design.ServiceContractListItem : object {
    public CancelEventHandler Validating;
    public Type ContractType { get; public set; }
    public bool IsCustomContract { get; public set; }
    public string Name { get; public set; }
    public IEnumerable`1<ServiceOperationListItem> Operations { get; }
    public ServiceContractListItem(ListBox container);
    public Type get_ContractType();
    public void set_ContractType(Type value);
    public bool get_IsCustomContract();
    public void set_IsCustomContract(bool value);
    public string get_Name();
    public void set_Name(string value);
    public IEnumerable`1<ServiceOperationListItem> get_Operations();
    public void AddOperation(ServiceOperationListItem operation);
    public WorkflowServiceOperationListItem CreateOperation();
    public ServiceOperationListItem Find(string operationName);
    public void SelectionOperation(ServiceOperationListItem operation);
    public virtual string ToString();
}
internal class System.Workflow.Activities.Design.ServiceContractListItemList : NamedObjectList`1<ServiceContractListItem> {
    protected string GeneratedNameFormatResource { get; }
    public ServiceContractListItemList(ListBox container);
    protected virtual string get_GeneratedNameFormatResource();
    protected virtual ServiceContractListItem CreateObject(string name);
    protected virtual string GetName(ServiceContractListItem obj);
}
internal class System.Workflow.Activities.Design.ServiceContractViewControl : ListItemViewControl {
    unknown object Item {public set; }
    public virtual void set_Item(object value);
    public virtual void UpdateView();
    protected virtual void Dispose(bool disposing);
}
internal class System.Workflow.Activities.Design.ServiceOperationDetailViewControl : ListItemViewControl {
    private static ServiceOperationDetailViewControl();
    public virtual void add_ItemChanged(EventHandler value);
    public virtual void remove_ItemChanged(EventHandler value);
    public virtual void UpdateView();
    internal static string GetTypeSignature(Type type);
    protected virtual void OnLoad(EventArgs e);
    protected virtual void Dispose(bool disposing);
}
[ListItemDetailViewAttribute("System.Workflow.Activities.Design.ListItemViewControl")]
[ListItemViewAttribute("System.Workflow.Activities.Design.ServiceOperationViewControl")]
internal abstract class System.Workflow.Activities.Design.ServiceOperationListItem : object {
    public CancelEventHandler Validating;
    public string ContractName { get; }
    public List`1<Activity> ImplementingActivities { get; }
    public string Name { get; public set; }
    public virtual string get_ContractName();
    public List`1<Activity> get_ImplementingActivities();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
}
internal class System.Workflow.Activities.Design.ServiceOperationListItemList : NamedObjectList`1<ServiceOperationListItem> {
    protected string GeneratedNameFormatResource { get; }
    protected virtual string get_GeneratedNameFormatResource();
    protected virtual ServiceOperationListItem CreateObject(string name);
    protected virtual string GetName(ServiceOperationListItem obj);
}
internal class System.Workflow.Activities.Design.ServiceOperationUIEditor : UITypeEditor {
    public static bool TryPickOperation(IServiceProvider serviceProvider, Activity activity, OperationInfoBase currentOperation, OperationInfoBase& selectedOperation);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
internal class System.Workflow.Activities.Design.ServiceOperationViewControl : ListItemViewControl {
    public object Item { get; public set; }
    public virtual object get_Item();
    public virtual void set_Item(object value);
    public virtual void UpdateView();
    protected virtual void Dispose(bool disposing);
}
[ListItemViewAttribute("System.Workflow.Activities.Design.ServiceOperationViewControl")]
[ListItemDetailViewAttribute("System.Workflow.Activities.Design.ServiceOperationDetailViewControl")]
internal class System.Workflow.Activities.Design.TypedServiceOperationListItem : ServiceOperationListItem {
    public string ContractName { get; }
    public string Name { get; public set; }
    public TypedOperationInfo Operation { get; public set; }
    public virtual string get_ContractName();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public TypedOperationInfo get_Operation();
    public void set_Operation(TypedOperationInfo value);
    public virtual string ToString();
}
[ListItemViewAttribute("System.Workflow.Activities.Design.ServiceOperationViewControl")]
[ListItemDetailViewAttribute("System.Workflow.Activities.Design.ServiceOperationDetailViewControl")]
internal class System.Workflow.Activities.Design.WorkflowServiceOperationListItem : ServiceOperationListItem {
    public string ContractName { get; }
    public string Name { get; public set; }
    public OperationInfo Operation { get; public set; }
    public virtual string get_ContractName();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public OperationInfo get_Operation();
    public void set_Operation(OperationInfo value);
}
internal static class System.Workflow.Activities.DynamicContractTypeBuilder : object {
    internal static DependencyProperty DynamicContractTypesProperty;
    private static DynamicContractTypeBuilder();
    public static Type GetContractType(OperationInfo operationInfo, ReceiveActivity contextActivity);
}
internal class System.Workflow.Activities.LogicalChannel : object {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string ConfigurationName { get; }
    [BrowsableAttribute("False")]
public IDictionary`2<string, string> Context { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public Type ContractType { get; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
public string CustomAddress { get; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
public bool Initialized { get; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
public string Name { get; }
    internal Guid InstanceId { get; }
    public LogicalChannel(string name, Type contractType);
    public string get_ConfigurationName();
    public IDictionary`2<string, string> get_Context();
    public void set_Context(IDictionary`2<string, string> value);
    public Type get_ContractType();
    public string get_CustomAddress();
    public bool get_Initialized();
    public string get_Name();
    internal Guid get_InstanceId();
    public void Initialize(string configurationName, string customAddress);
}
internal class System.Workflow.Activities.LogicalChannelCollection : KeyedCollection`2<string, LogicalChannel> {
    public static DependencyProperty LogicalChannelCollectionProperty;
    private static LogicalChannelCollection();
    public LogicalChannel GetItem(string key);
    protected virtual void ClearItems();
    protected virtual string GetKeyForItem(LogicalChannel item);
    protected virtual void InsertItem(int index, LogicalChannel item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, LogicalChannel item);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.OperationInfo : OperationInfoBase {
    internal static DependencyProperty ContractNameProperty;
    internal static DependencyProperty IsOneWayProperty;
    internal static DependencyProperty ParametersProperty;
    internal static DependencyProperty ProtectionLevelProperty;
    public string ContractName { get; public set; }
    [DefaultValueAttribute("False")]
public bool HasProtectionLevel { get; }
    [DefaultValueAttribute("False")]
public bool IsOneWay { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public OperationParameterInfoCollection Parameters { get; }
    [DefaultValueAttribute("")]
public Nullable`1<ProtectionLevel> ProtectionLevel { get; public set; }
    private static OperationInfo();
    public string get_ContractName();
    public void set_ContractName(string value);
    public bool get_HasProtectionLevel();
    public bool get_IsOneWay();
    public void set_IsOneWay(bool value);
    public OperationParameterInfoCollection get_Parameters();
    public Nullable`1<ProtectionLevel> get_ProtectionLevel();
    public void set_ProtectionLevel(Nullable`1<ProtectionLevel> value);
    public virtual OperationInfoBase Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected internal virtual string GetContractFullName(IServiceProvider provider);
    protected internal virtual Type GetContractType(IServiceProvider provider);
    protected internal virtual bool GetIsOneWay(IServiceProvider provider);
    protected internal virtual MethodInfo GetMethodInfo(IServiceProvider provider);
    protected internal virtual OperationParameterInfoCollection GetParameters(IServiceProvider provider);
    internal void ResetProtectionLevel();
}
[EditorAttribute("System.Workflow.Activities.Design.ServiceOperationUIEditor", "System.Drawing.Design.UITypeEditor")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
[TypeConverterAttribute("System.Workflow.Activities.ServiceOperationInfoTypeConverter")]
public abstract class System.Workflow.Activities.OperationInfoBase : DependencyObject {
    internal static DependencyProperty MethodInfoProperty;
    internal static DependencyProperty NameProperty;
    internal static DependencyProperty PrincipalPermissionNameProperty;
    internal static DependencyProperty PrincipalPermissionRoleProperty;
    public string Name { get; public set; }
    [DefaultValueAttribute("")]
public string PrincipalPermissionName { get; public set; }
    [DefaultValueAttribute("")]
public string PrincipalPermissionRole { get; public set; }
    internal bool IsReadOnly { get; }
    private static OperationInfoBase();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual string get_PrincipalPermissionName();
    public virtual void set_PrincipalPermissionName(string value);
    public virtual string get_PrincipalPermissionRole();
    public virtual void set_PrincipalPermissionRole(string value);
    internal bool get_IsReadOnly();
    public virtual OperationInfoBase Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    protected internal abstract virtual string GetContractFullName(IServiceProvider provider);
    protected internal abstract virtual Type GetContractType(IServiceProvider provider);
    protected internal abstract virtual bool GetIsOneWay(IServiceProvider provider);
    protected internal abstract virtual MethodInfo GetMethodInfo(IServiceProvider provider);
    protected internal abstract virtual OperationParameterInfoCollection GetParameters(IServiceProvider provider);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
[BrowsableAttribute("True")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
public class System.Workflow.Activities.OperationParameterInfo : DependencyObject {
    public static DependencyProperty AttributesProperty;
    public static DependencyProperty NameProperty;
    public static DependencyProperty ParameterTypeProperty;
    public static DependencyProperty PositionProperty;
    public ParameterAttributes Attributes { get; public set; }
    public bool IsIn { get; }
    public bool IsLcid { get; }
    public bool IsOptional { get; }
    public bool IsOut { get; }
    public bool IsRetval { get; }
    public string Name { get; public set; }
    public Type ParameterType { get; public set; }
    public int Position { get; public set; }
    public OperationParameterInfo(string parameterName);
    internal OperationParameterInfo(ParameterInfo parameter);
    private static OperationParameterInfo();
    public ParameterAttributes get_Attributes();
    public void set_Attributes(ParameterAttributes value);
    public bool get_IsIn();
    public bool get_IsLcid();
    public bool get_IsOptional();
    public bool get_IsOut();
    public bool get_IsRetval();
    public string get_Name();
    public void set_Name(string value);
    public Type get_ParameterType();
    public void set_ParameterType(Type value);
    public int get_Position();
    public void set_Position(int value);
    public OperationParameterInfo Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
[DefaultMemberAttribute("Item")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.CollectionMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
public class System.Workflow.Activities.OperationParameterInfoCollection : List`1<OperationParameterInfo> {
    public int Count { get; }
    private int System.Collections.Generic.ICollection<System.Workflow.Activities.OperationParameterInfo>.Count { get; }
    private bool System.Collections.Generic.ICollection<System.Workflow.Activities.OperationParameterInfo>.IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    public OperationParameterInfo Item { get; public set; }
    public OperationParameterInfo Item { get; }
    private OperationParameterInfo System.Collections.Generic.IList<System.Workflow.Activities.OperationParameterInfo>.Item { get; private set; }
    private object System.Collections.IList.Item { get; private set; }
    public OperationParameterInfoCollection(OperationInfoBase owner);
    public sealed virtual int get_Count();
    private sealed virtual override int System.Collections.Generic.ICollection<System.Workflow.Activities.OperationParameterInfo>.get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Workflow.Activities.OperationParameterInfo>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    public OperationParameterInfo get_Item(int index);
    public void set_Item(int index, OperationParameterInfo value);
    public OperationParameterInfo get_Item(string key);
    private sealed virtual override OperationParameterInfo System.Collections.Generic.IList<System.Workflow.Activities.OperationParameterInfo>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<System.Workflow.Activities.OperationParameterInfo>.set_Item(int index, OperationParameterInfo value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public void Add(OperationParameterInfo item);
    public void Clear();
    public bool Contains(OperationParameterInfo item);
    public IEnumerator`1<OperationParameterInfo> GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Workflow.Activities.OperationParameterInfo>.Add(OperationParameterInfo item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Workflow.Activities.OperationParameterInfo>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Workflow.Activities.OperationParameterInfo>.Contains(OperationParameterInfo item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Workflow.Activities.OperationParameterInfo>.CopyTo(OperationParameterInfo[] array, int arrayIndex);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Workflow.Activities.OperationParameterInfo>.Remove(OperationParameterInfo item);
    private sealed virtual override IEnumerator`1<OperationParameterInfo> System.Collections.Generic.IEnumerable<System.Workflow.Activities.OperationParameterInfo>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.Generic.IList<System.Workflow.Activities.OperationParameterInfo>.IndexOf(OperationParameterInfo item);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.Generic.IList<System.Workflow.Activities.OperationParameterInfo>.Insert(int index, OperationParameterInfo item);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.Generic.IList<System.Workflow.Activities.OperationParameterInfo>.RemoveAt(int index);
    public int IndexOf(OperationParameterInfo item);
    public void Insert(int index, OperationParameterInfo item);
    public bool Remove(OperationParameterInfo item);
    public sealed virtual void RemoveAt(int index);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.OperationValidationEventArgs : EventArgs {
    public ReadOnlyCollection`1<ClaimSet> ClaimSets { get; }
    public bool IsValid { get; public set; }
    public OperationValidationEventArgs(ReadOnlyCollection`1<ClaimSet> claimSets);
    public ReadOnlyCollection`1<ClaimSet> get_ClaimSets();
    public bool get_IsValid();
    public void set_IsValid(bool value);
}
internal class System.Workflow.Activities.PrincipalPermissionServiceAuthorizationManager : ServiceAuthorizationManager {
    public PrincipalPermissionServiceAuthorizationManager(PrincipalPermission principalPermission);
    public virtual bool CheckAccess(OperationContext operationContext);
}
internal enum System.Workflow.Activities.QueueInitializationMode : Enum {
    public int value__;
    public static QueueInitializationMode Standalone;
    public static QueueInitializationMode EventDriven;
    public static QueueInitializationMode StateMachine;
}
[ToolboxBitmapAttribute("System.Workflow.Activities.ReceiveActivity", "Design.Resources.ReceiveActivity.png")]
[DesignerAttribute("System.Workflow.Activities.ReceiveActivityDesigner", "System.ComponentModel.Design.IDesigner")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
[SR2DescriptionAttribute("ReceiveActivityDescription")]
[ActivityValidatorAttribute("System.Workflow.Activities.ReceiveActivityValidator")]
[SR2CategoryAttribute("Standard")]
public class System.Workflow.Activities.ReceiveActivity : SequenceActivity {
    public static DependencyProperty FaultMessageProperty;
    public static DependencyProperty OperationValidationEvent;
    public static DependencyProperty WorkflowServiceAttributesProperty;
    internal static DependencyProperty CanCreateInstanceProperty;
    internal static DependencyProperty ContextTokenProperty;
    internal static DependencyProperty ParameterBindingsProperty;
    internal static DependencyProperty ServiceOperationInfoProperty;
    [DesignerSerializationVisibilityAttribute("1")]
[SR2CategoryAttribute("Activity")]
[BrowsableAttribute("True")]
[SR2DescriptionAttribute("Receive_CanCreateInstance_Description")]
[DefaultValueAttribute("False")]
public bool CanCreateInstance { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IDictionary`2<string, string> Context { get; }
    [TypeConverterAttribute("System.Workflow.Activities.ContextTokenTypeConverter")]
[RefreshPropertiesAttribute("1")]
[SR2CategoryAttribute("Activity")]
[SR2DescriptionAttribute("Receive_ContextToken_Description")]
[DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
public ContextToken ContextToken { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("1")]
[BrowsableAttribute("True")]
[SR2CategoryAttribute("Activity")]
[SR2DescriptionAttribute("Receive_FaultMessage_Description")]
public FaultException FaultMessage { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[BrowsableAttribute("False")]
public WorkflowParameterBindingCollection ParameterBindings { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("1")]
[SR2CategoryAttribute("Activity")]
[SR2DescriptionAttribute("Receive_OperationInfo_Description")]
public OperationInfoBase ServiceOperationInfo { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
internal WorkflowRequestContext RequestContext { get; internal set; }
    private IComparable System.Workflow.Activities.IEventActivity.QueueName { get; }
    public ReceiveActivity(string name);
    private static ReceiveActivity();
    public void add_OperationValidation(EventHandler`1<OperationValidationEventArgs> value);
    public void remove_OperationValidation(EventHandler`1<OperationValidationEventArgs> value);
    public bool get_CanCreateInstance();
    public void set_CanCreateInstance(bool value);
    public IDictionary`2<string, string> get_Context();
    public ContextToken get_ContextToken();
    public void set_ContextToken(ContextToken value);
    public FaultException get_FaultMessage();
    public void set_FaultMessage(FaultException value);
    public WorkflowParameterBindingCollection get_ParameterBindings();
    public OperationInfoBase get_ServiceOperationInfo();
    public void set_ServiceOperationInfo(OperationInfoBase value);
    internal WorkflowRequestContext get_RequestContext();
    internal void set_RequestContext(WorkflowRequestContext value);
    private sealed virtual override IComparable System.Workflow.Activities.IEventActivity.get_QueueName();
    public static IDictionary`2<string, string> GetContext(Activity activity, ContextToken contextToken);
    public static IDictionary`2<string, string> GetContext(Activity activity, string contextName, string ownerActivityName);
    public static IDictionary`2<string, string> GetRootContext(Activity activity);
    public static object GetWorkflowServiceAttributes(object dependencyObject);
    public static void SetWorkflowServiceAttributes(object dependencyObject, object value);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>.OnEvent(object sender, QueueEventArgs e);
    private sealed virtual override void System.Workflow.Activities.IEventActivity.Subscribe(ActivityExecutionContext parentContext, IActivityEventListener`1<QueueEventArgs> parentEventHandler);
    private sealed virtual override void System.Workflow.Activities.IEventActivity.Unsubscribe(ActivityExecutionContext parentContext, IActivityEventListener`1<QueueEventArgs> parentEventHandler);
    private sealed virtual override void System.ServiceModel.Description.IServiceDescriptionBuilder.BuildServiceDescription(ServiceDescriptionContext context);
    protected internal virtual void Initialize(IServiceProvider provider);
    internal void GetParameterPropertyDescriptors(IDictionary properties);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus HandleFault(ActivityExecutionContext executionContext, Exception exception);
    protected virtual void InitializeProperties();
    protected virtual void OnSequenceComplete(ActivityExecutionContext executionContext);
    protected virtual void Dispose(bool disposing);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.ReceiveActivityDesignerTheme")]
internal class System.Workflow.Activities.ReceiveActivityDesigner : SequenceDesigner {
    public Size MinimumSize { get; }
    public string Text { get; }
    protected ActivityDesignerVerbCollection Verbs { get; }
    public virtual Size get_MinimumSize();
    public virtual string get_Text();
    protected virtual ActivityDesignerVerbCollection get_Verbs();
    internal static bool MatchByContract(OperationInfoBase source, OperationInfoBase target);
    internal static bool MatchByOperation(OperationInfoBase source, OperationInfoBase target);
    protected virtual void Initialize(Activity activity);
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Workflow.Activities.ReceiveActivityDesignerTheme : CompositeDesignerTheme {
    public ReceiveActivityDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.ReceiveActivityValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal class System.Workflow.Activities.ReceiveContext : object {
    [BrowsableAttribute("False")]
public bool Initialized { get; }
    [BrowsableAttribute("False")]
public string Name { get; }
    [BrowsableAttribute("False")]
internal SerializableReadOnlyDictionary`2<string, string> Properties { get; }
    public ReceiveContext(string name, Guid workflowId, bool isRootContext);
    private static ReceiveContext();
    public bool get_Initialized();
    public string get_Name();
    internal SerializableReadOnlyDictionary`2<string, string> get_Properties();
    public void EnsureInitialized(Guid contextId);
}
internal class System.Workflow.Activities.ReceiveContextCollection : KeyedCollection`2<string, ReceiveContext> {
    public static DependencyProperty ReceiveContextCollectionProperty;
    private static ReceiveContextCollection();
    public ReceiveContext GetItem(string key);
    protected virtual void ClearItems();
    protected virtual string GetKeyForItem(ReceiveContext item);
    protected virtual void InsertItem(int index, ReceiveContext item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, ReceiveContext item);
}
[SR2CategoryAttribute("Standard")]
[ToolboxBitmapAttribute("System.Workflow.Activities.SendActivity", "Design.Resources.SendActivity.png")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
[SR2DescriptionAttribute("SendActivityDescription")]
[ActivityValidatorAttribute("System.Workflow.Activities.SendActivityValidator")]
[DesignerAttribute("System.Workflow.Activities.SendActivityDesigner", "System.ComponentModel.Design.IDesigner")]
public class System.Workflow.Activities.SendActivity : Activity {
    public static string ReturnValuePropertyName;
    public static DependencyProperty AfterResponseEvent;
    public static DependencyProperty BeforeSendEvent;
    public static DependencyProperty CustomAddressProperty;
    internal static DependencyProperty ChannelTokenProperty;
    internal static DependencyProperty ParameterBindingsProperty;
    internal static DependencyProperty ServiceOperationInfoProperty;
    [DefaultValueAttribute("")]
[SR2DescriptionAttribute("Send_ChannelToken_Description")]
[MergablePropertyAttribute("False")]
[RefreshPropertiesAttribute("1")]
[SR2CategoryAttribute("Activity")]
public ChannelToken ChannelToken { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IDictionary`2<string, string> Context { get; public set; }
    [DefaultValueAttribute("")]
[SR2CategoryAttribute("Activity")]
[SR2DescriptionAttribute("Send_CustomAddress_Description")]
public string CustomAddress { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[BrowsableAttribute("False")]
public WorkflowParameterBindingCollection ParameterBindings { get; }
    [SR2DescriptionAttribute("Send_OperationInfo_Description")]
[SR2CategoryAttribute("Activity")]
[BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("1")]
public TypedOperationInfo ServiceOperationInfo { get; public set; }
    public SendActivity(string name);
    private static SendActivity();
    public void add_AfterResponse(EventHandler`1<SendActivityEventArgs> value);
    public void remove_AfterResponse(EventHandler`1<SendActivityEventArgs> value);
    public void add_BeforeSend(EventHandler`1<SendActivityEventArgs> value);
    public void remove_BeforeSend(EventHandler`1<SendActivityEventArgs> value);
    public ChannelToken get_ChannelToken();
    public void set_ChannelToken(ChannelToken value);
    public IDictionary`2<string, string> get_Context();
    public void set_Context(IDictionary`2<string, string> value);
    public string get_CustomAddress();
    public void set_CustomAddress(string value);
    public WorkflowParameterBindingCollection get_ParameterBindings();
    public TypedOperationInfo get_ServiceOperationInfo();
    public void set_ServiceOperationInfo(TypedOperationInfo value);
    public static IDictionary`2<string, string> GetContext(Activity activity, ChannelToken endpoint, Type contractType);
    public static IDictionary`2<string, string> GetContext(Activity activity, string endpointName, string ownerActivityName, Type contractType);
    public static void SetContext(Activity activity, ChannelToken endpoint, Type contractType, IDictionary`2<string, string> context);
    public static void SetContext(Activity activity, string endpointName, string ownerActivityName, Type contractType, IDictionary`2<string, string> context);
    protected internal virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    internal void GetParameterPropertyDescriptors(IDictionary properties);
    protected virtual void InitializeProperties();
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.SendActivityDesignerTheme")]
internal class System.Workflow.Activities.SendActivityDesigner : ActivityDesigner {
    public Size MinimumSize { get; }
    public string Text { get; }
    protected ActivityDesignerVerbCollection Verbs { get; }
    public virtual Size get_MinimumSize();
    public virtual string get_Text();
    protected virtual ActivityDesignerVerbCollection get_Verbs();
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    protected virtual void PreFilterProperties(IDictionary properties);
}
internal class System.Workflow.Activities.SendActivityDesignerTheme : ActivityDesignerTheme {
    public SendActivityDesignerTheme(WorkflowTheme theme);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.SendActivityEventArgs : EventArgs {
    public SendActivity SendActivity { get; }
    public SendActivityEventArgs(SendActivity sendActivity);
    public SendActivity get_SendActivity();
}
internal class System.Workflow.Activities.SendActivityValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal static class System.Workflow.Activities.ServiceOperationHelpers : object {
    public static string GetOperationName(IServiceProvider serviceProvider, MethodInfo methodInfo);
    public static PropertyDescriptor GetServiceOperationInfoPropertyDescriptor(Activity activity);
    public static bool IsAsyncOperation(IServiceProvider serviceProvider, MethodInfo methodInfo);
    public static bool IsInitiatingOperation(IServiceProvider serviceProvider, MethodInfo methodInfo);
    public static bool IsNullableType(Type type);
    public static bool IsValidServiceContract(Type contractType);
    public static bool IsValidServiceOperation(MethodInfo methodInfo);
    internal static List`1<Type> GetContracts(Type contractType);
    internal static SessionMode GetContractSessionMode(IServiceProvider serviceProvider, AttributeInfo attribInfo);
    internal static Object[] GetCustomAttributes(Type attributeType, Attribute[] attributes);
    internal static bool GetOperationAsyncPattern(IServiceProvider serviceProvider, AttributeInfo attribInfo);
    internal static bool IsDefined(Type attributeType, Attribute[] attributes);
    internal static bool IsInitiatingOperationContract(IServiceProvider serviceProvider, AttributeInfo attribInfo);
    internal static void SetWorkflowOperationBehavior(ContractDescription contractDescription, ServiceDescriptionContext context);
}
internal class System.Workflow.Activities.ServiceOperationInfoTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class System.Workflow.Activities.ServiceOperationsImplementedValidationMarker : object {
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.TypedOperationInfo : OperationInfoBase {
    internal static DependencyProperty ContractTypeProperty;
    public Type ContractType { get; public set; }
    public TypedOperationInfo(Type contractType, string operationName);
    private static TypedOperationInfo();
    public Type get_ContractType();
    public void set_ContractType(Type value);
    public virtual OperationInfoBase Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    protected internal virtual string GetContractFullName(IServiceProvider provider);
    protected internal virtual Type GetContractType(IServiceProvider provider);
    protected internal virtual bool GetIsOneWay(IServiceProvider provider);
    protected internal virtual MethodInfo GetMethodInfo(IServiceProvider provider);
    protected internal virtual OperationParameterInfoCollection GetParameters(IServiceProvider provider);
}
internal static class System.Workflow.Activities.ValidationHelper : object {
    internal static bool IsValidTypeNameOrIdentifier(string value, bool isTypeName);
    internal static ValidationErrorCollection ValidateAllServiceOperationsImplemented(ValidationManager manager, Activity rootActivity);
    internal static ValidationErrorCollection ValidateChannelToken(SendActivity activity, ValidationManager manager);
    internal static ValidationErrorCollection ValidateContextToken(Activity activity, ContextToken contextToken, ValidationManager manager);
    internal static ValidationErrorCollection ValidateOperationInfo(Activity activity, OperationInfoBase operationInfo, ValidationManager manager);
    internal static IEnumerable`1<ValidationError> ValidateParameterBindings(Activity ownerActivity, OperationInfoBase operationInfo, WorkflowParameterBindingCollection parameterBindings, ValidationManager manager);
    internal static IEnumerable`1<ValidationError> ValidateServiceModelAttributes(Activity activity, Type contractType, MethodInfo methodInfo, ValidationManager manager);
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
[TypeConverterAttribute("System.Workflow.Activities.WorkflowServiceAttributesTypeConverter")]
public class System.Workflow.Activities.WorkflowServiceAttributes : DependencyObject {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AddressFilterMode AddressFilterMode { get; public set; }
    [DefaultValueAttribute("")]
public string ConfigurationName { get; public set; }
    [DefaultValueAttribute("False")]
public bool IgnoreExtensionDataObject { get; public set; }
    [DefaultValueAttribute("False")]
public bool IncludeExceptionDetailInFaults { get; public set; }
    [DefaultValueAttribute("65536")]
public int MaxItemsInObjectGraph { get; public set; }
    [DefaultValueAttribute("")]
public string Name { get; public set; }
    [DefaultValueAttribute("")]
public string Namespace { get; public set; }
    [DefaultValueAttribute("True")]
public bool UseSynchronizationContext { get; public set; }
    [DefaultValueAttribute("True")]
public bool ValidateMustUnderstand { get; public set; }
    private static WorkflowServiceAttributes();
    public AddressFilterMode get_AddressFilterMode();
    public void set_AddressFilterMode(AddressFilterMode value);
    public string get_ConfigurationName();
    public void set_ConfigurationName(string value);
    public bool get_IgnoreExtensionDataObject();
    public void set_IgnoreExtensionDataObject(bool value);
    public bool get_IncludeExceptionDetailInFaults();
    public void set_IncludeExceptionDetailInFaults(bool value);
    public int get_MaxItemsInObjectGraph();
    public void set_MaxItemsInObjectGraph(int value);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public bool get_UseSynchronizationContext();
    public void set_UseSynchronizationContext(bool value);
    public bool get_ValidateMustUnderstand();
    public void set_ValidateMustUnderstand(bool value);
    private sealed virtual override void System.ServiceModel.Description.IServiceDescriptionBuilder.BuildServiceDescription(ServiceDescriptionContext context);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.WorkflowServiceAttributesDynamicPropertyValidator : Validator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[ProvidePropertyAttribute("WorkflowServiceAttributes", "System.Workflow.ComponentModel.Activity")]
internal class System.Workflow.Activities.WorkflowServiceAttributesPropertyProviderExtender : object {
    public sealed virtual bool CanExtend(object extendee);
    public WorkflowServiceAttributes GetWorkflowServiceAttributes(Activity activity);
    public void SetWorkflowServiceAttributes(Activity activity, WorkflowServiceAttributes value);
}
internal class System.Workflow.Activities.WorkflowServiceAttributesTypeConverter : TypeConverter {
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class System.Workflow.ComponentModel.Design.ActivityComparer`1 : MulticastDelegate {
    public ActivityComparer`1(object object, IntPtr method);
    public virtual bool Invoke(TActivity source, TActivity target);
    public virtual IAsyncResult BeginInvoke(TActivity source, TActivity target, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
internal class System.Workflow.ComponentModel.Design.ActivityDesignerHighlighter : object {
    public ActivityDesignerHighlighter(ActivityDesigner owner);
    public sealed virtual object GetService(Type serviceType);
    public void Highlight(List`1<ActivityDesigner> highlightedDesigners);
    public void RemoveCurrentHighlight();
}
internal static class System.Workflow.ComponentModel.Design.DesignerPainter : object {
    public static CompositeActivityDesigner GetRootDesigner(ActivityDesigner designer);
    public static void PaintDesigner(ActivityDesigner activityDesigner, ActivityDesignerPaintEventArgs eventArgs);
}
internal class System.Workflow.ComponentModel.Design.FindSimilarActivitiesVerb`1 : ActivityDesignerVerb {
    public FindSimilarActivitiesVerb`1(ActivityDesigner designer, ActivityComparer`1<TActivity> matchMaker, string displayText);
}
[ComVisibleAttribute("False")]
internal class System.Workflow.ComponentModel.Design.HighlightOverlayGlyph : DesignerGlyph {
    public Rectangle Bounds { get; public set; }
    public List`1<ActivityDesigner> HighlightedDesigners { get; public set; }
    public HighlightOverlayGlyph(Rectangle bounds, List`1<ActivityDesigner> highlightedDesigners);
    public Rectangle get_Bounds();
    public void set_Bounds(Rectangle value);
    public List`1<ActivityDesigner> get_HighlightedDesigners();
    public void set_HighlightedDesigners(List`1<ActivityDesigner> value);
    protected virtual void OnPaint(Graphics graphics, bool activated, AmbientTheme ambientTheme, ActivityDesigner designer);
}
internal static class System.Workflow.ComponentModel.WorkflowServicesErrorNumbers : object {
    public static int Error_OperationInfoNotSpecified;
    public static int Error_OperationNameNotSpecified;
    public static int Error_OperationNameInvalid;
    public static int Error_ContractNameNotSpecified;
    public static int Error_ContractNameInvalid;
    public static int Error_ContractNameDuplicate;
    public static int Error_ContractTypeNotSpecified;
    public static int Error_ContractTypeNotFound;
    public static int Error_ContractTypeNotInterface;
    public static int Error_ServiceContractAttributeMissing;
    public static int Error_OperationContractAttributeMissing;
    public static int Error_OperationNotInContract;
    public static int Error_OperationNotInitiating;
    public static int Error_OperationIsOneWay;
    public static int Error_OperationParameterPosition;
    public static int Error_OperationParameterPositionDuplicate;
    public static int Error_OperationParameterNameInvalid;
    public static int Error_OperationParameterNameDuplicate;
    public static int Error_OperationParameterDirectionInOneWayOperation;
    public static int Error_ReturnTypeInOneWayOperation;
    public static int Error_OperationNotImplemented;
    public static int Error_ContextTokenNameNotSpecified;
    public static int Error_RootContextScope;
    public static int Error_ChannelTokenNotSpecified;
    public static int Error_ChannelTokenNameNotSpecified;
    public static int Error_ChannelTokenConfigurationNameNotSpecified;
    public static int Error_InvalidMaxItemsInObjectGraph;
    public static int Warning_SendActivityParameterBindingMissing;
    public static int Warning_ReceiveActivityParameterBindingMissing;
    public static int Warning_ReceiveActivityReturnValueBindingMissing;
    public static int Error_DuplicatedOperationName;
    public static int Error_AsyncPatternOperationNotSupported;
    public static int Error_OperationParameterType;
    public static int Error_OwnerActivityNameNotFound;
}
internal class System.Workflow.Runtime.CompiledWorkflowDefinitionContext : WorkflowDefinitionContext {
    public string ConfigurationName { get; }
    public string WorkflowName { get; }
    internal CompiledWorkflowDefinitionContext(Type workflowType);
    private static CompiledWorkflowDefinitionContext();
    public virtual string get_ConfigurationName();
    public virtual string get_WorkflowName();
    public virtual WorkflowInstance CreateWorkflow();
    public virtual WorkflowInstance CreateWorkflow(Guid instanceId);
    public virtual Activity GetWorkflowDefinition();
    protected virtual void OnRegister();
    protected virtual void OnValidate(ValidationErrorCollection errors);
}
internal class System.Workflow.Runtime.Hosting.ChannelManager : object {
    public ChannelManager(ChannelPoolSettings settings, IList`1<ServiceEndpoint> endpoints);
    private static ChannelManager();
    public void Close();
    public void ReturnChannel(ChannelPoolKey key, PooledChannel channel);
    public PooledChannel TakeChannel(string endpointName, Type contractType, string customAddress, ChannelPoolKey& key);
    public PooledChannel TakeChannel(EndpointAddress address, Uri via, ChannelPoolKey& key);
}
internal static class System.Workflow.Runtime.Hosting.ChannelManagerHelpers : object {
    private static ChannelManagerHelpers();
    public static EndpointAddress BuildCacheAddress(string endpointName, Type contractType);
    public static EndpointAddress BuildCacheAddress(string endpointName, string contractName);
    public static EndpointAddress BuildCacheAddressWithIdentity(EndpointAddress address);
    public static void CloseCommunicationObject(ICommunicationObject communicationObject);
    public static void CloseCommunicationObject(ICommunicationObject communicationObject, TimeSpan timeout);
    public static IChannel CreateChannel(Type contractType, ChannelFactory factory, string customAddress);
    public static ChannelFactory CreateChannelFactory(string endpointName, Type contractType);
    public static ChannelFactory CreateChannelFactory(string endpointName, Type contractType, IDictionary`2<EndpointAddress, ServiceEndpoint> codeEndpoints);
    public static bool IsEndpointDefinedInConfiguration(string endpointName, Type contractType);
    public static bool IsSessionlessContract(Type contractType);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Runtime.Hosting.ChannelManagerService : WorkflowRuntimeService {
    public ChannelManagerService(ChannelPoolSettings settings);
    public ChannelManagerService(IList`1<ServiceEndpoint> endpoints);
    public ChannelManagerService(ChannelPoolSettings settings, IList`1<ServiceEndpoint> endpoints);
    public ChannelManagerService(NameValueCollection parameters);
    protected internal virtual void Start();
    protected internal virtual void Stop();
    internal static void ApplyLogicalChannelContext(LogicalChannel logicalChannel);
    internal static TransientChannelTicket CreateTransientChannel(LogicalChannel logicalChannel);
    internal static ChannelTicket Take(ActivityExecutionContext executionContext, Guid workflowId, LogicalChannel logicalChannel);
    internal static void UpdateLogicalChannelContext(LogicalChannel logicalChannel);
    internal void ReturnChannel(PooledChannelTicket pooledChannel);
    internal PooledChannelTicket TakeChannel(Guid workflowId, LogicalChannel logicalChannel);
}
internal class System.Workflow.Runtime.Hosting.SynchronizationContextWorkflowSchedulerService : DefaultWorkflowSchedulerService {
    protected internal virtual void Cancel(Guid timerId);
    protected internal virtual void Schedule(WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);
    protected internal virtual void Schedule(WaitCallback callback, Guid workflowInstanceId);
    internal void SetSynchronizationContext(SynchronizationContext synchronizationContext);
}
internal class System.Workflow.Runtime.StreamedWorkflowDefinitionContext : WorkflowDefinitionContext {
    public string ConfigurationName { get; }
    public string WorkflowName { get; }
    internal StreamedWorkflowDefinitionContext(Stream workflowDefinition, Stream ruleDefinition, ITypeProvider typeProvider);
    internal StreamedWorkflowDefinitionContext(string workflowDefinitionPath, string ruleDefinitionPath, ITypeProvider typeProvider);
    public virtual string get_ConfigurationName();
    public virtual string get_WorkflowName();
    public virtual WorkflowInstance CreateWorkflow();
    public virtual WorkflowInstance CreateWorkflow(Guid instanceId);
    public virtual Activity GetWorkflowDefinition();
    protected virtual void OnRegister();
    protected virtual void OnValidate(ValidationErrorCollection errors);
}
internal abstract class System.Workflow.Runtime.WorkflowDefinitionContext : object {
    public string ConfigurationName { get; }
    public string WorkflowName { get; }
    protected internal WorkflowRuntime WorkflowRuntime { get; }
    public abstract virtual string get_ConfigurationName();
    public abstract virtual string get_WorkflowName();
    protected internal WorkflowRuntime get_WorkflowRuntime();
    public abstract virtual WorkflowInstance CreateWorkflow();
    public abstract virtual WorkflowInstance CreateWorkflow(Guid instanceId);
    public abstract virtual Activity GetWorkflowDefinition();
    internal void Register(WorkflowRuntime workflowRuntime, bool validate);
    protected static TypeProvider CreateTypeProvider(Activity rootActivity);
    protected abstract virtual void OnRegister();
    protected abstract virtual void OnValidate(ValidationErrorCollection errors);
}
