public interface System.AddIn.Contract.Automation.IRemoteDelegateContract {
    public abstract virtual RemoteArgument InvokeDelegate(IRemoteArgumentArrayContract args);
}
public interface System.AddIn.Contract.Automation.IRemoteEventInfoContract {
    public abstract virtual RemoteMemberData GetMemberData();
    public abstract virtual IRemoteMethodInfoContract GetAddMethod();
    public abstract virtual IRemoteMethodInfoContract GetRemoveMethod();
}
public interface System.AddIn.Contract.Automation.IRemoteFieldInfoContract {
    public abstract virtual RemoteFieldData GetFieldData();
    public abstract virtual RemoteArgument GetValue(IRemoteObjectContract obj);
    public abstract virtual void SetValue(IRemoteObjectContract obj, RemoteArgument value, int localeId);
}
public interface System.AddIn.Contract.Automation.IRemoteMethodInfoContract {
    public abstract virtual RemoteMethodData GetMethodData();
    public abstract virtual RemoteArgument Invoke(IRemoteObjectContract target, BindingFlags bindingFlags, IRemoteArgumentArrayContract parameters, int localeId);
}
public interface System.AddIn.Contract.Automation.IRemoteObjectContract {
    public abstract virtual IRemoteTypeContract GetRemoteType();
    public abstract virtual RemoteArgument RemoteCast(string canonicalName);
}
public interface System.AddIn.Contract.Automation.IRemotePropertyInfoContract {
    public abstract virtual RemotePropertyData GetPropertyData();
    public abstract virtual IRemoteMethodInfoContract GetGetMethod();
    public abstract virtual IRemoteMethodInfoContract GetSetMethod();
    public abstract virtual RemoteArgument GetValue(IRemoteObjectContract obj, BindingFlags bindingFlags, IRemoteArgumentArrayContract index, int localeId);
    public abstract virtual void SetValue(IRemoteObjectContract target, RemoteArgument& value, BindingFlags bindingFlags, IRemoteArgumentArrayContract index, int localeId);
}
public interface System.AddIn.Contract.Automation.IRemoteTypeContract {
    public abstract virtual RemoteTypeData GetTypeData();
    public abstract virtual string GetCanonicalName();
    public abstract virtual IArrayContract`1<IRemoteEventInfoContract> GetEvents(BindingFlags bindingFlags);
    public abstract virtual IRemoteEventInfoContract GetEvent(string name, BindingFlags bindingFlags);
    public abstract virtual IRemoteFieldInfoContract GetField(string name, BindingFlags bindingFlags);
    public abstract virtual IArrayContract`1<IRemoteFieldInfoContract> GetFields(BindingFlags bindingFlags);
    public abstract virtual IArrayContract`1<IRemoteTypeContract> GetInterfaces();
    public abstract virtual IRemoteTypeContract GetInterface(string canonicalName);
    public abstract virtual IArrayContract`1<IContract> GetMembers(BindingFlags bindingFlags);
    public abstract virtual IArrayContract`1<IContract> GetMember(string name, MemberTypes memberTypes, BindingFlags bindingFlags);
    public abstract virtual IArrayContract`1<IRemoteMethodInfoContract> GetMethods(BindingFlags bindingFlags);
    public abstract virtual IRemoteMethodInfoContract GetMethod(string name, BindingFlags bindingFlags, IArrayContract`1<IRemoteTypeContract> remoteTypes);
    public abstract virtual IArrayContract`1<IRemotePropertyInfoContract> GetProperties(BindingFlags bindingFlags);
    public abstract virtual IRemotePropertyInfoContract GetProperty(string name, BindingFlags bindingFlags, IRemoteTypeContract remoteReturnType, IArrayContract`1<IRemoteTypeContract> remoteTypes);
    public abstract virtual RemoteArgument InvokeMember(string name, BindingFlags bindingFlags, IRemoteObjectContract target, IRemoteArgumentArrayContract remoteArgs, Boolean[] remoteArgModifiers, int localeId);
}
public class System.AddIn.Contract.Automation.RemoteFieldData : ValueType {
    public RemoteMemberData MemberData;
    public FieldAttributes Attributes;
    public IRemoteTypeContract FieldType;
}
public class System.AddIn.Contract.Automation.RemoteMemberData : ValueType {
    public IRemoteTypeContract DeclaringType;
    public string Name;
}
public class System.AddIn.Contract.Automation.RemoteMethodData : ValueType {
    public RemoteMemberData MemberData;
    public MethodAttributes Attributes;
    public RemoteParameterData[] Parameters;
    public RemoteParameterData ReturnParameter;
}
public class System.AddIn.Contract.Automation.RemoteParameterData : ValueType {
    public ParameterAttributes Attributes;
    public string Name;
    public int Position;
    public bool IsByRef;
    public IRemoteTypeContract ParameterType;
    public RemoteArgument DefaultValue;
    public bool IsParameterArray;
}
public class System.AddIn.Contract.Automation.RemotePropertyData : ValueType {
    public RemoteMemberData MemberData;
    public PropertyAttributes Attributes;
    public RemoteParameterData[] IndexParameters;
    public IRemoteTypeContract PropertyType;
    public bool CanRead;
    public bool CanWrite;
}
public class System.AddIn.Contract.Automation.RemoteTypeData : ValueType {
    public RemoteMemberData MemberData;
    public TypeAttributes Attributes;
    public TypeCode TypeCode;
    public string AssemblyName;
    public string FullName;
    public string AssemblyQualifiedName;
    public bool IsByRef;
    public bool IsArray;
    public int ArrayRank;
    public IRemoteTypeContract ElementType;
    public IRemoteTypeContract BaseType;
}
public interface System.AddIn.Contract.Collections.IArrayContract`1 {
    public abstract virtual C GetItem(int index);
    public abstract virtual void SetItem(int index, C value);
    public abstract virtual int GetCount();
}
public interface System.AddIn.Contract.Collections.ICollectionContract`1 {
    public abstract virtual void Add(C item);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(C item);
    public abstract virtual void CopyTo(C[] array, int arrayIndex);
    public abstract virtual bool Remove(C item);
    public abstract virtual int GetCount();
    public abstract virtual bool GetIsReadOnly();
}
public interface System.AddIn.Contract.Collections.IEnumerableContract`1 {
    public abstract virtual IEnumeratorContract`1<C> GetEnumeratorContract();
}
public interface System.AddIn.Contract.Collections.IEnumeratorContract`1 {
    public abstract virtual C GetCurrent();
    public abstract virtual bool MoveNext();
    public abstract virtual void Reset();
}
public interface System.AddIn.Contract.Collections.IListContract`1 {
    public abstract virtual C GetItem(int index);
    public abstract virtual void SetItem(int index, C value);
    public abstract virtual int IndexOf(C item);
    public abstract virtual void Insert(int index, C item);
    public abstract virtual void RemoveAt(int index);
}
public interface System.AddIn.Contract.Collections.IRemoteArgumentArrayContract {
    public abstract virtual RemoteArgument GetItem(int index);
    public abstract virtual void SetItem(int index, RemoteArgument value);
}
public interface System.AddIn.Contract.Collections.IRemoteArgumentArrayListContract {
    public abstract virtual void Add(RemoteArgument newItem);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(RemoteArgument item);
    public abstract virtual int IndexOf(RemoteArgument item);
    public abstract virtual void Insert(int index, RemoteArgument item);
    public abstract virtual void Remove(RemoteArgument item);
    public abstract virtual void RemoveAt(int index);
}
public interface System.AddIn.Contract.Collections.IRemoteArgumentCollectionContract {
    public abstract virtual int GetCount();
}
public interface System.AddIn.Contract.Collections.IRemoteArgumentDictionaryContract {
    public abstract virtual void Add(RemoteArgument key, RemoteArgument value);
    public abstract virtual void Clear();
    public abstract virtual bool ContainsKey(RemoteArgument key);
    public abstract virtual bool Remove(RemoteArgument key);
    public abstract virtual IRemoteArgumentDictionaryEnumeratorContract GetEnumeratorContract();
    public abstract virtual RemoteArgument GetItem(RemoteArgument key);
    public abstract virtual void SetItem(RemoteArgument key, RemoteArgument value);
    public abstract virtual IRemoteArgumentCollectionContract GetKeys();
    public abstract virtual IRemoteArgumentCollectionContract GetValues();
}
public interface System.AddIn.Contract.Collections.IRemoteArgumentDictionaryEnumeratorContract {
    public abstract virtual RemoteArgumentDictionaryEntry GetEntry();
    public abstract virtual RemoteArgument GetKey();
    public abstract virtual RemoteArgument GetValue();
}
public interface System.AddIn.Contract.Collections.IRemoteArgumentEnumerableContract {
    public abstract virtual IRemoteArgumentEnumeratorContract GetEnumeratorContract();
}
public interface System.AddIn.Contract.Collections.IRemoteArgumentEnumeratorContract {
    public abstract virtual RemoteArgument GetCurrent();
    public abstract virtual void Reset();
    public abstract virtual bool MoveNext();
}
public class System.AddIn.Contract.Collections.RemoteArgumentDictionaryEntry : ValueType {
    public RemoteArgument Key;
    public RemoteArgument Value;
    public RemoteArgumentDictionaryEntry(RemoteArgument key, RemoteArgument value);
}
public interface System.AddIn.Contract.IContract {
    public abstract virtual IContract QueryContract(string contractIdentifier);
    public abstract virtual int GetRemoteHashCode();
    public abstract virtual bool RemoteEquals(IContract contract);
    public abstract virtual string RemoteToString();
    public abstract virtual int AcquireLifetimeToken();
    public abstract virtual void RevokeLifetimeToken(int token);
}
public interface System.AddIn.Contract.IEnumeratorContract`1 {
    public abstract virtual T GetCurrent();
    public abstract virtual bool MoveNext();
    public abstract virtual void Reset();
}
public interface System.AddIn.Contract.IExecutorExtensionContract {
    public abstract virtual void ExecutorCreated();
    public abstract virtual void AssemblyLoading(string assemblyName);
    public abstract virtual void AssemblyLoadingFrom(string assemblyFile);
    public abstract virtual void AssemblyLoaded(string assemblyName);
    public abstract virtual void AssemblyLoadedFrom(string assemblyFile);
    public abstract virtual void EntryPointStarting(string assemblyName, string startupClass, IRemoteArgumentArrayContract initArgs);
    public abstract virtual void EntryPointStarted(IContract entryPoint);
}
public interface System.AddIn.Contract.IListContract`1 {
    public abstract virtual void Add(T item);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(T item);
    public abstract virtual int GetCount();
    public abstract virtual IEnumeratorContract`1<T> GetEnumeratorContract();
    public abstract virtual bool GetIsReadOnly();
    public abstract virtual T GetItem(int index);
    public abstract virtual int IndexOf(T item);
    public abstract virtual void Insert(int index, T item);
    public abstract virtual bool Remove(T item);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void SetItem(int index, T item);
}
public interface System.AddIn.Contract.INativeHandleContract {
    public abstract virtual IntPtr GetHandle();
}
public interface System.AddIn.Contract.IProfferServiceContract {
    public abstract virtual void ProfferService(string serviceIdentifier, IServiceProviderContract service);
    public abstract virtual void RevokeService(string serviceIdentifier);
}
public interface System.AddIn.Contract.ISerializableObjectContract {
    public abstract virtual string GetCanonicalName();
    public abstract virtual SerializableObjectData GetSerializableObjectData();
}
public interface System.AddIn.Contract.IServiceProviderContract {
    public abstract virtual IContract QueryService(string serviceIdentifier, string serviceContractIdentifier);
}
public class System.AddIn.Contract.RemoteArgument : ValueType {
    private object _value;
    private bool isByRef;
    private RemoteArgumentKind remoteArgKind;
    private TypeCode intrinsicTypeCode;
    public RemoteArgumentKind RemoteArgumentKind { get; }
    public TypeCode TypeCode { get; }
    public bool IsByRef { get; public set; }
    public IContract ContractValue { get; public set; }
    public Missing MissingValue { get; }
    public bool BooleanValue { get; public set; }
    public byte ByteValue { get; public set; }
    public char CharValue { get; public set; }
    public DateTime DateTimeValue { get; public set; }
    public DBNull DBNullValue { get; public set; }
    public decimal DecimalValue { get; public set; }
    public double DoubleValue { get; public set; }
    public short Int16Value { get; public set; }
    public int Int32Value { get; public set; }
    public long Int64Value { get; public set; }
    public float SingleValue { get; public set; }
    public string StringValue { get; public set; }
    [CLSCompliantAttribute("False")]
public sbyte SByteValue { get; public set; }
    [CLSCompliantAttribute("False")]
public ushort UInt16Value { get; public set; }
    [CLSCompliantAttribute("False")]
public UInt32 UInt32Value { get; public set; }
    [CLSCompliantAttribute("False")]
public ulong UInt64Value { get; public set; }
    public Array ArrayValue { get; public set; }
    public RemoteArgument(IContract value);
    public RemoteArgument(IContract value, bool isByRef);
    public RemoteArgument(RemoteArgumentKind remoteArgKind, TypeCode typeCode);
    public RemoteArgument(RemoteArgumentKind remoteArgKind, TypeCode typeCode, bool isByRef);
    public RemoteArgument(bool value);
    public RemoteArgument(bool value, bool isByRef);
    public RemoteArgument(byte value);
    public RemoteArgument(byte value, bool isByRef);
    public RemoteArgument(char value);
    public RemoteArgument(char value, bool isByRef);
    public RemoteArgument(DateTime value);
    public RemoteArgument(DateTime value, bool isByRef);
    public RemoteArgument(DBNull value);
    public RemoteArgument(DBNull value, bool isByRef);
    public RemoteArgument(decimal value);
    public RemoteArgument(decimal value, bool isByRef);
    public RemoteArgument(double value);
    public RemoteArgument(double value, bool isByRef);
    public RemoteArgument(short value);
    public RemoteArgument(short value, bool isByRef);
    public RemoteArgument(int value);
    public RemoteArgument(int value, bool isByRef);
    public RemoteArgument(long value);
    public RemoteArgument(long value, bool isByRef);
    public RemoteArgument(float value);
    public RemoteArgument(float value, bool isByRef);
    public RemoteArgument(string value);
    public RemoteArgument(string value, bool isByRef);
    [CLSCompliantAttribute("False")]
public RemoteArgument(sbyte value);
    [CLSCompliantAttribute("False")]
public RemoteArgument(sbyte value, bool isByRef);
    [CLSCompliantAttribute("False")]
public RemoteArgument(ushort value);
    [CLSCompliantAttribute("False")]
public RemoteArgument(ushort value, bool isByRef);
    [CLSCompliantAttribute("False")]
public RemoteArgument(UInt32 value);
    [CLSCompliantAttribute("False")]
public RemoteArgument(UInt32 value, bool isByRef);
    [CLSCompliantAttribute("False")]
public RemoteArgument(ulong value);
    [CLSCompliantAttribute("False")]
public RemoteArgument(ulong value, bool isByRef);
    public RemoteArgument(Array array);
    public RemoteArgument(Array array, bool isByRef);
    public static RemoteArgument CreateRemoteArgument(object value);
    public static RemoteArgument CreateRemoteArgument(object value, bool isByRef);
    public static RemoteArgument CreateRemoteArgument(object value, bool isByRef, TypeCode typeCodeToUse);
    public RemoteArgumentKind get_RemoteArgumentKind();
    public TypeCode get_TypeCode();
    public bool get_IsByRef();
    public void set_IsByRef(bool value);
    public IContract get_ContractValue();
    public void set_ContractValue(IContract value);
    public Missing get_MissingValue();
    public bool get_BooleanValue();
    public void set_BooleanValue(bool value);
    public byte get_ByteValue();
    public void set_ByteValue(byte value);
    public char get_CharValue();
    public void set_CharValue(char value);
    public DateTime get_DateTimeValue();
    public void set_DateTimeValue(DateTime value);
    public DBNull get_DBNullValue();
    public void set_DBNullValue(DBNull value);
    public decimal get_DecimalValue();
    public void set_DecimalValue(decimal value);
    public double get_DoubleValue();
    public void set_DoubleValue(double value);
    public short get_Int16Value();
    public void set_Int16Value(short value);
    public int get_Int32Value();
    public void set_Int32Value(int value);
    public long get_Int64Value();
    public void set_Int64Value(long value);
    public float get_SingleValue();
    public void set_SingleValue(float value);
    public string get_StringValue();
    public void set_StringValue(string value);
    public sbyte get_SByteValue();
    public void set_SByteValue(sbyte value);
    public ushort get_UInt16Value();
    public void set_UInt16Value(ushort value);
    public UInt32 get_UInt32Value();
    public void set_UInt32Value(UInt32 value);
    public ulong get_UInt64Value();
    public void set_UInt64Value(ulong value);
    public Array get_ArrayValue();
    public void set_ArrayValue(Array value);
}
public enum System.AddIn.Contract.RemoteArgumentKind : Enum {
    public int value__;
    public static RemoteArgumentKind Missing;
    public static RemoteArgumentKind Intrinsic;
    public static RemoteArgumentKind IntrinsicArray;
    public static RemoteArgumentKind Contract;
}
public class System.AddIn.Contract.SerializableObjectData : ValueType {
    public long ObjectId;
    public long ParentId;
    public string MemberName;
    public bool IsArray;
    public Int32[] DimensionLengths;
    public Int32[] DimensionLowerBounds;
    public bool IsArrayElement;
    public Int32[] ElementIndexes;
}
[AttributeUsageAttribute("1024")]
public class System.AddIn.Pipeline.AddInContractAttribute : Attribute {
}
[AttributeUsageAttribute("1028")]
public class System.AddIn.Pipeline.QualificationDataAttribute : Attribute {
    public string Name { get; }
    public string Value { get; }
    public QualificationDataAttribute(string name, string value);
    public string get_Name();
    public string get_Value();
}
