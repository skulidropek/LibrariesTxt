internal static class Microsoft.Internal.Assumes : object {
    [DebuggerStepThroughAttribute]
internal static void NotNull(T value);
    [DebuggerStepThroughAttribute]
internal static void NotNull(T1 value1, T2 value2);
    [DebuggerStepThroughAttribute]
internal static void NotNull(T1 value1, T2 value2, T3 value3);
    [DebuggerStepThroughAttribute]
internal static void NotNullOrEmpty(string value);
    [DebuggerStepThroughAttribute]
internal static void IsTrue(bool condition);
    [DebuggerStepThroughAttribute]
internal static void IsTrue(bool condition, string message);
    [DebuggerStepThroughAttribute]
internal static T NotReachable();
}
[ExtensionAttribute]
internal static class Microsoft.Internal.AttributeServices : object {
    [ExtensionAttribute]
public static T[] GetAttributes(ICustomAttributeProvider attributeProvider);
    [ExtensionAttribute]
public static T[] GetAttributes(ICustomAttributeProvider attributeProvider, bool inherit);
    [ExtensionAttribute]
public static T GetFirstAttribute(ICustomAttributeProvider attributeProvider);
    [ExtensionAttribute]
public static T GetFirstAttribute(ICustomAttributeProvider attributeProvider, bool inherit);
    [ExtensionAttribute]
public static bool IsAttributeDefined(ICustomAttributeProvider attributeProvider);
    [ExtensionAttribute]
public static bool IsAttributeDefined(ICustomAttributeProvider attributeProvider, bool inherit);
}
internal class Microsoft.Internal.Lock : object {
    public void EnterReadLock();
    public void EnterWriteLock();
    public void ExitReadLock();
    public void ExitWriteLock();
    public sealed virtual void Dispose();
}
internal class Microsoft.Internal.ReadLock : ValueType {
    private Lock _lock;
    private int _isDisposed;
    public ReadLock(Lock lock);
    public sealed virtual void Dispose();
}
internal static class Microsoft.Internal.Requires : object {
    [DebuggerStepThroughAttribute]
public static void NotNull(T value, string parameterName);
    [DebuggerStepThroughAttribute]
public static void NotNullOrEmpty(string value, string parameterName);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Internal.Strings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Argument_ExpressionMustBeNew { get; }
    internal static string Argument_ExpressionMustBePropertyMember { get; }
    internal static string ArgumentException_EmptyString { get; }
    internal static string ArgumentOutOfRange_InvalidEnumInSet { get; }
    internal static string InternalExceptionMessage { get; }
    internal static string Registration_ConstructorConventionOverridden { get; }
    internal static string Registration_MemberExportConventionOverridden { get; }
    internal static string Registration_MemberImportConventionMatchedTwice { get; }
    internal static string Registration_MemberImportConventionOverridden { get; }
    internal static string Registration_ParameterImportConventionOverridden { get; }
    internal static string Registration_PartCreationConventionOverridden { get; }
    internal static string Registration_PartMetadataConventionOverridden { get; }
    internal static string Registration_TypeExportConventionOverridden { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Argument_ExpressionMustBeNew();
    internal static string get_Argument_ExpressionMustBePropertyMember();
    internal static string get_ArgumentException_EmptyString();
    internal static string get_ArgumentOutOfRange_InvalidEnumInSet();
    internal static string get_InternalExceptionMessage();
    internal static string get_Registration_ConstructorConventionOverridden();
    internal static string get_Registration_MemberExportConventionOverridden();
    internal static string get_Registration_MemberImportConventionMatchedTwice();
    internal static string get_Registration_MemberImportConventionOverridden();
    internal static string get_Registration_ParameterImportConventionOverridden();
    internal static string get_Registration_PartCreationConventionOverridden();
    internal static string get_Registration_PartMetadataConventionOverridden();
    internal static string get_Registration_TypeExportConventionOverridden();
}
internal class Microsoft.Internal.WriteLock : ValueType {
    private Lock _lock;
    private int _isDisposed;
    public WriteLock(Lock lock);
    public sealed virtual void Dispose();
}
internal static class System.ComponentModel.Composition.Diagnostics.CompositionTrace : object {
    internal static void Registration_ConstructorConventionOverridden(Type type);
    internal static void Registration_TypeExportConventionOverridden(Type type);
    internal static void Registration_MemberExportConventionOverridden(Type type, MemberInfo member);
    internal static void Registration_MemberImportConventionOverridden(Type type, MemberInfo member);
    internal static void Registration_PartCreationConventionOverridden(Type type);
    internal static void Registration_MemberImportConventionMatchedTwice(Type type, MemberInfo member);
    internal static void Registration_PartMetadataConventionOverridden(Type type);
    internal static void Registration_ParameterImportConventionOverridden(ParameterInfo parameter, ConstructorInfo constructor);
}
internal enum System.ComponentModel.Composition.Diagnostics.CompositionTraceId : Enum {
    public ushort value__;
    public static CompositionTraceId Registration_ConstructorConventionOverridden;
    public static CompositionTraceId Registration_TypeExportConventionOverridden;
    public static CompositionTraceId Registration_MemberExportConventionOverridden;
    public static CompositionTraceId Registration_MemberImportConventionOverridden;
    public static CompositionTraceId Registration_PartCreationConventionOverridden;
    public static CompositionTraceId Registration_MemberImportConventionMatchedTwice;
    public static CompositionTraceId Registration_PartMetadataConventionOverridden;
    public static CompositionTraceId Registration_ParameterImportConventionOverridden;
}
internal static class System.ComponentModel.Composition.Diagnostics.CompositionTraceSource : object {
    public static bool CanWriteInformation { get; }
    public static bool CanWriteWarning { get; }
    public static bool CanWriteError { get; }
    private static CompositionTraceSource();
    public static bool get_CanWriteInformation();
    public static bool get_CanWriteWarning();
    public static bool get_CanWriteError();
    public static void WriteInformation(CompositionTraceId traceId, string format, Object[] arguments);
    public static void WriteWarning(CompositionTraceId traceId, string format, Object[] arguments);
    public static void WriteError(CompositionTraceId traceId, string format, Object[] arguments);
}
internal class System.ComponentModel.Composition.Diagnostics.TraceSourceTraceWriter : TraceWriter {
    internal static TraceSource Source;
    public bool CanWriteInformation { get; }
    public bool CanWriteWarning { get; }
    public bool CanWriteError { get; }
    private static TraceSourceTraceWriter();
    public virtual bool get_CanWriteInformation();
    public virtual bool get_CanWriteWarning();
    public virtual bool get_CanWriteError();
    public virtual void WriteInformation(CompositionTraceId traceId, string format, Object[] arguments);
    public virtual void WriteWarning(CompositionTraceId traceId, string format, Object[] arguments);
    public virtual void WriteError(CompositionTraceId traceId, string format, Object[] arguments);
}
internal abstract class System.ComponentModel.Composition.Diagnostics.TraceWriter : object {
    public bool CanWriteInformation { get; }
    public bool CanWriteWarning { get; }
    public bool CanWriteError { get; }
    public abstract virtual bool get_CanWriteInformation();
    public abstract virtual bool get_CanWriteWarning();
    public abstract virtual bool get_CanWriteError();
    public abstract virtual void WriteInformation(CompositionTraceId traceId, string format, Object[] arguments);
    public abstract virtual void WriteWarning(CompositionTraceId traceId, string format, Object[] arguments);
    public abstract virtual void WriteError(CompositionTraceId traceId, string format, Object[] arguments);
}
internal static class System.ComponentModel.Composition.ExceptionBuilder : object {
    public static ArgumentException Argument_ExpressionMustBeNew(string parameterName);
    public static ArgumentException Argument_ExpressionMustBePropertyMember(string parameterName);
}
public class System.ComponentModel.Composition.Registration.ExportBuilder : object {
    public ExportBuilder AsContractType();
    public ExportBuilder AsContractType(Type type);
    public ExportBuilder AsContractName(string contractName);
    public ExportBuilder Inherited();
    public ExportBuilder AddMetadata(string name, object value);
    public ExportBuilder AddMetadata(string name, Func`2<Type, object> itemFunc);
    internal void BuildAttributes(Type type, List`1& attributes);
}
public class System.ComponentModel.Composition.Registration.ImportBuilder : object {
    private static ImportBuilder();
    public ImportBuilder AsContractType();
    public ImportBuilder AsContractType(Type type);
    public ImportBuilder AsContractName(string contractName);
    public ImportBuilder AsMany(bool isMany);
    public ImportBuilder AllowDefault();
    public ImportBuilder AllowRecomposition();
    public ImportBuilder RequiredCreationPolicy(CreationPolicy requiredCreationPolicy);
    public ImportBuilder Source(ImportSource source);
    internal void BuildAttributes(Type type, List`1& attributes);
}
public class System.ComponentModel.Composition.Registration.ParameterImportBuilder : object {
    public T Import();
    public T Import(Action`1<ImportBuilder> configure);
}
public class System.ComponentModel.Composition.Registration.PartBuilder : object {
    internal Predicate`1<Type> SelectType { get; private set; }
    internal PartBuilder(Predicate`1<Type> selectType);
    private static PartBuilder();
    [CompilerGeneratedAttribute]
internal Predicate`1<Type> get_SelectType();
    [CompilerGeneratedAttribute]
private void set_SelectType(Predicate`1<Type> value);
    public PartBuilder Export();
    public PartBuilder Export(Action`1<ExportBuilder> exportConfiguration);
    public PartBuilder Export();
    public PartBuilder Export(Action`1<ExportBuilder> exportConfiguration);
    public PartBuilder SelectConstructor(Func`2<ConstructorInfo[], ConstructorInfo> constructorFilter);
    public PartBuilder SelectConstructor(Func`2<ConstructorInfo[], ConstructorInfo> constructorFilter, Action`2<ParameterInfo, ImportBuilder> importConfiguration);
    public PartBuilder ExportInterfaces(Predicate`1<Type> interfaceFilter);
    public PartBuilder ExportInterfaces();
    public PartBuilder ExportInterfaces(Predicate`1<Type> interfaceFilter, Action`2<Type, ExportBuilder> exportConfiguration);
    public PartBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ExportBuilder> exportConfiguration);
    public PartBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartBuilder ExportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ExportBuilder> exportConfiguration);
    public PartBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ImportBuilder> importConfiguration);
    public PartBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter);
    public PartBuilder ImportProperties(Predicate`1<PropertyInfo> propertyFilter, Action`2<PropertyInfo, ImportBuilder> importConfiguration);
    public PartBuilder SetCreationPolicy(CreationPolicy creationPolicy);
    public PartBuilder AddMetadata(string name, object value);
    public PartBuilder AddMetadata(string name, Func`2<Type, object> itemFunc);
    internal IEnumerable`1<Attribute> BuildTypeAttributes(Type type);
    internal bool BuildConstructorAttributes(Type type, List`1& configuredMembers);
    internal static void BuildDefaultConstructorAttributes(Type type, List`1& configuredMembers);
    internal void BuildPropertyAttributes(Type type, List`1& configuredMembers);
}
public class System.ComponentModel.Composition.Registration.PartBuilder`1 : PartBuilder {
    internal PartBuilder`1(Predicate`1<Type> selectType);
    public PartBuilder`1<T> SelectConstructor(Expression`1<Func`2<ParameterImportBuilder, T>> constructorFilter);
    public PartBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertyFilter);
    public PartBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertyFilter, Action`1<ExportBuilder> exportConfiguration);
    public PartBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertyFilter);
    public PartBuilder`1<T> ExportProperty(Expression`1<Func`2<T, object>> propertyFilter, Action`1<ExportBuilder> exportConfiguration);
    public PartBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertyFilter);
    public PartBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertyFilter, Action`1<ImportBuilder> importConfiguration);
    public PartBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertyFilter);
    public PartBuilder`1<T> ImportProperty(Expression`1<Func`2<T, object>> propertyFilter, Action`1<ImportBuilder> importConfiguration);
}
public class System.ComponentModel.Composition.Registration.RegistrationBuilder : CustomReflectionContext {
    private static RegistrationBuilder();
    public PartBuilder`1<T> ForTypesDerivedFrom();
    public PartBuilder ForTypesDerivedFrom(Type type);
    public PartBuilder`1<T> ForType();
    public PartBuilder ForType(Type type);
    public PartBuilder`1<T> ForTypesMatching(Predicate`1<Type> typeFilter);
    public PartBuilder ForTypesMatching(Predicate`1<Type> typeFilter);
    protected virtual IEnumerable`1<object> GetCustomAttributes(MemberInfo member, IEnumerable`1<object> declaredAttributes);
    protected virtual IEnumerable`1<object> GetCustomAttributes(ParameterInfo parameter, IEnumerable`1<object> declaredAttributes);
}
