public class System.Configuration.Install.AssemblyInstaller : Installer {
    [ResDescriptionAttribute("Desc_AssemblyInstaller_Assembly")]
public Assembly Assembly { get; public set; }
    [ResDescriptionAttribute("Desc_AssemblyInstaller_CommandLine")]
public String[] CommandLine { get; public set; }
    public string HelpText { get; }
    [ResDescriptionAttribute("Desc_AssemblyInstaller_Path")]
public string Path { get; public set; }
    [ResDescriptionAttribute("Desc_AssemblyInstaller_UseNewContext")]
public bool UseNewContext { get; public set; }
    public AssemblyInstaller(string fileName, String[] commandLine);
    public AssemblyInstaller(Assembly assembly, String[] commandLine);
    private static AssemblyInstaller();
    public Assembly get_Assembly();
    public void set_Assembly(Assembly value);
    public String[] get_CommandLine();
    public void set_CommandLine(String[] value);
    public virtual string get_HelpText();
    public string get_Path();
    public void set_Path(string value);
    public bool get_UseNewContext();
    public void set_UseNewContext(bool value);
    public static void CheckIfInstallable(string assemblyName);
    public virtual void Commit(IDictionary savedState);
    public virtual void Install(IDictionary savedState);
    public virtual void Rollback(IDictionary savedState);
    public virtual void Uninstall(IDictionary savedState);
}
public abstract class System.Configuration.Install.ComponentInstaller : Installer {
    public abstract virtual void CopyFromComponent(IComponent component);
    public virtual bool IsEquivalentInstaller(ComponentInstaller otherInstaller);
}
[GuidAttribute("1E233FE7-C16D-4512-8C3B-2E9988F08D38")]
[InterfaceTypeAttribute("1")]
public interface System.Configuration.Install.IManagedInstaller {
    public abstract virtual int ManagedInstall(string commandLine, int hInstall);
}
public class System.Configuration.Install.InstallContext : object {
    public StringDictionary Parameters { get; }
    public InstallContext(string logFilePath, String[] commandLine);
    public StringDictionary get_Parameters();
    public bool IsParameterTrue(string paramName);
    public void LogMessage(string message);
    protected static StringDictionary ParseCommandLine(String[] args);
}
[DefaultEventAttribute("AfterInstall")]
public class System.Configuration.Install.Installer : Component {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public InstallContext Context { get; public set; }
    [ResDescriptionAttribute("Desc_Installer_HelpText")]
public string HelpText { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public InstallerCollection Installers { get; }
    [BrowsableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[TypeConverterAttribute("System.Configuration.Install.InstallerParentConverter")]
[ResDescriptionAttribute("Desc_Installer_Parent")]
public Installer Parent { get; public set; }
    public InstallContext get_Context();
    public void set_Context(InstallContext value);
    public virtual string get_HelpText();
    public InstallerCollection get_Installers();
    public Installer get_Parent();
    public void set_Parent(Installer value);
    public void add_Committed(InstallEventHandler value);
    public void remove_Committed(InstallEventHandler value);
    public void add_AfterInstall(InstallEventHandler value);
    public void remove_AfterInstall(InstallEventHandler value);
    public void add_AfterRollback(InstallEventHandler value);
    public void remove_AfterRollback(InstallEventHandler value);
    public void add_AfterUninstall(InstallEventHandler value);
    public void remove_AfterUninstall(InstallEventHandler value);
    public void add_Committing(InstallEventHandler value);
    public void remove_Committing(InstallEventHandler value);
    public void add_BeforeInstall(InstallEventHandler value);
    public void remove_BeforeInstall(InstallEventHandler value);
    public void add_BeforeRollback(InstallEventHandler value);
    public void remove_BeforeRollback(InstallEventHandler value);
    public void add_BeforeUninstall(InstallEventHandler value);
    public void remove_BeforeUninstall(InstallEventHandler value);
    public virtual void Commit(IDictionary savedState);
    public virtual void Install(IDictionary stateSaver);
    protected virtual void OnCommitted(IDictionary savedState);
    protected virtual void OnAfterInstall(IDictionary savedState);
    protected virtual void OnAfterRollback(IDictionary savedState);
    protected virtual void OnAfterUninstall(IDictionary savedState);
    protected virtual void OnCommitting(IDictionary savedState);
    protected virtual void OnBeforeInstall(IDictionary savedState);
    protected virtual void OnBeforeRollback(IDictionary savedState);
    protected virtual void OnBeforeUninstall(IDictionary savedState);
    public virtual void Rollback(IDictionary savedState);
    public virtual void Uninstall(IDictionary savedState);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.Install.InstallerCollection : CollectionBase {
    public Installer Item { get; public set; }
    public Installer get_Item(int index);
    public void set_Item(int index, Installer value);
    public int Add(Installer value);
    public void AddRange(InstallerCollection value);
    public void AddRange(Installer[] value);
    public bool Contains(Installer value);
    public void CopyTo(Installer[] array, int index);
    public int IndexOf(Installer value);
    public void Insert(int index, Installer value);
    public void Remove(Installer value);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
}
internal class System.Configuration.Install.InstallerParentConverter : ReferenceConverter {
    public InstallerParentConverter(Type type);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public class System.Configuration.Install.InstallEventArgs : EventArgs {
    public IDictionary SavedState { get; }
    public InstallEventArgs(IDictionary savedState);
    public IDictionary get_SavedState();
}
public class System.Configuration.Install.InstallEventHandler : MulticastDelegate {
    public InstallEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InstallEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InstallEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Configuration.Install.InstallException : SystemException {
    public InstallException(string message);
    public InstallException(string message, Exception innerException);
    protected InstallException(SerializationInfo info, StreamingContext context);
}
[ComVisibleAttribute("True")]
[GuidAttribute("42EB0342-0393-448f-84AA-D4BEB0283595")]
public class System.Configuration.Install.ManagedInstallerClass : object {
    private sealed virtual override int System.Configuration.Install.IManagedInstaller.ManagedInstall(string argString, int hInstall);
    public static void InstallHelper(String[] args);
}
[AttributeUsageAttribute("32767")]
internal class System.Configuration.Install.ResDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public ResDescriptionAttribute(string description);
    public virtual string get_Description();
}
public class System.Configuration.Install.TransactedInstaller : Installer {
    public virtual void Install(IDictionary savedState);
    public virtual void Uninstall(IDictionary savedState);
}
public enum System.Configuration.Install.UninstallAction : Enum {
    public int value__;
    public static UninstallAction Remove;
    public static UninstallAction NoAction;
}
public class System.Diagnostics.EventLogInstaller : ComponentInstaller {
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ComVisibleAttribute("False")]
[ResDescriptionAttribute("Desc_CategoryResourceFile")]
public string CategoryResourceFile { get; public set; }
    [ComVisibleAttribute("False")]
[ResDescriptionAttribute("Desc_CategoryCount")]
public int CategoryCount { get; public set; }
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResDescriptionAttribute("Desc_Log")]
public string Log { get; public set; }
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ComVisibleAttribute("False")]
[ResDescriptionAttribute("Desc_MessageResourceFile")]
public string MessageResourceFile { get; public set; }
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.FileNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ComVisibleAttribute("False")]
[ResDescriptionAttribute("Desc_ParameterResourceFile")]
public string ParameterResourceFile { get; public set; }
    [TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ResDescriptionAttribute("Desc_Source")]
public string Source { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResDescriptionAttribute("Desc_UninstallAction")]
public UninstallAction UninstallAction { get; public set; }
    public string get_CategoryResourceFile();
    public void set_CategoryResourceFile(string value);
    public int get_CategoryCount();
    public void set_CategoryCount(int value);
    public string get_Log();
    public void set_Log(string value);
    public string get_MessageResourceFile();
    public void set_MessageResourceFile(string value);
    public string get_ParameterResourceFile();
    public void set_ParameterResourceFile(string value);
    public string get_Source();
    public void set_Source(string value);
    public UninstallAction get_UninstallAction();
    public void set_UninstallAction(UninstallAction value);
    public virtual void CopyFromComponent(IComponent component);
    public virtual void Install(IDictionary stateSaver);
    public virtual bool IsEquivalentInstaller(ComponentInstaller otherInstaller);
    public virtual void Rollback(IDictionary savedState);
    public virtual void Uninstall(IDictionary savedState);
}
public class System.Diagnostics.PerformanceCounterInstaller : ComponentInstaller {
    [DefaultValueAttribute("")]
[ResDescriptionAttribute("PCCategoryName")]
[TypeConverterAttribute("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string CategoryName { get; public set; }
    [DefaultValueAttribute("")]
[ResDescriptionAttribute("PCI_CategoryHelp")]
public string CategoryHelp { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResDescriptionAttribute("PCI_IsMultiInstance")]
[ComVisibleAttribute("False")]
public PerformanceCounterCategoryType CategoryType { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[ResDescriptionAttribute("PCI_Counters")]
public CounterCreationDataCollection Counters { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResDescriptionAttribute("PCI_UninstallAction")]
public UninstallAction UninstallAction { get; public set; }
    public string get_CategoryName();
    public void set_CategoryName(string value);
    public string get_CategoryHelp();
    public void set_CategoryHelp(string value);
    public PerformanceCounterCategoryType get_CategoryType();
    public void set_CategoryType(PerformanceCounterCategoryType value);
    public CounterCreationDataCollection get_Counters();
    public UninstallAction get_UninstallAction();
    public void set_UninstallAction(UninstallAction value);
    public virtual void CopyFromComponent(IComponent component);
    public virtual void Install(IDictionary stateSaver);
    public virtual void Rollback(IDictionary savedState);
    public virtual void Uninstall(IDictionary savedState);
}
