public class System.Device.Location.CivicAddress : object {
    public static CivicAddress Unknown;
    public string AddressLine1 { get; public set; }
    public string AddressLine2 { get; public set; }
    public string Building { get; public set; }
    public string City { get; public set; }
    public string CountryRegion { get; public set; }
    public string FloorLevel { get; public set; }
    public string PostalCode { get; public set; }
    public string StateProvince { get; public set; }
    public bool IsUnknown { get; }
    public CivicAddress(string addressLine1, string addressLine2, string building, string city, string countryRegion, string floorLevel, string postalCode, string stateProvince);
    private static CivicAddress();
    [CompilerGeneratedAttribute]
public string get_AddressLine1();
    [CompilerGeneratedAttribute]
public void set_AddressLine1(string value);
    [CompilerGeneratedAttribute]
public string get_AddressLine2();
    [CompilerGeneratedAttribute]
public void set_AddressLine2(string value);
    [CompilerGeneratedAttribute]
public string get_Building();
    [CompilerGeneratedAttribute]
public void set_Building(string value);
    [CompilerGeneratedAttribute]
public string get_City();
    [CompilerGeneratedAttribute]
public void set_City(string value);
    [CompilerGeneratedAttribute]
public string get_CountryRegion();
    [CompilerGeneratedAttribute]
public void set_CountryRegion(string value);
    [CompilerGeneratedAttribute]
public string get_FloorLevel();
    [CompilerGeneratedAttribute]
public void set_FloorLevel(string value);
    [CompilerGeneratedAttribute]
public string get_PostalCode();
    [CompilerGeneratedAttribute]
public void set_PostalCode(string value);
    [CompilerGeneratedAttribute]
public string get_StateProvince();
    [CompilerGeneratedAttribute]
public void set_StateProvince(string value);
    public bool get_IsUnknown();
}
public class System.Device.Location.CivicAddressResolver : object {
    public sealed virtual CivicAddress ResolveAddress(GeoCoordinate coordinate);
    public sealed virtual void ResolveAddressAsync(GeoCoordinate coordinate);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ResolveAddressCompleted(EventHandler`1<ResolveAddressCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ResolveAddressCompleted(EventHandler`1<ResolveAddressCompletedEventArgs> value);
}
public class System.Device.Location.GeoCoordinate : object {
    public static GeoCoordinate Unknown;
    public double Latitude { get; public set; }
    public double Longitude { get; public set; }
    public double Altitude { get; public set; }
    public double HorizontalAccuracy { get; public set; }
    public double VerticalAccuracy { get; public set; }
    public double Speed { get; public set; }
    public double Course { get; public set; }
    public bool IsUnknown { get; }
    public GeoCoordinate(double latitude, double longitude);
    public GeoCoordinate(double latitude, double longitude, double altitude);
    public GeoCoordinate(double latitude, double longitude, double altitude, double horizontalAccuracy, double verticalAccuracy, double speed, double course);
    private static GeoCoordinate();
    public double get_Latitude();
    public void set_Latitude(double value);
    public double get_Longitude();
    public void set_Longitude(double value);
    public double get_Altitude();
    public void set_Altitude(double value);
    public double get_HorizontalAccuracy();
    public void set_HorizontalAccuracy(double value);
    public double get_VerticalAccuracy();
    public void set_VerticalAccuracy(double value);
    public double get_Speed();
    public void set_Speed(double value);
    public double get_Course();
    public void set_Course(double value);
    public bool get_IsUnknown();
    public double GetDistanceTo(GeoCoordinate other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual string ToString();
    public sealed virtual bool Equals(GeoCoordinate other);
    public static bool op_Equality(GeoCoordinate left, GeoCoordinate right);
    public static bool op_Inequality(GeoCoordinate left, GeoCoordinate right);
}
[SecurityCriticalAttribute]
public class System.Device.Location.GeoCoordinateWatcher : object {
    public GeoPositionAccuracy DesiredAccuracy { get; private set; }
    public double MovementThreshold { get; public set; }
    public GeoPositionPermission Permission { get; }
    public GeoPosition`1<GeoCoordinate> Position { get; }
    public GeoPositionStatus Status { get; }
    public GeoCoordinateWatcher(GeoPositionAccuracy desiredAccuracy);
    public GeoPositionAccuracy get_DesiredAccuracy();
    private void set_DesiredAccuracy(GeoPositionAccuracy value);
    public void set_MovementThreshold(double value);
    public double get_MovementThreshold();
    public GeoPositionPermission get_Permission();
    [SecuritySafeCriticalAttribute]
public sealed virtual GeoPosition`1<GeoCoordinate> get_Position();
    [SecuritySafeCriticalAttribute]
public sealed virtual GeoPositionStatus get_Status();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Start();
    [SecuritySafeCriticalAttribute]
public sealed virtual void Start(bool suppressPermissionPrompt);
    [SecuritySafeCriticalAttribute]
public sealed virtual bool TryStart(bool suppressPermissionPrompt, TimeSpan timeout);
    [SecuritySafeCriticalAttribute]
public sealed virtual void Stop();
    protected void OnPositionChanged(GeoPositionChangedEventArgs`1<GeoCoordinate> e);
    protected void OnPositionStatusChanged(GeoPositionStatusChangedEventArgs e);
    protected void OnPropertyChanged(string propertyName);
    [CompilerGeneratedAttribute]
public void add_PositionChanged(EventHandler`1<GeoPositionChangedEventArgs`1<GeoCoordinate>> value);
    [CompilerGeneratedAttribute]
public void remove_PositionChanged(EventHandler`1<GeoPositionChangedEventArgs`1<GeoCoordinate>> value);
    [CompilerGeneratedAttribute]
public void add_StatusChanged(EventHandler`1<GeoPositionStatusChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_StatusChanged(EventHandler`1<GeoPositionStatusChangedEventArgs> value);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(PropertyChangedEventHandler value);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(PropertyChangedEventHandler value);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.Device.Location.IGeoPositionWatcher<System.Device.Location.GeoCoordinate>.add_PositionChanged(EventHandler`1<GeoPositionChangedEventArgs`1<GeoCoordinate>> value);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.Device.Location.IGeoPositionWatcher<System.Device.Location.GeoCoordinate>.remove_PositionChanged(EventHandler`1<GeoPositionChangedEventArgs`1<GeoCoordinate>> value);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.Device.Location.IGeoPositionWatcher<System.Device.Location.GeoCoordinate>.add_StatusChanged(EventHandler`1<GeoPositionStatusChangedEventArgs> value);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.Device.Location.IGeoPositionWatcher<System.Device.Location.GeoCoordinate>.remove_StatusChanged(EventHandler`1<GeoPositionStatusChangedEventArgs> value);
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
    [SecuritySafeCriticalAttribute]
protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
}
public class System.Device.Location.GeoPosition`1 : object {
    public T Location { get; public set; }
    public DateTimeOffset Timestamp { get; public set; }
    public GeoPosition`1(DateTimeOffset timestamp, T position);
    public T get_Location();
    public void set_Location(T value);
    public DateTimeOffset get_Timestamp();
    public void set_Timestamp(DateTimeOffset value);
}
public enum System.Device.Location.GeoPositionAccuracy : Enum {
    public int value__;
    public static GeoPositionAccuracy Default;
    public static GeoPositionAccuracy High;
}
public class System.Device.Location.GeoPositionChangedEventArgs`1 : EventArgs {
    public GeoPosition`1<T> Position { get; private set; }
    public GeoPositionChangedEventArgs`1(GeoPosition`1<T> position);
    [CompilerGeneratedAttribute]
public GeoPosition`1<T> get_Position();
    [CompilerGeneratedAttribute]
private void set_Position(GeoPosition`1<T> value);
}
public enum System.Device.Location.GeoPositionPermission : Enum {
    public int value__;
    public static GeoPositionPermission Unknown;
    public static GeoPositionPermission Granted;
    public static GeoPositionPermission Denied;
}
public enum System.Device.Location.GeoPositionStatus : Enum {
    public int value__;
    public static GeoPositionStatus Ready;
    public static GeoPositionStatus Initializing;
    public static GeoPositionStatus NoData;
    public static GeoPositionStatus Disabled;
}
public class System.Device.Location.GeoPositionStatusChangedEventArgs : EventArgs {
    public GeoPositionStatus Status { get; private set; }
    public GeoPositionStatusChangedEventArgs(GeoPositionStatus status);
    [CompilerGeneratedAttribute]
public GeoPositionStatus get_Status();
    [CompilerGeneratedAttribute]
private void set_Status(GeoPositionStatus value);
}
public interface System.Device.Location.ICivicAddressResolver {
    public abstract virtual CivicAddress ResolveAddress(GeoCoordinate coordinate);
    public abstract virtual void ResolveAddressAsync(GeoCoordinate coordinate);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResolveAddressCompleted(EventHandler`1<ResolveAddressCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResolveAddressCompleted(EventHandler`1<ResolveAddressCompletedEventArgs> value);
}
public interface System.Device.Location.IGeoPositionWatcher`1 {
    public GeoPosition`1<T> Position { get; }
    public GeoPositionStatus Status { get; }
    public abstract virtual void Start();
    public abstract virtual void Start(bool suppressPermissionPrompt);
    public abstract virtual bool TryStart(bool suppressPermissionPrompt, TimeSpan timeout);
    public abstract virtual void Stop();
    public abstract virtual GeoPosition`1<T> get_Position();
    [CompilerGeneratedAttribute]
public abstract virtual void add_PositionChanged(EventHandler`1<GeoPositionChangedEventArgs`1<T>> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PositionChanged(EventHandler`1<GeoPositionChangedEventArgs`1<T>> value);
    public abstract virtual GeoPositionStatus get_Status();
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusChanged(EventHandler`1<GeoPositionStatusChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusChanged(EventHandler`1<GeoPositionStatusChangedEventArgs> value);
}
public class System.Device.Location.ResolveAddressCompletedEventArgs : AsyncCompletedEventArgs {
    public CivicAddress Address { get; private set; }
    public ResolveAddressCompletedEventArgs(CivicAddress address, Exception error, bool cancelled, object userState);
    [CompilerGeneratedAttribute]
public CivicAddress get_Address();
    [CompilerGeneratedAttribute]
private void set_Address(CivicAddress value);
}
