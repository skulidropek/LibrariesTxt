internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemThreadingTasksDataflow;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemNetHttp;
    internal static string SystemNetHttpWebRequest;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemRuntimeWindowsRuntime;
    internal static string SystemRuntimeWindowsRuntimeUIXaml;
    internal static string SystemSecurity;
    internal static string SystemServiceModelWeb;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal abstract class System.Dynamic.ArgBuilder : object {
    internal abstract virtual Expression Marshal(Expression parameter);
    internal virtual Expression MarshalToRef(Expression parameter);
    internal virtual Expression UnmarshalFromRef(Expression newValue);
}
internal static class System.Dynamic.Assert : object {
    internal static Exception Unreachable { get; }
    internal static Exception get_Unreachable();
    [ConditionalAttribute("DEBUG")]
internal static void NotNull(object var);
    [ConditionalAttribute("DEBUG")]
internal static void NotNull(object var1, object var2);
    [ConditionalAttribute("DEBUG")]
internal static void NotNull(object var1, object var2, object var3);
    [ConditionalAttribute("DEBUG")]
internal static void NotNull(object var1, object var2, object var3, object var4);
    [ConditionalAttribute("DEBUG")]
internal static void NotEmpty(string str);
    [ConditionalAttribute("DEBUG")]
internal static void NotEmpty(ICollection`1<T> array);
    [ConditionalAttribute("DEBUG")]
internal static void NotNullItems(IEnumerable`1<T> items);
    [ConditionalAttribute("DEBUG")]
internal static void IsTrue(Func`1<bool> predicate);
}
internal class System.Dynamic.BoolArgBuilder : SimpleArgBuilder {
    internal BoolArgBuilder(Type parameterType);
    internal virtual Expression MarshalToRef(Expression parameter);
    internal virtual Expression UnmarshalFromRef(Expression value);
}
internal class System.Dynamic.BoundDispEvent : DynamicObject {
    internal BoundDispEvent(object rcw, Guid sourceIid, int dispid);
    public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object handler, Object& result);
}
[ExtensionAttribute]
internal static class System.Dynamic.CollectionExtensions : object {
    [ExtensionAttribute]
internal static T[] RemoveFirst(T[] array);
    [ExtensionAttribute]
internal static T[] AddFirst(IList`1<T> list, T item);
    [ExtensionAttribute]
internal static T[] ToArray(IList`1<T> list);
    [ExtensionAttribute]
internal static T[] AddLast(IList`1<T> list, T item);
}
internal static class System.Dynamic.ComBinder : object {
    public static bool IsComObject(object value);
    [SecuritySafeCriticalAttribute]
public static bool TryBindGetMember(GetMemberBinder binder, DynamicMetaObject instance, DynamicMetaObject& result, bool delayInvocation);
    public static bool TryBindGetMember(GetMemberBinder binder, DynamicMetaObject instance, DynamicMetaObject& result);
    [SecuritySafeCriticalAttribute]
public static bool TryBindSetMember(SetMemberBinder binder, DynamicMetaObject instance, DynamicMetaObject value, DynamicMetaObject& result);
    [SecuritySafeCriticalAttribute]
public static bool TryBindInvoke(InvokeBinder binder, DynamicMetaObject instance, DynamicMetaObject[] args, DynamicMetaObject& result);
    [SecuritySafeCriticalAttribute]
public static bool TryBindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject instance, DynamicMetaObject[] args, DynamicMetaObject& result);
    [SecuritySafeCriticalAttribute]
public static bool TryBindGetIndex(GetIndexBinder binder, DynamicMetaObject instance, DynamicMetaObject[] args, DynamicMetaObject& result);
    [SecuritySafeCriticalAttribute]
public static bool TryBindSetIndex(SetIndexBinder binder, DynamicMetaObject instance, DynamicMetaObject[] args, DynamicMetaObject value, DynamicMetaObject& result);
    [SecuritySafeCriticalAttribute]
public static bool TryConvert(ConvertBinder binder, DynamicMetaObject instance, DynamicMetaObject& result);
    [SecuritySafeCriticalAttribute]
public static IEnumerable`1<string> GetDynamicMemberNames(object value);
    [SecuritySafeCriticalAttribute]
internal static IList`1<string> GetDynamicDataMemberNames(object value);
    [SecuritySafeCriticalAttribute]
internal static IList`1<KeyValuePair`2<string, object>> GetDynamicDataMembers(object value, IEnumerable`1<string> names);
}
internal static class System.Dynamic.ComBinderHelpers : object {
    internal static bool PreferPut(Type type, bool holdsNull);
    internal static bool IsByRef(DynamicMetaObject mo);
    internal static bool IsStrongBoxArg(DynamicMetaObject o);
    internal static Boolean[] ProcessArgumentsForCom(DynamicMetaObject[]& args);
    internal static BindingRestrictions GetTypeRestrictionForDynamicMetaObject(DynamicMetaObject obj);
}
internal static class System.Dynamic.ComDispIds : object {
    internal static int DISPID_VALUE;
    internal static int DISPID_PROPERTYPUT;
    internal static int DISPID_NEWENUM;
}
internal class System.Dynamic.ComEventDesc : object {
    internal Guid sourceIID;
    internal int dispid;
}
internal class System.Dynamic.ComEventSink : MarshalByRefObject {
    public Type UnderlyingSystemType { get; }
    [SecurityCriticalAttribute]
public static ComEventSink FromRuntimeCallableWrapper(object rcw, Guid sourceIid, bool createIfNotFound);
    public void AddHandler(int dispid, object func);
    [SecurityCriticalAttribute]
public void RemoveHandler(int dispid, object func);
    public object ExecuteHandler(string name, Object[] args);
    public sealed virtual FieldInfo GetField(string name, BindingFlags bindingAttr);
    public sealed virtual FieldInfo[] GetFields(BindingFlags bindingAttr);
    public sealed virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr);
    public sealed virtual MemberInfo[] GetMembers(BindingFlags bindingAttr);
    public sealed virtual MethodInfo GetMethod(string name, BindingFlags bindingAttr);
    public sealed virtual MethodInfo GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    public sealed virtual MethodInfo[] GetMethods(BindingFlags bindingAttr);
    public sealed virtual PropertyInfo GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    public sealed virtual PropertyInfo GetProperty(string name, BindingFlags bindingAttr);
    public sealed virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr);
    public sealed virtual Type get_UnderlyingSystemType();
    public sealed virtual object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
    [SecuritySafeCriticalAttribute]
protected virtual override void Finalize();
}
[SecurityCriticalAttribute]
internal class System.Dynamic.ComEventSinkProxy : RealProxy {
    [SecurityCriticalAttribute]
public ComEventSinkProxy(ComEventSink sink, Guid sinkIid);
    private static ComEventSinkProxy();
    [SecurityCriticalAttribute]
public virtual IntPtr SupportsInterface(Guid& iid);
    [SecurityCriticalAttribute]
public virtual IMessage Invoke(IMessage msg);
}
internal class System.Dynamic.ComEventSinksContainer : List`1<ComEventSink> {
    private static ComEventSinksContainer();
    [SecurityCriticalAttribute]
public static ComEventSinksContainer FromRuntimeCallableWrapper(object rcw, bool createIfNotFound);
    [SecuritySafeCriticalAttribute]
public sealed virtual void Dispose();
    [SecuritySafeCriticalAttribute]
protected virtual override void Finalize();
}
internal class System.Dynamic.ComFallbackMetaObject : DynamicMetaObject {
    internal ComFallbackMetaObject(Expression expression, BindingRestrictions restrictions, object arg);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    protected virtual ComUnwrappedMetaObject UnwrapSelf();
}
internal static class System.Dynamic.ComHresults : object {
    internal static int S_OK;
    internal static int CONNECT_E_NOCONNECTION;
    internal static int DISP_E_UNKNOWNINTERFACE;
    internal static int DISP_E_MEMBERNOTFOUND;
    internal static int DISP_E_PARAMNOTFOUND;
    internal static int DISP_E_TYPEMISMATCH;
    internal static int DISP_E_UNKNOWNNAME;
    internal static int DISP_E_NONAMEDARGS;
    internal static int DISP_E_BADVARTYPE;
    internal static int DISP_E_EXCEPTION;
    internal static int DISP_E_OVERFLOW;
    internal static int DISP_E_BADINDEX;
    internal static int DISP_E_UNKNOWNLCID;
    internal static int DISP_E_ARRAYISLOCKED;
    internal static int DISP_E_BADPARAMCOUNT;
    internal static int DISP_E_PARAMNOTOPTIONAL;
    internal static int E_NOINTERFACE;
    internal static int E_FAIL;
    internal static int TYPE_E_LIBNOTREGISTERED;
    internal static bool IsSuccess(int hresult);
}
internal class System.Dynamic.ComInvokeAction : InvokeBinder {
    internal ComInvokeAction(CallInfo callInfo);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public virtual DynamicMetaObject FallbackInvoke(DynamicMetaObject target, DynamicMetaObject[] args, DynamicMetaObject errorSuggestion);
}
internal class System.Dynamic.ComInvokeBinder : object {
    internal ComInvokeBinder(CallInfo callInfo, DynamicMetaObject[] args, Boolean[] isByRef, BindingRestrictions restrictions, Expression method, Expression dispatch, ComMethodDesc methodDesc);
    internal DynamicMetaObject Invoke();
}
internal class System.Dynamic.ComMetaObject : DynamicMetaObject {
    internal ComMetaObject(Expression expression, BindingRestrictions restrictions, object arg);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
}
internal class System.Dynamic.ComMethodDesc : object {
    internal INVOKEKIND InvokeKind;
    public string Name { get; }
    public int DispId { get; }
    public bool IsPropertyGet { get; }
    public bool IsDataMember { get; }
    public bool IsPropertyPut { get; }
    public bool IsPropertyPutRef { get; }
    internal int ParamCount { get; }
    internal ComMethodDesc(string name, int dispId);
    internal ComMethodDesc(string name, int dispId, INVOKEKIND invkind);
    internal ComMethodDesc(ITypeInfo typeInfo, FUNCDESC funcDesc);
    public string get_Name();
    public int get_DispId();
    public bool get_IsPropertyGet();
    public bool get_IsDataMember();
    public bool get_IsPropertyPut();
    public bool get_IsPropertyPutRef();
    internal int get_ParamCount();
}
internal class System.Dynamic.ComObject : object {
    internal object RuntimeCallableWrapper { get; }
    internal ComObject(object rcw);
    private static ComObject();
    internal object get_RuntimeCallableWrapper();
    [SecurityCriticalAttribute]
public static ComObject ObjectToComObject(object rcw);
    internal static MemberExpression RcwFromComObject(Expression comObject);
    internal static MethodCallExpression RcwToComObject(Expression rcw);
    internal virtual IList`1<string> GetMemberNames(bool dataOnly);
    internal virtual IList`1<KeyValuePair`2<string, object>> GetMembers(IEnumerable`1<string> names);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    internal static bool IsComObject(object obj);
}
internal static class System.Dynamic.ComRuntimeHelpers : object {
    [SecurityCriticalAttribute]
public static void CheckThrowException(int hresult, ExcepInfo& excepInfo, UInt32 argErr, string message);
    internal static void GetInfoFromType(ITypeInfo typeInfo, String& name, String& documentation);
    internal static string GetNameOfMethod(ITypeInfo typeInfo, int memid);
    internal static string GetNameOfLib(ITypeLib typeLib);
    internal static string GetNameOfType(ITypeInfo typeInfo);
    [SecurityCriticalAttribute]
internal static ITypeInfo GetITypeInfoFromIDispatch(IDispatch dispatch, bool throwIfMissingExpectedTypeInfo);
    [SecurityCriticalAttribute]
internal static TYPEATTR GetTypeAttrForTypeInfo(ITypeInfo typeInfo);
    [SecurityCriticalAttribute]
internal static TYPELIBATTR GetTypeAttrForTypeLib(ITypeLib typeLib);
    public static BoundDispEvent CreateComEvent(object rcw, Guid sourceIid, int dispid);
    public static DispCallable CreateDispCallable(IDispatchComObject dispatch, ComMethodDesc method);
}
internal class System.Dynamic.ComTypeClassDesc : ComTypeDesc {
    [SecurityCriticalAttribute]
internal ComTypeClassDesc(ITypeInfo typeInfo);
    internal bool Implements(string itfName, bool isSourceItf);
}
internal class System.Dynamic.ComTypeDesc : object {
    internal static Dictionary`2<string, ComEventDesc> EmptyEvents { get; }
    internal Hashtable Funcs { get; internal set; }
    unknown Hashtable Puts {internal set; }
    unknown Hashtable PutRefs {internal set; }
    internal Dictionary`2<string, ComEventDesc> Events { get; internal set; }
    internal string TypeName { get; }
    internal Guid Guid { get; internal set; }
    internal ComMethodDesc GetItem { get; }
    internal ComMethodDesc SetItem { get; }
    internal ComTypeDesc(ITypeInfo typeInfo);
    private static ComTypeDesc();
    [SecurityCriticalAttribute]
internal static ComTypeDesc FromITypeInfo(ITypeInfo typeInfo, TYPEATTR typeAttr);
    internal static ComTypeDesc CreateEmptyTypeDesc();
    internal static Dictionary`2<string, ComEventDesc> get_EmptyEvents();
    internal Hashtable get_Funcs();
    internal void set_Funcs(Hashtable value);
    internal void set_Puts(Hashtable value);
    internal void set_PutRefs(Hashtable value);
    internal Dictionary`2<string, ComEventDesc> get_Events();
    internal void set_Events(Dictionary`2<string, ComEventDesc> value);
    internal bool TryGetFunc(string name, ComMethodDesc& method);
    internal void AddFunc(string name, ComMethodDesc method);
    internal bool TryGetPut(string name, ComMethodDesc& method);
    internal void AddPut(string name, ComMethodDesc method);
    internal bool TryGetPutRef(string name, ComMethodDesc& method);
    internal void AddPutRef(string name, ComMethodDesc method);
    internal bool TryGetEvent(string name, ComEventDesc& event);
    internal String[] GetMemberNames(bool dataOnly);
    internal string get_TypeName();
    internal Guid get_Guid();
    internal void set_Guid(Guid value);
    internal ComMethodDesc get_GetItem();
    internal void EnsureGetItem(ComMethodDesc candidate);
    internal ComMethodDesc get_SetItem();
    internal void EnsureSetItem(ComMethodDesc candidate);
}
internal class System.Dynamic.ComTypeEnumDesc : ComTypeDesc {
    internal ComTypeEnumDesc(ITypeInfo typeInfo);
    public virtual string ToString();
}
internal class System.Dynamic.ComTypeLibDesc : object {
    private static ComTypeLibDesc();
    public virtual string ToString();
    [SecurityCriticalAttribute]
internal static ComTypeLibDesc GetFromTypeLib(ITypeLib typeLib);
    internal ComTypeClassDesc GetCoClassForInterface(string itfName);
}
internal class System.Dynamic.ComUnwrappedMetaObject : DynamicMetaObject {
    internal ComUnwrappedMetaObject(Expression expression, BindingRestrictions restrictions, object value);
}
internal static class System.Dynamic.ContractUtils : object {
    internal static void Requires(bool precondition, string paramName);
    internal static void Requires(bool precondition, string paramName, string message);
    internal static void RequiresNotNull(object value, string paramName);
}
internal class System.Dynamic.ConversionArgBuilder : ArgBuilder {
    internal ConversionArgBuilder(Type parameterType, SimpleArgBuilder innerBuilder);
    internal virtual Expression Marshal(Expression parameter);
    internal virtual Expression MarshalToRef(Expression parameter);
}
internal class System.Dynamic.ConvertArgBuilder : SimpleArgBuilder {
    internal ConvertArgBuilder(Type parameterType, Type marshalType);
    internal virtual Expression Marshal(Expression parameter);
    internal virtual Expression UnmarshalFromRef(Expression newValue);
}
internal class System.Dynamic.ConvertibleArgBuilder : ArgBuilder {
    internal virtual Expression Marshal(Expression parameter);
    internal virtual Expression MarshalToRef(Expression parameter);
}
internal class System.Dynamic.CurrencyArgBuilder : SimpleArgBuilder {
    internal CurrencyArgBuilder(Type parameterType);
    internal virtual Expression Marshal(Expression parameter);
    internal virtual Expression MarshalToRef(Expression parameter);
    internal virtual Expression UnmarshalFromRef(Expression value);
}
internal class System.Dynamic.DateTimeArgBuilder : SimpleArgBuilder {
    internal DateTimeArgBuilder(Type parameterType);
    internal virtual Expression MarshalToRef(Expression parameter);
    internal virtual Expression UnmarshalFromRef(Expression value);
}
internal class System.Dynamic.DispatchArgBuilder : SimpleArgBuilder {
    internal DispatchArgBuilder(Type parameterType);
    internal virtual Expression Marshal(Expression parameter);
    internal virtual Expression MarshalToRef(Expression parameter);
    internal virtual Expression UnmarshalFromRef(Expression value);
}
internal class System.Dynamic.DispCallable : object {
    public IDispatchComObject DispatchComObject { get; }
    public IDispatch DispatchObject { get; }
    public string MemberName { get; }
    public int DispId { get; }
    internal DispCallable(IDispatchComObject dispatch, string memberName, int dispId);
    public virtual string ToString();
    public IDispatchComObject get_DispatchComObject();
    public IDispatch get_DispatchObject();
    public string get_MemberName();
    public int get_DispId();
    public sealed virtual DynamicMetaObject GetMetaObject(Expression parameter);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Dynamic.DispCallableMetaObject : DynamicMetaObject {
    internal DispCallableMetaObject(Expression expression, DispCallable callable);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args);
    [SecuritySafeCriticalAttribute]
public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
}
internal static class System.Dynamic.Error : object {
    internal static Exception COMObjectDoesNotSupportEvents();
    internal static Exception COMObjectDoesNotSupportSourceInterface();
    internal static Exception SetComObjectDataFailed();
    internal static Exception MethodShouldNotBeCalled();
    internal static Exception UnexpectedVarEnum(object p0);
    internal static Exception DispBadParamCount(object p0);
    internal static Exception DispMemberNotFound(object p0);
    internal static Exception DispNoNamedArgs(object p0);
    internal static Exception DispOverflow(object p0);
    internal static Exception DispTypeMismatch(object p0, object p1);
    internal static Exception DispParamNotOptional(object p0);
    internal static Exception CannotRetrieveTypeInformation();
    internal static Exception GetIDsOfNamesInvalid(object p0);
    internal static Exception UnsupportedEnumType();
    internal static Exception UnsupportedHandlerType();
    internal static Exception CouldNotGetDispId(object p0, object p1);
    internal static Exception AmbiguousConversion(object p0, object p1);
    internal static Exception VariantGetAccessorNYI(object p0);
    internal static Exception ArgumentNull(string paramName);
    internal static Exception ArgumentOutOfRange(string paramName);
    internal static Exception NotImplemented();
    internal static Exception NotSupported();
}
internal class System.Dynamic.ErrorArgBuilder : SimpleArgBuilder {
    internal ErrorArgBuilder(Type parameterType);
    internal virtual Expression Marshal(Expression parameter);
    internal virtual Expression UnmarshalFromRef(Expression value);
}
internal class System.Dynamic.ExcepInfo : ValueType {
    private short wCode;
    private short wReserved;
    private IntPtr bstrSource;
    private IntPtr bstrDescription;
    private IntPtr bstrHelpFile;
    private int dwHelpContext;
    private IntPtr pvReserved;
    private IntPtr pfnDeferredFillIn;
    private int scode;
    internal void Dummy();
    [SecurityCriticalAttribute]
internal Exception GetException();
}
internal static class System.Dynamic.Helpers : object {
    internal static Expression Convert(Expression expression, Type type);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("00020400-0000-0000-C000-000000000046")]
internal interface System.Dynamic.IDispatch {
    public abstract virtual int TryGetTypeInfoCount(UInt32& pctinfo);
    public abstract virtual int TryGetTypeInfo(UInt32 iTInfo, int lcid, IntPtr& info);
    public abstract virtual int TryGetIDsOfNames(Guid& iid, String[] names, UInt32 cNames, int lcid, Int32[] rgDispId);
    public abstract virtual int TryInvoke(int dispIdMember, Guid& riid, int lcid, INVOKEKIND wFlags, DISPPARAMS& pDispParams, Object& VarResult, EXCEPINFO& pExcepInfo, UInt32& puArgErr);
}
internal class System.Dynamic.IDispatchComObject : ComObject {
    public ComTypeDesc ComTypeDesc { get; }
    public IDispatch DispatchObject { get; }
    internal IDispatchComObject(IDispatch rcw);
    private static IDispatchComObject();
    public virtual string ToString();
    public ComTypeDesc get_ComTypeDesc();
    public IDispatch get_DispatchObject();
    internal bool TryGetGetItem(ComMethodDesc& value);
    internal bool TryGetSetItem(ComMethodDesc& value);
    internal bool TryGetMemberMethod(string name, ComMethodDesc& method);
    internal bool TryGetMemberEvent(string name, ComEventDesc& event);
    internal bool TryGetMemberMethodExplicit(string name, ComMethodDesc& method);
    internal bool TryGetPropertySetterExplicit(string name, ComMethodDesc& method, Type limitType, bool holdsNull);
    internal virtual IList`1<string> GetMemberNames(bool dataOnly);
    internal virtual IList`1<KeyValuePair`2<string, object>> GetMembers(IEnumerable`1<string> names);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    internal bool TryGetPropertySetter(string name, ComMethodDesc& method, Type limitType, bool holdsNull);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("A6EF9860-C720-11D0-9337-00A0C90DCAA9")]
internal interface System.Dynamic.IDispatchEx {
    public abstract virtual int DeleteMemberByDispID(int id);
    public abstract virtual int DeleteMemberByName(string bstrName, UInt32 grfdex);
    public abstract virtual int GetDispID(string bstrName, UInt32 grfdex, Int32& pid);
    public abstract virtual int GetMemberName(int id, String& pbstrName);
    public abstract virtual void GetMemberProperties(int id, UInt32 grfdexFetch, UInt32& pgrfdex);
    public abstract virtual void GetNameSpaceParent(Object& ppunk);
    public abstract virtual void GetNextDispID(UInt32 grfdex, int id, Int32& pid);
    public abstract virtual void InvokeEx(int id, UInt32 lcid, UInt32 wFlags, DISPPARAMS& pdp, Object& pVarRes, EXCEPINFO& pei, IServiceProvider pspCaller);
}
[InterfaceTypeAttribute("2")]
[GuidAttribute("00020400-0000-0000-C000-000000000046")]
internal interface System.Dynamic.IDispatchForReflection {
}
internal class System.Dynamic.IDispatchMetaObject : ComFallbackMetaObject {
    internal IDispatchMetaObject(Expression expression, IDispatchComObject self);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    internal static BindingRestrictions IDispatchRestriction(Expression expr, ComTypeDesc typeDesc);
    protected virtual ComUnwrappedMetaObject UnwrapSelf();
}
internal enum System.Dynamic.IDispatchMethodIndices : Enum {
    public int value__;
    public static IDispatchMethodIndices IUnknown_QueryInterface;
    public static IDispatchMethodIndices IUnknown_AddRef;
    public static IDispatchMethodIndices IUnknown_Release;
    public static IDispatchMethodIndices IDispatch_GetTypeInfoCount;
    public static IDispatchMethodIndices IDispatch_GetTypeInfo;
    public static IDispatchMethodIndices IDispatch_GetIDsOfNames;
    public static IDispatchMethodIndices IDispatch_Invoke;
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("B196B283-BAB4-101A-B69C-00AA00341D07")]
internal interface System.Dynamic.IProvideClassInfo {
    public abstract virtual void GetClassInfo(IntPtr& info);
}
internal static class System.Dynamic.NativeMethods : object {
    internal static void VariantClear(IntPtr variant);
}
internal class System.Dynamic.NullArgBuilder : ArgBuilder {
    internal virtual Expression Marshal(Expression parameter);
}
internal class System.Dynamic.SimpleArgBuilder : ArgBuilder {
    internal Type ParameterType { get; }
    internal SimpleArgBuilder(Type parameterType);
    internal Type get_ParameterType();
    internal virtual Expression Marshal(Expression parameter);
    internal virtual Expression UnmarshalFromRef(Expression newValue);
}
internal class System.Dynamic.SplatCallSite : object {
    internal object _callable;
    internal CallSite`1<Func`4<CallSite, object, Object[], object>> _site;
    internal SplatCallSite(object callable);
    internal object Invoke(Object[] args);
}
internal class System.Dynamic.SplatInvokeBinder : CallSiteBinder {
    internal static SplatInvokeBinder Instance;
    private static SplatInvokeBinder();
    public virtual Expression Bind(Object[] args, ReadOnlyCollection`1<ParameterExpression> parameters, LabelTarget returnLabel);
}
internal class System.Dynamic.SR : object {
    internal static string InvalidArgumentValue;
    internal static string ComObjectExpected;
    internal static string CannotCall;
    internal static string COMObjectDoesNotSupportEvents;
    internal static string COMObjectDoesNotSupportSourceInterface;
    internal static string SetComObjectDataFailed;
    internal static string MethodShouldNotBeCalled;
    internal static string UnexpectedVarEnum;
    internal static string DispBadParamCount;
    internal static string DispMemberNotFound;
    internal static string DispNoNamedArgs;
    internal static string DispOverflow;
    internal static string DispTypeMismatch;
    internal static string DispParamNotOptional;
    internal static string CannotRetrieveTypeInformation;
    internal static string GetIDsOfNamesInvalid;
    internal static string UnsupportedEnumType;
    internal static string UnsupportedHandlerType;
    internal static string CouldNotGetDispId;
    internal static string AmbiguousConversion;
    internal static string VariantGetAccessorNYI;
    public static ResourceManager Resources { get; }
    private static SR();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class System.Dynamic.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Dynamic.SRDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
internal class System.Dynamic.StringArgBuilder : SimpleArgBuilder {
    internal StringArgBuilder(Type parameterType);
    internal virtual Expression Marshal(Expression parameter);
    internal virtual Expression MarshalToRef(Expression parameter);
    internal virtual Expression UnmarshalFromRef(Expression value);
}
internal static class System.Dynamic.Strings : object {
    internal static string InvalidArgumentValue { get; }
    internal static string ComObjectExpected { get; }
    internal static string CannotCall { get; }
    internal static string COMObjectDoesNotSupportEvents { get; }
    internal static string COMObjectDoesNotSupportSourceInterface { get; }
    internal static string SetComObjectDataFailed { get; }
    internal static string MethodShouldNotBeCalled { get; }
    internal static string CannotRetrieveTypeInformation { get; }
    internal static string UnsupportedEnumType { get; }
    internal static string UnsupportedHandlerType { get; }
    internal static string get_InvalidArgumentValue();
    internal static string get_ComObjectExpected();
    internal static string get_CannotCall();
    internal static string get_COMObjectDoesNotSupportEvents();
    internal static string get_COMObjectDoesNotSupportSourceInterface();
    internal static string get_SetComObjectDataFailed();
    internal static string get_MethodShouldNotBeCalled();
    internal static string UnexpectedVarEnum(object p0);
    internal static string DispBadParamCount(object p0);
    internal static string DispMemberNotFound(object p0);
    internal static string DispNoNamedArgs(object p0);
    internal static string DispOverflow(object p0);
    internal static string DispTypeMismatch(object p0, object p1);
    internal static string DispParamNotOptional(object p0);
    internal static string get_CannotRetrieveTypeInformation();
    internal static string GetIDsOfNamesInvalid(object p0);
    internal static string get_UnsupportedEnumType();
    internal static string get_UnsupportedHandlerType();
    internal static string CouldNotGetDispId(object p0, object p1);
    internal static string AmbiguousConversion(object p0, object p1);
    internal static string VariantGetAccessorNYI(object p0);
}
[ExtensionAttribute]
internal static class System.Dynamic.TypeUtils : object {
    internal static MethodAttributes PublicStatic;
    internal static Type GetNonNullableType(Type type);
    [ExtensionAttribute]
internal static bool IsNullableType(Type type);
    internal static bool AreReferenceAssignable(Type dest, Type src);
    internal static bool AreAssignable(Type dest, Type src);
    internal static bool IsImplicitlyConvertible(Type source, Type destination);
    internal static bool IsImplicitlyConvertible(Type source, Type destination, bool considerUserDefined);
    internal static MethodInfo GetUserDefinedCoercionMethod(Type convertFrom, Type convertToType, bool implicitOnly);
    internal static MethodInfo FindConversionOperator(MethodInfo[] methods, Type typeFrom, Type typeTo, bool implicitOnly);
}
internal class System.Dynamic.UnknownArgBuilder : SimpleArgBuilder {
    internal UnknownArgBuilder(Type parameterType);
    internal virtual Expression Marshal(Expression parameter);
    internal virtual Expression MarshalToRef(Expression parameter);
    internal virtual Expression UnmarshalFromRef(Expression value);
}
internal static class System.Dynamic.UnsafeMethods : object {
    internal static IntPtr NullInterfaceId;
    internal static ModuleBuilder DynamicModule { get; }
    [SecurityCriticalAttribute]
private static UnsafeMethods();
    [SecurityCriticalAttribute]
internal static IntPtr ConvertSByteByrefToPtr(SByte& value);
    [SecurityCriticalAttribute]
internal static IntPtr ConvertInt16ByrefToPtr(Int16& value);
    [SecurityCriticalAttribute]
public static IntPtr ConvertInt32ByrefToPtr(Int32& value);
    [SecurityCriticalAttribute]
internal static IntPtr ConvertInt64ByrefToPtr(Int64& value);
    [SecurityCriticalAttribute]
internal static IntPtr ConvertByteByrefToPtr(Byte& value);
    [SecurityCriticalAttribute]
internal static IntPtr ConvertUInt16ByrefToPtr(UInt16& value);
    [SecurityCriticalAttribute]
internal static IntPtr ConvertUInt32ByrefToPtr(UInt32& value);
    [SecurityCriticalAttribute]
internal static IntPtr ConvertUInt64ByrefToPtr(UInt64& value);
    [SecurityCriticalAttribute]
internal static IntPtr ConvertIntPtrByrefToPtr(IntPtr& value);
    [SecurityCriticalAttribute]
internal static IntPtr ConvertUIntPtrByrefToPtr(UIntPtr& value);
    [SecurityCriticalAttribute]
internal static IntPtr ConvertSingleByrefToPtr(Single& value);
    [SecurityCriticalAttribute]
internal static IntPtr ConvertDoubleByrefToPtr(Double& value);
    [SecurityCriticalAttribute]
internal static IntPtr ConvertDecimalByrefToPtr(Decimal& value);
    [SecurityCriticalAttribute]
public static IntPtr ConvertVariantByrefToPtr(Variant& value);
    [SecurityCriticalAttribute]
internal static Variant GetVariantForObject(object obj);
    [SecurityCriticalAttribute]
internal static void InitVariantForObject(object obj, Variant& variant);
    [SecurityCriticalAttribute]
[ObsoleteAttribute("do not use this method", "True")]
public static object GetObjectForVariant(Variant variant);
    [ObsoleteAttribute("do not use this method", "True")]
public static int IUnknownRelease(IntPtr interfacePointer);
    [ObsoleteAttribute("do not use this method", "True")]
public static void IUnknownReleaseNotZero(IntPtr interfacePointer);
    [SecurityCriticalAttribute]
[ObsoleteAttribute("do not use this method", "True")]
public static int IDispatchInvoke(IntPtr dispatchPointer, int memberDispId, INVOKEKIND flags, DISPPARAMS& dispParams, Variant& result, ExcepInfo& excepInfo, UInt32& argErr);
    [ObsoleteAttribute("do not use this method", "True")]
[SecurityCriticalAttribute]
public static IntPtr GetIdsOfNamedParameters(IDispatch dispatch, String[] names, int methodDispId, GCHandle& pinningHandle);
    internal static ModuleBuilder get_DynamicModule();
}
internal class System.Dynamic.VarEnumSelector : object {
    internal VariantBuilder[] VariantBuilders { get; }
    internal VarEnumSelector(Type[] explicitArgTypes);
    private static VarEnumSelector();
    internal VariantBuilder[] get_VariantBuilders();
    internal static Type GetManagedMarshalType(VarEnum varEnum);
}
internal class System.Dynamic.Variant : ValueType {
    private TypeUnion _typeUnion;
    private decimal _decimal;
    public VarEnum VariantType { get; public set; }
    internal bool IsEmpty { get; }
    public sbyte AsI1 { get; public set; }
    public short AsI2 { get; public set; }
    public int AsI4 { get; public set; }
    public long AsI8 { get; public set; }
    public byte AsUi1 { get; public set; }
    public ushort AsUi2 { get; public set; }
    public UInt32 AsUi4 { get; public set; }
    public ulong AsUi8 { get; public set; }
    public IntPtr AsInt { get; public set; }
    public UIntPtr AsUint { get; public set; }
    public bool AsBool { get; public set; }
    public int AsError { get; public set; }
    public float AsR4 { get; public set; }
    public double AsR8 { get; public set; }
    public decimal AsDecimal { get; public set; }
    public decimal AsCy { get; public set; }
    public DateTime AsDate { get; public set; }
    public string AsBstr { get; public set; }
    public object AsUnknown { get; public set; }
    public object AsDispatch { get; public set; }
    public object AsVariant { get; public set; }
    public virtual string ToString();
    internal static bool IsPrimitiveType(VarEnum varEnum);
    [SecurityCriticalAttribute]
public object ToObject();
    [SecurityCriticalAttribute]
public void Clear();
    public VarEnum get_VariantType();
    public void set_VariantType(VarEnum value);
    internal bool get_IsEmpty();
    public void SetAsNull();
    [SecurityCriticalAttribute]
public void SetAsIConvertible(IConvertible value);
    public sbyte get_AsI1();
    public void set_AsI1(sbyte value);
    [SecurityCriticalAttribute]
public void SetAsByrefI1(SByte& value);
    public short get_AsI2();
    public void set_AsI2(short value);
    [SecurityCriticalAttribute]
public void SetAsByrefI2(Int16& value);
    public int get_AsI4();
    public void set_AsI4(int value);
    [SecurityCriticalAttribute]
public void SetAsByrefI4(Int32& value);
    public long get_AsI8();
    public void set_AsI8(long value);
    [SecurityCriticalAttribute]
public void SetAsByrefI8(Int64& value);
    public byte get_AsUi1();
    public void set_AsUi1(byte value);
    [SecurityCriticalAttribute]
public void SetAsByrefUi1(Byte& value);
    public ushort get_AsUi2();
    public void set_AsUi2(ushort value);
    [SecurityCriticalAttribute]
public void SetAsByrefUi2(UInt16& value);
    public UInt32 get_AsUi4();
    public void set_AsUi4(UInt32 value);
    [SecurityCriticalAttribute]
public void SetAsByrefUi4(UInt32& value);
    public ulong get_AsUi8();
    public void set_AsUi8(ulong value);
    [SecurityCriticalAttribute]
public void SetAsByrefUi8(UInt64& value);
    public IntPtr get_AsInt();
    public void set_AsInt(IntPtr value);
    [SecurityCriticalAttribute]
public void SetAsByrefInt(IntPtr& value);
    public UIntPtr get_AsUint();
    public void set_AsUint(UIntPtr value);
    [SecurityCriticalAttribute]
public void SetAsByrefUint(UIntPtr& value);
    public bool get_AsBool();
    public void set_AsBool(bool value);
    [SecurityCriticalAttribute]
public void SetAsByrefBool(Int16& value);
    public int get_AsError();
    public void set_AsError(int value);
    [SecurityCriticalAttribute]
public void SetAsByrefError(Int32& value);
    public float get_AsR4();
    public void set_AsR4(float value);
    [SecurityCriticalAttribute]
public void SetAsByrefR4(Single& value);
    public double get_AsR8();
    public void set_AsR8(double value);
    [SecurityCriticalAttribute]
public void SetAsByrefR8(Double& value);
    public decimal get_AsDecimal();
    public void set_AsDecimal(decimal value);
    [SecurityCriticalAttribute]
public void SetAsByrefDecimal(Decimal& value);
    public decimal get_AsCy();
    public void set_AsCy(decimal value);
    [SecurityCriticalAttribute]
public void SetAsByrefCy(Int64& value);
    public DateTime get_AsDate();
    public void set_AsDate(DateTime value);
    [SecurityCriticalAttribute]
public void SetAsByrefDate(Double& value);
    [SecurityCriticalAttribute]
public string get_AsBstr();
    [SecurityCriticalAttribute]
public void set_AsBstr(string value);
    [SecurityCriticalAttribute]
public void SetAsByrefBstr(IntPtr& value);
    [SecurityCriticalAttribute]
public object get_AsUnknown();
    [SecurityCriticalAttribute]
public void set_AsUnknown(object value);
    [SecurityCriticalAttribute]
public void SetAsByrefUnknown(IntPtr& value);
    [SecurityCriticalAttribute]
public object get_AsDispatch();
    [SecurityCriticalAttribute]
public void set_AsDispatch(object value);
    [SecurityCriticalAttribute]
public void SetAsByrefDispatch(IntPtr& value);
    [SecurityCriticalAttribute]
public object get_AsVariant();
    [SecurityCriticalAttribute]
public void set_AsVariant(object value);
    [SecurityCriticalAttribute]
public void SetAsByrefVariant(Variant& value);
    [SecurityCriticalAttribute]
public void SetAsByrefVariantIndirect(Variant& value);
    internal static PropertyInfo GetAccessor(VarEnum varType);
    internal static MethodInfo GetByrefSetter(VarEnum varType);
}
internal class System.Dynamic.VariantArgBuilder : SimpleArgBuilder {
    internal VariantArgBuilder(Type parameterType);
    internal virtual Expression Marshal(Expression parameter);
    internal virtual Expression MarshalToRef(Expression parameter);
    internal virtual Expression UnmarshalFromRef(Expression value);
}
internal static class System.Dynamic.VariantArray : object {
    private static VariantArray();
    internal static MemberExpression GetStructField(ParameterExpression variantArray, int field);
    internal static Type GetStructType(int args);
}
internal class System.Dynamic.VariantArray1 : ValueType {
    public Variant Element0;
}
internal class System.Dynamic.VariantArray2 : ValueType {
    public Variant Element0;
    public Variant Element1;
}
internal class System.Dynamic.VariantArray4 : ValueType {
    public Variant Element0;
    public Variant Element1;
    public Variant Element2;
    public Variant Element3;
}
internal class System.Dynamic.VariantArray8 : ValueType {
    public Variant Element0;
    public Variant Element1;
    public Variant Element2;
    public Variant Element3;
    public Variant Element4;
    public Variant Element5;
    public Variant Element6;
    public Variant Element7;
}
internal class System.Dynamic.VariantBuilder : object {
    internal ParameterExpression TempVariable { get; private set; }
    internal bool IsByRef { get; }
    internal VariantBuilder(VarEnum targetComType, ArgBuilder builder);
    [CompilerGeneratedAttribute]
internal ParameterExpression get_TempVariable();
    [CompilerGeneratedAttribute]
private void set_TempVariable(ParameterExpression value);
    internal bool get_IsByRef();
    internal Expression InitializeArgumentVariant(MemberExpression variant, Expression parameter);
    internal Expression Clear();
    internal Expression UpdateFromReturn(Expression parameter);
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
