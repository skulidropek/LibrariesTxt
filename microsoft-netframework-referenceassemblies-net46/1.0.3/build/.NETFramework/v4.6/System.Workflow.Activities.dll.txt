internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemThreadingTasksDataflow;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemNetHttp;
    internal static string SystemNetHttpWebRequest;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemRuntimeWindowsRuntime;
    internal static string SystemRuntimeWindowsRuntimeUIXaml;
    internal static string SystemSecurity;
    internal static string SystemServiceModelWeb;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal class SR : object {
    internal static string Activity;
    internal static string Handlers;
    internal static string Conditions;
    internal static string ConditionedActivityConditions;
    internal static string CorrelationSet;
    internal static string NameDescr;
    internal static string UserCodeHandlerDescr;
    internal static string ExpressionDescr;
    internal static string ExecutionTypeDescr;
    internal static string InitialChildDataDescr;
    internal static string ConditionDescr;
    internal static string UntilConditionDescr;
    internal static string WhenConditionDescr;
    internal static string TargetWorkflowDescr;
    internal static string InitializeCaleeDescr;
    internal static string ProxyClassDescr;
    internal static string MethodNameDescr;
    internal static string URLDescr;
    internal static string ActivationDescr;
    internal static string OnAfterMethodInvokeDescr;
    internal static string OnBeforeMethodInvokeDescr;
    internal static string TypeDescr;
    internal static string WhileConditionDescr;
    internal static string ReplicatorUntilConditionDescr;
    internal static string DynamicUpdateConditionDescr;
    internal static string CorrelationSetDescr;
    internal static string RoleDescr;
    internal static string ChangingVariable;
    internal static string OnInitializedDescr;
    internal static string OnCompletedDescr;
    internal static string Type;
    internal static string InterfaceTypeDescription;
    internal static string InterfaceTypeFilterDescription;
    internal static string WebServiceMethodDescription;
    internal static string ReceiveActivityNameDescription;
    internal static string WebServiceSessionIDDescr;
    internal static string OnAfterReceiveDescr;
    internal static string OnBeforeResponseDescr;
    internal static string OnBeforeFaultingDescr;
    internal static string TimeoutDurationDescription;
    internal static string TimeoutInitializerDescription;
    internal static string StateMachineWorkflow;
    internal static string SequentialWorkflow;
    internal static string EventSink;
    internal static string RuleSetDescription;
    internal static string RuleSetDefinitionDescription;
    internal static string ConnectorColorDescription;
    internal static string InitialStateImagePathDescription;
    internal static string CompletedStateImagePathDescription;
    internal static string Error_ConditionalBranchParentNotConditional;
    internal static string Error_EventDrivenMultipleEventActivity;
    internal static string Error_ParameterPropertyNotSet;
    internal static string Error_ListenNotAllEventDriven;
    internal static string Error_InterfaceTypeNotInterface;
    internal static string Error_ParallelLessThanTwoChildren;
    internal static string Error_PropertyNotSet;
    internal static string Error_MissingCorrelationParameterAttribute;
    internal static string Error_MissingCorrelationTokenProperty;
    internal static string Error_CorrelationTypeNotConsistent;
    internal static string Error_CorrelationInvalid;
    internal static string Error_MissingMethodName;
    internal static string Error_MissingEventName;
    internal static string Error_ListenLessThanTwoChildren;
    internal static string Error_MethodNotExists;
    internal static string General_MissingService;
    internal static string Error_FieldNotExists;
    internal static string Error_TypeNotResolved;
    internal static string Error_ParameterNotFound;
    internal static string Error_TypeNotExist;
    internal static string Error_ParallelNotAllSequence;
    internal static string Error_ActivationActivityNotFirst;
    internal static string Error_ActivationActivityInsideLoop;
    internal static string Error_DuplicateCorrelation;
    internal static string Error_NegativeValue;
    internal static string Error_MustHaveParent;
    internal static string Error_CanNotChangeAtRuntime;
    internal static string Error_CannotNestThisActivity;
    internal static string Error_GetCalleeWorkflow;
    internal static string Error_TypeIsNotRootActivity;
    internal static string Error_ContextStackItemMissing;
    internal static string Error_UnexpectedArgumentType;
    internal static string OnGeneratorChildCompletedDescr;
    internal static string OnGeneratorChildInitializedDescr;
    internal static string Error_WebServiceResponseNotFound;
    internal static string Error_WebServiceReceiveNotFound;
    internal static string Error_WebServiceResponseNotNeeded;
    internal static string Error_WebServiceFaultNotNeeded;
    internal static string Error_WebServiceReceiveNotConfigured;
    internal static string Error_WebServiceReceiveNotMarkedActivate;
    internal static string Error_DuplicateWebServiceResponseFound;
    internal static string Error_DuplicateWebServiceFaultFound;
    internal static string Error_CAGChildNotFound;
    internal static string Error_CAGNotExecuting;
    internal static string Error_CAGQuiet;
    internal static string Error_CAGDynamicUpdateNotAllowed;
    internal static string Error_MissingValidationProperty;
    internal static string Error_MissingConditionName;
    internal static string Error_MissingRuleConditions;
    internal static string Error_RoleProviderNotAvailableOrEnabled;
    internal static string Error_ExternalDataExchangeServiceExists;
    internal static string Error_WorkflowTerminated;
    internal static string Error_WorkflowCompleted;
    internal static string Warning_AdditionalBindingsFound;
    internal static string Error_ConfigurationSectionNotFound;
    internal static string Error_UnknownConfigurationParameter;
    internal static string Error_CannotConnectToRequest;
    internal static string Error_StateChildNotFound;
    internal static string Error_CompletedStateCannotContainActivities;
    internal static string StateMachineWorkflowRequired;
    internal static string EventHandlingScopeActivityDescription;
    internal static string EventDrivenActivityDescription;
    internal static string Error_EventActivityIsImmutable;
    internal static string Error_EventDrivenNoFirstActivity;
    internal static string UndoSwitchViews;
    internal static string Error_EventHandlersDeclParentNotScope;
    internal static string Error_EventHandlersChildNotFound;
    internal static string Error_FailedToStartTheWorkflow;
    internal static string In;
    internal static string Out;
    internal static string Ref;
    internal static string Required;
    internal static string Optional;
    internal static string Parameters;
    internal static string Properties;
    internal static string Error_UninitializedCorrelation;
    internal static string Error_InvalidIdentifier;
    internal static string Error_MoreThanOneEventHandlersDecl;
    internal static string Error_MoreThanTwoActivitiesInEventHandlingScope;
    internal static string Error_ExecInAtomicScope;
    internal static string Error_ExecWithActivationReceive;
    internal static string Error_DuplicateParameter;
    internal static string Error_GeneratorShouldContainSingleActivity;
    internal static string Error_DynamicActivity;
    internal static string Error_DynamicActivity2;
    internal static string Error_DynamicActivity3;
    internal static string FilterDescription_InvokeWorkflow;
    internal static string Standard;
    internal static string Base;
    internal static string ForegroundCategory;
    internal static string WebServiceResponseActivityDescription;
    internal static string WebServiceFaultActivityDescription;
    internal static string WebServiceReceiveActivityDescription;
    internal static string SequenceActivityDescription;
    internal static string CompensatableSequenceActivityDescription;
    internal static string WhileActivityDescription;
    internal static string ReplicatorActivityDescription;
    internal static string ScopeActivityDescription;
    internal static string ParallelActivityDescription;
    internal static string ListenActivityDescription;
    internal static string DelayActivityDescription;
    internal static string ConstrainedGroupActivityDescription;
    internal static string ConditionalActivityDescription;
    internal static string InvokeWorkflowActivityDescription;
    internal static string InvokeWebServiceActivityDescription;
    internal static string CodeActivityDescription;
    internal static string SetStateActivityDescription;
    internal static string StateInitializationActivityDescription;
    internal static string StateFinalizationActivityDescription;
    internal static string StateActivityDescription;
    internal static string StateMachineWorkflowActivityDescription;
    internal static string PolicyActivityDescription;
    internal static string Error_WhileShouldHaveOneChild;
    internal static string Error_ReplicatorNotExecuting;
    internal static string Error_ReplicatorChildRunning;
    internal static string Error_ReplicatorNotInitialized;
    internal static string Error_ReplicatorDisconnected;
    internal static string Error_InsufficientArrayPassedIn;
    internal static string Error_MultiDimensionalArray;
    internal static string Error_WebServiceReceiveNotValid;
    internal static string Error_CantInvokeSelf;
    internal static string Error_TypeNotPublicSerializable;
    internal static string Error_CantInvokeDesignTimeTypes;
    internal static string Error_TypeNotPublic;
    internal static string Error_NestedConstrainedGroupConditions;
    internal static string Error_ServiceMissingExternalDataExchangeInterface;
    internal static string Error_CorrelationTokenInReplicator;
    internal static string HelperExternalDataExchangeDesc;
    internal static string Error_TypePropertyInvalid;
    internal static string Error_ParameterTypeNotFound;
    internal static string Error_ReturnTypeNotFound;
    internal static string TargetStateDescription;
    internal static string InitialStateDescription;
    internal static string CompletedStateDescription;
    internal static string Error_CorrelationTokenMissing;
    internal static string Error_CorrelationNotInitialized;
    internal static string Error_EventDeliveryFailedException;
    internal static string Error_EventArgumentSerializationException;
    internal static string Error_ExternalDataExchangeException;
    internal static string Error_EventNameMissing;
    internal static string Error_CorrelationParameterException;
    internal static string Error_NoInstanceInSession;
    internal static string Error_ServiceNotFound;
    internal static string Error_MissingInterfaceType;
    internal static string Error_CorrelationAttributeInvalid;
    internal static string Error_DuplicateCorrelationAttribute;
    internal static string Error_CorrelationParameterNotFound;
    internal static string Error_CorrelationInitializerNotDefinied;
    internal static string Error_InvalidMethodPropertyName;
    internal static string Error_InvalidEventPropertyName;
    internal static string Error_CorrelationTokenSpecifiedForUncorrelatedInterface;
    internal static string Error_MissingCorrelationTokenOwnerNameProperty;
    internal static string Error_OwnerActivityIsNotParent;
    internal static string Error_InvalidEventArgsSignature;
    internal static string Error_NoMatchingActiveDirectoryEntry;
    internal static string WorkflowAuthorizationException;
    internal static string Error_InvalidEventMessage;
    internal static string Error_ExternalRuntimeContainerNotFound;
    internal static string ExternalMethodNameDescr;
    internal static string ExternalEventNameDescr;
    internal static string Error_MisMatchCorrelationTokenOwnerNameProperty;
    internal static string Error_WebServiceInputNotProcessed;
    internal static string Error_CallExternalMethodArgsSerializationException;
    internal static string InvokeParameterDescription;
    internal static string Error_ParameterTypeResolution;
    internal static string ParameterDescription;
    internal static string Error_DuplicatedActivityID;
    internal static string Error_InvalidLanguageIdentifier;
    internal static string Error_ConditionalDeclNotAllConditionalBranchDecl;
    internal static string Error_ConditionalLessThanOneChildren;
    internal static string Error_ConditionalBranchUpdateAtRuntime;
    internal static string Error_ReplicatorInvalidExecutionType;
    internal static string Error_ReplicatorCannotCancelChild;
    internal static string Error_InvalidCAGActivityType;
    internal static string Error_CorrelationViolationException;
    internal static string Error_CannotResolveWebServiceInput;
    internal static string Error_InvalidLocalServiceMessage;
    internal static string Error_InitializerInReplicator;
    internal static string CodeConditionDisplayName;
    internal static string RuleConditionDisplayName;
    internal static string Error_InterfaceTypeNeedsExternalDataExchangeAttribute;
    internal static string Error_WorkflowInstanceDehydratedBeforeSendingResponse;
    internal static string Error_InitializerFollowerInTxnlScope;
    internal static string ShowingExternalDataExchangeService;
    internal static string InterfaceTypeMissing;
    internal static string MethodNameMissing;
    internal static string MethodInfoMissing;
    internal static string EventNameMissing;
    internal static string EventInfoMissing;
    internal static string HandleExternalEventActivityDescription;
    internal static string CallExternalMethodActivityDescription;
    internal static string Error_EventArgumentValidationException;
    internal static string Error_GenericMethodsNotSupported;
    internal static string Error_ReturnTypeNotVoid;
    internal static string Error_OutRefParameterNotSupported;
    internal static string InvalidTimespanFormat;
    internal static string Error_CantFindInstance;
    internal static string Error_SenderMustBeActivityExecutionContext { get; }
    private static SR();
    internal static string GetString(string name, Object[] args);
    internal static string GetString(CultureInfo culture, string name, Object[] args);
    internal static string GetString(string name);
    internal static string GetString(CultureInfo culture, string name);
    internal static string GetError_InvalidStateActivityParent();
    internal static string GetError_BlackBoxCustomStateNotSupported();
    internal static string GetError_InvalidLeafStateChild();
    internal static string GetError_InvalidCompositeStateChild();
    internal static string GetError_SetStateOnlyWorksOnStateMachineWorkflow();
    internal static string GetError_SetStateMustPointToAState();
    internal static string GetError_StateActivityMustBeContainedInAStateMachine();
    internal static string GetError_CannotExecuteStateMachineWithoutInitialState();
    internal static string GetError_InitialStateMustPointToAState();
    internal static string GetError_CompletedStateMustPointToAState();
    internal static string GetError_SetStateMustPointToALeafNodeState();
    internal static string GetError_InitialStateMustPointToALeafNodeState();
    internal static string GetError_CompletedStateMustPointToALeafNodeState();
    internal static string GetError_InitialStateMustBeDifferentThanCompletedState();
    internal static string GetError_StateInitializationParentNotState();
    internal static string GetError_StateFinalizationParentNotState();
    internal static string GetError_EventActivityNotValidInStateInitialization();
    internal static string GetError_EventActivityNotValidInStateFinalization();
    internal static string GetError_MultipleStateInitializationActivities();
    internal static string GetError_MultipleStateFinalizationActivities();
    internal static string GetError_InvalidTargetStateInStateInitialization();
    internal static string GetError_CantRemoveState(string stateName);
    internal static string GetError_CantRemoveEventDrivenFromExecutingState(string eventDrivenName, string parentStateName);
    internal static string GetSqlTrackingServiceRequired();
    internal static string GetStateMachineWorkflowMustHaveACurrentState();
    internal static string GetInvalidActivityStatus(Activity activity);
    internal static string GetStateMachineWorkflowRequired();
    internal static string GetInvalidUserDataInStateChangeTrackingRecord();
    internal static string GetUnableToTransitionToState(string stateName);
    internal static string GetInvalidStateTransitionPath();
    internal static string GetInvalidSetStateInStateInitialization();
    internal static string GetStateAlreadySubscribesToThisEvent(string stateName, IComparable queueName);
    internal static string GetInvalidStateMachineAction(string stateName);
    internal static string GetError_StateMachineWorkflowMustBeARootActivity();
    internal static string GetError_EventDrivenParentNotListen();
    internal static string GetError_EventDrivenInvalidFirstActivity();
    internal static string GetUndoSetAsInitialState(string stateName);
    internal static string GetUndoSetAsCompletedState(string stateName);
    internal static string GetMoveSetState();
    internal static string get_Error_SenderMustBeActivityExecutionContext();
}
[AttributeUsageAttribute("32767")]
internal class SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    public SRCategoryAttribute(string category, string resourceSet);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class SRDescriptionAttribute : DescriptionAttribute {
    public SRDescriptionAttribute(string description);
    public SRDescriptionAttribute(string description, string resourceSet);
}
[AttributeUsageAttribute("32767")]
internal class SRDisplayNameAttribute : DisplayNameAttribute {
    public SRDisplayNameAttribute(string name);
    public SRDisplayNameAttribute(string name, string resourceSet);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.ActiveDirectoryRole : WorkflowRole {
    public string Name { get; public set; }
    public DirectoryEntry RootEntry { get; }
    internal ICollection`1<IDirectoryOperation> Operations { get; }
    internal ActiveDirectoryRole(DirectoryEntry rootEntry, IDirectoryOperation operation);
    internal ActiveDirectoryRole(DirectoryEntry rootEntry, ICollection`1<IDirectoryOperation> operations);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public DirectoryEntry get_RootEntry();
    internal ICollection`1<IDirectoryOperation> get_Operations();
    public ActiveDirectoryRole GetManager();
    public ActiveDirectoryRole GetManagerialChain();
    public ActiveDirectoryRole GetDirectReports();
    public ActiveDirectoryRole GetAllReports();
    public ActiveDirectoryRole GetPeers();
    public ICollection`1<DirectoryEntry> GetEntries();
    public IList`1<SecurityIdentifier> GetSecurityIdentifiers();
    public virtual IList`1<string> GetIdentities();
    public virtual bool IncludesIdentity(string identity);
    private sealed virtual override void System.IDisposable.Dispose();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public static class System.Workflow.Activities.ActiveDirectoryRoleFactory : object {
    public static ActiveDirectoryRoleFactoryConfiguration Configuration { get; }
    private static ActiveDirectoryRoleFactory();
    public static ActiveDirectoryRole CreateFromAlias(string alias);
    public static ActiveDirectoryRole CreateFromSecurityIdentifier(SecurityIdentifier sid);
    public static ActiveDirectoryRole CreateFromEmailAddress(string emailAddress);
    public static ActiveDirectoryRoleFactoryConfiguration get_Configuration();
}
internal static class System.Workflow.Activities.ActivityHelpers : object {
    internal static void InitializeCorrelationTokenCollection(Activity activity, CorrelationToken correlator);
}
internal enum System.Workflow.Activities.CAGChildState : Enum {
    public byte value__;
    public static CAGChildState Idle;
    public static CAGChildState Pending;
    public static CAGChildState Excuting;
}
internal class System.Workflow.Activities.CAGChildStats : object {
    internal int ExecutedCount;
    internal CAGChildState State;
}
[SRDescriptionAttribute("CallExternalMethodActivityDescription")]
[DesignerAttribute("System.Workflow.Activities.CallExternalMethodActivityDesigner", "System.ComponentModel.Design.IDesigner")]
[DefaultEventAttribute("MethodInvoking")]
[ActivityValidatorAttribute("System.Workflow.Activities.CallExternalMethodActivityValidator")]
[SRCategoryAttribute("Base")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.CallExternalMethodActivity : Activity {
    public static DependencyProperty CorrelationTokenProperty;
    public static DependencyProperty ParameterBindingsProperty;
    public static DependencyProperty InterfaceTypeProperty;
    public static DependencyProperty MethodNameProperty;
    public static DependencyProperty MethodInvokingEvent;
    internal static ArrayList ReservedParameterNames;
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("HelperExternalDataExchangeDesc")]
[RefreshPropertiesAttribute("1")]
[EditorAttribute("System.Workflow.ComponentModel.Design.TypeBrowserEditor", "System.Drawing.Design.UITypeEditor")]
[TypeFilterProviderAttribute("System.Workflow.Activities.ExternalDataExchangeInterfaceTypeFilterProvider")]
[DefaultValueAttribute("")]
public Type InterfaceType { get; public set; }
    [RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Workflow.Activities.Common.PropertyValueProviderTypeConverter")]
[SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("ExternalMethodNameDescr")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string MethodName { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[BrowsableAttribute("False")]
public WorkflowParameterBindingCollection ParameterBindings { get; }
    [SRCategoryAttribute("Activity")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("CorrelationSetDescr")]
[MergablePropertyAttribute("False")]
[TypeConverterAttribute("System.Workflow.Activities.CorrelationTokenTypeConverter")]
[DefaultValueAttribute("")]
public CorrelationToken CorrelationToken { get; public set; }
    public CallExternalMethodActivity(string name);
    private static CallExternalMethodActivity();
    public virtual Type get_InterfaceType();
    public virtual void set_InterfaceType(Type value);
    public virtual string get_MethodName();
    public virtual void set_MethodName(string value);
    public WorkflowParameterBindingCollection get_ParameterBindings();
    public virtual CorrelationToken get_CorrelationToken();
    public virtual void set_CorrelationToken(CorrelationToken value);
    public void add_MethodInvoking(EventHandler value);
    public void remove_MethodInvoking(EventHandler value);
    private sealed virtual override ICollection System.Workflow.Activities.Common.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
    protected virtual void InitializeProperties();
    protected virtual void OnMethodInvoking(EventArgs e);
    protected virtual void OnMethodInvoked(EventArgs e);
    protected sealed virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    private sealed virtual override Type System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider serviceProvider, string propertyName);
    private sealed virtual override AccessTypes System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider serviceProvider, string propertyName);
    internal void GetParameterPropertyDescriptors(IDictionary properties);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.InvokeMethodDesignerTheme")]
internal class System.Workflow.Activities.CallExternalMethodActivityDesigner : ActivityDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.CallExternalMethodActivityValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal class System.Workflow.Activities.CloseStateAction : StateMachineAction {
    internal CloseStateAction(string stateName);
    internal virtual void Execute(ActivityExecutionContext context);
}
[SRDescriptionAttribute("CodeActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.CodeDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.Activities.CodeActivity", "Resources.code.png")]
[DefaultEventAttribute("ExecuteCode")]
[SRCategoryAttribute("Standard")]
[ActivityValidatorAttribute("System.Workflow.Activities.CodeActivity/CodeActivityValidator")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.CodeActivity : Activity {
    public static DependencyProperty ExecuteCodeEvent;
    public CodeActivity(string name);
    private static CodeActivity();
    protected sealed virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    public void add_ExecuteCode(EventHandler value);
    public void remove_ExecuteCode(EventHandler value);
}
[ToolboxItemAttribute("False")]
[ActivityValidatorAttribute("System.Workflow.Activities.CodeCondition/CodeConditionValidator")]
[SRDisplayNameAttribute("CodeConditionDisplayName")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.CodeCondition : ActivityCondition {
    public static DependencyProperty ConditionEvent;
    private static CodeCondition();
    public void add_Condition(EventHandler`1<ConditionalEventArgs> value);
    public void remove_Condition(EventHandler`1<ConditionalEventArgs> value);
    protected virtual object GetBoundValue(ActivityBind bind, Type targetType);
    public virtual bool Evaluate(Activity ownerActivity, IServiceProvider provider);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.CodeDesignerTheme")]
internal class System.Workflow.Activities.CodeDesigner : ActivityDesigner {
}
internal class System.Workflow.Activities.CodeDesignerTheme : ActivityDesignerTheme {
    public CodeDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.Common.AssemblyRef : object {
    internal static string ActivitiesAssemblyRef;
    internal static string RuntimeAssemblyRef;
}
internal static class System.Workflow.Activities.Common.CompilerHelpers : object {
    private static CompilerHelpers();
    internal static CodeDomProvider CreateCodeProviderInstance(Type type);
    internal static CodeDomProvider CreateCodeProviderInstance(Type type, string compilerVersion);
    internal static CodeDomProvider GetCodeDomProvider(SupportedLanguages language);
    internal static CodeDomProvider GetCodeDomProvider(SupportedLanguages language, string compilerVersion);
    internal static SupportedLanguages GetSupportedLanguage(IServiceProvider serviceProvider);
    internal static SupportedLanguages GetSupportedLanguage(string language);
}
internal class System.Workflow.Activities.Common.ComponentChangeDispatcher : object {
    public ComponentChangeDispatcher(IServiceProvider serviceProvider, object component, PropertyDescriptor propertyDescriptor);
    public sealed virtual void Dispose();
}
internal static class System.Workflow.Activities.Common.DebuggerHelpers : object {
    internal static Activity ParseActivity(Activity parsingContext, string activityName);
}
internal class System.Workflow.Activities.Common.DelegateTypeInfo : object {
    internal CodeParameterDeclarationExpression[] Parameters { get; }
    internal Type[] ParameterTypes { get; }
    internal CodeTypeReference ReturnType { get; }
    internal DelegateTypeInfo(Type delegateClass);
    internal CodeParameterDeclarationExpression[] get_Parameters();
    internal Type[] get_ParameterTypes();
    internal CodeTypeReference get_ReturnType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
internal class System.Workflow.Activities.Common.DynamicPropertyDescriptor : PropertyDescriptor {
    public IServiceProvider ServiceProvider { get; }
    public PropertyDescriptor RealPropertyDescriptor { get; }
    public string Category { get; }
    public AttributeCollection Attributes { get; }
    public TypeConverter Converter { get; }
    public string Description { get; }
    public string DisplayName { get; }
    public Type ComponentType { get; }
    public Type PropertyType { get; }
    public bool IsReadOnly { get; }
    public DynamicPropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor descriptor);
    public IServiceProvider get_ServiceProvider();
    public PropertyDescriptor get_RealPropertyDescriptor();
    public virtual string get_Category();
    public virtual AttributeCollection get_Attributes();
    public virtual TypeConverter get_Converter();
    public virtual string get_Description();
    public virtual string get_DisplayName();
    public virtual Type get_ComponentType();
    public virtual Type get_PropertyType();
    public virtual bool get_IsReadOnly();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
}
internal static class System.Workflow.Activities.Common.ErrorNumbers : object {
    public static int Error_InsideAtomicScope;
    public static int Error_DynamicActivity;
    public static int Error_CreateValidator;
    public static int Error_ParameterPropertyNotSet;
    public static int Error_ParameterTypeNotExist;
    public static int Error_MissingAttribute;
    public static int Error_ReferenceInvalidResourceFile;
    public static int Error_RefBindMissingReferenceName;
    public static int Error_RefBindCantFindRef;
    public static int Error_MissingRootActivity;
    public static int Bind_DuplicateDataSourceNames;
    public static int Error_ScopeDuplicatedNameActivity;
    public static int Error_TypeNotExist;
    public static int Error_TypeTypeMismatchAmbiguity;
    public static int Error_PropertyNotSet;
    public static int Error_CustomActivityCantCreate;
    public static int Error_InvalidIdentifier;
    public static int Error_TypeNotAsseblyQualified;
    public static int Error_RemoveExecutingActivity;
    public static int Error_TypeNotResolvedInFieldName;
    public static int Error_FieldNotExists;
    public static int Error_FieldNotAccessible;
    public static int Error_FieldTypeNotResolved;
    public static int Error_CannotResolveRelativeActivity;
    public static int Error_CannotResolveActivity;
    public static int Error_BindActivityReference;
    public static int Error_PathNotSetForActivitySource;
    public static int Error_InvalidMemberPath;
    public static int Error_TargetTypeMismatch;
    public static int Error_ReferencedActivityPropertyNotBind;
    public static int Bind_ActivityDataSourceRecursionDetected;
    public static int Error_NoEnclosingContext;
    public static int Error_DataSourceNotExist;
    public static int Error_MethodDataSourceWithPath;
    public static int Error_HandlerReadOnly;
    public static int Error_TypeNotDelegate;
    public static int Error_TypeNotResolvedInMethodName;
    public static int Error_MethodSignatureMismatch;
    public static int Error_MethodNotExists;
    public static int Error_MethodNotAccessible;
    public static int Error_MethodReturnTypeMismatch;
    public static int Error_TypeNotPrimitive;
    public static int Error_LiteralConversionFailed;
    public static int Error_DataSourceNameNotSet;
    public static int Error_DataSourceInvalidIdentifier;
    public static int Error_FieldTypeMismatch;
    public static int Error_TargetTypeDataSourcePathMismatch;
    public static int Error_PropertyNoGetter;
    public static int Error_PropertyNoSetter;
    public static int Error_PropertyHasIndexParameters;
    public static int Error_ReadOnlyField;
    public static int Error_XmlDataSourceReadOnly;
    public static int Error_PathNotSetForXmlDataSource;
    public static int Error_CorrelationAttributeInvalid;
    public static int Error_DuplicateCorrelationAttribute;
    public static int Error_MissingCorrelationParameterAttribute;
    public static int Error_CorrelationParameterNotFound;
    public static int Error_CorrelationTypeNotConsistent;
    public static int Error_GenericMethodsNotSupported;
    public static int Error_ReturnTypeNotVoid;
    public static int Error_OutRefParameterNotSupported;
    public static int Error_CorrelationInvalid;
    public static int Error_CorrelationInitializerNotDefinied;
    public static int Error_SerializationError;
    public static int Error_UnknownCompilerException;
    public static int Error_MultipleRootActivityCreator;
    public static int Error_LibraryPath;
    public static int Error_TypeLoad;
    public static int Error_InvalidReferencedAssembly;
    public static int Error_TypeNotResolvedInPropertyName;
    public static int Error_PropertyNotExists;
    public static int Error_PropertyNotAccessible;
    public static int Error_PropertyTypeNotResolved;
    public static int Error_PropertyTypeMismatch;
    public static int Error_PropertyReferenceNoGetter;
    public static int Error_UserCodeFilesNotAllowed;
    public static int Error_CodeWithinNotAllowed;
    public static int Error_TypeNotAuthorized;
    public static int Error_CompanionClassNameCanNotBeEmpty;
    public static int Error_DerivationFromTypeWithLocalDataContext;
    public static int Error_CompanionTypeDerivationError;
    public static int Error_DuplicatedParameterName;
    public static int Error_ConfigFileMissingOrInvalid;
    public static int Error_CyclicalExpression;
    public static int Error_InvalidAssignTarget;
    public static int Error_InvalidCharacter;
    public static int Error_InvalidEscapeSequence;
    public static int Error_UnterminatedCharacterLiteral;
    public static int Error_InvalidExponentDigit;
    public static int Error_InvalidHexDigit;
    public static int Error_MissingLparenAfterCommand;
    public static int Error_InvalidUpdateExpression;
    public static int Error_MissingRParenAfterArgumentList;
    public static int Error_MissingOperand;
    public static int Error_MissingRParenInSubexpression;
    public static int Error_MissingIdentifierAfterDot;
    public static int Error_UnknownFieldOrProperty;
    public static int Error_UnknownLiteral;
    public static int Error_UnknownIdentifier;
    public static int Error_MissingDotAfterNamespace;
    public static int Error_UnknownNamespaceMember;
    public static int Error_MissingTypeArguments;
    public static int Error_NotAGenericType;
    public static int Error_BadTypeArgCount;
    public static int Error_InvalidTypeArgument;
    public static int Error_MissingCloseAngleBracket;
    public static int Error_EmptyExpression;
    public static int Error_ExtraCharactersIgnored;
    public static int Error_InvalidIntegerLiteral;
    public static int Error_UnterminatedStringLiteral;
    public static int Error_CouldNotDetermineMemberType;
    public static int Error_InvalidWildCardInPathQualifier;
    public static int Error_MethodArgCountMismatch;
    public static int Error_MethodDirectionMismatch;
    public static int Error_MethodArgumentTypeMismatch;
    public static int Error_MethodOverloadNotFound;
    public static int Error_MissingCloseSquareBracket;
    public static int Error_CannotIndexType;
    public static int Error_ArrayIndexBadRank;
    public static int Error_IndexerArgCannotBeRefOrOut;
    public static int Error_ArrayIndexBadType;
    public static int Error_IndexerCountMismatch;
    public static int Error_IndexerNotFound;
    public static int Error_IndexerOverloadNotFound;
    public static int Error_NestedPersistOnClose;
    public static int Warning_EmptyBehaviourActivity;
    public static int Error_InvalidRuleAttributeParameter;
    public static int Error_InvokeAttrRefersToParameterAttribute;
    public static int Error_NestedCompensatableActivity;
    public static int Error_InvalidRealLiteral;
    public static int Error_PropertyDefaultIsReference;
    public static int Error_PropertyDefaultTypeMismatch;
    public static int Error_NoArrayCreationSize;
    public static int Error_MissingRCurlyAfterInitializers;
    public static int Error_GetCalleeWorkflow;
    public static int SR_InvokeTransactionalFromAtomic;
    public static int Error_ExecInAtomicScope;
    public static int Error_DuplicateParameter;
    public static int Error_ParameterNotFound;
    public static int Error_RecursionDetected;
    public static int Warning_UnverifiedRecursion;
    public static int Error_SuspendInAtomicCallChain;
    public static int Error_CompensateBadNesting;
    public static int Error_ActivityRefNotResolved;
    public static int Error_CompensantionParentNotScope;
    public static int Error_IfElseLessThanOneChildren;
    public static int Error_IfElseNotAllIfElseBranchDecl;
    public static int Error_ConditionalBranchParentNotConditional;
    public static int Error_DynamicActivity2;
    public static int Error_EventDrivenParentNotListen;
    public static int Error_EventDrivenNoFirstActivity;
    public static int Error_EventDrivenInvalidFirstActivity;
    public static int Error_ListenLessThanTwoChildren;
    public static int Error_ListenNotAllEventDriven;
    public static int Error_ListenNotMoreThanOneDelay;
    public static int Error_ParallelLessThanTwoChildren;
    public static int Error_ParallelNotAllSequence;
    public static int Error_FaultHandlerActivityParentNotFaultHandlersActivity;
    public static int Error_TypeTypeMismatch;
    public static int Error_ExceptionVariableNotAssignable;
    public static int Error_FaultHandlerActivityAllMustBeLast;
    public static int Error_FaultHandlersActivityDeclNotAllFaultHandlerActivityDecl;
    public static int Error_ScopeDuplicateFaultHandlerActivityForAll;
    public static int Error_ScopeDuplicateFaultHandlerActivityFor;
    public static int Error_FaultHandlerActivityWrongOrder;
    public static int Error_EventHandlersDeclParentNotScope;
    public static int Error_EventDrivenMultipleEventActivity;
    public static int Error_SuspendInAtomicScope;
    public static int Error_GeneratorShouldContainSingleActivity;
    public static int Error_ScopeMoreThanOneEventHandlersDecl;
    public static int Error_MissingMethodName;
    public static int Error_MissingHostInterface;
    public static int Error_ScopeMoreThanOneFaultHandlersActivityDecl;
    public static int Error_ScopeMoreThanOneCompensationDecl;
    public static int Error_AtomicScopeWithFaultHandlersActivityDecl;
    public static int Error_AtomicScopeNestedInNonLRT;
    public static int Error_LRTScopeNestedInNonLRT;
    public static int Error_NegativeValue;
    public static int Error_DuplicateCorrelation;
    public static int Error_ParallelActivationNoCorrelation;
    public static int Error_UninitializedCorrelation;
    public static int Error_CorrelatedSendReceiveAtomicScope;
    public static int Error_CorrelationAlreadyInitialized;
    public static int Error_ParameterNotSet;
    public static int Error_ConditionNotFound;
    public static int Error_DuplicateConditions;
    public static int Error_InvalidConditionName;
    public static int Error_LeftOperandMissing;
    public static int Error_LeftOperandInvalidType;
    public static int Error_RightOperandMissing;
    public static int Error_RightOperandInvalidType;
    public static int Error_OperandTypesIncompatible;
    public static int Error_BindingTypeMissing;
    public static int Error_ConditionMustBeBoolean;
    public static int Error_CodeExpressionNotHandled;
    public static int Error_UnableToResolveType;
    public static int Error_CannotResolveMember;
    public static int Warning_UnreachableCode;
    public static int Error_InvalidConditionExpression;
    public static int Error_WebServiceResponseNotFound;
    public static int Error_WebServiceReceiveNotFound;
    public static int Error_StaticMember;
    public static int Error_NonStaticMember;
    public static int Error_CompensateBadTargetTX;
    public static int Error_WebServiceReceiveNotValid;
    public static int Error_WebServiceResponseNotNeeded;
    public static int Error_WebServiceReceiveNotConfigured;
    public static int Error_TypeNotPublicSerializable;
    public static int Error_ActivationActivityNotFirst;
    public static int Error_WebServiceReceiveNotMarkedActivate;
    public static int Error_DuplicateWebServiceResponseFound;
    public static int Warning_RuleAttributeNoMatch;
    public static int Error_PolicyGetRuleSetNotImplemented;
    public static int Error_PolicyGetRuleSetNull;
    public static int Error_TypeNotPublic;
    public static int Error_InterfaceTypeNotInterface;
    public static int Error_ParameterTypeNotFound;
    public static int Error_ReturnTypeNotFound;
    public static int Error_CancelHandlerParentNotScope;
    public static int Error_DuplicateWebServiceFaultFound;
    public static int Error_AtomicScopeWithCancellationHandlerActivity;
    public static int Error_RuleSetNotFound;
    public static int Error_InvalidRuleSetExpression;
    public static int Error_InvalidRuleSetName;
    public static int Error_ActivationActivityInsideLoop;
    public static int Error_WebServiceFaultNotNeeded;
    public static int Error_InvalidUpdate;
    public static int Error_MissingRuleCondition;
    public static int Error_InvalidCompositeStateChild;
    public static int Error_InvalidLeafStateChild;
    public static int Error_SetStateOnlyWorksOnStateMachineWorkflow;
    public static int Error_SetStateMustPointToAState;
    public static int Error_SetStateMustPointToALeafNodeState;
    public static int Error_InitialStateMustPointToAState;
    public static int Error_CompletedStateMustPointToAState;
    public static int Error_InitialStateMustPointToALeafNodeState;
    public static int Error_CompletedStateMustPointToALeafNodeState;
    public static int Error_CompletedStateCannotContainActivities;
    public static int Error_DuplicatedActivityID;
    public static int Error_EventActivityNotValidInStateHandler;
    public static int Error_MultipleStateInitializationActivities;
    public static int Error_InvalidTargetStateInStateInitialization;
    public static int Error_StateHandlerParentNotState;
    public static int Error_SynchronizedNeedsDataContext;
    public static int Error_PropertyReferenceGetterNoAccess;
    public static int Error_WhileShouldHaveOneChild;
    public static int Error_CantHaveContextActivity;
    public static int Error_PathCouldNotBeResolvedToMember;
    public static int Error_TypeIsNotRootActivity;
    public static int Error_CantResolveEventHandler;
    public static int Error_XSDObjectTypeNotSerializable;
    public static int Error_IDNotSetForActivitySource;
    public static int Error_ExecWithActivationReceive;
    public static int Error_NestedConstrainedGroupConditions;
    public static int Error_MissingDataExchangeServiceAttribute;
    public static int Error_MissingEventName;
    public static int Error_CorrelationTokenInReplicator;
    public static int Error_TypePropertyInvalid;
    public static int Error_MultipleStateFinalizationActivities;
    public static int Error_CantRemoveState;
    public static int Error_XomlWorkflowHasClassName;
    public static int Error_XomlWorkflowHasCode;
    public static int Error_MoreThanTwoActivitiesInEventHandlingScope;
    public static int Error_ModelingConstructsCanNotContainModelingConstructs;
    public static int Error_CantRemoveEventDrivenFromExecutingState;
    public static int Error_StateMachineWorkflowMustBeARootActivity;
    public static int Error_ParentDoesNotSupportCompensation;
    public static int Error_BlackBoxCustomStateNotSupported;
    public static int Warning_ParameterBinding;
    public static int Error_BindBaseTypeNotSpecified;
    public static int Error_ValidatorThrewException;
    public static int Error_RootIsNotEnabled;
    public static int Error_InvalidMemberType;
    public static int Error_CannotNestThisActivity;
    public static int Error_InvalidStateActivityParent;
    public static int Error_InitialStateMustBeDifferentThanCompletedState;
    public static int Error_InitializerInReplicator;
    public static int Error_InitializerFollowerInTxnlScope;
    public static int Error_DynamicActivity3;
    public static int Warning_AdditionalBindingsFound;
}
internal static class System.Workflow.Activities.Common.Helpers : object {
    internal static string ProductRootRegKey;
    internal static string ProductInstallDirectory;
    internal static string ProductSDKInstallDirectory;
    internal static string TypeProviderAssemblyRegValueName;
    internal static string ProductInstallDirectory30;
    internal static int FILENAME_MAX;
    internal static string PerUserRegistryKey { get; }
    private static Helpers();
    internal static string get_PerUserRegistryKey();
    internal static bool IsFileNameValid(string fileName);
    internal static bool AreAllActivities(ICollection c);
    internal static IDictionary PairUpCommonParentActivities(ICollection activities);
    internal static Activity[] GetTopLevelActivities(ICollection activities);
    internal static Activity[] GetNestedActivities(CompositeActivity compositeActivity);
    internal static IList GetIdentifiersInCompositeActivity(CompositeActivity compositeActivity);
    internal static Activity[] GetAllNestedActivities(CompositeActivity compositeActivity);
    internal static string MergeNamespaces(string primaryNs, string secondaryNs);
    internal static Activity GetRootActivity(Activity activity);
    internal static Stream SerializeDesignersToStream(ICollection activities);
    internal static void DeserializeDesignersFromStream(ICollection activities, Stream stateStream);
    internal static string GetBaseIdentifier(Activity activity);
    internal static string GetRootNamespace(IServiceProvider serviceProvider);
    internal static Type GetDataSourceClass(Activity activity, IServiceProvider serviceProvider);
    internal static Activity GetDataSourceActivity(Activity activity, string inputName, String& name);
    internal static void GetNamespaceAndClassName(string fullQualifiedName, String& namespaceName, String& className);
    internal static CodeTypeDeclaration GetCodeNamespaceAndClass(CodeNamespaceCollection namespaces, string namespaceName, string className, CodeNamespace& codeNamespace);
    internal static string GetClassName(string fullQualifiedName);
    internal static Type GetBaseType(PropertyInfo property, object owner, IServiceProvider serviceProvider);
    internal static AccessTypes GetAccessType(PropertyInfo property, object owner, IServiceProvider serviceProvider);
    internal static bool IsChildActivity(CompositeActivity parent, Activity activity);
    internal static bool TypesEqual(CodeTypeReference typeLeft, Type typeRight);
    internal static bool TypesEqual(CodeTypeReference typeLeft, CodeTypeReference typeRight);
    internal static DesignerSerializationVisibility GetSerializationVisibility(MemberInfo memberInfo);
    internal static MethodInfo GetMethodExactMatch(Type type, string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    internal static T GetAttributeFromObject(object attributeObject);
    internal static Type GetDelegateFromEvent(EventInfo eventInfo);
    internal static void AddTypeProviderAssembliesFromRegistry(TypeProvider typeProvider, IServiceProvider serviceProvider);
    internal static void UpdateTypeProviderAssembliesRegistry(string assemblyName);
    internal static CompositeActivity GetDeclaringActivity(Activity activity);
    internal static bool IsActivityLocked(Activity activity);
    internal static Activity GetEnclosingActivity(Activity activity);
    public static IList`1<Activity> GetAllEnabledActivities(CompositeActivity compositeActivity);
    public static bool IsFrameworkActivity(Activity activity);
    internal static MethodInfo GetInterfaceMethod(Type interfaceType, string methodName);
    internal static XmlWriter CreateXmlWriter(object output);
    internal static string GetDesignTimeTypeName(object owner, object key);
    internal static void SetDesignTimeTypeName(object owner, object key, string value);
    internal static bool IsCustomActivity(CompositeActivity compositeActivity);
    internal static Activity ParseActivity(Activity parsingContext, string activityName);
    internal static Activity ParseActivityForBind(Activity context, string activityName);
    internal static bool IsAlternateFlowActivity(Activity activity);
}
internal interface System.Workflow.Activities.Common.IPropertyValueProvider {
    public abstract virtual ICollection GetPropertyValues(ITypeDescriptorContext typeDescriptorContext);
}
internal static class System.Workflow.Activities.Common.NativeMethods : object {
    internal static int HDI_WIDTH;
    internal static int HDI_HEIGHT;
    internal static int HDI_TEXT;
    internal static int HDI_FORMAT;
    internal static int HDI_LPARAM;
    internal static int HDI_BITMAP;
    internal static int HDI_IMAGE;
    internal static int HDI_DI_SETITEM;
    internal static int HDI_ORDER;
    internal static int HDI_FILTER;
    internal static int HDF_LEFT;
    internal static int HDF_RIGHT;
    internal static int HDF_CENTER;
    internal static int HDF_JUSTIFYMASK;
    internal static int HDF_RTLREADING;
    internal static int HDF_OWNERDRAW;
    internal static int HDF_STRING;
    internal static int HDF_BITMAP;
    internal static int HDF_BITMAP_ON_RIGHT;
    internal static int HDF_IMAGE;
    internal static int HDF_SORTUP;
    internal static int HDF_SORTDOWN;
    internal static int LVM_GETHEADER;
    internal static int HDM_GETITEM;
    internal static int HDM_SETITEM;
    internal static int HORZRES;
    internal static int VERTRES;
    internal static int LOGPIXELSX;
    internal static int LOGPIXELSY;
    internal static int PHYSICALWIDTH;
    internal static int PHYSICALHEIGHT;
    internal static int PHYSICALOFFSETX;
    internal static int PHYSICALOFFSETY;
    internal static int WM_SETREDRAW;
    internal static int HOLLOW_BRUSH;
    internal static int OBJ_PEN;
    internal static int OBJ_BRUSH;
    internal static int OBJ_EXTPEN;
    internal static int GM_ADVANCED;
    internal static int PS_COSMETIC;
    internal static int PS_USERSTYLE;
    internal static int BS_SOLID;
    internal static int WS_POPUP;
    internal static int WS_EX_DLGMODALFRAME;
    internal static int WM_SETICON;
    internal static int SMALL_ICON;
    internal static int LARGE_ICON;
    internal static int PS_SOLID;
    internal static int SWP_NOSIZE;
    internal static int SWP_NOZORDER;
    internal static int SWP_NOACTIVATE;
    internal static int WM_NOTIFY;
    internal static int WM_SETFONT;
    internal static int WS_EX_TOPMOST;
    internal static int WM_KEYDOWN;
    internal static int WM_KEYUP;
    internal static int WM_SYSKEYDOWN;
    internal static int WM_SYSKEYUP;
    internal static int TTF_IDISHWND;
    internal static int TTF_CENTERTIP;
    internal static int TTF_RTLREADING;
    internal static int TTF_SUBCLASS;
    internal static int TTF_TRACK;
    internal static int TTF_ABSOLUTE;
    internal static int TTF_TRANSPARENT;
    internal static int TTF_PARSELINKS;
    internal static int TTF_DI_SETITEM;
    internal static int TTS_ALWAYSTIP;
    internal static int TTS_NOPREFIX;
    internal static int TTS_NOANIMATE;
    internal static int TTS_NOFADE;
    internal static int TTS_BALLOON;
    internal static int TTS_CLOSE;
    internal static int TTDT_AUTOMATIC;
    internal static int TTDT_RESHOW;
    internal static int TTDT_AUTOPOP;
    internal static int TTDT_INITIAL;
    internal static int TTI_NONE;
    internal static int TTI_INFO;
    internal static int TTI_WARNING;
    internal static int TTI_ERROR;
    internal static int TTN_GETDISPINFO;
    internal static int TTN_NEEDTEXT;
    internal static int TTN_SHOW;
    internal static int TTN_POP;
    internal static int TTM_POP;
    internal static int TTM_ADDTOOL;
    internal static int TTM_SETTITLE;
    internal static int TTM_DELTOOL;
    internal static int TTM_NEWTOOLRECT;
    internal static int TTM_GETTOOLINFO;
    internal static int TTM_SETTOOLINFO;
    internal static int TTM_HITTEST;
    internal static int TTM_GETTEXT;
    internal static int TTM_UPDATETIPTEXT;
    internal static int TTM_ENUMTOOLS;
    internal static int TTM_GETCURRENTTOOL;
    internal static int TTM_TRACKACTIVATE;
    internal static int TTM_TRACKPOSITION;
    internal static int TTM_ACTIVATE;
    internal static int TTM_ADJUSTRECT;
    internal static int TTM_SETDELAYTIME;
    internal static int TTM_RELAYEVENT;
    internal static int TTM_UPDATE;
    internal static int TTM_WINDOWFROMPOINT;
    internal static int TTM_GETDELAYTIME;
    internal static int TTM_SETMAXTIPWIDTH;
    private static NativeMethods();
    internal static bool Failed(int hr);
    internal static int ThrowOnFailure(int hr);
    internal static int ThrowOnFailure(int hr, Int32[] expectedHRFailure);
    internal static IntPtr ListView_GetHeader(IntPtr hWndLV);
    internal static bool Header_GetItem(IntPtr hWndHeader, int index, HDITEM hdi);
    internal static bool Header_SetItem(IntPtr hWndHeader, int index, HDITEM hdi);
    internal static bool DeleteObject(IntPtr hObject);
    public static int GetDeviceCaps(IntPtr hDC, int nIndex);
    public static IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, HDITEM lParam);
    public static bool IsWindowVisible(IntPtr hWnd);
    public static IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);
    public static bool LineTo(HandleRef hdc, int x, int y);
    public static bool MoveToEx(HandleRef hdc, int x, int y, POINT pt);
    public static IntPtr SelectObject(HandleRef hdc, HandleRef obj);
    public static IntPtr GetCurrentObject(HandleRef hDC, UInt32 uObjectType);
    public static int DeleteObject(HandleRef hObject);
    public static IntPtr ExtCreatePen(int style, int nWidth, LOGBRUSH logbrush, int styleArrayLength, Int32[] styleArray);
    public static int SetWorldTransform(HandleRef hdc, XFORM xform);
    public static int SetGraphicsMode(HandleRef hdc, int iMode);
    internal static IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, TOOLINFO& ti);
    internal static IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, RECT& rc);
    internal static int SetWindowPos(IntPtr hWnd, IntPtr hwndInsertAfter, int x, int y, int width, int height, int flags);
}
internal class System.Workflow.Activities.Common.ParameterInfoBasedPropertyDescriptor : PropertyDescriptor {
    internal Type ParameterType { get; }
    public string Description { get; }
    public string Category { get; }
    public string DisplayName { get; }
    public bool IsReadOnly { get; }
    public Type ComponentType { get; }
    public string Name { get; }
    public Type PropertyType { get; }
    public TypeConverter Converter { get; }
    public AttributeCollection Attributes { get; }
    internal ParameterInfoBasedPropertyDescriptor(Type componentType, ParameterInfo paramInfo, bool avoidDuplication, Attribute[] attributes);
    internal ParameterInfoBasedPropertyDescriptor(Type componentType, string propertyName, Type propertyType, bool avoidDuplication, Attribute[] attributes);
    internal Type get_ParameterType();
    public virtual string get_Description();
    public virtual string get_Category();
    public virtual object GetEditor(Type editorBaseType);
    public virtual string get_DisplayName();
    public virtual bool get_IsReadOnly();
    public virtual Type get_ComponentType();
    public virtual string get_Name();
    internal static MemberInfo FindMatchingMember(string name, Type ownerType, bool ignoreCase);
    public virtual Type get_PropertyType();
    public virtual TypeConverter get_Converter();
    public virtual AttributeCollection get_Attributes();
    public virtual void ResetValue(object component);
    public virtual bool CanResetValue(object component);
    public virtual bool ShouldSerializeValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual object GetValue(object component);
    public static string GetParameterPropertyName(Type componentType, string paramName);
}
internal static class System.Workflow.Activities.Common.ParseHelpers : object {
    private static ParseHelpers();
    internal static bool ParseTypeName(string inputTypeName, ParseTypeNameLanguage parseTypeNameLanguage, String& typeName, String[]& parameters, String& elemantDecorator);
    internal static bool AssemblyNameEquals(AssemblyName thisName, AssemblyName thatName);
    internal static bool AssemblyNameEquals(AssemblyName thisName, string thatName);
    internal static string FormatType(Type type, SupportedLanguages language);
    internal static string FormatType(string type, SupportedLanguages language);
    internal static Type ParseTypeName(ITypeProvider typeProvider, SupportedLanguages language, string typeName);
}
internal static class System.Workflow.Activities.Common.PropertyDescriptorUtils : object {
    internal static ISite GetSite(IServiceProvider serviceProvider, object component);
    internal static IComponent GetComponent(ITypeDescriptorContext context);
    internal static Type GetBaseType(PropertyDescriptor property, object owner, IServiceProvider serviceProvider);
    internal static void SetPropertyValue(IServiceProvider serviceProvider, PropertyDescriptor propertyDescriptor, object component, object value);
}
internal class System.Workflow.Activities.Common.PropertyValueProviderTypeConverter : TypeConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
internal enum System.Workflow.Activities.Common.SupportedLanguages : Enum {
    public int value__;
    public static SupportedLanguages VB;
    public static SupportedLanguages CSharp;
}
internal class System.Workflow.Activities.Common.TypeDescriptorContext : object {
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public TypeDescriptorContext(IServiceProvider serviceProvider, PropertyDescriptor propDesc, object instance);
    public sealed virtual IContainer get_Container();
    public sealed virtual object get_Instance();
    public sealed virtual PropertyDescriptor get_PropertyDescriptor();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual bool OnComponentChanging();
    public sealed virtual void OnComponentChanged();
}
internal class System.Workflow.Activities.Common.TypePropertyDescriptor : DynamicPropertyDescriptor {
    public TypeConverter Converter { get; }
    public TypePropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor actualPropDesc);
    public virtual TypeConverter get_Converter();
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
}
internal class System.Workflow.Activities.Common.TypePropertyTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object valueToConvert);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Workflow.Activities.Common.TypePropertyValueProviderTypeConverter : TypePropertyTypeConverter {
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
}
internal static class System.Workflow.Activities.Common.UserDataKeys : object {
    internal static Guid LookupPaths;
    internal static Guid BindDataSource;
    internal static Guid BindDataContextActivity;
    internal static Guid CodeSegment_New;
    internal static Guid CodeSegment_ColumnNumber;
    internal static Guid CustomActivityDefaultName;
    internal static Guid NewBaseType;
    internal static Guid DesignTimeTypeNames;
    internal static Guid CustomActivity;
    private static UserDataKeys();
}
internal static class System.Workflow.Activities.Common.ValidationHelpers : object {
    internal static void ValidateIdentifier(IServiceProvider serviceProvider, string identifier);
    internal static ValidationError ValidateIdentifier(string propName, IServiceProvider context, string identifier);
    internal static ValidationError ValidateNameProperty(string propName, IServiceProvider context, string identifier);
    internal static ValidationErrorCollection ValidateUniqueIdentifiers(Activity rootActivity);
    internal static bool IsActivitySourceInOrder(Activity request, Activity response);
    internal static ValidationErrorCollection ValidateObject(ValidationManager manager, object obj);
    internal static ValidationErrorCollection ValidateActivity(ValidationManager manager, Activity activity);
    internal static ValidationErrorCollection ValidateProperty(ValidationManager manager, Activity activity, object obj, PropertyValidationContext propertyValidationContext);
    internal static ValidationErrorCollection ValidateProperty(ValidationManager manager, Activity activity, object obj, PropertyValidationContext propertyValidationContext, object extendedPropertyContext);
}
internal class System.Workflow.Activities.Common.Walker : object {
    public Walker(bool useEnabledActivities);
    [CompilerGeneratedAttribute]
internal void add_FoundActivity(WalkerEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FoundActivity(WalkerEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_FoundProperty(WalkerEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FoundProperty(WalkerEventHandler value);
    public void Walk(Activity seedActivity);
    public void Walk(Activity seedActivity, bool walkChildren);
    public bool WalkProperties(Activity activity, object obj);
}
internal enum System.Workflow.Activities.Common.WalkerAction : Enum {
    public int value__;
    public static WalkerAction Continue;
    public static WalkerAction Skip;
    public static WalkerAction Abort;
}
internal class System.Workflow.Activities.Common.WalkerEventArgs : EventArgs {
    public WalkerAction Action { get; public set; }
    public PropertyInfo CurrentProperty { get; }
    public object CurrentPropertyOwner { get; }
    public object CurrentValue { get; }
    public Activity CurrentActivity { get; }
    internal WalkerEventArgs(Activity currentActivity);
    internal WalkerEventArgs(Activity currentActivity, object currentValue, PropertyInfo currentProperty, object currentPropertyOwner);
    public WalkerAction get_Action();
    public void set_Action(WalkerAction value);
    public PropertyInfo get_CurrentProperty();
    public object get_CurrentPropertyOwner();
    public object get_CurrentValue();
    public Activity get_CurrentActivity();
}
internal class System.Workflow.Activities.Common.WalkerEventHandler : MulticastDelegate {
    public WalkerEventHandler(object object, IntPtr method);
    public virtual void Invoke(Walker walker, WalkerEventArgs eventArgs);
    public virtual IAsyncResult BeginInvoke(Walker walker, WalkerEventArgs eventArgs, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[SRDescriptionAttribute("CompensatableSequenceActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.SequenceDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.Activities.CompensatableSequenceActivity", "Resources.Sequence.png")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.CompensatableSequenceActivity : SequenceActivity {
    public CompensatableSequenceActivity(string name);
    private sealed virtual override ActivityExecutionStatus System.Workflow.ComponentModel.ICompensatableActivity.Compensate(ActivityExecutionContext executionContext);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.ConditionalEventArgs : EventArgs {
    public bool Result { get; public set; }
    public ConditionalEventArgs(bool result);
    public bool get_Result();
    public void set_Result(bool value);
}
[SRDescriptionAttribute("ConstrainedGroupActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.ConditionedActivityGroupDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.Activities.ConditionedActivityGroup", "Resources.cag.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.ConditionedActivityGroupValidator")]
[SRCategoryAttribute("Standard")]
[WorkflowDebuggerSteppingAttribute("1")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.ConditionedActivityGroup : CompositeActivity {
    public static DependencyProperty WhenConditionProperty;
    public static DependencyProperty UntilConditionProperty;
    [SRCategoryAttribute("Conditions")]
[SRDescriptionAttribute("UntilConditionDescr")]
[DefaultValueAttribute("")]
public ActivityCondition UntilCondition { get; public set; }
    internal ConditionedActivityGroupStateInfo CAGState { get; internal set; }
    public ConditionedActivityGroup(string name);
    private static ConditionedActivityGroup();
    public static object GetWhenCondition(object dependencyObject);
    public static void SetWhenCondition(object dependencyObject, object value);
    public ActivityCondition get_UntilCondition();
    public void set_UntilCondition(ActivityCondition value);
    public Activity GetDynamicActivity(string childActivityName);
    public int GetChildActivityExecutedCount(Activity child);
    internal ConditionedActivityGroupStateInfo get_CAGState();
    internal void set_CAGState(ConditionedActivityGroupStateInfo value);
    protected virtual void OnClosed(IServiceProvider provider);
    protected virtual void OnActivityChangeAdd(ActivityExecutionContext executionContext, Activity addedActivity);
    protected virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    internal bool EvaluateConditions(ConditionedActivityGroup cag, ActivityExecutionContext context);
    internal void TriggerChildren(ConditionedActivityGroup cag, ActivityExecutionContext context);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    internal void HandleEvent(ActivityExecutionContext context, SubscriptionEventArg e);
    internal bool Cleanup(ConditionedActivityGroup cag, ActivityExecutionContext context);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.ConditionedActivityGroupDesignerTheme")]
internal class System.Workflow.Activities.ConditionedActivityGroupDesigner : ActivityPreviewDesigner {
    protected virtual void Initialize(Activity activity);
    protected virtual void Dispose(bool disposing);
}
internal class System.Workflow.Activities.ConditionedActivityGroupDesignerTheme : ActivityPreviewDesignerTheme {
    public ConditionedActivityGroupDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.ConditionedActivityGroupStateInfo : object {
    internal bool Completed { get; internal set; }
    internal bool Testing { get; internal set; }
    internal Dictionary`2<string, CAGChildStats> ChildrenStats { get; }
    internal ConditionedActivityGroupStateInfo(ConditionedActivityGroup cag);
    internal bool get_Completed();
    internal void set_Completed(bool value);
    internal bool get_Testing();
    internal void set_Testing(bool value);
    internal Dictionary`2<string, CAGChildStats> get_ChildrenStats();
}
internal class System.Workflow.Activities.ConditionedActivityGroupValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
    public virtual ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action);
}
internal class System.Workflow.Activities.ConditionedDesignerTheme : CompositeDesignerTheme {
    public ConditionedDesignerTheme(WorkflowTheme theme);
}
[ProvidePropertyAttribute("WhenCondition", "System.Workflow.ComponentModel.Activity")]
[ProvidePropertyAttribute("UnlessCondition", "System.Workflow.ComponentModel.Activity")]
internal class System.Workflow.Activities.ConditionPropertyProviderExtender : object {
    [SRCategoryAttribute("ConditionedActivityConditions")]
[SRDescriptionAttribute("WhenConditionDescr")]
[DesignerSerializationVisibilityAttribute("0")]
public ActivityCondition GetWhenCondition(Activity activity);
    [SRCategoryAttribute("ConditionedActivityConditions")]
[SRDescriptionAttribute("WhenConditionDescr")]
public void SetWhenCondition(Activity activity, ActivityCondition handler);
    public sealed virtual bool CanExtend(object extendee);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.Configuration.ActiveDirectoryRoleFactoryConfiguration : ConfigurationSection {
    [ConfigurationPropertyAttribute("RootPath")]
public string RootPath { get; public set; }
    [ConfigurationPropertyAttribute("Manager")]
public string Manager { get; public set; }
    [ConfigurationPropertyAttribute("DistiguishedName")]
public string DistinguishedName { get; public set; }
    [ConfigurationPropertyAttribute("DirectReports")]
public string DirectReports { get; public set; }
    [ConfigurationPropertyAttribute("Group")]
public string Group { get; public set; }
    [ConfigurationPropertyAttribute("Member")]
public string Member { get; public set; }
    public string get_RootPath();
    public void set_RootPath(string value);
    public string get_Manager();
    public void set_Manager(string value);
    public string get_DistinguishedName();
    public void set_DistinguishedName(string value);
    public string get_DirectReports();
    public void set_DirectReports(string value);
    public string get_Group();
    public void set_Group(string value);
    public string get_Member();
    public void set_Member(string value);
}
[AttributeUsageAttribute("4672")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.CorrelationAliasAttribute : Attribute {
    public string Name { get; }
    public string Path { get; }
    public CorrelationAliasAttribute(string name, string path);
    public string get_Name();
    public string get_Path();
}
[AttributeUsageAttribute("576")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.CorrelationInitializerAttribute : Attribute {
}
internal class System.Workflow.Activities.CorrelationMethodResolver : object {
    internal ICorrelationProvider CorrelationProvider { get; }
    internal CorrelationMethodResolver(Type interfaceType);
    internal ICorrelationProvider get_CorrelationProvider();
}
[AttributeUsageAttribute("1024")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.CorrelationParameterAttribute : Attribute {
    public string Name { get; }
    public CorrelationParameterAttribute(string name);
    public string get_Name();
}
internal class System.Workflow.Activities.CorrelationPropertyValue : object {
    internal string Name { get; }
    internal CorrelationPropertyValue(string name, string locationPath, int signaturePosition);
    internal object GetValue(Object[] args);
    internal string get_Name();
}
[AttributeUsageAttribute("1028")]
internal class System.Workflow.Activities.CorrelationProviderAttribute : Attribute {
    internal Type CorrelationProviderType { get; }
    internal CorrelationProviderAttribute(Type correlationProviderType);
    internal Type get_CorrelationProviderType();
}
internal static class System.Workflow.Activities.CorrelationResolver : object {
    private static CorrelationResolver();
    internal static bool IsInitializingMember(Type interfaceType, string memberName, Object[] methodArgs);
    internal static ICollection`1<CorrelationProperty> ResolveCorrelationValues(Type interfaceType, string eventName, Object[] eventArgs, bool provideInitializerTokens);
    internal static ICorrelationProvider GetCorrelationProvider(Type interfaceType);
}
internal static class System.Workflow.Activities.CorrelationService : object {
    internal static void Initialize(IServiceProvider context, Activity activity, Type interfaceType, string methodName, Guid instanceId);
    internal static bool Subscribe(IServiceProvider context, Activity activity, Type interfaceType, string methodName, IActivityEventListener`1<QueueEventArgs> eventListener, Guid instanceId);
    internal static bool Unsubscribe(IServiceProvider context, Activity activity, Type interfaceType, string methodName, IActivityEventListener`1<QueueEventArgs> eventListener);
    internal static IComparable ResolveQueueName(Activity activity, Type interfaceType, string methodName);
    internal static void InvalidateCorrelationToken(Activity activity, Type interfaceType, string methodName, Object[] messageArgs);
    internal static void UninitializeFollowers(Type interfaceType, string initializer, WorkflowQueue initializerQueue);
}
internal static class System.Workflow.Activities.CorrelationSetsValidator : object {
    internal static ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal class System.Workflow.Activities.CorrelationTokenInvalidatedHandler : object {
    internal CorrelationTokenInvalidatedHandler(Type interfaceType, string operation, IActivityEventListener`1<QueueEventArgs> eventHandler, Guid instanceId);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.Runtime.CorrelationTokenEventArgs>.OnEvent(object sender, CorrelationTokenEventArgs dataChangeEventArgs);
}
internal class System.Workflow.Activities.CorrelationTokenTypeConverter : ExpandableObjectConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
internal class System.Workflow.Activities.DefaultCorrelationProvider : object {
    internal DefaultCorrelationProvider(Type interfaceType);
    private sealed virtual override ICollection`1<CorrelationProperty> System.Workflow.Activities.ICorrelationProvider.ResolveCorrelationPropertyValues(Type interfaceType, string methodName, Object[] methodArgs, bool provideInitializerTokens);
    private sealed virtual override bool System.Workflow.Activities.ICorrelationProvider.IsInitializingMember(Type interfaceType, string memberName, Object[] methodArgs);
}
[SRDescriptionAttribute("DelayActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.DelayDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.Activities.DelayActivity", "Resources.Delay.png")]
[DefaultEventAttribute("InitializeTimeoutDuration")]
[ActivityValidatorAttribute("System.Workflow.Activities.DelayActivity/DelayActivityValidator")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.DelayActivity : Activity {
    public static DependencyProperty InitializeTimeoutDurationEvent;
    public static DependencyProperty TimeoutDurationProperty;
    [SRDescriptionAttribute("TimeoutDurationDescription")]
[MergablePropertyAttribute("False")]
[TypeConverterAttribute("System.Workflow.Activities.DelayActivity/TimeoutDurationConverter")]
public TimeSpan TimeoutDuration { get; public set; }
    private IComparable System.Workflow.Activities.IEventActivity.QueueName { get; }
    public DelayActivity(string name);
    private static DelayActivity();
    public void add_InitializeTimeoutDuration(EventHandler value);
    public void remove_InitializeTimeoutDuration(EventHandler value);
    public TimeSpan get_TimeoutDuration();
    public void set_TimeoutDuration(TimeSpan value);
    protected virtual void Initialize(IServiceProvider provider);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    protected sealed virtual ActivityExecutionStatus HandleFault(ActivityExecutionContext executionContext, Exception exception);
    protected virtual void OnClosed(IServiceProvider provider);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>.OnEvent(object sender, QueueEventArgs e);
    private sealed virtual override void System.Workflow.Activities.IEventActivity.Subscribe(ActivityExecutionContext parentContext, IActivityEventListener`1<QueueEventArgs> parentEventHandler);
    private sealed virtual override void System.Workflow.Activities.IEventActivity.Unsubscribe(ActivityExecutionContext parentContext, IActivityEventListener`1<QueueEventArgs> parentEventHandler);
    private sealed virtual override IComparable System.Workflow.Activities.IEventActivity.get_QueueName();
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.DelayDesignerTheme")]
internal class System.Workflow.Activities.DelayDesigner : ActivityDesigner {
}
internal class System.Workflow.Activities.DelayDesignerTheme : ActivityDesignerTheme {
    public DelayDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.DirectoryGroupQuery : object {
    public sealed virtual void GetResult(DirectoryEntry rootEntry, DirectoryEntry currentEntry, List`1<DirectoryEntry> response);
}
internal class System.Workflow.Activities.DirectoryLocalQuery : object {
    internal string m_name;
    internal string m_value;
    internal DirectoryQueryOperation m_operation;
    public DirectoryLocalQuery(string name, string value, DirectoryQueryOperation operation);
    public sealed virtual void GetResult(DirectoryEntry rootEntry, DirectoryEntry currentEntry, List`1<DirectoryEntry> response);
}
internal enum System.Workflow.Activities.DirectoryQueryOperation : Enum {
    public int value__;
    public static DirectoryQueryOperation Equal;
    public static DirectoryQueryOperation NotEqual;
}
internal class System.Workflow.Activities.DirectoryRedirect : object {
    public DirectoryRedirect(string getPropertyName, string searchPropertyName);
    public DirectoryRedirect(string getPropertyName, string searchPropertyName, bool recursive);
    public sealed virtual void GetResult(DirectoryEntry rootEntry, DirectoryEntry currentEntry, List`1<DirectoryEntry> response);
}
internal class System.Workflow.Activities.DirectoryRootQuery : object {
    public DirectoryRootQuery(string name, string value, DirectoryQueryOperation operation);
    public sealed virtual void GetResult(DirectoryEntry rootEntry, DirectoryEntry currentEntry, List`1<DirectoryEntry> response);
}
internal class System.Workflow.Activities.DisableQueuesAction : StateMachineAction {
    internal DisableQueuesAction(string stateName);
    internal virtual void Execute(ActivityExecutionContext context);
}
internal static class System.Workflow.Activities.DR : object {
    internal static Color TransparentColor;
    internal static string ResourceSet;
    internal static string DropActivityHere;
    internal static string MoveLeftDesc;
    internal static string MoveRightDesc;
    internal static string DropEventsHere;
    internal static string InvokeWebServiceDisplayName;
    internal static string ScopeDesc;
    internal static string EventsDesc;
    internal static string SequentialWorkflowHelpText;
    internal static string StartSequentialWorkflow;
    internal static string WorkflowExceptions;
    internal static string WorkflowEvents;
    internal static string WorkflowCompensation;
    internal static string WorkflowCancellation;
    internal static string EventBasedWorkFlow;
    internal static string AddNewEvent;
    internal static string DeleteEvent;
    internal static string ViewPreviousEvent;
    internal static string ViewNextEvent;
    internal static string NavigateToEvent;
    internal static string View;
    internal static string AddNewEventDesc;
    internal static string DeleteEventDesc;
    internal static string NavigateToEventDesc;
    internal static string ViewPreviousEventDesc;
    internal static string ViewNextEventDesc;
    internal static string WebServiceReceiveDisplayName;
    internal static string WebServiceResponseDisplayName;
    internal static string WebServiceFaultDisplayName;
    internal static string AddState;
    internal static string AddEventDriven;
    internal static string AddStateInitialization;
    internal static string AddStateFinalization;
    internal static string AddingChild;
    internal static string StateHelpText;
    internal static string StateMachineWorkflowHelpText;
    internal static string StateMachineView;
    internal static string SetAsInitialState;
    internal static string SetAsCompletedState;
    internal static string SendToBack;
    internal static string BringToFront;
    internal static string ImageFileFilter;
    internal static string Compensation;
    internal static string SequenceArrow;
    internal static string Event;
    internal static string Exception;
    internal static string NewEvent;
    internal static string Delete;
    internal static string NextEvent;
    internal static string PreviousEvent;
    internal static string NavigateEvent;
    internal static string WorkflowView;
    internal static string ExceptionsView;
    internal static string EventsView;
    internal static string CompensationView;
    internal static string InitialState;
    internal static string CompletedState;
    internal static string ThemePropertyReadOnly;
    internal static string Error_InvalidImageResource;
    private static DR();
    internal static string GetString(string resID);
    internal static Image GetImage(string resID);
}
internal class System.Workflow.Activities.EnteringStateAction : StateMachineAction {
    internal EnteringStateAction(string stateName);
    internal virtual void Execute(ActivityExecutionContext context);
}
internal class System.Workflow.Activities.EventActivitySubscription : StateMachineSubscription {
    internal string EventActivityName { get; }
    internal string StateName { get; }
    internal IComparable QueueName { get; }
    internal string EventDrivenName { get; }
    internal string get_EventActivityName();
    internal string get_StateName();
    internal IComparable get_QueueName();
    internal string get_EventDrivenName();
    internal void Subscribe(ActivityExecutionContext context, StateActivity state, IEventActivity eventActivity);
    internal void Unsubscribe(ActivityExecutionContext context, IEventActivity eventActivity);
    protected virtual void Enqueue(ActivityExecutionContext context);
    internal virtual void ProcessEvent(ActivityExecutionContext context);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.EventDeliveryFailedException : SystemException {
    public EventDeliveryFailedException(string message);
    public EventDeliveryFailedException(string message, Exception innerException);
    private EventDeliveryFailedException(SerializationInfo info, StreamingContext context);
}
[SRDescriptionAttribute("EventDrivenActivityDescription")]
[DesignerAttribute("System.Workflow.Activities.EventDrivenDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[ToolboxBitmapAttribute("System.Workflow.Activities.EventDrivenActivity", "Resources.EventDriven.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.EventDrivenValidator")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.EventDrivenActivity : SequenceActivity {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IEventActivity EventActivity { get; }
    public EventDrivenActivity(string name);
    public IEventActivity get_EventActivity();
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.EventDrivenDesignerTheme")]
internal class System.Workflow.Activities.EventDrivenDesigner : SequenceDesigner {
    public bool CanExpandCollapse { get; }
    public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner);
    protected virtual void DoDefaultAction();
    public virtual bool get_CanExpandCollapse();
}
internal class System.Workflow.Activities.EventDrivenDesignerTheme : CompositeDesignerTheme {
    public EventDrivenDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.EventDrivenValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
    public virtual ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action);
}
[ToolboxItemAttribute("False")]
[DesignerAttribute("System.Workflow.Activities.EventHandlersDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.Activities.EventHandlersActivity", "Resources.events.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.EventHandlersValidator")]
[SRCategoryAttribute("Standard")]
[AlternateFlowActivityAttribute]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.EventHandlersActivity : CompositeActivity {
    public EventHandlersActivity(string name);
    private static EventHandlersActivity();
    internal void UnsubscribeAndClose();
    protected virtual void OnClosed(IServiceProvider provider);
    protected virtual void Initialize(IServiceProvider provider);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    protected virtual void OnActivityChangeAdd(ActivityExecutionContext executionContext, Activity addedActivity);
    protected virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    public Activity GetDynamicActivity(string childActivityName);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.EventHandlersDesignerTheme")]
internal class System.Workflow.Activities.EventHandlersDesigner : ActivityPreviewDesigner {
    public bool CanExpandCollapse { get; }
    public object FirstSelectableObject { get; }
    public object LastSelectableObject { get; }
    protected virtual void Initialize(Activity activity);
    public virtual bool get_CanExpandCollapse();
    public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner);
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    public virtual object get_FirstSelectableObject();
    public virtual object get_LastSelectableObject();
}
internal class System.Workflow.Activities.EventHandlersDesignerTheme : ActivityPreviewDesignerTheme {
    public EventHandlersDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.EventHandlersValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[SRDescriptionAttribute("EventHandlingScopeActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[ToolboxBitmapAttribute("System.Workflow.Activities.EventHandlingScopeActivity", "Resources.Sequence.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.EventHandlingScopeValidator")]
[DesignerAttribute("System.Workflow.Activities.EventHandlingScopeDesigner", "System.ComponentModel.Design.IDesigner")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.EventHandlingScopeActivity : CompositeActivity {
    internal EventHandlersActivity EventHandlersActivity { get; }
    internal Activity BodyActivity { get; }
    public EventHandlingScopeActivity(string name);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    internal EventHandlersActivity get_EventHandlersActivity();
    internal Activity get_BodyActivity();
    protected virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
}
internal class System.Workflow.Activities.EventHandlingScopeActivityDesignerTheme : CompositeDesignerTheme {
    public EventHandlingScopeActivityDesignerTheme(WorkflowTheme theme);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.EventHandlingScopeActivityDesignerTheme")]
internal class System.Workflow.Activities.EventHandlingScopeDesigner : SequentialActivityDesigner {
    public bool CanExpandCollapse { get; }
    public virtual bool get_CanExpandCollapse();
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
}
internal class System.Workflow.Activities.EventHandlingScopeValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
    public virtual ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.EventQueueName : object {
    public Type InterfaceType { get; }
    public string MethodName { get; }
    public EventQueueName(Type interfaceType, string operation);
    public EventQueueName(Type interfaceType, string operation, ICollection`1<CorrelationProperty> propertyValues);
    internal EventQueueName(Type interfaceType, string operation, string activityId);
    public Type get_InterfaceType();
    public string get_MethodName();
    public CorrelationProperty[] GetCorrelationValues();
    public sealed virtual int CompareTo(object toCompare);
    public int CompareTo(EventQueueName eventQueueName);
    public virtual bool Equals(object obj);
    public static bool op_Equality(EventQueueName queueKey1, EventQueueName queueKey2);
    public static bool op_Inequality(EventQueueName queueKey1, EventQueueName queueKey2);
    public static bool op_LessThan(EventQueueName queueKey1, EventQueueName queueKey2);
    public static bool op_GreaterThan(EventQueueName queueKey1, EventQueueName queueKey2);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class System.Workflow.Activities.EventSinkDesignerTheme : ActivityDesignerTheme {
    public EventSinkDesignerTheme(WorkflowTheme theme);
}
internal enum System.Workflow.Activities.EventType : Enum {
    public byte value__;
    public static EventType Timer;
    public static EventType DataChange;
    public static EventType StatusChange;
    public static EventType MessageArrival;
    public static EventType LockAcquisition;
    public static EventType InterActivity;
}
internal class System.Workflow.Activities.ExecuteChildStateAction : StateMachineAction {
    internal string ChildStateName { get; }
    internal ExecuteChildStateAction(string stateName, string childStateName);
    internal string get_ChildStateName();
    internal virtual void Execute(ActivityExecutionContext context);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public enum System.Workflow.Activities.ExecutionType : Enum {
    public int value__;
    public static ExecutionType Sequence;
    public static ExecutionType Parallel;
}
internal class System.Workflow.Activities.ExtendedPropertyInfo : PropertyInfo {
    public string Name { get; }
    public Type DeclaringType { get; }
    public Type ReflectedType { get; }
    public Type PropertyType { get; }
    public PropertyAttributes Attributes { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    internal ExtendedPropertyInfo(PropertyInfo propertyInfo, GetValueHandler getValueHandler);
    public virtual string get_Name();
    public virtual Type get_DeclaringType();
    public virtual Type get_ReflectedType();
    public virtual Type get_PropertyType();
    public virtual MethodInfo[] GetAccessors(bool nonPublic);
    public virtual MethodInfo GetGetMethod(bool nonPublic);
    public virtual MethodInfo GetSetMethod(bool nonPublic);
    public virtual object GetValue(object obj, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, Object[] index, CultureInfo culture);
    public virtual ParameterInfo[] GetIndexParameters();
    public virtual PropertyAttributes get_Attributes();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.ExternalDataEventArgs : EventArgs {
    public Guid InstanceId { get; public set; }
    public object WorkItem { get; public set; }
    public IPendingWork WorkHandler { get; public set; }
    public string Identity { get; public set; }
    public bool WaitForIdle { get; public set; }
    public ExternalDataEventArgs(Guid instanceId);
    public ExternalDataEventArgs(Guid instanceId, IPendingWork workHandler, object workItem, bool waitForIdle);
    public ExternalDataEventArgs(Guid instanceId, IPendingWork workHandler, object workItem);
    public Guid get_InstanceId();
    public void set_InstanceId(Guid value);
    public object get_WorkItem();
    public void set_WorkItem(object value);
    public IPendingWork get_WorkHandler();
    public void set_WorkHandler(IPendingWork value);
    public string get_Identity();
    public void set_Identity(string value);
    public bool get_WaitForIdle();
    public void set_WaitForIdle(bool value);
}
[AttributeUsageAttribute("1024")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.ExternalDataExchangeAttribute : Attribute {
}
internal class System.Workflow.Activities.ExternalDataExchangeBinder : Binder {
    public virtual MethodBase BindToMethod(BindingFlags bindingAttr, MethodBase[] match, Object[]& args, ParameterModifier[] modifiers, CultureInfo culture, String[] names, Object& state);
    public virtual FieldInfo BindToField(BindingFlags bindingAttr, FieldInfo[] match, object value, CultureInfo culture);
    public virtual MethodBase SelectMethod(BindingFlags bindingAttr, MethodBase[] match, Type[] types, ParameterModifier[] modifiers);
    public virtual PropertyInfo SelectProperty(BindingFlags bindingAttr, PropertyInfo[] match, Type returnType, Type[] indexes, ParameterModifier[] modifiers);
    public virtual object ChangeType(object value, Type type, CultureInfo culture);
    public virtual void ReorderArgumentArray(Object[]& args, object state);
}
internal class System.Workflow.Activities.ExternalDataExchangeInterfaceTypeFilterProvider : object {
    public string FilterDescription { get; }
    public ExternalDataExchangeInterfaceTypeFilterProvider(IServiceProvider serviceProvider);
    public sealed virtual bool CanFilterType(Type type, bool throwOnError);
    public sealed virtual string get_FilterDescription();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.ExternalDataExchangeService : WorkflowRuntimeService {
    public ExternalDataExchangeService(string configSectionName);
    public ExternalDataExchangeService(NameValueCollection parameters);
    public ExternalDataExchangeService(ExternalDataExchangeServiceSection settings);
    internal ReadOnlyCollection`1<object> GetAllServices();
    protected virtual void Start();
    internal void SetEnqueueMessageWrapper(IDeliverMessage wrapper);
    internal object ServiceFromSettings(WorkflowRuntimeServiceElement serviceSettings);
    public virtual void AddService(object service);
    public virtual void RemoveService(object service);
    public virtual object GetService(Type serviceType);
    internal void InterceptService(object service, bool add);
    internal static bool IsIrrecoverableException(Exception e);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.ExternalDataExchangeServiceSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("Services")]
public WorkflowRuntimeServiceElementCollection Services { get; }
    public WorkflowRuntimeServiceElementCollection get_Services();
}
internal class System.Workflow.Activities.ExternalEventAction : StateMachineAction {
    internal string EventDrivenName { get; }
    internal ExternalEventAction(string stateName, string eventDrivenName);
    internal string get_EventDrivenName();
    internal virtual void Execute(ActivityExecutionContext context);
}
internal class System.Workflow.Activities.FollowerQueueCreator : object {
    internal FollowerQueueCreator(string operation);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>.OnEvent(object sender, QueueEventArgs args);
}
internal class System.Workflow.Activities.GetValueHandler : MulticastDelegate {
    public GetValueHandler(object object, IntPtr method);
    public virtual object Invoke(ExtendedPropertyInfo extendedProperty, object extendee);
    public virtual IAsyncResult BeginInvoke(ExtendedPropertyInfo extendedProperty, object extendee, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[SRDescriptionAttribute("HandleExternalEventActivityDescription")]
[DefaultEventAttribute("Invoked")]
[DesignerAttribute("System.Workflow.Activities.HandleExternalEventActivityDesigner", "System.ComponentModel.Design.IDesigner")]
[ActivityValidatorAttribute("System.Workflow.Activities.HandleExternalEventActivityValidator")]
[SRCategoryAttribute("Base")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.HandleExternalEventActivity : Activity {
    public static DependencyProperty CorrelationTokenProperty;
    public static DependencyProperty RolesProperty;
    public static DependencyProperty ParameterBindingsProperty;
    public static DependencyProperty InterfaceTypeProperty;
    public static DependencyProperty EventNameProperty;
    public static DependencyProperty InvokedEvent;
    internal static ArrayList ReservedParameterNames;
    [RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Workflow.Activities.Common.PropertyValueProviderTypeConverter")]
[SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("ExternalEventNameDescr")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string EventName { get; public set; }
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("HelperExternalDataExchangeDesc")]
[RefreshPropertiesAttribute("1")]
[EditorAttribute("System.Workflow.ComponentModel.Design.TypeBrowserEditor", "System.Drawing.Design.UITypeEditor")]
[TypeFilterProviderAttribute("System.Workflow.Activities.ExternalDataExchangeInterfaceTypeFilterProvider")]
[DefaultValueAttribute("")]
public Type InterfaceType { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[BrowsableAttribute("False")]
public WorkflowParameterBindingCollection ParameterBindings { get; }
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("RoleDescr")]
[EditorAttribute("System.Workflow.ComponentModel.Design.BindUITypeEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public WorkflowRoleCollection Roles { get; public set; }
    [SRCategoryAttribute("Activity")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("CorrelationSetDescr")]
[MergablePropertyAttribute("False")]
[TypeConverterAttribute("System.Workflow.Activities.CorrelationTokenTypeConverter")]
[DefaultValueAttribute("")]
public CorrelationToken CorrelationToken { get; public set; }
    private IComparable System.Workflow.Activities.IEventActivity.QueueName { get; }
    public HandleExternalEventActivity(string name);
    private static HandleExternalEventActivity();
    public virtual string get_EventName();
    public virtual void set_EventName(string value);
    public virtual Type get_InterfaceType();
    public virtual void set_InterfaceType(Type value);
    public WorkflowParameterBindingCollection get_ParameterBindings();
    public WorkflowRoleCollection get_Roles();
    public void set_Roles(WorkflowRoleCollection value);
    public virtual CorrelationToken get_CorrelationToken();
    public virtual void set_CorrelationToken(CorrelationToken value);
    public void add_Invoked(EventHandler`1<ExternalDataEventArgs> value);
    public void remove_Invoked(EventHandler`1<ExternalDataEventArgs> value);
    private sealed virtual override ICollection System.Workflow.Activities.Common.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
    protected virtual void InitializeProperties();
    protected sealed virtual void Initialize(IServiceProvider provider);
    protected virtual void OnInvoked(EventArgs e);
    protected sealed virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected sealed virtual ActivityExecutionStatus HandleFault(ActivityExecutionContext executionContext, Exception exception);
    protected sealed virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    protected virtual void OnClosed(IServiceProvider provider);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>.OnEvent(object sender, QueueEventArgs e);
    private sealed virtual override void System.Workflow.Activities.IEventActivity.Subscribe(ActivityExecutionContext parentContext, IActivityEventListener`1<QueueEventArgs> parentEventHandler);
    private sealed virtual override void System.Workflow.Activities.IEventActivity.Unsubscribe(ActivityExecutionContext parentContext, IActivityEventListener`1<QueueEventArgs> parentEventHandler);
    private sealed virtual override IComparable System.Workflow.Activities.IEventActivity.get_QueueName();
    private sealed virtual override Type System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider serviceProvider, string propertyName);
    private sealed virtual override AccessTypes System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider serviceProvider, string propertyName);
    internal void GetParameterPropertyDescriptors(IDictionary properties);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.EventSinkDesignerTheme")]
internal class System.Workflow.Activities.HandleExternalEventActivityDesigner : ActivityDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.HandleExternalEventActivityValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal interface System.Workflow.Activities.ICorrelationProvider {
    public abstract virtual ICollection`1<CorrelationProperty> ResolveCorrelationPropertyValues(Type interfaceType, string memberName, Object[] methodArgs, bool provideInitializerTokens);
    public abstract virtual bool IsInitializingMember(Type interfaceType, string memberName, Object[] methodArgs);
}
internal interface System.Workflow.Activities.IDeliverMessage {
    public abstract virtual Object[] PrepareEventArgsArray(object sender, ExternalDataEventArgs eventArgs, Object& workItem, IPendingWork& workHandler);
    public abstract virtual void DeliverMessage(ExternalDataEventArgs eventArgs, IComparable queueName, object message, object workItem, IPendingWork workHandler);
}
internal class System.Workflow.Activities.IdentityContextData : object {
    internal static string IdentityContext;
    internal string Identity { get; }
    internal IdentityContextData(string identity);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    internal string get_Identity();
}
internal interface System.Workflow.Activities.IDirectoryOperation {
    public abstract virtual void GetResult(DirectoryEntry rootEntry, DirectoryEntry currentEntry, List`1<DirectoryEntry> response);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public interface System.Workflow.Activities.IEventActivity {
    public IComparable QueueName { get; }
    public abstract virtual void Subscribe(ActivityExecutionContext parentContext, IActivityEventListener`1<QueueEventArgs> parentEventHandler);
    public abstract virtual void Unsubscribe(ActivityExecutionContext parentContext, IActivityEventListener`1<QueueEventArgs> parentEventHandler);
    public abstract virtual IComparable get_QueueName();
}
[SRDescriptionAttribute("ConditionalActivityDescription")]
[ToolboxItemAttribute("System.Workflow.Activities.IfElseToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.IfElseDesigner", "System.ComponentModel.Design.IDesigner")]
[SRCategoryAttribute("Standard")]
[ToolboxBitmapAttribute("System.Workflow.Activities.IfElseActivity", "Resources.Decision.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.IfElseValidator")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.IfElseActivity : CompositeActivity {
    public IfElseActivity(string name);
    public IfElseBranchActivity AddBranch(ICollection`1<Activity> activities);
    public IfElseBranchActivity AddBranch(ICollection`1<Activity> activities, ActivityCondition branchCondition);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
}
[DesignerAttribute("System.Workflow.Activities.IfElseBranchDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxItemAttribute("False")]
[ActivityValidatorAttribute("System.Workflow.Activities.IfElseBranchValidator")]
[ToolboxBitmapAttribute("System.Workflow.Activities.IfElseBranchActivity", "Resources.DecisionBranch.bmp")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.IfElseBranchActivity : SequenceActivity {
    public static DependencyProperty ConditionProperty;
    [SRCategoryAttribute("Conditions")]
[SRDescriptionAttribute("ConditionDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("")]
public ActivityCondition Condition { get; public set; }
    public IfElseBranchActivity(string name);
    private static IfElseBranchActivity();
    public ActivityCondition get_Condition();
    public void set_Condition(ActivityCondition value);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.ConditionedDesignerTheme")]
internal class System.Workflow.Activities.IfElseBranchDesigner : SequentialActivityDesigner {
    public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner);
}
internal class System.Workflow.Activities.IfElseBranchValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.IfElseDesignerTheme")]
internal class System.Workflow.Activities.IfElseDesigner : ParallelActivityDesigner {
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    public virtual bool CanRemoveActivities(ReadOnlyCollection`1<Activity> activitiesToRemove);
    public virtual bool CanMoveActivities(HitTestInfo moveLocation, ReadOnlyCollection`1<Activity> activitiesToMove);
    protected virtual CompositeActivity OnCreateNewBranch();
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
}
internal class System.Workflow.Activities.IfElseDesignerTheme : CompositeDesignerTheme {
    public IfElseDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.IfElseToolboxItem : ActivityToolboxItem {
    public IfElseToolboxItem(Type type);
    private IfElseToolboxItem(SerializationInfo info, StreamingContext context);
    protected virtual IComponent[] CreateComponentsCore(IDesignerHost designerHost);
}
internal class System.Workflow.Activities.IfElseValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
    public virtual ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action);
}
internal class System.Workflow.Activities.ImageBrowserEditor : UITypeEditor {
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
}
internal interface System.Workflow.Activities.IMethodResponseMessage {
    public Exception Exception { get; }
    public ICollection OutArgs { get; }
    public abstract virtual void SendResponse(ICollection outArgs);
    public abstract virtual void SendException(Exception exception);
    public abstract virtual Exception get_Exception();
    public abstract virtual ICollection get_OutArgs();
}
internal static class System.Workflow.Activities.InboundActivityHelper : object {
    internal static ActivityExecutionStatus ExecuteForActivity(HandleExternalEventActivity activity, ActivityExecutionContext context, Type interfaceType, string operation, Object[]& args);
    internal static object DequeueMessage(IComparable queueId, WorkflowQueuingService queueSvcs, Activity activity, WorkflowQueue& queue);
    internal static void ValidateRoles(Activity activity, string identity);
}
internal class System.Workflow.Activities.InterfaceTypeFilterProvider : object {
    public string FilterDescription { get; }
    public InterfaceTypeFilterProvider(IServiceProvider serviceProvider);
    public sealed virtual bool CanFilterType(Type type, bool throwOnError);
    public sealed virtual string get_FilterDescription();
}
internal static class System.Workflow.Activities.InvokeHelper : object {
    internal static void InitializeParameters(MethodInfo methodBase, WorkflowParameterBindingCollection parameterBindings);
    internal static Object[] GetParameters(MethodBase methodBase, WorkflowParameterBindingCollection parameterBindings);
    internal static Object[] GetParameters(MethodBase methodBase, WorkflowParameterBindingCollection parameterBindings, ParameterModifier[]& parameterModifiers);
    internal static object CloneOutboundValue(object source, BinaryFormatter formatter, string name);
    internal static void SaveOutRefParameters(Object[] actualParameters, MethodBase methodBase, WorkflowParameterBindingCollection parameterBindings);
}
internal class System.Workflow.Activities.InvokeMethodDesignerTheme : ActivityDesignerTheme {
    public InvokeMethodDesignerTheme(WorkflowTheme theme);
}
[SRDescriptionAttribute("InvokeWebServiceActivityDescription")]
[ToolboxItemAttribute("System.Workflow.Activities.InvokeWebServiceToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.InvokeWebServiceDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.Activities.InvokeWebServiceActivity", "Resources.WebServiceInOut.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.InvokeWebServiceValidator")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.InvokeWebServiceActivity : Activity {
    public static DependencyProperty ProxyClassProperty;
    public static DependencyProperty MethodNameProperty;
    public static DependencyProperty SessionIdProperty;
    public static DependencyProperty ParameterBindingsProperty;
    public static DependencyProperty InvokingEvent;
    public static DependencyProperty InvokedEvent;
    internal static ArrayList ReservedParameterNames;
    internal CookieContainer SessionCookieContainer { get; internal set; }
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("ProxyClassDescr")]
[TypeConverterAttribute("System.Workflow.Activities.Common.TypePropertyValueProviderTypeConverter")]
[RefreshPropertiesAttribute("1")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public Type ProxyClass { get; public set; }
    [RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Workflow.Activities.Common.PropertyValueProviderTypeConverter")]
[SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("MethodNameDescr")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string MethodName { get; public set; }
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("WebServiceSessionIDDescr")]
[DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
public string SessionId { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[BrowsableAttribute("False")]
public WorkflowParameterBindingCollection ParameterBindings { get; }
    public InvokeWebServiceActivity(string name);
    private static InvokeWebServiceActivity();
    internal CookieContainer get_SessionCookieContainer();
    internal void set_SessionCookieContainer(CookieContainer value);
    protected sealed virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected virtual void OnClosed(IServiceProvider provider);
    public Type get_ProxyClass();
    public void set_ProxyClass(Type value);
    public string get_MethodName();
    public void set_MethodName(string value);
    public void add_Invoking(EventHandler`1<InvokeWebServiceEventArgs> value);
    public void remove_Invoking(EventHandler`1<InvokeWebServiceEventArgs> value);
    public void add_Invoked(EventHandler`1<InvokeWebServiceEventArgs> value);
    public void remove_Invoked(EventHandler`1<InvokeWebServiceEventArgs> value);
    public string get_SessionId();
    public void set_SessionId(string value);
    public WorkflowParameterBindingCollection get_ParameterBindings();
    private sealed virtual override ICollection System.Workflow.Activities.Common.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
    private sealed virtual override Type System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider serviceProvider, string propertyName);
    private sealed virtual override AccessTypes System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider serviceProvider, string propertyName);
    internal void GetParameterPropertyDescriptors(IDictionary properties);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.InvokeWebServiceDesignerTheme")]
internal class System.Workflow.Activities.InvokeWebServiceDesigner : ActivityDesigner {
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("URLDescr")]
[EditorAttribute("System.Workflow.Activities.WebServicePickerEditor", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("1")]
public string URL { get; public set; }
    protected virtual void PreFilterProperties(IDictionary properties);
    public string get_URL();
    public void set_URL(string value);
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
}
internal class System.Workflow.Activities.InvokeWebServiceDesignerTheme : ActivityDesignerTheme {
    public InvokeWebServiceDesignerTheme(WorkflowTheme theme);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.InvokeWebServiceEventArgs : EventArgs {
    public object WebServiceProxy { get; }
    public InvokeWebServiceEventArgs(object proxyInstance);
    public object get_WebServiceProxy();
}
internal class System.Workflow.Activities.InvokeWebServiceToolboxItem : ActivityToolboxItem {
    public InvokeWebServiceToolboxItem(Type type);
    private InvokeWebServiceToolboxItem(SerializationInfo info, StreamingContext context);
    public virtual IComponent[] CreateComponentsWithUI(IDesignerHost host);
}
internal class System.Workflow.Activities.InvokeWebServiceValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[SRDescriptionAttribute("InvokeWorkflowActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[ToolboxBitmapAttribute("System.Workflow.Activities.InvokeWorkflowActivity", "Resources.Service.bmp")]
[ActivityValidatorAttribute("System.Workflow.Activities.InvokeWorkflowValidator")]
[DefaultEventAttribute("Invoking")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.InvokeWorkflowActivity : Activity {
    public static DependencyProperty TargetWorkflowProperty;
    public static DependencyProperty ParameterBindingsProperty;
    public static DependencyProperty InvokingEvent;
    public static DependencyProperty InstanceIdProperty;
    internal static ArrayList ReservedParameterNames;
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("TargetWorkflowDescr")]
[EditorAttribute("System.Workflow.ComponentModel.Design.TypeBrowserEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public Type TargetWorkflow { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Guid InstanceId { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[BrowsableAttribute("False")]
public WorkflowParameterBindingCollection ParameterBindings { get; }
    private string System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription { get; }
    public InvokeWorkflowActivity(string name);
    private static InvokeWorkflowActivity();
    public Type get_TargetWorkflow();
    public void set_TargetWorkflow(Type value);
    public Guid get_InstanceId();
    internal void SetInstanceId(Guid value);
    public WorkflowParameterBindingCollection get_ParameterBindings();
    public void add_Invoking(EventHandler value);
    public void remove_Invoking(EventHandler value);
    private sealed virtual override bool System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(Type type, bool throwOnError);
    private sealed virtual override string System.Workflow.ComponentModel.Design.ITypeFilterProvider.get_FilterDescription();
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
}
internal class System.Workflow.Activities.InvokeWorkflowValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[SRDescriptionAttribute("ListenActivityDescription")]
[ToolboxItemAttribute("System.Workflow.Activities.ListenToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.ListenDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.Activities.ListenActivity", "Resources.Listen.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.ListenValidator")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.ListenActivity : CompositeActivity {
    public ListenActivity(string name);
    private static ListenActivity();
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    protected virtual void OnClosed(IServiceProvider provider);
    protected sealed virtual void OnActivityChangeAdd(ActivityExecutionContext executionContext, Activity addedActivity);
    protected sealed virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.ListenDesignerTheme")]
internal class System.Workflow.Activities.ListenDesigner : ParallelActivityDesigner {
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    protected virtual CompositeActivity OnCreateNewBranch();
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
}
internal class System.Workflow.Activities.ListenDesignerTheme : CompositeDesignerTheme {
    public ListenDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.ListenToolboxItem : ActivityToolboxItem {
    public ListenToolboxItem(Type type);
    private ListenToolboxItem(SerializationInfo info, StreamingContext context);
    protected virtual IComponent[] CreateComponentsCore(IDesignerHost designerHost);
}
internal class System.Workflow.Activities.ListenValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.MessageEventSubscription : object {
    public Type InterfaceType { get; public set; }
    public string MethodName { get; public set; }
    public ICollection`1<CorrelationProperty> CorrelationProperties { get; }
    public Guid SubscriptionId { get; }
    public IComparable QueueName { get; protected set; }
    public Guid WorkflowInstanceId { get; }
    public MessageEventSubscription(IComparable queueName, Guid instanceId);
    public MessageEventSubscription(IComparable queueName, Guid instanceId, Guid subscriptionId);
    public MessageEventSubscription(IComparable queueName, Guid subscriptionId, Type interfaceType, string operation);
    public MessageEventSubscription(IComparable queueName, Guid instanceId, Type interfaceType, string operation, Guid subscriptionId);
    public virtual Type get_InterfaceType();
    public virtual void set_InterfaceType(Type value);
    public virtual string get_MethodName();
    public virtual void set_MethodName(string value);
    public virtual ICollection`1<CorrelationProperty> get_CorrelationProperties();
    public virtual Guid get_SubscriptionId();
    public virtual IComparable get_QueueName();
    protected virtual void set_QueueName(IComparable value);
    public virtual Guid get_WorkflowInstanceId();
}
internal class System.Workflow.Activities.MethodMessage : object {
    private string System.Runtime.Remoting.Messaging.IMethodMessage.Uri { get; }
    private string System.Runtime.Remoting.Messaging.IMethodMessage.MethodName { get; }
    private string System.Runtime.Remoting.Messaging.IMethodMessage.TypeName { get; }
    private object System.Runtime.Remoting.Messaging.IMethodMessage.MethodSignature { get; }
    private Object[] System.Runtime.Remoting.Messaging.IMethodMessage.Args { get; }
    private int System.Runtime.Remoting.Messaging.IMethodMessage.ArgCount { get; }
    private bool System.Runtime.Remoting.Messaging.IMethodMessage.HasVarArgs { get; }
    private LogicalCallContext System.Runtime.Remoting.Messaging.IMethodMessage.LogicalCallContext { get; }
    private MethodBase System.Runtime.Remoting.Messaging.IMethodMessage.MethodBase { get; }
    private IDictionary System.Runtime.Remoting.Messaging.IMessage.Properties { get; }
    public Exception Exception { get; private set; }
    public ICollection OutArgs { get; private set; }
    internal MethodMessage(Type interfaceType, string methodName, Object[] args, string identity);
    internal MethodMessage(Type interfaceType, string methodName, Object[] args, string identity, bool responseRequired);
    private static MethodMessage();
    private sealed virtual override string System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(int index);
    private sealed virtual override object System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(int argNum);
    private sealed virtual override string System.Runtime.Remoting.Messaging.IMethodMessage.get_Uri();
    private sealed virtual override string System.Runtime.Remoting.Messaging.IMethodMessage.get_MethodName();
    private sealed virtual override string System.Runtime.Remoting.Messaging.IMethodMessage.get_TypeName();
    private sealed virtual override object System.Runtime.Remoting.Messaging.IMethodMessage.get_MethodSignature();
    private sealed virtual override Object[] System.Runtime.Remoting.Messaging.IMethodMessage.get_Args();
    private sealed virtual override int System.Runtime.Remoting.Messaging.IMethodMessage.get_ArgCount();
    private sealed virtual override bool System.Runtime.Remoting.Messaging.IMethodMessage.get_HasVarArgs();
    private sealed virtual override LogicalCallContext System.Runtime.Remoting.Messaging.IMethodMessage.get_LogicalCallContext();
    private sealed virtual override MethodBase System.Runtime.Remoting.Messaging.IMethodMessage.get_MethodBase();
    private sealed virtual override IDictionary System.Runtime.Remoting.Messaging.IMessage.get_Properties();
    internal IMethodResponseMessage WaitForResponseMessage();
    public sealed virtual void SendResponse(ICollection outArgs);
    public sealed virtual void SendException(Exception exception);
    public sealed virtual Exception get_Exception();
    private void set_Exception(Exception value);
    public sealed virtual ICollection get_OutArgs();
    private void set_OutArgs(ICollection value);
}
internal class System.Workflow.Activities.NonCorrelatedProvider : object {
    private sealed virtual override ICollection`1<CorrelationProperty> System.Workflow.Activities.ICorrelationProvider.ResolveCorrelationPropertyValues(Type interfaceType, string methodName, Object[] methodArgs, bool provideInitializerTokens);
    private sealed virtual override bool System.Workflow.Activities.ICorrelationProvider.IsInitializingMember(Type interfaceType, string memberName, Object[] methodArgs);
}
[SRDescriptionAttribute("ParallelActivityDescription")]
[ToolboxItemAttribute("System.Workflow.Activities.ParallelToolboxItem")]
[ToolboxBitmapAttribute("System.Workflow.Activities.ParallelActivity", "Resources.Parallel.png")]
[DesignerAttribute("System.Workflow.Activities.ParallelDesigner", "System.ComponentModel.Design.IDesigner")]
[ActivityValidatorAttribute("System.Workflow.Activities.ParallelValidator")]
[SRCategoryAttribute("Standard")]
[WorkflowDebuggerSteppingAttribute("1")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.ParallelActivity : CompositeActivity {
    public ParallelActivity(string name);
    private static ParallelActivity();
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    protected virtual void OnClosed(IServiceProvider provider);
    protected virtual void OnActivityChangeAdd(ActivityExecutionContext executionContext, Activity addedActivity);
    protected virtual void OnActivityChangeRemove(ActivityExecutionContext rootExecutionContext, Activity removedActivity);
    protected virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.ParallelDesignerTheme")]
internal class System.Workflow.Activities.ParallelDesigner : ParallelActivityDesigner {
    protected virtual CompositeActivity OnCreateNewBranch();
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
}
internal class System.Workflow.Activities.ParallelDesignerTheme : CompositeDesignerTheme {
    public ParallelDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.ParallelToolboxItem : ActivityToolboxItem {
    public ParallelToolboxItem(Type type);
    private ParallelToolboxItem(SerializationInfo info, StreamingContext context);
    protected virtual IComponent[] CreateComponentsCore(IDesignerHost designerHost);
}
internal class System.Workflow.Activities.ParallelValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal static class System.Workflow.Activities.ParameterBindingValidator : object {
    internal static ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[SRDescriptionAttribute("PolicyActivityDescription")]
[ToolboxBitmapAttribute("System.Workflow.Activities.PolicyActivity", "Resources.Rule.png")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.PolicyDesigner", "System.ComponentModel.Design.IDesigner")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.PolicyActivity : Activity {
    public static DependencyProperty RuleSetReferenceProperty;
    [SRDescriptionAttribute("RuleSetDescription")]
[MergablePropertyAttribute("False")]
public RuleSetReference RuleSetReference { get; public set; }
    public PolicyActivity(string name);
    private static PolicyActivity();
    protected virtual void Initialize(IServiceProvider provider);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    public RuleSetReference get_RuleSetReference();
    public void set_RuleSetReference(RuleSetReference value);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.PolicyDesignerTheme")]
internal class System.Workflow.Activities.PolicyDesigner : ActivityDesigner {
    public sealed virtual object GetService(Type type);
    protected virtual void DoDefaultAction();
}
internal class System.Workflow.Activities.PolicyDesignerTheme : ActivityDesignerTheme {
    public PolicyDesignerTheme(WorkflowTheme theme);
}
[SRDescriptionAttribute("ReplicatorActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[ToolboxBitmapAttribute("System.Workflow.Activities.ReplicatorActivity", "Resources.Replicator.png")]
[DesignerAttribute("System.Workflow.Activities.ReplicatorDesigner", "System.ComponentModel.Design.IDesigner")]
[ActivityValidatorAttribute("System.Workflow.Activities.ReplicatorValidator")]
[DefaultEventAttribute("Initialized")]
[WorkflowDebuggerSteppingAttribute("1")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.ReplicatorActivity : CompositeActivity {
    public static DependencyProperty UntilConditionProperty;
    public static DependencyProperty ExecutionTypeProperty;
    public static DependencyProperty InitializedEvent;
    public static DependencyProperty CompletedEvent;
    public static DependencyProperty ChildInitializedEvent;
    public static DependencyProperty ChildCompletedEvent;
    public static DependencyProperty InitialChildDataProperty;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ICollection`1<Activity> DynamicActivities { get; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("Properties")]
[SRDescriptionAttribute("ExecutionTypeDescr")]
[DesignerSerializationVisibilityAttribute("1")]
public ExecutionType ExecutionType { get; public set; }
    [EditorAttribute("System.Workflow.ComponentModel.Design.BindUITypeEditor", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[SRCategoryAttribute("Properties")]
[SRDescriptionAttribute("InitialChildDataDescr")]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
public IList InitialChildData { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IList CurrentChildData { get; }
    [SRCategoryAttribute("Conditions")]
[SRDescriptionAttribute("ReplicatorUntilConditionDescr")]
[DefaultValueAttribute("")]
public ActivityCondition UntilCondition { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AllChildrenComplete { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int CurrentIndex { get; }
    public ReplicatorActivity(string name);
    private static ReplicatorActivity();
    public ICollection`1<Activity> get_DynamicActivities();
    public ExecutionType get_ExecutionType();
    public void set_ExecutionType(ExecutionType value);
    public IList get_InitialChildData();
    public void set_InitialChildData(IList value);
    public IList get_CurrentChildData();
    public ActivityCondition get_UntilCondition();
    public void set_UntilCondition(ActivityCondition value);
    public bool get_AllChildrenComplete();
    public int get_CurrentIndex();
    public bool IsExecuting(int index);
    public void add_ChildInitialized(EventHandler`1<ReplicatorChildEventArgs> value);
    public void remove_ChildInitialized(EventHandler`1<ReplicatorChildEventArgs> value);
    public void add_ChildCompleted(EventHandler`1<ReplicatorChildEventArgs> value);
    public void remove_ChildCompleted(EventHandler`1<ReplicatorChildEventArgs> value);
    public void add_Completed(EventHandler value);
    public void remove_Completed(EventHandler value);
    public void add_Initialized(EventHandler value);
    public void remove_Initialized(EventHandler value);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    protected virtual void OnClosed(IServiceProvider provider);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.ReplicatorChildEventArgs : EventArgs {
    public object InstanceData { get; }
    public Activity Activity { get; }
    public ReplicatorChildEventArgs(object instanceData, Activity activity);
    public object get_InstanceData();
    public Activity get_Activity();
}
internal class System.Workflow.Activities.ReplicatorDesigner : SequenceDesigner {
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
}
internal class System.Workflow.Activities.ReplicatorValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
public class System.Workflow.Activities.Rules.AddedConditionAction : RuleConditionChangeAction {
    public string ConditionName { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public RuleCondition ConditionDefinition { get; public set; }
    public AddedConditionAction(RuleCondition addedConditionDefinition);
    public virtual string get_ConditionName();
    public RuleCondition get_ConditionDefinition();
    public void set_ConditionDefinition(RuleCondition value);
    protected virtual bool ApplyTo(Activity rootActivity);
}
public class System.Workflow.Activities.Rules.AddedRuleSetAction : RuleSetChangeAction {
    public string RuleSetName { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public RuleSet RuleSetDefinition { get; public set; }
    public AddedRuleSetAction(RuleSet addedRuleSetDefinition);
    public virtual string get_RuleSetName();
    public RuleSet get_RuleSetDefinition();
    public void set_RuleSetDefinition(RuleSet value);
    protected virtual bool ApplyTo(Activity rootActivity);
}
internal abstract class System.Workflow.Activities.Rules.ArithmeticLiteral : object {
    protected internal Type m_type;
    protected string TypeName { get; }
    internal object Value { get; }
    private static ArithmeticLiteral();
    protected virtual string get_TypeName();
    internal abstract virtual object get_Value();
    internal static ArithmeticLiteral MakeLiteral(Type literalType, object literalValue);
    internal static RuleBinaryExpressionInfo ResultType(CodeBinaryOperatorType operation, Type lhs, CodeExpression lhsExpression, Type rhs, CodeExpression rhsExpression, RuleValidation validator, ValidationError& error);
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(int v);
    internal virtual object Add(long v);
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(ulong v);
    internal virtual object Add(float v);
    internal virtual object Add(double v);
    internal virtual object Add(decimal v);
    internal virtual object Add(bool v);
    internal virtual object Add(string v);
    internal virtual object Subtract(ArithmeticLiteral v);
    internal virtual object Subtract();
    internal virtual object Subtract(int v);
    internal virtual object Subtract(long v);
    internal virtual object Subtract(ushort v);
    internal virtual object Subtract(UInt32 v);
    internal virtual object Subtract(ulong v);
    internal virtual object Subtract(float v);
    internal virtual object Subtract(double v);
    internal virtual object Subtract(decimal v);
    internal virtual object Multiply(ArithmeticLiteral v);
    internal virtual object Multiply();
    internal virtual object Multiply(int v);
    internal virtual object Multiply(long v);
    internal virtual object Multiply(ushort v);
    internal virtual object Multiply(UInt32 v);
    internal virtual object Multiply(ulong v);
    internal virtual object Multiply(float v);
    internal virtual object Multiply(double v);
    internal virtual object Multiply(decimal v);
    internal virtual object Divide(ArithmeticLiteral v);
    internal virtual object Divide();
    internal virtual object Divide(int v);
    internal virtual object Divide(long v);
    internal virtual object Divide(ushort v);
    internal virtual object Divide(UInt32 v);
    internal virtual object Divide(ulong v);
    internal virtual object Divide(float v);
    internal virtual object Divide(double v);
    internal virtual object Divide(decimal v);
    internal virtual object Modulus(ArithmeticLiteral v);
    internal virtual object Modulus();
    internal virtual object Modulus(int v);
    internal virtual object Modulus(long v);
    internal virtual object Modulus(ushort v);
    internal virtual object Modulus(UInt32 v);
    internal virtual object Modulus(ulong v);
    internal virtual object Modulus(float v);
    internal virtual object Modulus(double v);
    internal virtual object Modulus(decimal v);
    internal virtual object BitAnd(ArithmeticLiteral v);
    internal virtual object BitAnd();
    internal virtual object BitAnd(int v);
    internal virtual object BitAnd(long v);
    internal virtual object BitAnd(ushort v);
    internal virtual object BitAnd(UInt32 v);
    internal virtual object BitAnd(ulong v);
    internal virtual object BitAnd(float v);
    internal virtual object BitAnd(double v);
    internal virtual object BitAnd(decimal v);
    internal virtual object BitAnd(bool v);
    internal virtual object BitOr(ArithmeticLiteral v);
    internal virtual object BitOr();
    internal virtual object BitOr(int v);
    internal virtual object BitOr(long v);
    internal virtual object BitOr(ushort v);
    internal virtual object BitOr(UInt32 v);
    internal virtual object BitOr(ulong v);
    internal virtual object BitOr(float v);
    internal virtual object BitOr(double v);
    internal virtual object BitOr(decimal v);
    internal virtual object BitOr(bool v);
}
internal class System.Workflow.Activities.Rules.ArrayCreateExpression : RuleExpressionInternal {
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
internal class System.Workflow.Activities.Rules.ArrayIndexerExpression : RuleExpressionInternal {
    internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
internal class System.Workflow.Activities.Rules.AssignmentStatement : RuleCodeDomStatement {
    internal static RuleCodeDomStatement Create(CodeStatement statement);
    internal virtual bool Validate(RuleValidation validation);
    internal virtual void AnalyzeUsage(RuleAnalysis analysis);
    internal virtual void Execute(RuleExecution execution);
    internal virtual void Decompile(StringBuilder decompilation);
    internal virtual bool Match(CodeStatement comperand);
    internal virtual CodeStatement Clone();
}
internal abstract class System.Workflow.Activities.Rules.BaseMethodInfo : MethodInfo {
    protected MethodInfo actualMethod;
    protected ParameterInfo[] expectedParameters;
    protected Type resultType;
    public ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    public MethodAttributes Attributes { get; }
    public RuntimeMethodHandle MethodHandle { get; }
    public Type DeclaringType { get; }
    public string Name { get; }
    public Type ReflectedType { get; }
    public Type ReturnType { get; }
    public BaseMethodInfo(MethodInfo method);
    public virtual MethodInfo GetBaseDefinition();
    public virtual ICustomAttributeProvider get_ReturnTypeCustomAttributes();
    public virtual MethodAttributes get_Attributes();
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual ParameterInfo[] GetParameters();
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual Type get_DeclaringType();
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual string get_Name();
    public virtual Type get_ReflectedType();
    public virtual Type get_ReturnType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Workflow.Activities.Rules.BinaryExpression : RuleExpressionInternal {
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
internal class System.Workflow.Activities.Rules.BooleanArithmeticLiteral : ArithmeticLiteral {
    internal object Value { get; }
    internal BooleanArithmeticLiteral(bool literalValue);
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(string v);
    internal virtual object BitAnd(ArithmeticLiteral v);
    internal virtual object BitAnd();
    internal virtual object BitAnd(bool v);
    internal virtual object BitOr(ArithmeticLiteral v);
    internal virtual object BitOr();
    internal virtual object BitOr(bool v);
}
internal class System.Workflow.Activities.Rules.BoolLiteral : Literal {
    internal object Value { get; }
    internal BoolLiteral(bool literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(bool rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
}
internal class System.Workflow.Activities.Rules.ByteLiteral : Literal {
    internal object Value { get; }
    internal ByteLiteral(byte literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(float rhs);
    internal virtual bool Equal(double rhs);
    internal virtual bool Equal(decimal rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(sbyte rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(short rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(ulong rhs);
    internal virtual bool LessThan(float rhs);
    internal virtual bool LessThan(double rhs);
    internal virtual bool LessThan(decimal rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(sbyte rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(short rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(ulong rhs);
    internal virtual bool GreaterThan(float rhs);
    internal virtual bool GreaterThan(double rhs);
    internal virtual bool GreaterThan(decimal rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(sbyte rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(short rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(ulong rhs);
    internal virtual bool LessThanOrEqual(float rhs);
    internal virtual bool LessThanOrEqual(double rhs);
    internal virtual bool LessThanOrEqual(decimal rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(sbyte rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(short rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(ulong rhs);
    internal virtual bool GreaterThanOrEqual(float rhs);
    internal virtual bool GreaterThanOrEqual(double rhs);
    internal virtual bool GreaterThanOrEqual(decimal rhs);
}
internal class System.Workflow.Activities.Rules.CastExpression : RuleExpressionInternal {
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
internal class System.Workflow.Activities.Rules.CharArithmeticLiteral : ArithmeticLiteral {
    internal object Value { get; }
    internal CharArithmeticLiteral(char literalValue);
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(int v);
    internal virtual object Add(long v);
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(ulong v);
    internal virtual object Add(float v);
    internal virtual object Add(double v);
    internal virtual object Add(decimal v);
    internal virtual object Add(string v);
    internal virtual object Subtract(ArithmeticLiteral v);
    internal virtual object Subtract();
    internal virtual object Subtract(int v);
    internal virtual object Subtract(long v);
    internal virtual object Subtract(ushort v);
    internal virtual object Subtract(UInt32 v);
    internal virtual object Subtract(ulong v);
    internal virtual object Subtract(float v);
    internal virtual object Subtract(double v);
    internal virtual object Subtract(decimal v);
    internal virtual object Multiply(ArithmeticLiteral v);
    internal virtual object Multiply();
    internal virtual object Multiply(int v);
    internal virtual object Multiply(long v);
    internal virtual object Multiply(ushort v);
    internal virtual object Multiply(UInt32 v);
    internal virtual object Multiply(ulong v);
    internal virtual object Multiply(float v);
    internal virtual object Multiply(double v);
    internal virtual object Multiply(decimal v);
    internal virtual object Divide(ArithmeticLiteral v);
    internal virtual object Divide();
    internal virtual object Divide(int v);
    internal virtual object Divide(long v);
    internal virtual object Divide(ushort v);
    internal virtual object Divide(UInt32 v);
    internal virtual object Divide(ulong v);
    internal virtual object Divide(float v);
    internal virtual object Divide(double v);
    internal virtual object Divide(decimal v);
    internal virtual object Modulus(ArithmeticLiteral v);
    internal virtual object Modulus();
    internal virtual object Modulus(int v);
    internal virtual object Modulus(long v);
    internal virtual object Modulus(ushort v);
    internal virtual object Modulus(UInt32 v);
    internal virtual object Modulus(ulong v);
    internal virtual object Modulus(float v);
    internal virtual object Modulus(double v);
    internal virtual object Modulus(decimal v);
    internal virtual object BitAnd(ArithmeticLiteral v);
    internal virtual object BitAnd();
    internal virtual object BitAnd(int v);
    internal virtual object BitAnd(long v);
    internal virtual object BitAnd(ushort v);
    internal virtual object BitAnd(UInt32 v);
    internal virtual object BitAnd(ulong v);
    internal virtual object BitOr(ArithmeticLiteral v);
    internal virtual object BitOr();
    internal virtual object BitOr(int v);
    internal virtual object BitOr(long v);
    internal virtual object BitOr(ushort v);
    internal virtual object BitOr(UInt32 v);
    internal virtual object BitOr(ulong v);
}
internal class System.Workflow.Activities.Rules.CharLiteral : Literal {
    internal object Value { get; }
    internal CharLiteral(char literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(float rhs);
    internal virtual bool Equal(double rhs);
    internal virtual bool Equal(decimal rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(sbyte rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(short rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(ulong rhs);
    internal virtual bool LessThan(float rhs);
    internal virtual bool LessThan(double rhs);
    internal virtual bool LessThan(decimal rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(sbyte rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(short rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(ulong rhs);
    internal virtual bool GreaterThan(float rhs);
    internal virtual bool GreaterThan(double rhs);
    internal virtual bool GreaterThan(decimal rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(sbyte rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(short rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(ulong rhs);
    internal virtual bool LessThanOrEqual(float rhs);
    internal virtual bool LessThanOrEqual(double rhs);
    internal virtual bool LessThanOrEqual(decimal rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(sbyte rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(short rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(ulong rhs);
    internal virtual bool GreaterThanOrEqual(float rhs);
    internal virtual bool GreaterThanOrEqual(double rhs);
    internal virtual bool GreaterThanOrEqual(decimal rhs);
}
internal static class System.Workflow.Activities.Rules.CodeDomStatementWalker : object {
    internal static bool Validate(RuleValidation validation, CodeStatement statement);
    internal static void Execute(RuleExecution execution, CodeStatement statement);
    internal static void AnalyzeUsage(RuleAnalysis analysis, CodeStatement statement);
    internal static void Decompile(StringBuilder stringBuilder, CodeStatement statement);
    internal static bool Match(CodeStatement firstStatement, CodeStatement secondStatement);
    internal static CodeStatement Clone(CodeStatement statement);
}
internal static class System.Workflow.Activities.Rules.ConditionHelper : object {
    private static ConditionHelper();
    internal static Type GetContextType(ITypeProvider typeProvider, Activity currentActivity);
    internal static bool IsNullableValueType(Type type);
    internal static bool IsNonNullableValueType(Type type);
    internal static object CloneObject(object original);
    internal static void CloneUserData(CodeObject original, CodeObject result);
    [SuppressMessageAttribute("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
internal static RuleDefinitions Load_Rules_DT(IServiceProvider serviceProvider, DependencyObject activity);
    internal static void Flush_Rules_DT(IServiceProvider serviceProvider, Activity activity);
    internal static RuleDefinitions Load_Rules_RT(Activity declaringActivity);
    internal static RuleDefinitions GetRuleDefinitionsFromManifest(Type workflowType);
}
internal class System.Workflow.Activities.Rules.DecimalArithmeticLiteral : ArithmeticLiteral {
    internal object Value { get; }
    internal DecimalArithmeticLiteral(decimal literalValue);
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(int v);
    internal virtual object Add(long v);
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(ulong v);
    internal virtual object Add(decimal v);
    internal virtual object Add(string v);
    internal virtual object Subtract(ArithmeticLiteral v);
    internal virtual object Subtract();
    internal virtual object Subtract(int v);
    internal virtual object Subtract(long v);
    internal virtual object Subtract(ushort v);
    internal virtual object Subtract(UInt32 v);
    internal virtual object Subtract(ulong v);
    internal virtual object Subtract(decimal v);
    internal virtual object Multiply(ArithmeticLiteral v);
    internal virtual object Multiply();
    internal virtual object Multiply(int v);
    internal virtual object Multiply(long v);
    internal virtual object Multiply(ushort v);
    internal virtual object Multiply(UInt32 v);
    internal virtual object Multiply(ulong v);
    internal virtual object Multiply(decimal v);
    internal virtual object Divide(ArithmeticLiteral v);
    internal virtual object Divide();
    internal virtual object Divide(int v);
    internal virtual object Divide(long v);
    internal virtual object Divide(ushort v);
    internal virtual object Divide(UInt32 v);
    internal virtual object Divide(ulong v);
    internal virtual object Divide(decimal v);
    internal virtual object Modulus(ArithmeticLiteral v);
    internal virtual object Modulus();
    internal virtual object Modulus(int v);
    internal virtual object Modulus(long v);
    internal virtual object Modulus(ushort v);
    internal virtual object Modulus(UInt32 v);
    internal virtual object Modulus(ulong v);
    internal virtual object Modulus(decimal v);
}
internal class System.Workflow.Activities.Rules.DecimalLiteral : Literal {
    internal object Value { get; }
    internal DecimalLiteral(decimal literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(decimal rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(sbyte rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(short rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(ulong rhs);
    internal virtual bool LessThan(decimal rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(sbyte rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(short rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(ulong rhs);
    internal virtual bool GreaterThan(decimal rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(sbyte rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(short rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(ulong rhs);
    internal virtual bool LessThanOrEqual(decimal rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(sbyte rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(short rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(ulong rhs);
    internal virtual bool GreaterThanOrEqual(decimal rhs);
}
internal class System.Workflow.Activities.Rules.Design.AutoCompletionEventArgs : EventArgs {
    public ICollection AutoCompleteValues { get; public set; }
    public string Prefix { get; public set; }
    public ICollection get_AutoCompleteValues();
    public void set_AutoCompleteValues(ICollection value);
    public string get_Prefix();
    public void set_Prefix(string value);
}
internal abstract class System.Workflow.Activities.Rules.Design.BasicBrowserDialog : Form {
    protected Activity Activity { get; }
    public string SelectedName { get; }
    protected string DescriptionText { get; }
    protected string TitleText { get; }
    protected string PreviewLabelText { get; }
    protected string ConfirmDeleteMessageText { get; }
    protected string ConfirmDeleteTitleText { get; }
    internal string EmptyNameErrorText { get; }
    internal string DuplicateNameErrorText { get; }
    internal string NewNameLabelText { get; }
    internal string RenameTitleText { get; }
    protected BasicBrowserDialog(Activity activity, string name);
    protected Activity get_Activity();
    public string get_SelectedName();
    protected void InitializeListView(IList list, string selectedName);
    protected abstract virtual string GetObjectName(object ruleObject);
    protected abstract virtual object OnNewInternal();
    protected abstract virtual bool OnEditInternal(object currentRuleObject, Object& updatedRuleObject);
    protected abstract virtual void OnDeleteInternal(object ruleObject);
    protected abstract virtual string OnRenameInternal(object ruleObject);
    protected abstract virtual void UpdateListViewItem(object ruleObject, ListViewItem listViewItem);
    protected abstract virtual void UpdatePreview(TextBox previewTextBox, object ruleObject);
    protected abstract virtual string get_DescriptionText();
    protected abstract virtual string get_TitleText();
    protected abstract virtual string get_PreviewLabelText();
    protected abstract virtual string get_ConfirmDeleteMessageText();
    protected abstract virtual string get_ConfirmDeleteTitleText();
    internal abstract virtual string get_EmptyNameErrorText();
    internal abstract virtual string get_DuplicateNameErrorText();
    internal abstract virtual string get_NewNameLabelText();
    internal abstract virtual string get_RenameTitleText();
    internal abstract virtual bool IsUniqueName(string ruleName);
    protected virtual void Dispose(bool disposing);
}
internal class System.Workflow.Activities.Rules.Design.ConditionBrowserDialog : BasicBrowserDialog {
    protected string DescriptionText { get; }
    protected string TitleText { get; }
    protected string PreviewLabelText { get; }
    protected string ConfirmDeleteMessageText { get; }
    protected string ConfirmDeleteTitleText { get; }
    internal string EmptyNameErrorText { get; }
    internal string DuplicateNameErrorText { get; }
    internal string NewNameLabelText { get; }
    internal string RenameTitleText { get; }
    public ConditionBrowserDialog(Activity activity, string name);
    protected virtual string GetObjectName(object ruleObject);
    protected virtual object OnNewInternal();
    protected virtual bool OnEditInternal(object currentRuleObject, Object& updatedRuleObject);
    protected virtual string OnRenameInternal(object ruleObject);
    protected virtual void OnDeleteInternal(object ruleObject);
    protected virtual void UpdateListViewItem(object ruleObject, ListViewItem listViewItem);
    protected virtual void UpdatePreview(TextBox previewBox, object ruleObject);
    protected virtual string get_DescriptionText();
    protected virtual string get_TitleText();
    protected virtual string get_PreviewLabelText();
    protected virtual string get_ConfirmDeleteMessageText();
    protected virtual string get_ConfirmDeleteTitleText();
    internal virtual string get_EmptyNameErrorText();
    internal virtual string get_DuplicateNameErrorText();
    internal virtual string get_NewNameLabelText();
    internal virtual string get_RenameTitleText();
    internal virtual bool IsUniqueName(string ruleName);
}
internal class System.Workflow.Activities.Rules.Design.ConditionNameEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext typeDescriptorContext, IServiceProvider serviceProvider, object o);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext typeDescriptorContext);
}
internal static class System.Workflow.Activities.Rules.Design.DesignerHelpers : object {
    internal static void DisplayError(string message, string messageBoxTitle, IServiceProvider serviceProvider);
    internal static string GetRulePreview(Rule rule);
    internal static string GetRuleSetPreview(RuleSet ruleSet);
}
internal class System.Workflow.Activities.Rules.Design.IntellisenseTextBox : TextBox {
    [CompilerGeneratedAttribute]
public void add_PopulateAutoCompleteList(EventHandler`1<AutoCompletionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PopulateAutoCompleteList(EventHandler`1<AutoCompletionEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_PopulateToolTipList(EventHandler`1<AutoCompletionEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_PopulateToolTipList(EventHandler`1<AutoCompletionEventArgs> value);
    internal void HideIntellisenceDropDown();
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected virtual void Dispose(bool disposing);
}
internal class System.Workflow.Activities.Rules.Design.LogicalExpressionEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext typeDescriptorContext, IServiceProvider serviceProvider, object o);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext typeDescriptorContext);
}
internal class System.Workflow.Activities.Rules.Design.RenameRuleObjectDialog : Form {
    public string RuleObjectName { get; }
    public RenameRuleObjectDialog(IServiceProvider serviceProvider, string oldName, NameValidatorDelegate nameValidator, BasicBrowserDialog parent);
    public string get_RuleObjectName();
    protected virtual void Dispose(bool disposing);
}
public class System.Workflow.Activities.Rules.Design.RuleConditionDialog : Form {
    public CodeExpression Expression { get; }
    public RuleConditionDialog(Activity activity, CodeExpression expression);
    public RuleConditionDialog(Type activityType, ITypeProvider typeProvider, CodeExpression expression);
    public CodeExpression get_Expression();
    protected virtual void Dispose(bool disposing);
}
internal class System.Workflow.Activities.Rules.Design.RuleConditionReferenceExpressionTypeConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Workflow.Activities.Rules.Design.RuleConditionReferenceNamePropertyDescriptor : DynamicPropertyDescriptor {
    public string Description { get; }
    public bool IsReadOnly { get; }
    public RuleConditionReferenceNamePropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor descriptor);
    public virtual object GetEditor(Type editorBaseType);
    public virtual string get_Description();
    public virtual bool get_IsReadOnly();
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
}
internal class System.Workflow.Activities.Rules.Design.RuleConditionReferencePropertyDescriptor : RuleDefinitionDynamicPropertyDescriptor {
    public TypeConverter Converter { get; }
    public string Description { get; }
    public bool IsReadOnly { get; }
    public RuleConditionReferencePropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor descriptor);
    public virtual TypeConverter get_Converter();
    public virtual string get_Description();
    public virtual object GetEditor(Type editorBaseType);
    public virtual object GetValue(object component);
    public virtual bool get_IsReadOnly();
    public virtual void SetValue(object component, object value);
}
internal class System.Workflow.Activities.Rules.Design.RuleConditionReferenceTypeConverter : TypeConverter {
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal abstract class System.Workflow.Activities.Rules.Design.RuleDefinitionDynamicPropertyDescriptor : DynamicPropertyDescriptor {
    public RuleDefinitionDynamicPropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor descriptor);
    protected RuleDefinitions GetRuleDefinitions(object component);
}
internal class System.Workflow.Activities.Rules.Design.RuleSetBrowserDialog : BasicBrowserDialog {
    protected string DescriptionText { get; }
    protected string TitleText { get; }
    protected string PreviewLabelText { get; }
    protected string ConfirmDeleteMessageText { get; }
    protected string ConfirmDeleteTitleText { get; }
    internal string EmptyNameErrorText { get; }
    internal string DuplicateNameErrorText { get; }
    internal string NewNameLabelText { get; }
    internal string RenameTitleText { get; }
    public RuleSetBrowserDialog(Activity activity, string name);
    protected virtual string GetObjectName(object ruleObject);
    protected virtual object OnNewInternal();
    protected virtual bool OnEditInternal(object currentRuleObject, Object& updatedRuleObject);
    protected virtual string OnRenameInternal(object ruleObject);
    protected virtual void OnDeleteInternal(object ruleObject);
    protected virtual void UpdateListViewItem(object ruleObject, ListViewItem listViewItem);
    protected virtual void UpdatePreview(TextBox previewBox, object ruleObject);
    protected virtual string get_DescriptionText();
    protected virtual string get_TitleText();
    protected virtual string get_PreviewLabelText();
    protected virtual string get_ConfirmDeleteMessageText();
    protected virtual string get_ConfirmDeleteTitleText();
    internal virtual string get_EmptyNameErrorText();
    internal virtual string get_DuplicateNameErrorText();
    internal virtual string get_NewNameLabelText();
    internal virtual string get_RenameTitleText();
    internal virtual bool IsUniqueName(string ruleName);
}
internal class System.Workflow.Activities.Rules.Design.RuleSetDefinitionEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext typeDescriptorContext, IServiceProvider serviceProvider, object o);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext typeDescriptorContext);
}
internal class System.Workflow.Activities.Rules.Design.RuleSetDefinitionTypeConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Workflow.Activities.Rules.Design.RuleSetDialog : Form {
    public RuleSet RuleSet { get; }
    public RuleSetDialog(Activity activity, RuleSet ruleSet);
    public RuleSetDialog(Type activityType, ITypeProvider typeProvider, RuleSet ruleSet);
    public RuleSet get_RuleSet();
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected virtual void Dispose(bool disposing);
}
internal class System.Workflow.Activities.Rules.Design.RuleSetNameEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext typeDescriptorContext, IServiceProvider serviceProvider, object o);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext typeDescriptorContext);
}
internal class System.Workflow.Activities.Rules.Design.RuleSetPropertyDescriptor : RuleDefinitionDynamicPropertyDescriptor {
    public TypeConverter Converter { get; }
    public string Description { get; }
    public bool IsReadOnly { get; }
    public RuleSetPropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor descriptor);
    public virtual TypeConverter get_Converter();
    public virtual string get_Description();
    public virtual object GetEditor(Type editorBaseType);
    public virtual object GetValue(object component);
    public virtual bool get_IsReadOnly();
    public virtual void SetValue(object component, object value);
}
internal class System.Workflow.Activities.Rules.Design.RuleSetReferenceTypeConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object valueToConvert);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class System.Workflow.Activities.Rules.DirectionExpression : RuleExpressionInternal {
    internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
internal class System.Workflow.Activities.Rules.DoubleArithmeticLiteral : ArithmeticLiteral {
    internal object Value { get; }
    internal DoubleArithmeticLiteral(double literalValue);
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(int v);
    internal virtual object Add(long v);
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(ulong v);
    internal virtual object Add(float v);
    internal virtual object Add(double v);
    internal virtual object Add(string v);
    internal virtual object Subtract(ArithmeticLiteral v);
    internal virtual object Subtract();
    internal virtual object Subtract(int v);
    internal virtual object Subtract(long v);
    internal virtual object Subtract(ushort v);
    internal virtual object Subtract(UInt32 v);
    internal virtual object Subtract(ulong v);
    internal virtual object Subtract(float v);
    internal virtual object Subtract(double v);
    internal virtual object Multiply(ArithmeticLiteral v);
    internal virtual object Multiply();
    internal virtual object Multiply(int v);
    internal virtual object Multiply(long v);
    internal virtual object Multiply(ushort v);
    internal virtual object Multiply(UInt32 v);
    internal virtual object Multiply(ulong v);
    internal virtual object Multiply(float v);
    internal virtual object Multiply(double v);
    internal virtual object Divide(ArithmeticLiteral v);
    internal virtual object Divide();
    internal virtual object Divide(int v);
    internal virtual object Divide(long v);
    internal virtual object Divide(ushort v);
    internal virtual object Divide(UInt32 v);
    internal virtual object Divide(ulong v);
    internal virtual object Divide(float v);
    internal virtual object Divide(double v);
    internal virtual object Modulus(ArithmeticLiteral v);
    internal virtual object Modulus();
    internal virtual object Modulus(int v);
    internal virtual object Modulus(long v);
    internal virtual object Modulus(ushort v);
    internal virtual object Modulus(UInt32 v);
    internal virtual object Modulus(ulong v);
    internal virtual object Modulus(float v);
    internal virtual object Modulus(double v);
}
internal class System.Workflow.Activities.Rules.DoubleLiteral : Literal {
    internal object Value { get; }
    internal DoubleLiteral(double literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(float rhs);
    internal virtual bool Equal(double rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(sbyte rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(short rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(ulong rhs);
    internal virtual bool LessThan(float rhs);
    internal virtual bool LessThan(double rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(sbyte rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(short rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(ulong rhs);
    internal virtual bool GreaterThan(float rhs);
    internal virtual bool GreaterThan(double rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(sbyte rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(short rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(ulong rhs);
    internal virtual bool LessThanOrEqual(float rhs);
    internal virtual bool LessThanOrEqual(double rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(sbyte rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(short rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(ulong rhs);
    internal virtual bool GreaterThanOrEqual(float rhs);
    internal virtual bool GreaterThanOrEqual(double rhs);
}
internal static class System.Workflow.Activities.Rules.EnumHelper : object {
    [SuppressMessageAttribute("Microsoft.Performance", "CA1803:AvoidCostlyCallsWherePossible")]
public static Type GetUnderlyingType(Type type);
}
internal class System.Workflow.Activities.Rules.EnumOperationMethodInfo : MethodInfo {
    public ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    public MethodAttributes Attributes { get; }
    public RuntimeMethodHandle MethodHandle { get; }
    public Type DeclaringType { get; }
    public string Name { get; }
    public Type ReflectedType { get; }
    public Type ReturnType { get; }
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
public EnumOperationMethodInfo(Type lhs, CodeBinaryOperatorType operation, Type rhs, bool isZero);
    public virtual MethodInfo GetBaseDefinition();
    public virtual ICustomAttributeProvider get_ReturnTypeCustomAttributes();
    public virtual MethodAttributes get_Attributes();
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual ParameterInfo[] GetParameters();
    [SuppressMessageAttribute("Microsoft.Performance", "CA1803:AvoidCostlyCallsWherePossible")]
public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual Type get_DeclaringType();
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual string get_Name();
    public virtual Type get_ReflectedType();
    public virtual Type get_ReturnType();
}
internal class System.Workflow.Activities.Rules.Executor : object {
    internal static IList`1<RuleState> Preprocess(RuleChainingBehavior behavior, ICollection`1<Rule> rules, RuleValidation validation, Tracer tracer);
    internal static void ExecuteRuleSet(IList`1<RuleState> orderedRules, RuleExecution ruleExecution, Tracer tracer, string trackingKey);
    internal static bool EvaluateBool(CodeExpression expression, RuleExecution context);
    internal static object AdjustType(Type operandType, object operandValue, Type toType);
    internal static object AdjustTypeWithCast(Type operandType, object operandValue, Type toType);
}
internal class System.Workflow.Activities.Rules.ExpressionStatement : RuleCodeDomStatement {
    internal static RuleCodeDomStatement Create(CodeStatement statement);
    internal virtual bool Validate(RuleValidation validation);
    internal virtual void AnalyzeUsage(RuleAnalysis analysis);
    internal virtual void Execute(RuleExecution execution);
    internal virtual void Decompile(StringBuilder decompilation);
    internal virtual bool Match(CodeStatement comperand);
    internal virtual CodeStatement Clone();
}
internal class System.Workflow.Activities.Rules.ExtensionMethodInfo : MethodInfo {
    public ICustomAttributeProvider ReturnTypeCustomAttributes { get; }
    public MethodAttributes Attributes { get; }
    public RuntimeMethodHandle MethodHandle { get; }
    public Type DeclaringType { get; }
    public Type AssumedDeclaringType { get; }
    public string Name { get; }
    public Type ReflectedType { get; }
    public Type ReturnType { get; }
    public ExtensionMethodInfo(MethodInfo method, ParameterInfo[] actualParameters);
    public virtual MethodInfo GetBaseDefinition();
    public virtual ICustomAttributeProvider get_ReturnTypeCustomAttributes();
    public virtual MethodAttributes get_Attributes();
    public virtual MethodImplAttributes GetMethodImplementationFlags();
    public virtual ParameterInfo[] GetParameters();
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
    public virtual RuntimeMethodHandle get_MethodHandle();
    public virtual Type get_DeclaringType();
    public Type get_AssumedDeclaringType();
    public virtual Object[] GetCustomAttributes(Type attributeType, bool inherit);
    public virtual Object[] GetCustomAttributes(bool inherit);
    public virtual bool IsDefined(Type attributeType, bool inherit);
    public virtual string get_Name();
    public virtual Type get_ReflectedType();
    public virtual Type get_ReturnType();
}
internal class System.Workflow.Activities.Rules.FieldReferenceExpression : RuleExpressionInternal {
    internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
internal class System.Workflow.Activities.Rules.FloatArithmeticLiteral : ArithmeticLiteral {
    internal object Value { get; }
    internal FloatArithmeticLiteral(float literalValue);
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(int v);
    internal virtual object Add(long v);
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(ulong v);
    internal virtual object Add(float v);
    internal virtual object Add(double v);
    internal virtual object Add(string v);
    internal virtual object Subtract(ArithmeticLiteral v);
    internal virtual object Subtract();
    internal virtual object Subtract(int v);
    internal virtual object Subtract(long v);
    internal virtual object Subtract(ushort v);
    internal virtual object Subtract(UInt32 v);
    internal virtual object Subtract(ulong v);
    internal virtual object Subtract(float v);
    internal virtual object Subtract(double v);
    internal virtual object Multiply(ArithmeticLiteral v);
    internal virtual object Multiply();
    internal virtual object Multiply(int v);
    internal virtual object Multiply(long v);
    internal virtual object Multiply(ushort v);
    internal virtual object Multiply(UInt32 v);
    internal virtual object Multiply(ulong v);
    internal virtual object Multiply(float v);
    internal virtual object Multiply(double v);
    internal virtual object Divide(ArithmeticLiteral v);
    internal virtual object Divide();
    internal virtual object Divide(int v);
    internal virtual object Divide(long v);
    internal virtual object Divide(ushort v);
    internal virtual object Divide(UInt32 v);
    internal virtual object Divide(ulong v);
    internal virtual object Divide(float v);
    internal virtual object Divide(double v);
    internal virtual object Modulus(ArithmeticLiteral v);
    internal virtual object Modulus();
    internal virtual object Modulus(int v);
    internal virtual object Modulus(long v);
    internal virtual object Modulus(ushort v);
    internal virtual object Modulus(UInt32 v);
    internal virtual object Modulus(ulong v);
    internal virtual object Modulus(float v);
    internal virtual object Modulus(double v);
}
internal class System.Workflow.Activities.Rules.FloatLiteral : Literal {
    internal object Value { get; }
    internal FloatLiteral(float literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(float rhs);
    internal virtual bool Equal(double rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(sbyte rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(short rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(ulong rhs);
    internal virtual bool LessThan(float rhs);
    internal virtual bool LessThan(double rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(sbyte rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(short rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(ulong rhs);
    internal virtual bool GreaterThan(float rhs);
    internal virtual bool GreaterThan(double rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(sbyte rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(short rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(ulong rhs);
    internal virtual bool LessThanOrEqual(float rhs);
    internal virtual bool LessThanOrEqual(double rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(sbyte rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(short rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(ulong rhs);
    internal virtual bool GreaterThanOrEqual(float rhs);
    internal virtual bool GreaterThanOrEqual(double rhs);
}
internal class System.Workflow.Activities.Rules.IndexerPropertyExpression : RuleExpressionInternal {
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
internal class System.Workflow.Activities.Rules.IntArithmeticLiteral : ArithmeticLiteral {
    internal object Value { get; }
    internal IntArithmeticLiteral(int literalValue);
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(int v);
    internal virtual object Add(long v);
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(ulong v);
    internal virtual object Add(float v);
    internal virtual object Add(double v);
    internal virtual object Add(decimal v);
    internal virtual object Add(string v);
    internal virtual object Subtract(ArithmeticLiteral v);
    internal virtual object Subtract();
    internal virtual object Subtract(int v);
    internal virtual object Subtract(long v);
    internal virtual object Subtract(ushort v);
    internal virtual object Subtract(UInt32 v);
    internal virtual object Subtract(ulong v);
    internal virtual object Subtract(float v);
    internal virtual object Subtract(double v);
    internal virtual object Subtract(decimal v);
    internal virtual object Multiply(ArithmeticLiteral v);
    internal virtual object Multiply();
    internal virtual object Multiply(int v);
    internal virtual object Multiply(long v);
    internal virtual object Multiply(ushort v);
    internal virtual object Multiply(UInt32 v);
    internal virtual object Multiply(ulong v);
    internal virtual object Multiply(float v);
    internal virtual object Multiply(double v);
    internal virtual object Multiply(decimal v);
    internal virtual object Divide(ArithmeticLiteral v);
    internal virtual object Divide();
    internal virtual object Divide(int v);
    internal virtual object Divide(long v);
    internal virtual object Divide(ushort v);
    internal virtual object Divide(UInt32 v);
    internal virtual object Divide(ulong v);
    internal virtual object Divide(float v);
    internal virtual object Divide(double v);
    internal virtual object Divide(decimal v);
    internal virtual object Modulus(ArithmeticLiteral v);
    internal virtual object Modulus();
    internal virtual object Modulus(int v);
    internal virtual object Modulus(long v);
    internal virtual object Modulus(ushort v);
    internal virtual object Modulus(UInt32 v);
    internal virtual object Modulus(ulong v);
    internal virtual object Modulus(float v);
    internal virtual object Modulus(double v);
    internal virtual object Modulus(decimal v);
    internal virtual object BitAnd(ArithmeticLiteral v);
    internal virtual object BitAnd();
    internal virtual object BitAnd(int v);
    internal virtual object BitAnd(long v);
    internal virtual object BitAnd(ushort v);
    internal virtual object BitAnd(UInt32 v);
    internal virtual object BitAnd(ulong v);
    internal virtual object BitOr(ArithmeticLiteral v);
    internal virtual object BitOr();
    internal virtual object BitOr(int v);
    internal virtual object BitOr(long v);
    internal virtual object BitOr(ushort v);
    internal virtual object BitOr(UInt32 v);
    internal virtual object BitOr(ulong v);
}
internal class System.Workflow.Activities.Rules.IntellisenseKeyword : object {
    internal string Name { get; }
    internal IntellisenseKeyword(string name);
    internal string get_Name();
}
internal class System.Workflow.Activities.Rules.IntellisenseParser : object {
    internal IntellisenseParser(string inputString);
    internal ParserContext BackParse();
}
internal class System.Workflow.Activities.Rules.IntLiteral : Literal {
    internal object Value { get; }
    internal IntLiteral(int literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(float rhs);
    internal virtual bool Equal(double rhs);
    internal virtual bool Equal(decimal rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(sbyte rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(short rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(ulong rhs);
    internal virtual bool LessThan(float rhs);
    internal virtual bool LessThan(double rhs);
    internal virtual bool LessThan(decimal rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(sbyte rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(short rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(ulong rhs);
    internal virtual bool GreaterThan(float rhs);
    internal virtual bool GreaterThan(double rhs);
    internal virtual bool GreaterThan(decimal rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(sbyte rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(short rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(ulong rhs);
    internal virtual bool LessThanOrEqual(float rhs);
    internal virtual bool LessThanOrEqual(double rhs);
    internal virtual bool LessThanOrEqual(decimal rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(sbyte rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(short rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(ulong rhs);
    internal virtual bool GreaterThanOrEqual(float rhs);
    internal virtual bool GreaterThanOrEqual(double rhs);
    internal virtual bool GreaterThanOrEqual(decimal rhs);
}
public interface System.Workflow.Activities.Rules.IRuleExpression {
    public abstract virtual RuleExpressionInfo Validate(RuleValidation validation, bool isWritten);
    public abstract virtual RuleExpressionResult Evaluate(RuleExecution execution);
    public abstract virtual void AnalyzeUsage(RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1720:AvoidTypeNamesInParameters")]
public abstract virtual void Decompile(StringBuilder stringBuilder, CodeExpression parentExpression);
    public abstract virtual bool Match(CodeExpression expression);
    public abstract virtual CodeExpression Clone();
}
internal class System.Workflow.Activities.Rules.LiftedArithmeticOperatorMethodInfo : BaseMethodInfo {
    public LiftedArithmeticOperatorMethodInfo(MethodInfo method);
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
}
internal class System.Workflow.Activities.Rules.LiftedConversionMethodInfo : BaseMethodInfo {
    public LiftedConversionMethodInfo(MethodInfo method);
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
}
internal class System.Workflow.Activities.Rules.LiftedEqualityOperatorMethodInfo : BaseMethodInfo {
    public LiftedEqualityOperatorMethodInfo(MethodInfo method);
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
}
internal class System.Workflow.Activities.Rules.LiftedRelationalOperatorMethodInfo : BaseMethodInfo {
    public LiftedRelationalOperatorMethodInfo(MethodInfo method);
    public virtual object Invoke(object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture);
}
internal abstract class System.Workflow.Activities.Rules.Literal : object {
    protected internal Type m_type;
    internal static MethodInfo ObjectEquality;
    internal object Value { get; }
    private static Literal();
    internal abstract virtual object get_Value();
    internal static Literal MakeLiteral(Type literalType, object literalValue);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal static RuleBinaryExpressionInfo AllowedComparison(Type lhs, CodeExpression lhsExpression, Type rhs, CodeExpression rhsExpression, CodeBinaryOperatorType comparison, RuleValidation validator, ValidationError& error);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
[SuppressMessageAttribute("Microsoft.Performance", "CA1803:AvoidCostlyCallsWherePossible")]
[SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
internal static MethodInfo MapOperatorToMethod(CodeBinaryOperatorType op, Type lhs, CodeExpression lhsExpression, Type rhs, CodeExpression rhsExpression, RuleValidation validator, ValidationError& error);
    internal abstract virtual bool Equal(Literal rhs);
    internal virtual bool Equal(byte literalValue);
    internal virtual bool Equal(sbyte literalValue);
    internal virtual bool Equal(short literalValue);
    internal virtual bool Equal(int literalValue);
    internal virtual bool Equal(long literalValue);
    internal virtual bool Equal(ushort literalValue);
    internal virtual bool Equal(UInt32 literalValue);
    internal virtual bool Equal(ulong literalValue);
    internal virtual bool Equal(float literalValue);
    internal virtual bool Equal(double literalValue);
    internal virtual bool Equal(char literalValue);
    internal virtual bool Equal(string literalValue);
    internal virtual bool Equal(decimal literalValue);
    internal virtual bool Equal(bool literalValue);
    internal abstract virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan();
    internal virtual bool LessThan(byte literalValue);
    internal virtual bool LessThan(char literalValue);
    internal virtual bool LessThan(sbyte literalValue);
    internal virtual bool LessThan(short literalValue);
    internal virtual bool LessThan(int literalValue);
    internal virtual bool LessThan(long literalValue);
    internal virtual bool LessThan(ushort literalValue);
    internal virtual bool LessThan(UInt32 literalValue);
    internal virtual bool LessThan(ulong literalValue);
    internal virtual bool LessThan(float literalValue);
    internal virtual bool LessThan(double literalValue);
    internal virtual bool LessThan(string literalValue);
    internal virtual bool LessThan(decimal literalValue);
    internal virtual bool LessThan(bool literalValue);
    internal abstract virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan();
    internal virtual bool GreaterThan(byte literalValue);
    internal virtual bool GreaterThan(char literalValue);
    internal virtual bool GreaterThan(sbyte literalValue);
    internal virtual bool GreaterThan(short literalValue);
    internal virtual bool GreaterThan(int literalValue);
    internal virtual bool GreaterThan(long literalValue);
    internal virtual bool GreaterThan(ushort literalValue);
    internal virtual bool GreaterThan(UInt32 literalValue);
    internal virtual bool GreaterThan(ulong literalValue);
    internal virtual bool GreaterThan(float literalValue);
    internal virtual bool GreaterThan(double literalValue);
    internal virtual bool GreaterThan(string literalValue);
    internal virtual bool GreaterThan(decimal literalValue);
    internal virtual bool GreaterThan(bool literalValue);
    internal abstract virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual();
    internal virtual bool LessThanOrEqual(byte literalValue);
    internal virtual bool LessThanOrEqual(char literalValue);
    internal virtual bool LessThanOrEqual(sbyte literalValue);
    internal virtual bool LessThanOrEqual(short literalValue);
    internal virtual bool LessThanOrEqual(int literalValue);
    internal virtual bool LessThanOrEqual(long literalValue);
    internal virtual bool LessThanOrEqual(ushort literalValue);
    internal virtual bool LessThanOrEqual(UInt32 literalValue);
    internal virtual bool LessThanOrEqual(ulong literalValue);
    internal virtual bool LessThanOrEqual(float literalValue);
    internal virtual bool LessThanOrEqual(double literalValue);
    internal virtual bool LessThanOrEqual(string literalValue);
    internal virtual bool LessThanOrEqual(decimal literalValue);
    internal virtual bool LessThanOrEqual(bool literalValue);
    internal abstract virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual();
    internal virtual bool GreaterThanOrEqual(byte literalValue);
    internal virtual bool GreaterThanOrEqual(char literalValue);
    internal virtual bool GreaterThanOrEqual(sbyte literalValue);
    internal virtual bool GreaterThanOrEqual(short literalValue);
    internal virtual bool GreaterThanOrEqual(int literalValue);
    internal virtual bool GreaterThanOrEqual(long literalValue);
    internal virtual bool GreaterThanOrEqual(ushort literalValue);
    internal virtual bool GreaterThanOrEqual(UInt32 literalValue);
    internal virtual bool GreaterThanOrEqual(ulong literalValue);
    internal virtual bool GreaterThanOrEqual(float literalValue);
    internal virtual bool GreaterThanOrEqual(double literalValue);
    internal virtual bool GreaterThanOrEqual(string literalValue);
    internal virtual bool GreaterThanOrEqual(decimal literalValue);
    internal virtual bool GreaterThanOrEqual(bool literalValue);
}
internal class System.Workflow.Activities.Rules.LongArithmeticLiteral : ArithmeticLiteral {
    internal object Value { get; }
    internal LongArithmeticLiteral(long literalValue);
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(int v);
    internal virtual object Add(long v);
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(ulong v);
    internal virtual object Add(float v);
    internal virtual object Add(double v);
    internal virtual object Add(decimal v);
    internal virtual object Add(string v);
    internal virtual object Subtract(ArithmeticLiteral v);
    internal virtual object Subtract();
    internal virtual object Subtract(int v);
    internal virtual object Subtract(long v);
    internal virtual object Subtract(ushort v);
    internal virtual object Subtract(UInt32 v);
    internal virtual object Subtract(ulong v);
    internal virtual object Subtract(float v);
    internal virtual object Subtract(double v);
    internal virtual object Subtract(decimal v);
    internal virtual object Multiply(ArithmeticLiteral v);
    internal virtual object Multiply();
    internal virtual object Multiply(int v);
    internal virtual object Multiply(long v);
    internal virtual object Multiply(ushort v);
    internal virtual object Multiply(UInt32 v);
    internal virtual object Multiply(ulong v);
    internal virtual object Multiply(float v);
    internal virtual object Multiply(double v);
    internal virtual object Multiply(decimal v);
    internal virtual object Divide(ArithmeticLiteral v);
    internal virtual object Divide();
    internal virtual object Divide(int v);
    internal virtual object Divide(long v);
    internal virtual object Divide(ushort v);
    internal virtual object Divide(UInt32 v);
    internal virtual object Divide(ulong v);
    internal virtual object Divide(float v);
    internal virtual object Divide(double v);
    internal virtual object Divide(decimal v);
    internal virtual object Modulus(ArithmeticLiteral v);
    internal virtual object Modulus();
    internal virtual object Modulus(int v);
    internal virtual object Modulus(long v);
    internal virtual object Modulus(ushort v);
    internal virtual object Modulus(UInt32 v);
    internal virtual object Modulus(ulong v);
    internal virtual object Modulus(float v);
    internal virtual object Modulus(double v);
    internal virtual object Modulus(decimal v);
    internal virtual object BitAnd(ArithmeticLiteral v);
    internal virtual object BitAnd();
    internal virtual object BitAnd(int v);
    internal virtual object BitAnd(long v);
    internal virtual object BitAnd(ushort v);
    internal virtual object BitAnd(UInt32 v);
    internal virtual object BitAnd(ulong v);
    internal virtual object BitOr(ArithmeticLiteral v);
    internal virtual object BitOr();
    internal virtual object BitOr(int v);
    internal virtual object BitOr(long v);
    internal virtual object BitOr(ushort v);
    internal virtual object BitOr(UInt32 v);
    internal virtual object BitOr(ulong v);
}
internal class System.Workflow.Activities.Rules.LongLiteral : Literal {
    internal object Value { get; }
    internal LongLiteral(long literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(float rhs);
    internal virtual bool Equal(double rhs);
    internal virtual bool Equal(decimal rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(sbyte rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(short rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(ulong rhs);
    internal virtual bool LessThan(float rhs);
    internal virtual bool LessThan(double rhs);
    internal virtual bool LessThan(decimal rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(sbyte rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(short rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(ulong rhs);
    internal virtual bool GreaterThan(float rhs);
    internal virtual bool GreaterThan(double rhs);
    internal virtual bool GreaterThan(decimal rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(sbyte rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(short rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(ulong rhs);
    internal virtual bool LessThanOrEqual(float rhs);
    internal virtual bool LessThanOrEqual(double rhs);
    internal virtual bool LessThanOrEqual(decimal rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(sbyte rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(short rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(ulong rhs);
    internal virtual bool GreaterThanOrEqual(float rhs);
    internal virtual bool GreaterThanOrEqual(double rhs);
    internal virtual bool GreaterThanOrEqual(decimal rhs);
}
internal class System.Workflow.Activities.Rules.MemberSymbol : Symbol {
    internal string Name { get; }
    internal MemberSymbol(MemberInfo member);
    internal virtual string get_Name();
    internal virtual CodeExpression ParseRootIdentifier(Parser parser, ParserContext parserContext, bool assignIsEquality);
    internal virtual void RecordSymbol(ArrayList list);
}
[GeneratedCodeAttribute("Microsoft.Build.Tasks.StronglyTypedResourceBuilder", "14.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Workflow.Activities.Rules.Messages : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AmbiguousConstructor { get; }
    internal static string AmbiguousConversion { get; }
    internal static string AmbiguousIndexerMatch { get; }
    internal static string AmbiguousMatch { get; }
    internal static string AmbiguousOperator { get; }
    internal static string ArithOpBadTypes { get; }
    internal static string ArrayIndexBadRank { get; }
    internal static string ArrayIndexBadType { get; }
    internal static string ArraySizeBoth { get; }
    internal static string ArraySizeInvalid { get; }
    internal static string ArraySizeTypeInvalid { get; }
    internal static string ArrayTypeInvalid { get; }
    internal static string AssignLeftNull { get; }
    internal static string AssignNotAllowed { get; }
    internal static string AssignNotHandled { get; }
    internal static string AssignRightNull { get; }
    internal static string AttributeFieldName { get; }
    internal static string AttributeMethodName { get; }
    internal static string AttributeMethodNotFound { get; }
    internal static string AttributePropertyName { get; }
    internal static string AttributePropertyNotFound { get; }
    internal static string BinaryOpFails { get; }
    internal static string BinaryOpNotSupported { get; }
    internal static string CannotAccessInternalMember { get; }
    internal static string CannotAccessPrivateMember { get; }
    internal static string CannotCastNullToValueType { get; }
    internal static string CannotIndexType { get; }
    internal static string CannotWriteToExpression { get; }
    internal static string CastIncompatibleTypes { get; }
    internal static string CastOfNullInvalid { get; }
    internal static string CodeExpressionNotHandled { get; }
    internal static string CodeStatementNotHandled { get; }
    internal static string Condition { get; }
    internal static string ConditionConfirmDeleteMessageText { get; }
    internal static string ConditionDescriptionText { get; }
    internal static string ConditionDuplicateNameErrorText { get; }
    internal static string ConditionEditor { get; }
    internal static string ConditionEmptyNameErrorText { get; }
    internal static string ConditionExists { get; }
    internal static string ConditionExpression { get; }
    internal static string ConditionExpressionNull { get; }
    internal static string ConditionMustBeBoolean { get; }
    internal static string ConditionNameNotIdentical { get; }
    internal static string ConditionNameNotSet { get; }
    internal static string ConditionNewNameLableText { get; }
    internal static string ConditionNotFound { get; }
    internal static string ConditionPreviewLabelText { get; }
    internal static string ConditionRenameTitleText { get; }
    internal static string ConditionTitleText { get; }
    internal static string ConditionValidationFailed { get; }
    internal static string ConstructorOverloadNotFound { get; }
    internal static string ContextStackItemMissing { get; }
    internal static string ContextStackMissing { get; }
    internal static string CouldNotDetermineMemberType { get; }
    internal static string CyclicalExpression { get; }
    internal static string DebugModeEditsDisallowed { get; }
    internal static string DeleteCondition { get; }
    internal static string DeleteRule { get; }
    internal static string DeleteRuleSet { get; }
    internal static string DuplicateConditions { get; }
    internal static string Else { get; }
    internal static string Error_ActionsParser { get; }
    internal static string Error_ConditionParser { get; }
    internal static string Error_ConfigFileMissingOrInvalid { get; }
    internal static string Error_ConstructorInvoke { get; }
    internal static string Error_DuplicateRuleName { get; }
    internal static string Error_ExpressionNotSupported { get; }
    internal static string Error_InvalidPriority { get; }
    internal static string Error_MethodInvoke { get; }
    internal static string Error_PropertyGet { get; }
    internal static string Error_PropertySet { get; }
    internal static string Error_RuleNameIsEmpty { get; }
    internal static string Error_TypeNotAuthorized { get; }
    internal static string ErrorsCollectionMissing { get; }
    internal static string ExplicitUpdateOnly { get; }
    internal static string ExpressionNotValidated { get; }
    internal static string ExpressionPropertyDescription { get; }
    internal static string FieldSetNotAllowed { get; }
    internal static string FullChaining { get; }
    internal static string GenericMethodsNotSupported { get; }
    internal static string IncompatibleArithmeticTypes { get; }
    internal static string IncompatibleComparisonTypes { get; }
    internal static string IncompatibleNullTypes { get; }
    internal static string IndexerArgCannotBeRefOrOut { get; }
    internal static string IndexerCountMismatch { get; }
    internal static string IndexerNotFound { get; }
    internal static string IndexerOverloadNotFound { get; }
    internal static string IndexersCannotBeStatic { get; }
    internal static string InitializerCountMismatch { get; }
    internal static string InitializerMismatch { get; }
    internal static string InvalidCast { get; }
    internal static string InvalidConditionExpression { get; }
    internal static string InvalidConditionName { get; }
    internal static string InvalidConditionNameCaption { get; }
    internal static string InvalidOutRefParameter { get; }
    internal static string InvalidRuleAttributeParameter { get; }
    internal static string InvalidRuleSetExpression { get; }
    internal static string InvalidRuleSetName { get; }
    internal static string InvalidWildCardInPathQualifier { get; }
    internal static string InvokeAttrRefersToParameterAttribute { get; }
    internal static string InvokeNotHandled { get; }
    internal static string InvokeStatementNull { get; }
    internal static string LogicalOpBadTypeLHS { get; }
    internal static string LogicalOpBadTypeRHS { get; }
    internal static string MethodArgCountMismatch { get; }
    internal static string MethodArgumentTypeMismatch { get; }
    internal static string MethodDirectionMismatch { get; }
    internal static string MethodOverloadNotFound { get; }
    internal static string MissingIndexExpressions { get; }
    internal static string MissingInitializer { get; }
    internal static string MissingRuleCondition { get; }
    internal static string MissingService { get; }
    internal static string NamePropertyDescription { get; }
    internal static string NewConditionName { get; }
    internal static string NewRuleName { get; }
    internal static string NewRuleSetName { get; }
    internal static string No { get; }
    internal static string NoActivity { get; }
    internal static string NoConversion { get; }
    internal static string NoHelp { get; }
    internal static string NonStaticMember { get; }
    internal static string NotARuleConditionReference { get; }
    internal static string NotCloneable { get; }
    internal static string NullAssignLeft { get; }
    internal static string NullAssignRight { get; }
    internal static string NullBinaryOpLHS { get; }
    internal static string NullBinaryOpRHS { get; }
    internal static string NullCastExpr { get; }
    internal static string NullCastType { get; }
    internal static string NullConstructorParameter { get; }
    internal static string NullConstructorTypeParameter { get; }
    internal static string NullDirectionTarget { get; }
    internal static string NullFieldTarget { get; }
    internal static string NullIndexerTarget { get; }
    internal static string NullIndexExpression { get; }
    internal static string NullInvokeStatementExpression { get; }
    internal static string NullMethodParameter { get; }
    internal static string NullMethodTarget { get; }
    internal static string NullMethodTypeParameter { get; }
    internal static string NullPropertyTarget { get; }
    internal static string NullStatement { get; }
    internal static string NullTypeType { get; }
    internal static string NullUpdate { get; }
    internal static string NullValue { get; }
    internal static string Parser_BadTypeArgCount { get; }
    internal static string Parser_EmptyExpression { get; }
    internal static string Parser_ExtraCharactersIgnored { get; }
    internal static string Parser_InvalidCharacter { get; }
    internal static string Parser_InvalidDecimalConstant { get; }
    internal static string Parser_InvalidEscapeSequence { get; }
    internal static string Parser_InvalidExponentDigit { get; }
    internal static string Parser_InvalidFloatingPointConstant { get; }
    internal static string Parser_InvalidHexDigit { get; }
    internal static string Parser_InvalidIntegerConstant { get; }
    internal static string Parser_InvalidNew { get; }
    internal static string Parser_InvalidTypeArgument { get; }
    internal static string Parser_InvalidUpdateExpression { get; }
    internal static string Parser_MissingCloseAngleBracket { get; }
    internal static string Parser_MissingCloseSquareBracket { get; }
    internal static string Parser_MissingCloseSquareBracket1 { get; }
    internal static string Parser_MissingDotAfterNamespace { get; }
    internal static string Parser_MissingIdentifierAfterDot { get; }
    internal static string Parser_MissingLparenAfterCommand { get; }
    internal static string Parser_MissingOperand { get; }
    internal static string Parser_MissingRCurlyAfterInitializers { get; }
    internal static string Parser_MissingRParenAfterArgumentList { get; }
    internal static string Parser_MissingRParenInSubexpression { get; }
    internal static string Parser_MissingTypeArguments { get; }
    internal static string Parser_NoArrayCreationSize { get; }
    internal static string Parser_NotAGenericType { get; }
    internal static string Parser_UnknownIdentifier { get; }
    internal static string Parser_UnknownLiteral { get; }
    internal static string Parser_UnknownNamespaceMember { get; }
    internal static string Parser_UnterminatedCharacterLiteral { get; }
    internal static string Parser_UnterminatedStringLiteral { get; }
    internal static string ReevaluationAlways { get; }
    internal static string ReevaluationNever { get; }
    internal static string RelationalOpBadTypes { get; }
    internal static string RuleConfirmDeleteMessageText { get; }
    internal static string RuleNameMissing { get; }
    internal static string RuleSet { get; }
    internal static string RuleSetConfirmDeleteMessageText { get; }
    internal static string RuleSetDescriptionText { get; }
    internal static string RuleSetDuplicateNameErrorText { get; }
    internal static string RuleSetEmptyNameErrorText { get; }
    internal static string RuleSetExists { get; }
    internal static string RuleSetNameNotSet { get; }
    internal static string RuleSetNewNameLableText { get; }
    internal static string RuleSetNotFound { get; }
    internal static string RuleSetPreviewLabelText { get; }
    internal static string RuleSetRenameTitleText { get; }
    internal static string RuleSetTitleText { get; }
    internal static string RuleSetValidationFailed { get; }
    internal static string RuleValidationError { get; }
    internal static string Sequential { get; }
    internal static string StaticMember { get; }
    internal static string TargetEvaluatedNullField { get; }
    internal static string TargetEvaluatedNullIndexer { get; }
    internal static string TargetEvaluatedNullMethod { get; }
    internal static string TargetEvaluatedNullProperty { get; }
    internal static string Then { get; }
    internal static string TraceRuleActions { get; }
    internal static string TraceRuleActionSideEffect { get; }
    internal static string TraceRuleConditionDependency { get; }
    internal static string TraceRuleEvaluate { get; }
    internal static string TraceRuleHeader { get; }
    internal static string TraceRuleIdentifier { get; }
    internal static string TraceRuleResult { get; }
    internal static string TraceRuleSetEvaluate { get; }
    internal static string TraceRuleTriggers { get; }
    internal static string TraceUpdate { get; }
    internal static string UnexpectedArgumentType { get; }
    internal static string UnknownConstructor { get; }
    internal static string UnknownField { get; }
    internal static string UnknownFieldOrProperty { get; }
    internal static string UnknownGenericType { get; }
    internal static string UnknownMethod { get; }
    internal static string UnknownProperty { get; }
    internal static string UnknownPropertyGet { get; }
    internal static string UnknownPropertySet { get; }
    internal static string UnknownType { get; }
    internal static string UnreachableCodeHalt { get; }
    internal static string UpdateNotThis { get; }
    internal static string UpdateUnknownFieldOrProperty { get; }
    internal static string ValidationMismatch { get; }
    internal static string Yes { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AmbiguousConstructor();
    internal static string get_AmbiguousConversion();
    internal static string get_AmbiguousIndexerMatch();
    internal static string get_AmbiguousMatch();
    internal static string get_AmbiguousOperator();
    internal static string get_ArithOpBadTypes();
    internal static string get_ArrayIndexBadRank();
    internal static string get_ArrayIndexBadType();
    internal static string get_ArraySizeBoth();
    internal static string get_ArraySizeInvalid();
    internal static string get_ArraySizeTypeInvalid();
    internal static string get_ArrayTypeInvalid();
    internal static string get_AssignLeftNull();
    internal static string get_AssignNotAllowed();
    internal static string get_AssignNotHandled();
    internal static string get_AssignRightNull();
    internal static string get_AttributeFieldName();
    internal static string get_AttributeMethodName();
    internal static string get_AttributeMethodNotFound();
    internal static string get_AttributePropertyName();
    internal static string get_AttributePropertyNotFound();
    internal static string get_BinaryOpFails();
    internal static string get_BinaryOpNotSupported();
    internal static string get_CannotAccessInternalMember();
    internal static string get_CannotAccessPrivateMember();
    internal static string get_CannotCastNullToValueType();
    internal static string get_CannotIndexType();
    internal static string get_CannotWriteToExpression();
    internal static string get_CastIncompatibleTypes();
    internal static string get_CastOfNullInvalid();
    internal static string get_CodeExpressionNotHandled();
    internal static string get_CodeStatementNotHandled();
    internal static string get_Condition();
    internal static string get_ConditionConfirmDeleteMessageText();
    internal static string get_ConditionDescriptionText();
    internal static string get_ConditionDuplicateNameErrorText();
    internal static string get_ConditionEditor();
    internal static string get_ConditionEmptyNameErrorText();
    internal static string get_ConditionExists();
    internal static string get_ConditionExpression();
    internal static string get_ConditionExpressionNull();
    internal static string get_ConditionMustBeBoolean();
    internal static string get_ConditionNameNotIdentical();
    internal static string get_ConditionNameNotSet();
    internal static string get_ConditionNewNameLableText();
    internal static string get_ConditionNotFound();
    internal static string get_ConditionPreviewLabelText();
    internal static string get_ConditionRenameTitleText();
    internal static string get_ConditionTitleText();
    internal static string get_ConditionValidationFailed();
    internal static string get_ConstructorOverloadNotFound();
    internal static string get_ContextStackItemMissing();
    internal static string get_ContextStackMissing();
    internal static string get_CouldNotDetermineMemberType();
    internal static string get_CyclicalExpression();
    internal static string get_DebugModeEditsDisallowed();
    internal static string get_DeleteCondition();
    internal static string get_DeleteRule();
    internal static string get_DeleteRuleSet();
    internal static string get_DuplicateConditions();
    internal static string get_Else();
    internal static string get_Error_ActionsParser();
    internal static string get_Error_ConditionParser();
    internal static string get_Error_ConfigFileMissingOrInvalid();
    internal static string get_Error_ConstructorInvoke();
    internal static string get_Error_DuplicateRuleName();
    internal static string get_Error_ExpressionNotSupported();
    internal static string get_Error_InvalidPriority();
    internal static string get_Error_MethodInvoke();
    internal static string get_Error_PropertyGet();
    internal static string get_Error_PropertySet();
    internal static string get_Error_RuleNameIsEmpty();
    internal static string get_Error_TypeNotAuthorized();
    internal static string get_ErrorsCollectionMissing();
    internal static string get_ExplicitUpdateOnly();
    internal static string get_ExpressionNotValidated();
    internal static string get_ExpressionPropertyDescription();
    internal static string get_FieldSetNotAllowed();
    internal static string get_FullChaining();
    internal static string get_GenericMethodsNotSupported();
    internal static string get_IncompatibleArithmeticTypes();
    internal static string get_IncompatibleComparisonTypes();
    internal static string get_IncompatibleNullTypes();
    internal static string get_IndexerArgCannotBeRefOrOut();
    internal static string get_IndexerCountMismatch();
    internal static string get_IndexerNotFound();
    internal static string get_IndexerOverloadNotFound();
    internal static string get_IndexersCannotBeStatic();
    internal static string get_InitializerCountMismatch();
    internal static string get_InitializerMismatch();
    internal static string get_InvalidCast();
    internal static string get_InvalidConditionExpression();
    internal static string get_InvalidConditionName();
    internal static string get_InvalidConditionNameCaption();
    internal static string get_InvalidOutRefParameter();
    internal static string get_InvalidRuleAttributeParameter();
    internal static string get_InvalidRuleSetExpression();
    internal static string get_InvalidRuleSetName();
    internal static string get_InvalidWildCardInPathQualifier();
    internal static string get_InvokeAttrRefersToParameterAttribute();
    internal static string get_InvokeNotHandled();
    internal static string get_InvokeStatementNull();
    internal static string get_LogicalOpBadTypeLHS();
    internal static string get_LogicalOpBadTypeRHS();
    internal static string get_MethodArgCountMismatch();
    internal static string get_MethodArgumentTypeMismatch();
    internal static string get_MethodDirectionMismatch();
    internal static string get_MethodOverloadNotFound();
    internal static string get_MissingIndexExpressions();
    internal static string get_MissingInitializer();
    internal static string get_MissingRuleCondition();
    internal static string get_MissingService();
    internal static string get_NamePropertyDescription();
    internal static string get_NewConditionName();
    internal static string get_NewRuleName();
    internal static string get_NewRuleSetName();
    internal static string get_No();
    internal static string get_NoActivity();
    internal static string get_NoConversion();
    internal static string get_NoHelp();
    internal static string get_NonStaticMember();
    internal static string get_NotARuleConditionReference();
    internal static string get_NotCloneable();
    internal static string get_NullAssignLeft();
    internal static string get_NullAssignRight();
    internal static string get_NullBinaryOpLHS();
    internal static string get_NullBinaryOpRHS();
    internal static string get_NullCastExpr();
    internal static string get_NullCastType();
    internal static string get_NullConstructorParameter();
    internal static string get_NullConstructorTypeParameter();
    internal static string get_NullDirectionTarget();
    internal static string get_NullFieldTarget();
    internal static string get_NullIndexerTarget();
    internal static string get_NullIndexExpression();
    internal static string get_NullInvokeStatementExpression();
    internal static string get_NullMethodParameter();
    internal static string get_NullMethodTarget();
    internal static string get_NullMethodTypeParameter();
    internal static string get_NullPropertyTarget();
    internal static string get_NullStatement();
    internal static string get_NullTypeType();
    internal static string get_NullUpdate();
    internal static string get_NullValue();
    internal static string get_Parser_BadTypeArgCount();
    internal static string get_Parser_EmptyExpression();
    internal static string get_Parser_ExtraCharactersIgnored();
    internal static string get_Parser_InvalidCharacter();
    internal static string get_Parser_InvalidDecimalConstant();
    internal static string get_Parser_InvalidEscapeSequence();
    internal static string get_Parser_InvalidExponentDigit();
    internal static string get_Parser_InvalidFloatingPointConstant();
    internal static string get_Parser_InvalidHexDigit();
    internal static string get_Parser_InvalidIntegerConstant();
    internal static string get_Parser_InvalidNew();
    internal static string get_Parser_InvalidTypeArgument();
    internal static string get_Parser_InvalidUpdateExpression();
    internal static string get_Parser_MissingCloseAngleBracket();
    internal static string get_Parser_MissingCloseSquareBracket();
    internal static string get_Parser_MissingCloseSquareBracket1();
    internal static string get_Parser_MissingDotAfterNamespace();
    internal static string get_Parser_MissingIdentifierAfterDot();
    internal static string get_Parser_MissingLparenAfterCommand();
    internal static string get_Parser_MissingOperand();
    internal static string get_Parser_MissingRCurlyAfterInitializers();
    internal static string get_Parser_MissingRParenAfterArgumentList();
    internal static string get_Parser_MissingRParenInSubexpression();
    internal static string get_Parser_MissingTypeArguments();
    internal static string get_Parser_NoArrayCreationSize();
    internal static string get_Parser_NotAGenericType();
    internal static string get_Parser_UnknownIdentifier();
    internal static string get_Parser_UnknownLiteral();
    internal static string get_Parser_UnknownNamespaceMember();
    internal static string get_Parser_UnterminatedCharacterLiteral();
    internal static string get_Parser_UnterminatedStringLiteral();
    internal static string get_ReevaluationAlways();
    internal static string get_ReevaluationNever();
    internal static string get_RelationalOpBadTypes();
    internal static string get_RuleConfirmDeleteMessageText();
    internal static string get_RuleNameMissing();
    internal static string get_RuleSet();
    internal static string get_RuleSetConfirmDeleteMessageText();
    internal static string get_RuleSetDescriptionText();
    internal static string get_RuleSetDuplicateNameErrorText();
    internal static string get_RuleSetEmptyNameErrorText();
    internal static string get_RuleSetExists();
    internal static string get_RuleSetNameNotSet();
    internal static string get_RuleSetNewNameLableText();
    internal static string get_RuleSetNotFound();
    internal static string get_RuleSetPreviewLabelText();
    internal static string get_RuleSetRenameTitleText();
    internal static string get_RuleSetTitleText();
    internal static string get_RuleSetValidationFailed();
    internal static string get_RuleValidationError();
    internal static string get_Sequential();
    internal static string get_StaticMember();
    internal static string get_TargetEvaluatedNullField();
    internal static string get_TargetEvaluatedNullIndexer();
    internal static string get_TargetEvaluatedNullMethod();
    internal static string get_TargetEvaluatedNullProperty();
    internal static string get_Then();
    internal static string get_TraceRuleActions();
    internal static string get_TraceRuleActionSideEffect();
    internal static string get_TraceRuleConditionDependency();
    internal static string get_TraceRuleEvaluate();
    internal static string get_TraceRuleHeader();
    internal static string get_TraceRuleIdentifier();
    internal static string get_TraceRuleResult();
    internal static string get_TraceRuleSetEvaluate();
    internal static string get_TraceRuleTriggers();
    internal static string get_TraceUpdate();
    internal static string get_UnexpectedArgumentType();
    internal static string get_UnknownConstructor();
    internal static string get_UnknownField();
    internal static string get_UnknownFieldOrProperty();
    internal static string get_UnknownGenericType();
    internal static string get_UnknownMethod();
    internal static string get_UnknownProperty();
    internal static string get_UnknownPropertyGet();
    internal static string get_UnknownPropertySet();
    internal static string get_UnknownType();
    internal static string get_UnreachableCodeHalt();
    internal static string get_UpdateNotThis();
    internal static string get_UpdateUnknownFieldOrProperty();
    internal static string get_ValidationMismatch();
    internal static string get_Yes();
}
internal class System.Workflow.Activities.Rules.MethodInvokeExpression : RuleExpressionInternal {
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
internal class System.Workflow.Activities.Rules.NamespaceSymbol : Symbol {
    internal NamespaceSymbol Parent;
    internal Dictionary`2<string, Symbol> NestedSymbols;
    internal int Level;
    internal string Name { get; }
    internal NamespaceSymbol(string name, NamespaceSymbol parent);
    internal virtual string get_Name();
    internal NamespaceSymbol AddNamespace(string nsName);
    internal void AddType(Type type);
    internal Symbol FindMember(string memberName);
    internal ArrayList GetMembers();
    internal string GetQualifiedName();
    internal virtual CodeExpression ParseRootIdentifier(Parser parser, ParserContext parserContext, bool assignIsEquality);
    internal virtual void RecordSymbol(ArrayList list);
}
internal class System.Workflow.Activities.Rules.NullArithmeticLiteral : ArithmeticLiteral {
    protected string TypeName { get; }
    internal object Value { get; }
    internal NullArithmeticLiteral(Type type);
    protected virtual string get_TypeName();
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(int v);
    internal virtual object Add(long v);
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(ulong v);
    internal virtual object Add(float v);
    internal virtual object Add(double v);
    internal virtual object Add(decimal v);
    internal virtual object Add(bool v);
    internal virtual object Add(string v);
    internal virtual object Subtract(ArithmeticLiteral v);
    internal virtual object Subtract();
    internal virtual object Subtract(int v);
    internal virtual object Subtract(long v);
    internal virtual object Subtract(ushort v);
    internal virtual object Subtract(UInt32 v);
    internal virtual object Subtract(ulong v);
    internal virtual object Subtract(float v);
    internal virtual object Subtract(double v);
    internal virtual object Subtract(decimal v);
    internal virtual object Multiply(ArithmeticLiteral v);
    internal virtual object Multiply();
    internal virtual object Multiply(int v);
    internal virtual object Multiply(long v);
    internal virtual object Multiply(ushort v);
    internal virtual object Multiply(UInt32 v);
    internal virtual object Multiply(ulong v);
    internal virtual object Multiply(float v);
    internal virtual object Multiply(double v);
    internal virtual object Multiply(decimal v);
    internal virtual object Divide(ArithmeticLiteral v);
    internal virtual object Divide();
    internal virtual object Divide(int v);
    internal virtual object Divide(long v);
    internal virtual object Divide(ushort v);
    internal virtual object Divide(UInt32 v);
    internal virtual object Divide(ulong v);
    internal virtual object Divide(float v);
    internal virtual object Divide(double v);
    internal virtual object Divide(decimal v);
    internal virtual object Modulus(ArithmeticLiteral v);
    internal virtual object Modulus();
    internal virtual object Modulus(int v);
    internal virtual object Modulus(long v);
    internal virtual object Modulus(ushort v);
    internal virtual object Modulus(UInt32 v);
    internal virtual object Modulus(ulong v);
    internal virtual object Modulus(float v);
    internal virtual object Modulus(double v);
    internal virtual object Modulus(decimal v);
    internal virtual object BitAnd(ArithmeticLiteral v);
    internal virtual object BitAnd();
    internal virtual object BitAnd(int v);
    internal virtual object BitAnd(long v);
    internal virtual object BitAnd(ushort v);
    internal virtual object BitAnd(UInt32 v);
    internal virtual object BitAnd(ulong v);
    internal virtual object BitAnd(bool v);
    internal virtual object BitOr(ArithmeticLiteral v);
    internal virtual object BitOr();
    internal virtual object BitOr(int v);
    internal virtual object BitOr(long v);
    internal virtual object BitOr(ushort v);
    internal virtual object BitOr(UInt32 v);
    internal virtual object BitOr(ulong v);
    internal virtual object BitOr(bool v);
}
internal class System.Workflow.Activities.Rules.NullLiteral : Literal {
    internal object Value { get; }
    internal NullLiteral(Type type);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(byte literalValue);
    internal virtual bool LessThan(char literalValue);
    internal virtual bool LessThan(sbyte literalValue);
    internal virtual bool LessThan(short literalValue);
    internal virtual bool LessThan(int literalValue);
    internal virtual bool LessThan(long literalValue);
    internal virtual bool LessThan(ushort literalValue);
    internal virtual bool LessThan(UInt32 literalValue);
    internal virtual bool LessThan(ulong literalValue);
    internal virtual bool LessThan(float literalValue);
    internal virtual bool LessThan(double literalValue);
    internal virtual bool LessThan(string literalValue);
    internal virtual bool LessThan(decimal literalValue);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(byte literalValue);
    internal virtual bool GreaterThan(char literalValue);
    internal virtual bool GreaterThan(sbyte literalValue);
    internal virtual bool GreaterThan(short literalValue);
    internal virtual bool GreaterThan(int literalValue);
    internal virtual bool GreaterThan(long literalValue);
    internal virtual bool GreaterThan(ushort literalValue);
    internal virtual bool GreaterThan(UInt32 literalValue);
    internal virtual bool GreaterThan(ulong literalValue);
    internal virtual bool GreaterThan(float literalValue);
    internal virtual bool GreaterThan(double literalValue);
    internal virtual bool GreaterThan(string literalValue);
    internal virtual bool GreaterThan(decimal literalValue);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual();
    internal virtual bool LessThanOrEqual(byte literalValue);
    internal virtual bool LessThanOrEqual(char literalValue);
    internal virtual bool LessThanOrEqual(sbyte literalValue);
    internal virtual bool LessThanOrEqual(short literalValue);
    internal virtual bool LessThanOrEqual(int literalValue);
    internal virtual bool LessThanOrEqual(long literalValue);
    internal virtual bool LessThanOrEqual(ushort literalValue);
    internal virtual bool LessThanOrEqual(UInt32 literalValue);
    internal virtual bool LessThanOrEqual(ulong literalValue);
    internal virtual bool LessThanOrEqual(float literalValue);
    internal virtual bool LessThanOrEqual(double literalValue);
    internal virtual bool LessThanOrEqual(string literalValue);
    internal virtual bool LessThanOrEqual(decimal literalValue);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual();
    internal virtual bool GreaterThanOrEqual(byte literalValue);
    internal virtual bool GreaterThanOrEqual(char literalValue);
    internal virtual bool GreaterThanOrEqual(sbyte literalValue);
    internal virtual bool GreaterThanOrEqual(short literalValue);
    internal virtual bool GreaterThanOrEqual(int literalValue);
    internal virtual bool GreaterThanOrEqual(long literalValue);
    internal virtual bool GreaterThanOrEqual(ushort literalValue);
    internal virtual bool GreaterThanOrEqual(UInt32 literalValue);
    internal virtual bool GreaterThanOrEqual(ulong literalValue);
    internal virtual bool GreaterThanOrEqual(float literalValue);
    internal virtual bool GreaterThanOrEqual(double literalValue);
    internal virtual bool GreaterThanOrEqual(string literalValue);
    internal virtual bool GreaterThanOrEqual(decimal literalValue);
}
internal class System.Workflow.Activities.Rules.ObjectCreateExpression : RuleExpressionInternal {
    internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
internal class System.Workflow.Activities.Rules.OverloadedTypeSymbol : TypeSymbolBase {
    internal List`1<TypeSymbol> TypeSymbols;
    internal string Name { get; }
    internal OverloadedTypeSymbol(string name, TypeSymbol typeSym1, TypeSymbol typeSym2);
    internal virtual string get_Name();
    internal void AddLocalType(TypeSymbol typeSym);
    internal virtual OverloadedTypeSymbol OverloadType(TypeSymbolBase newTypeSymBase);
    internal virtual CodeExpression ParseRootIdentifier(Parser parser, ParserContext parserContext, bool assignIsEquality);
    internal virtual void RecordSymbol(ArrayList list);
}
internal class System.Workflow.Activities.Rules.Parser : object {
    [SuppressMessageAttribute("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
[SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal Parser(RuleValidation validation);
    private static Parser();
    internal ICollection GetExpressionCompletions(string expressionString);
    internal RuleExpressionCondition ParseCondition(string expressionString);
    [SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
internal RuleAction ParseSingleStatement(string statementString);
    internal List`1<RuleAction> ParseStatementList(string statementString);
    internal CodeExpression ParseUnadornedMemberIdentifier(ParserContext parserContext, MemberSymbol symbol, bool assignIsEquality);
    internal CodeExpression ParseRootNamespaceIdentifier(ParserContext parserContext, NamespaceSymbol nsSym, bool assignIsEquality);
    internal CodeExpression ParseRootTypeIdentifier(ParserContext parserContext, TypeSymbol typeSym, bool assignIsEquality);
    internal CodeExpression ParseRootOverloadedTypeIdentifier(ParserContext parserContext, List`1<TypeSymbol> candidateTypeSymbols, bool assignIsEquality);
}
internal class System.Workflow.Activities.Rules.ParserContext : object {
    internal Dictionary`2<object, int> exprPositions;
    internal bool provideIntellisense;
    internal ICollection completions;
    internal Token CurrentToken { get; }
    internal int NumTokens { get; }
    internal ParserContext(string expressionString);
    internal ParserContext(List`1<Token> tokens);
    internal Token get_CurrentToken();
    internal Token NextToken();
    internal int SaveCurrentToken();
    internal void RestoreCurrentToken(int tokenValue);
    internal void SetNamespaceCompletions(NamespaceSymbol nsSym);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal void SetTypeMemberCompletions(Type computedType, Type thisType, bool isStatic, RuleValidation validation);
    internal void SetConstructorCompletions(Type computedType, Type thisType);
    internal void SetNestedClassCompletions(Type computedType, Type thisType);
    internal void SetMethodCompletions(Type computedType, Type thisType, string methodName, bool includeStatic, bool includeInstance, RuleValidation validation);
    internal static bool IsNonPrivate(MethodInfo methodInfo, Type thisType);
    internal static bool IsNonPrivate(FieldInfo fieldInfo, Type thisType);
    internal static bool IsNonPrivate(Type type, Type thisType);
    internal int get_NumTokens();
}
internal class System.Workflow.Activities.Rules.PrimitiveExpression : RuleExpressionInternal {
    internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
internal class System.Workflow.Activities.Rules.PropertyReferenceExpression : RuleExpressionInternal {
    internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
public class System.Workflow.Activities.Rules.RemovedConditionAction : RuleConditionChangeAction {
    public string ConditionName { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public RuleCondition ConditionDefinition { get; public set; }
    public RemovedConditionAction(RuleCondition removedConditionDefinition);
    public virtual string get_ConditionName();
    public RuleCondition get_ConditionDefinition();
    public void set_ConditionDefinition(RuleCondition value);
    protected virtual bool ApplyTo(Activity rootActivity);
}
public class System.Workflow.Activities.Rules.RemovedRuleSetAction : RuleSetChangeAction {
    public string RuleSetName { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public RuleSet RuleSetDefinition { get; public set; }
    public RemovedRuleSetAction(RuleSet removedRuleSetDefinition);
    public virtual string get_RuleSetName();
    public RuleSet get_RuleSetDefinition();
    public void set_RuleSetDefinition(RuleSet value);
    protected virtual bool ApplyTo(Activity rootActivity);
}
public class System.Workflow.Activities.Rules.Rule : object {
    internal string name;
    internal string description;
    internal int priority;
    internal RuleReevaluationBehavior behavior;
    internal bool active;
    internal RuleCondition condition;
    internal IList`1<RuleAction> thenActions;
    internal IList`1<RuleAction> elseActions;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public int Priority { get; public set; }
    public RuleReevaluationBehavior ReevaluationBehavior { get; public set; }
    public bool Active { get; public set; }
    public RuleCondition Condition { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public IList`1<RuleAction> ThenActions { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public IList`1<RuleAction> ElseActions { get; }
    public Rule(string name);
    public Rule(string name, RuleCondition condition, IList`1<RuleAction> thenActions);
    public Rule(string name, RuleCondition condition, IList`1<RuleAction> thenActions, IList`1<RuleAction> elseActions);
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public int get_Priority();
    public void set_Priority(int value);
    public RuleReevaluationBehavior get_ReevaluationBehavior();
    public void set_ReevaluationBehavior(RuleReevaluationBehavior value);
    public bool get_Active();
    public void set_Active(bool value);
    public RuleCondition get_Condition();
    public void set_Condition(RuleCondition value);
    public IList`1<RuleAction> get_ThenActions();
    public IList`1<RuleAction> get_ElseActions();
    internal void Validate(RuleValidation validation);
    public Rule Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void OnRuntimeInitialized();
}
public abstract class System.Workflow.Activities.Rules.RuleAction : object {
    public abstract virtual bool Validate(RuleValidation validator);
    public abstract virtual void Execute(RuleExecution context);
    public abstract virtual ICollection`1<string> GetSideEffects(RuleValidation validation);
    public abstract virtual RuleAction Clone();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.Rules.RuleActionTrackingEvent : object {
    public string RuleName { get; }
    public bool ConditionResult { get; }
    internal RuleActionTrackingEvent(string ruleName, bool conditionResult);
    public string get_RuleName();
    public bool get_ConditionResult();
}
public class System.Workflow.Activities.Rules.RuleAnalysis : object {
    internal RuleValidation Validation { get; }
    public bool ForWrites { get; }
    public RuleAnalysis(RuleValidation validation, bool forWrites);
    internal RuleValidation get_Validation();
    public bool get_ForWrites();
    public void AddSymbol(string symbol);
    [SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
public ICollection`1<string> GetSymbols();
    internal void AnalyzeRuleAttributes(MemberInfo member, CodeExpression targetExpr, RulePathQualifier targetQualifier, CodeExpressionCollection argExprs, ParameterInfo[] parameters, List`1<CodeExpression> attributedExprs);
}
internal class System.Workflow.Activities.Rules.RuleArrayElementResult : RuleExpressionResult {
    public object Value { get; public set; }
    public RuleArrayElementResult(Array targetArray, Int64[] indexerArguments);
    public virtual object get_Value();
    public virtual void set_Value(object value);
}
public abstract class System.Workflow.Activities.Rules.RuleAttribute : Attribute {
    internal abstract virtual bool Validate(RuleValidation validation, MemberInfo member, Type contextType, ParameterInfo[] parameters);
    internal abstract virtual void Analyze(RuleAnalysis analysis, MemberInfo member, CodeExpression targetExpression, RulePathQualifier targetQualifier, CodeExpressionCollection argumentExpressions, ParameterInfo[] parameters, List`1<CodeExpression> attributedExpressions);
}
public enum System.Workflow.Activities.Rules.RuleAttributeTarget : Enum {
    public int value__;
    public static RuleAttributeTarget Parameter;
    public static RuleAttributeTarget This;
}
internal class System.Workflow.Activities.Rules.RuleBinaryExpressionInfo : RuleExpressionInfo {
    internal Type LeftType { get; }
    internal Type RightType { get; }
    internal MethodInfo MethodInfo { get; }
    internal RuleBinaryExpressionInfo(Type lhsType, Type rhsType, Type resultType);
    internal RuleBinaryExpressionInfo(Type lhsType, Type rhsType, MethodInfo mi);
    internal Type get_LeftType();
    internal Type get_RightType();
    internal MethodInfo get_MethodInfo();
}
public enum System.Workflow.Activities.Rules.RuleChainingBehavior : Enum {
    public int value__;
    public static RuleChainingBehavior None;
    public static RuleChainingBehavior UpdateOnly;
    public static RuleChainingBehavior Full;
}
internal abstract class System.Workflow.Activities.Rules.RuleCodeDomStatement : object {
    internal abstract virtual bool Validate(RuleValidation validation);
    internal abstract virtual void Execute(RuleExecution execution);
    internal abstract virtual void AnalyzeUsage(RuleAnalysis analysis);
    internal abstract virtual void Decompile(StringBuilder decompilation);
    internal abstract virtual bool Match(CodeStatement expression);
    internal abstract virtual CodeStatement Clone();
}
public abstract class System.Workflow.Activities.Rules.RuleCondition : object {
    public string Name { get; public set; }
    public abstract virtual bool Validate(RuleValidation validation);
    public abstract virtual bool Evaluate(RuleExecution execution);
    public abstract virtual ICollection`1<string> GetDependencies(RuleValidation validation);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public virtual void OnRuntimeInitialized();
    public abstract virtual RuleCondition Clone();
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
public abstract class System.Workflow.Activities.Rules.RuleConditionChangeAction : WorkflowChangeAction {
    public string ConditionName { get; }
    public abstract virtual string get_ConditionName();
    protected virtual ValidationErrorCollection ValidateChanges(Activity activity);
}
public class System.Workflow.Activities.Rules.RuleConditionCollection : KeyedCollection`2<string, RuleCondition> {
    internal bool RuntimeMode { get; internal set; }
    protected virtual string GetKeyForItem(RuleCondition item);
    internal void OnRuntimeInitialized();
    protected virtual void InsertItem(int index, RuleCondition item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, RuleCondition item);
    internal void set_RuntimeMode(bool value);
    internal bool get_RuntimeMode();
    public void Add(RuleCondition item);
    public sealed virtual IList`1<WorkflowChangeAction> Diff(object originalDefinition, object changedDefinition);
}
[TypeConverterAttribute("System.Workflow.Activities.Rules.Design.RuleConditionReferenceTypeConverter")]
[ActivityValidatorAttribute("System.Workflow.Activities.Rules.RuleConditionReferenceValidator")]
[SRDisplayNameAttribute("RuleConditionDisplayName")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.Rules.RuleConditionReference : ActivityCondition {
    public string ConditionName { get; public set; }
    public string get_ConditionName();
    public void set_ConditionName(string value);
    public virtual bool Evaluate(Activity activity, IServiceProvider provider);
    protected virtual void InitializeProperties();
}
internal class System.Workflow.Activities.Rules.RuleConditionReferenceValidator : ConditionValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal class System.Workflow.Activities.Rules.RuleConstructorExpressionInfo : RuleExpressionInfo {
    internal ConstructorInfo ConstructorInfo { get; }
    internal bool NeedsParamsExpansion { get; }
    internal RuleConstructorExpressionInfo(ConstructorInfo ci, bool needsParamsExpansion);
    internal ConstructorInfo get_ConstructorInfo();
    internal bool get_NeedsParamsExpansion();
}
internal static class System.Workflow.Activities.Rules.RuleDecompiler : object {
    private static RuleDecompiler();
    internal static void DecompileObjectLiteral(StringBuilder decompilation, object primitiveValue);
    internal static string DecompileType(Type type);
    internal static void DecompileType(StringBuilder decompilation, CodeTypeReference typeRef);
    internal static string DecompileMethod(MethodInfo method);
    internal static bool MustParenthesize(CodeExpression childExpr, CodeExpression parentExpr);
}
public class System.Workflow.Activities.Rules.RuleDefinitions : object {
    [SuppressMessageAttribute("Microsoft.Security", "CA2104:DoNotDeclareReadOnlyMutableReferenceTypes")]
public static DependencyProperty RuleDefinitionsProperty;
    [DesignerSerializationVisibilityAttribute("2")]
public RuleConditionCollection Conditions { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public RuleSetCollection RuleSets { get; }
    private static RuleDefinitions();
    public RuleConditionCollection get_Conditions();
    public RuleSetCollection get_RuleSets();
    internal static object OnGetRuleConditions(DependencyObject dependencyObject);
    internal void OnRuntimeInitialized();
    public sealed virtual IList`1<WorkflowChangeAction> Diff(object originalDefinition, object changedDefinition);
    internal RuleDefinitions Clone();
}
public class System.Workflow.Activities.Rules.RuleEngine : object {
    public RuleEngine(RuleSet ruleSet, RuleValidation validation);
    public RuleEngine(RuleSet ruleSet, Type objectType);
    internal RuleEngine(RuleSet ruleSet, RuleValidation validation, ActivityExecutionContext executionContext);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1720:AvoidTypeNamesInParameters")]
public void Execute(object thisObject, ActivityExecutionContext executionContext);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1720:AvoidTypeNamesInParameters")]
public void Execute(object thisObject);
    internal void Execute(RuleExecution ruleExecution);
}
public class System.Workflow.Activities.Rules.RuleEvaluationException : RuleException {
    public RuleEvaluationException(string message);
    public RuleEvaluationException(string message, Exception ex);
    protected RuleEvaluationException(SerializationInfo serializeInfo, StreamingContext context);
}
public class System.Workflow.Activities.Rules.RuleEvaluationIncompatibleTypesException : RuleException {
    public Type Left { get; public set; }
    public CodeBinaryOperatorType Operator { get; public set; }
    public Type Right { get; public set; }
    public RuleEvaluationIncompatibleTypesException(string message);
    public RuleEvaluationIncompatibleTypesException(string message, Exception ex);
    public RuleEvaluationIncompatibleTypesException(string message, Type left, CodeBinaryOperatorType op, Type right);
    public RuleEvaluationIncompatibleTypesException(string message, Type left, CodeBinaryOperatorType op, Type right, Exception ex);
    protected RuleEvaluationIncompatibleTypesException(SerializationInfo serializeInfo, StreamingContext context);
    public Type get_Left();
    public void set_Left(Type value);
    public CodeBinaryOperatorType get_Operator();
    public void set_Operator(CodeBinaryOperatorType value);
    public Type get_Right();
    public void set_Right(Type value);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Workflow.Activities.Rules.RuleException : Exception {
    public RuleException(string message);
    public RuleException(string message, Exception ex);
    protected RuleException(SerializationInfo serializeInfo, StreamingContext context);
}
public class System.Workflow.Activities.Rules.RuleExecution : object {
    public object ThisObject { get; }
    public Activity Activity { get; }
    public RuleValidation Validation { get; public set; }
    public bool Halted { get; public set; }
    public ActivityExecutionContext ActivityExecutionContext { get; }
    internal RuleLiteralResult ThisLiteralResult { get; }
    [SuppressMessageAttribute("Microsoft.Naming", "CA1720:AvoidTypeNamesInParameters")]
public RuleExecution(RuleValidation validation, object thisObject);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1720:AvoidTypeNamesInParameters")]
public RuleExecution(RuleValidation validation, object thisObject, ActivityExecutionContext activityExecutionContext);
    public object get_ThisObject();
    public Activity get_Activity();
    public RuleValidation get_Validation();
    public void set_Validation(RuleValidation value);
    public bool get_Halted();
    public void set_Halted(bool value);
    public ActivityExecutionContext get_ActivityExecutionContext();
    internal RuleLiteralResult get_ThisLiteralResult();
}
public class System.Workflow.Activities.Rules.RuleExpressionCondition : RuleCondition {
    public string Name { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public CodeExpression Expression { get; public set; }
    public RuleExpressionCondition(string conditionName);
    public RuleExpressionCondition(string conditionName, CodeExpression expression);
    public RuleExpressionCondition(CodeExpression expression);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public CodeExpression get_Expression();
    public void set_Expression(CodeExpression value);
    public virtual void OnRuntimeInitialized();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual bool Validate(RuleValidation validation);
    public virtual bool Evaluate(RuleExecution execution);
    public virtual ICollection`1<string> GetDependencies(RuleValidation validation);
    public virtual RuleCondition Clone();
}
public class System.Workflow.Activities.Rules.RuleExpressionInfo : object {
    public Type ExpressionType { get; }
    public RuleExpressionInfo(Type expressionType);
    public Type get_ExpressionType();
}
internal abstract class System.Workflow.Activities.Rules.RuleExpressionInternal : object {
    internal abstract virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal abstract virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal abstract virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal abstract virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal abstract virtual bool Match(CodeExpression leftExpression, CodeExpression rightExpression);
    internal abstract virtual CodeExpression Clone(CodeExpression expression);
}
public abstract class System.Workflow.Activities.Rules.RuleExpressionResult : object {
    public object Value { get; public set; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
public static class System.Workflow.Activities.Rules.RuleExpressionWalker : object {
    private static RuleExpressionWalker();
    public static RuleExpressionInfo Validate(RuleValidation validation, CodeExpression expression, bool isWritten);
    public static void AnalyzeUsage(RuleAnalysis analysis, CodeExpression expression, bool isRead, bool isWritten, RulePathQualifier qualifier);
    public static RuleExpressionResult Evaluate(RuleExecution execution, CodeExpression expression);
    [SuppressMessageAttribute("Microsoft.Naming", "CA1720:AvoidTypeNamesInParameters")]
public static void Decompile(StringBuilder stringBuilder, CodeExpression expression, CodeExpression parentExpression);
    [SuppressMessageAttribute("Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods")]
public static bool Match(CodeExpression firstExpression, CodeExpression secondExpression);
    public static CodeExpression Clone(CodeExpression originalExpression);
}
internal class System.Workflow.Activities.Rules.RuleFieldExpressionInfo : RuleExpressionInfo {
    internal FieldInfo FieldInfo { get; }
    internal RuleFieldExpressionInfo(FieldInfo fi);
    internal FieldInfo get_FieldInfo();
}
internal class System.Workflow.Activities.Rules.RuleFieldResult : RuleExpressionResult {
    public object Value { get; public set; }
    public RuleFieldResult(object targetObject, FieldInfo fieldInfo);
    public virtual object get_Value();
    public virtual void set_Value(object value);
}
public class System.Workflow.Activities.Rules.RuleHaltAction : RuleAction {
    public virtual bool Validate(RuleValidation validator);
    public virtual void Execute(RuleExecution context);
    public virtual ICollection`1<string> GetSideEffects(RuleValidation validation);
    public virtual RuleAction Clone();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("192")]
public class System.Workflow.Activities.Rules.RuleInvokeAttribute : RuleAttribute {
    public string MethodInvoked { get; }
    public RuleInvokeAttribute(string methodInvoked);
    public string get_MethodInvoked();
    internal virtual bool Validate(RuleValidation validation, MemberInfo member, Type contextType, ParameterInfo[] parameters);
    internal virtual void Analyze(RuleAnalysis analysis, MemberInfo member, CodeExpression targetExpression, RulePathQualifier targetQualifier, CodeExpressionCollection argumentExpressions, ParameterInfo[] parameters, List`1<CodeExpression> attributedExpressions);
}
public class System.Workflow.Activities.Rules.RuleLiteralResult : RuleExpressionResult {
    public object Value { get; public set; }
    public RuleLiteralResult(object literal);
    public virtual object get_Value();
    public virtual void set_Value(object value);
}
internal class System.Workflow.Activities.Rules.RuleMethodInvokeExpressionInfo : RuleExpressionInfo {
    internal MethodInfo MethodInfo { get; }
    internal bool NeedsParamsExpansion { get; }
    internal RuleMethodInvokeExpressionInfo(MethodInfo mi, bool needsParamsExpansion);
    internal MethodInfo get_MethodInfo();
    internal bool get_NeedsParamsExpansion();
}
public class System.Workflow.Activities.Rules.RulePathQualifier : object {
    public string Name { get; }
    public RulePathQualifier Next { get; }
    public RulePathQualifier(string name, RulePathQualifier next);
    public string get_Name();
    public RulePathQualifier get_Next();
}
internal class System.Workflow.Activities.Rules.RulePropertyExpressionInfo : RuleExpressionInfo {
    internal PropertyInfo PropertyInfo { get; }
    internal bool NeedsParamsExpansion { get; }
    internal RulePropertyExpressionInfo(PropertyInfo pi, Type exprType, bool needsParamsExpansion);
    internal PropertyInfo get_PropertyInfo();
    internal bool get_NeedsParamsExpansion();
}
internal class System.Workflow.Activities.Rules.RulePropertyResult : RuleExpressionResult {
    public object Value { get; public set; }
    public RulePropertyResult(PropertyInfo propertyInfo, object targetObject, Object[] indexerArguments);
    public virtual object get_Value();
    public virtual void set_Value(object value);
}
[AttributeUsageAttribute("192")]
public class System.Workflow.Activities.Rules.RuleReadAttribute : RuleReadWriteAttribute {
    public RuleReadAttribute(string path, RuleAttributeTarget target);
    public RuleReadAttribute(string path);
    internal virtual void Analyze(RuleAnalysis analysis, MemberInfo member, CodeExpression targetExpression, RulePathQualifier targetQualifier, CodeExpressionCollection argumentExpressions, ParameterInfo[] parameters, List`1<CodeExpression> attributedExpressions);
}
public abstract class System.Workflow.Activities.Rules.RuleReadWriteAttribute : RuleAttribute {
    public string Path { get; }
    public RuleAttributeTarget Target { get; }
    protected RuleReadWriteAttribute(string path, RuleAttributeTarget target);
    public string get_Path();
    public RuleAttributeTarget get_Target();
    internal virtual bool Validate(RuleValidation validation, MemberInfo member, Type contextType, ParameterInfo[] parameters);
    internal void AnalyzeReadWrite(RuleAnalysis analysis, CodeExpression targetExpression, RulePathQualifier targetQualifier, CodeExpressionCollection argumentExpressions, ParameterInfo[] parameters, List`1<CodeExpression> attributedExpressions);
}
public enum System.Workflow.Activities.Rules.RuleReevaluationBehavior : Enum {
    public int value__;
    public static RuleReevaluationBehavior Never;
    public static RuleReevaluationBehavior Always;
}
public class System.Workflow.Activities.Rules.RuleSet : object {
    internal static string RuleSetTrackingKey;
    internal string name;
    internal string description;
    internal List`1<Rule> rules;
    internal RuleChainingBehavior behavior;
    public string Name { get; public set; }
    public string Description { get; public set; }
    public RuleChainingBehavior ChainingBehavior { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public ICollection`1<Rule> Rules { get; }
    public RuleSet(string name);
    public RuleSet(string name, string description);
    public string get_Name();
    public void set_Name(string value);
    public string get_Description();
    public void set_Description(string value);
    public RuleChainingBehavior get_ChainingBehavior();
    public void set_ChainingBehavior(RuleChainingBehavior value);
    public ICollection`1<Rule> get_Rules();
    public bool Validate(RuleValidation validation);
    public void Execute(RuleExecution ruleExecution);
    internal void Execute(Activity activity, ActivityExecutionContext executionContext);
    public RuleSet Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal void OnRuntimeInitialized();
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
public abstract class System.Workflow.Activities.Rules.RuleSetChangeAction : WorkflowChangeAction {
    public string RuleSetName { get; }
    public abstract virtual string get_RuleSetName();
    protected virtual ValidationErrorCollection ValidateChanges(Activity activity);
}
public class System.Workflow.Activities.Rules.RuleSetCollection : KeyedCollection`2<string, RuleSet> {
    internal bool RuntimeMode { get; internal set; }
    protected virtual string GetKeyForItem(RuleSet item);
    protected virtual void InsertItem(int index, RuleSet item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, RuleSet item);
    public void Add(RuleSet item);
    internal void OnRuntimeInitialized();
    internal void set_RuntimeMode(bool value);
    internal bool get_RuntimeMode();
    internal string GenerateRuleSetName();
    public sealed virtual IList`1<WorkflowChangeAction> Diff(object originalDefinition, object changedDefinition);
}
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[DesignerSerializerAttribute("System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer", "System.ComponentModel.Design.Serialization.CodeDomSerializer")]
[ActivityValidatorAttribute("System.Workflow.Activities.Rules.RuleSetReferenceValidator")]
[EditorAttribute("System.Workflow.Activities.Rules.Design.RuleSetNameEditor", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Workflow.Activities.Rules.Design.RuleSetReferenceTypeConverter")]
[BrowsableAttribute("True")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.Rules.RuleSetReference : DependencyObject {
    public string RuleSetName { get; public set; }
    public RuleSetReference(string ruleSetName);
    public string get_RuleSetName();
    public void set_RuleSetName(string value);
    protected virtual void InitializeProperties();
}
internal class System.Workflow.Activities.Rules.RuleSetReferenceValidator : Validator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
public class System.Workflow.Activities.Rules.RuleSetValidationException : RuleException {
    public ValidationErrorCollection Errors { get; }
    public RuleSetValidationException(string message);
    public RuleSetValidationException(string message, Exception ex);
    public RuleSetValidationException(string message, ValidationErrorCollection errors);
    protected RuleSetValidationException(SerializationInfo serializeInfo, StreamingContext context);
    public ValidationErrorCollection get_Errors();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class System.Workflow.Activities.Rules.RuleState : object {
    internal Rule Rule;
    internal ICollection`1<int> ThenActionsActiveRules { get; internal set; }
    internal ICollection`1<int> ElseActionsActiveRules { get; internal set; }
    internal RuleState(Rule rule);
    internal ICollection`1<int> get_ThenActionsActiveRules();
    internal void set_ThenActionsActiveRules(ICollection`1<int> value);
    internal ICollection`1<int> get_ElseActionsActiveRules();
    internal void set_ElseActionsActiveRules(ICollection`1<int> value);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
}
public class System.Workflow.Activities.Rules.RuleStatementAction : RuleAction {
    public CodeStatement CodeDomStatement { get; public set; }
    public RuleStatementAction(CodeStatement codeDomStatement);
    public RuleStatementAction(CodeExpression codeDomExpression);
    public CodeStatement get_CodeDomStatement();
    public void set_CodeDomStatement(CodeStatement value);
    public virtual bool Validate(RuleValidation validator);
    public virtual void Execute(RuleExecution context);
    public virtual ICollection`1<string> GetSideEffects(RuleValidation validation);
    public virtual RuleAction Clone();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[SuppressMessageAttribute("Microsoft.Design", "CA1064:ExceptionsShouldBePublic")]
internal class System.Workflow.Activities.Rules.RuleSyntaxException : SystemException {
    internal int Position { get; }
    internal int ErrorNumber { get; }
    internal RuleSyntaxException(int errorNumber, string message, int position);
    private RuleSyntaxException(SerializationInfo serializeInfo, StreamingContext context);
    internal int get_Position();
    internal int get_ErrorNumber();
}
public class System.Workflow.Activities.Rules.RuleUpdateAction : RuleAction {
    public string Path { get; public set; }
    public RuleUpdateAction(string path);
    public string get_Path();
    public void set_Path(string value);
    public virtual bool Validate(RuleValidation validator);
    public virtual void Execute(RuleExecution context);
    public virtual ICollection`1<string> GetSideEffects(RuleValidation validation);
    public virtual RuleAction Clone();
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal static class System.Workflow.Activities.Rules.RuleUserDataKeys : object {
    internal static string ErrorObject;
    internal static string QualifiedName;
}
public class System.Workflow.Activities.Rules.RuleValidation : object {
    public Type ThisType { get; }
    public ValidationErrorCollection Errors { get; }
    internal List`1<ExtensionMethodInfo> ExtensionMethods { get; }
    public RuleValidation(Activity activity, ITypeProvider typeProvider, bool checkStaticType);
    internal RuleValidation(object thisObject);
    public RuleValidation(Type thisType, ITypeProvider typeProvider);
    private static RuleValidation();
    internal bool ValidateConditionExpression(CodeExpression expression);
    internal static bool IsValidBooleanResult(Type type);
    internal static bool IsPrivate(MethodInfo methodInfo);
    internal static bool IsPrivate(FieldInfo fieldInfo);
    internal static bool IsInternal(MethodInfo methodInfo);
    internal static bool IsInternal(FieldInfo fieldInfo);
    public Type get_ThisType();
    internal ITypeProvider GetTypeProvider();
    public ValidationErrorCollection get_Errors();
    internal bool AllowInternalMembers(Type type);
    internal void AddError(ValidationError error);
    public bool PushParentExpression(CodeExpression newParent);
    public void PopParentExpression();
    public RuleExpressionInfo ExpressionInfo(CodeExpression expression);
    internal RuleExpressionInfo ValidateSubexpression(CodeExpression expr, RuleExpressionInternal ruleExpr, bool isWritten);
    internal static bool TypesAreAssignable(Type rhsType, Type lhsType, CodeExpression rhsExpression, ValidationError& error);
    internal static bool ExplicitConversionSpecified(Type fromType, Type toType, ValidationError& error);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal static MethodInfo FindImplicitConversion(Type fromType, Type toType, ValidationError& error);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal static MethodInfo FindExplicitConversion(Type fromType, Type toType, ValidationError& error);
    internal static bool ImplicitConversion(Type fromType, Type toType);
    [SuppressMessageAttribute("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
internal static bool StandardImplicitConversion(Type rhsType, Type lhsType, CodeExpression rhsExpression, ValidationError& error);
    internal bool ValidateMemberAccess(CodeExpression targetExpression, Type targetType, FieldInfo accessorMethod, string memberName, CodeExpression parentExpr);
    internal bool ValidateMemberAccess(CodeExpression targetExpression, Type targetType, MethodInfo accessorMethod, string memberName, CodeExpression parentExpr);
    internal MemberInfo ResolveFieldOrProperty(Type targetType, string name);
    internal PropertyInfo ResolveProperty(Type targetType, string propertyName, BindingFlags bindingFlags);
    internal MethodInfo FindBestCandidate(Type targetType, List`1<MethodInfo> methods, Type[] types);
    internal RuleConstructorExpressionInfo ResolveConstructor(Type targetType, BindingFlags constructorBindingFlags, List`1<CodeExpression> argumentExprs, ValidationError& error);
    internal RuleMethodInvokeExpressionInfo ResolveMethod(Type targetType, string methodName, BindingFlags methodBindingFlags, List`1<CodeExpression> argumentExprs, ValidationError& error);
    internal static List`1<ConstructorInfo> GetConstructors(List`1<Type> targetTypes, BindingFlags constructorBindingFlags);
    internal List`1<ExtensionMethodInfo> get_ExtensionMethods();
    internal void DetermineExtensionMethods(Assembly assembly);
    internal RulePropertyExpressionInfo ResolveIndexerProperty(Type targetType, BindingFlags bindingFlags, List`1<CodeExpression> argumentExprs, ValidationError& error);
    internal void AddTypeReference(CodeTypeReference typeRef, Type type);
    internal Type ResolveType(CodeTypeReference typeRef);
    internal Type ResolveType(string qualifiedName);
    internal void IsAuthorized(Type type);
}
[AttributeUsageAttribute("192")]
public class System.Workflow.Activities.Rules.RuleWriteAttribute : RuleReadWriteAttribute {
    public RuleWriteAttribute(string path, RuleAttributeTarget target);
    public RuleWriteAttribute(string path);
    internal virtual void Analyze(RuleAnalysis analysis, MemberInfo member, CodeExpression targetExpression, RulePathQualifier targetQualifier, CodeExpressionCollection argumentExpressions, ParameterInfo[] parameters, List`1<CodeExpression> attributedExpressions);
}
internal class System.Workflow.Activities.Rules.SByteLiteral : Literal {
    internal object Value { get; }
    internal SByteLiteral(sbyte literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(float rhs);
    internal virtual bool Equal(double rhs);
    internal virtual bool Equal(decimal rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(sbyte rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(short rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(float rhs);
    internal virtual bool LessThan(double rhs);
    internal virtual bool LessThan(decimal rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(sbyte rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(short rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(float rhs);
    internal virtual bool GreaterThan(double rhs);
    internal virtual bool GreaterThan(decimal rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(sbyte rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(short rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(float rhs);
    internal virtual bool LessThanOrEqual(double rhs);
    internal virtual bool LessThanOrEqual(decimal rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(sbyte rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(short rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(float rhs);
    internal virtual bool GreaterThanOrEqual(double rhs);
    internal virtual bool GreaterThanOrEqual(decimal rhs);
}
internal class System.Workflow.Activities.Rules.Scanner : object {
    internal Scanner(string inputString);
    private static Scanner();
    internal static void AddKeywordsStartingWith(char upperFirstCharacter, ArrayList list);
    internal void Tokenize(List`1<Token> tokenList);
    internal void TokenizeForIntellisense(List`1<Token> tokenList);
}
internal class System.Workflow.Activities.Rules.ShortLiteral : Literal {
    internal object Value { get; }
    internal ShortLiteral(short literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(float rhs);
    internal virtual bool Equal(double rhs);
    internal virtual bool Equal(decimal rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(sbyte rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(short rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(float rhs);
    internal virtual bool LessThan(double rhs);
    internal virtual bool LessThan(decimal rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(sbyte rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(short rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(float rhs);
    internal virtual bool GreaterThan(double rhs);
    internal virtual bool GreaterThan(decimal rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(sbyte rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(short rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(float rhs);
    internal virtual bool LessThanOrEqual(double rhs);
    internal virtual bool LessThanOrEqual(decimal rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(sbyte rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(short rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(float rhs);
    internal virtual bool GreaterThanOrEqual(double rhs);
    internal virtual bool GreaterThanOrEqual(decimal rhs);
}
internal class System.Workflow.Activities.Rules.SimpleParameterInfo : ParameterInfo {
    public Type ParameterType { get; }
    public SimpleParameterInfo(ParameterInfo parameter);
    public SimpleParameterInfo(Type parameter);
    public virtual Type get_ParameterType();
}
internal class System.Workflow.Activities.Rules.SimpleRunTimeTypeProvider : object {
    public Assembly LocalAssembly { get; }
    public ICollection`1<Assembly> ReferencedAssemblies { get; }
    public IDictionary`2<object, Exception> TypeLoadErrors { get; }
    internal SimpleRunTimeTypeProvider(Assembly startingAssembly);
    public sealed virtual Type GetType(string name);
    public sealed virtual Type GetType(string name, bool throwOnError);
    public sealed virtual Type[] GetTypes();
    public sealed virtual Assembly get_LocalAssembly();
    public sealed virtual ICollection`1<Assembly> get_ReferencedAssemblies();
    public sealed virtual IDictionary`2<object, Exception> get_TypeLoadErrors();
    [CompilerGeneratedAttribute]
public sealed virtual void add_TypesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TypesChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TypeLoadErrorsChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TypeLoadErrorsChanged(EventHandler value);
}
internal class System.Workflow.Activities.Rules.StringArithmeticLiteral : ArithmeticLiteral {
    internal object Value { get; }
    internal StringArithmeticLiteral(string literalValue);
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(int v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(long v);
    internal virtual object Add(ulong v);
    internal virtual object Add(float v);
    internal virtual object Add(double v);
    internal virtual object Add(decimal v);
    internal virtual object Add(bool v);
    internal virtual object Add(string v);
}
internal class System.Workflow.Activities.Rules.StringLiteral : Literal {
    internal object Value { get; }
    internal StringLiteral(string internalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(string rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(string rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan();
    internal virtual bool GreaterThan(string rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(string rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual();
    internal virtual bool GreaterThanOrEqual(string rhs);
}
internal abstract class System.Workflow.Activities.Rules.Symbol : object {
    internal string Name { get; }
    internal abstract virtual string get_Name();
    internal abstract virtual CodeExpression ParseRootIdentifier(Parser parser, ParserContext parserContext, bool assignIsEquality);
    internal abstract virtual void RecordSymbol(ArrayList list);
}
internal class System.Workflow.Activities.Rules.ThisExpression : RuleExpressionInternal {
    internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
}
internal class System.Workflow.Activities.Rules.Token : object {
    internal TokenID TokenID;
    internal int StartPosition;
    internal object Value;
    internal Token(TokenID tokenID, int position, object value);
}
internal enum System.Workflow.Activities.Rules.TokenID : Enum {
    public int value__;
    public static TokenID Unknown;
    public static TokenID Identifier;
    public static TokenID Dot;
    public static TokenID Comma;
    public static TokenID LParen;
    public static TokenID RParen;
    public static TokenID Plus;
    public static TokenID Minus;
    public static TokenID Divide;
    public static TokenID Multiply;
    public static TokenID Modulus;
    public static TokenID BitAnd;
    public static TokenID BitOr;
    public static TokenID And;
    public static TokenID Or;
    public static TokenID Not;
    public static TokenID Equal;
    public static TokenID NotEqual;
    public static TokenID Less;
    public static TokenID LessEqual;
    public static TokenID Greater;
    public static TokenID GreaterEqual;
    public static TokenID StringLiteral;
    public static TokenID CharacterLiteral;
    public static TokenID IntegerLiteral;
    public static TokenID DecimalLiteral;
    public static TokenID FloatLiteral;
    public static TokenID True;
    public static TokenID False;
    public static TokenID Null;
    public static TokenID This;
    public static TokenID In;
    public static TokenID Out;
    public static TokenID Ref;
    public static TokenID Assign;
    public static TokenID TypeName;
    public static TokenID Update;
    public static TokenID Halt;
    public static TokenID Semicolon;
    public static TokenID LBracket;
    public static TokenID RBracket;
    public static TokenID LCurlyBrace;
    public static TokenID RCurlyBrace;
    public static TokenID New;
    public static TokenID Illegal;
    public static TokenID EndOfInput;
}
internal class System.Workflow.Activities.Rules.Tracer : object {
    internal Tracer(string name, ActivityExecutionContext activityExecutionContext);
    private static Tracer();
    internal void StartRuleSet();
    internal void StartRule(string ruleName);
    internal void RuleResult(string ruleName, bool result);
    internal void StartActions(string ruleName, bool result);
    internal void TraceUpdate(string ruleName, string otherName);
    internal void TraceConditionSymbols(string ruleName, ICollection`1<string> symbols);
    internal void TraceThenSymbols(string ruleName, ICollection`1<string> symbols);
    internal void TraceElseSymbols(string ruleName, ICollection`1<string> symbols);
    internal void TraceThenTriggers(string currentRuleName, ICollection`1<int> triggeredRules, List`1<RuleState> ruleStates);
    internal void TraceElseTriggers(string currentRuleName, ICollection`1<int> triggeredRules, List`1<RuleState> ruleStates);
}
internal class System.Workflow.Activities.Rules.TypeReferenceExpression : RuleExpressionInternal {
    internal virtual RuleExpressionInfo Validate(CodeExpression expression, RuleValidation validation, bool isWritten);
    internal virtual void AnalyzeUsage(CodeExpression expression, RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier);
    internal virtual RuleExpressionResult Evaluate(CodeExpression expression, RuleExecution execution);
    internal virtual void Decompile(CodeExpression expression, StringBuilder stringBuilder, CodeExpression parentExpression);
    internal virtual CodeExpression Clone(CodeExpression expression);
    internal static CodeTypeReference CloneType(CodeTypeReference oldType);
    internal virtual bool Match(CodeExpression expression, CodeExpression comperand);
    internal static bool MatchType(CodeTypeReference typeRef1, CodeTypeReference typeRef2);
}
internal class System.Workflow.Activities.Rules.TypeSymbol : TypeSymbolBase {
    internal Type Type;
    internal int GenericArgCount;
    internal string Name { get; }
    internal TypeSymbol(Type type);
    internal virtual string get_Name();
    internal virtual OverloadedTypeSymbol OverloadType(TypeSymbolBase newTypeSymBase);
    internal bool CanOverload(TypeSymbol typeSym);
    internal virtual CodeExpression ParseRootIdentifier(Parser parser, ParserContext parserContext, bool assignIsEquality);
    internal virtual void RecordSymbol(ArrayList list);
}
internal abstract class System.Workflow.Activities.Rules.TypeSymbolBase : Symbol {
    internal abstract virtual OverloadedTypeSymbol OverloadType(TypeSymbolBase typeSymBase);
}
internal class System.Workflow.Activities.Rules.UIntArithmeticLiteral : ArithmeticLiteral {
    internal object Value { get; }
    internal UIntArithmeticLiteral(UInt32 literalValue);
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(int v);
    internal virtual object Add(long v);
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(ulong v);
    internal virtual object Add(float v);
    internal virtual object Add(double v);
    internal virtual object Add(decimal v);
    internal virtual object Add(string v);
    internal virtual object Subtract(ArithmeticLiteral v);
    internal virtual object Subtract();
    internal virtual object Subtract(int v);
    internal virtual object Subtract(long v);
    internal virtual object Subtract(ushort v);
    internal virtual object Subtract(UInt32 v);
    internal virtual object Subtract(ulong v);
    internal virtual object Subtract(float v);
    internal virtual object Subtract(double v);
    internal virtual object Subtract(decimal v);
    internal virtual object Multiply(ArithmeticLiteral v);
    internal virtual object Multiply();
    internal virtual object Multiply(int v);
    internal virtual object Multiply(long v);
    internal virtual object Multiply(ushort v);
    internal virtual object Multiply(UInt32 v);
    internal virtual object Multiply(ulong v);
    internal virtual object Multiply(float v);
    internal virtual object Multiply(double v);
    internal virtual object Multiply(decimal v);
    internal virtual object Divide(ArithmeticLiteral v);
    internal virtual object Divide();
    internal virtual object Divide(int v);
    internal virtual object Divide(long v);
    internal virtual object Divide(ushort v);
    internal virtual object Divide(UInt32 v);
    internal virtual object Divide(ulong v);
    internal virtual object Divide(float v);
    internal virtual object Divide(double v);
    internal virtual object Divide(decimal v);
    internal virtual object Modulus(ArithmeticLiteral v);
    internal virtual object Modulus();
    internal virtual object Modulus(int v);
    internal virtual object Modulus(long v);
    internal virtual object Modulus(ushort v);
    internal virtual object Modulus(UInt32 v);
    internal virtual object Modulus(ulong v);
    internal virtual object Modulus(float v);
    internal virtual object Modulus(double v);
    internal virtual object Modulus(decimal v);
    internal virtual object BitAnd(ArithmeticLiteral v);
    internal virtual object BitAnd();
    internal virtual object BitAnd(int v);
    internal virtual object BitAnd(long v);
    internal virtual object BitAnd(ushort v);
    internal virtual object BitAnd(UInt32 v);
    internal virtual object BitAnd(ulong v);
    internal virtual object BitOr(ArithmeticLiteral v);
    internal virtual object BitOr();
    internal virtual object BitOr(int v);
    internal virtual object BitOr(long v);
    internal virtual object BitOr(ushort v);
    internal virtual object BitOr(UInt32 v);
    internal virtual object BitOr(ulong v);
}
internal class System.Workflow.Activities.Rules.UIntLiteral : Literal {
    internal object Value { get; }
    internal UIntLiteral(UInt32 literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(float rhs);
    internal virtual bool Equal(double rhs);
    internal virtual bool Equal(decimal rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(sbyte rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(short rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(ulong rhs);
    internal virtual bool LessThan(float rhs);
    internal virtual bool LessThan(double rhs);
    internal virtual bool LessThan(decimal rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(sbyte rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(short rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(ulong rhs);
    internal virtual bool GreaterThan(float rhs);
    internal virtual bool GreaterThan(double rhs);
    internal virtual bool GreaterThan(decimal rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(sbyte rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(short rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(ulong rhs);
    internal virtual bool LessThanOrEqual(float rhs);
    internal virtual bool LessThanOrEqual(double rhs);
    internal virtual bool LessThanOrEqual(decimal rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(sbyte rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(short rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(ulong rhs);
    internal virtual bool GreaterThanOrEqual(float rhs);
    internal virtual bool GreaterThanOrEqual(double rhs);
    internal virtual bool GreaterThanOrEqual(decimal rhs);
}
internal class System.Workflow.Activities.Rules.ULongArithmeticLiteral : ArithmeticLiteral {
    internal object Value { get; }
    internal ULongArithmeticLiteral(ulong literalValue);
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(int v);
    internal virtual object Add(long v);
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(ulong v);
    internal virtual object Add(float v);
    internal virtual object Add(double v);
    internal virtual object Add(decimal v);
    internal virtual object Add(string v);
    internal virtual object Subtract(ArithmeticLiteral v);
    internal virtual object Subtract();
    internal virtual object Subtract(int v);
    internal virtual object Subtract(long v);
    internal virtual object Subtract(ushort v);
    internal virtual object Subtract(UInt32 v);
    internal virtual object Subtract(ulong v);
    internal virtual object Subtract(float v);
    internal virtual object Subtract(double v);
    internal virtual object Subtract(decimal v);
    internal virtual object Multiply(ArithmeticLiteral v);
    internal virtual object Multiply();
    internal virtual object Multiply(int v);
    internal virtual object Multiply(long v);
    internal virtual object Multiply(ushort v);
    internal virtual object Multiply(UInt32 v);
    internal virtual object Multiply(ulong v);
    internal virtual object Multiply(float v);
    internal virtual object Multiply(double v);
    internal virtual object Multiply(decimal v);
    internal virtual object Divide(ArithmeticLiteral v);
    internal virtual object Divide();
    internal virtual object Divide(int v);
    internal virtual object Divide(long v);
    internal virtual object Divide(ushort v);
    internal virtual object Divide(UInt32 v);
    internal virtual object Divide(ulong v);
    internal virtual object Divide(float v);
    internal virtual object Divide(double v);
    internal virtual object Divide(decimal v);
    internal virtual object Modulus(ArithmeticLiteral v);
    internal virtual object Modulus();
    internal virtual object Modulus(int v);
    internal virtual object Modulus(long v);
    internal virtual object Modulus(ushort v);
    internal virtual object Modulus(UInt32 v);
    internal virtual object Modulus(ulong v);
    internal virtual object Modulus(float v);
    internal virtual object Modulus(double v);
    internal virtual object Modulus(decimal v);
    internal virtual object BitAnd(ArithmeticLiteral v);
    internal virtual object BitAnd();
    internal virtual object BitAnd(int v);
    internal virtual object BitAnd(long v);
    internal virtual object BitAnd(ushort v);
    internal virtual object BitAnd(UInt32 v);
    internal virtual object BitAnd(ulong v);
    internal virtual object BitOr(ArithmeticLiteral v);
    internal virtual object BitOr();
    internal virtual object BitOr(int v);
    internal virtual object BitOr(long v);
    internal virtual object BitOr(ushort v);
    internal virtual object BitOr(UInt32 v);
    internal virtual object BitOr(ulong v);
}
internal class System.Workflow.Activities.Rules.ULongLiteral : Literal {
    internal object Value { get; }
    internal ULongLiteral(ulong literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(float rhs);
    internal virtual bool Equal(double rhs);
    internal virtual bool Equal(decimal rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(ulong rhs);
    internal virtual bool LessThan(float rhs);
    internal virtual bool LessThan(double rhs);
    internal virtual bool LessThan(decimal rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(ulong rhs);
    internal virtual bool GreaterThan(float rhs);
    internal virtual bool GreaterThan(double rhs);
    internal virtual bool GreaterThan(decimal rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(ulong rhs);
    internal virtual bool LessThanOrEqual(float rhs);
    internal virtual bool LessThanOrEqual(double rhs);
    internal virtual bool LessThanOrEqual(decimal rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(ulong rhs);
    internal virtual bool GreaterThanOrEqual(float rhs);
    internal virtual bool GreaterThanOrEqual(double rhs);
    internal virtual bool GreaterThanOrEqual(decimal rhs);
}
public class System.Workflow.Activities.Rules.UpdatedConditionAction : RuleConditionChangeAction {
    public string ConditionName { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public RuleCondition ConditionDefinition { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public RuleCondition NewConditionDefinition { get; public set; }
    public UpdatedConditionAction(RuleCondition conditionDefinition, RuleCondition newConditionDefinition);
    public virtual string get_ConditionName();
    public RuleCondition get_ConditionDefinition();
    public void set_ConditionDefinition(RuleCondition value);
    public RuleCondition get_NewConditionDefinition();
    public void set_NewConditionDefinition(RuleCondition value);
    protected virtual bool ApplyTo(Activity rootActivity);
}
public class System.Workflow.Activities.Rules.UpdatedRuleSetAction : RuleSetChangeAction {
    public string RuleSetName { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public RuleSet OriginalRuleSetDefinition { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public RuleSet UpdatedRuleSetDefinition { get; public set; }
    public UpdatedRuleSetAction(RuleSet originalRuleSetDefinition, RuleSet updatedRuleSetDefinition);
    public virtual string get_RuleSetName();
    public RuleSet get_OriginalRuleSetDefinition();
    public void set_OriginalRuleSetDefinition(RuleSet value);
    public RuleSet get_UpdatedRuleSetDefinition();
    public void set_UpdatedRuleSetDefinition(RuleSet value);
    protected virtual bool ApplyTo(Activity rootActivity);
}
internal class System.Workflow.Activities.Rules.UShortArithmeticLiteral : ArithmeticLiteral {
    internal object Value { get; }
    internal UShortArithmeticLiteral(ushort literalValue);
    internal virtual object get_Value();
    internal virtual object Add(ArithmeticLiteral v);
    internal virtual object Add();
    internal virtual object Add(int v);
    internal virtual object Add(long v);
    internal virtual object Add(char v);
    internal virtual object Add(ushort v);
    internal virtual object Add(UInt32 v);
    internal virtual object Add(ulong v);
    internal virtual object Add(float v);
    internal virtual object Add(double v);
    internal virtual object Add(decimal v);
    internal virtual object Add(string v);
    internal virtual object Subtract(ArithmeticLiteral v);
    internal virtual object Subtract();
    internal virtual object Subtract(int v);
    internal virtual object Subtract(long v);
    internal virtual object Subtract(ushort v);
    internal virtual object Subtract(UInt32 v);
    internal virtual object Subtract(ulong v);
    internal virtual object Subtract(float v);
    internal virtual object Subtract(double v);
    internal virtual object Subtract(decimal v);
    internal virtual object Multiply(ArithmeticLiteral v);
    internal virtual object Multiply();
    internal virtual object Multiply(int v);
    internal virtual object Multiply(long v);
    internal virtual object Multiply(ushort v);
    internal virtual object Multiply(UInt32 v);
    internal virtual object Multiply(ulong v);
    internal virtual object Multiply(float v);
    internal virtual object Multiply(double v);
    internal virtual object Multiply(decimal v);
    internal virtual object Divide(ArithmeticLiteral v);
    internal virtual object Divide();
    internal virtual object Divide(int v);
    internal virtual object Divide(long v);
    internal virtual object Divide(ushort v);
    internal virtual object Divide(UInt32 v);
    internal virtual object Divide(ulong v);
    internal virtual object Divide(float v);
    internal virtual object Divide(double v);
    internal virtual object Divide(decimal v);
    internal virtual object Modulus(ArithmeticLiteral v);
    internal virtual object Modulus();
    internal virtual object Modulus(int v);
    internal virtual object Modulus(long v);
    internal virtual object Modulus(ushort v);
    internal virtual object Modulus(UInt32 v);
    internal virtual object Modulus(ulong v);
    internal virtual object Modulus(float v);
    internal virtual object Modulus(double v);
    internal virtual object Modulus(decimal v);
    internal virtual object BitAnd(ArithmeticLiteral v);
    internal virtual object BitAnd();
    internal virtual object BitAnd(int v);
    internal virtual object BitAnd(long v);
    internal virtual object BitAnd(ushort v);
    internal virtual object BitAnd(UInt32 v);
    internal virtual object BitAnd(ulong v);
    internal virtual object BitOr(ArithmeticLiteral v);
    internal virtual object BitOr();
    internal virtual object BitOr(int v);
    internal virtual object BitOr(long v);
    internal virtual object BitOr(ushort v);
    internal virtual object BitOr(UInt32 v);
    internal virtual object BitOr(ulong v);
}
internal class System.Workflow.Activities.Rules.UShortLiteral : Literal {
    internal object Value { get; }
    internal UShortLiteral(ushort literalValue);
    internal virtual object get_Value();
    internal virtual bool Equal(Literal rhs);
    internal virtual bool Equal(sbyte rhs);
    internal virtual bool Equal(byte rhs);
    internal virtual bool Equal(char rhs);
    internal virtual bool Equal(short rhs);
    internal virtual bool Equal(ushort rhs);
    internal virtual bool Equal(int rhs);
    internal virtual bool Equal(UInt32 rhs);
    internal virtual bool Equal(long rhs);
    internal virtual bool Equal(ulong rhs);
    internal virtual bool Equal(float rhs);
    internal virtual bool Equal(double rhs);
    internal virtual bool Equal(decimal rhs);
    internal virtual bool LessThan(Literal rhs);
    internal virtual bool LessThan(sbyte rhs);
    internal virtual bool LessThan(byte rhs);
    internal virtual bool LessThan(char rhs);
    internal virtual bool LessThan(short rhs);
    internal virtual bool LessThan(ushort rhs);
    internal virtual bool LessThan(int rhs);
    internal virtual bool LessThan(UInt32 rhs);
    internal virtual bool LessThan(long rhs);
    internal virtual bool LessThan(ulong rhs);
    internal virtual bool LessThan(float rhs);
    internal virtual bool LessThan(double rhs);
    internal virtual bool LessThan(decimal rhs);
    internal virtual bool GreaterThan(Literal rhs);
    internal virtual bool GreaterThan(sbyte rhs);
    internal virtual bool GreaterThan(byte rhs);
    internal virtual bool GreaterThan(char rhs);
    internal virtual bool GreaterThan(short rhs);
    internal virtual bool GreaterThan(ushort rhs);
    internal virtual bool GreaterThan(int rhs);
    internal virtual bool GreaterThan(UInt32 rhs);
    internal virtual bool GreaterThan(long rhs);
    internal virtual bool GreaterThan(ulong rhs);
    internal virtual bool GreaterThan(float rhs);
    internal virtual bool GreaterThan(double rhs);
    internal virtual bool GreaterThan(decimal rhs);
    internal virtual bool LessThanOrEqual(Literal rhs);
    internal virtual bool LessThanOrEqual(sbyte rhs);
    internal virtual bool LessThanOrEqual(byte rhs);
    internal virtual bool LessThanOrEqual(short rhs);
    internal virtual bool LessThanOrEqual(char rhs);
    internal virtual bool LessThanOrEqual(ushort rhs);
    internal virtual bool LessThanOrEqual(int rhs);
    internal virtual bool LessThanOrEqual(UInt32 rhs);
    internal virtual bool LessThanOrEqual(long rhs);
    internal virtual bool LessThanOrEqual(ulong rhs);
    internal virtual bool LessThanOrEqual(float rhs);
    internal virtual bool LessThanOrEqual(double rhs);
    internal virtual bool LessThanOrEqual(decimal rhs);
    internal virtual bool GreaterThanOrEqual(Literal rhs);
    internal virtual bool GreaterThanOrEqual(sbyte rhs);
    internal virtual bool GreaterThanOrEqual(byte rhs);
    internal virtual bool GreaterThanOrEqual(char rhs);
    internal virtual bool GreaterThanOrEqual(short rhs);
    internal virtual bool GreaterThanOrEqual(ushort rhs);
    internal virtual bool GreaterThanOrEqual(int rhs);
    internal virtual bool GreaterThanOrEqual(UInt32 rhs);
    internal virtual bool GreaterThanOrEqual(long rhs);
    internal virtual bool GreaterThanOrEqual(ulong rhs);
    internal virtual bool GreaterThanOrEqual(float rhs);
    internal virtual bool GreaterThanOrEqual(double rhs);
    internal virtual bool GreaterThanOrEqual(decimal rhs);
}
[SRDescriptionAttribute("SequenceActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.SequenceDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.Activities.SequenceActivity", "Resources.Sequence.png")]
[SRCategoryAttribute("Standard")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.SequenceActivity : CompositeActivity {
    public SequenceActivity(string name);
    private static SequenceActivity();
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus HandleFault(ActivityExecutionContext executionContext, Exception exception);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
    protected virtual void OnSequenceComplete(ActivityExecutionContext executionContext);
    protected virtual void OnActivityChangeRemove(ActivityExecutionContext executionContext, Activity removedActivity);
    protected virtual void OnWorkflowChangesCompleted(ActivityExecutionContext executionContext);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.SequenceDesignerTheme")]
internal class System.Workflow.Activities.SequenceDesigner : SequentialActivityDesigner {
}
internal class System.Workflow.Activities.SequenceDesignerTheme : CompositeDesignerTheme {
    public SequenceDesignerTheme(WorkflowTheme theme);
}
[DesignerAttribute("System.Workflow.Activities.SequentialWorkflowDesigner", "System.ComponentModel.Design.IRootDesigner")]
[DesignerAttribute("System.Workflow.Activities.SequentialWorkflowDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.Activities.SequentialWorkflowActivity", "Resources.SequentialWorkflow.bmp")]
[SRCategoryAttribute("Standard")]
[SRDisplayNameAttribute("SequentialWorkflow")]
[ToolboxItemAttribute("False")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.SequentialWorkflowActivity : SequenceActivity {
    public static DependencyProperty InitializedEvent;
    public static DependencyProperty CompletedEvent;
    [SRDescriptionAttribute("DynamicUpdateConditionDescr")]
[SRCategoryAttribute("Conditions")]
[DefaultValueAttribute("")]
public ActivityCondition DynamicUpdateCondition { get; public set; }
    public SequentialWorkflowActivity(string name);
    private static SequentialWorkflowActivity();
    public ActivityCondition get_DynamicUpdateCondition();
    public void set_DynamicUpdateCondition(ActivityCondition value);
    public void add_Initialized(EventHandler value);
    public void remove_Initialized(EventHandler value);
    public void add_Completed(EventHandler value);
    public void remove_Completed(EventHandler value);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected sealed virtual void OnSequenceComplete(ActivityExecutionContext executionContext);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.SequentialWorkflowDesignerTheme")]
internal class System.Workflow.Activities.SequentialWorkflowDesigner : SequentialWorkflowRootDesigner {
    protected virtual void Initialize(Activity activity);
    protected virtual bool IsSupportedActivityType(Type activityType);
    protected virtual void OnViewChanged(DesignerView view);
}
internal class System.Workflow.Activities.SequentialWorkflowDesignerTheme : CompositeDesignerTheme {
    public SequentialWorkflowDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.SetStateAction : StateMachineAction {
    internal string TargetStateName { get; }
    internal SetStateAction(string stateName, string targetStateName);
    internal string get_TargetStateName();
    internal virtual void Execute(ActivityExecutionContext context);
}
[SRDescriptionAttribute("SetStateActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.SetStateDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.Activities.SetStateActivity", "Resources.SetStateActivity.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.SetStateValidator")]
[SRCategoryAttribute("Standard")]
[ComVisibleAttribute("False")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.SetStateActivity : Activity {
    internal static string TargetStateNamePropertyName;
    public static DependencyProperty TargetStateNameProperty;
    [SRDescriptionAttribute("TargetStateDescription")]
[EditorAttribute("System.Workflow.Activities.StateDropDownEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public string TargetStateName { get; public set; }
    public SetStateActivity(string name);
    private static SetStateActivity();
    public string get_TargetStateName();
    public void set_TargetStateName(string value);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.SetStateDesignerTheme")]
[ComVisibleAttribute("False")]
internal class System.Workflow.Activities.SetStateDesigner : ActivityDesigner {
    protected Rectangle TextRectangle { get; }
    protected Rectangle ImageRectangle { get; }
    internal Rectangle TargetStateRectangle { get; }
    protected virtual Rectangle get_TextRectangle();
    protected virtual Rectangle get_ImageRectangle();
    internal Rectangle get_TargetStateRectangle();
    public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner);
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
    protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e);
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
}
internal class System.Workflow.Activities.SetStateDesignerTheme : ActivityDesignerTheme {
    public SetStateDesignerTheme(WorkflowTheme theme);
}
[ComVisibleAttribute("False")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.SetStateEventArgs : EventArgs {
    public string TargetStateName { get; }
    public SetStateEventArgs(string targetStateName);
    public string get_TargetStateName();
}
internal class System.Workflow.Activities.SetStateSubscription : StateMachineSubscription {
    internal SetStateSubscription(Guid instanceId);
    internal void CreateQueue(ActivityExecutionContext context);
    internal void DeleteQueue(ActivityExecutionContext context);
    internal void Subscribe(ActivityExecutionContext context);
    internal void Unsubscribe(ActivityExecutionContext context);
    protected virtual void Enqueue(ActivityExecutionContext context);
    internal virtual void ProcessEvent(ActivityExecutionContext context);
}
[ComVisibleAttribute("False")]
internal class System.Workflow.Activities.SetStateValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
    internal static bool IsValidContainer(CompositeActivity activity);
}
[SRDescriptionAttribute("StateActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.StateDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxBitmapAttribute("System.Workflow.Activities.StateActivity", "Resources.StateActivity.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.StateActivityValidator")]
[SRCategoryAttribute("Standard")]
[ComVisibleAttribute("False")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.StateActivity : CompositeActivity {
    public static string StateChangeTrackingDataKey;
    internal static DependencyProperty StateMachineExecutionStateProperty;
    public StateActivity(string name);
    private static StateActivity();
    protected virtual void OnClosed(IServiceProvider provider);
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
internal Activity GetDynamicActivity(Activity childActivity);
    public Activity GetDynamicActivity(string childActivityName);
    protected virtual void Initialize(IServiceProvider provider);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    internal static void LeavingState(ActivityExecutionContext context);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    internal void RaiseProcessActionEvent(ActivityExecutionContext context);
    internal static void ExecuteEventDriven(ActivityExecutionContext context, EventDrivenActivity eventDriven);
    internal static void ExecuteState(ActivityExecutionContext context, StateActivity state);
    protected virtual void OnActivityChangeAdd(ActivityExecutionContext executionContext, Activity addedActivity);
}
[ComVisibleAttribute("False")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.StateActivityValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
    public virtual ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action);
}
[DesignerSerializerAttribute("System.Workflow.Activities.StateDesignerLayoutSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
[ActivityDesignerThemeAttribute("System.Workflow.Activities.StateDesignerTheme")]
[ComVisibleAttribute("False")]
internal class System.Workflow.Activities.StateDesigner : FreeformActivityDesigner {
    internal static Image CompletedState;
    internal static Image InitialState;
    internal static Size Separator;
    internal bool _ensuringVisible;
    public bool CanExpandCollapse { get; }
    public object FirstSelectableObject { get; }
    public object LastSelectableObject { get; }
    public Point Location { get; public set; }
    public Size Size { get; public set; }
    public string Text { get; }
    public Image Image { get; protected set; }
    protected Rectangle ExpandButtonRectangle { get; }
    protected ActivityDesignerGlyphCollection Glyphs { get; }
    protected Rectangle ImageRectangle { get; }
    protected Rectangle TextRectangle { get; }
    protected ActivityDesignerVerbCollection Verbs { get; }
    protected bool ShowConnectorsInForeground { get; }
    internal ActivityDesigner ActiveDesigner { get; internal set; }
    internal bool AddingSetState { get; internal set; }
    internal bool RemovingSetState { get; internal set; }
    internal bool PerformingLayout { get; internal set; }
    internal Dictionary`2<Activity, DesignerLayout> DesignerLayouts { get; }
    internal bool HasActiveDesigner { get; }
    internal string HelpText { get; }
    internal bool IsRootStateDesigner { get; }
    internal ReadOnlyCollection`1<Rectangle> EventHandlersBounds { get; }
    internal StateDesigner RootStateDesigner { get; }
    public Size MinimumSize { get; }
    internal ISelectionService SelectionService { get; }
    internal ReadOnlyCollection`1<Type> ValidChildTypes { get; }
    internal Cursor Cursor { get; internal set; }
    private static StateDesigner();
    protected virtual void Initialize(Activity activity);
    protected virtual void Dispose(bool disposing);
    public virtual bool get_CanExpandCollapse();
    public virtual object get_FirstSelectableObject();
    public virtual object get_LastSelectableObject();
    public virtual Point get_Location();
    public virtual void set_Location(Point value);
    public virtual Size get_Size();
    public virtual void set_Size(Size value);
    public virtual string get_Text();
    public virtual Image get_Image();
    protected virtual void set_Image(Image value);
    protected virtual Rectangle get_ExpandButtonRectangle();
    protected virtual ActivityDesignerGlyphCollection get_Glyphs();
    protected virtual Rectangle get_ImageRectangle();
    protected virtual Rectangle get_TextRectangle();
    protected virtual ActivityDesignerVerbCollection get_Verbs();
    protected virtual bool get_ShowConnectorsInForeground();
    internal ActivityDesigner get_ActiveDesigner();
    internal void set_ActiveDesigner(ActivityDesigner value);
    internal bool get_AddingSetState();
    internal void set_AddingSetState(bool value);
    internal bool get_RemovingSetState();
    internal void set_RemovingSetState(bool value);
    internal bool get_PerformingLayout();
    internal void set_PerformingLayout(bool value);
    internal Dictionary`2<Activity, DesignerLayout> get_DesignerLayouts();
    internal bool get_HasActiveDesigner();
    internal virtual string get_HelpText();
    internal bool get_IsRootStateDesigner();
    internal ReadOnlyCollection`1<Rectangle> get_EventHandlersBounds();
    internal StateDesigner get_RootStateDesigner();
    public virtual Size get_MinimumSize();
    internal ISelectionService get_SelectionService();
    internal virtual ReadOnlyCollection`1<Type> get_ValidChildTypes();
    internal Cursor get_Cursor();
    internal void set_Cursor(Cursor value);
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
    public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner);
    public virtual void EnsureVisibleContainedDesigner(ActivityDesigner containedDesigner);
    public virtual object GetNextSelectableObject(object current, DesignerNavigationDirection direction);
    public virtual HitTestInfo HitTest(Point point);
    public virtual bool IsContainedDesignerVisible(ActivityDesigner containedDesigner);
    protected virtual bool CanResizeContainedDesigner(ActivityDesigner containedDesigner);
    protected virtual Connector CreateConnector(ConnectionPoint source, ConnectionPoint target);
    protected virtual bool CanConnect(ConnectionPoint source, ConnectionPoint target);
    public virtual ReadOnlyCollection`1<ConnectionPoint> GetConnectionPoints(DesignerEdges edges);
    protected virtual ReadOnlyCollection`1<Point> GetConnections(DesignerEdges edges);
    protected virtual void OnConnectorAdded(ConnectorEventArgs e);
    protected virtual void OnConnectorRemoved(ConnectorEventArgs e);
    protected virtual void OnConnectorChanged(ConnectorEventArgs e);
    protected virtual void OnDragEnter(ActivityDragEventArgs e);
    protected virtual void OnDragOver(ActivityDragEventArgs e);
    protected virtual void OnDragLeave();
    protected virtual void OnDragDrop(ActivityDragEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseLeave();
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual void OnContainedActivitiesChanged(ActivityCollectionChangeEventArgs listChangeArgs);
    protected virtual void OnLayoutPosition(ActivityDesignerLayoutEventArgs e);
    protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e);
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    protected virtual void OnThemeChange(ActivityDesignerTheme newTheme);
    internal StateDesignerConnector FindConnector(TransitionInfo transitionInfo);
    internal void StateDesignerLinkMouseDown(object sender, MouseEventArgs e);
    internal void OnStateMachineView(object sender, EventArgs e);
    internal void OnSetAsInitialState(object sender, EventArgs e);
    internal void OnSetAsCompletedState(object sender, EventArgs e);
    internal void OnAddEventDriven(object sender, EventArgs e);
    internal void OnAddState(object sender, EventArgs e);
    internal void OnAddStateInitialization(object sender, EventArgs e);
    internal void OnAddStateFinalization(object sender, EventArgs e);
    internal void AddChild(Activity child);
    internal void OnStatusSetAsInitialState(object sender, EventArgs e);
    internal void OnStatusSetAsCompletedState(object sender, EventArgs e);
    internal void OnStatusAddState(object sender, EventArgs e);
    internal void OnStatusAddEventDriven(object sender, EventArgs e);
    internal void OnStatusAddStateInitialization(object sender, EventArgs e);
    internal void OnStatusAddStateFinalization(object sender, EventArgs e);
    internal void OnStatusStateMachineView(object sender, EventArgs e);
    internal static ActivityDesigner GetDesigner(Activity activity);
    internal static Image GetDesignerImage(ActivityDesigner designer);
    internal static Image GetInitialStateDesignerImage(StateDesigner stateDesigner);
    internal static Image GetCompletedStateDesignerImage(StateDesigner stateDesigner);
    internal object OnGetPropertyValue(ExtendedPropertyInfo extendedProperty, object extendee);
}
[DesignerSerializerAttribute("System.Workflow.Activities.StateDesignerConnectorLayoutSerializer", "System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer")]
internal class System.Workflow.Activities.StateDesignerConnector : Connector {
    internal static int ConnectorPadding;
    internal string SetStateName { get; internal set; }
    internal string EventHandlerName { get; internal set; }
    internal string SourceStateName { get; internal set; }
    internal string TargetStateName { get; internal set; }
    protected ICollection`1<Rectangle> ExcludedRoutingRectangles { get; }
    internal StateDesignerConnector(ConnectionPoint source, ConnectionPoint target);
    internal string get_SetStateName();
    internal void set_SetStateName(string value);
    internal string get_EventHandlerName();
    internal void set_EventHandlerName(string value);
    internal string get_SourceStateName();
    internal void set_SourceStateName(string value);
    internal string get_TargetStateName();
    internal void set_TargetStateName(string value);
    internal void ClearConnectorSegments();
    protected virtual void OnLayout(ActivityDesignerLayoutEventArgs e);
    protected virtual ICollection`1<Rectangle> get_ExcludedRoutingRectangles();
    public virtual bool HitTest(Point point);
    protected virtual void OnPaintEdited(ActivityDesignerPaintEventArgs e, Point[] segments, Point[] segmentEditPoints);
    protected virtual void OnPaintSelected(ActivityDesignerPaintEventArgs e, bool primarySelection, Point[] segmentEditPoints);
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
}
internal class System.Workflow.Activities.StateDesignerConnectorLayoutSerializer : ConnectorLayoutSerializer {
    protected virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
    protected virtual object CreateInstance(WorkflowMarkupSerializationManager serializationManager, Type type);
}
internal class System.Workflow.Activities.StateDesignerLayoutSerializer : FreeformActivityDesignerLayoutSerializer {
    protected virtual PropertyInfo[] GetProperties(WorkflowMarkupSerializationManager serializationManager, object obj);
}
internal class System.Workflow.Activities.StateDesignerTheme : StateMachineTheme {
    public StateDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.StateDropDownEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext typeDescriptorContext, IServiceProvider serviceProvider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext typeDescriptorContext);
}
[SRDescriptionAttribute("StateFinalizationActivityDescription")]
[DesignerAttribute("System.Workflow.Activities.StateFinalizationDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[ToolboxBitmapAttribute("System.Workflow.Activities.StateFinalizationActivity", "Resources.StateFinalizationActivity.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.StateFinalizationValidator")]
[SRCategoryAttribute("Standard")]
[ComVisibleAttribute("False")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.StateFinalizationActivity : SequenceActivity {
    public StateFinalizationActivity(string name);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.StateFinalizationDesignerTheme")]
internal class System.Workflow.Activities.StateFinalizationDesigner : SequenceDesigner {
    public bool CanExpandCollapse { get; }
    public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner);
    protected virtual void DoDefaultAction();
    public virtual bool get_CanExpandCollapse();
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
}
internal class System.Workflow.Activities.StateFinalizationDesignerTheme : CompositeDesignerTheme {
    public StateFinalizationDesignerTheme(WorkflowTheme theme);
}
[ComVisibleAttribute("False")]
internal class System.Workflow.Activities.StateFinalizationValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[SRDescriptionAttribute("StateInitializationActivityDescription")]
[DesignerAttribute("System.Workflow.Activities.StateInitializationDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[ToolboxBitmapAttribute("System.Workflow.Activities.StateInitializationActivity", "Resources.StateInitializationActivity.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.StateInitializationValidator")]
[SRCategoryAttribute("Standard")]
[ComVisibleAttribute("False")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.StateInitializationActivity : SequenceActivity {
    public StateInitializationActivity(string name);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.StateInitializationDesignerTheme")]
internal class System.Workflow.Activities.StateInitializationDesigner : SequenceDesigner {
    public bool CanExpandCollapse { get; }
    public virtual bool CanBeParentedTo(CompositeActivityDesigner parentActivityDesigner);
    protected virtual void DoDefaultAction();
    public virtual bool get_CanExpandCollapse();
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
}
internal class System.Workflow.Activities.StateInitializationDesignerTheme : CompositeDesignerTheme {
    public StateInitializationDesignerTheme(WorkflowTheme theme);
}
[ComVisibleAttribute("False")]
internal class System.Workflow.Activities.StateInitializationValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal class System.Workflow.Activities.StateMachineAction : object {
    internal string StateName { get; }
    protected StateActivity State { get; }
    protected StateActivity CurrentState { get; }
    protected StateMachineExecutionState ExecutionState { get; }
    protected StateMachineSubscriptionManager SubscriptionManager { get; }
    internal StateMachineAction(string stateName);
    internal string get_StateName();
    protected StateActivity get_State();
    protected StateActivity get_CurrentState();
    protected StateMachineExecutionState get_ExecutionState();
    protected StateMachineSubscriptionManager get_SubscriptionManager();
    internal virtual void Execute(ActivityExecutionContext context);
}
internal static class System.Workflow.Activities.StateMachineDesignerPaint : object {
    internal static Brush FadeBrush;
    private static StateMachineDesignerPaint();
    internal static Size MeasureString(Graphics graphics, Font font, string text, StringAlignment alignment, Size maxSize);
    internal static Rectangle TrimRectangle(Rectangle rectangle, Rectangle bounds);
    internal static void DrawConnector(Graphics graphics, Pen pen, Point[] points, Size connectorCapSize, Size maxCapSize, LineAnchor startConnectorCap, LineAnchor endConnectorCap);
    internal static GraphicsPath GetLineCap(LineAnchor lineCap, int capsize, Single& capinset);
    internal static GraphicsPath GetDesignerPath(ActivityDesigner designer, Rectangle bounds, ActivityDesignerTheme designerTheme);
    internal static ActivityDesigner GetSafeRootDesigner(IServiceProvider serviceProvider);
}
internal class System.Workflow.Activities.StateMachineExecutionState : object {
    internal static string StateMachineExecutionStateKey;
    internal StateMachineSubscriptionManager SubscriptionManager { get; }
    internal bool SchedulerBusy { get; internal set; }
    internal string CurrentStateName { get; internal set; }
    internal string PreviousStateName { get; internal set; }
    internal string NextStateName { get; internal set; }
    internal bool Completed { get; internal set; }
    internal bool HasEnqueuedActions { get; }
    internal StateMachineExecutionState(Guid instanceId);
    internal StateMachineSubscriptionManager get_SubscriptionManager();
    internal bool get_SchedulerBusy();
    internal void set_SchedulerBusy(bool value);
    internal string get_CurrentStateName();
    internal void set_CurrentStateName(string value);
    internal string get_PreviousStateName();
    internal void set_PreviousStateName(string value);
    internal string get_NextStateName();
    internal void set_NextStateName(string value);
    internal bool get_Completed();
    internal void set_Completed(bool value);
    internal bool get_HasEnqueuedActions();
    internal void LockQueue();
    internal void EnqueueAction(StateMachineAction action);
    internal StateMachineAction DequeueAction();
    internal void ProcessActions(ActivityExecutionContext context);
    internal void ProcessTransitionRequest(ActivityExecutionContext context);
    internal void CalculateStateTransition(StateActivity currentState, string targetStateName);
    internal static StateMachineExecutionState Get(StateActivity state);
}
internal static class System.Workflow.Activities.StateMachineHelpers : object {
    internal static bool IsStateMachine(StateActivity state);
    internal static bool IsRootState(StateActivity state);
    internal static bool IsLeafState(StateActivity state);
    internal static bool IsRootExecutionContext(ActivityExecutionContext context);
    internal static StateActivity FindEnclosingState(Activity activity);
    internal static StateActivity GetRootState(StateActivity state);
    internal static bool IsInitialState(StateActivity state);
    internal static bool IsCompletedState(StateActivity state);
    internal static string GetInitialStateName(StateActivity state);
    internal static string GetCompletedStateName(StateActivity state);
    internal static StateActivity GetCurrentState(ActivityExecutionContext context);
    internal static StateActivity FindDynamicStateByName(StateActivity state, string stateQualifiedName);
    internal static StateActivity FindStateByName(StateActivity state, string qualifiedName);
    internal static Activity FindActivityByName(CompositeActivity parentActivity, string qualifiedName);
    internal static bool ContainsEventActivity(CompositeActivity compositeActivity);
    internal static IEventActivity GetEventActivity(EventDrivenActivity eventDriven);
    internal static EventDrivenActivity GetParentEventDriven(IEventActivity eventActivity);
    internal static bool ContainsState(StateActivity state, string stateName);
}
internal abstract class System.Workflow.Activities.StateMachineSubscription : object {
    internal Guid SubscriptionId { get; internal set; }
    internal Guid get_SubscriptionId();
    internal void set_SubscriptionId(Guid value);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>.OnEvent(object sender, QueueEventArgs e);
    protected abstract virtual void Enqueue(ActivityExecutionContext context);
    internal abstract virtual void ProcessEvent(ActivityExecutionContext context);
}
internal class System.Workflow.Activities.StateMachineSubscriptionManager : object {
    internal StateMachineExecutionState ExecutionState { get; }
    internal Dictionary`2<IComparable, StateMachineSubscription> Subscriptions { get; }
    internal SetStateSubscription SetStateSubscription { get; }
    internal StateMachineSubscriptionManager(StateMachineExecutionState executionState, Guid instanceId);
    internal StateMachineExecutionState get_ExecutionState();
    internal Dictionary`2<IComparable, StateMachineSubscription> get_Subscriptions();
    internal SetStateSubscription get_SetStateSubscription();
    internal void UnsubscribeState(ActivityExecutionContext context);
    internal void ReevaluateSubscriptions(ActivityExecutionContext context);
    internal void SubscribeEventDriven(ActivityExecutionContext context, EventDrivenActivity eventDriven);
    internal void UnsubscribeEventDriven(ActivityExecutionContext context, EventDrivenActivity eventDriven);
    internal void CreateSetStateEventQueue(ActivityExecutionContext context);
    internal void DeleteSetStateEventQueue(ActivityExecutionContext context);
    internal void SubscribeToSetStateEvent(ActivityExecutionContext context);
    internal void UnsubscribeToSetStateEvent(ActivityExecutionContext context);
    internal static void DisableStateWorkflowQueues(ActivityExecutionContext context, StateActivity state);
    internal static void ChangeEventDrivenQueueState(ActivityExecutionContext context, EventDrivenActivity eventDriven, bool enabled);
    internal static WorkflowQueue GetWorkflowQueue(ActivityExecutionContext context, IComparable queueName);
    internal void Enqueue(ActivityExecutionContext context, Guid subscriptionId);
    internal void Enqueue(ActivityExecutionContext context, IComparable queueName);
    internal StateMachineSubscription Dequeue();
    internal void ProcessQueue(ActivityExecutionContext context);
}
internal class System.Workflow.Activities.StateMachineTheme : CompositeDesignerTheme {
    internal static string DefaultThemeFileExtension;
    public Size ConnectorSize { get; }
    [SRDescriptionAttribute("ConnectorColorDescription")]
[SRCategoryAttribute("ForegroundCategory")]
public Color ConnectorColor { get; public set; }
    [SRDescriptionAttribute("InitialStateImagePathDescription")]
[SRCategoryAttribute("ForegroundCategory")]
[EditorAttribute("System.Workflow.Activities.ImageBrowserEditor", "System.Drawing.Design.UITypeEditor")]
public string InitialStateDesignerImagePath { get; public set; }
    [SRDescriptionAttribute("CompletedStateImagePathDescription")]
[SRCategoryAttribute("ForegroundCategory")]
[EditorAttribute("System.Workflow.Activities.ImageBrowserEditor", "System.Drawing.Design.UITypeEditor")]
public string CompletedStateDesignerImagePath { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Pen ConnectorPen { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Image InitialStateDesignerImage { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Image CompletedStateDesignerImage { get; }
    public StateMachineTheme(WorkflowTheme theme);
    public virtual Size get_ConnectorSize();
    protected virtual void Dispose(bool disposing);
    public Color get_ConnectorColor();
    public void set_ConnectorColor(Color value);
    public virtual string get_InitialStateDesignerImagePath();
    public virtual void set_InitialStateDesignerImagePath(string value);
    public virtual string get_CompletedStateDesignerImagePath();
    public virtual void set_CompletedStateDesignerImagePath(string value);
    public Pen get_ConnectorPen();
    public Image get_InitialStateDesignerImage();
    public Image get_CompletedStateDesignerImage();
    internal static bool IsValidImageResource(DesignerTheme designerTheme, string directory, string path);
    internal static string GetRelativePath(string pathFrom, string pathTo);
    internal static Image GetImageFromPath(DesignerTheme designerTheme, string directory, string path);
}
[SRDescriptionAttribute("StateMachineWorkflowActivityDescription")]
[DesignerAttribute("System.Workflow.Activities.StateMachineWorkflowDesigner", "System.ComponentModel.Design.IRootDesigner")]
[DesignerAttribute("System.Workflow.Activities.StateMachineWorkflowDesigner", "System.ComponentModel.Design.IDesigner")]
[ToolboxItemAttribute("False")]
[ToolboxBitmapAttribute("System.Workflow.Activities.StateMachineWorkflowActivity", "Resources.StateMachineWorkflowActivity.png")]
[ActivityValidatorAttribute("System.Workflow.Activities.StateActivityValidator")]
[SRCategoryAttribute("Standard")]
[SRDisplayNameAttribute("StateMachineWorkflow")]
[ComVisibleAttribute("False")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.StateMachineWorkflowActivity : StateActivity {
    internal static string InitialStateNamePropertyName;
    internal static string CompletedStateNamePropertyName;
    public static string SetStateQueueName;
    public static DependencyProperty InitialStateNameProperty;
    public static DependencyProperty CompletedStateNameProperty;
    [SRDescriptionAttribute("DynamicUpdateConditionDescr")]
[SRCategoryAttribute("Conditions")]
public ActivityCondition DynamicUpdateCondition { get; public set; }
    [ValidationOptionAttribute("1")]
[SRDescriptionAttribute("InitialStateDescription")]
[EditorAttribute("System.Workflow.Activities.StateDropDownEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public string InitialStateName { get; public set; }
    [SRDescriptionAttribute("CompletedStateDescription")]
[EditorAttribute("System.Workflow.Activities.StateDropDownEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public string CompletedStateName { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string CurrentStateName { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string PreviousStateName { get; }
    internal StateMachineExecutionState ExecutionState { get; }
    public StateMachineWorkflowActivity(string name);
    private static StateMachineWorkflowActivity();
    public ActivityCondition get_DynamicUpdateCondition();
    public void set_DynamicUpdateCondition(ActivityCondition value);
    public string get_InitialStateName();
    public void set_InitialStateName(string value);
    public string get_CompletedStateName();
    public void set_CompletedStateName(string value);
    public string get_CurrentStateName();
    public string get_PreviousStateName();
    internal StateMachineExecutionState get_ExecutionState();
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.StateMachineWorkflowDesignerTheme")]
[ComVisibleAttribute("False")]
internal class System.Workflow.Activities.StateMachineWorkflowDesigner : StateDesigner {
    public string Text { get; }
    internal string HelpText { get; }
    public Size MinimumSize { get; }
    private static StateMachineWorkflowDesigner();
    protected virtual void Initialize(Activity activity);
    public virtual string get_Text();
    internal virtual string get_HelpText();
    public virtual Size get_MinimumSize();
    protected virtual bool IsSupportedActivityType(Type activityType);
}
internal class System.Workflow.Activities.StateMachineWorkflowDesignerTheme : StateMachineTheme {
    [BrowsableAttribute("False")]
public string InitialStateDesignerImagePath { get; public set; }
    [BrowsableAttribute("False")]
public string CompletedStateDesignerImagePath { get; public set; }
    public StateMachineWorkflowDesignerTheme(WorkflowTheme theme);
    public virtual string get_InitialStateDesignerImagePath();
    public virtual void set_InitialStateDesignerImagePath(string value);
    public virtual string get_CompletedStateDesignerImagePath();
    public virtual void set_CompletedStateDesignerImagePath(string value);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.StateMachineWorkflowInstance : object {
    internal static string StateHistoryPropertyName;
    public StateMachineWorkflowActivity StateMachineWorkflow { get; }
    public Guid InstanceId { get; }
    public WorkflowInstance WorkflowInstance { get; }
    public StateActivity CurrentState { get; }
    public string CurrentStateName { get; }
    public ReadOnlyCollection`1<StateActivity> States { get; }
    public ReadOnlyCollection`1<string> PossibleStateTransitions { get; }
    public ReadOnlyCollection`1<string> StateHistory { get; }
    public StateMachineWorkflowInstance(WorkflowRuntime runtime, Guid instanceId);
    public StateMachineWorkflowActivity get_StateMachineWorkflow();
    public Guid get_InstanceId();
    public WorkflowInstance get_WorkflowInstance();
    public StateActivity get_CurrentState();
    public string get_CurrentStateName();
    public ReadOnlyCollection`1<StateActivity> get_States();
    public ReadOnlyCollection`1<string> get_PossibleStateTransitions();
    public ReadOnlyCollection`1<string> get_StateHistory();
    public void EnqueueItem(IComparable queueName, object item);
    public void EnqueueItem(IComparable queueName, object item, IPendingWork pendingWork, object workItem);
    public void SetState(StateActivity targetState);
    public void SetState(string targetStateName);
    internal Activity FindActivityByQualifiedName(string id);
}
internal class System.Workflow.Activities.SubscribeAction : StateMachineAction {
    internal string EventDrivenName { get; }
    internal SubscribeAction(string stateName, string eventDrivenName);
    internal string get_EventDrivenName();
    internal virtual void Execute(ActivityExecutionContext context);
}
internal class System.Workflow.Activities.SubscriptionEventArg : EventArgs {
    internal EventArgs Args { get; }
    internal EventType SubscriptionType { get; }
    internal SubscriptionEventArg(EventArgs args, EventType subType);
    internal EventArgs get_Args();
    internal EventType get_SubscriptionType();
    public virtual string ToString();
}
internal class System.Workflow.Activities.UnsubscribeAction : StateMachineAction {
    internal string EventDrivenName { get; }
    internal UnsubscribeAction(string stateName, string eventDrivenName);
    internal string get_EventDrivenName();
    internal virtual void Execute(ActivityExecutionContext context);
}
internal static class System.Workflow.Activities.WebServiceActivityHelpers : object {
    internal static IEnumerable GetPreceedingActivities(Activity startActivity);
    [IteratorStateMachineAttribute("System.Workflow.Activities.WebServiceActivityHelpers/<GetPreceedingActivities>d__2")]
internal static IEnumerable GetPreceedingActivities(Activity startActivity, bool crossOverLoop);
    internal static bool IsLoopActivity(Activity activity);
    internal static bool IsInsideLoop(Activity webServiceActivity, Activity searchBoundary);
    [IteratorStateMachineAttribute("System.Workflow.Activities.WebServiceActivityHelpers/<GetSucceedingActivities>d__1")]
internal static IEnumerable GetSucceedingActivities(Activity startActivity);
    internal static void GetParameterInfo(MethodInfo methodInfo, List`1& inParameters, List`1& outParameters);
    internal static ValidationErrorCollection ValidateParameterTypes(MethodInfo methodInfo);
}
internal class System.Workflow.Activities.WebServiceCodeGenerator : ActivityCodeGenerator {
    public virtual void GenerateCode(CodeGenerationManager manager, object obj);
}
internal class System.Workflow.Activities.WebServiceDesignerTheme : ActivityDesignerTheme {
    public WebServiceDesignerTheme(WorkflowTheme theme);
}
[SRDescriptionAttribute("WebServiceFaultActivityDescription")]
[SRCategoryAttribute("Standard")]
[ToolboxBitmapAttribute("System.Workflow.Activities.WebServiceFaultActivity", "Resources.WebServiceOut.png")]
[DesignerAttribute("System.Workflow.Activities.WebServiceFaultDesigner", "System.ComponentModel.Design.IDesigner")]
[ActivityValidatorAttribute("System.Workflow.Activities.WebServiceFaultValidator")]
[DefaultEventAttribute("SendingFault")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.WebServiceFaultActivity : Activity {
    public static DependencyProperty InputActivityNameProperty;
    public static DependencyProperty FaultProperty;
    public static DependencyProperty SendingFaultEvent;
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("ReceiveActivityNameDescription")]
[TypeConverterAttribute("System.Workflow.Activities.Common.PropertyValueProviderTypeConverter")]
[RefreshPropertiesAttribute("1")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string InputActivityName { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("Properties")]
[DesignerSerializationVisibilityAttribute("1")]
[DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
public Exception Fault { get; public set; }
    public WebServiceFaultActivity(string name);
    private static WebServiceFaultActivity();
    public string get_InputActivityName();
    public void set_InputActivityName(string value);
    public Exception get_Fault();
    public void set_Fault(Exception value);
    public void add_SendingFault(EventHandler value);
    public void remove_SendingFault(EventHandler value);
    private sealed virtual override ICollection System.Workflow.Activities.Common.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
    protected virtual void Initialize(IServiceProvider provider);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.WebServiceFaultDesignerTheme")]
internal class System.Workflow.Activities.WebServiceFaultDesigner : ActivityDesigner {
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
}
internal class System.Workflow.Activities.WebServiceFaultDesignerTheme : ActivityDesignerTheme {
    public WebServiceFaultDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.WebServiceFaultValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[SRDescriptionAttribute("WebServiceReceiveActivityDescription")]
[SRCategoryAttribute("Standard")]
[ToolboxBitmapAttribute("System.Workflow.Activities.WebServiceInputActivity", "Resources.WebServiceIn.png")]
[DesignerAttribute("System.Workflow.Activities.WebServiceReceiveDesigner", "System.ComponentModel.Design.IDesigner")]
[ActivityValidatorAttribute("System.Workflow.Activities.WebServiceReceiveValidator")]
[ActivityCodeGeneratorAttribute("System.Workflow.Activities.WebServiceCodeGenerator")]
[DefaultEventAttribute("InputReceived")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.WebServiceInputActivity : Activity {
    public static DependencyProperty IsActivatingProperty;
    public static DependencyProperty InterfaceTypeProperty;
    public static DependencyProperty MethodNameProperty;
    public static DependencyProperty RolesProperty;
    public static DependencyProperty ParameterBindingsProperty;
    public static DependencyProperty ActivitySubscribedProperty;
    public static DependencyProperty InputReceivedEvent;
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("InterfaceTypeDescription")]
[RefreshPropertiesAttribute("1")]
[EditorAttribute("System.Workflow.ComponentModel.Design.TypeBrowserEditor", "System.Drawing.Design.UITypeEditor")]
[TypeFilterProviderAttribute("System.Workflow.Activities.InterfaceTypeFilterProvider")]
[DefaultValueAttribute("")]
public Type InterfaceType { get; public set; }
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("WebServiceMethodDescription")]
[TypeConverterAttribute("System.Workflow.Activities.Common.PropertyValueProviderTypeConverter")]
[RefreshPropertiesAttribute("1")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string MethodName { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[BrowsableAttribute("False")]
public WorkflowParameterBindingCollection ParameterBindings { get; }
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("RoleDescr")]
[EditorAttribute("System.Workflow.ComponentModel.Design.BindUITypeEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public WorkflowRoleCollection Roles { get; public set; }
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("ActivationDescr")]
[DefaultValueAttribute("False")]
[MergablePropertyAttribute("False")]
public bool IsActivating { get; public set; }
    internal bool ActivitySubscribed { get; internal set; }
    private IComparable System.Workflow.Activities.IEventActivity.QueueName { get; }
    public WebServiceInputActivity(string name);
    private static WebServiceInputActivity();
    public Type get_InterfaceType();
    public void set_InterfaceType(Type value);
    public string get_MethodName();
    public void set_MethodName(string value);
    public WorkflowParameterBindingCollection get_ParameterBindings();
    public WorkflowRoleCollection get_Roles();
    public void set_Roles(WorkflowRoleCollection value);
    public bool get_IsActivating();
    public void set_IsActivating(bool value);
    public void add_InputReceived(EventHandler value);
    public void remove_InputReceived(EventHandler value);
    internal bool get_ActivitySubscribed();
    internal void set_ActivitySubscribed(bool value);
    private sealed virtual override ICollection System.Workflow.Activities.Common.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
    protected sealed virtual void Initialize(IServiceProvider provider);
    protected sealed virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected sealed virtual ActivityExecutionStatus HandleFault(ActivityExecutionContext executionContext, Exception exception);
    protected sealed virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.QueueEventArgs>.OnEvent(object sender, QueueEventArgs e);
    private sealed virtual override void System.Workflow.Activities.IEventActivity.Subscribe(ActivityExecutionContext parentContext, IActivityEventListener`1<QueueEventArgs> parentEventHandler);
    private sealed virtual override void System.Workflow.Activities.IEventActivity.Unsubscribe(ActivityExecutionContext parentContext, IActivityEventListener`1<QueueEventArgs> parentEventHandler);
    private sealed virtual override IComparable System.Workflow.Activities.IEventActivity.get_QueueName();
    private sealed virtual override Type System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider serviceProvider, string propertyName);
    private sealed virtual override AccessTypes System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider serviceProvider, string propertyName);
    internal void GetParameterPropertyDescriptors(IDictionary properties);
}
internal class System.Workflow.Activities.WebServiceInterfacePropertyDescriptor : DynamicPropertyDescriptor {
    internal WebServiceInterfacePropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor pd);
    public virtual void SetValue(object component, object value);
}
[SRDescriptionAttribute("WebServiceResponseActivityDescription")]
[SRCategoryAttribute("Standard")]
[ToolboxBitmapAttribute("System.Workflow.Activities.WebServiceOutputActivity", "Resources.WebServiceOut.png")]
[DesignerAttribute("System.Workflow.Activities.WebServiceResponseDesigner", "System.ComponentModel.Design.IDesigner")]
[ActivityValidatorAttribute("System.Workflow.Activities.WebServiceResponseValidator")]
[DefaultEventAttribute("SendingOutput")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.WebServiceOutputActivity : Activity {
    public static DependencyProperty InputActivityNameProperty;
    public static DependencyProperty ParameterBindingsProperty;
    public static DependencyProperty SendingOutputEvent;
    [SRCategoryAttribute("Activity")]
[SRDescriptionAttribute("ReceiveActivityNameDescription")]
[TypeConverterAttribute("System.Workflow.Activities.Common.PropertyValueProviderTypeConverter")]
[RefreshPropertiesAttribute("1")]
[MergablePropertyAttribute("False")]
[DefaultValueAttribute("")]
public string InputActivityName { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[BrowsableAttribute("False")]
public WorkflowParameterBindingCollection ParameterBindings { get; }
    public WebServiceOutputActivity(string name);
    private static WebServiceOutputActivity();
    public string get_InputActivityName();
    public void set_InputActivityName(string value);
    public WorkflowParameterBindingCollection get_ParameterBindings();
    public void add_SendingOutput(EventHandler value);
    public void remove_SendingOutput(EventHandler value);
    private sealed virtual override ICollection System.Workflow.Activities.Common.IPropertyValueProvider.GetPropertyValues(ITypeDescriptorContext context);
    protected virtual void Initialize(IServiceProvider provider);
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    private sealed virtual override Type System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider serviceProvider, string propertyName);
    private sealed virtual override AccessTypes System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider serviceProvider, string propertyName);
    internal void GetParameterPropertyDescriptors(IDictionary properties);
}
internal class System.Workflow.Activities.WebServicePickerEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext typeDescriptorContext, IServiceProvider serviceProvider, object o);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext typeDescriptorContext);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.WebServiceDesignerTheme")]
internal class System.Workflow.Activities.WebServiceReceiveDesigner : ActivityDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
}
internal class System.Workflow.Activities.WebServiceReceiveValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.WebServiceResponseDesignerTheme")]
internal class System.Workflow.Activities.WebServiceResponseDesigner : ActivityDesigner {
    protected virtual void PreFilterProperties(IDictionary properties);
    protected virtual void OnActivityChanged(ActivityChangedEventArgs e);
}
internal class System.Workflow.Activities.WebServiceResponseDesignerTheme : ActivityDesignerTheme {
    public WebServiceResponseDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.WebServiceResponseValidator : ActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
}
internal class System.Workflow.Activities.WebServiceUrlPropertyDescriptor : DynamicPropertyDescriptor {
    public bool IsReadOnly { get; }
    internal WebServiceUrlPropertyDescriptor(IServiceProvider serviceProvider, PropertyDescriptor pd);
    public virtual bool get_IsReadOnly();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.WebWorkflowRole : WorkflowRole {
    public string Name { get; public set; }
    public string RoleProvider { get; public set; }
    public WebWorkflowRole(string roleName);
    public WebWorkflowRole(string roleName, string provider);
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public string get_RoleProvider();
    public void set_RoleProvider(string value);
    public virtual IList`1<string> GetIdentities();
    public virtual bool IncludesIdentity(string identity);
}
[SRDescriptionAttribute("WhileActivityDescription")]
[ToolboxItemAttribute("System.Workflow.ComponentModel.Design.ActivityToolboxItem")]
[DesignerAttribute("System.Workflow.Activities.WhileDesigner", "System.ComponentModel.Design.IDesigner")]
[ActivityValidatorAttribute("System.Workflow.Activities.WhileValidator")]
[ToolboxBitmapAttribute("System.Workflow.Activities.WhileActivity", "Resources.While.png")]
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.WhileActivity : CompositeActivity {
    public static DependencyProperty ConditionProperty;
    [SRCategoryAttribute("Conditions")]
[SRDescriptionAttribute("WhileConditionDescr")]
public ActivityCondition Condition { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Activity DynamicActivity { get; }
    public WhileActivity(string name);
    private static WhileActivity();
    public ActivityCondition get_Condition();
    public void set_Condition(ActivityCondition value);
    public Activity get_DynamicActivity();
    protected virtual ActivityExecutionStatus Execute(ActivityExecutionContext executionContext);
    protected virtual ActivityExecutionStatus Cancel(ActivityExecutionContext executionContext);
    private sealed virtual override void System.Workflow.ComponentModel.IActivityEventListener<System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs>.OnEvent(object sender, ActivityExecutionStatusChangedEventArgs e);
}
[ActivityDesignerThemeAttribute("System.Workflow.Activities.WhileDesignerTheme")]
internal class System.Workflow.Activities.WhileDesigner : SequentialActivityDesigner {
    protected virtual void Initialize(Activity activity);
    protected virtual void OnPaint(ActivityDesignerPaintEventArgs e);
    protected virtual Rectangle[] GetConnectors();
    protected virtual Size OnLayoutSize(ActivityDesignerLayoutEventArgs e);
    public virtual bool CanInsertActivities(HitTestInfo insertLocation, ReadOnlyCollection`1<Activity> activitiesToInsert);
}
internal class System.Workflow.Activities.WhileDesignerTheme : CompositeDesignerTheme {
    public WhileDesignerTheme(WorkflowTheme theme);
}
internal class System.Workflow.Activities.WhileValidator : CompositeActivityValidator {
    public virtual ValidationErrorCollection Validate(ValidationManager manager, object obj);
    public virtual ValidationError ValidateActivityChange(Activity activity, ActivityChangeAction action);
}
internal static class System.Workflow.Activities.WorkflowActivityTrace : object {
    internal static TraceSource Activity { get; }
    internal static TraceSource Rules { get; }
    private static WorkflowActivityTrace();
    internal static TraceSource get_Activity();
    internal static TraceSource get_Rules();
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.WorkflowAuthorizationException : SystemException {
    public WorkflowAuthorizationException(string activityName, string principalName);
    public WorkflowAuthorizationException(string message);
    public WorkflowAuthorizationException(string message, Exception innerException);
    protected WorkflowAuthorizationException(SerializationInfo info, StreamingContext context);
}
internal class System.Workflow.Activities.WorkflowMessageEventHandler : object {
    internal IDeliverMessage EnqueueWrapper { get; internal set; }
    internal Delegate Delegate { get; }
    internal WorkflowMessageEventHandler(Type proxiedType, EventInfo eventInfo, IDeliverMessage enqueueWrapper);
    internal IDeliverMessage get_EnqueueWrapper();
    internal void set_EnqueueWrapper(IDeliverMessage value);
    internal Delegate get_Delegate();
    public void EventHandler(object sender, ExternalDataEventArgs eventArgs);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Activities.WorkflowRole : object {
    public string Name { get; public set; }
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_Name();
    public abstract virtual IList`1<string> GetIdentities();
    public abstract virtual bool IncludesIdentity(string identity);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public class System.Workflow.Activities.WorkflowRoleCollection : List`1<WorkflowRole> {
    public bool IncludesIdentity(string identity);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Activities.WorkflowSubscriptionService : object {
    public abstract virtual void CreateSubscription(MessageEventSubscription subscription);
    public abstract virtual void DeleteSubscription(Guid subscriptionId);
}
[ObsoleteAttribute("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]
public abstract class System.Workflow.Activities.WorkflowWebService : WebService {
    internal static string ConfigSectionName;
    protected WorkflowRuntime WorkflowRuntime { get; }
    internal static WorkflowRuntime CurrentWorkflowRuntime { get; }
    protected WorkflowWebService(Type workflowType);
    private static WorkflowWebService();
    protected Object[] Invoke(Type interfaceType, string methodName, bool isActivation, Object[] parameters);
    protected WorkflowRuntime get_WorkflowRuntime();
    internal static WorkflowRuntime get_CurrentWorkflowRuntime();
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
