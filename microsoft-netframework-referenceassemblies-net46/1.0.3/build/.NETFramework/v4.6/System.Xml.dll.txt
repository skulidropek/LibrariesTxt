internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemThreadingTasksDataflow;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemNetHttp;
    internal static string SystemNetHttpWebRequest;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemRuntimeWindowsRuntime;
    internal static string SystemRuntimeWindowsRuntimeUIXaml;
    internal static string SystemSecurity;
    internal static string SystemServiceModelWeb;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FXAssembly : object {
    internal static string Version;
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class Microsoft.Win32.UnsafeNativeMethods : object {
    internal static string KERNEL32;
    internal static int ERROR_INSUFFICIENT_BUFFER;
    internal static int ERROR_NO_PACKAGE_IDENTITY;
    [SecuritySafeCriticalAttribute]
internal static Lazy`1<bool> IsPackagedProcess;
    private static UnsafeNativeMethods();
}
internal enum MS.Internal.Xml.Cache.TextBlockType : Enum {
    public int value__;
    public static TextBlockType None;
    public static TextBlockType Text;
    public static TextBlockType SignificantWhitespace;
    public static TextBlockType Whitespace;
}
internal abstract class MS.Internal.Xml.Cache.XPathDocumentBaseIterator : XPathNodeIterator {
    protected XPathDocumentNavigator ctxt;
    protected int pos;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    protected XPathDocumentBaseIterator(XPathDocumentNavigator ctxt);
    protected XPathDocumentBaseIterator(XPathDocumentBaseIterator iter);
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
}
internal class MS.Internal.Xml.Cache.XPathDocumentBuilder : XmlRawWriter {
    public XPathDocumentBuilder(XPathDocument doc, IXmlLineInfo lineInfo, string baseUri, LoadFlags flags);
    public void Initialize(XPathDocument doc, IXmlLineInfo lineInfo, string baseUri, LoadFlags flags);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public void WriteStartElement(string prefix, string localName, string ns, string baseUri);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    internal virtual void WriteEndElement(string prefix, string localName, string namespaceName);
    internal virtual void WriteFullEndElement(string prefix, string localName, string namespaceName);
    public void WriteEndElement(bool allowShortcutTag);
    public virtual void WriteStartAttribute(string prefix, string localName, string namespaceName);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public void WriteProcessingInstruction(string name, string text, string baseUri);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public void WriteString(string text, TextBlockType textType);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void Close();
    public virtual void Flush();
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal virtual void StartElementContent();
    internal virtual void WriteNamespaceDeclaration(string prefix, string namespaceName);
    public void CreateIdTables(IDtdInfo dtdInfo);
}
internal class MS.Internal.Xml.Cache.XPathDocumentElementChildIterator : XPathDocumentBaseIterator {
    public XPathDocumentElementChildIterator(XPathDocumentNavigator parent, string name, string namespaceURI);
    public XPathDocumentElementChildIterator(XPathDocumentElementChildIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentElementDescendantIterator : XPathDocumentBaseIterator {
    public XPathDocumentElementDescendantIterator(XPathDocumentNavigator root, string name, string namespaceURI, bool matchSelf);
    public XPathDocumentElementDescendantIterator(XPathDocumentElementDescendantIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentKindChildIterator : XPathDocumentBaseIterator {
    public XPathDocumentKindChildIterator(XPathDocumentNavigator parent, XPathNodeType typ);
    public XPathDocumentKindChildIterator(XPathDocumentKindChildIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentKindDescendantIterator : XPathDocumentBaseIterator {
    public XPathDocumentKindDescendantIterator(XPathDocumentNavigator root, XPathNodeType typ, bool matchSelf);
    public XPathDocumentKindDescendantIterator(XPathDocumentKindDescendantIterator iter);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.Cache.XPathDocumentNavigator : XPathNavigator {
    public string Value { get; }
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public XmlNameTable NameTable { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    internal string UniqueId { get; }
    public object UnderlyingObject { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XPathDocumentNavigator(XPathNode[] pageCurrent, int idxCurrent, XPathNode[] pageParent, int idxParent);
    public XPathDocumentNavigator(XPathDocumentNavigator nav);
    public virtual string get_Value();
    public virtual XPathNavigator Clone();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual XmlNameTable get_NameTable();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool get_HasAttributes();
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToParent();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToId(string id);
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool get_HasChildren();
    public virtual void MoveToRoot();
    public virtual bool MoveToChild(string localName, string namespaceURI);
    public virtual bool MoveToNext(string localName, string namespaceURI);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToNext(XPathNodeType type);
    public virtual bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end);
    public virtual bool MoveToFollowing(XPathNodeType type, XPathNavigator end);
    public virtual XPathNodeIterator SelectChildren(XPathNodeType type);
    public virtual XPathNodeIterator SelectChildren(string name, string namespaceURI);
    public virtual XPathNodeIterator SelectDescendants(XPathNodeType type, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
    public virtual bool IsDescendant(XPathNavigator other);
    internal virtual string get_UniqueId();
    public virtual object get_UnderlyingObject();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public int GetPositionHashCode();
    public bool IsElementMatch(string localName, string namespaceURI);
    public bool IsContentKindMatch(XPathNodeType typ);
    public bool IsKindMatch(XPathNodeType typ);
}
internal class MS.Internal.Xml.Cache.XPathNode : ValueType {
    private XPathNodeInfoAtom info;
    private ushort idxSibling;
    private ushort idxParent;
    private ushort idxSimilar;
    private ushort posOffset;
    private UInt32 props;
    private string value;
    private static UInt32 NodeTypeMask;
    private static UInt32 HasAttributeBit;
    private static UInt32 HasContentChildBit;
    private static UInt32 HasElementChildBit;
    private static UInt32 HasCollapsedTextBit;
    private static UInt32 AllowShortcutTagBit;
    private static UInt32 HasNmspDeclsBit;
    private static UInt32 LineNumberMask;
    private static int LineNumberShift;
    private static int CollapsedPositionShift;
    public static int MaxLineNumberOffset;
    public static int MaxLinePositionOffset;
    public static int MaxCollapsedPositionOffset;
    public XPathNodeType NodeType { get; }
    public string Prefix { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceUri { get; }
    public XPathDocument Document { get; }
    public string BaseUri { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public int CollapsedLinePosition { get; }
    public XPathNodePageInfo PageInfo { get; }
    public bool IsXmlNamespaceNode { get; }
    public bool HasSibling { get; }
    public bool HasCollapsedText { get; }
    public bool HasAttribute { get; }
    public bool HasContentChild { get; }
    public bool HasElementChild { get; }
    public bool IsAttrNmsp { get; }
    public bool IsText { get; }
    public bool HasNamespaceDecls { get; public set; }
    public bool AllowShortcutTag { get; }
    public int LocalNameHashCode { get; }
    public string Value { get; }
    public XPathNodeType get_NodeType();
    public string get_Prefix();
    public string get_LocalName();
    public string get_Name();
    public string get_NamespaceUri();
    public XPathDocument get_Document();
    public string get_BaseUri();
    public int get_LineNumber();
    public int get_LinePosition();
    public int get_CollapsedLinePosition();
    public XPathNodePageInfo get_PageInfo();
    public int GetRoot(XPathNode[]& pageNode);
    public int GetParent(XPathNode[]& pageNode);
    public int GetSibling(XPathNode[]& pageNode);
    public int GetSimilarElement(XPathNode[]& pageNode);
    public bool NameMatch(string localName, string namespaceName);
    public bool ElementMatch(string localName, string namespaceName);
    public bool get_IsXmlNamespaceNode();
    public bool get_HasSibling();
    public bool get_HasCollapsedText();
    public bool get_HasAttribute();
    public bool get_HasContentChild();
    public bool get_HasElementChild();
    public bool get_IsAttrNmsp();
    public bool get_IsText();
    public bool get_HasNamespaceDecls();
    public void set_HasNamespaceDecls(bool value);
    public bool get_AllowShortcutTag();
    public int get_LocalNameHashCode();
    public string get_Value();
    public void Create(XPathNodePageInfo pageInfo);
    public void Create(XPathNodeInfoAtom info, XPathNodeType xptyp, int idxParent);
    public void SetLineInfoOffsets(int lineNumOffset, int linePosOffset);
    public void SetCollapsedLineInfoOffset(int posOffset);
    public void SetValue(string value);
    public void SetEmptyValue(bool allowShortcutTag);
    public void SetCollapsedValue(string value);
    public void SetParentProperties(XPathNodeType xptyp);
    public void SetSibling(XPathNodeInfoTable infoTable, XPathNode[] pageSibling, int idxSibling);
    public void SetSimilarElement(XPathNodeInfoTable infoTable, XPathNode[] pageSimilar, int idxSimilar);
}
internal abstract class MS.Internal.Xml.Cache.XPathNodeHelper : object {
    public static int GetLocalNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp);
    public static int GetInScopeNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp);
    public static bool GetFirstAttribute(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetNextAttribute(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetContentChild(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetContentSibling(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetParent(XPathNode[]& pageNode, Int32& idxNode);
    public static int GetLocation(XPathNode[] pageNode, int idxNode);
    public static bool GetElementChild(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName);
    public static bool GetElementSibling(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName);
    public static bool GetContentChild(XPathNode[]& pageNode, Int32& idxNode, XPathNodeType typ);
    public static bool GetContentSibling(XPathNode[]& pageNode, Int32& idxNode, XPathNodeType typ);
    public static bool GetPreviousContentSibling(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetPreviousElementSibling(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName);
    public static bool GetPreviousContentSibling(XPathNode[]& pageNode, Int32& idxNode, XPathNodeType typ);
    public static bool GetAttribute(XPathNode[]& pageNode, Int32& idxNode, string localName, string namespaceName);
    public static bool GetFollowing(XPathNode[]& pageNode, Int32& idxNode);
    public static bool GetElementFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd, string localName, string namespaceName);
    public static bool GetContentFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd, XPathNodeType typ);
    public static bool GetTextFollowing(XPathNode[]& pageCurrent, Int32& idxCurrent, XPathNode[] pageEnd, int idxEnd);
    public static bool GetNonDescendant(XPathNode[]& pageNode, Int32& idxNode);
}
internal class MS.Internal.Xml.Cache.XPathNodeInfoAtom : object {
    public XPathNodePageInfo PageInfo { get; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public string Prefix { get; }
    public string BaseUri { get; }
    public XPathNode[] SiblingPage { get; }
    public XPathNode[] SimilarElementPage { get; }
    public XPathNode[] ParentPage { get; }
    public XPathDocument Document { get; }
    public int LineNumberBase { get; }
    public int LinePositionBase { get; }
    public int LocalNameHashCode { get; }
    public XPathNodeInfoAtom Next { get; public set; }
    public XPathNodeInfoAtom(XPathNodePageInfo pageInfo);
    public XPathNodeInfoAtom(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase);
    public void Init(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase);
    public XPathNodePageInfo get_PageInfo();
    public string get_LocalName();
    public string get_NamespaceUri();
    public string get_Prefix();
    public string get_BaseUri();
    public XPathNode[] get_SiblingPage();
    public XPathNode[] get_SimilarElementPage();
    public XPathNode[] get_ParentPage();
    public XPathDocument get_Document();
    public int get_LineNumberBase();
    public int get_LinePositionBase();
    public int get_LocalNameHashCode();
    public XPathNodeInfoAtom get_Next();
    public void set_Next(XPathNodeInfoAtom value);
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    public virtual string ToString();
}
internal class MS.Internal.Xml.Cache.XPathNodeInfoTable : object {
    public XPathNodeInfoAtom Create(string localName, string namespaceUri, string prefix, string baseUri, XPathNode[] pageParent, XPathNode[] pageSibling, XPathNode[] pageSimilar, XPathDocument doc, int lineNumBase, int linePosBase);
    public virtual string ToString();
}
internal class MS.Internal.Xml.Cache.XPathNodePageInfo : object {
    public int PageNumber { get; }
    public int NodeCount { get; public set; }
    public XPathNode[] PreviousPage { get; }
    public XPathNode[] NextPage { get; public set; }
    public XPathNodePageInfo(XPathNode[] pagePrev, int pageNum);
    public int get_PageNumber();
    public int get_NodeCount();
    public void set_NodeCount(int value);
    public XPathNode[] get_PreviousPage();
    public XPathNode[] get_NextPage();
    public void set_NextPage(XPathNode[] value);
}
internal class MS.Internal.Xml.Cache.XPathNodeRef : ValueType {
    private XPathNode[] page;
    private int idx;
    public static XPathNodeRef Null { get; }
    public bool IsNull { get; }
    public XPathNode[] Page { get; }
    public int Index { get; }
    public XPathNodeRef(XPathNode[] page, int idx);
    public static XPathNodeRef get_Null();
    public bool get_IsNull();
    public XPathNode[] get_Page();
    public int get_Index();
    public virtual int GetHashCode();
}
internal class MS.Internal.Xml.XPath.AbsoluteQuery : ContextQuery {
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal abstract class MS.Internal.Xml.XPath.AstNode : object {
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public abstract virtual AstType get_Type();
    public abstract virtual XPathResultType get_ReturnType();
}
internal class MS.Internal.Xml.XPath.AttributeQuery : BaseAxisQuery {
    public AttributeQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.Axis : AstNode {
    protected bool abbrAxis;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public AstNode Input { get; public set; }
    public string Prefix { get; }
    public string Name { get; }
    public XPathNodeType NodeType { get; }
    public AxisType TypeOfAxis { get; }
    public bool AbbrAxis { get; }
    public string Urn { get; public set; }
    public Axis(AxisType axisType, AstNode input, string prefix, string name, XPathNodeType nodetype);
    public Axis(AxisType axisType, AstNode input);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public AstNode get_Input();
    public void set_Input(AstNode value);
    public string get_Prefix();
    public string get_Name();
    public XPathNodeType get_NodeType();
    public AxisType get_TypeOfAxis();
    public bool get_AbbrAxis();
    public string get_Urn();
    public void set_Urn(string value);
}
internal abstract class MS.Internal.Xml.XPath.BaseAxisQuery : Query {
    internal Query qyInput;
    protected XPathNavigator currentNode;
    protected int position;
    protected string Name { get; }
    protected string Prefix { get; }
    protected string Namespace { get; }
    protected bool NameTest { get; }
    protected XPathNodeType TypeTest { get; }
    public int CurrentPosition { get; }
    public XPathNavigator Current { get; }
    public double XsltDefaultPriority { get; }
    public XPathResultType StaticType { get; }
    protected BaseAxisQuery(Query qyInput);
    protected BaseAxisQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    protected BaseAxisQuery(BaseAxisQuery other);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext context);
    protected string get_Name();
    protected string get_Prefix();
    protected string get_Namespace();
    protected bool get_NameTest();
    protected XPathNodeType get_TypeTest();
    public virtual int get_CurrentPosition();
    public virtual XPathNavigator get_Current();
    public virtual bool matches(XPathNavigator e);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual double get_XsltDefaultPriority();
    public virtual XPathResultType get_StaticType();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.BooleanExpr : ValueQuery {
    public XPathResultType StaticType { get; }
    public BooleanExpr(Op op, Query opnd1, Query opnd2);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.BooleanFunctions : ValueQuery {
    public XPathResultType StaticType { get; }
    public BooleanFunctions(FunctionType funcType, Query arg);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    internal static bool toBoolean(double number);
    internal static bool toBoolean(string str);
    internal bool toBoolean(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal abstract class MS.Internal.Xml.XPath.CacheAxisQuery : BaseAxisQuery {
    protected List`1<XPathNavigator> outputBuffer;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public CacheAxisQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    protected CacheAxisQuery(CacheAxisQuery other);
    public virtual void Reset();
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.CacheChildrenQuery : ChildrenQuery {
    public CacheChildrenQuery(Query qyInput, string name, string prefix, XPathNodeType type);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal abstract class MS.Internal.Xml.XPath.CacheOutputQuery : Query {
    internal Query input;
    protected List`1<XPathNavigator> outputBuffer;
    public XPathNavigator Current { get; }
    public XPathResultType StaticType { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public CacheOutputQuery(Query input);
    protected CacheOutputQuery(CacheOutputQuery other);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator get_Current();
    public virtual XPathResultType get_StaticType();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.ChildrenQuery : BaseAxisQuery {
    public ChildrenQuery(Query qyInput, string name, string prefix, XPathNodeType type);
    protected ChildrenQuery(ChildrenQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public sealed virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.ClonableStack`1 : List`1<T> {
    public ClonableStack`1(int capacity);
    private ClonableStack`1(IEnumerable`1<T> collection);
    public void Push(T value);
    public T Pop();
    public T Peek();
    public ClonableStack`1<T> Clone();
}
internal class MS.Internal.Xml.XPath.CompiledXpathExpr : XPathExpression {
    internal Query QueryTree { get; }
    public string Expression { get; }
    public XPathResultType ReturnType { get; }
    internal CompiledXpathExpr(Query query, string expression, bool needContext);
    internal Query get_QueryTree();
    public virtual string get_Expression();
    public virtual void CheckErrors();
    public virtual void AddSort(object expr, IComparer comparer);
    public virtual void AddSort(object expr, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public virtual XPathExpression Clone();
    public virtual void SetContext(XmlNamespaceManager nsManager);
    public virtual void SetContext(IXmlNamespaceResolver nsResolver);
    public virtual XPathResultType get_ReturnType();
}
internal class MS.Internal.Xml.XPath.ContextQuery : Query {
    protected XPathNavigator contextNode;
    public XPathNavigator Current { get; }
    public XPathResultType StaticType { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    protected ContextQuery(ContextQuery other);
    public virtual void Reset();
    public virtual XPathNavigator get_Current();
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
}
internal abstract class MS.Internal.Xml.XPath.DescendantBaseQuery : BaseAxisQuery {
    protected bool matchSelf;
    protected bool abbrAxis;
    public DescendantBaseQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type, bool matchSelf, bool abbrAxis);
    public DescendantBaseQuery(DescendantBaseQuery other);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.DescendantOverDescendantQuery : DescendantBaseQuery {
    public DescendantOverDescendantQuery(Query qyParent, bool matchSelf, string name, string prefix, XPathNodeType typeTest, bool abbrAxis);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.DescendantQuery : DescendantBaseQuery {
    internal DescendantQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type, bool matchSelf, bool abbrAxis);
    public DescendantQuery(DescendantQuery other);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.DocumentOrderQuery : CacheOutputQuery {
    public DocumentOrderQuery(Query qyParent);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.EmptyQuery : Query {
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public XPathResultType StaticType { get; }
    public XPathNavigator Current { get; }
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
    public virtual XPathResultType get_StaticType();
    public virtual void Reset();
    public virtual XPathNavigator get_Current();
}
internal abstract class MS.Internal.Xml.XPath.ExtensionQuery : Query {
    protected string prefix;
    protected string name;
    protected XsltContext xsltContext;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    protected string QName { get; }
    public int Count { get; }
    public XPathResultType StaticType { get; }
    public ExtensionQuery(string prefix, string name);
    protected ExtensionQuery(ExtensionQuery other);
    public virtual void Reset();
    public virtual XPathNavigator get_Current();
    public virtual XPathNavigator Advance();
    public virtual int get_CurrentPosition();
    protected object ProcessResult(object value);
    protected string get_QName();
    public virtual int get_Count();
    public virtual XPathResultType get_StaticType();
}
internal class MS.Internal.Xml.XPath.Filter : AstNode {
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public AstNode Input { get; }
    public AstNode Condition { get; }
    public Filter(AstNode input, AstNode condition);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public AstNode get_Input();
    public AstNode get_Condition();
}
internal class MS.Internal.Xml.XPath.FilterQuery : BaseAxisQuery {
    public Query Condition { get; }
    public QueryProps Properties { get; }
    public FilterQuery(Query qyParent, Query cond, bool noPosition);
    public virtual void Reset();
    public Query get_Condition();
    public virtual void SetXsltContext(XsltContext input);
    public virtual XPathNavigator Advance();
    internal bool EvaluatePredicate();
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual QueryProps get_Properties();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.FollowingQuery : BaseAxisQuery {
    public FollowingQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.FollSiblingQuery : BaseAxisQuery {
    public FollSiblingQuery(Query qyInput, string name, string prefix, XPathNodeType type);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.ForwardPositionQuery : CacheOutputQuery {
    public ForwardPositionQuery(Query input);
    protected ForwardPositionQuery(ForwardPositionQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.Function : AstNode {
    internal static XPathResultType[] ReturnTypes;
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public FunctionType TypeOfFunction { get; }
    public ArrayList ArgumentList { get; }
    public string Prefix { get; }
    public string Name { get; }
    public Function(FunctionType ftype, ArrayList argumentList);
    public Function(string prefix, string name, ArrayList argumentList);
    public Function(FunctionType ftype);
    public Function(FunctionType ftype, AstNode arg);
    private static Function();
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public FunctionType get_TypeOfFunction();
    public ArrayList get_ArgumentList();
    public string get_Prefix();
    public string get_Name();
}
internal class MS.Internal.Xml.XPath.FunctionQuery : ExtensionQuery {
    public XPathResultType StaticType { get; }
    public FunctionQuery(string prefix, string name, List`1<Query> args);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNavigator MatchNode(XPathNavigator navigator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.Group : AstNode {
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public AstNode GroupNode { get; }
    public Group(AstNode groupNode);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public AstNode get_GroupNode();
}
internal class MS.Internal.Xml.XPath.GroupQuery : BaseAxisQuery {
    public XPathResultType StaticType { get; }
    public QueryProps Properties { get; }
    public GroupQuery(Query qy);
    public virtual XPathNavigator Advance();
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.IDQuery : CacheOutputQuery {
    public IDQuery(Query arg);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator MatchNode(XPathNavigator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.IteratorFilter : XPathNodeIterator {
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    internal IteratorFilter(XPathNodeIterator innerIterator, string name);
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.XPath.LogicalExpr : ValueQuery {
    public XPathResultType StaticType { get; }
    public LogicalExpr(Op op, Query opnd1, Query opnd2);
    private static LogicalExpr();
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.MergeFilterQuery : CacheOutputQuery {
    public MergeFilterQuery(Query input, Query child);
    public virtual void SetXsltContext(XsltContext xsltContext);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.NamespaceQuery : BaseAxisQuery {
    public NamespaceQuery(Query qyParent, string Name, string Prefix, XPathNodeType Type);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual bool matches(XPathNavigator e);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.NodeFunctions : ValueQuery {
    public XPathResultType StaticType { get; }
    public NodeFunctions(FunctionType funcType, Query arg);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.NumberFunctions : ValueQuery {
    public XPathResultType StaticType { get; }
    public NumberFunctions(FunctionType ftype, Query arg);
    public virtual void SetXsltContext(XsltContext context);
    internal static double Number(bool arg);
    internal static double Number(string arg);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.NumericExpr : ValueQuery {
    public XPathResultType StaticType { get; }
    public NumericExpr(Op op, Query opnd1, Query opnd2);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.Operand : AstNode {
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public object OperandValue { get; }
    public Operand(string val);
    public Operand(double val);
    public Operand(bool val);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public object get_OperandValue();
}
internal class MS.Internal.Xml.XPath.OperandQuery : ValueQuery {
    internal object val;
    public XPathResultType StaticType { get; }
    public OperandQuery(object val);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.Operator : AstNode {
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public Op OperatorType { get; }
    public AstNode Operand1 { get; }
    public AstNode Operand2 { get; }
    public Operator(Op op, AstNode opnd1, AstNode opnd2);
    private static Operator();
    public static Op InvertOperator(Op op);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public Op get_OperatorType();
    public AstNode get_Operand1();
    public AstNode get_Operand2();
}
internal class MS.Internal.Xml.XPath.ParentQuery : CacheAxisQuery {
    public ParentQuery(Query qyInput, string Name, string Prefix, XPathNodeType Type);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.PrecedingQuery : BaseAxisQuery {
    public QueryProps Properties { get; }
    public PrecedingQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    public virtual void Reset();
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.PreSiblingQuery : CacheAxisQuery {
    public QueryProps Properties { get; }
    public PreSiblingQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest);
    protected PreSiblingQuery(PreSiblingQuery other);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNodeIterator Clone();
    public virtual QueryProps get_Properties();
}
[DebuggerDisplayAttribute("{ToString()}")]
internal abstract class MS.Internal.Xml.XPath.Query : ResetableIterator {
    public static XPathResultType XPathResultType_Navigator;
    public int Count { get; }
    public double XsltDefaultPriority { get; }
    public XPathResultType StaticType { get; }
    public QueryProps Properties { get; }
    protected Query(Query other);
    public virtual bool MoveNext();
    public virtual int get_Count();
    public virtual void SetXsltContext(XsltContext context);
    public abstract virtual object Evaluate(XPathNodeIterator nodeIterator);
    public abstract virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator current);
    public virtual double get_XsltDefaultPriority();
    public abstract virtual XPathResultType get_StaticType();
    public virtual QueryProps get_Properties();
    public static Query Clone(Query input);
    protected static XPathNodeIterator Clone(XPathNodeIterator input);
    protected static XPathNavigator Clone(XPathNavigator input);
    public bool Insert(List`1<XPathNavigator> buffer, XPathNavigator nav);
    public static XmlNodeOrder CompareNodes(XPathNavigator l, XPathNavigator r);
    [ConditionalAttribute("DEBUG")]
public static void AssertQuery(Query query);
    protected XPathResultType GetXPathType(object value);
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.QueryBuilder : object {
    internal Query Build(string query, bool allowVar, bool allowKey);
    internal Query Build(string query, Boolean& needContext);
    internal Query BuildPatternQuery(string query, bool allowVar, bool allowKey);
    internal Query BuildPatternQuery(string query, Boolean& needContext);
}
internal enum MS.Internal.Xml.XPath.QueryProps : Enum {
    public int value__;
    public static QueryProps None;
    public static QueryProps Position;
    public static QueryProps Count;
    public static QueryProps Cached;
    public static QueryProps Reverse;
    public static QueryProps Merge;
}
internal abstract class MS.Internal.Xml.XPath.ResetableIterator : XPathNodeIterator {
    public int CurrentPosition { get; }
    protected ResetableIterator(ResetableIterator other);
    protected void ResetCount();
    public abstract virtual void Reset();
    public virtual bool MoveToPosition(int pos);
    public abstract virtual int get_CurrentPosition();
}
internal class MS.Internal.Xml.XPath.ReversePositionQuery : ForwardPositionQuery {
    public int CurrentPosition { get; }
    public QueryProps Properties { get; }
    public ReversePositionQuery(Query input);
    public virtual XPathNodeIterator Clone();
    public virtual int get_CurrentPosition();
    public virtual QueryProps get_Properties();
}
internal class MS.Internal.Xml.XPath.Root : AstNode {
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
}
[DefaultMemberAttribute("Item")]
internal class MS.Internal.Xml.XPath.SortKey : object {
    public object Item { get; public set; }
    public int NumKeys { get; }
    public int OriginalPosition { get; }
    public XPathNavigator Node { get; }
    public SortKey(int numKeys, int originalPosition, XPathNavigator node);
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public int get_NumKeys();
    public int get_OriginalPosition();
    public XPathNavigator get_Node();
}
internal class MS.Internal.Xml.XPath.SortQuery : Query {
    public XPathNavigator Current { get; }
    public XPathResultType StaticType { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public QueryProps Properties { get; }
    public SortQuery(Query qyInput);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext xsltContext);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator get_Current();
    internal void AddSort(Query evalQuery, IComparer comparer);
    public virtual XPathNodeIterator Clone();
    public virtual XPathResultType get_StaticType();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual QueryProps get_Properties();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.StringFunctions : ValueQuery {
    public XPathResultType StaticType { get; }
    public StringFunctions(FunctionType funcType, IList`1<Query> argList);
    private static StringFunctions();
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    internal static string toString(double num);
    internal static string toString(bool b);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.UnionExpr : Query {
    internal Query qy1;
    internal Query qy2;
    public XPathResultType StaticType { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public UnionExpr(Query query1, Query query2);
    public virtual void Reset();
    public virtual void SetXsltContext(XsltContext xsltContext);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNavigator Advance();
    public virtual XPathNavigator MatchNode(XPathNavigator xsltContext);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual void PrintQuery(XmlWriter w);
}
internal abstract class MS.Internal.Xml.XPath.ValueQuery : Query {
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    protected ValueQuery(ValueQuery other);
    public sealed virtual void Reset();
    public sealed virtual XPathNavigator get_Current();
    public sealed virtual int get_CurrentPosition();
    public sealed virtual int get_Count();
    public sealed virtual XPathNavigator Advance();
}
internal class MS.Internal.Xml.XPath.Variable : AstNode {
    public AstType Type { get; }
    public XPathResultType ReturnType { get; }
    public string Localname { get; }
    public string Prefix { get; }
    public Variable(string name, string prefix);
    public virtual AstType get_Type();
    public virtual XPathResultType get_ReturnType();
    public string get_Localname();
    public string get_Prefix();
}
internal class MS.Internal.Xml.XPath.VariableQuery : ExtensionQuery {
    public XPathResultType StaticType { get; }
    public VariableQuery(string name, string prefix);
    public virtual void SetXsltContext(XsltContext context);
    public virtual object Evaluate(XPathNodeIterator nodeIterator);
    public virtual XPathResultType get_StaticType();
    public virtual XPathNodeIterator Clone();
    public virtual void PrintQuery(XmlWriter w);
}
internal class MS.Internal.Xml.XPath.XPathAncestorIterator : XPathAxisIterator {
    public XPathAncestorIterator(XPathNavigator nav, XPathNodeType type, bool matchSelf);
    public XPathAncestorIterator(XPathNavigator nav, string name, string namespaceURI, bool matchSelf);
    public XPathAncestorIterator(XPathAncestorIterator other);
    public virtual bool MoveNext();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.XPathAncestorQuery : CacheAxisQuery {
    public int CurrentPosition { get; }
    public QueryProps Properties { get; }
    public XPathAncestorQuery(Query qyInput, string name, string prefix, XPathNodeType typeTest, bool matchSelf);
    public virtual object Evaluate(XPathNodeIterator context);
    public virtual XPathNodeIterator Clone();
    public virtual int get_CurrentPosition();
    public virtual QueryProps get_Properties();
    public virtual void PrintQuery(XmlWriter w);
}
[DebuggerDisplayAttribute("Position={CurrentPosition}, Current={debuggerDisplayProxy, nq}")]
internal class MS.Internal.Xml.XPath.XPathArrayIterator : ResetableIterator {
    protected IList list;
    protected int index;
    public IList AsList { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public XPathArrayIterator(IList list);
    public XPathArrayIterator(XPathArrayIterator it);
    public XPathArrayIterator(XPathNodeIterator nodeIterator);
    public IList get_AsList();
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual bool MoveNext();
    public virtual void Reset();
    public virtual IEnumerator GetEnumerator();
}
internal abstract class MS.Internal.Xml.XPath.XPathAxisIterator : XPathNodeIterator {
    internal XPathNavigator nav;
    internal XPathNodeType type;
    internal string name;
    internal string uri;
    internal int position;
    internal bool matchSelf;
    internal bool first;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    protected bool Matches { get; }
    public XPathAxisIterator(XPathNavigator nav, bool matchSelf);
    public XPathAxisIterator(XPathNavigator nav, XPathNodeType type, bool matchSelf);
    public XPathAxisIterator(XPathNavigator nav, string name, string namespaceURI, bool matchSelf);
    public XPathAxisIterator(XPathAxisIterator it);
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    protected virtual bool get_Matches();
}
internal class MS.Internal.Xml.XPath.XPathChildIterator : XPathAxisIterator {
    public XPathChildIterator(XPathNavigator nav, XPathNodeType type);
    public XPathChildIterator(XPathNavigator nav, string name, string namespaceURI);
    public XPathChildIterator(XPathChildIterator it);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.XPath.XPathComparerHelper : object {
    public XPathComparerHelper(XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public sealed virtual int Compare(object x, object y);
}
internal class MS.Internal.Xml.XPath.XPathDescendantIterator : XPathAxisIterator {
    public XPathDescendantIterator(XPathNavigator nav, XPathNodeType type, bool matchSelf);
    public XPathDescendantIterator(XPathNavigator nav, string name, string namespaceURI, bool matchSelf);
    public XPathDescendantIterator(XPathDescendantIterator it);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.XPath.XPathEmptyIterator : ResetableIterator {
    public static XPathEmptyIterator Instance;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    private static XPathEmptyIterator();
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual bool MoveNext();
    public virtual void Reset();
}
internal class MS.Internal.Xml.XPath.XPathMultyIterator : ResetableIterator {
    protected ResetableIterator[] arr;
    protected int firstNotEmpty;
    protected int position;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public XPathMultyIterator(ArrayList inputArray);
    public XPathMultyIterator(XPathMultyIterator it);
    public virtual void Reset();
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual bool MoveNext();
}
internal class MS.Internal.Xml.XPath.XPathParser : object {
    private static XPathParser();
    public static AstNode ParseXPathExpresion(string xpathExpresion);
    public static AstNode ParseXPathPattern(string xpathPattern);
}
internal class MS.Internal.Xml.XPath.XPathScanner : object {
    public string SourceText { get; }
    public LexKind Kind { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string StringValue { get; }
    public double NumberValue { get; }
    public bool CanBeFunction { get; }
    public XPathScanner(string xpathExpr);
    public string get_SourceText();
    public LexKind get_Kind();
    public string get_Name();
    public string get_Prefix();
    public string get_StringValue();
    public double get_NumberValue();
    public bool get_CanBeFunction();
    public bool NextLex();
}
internal class MS.Internal.Xml.XPath.XPathSelectionIterator : ResetableIterator {
    public int Count { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    internal XPathSelectionIterator(XPathNavigator nav, Query query);
    protected XPathSelectionIterator(XPathSelectionIterator it);
    public virtual void Reset();
    public virtual bool MoveNext();
    public virtual int get_Count();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.XPathSelfQuery : BaseAxisQuery {
    public XPathSelfQuery(Query qyInput, string Name, string Prefix, XPathNodeType Type);
    public virtual XPathNavigator Advance();
    public virtual XPathNodeIterator Clone();
}
internal class MS.Internal.Xml.XPath.XPathSingletonIterator : ResetableIterator {
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    public XPathSingletonIterator(XPathNavigator nav);
    public XPathSingletonIterator(XPathNavigator nav, bool moved);
    public XPathSingletonIterator(XPathSingletonIterator it);
    public virtual XPathNodeIterator Clone();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual bool MoveNext();
    public virtual void Reset();
}
internal class MS.Internal.Xml.XPath.XPathSortComparer : object {
    public int NumSorts { get; }
    public XPathSortComparer(int size);
    public void AddSort(Query evalQuery, IComparer comparer);
    public int get_NumSorts();
    public Query Expression(int i);
    private sealed virtual override int System.Collections.Generic.IComparer<MS.Internal.Xml.XPath.SortKey>.Compare(SortKey x, SortKey y);
    internal XPathSortComparer Clone();
}
internal static class System.AppContextDefaultValues : object {
    public static void PopulateDefaultValues();
}
internal static class System.Configuration.PrivilegedConfigurationManager : object {
    internal static ConnectionStringSettingsCollection ConnectionStrings { get; }
    internal static ConnectionStringSettingsCollection get_ConnectionStrings();
    internal static object GetSection(string sectionName);
}
internal static class System.HResults : object {
    internal static int Configuration;
    internal static int Xml;
    internal static int XmlSchema;
    internal static int XmlXslt;
    internal static int XmlXPath;
    internal static int Data;
    internal static int DataDeletedRowInaccessible;
    internal static int DataDuplicateName;
    internal static int DataInRowChangingEvent;
    internal static int DataInvalidConstraint;
    internal static int DataMissingPrimaryKey;
    internal static int DataNoNullAllowed;
    internal static int DataReadOnly;
    internal static int DataRowNotInTable;
    internal static int DataVersionNotFound;
    internal static int DataConstraint;
    internal static int StrongTyping;
    internal static int SqlType;
    internal static int SqlNullValue;
    internal static int SqlTruncate;
    internal static int AdapterMapping;
    internal static int DataAdapter;
    internal static int DBConcurrency;
    internal static int OperationAborted;
    internal static int InvalidUdt;
    internal static int Metadata;
    internal static int InvalidQuery;
    internal static int CommandCompilation;
    internal static int CommandExecution;
    internal static int SqlException;
    internal static int OdbcException;
    internal static int OracleException;
    internal static int ConnectionPlanException;
    internal static int NteBadKeySet;
    internal static int Win32AccessDenied;
    internal static int Win32InvalidHandle;
    internal static int License;
    internal static int InternalBufferOverflow;
    internal static int ServiceControllerTimeout;
    internal static int Install;
    internal static int EFail;
}
internal class System.InvariantComparer : object {
    internal static InvariantComparer Default;
    private static InvariantComparer();
    public sealed virtual int Compare(object a, object b);
}
internal static class System.LocalAppContext : object {
    private static LocalAppContext();
    public static bool IsSwitchEnabled(string switchName);
    internal static bool GetCachedSwitchValue(string switchName, Int32& switchValue);
    internal static void DefineSwitchDefault(string switchName, bool initialValue);
}
internal static class System.LocalAppContextSwitches : object {
    public static bool DontThrowOnInvalidSurrogatePairs { get; }
    public static bool IgnoreEmptyKeySequences { get; }
    public static bool get_DontThrowOnInvalidSurrogatePairs();
    public static bool get_IgnoreEmptyKeySequences();
}
[ExtensionAttribute]
internal static class System.Xml.AsyncHelper : object {
    public static Task DoneTask;
    public static Task`1<bool> DoneTaskTrue;
    public static Task`1<bool> DoneTaskFalse;
    public static Task`1<int> DoneTaskZero;
    private static AsyncHelper();
    [ExtensionAttribute]
public static bool IsSuccess(Task task);
    [ExtensionAttribute]
public static Task CallVoidFuncWhenFinish(Task task, Action func);
    [ExtensionAttribute]
public static Task`1<bool> ReturnTaskBoolWhenFinish(Task task, bool ret);
    [AsyncStateMachineAttribute("System.Xml.AsyncHelper/<_ReturnTaskBoolWhenFinish>d__1")]
[ExtensionAttribute]
public static Task`1<bool> _ReturnTaskBoolWhenFinish(Task task, bool ret);
    [ExtensionAttribute]
public static Task CallTaskFuncWhenFinish(Task task, Func`1<Task> func);
    [ExtensionAttribute]
public static Task`1<bool> CallBoolTaskFuncWhenFinish(Task task, Func`1<Task`1<bool>> func);
    [ExtensionAttribute]
public static Task`1<bool> ContinueBoolTaskFuncWhenFalse(Task`1<bool> task, Func`1<Task`1<bool>> func);
}
internal enum System.Xml.AttributeProperties : Enum {
    public UInt32 value__;
    public static AttributeProperties DEFAULT;
    public static AttributeProperties URI;
    public static AttributeProperties BOOLEAN;
    public static AttributeProperties NAME;
}
internal class System.Xml.AttributePSVIInfo : object {
    internal string localName;
    internal string namespaceUri;
    internal object typedAttributeValue;
    internal XmlSchemaInfo attributeSchemaInfo;
    internal void Reset();
}
internal class System.Xml.Base64Decoder : IncrementalReadDecoder {
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    private static Base64Decoder();
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    internal virtual int Decode(Char[] chars, int startPos, int len);
    internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
    internal virtual void SetNextOutputBuffer(Array buffer, int index, int count);
}
internal abstract class System.Xml.Base64Encoder : object {
    internal static int Base64LineSize;
    internal static int LineSizeInBytes;
    internal abstract virtual void WriteChars(Char[] chars, int index, int count);
    internal void Encode(Byte[] buffer, int index, int count);
    internal void Flush();
    internal abstract virtual Task WriteCharsAsync(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.Base64Encoder/<EncodeAsync>d__1")]
internal Task EncodeAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.Base64Encoder/<FlushAsync>d__1")]
internal Task FlushAsync();
}
internal static class System.Xml.BinaryCompatibility : object {
    internal static bool TargetsAtLeast_Desktop_V4_5_2 { get; }
    private static BinaryCompatibility();
    internal static bool get_TargetsAtLeast_Desktop_V4_5_2();
}
internal class System.Xml.BinHexDecoder : IncrementalReadDecoder {
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    internal virtual int Decode(Char[] chars, int startPos, int len);
    internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
    internal virtual void SetNextOutputBuffer(Array buffer, int index, int count);
    public static Byte[] Decode(Char[] chars, bool allowOddChars);
}
internal static class System.Xml.BinHexEncoder : object {
    internal static void Encode(Byte[] buffer, int index, int count, XmlWriter writer);
    internal static string Encode(Byte[] inArray, int offsetIn, int count);
    [AsyncStateMachineAttribute("System.Xml.BinHexEncoder/<EncodeAsync>d__1")]
internal static Task EncodeAsync(Byte[] buffer, int index, int count, XmlWriter writer);
}
internal abstract class System.Xml.BinXmlDateTime : object {
    internal static Int32[] KatmaiTimeScaleMultiplicator;
    public static int SQLTicksPerSecond;
    public static int SQLTicksPerMinute;
    public static int SQLTicksPerHour;
    private static BinXmlDateTime();
    public static string XsdDateTimeToString(long val);
    public static DateTime XsdDateTimeToDateTime(long val);
    public static string XsdDateToString(long val);
    public static DateTime XsdDateToDateTime(long val);
    public static string XsdTimeToString(long val);
    public static DateTime XsdTimeToDateTime(long val);
    public static string SqlDateTimeToString(int dateticks, UInt32 timeticks);
    public static DateTime SqlDateTimeToDateTime(int dateticks, UInt32 timeticks);
    public static string SqlSmallDateTimeToString(short dateticks, ushort timeticks);
    public static DateTime SqlSmallDateTimeToDateTime(short dateticks, ushort timeticks);
    public static DateTime XsdKatmaiDateToDateTime(Byte[] data, int offset);
    public static DateTime XsdKatmaiDateTimeToDateTime(Byte[] data, int offset);
    public static DateTime XsdKatmaiTimeToDateTime(Byte[] data, int offset);
    public static DateTime XsdKatmaiDateOffsetToDateTime(Byte[] data, int offset);
    public static DateTime XsdKatmaiDateTimeOffsetToDateTime(Byte[] data, int offset);
    public static DateTime XsdKatmaiTimeOffsetToDateTime(Byte[] data, int offset);
    public static DateTimeOffset XsdKatmaiDateToDateTimeOffset(Byte[] data, int offset);
    public static DateTimeOffset XsdKatmaiDateTimeToDateTimeOffset(Byte[] data, int offset);
    public static DateTimeOffset XsdKatmaiTimeToDateTimeOffset(Byte[] data, int offset);
    public static DateTimeOffset XsdKatmaiDateOffsetToDateTimeOffset(Byte[] data, int offset);
    public static DateTimeOffset XsdKatmaiDateTimeOffsetToDateTimeOffset(Byte[] data, int offset);
    public static DateTimeOffset XsdKatmaiTimeOffsetToDateTimeOffset(Byte[] data, int offset);
    public static string XsdKatmaiDateToString(Byte[] data, int offset);
    public static string XsdKatmaiDateTimeToString(Byte[] data, int offset);
    public static string XsdKatmaiTimeToString(Byte[] data, int offset);
    public static string XsdKatmaiDateOffsetToString(Byte[] data, int offset);
    public static string XsdKatmaiDateTimeOffsetToString(Byte[] data, int offset);
    public static string XsdKatmaiTimeOffsetToString(Byte[] data, int offset);
}
internal class System.Xml.BinXmlSqlDecimal : ValueType {
    internal byte m_bLen;
    internal byte m_bPrec;
    internal byte m_bScale;
    internal byte m_bSign;
    internal UInt32 m_data1;
    internal UInt32 m_data2;
    internal UInt32 m_data3;
    internal UInt32 m_data4;
    internal static ulong x_llMax;
    public bool IsPositive { get; }
    public BinXmlSqlDecimal(Byte[] data, int offset, bool trim);
    private static BinXmlSqlDecimal();
    public bool get_IsPositive();
    public void Write(Stream strm);
    internal void AdjustScale(int digits, bool fRound);
    internal UInt32 DivByULong(UInt32 iDivisor);
    public decimal ToDecimal();
    public virtual string ToString();
}
internal class System.Xml.BinXmlSqlMoney : ValueType {
    private long data;
    public BinXmlSqlMoney(int v);
    public BinXmlSqlMoney(long v);
    public decimal ToDecimal();
    public virtual string ToString();
}
internal enum System.Xml.BinXmlToken : Enum {
    public int value__;
    public static BinXmlToken Error;
    public static BinXmlToken NotImpl;
    public static BinXmlToken EOF;
    public static BinXmlToken XmlDecl;
    public static BinXmlToken Encoding;
    public static BinXmlToken DocType;
    public static BinXmlToken System;
    public static BinXmlToken Public;
    public static BinXmlToken Subset;
    public static BinXmlToken Element;
    public static BinXmlToken EndElem;
    public static BinXmlToken Attr;
    public static BinXmlToken EndAttrs;
    public static BinXmlToken PI;
    public static BinXmlToken Comment;
    public static BinXmlToken CData;
    public static BinXmlToken EndCData;
    public static BinXmlToken Name;
    public static BinXmlToken QName;
    public static BinXmlToken XmlText;
    public static BinXmlToken Nest;
    public static BinXmlToken EndNest;
    public static BinXmlToken Extn;
    public static BinXmlToken NmFlush;
    public static BinXmlToken SQL_BIT;
    public static BinXmlToken SQL_TINYINT;
    public static BinXmlToken SQL_SMALLINT;
    public static BinXmlToken SQL_INT;
    public static BinXmlToken SQL_BIGINT;
    public static BinXmlToken SQL_REAL;
    public static BinXmlToken SQL_FLOAT;
    public static BinXmlToken SQL_MONEY;
    public static BinXmlToken SQL_SMALLMONEY;
    public static BinXmlToken SQL_DATETIME;
    public static BinXmlToken SQL_SMALLDATETIME;
    public static BinXmlToken SQL_DECIMAL;
    public static BinXmlToken SQL_NUMERIC;
    public static BinXmlToken SQL_UUID;
    public static BinXmlToken SQL_VARBINARY;
    public static BinXmlToken SQL_BINARY;
    public static BinXmlToken SQL_IMAGE;
    public static BinXmlToken SQL_CHAR;
    public static BinXmlToken SQL_VARCHAR;
    public static BinXmlToken SQL_TEXT;
    public static BinXmlToken SQL_NVARCHAR;
    public static BinXmlToken SQL_NCHAR;
    public static BinXmlToken SQL_NTEXT;
    public static BinXmlToken SQL_UDT;
    public static BinXmlToken XSD_KATMAI_DATE;
    public static BinXmlToken XSD_KATMAI_DATETIME;
    public static BinXmlToken XSD_KATMAI_TIME;
    public static BinXmlToken XSD_KATMAI_DATEOFFSET;
    public static BinXmlToken XSD_KATMAI_DATETIMEOFFSET;
    public static BinXmlToken XSD_KATMAI_TIMEOFFSET;
    public static BinXmlToken XSD_BOOLEAN;
    public static BinXmlToken XSD_TIME;
    public static BinXmlToken XSD_DATETIME;
    public static BinXmlToken XSD_DATE;
    public static BinXmlToken XSD_BINHEX;
    public static BinXmlToken XSD_BASE64;
    public static BinXmlToken XSD_DECIMAL;
    public static BinXmlToken XSD_BYTE;
    public static BinXmlToken XSD_UNSIGNEDSHORT;
    public static BinXmlToken XSD_UNSIGNEDINT;
    public static BinXmlToken XSD_UNSIGNEDLONG;
    public static BinXmlToken XSD_QNAME;
}
internal static class System.Xml.Bits : object {
    private static Bits();
    public static int Count(UInt32 num);
    public static bool ExactlyOne(UInt32 num);
    public static bool MoreThanOne(UInt32 num);
    public static UInt32 ClearLeast(UInt32 num);
    public static int LeastPosition(UInt32 num);
}
internal class System.Xml.BitStack : object {
    public bool IsEmpty { get; }
    public void PushBit(bool bit);
    public bool PopBit();
    public bool PeekBit();
    public bool get_IsEmpty();
}
internal class System.Xml.ByteStack : object {
    public int Length { get; }
    public ByteStack(int growthRate);
    public void Push(byte data);
    public byte Pop();
    public byte Peek();
    public int get_Length();
}
internal class System.Xml.CachingEventHandler : MulticastDelegate {
    public CachingEventHandler(object object, IntPtr method);
    public virtual void Invoke(XsdCachingReader cachingReader);
    public virtual IAsyncResult BeginInvoke(XsdCachingReader cachingReader, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xml.CharEntityEncoderFallback : EncoderFallback {
    public int MaxCharCount { get; }
    internal int StartOffset { get; internal set; }
    public virtual EncoderFallbackBuffer CreateFallbackBuffer();
    public virtual int get_MaxCharCount();
    internal int get_StartOffset();
    internal void set_StartOffset(int value);
    internal void Reset(Int32[] textContentMarks, int endMarkPos);
    internal bool CanReplaceAt(int index);
}
internal class System.Xml.CharEntityEncoderFallbackBuffer : EncoderFallbackBuffer {
    public int Remaining { get; }
    internal CharEntityEncoderFallbackBuffer(CharEntityEncoderFallback parent);
    public virtual bool Fallback(char charUnknown, int index);
    public virtual bool Fallback(char charUnknownHigh, char charUnknownLow, int index);
    public virtual char GetNextChar();
    public virtual bool MovePrevious();
    public virtual int get_Remaining();
    public virtual void Reset();
}
public enum System.Xml.ConformanceLevel : Enum {
    public int value__;
    public static ConformanceLevel Auto;
    public static ConformanceLevel Fragment;
    public static ConformanceLevel Document;
}
[DebuggerDisplayAttribute("{ToString()}")]
internal class System.Xml.DebuggerDisplayXmlNodeProxy : ValueType {
    private XmlNode node;
    public DebuggerDisplayXmlNodeProxy(XmlNode node);
    public virtual string ToString();
}
internal static class System.Xml.DiagnosticsSwitches : object {
    public static BooleanSwitch XmlSchemaContentModel { get; }
    public static TraceSwitch XmlSchema { get; }
    public static BooleanSwitch KeepTempFiles { get; }
    public static BooleanSwitch PregenEventLog { get; }
    public static TraceSwitch XmlSerialization { get; }
    public static TraceSwitch XslTypeInference { get; }
    public static BooleanSwitch NonRecursiveTypeLoading { get; }
    public static BooleanSwitch get_XmlSchemaContentModel();
    public static TraceSwitch get_XmlSchema();
    public static BooleanSwitch get_KeepTempFiles();
    public static BooleanSwitch get_PregenEventLog();
    public static TraceSwitch get_XmlSerialization();
    public static TraceSwitch get_XslTypeInference();
    public static BooleanSwitch get_NonRecursiveTypeLoading();
}
internal class System.Xml.DocumentSchemaValidator : object {
    public bool PsviAugmentation { get; public set; }
    public DocumentSchemaValidator(XmlDocument ownerDocument, XmlSchemaSet schemas, ValidationEventHandler eventHandler);
    public bool get_PsviAugmentation();
    public void set_PsviAugmentation(bool value);
    public bool Validate(XmlNode nodeToValidate);
    public sealed virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public sealed virtual string LookupNamespace(string prefix);
    public sealed virtual string LookupPrefix(string namespaceName);
}
internal class System.Xml.DocumentXmlWriter : XmlRawWriter {
    unknown XmlNamespaceManager NamespaceManager {public set; }
    public XmlWriterSettings Settings { get; }
    unknown DocumentXPathNavigator Navigator {public set; }
    unknown XmlNode EndNode {public set; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public DocumentXmlWriter(DocumentXmlWriterType type, XmlNode start, XmlDocument document);
    private static DocumentXmlWriter();
    public void set_NamespaceManager(XmlNamespaceManager value);
    public virtual XmlWriterSettings get_Settings();
    internal void SetSettings(XmlWriterSettings value);
    public void set_Navigator(DocumentXPathNavigator value);
    public void set_EndNode(XmlNode value);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    public virtual void WriteFullEndElement();
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string text);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowCh, char highCh);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void Close();
    internal virtual void Close(WriteState currentState);
    public virtual void Flush();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
internal enum System.Xml.DocumentXmlWriterType : Enum {
    public int value__;
    public static DocumentXmlWriterType InsertSiblingAfter;
    public static DocumentXmlWriterType InsertSiblingBefore;
    public static DocumentXmlWriterType PrependChild;
    public static DocumentXmlWriterType AppendChild;
    public static DocumentXmlWriterType AppendAttribute;
    public static DocumentXmlWriterType ReplaceToFollowingSibling;
}
internal class System.Xml.DocumentXPathNavigator : XPathNavigator {
    public XmlNameTable NameTable { get; }
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string Value { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public string XmlLang { get; }
    public object UnderlyingObject { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public bool CanEdit { get; }
    public DocumentXPathNavigator(XmlDocument document, XmlNode node);
    public DocumentXPathNavigator(DocumentXPathNavigator other);
    public virtual XPathNavigator Clone();
    public virtual void SetValue(string value);
    public virtual XmlNameTable get_NameTable();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual string get_XmlLang();
    public virtual object get_UnderlyingObject();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string name);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope scope);
    public virtual string LookupNamespace(string prefix);
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToParent();
    public virtual void MoveToRoot();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToId(string id);
    public virtual bool MoveToChild(string localName, string namespaceUri);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToFollowing(string localName, string namespaceUri, XPathNavigator end);
    public virtual bool MoveToFollowing(XPathNodeType type, XPathNavigator end);
    public virtual bool MoveToNext(string localName, string namespaceUri);
    public virtual bool MoveToNext(XPathNodeType type);
    public virtual bool get_HasChildren();
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool IsDescendant(XPathNavigator other);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual bool CheckValidity(XmlSchemaSet schemas, ValidationEventHandler validationEventHandler);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
    private sealed virtual override XmlNode System.Xml.IHasXmlNode.GetNode();
    public virtual XPathNodeIterator SelectDescendants(string localName, string namespaceURI, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(XPathNodeType nt, bool includeSelf);
    public virtual bool get_CanEdit();
    public virtual XmlWriter PrependChild();
    public virtual XmlWriter AppendChild();
    public virtual XmlWriter InsertAfter();
    public virtual XmlWriter InsertBefore();
    public virtual XmlWriter CreateAttributes();
    public virtual XmlWriter ReplaceRange(XPathNavigator lastSiblingToReplace);
    public virtual void DeleteRange(XPathNavigator lastSiblingToDelete);
    public virtual void DeleteSelf();
    internal static void DeleteToFollowingSibling(XmlNode node, XmlNode end);
    internal void ResetPosition(XmlNode node);
    internal static bool IsFollowingSibling(XmlNode left, XmlNode right);
}
internal class System.Xml.DocumentXPathNodeIterator_AllElemChildren : DocumentXPathNodeIterator_ElemDescendants {
    internal DocumentXPathNodeIterator_AllElemChildren(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_AllElemChildren(DocumentXPathNodeIterator_AllElemChildren other);
    public virtual XPathNodeIterator Clone();
    protected virtual bool Match(XmlNode node);
}
internal class System.Xml.DocumentXPathNodeIterator_AllElemChildren_AndSelf : DocumentXPathNodeIterator_AllElemChildren {
    internal DocumentXPathNodeIterator_AllElemChildren_AndSelf(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_AllElemChildren_AndSelf(DocumentXPathNodeIterator_AllElemChildren_AndSelf other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren : DocumentXPathNodeIterator_ElemDescendants {
    protected string localNameAtom;
    protected string nsAtom;
    internal DocumentXPathNodeIterator_ElemChildren(DocumentXPathNavigator nav, string localNameAtom, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren(DocumentXPathNodeIterator_ElemChildren other);
    public virtual XPathNodeIterator Clone();
    protected virtual bool Match(XmlNode node);
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf : DocumentXPathNodeIterator_ElemChildren {
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf(DocumentXPathNavigator nav, string localNameAtom, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf(DocumentXPathNodeIterator_ElemChildren_AndSelf other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName : DocumentXPathNodeIterator_ElemChildren_NoLocalName {
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName(DocumentXPathNavigator nav, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName(DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName : DocumentXPathNodeIterator_ElemDescendants {
    internal DocumentXPathNodeIterator_ElemChildren_NoLocalName(DocumentXPathNavigator nav, string nsAtom);
    internal DocumentXPathNodeIterator_ElemChildren_NoLocalName(DocumentXPathNodeIterator_ElemChildren_NoLocalName other);
    public virtual XPathNodeIterator Clone();
    protected virtual bool Match(XmlNode node);
}
internal abstract class System.Xml.DocumentXPathNodeIterator_ElemDescendants : XPathNodeIterator {
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    internal DocumentXPathNodeIterator_ElemDescendants(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_ElemDescendants(DocumentXPathNodeIterator_ElemDescendants other);
    protected abstract virtual bool Match(XmlNode node);
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    protected void SetPosition(int pos);
    public virtual bool MoveNext();
}
internal class System.Xml.DocumentXPathNodeIterator_Empty : XPathNodeIterator {
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    internal DocumentXPathNodeIterator_Empty(DocumentXPathNavigator nav);
    internal DocumentXPathNodeIterator_Empty(DocumentXPathNodeIterator_Empty other);
    public virtual XPathNodeIterator Clone();
    public virtual bool MoveNext();
    public virtual XPathNavigator get_Current();
    public virtual int get_CurrentPosition();
    public virtual int get_Count();
}
internal class System.Xml.DomNameTable : object {
    public DomNameTable(XmlDocument document);
    public XmlName GetName(string prefix, string localName, string ns, IXmlSchemaInfo schemaInfo);
    public XmlName AddName(string prefix, string localName, string ns, IXmlSchemaInfo schemaInfo);
}
internal class System.Xml.DtdParser : object {
    private static DtdParser();
    internal static IDtdParser Create();
    private sealed virtual override IDtdInfo System.Xml.IDtdParser.ParseInternalDtd(IDtdParserAdapter adapter, bool saveInternalSubset);
    private sealed virtual override IDtdInfo System.Xml.IDtdParser.ParseFreeFloatingDtd(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
    internal static string StripSpaces(string value);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<System_Xml_IDtdParser_ParseInternalDtdAsync>d__1")]
private sealed virtual override Task`1<IDtdInfo> System.Xml.IDtdParser.ParseInternalDtdAsync(IDtdParserAdapter adapter, bool saveInternalSubset);
    [AsyncStateMachineAttribute("System.Xml.DtdParser/<System_Xml_IDtdParser_ParseFreeFloatingDtdAsync>d__1")]
private sealed virtual override Task`1<IDtdInfo> System.Xml.IDtdParser.ParseFreeFloatingDtdAsync(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
}
public enum System.Xml.DtdProcessing : Enum {
    public int value__;
    public static DtdProcessing Prohibit;
    public static DtdProcessing Ignore;
    public static DtdProcessing Parse;
}
internal enum System.Xml.ElementProperties : Enum {
    public UInt32 value__;
    public static ElementProperties DEFAULT;
    public static ElementProperties URI_PARENT;
    public static ElementProperties BOOL_PARENT;
    public static ElementProperties NAME_PARENT;
    public static ElementProperties EMPTY;
    public static ElementProperties NO_ENTITIES;
    public static ElementProperties HEAD;
    public static ElementProperties BLOCK_WS;
    public static ElementProperties HAS_NS;
}
internal class System.Xml.EmptyEnumerator : object {
    private object System.Collections.IEnumerator.Current { get; }
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
}
public enum System.Xml.EntityHandling : Enum {
    public int value__;
    public static EntityHandling ExpandEntities;
    public static EntityHandling ExpandCharEntities;
}
internal enum System.Xml.ExceptionType : Enum {
    public int value__;
    public static ExceptionType ArgumentException;
    public static ExceptionType XmlException;
}
public enum System.Xml.Formatting : Enum {
    public int value__;
    public static Formatting None;
    public static Formatting Indented;
}
internal class System.Xml.HtmlEncodedRawTextWriter : XmlEncodedRawTextWriter {
    protected ByteStack elementScope;
    protected ElementProperties currentElementProperties;
    protected static TernaryTreeReadOnly elementPropertySearch;
    protected static TernaryTreeReadOnly attributePropertySearch;
    public HtmlEncodedRawTextWriter(TextWriter writer, XmlWriterSettings settings);
    public HtmlEncodedRawTextWriter(Stream stream, XmlWriterSettings settings);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteProcessingInstruction(string target, string text);
    public virtual void WriteString(string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    protected void WriteMetaElement();
    protected void WriteHtmlElementTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void WriteHtmlAttributeTextBlock(Char* pSrc, Char* pSrcEnd);
}
internal class System.Xml.HtmlEncodedRawTextWriterIndent : HtmlEncodedRawTextWriter {
    public HtmlEncodedRawTextWriterIndent(TextWriter writer, XmlWriterSettings settings);
    public HtmlEncodedRawTextWriterIndent(Stream stream, XmlWriterSettings settings);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    protected virtual void FlushBuffer();
}
internal abstract class System.Xml.HtmlTernaryTree : object {
    internal static Byte[] htmlElements;
    internal static Byte[] htmlAttributes;
    private static HtmlTernaryTree();
}
internal class System.Xml.HtmlUtf8RawTextWriter : XmlUtf8RawTextWriter {
    protected ByteStack elementScope;
    protected ElementProperties currentElementProperties;
    protected static TernaryTreeReadOnly elementPropertySearch;
    protected static TernaryTreeReadOnly attributePropertySearch;
    public HtmlUtf8RawTextWriter(Stream stream, XmlWriterSettings settings);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteProcessingInstruction(string target, string text);
    public virtual void WriteString(string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    protected void WriteMetaElement();
    protected void WriteHtmlElementTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void WriteHtmlAttributeTextBlock(Char* pSrc, Char* pSrcEnd);
}
internal class System.Xml.HtmlUtf8RawTextWriterIndent : HtmlUtf8RawTextWriter {
    public HtmlUtf8RawTextWriterIndent(Stream stream, XmlWriterSettings settings);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    protected virtual void FlushBuffer();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.HWStack : object {
    internal object Item { get; internal set; }
    internal int Length { get; }
    internal HWStack(int GrowthRate);
    internal HWStack(int GrowthRate, int limit);
    internal object Push();
    internal object Pop();
    internal object Peek();
    internal void AddToTop(object o);
    internal object get_Item(int index);
    internal void set_Item(int index, object value);
    internal int get_Length();
    public sealed virtual object Clone();
}
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public interface System.Xml.IApplicationResourceStreamResolver {
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public abstract virtual Stream GetApplicationResourceStream(Uri relativeUri);
}
internal interface System.Xml.IDtdAttributeInfo {
    public string Prefix { get; }
    public string LocalName { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public bool IsNonCDataType { get; }
    public bool IsDeclaredInExternal { get; }
    public bool IsXmlAttribute { get; }
    public abstract virtual string get_Prefix();
    public abstract virtual string get_LocalName();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
    public abstract virtual bool get_IsNonCDataType();
    public abstract virtual bool get_IsDeclaredInExternal();
    public abstract virtual bool get_IsXmlAttribute();
}
internal interface System.Xml.IDtdAttributeListInfo {
    public string Prefix { get; }
    public string LocalName { get; }
    public bool HasNonCDataAttributes { get; }
    public abstract virtual string get_Prefix();
    public abstract virtual string get_LocalName();
    public abstract virtual bool get_HasNonCDataAttributes();
    public abstract virtual IDtdAttributeInfo LookupAttribute(string prefix, string localName);
    public abstract virtual IEnumerable`1<IDtdDefaultAttributeInfo> LookupDefaultAttributes();
    public abstract virtual IDtdAttributeInfo LookupIdAttribute();
}
internal interface System.Xml.IDtdDefaultAttributeInfo {
    public string DefaultValueExpanded { get; }
    public object DefaultValueTyped { get; }
    public int ValueLineNumber { get; }
    public int ValueLinePosition { get; }
    public abstract virtual string get_DefaultValueExpanded();
    public abstract virtual object get_DefaultValueTyped();
    public abstract virtual int get_ValueLineNumber();
    public abstract virtual int get_ValueLinePosition();
}
internal interface System.Xml.IDtdEntityInfo {
    public string Name { get; }
    public bool IsExternal { get; }
    public bool IsDeclaredInExternal { get; }
    public bool IsUnparsedEntity { get; }
    public bool IsParameterEntity { get; }
    public string BaseUriString { get; }
    public string DeclaredUriString { get; }
    public string SystemId { get; }
    public string PublicId { get; }
    public string Text { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsExternal();
    public abstract virtual bool get_IsDeclaredInExternal();
    public abstract virtual bool get_IsUnparsedEntity();
    public abstract virtual bool get_IsParameterEntity();
    public abstract virtual string get_BaseUriString();
    public abstract virtual string get_DeclaredUriString();
    public abstract virtual string get_SystemId();
    public abstract virtual string get_PublicId();
    public abstract virtual string get_Text();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
internal interface System.Xml.IDtdInfo {
    public XmlQualifiedName Name { get; }
    public string InternalDtdSubset { get; }
    public bool HasDefaultAttributes { get; }
    public bool HasNonCDataAttributes { get; }
    public abstract virtual XmlQualifiedName get_Name();
    public abstract virtual string get_InternalDtdSubset();
    public abstract virtual bool get_HasDefaultAttributes();
    public abstract virtual bool get_HasNonCDataAttributes();
    public abstract virtual IDtdAttributeListInfo LookupAttributeList(string prefix, string localName);
    public abstract virtual IEnumerable`1<IDtdAttributeListInfo> GetAttributeLists();
    public abstract virtual IDtdEntityInfo LookupEntity(string name);
}
internal interface System.Xml.IDtdParser {
    public abstract virtual IDtdInfo ParseInternalDtd(IDtdParserAdapter adapter, bool saveInternalSubset);
    public abstract virtual IDtdInfo ParseFreeFloatingDtd(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
    public abstract virtual Task`1<IDtdInfo> ParseInternalDtdAsync(IDtdParserAdapter adapter, bool saveInternalSubset);
    public abstract virtual Task`1<IDtdInfo> ParseFreeFloatingDtdAsync(string baseUri, string docTypeName, string publicId, string systemId, string internalSubset, IDtdParserAdapter adapter);
}
internal interface System.Xml.IDtdParserAdapter {
    public XmlNameTable NameTable { get; }
    public IXmlNamespaceResolver NamespaceResolver { get; }
    public Uri BaseUri { get; }
    public Char[] ParsingBuffer { get; }
    public int ParsingBufferLength { get; }
    public int CurrentPosition { get; public set; }
    public int LineNo { get; }
    public int LineStartPosition { get; }
    public bool IsEof { get; }
    public int EntityStackLength { get; }
    public bool IsEntityEolNormalized { get; }
    public abstract virtual XmlNameTable get_NameTable();
    public abstract virtual IXmlNamespaceResolver get_NamespaceResolver();
    public abstract virtual Uri get_BaseUri();
    public abstract virtual Char[] get_ParsingBuffer();
    public abstract virtual int get_ParsingBufferLength();
    public abstract virtual int get_CurrentPosition();
    public abstract virtual void set_CurrentPosition(int value);
    public abstract virtual int get_LineNo();
    public abstract virtual int get_LineStartPosition();
    public abstract virtual bool get_IsEof();
    public abstract virtual int get_EntityStackLength();
    public abstract virtual bool get_IsEntityEolNormalized();
    public abstract virtual int ReadData();
    public abstract virtual void OnNewLine(int pos);
    public abstract virtual int ParseNumericCharRef(StringBuilder internalSubsetBuilder);
    public abstract virtual int ParseNamedCharRef(bool expand, StringBuilder internalSubsetBuilder);
    public abstract virtual void ParsePI(StringBuilder sb);
    public abstract virtual void ParseComment(StringBuilder sb);
    public abstract virtual bool PushEntity(IDtdEntityInfo entity, Int32& entityId);
    public abstract virtual bool PopEntity(IDtdEntityInfo& oldEntity, Int32& newEntityId);
    public abstract virtual bool PushExternalSubset(string systemId, string publicId);
    public abstract virtual void PushInternalDtd(string baseUri, string internalDtd);
    public abstract virtual void OnSystemId(string systemId, LineInfo keywordLineInfo, LineInfo systemLiteralLineInfo);
    public abstract virtual void OnPublicId(string publicId, LineInfo keywordLineInfo, LineInfo publicLiteralLineInfo);
    public abstract virtual void Throw(Exception e);
    public abstract virtual Task`1<int> ReadDataAsync();
    public abstract virtual Task`1<int> ParseNumericCharRefAsync(StringBuilder internalSubsetBuilder);
    public abstract virtual Task`1<int> ParseNamedCharRefAsync(bool expand, StringBuilder internalSubsetBuilder);
    public abstract virtual Task ParsePIAsync(StringBuilder sb);
    public abstract virtual Task ParseCommentAsync(StringBuilder sb);
    public abstract virtual Task`1<Tuple`2<int, bool>> PushEntityAsync(IDtdEntityInfo entity);
    public abstract virtual Task`1<bool> PushExternalSubsetAsync(string systemId, string publicId);
}
internal interface System.Xml.IDtdParserAdapterV1 {
    public bool V1CompatibilityMode { get; }
    public bool Normalization { get; }
    public bool Namespaces { get; }
    public abstract virtual bool get_V1CompatibilityMode();
    public abstract virtual bool get_Normalization();
    public abstract virtual bool get_Namespaces();
}
internal interface System.Xml.IDtdParserAdapterWithValidation {
    public bool DtdValidation { get; }
    public IValidationEventHandling ValidationEventHandling { get; }
    public abstract virtual bool get_DtdValidation();
    public abstract virtual IValidationEventHandling get_ValidationEventHandling();
}
public interface System.Xml.IHasXmlNode {
    public abstract virtual XmlNode GetNode();
}
internal class System.Xml.IncrementalReadCharsDecoder : IncrementalReadDecoder {
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    internal virtual int Decode(Char[] chars, int startPos, int len);
    internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
    internal virtual void SetNextOutputBuffer(Array buffer, int index, int count);
}
internal abstract class System.Xml.IncrementalReadDecoder : object {
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal abstract virtual int get_DecodedCount();
    internal abstract virtual bool get_IsFull();
    internal abstract virtual void SetNextOutputBuffer(Array array, int offset, int len);
    internal abstract virtual int Decode(Char[] chars, int startPos, int len);
    internal abstract virtual int Decode(string str, int startPos, int len);
    internal abstract virtual void Reset();
}
internal class System.Xml.IncrementalReadDummyDecoder : IncrementalReadDecoder {
    internal int DecodedCount { get; }
    internal bool IsFull { get; }
    internal virtual int get_DecodedCount();
    internal virtual bool get_IsFull();
    internal virtual void SetNextOutputBuffer(Array array, int offset, int len);
    internal virtual int Decode(Char[] chars, int startPos, int len);
    internal virtual int Decode(string str, int startPos, int len);
    internal virtual void Reset();
}
internal interface System.Xml.IRemovableWriter {
    public OnRemoveWriter OnRemoveWriterEvent { get; public set; }
    public abstract virtual OnRemoveWriter get_OnRemoveWriterEvent();
    public abstract virtual void set_OnRemoveWriterEvent(OnRemoveWriter value);
}
internal interface System.Xml.IValidationEventHandling {
    public object EventHandler { get; }
    public abstract virtual object get_EventHandler();
    public abstract virtual void SendEvent(Exception exception, XmlSeverityType severity);
}
public interface System.Xml.IXmlLineInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
public interface System.Xml.IXmlNamespaceResolver {
    public abstract virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public abstract virtual string LookupNamespace(string prefix);
    public abstract virtual string LookupPrefix(string namespaceName);
}
internal class System.Xml.LineInfo : ValueType {
    internal int lineNo;
    internal int linePos;
    public LineInfo(int lineNo, int linePos);
    public void Set(int lineNo, int linePos);
}
[FlagsAttribute]
public enum System.Xml.NamespaceHandling : Enum {
    public int value__;
    public static NamespaceHandling Default;
    public static NamespaceHandling OmitDuplicates;
}
public class System.Xml.NameTable : XmlNameTable {
    public virtual string Add(string key);
    public virtual string Add(Char[] key, int start, int len);
    public virtual string Get(string value);
    public virtual string Get(Char[] key, int start, int len);
}
public enum System.Xml.NewLineHandling : Enum {
    public int value__;
    public static NewLineHandling Replace;
    public static NewLineHandling Entitize;
    public static NewLineHandling None;
}
internal class System.Xml.OnRemoveWriter : MulticastDelegate {
    public OnRemoveWriter(object object, IntPtr method);
    public virtual void Invoke(XmlRawWriter writer);
    public virtual IAsyncResult BeginInvoke(XmlRawWriter writer, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xml.OpenedHost : object {
    internal int nonCachedConnectionsCount;
}
internal class System.Xml.PositionInfo : object {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    public static PositionInfo GetPositionInfo(object o);
}
internal class System.Xml.QueryOutputWriter : XmlRawWriter {
    internal IXmlNamespaceResolver NamespaceResolver { get; internal set; }
    public XmlWriterSettings Settings { get; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public QueryOutputWriter(XmlRawWriter writer, XmlWriterSettings settings);
    internal virtual IXmlNamespaceResolver get_NamespaceResolver();
    internal virtual void set_NamespaceResolver(IXmlNamespaceResolver value);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void Close();
    public virtual void Flush();
}
internal class System.Xml.QueryOutputWriterV1 : XmlWriter {
    public WriteState WriteState { get; }
    public QueryOutputWriterV1(XmlWriter writer, XmlWriterSettings settings);
    public virtual WriteState get_WriteState();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
}
internal class System.Xml.ReadContentAsBinaryHelper : object {
    internal ReadContentAsBinaryHelper(XmlReader reader);
    internal static ReadContentAsBinaryHelper CreateOrReset(ReadContentAsBinaryHelper helper, XmlReader reader);
    internal int ReadContentAsBase64(Byte[] buffer, int index, int count);
    internal int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    internal int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    internal int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    internal void Finish();
    internal void Reset();
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadContentAsBase64Async>d__1")]
internal Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadContentAsBinHexAsync>d__1")]
internal Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadElementContentAsBase64Async>d__1")]
internal Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<ReadElementContentAsBinHexAsync>d__1")]
internal Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.ReadContentAsBinaryHelper/<FinishAsync>d__1")]
internal Task FinishAsync();
}
internal class System.Xml.ReaderPositionInfo : PositionInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public ReaderPositionInfo(IXmlLineInfo lineInfo);
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
}
public enum System.Xml.ReadState : Enum {
    public int value__;
    public static ReadState Initial;
    public static ReadState Interactive;
    public static ReadState Error;
    public static ReadState EndOfFile;
    public static ReadState Closed;
}
internal static class System.Xml.Ref : object {
    public static bool Equal(string strA, string strB);
    public static void Equals(object objA, object objB);
}
internal class System.Xml.Res : object {
    internal static string Xml_UserException;
    internal static string Xml_DefaultException;
    internal static string Xml_InvalidOperation;
    internal static string Xml_ErrorFilePosition;
    internal static string Xml_StackOverflow;
    internal static string Xslt_NoStylesheetLoaded;
    internal static string Xslt_NotCompiledStylesheet;
    internal static string Xslt_IncompatibleCompiledStylesheetVersion;
    internal static string Xml_AsyncIsRunningException;
    internal static string Xml_ReaderAsyncNotSetException;
    internal static string Xml_UnclosedQuote;
    internal static string Xml_UnexpectedEOF;
    internal static string Xml_UnexpectedEOF1;
    internal static string Xml_UnexpectedEOFInElementContent;
    internal static string Xml_BadStartNameChar;
    internal static string Xml_BadNameChar;
    internal static string Xml_BadDecimalEntity;
    internal static string Xml_BadHexEntity;
    internal static string Xml_MissingByteOrderMark;
    internal static string Xml_UnknownEncoding;
    internal static string Xml_InternalError;
    internal static string Xml_InvalidCharInThisEncoding;
    internal static string Xml_ErrorPosition;
    internal static string Xml_MessageWithErrorPosition;
    internal static string Xml_UnexpectedTokenEx;
    internal static string Xml_UnexpectedTokens2;
    internal static string Xml_ExpectingWhiteSpace;
    internal static string Xml_TagMismatch;
    internal static string Xml_TagMismatchEx;
    internal static string Xml_UnexpectedEndTag;
    internal static string Xml_UnknownNs;
    internal static string Xml_BadAttributeChar;
    internal static string Xml_ExpectExternalOrClose;
    internal static string Xml_MissingRoot;
    internal static string Xml_MultipleRoots;
    internal static string Xml_InvalidRootData;
    internal static string Xml_XmlDeclNotFirst;
    internal static string Xml_InvalidXmlDecl;
    internal static string Xml_InvalidNodeType;
    internal static string Xml_InvalidPIName;
    internal static string Xml_InvalidXmlSpace;
    internal static string Xml_InvalidVersionNumber;
    internal static string Xml_DupAttributeName;
    internal static string Xml_BadDTDLocation;
    internal static string Xml_ElementNotFound;
    internal static string Xml_ElementNotFoundNs;
    internal static string Xml_PartialContentNodeTypeNotSupportedEx;
    internal static string Xml_MultipleDTDsProvided;
    internal static string Xml_CanNotBindToReservedNamespace;
    internal static string Xml_InvalidCharacter;
    internal static string Xml_InvalidBinHexValue;
    internal static string Xml_InvalidBinHexValueOddCount;
    internal static string Xml_InvalidTextDecl;
    internal static string Xml_InvalidBase64Value;
    internal static string Xml_UndeclaredEntity;
    internal static string Xml_RecursiveParEntity;
    internal static string Xml_RecursiveGenEntity;
    internal static string Xml_ExternalEntityInAttValue;
    internal static string Xml_UnparsedEntityRef;
    internal static string Xml_NotSameNametable;
    internal static string Xml_NametableMismatch;
    internal static string Xml_BadNamespaceDecl;
    internal static string Xml_ErrorParsingEntityName;
    internal static string Xml_InvalidNmToken;
    internal static string Xml_EntityRefNesting;
    internal static string Xml_CannotResolveEntity;
    internal static string Xml_CannotResolveEntityDtdIgnored;
    internal static string Xml_CannotResolveExternalSubset;
    internal static string Xml_CannotResolveUrl;
    internal static string Xml_CDATAEndInText;
    internal static string Xml_ExternalEntityInStandAloneDocument;
    internal static string Xml_DtdAfterRootElement;
    internal static string Xml_ReadOnlyProperty;
    internal static string Xml_DtdIsProhibited;
    internal static string Xml_DtdIsProhibitedEx;
    internal static string Xml_ReadSubtreeNotOnElement;
    internal static string Xml_DtdNotAllowedInFragment;
    internal static string Xml_CannotStartDocumentOnFragment;
    internal static string Xml_ErrorOpeningExternalDtd;
    internal static string Xml_ErrorOpeningExternalEntity;
    internal static string Xml_ReadBinaryContentNotSupported;
    internal static string Xml_ReadValueChunkNotSupported;
    internal static string Xml_InvalidReadContentAs;
    internal static string Xml_InvalidReadElementContentAs;
    internal static string Xml_MixedReadElementContentAs;
    internal static string Xml_MixingReadValueChunkWithBinary;
    internal static string Xml_MixingBinaryContentMethods;
    internal static string Xml_MixingV1StreamingWithV2Binary;
    internal static string Xml_InvalidReadValueChunk;
    internal static string Xml_ReadContentAsFormatException;
    internal static string Xml_DoubleBaseUri;
    internal static string Xml_NotEnoughSpaceForSurrogatePair;
    internal static string Xml_EmptyUrl;
    internal static string Xml_UnexpectedNodeInSimpleContent;
    internal static string Xml_InvalidWhitespaceCharacter;
    internal static string Xml_IncompatibleConformanceLevel;
    internal static string Xml_LimitExceeded;
    internal static string Xml_ClosedOrErrorReader;
    internal static string Xml_CharEntityOverflow;
    internal static string Xml_BadNameCharWithPos;
    internal static string Xml_XmlnsBelongsToReservedNs;
    internal static string Xml_UndeclaredParEntity;
    internal static string Xml_InvalidXmlDocument;
    internal static string Xml_NoDTDPresent;
    internal static string Xml_MultipleValidaitonTypes;
    internal static string Xml_NoValidation;
    internal static string Xml_WhitespaceHandling;
    internal static string Xml_InvalidResetStateCall;
    internal static string Xml_EntityHandling;
    internal static string Xml_AttlistDuplEnumValue;
    internal static string Xml_AttlistDuplNotationValue;
    internal static string Xml_EncodingSwitchAfterResetState;
    internal static string Xml_UnexpectedNodeType;
    internal static string Xml_InvalidConditionalSection;
    internal static string Xml_UnexpectedCDataEnd;
    internal static string Xml_UnclosedConditionalSection;
    internal static string Xml_ExpectDtdMarkup;
    internal static string Xml_IncompleteDtdContent;
    internal static string Xml_EnumerationRequired;
    internal static string Xml_InvalidContentModel;
    internal static string Xml_FragmentId;
    internal static string Xml_ExpectPcData;
    internal static string Xml_ExpectNoWhitespace;
    internal static string Xml_ExpectOp;
    internal static string Xml_InvalidAttributeType;
    internal static string Xml_InvalidAttributeType1;
    internal static string Xml_ExpectAttType;
    internal static string Xml_ColonInLocalName;
    internal static string Xml_InvalidParEntityRef;
    internal static string Xml_ExpectSubOrClose;
    internal static string Xml_ExpectExternalOrPublicId;
    internal static string Xml_ExpectExternalIdOrEntityValue;
    internal static string Xml_ExpectIgnoreOrInclude;
    internal static string Xml_UnsupportedClass;
    internal static string Xml_NullResolver;
    internal static string Xml_RelativeUriNotSupported;
    internal static string Xml_UntrustedCodeSettingResolver;
    internal static string Xml_WriterAsyncNotSetException;
    internal static string Xml_PrefixForEmptyNs;
    internal static string Xml_InvalidCommentChars;
    internal static string Xml_UndefNamespace;
    internal static string Xml_EmptyName;
    internal static string Xml_EmptyLocalName;
    internal static string Xml_InvalidNameCharsDetail;
    internal static string Xml_NoStartTag;
    internal static string Xml_ClosedOrError;
    internal static string Xml_WrongToken;
    internal static string Xml_XmlPrefix;
    internal static string Xml_XmlnsPrefix;
    internal static string Xml_NamespaceDeclXmlXmlns;
    internal static string Xml_NonWhitespace;
    internal static string Xml_DupXmlDecl;
    internal static string Xml_CannotWriteXmlDecl;
    internal static string Xml_NoRoot;
    internal static string Xml_InvalidPosition;
    internal static string Xml_IncompleteEntity;
    internal static string Xml_InvalidSurrogateHighChar;
    internal static string Xml_InvalidSurrogateMissingLowChar;
    internal static string Xml_InvalidSurrogatePairWithArgs;
    internal static string Xml_RedefinePrefix;
    internal static string Xml_DtdAlreadyWritten;
    internal static string Xml_InvalidCharsInIndent;
    internal static string Xml_IndentCharsNotWhitespace;
    internal static string Xml_ConformanceLevelFragment;
    internal static string Xml_InvalidQuote;
    internal static string Xml_UndefPrefix;
    internal static string Xml_NoNamespaces;
    internal static string Xml_InvalidCDataChars;
    internal static string Xml_NotTheFirst;
    internal static string Xml_InvalidPiChars;
    internal static string Xml_InvalidNameChars;
    internal static string Xml_Closed;
    internal static string Xml_InvalidPrefix;
    internal static string Xml_InvalidIndentation;
    internal static string Xml_NotInWriteState;
    internal static string Xml_SurrogatePairSplit;
    internal static string Xml_NoMultipleRoots;
    internal static string XmlBadName;
    internal static string XmlNoNameAllowed;
    internal static string XmlConvert_BadUri;
    internal static string XmlConvert_BadFormat;
    internal static string XmlConvert_Overflow;
    internal static string XmlConvert_TypeBadMapping;
    internal static string XmlConvert_TypeBadMapping2;
    internal static string XmlConvert_TypeListBadMapping;
    internal static string XmlConvert_TypeListBadMapping2;
    internal static string XmlConvert_TypeToString;
    internal static string XmlConvert_TypeFromString;
    internal static string XmlConvert_TypeNoPrefix;
    internal static string XmlConvert_TypeNoNamespace;
    internal static string XmlConvert_NotOneCharString;
    internal static string Sch_ParEntityRefNesting;
    internal static string Sch_NotTokenString;
    internal static string Sch_XsdDateTimeCompare;
    internal static string Sch_InvalidNullCast;
    internal static string Sch_InvalidDateTimeOption;
    internal static string Sch_StandAloneNormalization;
    internal static string Sch_UnSpecifiedDefaultAttributeInExternalStandalone;
    internal static string Sch_DefaultException;
    internal static string Sch_DupElementDecl;
    internal static string Sch_IdAttrDeclared;
    internal static string Sch_RootMatchDocType;
    internal static string Sch_DupId;
    internal static string Sch_UndeclaredElement;
    internal static string Sch_UndeclaredAttribute;
    internal static string Sch_UndeclaredNotation;
    internal static string Sch_UndeclaredId;
    internal static string Sch_SchemaRootExpected;
    internal static string Sch_XSDSchemaRootExpected;
    internal static string Sch_UnsupportedAttribute;
    internal static string Sch_UnsupportedElement;
    internal static string Sch_MissAttribute;
    internal static string Sch_AnnotationLocation;
    internal static string Sch_DataTypeTextOnly;
    internal static string Sch_UnknownModel;
    internal static string Sch_UnknownOrder;
    internal static string Sch_UnknownContent;
    internal static string Sch_UnknownRequired;
    internal static string Sch_UnknownDtType;
    internal static string Sch_MixedMany;
    internal static string Sch_GroupDisabled;
    internal static string Sch_MissDtvalue;
    internal static string Sch_MissDtvaluesAttribute;
    internal static string Sch_DupDtType;
    internal static string Sch_DupAttribute;
    internal static string Sch_RequireEnumeration;
    internal static string Sch_DefaultIdValue;
    internal static string Sch_ElementNotAllowed;
    internal static string Sch_ElementMissing;
    internal static string Sch_ManyMaxOccurs;
    internal static string Sch_MaxOccursInvalid;
    internal static string Sch_MinOccursInvalid;
    internal static string Sch_DtMaxLengthInvalid;
    internal static string Sch_DtMinLengthInvalid;
    internal static string Sch_DupDtMaxLength;
    internal static string Sch_DupDtMinLength;
    internal static string Sch_DtMinMaxLength;
    internal static string Sch_DupElement;
    internal static string Sch_DupGroupParticle;
    internal static string Sch_InvalidValue;
    internal static string Sch_InvalidValueDetailed;
    internal static string Sch_InvalidValueDetailedAttribute;
    internal static string Sch_MissRequiredAttribute;
    internal static string Sch_FixedAttributeValue;
    internal static string Sch_FixedElementValue;
    internal static string Sch_AttributeValueDataTypeDetailed;
    internal static string Sch_AttributeDefaultDataType;
    internal static string Sch_IncludeLocation;
    internal static string Sch_ImportLocation;
    internal static string Sch_RedefineLocation;
    internal static string Sch_InvalidBlockDefaultValue;
    internal static string Sch_InvalidFinalDefaultValue;
    internal static string Sch_InvalidElementBlockValue;
    internal static string Sch_InvalidElementFinalValue;
    internal static string Sch_InvalidSimpleTypeFinalValue;
    internal static string Sch_InvalidComplexTypeBlockValue;
    internal static string Sch_InvalidComplexTypeFinalValue;
    internal static string Sch_DupIdentityConstraint;
    internal static string Sch_DupGlobalElement;
    internal static string Sch_DupGlobalAttribute;
    internal static string Sch_DupSimpleType;
    internal static string Sch_DupComplexType;
    internal static string Sch_DupGroup;
    internal static string Sch_DupAttributeGroup;
    internal static string Sch_DupNotation;
    internal static string Sch_DefaultFixedAttributes;
    internal static string Sch_FixedInRef;
    internal static string Sch_FixedDefaultInRef;
    internal static string Sch_DupXsdElement;
    internal static string Sch_ForbiddenAttribute;
    internal static string Sch_AttributeIgnored;
    internal static string Sch_ElementRef;
    internal static string Sch_TypeMutualExclusive;
    internal static string Sch_ElementNameRef;
    internal static string Sch_AttributeNameRef;
    internal static string Sch_TextNotAllowed;
    internal static string Sch_UndeclaredType;
    internal static string Sch_UndeclaredSimpleType;
    internal static string Sch_UndeclaredEquivClass;
    internal static string Sch_AttListPresence;
    internal static string Sch_NotationValue;
    internal static string Sch_EnumerationValue;
    internal static string Sch_EmptyAttributeValue;
    internal static string Sch_InvalidLanguageId;
    internal static string Sch_XmlSpace;
    internal static string Sch_InvalidXsdAttributeValue;
    internal static string Sch_InvalidXsdAttributeDatatypeValue;
    internal static string Sch_ElementValueDataTypeDetailed;
    internal static string Sch_InvalidElementDefaultValue;
    internal static string Sch_NonDeterministic;
    internal static string Sch_NonDeterministicAnyEx;
    internal static string Sch_NonDeterministicAnyAny;
    internal static string Sch_StandAlone;
    internal static string Sch_XmlNsAttribute;
    internal static string Sch_AllElement;
    internal static string Sch_MismatchTargetNamespaceInclude;
    internal static string Sch_MismatchTargetNamespaceImport;
    internal static string Sch_MismatchTargetNamespaceEx;
    internal static string Sch_XsiTypeNotFound;
    internal static string Sch_XsiTypeAbstract;
    internal static string Sch_ListFromNonatomic;
    internal static string Sch_UnionFromUnion;
    internal static string Sch_DupLengthFacet;
    internal static string Sch_DupMinLengthFacet;
    internal static string Sch_DupMaxLengthFacet;
    internal static string Sch_DupWhiteSpaceFacet;
    internal static string Sch_DupMaxInclusiveFacet;
    internal static string Sch_DupMaxExclusiveFacet;
    internal static string Sch_DupMinInclusiveFacet;
    internal static string Sch_DupMinExclusiveFacet;
    internal static string Sch_DupTotalDigitsFacet;
    internal static string Sch_DupFractionDigitsFacet;
    internal static string Sch_LengthFacetProhibited;
    internal static string Sch_MinLengthFacetProhibited;
    internal static string Sch_MaxLengthFacetProhibited;
    internal static string Sch_PatternFacetProhibited;
    internal static string Sch_EnumerationFacetProhibited;
    internal static string Sch_WhiteSpaceFacetProhibited;
    internal static string Sch_MaxInclusiveFacetProhibited;
    internal static string Sch_MaxExclusiveFacetProhibited;
    internal static string Sch_MinInclusiveFacetProhibited;
    internal static string Sch_MinExclusiveFacetProhibited;
    internal static string Sch_TotalDigitsFacetProhibited;
    internal static string Sch_FractionDigitsFacetProhibited;
    internal static string Sch_LengthFacetInvalid;
    internal static string Sch_MinLengthFacetInvalid;
    internal static string Sch_MaxLengthFacetInvalid;
    internal static string Sch_MaxInclusiveFacetInvalid;
    internal static string Sch_MaxExclusiveFacetInvalid;
    internal static string Sch_MinInclusiveFacetInvalid;
    internal static string Sch_MinExclusiveFacetInvalid;
    internal static string Sch_TotalDigitsFacetInvalid;
    internal static string Sch_FractionDigitsFacetInvalid;
    internal static string Sch_PatternFacetInvalid;
    internal static string Sch_EnumerationFacetInvalid;
    internal static string Sch_InvalidWhiteSpace;
    internal static string Sch_UnknownFacet;
    internal static string Sch_LengthAndMinMax;
    internal static string Sch_MinLengthGtMaxLength;
    internal static string Sch_FractionDigitsGtTotalDigits;
    internal static string Sch_LengthConstraintFailed;
    internal static string Sch_MinLengthConstraintFailed;
    internal static string Sch_MaxLengthConstraintFailed;
    internal static string Sch_PatternConstraintFailed;
    internal static string Sch_EnumerationConstraintFailed;
    internal static string Sch_MaxInclusiveConstraintFailed;
    internal static string Sch_MaxExclusiveConstraintFailed;
    internal static string Sch_MinInclusiveConstraintFailed;
    internal static string Sch_MinExclusiveConstraintFailed;
    internal static string Sch_TotalDigitsConstraintFailed;
    internal static string Sch_FractionDigitsConstraintFailed;
    internal static string Sch_UnionFailedEx;
    internal static string Sch_NotationRequired;
    internal static string Sch_DupNotationAttribute;
    internal static string Sch_MissingPublicSystemAttribute;
    internal static string Sch_NotationAttributeOnEmptyElement;
    internal static string Sch_RefNotInScope;
    internal static string Sch_UndeclaredIdentityConstraint;
    internal static string Sch_RefInvalidIdentityConstraint;
    internal static string Sch_RefInvalidCardin;
    internal static string Sch_ReftoKeyref;
    internal static string Sch_EmptyXPath;
    internal static string Sch_UnresolvedPrefix;
    internal static string Sch_UnresolvedKeyref;
    internal static string Sch_ICXpathError;
    internal static string Sch_SelectorAttr;
    internal static string Sch_FieldSimpleTypeExpected;
    internal static string Sch_FieldSingleValueExpected;
    internal static string Sch_MissingKey;
    internal static string Sch_DuplicateKey;
    internal static string Sch_TargetNamespaceXsi;
    internal static string Sch_UndeclaredEntity;
    internal static string Sch_UnparsedEntityRef;
    internal static string Sch_MaxOccursInvalidXsd;
    internal static string Sch_MinOccursInvalidXsd;
    internal static string Sch_MaxInclusiveExclusive;
    internal static string Sch_MinInclusiveExclusive;
    internal static string Sch_MinInclusiveGtMaxInclusive;
    internal static string Sch_MinExclusiveGtMaxExclusive;
    internal static string Sch_MinInclusiveGtMaxExclusive;
    internal static string Sch_MinExclusiveGtMaxInclusive;
    internal static string Sch_SimpleTypeRestriction;
    internal static string Sch_InvalidFacetPosition;
    internal static string Sch_AttributeMutuallyExclusive;
    internal static string Sch_AnyAttributeLastChild;
    internal static string Sch_ComplexTypeContentModel;
    internal static string Sch_ComplexContentContentModel;
    internal static string Sch_NotNormalizedString;
    internal static string Sch_FractionDigitsNotOnDecimal;
    internal static string Sch_ContentInNill;
    internal static string Sch_NoElementSchemaFound;
    internal static string Sch_NoAttributeSchemaFound;
    internal static string Sch_InvalidNamespace;
    internal static string Sch_InvalidTargetNamespaceAttribute;
    internal static string Sch_InvalidNamespaceAttribute;
    internal static string Sch_InvalidSchemaLocation;
    internal static string Sch_ImportTargetNamespace;
    internal static string Sch_ImportTargetNamespaceNull;
    internal static string Sch_GroupDoubleRedefine;
    internal static string Sch_ComponentRedefineNotFound;
    internal static string Sch_GroupRedefineNotFound;
    internal static string Sch_AttrGroupDoubleRedefine;
    internal static string Sch_AttrGroupRedefineNotFound;
    internal static string Sch_ComplexTypeDoubleRedefine;
    internal static string Sch_ComplexTypeRedefineNotFound;
    internal static string Sch_SimpleToComplexTypeRedefine;
    internal static string Sch_SimpleTypeDoubleRedefine;
    internal static string Sch_ComplexToSimpleTypeRedefine;
    internal static string Sch_SimpleTypeRedefineNotFound;
    internal static string Sch_MinMaxGroupRedefine;
    internal static string Sch_MultipleGroupSelfRef;
    internal static string Sch_MultipleAttrGroupSelfRef;
    internal static string Sch_InvalidTypeRedefine;
    internal static string Sch_InvalidElementRef;
    internal static string Sch_MinGtMax;
    internal static string Sch_DupSelector;
    internal static string Sch_IdConstraintNoSelector;
    internal static string Sch_IdConstraintNoFields;
    internal static string Sch_IdConstraintNoRefer;
    internal static string Sch_SelectorBeforeFields;
    internal static string Sch_NoSimpleTypeContent;
    internal static string Sch_SimpleTypeRestRefBase;
    internal static string Sch_SimpleTypeRestRefBaseNone;
    internal static string Sch_SimpleTypeListRefBase;
    internal static string Sch_SimpleTypeListRefBaseNone;
    internal static string Sch_SimpleTypeUnionNoBase;
    internal static string Sch_NoRestOrExtQName;
    internal static string Sch_NoRestOrExt;
    internal static string Sch_NoGroupParticle;
    internal static string Sch_InvalidAllMin;
    internal static string Sch_InvalidAllMax;
    internal static string Sch_InvalidFacet;
    internal static string Sch_AbstractElement;
    internal static string Sch_XsiTypeBlockedEx;
    internal static string Sch_InvalidXsiNill;
    internal static string Sch_SubstitutionNotAllowed;
    internal static string Sch_SubstitutionBlocked;
    internal static string Sch_InvalidElementInEmptyEx;
    internal static string Sch_InvalidElementInTextOnlyEx;
    internal static string Sch_InvalidTextInElement;
    internal static string Sch_InvalidElementContent;
    internal static string Sch_InvalidElementContentComplex;
    internal static string Sch_IncompleteContent;
    internal static string Sch_IncompleteContentComplex;
    internal static string Sch_InvalidTextInElementExpecting;
    internal static string Sch_InvalidElementContentExpecting;
    internal static string Sch_InvalidElementContentExpectingComplex;
    internal static string Sch_IncompleteContentExpecting;
    internal static string Sch_IncompleteContentExpectingComplex;
    internal static string Sch_InvalidElementSubstitution;
    internal static string Sch_ElementNameAndNamespace;
    internal static string Sch_ElementName;
    internal static string Sch_ContinuationString;
    internal static string Sch_AnyElementNS;
    internal static string Sch_AnyElement;
    internal static string Sch_InvalidTextInEmpty;
    internal static string Sch_InvalidWhitespaceInEmpty;
    internal static string Sch_InvalidPIComment;
    internal static string Sch_InvalidAttributeRef;
    internal static string Sch_OptionalDefaultAttribute;
    internal static string Sch_AttributeCircularRef;
    internal static string Sch_IdentityConstraintCircularRef;
    internal static string Sch_SubstitutionCircularRef;
    internal static string Sch_InvalidAnyAttribute;
    internal static string Sch_DupIdAttribute;
    internal static string Sch_InvalidAllElementMax;
    internal static string Sch_InvalidAny;
    internal static string Sch_InvalidAnyDetailed;
    internal static string Sch_InvalidExamplar;
    internal static string Sch_NoExamplar;
    internal static string Sch_InvalidSubstitutionMember;
    internal static string Sch_RedefineNoSchema;
    internal static string Sch_ProhibitedAttribute;
    internal static string Sch_TypeCircularRef;
    internal static string Sch_TwoIdAttrUses;
    internal static string Sch_AttrUseAndWildId;
    internal static string Sch_MoreThanOneWildId;
    internal static string Sch_BaseFinalExtension;
    internal static string Sch_NotSimpleContent;
    internal static string Sch_NotComplexContent;
    internal static string Sch_BaseFinalRestriction;
    internal static string Sch_BaseFinalList;
    internal static string Sch_BaseFinalUnion;
    internal static string Sch_UndefBaseRestriction;
    internal static string Sch_UndefBaseExtension;
    internal static string Sch_DifContentType;
    internal static string Sch_InvalidContentRestriction;
    internal static string Sch_InvalidContentRestrictionDetailed;
    internal static string Sch_InvalidBaseToEmpty;
    internal static string Sch_InvalidBaseToMixed;
    internal static string Sch_DupAttributeUse;
    internal static string Sch_InvalidParticleRestriction;
    internal static string Sch_InvalidParticleRestrictionDetailed;
    internal static string Sch_ForbiddenDerivedParticleForAll;
    internal static string Sch_ForbiddenDerivedParticleForElem;
    internal static string Sch_ForbiddenDerivedParticleForChoice;
    internal static string Sch_ForbiddenDerivedParticleForSeq;
    internal static string Sch_ElementFromElement;
    internal static string Sch_ElementFromAnyRule1;
    internal static string Sch_ElementFromAnyRule2;
    internal static string Sch_AnyFromAnyRule1;
    internal static string Sch_AnyFromAnyRule2;
    internal static string Sch_AnyFromAnyRule3;
    internal static string Sch_GroupBaseFromAny1;
    internal static string Sch_GroupBaseFromAny2;
    internal static string Sch_ElementFromGroupBase1;
    internal static string Sch_ElementFromGroupBase2;
    internal static string Sch_ElementFromGroupBase3;
    internal static string Sch_GroupBaseRestRangeInvalid;
    internal static string Sch_GroupBaseRestNoMap;
    internal static string Sch_GroupBaseRestNotEmptiable;
    internal static string Sch_SeqFromAll;
    internal static string Sch_SeqFromChoice;
    internal static string Sch_UndefGroupRef;
    internal static string Sch_GroupCircularRef;
    internal static string Sch_AllRefNotRoot;
    internal static string Sch_AllRefMinMax;
    internal static string Sch_NotAllAlone;
    internal static string Sch_AttributeGroupCircularRef;
    internal static string Sch_UndefAttributeGroupRef;
    internal static string Sch_InvalidAttributeExtension;
    internal static string Sch_InvalidAnyAttributeRestriction;
    internal static string Sch_AttributeRestrictionProhibited;
    internal static string Sch_AttributeRestrictionInvalid;
    internal static string Sch_AttributeFixedInvalid;
    internal static string Sch_AttributeUseInvalid;
    internal static string Sch_AttributeRestrictionInvalidFromWildcard;
    internal static string Sch_NoDerivedAttribute;
    internal static string Sch_UnexpressibleAnyAttribute;
    internal static string Sch_RefInvalidAttribute;
    internal static string Sch_ElementCircularRef;
    internal static string Sch_RefInvalidElement;
    internal static string Sch_ElementCannotHaveValue;
    internal static string Sch_ElementInMixedWithFixed;
    internal static string Sch_ElementTypeCollision;
    internal static string Sch_InvalidIncludeLocation;
    internal static string Sch_CannotLoadSchema;
    internal static string Sch_CannotLoadSchemaLocation;
    internal static string Sch_LengthGtBaseLength;
    internal static string Sch_MinLengthGtBaseMinLength;
    internal static string Sch_MaxLengthGtBaseMaxLength;
    internal static string Sch_MaxMinLengthBaseLength;
    internal static string Sch_MaxInclusiveMismatch;
    internal static string Sch_MaxExclusiveMismatch;
    internal static string Sch_MinInclusiveMismatch;
    internal static string Sch_MinExclusiveMismatch;
    internal static string Sch_MinExlIncMismatch;
    internal static string Sch_MinExlMaxExlMismatch;
    internal static string Sch_MinIncMaxExlMismatch;
    internal static string Sch_MinIncExlMismatch;
    internal static string Sch_MaxIncExlMismatch;
    internal static string Sch_MaxExlIncMismatch;
    internal static string Sch_TotalDigitsMismatch;
    internal static string Sch_FacetBaseFixed;
    internal static string Sch_WhiteSpaceRestriction1;
    internal static string Sch_WhiteSpaceRestriction2;
    internal static string Sch_XsiNilAndFixed;
    internal static string Sch_MixSchemaTypes;
    internal static string Sch_XSDSchemaOnly;
    internal static string Sch_InvalidPublicAttribute;
    internal static string Sch_InvalidSystemAttribute;
    internal static string Sch_TypeAfterConstraints;
    internal static string Sch_XsiNilAndType;
    internal static string Sch_DupSimpleTypeChild;
    internal static string Sch_InvalidIdAttribute;
    internal static string Sch_InvalidNameAttributeEx;
    internal static string Sch_InvalidAttribute;
    internal static string Sch_EmptyChoice;
    internal static string Sch_DerivedNotFromBase;
    internal static string Sch_NeedSimpleTypeChild;
    internal static string Sch_InvalidCollection;
    internal static string Sch_UnrefNS;
    internal static string Sch_InvalidSimpleTypeRestriction;
    internal static string Sch_MultipleRedefine;
    internal static string Sch_NullValue;
    internal static string Sch_ComplexContentModel;
    internal static string Sch_SchemaNotPreprocessed;
    internal static string Sch_SchemaNotRemoved;
    internal static string Sch_ComponentAlreadySeenForNS;
    internal static string Sch_DefaultAttributeNotApplied;
    internal static string Sch_NotXsiAttribute;
    internal static string Sch_SchemaDoesNotExist;
    internal static string XmlDocument_ValidateInvalidNodeType;
    internal static string XmlDocument_NodeNotFromDocument;
    internal static string XmlDocument_NoNodeSchemaInfo;
    internal static string XmlDocument_NoSchemaInfo;
    internal static string Sch_InvalidStartTransition;
    internal static string Sch_InvalidStateTransition;
    internal static string Sch_InvalidEndValidation;
    internal static string Sch_InvalidEndElementCall;
    internal static string Sch_InvalidEndElementCallTyped;
    internal static string Sch_InvalidEndElementMultiple;
    internal static string Sch_DuplicateAttribute;
    internal static string Sch_InvalidPartialValidationType;
    internal static string Sch_SchemaElementNameMismatch;
    internal static string Sch_SchemaAttributeNameMismatch;
    internal static string Sch_ValidateAttributeInvalidCall;
    internal static string Sch_ValidateElementInvalidCall;
    internal static string Sch_EnumNotStarted;
    internal static string Sch_EnumFinished;
    internal static string SchInf_schema;
    internal static string SchInf_entity;
    internal static string SchInf_simplecontent;
    internal static string SchInf_extension;
    internal static string SchInf_particle;
    internal static string SchInf_ct;
    internal static string SchInf_seq;
    internal static string SchInf_noseq;
    internal static string SchInf_noct;
    internal static string SchInf_UnknownParticle;
    internal static string SchInf_schematype;
    internal static string SchInf_NoElement;
    internal static string Xp_UnclosedString;
    internal static string Xp_ExprExpected;
    internal static string Xp_InvalidArgumentType;
    internal static string Xp_InvalidNumArgs;
    internal static string Xp_InvalidName;
    internal static string Xp_InvalidToken;
    internal static string Xp_NodeSetExpected;
    internal static string Xp_NotSupported;
    internal static string Xp_InvalidPattern;
    internal static string Xp_InvalidKeyPattern;
    internal static string Xp_BadQueryObject;
    internal static string Xp_UndefinedXsltContext;
    internal static string Xp_NoContext;
    internal static string Xp_UndefVar;
    internal static string Xp_UndefFunc;
    internal static string Xp_FunctionFailed;
    internal static string Xp_CurrentNotAllowed;
    internal static string Xp_QueryTooComplex;
    internal static string Xdom_DualDocumentTypeNode;
    internal static string Xdom_DualDocumentElementNode;
    internal static string Xdom_DualDeclarationNode;
    internal static string Xdom_Import;
    internal static string Xdom_Import_NullNode;
    internal static string Xdom_NoRootEle;
    internal static string Xdom_Attr_Name;
    internal static string Xdom_AttrCol_Object;
    internal static string Xdom_AttrCol_Insert;
    internal static string Xdom_NamedNode_Context;
    internal static string Xdom_Version;
    internal static string Xdom_standalone;
    internal static string Xdom_Ele_Prefix;
    internal static string Xdom_Ent_Innertext;
    internal static string Xdom_EntRef_SetVal;
    internal static string Xdom_WS_Char;
    internal static string Xdom_Node_SetVal;
    internal static string Xdom_Empty_LocalName;
    internal static string Xdom_Set_InnerXml;
    internal static string Xdom_Attr_InUse;
    internal static string Xdom_Enum_ElementList;
    internal static string Xdom_Invalid_NT_String;
    internal static string Xdom_InvalidCharacter_EntityReference;
    internal static string Xdom_IndexOutOfRange;
    internal static string Xdom_Document_Innertext;
    internal static string Xpn_BadPosition;
    internal static string Xpn_MissingParent;
    internal static string Xpn_NoContent;
    internal static string Xdom_Load_NoDocument;
    internal static string Xdom_Load_NoReader;
    internal static string Xdom_Node_Null_Doc;
    internal static string Xdom_Node_Insert_Child;
    internal static string Xdom_Node_Insert_Contain;
    internal static string Xdom_Node_Insert_Path;
    internal static string Xdom_Node_Insert_Context;
    internal static string Xdom_Node_Insert_Location;
    internal static string Xdom_Node_Insert_TypeConflict;
    internal static string Xdom_Node_Remove_Contain;
    internal static string Xdom_Node_Remove_Child;
    internal static string Xdom_Node_Modify_ReadOnly;
    internal static string Xdom_TextNode_SplitText;
    internal static string Xdom_Attr_Reserved_XmlNS;
    internal static string Xdom_Node_Cloning;
    internal static string Xnr_ResolveEntity;
    internal static string XPathDocument_MissingSchemas;
    internal static string XPathDocument_NotEnoughSchemaInfo;
    internal static string XPathDocument_ValidateInvalidNodeType;
    internal static string XPathDocument_SchemaSetNotAllowed;
    internal static string XmlBin_MissingEndCDATA;
    internal static string XmlBin_InvalidQNameID;
    internal static string XmlBinary_UnexpectedToken;
    internal static string XmlBinary_InvalidSqlDecimal;
    internal static string XmlBinary_InvalidSignature;
    internal static string XmlBinary_InvalidProtocolVersion;
    internal static string XmlBinary_UnsupportedCodePage;
    internal static string XmlBinary_InvalidStandalone;
    internal static string XmlBinary_NoParserContext;
    internal static string XmlBinary_ListsOfValuesNotSupported;
    internal static string XmlBinary_CastNotSupported;
    internal static string XmlBinary_NoRemapPrefix;
    internal static string XmlBinary_AttrWithNsNoPrefix;
    internal static string XmlBinary_ValueTooBig;
    internal static string SqlTypes_ArithOverflow;
    internal static string SqlTypes_ArithTruncation;
    internal static string SqlTypes_DivideByZero;
    internal static string XmlMissingType;
    internal static string XmlUnsupportedType;
    internal static string XmlSerializerUnsupportedType;
    internal static string XmlSerializerUnsupportedMember;
    internal static string XmlUnsupportedTypeKind;
    internal static string XmlUnsupportedSoapTypeKind;
    internal static string XmlUnsupportedIDictionary;
    internal static string XmlUnsupportedIDictionaryDetails;
    internal static string XmlDuplicateTypeName;
    internal static string XmlSerializableNameMissing1;
    internal static string XmlConstructorInaccessible;
    internal static string XmlTypeInaccessible;
    internal static string XmlTypeStatic;
    internal static string XmlNoDefaultAccessors;
    internal static string XmlNoAddMethod;
    internal static string XmlReadOnlyPropertyError;
    internal static string XmlAttributeSetAgain;
    internal static string XmlIllegalWildcard;
    internal static string XmlIllegalArrayElement;
    internal static string XmlIllegalForm;
    internal static string XmlBareTextMember;
    internal static string XmlBareAttributeMember;
    internal static string XmlReflectionError;
    internal static string XmlTypeReflectionError;
    internal static string XmlPropertyReflectionError;
    internal static string XmlFieldReflectionError;
    internal static string XmlInvalidDataTypeUsage;
    internal static string XmlInvalidXsdDataType;
    internal static string XmlDataTypeMismatch;
    internal static string XmlIllegalTypeContext;
    internal static string XmlUdeclaredXsdType;
    internal static string XmlAnyElementNamespace;
    internal static string XmlInvalidConstantAttribute;
    internal static string XmlIllegalDefault;
    internal static string XmlIllegalAttributesArrayAttribute;
    internal static string XmlIllegalElementsArrayAttribute;
    internal static string XmlIllegalArrayArrayAttribute;
    internal static string XmlIllegalAttribute;
    internal static string XmlIllegalType;
    internal static string XmlIllegalAttrOrText;
    internal static string XmlIllegalSoapAttribute;
    internal static string XmlIllegalAttrOrTextInterface;
    internal static string XmlIllegalAttributeFlagsArray;
    internal static string XmlIllegalAnyElement;
    internal static string XmlInvalidIsNullable;
    internal static string XmlInvalidNotNullable;
    internal static string XmlInvalidFormUnqualified;
    internal static string XmlDuplicateNamespace;
    internal static string XmlElementHasNoName;
    internal static string XmlAttributeHasNoName;
    internal static string XmlElementImportedTwice;
    internal static string XmlHiddenMember;
    internal static string XmlInvalidXmlOverride;
    internal static string XmlMembersDeriveError;
    internal static string XmlTypeUsedTwice;
    internal static string XmlMissingGroup;
    internal static string XmlMissingAttributeGroup;
    internal static string XmlMissingDataType;
    internal static string XmlInvalidEncoding;
    internal static string XmlMissingElement;
    internal static string XmlMissingAttribute;
    internal static string XmlMissingMethodEnum;
    internal static string XmlNoAttributeHere;
    internal static string XmlNeedAttributeHere;
    internal static string XmlElementNameMismatch;
    internal static string XmlUnsupportedDefaultType;
    internal static string XmlUnsupportedDefaultValue;
    internal static string XmlInvalidDefaultValue;
    internal static string XmlInvalidDefaultEnumValue;
    internal static string XmlUnknownNode;
    internal static string XmlUnknownConstant;
    internal static string XmlSerializeError;
    internal static string XmlSerializeErrorDetails;
    internal static string XmlCompilerError;
    internal static string XmlSchemaDuplicateNamespace;
    internal static string XmlSchemaCompiled;
    internal static string XmlInvalidSchemaExtension;
    internal static string XmlInvalidArrayDimentions;
    internal static string XmlInvalidArrayTypeName;
    internal static string XmlInvalidArrayTypeNamespace;
    internal static string XmlMissingArrayType;
    internal static string XmlEmptyArrayType;
    internal static string XmlInvalidArraySyntax;
    internal static string XmlInvalidArrayTypeSyntax;
    internal static string XmlMismatchedArrayBrackets;
    internal static string XmlInvalidArrayLength;
    internal static string XmlMissingHref;
    internal static string XmlInvalidHref;
    internal static string XmlUnknownType;
    internal static string XmlAbstractType;
    internal static string XmlMappingsScopeMismatch;
    internal static string XmlMethodTypeNameConflict;
    internal static string XmlCannotReconcileAccessor;
    internal static string XmlCannotReconcileAttributeAccessor;
    internal static string XmlCannotReconcileAccessorDefault;
    internal static string XmlInvalidTypeAttributes;
    internal static string XmlInvalidAttributeUse;
    internal static string XmlTypesDuplicate;
    internal static string XmlInvalidSoapArray;
    internal static string XmlCannotIncludeInSchema;
    internal static string XmlSoapCannotIncludeInSchema;
    internal static string XmlInvalidSerializable;
    internal static string XmlInvalidUseOfType;
    internal static string XmlUnxpectedType;
    internal static string XmlUnknownAnyElement;
    internal static string XmlMultipleAttributeOverrides;
    internal static string XmlInvalidEnumAttribute;
    internal static string XmlInvalidReturnPosition;
    internal static string XmlInvalidElementAttribute;
    internal static string XmlInvalidVoid;
    internal static string XmlInvalidContent;
    internal static string XmlInvalidSchemaElementType;
    internal static string XmlInvalidSubstitutionGroupUse;
    internal static string XmlElementMissingType;
    internal static string XmlInvalidAnyAttributeUse;
    internal static string XmlSoapInvalidAttributeUse;
    internal static string XmlSoapInvalidChoice;
    internal static string XmlSoapUnsupportedGroupRef;
    internal static string XmlSoapUnsupportedGroupRepeat;
    internal static string XmlSoapUnsupportedGroupNested;
    internal static string XmlSoapUnsupportedGroupAny;
    internal static string XmlInvalidEnumContent;
    internal static string XmlInvalidAttributeType;
    internal static string XmlInvalidBaseType;
    internal static string XmlPrimitiveBaseType;
    internal static string XmlInvalidIdentifier;
    internal static string XmlGenError;
    internal static string XmlInvalidXmlns;
    internal static string XmlCircularReference;
    internal static string XmlCircularReference2;
    internal static string XmlAnonymousBaseType;
    internal static string XmlMissingSchema;
    internal static string XmlNoSerializableMembers;
    internal static string XmlIllegalOverride;
    internal static string XmlReadOnlyCollection;
    internal static string XmlRpcNestedValueType;
    internal static string XmlRpcRefsInValueType;
    internal static string XmlRpcArrayOfValueTypes;
    internal static string XmlDuplicateElementName;
    internal static string XmlDuplicateAttributeName;
    internal static string XmlBadBaseElement;
    internal static string XmlBadBaseType;
    internal static string XmlUndefinedAlias;
    internal static string XmlChoiceIdentifierType;
    internal static string XmlChoiceIdentifierArrayType;
    internal static string XmlChoiceIdentifierTypeEnum;
    internal static string XmlChoiceIdentiferMemberMissing;
    internal static string XmlChoiceIdentiferAmbiguous;
    internal static string XmlChoiceIdentiferMissing;
    internal static string XmlChoiceMissingValue;
    internal static string XmlChoiceMissingAnyValue;
    internal static string XmlChoiceMismatchChoiceException;
    internal static string XmlArrayItemAmbiguousTypes;
    internal static string XmlUnsupportedInterface;
    internal static string XmlUnsupportedInterfaceDetails;
    internal static string XmlUnsupportedRank;
    internal static string XmlUnsupportedInheritance;
    internal static string XmlIllegalMultipleText;
    internal static string XmlIllegalMultipleTextMembers;
    internal static string XmlIllegalArrayTextAttribute;
    internal static string XmlIllegalTypedTextAttribute;
    internal static string XmlIllegalSimpleContentExtension;
    internal static string XmlInvalidCast;
    internal static string XmlInvalidCastWithId;
    internal static string XmlInvalidArrayRef;
    internal static string XmlInvalidNullCast;
    internal static string XmlMultipleXmlns;
    internal static string XmlMultipleXmlnsMembers;
    internal static string XmlXmlnsInvalidType;
    internal static string XmlSoleXmlnsAttribute;
    internal static string XmlConstructorHasSecurityAttributes;
    internal static string XmlPropertyHasSecurityAttributes;
    internal static string XmlMethodHasSecurityAttributes;
    internal static string XmlDefaultAccessorHasSecurityAttributes;
    internal static string XmlInvalidChoiceIdentifierValue;
    internal static string XmlAnyElementDuplicate;
    internal static string XmlChoiceIdDuplicate;
    internal static string XmlChoiceIdentifierMismatch;
    internal static string XmlUnsupportedRedefine;
    internal static string XmlDuplicateElementInScope;
    internal static string XmlDuplicateElementInScope1;
    internal static string XmlNoPartialTrust;
    internal static string XmlInvalidEncodingNotEncoded1;
    internal static string XmlInvalidEncoding3;
    internal static string XmlInvalidSpecifiedType;
    internal static string XmlUnsupportedOpenGenericType;
    internal static string XmlMismatchSchemaObjects;
    internal static string XmlCircularTypeReference;
    internal static string XmlCircularGroupReference;
    internal static string XmlRpcLitElementNamespace;
    internal static string XmlRpcLitElementNullable;
    internal static string XmlRpcLitElements;
    internal static string XmlRpcLitArrayElement;
    internal static string XmlRpcLitAttributeAttributes;
    internal static string XmlRpcLitAttributes;
    internal static string XmlSequenceMembers;
    internal static string XmlRpcLitXmlns;
    internal static string XmlDuplicateNs;
    internal static string XmlAnonymousInclude;
    internal static string RefSyntaxNotSupportedForElements0;
    internal static string XmlSchemaIncludeLocation;
    internal static string XmlSerializableSchemaError;
    internal static string XmlGetSchemaMethodName;
    internal static string XmlGetSchemaMethodMissing;
    internal static string XmlGetSchemaMethodReturnType;
    internal static string XmlGetSchemaEmptyTypeName;
    internal static string XmlGetSchemaTypeMissing;
    internal static string XmlGetSchemaInclude;
    internal static string XmlSerializableAttributes;
    internal static string XmlSerializableMergeItem;
    internal static string XmlSerializableBadDerivation;
    internal static string XmlSerializableMissingClrType;
    internal static string XmlCircularDerivation;
    internal static string XmlSerializerAccessDenied;
    internal static string XmlIdentityAccessDenied;
    internal static string XmlMelformMapping;
    internal static string XmlSchemaSyntaxErrorDetails;
    internal static string XmlSchemaElementReference;
    internal static string XmlSchemaAttributeReference;
    internal static string XmlSchemaItem;
    internal static string XmlSchemaNamedItem;
    internal static string XmlSchemaContentDef;
    internal static string XmlSchema;
    internal static string XmlSerializerCompileFailed;
    internal static string XmlSerializableRootDupName;
    internal static string XmlDropDefaultAttribute;
    internal static string XmlDropAttributeValue;
    internal static string XmlDropArrayAttributeValue;
    internal static string XmlDropNonPrimitiveAttributeValue;
    internal static string XmlNotKnownDefaultValue;
    internal static string XmlRemarks;
    internal static string XmlCodegenWarningDetails;
    internal static string XmlExtensionComment;
    internal static string XmlExtensionDuplicateDefinition;
    internal static string XmlImporterExtensionBadLocalTypeName;
    internal static string XmlImporterExtensionBadTypeName;
    internal static string XmlConfigurationDuplicateExtension;
    internal static string XmlPregenMissingDirectory;
    internal static string XmlPregenMissingTempDirectory;
    internal static string XmlPregenTypeDynamic;
    internal static string XmlSerializerExpiredDetails;
    internal static string XmlSerializerExpired;
    internal static string XmlPregenAssemblyDynamic;
    internal static string XmlNotSerializable;
    internal static string XmlPregenOrphanType;
    internal static string XmlPregenCannotLoad;
    internal static string XmlPregenInvalidXmlSerializerAssemblyAttribute;
    internal static string XmlSequenceInconsistent;
    internal static string XmlSequenceUnique;
    internal static string XmlSequenceHierarchy;
    internal static string XmlSequenceMatch;
    internal static string XmlDisallowNegativeValues;
    internal static string Xml_BadComment;
    internal static string Xml_NumEntityOverflow;
    internal static string Xml_UnexpectedCharacter;
    internal static string Xml_UnexpectedToken1;
    internal static string Xml_TagMismatchFileName;
    internal static string Xml_ReservedNs;
    internal static string Xml_BadElementData;
    internal static string Xml_UnexpectedElement;
    internal static string Xml_TagNotInTheSameEntity;
    internal static string Xml_InvalidPartialContentData;
    internal static string Xml_CanNotStartWithXmlInNamespace;
    internal static string Xml_UnparsedEntity;
    internal static string Xml_InvalidContentForThisNode;
    internal static string Xml_MissingEncodingDecl;
    internal static string Xml_InvalidSurrogatePair;
    internal static string Sch_ErrorPosition;
    internal static string Sch_ReservedNsDecl;
    internal static string Sch_NotInSchemaCollection;
    internal static string Sch_NotationNotAttr;
    internal static string Sch_InvalidContent;
    internal static string Sch_InvalidContentExpecting;
    internal static string Sch_InvalidTextWhiteSpace;
    internal static string Sch_XSCHEMA;
    internal static string Sch_DubSchema;
    internal static string Xp_TokenExpected;
    internal static string Xp_NodeTestExpected;
    internal static string Xp_NumberExpected;
    internal static string Xp_QueryExpected;
    internal static string Xp_InvalidArgument;
    internal static string Xp_FunctionExpected;
    internal static string Xp_InvalidPatternString;
    internal static string Xp_BadQueryString;
    internal static string XdomXpNav_NullParam;
    internal static string Xdom_Load_NodeType;
    internal static string XmlMissingMethod;
    internal static string XmlIncludeSerializableError;
    internal static string XmlCompilerDynModule;
    internal static string XmlInvalidSchemaType;
    internal static string XmlInvalidAnyUse;
    internal static string XmlSchemaSyntaxError;
    internal static string XmlDuplicateChoiceElement;
    internal static string XmlConvert_BadTimeSpan;
    internal static string XmlConvert_BadBoolean;
    internal static string Xml_UnexpectedToken;
    internal static string Xml_PartialContentNodeTypeNotSupported;
    internal static string Sch_AttributeValueDataType;
    internal static string Sch_ElementValueDataType;
    internal static string Sch_NonDeterministicAny;
    internal static string Sch_MismatchTargetNamespace;
    internal static string Sch_UnionFailed;
    internal static string Sch_XsiTypeBlocked;
    internal static string Sch_InvalidElementInEmpty;
    internal static string Sch_InvalidElementInTextOnly;
    internal static string Sch_InvalidNameAttribute;
    internal static string XmlInternalError;
    internal static string XmlInternalErrorDetails;
    internal static string XmlInternalErrorMethod;
    internal static string XmlInternalErrorReaderAdvance;
    internal static string Enc_InvalidByteInEncoding;
    internal static string Arg_ExpectingXmlTextReader;
    internal static string Arg_CannotCreateNode;
    internal static string Arg_IncompatibleParamType;
    internal static string XmlNonCLSCompliantException;
    internal static string Xml_XapResolverCannotOpenUri;
    public static ResourceManager Resources { get; }
    private static Res();
    public static ResourceManager get_Resources();
    public static string GetString(string name, Object[] args);
    public static string GetString(string name);
    public static string GetString(string name, Boolean& usedFallback);
    public static object GetObject(string name);
}
[AttributeUsageAttribute("32767")]
internal class System.Xml.ResCategoryAttribute : CategoryAttribute {
    public ResCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Xml.ResDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public ResDescriptionAttribute(string description);
    public virtual string get_Description();
}
[FlagsAttribute]
public enum System.Xml.Resolvers.XmlKnownDtds : Enum {
    public int value__;
    public static XmlKnownDtds None;
    public static XmlKnownDtds Xhtml10;
    public static XmlKnownDtds Rss091;
    public static XmlKnownDtds All;
}
public class System.Xml.Resolvers.XmlPreloadedResolver : XmlResolver {
    unknown ICredentials Credentials {public set; }
    public IEnumerable`1<Uri> PreloadedUris { get; }
    public XmlPreloadedResolver(XmlKnownDtds preloadedDtds);
    public XmlPreloadedResolver(XmlResolver fallbackResolver);
    public XmlPreloadedResolver(XmlResolver fallbackResolver, XmlKnownDtds preloadedDtds);
    public XmlPreloadedResolver(XmlResolver fallbackResolver, XmlKnownDtds preloadedDtds, IEqualityComparer`1<Uri> uriComparer);
    private static XmlPreloadedResolver();
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual void set_Credentials(ICredentials value);
    public virtual bool SupportsType(Uri absoluteUri, Type type);
    public void Add(Uri uri, Byte[] value);
    public void Add(Uri uri, Byte[] value, int offset, int count);
    public void Add(Uri uri, Stream value);
    public void Add(Uri uri, string value);
    public IEnumerable`1<Uri> get_PreloadedUris();
    public void Remove(Uri uri);
    public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
}
internal class System.Xml.SafeAsciiDecoder : Decoder {
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed);
}
internal class System.Xml.Schema.ActiveAxis : object {
    public int CurrentDepth { get; }
    internal ActiveAxis(Asttree axisTree);
    public int get_CurrentDepth();
    internal void Reactivate();
    public bool MoveToStartElement(string localname, string URN);
    public virtual bool EndElement(string localname, string URN);
    public bool MoveToAttribute(string localname, string URN);
}
internal class System.Xml.Schema.AllElementsContentValidator : ContentValidator {
    public bool IsEmptiable { get; }
    public AllElementsContentValidator(XmlSchemaContentType contentType, int size, bool isEmptiable);
    public bool AddElement(XmlQualifiedName name, object particle, bool isEmptiable);
    public virtual bool get_IsEmptiable();
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public virtual ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly);
    public virtual ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet);
}
internal class System.Xml.Schema.Asttree : object {
    internal ArrayList SubtreeArray { get; }
    public Asttree(string xPath, bool isField, XmlNamespaceManager nsmgr);
    internal ArrayList get_SubtreeArray();
    internal static bool IsAttribute(Axis ast);
    internal static bool IsSelf(Axis ast);
    public void CompileXPath(string xPath, bool isField, XmlNamespaceManager nsmgr);
}
internal enum System.Xml.Schema.AttributeMatchState : Enum {
    public int value__;
    public static AttributeMatchState AttributeFound;
    public static AttributeMatchState AnyIdAttributeFound;
    public static AttributeMatchState UndeclaredElementAndAttribute;
    public static AttributeMatchState UndeclaredAttribute;
    public static AttributeMatchState AnyAttributeLax;
    public static AttributeMatchState AnyAttributeSkip;
    public static AttributeMatchState ProhibitedAnyAttribute;
    public static AttributeMatchState ProhibitedAttribute;
    public static AttributeMatchState AttributeNameMismatch;
    public static AttributeMatchState ValidateAttributeInvalidCall;
}
internal class System.Xml.Schema.AutoValidator : BaseValidator {
    public bool PreserveWhitespace { get; }
    public AutoValidator(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling);
    public virtual bool get_PreserveWhitespace();
    public virtual void Validate();
    public virtual void CompleteValidation();
    public virtual object FindId(string name);
}
internal class System.Xml.Schema.AxisElement : object {
    internal DoubleLinkAxis curNode;
    internal int rootDepth;
    internal int curDepth;
    internal bool isMatch;
    internal DoubleLinkAxis CurNode { get; }
    internal AxisElement(DoubleLinkAxis node, int depth);
    internal DoubleLinkAxis get_CurNode();
    internal void SetDepth(int depth);
    internal void MoveToParent(int depth, ForwardAxis parent);
    internal bool MoveToChild(string name, string URN, int depth, ForwardAxis parent);
}
internal class System.Xml.Schema.AxisStack : object {
    internal ForwardAxis Subtree { get; }
    internal int Length { get; }
    public AxisStack(ForwardAxis faxis, ActiveAxis parent);
    internal ForwardAxis get_Subtree();
    internal int get_Length();
    internal void Push(int depth);
    internal void Pop();
    internal static bool Equal(string thisname, string thisURN, string name, string URN);
    internal void MoveToParent(string name, string URN, int depth);
    internal bool MoveToChild(string name, string URN, int depth);
    internal bool MoveToAttribute(string name, string URN, int depth);
}
internal class System.Xml.Schema.BaseProcessor : object {
    protected XmlNameTable NameTable { get; }
    protected SchemaNames SchemaNames { get; }
    protected ValidationEventHandler EventHandler { get; }
    protected XmlSchemaCompilationSettings CompilationSettings { get; }
    protected bool HasErrors { get; }
    public BaseProcessor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler);
    public BaseProcessor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler, XmlSchemaCompilationSettings compilationSettings);
    protected XmlNameTable get_NameTable();
    protected SchemaNames get_SchemaNames();
    protected ValidationEventHandler get_EventHandler();
    protected XmlSchemaCompilationSettings get_CompilationSettings();
    protected bool get_HasErrors();
    protected void AddToTable(XmlSchemaObjectTable table, XmlQualifiedName qname, XmlSchemaObject item);
    protected void SendValidationEvent(string code, XmlSchemaObject source);
    protected void SendValidationEvent(string code, string msg, XmlSchemaObject source);
    protected void SendValidationEvent(string code, string msg1, string msg2, XmlSchemaObject source);
    protected void SendValidationEvent(string code, String[] args, Exception innerException, XmlSchemaObject source);
    protected void SendValidationEvent(string code, string msg1, string msg2, string sourceUri, int lineNumber, int linePosition);
    protected void SendValidationEvent(string code, XmlSchemaObject source, XmlSeverityType severity);
    protected void SendValidationEvent(XmlSchemaException e);
    protected void SendValidationEvent(string code, string msg, XmlSchemaObject source, XmlSeverityType severity);
    protected void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity);
    protected void SendValidationEventNoThrow(XmlSchemaException e, XmlSeverityType severity);
}
internal class System.Xml.Schema.BaseValidator : object {
    protected SchemaInfo schemaInfo;
    protected XmlValidatingReaderImpl reader;
    protected XmlQualifiedName elementName;
    protected ValidationState context;
    protected StringBuilder textValue;
    protected string textString;
    protected bool hasSibling;
    protected bool checkDatatype;
    public XmlValidatingReaderImpl Reader { get; }
    public XmlSchemaCollection SchemaCollection { get; }
    public XmlNameTable NameTable { get; }
    public SchemaNames SchemaNames { get; }
    public PositionInfo PositionInfo { get; }
    public XmlResolver XmlResolver { get; public set; }
    public Uri BaseUri { get; public set; }
    public ValidationEventHandler EventHandler { get; }
    public SchemaInfo SchemaInfo { get; public set; }
    public IDtdInfo DtdInfo { get; public set; }
    public bool PreserveWhitespace { get; }
    public BaseValidator(BaseValidator other);
    public BaseValidator(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling);
    public XmlValidatingReaderImpl get_Reader();
    public XmlSchemaCollection get_SchemaCollection();
    public XmlNameTable get_NameTable();
    public SchemaNames get_SchemaNames();
    public PositionInfo get_PositionInfo();
    public XmlResolver get_XmlResolver();
    public void set_XmlResolver(XmlResolver value);
    public Uri get_BaseUri();
    public void set_BaseUri(Uri value);
    public ValidationEventHandler get_EventHandler();
    public SchemaInfo get_SchemaInfo();
    public void set_SchemaInfo(SchemaInfo value);
    public IDtdInfo get_DtdInfo();
    public void set_DtdInfo(IDtdInfo value);
    public virtual bool get_PreserveWhitespace();
    public virtual void Validate();
    public virtual void CompleteValidation();
    public virtual object FindId(string name);
    public void ValidateText();
    public void ValidateWhitespace();
    protected void SendValidationEvent(string code);
    protected void SendValidationEvent(string code, String[] args);
    protected void SendValidationEvent(string code, string arg);
    protected void SendValidationEvent(string code, string arg1, string arg2);
    protected void SendValidationEvent(XmlSchemaException e);
    protected void SendValidationEvent(string code, string msg, XmlSeverityType severity);
    protected void SendValidationEvent(string code, String[] args, XmlSeverityType severity);
    protected void SendValidationEvent(XmlSchemaException e, XmlSeverityType severity);
    protected static void ProcessEntity(SchemaInfo sinfo, string name, object sender, ValidationEventHandler eventhandler, string baseUri, int lineNumber, int linePosition);
    protected static void ProcessEntity(SchemaInfo sinfo, string name, IValidationEventHandling eventHandling, string baseUriStr, int lineNumber, int linePosition);
    public static BaseValidator CreateInstance(ValidationType valType, XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling, bool processIdentityConstraints);
}
internal class System.Xml.Schema.BinaryFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(Byte[] value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Schema.BitSet : object {
    public int Count { get; }
    public bool Item { get; }
    public bool IsEmpty { get; }
    public BitSet(int count);
    public int get_Count();
    public bool get_Item(int index);
    public void Clear();
    public void Clear(int index);
    public void Set(int index);
    public bool Get(int index);
    public int NextSet(int startFrom);
    public void And(BitSet other);
    public void Or(BitSet other);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public BitSet Clone();
    public bool get_IsEmpty();
    public bool Intersects(BitSet other);
}
internal class System.Xml.Schema.ChameleonKey : object {
    internal string targetNS;
    internal Uri chameleonLocation;
    internal XmlSchema originalSchema;
    public ChameleonKey(string ns, XmlSchema originalSchema);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class System.Xml.Schema.ChoiceNode : InteriorNode {
    public bool IsNullable { get; }
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
}
internal class System.Xml.Schema.CompiledIdentityConstraint : object {
    internal XmlQualifiedName name;
    internal XmlQualifiedName refer;
    public static CompiledIdentityConstraint Empty;
    public ConstraintRole Role { get; }
    public Asttree Selector { get; }
    public Asttree[] Fields { get; }
    public CompiledIdentityConstraint(XmlSchemaIdentityConstraint constraint, XmlNamespaceManager nsmgr);
    private static CompiledIdentityConstraint();
    public ConstraintRole get_Role();
    public Asttree get_Selector();
    public Asttree[] get_Fields();
}
internal class System.Xml.Schema.Compiler : BaseProcessor {
    public Compiler(XmlNameTable nameTable, ValidationEventHandler eventHandler, XmlSchema schemaForSchema, XmlSchemaCompilationSettings compilationSettings);
    public bool Execute(XmlSchemaSet schemaSet, SchemaInfo schemaCompiledInfo);
    internal void Prepare(XmlSchema schema, bool cleanup);
    internal void ImportAllCompiledSchemas(XmlSchemaSet schemaSet);
    internal bool Compile();
}
internal enum System.Xml.Schema.Compositor : Enum {
    public int value__;
    public static Compositor Root;
    public static Compositor Include;
    public static Compositor Import;
    public static Compositor Redefine;
}
internal class System.Xml.Schema.ConstraintStruct : object {
    internal CompiledIdentityConstraint constraint;
    internal SelectorActiveAxis axisSelector;
    internal ArrayList axisFields;
    internal Hashtable qualifiedTable;
    internal Hashtable keyrefTable;
    internal int TableDim { get; }
    internal ConstraintStruct(CompiledIdentityConstraint constraint);
    internal int get_TableDim();
}
internal class System.Xml.Schema.ContentValidator : object {
    public static ContentValidator Empty;
    public static ContentValidator TextOnly;
    public static ContentValidator Mixed;
    public static ContentValidator Any;
    public XmlSchemaContentType ContentType { get; }
    public bool PreserveWhitespace { get; }
    public bool IsEmptiable { get; }
    public bool IsOpen { get; public set; }
    public ContentValidator(XmlSchemaContentType contentType);
    protected ContentValidator(XmlSchemaContentType contentType, bool isOpen, bool isEmptiable);
    private static ContentValidator();
    public XmlSchemaContentType get_ContentType();
    public bool get_PreserveWhitespace();
    public virtual bool get_IsEmptiable();
    public bool get_IsOpen();
    public void set_IsOpen(bool value);
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public virtual ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly);
    public virtual ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet);
    public static void AddParticleToExpected(XmlSchemaParticle p, XmlSchemaSet schemaSet, ArrayList particles);
    public static void AddParticleToExpected(XmlSchemaParticle p, XmlSchemaSet schemaSet, ArrayList particles, bool global);
}
internal class System.Xml.Schema.Datatype_anyAtomicType : Datatype_anySimpleType {
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    public XmlTypeCode TypeCode { get; }
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_anySimpleType : DatatypeImplementation {
    internal FacetsChecker FacetsChecker { get; }
    public Type ValueType { get; }
    public XmlTypeCode TypeCode { get; }
    internal Type ListValueType { get; }
    public XmlTokenizedType TokenizedType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    private static Datatype_anySimpleType();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual Type get_ValueType();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual Type get_ListValueType();
    public virtual XmlTokenizedType get_TokenizedType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_anyURI : Datatype_anySimpleType {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal bool HasValueFacets { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_anyURI();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual bool get_HasValueFacets();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_base64Binary : Datatype_anySimpleType {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_base64Binary();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_boolean : Datatype_anySimpleType {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_boolean();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_byte : Datatype_short {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_byte();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_char : Datatype_anySimpleType {
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_char();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_date : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_dateTime : Datatype_dateTimeBase {
}
internal class System.Xml.Schema.Datatype_dateTimeBase : Datatype_anySimpleType {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal Datatype_dateTimeBase(XsdDateTimeFlags dateTimeFlags);
    private static Datatype_dateTimeBase();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_dateTimeNoTimeZone : Datatype_dateTimeBase {
}
internal class System.Xml.Schema.Datatype_dateTimeTimeZone : Datatype_dateTimeBase {
}
internal class System.Xml.Schema.Datatype_day : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_dayTimeDuration : Datatype_duration {
    public XmlTypeCode TypeCode { get; }
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_decimal : Datatype_anySimpleType {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_decimal();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_double : Datatype_anySimpleType {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_double();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_doubleXdr : Datatype_double {
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
}
internal class System.Xml.Schema.Datatype_duration : Datatype_anySimpleType {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_duration();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_ENTITY : Datatype_NCName {
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
}
internal class System.Xml.Schema.Datatype_ENUMERATION : Datatype_NMTOKEN {
    public XmlTokenizedType TokenizedType { get; }
    public virtual XmlTokenizedType get_TokenizedType();
}
internal class System.Xml.Schema.Datatype_fixed : Datatype_decimal {
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_float : Datatype_anySimpleType {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_float();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_floatXdr : Datatype_float {
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
}
internal class System.Xml.Schema.Datatype_hexBinary : Datatype_anySimpleType {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_hexBinary();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_ID : Datatype_NCName {
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
}
internal class System.Xml.Schema.Datatype_IDREF : Datatype_NCName {
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
}
internal class System.Xml.Schema.Datatype_int : Datatype_long {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_int();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_integer : Datatype_decimal {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_language : Datatype_token {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_List : Datatype_anySimpleType {
    public Type ValueType { get; }
    public XmlTokenizedType TokenizedType { get; }
    internal Type ListValueType { get; }
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal DatatypeImplementation ItemType { get; }
    internal Datatype_List(DatatypeImplementation type);
    internal Datatype_List(DatatypeImplementation type, int minListSize);
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    public virtual XmlTokenizedType get_TokenizedType();
    internal virtual Type get_ListValueType();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal DatatypeImplementation get_ItemType();
    internal virtual Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver namespaceResolver, Object& typedValue);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_long : Datatype_integer {
    internal FacetsChecker FacetsChecker { get; }
    internal bool HasValueFacets { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_long();
    internal virtual FacetsChecker get_FacetsChecker();
    internal virtual bool get_HasValueFacets();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_month : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_monthDay : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_Name : Datatype_token {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_NCName : Datatype_Name {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_negativeInteger : Datatype_nonPositiveInteger {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    private static Datatype_negativeInteger();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_NMTOKEN : Datatype_token {
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
}
internal class System.Xml.Schema.Datatype_nonNegativeInteger : Datatype_integer {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    internal bool HasValueFacets { get; }
    private static Datatype_nonNegativeInteger();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual bool get_HasValueFacets();
}
internal class System.Xml.Schema.Datatype_nonPositiveInteger : Datatype_integer {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    internal bool HasValueFacets { get; }
    private static Datatype_nonPositiveInteger();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual bool get_HasValueFacets();
}
internal class System.Xml.Schema.Datatype_normalizedString : Datatype_string {
    public XmlTypeCode TypeCode { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal bool HasValueFacets { get; }
    public virtual XmlTypeCode get_TypeCode();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual bool get_HasValueFacets();
}
internal class System.Xml.Schema.Datatype_normalizedStringV1Compat : Datatype_string {
    public XmlTypeCode TypeCode { get; }
    internal bool HasValueFacets { get; }
    public virtual XmlTypeCode get_TypeCode();
    internal virtual bool get_HasValueFacets();
}
internal class System.Xml.Schema.Datatype_NOTATION : Datatype_anySimpleType {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    private static Datatype_NOTATION();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
    internal virtual void VerifySchemaValid(XmlSchemaObjectTable notations, XmlSchemaObject caller);
}
internal class System.Xml.Schema.Datatype_positiveInteger : Datatype_nonNegativeInteger {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    private static Datatype_positiveInteger();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_QName : Datatype_anySimpleType {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    private static Datatype_QName();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_QNameXdr : Datatype_anySimpleType {
    public XmlTokenizedType TokenizedType { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_QNameXdr();
    public virtual XmlTokenizedType get_TokenizedType();
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
}
internal class System.Xml.Schema.Datatype_short : Datatype_int {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_short();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_string : Datatype_anySimpleType {
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public XmlTokenizedType TokenizedType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    public virtual XmlTokenizedType get_TokenizedType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_time : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_timeNoTimeZone : Datatype_dateTimeBase {
}
internal class System.Xml.Schema.Datatype_timeTimeZone : Datatype_dateTimeBase {
}
internal class System.Xml.Schema.Datatype_token : Datatype_normalizedString {
    public XmlTypeCode TypeCode { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    public virtual XmlTypeCode get_TypeCode();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
}
internal class System.Xml.Schema.Datatype_tokenV1Compat : Datatype_normalizedStringV1Compat {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_union : Datatype_anySimpleType {
    public Type ValueType { get; }
    public XmlTypeCode TypeCode { get; }
    internal FacetsChecker FacetsChecker { get; }
    internal Type ListValueType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal XmlSchemaSimpleType[] BaseMemberTypes { get; }
    internal Datatype_union(XmlSchemaSimpleType[] types);
    private static Datatype_union();
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual FacetsChecker get_FacetsChecker();
    internal virtual Type get_ListValueType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal XmlSchemaSimpleType[] get_BaseMemberTypes();
    internal bool HasAtomicMembers();
    internal bool IsUnionBaseOf(DatatypeImplementation derivedType);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
    internal virtual Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_unsignedByte : Datatype_unsignedShort {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_unsignedByte();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_unsignedInt : Datatype_unsignedLong {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_unsignedInt();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_unsignedLong : Datatype_nonNegativeInteger {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_unsignedLong();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_unsignedShort : Datatype_unsignedInt {
    internal FacetsChecker FacetsChecker { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    private static Datatype_unsignedShort();
    internal virtual FacetsChecker get_FacetsChecker();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual int Compare(object value1, object value2);
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_untypedAtomicType : Datatype_anyAtomicType {
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    public XmlTypeCode TypeCode { get; }
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_uuid : Datatype_anySimpleType {
    public Type ValueType { get; }
    internal Type ListValueType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    private static Datatype_uuid();
    public virtual Type get_ValueType();
    internal virtual Type get_ListValueType();
    internal virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual int Compare(object value1, object value2);
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
}
internal class System.Xml.Schema.Datatype_year : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_yearMonth : Datatype_dateTimeBase {
    public XmlTypeCode TypeCode { get; }
    public virtual XmlTypeCode get_TypeCode();
}
internal class System.Xml.Schema.Datatype_yearMonthDuration : Datatype_duration {
    public XmlTypeCode TypeCode { get; }
    internal virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
    public virtual XmlTypeCode get_TypeCode();
}
internal abstract class System.Xml.Schema.DatatypeImplementation : XmlSchemaDatatype {
    internal static XmlQualifiedName QnAnySimpleType;
    internal static XmlQualifiedName QnAnyType;
    internal static FacetsChecker stringFacetsChecker;
    internal static FacetsChecker miscFacetsChecker;
    internal static FacetsChecker numeric2FacetsChecker;
    internal static FacetsChecker binaryFacetsChecker;
    internal static FacetsChecker dateTimeFacetsChecker;
    internal static FacetsChecker durationFacetsChecker;
    internal static FacetsChecker listFacetsChecker;
    internal static FacetsChecker qnameFacetsChecker;
    internal static FacetsChecker unionFacetsChecker;
    internal static DatatypeImplementation c_normalizedStringV1Compat;
    internal static DatatypeImplementation c_tokenV1Compat;
    internal static XmlSchemaSimpleType AnySimpleType { get; }
    internal static XmlSchemaSimpleType AnyAtomicType { get; }
    internal static XmlSchemaSimpleType UntypedAtomicType { get; }
    internal static XmlSchemaSimpleType YearMonthDurationType { get; }
    internal static XmlSchemaSimpleType DayTimeDurationType { get; }
    internal FacetsChecker FacetsChecker { get; }
    internal XmlValueConverter ValueConverter { get; }
    public XmlTokenizedType TokenizedType { get; }
    public Type ValueType { get; }
    public XmlSchemaDatatypeVariety Variety { get; }
    public XmlTypeCode TypeCode { get; }
    internal RestrictionFacets Restriction { get; internal set; }
    internal bool HasLexicalFacets { get; }
    internal bool HasValueFacets { get; }
    protected DatatypeImplementation Base { get; }
    internal Type ListValueType { get; }
    internal RestrictionFlags ValidRestrictionFlags { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    private static DatatypeImplementation();
    internal static XmlSchemaSimpleType get_AnySimpleType();
    internal static XmlSchemaSimpleType get_AnyAtomicType();
    internal static XmlSchemaSimpleType get_UntypedAtomicType();
    internal static XmlSchemaSimpleType get_YearMonthDurationType();
    internal static XmlSchemaSimpleType get_DayTimeDurationType();
    internal static DatatypeImplementation FromXmlTokenizedType(XmlTokenizedType token);
    internal static DatatypeImplementation FromXmlTokenizedTypeXsd(XmlTokenizedType token);
    internal static DatatypeImplementation FromXdrName(string name);
    internal static XmlSchemaSimpleType StartBuiltinType(XmlQualifiedName qname, XmlSchemaDatatype dataType);
    internal static void FinishBuiltinType(XmlSchemaSimpleType derivedType, XmlSchemaSimpleType baseType);
    internal static void CreateBuiltinTypes();
    internal static XmlSchemaSimpleType GetSimpleTypeFromTypeCode(XmlTypeCode typeCode);
    internal static XmlSchemaSimpleType GetSimpleTypeFromXsdType(XmlQualifiedName qname);
    internal static XmlSchemaSimpleType GetNormalizedStringTypeV1Compat();
    internal static XmlSchemaSimpleType GetTokenTypeV1Compat();
    internal static XmlSchemaSimpleType[] GetBuiltInTypes();
    internal static XmlTypeCode GetPrimitiveTypeCode(XmlTypeCode typeCode);
    internal virtual XmlSchemaDatatype DeriveByRestriction(XmlSchemaObjectCollection facets, XmlNameTable nameTable, XmlSchemaType schemaType);
    internal virtual XmlSchemaDatatype DeriveByList(XmlSchemaType schemaType);
    internal XmlSchemaDatatype DeriveByList(int minSize, XmlSchemaType schemaType);
    internal static DatatypeImplementation DeriveByUnion(XmlSchemaSimpleType[] types, XmlSchemaType schemaType);
    internal virtual void VerifySchemaValid(XmlSchemaObjectTable notations, XmlSchemaObject caller);
    public virtual bool IsDerivedFrom(XmlSchemaDatatype datatype);
    internal virtual bool IsEqual(object o1, object o2);
    internal virtual bool IsComparable(XmlSchemaDatatype dtype);
    internal virtual XmlValueConverter CreateValueConverter(XmlSchemaType schemaType);
    internal virtual FacetsChecker get_FacetsChecker();
    internal virtual XmlValueConverter get_ValueConverter();
    public virtual XmlTokenizedType get_TokenizedType();
    public virtual Type get_ValueType();
    public virtual XmlSchemaDatatypeVariety get_Variety();
    public virtual XmlTypeCode get_TypeCode();
    internal virtual RestrictionFacets get_Restriction();
    internal virtual void set_Restriction(RestrictionFacets value);
    internal virtual bool get_HasLexicalFacets();
    internal virtual bool get_HasValueFacets();
    protected DatatypeImplementation get_Base();
    internal abstract virtual Type get_ListValueType();
    internal abstract virtual RestrictionFlags get_ValidRestrictionFlags();
    internal virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal virtual object ParseValue(string s, Type typDest, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    public virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    internal virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, bool createAtomicValue);
    internal virtual Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver namespaceResolver, Object& typedValue);
    internal string GetTypeName();
    protected int Compare(Byte[] value1, Byte[] value2);
}
internal class System.Xml.Schema.DateTimeFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(DateTime value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
internal class System.Xml.Schema.DfaContentValidator : ContentValidator {
    internal DfaContentValidator(Int32[][] transitionTable, SymbolsDictionary symbols, XmlSchemaContentType contentType, bool isOpen, bool isEmptiable);
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public virtual ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly);
    public virtual ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet);
}
internal class System.Xml.Schema.DoubleLinkAxis : Axis {
    internal Axis next;
    internal Axis Next { get; internal set; }
    internal DoubleLinkAxis(Axis axis, DoubleLinkAxis inputaxis);
    internal Axis get_Next();
    internal void set_Next(Axis value);
    internal static DoubleLinkAxis ConvertTree(Axis axis);
}
internal class System.Xml.Schema.DtdValidator : BaseValidator {
    public bool PreserveWhitespace { get; }
    internal DtdValidator(XmlValidatingReaderImpl reader, IValidationEventHandling eventHandling, bool processIdentityConstraints);
    private static DtdValidator();
    public virtual void Validate();
    public virtual void CompleteValidation();
    public virtual bool get_PreserveWhitespace();
    internal void AddID(string name, object node);
    public virtual object FindId(string name);
    public static void SetDefaultTypedValue(SchemaAttDef attdef, IDtdParserAdapter readerAdapter);
    public static void CheckDefaultValue(SchemaAttDef attdef, SchemaInfo sinfo, IValidationEventHandling eventHandling, string baseUriStr);
}
internal class System.Xml.Schema.DurationFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(TimeSpan value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
internal abstract class System.Xml.Schema.FacetsChecker : object {
    internal virtual Exception CheckLexicalFacets(String& parseString, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(decimal value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(long value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(int value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(short value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(byte value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(DateTime value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(double value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(float value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(string value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(Byte[] value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(TimeSpan value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(XmlQualifiedName value, XmlSchemaDatatype datatype);
    internal void CheckWhitespaceFacets(String& s, XmlSchemaDatatype datatype);
    internal Exception CheckPatternFacets(RestrictionFacets restriction, string value);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
    internal virtual RestrictionFacets ConstructRestriction(DatatypeImplementation datatype, XmlSchemaObjectCollection facets, XmlNameTable nameTable);
    internal static decimal Power(int x, int y);
}
internal enum System.Xml.Schema.FacetType : Enum {
    public int value__;
    public static FacetType None;
    public static FacetType Length;
    public static FacetType MinLength;
    public static FacetType MaxLength;
    public static FacetType Pattern;
    public static FacetType Whitespace;
    public static FacetType Enumeration;
    public static FacetType MinExclusive;
    public static FacetType MinInclusive;
    public static FacetType MaxExclusive;
    public static FacetType MaxInclusive;
    public static FacetType TotalDigits;
    public static FacetType FractionDigits;
}
internal class System.Xml.Schema.ForwardAxis : object {
    internal DoubleLinkAxis RootNode { get; }
    internal DoubleLinkAxis TopNode { get; }
    internal bool IsAttribute { get; }
    internal bool IsDss { get; }
    internal bool IsSelfAxis { get; }
    public ForwardAxis(DoubleLinkAxis axis, bool isdesorself);
    internal DoubleLinkAxis get_RootNode();
    internal DoubleLinkAxis get_TopNode();
    internal bool get_IsAttribute();
    internal bool get_IsDss();
    internal bool get_IsSelfAxis();
}
internal class System.Xml.Schema.IdRefNode : object {
    internal string Id;
    internal int LineNo;
    internal int LinePos;
    internal IdRefNode Next;
    internal IdRefNode(IdRefNode next, string id, int lineNo, int linePos);
}
internal abstract class System.Xml.Schema.InteriorNode : SyntaxTreeNode {
    public SyntaxTreeNode LeftChild { get; public set; }
    public SyntaxTreeNode RightChild { get; public set; }
    public SyntaxTreeNode get_LeftChild();
    public void set_LeftChild(SyntaxTreeNode value);
    public SyntaxTreeNode get_RightChild();
    public void set_RightChild(SyntaxTreeNode value);
    public virtual SyntaxTreeNode Clone(Positions positions);
    protected void ExpandTreeNoRecursive(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
}
public interface System.Xml.Schema.IXmlSchemaInfo {
    public XmlSchemaValidity Validity { get; }
    public bool IsDefault { get; }
    public bool IsNil { get; }
    public XmlSchemaSimpleType MemberType { get; }
    public XmlSchemaType SchemaType { get; }
    public XmlSchemaElement SchemaElement { get; }
    public XmlSchemaAttribute SchemaAttribute { get; }
    public abstract virtual XmlSchemaValidity get_Validity();
    public abstract virtual bool get_IsDefault();
    public abstract virtual bool get_IsNil();
    public abstract virtual XmlSchemaSimpleType get_MemberType();
    public abstract virtual XmlSchemaType get_SchemaType();
    public abstract virtual XmlSchemaElement get_SchemaElement();
    public abstract virtual XmlSchemaAttribute get_SchemaAttribute();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Schema.KeySequence : object {
    public int PosLine { get; }
    public int PosCol { get; }
    public object Item { get; public set; }
    internal KeySequence(int dim, int line, int col);
    public KeySequence(TypedObject[] ks);
    public int get_PosLine();
    public int get_PosCol();
    public object get_Item(int index);
    public void set_Item(int index, object value);
    internal bool IsQualified();
    public virtual int GetHashCode();
    public virtual bool Equals(object other);
    public virtual string ToString();
}
internal class System.Xml.Schema.KSStruct : object {
    public int depth;
    public KeySequence ks;
    public LocatedActiveAxis[] fields;
    public KSStruct(KeySequence ks, int dim);
}
internal class System.Xml.Schema.LeafNode : SyntaxTreeNode {
    public int Pos { get; public set; }
    public bool IsNullable { get; }
    public LeafNode(int pos);
    public int get_Pos();
    public void set_Pos(int value);
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
    public virtual SyntaxTreeNode Clone(Positions positions);
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
}
internal class System.Xml.Schema.LeafRangeNode : LeafNode {
    public decimal Max { get; }
    public decimal Min { get; }
    public BitSet NextIteration { get; public set; }
    public bool IsRangeNode { get; }
    public LeafRangeNode(decimal min, decimal max);
    public LeafRangeNode(int pos, decimal min, decimal max);
    public decimal get_Max();
    public decimal get_Min();
    public BitSet get_NextIteration();
    public void set_NextIteration(BitSet value);
    public virtual SyntaxTreeNode Clone(Positions positions);
    public virtual bool get_IsRangeNode();
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
}
internal class System.Xml.Schema.ListFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
internal class System.Xml.Schema.LocatedActiveAxis : ActiveAxis {
    internal bool isMatched;
    internal KeySequence Ks;
    internal int Column { get; }
    internal LocatedActiveAxis(Asttree astfield, KeySequence ks, int column);
    internal int get_Column();
    internal void Reactivate(KeySequence ks);
}
internal class System.Xml.Schema.MiscFacetsChecker : FacetsChecker {
}
internal class System.Xml.Schema.NamespaceList : object {
    public ListType Type { get; }
    public string Excluded { get; }
    public ICollection Enumerate { get; }
    public NamespaceList(string namespaces, string targetNamespace);
    public NamespaceList Clone();
    public ListType get_Type();
    public string get_Excluded();
    public ICollection get_Enumerate();
    public virtual bool Allows(string ns);
    public bool Allows(XmlQualifiedName qname);
    public virtual string ToString();
    public static bool IsSubset(NamespaceList sub, NamespaceList super);
    public static NamespaceList Union(NamespaceList o1, NamespaceList o2, bool v1Compat);
    public static NamespaceList Intersection(NamespaceList o1, NamespaceList o2, bool v1Compat);
    public bool IsEmpty();
}
internal class System.Xml.Schema.NamespaceListNode : SyntaxTreeNode {
    protected NamespaceList namespaceList;
    protected object particle;
    public bool IsNullable { get; }
    public NamespaceListNode(NamespaceList namespaceList, object particle);
    public virtual SyntaxTreeNode Clone(Positions positions);
    public virtual ICollection GetResolvedSymbols(SymbolsDictionary symbols);
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
}
internal class System.Xml.Schema.NamespaceListV1Compat : NamespaceList {
    public NamespaceListV1Compat(string namespaces, string targetNamespace);
    public virtual bool Allows(string ns);
}
internal class System.Xml.Schema.NfaContentValidator : ContentValidator {
    internal NfaContentValidator(BitSet firstpos, BitSet[] followpos, SymbolsDictionary symbols, Positions positions, int endMarkerPos, XmlSchemaContentType contentType, bool isOpen, bool isEmptiable);
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public virtual ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly);
    public virtual ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet);
}
internal class System.Xml.Schema.Numeric10FacetsChecker : FacetsChecker {
    internal Numeric10FacetsChecker(decimal minVal, decimal maxVal);
    private static Numeric10FacetsChecker();
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(decimal value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(long value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(int value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(short value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(byte value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
    internal bool MatchEnumeration(decimal value, ArrayList enumeration, XmlValueConverter valueConverter);
    internal Exception CheckTotalAndFractionDigits(decimal value, int totalDigits, int fractionDigits, bool checkTotal, bool checkFraction);
}
internal class System.Xml.Schema.Numeric2FacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(double value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(float value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
internal class System.Xml.Schema.Parser : object {
    public XmlSchema XmlSchema { get; }
    unknown XmlResolver XmlResolver {internal set; }
    public SchemaInfo XdrSchema { get; }
    public Parser(SchemaType schemaType, XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler);
    public SchemaType Parse(XmlReader reader, string targetNamespace);
    public void StartParsing(XmlReader reader, string targetNamespace);
    public SchemaType FinishParsing();
    public XmlSchema get_XmlSchema();
    internal void set_XmlResolver(XmlResolver value);
    public SchemaInfo get_XdrSchema();
    public bool ParseReaderNode();
    [AsyncStateMachineAttribute("System.Xml.Schema.Parser/<ParseAsync>d__1")]
public Task`1<SchemaType> ParseAsync(XmlReader reader, string targetNamespace);
    [AsyncStateMachineAttribute("System.Xml.Schema.Parser/<StartParsingAsync>d__1")]
public Task StartParsingAsync(XmlReader reader, string targetNamespace);
}
internal class System.Xml.Schema.ParticleContentValidator : ContentValidator {
    public ParticleContentValidator(XmlSchemaContentType contentType);
    public ParticleContentValidator(XmlSchemaContentType contentType, bool enableUpaCheck);
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public void Start();
    public void OpenGroup();
    public void CloseGroup();
    public bool Exists(XmlQualifiedName name);
    public void AddName(XmlQualifiedName name, object particle);
    public void AddNamespaceList(NamespaceList namespaceList, object particle);
    public void AddChoice();
    public void AddSequence();
    public void AddStar();
    public void AddPlus();
    public void AddQMark();
    public void AddLeafRange(decimal min, decimal max);
    public ContentValidator Finish();
    public ContentValidator Finish(bool useDFA);
}
internal class System.Xml.Schema.PlusNode : InteriorNode {
    public bool IsNullable { get; }
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
}
internal class System.Xml.Schema.Position : ValueType {
    public int symbol;
    public object particle;
    public Position(int symbol, object particle);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Schema.Positions : object {
    public Position Item { get; }
    public int Count { get; }
    public int Add(int symbol, object particle);
    public Position get_Item(int pos);
    public int get_Count();
}
internal class System.Xml.Schema.Preprocessor : BaseProcessor {
    unknown XmlResolver XmlResolver {internal set; }
    internal XmlReaderSettings ReaderSettings { get; internal set; }
    unknown Hashtable SchemaLocations {internal set; }
    unknown Hashtable ChameleonSchemas {internal set; }
    internal XmlSchema RootSchema { get; }
    public Preprocessor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler);
    public Preprocessor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler, XmlSchemaCompilationSettings compilationSettings);
    public bool Execute(XmlSchema schema, string targetNamespace, bool loadExternals);
    internal void set_XmlResolver(XmlResolver value);
    internal XmlReaderSettings get_ReaderSettings();
    internal void set_ReaderSettings(XmlReaderSettings value);
    internal void set_SchemaLocations(Hashtable value);
    internal void set_ChameleonSchemas(Hashtable value);
    internal XmlSchema get_RootSchema();
    internal static XmlSchema GetBuildInSchema();
    internal static XmlSchema GetParentSchema(XmlSchemaObject currentSchemaObject);
}
internal class System.Xml.Schema.QmarkNode : InteriorNode {
    public bool IsNullable { get; }
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
}
internal class System.Xml.Schema.QNameFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(XmlQualifiedName value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
internal class System.Xml.Schema.RangeContentValidator : ContentValidator {
    internal RangeContentValidator(BitSet firstpos, BitSet[] followpos, SymbolsDictionary symbols, Positions positions, int endMarkerPos, XmlSchemaContentType contentType, bool isEmptiable, BitSet positionsWithRangeTerminals, int minmaxNodesCount);
    public virtual void InitValidation(ValidationState context);
    public virtual object ValidateElement(XmlQualifiedName name, ValidationState context, Int32& errorCode);
    public virtual bool CompleteValidation(ValidationState context);
    public virtual ArrayList ExpectedElements(ValidationState context, bool isRequiredOnly);
    public virtual ArrayList ExpectedParticles(ValidationState context, bool isRequiredOnly, XmlSchemaSet schemaSet);
}
internal class System.Xml.Schema.RangePositionInfo : ValueType {
    public BitSet curpos;
    public Decimal[] rangeCounters;
}
internal class System.Xml.Schema.RedefineEntry : object {
    internal XmlSchemaRedefine redefine;
    internal XmlSchema schemaToUpdate;
    public RedefineEntry(XmlSchemaRedefine external, XmlSchema schema);
}
internal class System.Xml.Schema.RestrictionFacets : object {
    internal int Length;
    internal int MinLength;
    internal int MaxLength;
    internal ArrayList Patterns;
    internal ArrayList Enumeration;
    internal XmlSchemaWhiteSpace WhiteSpace;
    internal object MaxInclusive;
    internal object MaxExclusive;
    internal object MinInclusive;
    internal object MinExclusive;
    internal int TotalDigits;
    internal int FractionDigits;
    internal RestrictionFlags Flags;
    internal RestrictionFlags FixedFlags;
}
[FlagsAttribute]
internal enum System.Xml.Schema.RestrictionFlags : Enum {
    public int value__;
    public static RestrictionFlags Length;
    public static RestrictionFlags MinLength;
    public static RestrictionFlags MaxLength;
    public static RestrictionFlags Pattern;
    public static RestrictionFlags Enumeration;
    public static RestrictionFlags WhiteSpace;
    public static RestrictionFlags MaxInclusive;
    public static RestrictionFlags MaxExclusive;
    public static RestrictionFlags MinInclusive;
    public static RestrictionFlags MinExclusive;
    public static RestrictionFlags TotalDigits;
    public static RestrictionFlags FractionDigits;
}
internal class System.Xml.Schema.SchemaAttDef : SchemaDeclBase {
    public static SchemaAttDef Empty;
    private string System.Xml.IDtdAttributeInfo.Prefix { get; }
    private string System.Xml.IDtdAttributeInfo.LocalName { get; }
    private int System.Xml.IDtdAttributeInfo.LineNumber { get; }
    private int System.Xml.IDtdAttributeInfo.LinePosition { get; }
    private bool System.Xml.IDtdAttributeInfo.IsNonCDataType { get; }
    private bool System.Xml.IDtdAttributeInfo.IsDeclaredInExternal { get; }
    private bool System.Xml.IDtdAttributeInfo.IsXmlAttribute { get; }
    private string System.Xml.IDtdDefaultAttributeInfo.DefaultValueExpanded { get; }
    private object System.Xml.IDtdDefaultAttributeInfo.DefaultValueTyped { get; }
    private int System.Xml.IDtdDefaultAttributeInfo.ValueLineNumber { get; }
    private int System.Xml.IDtdDefaultAttributeInfo.ValueLinePosition { get; }
    internal int LinePosition { get; internal set; }
    internal int LineNumber { get; internal set; }
    internal int ValueLinePosition { get; internal set; }
    internal int ValueLineNumber { get; internal set; }
    internal string DefaultValueExpanded { get; internal set; }
    internal XmlTokenizedType TokenizedType { get; internal set; }
    internal Reserve Reserved { get; internal set; }
    internal bool DefaultValueChecked { get; }
    internal bool HasEntityRef { get; internal set; }
    internal XmlSchemaAttribute SchemaAttribute { get; internal set; }
    public SchemaAttDef(XmlQualifiedName name, string prefix);
    public SchemaAttDef(XmlQualifiedName name);
    private static SchemaAttDef();
    private sealed virtual override string System.Xml.IDtdAttributeInfo.get_Prefix();
    private sealed virtual override string System.Xml.IDtdAttributeInfo.get_LocalName();
    private sealed virtual override int System.Xml.IDtdAttributeInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IDtdAttributeInfo.get_LinePosition();
    private sealed virtual override bool System.Xml.IDtdAttributeInfo.get_IsNonCDataType();
    private sealed virtual override bool System.Xml.IDtdAttributeInfo.get_IsDeclaredInExternal();
    private sealed virtual override bool System.Xml.IDtdAttributeInfo.get_IsXmlAttribute();
    private sealed virtual override string System.Xml.IDtdDefaultAttributeInfo.get_DefaultValueExpanded();
    private sealed virtual override object System.Xml.IDtdDefaultAttributeInfo.get_DefaultValueTyped();
    private sealed virtual override int System.Xml.IDtdDefaultAttributeInfo.get_ValueLineNumber();
    private sealed virtual override int System.Xml.IDtdDefaultAttributeInfo.get_ValueLinePosition();
    internal int get_LinePosition();
    internal void set_LinePosition(int value);
    internal int get_LineNumber();
    internal void set_LineNumber(int value);
    internal int get_ValueLinePosition();
    internal void set_ValueLinePosition(int value);
    internal int get_ValueLineNumber();
    internal void set_ValueLineNumber(int value);
    internal string get_DefaultValueExpanded();
    internal void set_DefaultValueExpanded(string value);
    internal XmlTokenizedType get_TokenizedType();
    internal void set_TokenizedType(XmlTokenizedType value);
    internal Reserve get_Reserved();
    internal void set_Reserved(Reserve value);
    internal bool get_DefaultValueChecked();
    internal bool get_HasEntityRef();
    internal void set_HasEntityRef(bool value);
    internal XmlSchemaAttribute get_SchemaAttribute();
    internal void set_SchemaAttribute(XmlSchemaAttribute value);
    internal void CheckXmlSpace(IValidationEventHandling validationEventHandling);
    internal SchemaAttDef Clone();
}
internal abstract class System.Xml.Schema.SchemaBuilder : object {
    internal abstract virtual bool ProcessElement(string prefix, string name, string ns);
    internal abstract virtual void ProcessAttribute(string prefix, string name, string ns, string value);
    internal abstract virtual bool IsContentParsed();
    internal abstract virtual void ProcessMarkup(XmlNode[] markup);
    internal abstract virtual void ProcessCData(string value);
    internal abstract virtual void StartChildren();
    internal abstract virtual void EndChildren();
}
internal class System.Xml.Schema.SchemaCollectionCompiler : BaseProcessor {
    public SchemaCollectionCompiler(XmlNameTable nameTable, ValidationEventHandler eventHandler);
    public bool Execute(XmlSchema schema, SchemaInfo schemaInfo, bool compileContentModel);
    internal static void Cleanup(XmlSchema schema);
}
internal class System.Xml.Schema.SchemaCollectionPreprocessor : BaseProcessor {
    unknown XmlResolver XmlResolver {internal set; }
    public SchemaCollectionPreprocessor(XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventHandler);
    public bool Execute(XmlSchema schema, string targetNamespace, bool loadExternals, XmlSchemaCollection xsc);
    internal void set_XmlResolver(XmlResolver value);
}
internal abstract class System.Xml.Schema.SchemaDeclBase : object {
    protected XmlQualifiedName name;
    protected string prefix;
    protected bool isDeclaredInExternal;
    protected Use presence;
    protected XmlSchemaType schemaType;
    protected XmlSchemaDatatype datatype;
    protected string defaultValueRaw;
    protected object defaultValueTyped;
    protected long maxLength;
    protected long minLength;
    protected List`1<string> values;
    internal XmlQualifiedName Name { get; internal set; }
    internal string Prefix { get; internal set; }
    internal bool IsDeclaredInExternal { get; internal set; }
    internal Use Presence { get; internal set; }
    internal long MaxLength { get; internal set; }
    internal long MinLength { get; internal set; }
    internal XmlSchemaType SchemaType { get; internal set; }
    internal XmlSchemaDatatype Datatype { get; internal set; }
    internal List`1<string> Values { get; internal set; }
    internal string DefaultValueRaw { get; internal set; }
    internal object DefaultValueTyped { get; internal set; }
    protected SchemaDeclBase(XmlQualifiedName name, string prefix);
    internal XmlQualifiedName get_Name();
    internal void set_Name(XmlQualifiedName value);
    internal string get_Prefix();
    internal void set_Prefix(string value);
    internal bool get_IsDeclaredInExternal();
    internal void set_IsDeclaredInExternal(bool value);
    internal Use get_Presence();
    internal void set_Presence(Use value);
    internal long get_MaxLength();
    internal void set_MaxLength(long value);
    internal long get_MinLength();
    internal void set_MinLength(long value);
    internal XmlSchemaType get_SchemaType();
    internal void set_SchemaType(XmlSchemaType value);
    internal XmlSchemaDatatype get_Datatype();
    internal void set_Datatype(XmlSchemaDatatype value);
    internal void AddValue(string value);
    internal List`1<string> get_Values();
    internal void set_Values(List`1<string> value);
    internal string get_DefaultValueRaw();
    internal void set_DefaultValueRaw(string value);
    internal object get_DefaultValueTyped();
    internal void set_DefaultValueTyped(object value);
    internal bool CheckEnumeration(object pVal);
    internal bool CheckValue(object pVal);
}
internal class System.Xml.Schema.SchemaElementDecl : SchemaDeclBase {
    internal static SchemaElementDecl Empty;
    private string System.Xml.IDtdAttributeListInfo.Prefix { get; }
    private string System.Xml.IDtdAttributeListInfo.LocalName { get; }
    private bool System.Xml.IDtdAttributeListInfo.HasNonCDataAttributes { get; }
    internal bool IsIdDeclared { get; internal set; }
    internal bool HasNonCDataAttribute { get; internal set; }
    internal bool IsAbstract { get; internal set; }
    internal bool IsNillable { get; internal set; }
    internal XmlSchemaDerivationMethod Block { get; internal set; }
    internal bool IsNotationDeclared { get; internal set; }
    internal bool HasDefaultAttribute { get; }
    internal bool HasRequiredAttribute { get; internal set; }
    internal ContentValidator ContentValidator { get; internal set; }
    internal XmlSchemaAnyAttribute AnyAttribute { get; internal set; }
    internal CompiledIdentityConstraint[] Constraints { get; internal set; }
    internal XmlSchemaElement SchemaElement { get; internal set; }
    internal IList`1<IDtdDefaultAttributeInfo> DefaultAttDefs { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaAttDef> AttDefs { get; }
    internal Dictionary`2<XmlQualifiedName, XmlQualifiedName> ProhibitedAttributes { get; }
    internal SchemaElementDecl(XmlSchemaDatatype dtype);
    internal SchemaElementDecl(XmlQualifiedName name, string prefix);
    private static SchemaElementDecl();
    internal static SchemaElementDecl CreateAnyTypeElementDecl();
    private sealed virtual override string System.Xml.IDtdAttributeListInfo.get_Prefix();
    private sealed virtual override string System.Xml.IDtdAttributeListInfo.get_LocalName();
    private sealed virtual override bool System.Xml.IDtdAttributeListInfo.get_HasNonCDataAttributes();
    private sealed virtual override IDtdAttributeInfo System.Xml.IDtdAttributeListInfo.LookupAttribute(string prefix, string localName);
    private sealed virtual override IEnumerable`1<IDtdDefaultAttributeInfo> System.Xml.IDtdAttributeListInfo.LookupDefaultAttributes();
    private sealed virtual override IDtdAttributeInfo System.Xml.IDtdAttributeListInfo.LookupIdAttribute();
    internal bool get_IsIdDeclared();
    internal void set_IsIdDeclared(bool value);
    internal bool get_HasNonCDataAttribute();
    internal void set_HasNonCDataAttribute(bool value);
    internal SchemaElementDecl Clone();
    internal bool get_IsAbstract();
    internal void set_IsAbstract(bool value);
    internal bool get_IsNillable();
    internal void set_IsNillable(bool value);
    internal XmlSchemaDerivationMethod get_Block();
    internal void set_Block(XmlSchemaDerivationMethod value);
    internal bool get_IsNotationDeclared();
    internal void set_IsNotationDeclared(bool value);
    internal bool get_HasDefaultAttribute();
    internal bool get_HasRequiredAttribute();
    internal void set_HasRequiredAttribute(bool value);
    internal ContentValidator get_ContentValidator();
    internal void set_ContentValidator(ContentValidator value);
    internal XmlSchemaAnyAttribute get_AnyAttribute();
    internal void set_AnyAttribute(XmlSchemaAnyAttribute value);
    internal CompiledIdentityConstraint[] get_Constraints();
    internal void set_Constraints(CompiledIdentityConstraint[] value);
    internal XmlSchemaElement get_SchemaElement();
    internal void set_SchemaElement(XmlSchemaElement value);
    internal void AddAttDef(SchemaAttDef attdef);
    internal SchemaAttDef GetAttDef(XmlQualifiedName qname);
    internal IList`1<IDtdDefaultAttributeInfo> get_DefaultAttDefs();
    internal Dictionary`2<XmlQualifiedName, SchemaAttDef> get_AttDefs();
    internal Dictionary`2<XmlQualifiedName, XmlQualifiedName> get_ProhibitedAttributes();
    internal void CheckAttributes(Hashtable presence, bool standalone);
}
internal class System.Xml.Schema.SchemaEntity : object {
    private string System.Xml.IDtdEntityInfo.Name { get; }
    private bool System.Xml.IDtdEntityInfo.IsExternal { get; }
    private bool System.Xml.IDtdEntityInfo.IsDeclaredInExternal { get; }
    private bool System.Xml.IDtdEntityInfo.IsUnparsedEntity { get; }
    private bool System.Xml.IDtdEntityInfo.IsParameterEntity { get; }
    private string System.Xml.IDtdEntityInfo.BaseUriString { get; }
    private string System.Xml.IDtdEntityInfo.DeclaredUriString { get; }
    private string System.Xml.IDtdEntityInfo.SystemId { get; }
    private string System.Xml.IDtdEntityInfo.PublicId { get; }
    private string System.Xml.IDtdEntityInfo.Text { get; }
    private int System.Xml.IDtdEntityInfo.LineNumber { get; }
    private int System.Xml.IDtdEntityInfo.LinePosition { get; }
    internal XmlQualifiedName Name { get; }
    internal string Url { get; internal set; }
    internal string Pubid { get; internal set; }
    internal bool IsExternal { get; internal set; }
    internal bool DeclaredInExternal { get; internal set; }
    internal XmlQualifiedName NData { get; internal set; }
    internal string Text { get; internal set; }
    internal int Line { get; internal set; }
    internal int Pos { get; internal set; }
    internal string BaseURI { get; internal set; }
    internal bool ParsingInProgress { get; internal set; }
    internal string DeclaredURI { get; internal set; }
    internal SchemaEntity(XmlQualifiedName qname, bool isParameter);
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_Name();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsExternal();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsDeclaredInExternal();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsUnparsedEntity();
    private sealed virtual override bool System.Xml.IDtdEntityInfo.get_IsParameterEntity();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_BaseUriString();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_DeclaredUriString();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_SystemId();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_PublicId();
    private sealed virtual override string System.Xml.IDtdEntityInfo.get_Text();
    private sealed virtual override int System.Xml.IDtdEntityInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IDtdEntityInfo.get_LinePosition();
    internal static bool IsPredefinedEntity(string n);
    internal XmlQualifiedName get_Name();
    internal string get_Url();
    internal void set_Url(string value);
    internal string get_Pubid();
    internal void set_Pubid(string value);
    internal bool get_IsExternal();
    internal void set_IsExternal(bool value);
    internal bool get_DeclaredInExternal();
    internal void set_DeclaredInExternal(bool value);
    internal XmlQualifiedName get_NData();
    internal void set_NData(XmlQualifiedName value);
    internal string get_Text();
    internal void set_Text(string value);
    internal int get_Line();
    internal void set_Line(int value);
    internal int get_Pos();
    internal void set_Pos(int value);
    internal string get_BaseURI();
    internal void set_BaseURI(string value);
    internal bool get_ParsingInProgress();
    internal void set_ParsingInProgress(bool value);
    internal string get_DeclaredURI();
    internal void set_DeclaredURI(string value);
}
internal class System.Xml.Schema.SchemaInfo : object {
    public XmlQualifiedName DocTypeName { get; public set; }
    internal string InternalDtdSubset { get; internal set; }
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> ElementDecls { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> UndeclaredElementDecls { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> GeneralEntities { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> ParameterEntities { get; }
    internal SchemaType SchemaType { get; internal set; }
    internal Dictionary`2<string, bool> TargetNamespaces { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> ElementDeclsByType { get; }
    internal Dictionary`2<XmlQualifiedName, SchemaAttDef> AttributeDecls { get; }
    internal Dictionary`2<string, SchemaNotation> Notations { get; }
    internal int ErrorCount { get; internal set; }
    private bool System.Xml.IDtdInfo.HasDefaultAttributes { get; }
    private bool System.Xml.IDtdInfo.HasNonCDataAttributes { get; }
    private XmlQualifiedName System.Xml.IDtdInfo.Name { get; }
    private string System.Xml.IDtdInfo.InternalDtdSubset { get; }
    public XmlQualifiedName get_DocTypeName();
    public void set_DocTypeName(XmlQualifiedName value);
    internal string get_InternalDtdSubset();
    internal void set_InternalDtdSubset(string value);
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> get_ElementDecls();
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> get_UndeclaredElementDecls();
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> get_GeneralEntities();
    internal Dictionary`2<XmlQualifiedName, SchemaEntity> get_ParameterEntities();
    internal SchemaType get_SchemaType();
    internal void set_SchemaType(SchemaType value);
    internal Dictionary`2<string, bool> get_TargetNamespaces();
    internal Dictionary`2<XmlQualifiedName, SchemaElementDecl> get_ElementDeclsByType();
    internal Dictionary`2<XmlQualifiedName, SchemaAttDef> get_AttributeDecls();
    internal Dictionary`2<string, SchemaNotation> get_Notations();
    internal int get_ErrorCount();
    internal void set_ErrorCount(int value);
    internal SchemaElementDecl GetElementDecl(XmlQualifiedName qname);
    internal SchemaElementDecl GetTypeDecl(XmlQualifiedName qname);
    internal XmlSchemaElement GetElement(XmlQualifiedName qname);
    internal XmlSchemaAttribute GetAttribute(XmlQualifiedName qname);
    internal XmlSchemaElement GetType(XmlQualifiedName qname);
    internal bool HasSchema(string ns);
    internal bool Contains(string ns);
    internal SchemaAttDef GetAttributeXdr(SchemaElementDecl ed, XmlQualifiedName qname);
    internal SchemaAttDef GetAttributeXsd(SchemaElementDecl ed, XmlQualifiedName qname, XmlSchemaObject partialValidationType, AttributeMatchState& attributeMatchState);
    internal SchemaAttDef GetAttributeXsd(SchemaElementDecl ed, XmlQualifiedName qname, Boolean& skip);
    internal void Add(SchemaInfo sinfo, ValidationEventHandler eventhandler);
    internal void Finish();
    private sealed virtual override bool System.Xml.IDtdInfo.get_HasDefaultAttributes();
    private sealed virtual override bool System.Xml.IDtdInfo.get_HasNonCDataAttributes();
    private sealed virtual override IDtdAttributeListInfo System.Xml.IDtdInfo.LookupAttributeList(string prefix, string localName);
    [IteratorStateMachineAttribute("System.Xml.Schema.SchemaInfo/<System_Xml_IDtdInfo_GetAttributeLists>d__1")]
private sealed virtual override IEnumerable`1<IDtdAttributeListInfo> System.Xml.IDtdInfo.GetAttributeLists();
    private sealed virtual override IDtdEntityInfo System.Xml.IDtdInfo.LookupEntity(string name);
    private sealed virtual override XmlQualifiedName System.Xml.IDtdInfo.get_Name();
    private sealed virtual override string System.Xml.IDtdInfo.get_InternalDtdSubset();
}
internal class System.Xml.Schema.SchemaNames : object {
    public string NsDataType;
    public string NsDataTypeAlias;
    public string NsDataTypeOld;
    public string NsXml;
    public string NsXmlNs;
    public string NsXdr;
    public string NsXdrAlias;
    public string NsXs;
    public string NsXsi;
    public string XsiType;
    public string XsiNil;
    public string XsiSchemaLocation;
    public string XsiNoNamespaceSchemaLocation;
    public string XsdSchema;
    public string XdrSchema;
    public XmlQualifiedName QnPCData;
    public XmlQualifiedName QnXml;
    public XmlQualifiedName QnXmlNs;
    public XmlQualifiedName QnDtDt;
    public XmlQualifiedName QnXmlLang;
    public XmlQualifiedName QnName;
    public XmlQualifiedName QnType;
    public XmlQualifiedName QnMaxOccurs;
    public XmlQualifiedName QnMinOccurs;
    public XmlQualifiedName QnInfinite;
    public XmlQualifiedName QnModel;
    public XmlQualifiedName QnOpen;
    public XmlQualifiedName QnClosed;
    public XmlQualifiedName QnContent;
    public XmlQualifiedName QnMixed;
    public XmlQualifiedName QnEmpty;
    public XmlQualifiedName QnEltOnly;
    public XmlQualifiedName QnTextOnly;
    public XmlQualifiedName QnOrder;
    public XmlQualifiedName QnSeq;
    public XmlQualifiedName QnOne;
    public XmlQualifiedName QnMany;
    public XmlQualifiedName QnRequired;
    public XmlQualifiedName QnYes;
    public XmlQualifiedName QnNo;
    public XmlQualifiedName QnString;
    public XmlQualifiedName QnID;
    public XmlQualifiedName QnIDRef;
    public XmlQualifiedName QnIDRefs;
    public XmlQualifiedName QnEntity;
    public XmlQualifiedName QnEntities;
    public XmlQualifiedName QnNmToken;
    public XmlQualifiedName QnNmTokens;
    public XmlQualifiedName QnEnumeration;
    public XmlQualifiedName QnDefault;
    public XmlQualifiedName QnXdrSchema;
    public XmlQualifiedName QnXdrElementType;
    public XmlQualifiedName QnXdrElement;
    public XmlQualifiedName QnXdrGroup;
    public XmlQualifiedName QnXdrAttributeType;
    public XmlQualifiedName QnXdrAttribute;
    public XmlQualifiedName QnXdrDataType;
    public XmlQualifiedName QnXdrDescription;
    public XmlQualifiedName QnXdrExtends;
    public XmlQualifiedName QnXdrAliasSchema;
    public XmlQualifiedName QnDtType;
    public XmlQualifiedName QnDtValues;
    public XmlQualifiedName QnDtMaxLength;
    public XmlQualifiedName QnDtMinLength;
    public XmlQualifiedName QnDtMax;
    public XmlQualifiedName QnDtMin;
    public XmlQualifiedName QnDtMinExclusive;
    public XmlQualifiedName QnDtMaxExclusive;
    public XmlQualifiedName QnTargetNamespace;
    public XmlQualifiedName QnVersion;
    public XmlQualifiedName QnFinalDefault;
    public XmlQualifiedName QnBlockDefault;
    public XmlQualifiedName QnFixed;
    public XmlQualifiedName QnAbstract;
    public XmlQualifiedName QnBlock;
    public XmlQualifiedName QnSubstitutionGroup;
    public XmlQualifiedName QnFinal;
    public XmlQualifiedName QnNillable;
    public XmlQualifiedName QnRef;
    public XmlQualifiedName QnBase;
    public XmlQualifiedName QnDerivedBy;
    public XmlQualifiedName QnNamespace;
    public XmlQualifiedName QnProcessContents;
    public XmlQualifiedName QnRefer;
    public XmlQualifiedName QnPublic;
    public XmlQualifiedName QnSystem;
    public XmlQualifiedName QnSchemaLocation;
    public XmlQualifiedName QnValue;
    public XmlQualifiedName QnUse;
    public XmlQualifiedName QnForm;
    public XmlQualifiedName QnElementFormDefault;
    public XmlQualifiedName QnAttributeFormDefault;
    public XmlQualifiedName QnItemType;
    public XmlQualifiedName QnMemberTypes;
    public XmlQualifiedName QnXPath;
    public XmlQualifiedName QnXsdSchema;
    public XmlQualifiedName QnXsdAnnotation;
    public XmlQualifiedName QnXsdInclude;
    public XmlQualifiedName QnXsdImport;
    public XmlQualifiedName QnXsdElement;
    public XmlQualifiedName QnXsdAttribute;
    public XmlQualifiedName QnXsdAttributeGroup;
    public XmlQualifiedName QnXsdAnyAttribute;
    public XmlQualifiedName QnXsdGroup;
    public XmlQualifiedName QnXsdAll;
    public XmlQualifiedName QnXsdChoice;
    public XmlQualifiedName QnXsdSequence;
    public XmlQualifiedName QnXsdAny;
    public XmlQualifiedName QnXsdNotation;
    public XmlQualifiedName QnXsdSimpleType;
    public XmlQualifiedName QnXsdComplexType;
    public XmlQualifiedName QnXsdUnique;
    public XmlQualifiedName QnXsdKey;
    public XmlQualifiedName QnXsdKeyRef;
    public XmlQualifiedName QnXsdSelector;
    public XmlQualifiedName QnXsdField;
    public XmlQualifiedName QnXsdMinExclusive;
    public XmlQualifiedName QnXsdMinInclusive;
    public XmlQualifiedName QnXsdMaxInclusive;
    public XmlQualifiedName QnXsdMaxExclusive;
    public XmlQualifiedName QnXsdTotalDigits;
    public XmlQualifiedName QnXsdFractionDigits;
    public XmlQualifiedName QnXsdLength;
    public XmlQualifiedName QnXsdMinLength;
    public XmlQualifiedName QnXsdMaxLength;
    public XmlQualifiedName QnXsdEnumeration;
    public XmlQualifiedName QnXsdPattern;
    public XmlQualifiedName QnXsdDocumentation;
    public XmlQualifiedName QnXsdAppinfo;
    public XmlQualifiedName QnSource;
    public XmlQualifiedName QnXsdComplexContent;
    public XmlQualifiedName QnXsdSimpleContent;
    public XmlQualifiedName QnXsdRestriction;
    public XmlQualifiedName QnXsdExtension;
    public XmlQualifiedName QnXsdUnion;
    public XmlQualifiedName QnXsdList;
    public XmlQualifiedName QnXsdWhiteSpace;
    public XmlQualifiedName QnXsdRedefine;
    public XmlQualifiedName QnXsdAnyType;
    internal XmlQualifiedName[] TokenToQName;
    public XmlNameTable NameTable { get; }
    public SchemaNames(XmlNameTable nameTable);
    public XmlNameTable get_NameTable();
    public void CreateTokenToQNameTable();
    public SchemaType SchemaTypeFromRoot(string localName, string ns);
    public bool IsXSDRoot(string localName, string ns);
    public bool IsXDRRoot(string localName, string ns);
    public XmlQualifiedName GetName(Token token);
}
internal class System.Xml.Schema.SchemaNamespaceManager : XmlNamespaceManager {
    public SchemaNamespaceManager(XmlSchemaObject node);
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string ns);
}
internal class System.Xml.Schema.SchemaNotation : object {
    internal static int SYSTEM;
    internal static int PUBLIC;
    internal XmlQualifiedName Name { get; }
    internal string SystemLiteral { get; internal set; }
    internal string Pubid { get; internal set; }
    internal SchemaNotation(XmlQualifiedName name);
    internal XmlQualifiedName get_Name();
    internal string get_SystemLiteral();
    internal void set_SystemLiteral(string value);
    internal string get_Pubid();
    internal void set_Pubid(string value);
}
internal enum System.Xml.Schema.SchemaType : Enum {
    public int value__;
    public static SchemaType None;
    public static SchemaType DTD;
    public static SchemaType XDR;
    public static SchemaType XSD;
}
internal class System.Xml.Schema.SelectorActiveAxis : ActiveAxis {
    public bool EmptyStack { get; }
    public int lastDepth { get; }
    public SelectorActiveAxis(Asttree axisTree, ConstraintStruct cs);
    public bool get_EmptyStack();
    public int get_lastDepth();
    public virtual bool EndElement(string localname, string URN);
    public int PushKS(int errline, int errcol);
    public KeySequence PopKS();
}
internal class System.Xml.Schema.SequenceNode : InteriorNode {
    public bool IsNullable { get; }
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
    public virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
}
internal class System.Xml.Schema.StarNode : InteriorNode {
    public bool IsNullable { get; }
    public virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public virtual bool get_IsNullable();
}
internal class System.Xml.Schema.StateUnion : ValueType {
    public int State;
    public int AllElementsRequired;
    public int CurPosIndex;
    public int NumberOfRunningPos;
}
internal class System.Xml.Schema.StringFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual Exception CheckValueFacets(string value, XmlSchemaDatatype datatype);
    internal Exception CheckValueFacets(string value, XmlSchemaDatatype datatype, bool verifyUri);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Schema.SymbolsDictionary : object {
    public int Count { get; }
    public int CountOfNames { get; }
    public bool IsUpaEnforced { get; public set; }
    public int Item { get; }
    public int get_Count();
    public int get_CountOfNames();
    public bool get_IsUpaEnforced();
    public void set_IsUpaEnforced(bool value);
    public int AddName(XmlQualifiedName name, object particle);
    public void AddNamespaceList(NamespaceList list, object particle, bool allowLocal);
    public ICollection GetNamespaceListSymbols(NamespaceList list);
    public int get_Item(XmlQualifiedName name);
    public bool Exists(XmlQualifiedName name);
    public object GetParticle(int symbol);
    public string NameOf(int symbol);
}
internal abstract class System.Xml.Schema.SyntaxTreeNode : object {
    public bool IsNullable { get; }
    public bool IsRangeNode { get; }
    public abstract virtual void ExpandTree(InteriorNode parent, SymbolsDictionary symbols, Positions positions);
    public abstract virtual SyntaxTreeNode Clone(Positions positions);
    public abstract virtual void ConstructPos(BitSet firstpos, BitSet lastpos, BitSet[] followpos);
    public abstract virtual bool get_IsNullable();
    public virtual bool get_IsRangeNode();
}
internal class System.Xml.Schema.TypedObject : object {
    public int Dim { get; }
    public bool IsList { get; }
    public bool IsDecimal { get; }
    public Decimal[] Dvalue { get; }
    public object Value { get; public set; }
    public XmlSchemaDatatype Type { get; public set; }
    public TypedObject(object obj, string svalue, XmlSchemaDatatype xsdtype);
    public int get_Dim();
    public bool get_IsList();
    public bool get_IsDecimal();
    public Decimal[] get_Dvalue();
    public object get_Value();
    public void set_Value(object value);
    public XmlSchemaDatatype get_Type();
    public void set_Type(XmlSchemaDatatype value);
    public virtual string ToString();
    public void SetDecimal();
    public bool Equals(TypedObject other);
}
internal class System.Xml.Schema.UnionFacetsChecker : FacetsChecker {
    internal virtual Exception CheckValueFacets(object value, XmlSchemaDatatype datatype);
    internal virtual bool MatchEnumeration(object value, ArrayList enumeration, XmlSchemaDatatype datatype);
}
internal class System.Xml.Schema.UpaException : Exception {
    public object Particle1 { get; }
    public object Particle2 { get; }
    public UpaException(object particle1, object particle2);
    public object get_Particle1();
    public object get_Particle2();
}
public class System.Xml.Schema.ValidationEventArgs : EventArgs {
    public XmlSeverityType Severity { get; }
    public XmlSchemaException Exception { get; }
    public string Message { get; }
    internal ValidationEventArgs(XmlSchemaException ex);
    internal ValidationEventArgs(XmlSchemaException ex, XmlSeverityType severity);
    public XmlSeverityType get_Severity();
    public XmlSchemaException get_Exception();
    public string get_Message();
}
public class System.Xml.Schema.ValidationEventHandler : MulticastDelegate {
    public ValidationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValidationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValidationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xml.Schema.ValidationState : object {
    public bool IsNill;
    public bool IsDefault;
    public bool NeedValidateChildren;
    public bool CheckRequiredAttribute;
    public bool ValidationSkipped;
    public int Depth;
    public XmlSchemaContentProcessing ProcessContents;
    public XmlSchemaValidity Validity;
    public SchemaElementDecl ElementDecl;
    public SchemaElementDecl ElementDeclBeforeXsi;
    public string LocalName;
    public string Namespace;
    public ConstraintStruct[] Constr;
    public StateUnion CurrentState;
    public bool HasMatched;
    public BitSet[] CurPos;
    public BitSet AllElementsSet;
    public List`1<RangePositionInfo> RunningPositions;
    public bool TooComplex;
}
internal enum System.Xml.Schema.ValidatorState : Enum {
    public int value__;
    public static ValidatorState None;
    public static ValidatorState Start;
    public static ValidatorState TopLevelAttribute;
    public static ValidatorState TopLevelTextOrWS;
    public static ValidatorState Element;
    public static ValidatorState Attribute;
    public static ValidatorState EndOfAttributes;
    public static ValidatorState Text;
    public static ValidatorState Whitespace;
    public static ValidatorState EndElement;
    public static ValidatorState SkipToEndElement;
    public static ValidatorState Finish;
}
internal class System.Xml.Schema.XdrBuilder : SchemaBuilder {
    unknown XmlResolver XmlResolver {internal set; }
    internal XdrBuilder(XmlReader reader, XmlNamespaceManager curmgr, SchemaInfo sinfo, string targetNamspace, XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventhandler);
    private static XdrBuilder();
    internal virtual bool ProcessElement(string prefix, string name, string ns);
    internal virtual void ProcessAttribute(string prefix, string name, string ns, string value);
    internal void set_XmlResolver(XmlResolver value);
    internal static bool IsXdrSchema(string uri);
    internal virtual bool IsContentParsed();
    internal virtual void ProcessMarkup(XmlNode[] markup);
    internal virtual void ProcessCData(string value);
    internal virtual void StartChildren();
    internal virtual void EndChildren();
}
internal class System.Xml.Schema.XdrValidator : BaseValidator {
    public bool PreserveWhitespace { get; }
    internal XdrValidator(BaseValidator validator);
    internal XdrValidator(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling);
    public virtual void Validate();
    public virtual bool get_PreserveWhitespace();
    public virtual void CompleteValidation();
    public static void CheckDefaultValue(string value, SchemaAttDef attdef, SchemaInfo sinfo, XmlNamespaceManager nsManager, XmlNameTable NameTable, object sender, ValidationEventHandler eventhandler, string baseUri, int lineNo, int linePos);
    internal void AddID(string name, object node);
    public virtual object FindId(string name);
}
internal class System.Xml.Schema.XmlAnyConverter : XmlBaseConverter {
    public static XmlValueConverter Item;
    public static XmlValueConverter AnyAtomic;
    protected XmlAnyConverter(XmlTypeCode typeCode);
    private static XmlAnyConverter();
    public virtual bool ToBoolean(object value);
    public virtual DateTime ToDateTime(object value);
    public virtual DateTimeOffset ToDateTimeOffset(object value);
    public virtual decimal ToDecimal(object value);
    public virtual double ToDouble(object value);
    public virtual int ToInt32(object value);
    public virtual long ToInt64(object value);
    public virtual float ToSingle(object value);
    public virtual object ChangeType(bool value, Type destinationType);
    public virtual object ChangeType(DateTime value, Type destinationType);
    public virtual object ChangeType(DateTimeOffset value, Type destinationType);
    public virtual object ChangeType(decimal value, Type destinationType);
    public virtual object ChangeType(double value, Type destinationType);
    public virtual object ChangeType(int value, Type destinationType);
    public virtual object ChangeType(long value, Type destinationType);
    public virtual object ChangeType(float value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlAnyListConverter : XmlListConverter {
    public static XmlValueConverter ItemList;
    public static XmlValueConverter AnyAtomicList;
    protected XmlAnyListConverter(XmlBaseConverter atomicConverter);
    private static XmlAnyListConverter();
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
public class System.Xml.Schema.XmlAtomicValue : XPathItem {
    public bool IsNode { get; }
    public XmlSchemaType XmlType { get; }
    public Type ValueType { get; }
    public object TypedValue { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public string Value { get; }
    internal XmlAtomicValue(XmlSchemaType xmlType, bool value);
    internal XmlAtomicValue(XmlSchemaType xmlType, DateTime value);
    internal XmlAtomicValue(XmlSchemaType xmlType, double value);
    internal XmlAtomicValue(XmlSchemaType xmlType, int value);
    internal XmlAtomicValue(XmlSchemaType xmlType, long value);
    internal XmlAtomicValue(XmlSchemaType xmlType, string value);
    internal XmlAtomicValue(XmlSchemaType xmlType, string value, IXmlNamespaceResolver nsResolver);
    internal XmlAtomicValue(XmlSchemaType xmlType, object value);
    internal XmlAtomicValue(XmlSchemaType xmlType, object value, IXmlNamespaceResolver nsResolver);
    public XmlAtomicValue Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool get_IsNode();
    public virtual XmlSchemaType get_XmlType();
    public virtual Type get_ValueType();
    public virtual object get_TypedValue();
    public virtual bool get_ValueAsBoolean();
    public virtual DateTime get_ValueAsDateTime();
    public virtual double get_ValueAsDouble();
    public virtual int get_ValueAsInt();
    public virtual long get_ValueAsLong();
    public virtual object ValueAs(Type type, IXmlNamespaceResolver nsResolver);
    public virtual string get_Value();
    public virtual string ToString();
}
internal abstract class System.Xml.Schema.XmlBaseConverter : XmlValueConverter {
    protected static Type ICollectionType;
    protected static Type IEnumerableType;
    protected static Type IListType;
    protected static Type ObjectArrayType;
    protected static Type StringArrayType;
    protected static Type XmlAtomicValueArrayType;
    protected static Type DecimalType;
    protected static Type Int32Type;
    protected static Type Int64Type;
    protected static Type StringType;
    protected static Type XmlAtomicValueType;
    protected static Type ObjectType;
    protected static Type ByteType;
    protected static Type Int16Type;
    protected static Type SByteType;
    protected static Type UInt16Type;
    protected static Type UInt32Type;
    protected static Type UInt64Type;
    protected static Type XPathItemType;
    protected static Type DoubleType;
    protected static Type SingleType;
    protected static Type DateTimeType;
    protected static Type DateTimeOffsetType;
    protected static Type BooleanType;
    protected static Type ByteArrayType;
    protected static Type XmlQualifiedNameType;
    protected static Type UriType;
    protected static Type TimeSpanType;
    protected static Type XPathNavigatorType;
    protected XmlSchemaType SchemaType { get; }
    protected XmlTypeCode TypeCode { get; }
    protected string XmlTypeName { get; }
    protected Type DefaultClrType { get; }
    protected XmlBaseConverter(XmlSchemaType schemaType);
    protected XmlBaseConverter(XmlTypeCode typeCode);
    protected XmlBaseConverter(XmlBaseConverter converterAtomic);
    protected XmlBaseConverter(XmlBaseConverter converterAtomic, Type clrTypeDefault);
    private static XmlBaseConverter();
    public virtual bool ToBoolean(bool value);
    public virtual bool ToBoolean(DateTime value);
    public virtual bool ToBoolean(DateTimeOffset value);
    public virtual bool ToBoolean(decimal value);
    public virtual bool ToBoolean(double value);
    public virtual bool ToBoolean(int value);
    public virtual bool ToBoolean(long value);
    public virtual bool ToBoolean(float value);
    public virtual bool ToBoolean(string value);
    public virtual bool ToBoolean(object value);
    public virtual DateTime ToDateTime(bool value);
    public virtual DateTime ToDateTime(DateTime value);
    public virtual DateTime ToDateTime(DateTimeOffset value);
    public virtual DateTime ToDateTime(decimal value);
    public virtual DateTime ToDateTime(double value);
    public virtual DateTime ToDateTime(int value);
    public virtual DateTime ToDateTime(long value);
    public virtual DateTime ToDateTime(float value);
    public virtual DateTime ToDateTime(string value);
    public virtual DateTime ToDateTime(object value);
    public virtual DateTimeOffset ToDateTimeOffset(bool value);
    public virtual DateTimeOffset ToDateTimeOffset(DateTime value);
    public virtual DateTimeOffset ToDateTimeOffset(DateTimeOffset value);
    public virtual DateTimeOffset ToDateTimeOffset(decimal value);
    public virtual DateTimeOffset ToDateTimeOffset(double value);
    public virtual DateTimeOffset ToDateTimeOffset(int value);
    public virtual DateTimeOffset ToDateTimeOffset(long value);
    public virtual DateTimeOffset ToDateTimeOffset(float value);
    public virtual DateTimeOffset ToDateTimeOffset(string value);
    public virtual DateTimeOffset ToDateTimeOffset(object value);
    public virtual decimal ToDecimal(bool value);
    public virtual decimal ToDecimal(DateTime value);
    public virtual decimal ToDecimal(DateTimeOffset value);
    public virtual decimal ToDecimal(decimal value);
    public virtual decimal ToDecimal(double value);
    public virtual decimal ToDecimal(int value);
    public virtual decimal ToDecimal(long value);
    public virtual decimal ToDecimal(float value);
    public virtual decimal ToDecimal(string value);
    public virtual decimal ToDecimal(object value);
    public virtual double ToDouble(bool value);
    public virtual double ToDouble(DateTime value);
    public virtual double ToDouble(DateTimeOffset value);
    public virtual double ToDouble(decimal value);
    public virtual double ToDouble(double value);
    public virtual double ToDouble(int value);
    public virtual double ToDouble(long value);
    public virtual double ToDouble(float value);
    public virtual double ToDouble(string value);
    public virtual double ToDouble(object value);
    public virtual int ToInt32(bool value);
    public virtual int ToInt32(DateTime value);
    public virtual int ToInt32(DateTimeOffset value);
    public virtual int ToInt32(decimal value);
    public virtual int ToInt32(double value);
    public virtual int ToInt32(int value);
    public virtual int ToInt32(long value);
    public virtual int ToInt32(float value);
    public virtual int ToInt32(string value);
    public virtual int ToInt32(object value);
    public virtual long ToInt64(bool value);
    public virtual long ToInt64(DateTime value);
    public virtual long ToInt64(DateTimeOffset value);
    public virtual long ToInt64(decimal value);
    public virtual long ToInt64(double value);
    public virtual long ToInt64(int value);
    public virtual long ToInt64(long value);
    public virtual long ToInt64(float value);
    public virtual long ToInt64(string value);
    public virtual long ToInt64(object value);
    public virtual float ToSingle(bool value);
    public virtual float ToSingle(DateTime value);
    public virtual float ToSingle(DateTimeOffset value);
    public virtual float ToSingle(decimal value);
    public virtual float ToSingle(double value);
    public virtual float ToSingle(int value);
    public virtual float ToSingle(long value);
    public virtual float ToSingle(float value);
    public virtual float ToSingle(string value);
    public virtual float ToSingle(object value);
    public virtual string ToString(bool value);
    public virtual string ToString(DateTime value);
    public virtual string ToString(DateTimeOffset value);
    public virtual string ToString(decimal value);
    public virtual string ToString(double value);
    public virtual string ToString(int value);
    public virtual string ToString(long value);
    public virtual string ToString(float value);
    public virtual string ToString(string value, IXmlNamespaceResolver nsResolver);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual string ToString(string value);
    public virtual string ToString(object value);
    public virtual object ChangeType(bool value, Type destinationType);
    public virtual object ChangeType(DateTime value, Type destinationType);
    public virtual object ChangeType(DateTimeOffset value, Type destinationType);
    public virtual object ChangeType(decimal value, Type destinationType);
    public virtual object ChangeType(double value, Type destinationType);
    public virtual object ChangeType(int value, Type destinationType);
    public virtual object ChangeType(long value, Type destinationType);
    public virtual object ChangeType(float value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(string value, Type destinationType);
    public virtual object ChangeType(object value, Type destinationType);
    protected XmlSchemaType get_SchemaType();
    protected XmlTypeCode get_TypeCode();
    protected string get_XmlTypeName();
    protected Type get_DefaultClrType();
    protected static bool IsDerivedFrom(Type derivedType, Type baseType);
    protected Exception CreateInvalidClrMappingException(Type sourceType, Type destinationType);
    protected static string QNameToString(XmlQualifiedName name);
    protected virtual object ChangeListType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    protected static Byte[] StringToBase64Binary(string value);
    protected static DateTime StringToDate(string value);
    protected static DateTime StringToDateTime(string value);
    protected static TimeSpan StringToDayTimeDuration(string value);
    protected static TimeSpan StringToDuration(string value);
    protected static DateTime StringToGDay(string value);
    protected static DateTime StringToGMonth(string value);
    protected static DateTime StringToGMonthDay(string value);
    protected static DateTime StringToGYear(string value);
    protected static DateTime StringToGYearMonth(string value);
    protected static DateTimeOffset StringToDateOffset(string value);
    protected static DateTimeOffset StringToDateTimeOffset(string value);
    protected static DateTimeOffset StringToGDayOffset(string value);
    protected static DateTimeOffset StringToGMonthOffset(string value);
    protected static DateTimeOffset StringToGMonthDayOffset(string value);
    protected static DateTimeOffset StringToGYearOffset(string value);
    protected static DateTimeOffset StringToGYearMonthOffset(string value);
    protected static Byte[] StringToHexBinary(string value);
    protected static XmlQualifiedName StringToQName(string value, IXmlNamespaceResolver nsResolver);
    protected static DateTime StringToTime(string value);
    protected static DateTimeOffset StringToTimeOffset(string value);
    protected static TimeSpan StringToYearMonthDuration(string value);
    protected static string AnyUriToString(Uri value);
    protected static string Base64BinaryToString(Byte[] value);
    protected static string DateToString(DateTime value);
    protected static string DateTimeToString(DateTime value);
    protected static string DayTimeDurationToString(TimeSpan value);
    protected static string DurationToString(TimeSpan value);
    protected static string GDayToString(DateTime value);
    protected static string GMonthToString(DateTime value);
    protected static string GMonthDayToString(DateTime value);
    protected static string GYearToString(DateTime value);
    protected static string GYearMonthToString(DateTime value);
    protected static string DateOffsetToString(DateTimeOffset value);
    protected static string DateTimeOffsetToString(DateTimeOffset value);
    protected static string GDayOffsetToString(DateTimeOffset value);
    protected static string GMonthOffsetToString(DateTimeOffset value);
    protected static string GMonthDayOffsetToString(DateTimeOffset value);
    protected static string GYearOffsetToString(DateTimeOffset value);
    protected static string GYearMonthOffsetToString(DateTimeOffset value);
    protected static string QNameToString(XmlQualifiedName qname, IXmlNamespaceResolver nsResolver);
    protected static string TimeToString(DateTime value);
    protected static string TimeOffsetToString(DateTimeOffset value);
    protected static string YearMonthDurationToString(TimeSpan value);
    internal static DateTime DateTimeOffsetToDateTime(DateTimeOffset value);
    internal static int DecimalToInt32(decimal value);
    protected static long DecimalToInt64(decimal value);
    protected static ulong DecimalToUInt64(decimal value);
    protected static byte Int32ToByte(int value);
    protected static short Int32ToInt16(int value);
    protected static sbyte Int32ToSByte(int value);
    protected static ushort Int32ToUInt16(int value);
    protected static int Int64ToInt32(long value);
    protected static UInt32 Int64ToUInt32(long value);
    protected static DateTime UntypedAtomicToDateTime(string value);
    protected static DateTimeOffset UntypedAtomicToDateTimeOffset(string value);
}
internal class System.Xml.Schema.XmlBooleanConverter : XmlBaseConverter {
    protected XmlBooleanConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual bool ToBoolean(bool value);
    public virtual bool ToBoolean(string value);
    public virtual bool ToBoolean(object value);
    public virtual string ToString(bool value);
    public virtual string ToString(string value, IXmlNamespaceResolver nsResolver);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(bool value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlDateTimeConverter : XmlBaseConverter {
    protected XmlDateTimeConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual DateTime ToDateTime(DateTime value);
    public virtual DateTime ToDateTime(DateTimeOffset value);
    public virtual DateTime ToDateTime(string value);
    public virtual DateTime ToDateTime(object value);
    public virtual DateTimeOffset ToDateTimeOffset(DateTime value);
    public virtual DateTimeOffset ToDateTimeOffset(DateTimeOffset value);
    public virtual DateTimeOffset ToDateTimeOffset(string value);
    public virtual DateTimeOffset ToDateTimeOffset(object value);
    public virtual string ToString(DateTime value);
    public virtual string ToString(DateTimeOffset value);
    public virtual string ToString(string value, IXmlNamespaceResolver nsResolver);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(DateTime value, Type destinationType);
    public virtual object ChangeType(DateTimeOffset value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlListConverter : XmlBaseConverter {
    protected XmlValueConverter atomicConverter;
    protected XmlListConverter(XmlBaseConverter atomicConverter);
    protected XmlListConverter(XmlBaseConverter atomicConverter, Type clrTypeDefault);
    protected XmlListConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlValueConverter atomicConverter);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    protected virtual object ChangeListType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlMiscConverter : XmlBaseConverter {
    protected XmlMiscConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual string ToString(string value, IXmlNamespaceResolver nsResolver);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlNodeConverter : XmlBaseConverter {
    public static XmlValueConverter Node;
    private static XmlNodeConverter();
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlNumeric10Converter : XmlBaseConverter {
    protected XmlNumeric10Converter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual decimal ToDecimal(decimal value);
    public virtual decimal ToDecimal(int value);
    public virtual decimal ToDecimal(long value);
    public virtual decimal ToDecimal(string value);
    public virtual decimal ToDecimal(object value);
    public virtual int ToInt32(decimal value);
    public virtual int ToInt32(int value);
    public virtual int ToInt32(long value);
    public virtual int ToInt32(string value);
    public virtual int ToInt32(object value);
    public virtual long ToInt64(decimal value);
    public virtual long ToInt64(int value);
    public virtual long ToInt64(long value);
    public virtual long ToInt64(string value);
    public virtual long ToInt64(object value);
    public virtual string ToString(decimal value);
    public virtual string ToString(int value);
    public virtual string ToString(long value);
    public virtual string ToString(string value, IXmlNamespaceResolver nsResolver);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(decimal value, Type destinationType);
    public virtual object ChangeType(int value, Type destinationType);
    public virtual object ChangeType(long value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlNumeric2Converter : XmlBaseConverter {
    protected XmlNumeric2Converter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual double ToDouble(double value);
    public virtual double ToDouble(float value);
    public virtual double ToDouble(string value);
    public virtual double ToDouble(object value);
    public virtual float ToSingle(double value);
    public virtual float ToSingle(float value);
    public virtual float ToSingle(string value);
    public virtual float ToSingle(object value);
    public virtual string ToString(double value);
    public virtual string ToString(float value);
    public virtual string ToString(string value, IXmlNamespaceResolver nsResolver);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(double value, Type destinationType);
    public virtual object ChangeType(float value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
[XmlRootAttribute("schema")]
public class System.Xml.Schema.XmlSchema : XmlSchemaObject {
    public static string Namespace;
    public static string InstanceNamespace;
    [XmlAttributeAttribute("attributeFormDefault")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaForm AttributeFormDefault { get; public set; }
    [XmlAttributeAttribute("blockDefault")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod BlockDefault { get; public set; }
    [XmlAttributeAttribute("finalDefault")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod FinalDefault { get; public set; }
    [XmlAttributeAttribute("elementFormDefault")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaForm ElementFormDefault { get; public set; }
    [XmlAttributeAttribute("targetNamespace")]
public string TargetNamespace { get; public set; }
    [XmlAttributeAttribute("version")]
public string Version { get; public set; }
    [XmlElementAttribute("include", "System.Xml.Schema.XmlSchemaInclude")]
[XmlElementAttribute("import", "System.Xml.Schema.XmlSchemaImport")]
[XmlElementAttribute("redefine", "System.Xml.Schema.XmlSchemaRedefine")]
public XmlSchemaObjectCollection Includes { get; }
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
[XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroup")]
[XmlElementAttribute("complexType", "System.Xml.Schema.XmlSchemaComplexType")]
[XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
[XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroup")]
[XmlElementAttribute("notation", "System.Xml.Schema.XmlSchemaNotation")]
public XmlSchemaObjectCollection Items { get; }
    [XmlIgnoreAttribute]
public bool IsCompiled { get; }
    [XmlIgnoreAttribute]
internal bool IsCompiledBySet { get; internal set; }
    [XmlIgnoreAttribute]
internal bool IsPreprocessed { get; internal set; }
    [XmlIgnoreAttribute]
internal bool IsRedefined { get; internal set; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Attributes { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable AttributeGroups { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable SchemaTypes { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Elements { get; }
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Groups { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Notations { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaObjectTable IdentityConstraints { get; }
    [XmlIgnoreAttribute]
internal Uri BaseUri { get; internal set; }
    [XmlIgnoreAttribute]
internal int SchemaId { get; }
    [XmlIgnoreAttribute]
internal bool IsChameleon { get; internal set; }
    [XmlIgnoreAttribute]
internal Hashtable Ids { get; }
    [XmlIgnoreAttribute]
internal XmlDocument Document { get; }
    [XmlIgnoreAttribute]
internal int ErrorCount { get; internal set; }
    [XmlIgnoreAttribute]
internal string IdAttribute { get; internal set; }
    internal XmlNameTable NameTable { get; }
    internal ArrayList ImportedSchemas { get; }
    internal ArrayList ImportedNamespaces { get; }
    private static XmlSchema();
    public static XmlSchema Read(TextReader reader, ValidationEventHandler validationEventHandler);
    public static XmlSchema Read(Stream stream, ValidationEventHandler validationEventHandler);
    public static XmlSchema Read(XmlReader reader, ValidationEventHandler validationEventHandler);
    public void Write(Stream stream);
    public void Write(Stream stream, XmlNamespaceManager namespaceManager);
    public void Write(TextWriter writer);
    public void Write(TextWriter writer, XmlNamespaceManager namespaceManager);
    public void Write(XmlWriter writer);
    public void Write(XmlWriter writer, XmlNamespaceManager namespaceManager);
    [ObsoleteAttribute("Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202")]
public void Compile(ValidationEventHandler validationEventHandler);
    [ObsoleteAttribute("Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202")]
public void Compile(ValidationEventHandler validationEventHandler, XmlResolver resolver);
    internal bool CompileSchema(XmlSchemaCollection xsc, XmlResolver resolver, SchemaInfo schemaInfo, string ns, ValidationEventHandler validationEventHandler, XmlNameTable nameTable, bool CompileContentModel);
    internal void CompileSchemaInSet(XmlNameTable nameTable, ValidationEventHandler eventHandler, XmlSchemaCompilationSettings compilationSettings);
    public XmlSchemaForm get_AttributeFormDefault();
    public void set_AttributeFormDefault(XmlSchemaForm value);
    public XmlSchemaDerivationMethod get_BlockDefault();
    public void set_BlockDefault(XmlSchemaDerivationMethod value);
    public XmlSchemaDerivationMethod get_FinalDefault();
    public void set_FinalDefault(XmlSchemaDerivationMethod value);
    public XmlSchemaForm get_ElementFormDefault();
    public void set_ElementFormDefault(XmlSchemaForm value);
    public string get_TargetNamespace();
    public void set_TargetNamespace(string value);
    public string get_Version();
    public void set_Version(string value);
    public XmlSchemaObjectCollection get_Includes();
    public XmlSchemaObjectCollection get_Items();
    public bool get_IsCompiled();
    internal bool get_IsCompiledBySet();
    internal void set_IsCompiledBySet(bool value);
    internal bool get_IsPreprocessed();
    internal void set_IsPreprocessed(bool value);
    internal bool get_IsRedefined();
    internal void set_IsRedefined(bool value);
    public XmlSchemaObjectTable get_Attributes();
    public XmlSchemaObjectTable get_AttributeGroups();
    public XmlSchemaObjectTable get_SchemaTypes();
    public XmlSchemaObjectTable get_Elements();
    public string get_Id();
    public void set_Id(string value);
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
    public XmlSchemaObjectTable get_Groups();
    public XmlSchemaObjectTable get_Notations();
    internal XmlSchemaObjectTable get_IdentityConstraints();
    internal Uri get_BaseUri();
    internal void set_BaseUri(Uri value);
    internal int get_SchemaId();
    internal bool get_IsChameleon();
    internal void set_IsChameleon(bool value);
    internal Hashtable get_Ids();
    internal XmlDocument get_Document();
    internal int get_ErrorCount();
    internal void set_ErrorCount(int value);
    internal XmlSchema Clone();
    internal XmlSchema DeepClone();
    internal virtual string get_IdAttribute();
    internal virtual void set_IdAttribute(string value);
    internal void SetIsCompiled(bool isCompiled);
    internal virtual void SetUnhandledAttributes(XmlAttribute[] moreAttributes);
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
    internal XmlNameTable get_NameTable();
    internal ArrayList get_ImportedSchemas();
    internal ArrayList get_ImportedNamespaces();
    internal void GetExternalSchemasList(IList extList, XmlSchema schema);
}
public class System.Xml.Schema.XmlSchemaAll : XmlSchemaGroupBase {
    [XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
public XmlSchemaObjectCollection Items { get; }
    internal bool IsEmpty { get; }
    public virtual XmlSchemaObjectCollection get_Items();
    internal virtual bool get_IsEmpty();
    internal virtual void SetItems(XmlSchemaObjectCollection newItems);
}
public class System.Xml.Schema.XmlSchemaAnnotated : XmlSchemaObject {
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
public XmlSchemaAnnotation Annotation { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    [XmlIgnoreAttribute]
internal string IdAttribute { get; internal set; }
    public string get_Id();
    public void set_Id(string value);
    public XmlSchemaAnnotation get_Annotation();
    public void set_Annotation(XmlSchemaAnnotation value);
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
    internal virtual string get_IdAttribute();
    internal virtual void set_IdAttribute(string value);
    internal virtual void SetUnhandledAttributes(XmlAttribute[] moreAttributes);
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
}
public class System.Xml.Schema.XmlSchemaAnnotation : XmlSchemaObject {
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlElementAttribute("documentation", "System.Xml.Schema.XmlSchemaDocumentation")]
[XmlElementAttribute("appinfo", "System.Xml.Schema.XmlSchemaAppInfo")]
public XmlSchemaObjectCollection Items { get; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    [XmlIgnoreAttribute]
internal string IdAttribute { get; internal set; }
    public string get_Id();
    public void set_Id(string value);
    public XmlSchemaObjectCollection get_Items();
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
    internal virtual string get_IdAttribute();
    internal virtual void set_IdAttribute(string value);
    internal virtual void SetUnhandledAttributes(XmlAttribute[] moreAttributes);
}
public class System.Xml.Schema.XmlSchemaAny : XmlSchemaParticle {
    [XmlAttributeAttribute("namespace")]
public string Namespace { get; public set; }
    [XmlAttributeAttribute("processContents")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaContentProcessing ProcessContents { get; public set; }
    [XmlIgnoreAttribute]
internal NamespaceList NamespaceList { get; }
    [XmlIgnoreAttribute]
internal string ResolvedNamespace { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaContentProcessing ProcessContentsCorrect { get; }
    internal string NameString { get; }
    public string get_Namespace();
    public void set_Namespace(string value);
    public XmlSchemaContentProcessing get_ProcessContents();
    public void set_ProcessContents(XmlSchemaContentProcessing value);
    internal NamespaceList get_NamespaceList();
    internal string get_ResolvedNamespace();
    internal XmlSchemaContentProcessing get_ProcessContentsCorrect();
    internal virtual string get_NameString();
    internal void BuildNamespaceList(string targetNamespace);
    internal void BuildNamespaceListV1Compat(string targetNamespace);
    internal bool Allows(XmlQualifiedName qname);
}
public class System.Xml.Schema.XmlSchemaAnyAttribute : XmlSchemaAnnotated {
    [XmlAttributeAttribute("namespace")]
public string Namespace { get; public set; }
    [XmlAttributeAttribute("processContents")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaContentProcessing ProcessContents { get; public set; }
    [XmlIgnoreAttribute]
internal NamespaceList NamespaceList { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaContentProcessing ProcessContentsCorrect { get; }
    public string get_Namespace();
    public void set_Namespace(string value);
    public XmlSchemaContentProcessing get_ProcessContents();
    public void set_ProcessContents(XmlSchemaContentProcessing value);
    internal NamespaceList get_NamespaceList();
    internal XmlSchemaContentProcessing get_ProcessContentsCorrect();
    internal void BuildNamespaceList(string targetNamespace);
    internal void BuildNamespaceListV1Compat(string targetNamespace);
    internal bool Allows(XmlQualifiedName qname);
    internal static bool IsSubset(XmlSchemaAnyAttribute sub, XmlSchemaAnyAttribute super);
    internal static XmlSchemaAnyAttribute Intersection(XmlSchemaAnyAttribute o1, XmlSchemaAnyAttribute o2, bool v1Compat);
    internal static XmlSchemaAnyAttribute Union(XmlSchemaAnyAttribute o1, XmlSchemaAnyAttribute o2, bool v1Compat);
}
public class System.Xml.Schema.XmlSchemaAppInfo : XmlSchemaObject {
    [XmlAttributeAttribute("source")]
public string Source { get; public set; }
    [XmlTextAttribute]
[XmlAnyElementAttribute]
public XmlNode[] Markup { get; public set; }
    public string get_Source();
    public void set_Source(string value);
    public XmlNode[] get_Markup();
    public void set_Markup(XmlNode[] value);
}
public class System.Xml.Schema.XmlSchemaAttribute : XmlSchemaAnnotated {
    [XmlAttributeAttribute("default")]
[DefaultValueAttribute("")]
public string DefaultValue { get; public set; }
    [XmlAttributeAttribute("fixed")]
[DefaultValueAttribute("")]
public string FixedValue { get; public set; }
    [XmlAttributeAttribute("form")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaForm Form { get; public set; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    [XmlAttributeAttribute("type")]
public XmlQualifiedName SchemaTypeName { get; public set; }
    [XmlElementAttribute("simpleType")]
public XmlSchemaSimpleType SchemaType { get; public set; }
    [XmlAttributeAttribute("use")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaUse Use { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
[ObsoleteAttribute("This property has been deprecated. Please use AttributeSchemaType property that returns a strongly typed attribute type. http://go.microsoft.com/fwlink/?linkid=14202")]
public object AttributeType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaSimpleType AttributeSchemaType { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaDatatype Datatype { get; }
    internal SchemaAttDef AttDef { get; internal set; }
    internal bool HasDefault { get; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public string get_FixedValue();
    public void set_FixedValue(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public string get_Name();
    public void set_Name(string value);
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
    public XmlQualifiedName get_SchemaTypeName();
    public void set_SchemaTypeName(XmlQualifiedName value);
    public XmlSchemaSimpleType get_SchemaType();
    public void set_SchemaType(XmlSchemaSimpleType value);
    public XmlSchemaUse get_Use();
    public void set_Use(XmlSchemaUse value);
    public XmlQualifiedName get_QualifiedName();
    public object get_AttributeType();
    public XmlSchemaSimpleType get_AttributeSchemaType();
    internal XmlReader Validate(XmlReader reader, XmlResolver resolver, XmlSchemaSet schemaSet, ValidationEventHandler valEventHandler);
    internal XmlSchemaDatatype get_Datatype();
    internal void SetQualifiedName(XmlQualifiedName value);
    internal void SetAttributeType(XmlSchemaSimpleType value);
    internal SchemaAttDef get_AttDef();
    internal void set_AttDef(SchemaAttDef value);
    internal bool get_HasDefault();
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
    internal virtual XmlSchemaObject Clone();
}
public class System.Xml.Schema.XmlSchemaAttributeGroup : XmlSchemaAnnotated {
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaObjectTable AttributeUses { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaAnyAttribute AttributeWildcard { get; internal set; }
    [XmlIgnoreAttribute]
public XmlSchemaAttributeGroup RedefinedAttributeGroup { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaAttributeGroup Redefined { get; internal set; }
    [XmlIgnoreAttribute]
internal int SelfReferenceCount { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    public XmlQualifiedName get_QualifiedName();
    internal XmlSchemaObjectTable get_AttributeUses();
    internal XmlSchemaAnyAttribute get_AttributeWildcard();
    internal void set_AttributeWildcard(XmlSchemaAnyAttribute value);
    public XmlSchemaAttributeGroup get_RedefinedAttributeGroup();
    internal XmlSchemaAttributeGroup get_Redefined();
    internal void set_Redefined(XmlSchemaAttributeGroup value);
    internal int get_SelfReferenceCount();
    internal void set_SelfReferenceCount(int value);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
    internal void SetQualifiedName(XmlQualifiedName value);
    internal virtual XmlSchemaObject Clone();
}
public class System.Xml.Schema.XmlSchemaAttributeGroupRef : XmlSchemaAnnotated {
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
}
public class System.Xml.Schema.XmlSchemaChoice : XmlSchemaGroupBase {
    [XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
[XmlElementAttribute("any", "System.Xml.Schema.XmlSchemaAny")]
public XmlSchemaObjectCollection Items { get; }
    internal bool IsEmpty { get; }
    public virtual XmlSchemaObjectCollection get_Items();
    internal virtual bool get_IsEmpty();
    internal virtual void SetItems(XmlSchemaObjectCollection newItems);
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Xml.Schema.XmlSchemaCollection : object {
    public int Count { get; }
    public XmlNameTable NameTable { get; }
    unknown XmlResolver XmlResolver {internal set; }
    public XmlSchema Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    internal ValidationEventHandler EventHandler { get; internal set; }
    public XmlSchemaCollection(XmlNameTable nametable);
    public int get_Count();
    public XmlNameTable get_NameTable();
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    internal void set_XmlResolver(XmlResolver value);
    public XmlSchema Add(string ns, string uri);
    public XmlSchema Add(string ns, XmlReader reader);
    public XmlSchema Add(string ns, XmlReader reader, XmlResolver resolver);
    public XmlSchema Add(XmlSchema schema);
    public XmlSchema Add(XmlSchema schema, XmlResolver resolver);
    public void Add(XmlSchemaCollection schema);
    public XmlSchema get_Item(string ns);
    public bool Contains(XmlSchema schema);
    public bool Contains(string ns);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public XmlSchemaCollectionEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(XmlSchema[] array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    internal SchemaInfo GetSchemaInfo(string ns);
    internal SchemaNames GetSchemaNames(XmlNameTable nt);
    internal XmlSchema Add(string ns, SchemaInfo schemaInfo, XmlSchema schema, bool compile);
    internal ValidationEventHandler get_EventHandler();
    internal void set_EventHandler(ValidationEventHandler value);
}
public class System.Xml.Schema.XmlSchemaCollectionEnumerator : object {
    private object System.Collections.IEnumerator.Current { get; }
    public XmlSchema Current { get; }
    internal XmlSchemaCollectionNode CurrentNode { get; }
    internal XmlSchemaCollectionEnumerator(Hashtable collection);
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    public bool MoveNext();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public XmlSchema get_Current();
    internal XmlSchemaCollectionNode get_CurrentNode();
}
internal class System.Xml.Schema.XmlSchemaCollectionNode : object {
    internal string NamespaceURI { get; internal set; }
    internal SchemaInfo SchemaInfo { get; internal set; }
    internal XmlSchema Schema { get; internal set; }
    internal string get_NamespaceURI();
    internal void set_NamespaceURI(string value);
    internal SchemaInfo get_SchemaInfo();
    internal void set_SchemaInfo(SchemaInfo value);
    internal XmlSchema get_Schema();
    internal void set_Schema(XmlSchema value);
}
public class System.Xml.Schema.XmlSchemaCompilationSettings : object {
    public bool EnableUpaCheck { get; public set; }
    public bool get_EnableUpaCheck();
    public void set_EnableUpaCheck(bool value);
}
public class System.Xml.Schema.XmlSchemaComplexContent : XmlSchemaContentModel {
    [XmlAttributeAttribute("mixed")]
public bool IsMixed { get; public set; }
    [XmlElementAttribute("restriction", "System.Xml.Schema.XmlSchemaComplexContentRestriction")]
[XmlElementAttribute("extension", "System.Xml.Schema.XmlSchemaComplexContentExtension")]
public XmlSchemaContent Content { get; public set; }
    [XmlIgnoreAttribute]
internal bool HasMixedAttribute { get; }
    public bool get_IsMixed();
    public void set_IsMixed(bool value);
    public virtual XmlSchemaContent get_Content();
    public virtual void set_Content(XmlSchemaContent value);
    internal bool get_HasMixedAttribute();
}
public class System.Xml.Schema.XmlSchemaComplexContentExtension : XmlSchemaContent {
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaParticle Particle { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaParticle get_Particle();
    public void set_Particle(XmlSchemaParticle value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    internal void SetAttributes(XmlSchemaObjectCollection newAttributes);
}
public class System.Xml.Schema.XmlSchemaComplexContentRestriction : XmlSchemaContent {
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaParticle Particle { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaParticle get_Particle();
    public void set_Particle(XmlSchemaParticle value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    internal void SetAttributes(XmlSchemaObjectCollection newAttributes);
}
public class System.Xml.Schema.XmlSchemaComplexType : XmlSchemaType {
    [XmlIgnoreAttribute]
internal static XmlSchemaComplexType AnyType { get; }
    [XmlIgnoreAttribute]
internal static XmlSchemaComplexType UntypedAnyType { get; }
    [XmlIgnoreAttribute]
internal static XmlSchemaComplexType AnyTypeSkip { get; }
    internal static ContentValidator AnyTypeContentValidator { get; }
    [XmlAttributeAttribute("abstract")]
[DefaultValueAttribute("False")]
public bool IsAbstract { get; public set; }
    [XmlAttributeAttribute("block")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod Block { get; public set; }
    [XmlAttributeAttribute("mixed")]
[DefaultValueAttribute("False")]
public bool IsMixed { get; public set; }
    [XmlElementAttribute("simpleContent", "System.Xml.Schema.XmlSchemaSimpleContent")]
[XmlElementAttribute("complexContent", "System.Xml.Schema.XmlSchemaComplexContent")]
public XmlSchemaContentModel ContentModel { get; public set; }
    [XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaParticle Particle { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaContentType ContentType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaParticle ContentTypeParticle { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod BlockResolved { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable AttributeUses { get; }
    [XmlIgnoreAttribute]
public XmlSchemaAnyAttribute AttributeWildcard { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaObjectTable LocalElements { get; }
    internal bool HasWildCard { get; internal set; }
    internal XmlQualifiedName DerivedFrom { get; }
    private static XmlSchemaComplexType();
    internal static XmlSchemaComplexType get_AnyType();
    internal static XmlSchemaComplexType get_UntypedAnyType();
    internal static XmlSchemaComplexType get_AnyTypeSkip();
    internal static ContentValidator get_AnyTypeContentValidator();
    public bool get_IsAbstract();
    public void set_IsAbstract(bool value);
    public XmlSchemaDerivationMethod get_Block();
    public void set_Block(XmlSchemaDerivationMethod value);
    public virtual bool get_IsMixed();
    public virtual void set_IsMixed(bool value);
    public XmlSchemaContentModel get_ContentModel();
    public void set_ContentModel(XmlSchemaContentModel value);
    public XmlSchemaParticle get_Particle();
    public void set_Particle(XmlSchemaParticle value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    public XmlSchemaContentType get_ContentType();
    public XmlSchemaParticle get_ContentTypeParticle();
    public XmlSchemaDerivationMethod get_BlockResolved();
    public XmlSchemaObjectTable get_AttributeUses();
    public XmlSchemaAnyAttribute get_AttributeWildcard();
    internal XmlSchemaObjectTable get_LocalElements();
    internal void SetContentTypeParticle(XmlSchemaParticle value);
    internal void SetBlockResolved(XmlSchemaDerivationMethod value);
    internal void SetAttributeWildcard(XmlSchemaAnyAttribute value);
    internal bool get_HasWildCard();
    internal void set_HasWildCard(bool value);
    internal virtual XmlQualifiedName get_DerivedFrom();
    internal void SetAttributes(XmlSchemaObjectCollection newAttributes);
    internal bool ContainsIdAttribute(bool findAll);
    internal virtual XmlSchemaObject Clone();
    internal XmlSchemaObject Clone(XmlSchema parentSchema);
    internal static XmlSchemaObjectCollection CloneAttributes(XmlSchemaObjectCollection attributes);
    internal static XmlSchemaParticle CloneParticle(XmlSchemaParticle particle, XmlSchema parentSchema);
    internal static bool HasParticleRef(XmlSchemaParticle particle, XmlSchema parentSchema);
    internal static bool HasAttributeQNameRef(XmlSchemaObjectCollection attributes);
}
public abstract class System.Xml.Schema.XmlSchemaContent : XmlSchemaAnnotated {
}
public abstract class System.Xml.Schema.XmlSchemaContentModel : XmlSchemaAnnotated {
    [XmlIgnoreAttribute]
public XmlSchemaContent Content { get; public set; }
    public abstract virtual XmlSchemaContent get_Content();
    public abstract virtual void set_Content(XmlSchemaContent value);
}
public enum System.Xml.Schema.XmlSchemaContentProcessing : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static XmlSchemaContentProcessing None;
    [XmlEnumAttribute("skip")]
public static XmlSchemaContentProcessing Skip;
    [XmlEnumAttribute("lax")]
public static XmlSchemaContentProcessing Lax;
    [XmlEnumAttribute("strict")]
public static XmlSchemaContentProcessing Strict;
}
public enum System.Xml.Schema.XmlSchemaContentType : Enum {
    public int value__;
    public static XmlSchemaContentType TextOnly;
    public static XmlSchemaContentType Empty;
    public static XmlSchemaContentType ElementOnly;
    public static XmlSchemaContentType Mixed;
}
public abstract class System.Xml.Schema.XmlSchemaDatatype : object {
    public Type ValueType { get; }
    public XmlTokenizedType TokenizedType { get; }
    public XmlSchemaDatatypeVariety Variety { get; }
    public XmlTypeCode TypeCode { get; }
    internal bool HasLexicalFacets { get; }
    internal bool HasValueFacets { get; }
    internal XmlValueConverter ValueConverter { get; }
    internal RestrictionFacets Restriction { get; internal set; }
    internal FacetsChecker FacetsChecker { get; }
    internal XmlSchemaWhiteSpace BuiltInWhitespaceFacet { get; }
    internal string TypeCodeString { get; }
    public abstract virtual Type get_ValueType();
    public abstract virtual XmlTokenizedType get_TokenizedType();
    public abstract virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    public virtual XmlSchemaDatatypeVariety get_Variety();
    public virtual object ChangeType(object value, Type targetType);
    public virtual object ChangeType(object value, Type targetType, IXmlNamespaceResolver namespaceResolver);
    public virtual XmlTypeCode get_TypeCode();
    public virtual bool IsDerivedFrom(XmlSchemaDatatype datatype);
    internal abstract virtual bool get_HasLexicalFacets();
    internal abstract virtual bool get_HasValueFacets();
    internal abstract virtual XmlValueConverter get_ValueConverter();
    internal abstract virtual RestrictionFacets get_Restriction();
    internal abstract virtual void set_Restriction(RestrictionFacets value);
    internal abstract virtual int Compare(object value1, object value2);
    internal abstract virtual object ParseValue(string s, Type typDest, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
    internal abstract virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, bool createAtomicValue);
    internal abstract virtual Exception TryParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr, Object& typedValue);
    internal abstract virtual Exception TryParseValue(object value, XmlNameTable nameTable, IXmlNamespaceResolver namespaceResolver, Object& typedValue);
    internal abstract virtual FacetsChecker get_FacetsChecker();
    internal abstract virtual XmlSchemaWhiteSpace get_BuiltInWhitespaceFacet();
    internal abstract virtual XmlSchemaDatatype DeriveByRestriction(XmlSchemaObjectCollection facets, XmlNameTable nameTable, XmlSchemaType schemaType);
    internal abstract virtual XmlSchemaDatatype DeriveByList(XmlSchemaType schemaType);
    internal abstract virtual void VerifySchemaValid(XmlSchemaObjectTable notations, XmlSchemaObject caller);
    internal abstract virtual bool IsEqual(object o1, object o2);
    internal abstract virtual bool IsComparable(XmlSchemaDatatype dtype);
    internal string get_TypeCodeString();
    internal string TypeCodeToString(XmlTypeCode typeCode);
    internal static string ConcatenatedToString(object value);
    internal static XmlSchemaDatatype FromXmlTokenizedType(XmlTokenizedType token);
    internal static XmlSchemaDatatype FromXmlTokenizedTypeXsd(XmlTokenizedType token);
    internal static XmlSchemaDatatype FromXdrName(string name);
    internal static XmlSchemaDatatype DeriveByUnion(XmlSchemaSimpleType[] types, XmlSchemaType schemaType);
    internal static string XdrCanonizeUri(string uri, XmlNameTable nameTable, SchemaNames schemaNames);
}
public enum System.Xml.Schema.XmlSchemaDatatypeVariety : Enum {
    public int value__;
    public static XmlSchemaDatatypeVariety Atomic;
    public static XmlSchemaDatatypeVariety List;
    public static XmlSchemaDatatypeVariety Union;
}
[FlagsAttribute]
public enum System.Xml.Schema.XmlSchemaDerivationMethod : Enum {
    public int value__;
    [XmlEnumAttribute("")]
public static XmlSchemaDerivationMethod Empty;
    [XmlEnumAttribute("substitution")]
public static XmlSchemaDerivationMethod Substitution;
    [XmlEnumAttribute("extension")]
public static XmlSchemaDerivationMethod Extension;
    [XmlEnumAttribute("restriction")]
public static XmlSchemaDerivationMethod Restriction;
    [XmlEnumAttribute("list")]
public static XmlSchemaDerivationMethod List;
    [XmlEnumAttribute("union")]
public static XmlSchemaDerivationMethod Union;
    [XmlEnumAttribute("#all")]
public static XmlSchemaDerivationMethod All;
    [XmlIgnoreAttribute]
public static XmlSchemaDerivationMethod None;
}
public class System.Xml.Schema.XmlSchemaDocumentation : XmlSchemaObject {
    [XmlAttributeAttribute("source")]
public string Source { get; public set; }
    [XmlAttributeAttribute("xml:lang")]
public string Language { get; public set; }
    [XmlTextAttribute]
[XmlAnyElementAttribute]
public XmlNode[] Markup { get; public set; }
    private static XmlSchemaDocumentation();
    public string get_Source();
    public void set_Source(string value);
    public string get_Language();
    public void set_Language(string value);
    public XmlNode[] get_Markup();
    public void set_Markup(XmlNode[] value);
}
public class System.Xml.Schema.XmlSchemaElement : XmlSchemaParticle {
    [XmlAttributeAttribute("abstract")]
[DefaultValueAttribute("False")]
public bool IsAbstract { get; public set; }
    [XmlAttributeAttribute("block")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod Block { get; public set; }
    [XmlAttributeAttribute("default")]
[DefaultValueAttribute("")]
public string DefaultValue { get; public set; }
    [XmlAttributeAttribute("final")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod Final { get; public set; }
    [XmlAttributeAttribute("fixed")]
[DefaultValueAttribute("")]
public string FixedValue { get; public set; }
    [XmlAttributeAttribute("form")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaForm Form { get; public set; }
    [XmlAttributeAttribute("name")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [XmlAttributeAttribute("nillable")]
[DefaultValueAttribute("False")]
public bool IsNillable { get; public set; }
    [XmlIgnoreAttribute]
internal bool HasNillableAttribute { get; }
    [XmlIgnoreAttribute]
internal bool HasAbstractAttribute { get; }
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    [XmlAttributeAttribute("substitutionGroup")]
public XmlQualifiedName SubstitutionGroup { get; public set; }
    [XmlAttributeAttribute("type")]
public XmlQualifiedName SchemaTypeName { get; public set; }
    [XmlElementAttribute("complexType", "System.Xml.Schema.XmlSchemaComplexType")]
[XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaType SchemaType { get; public set; }
    [XmlElementAttribute("key", "System.Xml.Schema.XmlSchemaKey")]
[XmlElementAttribute("keyref", "System.Xml.Schema.XmlSchemaKeyref")]
[XmlElementAttribute("unique", "System.Xml.Schema.XmlSchemaUnique")]
public XmlSchemaObjectCollection Constraints { get; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
[ObsoleteAttribute("This property has been deprecated. Please use ElementSchemaType property that returns a strongly typed element type. http://go.microsoft.com/fwlink/?linkid=14202")]
public object ElementType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaType ElementSchemaType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod BlockResolved { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod FinalResolved { get; }
    [XmlIgnoreAttribute]
internal bool HasDefault { get; }
    internal bool HasConstraints { get; }
    internal bool IsLocalTypeDerivationChecked { get; internal set; }
    internal SchemaElementDecl ElementDecl { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameString { get; }
    public bool get_IsAbstract();
    public void set_IsAbstract(bool value);
    public XmlSchemaDerivationMethod get_Block();
    public void set_Block(XmlSchemaDerivationMethod value);
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public XmlSchemaDerivationMethod get_Final();
    public void set_Final(XmlSchemaDerivationMethod value);
    public string get_FixedValue();
    public void set_FixedValue(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_IsNillable();
    public void set_IsNillable(bool value);
    internal bool get_HasNillableAttribute();
    internal bool get_HasAbstractAttribute();
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
    public XmlQualifiedName get_SubstitutionGroup();
    public void set_SubstitutionGroup(XmlQualifiedName value);
    public XmlQualifiedName get_SchemaTypeName();
    public void set_SchemaTypeName(XmlQualifiedName value);
    public XmlSchemaType get_SchemaType();
    public void set_SchemaType(XmlSchemaType value);
    public XmlSchemaObjectCollection get_Constraints();
    public XmlQualifiedName get_QualifiedName();
    public object get_ElementType();
    public XmlSchemaType get_ElementSchemaType();
    public XmlSchemaDerivationMethod get_BlockResolved();
    public XmlSchemaDerivationMethod get_FinalResolved();
    internal XmlReader Validate(XmlReader reader, XmlResolver resolver, XmlSchemaSet schemaSet, ValidationEventHandler valEventHandler);
    internal void SetQualifiedName(XmlQualifiedName value);
    internal void SetElementType(XmlSchemaType value);
    internal void SetBlockResolved(XmlSchemaDerivationMethod value);
    internal void SetFinalResolved(XmlSchemaDerivationMethod value);
    internal bool get_HasDefault();
    internal bool get_HasConstraints();
    internal bool get_IsLocalTypeDerivationChecked();
    internal void set_IsLocalTypeDerivationChecked(bool value);
    internal SchemaElementDecl get_ElementDecl();
    internal void set_ElementDecl(SchemaElementDecl value);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
    internal virtual string get_NameString();
    internal virtual XmlSchemaObject Clone();
    internal XmlSchemaObject Clone(XmlSchema parentSchema);
}
public class System.Xml.Schema.XmlSchemaEnumerationFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaException : SystemException {
    internal string GetRes { get; }
    internal String[] Args { get; }
    public string SourceUri { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlSchemaObject SourceSchemaObject { get; }
    public string Message { get; }
    protected XmlSchemaException(SerializationInfo info, StreamingContext context);
    public XmlSchemaException(string message);
    public XmlSchemaException(string message, Exception innerException);
    public XmlSchemaException(string message, Exception innerException, int lineNumber, int linePosition);
    internal XmlSchemaException(string res, String[] args);
    internal XmlSchemaException(string res, string arg);
    internal XmlSchemaException(string res, string arg, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaException(string res, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaException(string res, String[] args, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaException(string res, XmlSchemaObject source);
    internal XmlSchemaException(string res, string arg, XmlSchemaObject source);
    internal XmlSchemaException(string res, String[] args, XmlSchemaObject source);
    internal XmlSchemaException(string res, String[] args, Exception innerException, string sourceUri, int lineNumber, int linePosition, XmlSchemaObject source);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static string CreateMessage(string res, String[] args);
    internal string get_GetRes();
    internal String[] get_Args();
    public string get_SourceUri();
    public int get_LineNumber();
    public int get_LinePosition();
    public XmlSchemaObject get_SourceSchemaObject();
    internal void SetSource(string sourceUri, int lineNumber, int linePosition);
    internal void SetSchemaObject(XmlSchemaObject source);
    internal void SetSource(XmlSchemaObject source);
    internal void SetResourceId(string resourceId);
    public virtual string get_Message();
}
public abstract class System.Xml.Schema.XmlSchemaExternal : XmlSchemaObject {
    [XmlAttributeAttribute("schemaLocation")]
public string SchemaLocation { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchema Schema { get; public set; }
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    [XmlIgnoreAttribute]
internal Uri BaseUri { get; internal set; }
    [XmlIgnoreAttribute]
internal string IdAttribute { get; internal set; }
    internal Compositor Compositor { get; internal set; }
    public string get_SchemaLocation();
    public void set_SchemaLocation(string value);
    public XmlSchema get_Schema();
    public void set_Schema(XmlSchema value);
    public string get_Id();
    public void set_Id(string value);
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
    internal Uri get_BaseUri();
    internal void set_BaseUri(Uri value);
    internal virtual string get_IdAttribute();
    internal virtual void set_IdAttribute(string value);
    internal virtual void SetUnhandledAttributes(XmlAttribute[] moreAttributes);
    internal Compositor get_Compositor();
    internal void set_Compositor(Compositor value);
}
public abstract class System.Xml.Schema.XmlSchemaFacet : XmlSchemaAnnotated {
    [XmlAttributeAttribute("value")]
public string Value { get; public set; }
    [XmlAttributeAttribute("fixed")]
[DefaultValueAttribute("False")]
public bool IsFixed { get; public set; }
    internal FacetType FacetType { get; internal set; }
    public string get_Value();
    public void set_Value(string value);
    public virtual bool get_IsFixed();
    public virtual void set_IsFixed(bool value);
    internal FacetType get_FacetType();
    internal void set_FacetType(FacetType value);
}
public enum System.Xml.Schema.XmlSchemaForm : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static XmlSchemaForm None;
    [XmlEnumAttribute("qualified")]
public static XmlSchemaForm Qualified;
    [XmlEnumAttribute("unqualified")]
public static XmlSchemaForm Unqualified;
}
public class System.Xml.Schema.XmlSchemaFractionDigitsFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaGroup : XmlSchemaAnnotated {
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaGroupBase Particle { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaParticle CanonicalParticle { get; internal set; }
    [XmlIgnoreAttribute]
internal XmlSchemaGroup Redefined { get; internal set; }
    [XmlIgnoreAttribute]
internal int SelfReferenceCount { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    public XmlSchemaGroupBase get_Particle();
    public void set_Particle(XmlSchemaGroupBase value);
    public XmlQualifiedName get_QualifiedName();
    internal XmlSchemaParticle get_CanonicalParticle();
    internal void set_CanonicalParticle(XmlSchemaParticle value);
    internal XmlSchemaGroup get_Redefined();
    internal void set_Redefined(XmlSchemaGroup value);
    internal int get_SelfReferenceCount();
    internal void set_SelfReferenceCount(int value);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
    internal void SetQualifiedName(XmlQualifiedName value);
    internal virtual XmlSchemaObject Clone();
    internal XmlSchemaObject Clone(XmlSchema parentSchema);
}
public abstract class System.Xml.Schema.XmlSchemaGroupBase : XmlSchemaParticle {
    [XmlIgnoreAttribute]
public XmlSchemaObjectCollection Items { get; }
    public abstract virtual XmlSchemaObjectCollection get_Items();
    internal abstract virtual void SetItems(XmlSchemaObjectCollection newItems);
}
public class System.Xml.Schema.XmlSchemaGroupRef : XmlSchemaParticle {
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaGroupBase Particle { get; }
    [XmlIgnoreAttribute]
internal XmlSchemaGroup Redefined { get; internal set; }
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
    public XmlSchemaGroupBase get_Particle();
    internal void SetParticle(XmlSchemaGroupBase value);
    internal XmlSchemaGroup get_Redefined();
    internal void set_Redefined(XmlSchemaGroup value);
}
public class System.Xml.Schema.XmlSchemaIdentityConstraint : XmlSchemaAnnotated {
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlElementAttribute("selector", "System.Xml.Schema.XmlSchemaXPath")]
public XmlSchemaXPath Selector { get; public set; }
    [XmlElementAttribute("field", "System.Xml.Schema.XmlSchemaXPath")]
public XmlSchemaObjectCollection Fields { get; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
internal CompiledIdentityConstraint CompiledConstraint { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    public XmlSchemaXPath get_Selector();
    public void set_Selector(XmlSchemaXPath value);
    public XmlSchemaObjectCollection get_Fields();
    public XmlQualifiedName get_QualifiedName();
    internal void SetQualifiedName(XmlQualifiedName value);
    internal CompiledIdentityConstraint get_CompiledConstraint();
    internal void set_CompiledConstraint(CompiledIdentityConstraint value);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
}
public class System.Xml.Schema.XmlSchemaImport : XmlSchemaExternal {
    [XmlAttributeAttribute("namespace")]
public string Namespace { get; public set; }
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
public XmlSchemaAnnotation Annotation { get; public set; }
    public string get_Namespace();
    public void set_Namespace(string value);
    public XmlSchemaAnnotation get_Annotation();
    public void set_Annotation(XmlSchemaAnnotation value);
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
}
public class System.Xml.Schema.XmlSchemaInclude : XmlSchemaExternal {
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
public XmlSchemaAnnotation Annotation { get; public set; }
    public XmlSchemaAnnotation get_Annotation();
    public void set_Annotation(XmlSchemaAnnotation value);
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
}
public class System.Xml.Schema.XmlSchemaInference : object {
    internal static XmlQualifiedName ST_boolean;
    internal static XmlQualifiedName ST_byte;
    internal static XmlQualifiedName ST_unsignedByte;
    internal static XmlQualifiedName ST_short;
    internal static XmlQualifiedName ST_unsignedShort;
    internal static XmlQualifiedName ST_int;
    internal static XmlQualifiedName ST_unsignedInt;
    internal static XmlQualifiedName ST_long;
    internal static XmlQualifiedName ST_unsignedLong;
    internal static XmlQualifiedName ST_integer;
    internal static XmlQualifiedName ST_decimal;
    internal static XmlQualifiedName ST_float;
    internal static XmlQualifiedName ST_double;
    internal static XmlQualifiedName ST_duration;
    internal static XmlQualifiedName ST_dateTime;
    internal static XmlQualifiedName ST_time;
    internal static XmlQualifiedName ST_date;
    internal static XmlQualifiedName ST_gYearMonth;
    internal static XmlQualifiedName ST_string;
    internal static XmlQualifiedName ST_anySimpleType;
    internal static XmlQualifiedName[] SimpleTypes;
    internal static short HC_ST_boolean;
    internal static short HC_ST_byte;
    internal static short HC_ST_unsignedByte;
    internal static short HC_ST_short;
    internal static short HC_ST_unsignedShort;
    internal static short HC_ST_int;
    internal static short HC_ST_unsignedInt;
    internal static short HC_ST_long;
    internal static short HC_ST_unsignedLong;
    internal static short HC_ST_integer;
    internal static short HC_ST_decimal;
    internal static short HC_ST_float;
    internal static short HC_ST_double;
    internal static short HC_ST_duration;
    internal static short HC_ST_dateTime;
    internal static short HC_ST_time;
    internal static short HC_ST_date;
    internal static short HC_ST_gYearMonth;
    internal static short HC_ST_string;
    internal static short HC_ST_Count;
    internal static int TF_boolean;
    internal static int TF_byte;
    internal static int TF_unsignedByte;
    internal static int TF_short;
    internal static int TF_unsignedShort;
    internal static int TF_int;
    internal static int TF_unsignedInt;
    internal static int TF_long;
    internal static int TF_unsignedLong;
    internal static int TF_integer;
    internal static int TF_decimal;
    internal static int TF_float;
    internal static int TF_double;
    internal static int TF_duration;
    internal static int TF_dateTime;
    internal static int TF_time;
    internal static int TF_date;
    internal static int TF_gYearMonth;
    internal static int TF_string;
    public InferenceOption Occurrence { get; public set; }
    public InferenceOption TypeInference { get; public set; }
    private static XmlSchemaInference();
    public void set_Occurrence(InferenceOption value);
    public InferenceOption get_Occurrence();
    public void set_TypeInference(InferenceOption value);
    public InferenceOption get_TypeInference();
    public XmlSchemaSet InferSchema(XmlReader instanceDocument);
    public XmlSchemaSet InferSchema(XmlReader instanceDocument, XmlSchemaSet schemas);
    internal XmlSchemaSet InferSchema1(XmlReader instanceDocument, XmlSchemaSet schemas);
    internal void InferElement(XmlSchemaElement xse, bool bCreatingNewType, XmlSchema parentSchema);
    internal XmlSchemaElement FindMatchingElement(bool bCreatingNewType, XmlReader xtr, XmlSchemaComplexType ct, Int32& lastUsedSeqItem, Boolean& bParticleChanged, XmlSchema parentSchema, bool setMaxoccurs);
    internal void ProcessAttributes(XmlSchemaElement& xse, XmlSchemaType effectiveSchemaType, bool bCreatingNewType, XmlSchema parentSchema);
    internal XmlSchemaAttribute FindAttribute(ICollection attributes, string attrName);
    internal XmlSchemaElement FindGlobalElement(string namespaceURI, string localName, XmlSchema& parentSchema);
    internal XmlSchemaElement FindElement(XmlSchemaObjectCollection elements, string elementName);
    internal XmlSchemaAttribute FindAttributeRef(ICollection attributes, string attributeName, string nsURI);
    internal XmlSchemaElement FindElementRef(XmlSchemaObjectCollection elements, string elementName, string nsURI);
    internal void MakeExistingAttributesOptional(XmlSchemaComplexType ct, XmlSchemaObjectCollection attributesInInstance);
    internal XmlQualifiedName RefineSimpleType(string s, Int32& iTypeFlags);
    internal static int InferSimpleType(string s, Boolean& bNeedsRangeCheck);
    internal static int DateTime(string s, bool bDate, bool bTime);
    internal void SetMinMaxOccurs(XmlSchemaElement el, bool setMaxOccurs);
}
public class System.Xml.Schema.XmlSchemaInferenceException : XmlSchemaException {
    protected XmlSchemaInferenceException(SerializationInfo info, StreamingContext context);
    public XmlSchemaInferenceException(string message);
    public XmlSchemaInferenceException(string message, Exception innerException);
    public XmlSchemaInferenceException(string message, Exception innerException, int lineNumber, int linePosition);
    internal XmlSchemaInferenceException(string res, String[] args);
    internal XmlSchemaInferenceException(string res, string arg);
    internal XmlSchemaInferenceException(string res, string arg, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaInferenceException(string res, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaInferenceException(string res, String[] args, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaInferenceException(string res, int lineNumber, int linePosition);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Xml.Schema.XmlSchemaInfo : object {
    public XmlSchemaValidity Validity { get; public set; }
    public bool IsDefault { get; public set; }
    public bool IsNil { get; public set; }
    public XmlSchemaSimpleType MemberType { get; public set; }
    public XmlSchemaType SchemaType { get; public set; }
    public XmlSchemaElement SchemaElement { get; public set; }
    public XmlSchemaAttribute SchemaAttribute { get; public set; }
    public XmlSchemaContentType ContentType { get; public set; }
    internal XmlSchemaType XmlType { get; }
    internal bool HasDefaultValue { get; }
    internal bool IsUnionType { get; }
    internal XmlSchemaInfo(XmlSchemaValidity validity);
    public sealed virtual XmlSchemaValidity get_Validity();
    public void set_Validity(XmlSchemaValidity value);
    public sealed virtual bool get_IsDefault();
    public void set_IsDefault(bool value);
    public sealed virtual bool get_IsNil();
    public void set_IsNil(bool value);
    public sealed virtual XmlSchemaSimpleType get_MemberType();
    public void set_MemberType(XmlSchemaSimpleType value);
    public sealed virtual XmlSchemaType get_SchemaType();
    public void set_SchemaType(XmlSchemaType value);
    public sealed virtual XmlSchemaElement get_SchemaElement();
    public void set_SchemaElement(XmlSchemaElement value);
    public sealed virtual XmlSchemaAttribute get_SchemaAttribute();
    public void set_SchemaAttribute(XmlSchemaAttribute value);
    public XmlSchemaContentType get_ContentType();
    public void set_ContentType(XmlSchemaContentType value);
    internal XmlSchemaType get_XmlType();
    internal bool get_HasDefaultValue();
    internal bool get_IsUnionType();
    internal void Clear();
}
public class System.Xml.Schema.XmlSchemaKey : XmlSchemaIdentityConstraint {
}
public class System.Xml.Schema.XmlSchemaKeyref : XmlSchemaIdentityConstraint {
    [XmlAttributeAttribute("refer")]
public XmlQualifiedName Refer { get; public set; }
    public XmlQualifiedName get_Refer();
    public void set_Refer(XmlQualifiedName value);
}
public class System.Xml.Schema.XmlSchemaLengthFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaMaxExclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMaxInclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMaxLengthFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaMinExclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMinInclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMinLengthFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaNotation : XmlSchemaAnnotated {
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("public")]
public string Public { get; public set; }
    [XmlAttributeAttribute("system")]
public string System { get; public set; }
    [XmlIgnoreAttribute]
internal XmlQualifiedName QualifiedName { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Public();
    public void set_Public(string value);
    public string get_System();
    public void set_System(string value);
    internal XmlQualifiedName get_QualifiedName();
    internal void set_QualifiedName(XmlQualifiedName value);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
}
public abstract class System.Xml.Schema.XmlSchemaNumericFacet : XmlSchemaFacet {
}
public abstract class System.Xml.Schema.XmlSchemaObject : object {
    [XmlIgnoreAttribute]
public int LineNumber { get; public set; }
    [XmlIgnoreAttribute]
public int LinePosition { get; public set; }
    [XmlIgnoreAttribute]
public string SourceUri { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaObject Parent { get; public set; }
    [XmlNamespaceDeclarationsAttribute]
public XmlSerializerNamespaces Namespaces { get; public set; }
    [XmlIgnoreAttribute]
internal string IdAttribute { get; internal set; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    [XmlIgnoreAttribute]
internal bool IsProcessing { get; internal set; }
    public int get_LineNumber();
    public void set_LineNumber(int value);
    public int get_LinePosition();
    public void set_LinePosition(int value);
    public string get_SourceUri();
    public void set_SourceUri(string value);
    public XmlSchemaObject get_Parent();
    public void set_Parent(XmlSchemaObject value);
    public XmlSerializerNamespaces get_Namespaces();
    public void set_Namespaces(XmlSerializerNamespaces value);
    internal virtual void OnAdd(XmlSchemaObjectCollection container, object item);
    internal virtual void OnRemove(XmlSchemaObjectCollection container, object item);
    internal virtual void OnClear(XmlSchemaObjectCollection container);
    internal virtual string get_IdAttribute();
    internal virtual void set_IdAttribute(string value);
    internal virtual void SetUnhandledAttributes(XmlAttribute[] moreAttributes);
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
    internal bool get_IsProcessing();
    internal void set_IsProcessing(bool value);
    internal virtual XmlSchemaObject Clone();
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Schema.XmlSchemaObjectCollection : CollectionBase {
    public XmlSchemaObject Item { get; public set; }
    public XmlSchemaObjectCollection(XmlSchemaObject parent);
    public virtual XmlSchemaObject get_Item(int index);
    public virtual void set_Item(int index, XmlSchemaObject value);
    public XmlSchemaObjectEnumerator GetEnumerator();
    public int Add(XmlSchemaObject item);
    public void Insert(int index, XmlSchemaObject item);
    public int IndexOf(XmlSchemaObject item);
    public bool Contains(XmlSchemaObject item);
    public void Remove(XmlSchemaObject item);
    public void CopyTo(XmlSchemaObject[] array, int index);
    protected virtual void OnInsert(int index, object item);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    protected virtual void OnClear();
    protected virtual void OnRemove(int index, object item);
    internal XmlSchemaObjectCollection Clone();
}
public class System.Xml.Schema.XmlSchemaObjectEnumerator : object {
    public XmlSchemaObject Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    internal XmlSchemaObjectEnumerator(IEnumerator enumerator);
    public void Reset();
    public bool MoveNext();
    public XmlSchemaObject get_Current();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Schema.XmlSchemaObjectTable : object {
    public int Count { get; }
    public XmlSchemaObject Item { get; }
    public ICollection Names { get; }
    public ICollection Values { get; }
    internal void Add(XmlQualifiedName name, XmlSchemaObject value);
    internal void Insert(XmlQualifiedName name, XmlSchemaObject value);
    internal void Replace(XmlQualifiedName name, XmlSchemaObject value);
    internal void Clear();
    internal void Remove(XmlQualifiedName name);
    public int get_Count();
    public bool Contains(XmlQualifiedName name);
    public XmlSchemaObject get_Item(XmlQualifiedName name);
    public ICollection get_Names();
    public ICollection get_Values();
    public IDictionaryEnumerator GetEnumerator();
}
public abstract class System.Xml.Schema.XmlSchemaParticle : XmlSchemaAnnotated {
    internal static XmlSchemaParticle Empty;
    [XmlAttributeAttribute("minOccurs")]
public string MinOccursString { get; public set; }
    [XmlAttributeAttribute("maxOccurs")]
public string MaxOccursString { get; public set; }
    [XmlIgnoreAttribute]
public decimal MinOccurs { get; public set; }
    [XmlIgnoreAttribute]
public decimal MaxOccurs { get; public set; }
    internal bool IsEmpty { get; }
    internal bool IsMultipleOccurrence { get; }
    internal string NameString { get; }
    private static XmlSchemaParticle();
    public string get_MinOccursString();
    public void set_MinOccursString(string value);
    public string get_MaxOccursString();
    public void set_MaxOccursString(string value);
    public decimal get_MinOccurs();
    public void set_MinOccurs(decimal value);
    public decimal get_MaxOccurs();
    public void set_MaxOccurs(decimal value);
    internal virtual bool get_IsEmpty();
    internal bool get_IsMultipleOccurrence();
    internal virtual string get_NameString();
    internal XmlQualifiedName GetQualifiedName();
}
public class System.Xml.Schema.XmlSchemaPatternFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaRedefine : XmlSchemaExternal {
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroup")]
[XmlElementAttribute("complexType", "System.Xml.Schema.XmlSchemaComplexType")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroup")]
[XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaObjectCollection Items { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable AttributeGroups { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable SchemaTypes { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Groups { get; }
    public XmlSchemaObjectCollection get_Items();
    public XmlSchemaObjectTable get_AttributeGroups();
    public XmlSchemaObjectTable get_SchemaTypes();
    public XmlSchemaObjectTable get_Groups();
    internal virtual void AddAnnotation(XmlSchemaAnnotation annotation);
}
public class System.Xml.Schema.XmlSchemaSequence : XmlSchemaGroupBase {
    [XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
[XmlElementAttribute("any", "System.Xml.Schema.XmlSchemaAny")]
public XmlSchemaObjectCollection Items { get; }
    internal bool IsEmpty { get; }
    public virtual XmlSchemaObjectCollection get_Items();
    internal virtual bool get_IsEmpty();
    internal virtual void SetItems(XmlSchemaObjectCollection newItems);
}
public class System.Xml.Schema.XmlSchemaSet : object {
    internal XmlSchemaObjectTable elements;
    internal XmlSchemaObjectTable attributes;
    internal XmlSchemaObjectTable schemaTypes;
    internal XmlSchemaObjectTable substitutionGroups;
    internal object InternalSyncObject { get; }
    public XmlNameTable NameTable { get; }
    public bool IsCompiled { get; }
    unknown XmlResolver XmlResolver {public set; }
    public XmlSchemaCompilationSettings CompilationSettings { get; public set; }
    public int Count { get; }
    public XmlSchemaObjectTable GlobalElements { get; }
    public XmlSchemaObjectTable GlobalAttributes { get; }
    public XmlSchemaObjectTable GlobalTypes { get; }
    internal XmlSchemaObjectTable SubstitutionGroups { get; }
    internal Hashtable SchemaLocations { get; }
    internal XmlSchemaObjectTable TypeExtensions { get; }
    internal SchemaInfo CompiledInfo { get; }
    internal XmlReaderSettings ReaderSettings { get; }
    internal SortedList SortedSchemas { get; }
    internal bool CompileAll { get; }
    public XmlSchemaSet(XmlNameTable nameTable);
    internal object get_InternalSyncObject();
    public XmlNameTable get_NameTable();
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public bool get_IsCompiled();
    public void set_XmlResolver(XmlResolver value);
    public XmlSchemaCompilationSettings get_CompilationSettings();
    public void set_CompilationSettings(XmlSchemaCompilationSettings value);
    public int get_Count();
    public XmlSchemaObjectTable get_GlobalElements();
    public XmlSchemaObjectTable get_GlobalAttributes();
    public XmlSchemaObjectTable get_GlobalTypes();
    internal XmlSchemaObjectTable get_SubstitutionGroups();
    internal Hashtable get_SchemaLocations();
    internal XmlSchemaObjectTable get_TypeExtensions();
    public XmlSchema Add(string targetNamespace, string schemaUri);
    public XmlSchema Add(string targetNamespace, XmlReader schemaDocument);
    public void Add(XmlSchemaSet schemas);
    public XmlSchema Add(XmlSchema schema);
    public XmlSchema Remove(XmlSchema schema);
    public bool RemoveRecursive(XmlSchema schemaToRemove);
    public bool Contains(string targetNamespace);
    public bool Contains(XmlSchema schema);
    public void Compile();
    public XmlSchema Reprocess(XmlSchema schema);
    public void CopyTo(XmlSchema[] schemas, int index);
    public ICollection Schemas();
    public ICollection Schemas(string targetNamespace);
    internal void Add(string targetNamespace, XmlReader reader, Hashtable validatedNamespaces);
    internal XmlSchema FindSchemaByNSAndUrl(Uri schemaUri, string ns, DictionaryEntry[] locationsTable);
    internal XmlSchema Remove(XmlSchema schema, bool forceCompile);
    internal bool PreprocessSchema(XmlSchema& schema, string targetNamespace);
    internal XmlSchema ParseSchema(string targetNamespace, XmlReader reader);
    internal void CopyFromCompiledSet(XmlSchemaSet otherSet);
    internal SchemaInfo get_CompiledInfo();
    internal XmlReaderSettings get_ReaderSettings();
    internal XmlResolver GetResolver();
    internal ValidationEventHandler GetEventHandler();
    internal SchemaNames GetSchemaNames(XmlNameTable nt);
    internal bool IsSchemaLoaded(Uri schemaUri, string targetNamespace, XmlSchema& schema);
    internal bool GetSchemaByUri(Uri schemaUri, XmlSchema& schema);
    internal string GetTargetNamespace(XmlSchema schema);
    internal SortedList get_SortedSchemas();
    internal bool get_CompileAll();
}
public class System.Xml.Schema.XmlSchemaSimpleContent : XmlSchemaContentModel {
    [XmlElementAttribute("restriction", "System.Xml.Schema.XmlSchemaSimpleContentRestriction")]
[XmlElementAttribute("extension", "System.Xml.Schema.XmlSchemaSimpleContentExtension")]
public XmlSchemaContent Content { get; public set; }
    public virtual XmlSchemaContent get_Content();
    public virtual void set_Content(XmlSchemaContent value);
}
public class System.Xml.Schema.XmlSchemaSimpleContentExtension : XmlSchemaContent {
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    internal void SetAttributes(XmlSchemaObjectCollection newAttributes);
}
public class System.Xml.Schema.XmlSchemaSimpleContentRestriction : XmlSchemaContent {
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaSimpleType BaseType { get; public set; }
    [XmlElementAttribute("length", "System.Xml.Schema.XmlSchemaLengthFacet")]
[XmlElementAttribute("minLength", "System.Xml.Schema.XmlSchemaMinLengthFacet")]
[XmlElementAttribute("maxLength", "System.Xml.Schema.XmlSchemaMaxLengthFacet")]
[XmlElementAttribute("pattern", "System.Xml.Schema.XmlSchemaPatternFacet")]
[XmlElementAttribute("enumeration", "System.Xml.Schema.XmlSchemaEnumerationFacet")]
[XmlElementAttribute("maxInclusive", "System.Xml.Schema.XmlSchemaMaxInclusiveFacet")]
[XmlElementAttribute("maxExclusive", "System.Xml.Schema.XmlSchemaMaxExclusiveFacet")]
[XmlElementAttribute("minInclusive", "System.Xml.Schema.XmlSchemaMinInclusiveFacet")]
[XmlElementAttribute("minExclusive", "System.Xml.Schema.XmlSchemaMinExclusiveFacet")]
[XmlElementAttribute("totalDigits", "System.Xml.Schema.XmlSchemaTotalDigitsFacet")]
[XmlElementAttribute("fractionDigits", "System.Xml.Schema.XmlSchemaFractionDigitsFacet")]
[XmlElementAttribute("whiteSpace", "System.Xml.Schema.XmlSchemaWhiteSpaceFacet")]
public XmlSchemaObjectCollection Facets { get; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaSimpleType get_BaseType();
    public void set_BaseType(XmlSchemaSimpleType value);
    public XmlSchemaObjectCollection get_Facets();
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    internal void SetAttributes(XmlSchemaObjectCollection newAttributes);
}
public class System.Xml.Schema.XmlSchemaSimpleType : XmlSchemaType {
    [XmlElementAttribute("restriction", "System.Xml.Schema.XmlSchemaSimpleTypeRestriction")]
[XmlElementAttribute("list", "System.Xml.Schema.XmlSchemaSimpleTypeList")]
[XmlElementAttribute("union", "System.Xml.Schema.XmlSchemaSimpleTypeUnion")]
public XmlSchemaSimpleTypeContent Content { get; public set; }
    internal XmlQualifiedName DerivedFrom { get; }
    public XmlSchemaSimpleTypeContent get_Content();
    public void set_Content(XmlSchemaSimpleTypeContent value);
    internal virtual XmlQualifiedName get_DerivedFrom();
    internal virtual XmlSchemaObject Clone();
}
public abstract class System.Xml.Schema.XmlSchemaSimpleTypeContent : XmlSchemaAnnotated {
}
public class System.Xml.Schema.XmlSchemaSimpleTypeList : XmlSchemaSimpleTypeContent {
    [XmlAttributeAttribute("itemType")]
public XmlQualifiedName ItemTypeName { get; public set; }
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaSimpleType ItemType { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaSimpleType BaseItemType { get; public set; }
    public XmlQualifiedName get_ItemTypeName();
    public void set_ItemTypeName(XmlQualifiedName value);
    public XmlSchemaSimpleType get_ItemType();
    public void set_ItemType(XmlSchemaSimpleType value);
    public XmlSchemaSimpleType get_BaseItemType();
    public void set_BaseItemType(XmlSchemaSimpleType value);
    internal virtual XmlSchemaObject Clone();
}
public class System.Xml.Schema.XmlSchemaSimpleTypeRestriction : XmlSchemaSimpleTypeContent {
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaSimpleType BaseType { get; public set; }
    [XmlElementAttribute("length", "System.Xml.Schema.XmlSchemaLengthFacet")]
[XmlElementAttribute("minLength", "System.Xml.Schema.XmlSchemaMinLengthFacet")]
[XmlElementAttribute("maxLength", "System.Xml.Schema.XmlSchemaMaxLengthFacet")]
[XmlElementAttribute("pattern", "System.Xml.Schema.XmlSchemaPatternFacet")]
[XmlElementAttribute("enumeration", "System.Xml.Schema.XmlSchemaEnumerationFacet")]
[XmlElementAttribute("maxInclusive", "System.Xml.Schema.XmlSchemaMaxInclusiveFacet")]
[XmlElementAttribute("maxExclusive", "System.Xml.Schema.XmlSchemaMaxExclusiveFacet")]
[XmlElementAttribute("minInclusive", "System.Xml.Schema.XmlSchemaMinInclusiveFacet")]
[XmlElementAttribute("minExclusive", "System.Xml.Schema.XmlSchemaMinExclusiveFacet")]
[XmlElementAttribute("totalDigits", "System.Xml.Schema.XmlSchemaTotalDigitsFacet")]
[XmlElementAttribute("fractionDigits", "System.Xml.Schema.XmlSchemaFractionDigitsFacet")]
[XmlElementAttribute("whiteSpace", "System.Xml.Schema.XmlSchemaWhiteSpaceFacet")]
public XmlSchemaObjectCollection Facets { get; }
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaSimpleType get_BaseType();
    public void set_BaseType(XmlSchemaSimpleType value);
    public XmlSchemaObjectCollection get_Facets();
    internal virtual XmlSchemaObject Clone();
}
public class System.Xml.Schema.XmlSchemaSimpleTypeUnion : XmlSchemaSimpleTypeContent {
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaObjectCollection BaseTypes { get; }
    [XmlAttributeAttribute("memberTypes")]
public XmlQualifiedName[] MemberTypes { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaSimpleType[] BaseMemberTypes { get; }
    public XmlSchemaObjectCollection get_BaseTypes();
    public XmlQualifiedName[] get_MemberTypes();
    public void set_MemberTypes(XmlQualifiedName[] value);
    public XmlSchemaSimpleType[] get_BaseMemberTypes();
    internal void SetBaseMemberTypes(XmlSchemaSimpleType[] baseMemberTypes);
    internal virtual XmlSchemaObject Clone();
}
internal class System.Xml.Schema.XmlSchemaSubstitutionGroup : XmlSchemaObject {
    [XmlIgnoreAttribute]
internal ArrayList Members { get; }
    [XmlIgnoreAttribute]
internal XmlQualifiedName Examplar { get; internal set; }
    internal ArrayList get_Members();
    internal XmlQualifiedName get_Examplar();
    internal void set_Examplar(XmlQualifiedName value);
}
internal class System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat : XmlSchemaSubstitutionGroup {
    [XmlIgnoreAttribute]
internal XmlSchemaChoice Choice { get; }
    internal XmlSchemaChoice get_Choice();
}
public class System.Xml.Schema.XmlSchemaTotalDigitsFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaType : XmlSchemaAnnotated {
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("final")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public XmlSchemaDerivationMethod Final { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod FinalResolved { get; }
    [XmlIgnoreAttribute]
[ObsoleteAttribute("This property has been deprecated. Please use BaseXmlSchemaType property that returns a strongly typed base schema type. http://go.microsoft.com/fwlink/?linkid=14202")]
public object BaseSchemaType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaType BaseXmlSchemaType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod DerivedBy { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDatatype Datatype { get; }
    [XmlIgnoreAttribute]
public bool IsMixed { get; public set; }
    [XmlIgnoreAttribute]
public XmlTypeCode TypeCode { get; }
    [XmlIgnoreAttribute]
internal XmlValueConverter ValueConverter { get; }
    internal XmlSchemaContentType SchemaContentType { get; }
    internal SchemaElementDecl ElementDecl { get; internal set; }
    [XmlIgnoreAttribute]
internal XmlSchemaType Redefined { get; internal set; }
    internal XmlQualifiedName DerivedFrom { get; }
    [XmlIgnoreAttribute]
internal string NameAttribute { get; internal set; }
    public static XmlSchemaSimpleType GetBuiltInSimpleType(XmlQualifiedName qualifiedName);
    public static XmlSchemaSimpleType GetBuiltInSimpleType(XmlTypeCode typeCode);
    public static XmlSchemaComplexType GetBuiltInComplexType(XmlTypeCode typeCode);
    public static XmlSchemaComplexType GetBuiltInComplexType(XmlQualifiedName qualifiedName);
    public string get_Name();
    public void set_Name(string value);
    public XmlSchemaDerivationMethod get_Final();
    public void set_Final(XmlSchemaDerivationMethod value);
    public XmlQualifiedName get_QualifiedName();
    public XmlSchemaDerivationMethod get_FinalResolved();
    public object get_BaseSchemaType();
    public XmlSchemaType get_BaseXmlSchemaType();
    public XmlSchemaDerivationMethod get_DerivedBy();
    public XmlSchemaDatatype get_Datatype();
    public virtual bool get_IsMixed();
    public virtual void set_IsMixed(bool value);
    public XmlTypeCode get_TypeCode();
    internal XmlValueConverter get_ValueConverter();
    internal XmlReader Validate(XmlReader reader, XmlResolver resolver, XmlSchemaSet schemaSet, ValidationEventHandler valEventHandler);
    internal XmlSchemaContentType get_SchemaContentType();
    internal void SetQualifiedName(XmlQualifiedName value);
    internal void SetFinalResolved(XmlSchemaDerivationMethod value);
    internal void SetBaseSchemaType(XmlSchemaType value);
    internal void SetDerivedBy(XmlSchemaDerivationMethod value);
    internal void SetDatatype(XmlSchemaDatatype value);
    internal SchemaElementDecl get_ElementDecl();
    internal void set_ElementDecl(SchemaElementDecl value);
    internal XmlSchemaType get_Redefined();
    internal void set_Redefined(XmlSchemaType value);
    internal virtual XmlQualifiedName get_DerivedFrom();
    internal void SetContentType(XmlSchemaContentType value);
    public static bool IsDerivedFrom(XmlSchemaType derivedType, XmlSchemaType baseType, XmlSchemaDerivationMethod except);
    internal static bool IsDerivedFromDatatype(XmlSchemaDatatype derivedDataType, XmlSchemaDatatype baseDataType, XmlSchemaDerivationMethod except);
    internal virtual string get_NameAttribute();
    internal virtual void set_NameAttribute(string value);
}
public class System.Xml.Schema.XmlSchemaUnique : XmlSchemaIdentityConstraint {
}
public enum System.Xml.Schema.XmlSchemaUse : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static XmlSchemaUse None;
    [XmlEnumAttribute("optional")]
public static XmlSchemaUse Optional;
    [XmlEnumAttribute("prohibited")]
public static XmlSchemaUse Prohibited;
    [XmlEnumAttribute("required")]
public static XmlSchemaUse Required;
}
public class System.Xml.Schema.XmlSchemaValidationException : XmlSchemaException {
    public object SourceObject { get; }
    protected XmlSchemaValidationException(SerializationInfo info, StreamingContext context);
    public XmlSchemaValidationException(string message);
    public XmlSchemaValidationException(string message, Exception innerException);
    public XmlSchemaValidationException(string message, Exception innerException, int lineNumber, int linePosition);
    internal XmlSchemaValidationException(string res, String[] args);
    internal XmlSchemaValidationException(string res, string arg);
    internal XmlSchemaValidationException(string res, string arg, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaValidationException(string res, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaValidationException(string res, String[] args, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaValidationException(string res, String[] args, Exception innerException, string sourceUri, int lineNumber, int linePosition);
    internal XmlSchemaValidationException(string res, String[] args, object sourceNode);
    internal XmlSchemaValidationException(string res, String[] args, string sourceUri, object sourceNode);
    internal XmlSchemaValidationException(string res, String[] args, string sourceUri, int lineNumber, int linePosition, XmlSchemaObject source, object sourceNode);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public object get_SourceObject();
    protected internal void SetSourceObject(object sourceObject);
}
[FlagsAttribute]
public enum System.Xml.Schema.XmlSchemaValidationFlags : Enum {
    public int value__;
    public static XmlSchemaValidationFlags None;
    public static XmlSchemaValidationFlags ProcessInlineSchema;
    public static XmlSchemaValidationFlags ProcessSchemaLocation;
    public static XmlSchemaValidationFlags ReportValidationWarnings;
    public static XmlSchemaValidationFlags ProcessIdentityConstraints;
    public static XmlSchemaValidationFlags AllowXmlAttributes;
}
public class System.Xml.Schema.XmlSchemaValidator : object {
    internal static Boolean[0...,0...] ValidStates;
    unknown XmlResolver XmlResolver {public set; }
    public IXmlLineInfo LineInfoProvider { get; public set; }
    public Uri SourceUri { get; public set; }
    public object ValidationEventSender { get; public set; }
    internal XmlSchemaSet SchemaSet { get; }
    internal XmlSchemaValidationFlags ValidationFlags { get; }
    internal XmlSchemaContentType CurrentContentType { get; }
    internal XmlSchemaContentProcessing CurrentProcessContents { get; }
    internal bool ProcessIdentityConstraints { get; }
    internal bool ReportValidationWarnings { get; }
    internal bool ProcessInlineSchema { get; }
    internal bool ProcessSchemaLocation { get; }
    internal bool ProcessSchemaHints { get; }
    public XmlSchemaValidator(XmlNameTable nameTable, XmlSchemaSet schemas, IXmlNamespaceResolver namespaceResolver, XmlSchemaValidationFlags validationFlags);
    private static XmlSchemaValidator();
    public void set_XmlResolver(XmlResolver value);
    public IXmlLineInfo get_LineInfoProvider();
    public void set_LineInfoProvider(IXmlLineInfo value);
    public Uri get_SourceUri();
    public void set_SourceUri(Uri value);
    public object get_ValidationEventSender();
    public void set_ValidationEventSender(object value);
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public void AddSchema(XmlSchema schema);
    public void Initialize();
    public void Initialize(XmlSchemaObject partialValidationType);
    public void ValidateElement(string localName, string namespaceUri, XmlSchemaInfo schemaInfo);
    public void ValidateElement(string localName, string namespaceUri, XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation);
    public object ValidateAttribute(string localName, string namespaceUri, string attributeValue, XmlSchemaInfo schemaInfo);
    public object ValidateAttribute(string localName, string namespaceUri, XmlValueGetter attributeValue, XmlSchemaInfo schemaInfo);
    public void GetUnspecifiedDefaultAttributes(ArrayList defaultAttributes);
    public void ValidateEndOfAttributes(XmlSchemaInfo schemaInfo);
    public void ValidateText(string elementValue);
    public void ValidateText(XmlValueGetter elementValue);
    public void ValidateWhitespace(string elementValue);
    public void ValidateWhitespace(XmlValueGetter elementValue);
    public object ValidateEndElement(XmlSchemaInfo schemaInfo);
    public object ValidateEndElement(XmlSchemaInfo schemaInfo, object typedValue);
    public void SkipToEndElement(XmlSchemaInfo schemaInfo);
    public void EndValidation();
    public XmlSchemaParticle[] GetExpectedParticles();
    public XmlSchemaAttribute[] GetExpectedAttributes();
    internal void GetUnspecifiedDefaultAttributes(ArrayList defaultAttributes, bool createNodeData);
    internal XmlSchemaSet get_SchemaSet();
    internal XmlSchemaValidationFlags get_ValidationFlags();
    internal XmlSchemaContentType get_CurrentContentType();
    internal XmlSchemaContentProcessing get_CurrentProcessContents();
    internal void SetDtdSchemaInfo(IDtdInfo dtdSchemaInfo);
    internal string GetConcatenatedValue();
    internal object CheckMixedValueConstraint(string elementValue);
    internal void RecompileSchemaSet();
    internal bool get_ProcessIdentityConstraints();
    internal bool get_ReportValidationWarnings();
    internal bool get_ProcessInlineSchema();
    internal bool get_ProcessSchemaLocation();
    internal bool get_ProcessSchemaHints();
    internal string GetDefaultAttributePrefix(string attributeNS);
    internal static void ElementValidationError(XmlQualifiedName name, ValidationState context, ValidationEventHandler eventHandler, object sender, string sourceUri, int lineNo, int linePos, XmlSchemaSet schemaSet);
    internal static void CompleteValidationError(ValidationState context, ValidationEventHandler eventHandler, object sender, string sourceUri, int lineNo, int linePos, XmlSchemaSet schemaSet);
    internal static string PrintExpectedElements(ArrayList expected, bool getParticles);
    internal static string QNameString(string localName, string ns);
    internal static string BuildElementName(XmlQualifiedName qname);
    internal static string BuildElementName(string localName, string ns);
    internal static void SendValidationEvent(ValidationEventHandler eventHandler, object sender, XmlSchemaValidationException e, XmlSeverityType severity);
}
public enum System.Xml.Schema.XmlSchemaValidity : Enum {
    public int value__;
    public static XmlSchemaValidity NotKnown;
    public static XmlSchemaValidity Valid;
    public static XmlSchemaValidity Invalid;
}
internal enum System.Xml.Schema.XmlSchemaWhiteSpace : Enum {
    public int value__;
    public static XmlSchemaWhiteSpace Preserve;
    public static XmlSchemaWhiteSpace Replace;
    public static XmlSchemaWhiteSpace Collapse;
}
public class System.Xml.Schema.XmlSchemaWhiteSpaceFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaXPath : XmlSchemaAnnotated {
    [XmlAttributeAttribute("xpath")]
[DefaultValueAttribute("")]
public string XPath { get; public set; }
    public string get_XPath();
    public void set_XPath(string value);
}
public enum System.Xml.Schema.XmlSeverityType : Enum {
    public int value__;
    public static XmlSeverityType Error;
    public static XmlSeverityType Warning;
}
internal class System.Xml.Schema.XmlStringConverter : XmlBaseConverter {
    protected XmlStringConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual string ToString(string value, IXmlNamespaceResolver nsResolver);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
public enum System.Xml.Schema.XmlTypeCode : Enum {
    public int value__;
    public static XmlTypeCode None;
    public static XmlTypeCode Item;
    public static XmlTypeCode Node;
    public static XmlTypeCode Document;
    public static XmlTypeCode Element;
    public static XmlTypeCode Attribute;
    public static XmlTypeCode Namespace;
    public static XmlTypeCode ProcessingInstruction;
    public static XmlTypeCode Comment;
    public static XmlTypeCode Text;
    public static XmlTypeCode AnyAtomicType;
    public static XmlTypeCode UntypedAtomic;
    public static XmlTypeCode String;
    public static XmlTypeCode Boolean;
    public static XmlTypeCode Decimal;
    public static XmlTypeCode Float;
    public static XmlTypeCode Double;
    public static XmlTypeCode Duration;
    public static XmlTypeCode DateTime;
    public static XmlTypeCode Time;
    public static XmlTypeCode Date;
    public static XmlTypeCode GYearMonth;
    public static XmlTypeCode GYear;
    public static XmlTypeCode GMonthDay;
    public static XmlTypeCode GDay;
    public static XmlTypeCode GMonth;
    public static XmlTypeCode HexBinary;
    public static XmlTypeCode Base64Binary;
    public static XmlTypeCode AnyUri;
    public static XmlTypeCode QName;
    public static XmlTypeCode Notation;
    public static XmlTypeCode NormalizedString;
    public static XmlTypeCode Token;
    public static XmlTypeCode Language;
    public static XmlTypeCode NmToken;
    public static XmlTypeCode Name;
    public static XmlTypeCode NCName;
    public static XmlTypeCode Id;
    public static XmlTypeCode Idref;
    public static XmlTypeCode Entity;
    public static XmlTypeCode Integer;
    public static XmlTypeCode NonPositiveInteger;
    public static XmlTypeCode NegativeInteger;
    public static XmlTypeCode Long;
    public static XmlTypeCode Int;
    public static XmlTypeCode Short;
    public static XmlTypeCode Byte;
    public static XmlTypeCode NonNegativeInteger;
    public static XmlTypeCode UnsignedLong;
    public static XmlTypeCode UnsignedInt;
    public static XmlTypeCode UnsignedShort;
    public static XmlTypeCode UnsignedByte;
    public static XmlTypeCode PositiveInteger;
    public static XmlTypeCode YearMonthDuration;
    public static XmlTypeCode DayTimeDuration;
}
internal class System.Xml.Schema.XmlUnionConverter : XmlBaseConverter {
    protected XmlUnionConverter(XmlSchemaType schemaType);
    public static XmlValueConverter Create(XmlSchemaType schemaType);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal class System.Xml.Schema.XmlUntypedConverter : XmlListConverter {
    public static XmlValueConverter Untyped;
    public static XmlValueConverter UntypedList;
    protected XmlUntypedConverter(XmlUntypedConverter atomicConverter, bool allowListToList);
    private static XmlUntypedConverter();
    public virtual bool ToBoolean(string value);
    public virtual bool ToBoolean(object value);
    public virtual DateTime ToDateTime(string value);
    public virtual DateTime ToDateTime(object value);
    public virtual DateTimeOffset ToDateTimeOffset(string value);
    public virtual DateTimeOffset ToDateTimeOffset(object value);
    public virtual decimal ToDecimal(string value);
    public virtual decimal ToDecimal(object value);
    public virtual double ToDouble(string value);
    public virtual double ToDouble(object value);
    public virtual int ToInt32(string value);
    public virtual int ToInt32(object value);
    public virtual long ToInt64(string value);
    public virtual long ToInt64(object value);
    public virtual float ToSingle(string value);
    public virtual float ToSingle(object value);
    public virtual string ToString(bool value);
    public virtual string ToString(DateTime value);
    public virtual string ToString(DateTimeOffset value);
    public virtual string ToString(decimal value);
    public virtual string ToString(double value);
    public virtual string ToString(int value);
    public virtual string ToString(long value);
    public virtual string ToString(float value);
    public virtual string ToString(string value, IXmlNamespaceResolver nsResolver);
    public virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(bool value, Type destinationType);
    public virtual object ChangeType(DateTime value, Type destinationType);
    public virtual object ChangeType(DateTimeOffset value, Type destinationType);
    public virtual object ChangeType(decimal value, Type destinationType);
    public virtual object ChangeType(double value, Type destinationType);
    public virtual object ChangeType(int value, Type destinationType);
    public virtual object ChangeType(long value, Type destinationType);
    public virtual object ChangeType(float value, Type destinationType);
    public virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
    protected virtual object ChangeListType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
internal abstract class System.Xml.Schema.XmlValueConverter : object {
    public abstract virtual bool ToBoolean(bool value);
    public abstract virtual bool ToBoolean(long value);
    public abstract virtual bool ToBoolean(int value);
    public abstract virtual bool ToBoolean(decimal value);
    public abstract virtual bool ToBoolean(float value);
    public abstract virtual bool ToBoolean(double value);
    public abstract virtual bool ToBoolean(DateTime value);
    public abstract virtual bool ToBoolean(DateTimeOffset value);
    public abstract virtual bool ToBoolean(string value);
    public abstract virtual bool ToBoolean(object value);
    public abstract virtual int ToInt32(bool value);
    public abstract virtual int ToInt32(int value);
    public abstract virtual int ToInt32(long value);
    public abstract virtual int ToInt32(decimal value);
    public abstract virtual int ToInt32(float value);
    public abstract virtual int ToInt32(double value);
    public abstract virtual int ToInt32(DateTime value);
    public abstract virtual int ToInt32(DateTimeOffset value);
    public abstract virtual int ToInt32(string value);
    public abstract virtual int ToInt32(object value);
    public abstract virtual long ToInt64(bool value);
    public abstract virtual long ToInt64(int value);
    public abstract virtual long ToInt64(long value);
    public abstract virtual long ToInt64(decimal value);
    public abstract virtual long ToInt64(float value);
    public abstract virtual long ToInt64(double value);
    public abstract virtual long ToInt64(DateTime value);
    public abstract virtual long ToInt64(DateTimeOffset value);
    public abstract virtual long ToInt64(string value);
    public abstract virtual long ToInt64(object value);
    public abstract virtual decimal ToDecimal(bool value);
    public abstract virtual decimal ToDecimal(int value);
    public abstract virtual decimal ToDecimal(long value);
    public abstract virtual decimal ToDecimal(decimal value);
    public abstract virtual decimal ToDecimal(float value);
    public abstract virtual decimal ToDecimal(double value);
    public abstract virtual decimal ToDecimal(DateTime value);
    public abstract virtual decimal ToDecimal(DateTimeOffset value);
    public abstract virtual decimal ToDecimal(string value);
    public abstract virtual decimal ToDecimal(object value);
    public abstract virtual double ToDouble(bool value);
    public abstract virtual double ToDouble(int value);
    public abstract virtual double ToDouble(long value);
    public abstract virtual double ToDouble(decimal value);
    public abstract virtual double ToDouble(float value);
    public abstract virtual double ToDouble(double value);
    public abstract virtual double ToDouble(DateTime value);
    public abstract virtual double ToDouble(DateTimeOffset value);
    public abstract virtual double ToDouble(string value);
    public abstract virtual double ToDouble(object value);
    public abstract virtual float ToSingle(bool value);
    public abstract virtual float ToSingle(int value);
    public abstract virtual float ToSingle(long value);
    public abstract virtual float ToSingle(decimal value);
    public abstract virtual float ToSingle(float value);
    public abstract virtual float ToSingle(double value);
    public abstract virtual float ToSingle(DateTime value);
    public abstract virtual float ToSingle(DateTimeOffset value);
    public abstract virtual float ToSingle(string value);
    public abstract virtual float ToSingle(object value);
    public abstract virtual DateTime ToDateTime(bool value);
    public abstract virtual DateTime ToDateTime(int value);
    public abstract virtual DateTime ToDateTime(long value);
    public abstract virtual DateTime ToDateTime(decimal value);
    public abstract virtual DateTime ToDateTime(float value);
    public abstract virtual DateTime ToDateTime(double value);
    public abstract virtual DateTime ToDateTime(DateTime value);
    public abstract virtual DateTime ToDateTime(DateTimeOffset value);
    public abstract virtual DateTime ToDateTime(string value);
    public abstract virtual DateTime ToDateTime(object value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(bool value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(int value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(long value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(decimal value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(float value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(double value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(DateTime value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(DateTimeOffset value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(string value);
    public abstract virtual DateTimeOffset ToDateTimeOffset(object value);
    public abstract virtual string ToString(bool value);
    public abstract virtual string ToString(int value);
    public abstract virtual string ToString(long value);
    public abstract virtual string ToString(decimal value);
    public abstract virtual string ToString(float value);
    public abstract virtual string ToString(double value);
    public abstract virtual string ToString(DateTime value);
    public abstract virtual string ToString(DateTimeOffset value);
    public abstract virtual string ToString(string value);
    public abstract virtual string ToString(string value, IXmlNamespaceResolver nsResolver);
    public abstract virtual string ToString(object value);
    public abstract virtual string ToString(object value, IXmlNamespaceResolver nsResolver);
    public abstract virtual object ChangeType(bool value, Type destinationType);
    public abstract virtual object ChangeType(int value, Type destinationType);
    public abstract virtual object ChangeType(long value, Type destinationType);
    public abstract virtual object ChangeType(decimal value, Type destinationType);
    public abstract virtual object ChangeType(float value, Type destinationType);
    public abstract virtual object ChangeType(double value, Type destinationType);
    public abstract virtual object ChangeType(DateTime value, Type destinationType);
    public abstract virtual object ChangeType(DateTimeOffset value, Type destinationType);
    public abstract virtual object ChangeType(string value, Type destinationType);
    public abstract virtual object ChangeType(string value, Type destinationType, IXmlNamespaceResolver nsResolver);
    public abstract virtual object ChangeType(object value, Type destinationType);
    public abstract virtual object ChangeType(object value, Type destinationType, IXmlNamespaceResolver nsResolver);
}
public class System.Xml.Schema.XmlValueGetter : MulticastDelegate {
    public XmlValueGetter(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class System.Xml.Schema.XsdBuilder : SchemaBuilder {
    internal XsdBuilder(XmlReader reader, XmlNamespaceManager curmgr, XmlSchema schema, XmlNameTable nameTable, SchemaNames schemaNames, ValidationEventHandler eventhandler);
    private static XsdBuilder();
    internal virtual bool ProcessElement(string prefix, string name, string ns);
    internal virtual void ProcessAttribute(string prefix, string name, string ns, string value);
    internal virtual bool IsContentParsed();
    internal virtual void ProcessMarkup(XmlNode[] markup);
    internal virtual void ProcessCData(string value);
    internal virtual void StartChildren();
    internal virtual void EndChildren();
}
internal class System.Xml.Schema.XsdDateTime : ValueType {
    private DateTime dt;
    private UInt32 extra;
    private static UInt32 TypeMask;
    private static UInt32 KindMask;
    private static UInt32 ZoneHourMask;
    private static UInt32 ZoneMinuteMask;
    private static int TypeShift;
    private static int KindShift;
    private static int ZoneHourShift;
    private static short maxFractionDigits;
    public XmlTypeCode TypeCode { get; }
    public DateTimeKind Kind { get; }
    public int Year { get; }
    public int Month { get; }
    public int Day { get; }
    public int Hour { get; }
    public int Minute { get; }
    public int Second { get; }
    public int Fraction { get; }
    public int ZoneHour { get; }
    public int ZoneMinute { get; }
    public XsdDateTime(string text);
    public XsdDateTime(string text, XsdDateTimeFlags kinds);
    public XsdDateTime(DateTime dateTime, XsdDateTimeFlags kinds);
    public XsdDateTime(DateTimeOffset dateTimeOffset);
    public XsdDateTime(DateTimeOffset dateTimeOffset, XsdDateTimeFlags kinds);
    private static XsdDateTime();
    internal static bool TryParse(string text, XsdDateTimeFlags kinds, XsdDateTime& result);
    public XmlTypeCode get_TypeCode();
    public DateTimeKind get_Kind();
    public int get_Year();
    public int get_Month();
    public int get_Day();
    public int get_Hour();
    public int get_Minute();
    public int get_Second();
    public int get_Fraction();
    public int get_ZoneHour();
    public int get_ZoneMinute();
    public DateTime ToZulu();
    public static DateTime op_Implicit(XsdDateTime xdt);
    public static DateTimeOffset op_Implicit(XsdDateTime xdt);
    public static int Compare(XsdDateTime left, XsdDateTime right);
    public int CompareTo(object value);
    public virtual string ToString();
}
[FlagsAttribute]
internal enum System.Xml.Schema.XsdDateTimeFlags : Enum {
    public int value__;
    public static XsdDateTimeFlags DateTime;
    public static XsdDateTimeFlags Time;
    public static XsdDateTimeFlags Date;
    public static XsdDateTimeFlags GYearMonth;
    public static XsdDateTimeFlags GYear;
    public static XsdDateTimeFlags GMonthDay;
    public static XsdDateTimeFlags GDay;
    public static XsdDateTimeFlags GMonth;
    public static XsdDateTimeFlags XdrDateTimeNoTz;
    public static XsdDateTimeFlags XdrDateTime;
    public static XsdDateTimeFlags XdrTimeNoTz;
    public static XsdDateTimeFlags AllXsd;
}
internal class System.Xml.Schema.XsdDuration : ValueType {
    private int years;
    private int months;
    private int days;
    private int hours;
    private int minutes;
    private int seconds;
    private UInt32 nanoseconds;
    private static UInt32 NegativeBit;
    public bool IsNegative { get; }
    public int Years { get; }
    public int Months { get; }
    public int Days { get; }
    public int Hours { get; }
    public int Minutes { get; }
    public int Seconds { get; }
    public int Nanoseconds { get; }
    public int Microseconds { get; }
    public int Milliseconds { get; }
    public XsdDuration(bool isNegative, int years, int months, int days, int hours, int minutes, int seconds, int nanoseconds);
    public XsdDuration(TimeSpan timeSpan);
    public XsdDuration(TimeSpan timeSpan, DurationType durationType);
    public XsdDuration(string s);
    public XsdDuration(string s, DurationType durationType);
    public bool get_IsNegative();
    public int get_Years();
    public int get_Months();
    public int get_Days();
    public int get_Hours();
    public int get_Minutes();
    public int get_Seconds();
    public int get_Nanoseconds();
    public int get_Microseconds();
    public int get_Milliseconds();
    public XsdDuration Normalize();
    public TimeSpan ToTimeSpan();
    public TimeSpan ToTimeSpan(DurationType durationType);
    internal Exception TryToTimeSpan(TimeSpan& result);
    internal Exception TryToTimeSpan(DurationType durationType, TimeSpan& result);
    public virtual string ToString();
    internal string ToString(DurationType durationType);
    internal static Exception TryParse(string s, XsdDuration& result);
    internal static Exception TryParse(string s, DurationType durationType, XsdDuration& result);
}
internal class System.Xml.Schema.XsdSimpleValue : object {
    public XmlSchemaSimpleType XmlType { get; }
    public object TypedValue { get; }
    public XsdSimpleValue(XmlSchemaSimpleType st, object value);
    public XmlSchemaSimpleType get_XmlType();
    public object get_TypedValue();
}
internal class System.Xml.Schema.XsdValidator : BaseValidator {
    unknown ValidationState Context {public set; }
    public static XmlSchemaDatatype DtQName { get; }
    public bool PreserveWhitespace { get; }
    internal XsdValidator(BaseValidator validator);
    internal XsdValidator(XmlValidatingReaderImpl reader, XmlSchemaCollection schemaCollection, IValidationEventHandling eventHandling);
    private static XsdValidator();
    public virtual void Validate();
    public virtual void CompleteValidation();
    public void set_Context(ValidationState value);
    public static XmlSchemaDatatype get_DtQName();
    public virtual bool get_PreserveWhitespace();
    internal void AddID(string name, object node);
    public virtual object FindId(string name);
    public bool IsXSDRoot(string localName, string ns);
}
internal class System.Xml.SecureStringHasher : object {
    public sealed virtual bool Equals(string x, string y);
    [SecuritySafeCriticalAttribute]
public sealed virtual int GetHashCode(string key);
}
internal abstract class System.Xml.Serialization.Accessor : object {
    internal TypeMapping Mapping { get; internal set; }
    internal object Default { get; internal set; }
    internal bool HasDefault { get; }
    internal string Name { get; internal set; }
    internal bool Any { get; internal set; }
    internal string AnyNamespaces { get; internal set; }
    internal string Namespace { get; internal set; }
    internal XmlSchemaForm Form { get; internal set; }
    internal bool IsFixed { get; internal set; }
    internal bool IsOptional { get; internal set; }
    internal bool IsTopLevelInSchema { get; internal set; }
    internal TypeMapping get_Mapping();
    internal void set_Mapping(TypeMapping value);
    internal object get_Default();
    internal void set_Default(object value);
    internal bool get_HasDefault();
    internal virtual string get_Name();
    internal virtual void set_Name(string value);
    internal bool get_Any();
    internal void set_Any(bool value);
    internal string get_AnyNamespaces();
    internal void set_AnyNamespaces(string value);
    internal string get_Namespace();
    internal void set_Namespace(string value);
    internal XmlSchemaForm get_Form();
    internal void set_Form(XmlSchemaForm value);
    internal bool get_IsFixed();
    internal void set_IsFixed(bool value);
    internal bool get_IsOptional();
    internal void set_IsOptional(bool value);
    internal bool get_IsTopLevelInSchema();
    internal void set_IsTopLevelInSchema(bool value);
    internal static string EscapeName(string name);
    internal static string EscapeQName(string name);
    internal static string UnescapeName(string name);
    internal string ToString(string defaultNs);
}
internal abstract class System.Xml.Serialization.AccessorMapping : Mapping {
    internal bool IsAttribute { get; }
    internal bool IsText { get; }
    internal bool IsParticle { get; }
    internal TypeDesc TypeDesc { get; internal set; }
    internal AttributeAccessor Attribute { get; internal set; }
    internal ElementAccessor[] Elements { get; internal set; }
    internal ElementAccessor[] ElementsSortedByDerivation { get; }
    internal TextAccessor Text { get; internal set; }
    internal ChoiceIdentifierAccessor ChoiceIdentifier { get; internal set; }
    internal XmlnsAccessor Xmlns { get; internal set; }
    internal bool Ignore { get; internal set; }
    internal Accessor Accessor { get; }
    internal bool IsNeedNullable { get; }
    protected AccessorMapping(AccessorMapping mapping);
    internal bool get_IsAttribute();
    internal bool get_IsText();
    internal bool get_IsParticle();
    internal TypeDesc get_TypeDesc();
    internal void set_TypeDesc(TypeDesc value);
    internal AttributeAccessor get_Attribute();
    internal void set_Attribute(AttributeAccessor value);
    internal ElementAccessor[] get_Elements();
    internal void set_Elements(ElementAccessor[] value);
    internal static void SortMostToLeastDerived(ElementAccessor[] elements);
    internal ElementAccessor[] get_ElementsSortedByDerivation();
    internal TextAccessor get_Text();
    internal void set_Text(TextAccessor value);
    internal ChoiceIdentifierAccessor get_ChoiceIdentifier();
    internal void set_ChoiceIdentifier(ChoiceIdentifierAccessor value);
    internal XmlnsAccessor get_Xmlns();
    internal void set_Xmlns(XmlnsAccessor value);
    internal bool get_Ignore();
    internal void set_Ignore(bool value);
    internal Accessor get_Accessor();
    internal bool get_IsNeedNullable();
    internal static bool ElementsMatch(ElementAccessor[] a, ElementAccessor[] b);
    internal bool Match(AccessorMapping mapping);
}
internal class System.Xml.Serialization.Advanced.MappedTypeDesc : object {
    internal SchemaImporterExtension Extension { get; }
    internal string Name { get; }
    internal StringCollection ReferencedAssemblies { get; }
    internal MappedTypeDesc(string clrType, string name, string ns, XmlSchemaType xsdType, XmlSchemaObject context, SchemaImporterExtension extension, CodeNamespace code, StringCollection references);
    internal SchemaImporterExtension get_Extension();
    internal string get_Name();
    internal StringCollection get_ReferencedAssemblies();
    internal CodeTypeDeclaration ExportTypeDefinition(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit);
}
public abstract class System.Xml.Serialization.Advanced.SchemaImporterExtension : object {
    public virtual string ImportSchemaType(string name, string ns, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    public virtual string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    public virtual string ImportAnyElement(XmlSchemaAny any, bool mixed, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    public virtual CodeExpression ImportDefaultValue(string value, string type);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection : CollectionBase {
    internal Hashtable Names { get; }
    public SchemaImporterExtension Item { get; public set; }
    internal Hashtable get_Names();
    public int Add(SchemaImporterExtension extension);
    public int Add(string name, Type type);
    public void Remove(string name);
    public void Clear();
    internal SchemaImporterExtensionCollection Clone();
    public SchemaImporterExtension get_Item(int index);
    public void set_Item(int index, SchemaImporterExtension value);
    internal int Add(string name, SchemaImporterExtension extension);
    public void Insert(int index, SchemaImporterExtension extension);
    public int IndexOf(SchemaImporterExtension extension);
    public bool Contains(SchemaImporterExtension extension);
    public void Remove(SchemaImporterExtension extension);
    public void CopyTo(SchemaImporterExtension[] array, int index);
}
internal static class System.Xml.Serialization.AppSettings : object {
    internal static Nullable`1<bool> UseLegacySerializerGeneration { get; }
    private static AppSettings();
    internal static Nullable`1<bool> get_UseLegacySerializerGeneration();
}
internal class System.Xml.Serialization.ArgBuilder : object {
    internal string Name;
    internal int Index;
    internal Type ArgType;
    internal ArgBuilder(string name, int index, Type argType);
}
internal class System.Xml.Serialization.ArrayMapping : TypeMapping {
    internal ElementAccessor[] Elements { get; internal set; }
    internal ElementAccessor[] ElementsSortedByDerivation { get; }
    internal ArrayMapping Next { get; internal set; }
    internal StructMapping TopLevelMapping { get; internal set; }
    internal ElementAccessor[] get_Elements();
    internal void set_Elements(ElementAccessor[] value);
    internal ElementAccessor[] get_ElementsSortedByDerivation();
    internal ArrayMapping get_Next();
    internal void set_Next(ArrayMapping value);
    internal StructMapping get_TopLevelMapping();
    internal void set_TopLevelMapping(StructMapping value);
}
internal class System.Xml.Serialization.ArrayModel : TypeModel {
    internal TypeModel Element { get; }
    internal ArrayModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal TypeModel get_Element();
}
internal class System.Xml.Serialization.AttributeAccessor : Accessor {
    internal bool IsSpecialXmlNamespace { get; }
    internal bool IsList { get; internal set; }
    internal bool get_IsSpecialXmlNamespace();
    internal bool get_IsList();
    internal void set_IsList(bool value);
    internal void CheckSpecial();
}
internal class System.Xml.Serialization.CaseInsensitiveKeyComparer : CaseInsensitiveComparer {
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object x, object y);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
}
internal class System.Xml.Serialization.ChoiceIdentifierAccessor : Accessor {
    internal string MemberName { get; internal set; }
    internal String[] MemberIds { get; internal set; }
    internal MemberInfo MemberInfo { get; internal set; }
    internal string get_MemberName();
    internal void set_MemberName(string value);
    internal String[] get_MemberIds();
    internal void set_MemberIds(String[] value);
    internal MemberInfo get_MemberInfo();
    internal void set_MemberInfo(MemberInfo value);
}
internal enum System.Xml.Serialization.Cmp : Enum {
    public int value__;
    public static Cmp LessThan;
    public static Cmp EqualTo;
    public static Cmp LessThanOrEqualTo;
    public static Cmp GreaterThan;
    public static Cmp NotEqualTo;
    public static Cmp GreaterThanOrEqualTo;
}
public abstract class System.Xml.Serialization.CodeExporter : object {
    internal CodeCompileUnit CodeCompileUnit { get; }
    internal CodeNamespace CodeNamespace { get; }
    internal CodeDomProvider CodeProvider { get; }
    internal Hashtable ExportedClasses { get; }
    internal Hashtable ExportedMappings { get; }
    internal bool GenerateProperties { get; }
    internal CodeAttributeDeclaration GeneratedCodeAttribute { get; }
    public CodeAttributeDeclarationCollection IncludeMetadata { get; }
    internal TypeScope Scope { get; }
    internal static CodeMemberMethod RaisePropertyChangedEventMethod { get; }
    internal static CodeMemberEvent PropertyChangedEvent { get; }
    internal CodeExporter(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeDomProvider codeProvider, CodeGenerationOptions options, Hashtable exportedMappings);
    internal CodeCompileUnit get_CodeCompileUnit();
    internal CodeNamespace get_CodeNamespace();
    internal CodeDomProvider get_CodeProvider();
    internal Hashtable get_ExportedClasses();
    internal Hashtable get_ExportedMappings();
    internal bool get_GenerateProperties();
    internal CodeAttributeDeclaration get_GeneratedCodeAttribute();
    internal static CodeAttributeDeclaration FindAttributeDeclaration(Type type, CodeAttributeDeclarationCollection metadata);
    public CodeAttributeDeclarationCollection get_IncludeMetadata();
    internal TypeScope get_Scope();
    internal void CheckScope(TypeScope scope);
    internal abstract virtual void ExportDerivedStructs(StructMapping mapping);
    internal abstract virtual void EnsureTypesExported(Accessor[] accessors, string ns);
    internal static void AddWarningComment(CodeCommentStatementCollection comments, string text);
    internal void ExportRoot(StructMapping mapping, Type includeType);
    internal CodeTypeDeclaration ExportEnum(EnumMapping mapping, Type type);
    internal void AddTypeMetadata(CodeAttributeDeclarationCollection metadata, Type type, string defaultName, string name, string ns, bool includeInSchema);
    internal static void AddIncludeMetadata(CodeAttributeDeclarationCollection metadata, StructMapping mapping, Type type);
    internal static void ExportConstant(CodeTypeDeclaration codeClass, ConstantMapping constant, Type type, bool init, long enumValue);
    internal static object PromoteType(Type type, object value);
    internal CodeMemberProperty CreatePropertyDeclaration(CodeMemberField field, string name, string typeName);
    internal static string MakeFieldName(string name);
    internal void AddPropertyChangedNotifier(CodeTypeDeclaration codeClass);
    internal static CodeMemberMethod get_RaisePropertyChangedEventMethod();
    internal static CodeMemberEvent get_PropertyChangedEvent();
}
[FlagsAttribute]
public enum System.Xml.Serialization.CodeGenerationOptions : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static CodeGenerationOptions None;
    [XmlEnumAttribute("properties")]
public static CodeGenerationOptions GenerateProperties;
    [XmlEnumAttribute("newAsync")]
public static CodeGenerationOptions GenerateNewAsync;
    [XmlEnumAttribute("oldAsync")]
public static CodeGenerationOptions GenerateOldAsync;
    [XmlEnumAttribute("order")]
public static CodeGenerationOptions GenerateOrder;
    [XmlEnumAttribute("enableDataBinding")]
public static CodeGenerationOptions EnableDataBinding;
}
internal class System.Xml.Serialization.CodeGenerator : object {
    internal static BindingFlags InstancePublicBindingFlags;
    internal static BindingFlags InstanceBindingFlags;
    internal static BindingFlags StaticBindingFlags;
    internal static MethodAttributes PublicMethodAttributes;
    internal static MethodAttributes PublicOverrideMethodAttributes;
    internal static MethodAttributes ProtectedOverrideMethodAttributes;
    internal static MethodAttributes PrivateMethodAttributes;
    internal static Type[] EmptyTypeArray;
    internal static String[] EmptyStringArray;
    internal LocalBuilder retLocal;
    internal Label retLabel;
    internal MethodBuilder MethodBuilder { get; }
    internal LocalBuilder ReturnLocal { get; }
    internal Label ReturnLabel { get; }
    internal static string TempFilesLocation { get; internal set; }
    internal CodeGenerator(TypeBuilder typeBuilder);
    private static CodeGenerator();
    internal static bool IsValidLanguageIndependentIdentifier(string ident);
    internal static void ValidateIdentifiers(CodeObject e);
    internal static bool IsNullableGenericType(Type type);
    internal static void AssertHasInterface(Type type, Type iType);
    internal void BeginMethod(Type returnType, string methodName, Type[] argTypes, String[] argNames, MethodAttributes methodAttributes);
    internal void BeginMethod(Type returnType, MethodBuilderInfo methodBuilderInfo, Type[] argTypes, String[] argNames, MethodAttributes methodAttributes);
    internal MethodBuilder EndMethod();
    internal MethodBuilder get_MethodBuilder();
    internal static Exception NotSupported(string msg);
    internal ArgBuilder GetArg(string name);
    internal LocalBuilder GetLocal(string name);
    internal LocalBuilder get_ReturnLocal();
    internal Label get_ReturnLabel();
    internal LocalBuilder GetTempLocal(Type type);
    internal Type GetVariableType(object var);
    internal object GetVariable(string name);
    internal bool TryGetVariable(string name, Object& variable);
    internal void EnterScope();
    internal void ExitScope();
    internal LocalBuilder DeclareLocal(Type type, string name);
    internal LocalBuilder DeclareOrGetLocal(Type type, string name);
    internal object For(LocalBuilder local, object start, object end);
    internal void EndFor();
    internal void If();
    internal void IfNot();
    internal void If(Cmp cmpOp);
    internal void If(object value1, Cmp cmpOp, object value2);
    internal void Else();
    internal void EndIf();
    internal void BeginExceptionBlock();
    internal void BeginCatchBlock(Type exception);
    internal void EndExceptionBlock();
    internal void Leave();
    internal void Call(MethodInfo methodInfo);
    internal void Call(ConstructorInfo ctor);
    internal void New(ConstructorInfo constructorInfo);
    internal void InitObj(Type valueType);
    internal void NewArray(Type elementType, object len);
    internal void LoadArrayElement(object obj, object arrayIndex);
    internal void StoreArrayElement(object obj, object arrayIndex, object value);
    internal Type LoadMember(object obj, MemberInfo memberInfo);
    internal Type LoadMember(MemberInfo memberInfo);
    internal Type LoadMemberAddress(MemberInfo memberInfo);
    internal void StoreMember(MemberInfo memberInfo);
    internal void Load(object obj);
    internal void LoadAddress(object obj);
    internal void ConvertAddress(Type source, Type target);
    internal void ConvertValue(Type source, Type target);
    internal void Castclass(Type target);
    internal void Box(Type type);
    internal void Unbox(Type type);
    internal void Ldobj(Type type);
    internal void Stobj(Type type);
    internal void Ceq();
    internal void Clt();
    internal void Cne();
    internal void Ble(Label label);
    internal void Throw();
    internal void Ldtoken(Type t);
    internal void Ldc(object o);
    internal void Ldc(bool boolVar);
    internal void Ldc(int intVar);
    internal void Ldc(long l);
    internal void Ldc(float f);
    internal void Ldc(double d);
    internal void Ldstr(string strVar);
    internal void LdlocAddress(LocalBuilder localBuilder);
    internal void Ldloc(LocalBuilder localBuilder);
    internal void Ldloc(string name);
    internal void Stloc(Type type, string name);
    internal void Stloc(LocalBuilder local);
    internal void Ldloc(Type type, string name);
    internal void Ldloca(LocalBuilder localBuilder);
    internal void LdargAddress(ArgBuilder argBuilder);
    internal void Ldarg(string arg);
    internal void Ldarg(ArgBuilder arg);
    internal void Ldarg(int slot);
    internal void Ldarga(ArgBuilder argBuilder);
    internal void Ldarga(int slot);
    internal void Ldlen();
    internal void Ldelem(Type arrayElementType);
    internal void Ldelema(Type arrayElementType);
    internal void Stelem(Type arrayElementType);
    internal Label DefineLabel();
    internal void MarkLabel(Label label);
    internal void Nop();
    internal void Add();
    internal void Ret();
    internal void Br(Label label);
    internal void Br_S(Label label);
    internal void Blt(Label label);
    internal void Brfalse(Label label);
    internal void Brtrue(Label label);
    internal void Pop();
    internal void Dup();
    internal void Ldftn(MethodInfo methodInfo);
    internal static AssemblyBuilder CreateAssemblyBuilder(AppDomain appDomain, string name);
    internal static string get_TempFilesLocation();
    internal static void set_TempFilesLocation(string value);
    internal static ModuleBuilder CreateModuleBuilder(AssemblyBuilder assemblyBuilder, string name);
    internal static TypeBuilder CreateTypeBuilder(ModuleBuilder moduleBuilder, string name, TypeAttributes attributes, Type parent, Type[] interfaces);
    internal void InitElseIf();
    internal void InitIf();
    internal void AndIf(Cmp cmpOp);
    internal void AndIf();
    internal void IsInst(Type type);
    internal void Beq(Label label);
    internal void Bne(Label label);
    internal void GotoMethodEnd();
    internal void WhileBegin();
    internal void WhileEnd();
    internal void WhileBreak();
    internal void WhileContinue();
    internal void WhileBeginCondition();
    internal void WhileEndCondition();
}
internal class System.Xml.Serialization.CodeGeneratorConversionException : Exception {
    public CodeGeneratorConversionException(Type sourceType, Type targetType, bool isAddress, string reason);
}
public class System.Xml.Serialization.CodeIdentifier : object {
    internal static CodeDomProvider csharp;
    internal static int MaxIdentifierLength;
    private static CodeIdentifier();
    public static string MakePascal(string identifier);
    public static string MakeCamel(string identifier);
    public static string MakeValid(string identifier);
    internal static string MakeValidInternal(string identifier);
    internal static void CheckValidIdentifier(string ident);
    internal static string GetCSharpName(string name);
    internal static string GetCSharpName(Type t);
}
public class System.Xml.Serialization.CodeIdentifiers : object {
    public bool UseCamelCasing { get; public set; }
    public CodeIdentifiers(bool caseSensitive);
    public void Clear();
    public bool get_UseCamelCasing();
    public void set_UseCamelCasing(bool value);
    public string MakeRightCase(string identifier);
    public string MakeUnique(string identifier);
    public void AddReserved(string identifier);
    public void RemoveReserved(string identifier);
    public string AddUnique(string identifier, object value);
    public bool IsInUse(string identifier);
    public void Add(string identifier, object value);
    public void Remove(string identifier);
    public object ToArray(Type type);
    internal CodeIdentifiers Clone();
}
internal class System.Xml.Serialization.Compiler : object {
    protected String[] Imports { get; }
    internal TextWriter Source { get; }
    protected String[] get_Imports();
    internal void AddImport(Type type, Hashtable types);
    internal void AddImport(Assembly assembly);
    internal TextWriter get_Source();
    internal void Close();
    internal static string GetTempAssemblyPath(string baseDir, Assembly assembly, string defaultNamespace);
    internal static string GetTempAssemblyName(AssemblyName parent, string ns);
    internal Assembly Compile(Assembly parent, string ns, XmlSerializerCompilerParameters xmlParameters, Evidence evidence);
    internal static string GetCurrentUser();
}
internal static class System.Xml.Serialization.Configuration.ConfigurationStrings : object {
    internal static string Name;
    internal static string SchemaImporterExtensionsSectionName;
    internal static string DateTimeSerializationSectionName;
    internal static string XmlSerializerSectionName;
    internal static string SectionGroupName;
    internal static string SqlTypesSchemaImporterChar;
    internal static string SqlTypesSchemaImporterNChar;
    internal static string SqlTypesSchemaImporterVarChar;
    internal static string SqlTypesSchemaImporterNVarChar;
    internal static string SqlTypesSchemaImporterText;
    internal static string SqlTypesSchemaImporterNText;
    internal static string SqlTypesSchemaImporterVarBinary;
    internal static string SqlTypesSchemaImporterBinary;
    internal static string SqlTypesSchemaImporterImage;
    internal static string SqlTypesSchemaImporterDecimal;
    internal static string SqlTypesSchemaImporterNumeric;
    internal static string SqlTypesSchemaImporterBigInt;
    internal static string SqlTypesSchemaImporterInt;
    internal static string SqlTypesSchemaImporterSmallInt;
    internal static string SqlTypesSchemaImporterTinyInt;
    internal static string SqlTypesSchemaImporterBit;
    internal static string SqlTypesSchemaImporterFloat;
    internal static string SqlTypesSchemaImporterReal;
    internal static string SqlTypesSchemaImporterDateTime;
    internal static string SqlTypesSchemaImporterSmallDateTime;
    internal static string SqlTypesSchemaImporterMoney;
    internal static string SqlTypesSchemaImporterSmallMoney;
    internal static string SqlTypesSchemaImporterUniqueIdentifier;
    internal static string Type;
    internal static string Mode;
    internal static string CheckDeserializeAdvances;
    internal static string TempFilesLocation;
    internal static string UseLegacySerializerGeneration;
    internal static string SchemaImporterExtensionsSectionPath { get; }
    internal static string DateTimeSerializationSectionPath { get; }
    internal static string XmlSerializerSectionPath { get; }
    internal static string get_SchemaImporterExtensionsSectionPath();
    internal static string get_DateTimeSerializationSectionPath();
    internal static string get_XmlSerializerSectionPath();
}
public class System.Xml.Serialization.Configuration.DateTimeSerializationSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("mode")]
public DateTimeSerializationMode Mode { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public DateTimeSerializationMode get_Mode();
    public void set_Mode(DateTimeSerializationMode value);
}
public class System.Xml.Serialization.Configuration.RootedPathValidator : ConfigurationValidatorBase {
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
public class System.Xml.Serialization.Configuration.SchemaImporterExtensionElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("type")]
[TypeConverterAttribute("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement/TypeTypeConverter")]
public Type Type { get; public set; }
    internal string Key { get; }
    public SchemaImporterExtensionElement(string name, string type);
    public SchemaImporterExtensionElement(string name, Type type);
    public string get_Name();
    public void set_Name(string value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    public Type get_Type();
    public void set_Type(Type value);
    internal string get_Key();
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")]
public class System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection : ConfigurationElementCollection {
    public SchemaImporterExtensionElement Item { get; public set; }
    public SchemaImporterExtensionElement Item { get; public set; }
    public SchemaImporterExtensionElement get_Item(int index);
    public void set_Item(int index, SchemaImporterExtensionElement value);
    public SchemaImporterExtensionElement get_Item(string name);
    public void set_Item(string name, SchemaImporterExtensionElement value);
    public void Add(SchemaImporterExtensionElement element);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public int IndexOf(SchemaImporterExtensionElement element);
    public void Remove(SchemaImporterExtensionElement element);
    public void Remove(string name);
    public void RemoveAt(int index);
}
public class System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public SchemaImporterExtensionElementCollection SchemaImporterExtensions { get; }
    internal SchemaImporterExtensionCollection SchemaImporterExtensionsInternal { get; }
    protected virtual void InitializeDefault();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public SchemaImporterExtensionElementCollection get_SchemaImporterExtensions();
    internal SchemaImporterExtensionCollection get_SchemaImporterExtensionsInternal();
}
public class System.Xml.Serialization.Configuration.SerializationSectionGroup : ConfigurationSectionGroup {
    [ConfigurationPropertyAttribute("schemaImporterExtensions")]
public SchemaImporterExtensionsSection SchemaImporterExtensions { get; }
    [ConfigurationPropertyAttribute("dateTimeSerialization")]
public DateTimeSerializationSection DateTimeSerialization { get; }
    public XmlSerializerSection XmlSerializer { get; }
    public SchemaImporterExtensionsSection get_SchemaImporterExtensions();
    public DateTimeSerializationSection get_DateTimeSerialization();
    public XmlSerializerSection get_XmlSerializer();
}
public class System.Xml.Serialization.Configuration.XmlSerializerSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("checkDeserializeAdvances")]
public bool CheckDeserializeAdvances { get; public set; }
    [ConfigurationPropertyAttribute("tempFilesLocation")]
public string TempFilesLocation { get; public set; }
    [ConfigurationPropertyAttribute("useLegacySerializerGeneration")]
public bool UseLegacySerializerGeneration { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_CheckDeserializeAdvances();
    public void set_CheckDeserializeAdvances(bool value);
    public string get_TempFilesLocation();
    public void set_TempFilesLocation(string value);
    public bool get_UseLegacySerializerGeneration();
    public void set_UseLegacySerializerGeneration(bool value);
}
internal class System.Xml.Serialization.ConstantMapping : Mapping {
    internal string XmlName { get; internal set; }
    internal string Name { get; internal set; }
    internal long Value { get; internal set; }
    internal string get_XmlName();
    internal void set_XmlName(string value);
    internal string get_Name();
    internal void set_Name(string value);
    internal long get_Value();
    internal void set_Value(long value);
}
internal class System.Xml.Serialization.ConstantModel : object {
    internal string Name { get; }
    internal long Value { get; }
    internal FieldInfo FieldInfo { get; }
    internal ConstantModel(FieldInfo fieldInfo, long value);
    internal string get_Name();
    internal long get_Value();
    internal FieldInfo get_FieldInfo();
}
internal static class System.Xml.Serialization.DynamicAssemblies : object {
    private static DynamicAssemblies();
    internal static bool IsTypeDynamic(Type type);
    internal static bool IsTypeDynamic(Type[] arguments);
    internal static void Add(Assembly a);
    internal static Assembly Get(string fullName);
    internal static string GetName(Assembly a);
}
internal class System.Xml.Serialization.ElementAccessor : Accessor {
    internal bool IsSoap { get; internal set; }
    internal bool IsNullable { get; internal set; }
    internal bool IsUnbounded { get; internal set; }
    internal bool get_IsSoap();
    internal void set_IsSoap(bool value);
    internal bool get_IsNullable();
    internal void set_IsNullable(bool value);
    internal bool get_IsUnbounded();
    internal void set_IsUnbounded(bool value);
    internal ElementAccessor Clone();
}
internal class System.Xml.Serialization.EnumMapping : PrimitiveMapping {
    internal bool IsFlags { get; internal set; }
    internal ConstantMapping[] Constants { get; internal set; }
    internal bool get_IsFlags();
    internal void set_IsFlags(bool value);
    internal ConstantMapping[] get_Constants();
    internal void set_Constants(ConstantMapping[] value);
}
internal class System.Xml.Serialization.EnumModel : TypeModel {
    internal ConstantModel[] Constants { get; }
    internal EnumModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal ConstantModel[] get_Constants();
}
internal class System.Xml.Serialization.FieldModel : object {
    internal string Name { get; }
    internal Type FieldType { get; }
    internal TypeDesc FieldTypeDesc { get; }
    internal bool CheckShouldPersist { get; }
    internal SpecifiedAccessor CheckSpecified { get; }
    internal MemberInfo MemberInfo { get; }
    internal MemberInfo CheckSpecifiedMemberInfo { get; }
    internal MethodInfo CheckShouldPersistMethodInfo { get; }
    internal bool ReadOnly { get; }
    internal bool IsProperty { get; }
    internal FieldModel(string name, Type fieldType, TypeDesc fieldTypeDesc, bool checkSpecified, bool checkShouldPersist);
    internal FieldModel(string name, Type fieldType, TypeDesc fieldTypeDesc, bool checkSpecified, bool checkShouldPersist, bool readOnly);
    internal FieldModel(MemberInfo memberInfo, Type fieldType, TypeDesc fieldTypeDesc);
    internal string get_Name();
    internal Type get_FieldType();
    internal TypeDesc get_FieldTypeDesc();
    internal bool get_CheckShouldPersist();
    internal SpecifiedAccessor get_CheckSpecified();
    internal MemberInfo get_MemberInfo();
    internal MemberInfo get_CheckSpecifiedMemberInfo();
    internal MethodInfo get_CheckShouldPersistMethodInfo();
    internal bool get_ReadOnly();
    internal bool get_IsProperty();
}
internal class System.Xml.Serialization.ForState : object {
    internal LocalBuilder Index { get; }
    internal Label BeginLabel { get; }
    internal Label TestLabel { get; }
    internal object End { get; }
    internal ForState(LocalBuilder indexVar, Label beginLabel, Label testLabel, object end);
    internal LocalBuilder get_Index();
    internal Label get_BeginLabel();
    internal Label get_TestLabel();
    internal object get_End();
}
internal class System.Xml.Serialization.IfState : object {
    internal Label EndIf { get; internal set; }
    internal Label ElseBegin { get; internal set; }
    internal Label get_EndIf();
    internal void set_EndIf(Label value);
    internal Label get_ElseBegin();
    internal void set_ElseBegin(Label value);
}
public class System.Xml.Serialization.ImportContext : object {
    internal SchemaObjectCache Cache { get; }
    internal Hashtable Elements { get; }
    internal Hashtable Mappings { get; }
    public CodeIdentifiers TypeIdentifiers { get; }
    public bool ShareTypes { get; }
    public StringCollection Warnings { get; }
    public ImportContext(CodeIdentifiers identifiers, bool shareTypes);
    internal SchemaObjectCache get_Cache();
    internal Hashtable get_Elements();
    internal Hashtable get_Mappings();
    public CodeIdentifiers get_TypeIdentifiers();
    public bool get_ShareTypes();
    public StringCollection get_Warnings();
}
internal class System.Xml.Serialization.ImportStructWorkItem : object {
    internal StructModel Model { get; }
    internal StructMapping Mapping { get; }
    internal ImportStructWorkItem(StructModel model, StructMapping mapping);
    internal StructModel get_Model();
    internal StructMapping get_Mapping();
}
[DefaultMemberAttribute("Item")]
internal interface System.Xml.Serialization.INameScope {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string name, string ns);
    public abstract virtual void set_Item(string name, string ns, object value);
}
internal class System.Xml.Serialization.IndentedWriter : object {
    internal int Indent { get; internal set; }
    internal IndentedWriter(TextWriter writer, bool compact);
    internal int get_Indent();
    internal void set_Indent(int value);
    internal void Write(string s);
    internal void Write(char c);
    internal void WriteLine(string s);
    internal void WriteLine();
    internal void WriteIndent();
}
public interface System.Xml.Serialization.IXmlSerializable {
    public abstract virtual XmlSchema GetSchema();
    public abstract virtual void ReadXml(XmlReader reader);
    public abstract virtual void WriteXml(XmlWriter writer);
}
public interface System.Xml.Serialization.IXmlTextParser {
    public bool Normalized { get; public set; }
    public WhitespaceHandling WhitespaceHandling { get; public set; }
    public abstract virtual bool get_Normalized();
    public abstract virtual void set_Normalized(bool value);
    public abstract virtual WhitespaceHandling get_WhitespaceHandling();
    public abstract virtual void set_WhitespaceHandling(WhitespaceHandling value);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.LocalScope : object {
    public LocalScope parent;
    public LocalBuilder Item { get; public set; }
    public LocalScope(LocalScope parent);
    public void Add(string key, LocalBuilder value);
    public bool ContainsKey(string key);
    public bool TryGetValue(string key, LocalBuilder& value);
    public LocalBuilder get_Item(string key);
    public void set_Item(string key, LocalBuilder value);
    public void AddToFreeLocals(Dictionary`2<Tuple`2<Type, string>, Queue`1<LocalBuilder>> freeLocals);
}
internal abstract class System.Xml.Serialization.Mapping : object {
    internal bool IsSoap { get; internal set; }
    protected Mapping(Mapping mapping);
    internal bool get_IsSoap();
    internal void set_IsSoap(bool value);
}
internal class System.Xml.Serialization.MemberMapping : AccessorMapping {
    internal bool CheckShouldPersist { get; internal set; }
    internal SpecifiedAccessor CheckSpecified { get; internal set; }
    internal string Name { get; internal set; }
    internal MemberInfo MemberInfo { get; internal set; }
    internal MemberInfo CheckSpecifiedMemberInfo { get; internal set; }
    internal MethodInfo CheckShouldPersistMethodInfo { get; internal set; }
    internal bool IsReturnValue { get; internal set; }
    internal bool ReadOnly { get; internal set; }
    internal bool IsSequence { get; }
    internal int SequenceId { get; internal set; }
    internal bool get_CheckShouldPersist();
    internal void set_CheckShouldPersist(bool value);
    internal SpecifiedAccessor get_CheckSpecified();
    internal void set_CheckSpecified(SpecifiedAccessor value);
    internal string get_Name();
    internal void set_Name(string value);
    internal MemberInfo get_MemberInfo();
    internal void set_MemberInfo(MemberInfo value);
    internal MemberInfo get_CheckSpecifiedMemberInfo();
    internal void set_CheckSpecifiedMemberInfo(MemberInfo value);
    internal MethodInfo get_CheckShouldPersistMethodInfo();
    internal void set_CheckShouldPersistMethodInfo(MethodInfo value);
    internal bool get_IsReturnValue();
    internal void set_IsReturnValue(bool value);
    internal bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    internal bool get_IsSequence();
    internal int get_SequenceId();
    internal void set_SequenceId(int value);
    internal MemberMapping Clone();
    internal string GetTypeName(CodeDomProvider codeProvider);
}
internal class System.Xml.Serialization.MemberMappingComparer : object {
    public sealed virtual int Compare(object o1, object o2);
}
internal class System.Xml.Serialization.MembersMapping : TypeMapping {
    internal MemberMapping[] Members { get; internal set; }
    internal MemberMapping XmlnsMember { get; internal set; }
    internal bool HasWrapperElement { get; internal set; }
    internal bool ValidateRpcWrapperElement { get; internal set; }
    internal bool WriteAccessors { get; internal set; }
    internal MemberMapping[] get_Members();
    internal void set_Members(MemberMapping[] value);
    internal MemberMapping get_XmlnsMember();
    internal void set_XmlnsMember(MemberMapping value);
    internal bool get_HasWrapperElement();
    internal void set_HasWrapperElement(bool value);
    internal bool get_ValidateRpcWrapperElement();
    internal void set_ValidateRpcWrapperElement(bool value);
    internal bool get_WriteAccessors();
    internal void set_WriteAccessors(bool value);
}
internal class System.Xml.Serialization.MethodBuilderInfo : object {
    public MethodBuilder MethodBuilder;
    public Type[] ParameterTypes;
    public MethodBuilderInfo(MethodBuilder methodBuilder, Type[] parameterTypes);
    public void Validate(Type returnType, Type[] parameterTypes, MethodAttributes attributes);
}
internal class System.Xml.Serialization.ModelScope : object {
    internal TypeScope TypeScope { get; }
    internal ModelScope(TypeScope typeScope);
    internal TypeScope get_TypeScope();
    internal TypeModel GetTypeModel(Type type);
    internal TypeModel GetTypeModel(Type type, bool directReference);
    internal ArrayModel GetArrayModel(Type type);
}
internal class System.Xml.Serialization.NameKey : object {
    internal NameKey(string name, string ns);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.NameTable : object {
    internal object Item { get; internal set; }
    internal object Item { get; internal set; }
    private object System.Xml.Serialization.INameScope.Item { get; private set; }
    internal ICollection Values { get; }
    internal void Add(XmlQualifiedName qname, object value);
    internal void Add(string name, string ns, object value);
    internal object get_Item(XmlQualifiedName qname);
    internal void set_Item(XmlQualifiedName qname, object value);
    internal object get_Item(string name, string ns);
    internal void set_Item(string name, string ns, object value);
    private sealed virtual override object System.Xml.Serialization.INameScope.get_Item(string name, string ns);
    private sealed virtual override void System.Xml.Serialization.INameScope.set_Item(string name, string ns, object value);
    internal ICollection get_Values();
    internal Array ToArray(Type type);
}
internal class System.Xml.Serialization.NullableMapping : TypeMapping {
    internal TypeMapping BaseMapping { get; internal set; }
    internal string DefaultElementName { get; }
    internal TypeMapping get_BaseMapping();
    internal void set_BaseMapping(TypeMapping value);
    internal virtual string get_DefaultElementName();
}
internal class System.Xml.Serialization.PrimitiveMapping : TypeMapping {
    internal bool IsList { get; internal set; }
    internal virtual bool get_IsList();
    internal virtual void set_IsList(bool value);
}
internal class System.Xml.Serialization.PrimitiveModel : TypeModel {
    internal PrimitiveModel(Type type, TypeDesc typeDesc, ModelScope scope);
}
internal class System.Xml.Serialization.QNameComparer : object {
    public sealed virtual int Compare(object o1, object o2);
}
internal class System.Xml.Serialization.RecursionLimiter : object {
    internal bool IsExceededLimit { get; }
    internal int Depth { get; internal set; }
    internal WorkItems DeferredWorkItems { get; }
    internal bool get_IsExceededLimit();
    internal int get_Depth();
    internal void set_Depth(int value);
    internal WorkItems get_DeferredWorkItems();
}
internal class System.Xml.Serialization.ReflectionAwareCodeGen : object {
    internal ReflectionAwareCodeGen(IndentedWriter writer);
    private static ReflectionAwareCodeGen();
    internal void WriteReflectionInit(TypeScope scope);
    internal string GetReflectionVariable(string typeFullName, string memberName);
    internal string GetStringForMethodInvoke(string obj, string escapedTypeName, string methodName, bool useReflection, String[] args);
    internal string GetStringForEnumCompare(EnumMapping mapping, string memberName, bool useReflection);
    internal string GetStringForEnumLongValue(string variable, bool useReflection);
    internal string GetStringForTypeof(string typeFullName, bool useReflection);
    internal string GetStringForMember(string obj, string memberName, TypeDesc typeDesc);
    internal string GetStringForEnumMember(string typeFullName, string memberName, bool useReflection);
    internal string GetStringForArrayMember(string arrayName, string subscript, TypeDesc arrayTypeDesc);
    internal string GetStringForMethod(string obj, string typeFullName, string memberName, bool useReflection);
    internal string GetStringForCreateInstance(string escapedTypeName, bool useReflection, bool ctorInaccessible, bool cast);
    internal string GetStringForCreateInstance(string escapedTypeName, bool useReflection, bool ctorInaccessible, bool cast, string arg);
    internal string GetStringForCreateInstance(string type, string cast, bool nonPublic, string arg);
    internal void WriteLocalDecl(string typeFullName, string variableName, string initValue, bool useReflection);
    internal void WriteCreateInstance(string escapedName, string source, bool useReflection, bool ctorInaccessible);
    internal void WriteInstanceOf(string source, string escapedTypeName, bool useReflection);
    internal void WriteArrayLocalDecl(string typeName, string variableName, string initValue, TypeDesc arrayTypeDesc);
    internal void WriteEnumCase(string fullTypeName, ConstantMapping c, bool useReflection);
    internal void WriteTypeCompare(string variable, string escapedTypeName, bool useReflection);
    internal void WriteArrayTypeCompare(string variable, string escapedTypeName, string elementTypeName, bool useReflection);
    internal static void WriteQuotedCSharpString(IndentedWriter writer, string value);
    internal void WriteQuotedCSharpString(string value);
}
internal class System.Xml.Serialization.ReflectionAwareILGen : object {
    internal void WriteReflectionInit(TypeScope scope);
    internal void ILGenForEnumLongValue(CodeGenerator ilg, string variable);
    internal string GetStringForTypeof(string typeFullName);
    internal string GetStringForMember(string obj, string memberName, TypeDesc typeDesc);
    internal SourceInfo GetSourceForMember(string obj, MemberMapping member, TypeDesc typeDesc, CodeGenerator ilg);
    internal SourceInfo GetSourceForMember(string obj, MemberMapping member, MemberInfo memberInfo, TypeDesc typeDesc, CodeGenerator ilg);
    internal void ILGenForEnumMember(CodeGenerator ilg, Type type, string memberName);
    internal string GetStringForArrayMember(string arrayName, string subscript, TypeDesc arrayTypeDesc);
    internal string GetStringForMethod(string obj, string typeFullName, string memberName);
    internal void ILGenForCreateInstance(CodeGenerator ilg, Type type, bool ctorInaccessible, bool cast);
    internal void ILGenForCreateInstance(CodeGenerator ilg, Type type, Type cast, bool nonPublic);
    internal void WriteLocalDecl(string variableName, SourceInfo initValue);
    internal void WriteCreateInstance(string source, bool ctorInaccessible, Type type, CodeGenerator ilg);
    internal void WriteInstanceOf(SourceInfo source, Type type, CodeGenerator ilg);
    internal void WriteArrayLocalDecl(string typeName, string variableName, SourceInfo initValue, TypeDesc arrayTypeDesc);
    internal void WriteTypeCompare(string variable, Type type, CodeGenerator ilg);
    internal void WriteArrayTypeCompare(string variable, Type arrayType, CodeGenerator ilg);
    internal static string GetQuotedCSharpString(IndentedWriter notUsed, string value);
    internal static string GetCSharpString(string value);
}
internal class System.Xml.Serialization.SchemaGraph : object {
    internal SchemaGraph(Hashtable scope, XmlSchemas schemas);
    internal ArrayList GetItems();
    internal void AddRef(ArrayList list, XmlSchemaObject o);
    internal ArrayList Depends(XmlSchemaObject item);
    internal void Depends(XmlSchemaObject item, ArrayList refs);
}
public abstract class System.Xml.Serialization.SchemaImporter : object {
    internal ImportContext Context { get; }
    internal CodeDomProvider CodeProvider { get; }
    public SchemaImporterExtensionCollection Extensions { get; }
    internal Hashtable ImportedElements { get; }
    internal Hashtable ImportedMappings { get; }
    internal CodeIdentifiers TypeIdentifiers { get; }
    internal XmlSchemas Schemas { get; }
    internal TypeScope Scope { get; }
    internal NameTable GroupsInUse { get; }
    internal NameTable TypesInUse { get; }
    internal CodeGenerationOptions Options { get; }
    internal SchemaImporter(XmlSchemas schemas, CodeGenerationOptions options, CodeDomProvider codeProvider, ImportContext context);
    internal ImportContext get_Context();
    internal CodeDomProvider get_CodeProvider();
    public SchemaImporterExtensionCollection get_Extensions();
    internal Hashtable get_ImportedElements();
    internal Hashtable get_ImportedMappings();
    internal CodeIdentifiers get_TypeIdentifiers();
    internal XmlSchemas get_Schemas();
    internal TypeScope get_Scope();
    internal NameTable get_GroupsInUse();
    internal NameTable get_TypesInUse();
    internal CodeGenerationOptions get_Options();
    internal void MakeDerived(StructMapping structMapping, Type baseType, bool baseTypeCanBeIndirect);
    internal string GenerateUniqueTypeName(string typeName);
    internal StructMapping GetRootMapping();
    internal StructMapping ImportRootMapping();
    internal abstract virtual void ImportDerivedTypes(XmlQualifiedName baseName);
    internal void AddReference(XmlQualifiedName name, NameTable references, string error);
    internal void RemoveReference(XmlQualifiedName name, NameTable references);
    internal void AddReservedIdentifiersForDataBinding(CodeIdentifiers scope);
}
internal class System.Xml.Serialization.SchemaObjectCache : object {
    internal Hashtable looks;
    internal StringCollection Warnings { get; }
    internal StringCollection get_Warnings();
    internal XmlSchemaObject AddItem(XmlSchemaObject item, XmlQualifiedName qname, XmlSchemas schemas);
    internal bool Match(XmlSchemaObject o1, XmlSchemaObject o2, bool shareTypes);
    internal void GenerateSchemaGraph(XmlSchemas schemas);
}
internal class System.Xml.Serialization.SchemaObjectWriter : object {
    protected void WriteAttribute(string localName, string ns, string value);
    protected void WriteAttribute(string localName, string ns, XmlQualifiedName value);
    protected void WriteStartElement(string name);
    protected void WriteEndElement();
    protected void NewLine();
    protected string GetString();
    internal static string ToString(NamespaceList list);
    internal string WriteXmlSchemaObject(XmlSchemaObject o);
}
internal class System.Xml.Serialization.SerializableMapping : SpecialMapping {
    internal bool IsAny { get; }
    internal string NamespaceList { get; }
    internal SerializableMapping DerivedMappings { get; }
    internal SerializableMapping NextDerivedMapping { get; }
    internal SerializableMapping Next { get; internal set; }
    internal Type Type { get; internal set; }
    internal XmlSchemaSet Schemas { get; }
    internal XmlSchema Schema { get; }
    internal XmlQualifiedName XsiType { get; }
    internal XmlSchemaType XsdType { get; }
    internal SerializableMapping(MethodInfo getSchemaMethod, bool any, string ns);
    internal SerializableMapping(XmlQualifiedName xsiType, XmlSchemaSet schemas);
    internal void SetBaseMapping(SerializableMapping mapping);
    internal bool get_IsAny();
    internal string get_NamespaceList();
    internal SerializableMapping get_DerivedMappings();
    internal SerializableMapping get_NextDerivedMapping();
    internal SerializableMapping get_Next();
    internal void set_Next(SerializableMapping value);
    internal Type get_Type();
    internal void set_Type(Type value);
    internal XmlSchemaSet get_Schemas();
    internal XmlSchema get_Schema();
    internal XmlQualifiedName get_XsiType();
    internal XmlSchemaType get_XsdType();
    internal static void ValidationCallbackWithErrorCode(object sender, ValidationEventArgs args);
    internal void CheckDuplicateElement(XmlSchemaElement element, string elementNs);
}
internal class System.Xml.Serialization.Soap : object {
    internal static string Encoding;
    internal static string UrType;
    internal static string Array;
    internal static string ArrayType;
}
internal class System.Xml.Serialization.Soap12 : object {
    internal static string Encoding;
    internal static string RpcNamespace;
    internal static string RpcResult;
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.SoapAttributeAttribute : Attribute {
    public string AttributeName { get; public set; }
    public string Namespace { get; public set; }
    public string DataType { get; public set; }
    public SoapAttributeAttribute(string attributeName);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_DataType();
    public void set_DataType(string value);
}
internal enum System.Xml.Serialization.SoapAttributeFlags : Enum {
    public int value__;
    public static SoapAttributeFlags Enum;
    public static SoapAttributeFlags Type;
    public static SoapAttributeFlags Element;
    public static SoapAttributeFlags Attribute;
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.SoapAttributeOverrides : object {
    public SoapAttributes Item { get; }
    public SoapAttributes Item { get; }
    public void Add(Type type, SoapAttributes attributes);
    public void Add(Type type, string member, SoapAttributes attributes);
    public SoapAttributes get_Item(Type type);
    public SoapAttributes get_Item(Type type, string member);
}
public class System.Xml.Serialization.SoapAttributes : object {
    internal SoapAttributeFlags SoapFlags { get; }
    public SoapTypeAttribute SoapType { get; public set; }
    public SoapEnumAttribute SoapEnum { get; public set; }
    public bool SoapIgnore { get; public set; }
    public SoapElementAttribute SoapElement { get; public set; }
    public SoapAttributeAttribute SoapAttribute { get; public set; }
    public object SoapDefaultValue { get; public set; }
    public SoapAttributes(ICustomAttributeProvider provider);
    internal SoapAttributeFlags get_SoapFlags();
    public SoapTypeAttribute get_SoapType();
    public void set_SoapType(SoapTypeAttribute value);
    public SoapEnumAttribute get_SoapEnum();
    public void set_SoapEnum(SoapEnumAttribute value);
    public bool get_SoapIgnore();
    public void set_SoapIgnore(bool value);
    public SoapElementAttribute get_SoapElement();
    public void set_SoapElement(SoapElementAttribute value);
    public SoapAttributeAttribute get_SoapAttribute();
    public void set_SoapAttribute(SoapAttributeAttribute value);
    public object get_SoapDefaultValue();
    public void set_SoapDefaultValue(object value);
}
public class System.Xml.Serialization.SoapCodeExporter : CodeExporter {
    public SoapCodeExporter(CodeNamespace codeNamespace);
    public SoapCodeExporter(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit);
    public SoapCodeExporter(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options);
    public SoapCodeExporter(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options, Hashtable mappings);
    public SoapCodeExporter(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeDomProvider codeProvider, CodeGenerationOptions options, Hashtable mappings);
    public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping);
    public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping);
    internal virtual void ExportDerivedStructs(StructMapping mapping);
    public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member, bool forceUseMemberName);
    public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member);
    internal virtual void EnsureTypesExported(Accessor[] accessors, string ns);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.SoapElementAttribute : Attribute {
    public string ElementName { get; public set; }
    public string DataType { get; public set; }
    public bool IsNullable { get; public set; }
    public SoapElementAttribute(string elementName);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
}
[AttributeUsageAttribute("256")]
public class System.Xml.Serialization.SoapEnumAttribute : Attribute {
    public string Name { get; public set; }
    public SoapEnumAttribute(string name);
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.SoapIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("1100")]
public class System.Xml.Serialization.SoapIncludeAttribute : Attribute {
    public Type Type { get; public set; }
    public SoapIncludeAttribute(Type type);
    public Type get_Type();
    public void set_Type(Type value);
}
public class System.Xml.Serialization.SoapReflectionImporter : object {
    public SoapReflectionImporter(string defaultNamespace);
    public SoapReflectionImporter(SoapAttributeOverrides attributeOverrides);
    public SoapReflectionImporter(SoapAttributeOverrides attributeOverrides, string defaultNamespace);
    public void IncludeTypes(ICustomAttributeProvider provider);
    public void IncludeType(Type type);
    public XmlTypeMapping ImportTypeMapping(Type type);
    public XmlTypeMapping ImportTypeMapping(Type type, string defaultNamespace);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate, XmlMappingAccess access);
    internal string XsdTypeName(Type type);
    internal string XsdTypeName(Type type, SoapAttributes a, string name);
}
public class System.Xml.Serialization.SoapSchemaExporter : object {
    internal static XmlSchemaForm elementFormDefault;
    internal XmlDocument Document { get; }
    public SoapSchemaExporter(XmlSchemas schemas);
    private static SoapSchemaExporter();
    public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping);
    public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping);
    public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping, bool exportEnclosingType);
    internal XmlDocument get_Document();
}
public class System.Xml.Serialization.SoapSchemaImporter : SchemaImporter {
    public SoapSchemaImporter(XmlSchemas schemas);
    public SoapSchemaImporter(XmlSchemas schemas, CodeIdentifiers typeIdentifiers);
    public SoapSchemaImporter(XmlSchemas schemas, CodeIdentifiers typeIdentifiers, CodeGenerationOptions options);
    public SoapSchemaImporter(XmlSchemas schemas, CodeGenerationOptions options, ImportContext context);
    public SoapSchemaImporter(XmlSchemas schemas, CodeGenerationOptions options, CodeDomProvider codeProvider, ImportContext context);
    public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType, bool baseTypeCanBeIndirect);
    public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember member);
    public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members);
    public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members, bool hasWrapperElement);
    public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members, bool hasWrapperElement, Type baseType, bool baseTypeCanBeIndirect);
    internal virtual void ImportDerivedTypes(XmlQualifiedName baseName);
}
public class System.Xml.Serialization.SoapSchemaMember : object {
    public XmlQualifiedName MemberType { get; public set; }
    public string MemberName { get; public set; }
    public XmlQualifiedName get_MemberType();
    public void set_MemberType(XmlQualifiedName value);
    public string get_MemberName();
    public void set_MemberName(string value);
}
[AttributeUsageAttribute("1052")]
public class System.Xml.Serialization.SoapTypeAttribute : Attribute {
    public bool IncludeInSchema { get; public set; }
    public string TypeName { get; public set; }
    public string Namespace { get; public set; }
    public SoapTypeAttribute(string typeName);
    public SoapTypeAttribute(string typeName, string ns);
    public bool get_IncludeInSchema();
    public void set_IncludeInSchema(bool value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
internal class System.Xml.Serialization.SourceInfo : object {
    public string Source;
    public string Arg;
    public MemberInfo MemberInfo;
    public Type Type;
    public CodeGenerator ILG;
    public SourceInfo(string source, string arg, MemberInfo memberInfo, Type type, CodeGenerator ilg);
    private static SourceInfo();
    public SourceInfo CastTo(TypeDesc td);
    public void LoadAddress(Type elementType);
    public void Load(Type elementType);
    public static string op_Implicit(SourceInfo source);
    public static bool op_Inequality(SourceInfo a, SourceInfo b);
    public static bool op_Equality(SourceInfo a, SourceInfo b);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.Xml.Serialization.SpecialMapping : TypeMapping {
    internal bool NamedAny { get; internal set; }
    internal bool get_NamedAny();
    internal void set_NamedAny(bool value);
}
internal class System.Xml.Serialization.SpecialModel : TypeModel {
    internal SpecialModel(Type type, TypeDesc typeDesc, ModelScope scope);
}
internal enum System.Xml.Serialization.SpecifiedAccessor : Enum {
    public int value__;
    public static SpecifiedAccessor None;
    public static SpecifiedAccessor ReadOnly;
    public static SpecifiedAccessor ReadWrite;
}
internal class System.Xml.Serialization.StructMapping : TypeMapping {
    internal StructMapping BaseMapping { get; internal set; }
    internal StructMapping DerivedMappings { get; }
    internal bool IsFullyInitialized { get; }
    internal NameTable LocalElements { get; }
    internal NameTable LocalAttributes { get; }
    private object System.Xml.Serialization.INameScope.Item { get; private set; }
    internal StructMapping NextDerivedMapping { get; }
    internal bool HasSimpleContent { get; }
    internal bool HasXmlnsMember { get; }
    internal MemberMapping[] Members { get; internal set; }
    internal MemberMapping XmlnsMember { get; internal set; }
    internal bool IsOpenModel { get; internal set; }
    internal CodeIdentifiers Scope { get; internal set; }
    internal bool HasElements { get; }
    internal bool IsSequence { get; internal set; }
    internal StructMapping get_BaseMapping();
    internal void set_BaseMapping(StructMapping value);
    internal StructMapping get_DerivedMappings();
    internal bool get_IsFullyInitialized();
    internal NameTable get_LocalElements();
    internal NameTable get_LocalAttributes();
    private sealed virtual override object System.Xml.Serialization.INameScope.get_Item(string name, string ns);
    private sealed virtual override void System.Xml.Serialization.INameScope.set_Item(string name, string ns, object value);
    internal StructMapping get_NextDerivedMapping();
    internal bool get_HasSimpleContent();
    internal bool get_HasXmlnsMember();
    internal MemberMapping[] get_Members();
    internal void set_Members(MemberMapping[] value);
    internal MemberMapping get_XmlnsMember();
    internal void set_XmlnsMember(MemberMapping value);
    internal bool get_IsOpenModel();
    internal void set_IsOpenModel(bool value);
    internal CodeIdentifiers get_Scope();
    internal void set_Scope(CodeIdentifiers value);
    internal MemberMapping FindDeclaringMapping(MemberMapping member, StructMapping& declaringMapping, string parent);
    internal bool Declares(MemberMapping member, string parent);
    internal void SetContentModel(TextAccessor text, bool hasElements);
    internal bool get_HasElements();
    internal bool HasExplicitSequence();
    internal void SetSequence();
    internal bool get_IsSequence();
    internal void set_IsSequence(bool value);
}
internal class System.Xml.Serialization.StructModel : TypeModel {
    internal StructModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal MemberInfo[] GetMemberInfos();
    internal FieldModel GetFieldModel(MemberInfo memberInfo);
    internal static bool CheckPropertyRead(PropertyInfo propertyInfo);
}
internal class System.Xml.Serialization.TempAssembly : object {
    internal static string GeneratedAssemblyNamespace;
    internal static bool UseLegacySerializerGeneration { get; }
    internal XmlSerializerImplementation Contract { get; }
    internal static FileIOPermission FileIOPermission { get; }
    internal bool NeedAssembyResolve { get; }
    internal TempAssembly(XmlMapping[] xmlMappings, Type[] types, string defaultNamespace, string location, Evidence evidence);
    internal TempAssembly(XmlMapping[] xmlMappings, Assembly assembly, XmlSerializerImplementation contract);
    internal TempAssembly(XmlSerializerImplementation contract);
    private static TempAssembly();
    internal static bool get_UseLegacySerializerGeneration();
    internal XmlSerializerImplementation get_Contract();
    internal void InitAssemblyMethods(XmlMapping[] xmlMappings);
    internal static Assembly LoadGeneratedAssembly(Type type, string defaultNamespace, XmlSerializerImplementation& contract);
    internal static Assembly GenerateAssembly(XmlMapping[] xmlMappings, Type[] types, string defaultNamespace, Evidence evidence, XmlSerializerCompilerParameters parameters, Assembly assembly, Hashtable assemblies);
    internal static Assembly GenerateRefEmitAssembly(XmlMapping[] xmlMappings, Type[] types, string defaultNamespace, Evidence evidence);
    internal static Type GetTypeFromAssembly(Assembly assembly, string typeName);
    internal bool CanRead(XmlMapping mapping, XmlReader xmlReader);
    internal static FileIOPermission get_FileIOPermission();
    internal object InvokeReader(XmlMapping mapping, XmlReader xmlReader, XmlDeserializationEvents events, string encodingStyle);
    internal void InvokeWriter(XmlMapping mapping, XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle, string id);
    internal Assembly GetReferencedAssembly(string name);
    internal bool get_NeedAssembyResolve();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.TempAssemblyCache : object {
    internal TempAssembly Item { get; }
    internal TempAssembly get_Item(string ns, object o);
    internal void Add(string ns, object o, TempAssembly assembly);
}
internal class System.Xml.Serialization.TempAssemblyCacheKey : object {
    internal TempAssemblyCacheKey(string ns, object type);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
internal class System.Xml.Serialization.TextAccessor : Accessor {
}
internal class System.Xml.Serialization.TypeDesc : object {
    internal TypeFlags Flags { get; }
    internal bool IsXsdType { get; }
    internal bool IsMappedType { get; }
    internal MappedTypeDesc ExtendedType { get; }
    internal string Name { get; }
    internal string FullName { get; }
    internal string CSharpName { get; }
    internal XmlSchemaType DataType { get; }
    internal Type Type { get; }
    internal string FormatterName { get; }
    internal TypeKind Kind { get; }
    internal bool IsValueType { get; }
    internal bool CanBeAttributeValue { get; }
    internal bool XmlEncodingNotRequired { get; }
    internal bool CanBeElementValue { get; }
    internal bool CanBeTextValue { get; }
    internal bool IsMixed { get; internal set; }
    internal bool IsSpecial { get; }
    internal bool IsAmbiguousDataType { get; }
    internal bool HasCustomFormatter { get; }
    internal bool HasDefaultSupport { get; }
    internal bool HasIsEmpty { get; }
    internal bool CollapseWhitespace { get; }
    internal bool HasDefaultConstructor { get; }
    internal bool IsUnsupported { get; }
    internal bool IsGenericInterface { get; }
    internal bool IsPrivateImplementation { get; }
    internal bool CannotNew { get; }
    internal bool IsAbstract { get; }
    internal bool IsOptionalValue { get; }
    internal bool UseReflection { get; }
    internal bool IsVoid { get; }
    internal bool IsClass { get; }
    internal bool IsStructLike { get; }
    internal bool IsArrayLike { get; }
    internal bool IsCollection { get; }
    internal bool IsEnumerable { get; }
    internal bool IsArray { get; }
    internal bool IsPrimitive { get; }
    internal bool IsEnum { get; }
    internal bool IsNullable { get; }
    internal bool IsRoot { get; }
    internal bool ConstructorInaccessible { get; }
    internal Exception Exception { get; internal set; }
    internal string ArrayLengthName { get; }
    internal TypeDesc ArrayElementTypeDesc { get; internal set; }
    internal int Weight { get; }
    internal TypeDesc BaseTypeDesc { get; internal set; }
    internal TypeDesc(string name, string fullName, XmlSchemaType dataType, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags, string formatterName);
    internal TypeDesc(string name, string fullName, XmlSchemaType dataType, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags);
    internal TypeDesc(string name, string fullName, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags);
    internal TypeDesc(Type type, bool isXsdType, XmlSchemaType dataType, string formatterName, TypeFlags flags);
    internal TypeDesc(Type type, string name, string fullName, TypeKind kind, TypeDesc baseTypeDesc, TypeFlags flags, TypeDesc arrayElementTypeDesc);
    public virtual string ToString();
    internal TypeFlags get_Flags();
    internal bool get_IsXsdType();
    internal bool get_IsMappedType();
    internal MappedTypeDesc get_ExtendedType();
    internal string get_Name();
    internal string get_FullName();
    internal string get_CSharpName();
    internal XmlSchemaType get_DataType();
    internal Type get_Type();
    internal string get_FormatterName();
    internal TypeKind get_Kind();
    internal bool get_IsValueType();
    internal bool get_CanBeAttributeValue();
    internal bool get_XmlEncodingNotRequired();
    internal bool get_CanBeElementValue();
    internal bool get_CanBeTextValue();
    internal bool get_IsMixed();
    internal void set_IsMixed(bool value);
    internal bool get_IsSpecial();
    internal bool get_IsAmbiguousDataType();
    internal bool get_HasCustomFormatter();
    internal bool get_HasDefaultSupport();
    internal bool get_HasIsEmpty();
    internal bool get_CollapseWhitespace();
    internal bool get_HasDefaultConstructor();
    internal bool get_IsUnsupported();
    internal bool get_IsGenericInterface();
    internal bool get_IsPrivateImplementation();
    internal bool get_CannotNew();
    internal bool get_IsAbstract();
    internal bool get_IsOptionalValue();
    internal bool get_UseReflection();
    internal bool get_IsVoid();
    internal bool get_IsClass();
    internal bool get_IsStructLike();
    internal bool get_IsArrayLike();
    internal bool get_IsCollection();
    internal bool get_IsEnumerable();
    internal bool get_IsArray();
    internal bool get_IsPrimitive();
    internal bool get_IsEnum();
    internal bool get_IsNullable();
    internal bool get_IsRoot();
    internal bool get_ConstructorInaccessible();
    internal Exception get_Exception();
    internal void set_Exception(Exception value);
    internal TypeDesc GetNullableTypeDesc(Type type);
    internal void CheckSupported();
    internal void CheckNeedConstructor();
    internal string get_ArrayLengthName();
    internal TypeDesc get_ArrayElementTypeDesc();
    internal void set_ArrayElementTypeDesc(TypeDesc value);
    internal int get_Weight();
    internal TypeDesc CreateArrayTypeDesc();
    internal TypeDesc CreateMappedTypeDesc(MappedTypeDesc extension);
    internal TypeDesc get_BaseTypeDesc();
    internal void set_BaseTypeDesc(TypeDesc value);
    internal bool IsDerivedFrom(TypeDesc baseTypeDesc);
    internal static TypeDesc FindCommonBaseTypeDesc(TypeDesc[] typeDescs);
}
[ExtensionAttribute]
internal static class System.Xml.Serialization.TypeExtensions : object {
    [ExtensionAttribute]
public static bool TryConvertTo(Type targetType, object data, Object& returnValue);
}
internal enum System.Xml.Serialization.TypeFlags : Enum {
    public int value__;
    public static TypeFlags None;
    public static TypeFlags Abstract;
    public static TypeFlags Reference;
    public static TypeFlags Special;
    public static TypeFlags CanBeAttributeValue;
    public static TypeFlags CanBeTextValue;
    public static TypeFlags CanBeElementValue;
    public static TypeFlags HasCustomFormatter;
    public static TypeFlags AmbiguousDataType;
    public static TypeFlags IgnoreDefault;
    public static TypeFlags HasIsEmpty;
    public static TypeFlags HasDefaultConstructor;
    public static TypeFlags XmlEncodingNotRequired;
    public static TypeFlags UseReflection;
    public static TypeFlags CollapseWhitespace;
    public static TypeFlags OptionalValue;
    public static TypeFlags CtorInaccessible;
    public static TypeFlags UsePrivateImplementation;
    public static TypeFlags GenericInterface;
    public static TypeFlags Unsupported;
}
internal enum System.Xml.Serialization.TypeKind : Enum {
    public int value__;
    public static TypeKind Root;
    public static TypeKind Primitive;
    public static TypeKind Enum;
    public static TypeKind Struct;
    public static TypeKind Class;
    public static TypeKind Array;
    public static TypeKind Collection;
    public static TypeKind Enumerable;
    public static TypeKind Void;
    public static TypeKind Node;
    public static TypeKind Attribute;
    public static TypeKind Serializable;
}
internal abstract class System.Xml.Serialization.TypeMapping : Mapping {
    internal bool ReferencedByTopLevelElement { get; internal set; }
    internal bool ReferencedByElement { get; internal set; }
    internal string Namespace { get; internal set; }
    internal string TypeName { get; internal set; }
    internal TypeDesc TypeDesc { get; internal set; }
    internal bool IncludeInSchema { get; internal set; }
    internal bool IsList { get; internal set; }
    internal bool IsReference { get; internal set; }
    internal bool IsAnonymousType { get; }
    internal string DefaultElementName { get; }
    internal bool get_ReferencedByTopLevelElement();
    internal void set_ReferencedByTopLevelElement(bool value);
    internal bool get_ReferencedByElement();
    internal void set_ReferencedByElement(bool value);
    internal string get_Namespace();
    internal void set_Namespace(string value);
    internal string get_TypeName();
    internal void set_TypeName(string value);
    internal TypeDesc get_TypeDesc();
    internal void set_TypeDesc(TypeDesc value);
    internal bool get_IncludeInSchema();
    internal void set_IncludeInSchema(bool value);
    internal virtual bool get_IsList();
    internal virtual void set_IsList(bool value);
    internal bool get_IsReference();
    internal void set_IsReference(bool value);
    internal bool get_IsAnonymousType();
    internal virtual string get_DefaultElementName();
}
internal abstract class System.Xml.Serialization.TypeModel : object {
    internal Type Type { get; }
    internal ModelScope ModelScope { get; }
    internal TypeDesc TypeDesc { get; }
    protected TypeModel(Type type, TypeDesc typeDesc, ModelScope scope);
    internal Type get_Type();
    internal ModelScope get_ModelScope();
    internal TypeDesc get_TypeDesc();
}
internal class System.Xml.Serialization.TypeScope : object {
    internal ICollection Types { get; }
    internal ICollection TypeMappings { get; }
    internal static Hashtable PrimtiveTypes { get; }
    private static TypeScope();
    internal static bool IsKnownType(Type type);
    internal TypeDesc GetTypeDesc(string name, string ns);
    internal TypeDesc GetTypeDesc(string name, string ns, TypeFlags flags);
    internal TypeDesc GetTypeDesc(XmlSchemaSimpleType dataType);
    internal TypeDesc GetTypeDesc(Type type);
    internal TypeDesc GetTypeDesc(Type type, MemberInfo source);
    internal TypeDesc GetTypeDesc(Type type, MemberInfo source, bool directReference);
    internal TypeDesc GetTypeDesc(Type type, MemberInfo source, bool directReference, bool throwOnError);
    internal TypeDesc GetArrayTypeDesc(Type type);
    internal TypeMapping GetTypeMappingFromTypeDesc(TypeDesc typeDesc);
    internal Type GetTypeFromTypeDesc(TypeDesc typeDesc);
    internal static bool IsOptionalValue(Type type);
    internal static string TypeName(Type t);
    internal static Type GetArrayElementType(Type type, string memberInfo);
    internal static MemberMapping[] GetAllMembers(StructMapping mapping);
    internal static void GetAllMembers(StructMapping mapping, ArrayList list);
    internal static MemberMapping[] GetAllMembers(StructMapping mapping, Dictionary`2<string, MemberInfo> memberInfos);
    internal static MemberMapping[] GetSettableMembers(StructMapping structMapping);
    internal static MemberMapping[] GetSettableMembers(StructMapping mapping, Dictionary`2<string, MemberInfo> memberInfos);
    internal static PropertyInfo GetDefaultIndexer(Type type, string memberInfo);
    internal static XmlQualifiedName ParseWsdlArrayType(string type, String& dims, XmlSchemaObject parent);
    internal ICollection get_Types();
    internal void AddTypeMapping(TypeMapping typeMapping);
    internal ICollection get_TypeMappings();
    internal static Hashtable get_PrimtiveTypes();
}
public class System.Xml.Serialization.UnreferencedObjectEventArgs : EventArgs {
    public object UnreferencedObject { get; }
    public string UnreferencedId { get; }
    public UnreferencedObjectEventArgs(object o, string id);
    public object get_UnreferencedObject();
    public string get_UnreferencedId();
}
public class System.Xml.Serialization.UnreferencedObjectEventHandler : MulticastDelegate {
    public UnreferencedObjectEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UnreferencedObjectEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UnreferencedObjectEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xml.Serialization.UrtTypes : object {
    internal static string Namespace;
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.WorkItems : object {
    internal ImportStructWorkItem Item { get; internal set; }
    internal int Count { get; }
    internal ImportStructWorkItem get_Item(int index);
    internal void set_Item(int index, ImportStructWorkItem value);
    internal int get_Count();
    internal void Add(ImportStructWorkItem item);
    internal bool Contains(StructMapping mapping);
    internal int IndexOf(StructMapping mapping);
    internal void RemoveAt(int index);
}
internal class System.Xml.Serialization.Wsdl : object {
    internal static string Namespace;
    internal static string ArrayType;
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAnyAttributeAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAnyElementAttribute : Attribute {
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public int Order { get; public set; }
    internal bool NamespaceSpecified { get; }
    public XmlAnyElementAttribute(string name);
    public XmlAnyElementAttribute(string name, string ns);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_Order();
    public void set_Order(int value);
    internal bool get_NamespaceSpecified();
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlAnyElementAttributes : CollectionBase {
    public XmlAnyElementAttribute Item { get; public set; }
    public XmlAnyElementAttribute get_Item(int index);
    public void set_Item(int index, XmlAnyElementAttribute value);
    public int Add(XmlAnyElementAttribute attribute);
    public void Insert(int index, XmlAnyElementAttribute attribute);
    public int IndexOf(XmlAnyElementAttribute attribute);
    public bool Contains(XmlAnyElementAttribute attribute);
    public void Remove(XmlAnyElementAttribute attribute);
    public void CopyTo(XmlAnyElementAttribute[] array, int index);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlArrayAttribute : Attribute {
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public bool IsNullable { get; public set; }
    public XmlSchemaForm Form { get; public set; }
    public int Order { get; public set; }
    public XmlArrayAttribute(string elementName);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public int get_Order();
    public void set_Order(int value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlArrayItemAttribute : Attribute {
    public Type Type { get; public set; }
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public int NestingLevel { get; public set; }
    public string DataType { get; public set; }
    public bool IsNullable { get; public set; }
    internal bool IsNullableSpecified { get; }
    public XmlSchemaForm Form { get; public set; }
    public XmlArrayItemAttribute(string elementName);
    public XmlArrayItemAttribute(Type type);
    public XmlArrayItemAttribute(string elementName, Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_NestingLevel();
    public void set_NestingLevel(int value);
    public string get_DataType();
    public void set_DataType(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    internal bool get_IsNullableSpecified();
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlArrayItemAttributes : CollectionBase {
    public XmlArrayItemAttribute Item { get; public set; }
    public XmlArrayItemAttribute get_Item(int index);
    public void set_Item(int index, XmlArrayItemAttribute value);
    public int Add(XmlArrayItemAttribute attribute);
    public void Insert(int index, XmlArrayItemAttribute attribute);
    public int IndexOf(XmlArrayItemAttribute attribute);
    public bool Contains(XmlArrayItemAttribute attribute);
    public void Remove(XmlArrayItemAttribute attribute);
    public void CopyTo(XmlArrayItemAttribute[] array, int index);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAttributeAttribute : Attribute {
    public Type Type { get; public set; }
    public string AttributeName { get; public set; }
    public string Namespace { get; public set; }
    public string DataType { get; public set; }
    public XmlSchemaForm Form { get; public set; }
    public XmlAttributeAttribute(string attributeName);
    public XmlAttributeAttribute(Type type);
    public XmlAttributeAttribute(string attributeName, Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
}
internal class System.Xml.Serialization.XmlAttributeComparer : object {
    public sealed virtual int Compare(object o1, object o2);
}
public class System.Xml.Serialization.XmlAttributeEventArgs : EventArgs {
    public object ObjectBeingDeserialized { get; }
    public XmlAttribute Attr { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string ExpectedAttributes { get; }
    internal XmlAttributeEventArgs(XmlAttribute attr, int lineNumber, int linePosition, object o, string qnames);
    public object get_ObjectBeingDeserialized();
    public XmlAttribute get_Attr();
    public int get_LineNumber();
    public int get_LinePosition();
    public string get_ExpectedAttributes();
}
public class System.Xml.Serialization.XmlAttributeEventHandler : MulticastDelegate {
    public XmlAttributeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlAttributeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlAttributeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal enum System.Xml.Serialization.XmlAttributeFlags : Enum {
    public int value__;
    public static XmlAttributeFlags Enum;
    public static XmlAttributeFlags Array;
    public static XmlAttributeFlags Text;
    public static XmlAttributeFlags ArrayItems;
    public static XmlAttributeFlags Elements;
    public static XmlAttributeFlags Attribute;
    public static XmlAttributeFlags Root;
    public static XmlAttributeFlags Type;
    public static XmlAttributeFlags AnyElements;
    public static XmlAttributeFlags AnyAttribute;
    public static XmlAttributeFlags ChoiceIdentifier;
    public static XmlAttributeFlags XmlnsDeclarations;
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlAttributeOverrides : object {
    public XmlAttributes Item { get; }
    public XmlAttributes Item { get; }
    public void Add(Type type, XmlAttributes attributes);
    public void Add(Type type, string member, XmlAttributes attributes);
    public XmlAttributes get_Item(Type type);
    public XmlAttributes get_Item(Type type, string member);
}
public class System.Xml.Serialization.XmlAttributes : object {
    internal XmlAttributeFlags XmlFlags { get; }
    public XmlElementAttributes XmlElements { get; }
    public XmlAttributeAttribute XmlAttribute { get; public set; }
    public XmlEnumAttribute XmlEnum { get; public set; }
    public XmlTextAttribute XmlText { get; public set; }
    public XmlArrayAttribute XmlArray { get; public set; }
    public XmlArrayItemAttributes XmlArrayItems { get; }
    public object XmlDefaultValue { get; public set; }
    public bool XmlIgnore { get; public set; }
    public XmlTypeAttribute XmlType { get; public set; }
    public XmlRootAttribute XmlRoot { get; public set; }
    public XmlAnyElementAttributes XmlAnyElements { get; }
    public XmlAnyAttributeAttribute XmlAnyAttribute { get; public set; }
    public XmlChoiceIdentifierAttribute XmlChoiceIdentifier { get; }
    public bool Xmlns { get; public set; }
    public XmlAttributes(ICustomAttributeProvider provider);
    internal XmlAttributeFlags get_XmlFlags();
    internal static object GetAttr(ICustomAttributeProvider provider, Type attrType);
    public XmlElementAttributes get_XmlElements();
    public XmlAttributeAttribute get_XmlAttribute();
    public void set_XmlAttribute(XmlAttributeAttribute value);
    public XmlEnumAttribute get_XmlEnum();
    public void set_XmlEnum(XmlEnumAttribute value);
    public XmlTextAttribute get_XmlText();
    public void set_XmlText(XmlTextAttribute value);
    public XmlArrayAttribute get_XmlArray();
    public void set_XmlArray(XmlArrayAttribute value);
    public XmlArrayItemAttributes get_XmlArrayItems();
    public object get_XmlDefaultValue();
    public void set_XmlDefaultValue(object value);
    public bool get_XmlIgnore();
    public void set_XmlIgnore(bool value);
    public XmlTypeAttribute get_XmlType();
    public void set_XmlType(XmlTypeAttribute value);
    public XmlRootAttribute get_XmlRoot();
    public void set_XmlRoot(XmlRootAttribute value);
    public XmlAnyElementAttributes get_XmlAnyElements();
    public XmlAnyAttributeAttribute get_XmlAnyAttribute();
    public void set_XmlAnyAttribute(XmlAnyAttributeAttribute value);
    public XmlChoiceIdentifierAttribute get_XmlChoiceIdentifier();
    public bool get_Xmlns();
    public void set_Xmlns(bool value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlChoiceIdentifierAttribute : Attribute {
    public string MemberName { get; public set; }
    internal MemberInfo MemberInfo { get; internal set; }
    public XmlChoiceIdentifierAttribute(string name);
    public string get_MemberName();
    public void set_MemberName(string value);
    internal MemberInfo get_MemberInfo();
    internal void set_MemberInfo(MemberInfo value);
}
public class System.Xml.Serialization.XmlCodeExporter : CodeExporter {
    public XmlCodeExporter(CodeNamespace codeNamespace);
    public XmlCodeExporter(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit);
    public XmlCodeExporter(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options);
    public XmlCodeExporter(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeGenerationOptions options, Hashtable mappings);
    public XmlCodeExporter(CodeNamespace codeNamespace, CodeCompileUnit codeCompileUnit, CodeDomProvider codeProvider, CodeGenerationOptions options, Hashtable mappings);
    public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping);
    public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping);
    internal virtual void ExportDerivedStructs(StructMapping mapping);
    public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlTypeMapping mapping, string ns);
    public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member, string ns, bool forceUseMemberName);
    public void AddMappingMetadata(CodeAttributeDeclarationCollection metadata, XmlMemberMapping member, string ns);
    internal virtual void EnsureTypesExported(Accessor[] accessors, string ns);
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.Serialization.XmlCountingReader : XmlReader {
    internal int AdvanceCount { get; }
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool HasAttributes { get; }
    private bool System.Xml.Serialization.IXmlTextParser.Normalized { get; private set; }
    private WhitespaceHandling System.Xml.Serialization.IXmlTextParser.WhitespaceHandling { get; private set; }
    private int System.Xml.IXmlLineInfo.LineNumber { get; }
    private int System.Xml.IXmlLineInfo.LinePosition { get; }
    internal XmlCountingReader(XmlReader xmlReader);
    internal int get_AdvanceCount();
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual int get_AttributeCount();
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_CanResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual bool get_HasAttributes();
    public virtual void Close();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual string LookupNamespace(string prefix);
    public virtual bool ReadAttributeValue();
    public virtual void ResolveEntity();
    public virtual bool IsStartElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localname, string ns);
    public virtual XmlReader ReadSubtree();
    public virtual XmlNodeType MoveToContent();
    public virtual bool Read();
    public virtual void Skip();
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual double ReadContentAsDouble();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAsObject();
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI);
    public virtual bool ReadElementContentAsBoolean();
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    public virtual DateTime ReadElementContentAsDateTime();
    public virtual DateTime ReadElementContentAsDateTime(string localName, string namespaceURI);
    public virtual double ReadElementContentAsDouble();
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI);
    public virtual int ReadElementContentAsInt();
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI);
    public virtual long ReadElementContentAsLong();
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI);
    public virtual string ReadElementContentAsString();
    public virtual string ReadElementContentAsString(string localName, string namespaceURI);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual string ReadString();
    public virtual void ReadStartElement();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localname, string ns);
    public virtual string ReadElementString();
    public virtual string ReadElementString(string name);
    public virtual string ReadElementString(string localname, string ns);
    public virtual void ReadEndElement();
    public virtual bool ReadToFollowing(string name);
    public virtual bool ReadToFollowing(string localName, string namespaceURI);
    public virtual bool ReadToDescendant(string name);
    public virtual bool ReadToDescendant(string localName, string namespaceURI);
    public virtual bool ReadToNextSibling(string name);
    public virtual bool ReadToNextSibling(string localName, string namespaceURI);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override bool System.Xml.Serialization.IXmlTextParser.get_Normalized();
    private sealed virtual override void System.Xml.Serialization.IXmlTextParser.set_Normalized(bool value);
    private sealed virtual override WhitespaceHandling System.Xml.Serialization.IXmlTextParser.get_WhitespaceHandling();
    private sealed virtual override void System.Xml.Serialization.IXmlTextParser.set_WhitespaceHandling(WhitespaceHandling value);
    private sealed virtual override bool System.Xml.IXmlLineInfo.HasLineInfo();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LinePosition();
}
internal class System.Xml.Serialization.XmlCustomFormatter : object {
    private static XmlCustomFormatter();
    internal static string FromDefaultValue(object value, string formatter);
    internal static string FromDate(DateTime value);
    internal static string FromTime(DateTime value);
    internal static string FromDateTime(DateTime value);
    internal static string FromChar(char value);
    internal static string FromXmlName(string name);
    internal static string FromXmlNCName(string ncName);
    internal static string FromXmlNmToken(string nmToken);
    internal static string FromXmlNmTokens(string nmTokens);
    internal static void WriteArrayBase64(XmlWriter writer, Byte[] inData, int start, int count);
    internal static string FromByteArrayHex(Byte[] value);
    internal static string FromEnum(long val, String[] vals, Int64[] ids, string typeName);
    internal static object ToDefaultValue(string value, string formatter);
    internal static DateTime ToDateTime(string value);
    internal static DateTime ToDateTime(string value, String[] formats);
    internal static DateTime ToDate(string value);
    internal static DateTime ToTime(string value);
    internal static char ToChar(string value);
    internal static string ToXmlName(string value);
    internal static string ToXmlNCName(string value);
    internal static string ToXmlNmToken(string value);
    internal static string ToXmlNmTokens(string value);
    internal static Byte[] ToByteArrayBase64(string value);
    internal static Byte[] ToByteArrayHex(string value);
    internal static long ToEnum(string val, Hashtable vals, string typeName, bool validate);
}
public class System.Xml.Serialization.XmlDeserializationEvents : ValueType {
    private XmlNodeEventHandler onUnknownNode;
    private XmlAttributeEventHandler onUnknownAttribute;
    private XmlElementEventHandler onUnknownElement;
    private UnreferencedObjectEventHandler onUnreferencedObject;
    internal object sender;
    public XmlNodeEventHandler OnUnknownNode { get; public set; }
    public XmlAttributeEventHandler OnUnknownAttribute { get; public set; }
    public XmlElementEventHandler OnUnknownElement { get; public set; }
    public UnreferencedObjectEventHandler OnUnreferencedObject { get; public set; }
    public XmlNodeEventHandler get_OnUnknownNode();
    public void set_OnUnknownNode(XmlNodeEventHandler value);
    public XmlAttributeEventHandler get_OnUnknownAttribute();
    public void set_OnUnknownAttribute(XmlAttributeEventHandler value);
    public XmlElementEventHandler get_OnUnknownElement();
    public void set_OnUnknownElement(XmlElementEventHandler value);
    public UnreferencedObjectEventHandler get_OnUnreferencedObject();
    public void set_OnUnreferencedObject(UnreferencedObjectEventHandler value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlElementAttribute : Attribute {
    public Type Type { get; public set; }
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public string DataType { get; public set; }
    public bool IsNullable { get; public set; }
    internal bool IsNullableSpecified { get; }
    public XmlSchemaForm Form { get; public set; }
    public int Order { get; public set; }
    public XmlElementAttribute(string elementName);
    public XmlElementAttribute(Type type);
    public XmlElementAttribute(string elementName, Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    internal bool get_IsNullableSpecified();
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public int get_Order();
    public void set_Order(int value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlElementAttributes : CollectionBase {
    public XmlElementAttribute Item { get; public set; }
    public XmlElementAttribute get_Item(int index);
    public void set_Item(int index, XmlElementAttribute value);
    public int Add(XmlElementAttribute attribute);
    public void Insert(int index, XmlElementAttribute attribute);
    public int IndexOf(XmlElementAttribute attribute);
    public bool Contains(XmlElementAttribute attribute);
    public void Remove(XmlElementAttribute attribute);
    public void CopyTo(XmlElementAttribute[] array, int index);
}
public class System.Xml.Serialization.XmlElementEventArgs : EventArgs {
    public object ObjectBeingDeserialized { get; }
    public XmlElement Element { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string ExpectedElements { get; }
    internal XmlElementEventArgs(XmlElement elem, int lineNumber, int linePosition, object o, string qnames);
    public object get_ObjectBeingDeserialized();
    public XmlElement get_Element();
    public int get_LineNumber();
    public int get_LinePosition();
    public string get_ExpectedElements();
}
public class System.Xml.Serialization.XmlElementEventHandler : MulticastDelegate {
    public XmlElementEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlElementEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlElementEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("256")]
public class System.Xml.Serialization.XmlEnumAttribute : Attribute {
    public string Name { get; public set; }
    public XmlEnumAttribute(string name);
    public string get_Name();
    public void set_Name(string value);
}
internal class System.Xml.Serialization.XmlFacetComparer : object {
    public sealed virtual int Compare(object o1, object o2);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("1100")]
public class System.Xml.Serialization.XmlIncludeAttribute : Attribute {
    public Type Type { get; public set; }
    public XmlIncludeAttribute(Type type);
    public Type get_Type();
    public void set_Type(Type value);
}
public abstract class System.Xml.Serialization.XmlMapping : object {
    internal ElementAccessor Accessor { get; }
    internal TypeScope Scope { get; }
    public string ElementName { get; }
    public string XsdElementName { get; }
    public string Namespace { get; }
    internal bool GenerateSerializer { get; internal set; }
    internal bool IsReadable { get; }
    internal bool IsWriteable { get; }
    internal bool IsSoap { get; internal set; }
    internal string Key { get; }
    internal XmlMapping(TypeScope scope, ElementAccessor accessor);
    internal XmlMapping(TypeScope scope, ElementAccessor accessor, XmlMappingAccess access);
    internal ElementAccessor get_Accessor();
    internal TypeScope get_Scope();
    public string get_ElementName();
    public string get_XsdElementName();
    public string get_Namespace();
    internal bool get_GenerateSerializer();
    internal void set_GenerateSerializer(bool value);
    internal bool get_IsReadable();
    internal bool get_IsWriteable();
    internal bool get_IsSoap();
    internal void set_IsSoap(bool value);
    public void SetKey(string key);
    internal void SetKeyInternal(string key);
    internal static string GenerateKey(Type type, XmlRootAttribute root, string ns);
    internal string get_Key();
    internal void CheckShallow();
    internal static bool IsShallow(XmlMapping[] mappings);
}
[FlagsAttribute]
public enum System.Xml.Serialization.XmlMappingAccess : Enum {
    public int value__;
    public static XmlMappingAccess None;
    public static XmlMappingAccess Read;
    public static XmlMappingAccess Write;
}
public class System.Xml.Serialization.XmlMemberMapping : object {
    internal MemberMapping Mapping { get; }
    internal Accessor Accessor { get; }
    public bool Any { get; }
    public string ElementName { get; }
    public string XsdElementName { get; }
    public string Namespace { get; }
    public string MemberName { get; }
    public string TypeName { get; }
    public string TypeNamespace { get; }
    public string TypeFullName { get; }
    public bool CheckSpecified { get; }
    internal bool IsNullable { get; }
    internal XmlMemberMapping(MemberMapping mapping);
    internal MemberMapping get_Mapping();
    internal Accessor get_Accessor();
    public bool get_Any();
    public string get_ElementName();
    public string get_XsdElementName();
    public string get_Namespace();
    public string get_MemberName();
    public string get_TypeName();
    public string get_TypeNamespace();
    public string get_TypeFullName();
    public bool get_CheckSpecified();
    internal bool get_IsNullable();
    public string GenerateTypeName(CodeDomProvider codeProvider);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlMembersMapping : XmlMapping {
    public string TypeName { get; }
    public string TypeNamespace { get; }
    public XmlMemberMapping Item { get; }
    public int Count { get; }
    internal XmlMembersMapping(TypeScope scope, ElementAccessor accessor, XmlMappingAccess access);
    public string get_TypeName();
    public string get_TypeNamespace();
    public XmlMemberMapping get_Item(int index);
    public int get_Count();
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlNamespaceDeclarationsAttribute : Attribute {
}
public class System.Xml.Serialization.XmlNodeEventArgs : EventArgs {
    public object ObjectBeingDeserialized { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Text { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal XmlNodeEventArgs(XmlNode xmlNode, int lineNumber, int linePosition, object o);
    public object get_ObjectBeingDeserialized();
    public XmlNodeType get_NodeType();
    public string get_Name();
    public string get_LocalName();
    public string get_NamespaceURI();
    public string get_Text();
    public int get_LineNumber();
    public int get_LinePosition();
}
public class System.Xml.Serialization.XmlNodeEventHandler : MulticastDelegate {
    public XmlNodeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlNodeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlNodeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Xml.Serialization.XmlnsAccessor : Accessor {
}
public class System.Xml.Serialization.XmlReflectionImporter : object {
    public XmlReflectionImporter(string defaultNamespace);
    public XmlReflectionImporter(XmlAttributeOverrides attributeOverrides);
    public XmlReflectionImporter(XmlAttributeOverrides attributeOverrides, string defaultNamespace);
    public void IncludeTypes(ICustomAttributeProvider provider);
    public void IncludeType(Type type);
    public XmlTypeMapping ImportTypeMapping(Type type);
    public XmlTypeMapping ImportTypeMapping(Type type, string defaultNamespace);
    public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute root);
    public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute root, string defaultNamespace);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc, bool openModel);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc, bool openModel, XmlMappingAccess access);
    internal static MethodInfo GetMethodFromSchemaProvider(XmlSchemaProviderAttribute provider, Type type);
    internal static void ValidationCallbackWithErrorCode(object sender, ValidationEventArgs args);
    internal void SetBase(SerializableMapping mapping, XmlQualifiedName baseQname);
    internal string XsdTypeName(Type type);
    internal string XsdTypeName(Type type, XmlAttributes a, string name);
    internal static XmlReflectionMember FindSpecifiedMember(string memberName, XmlReflectionMember[] reflectionMembers);
    internal static XmlTypeMapping GetTopLevelMapping(Type type, string defaultNamespace);
}
public class System.Xml.Serialization.XmlReflectionMember : object {
    public Type MemberType { get; public set; }
    public XmlAttributes XmlAttributes { get; public set; }
    public SoapAttributes SoapAttributes { get; public set; }
    public string MemberName { get; public set; }
    public bool IsReturnValue { get; public set; }
    public bool OverrideIsNullable { get; public set; }
    public Type get_MemberType();
    public void set_MemberType(Type value);
    public XmlAttributes get_XmlAttributes();
    public void set_XmlAttributes(XmlAttributes value);
    public SoapAttributes get_SoapAttributes();
    public void set_SoapAttributes(SoapAttributes value);
    public string get_MemberName();
    public void set_MemberName(string value);
    public bool get_IsReturnValue();
    public void set_IsReturnValue(bool value);
    public bool get_OverrideIsNullable();
    public void set_OverrideIsNullable(bool value);
}
[AttributeUsageAttribute("9244")]
public class System.Xml.Serialization.XmlRootAttribute : Attribute {
    public string ElementName { get; public set; }
    public string Namespace { get; public set; }
    public string DataType { get; public set; }
    public bool IsNullable { get; public set; }
    internal bool IsNullableSpecified { get; }
    internal string Key { get; }
    public XmlRootAttribute(string elementName);
    public string get_ElementName();
    public void set_ElementName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    internal bool get_IsNullableSpecified();
    internal string get_Key();
}
public class System.Xml.Serialization.XmlSchemaEnumerator : object {
    public XmlSchema Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public XmlSchemaEnumerator(XmlSchemas list);
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    public sealed virtual XmlSchema get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public class System.Xml.Serialization.XmlSchemaExporter : object {
    internal static XmlSchemaForm elementFormDefault;
    internal static XmlSchemaForm attributeFormDefault;
    public XmlSchemaExporter(XmlSchemas schemas);
    public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping);
    public XmlQualifiedName ExportTypeMapping(XmlMembersMapping xmlMembersMapping);
    public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping);
    public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping, bool exportEnclosingType);
    public string ExportAnyType(string ns);
    public string ExportAnyType(XmlMembersMapping members);
    internal static string ExportDefaultValue(TypeMapping mapping, object value);
}
public class System.Xml.Serialization.XmlSchemaImporter : SchemaImporter {
    internal bool GenerateOrder { get; }
    public XmlSchemaImporter(XmlSchemas schemas);
    public XmlSchemaImporter(XmlSchemas schemas, CodeIdentifiers typeIdentifiers);
    public XmlSchemaImporter(XmlSchemas schemas, CodeIdentifiers typeIdentifiers, CodeGenerationOptions options);
    public XmlSchemaImporter(XmlSchemas schemas, CodeGenerationOptions options, ImportContext context);
    public XmlSchemaImporter(XmlSchemas schemas, CodeGenerationOptions options, CodeDomProvider codeProvider, ImportContext context);
    public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType);
    internal bool get_GenerateOrder();
    internal TypeMapping GetDefaultMapping(TypeFlags flags);
    public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType, bool baseTypeCanBeIndirect);
    public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName);
    public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName, Type baseType);
    public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName, Type baseType, bool baseTypeCanBeIndirect);
    public XmlTypeMapping ImportTypeMapping(XmlQualifiedName name);
    public XmlMembersMapping ImportMembersMapping(XmlQualifiedName name);
    public XmlMembersMapping ImportAnyType(XmlQualifiedName typeName, string elementName);
    public XmlMembersMapping ImportMembersMapping(XmlQualifiedName[] names);
    public XmlMembersMapping ImportMembersMapping(XmlQualifiedName[] names, Type baseType, bool baseTypeCanBeIndirect);
    public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members);
    internal virtual void ImportDerivedTypes(XmlQualifiedName baseName);
    internal static bool IsMixed(XmlSchemaType type);
    internal static XmlQualifiedName BaseTypeName(XmlSchemaSimpleType dataType);
    internal string FindExtendedAnyElement(XmlSchemaAny any, bool mixed, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, SchemaImporterExtension& extension);
    internal string FindExtendedType(string name, string ns, XmlSchemaObject context, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, SchemaImporterExtension& extension);
    internal string FindExtendedType(XmlSchemaType type, XmlSchemaObject context, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, SchemaImporterExtension& extension);
}
internal class System.Xml.Serialization.XmlSchemaObjectComparer : object {
    public sealed virtual int Compare(object o1, object o2);
    internal static XmlQualifiedName NameOf(XmlSchemaObject o);
    internal static XmlQualifiedName NameOf(XmlSchemaObjectCollection items);
    internal static string Namespace(XmlSchemaObject o);
}
[AttributeUsageAttribute("1036")]
public class System.Xml.Serialization.XmlSchemaProviderAttribute : Attribute {
    public string MethodName { get; }
    public bool IsAny { get; public set; }
    public XmlSchemaProviderAttribute(string methodName);
    public string get_MethodName();
    public bool get_IsAny();
    public void set_IsAny(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlSchemas : CollectionBase {
    internal Hashtable delayedSchemas;
    internal static string xmlSchema;
    public XmlSchema Item { get; public set; }
    public XmlSchema Item { get; }
    internal SchemaObjectCache Cache { get; }
    internal Hashtable MergedSchemas { get; }
    internal Hashtable References { get; }
    internal XmlSchemaSet SchemaSet { get; }
    public bool IsCompiled { get; }
    internal static XmlSchema XsdSchema { get; }
    internal static XmlSchema XmlSchema { get; }
    public XmlSchema get_Item(int index);
    public void set_Item(int index, XmlSchema value);
    public XmlSchema get_Item(string ns);
    public IList GetSchemas(string ns);
    internal SchemaObjectCache get_Cache();
    internal Hashtable get_MergedSchemas();
    internal Hashtable get_References();
    internal XmlSchemaSet get_SchemaSet();
    internal int Add(XmlSchema schema, bool delay);
    public int Add(XmlSchema schema);
    public int Add(XmlSchema schema, Uri baseUri);
    public void Add(XmlSchemas schemas);
    public void AddReference(XmlSchema schema);
    public void Insert(int index, XmlSchema schema);
    public int IndexOf(XmlSchema schema);
    public bool Contains(XmlSchema schema);
    public bool Contains(string targetNamespace);
    public void Remove(XmlSchema schema);
    public void CopyTo(XmlSchema[] array, int index);
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnClear();
    protected virtual void OnSet(int index, object oldValue, object newValue);
    public object Find(XmlQualifiedName name, Type type);
    internal object Find(XmlQualifiedName name, Type type, bool checkCache);
    private sealed virtual override IEnumerator`1<XmlSchema> System.Collections.Generic.IEnumerable<System.Xml.Schema.XmlSchema>.GetEnumerator();
    internal static void Preprocess(XmlSchema schema);
    public static bool IsDataSet(XmlSchema schema);
    internal static XmlQualifiedName GetParentName(XmlSchemaObject item);
    internal XmlSchemaObject Find(XmlSchemaObject o, IList originals);
    public bool get_IsCompiled();
    public void Compile(ValidationEventHandler handler, bool fullCompile);
    internal static Exception CreateValidationException(XmlSchemaException exception, string message);
    internal static void IgnoreCompileErrors(object sender, ValidationEventArgs args);
    internal static XmlSchema get_XsdSchema();
    internal static XmlSchema get_XmlSchema();
    internal void SetCache(SchemaObjectCache cache, bool shareTypes);
    internal bool IsReference(XmlSchemaObject type);
}
internal class System.Xml.Serialization.XmlSerializationCodeGen : object {
    internal IndentedWriter Writer { get; }
    internal int NextMethodNumber { get; internal set; }
    internal ReflectionAwareCodeGen RaCodeGen { get; }
    internal TypeDesc StringTypeDesc { get; }
    internal TypeDesc QnameTypeDesc { get; }
    internal string ClassName { get; }
    internal string Access { get; }
    internal TypeScope[] Scopes { get; }
    internal Hashtable MethodNames { get; }
    internal Hashtable GeneratedMethods { get; }
    internal XmlSerializationCodeGen(IndentedWriter writer, TypeScope[] scopes, string access, string className);
    internal IndentedWriter get_Writer();
    internal int get_NextMethodNumber();
    internal void set_NextMethodNumber(int value);
    internal ReflectionAwareCodeGen get_RaCodeGen();
    internal TypeDesc get_StringTypeDesc();
    internal TypeDesc get_QnameTypeDesc();
    internal string get_ClassName();
    internal string get_Access();
    internal TypeScope[] get_Scopes();
    internal Hashtable get_MethodNames();
    internal Hashtable get_GeneratedMethods();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateReferencedMethods();
    internal string ReferenceMapping(TypeMapping mapping);
    internal void WriteQuotedCSharpString(string value);
    internal void GenerateHashtableGetBegin(string privateName, string publicName);
    internal void GenerateHashtableGetEnd(string privateName);
    internal void GeneratePublicMethods(string privateName, string publicName, String[] methods, XmlMapping[] xmlMappings);
    internal void GenerateSupportedTypes(Type[] types);
    internal string GenerateBaseSerializer(string baseSerializer, string readerClass, string writerClass, CodeIdentifiers classes);
    internal string GenerateTypedSerializer(string readMethod, string writeMethod, XmlMapping mapping, CodeIdentifiers classes, string baseSerializer, string readerClass, string writerClass);
    internal void GenerateSerializerContract(string className, XmlMapping[] xmlMappings, Type[] types, string readerType, String[] readMethods, string writerType, String[] writerMethods, Hashtable serializers);
    internal static bool IsWildcard(SpecialMapping mapping);
}
public class System.Xml.Serialization.XmlSerializationCollectionFixupCallback : MulticastDelegate {
    public XmlSerializationCollectionFixupCallback(object object, IntPtr method);
    public virtual void Invoke(object collection, object collectionItems);
    public virtual IAsyncResult BeginInvoke(object collection, object collectionItems, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Xml.Serialization.XmlSerializationFixupCallback : MulticastDelegate {
    public XmlSerializationFixupCallback(object object, IntPtr method);
    public virtual void Invoke(object fixup);
    public virtual IAsyncResult BeginInvoke(object fixup, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Xml.Serialization.XmlSerializationGeneratedCode : object {
    internal void Init(TempAssembly tempAssembly);
    internal void Dispose();
    internal Assembly OnAssemblyResolve(object sender, ResolveEventArgs args);
}
internal class System.Xml.Serialization.XmlSerializationILGen : object {
    internal Dictionary`2<string, Type> CreatedTypes;
    internal Dictionary`2<string, MemberInfo> memberInfos;
    protected TypeBuilder typeBuilder;
    protected CodeGenerator ilg;
    internal int NextMethodNumber { get; internal set; }
    internal ReflectionAwareILGen RaCodeGen { get; }
    internal TypeDesc StringTypeDesc { get; }
    internal TypeDesc QnameTypeDesc { get; }
    internal string ClassName { get; }
    internal TypeScope[] Scopes { get; }
    internal Hashtable MethodNames { get; }
    internal Hashtable GeneratedMethods { get; }
    internal ModuleBuilder ModuleBuilder { get; internal set; }
    internal TypeAttributes TypeAttributes { get; }
    internal XmlSerializationILGen(TypeScope[] scopes, string access, string className);
    private static XmlSerializationILGen();
    internal int get_NextMethodNumber();
    internal void set_NextMethodNumber(int value);
    internal ReflectionAwareILGen get_RaCodeGen();
    internal TypeDesc get_StringTypeDesc();
    internal TypeDesc get_QnameTypeDesc();
    internal string get_ClassName();
    internal TypeScope[] get_Scopes();
    internal Hashtable get_MethodNames();
    internal Hashtable get_GeneratedMethods();
    internal ModuleBuilder get_ModuleBuilder();
    internal void set_ModuleBuilder(ModuleBuilder value);
    internal TypeAttributes get_TypeAttributes();
    internal static Regex NewRegex(string pattern);
    internal MethodBuilder EnsureMethodBuilder(TypeBuilder typeBuilder, string methodName, MethodAttributes attributes, Type returnType, Type[] parameterTypes);
    internal MethodBuilderInfo GetMethodBuilder(string methodName);
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateReferencedMethods();
    internal string ReferenceMapping(TypeMapping mapping);
    internal FieldBuilder GenerateHashtableGetBegin(string privateName, string publicName, TypeBuilder serializerContractTypeBuilder);
    internal void GenerateHashtableGetEnd(FieldBuilder fieldBuilder);
    internal FieldBuilder GeneratePublicMethods(string privateName, string publicName, String[] methods, XmlMapping[] xmlMappings, TypeBuilder serializerContractTypeBuilder);
    internal void GenerateSupportedTypes(Type[] types, TypeBuilder serializerContractTypeBuilder);
    internal string GenerateBaseSerializer(string baseSerializer, string readerClass, string writerClass, CodeIdentifiers classes);
    internal string GenerateTypedSerializer(string readMethod, string writeMethod, XmlMapping mapping, CodeIdentifiers classes, string baseSerializer, string readerClass, string writerClass);
    internal void GenerateSerializerContract(string className, XmlMapping[] xmlMappings, Type[] types, string readerType, String[] readMethods, string writerType, String[] writerMethods, Hashtable serializers);
    internal static bool IsWildcard(SpecialMapping mapping);
    internal void ILGenLoad(string source);
    internal void ILGenLoad(string source, Type type);
}
internal class System.Xml.Serialization.XmlSerializationPrimitiveReader : XmlSerializationReader {
    internal object Read_string();
    internal object Read_int();
    internal object Read_boolean();
    internal object Read_short();
    internal object Read_long();
    internal object Read_float();
    internal object Read_double();
    internal object Read_decimal();
    internal object Read_dateTime();
    internal object Read_unsignedByte();
    internal object Read_byte();
    internal object Read_unsignedShort();
    internal object Read_unsignedInt();
    internal object Read_unsignedLong();
    internal object Read_base64Binary();
    internal object Read_guid();
    internal object Read_char();
    internal object Read_QName();
    protected virtual void InitCallbacks();
    protected virtual void InitIDs();
}
internal class System.Xml.Serialization.XmlSerializationPrimitiveWriter : XmlSerializationWriter {
    internal void Write_string(object o);
    internal void Write_int(object o);
    internal void Write_boolean(object o);
    internal void Write_short(object o);
    internal void Write_long(object o);
    internal void Write_float(object o);
    internal void Write_double(object o);
    internal void Write_decimal(object o);
    internal void Write_dateTime(object o);
    internal void Write_unsignedByte(object o);
    internal void Write_byte(object o);
    internal void Write_unsignedShort(object o);
    internal void Write_unsignedInt(object o);
    internal void Write_unsignedLong(object o);
    internal void Write_base64Binary(object o);
    internal void Write_guid(object o);
    internal void Write_char(object o);
    internal void Write_QName(object o);
    protected virtual void InitCallbacks();
}
public class System.Xml.Serialization.XmlSerializationReadCallback : MulticastDelegate {
    public XmlSerializationReadCallback(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public abstract class System.Xml.Serialization.XmlSerializationReader : XmlSerializationGeneratedCode {
    protected bool DecodeName { get; protected set; }
    protected XmlReader Reader { get; }
    protected int ReaderCount { get; }
    protected XmlDocument Document { get; }
    protected bool IsReturnValue { get; protected set; }
    private static XmlSerializationReader();
    protected abstract virtual void InitIDs();
    internal void Init(XmlReader r, XmlDeserializationEvents events, string encodingStyle, TempAssembly tempAssembly);
    protected bool get_DecodeName();
    protected void set_DecodeName(bool value);
    protected XmlReader get_Reader();
    protected int get_ReaderCount();
    protected XmlDocument get_Document();
    protected static Assembly ResolveDynamicAssembly(string assemblyFullName);
    protected XmlQualifiedName GetXsiType();
    protected object ReadTypedPrimitive(XmlQualifiedName type);
    protected object ReadTypedNull(XmlQualifiedName type);
    protected bool IsXmlnsAttribute(string name);
    protected void ParseWsdlArrayType(XmlAttribute attr);
    protected bool get_IsReturnValue();
    protected void set_IsReturnValue(bool value);
    protected bool ReadNull();
    protected bool GetNullAttr();
    protected string ReadNullableString();
    protected XmlQualifiedName ReadNullableQualifiedName();
    protected XmlQualifiedName ReadElementQualifiedName();
    protected XmlDocument ReadXmlDocument(bool wrapped);
    protected string CollapseWhitespace(string value);
    protected XmlNode ReadXmlNode(bool wrapped);
    protected static Byte[] ToByteArrayBase64(string value);
    protected Byte[] ToByteArrayBase64(bool isNull);
    protected static Byte[] ToByteArrayHex(string value);
    protected Byte[] ToByteArrayHex(bool isNull);
    protected int GetArrayLength(string name, string ns);
    protected static DateTime ToDateTime(string value);
    protected static DateTime ToDate(string value);
    protected static DateTime ToTime(string value);
    protected static char ToChar(string value);
    protected static long ToEnum(string value, Hashtable h, string typeName);
    protected static string ToXmlName(string value);
    protected static string ToXmlNCName(string value);
    protected static string ToXmlNmToken(string value);
    protected static string ToXmlNmTokens(string value);
    protected XmlQualifiedName ToXmlQualifiedName(string value);
    internal XmlQualifiedName ToXmlQualifiedName(string value, bool decodeName);
    protected void UnknownAttribute(object o, XmlAttribute attr);
    protected void UnknownAttribute(object o, XmlAttribute attr, string qnames);
    protected void UnknownElement(object o, XmlElement elem);
    protected void UnknownElement(object o, XmlElement elem, string qnames);
    protected void UnknownNode(object o);
    protected void UnknownNode(object o, string qnames);
    protected void UnreferencedObject(string id, object o);
    protected Exception CreateUnknownTypeException(XmlQualifiedName type);
    protected Exception CreateReadOnlyCollectionException(string name);
    protected Exception CreateAbstractTypeException(string name, string ns);
    protected Exception CreateInaccessibleConstructorException(string typeName);
    protected Exception CreateCtorHasSecurityException(string typeName);
    protected Exception CreateUnknownNodeException();
    protected Exception CreateUnknownConstantException(string value, Type enumType);
    protected Exception CreateInvalidCastException(Type type, object value);
    protected Exception CreateInvalidCastException(Type type, object value, string id);
    protected Exception CreateBadDerivationException(string xsdDerived, string nsDerived, string xsdBase, string nsBase, string clrDerived, string clrBase);
    protected Exception CreateMissingIXmlSerializableType(string name, string ns, string clrType);
    protected Array EnsureArrayIndex(Array a, int index, Type elementType);
    protected Array ShrinkArray(Array a, int length, Type elementType, bool isNullable);
    protected string ReadString(string value);
    protected string ReadString(string value, bool trim);
    protected IXmlSerializable ReadSerializable(IXmlSerializable serializable);
    protected IXmlSerializable ReadSerializable(IXmlSerializable serializable, bool wrappedAny);
    protected bool ReadReference(String& fixupReference);
    protected void AddTarget(string id, object o);
    protected void AddFixup(Fixup fixup);
    protected void AddFixup(CollectionFixup fixup);
    protected object GetTarget(string id);
    protected void Referenced(object o);
    protected void FixupArrayRefs(object fixup);
    protected abstract virtual void InitCallbacks();
    protected void ReadReferencedElements();
    protected object ReadReferencedElement();
    protected object ReadReferencedElement(string name, string ns);
    protected object ReadReferencingElement(String& fixupReference);
    protected object ReadReferencingElement(string name, string ns, String& fixupReference);
    protected object ReadReferencingElement(string name, string ns, bool elementCanBeType, String& fixupReference);
    protected void AddReadCallback(string name, string ns, Type type, XmlSerializationReadCallback read);
    protected void ReadEndElement();
    protected void CheckReaderCount(Int32& whileIterations, Int32& readerCount);
}
internal class System.Xml.Serialization.XmlSerializationReaderCodeGen : XmlSerializationCodeGen {
    internal Hashtable Enums { get; }
    internal XmlSerializationReaderCodeGen(IndentedWriter writer, TypeScope[] scopes, string access, string className);
    internal Hashtable get_Enums();
    internal void GenerateBegin();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateEnd();
    internal void GenerateEnd(String[] methods, XmlMapping[] xmlMappings, Type[] types);
    internal string GenerateElement(XmlMapping xmlMapping);
}
internal class System.Xml.Serialization.XmlSerializationReaderILGen : XmlSerializationILGen {
    internal Hashtable Enums { get; }
    internal XmlSerializationReaderILGen(TypeScope[] scopes, string access, string className);
    internal Hashtable get_Enums();
    internal void GenerateBegin();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateEnd(String[] methods, XmlMapping[] xmlMappings, Type[] types);
    internal string GenerateElement(XmlMapping xmlMapping);
}
public class System.Xml.Serialization.XmlSerializationWriteCallback : MulticastDelegate {
    public XmlSerializationWriteCallback(object object, IntPtr method);
    public virtual void Invoke(object o);
    public virtual IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Xml.Serialization.XmlSerializationWriter : XmlSerializationGeneratedCode {
    protected bool EscapeName { get; protected set; }
    protected XmlWriter Writer { get; protected set; }
    protected ArrayList Namespaces { get; protected set; }
    internal void Init(XmlWriter w, XmlSerializerNamespaces namespaces, string encodingStyle, string idBase, TempAssembly tempAssembly);
    protected bool get_EscapeName();
    protected void set_EscapeName(bool value);
    protected XmlWriter get_Writer();
    protected void set_Writer(XmlWriter value);
    protected ArrayList get_Namespaces();
    protected void set_Namespaces(ArrayList value);
    protected static Byte[] FromByteArrayBase64(Byte[] value);
    protected static Assembly ResolveDynamicAssembly(string assemblyFullName);
    protected static string FromByteArrayHex(Byte[] value);
    protected static string FromDateTime(DateTime value);
    protected static string FromDate(DateTime value);
    protected static string FromTime(DateTime value);
    protected static string FromChar(char value);
    protected static string FromEnum(long value, String[] values, Int64[] ids);
    protected static string FromEnum(long value, String[] values, Int64[] ids, string typeName);
    protected static string FromXmlName(string name);
    protected static string FromXmlNCName(string ncName);
    protected static string FromXmlNmToken(string nmToken);
    protected static string FromXmlNmTokens(string nmTokens);
    protected void WriteXsiType(string name, string ns);
    internal static XmlQualifiedName GetPrimitiveTypeNameInternal(Type type);
    protected void WriteTypedPrimitive(string name, string ns, object o, bool xsiType);
    protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName);
    protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName, bool ignoreEmpty);
    protected void WriteStartElement(string name);
    protected void WriteStartElement(string name, string ns);
    protected void WriteStartElement(string name, string ns, bool writePrefixed);
    protected void WriteStartElement(string name, string ns, object o);
    protected void WriteStartElement(string name, string ns, object o, bool writePrefixed);
    protected void WriteStartElement(string name, string ns, object o, bool writePrefixed, XmlSerializerNamespaces xmlns);
    protected void WriteNullTagEncoded(string name);
    protected void WriteNullTagEncoded(string name, string ns);
    protected void WriteNullTagLiteral(string name);
    protected void WriteNullTagLiteral(string name, string ns);
    protected void WriteEmptyTag(string name);
    protected void WriteEmptyTag(string name, string ns);
    protected void WriteEndElement();
    protected void WriteEndElement(object o);
    protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable);
    protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable, bool wrapped);
    protected void WriteNullableStringEncoded(string name, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteNullableStringLiteral(string name, string ns, string value);
    protected void WriteNullableStringEncodedRaw(string name, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteNullableStringEncodedRaw(string name, string ns, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteNullableStringLiteralRaw(string name, string ns, string value);
    protected void WriteNullableStringLiteralRaw(string name, string ns, Byte[] value);
    protected void WriteNullableQualifiedNameEncoded(string name, string ns, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected void WriteNullableQualifiedNameLiteral(string name, string ns, XmlQualifiedName value);
    protected void WriteElementEncoded(XmlNode node, string name, string ns, bool isNullable, bool any);
    protected void WriteElementLiteral(XmlNode node, string name, string ns, bool isNullable, bool any);
    protected Exception CreateUnknownTypeException(object o);
    protected Exception CreateUnknownTypeException(Type type);
    protected Exception CreateMismatchChoiceException(string value, string elementName, string enumValue);
    protected Exception CreateUnknownAnyElementException(string name, string ns);
    protected Exception CreateInvalidChoiceIdentifierValueException(string type, string identifier);
    protected Exception CreateChoiceIdentifierValueException(string value, string identifier, string name, string ns);
    protected Exception CreateInvalidEnumValueException(object value, string typeName);
    protected Exception CreateInvalidAnyTypeException(object o);
    protected Exception CreateInvalidAnyTypeException(Type type);
    protected void WriteReferencingElement(string n, string ns, object o);
    protected void WriteReferencingElement(string n, string ns, object o, bool isNullable);
    protected void WriteId(object o);
    protected void WriteXmlAttribute(XmlNode node);
    protected void WriteXmlAttribute(XmlNode node, object container);
    protected void WriteAttribute(string localName, string ns, string value);
    protected void WriteAttribute(string localName, string ns, Byte[] value);
    protected void WriteAttribute(string localName, string value);
    protected void WriteAttribute(string localName, Byte[] value);
    protected void WriteAttribute(string prefix, string localName, string ns, string value);
    protected void WriteValue(string value);
    protected void WriteValue(Byte[] value);
    protected void WriteStartDocument();
    protected void WriteElementString(string localName, string value);
    protected void WriteElementString(string localName, string ns, string value);
    protected void WriteElementString(string localName, string value, XmlQualifiedName xsiType);
    protected void WriteElementString(string localName, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string value);
    protected void WriteElementStringRaw(string localName, Byte[] value);
    protected void WriteElementStringRaw(string localName, string ns, string value);
    protected void WriteElementStringRaw(string localName, string ns, Byte[] value);
    protected void WriteElementStringRaw(string localName, string value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string ns, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteRpcResult(string name, string ns);
    protected void WriteElementQualifiedName(string localName, XmlQualifiedName value);
    protected void WriteElementQualifiedName(string localName, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value);
    protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected void AddWriteCallback(Type type, string typeName, string typeNs, XmlSerializationWriteCallback callback);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType, bool suppressReference);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType, bool suppressReference, bool isNullable);
    protected abstract virtual void InitCallbacks();
    protected void WriteReferencedElements();
    protected void TopLevelElement();
    protected void WriteNamespaceDeclarations(XmlSerializerNamespaces xmlns);
}
internal class System.Xml.Serialization.XmlSerializationWriterCodeGen : XmlSerializationCodeGen {
    internal XmlSerializationWriterCodeGen(IndentedWriter writer, TypeScope[] scopes, string access, string className);
    internal void GenerateBegin();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal void GenerateEnd();
    internal string GenerateElement(XmlMapping xmlMapping);
}
internal class System.Xml.Serialization.XmlSerializationWriterILGen : XmlSerializationILGen {
    internal XmlSerializationWriterILGen(TypeScope[] scopes, string access, string className);
    internal void GenerateBegin();
    internal virtual void GenerateMethod(TypeMapping mapping);
    internal Type GenerateEnd();
    internal string GenerateElement(XmlMapping xmlMapping);
}
public class System.Xml.Serialization.XmlSerializer : object {
    public XmlSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace);
    public XmlSerializer(Type type, XmlRootAttribute root);
    public XmlSerializer(Type type, Type[] extraTypes);
    public XmlSerializer(Type type, XmlAttributeOverrides overrides);
    public XmlSerializer(XmlTypeMapping xmlTypeMapping);
    public XmlSerializer(Type type);
    public XmlSerializer(Type type, string defaultNamespace);
    public XmlSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future release of the .NET Framework. Please use a XmlSerializer constructor overload which does not take an Evidence parameter. See http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")]
public XmlSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location, Evidence evidence);
    private static XmlSerializer();
    internal static TempAssembly GenerateTempAssembly(XmlMapping xmlMapping);
    internal static TempAssembly GenerateTempAssembly(XmlMapping xmlMapping, Type type, string defaultNamespace);
    internal static TempAssembly GenerateTempAssembly(XmlMapping xmlMapping, Type type, string defaultNamespace, string location, Evidence evidence);
    public void Serialize(TextWriter textWriter, object o);
    public void Serialize(TextWriter textWriter, object o, XmlSerializerNamespaces namespaces);
    public void Serialize(Stream stream, object o);
    public void Serialize(Stream stream, object o, XmlSerializerNamespaces namespaces);
    public void Serialize(XmlWriter xmlWriter, object o);
    public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces);
    public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle);
    public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle, string id);
    public object Deserialize(Stream stream);
    public object Deserialize(TextReader textReader);
    public object Deserialize(XmlReader xmlReader);
    public object Deserialize(XmlReader xmlReader, XmlDeserializationEvents events);
    public object Deserialize(XmlReader xmlReader, string encodingStyle);
    public object Deserialize(XmlReader xmlReader, string encodingStyle, XmlDeserializationEvents events);
    public virtual bool CanDeserialize(XmlReader xmlReader);
    public static XmlSerializer[] FromMappings(XmlMapping[] mappings);
    public static XmlSerializer[] FromMappings(XmlMapping[] mappings, Type type);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of FromMappings which does not take an Evidence parameter. See http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")]
public static XmlSerializer[] FromMappings(XmlMapping[] mappings, Evidence evidence);
    public static Assembly GenerateSerializer(Type[] types, XmlMapping[] mappings);
    public static Assembly GenerateSerializer(Type[] types, XmlMapping[] mappings, CompilerParameters parameters);
    public static XmlSerializer[] FromTypes(Type[] types);
    public static string GetXmlSerializerAssemblyName(Type type);
    public static string GetXmlSerializerAssemblyName(Type type, string defaultNamespace);
    public void add_UnknownNode(XmlNodeEventHandler value);
    public void remove_UnknownNode(XmlNodeEventHandler value);
    public void add_UnknownAttribute(XmlAttributeEventHandler value);
    public void remove_UnknownAttribute(XmlAttributeEventHandler value);
    public void add_UnknownElement(XmlElementEventHandler value);
    public void remove_UnknownElement(XmlElementEventHandler value);
    public void add_UnreferencedObject(UnreferencedObjectEventHandler value);
    public void remove_UnreferencedObject(UnreferencedObjectEventHandler value);
    protected virtual XmlSerializationReader CreateReader();
    protected virtual object Deserialize(XmlSerializationReader reader);
    protected virtual XmlSerializationWriter CreateWriter();
    protected virtual void Serialize(object o, XmlSerializationWriter writer);
    internal void SetTempAssembly(TempAssembly tempAssembly, XmlMapping mapping);
}
[AttributeUsageAttribute("1052")]
public class System.Xml.Serialization.XmlSerializerAssemblyAttribute : Attribute {
    public string CodeBase { get; public set; }
    public string AssemblyName { get; public set; }
    public XmlSerializerAssemblyAttribute(string assemblyName);
    public XmlSerializerAssemblyAttribute(string assemblyName, string codeBase);
    public string get_CodeBase();
    public void set_CodeBase(string value);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
}
internal class System.Xml.Serialization.XmlSerializerCompilerParameters : object {
    internal bool IsNeedTempDirAccess { get; }
    internal CompilerParameters CodeDomParameters { get; }
    internal bool get_IsNeedTempDirAccess();
    internal CompilerParameters get_CodeDomParameters();
    internal static XmlSerializerCompilerParameters Create(string location);
    internal static XmlSerializerCompilerParameters Create(CompilerParameters parameters, bool needTempDirAccess);
}
public class System.Xml.Serialization.XmlSerializerFactory : object {
    private static XmlSerializerFactory();
    public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace);
    public XmlSerializer CreateSerializer(Type type, XmlRootAttribute root);
    public XmlSerializer CreateSerializer(Type type, Type[] extraTypes);
    public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides);
    public XmlSerializer CreateSerializer(XmlTypeMapping xmlTypeMapping);
    public XmlSerializer CreateSerializer(Type type);
    public XmlSerializer CreateSerializer(Type type, string defaultNamespace);
    public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location);
    [ObsoleteAttribute("This method is obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateSerializer which does not take an Evidence parameter. See http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")]
public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location, Evidence evidence);
}
public abstract class System.Xml.Serialization.XmlSerializerImplementation : object {
    public XmlSerializationReader Reader { get; }
    public XmlSerializationWriter Writer { get; }
    public Hashtable ReadMethods { get; }
    public Hashtable WriteMethods { get; }
    public Hashtable TypedSerializers { get; }
    public virtual XmlSerializationReader get_Reader();
    public virtual XmlSerializationWriter get_Writer();
    public virtual Hashtable get_ReadMethods();
    public virtual Hashtable get_WriteMethods();
    public virtual Hashtable get_TypedSerializers();
    public virtual bool CanSerialize(Type type);
    public virtual XmlSerializer GetSerializer(Type type);
}
public class System.Xml.Serialization.XmlSerializerNamespaces : object {
    public int Count { get; }
    internal ArrayList NamespaceList { get; }
    internal Hashtable Namespaces { get; internal set; }
    public XmlSerializerNamespaces(XmlSerializerNamespaces namespaces);
    public XmlSerializerNamespaces(XmlQualifiedName[] namespaces);
    public void Add(string prefix, string ns);
    internal void AddInternal(string prefix, string ns);
    public XmlQualifiedName[] ToArray();
    public int get_Count();
    internal ArrayList get_NamespaceList();
    internal Hashtable get_Namespaces();
    internal void set_Namespaces(Hashtable value);
    internal string LookupPrefix(string ns);
}
[AttributeUsageAttribute("1")]
public class System.Xml.Serialization.XmlSerializerVersionAttribute : Attribute {
    public string ParentAssemblyId { get; public set; }
    public string Version { get; public set; }
    public string Namespace { get; public set; }
    public Type Type { get; public set; }
    public XmlSerializerVersionAttribute(Type type);
    public string get_ParentAssemblyId();
    public void set_ParentAssemblyId(string value);
    public string get_Version();
    public void set_Version(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public Type get_Type();
    public void set_Type(Type value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlTextAttribute : Attribute {
    public Type Type { get; public set; }
    public string DataType { get; public set; }
    public XmlTextAttribute(Type type);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_DataType();
    public void set_DataType(string value);
}
[AttributeUsageAttribute("1052")]
public class System.Xml.Serialization.XmlTypeAttribute : Attribute {
    public bool AnonymousType { get; public set; }
    public bool IncludeInSchema { get; public set; }
    public string TypeName { get; public set; }
    public string Namespace { get; public set; }
    public XmlTypeAttribute(string typeName);
    public bool get_AnonymousType();
    public void set_AnonymousType(bool value);
    public bool get_IncludeInSchema();
    public void set_IncludeInSchema(bool value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
public class System.Xml.Serialization.XmlTypeMapping : XmlMapping {
    internal TypeMapping Mapping { get; }
    public string TypeName { get; }
    public string TypeFullName { get; }
    public string XsdTypeName { get; }
    public string XsdTypeNamespace { get; }
    internal XmlTypeMapping(TypeScope scope, ElementAccessor accessor);
    internal TypeMapping get_Mapping();
    public string get_TypeName();
    public string get_TypeFullName();
    public string get_XsdTypeName();
    public string get_XsdTypeNamespace();
}
internal enum System.Xml.TernaryTreeByte : Enum {
    public int value__;
    public static TernaryTreeByte characterByte;
    public static TernaryTreeByte leftTree;
    public static TernaryTreeByte rightTree;
    public static TernaryTreeByte data;
}
internal class System.Xml.TernaryTreeReadOnly : object {
    public TernaryTreeReadOnly(Byte[] nodeBuffer);
    public byte FindCaseInsensitiveString(string stringToFind);
}
internal class System.Xml.TextEncodedRawTextWriter : XmlEncodedRawTextWriter {
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public TextEncodedRawTextWriter(TextWriter writer, XmlWriterSettings settings);
    public TextEncodedRawTextWriter(Stream stream, XmlWriterSettings settings);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string textBlock);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
}
internal class System.Xml.TextUtf8RawTextWriter : XmlUtf8RawTextWriter {
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public TextUtf8RawTextWriter(Stream stream, XmlWriterSettings settings);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string textBlock);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
}
internal enum System.Xml.TriState : Enum {
    public int value__;
    public static TriState Unknown;
    public static TriState False;
    public static TriState True;
}
internal abstract class System.Xml.Ucs4Decoder : Decoder {
    internal Byte[] lastBytes;
    internal int lastBytesCount;
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    internal abstract virtual int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed);
    internal void Ucs4ToUTF16(UInt32 code, Char[] chars, int charIndex);
}
internal class System.Xml.Ucs4Decoder1234 : Ucs4Decoder {
    internal virtual int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal class System.Xml.Ucs4Decoder2143 : Ucs4Decoder {
    internal virtual int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal class System.Xml.Ucs4Decoder3412 : Ucs4Decoder {
    internal virtual int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal class System.Xml.Ucs4Decoder4321 : Ucs4Decoder {
    internal virtual int GetFullChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal class System.Xml.Ucs4Encoding : Encoding {
    internal Ucs4Decoder ucs4Decoder;
    public string WebName { get; }
    public int CodePage { get; }
    internal static Encoding UCS4_Littleendian { get; }
    internal static Encoding UCS4_Bigendian { get; }
    internal static Encoding UCS4_2143 { get; }
    internal static Encoding UCS4_3412 { get; }
    public virtual string get_WebName();
    public virtual Decoder GetDecoder();
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetByteCount(Char[] chars);
    public virtual Byte[] GetBytes(string s);
    public virtual int GetBytes(Char[] chars, int charIndex, int charCount, Byte[] bytes, int byteIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual int get_CodePage();
    public virtual int GetCharCount(Byte[] bytes);
    public virtual Encoder GetEncoder();
    internal static Encoding get_UCS4_Littleendian();
    internal static Encoding get_UCS4_Bigendian();
    internal static Encoding get_UCS4_2143();
    internal static Encoding get_UCS4_3412();
}
internal class System.Xml.Ucs4Encoding1234 : Ucs4Encoding {
    public string EncodingName { get; }
    public virtual string get_EncodingName();
    public virtual Byte[] GetPreamble();
}
internal class System.Xml.Ucs4Encoding2143 : Ucs4Encoding {
    public string EncodingName { get; }
    public virtual string get_EncodingName();
    public virtual Byte[] GetPreamble();
}
internal class System.Xml.Ucs4Encoding3412 : Ucs4Encoding {
    public string EncodingName { get; }
    public virtual string get_EncodingName();
    public virtual Byte[] GetPreamble();
}
internal class System.Xml.Ucs4Encoding4321 : Ucs4Encoding {
    public string EncodingName { get; }
    public virtual string get_EncodingName();
    public virtual Byte[] GetPreamble();
}
internal class System.Xml.UTF16Decoder : Decoder {
    public UTF16Decoder(bool bigEndian);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count, bool flush);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual void Convert(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, int charCount, bool flush, Int32& bytesUsed, Int32& charsUsed, Boolean& completed);
}
internal static class System.Xml.ValidateNames : object {
    private static ValidateNames();
    internal static int ParseNmtoken(string s, int offset);
    internal static int ParseNmtokenNoNamespaces(string s, int offset);
    internal static bool IsNmtokenNoNamespaces(string s);
    internal static int ParseNameNoNamespaces(string s, int offset);
    internal static bool IsNameNoNamespaces(string s);
    internal static int ParseNCName(string s, int offset);
    internal static int ParseNCName(string s);
    internal static string ParseNCNameThrow(string s);
    internal static int ParseQName(string s, int offset, Int32& colonOffset);
    internal static void ParseQNameThrow(string s, String& prefix, String& localName);
    internal static void ParseNameTestThrow(string s, String& prefix, String& localName);
    internal static void ThrowInvalidName(string s, int offsetStartChar, int offsetBadChar);
    internal static Exception GetInvalidNameException(string s, int offsetStartChar, int offsetBadChar);
    internal static bool StartsWithXml(string s);
    internal static bool IsReservedNamespace(string s);
    internal static void ValidateNameThrow(string prefix, string localName, string ns, XPathNodeType nodeKind, Flags flags);
    internal static bool ValidateName(string prefix, string localName, string ns, XPathNodeType nodeKind, Flags flags);
    internal static void SplitQName(string name, String& prefix, String& lname);
}
internal class System.Xml.ValidatingReaderNodeData : object {
    public string LocalName { get; public set; }
    public string Namespace { get; public set; }
    public string Prefix { get; public set; }
    public int Depth { get; public set; }
    public string RawValue { get; public set; }
    public string OriginalStringValue { get; public set; }
    public XmlNodeType NodeType { get; public set; }
    public AttributePSVIInfo AttInfo { get; public set; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public ValidatingReaderNodeData(XmlNodeType nodeType);
    public string get_LocalName();
    public void set_LocalName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public string GetAtomizedNameWPrefix(XmlNameTable nameTable);
    public int get_Depth();
    public void set_Depth(int value);
    public string get_RawValue();
    public void set_RawValue(string value);
    public string get_OriginalStringValue();
    public void set_OriginalStringValue(string value);
    public XmlNodeType get_NodeType();
    public void set_NodeType(XmlNodeType value);
    public AttributePSVIInfo get_AttInfo();
    public void set_AttInfo(AttributePSVIInfo value);
    public int get_LineNumber();
    public int get_LinePosition();
    internal void Clear(XmlNodeType nodeType);
    internal void ClearName();
    internal void SetLineInfo(int lineNo, int linePos);
    internal void SetLineInfo(IXmlLineInfo lineInfo);
    internal void SetItemData(string localName, string prefix, string ns, string value);
    internal void SetItemData(string localName, string prefix, string ns, int depth);
    internal void SetItemData(string value);
    internal void SetItemData(string value, string originalStringValue);
}
public enum System.Xml.ValidationType : Enum {
    public int value__;
    public static ValidationType None;
    [ObsoleteAttribute("Validation type should be specified as DTD or Schema.")]
public static ValidationType Auto;
    public static ValidationType DTD;
    [ObsoleteAttribute("XDR Validation through XmlValidatingReader is obsoleted")]
public static ValidationType XDR;
    public static ValidationType Schema;
}
public enum System.Xml.WhitespaceHandling : Enum {
    public int value__;
    public static WhitespaceHandling All;
    public static WhitespaceHandling Significant;
    public static WhitespaceHandling None;
}
public enum System.Xml.WriteState : Enum {
    public int value__;
    public static WriteState Start;
    public static WriteState Prolog;
    public static WriteState Element;
    public static WriteState Attribute;
    public static WriteState Content;
    public static WriteState Closed;
    public static WriteState Error;
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.XmlAsyncCheckReader : XmlReader {
    internal XmlReader CoreReader { get; }
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool HasAttributes { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    internal IDtdInfo DtdInfo { get; }
    public XmlAsyncCheckReader(XmlReader reader);
    internal XmlReader get_CoreReader();
    public static XmlAsyncCheckReader CreateAsyncCheckWrapper(XmlReader reader);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAsObject();
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI);
    public virtual bool ReadElementContentAsBoolean();
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    public virtual DateTime ReadElementContentAsDateTime();
    public virtual DateTime ReadElementContentAsDateTime(string localName, string namespaceURI);
    public virtual DateTimeOffset ReadContentAsDateTimeOffset();
    public virtual double ReadElementContentAsDouble();
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI);
    public virtual float ReadElementContentAsFloat();
    public virtual float ReadElementContentAsFloat(string localName, string namespaceURI);
    public virtual decimal ReadElementContentAsDecimal();
    public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI);
    public virtual int ReadElementContentAsInt();
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI);
    public virtual long ReadElementContentAsLong();
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI);
    public virtual string ReadElementContentAsString();
    public virtual string ReadElementContentAsString(string localName, string namespaceURI);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual string ReadString();
    public virtual XmlNodeType MoveToContent();
    public virtual void ReadStartElement();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localname, string ns);
    public virtual string ReadElementString();
    public virtual string ReadElementString(string name);
    public virtual string ReadElementString(string localname, string ns);
    public virtual void ReadEndElement();
    public virtual bool IsStartElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localname, string ns);
    public virtual bool ReadToFollowing(string name);
    public virtual bool ReadToFollowing(string localName, string namespaceURI);
    public virtual bool ReadToDescendant(string name);
    public virtual bool ReadToDescendant(string localName, string namespaceURI);
    public virtual bool ReadToNextSibling(string name);
    public virtual bool ReadToNextSibling(string localName, string namespaceURI);
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual XmlReader ReadSubtree();
    public virtual bool get_HasAttributes();
    protected virtual void Dispose(bool disposing);
    internal virtual XmlNamespaceManager get_NamespaceManager();
    internal virtual IDtdInfo get_DtdInfo();
    public virtual Task`1<string> GetValueAsync();
    public virtual Task`1<object> ReadContentAsObjectAsync();
    public virtual Task`1<string> ReadContentAsStringAsync();
    public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<object> ReadElementContentAsObjectAsync();
    public virtual Task`1<string> ReadElementContentAsStringAsync();
    public virtual Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<bool> ReadAsync();
    public virtual Task SkipAsync();
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    public virtual Task`1<XmlNodeType> MoveToContentAsync();
    public virtual Task`1<string> ReadInnerXmlAsync();
    public virtual Task`1<string> ReadOuterXmlAsync();
}
internal class System.Xml.XmlAsyncCheckReaderWithLineInfo : XmlAsyncCheckReader {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XmlAsyncCheckReaderWithLineInfo(XmlReader reader);
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
}
internal class System.Xml.XmlAsyncCheckReaderWithLineInfoNS : XmlAsyncCheckReaderWithLineInfo {
    public XmlAsyncCheckReaderWithLineInfoNS(XmlReader reader);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
internal class System.Xml.XmlAsyncCheckReaderWithLineInfoNSSchema : XmlAsyncCheckReaderWithLineInfoNS {
    private XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.Validity { get; }
    private bool System.Xml.Schema.IXmlSchemaInfo.IsDefault { get; }
    private bool System.Xml.Schema.IXmlSchemaInfo.IsNil { get; }
    private XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.MemberType { get; }
    private XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.SchemaType { get; }
    private XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.SchemaElement { get; }
    private XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute { get; }
    public XmlAsyncCheckReaderWithLineInfoNSSchema(XmlReader reader);
    private sealed virtual override XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.get_Validity();
    private sealed virtual override bool System.Xml.Schema.IXmlSchemaInfo.get_IsDefault();
    private sealed virtual override bool System.Xml.Schema.IXmlSchemaInfo.get_IsNil();
    private sealed virtual override XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.get_MemberType();
    private sealed virtual override XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.get_SchemaType();
    private sealed virtual override XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.get_SchemaElement();
    private sealed virtual override XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.get_SchemaAttribute();
}
internal class System.Xml.XmlAsyncCheckReaderWithNS : XmlAsyncCheckReader {
    public XmlAsyncCheckReaderWithNS(XmlReader reader);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
internal class System.Xml.XmlAsyncCheckWriter : XmlWriter {
    internal XmlWriter CoreWriter { get; }
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public XmlAsyncCheckWriter(XmlWriter writer);
    internal XmlWriter get_CoreWriter();
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual WriteState get_WriteState();
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    public virtual void WriteNode(XPathNavigator navigator, bool defattr);
    protected virtual void Dispose(bool disposing);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteEndAttributeAsync();
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task WriteBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task FlushAsync();
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XPathNavigator navigator, bool defattr);
}
public class System.Xml.XmlAttribute : XmlNode {
    internal int LocalNameHash { get; }
    internal XmlName XmlName { get; internal set; }
    public XmlNode ParentNode { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; public set; }
    public XmlNodeType NodeType { get; }
    public XmlDocument OwnerDocument { get; }
    public string Value { get; public set; }
    public IXmlSchemaInfo SchemaInfo { get; }
    unknown string InnerText {public set; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public bool Specified { get; }
    public XmlElement OwnerElement { get; }
    unknown string InnerXml {public set; }
    public string BaseURI { get; }
    internal XmlSpace XmlSpace { get; }
    internal string XmlLang { get; }
    internal XPathNodeType XPNodeType { get; }
    internal string XPLocalName { get; }
    internal bool IsNamespace { get; }
    internal XmlAttribute(XmlName name, XmlDocument doc);
    protected internal XmlAttribute(string prefix, string localName, string namespaceURI, XmlDocument doc);
    internal int get_LocalNameHash();
    internal XmlName get_XmlName();
    internal void set_XmlName(XmlName value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual XmlNode get_ParentNode();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlDocument get_OwnerDocument();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual void set_InnerText(string value);
    internal bool PrepareOwnerElementInElementIdAttrMap();
    internal void ResetOwnerElementInElementIdAttrMap(string oldInnerText);
    internal virtual bool get_IsContainer();
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual bool get_Specified();
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode PrependChild(XmlNode newChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    public virtual XmlElement get_OwnerElement();
    public virtual void set_InnerXml(string value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual string get_BaseURI();
    internal virtual void SetParent(XmlNode node);
    internal virtual XmlSpace get_XmlSpace();
    internal virtual string get_XmlLang();
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual string get_XPLocalName();
    internal bool get_IsNamespace();
}
[DefaultMemberAttribute("ItemOf")]
public class System.Xml.XmlAttributeCollection : XmlNamedNodeMap {
    public XmlAttribute ItemOf { get; }
    public XmlAttribute ItemOf { get; }
    public XmlAttribute ItemOf { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    internal XmlAttributeCollection(XmlNode parent);
    public XmlAttribute get_ItemOf(int i);
    public XmlAttribute get_ItemOf(string name);
    public XmlAttribute get_ItemOf(string localName, string namespaceURI);
    internal int FindNodeOffset(XmlAttribute node);
    internal int FindNodeOffsetNS(XmlAttribute node);
    public virtual XmlNode SetNamedItem(XmlNode node);
    public XmlAttribute Prepend(XmlAttribute node);
    public XmlAttribute Append(XmlAttribute node);
    public XmlAttribute InsertBefore(XmlAttribute newNode, XmlAttribute refNode);
    public XmlAttribute InsertAfter(XmlAttribute newNode, XmlAttribute refNode);
    public XmlAttribute Remove(XmlAttribute node);
    public XmlAttribute RemoveAt(int i);
    public void RemoveAll();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    public void CopyTo(XmlAttribute[] array, int index);
    internal virtual XmlNode AddNode(XmlNode node);
    internal virtual XmlNode InsertNodeAt(int i, XmlNode node);
    internal virtual XmlNode RemoveNodeAt(int i);
    internal void Detach(XmlAttribute attr);
    internal void InsertParentIntoElementIdAttrMap(XmlAttribute attr);
    internal void RemoveParentFromElementIdAttrMap(XmlAttribute attr);
    internal int RemoveDuplicateAttribute(XmlAttribute attr);
    internal bool PrepareParentInElementIdAttrMap(string attrPrefix, string attrLocalName);
    internal void ResetParentInElementIdAttrMap(string oldVal, string newVal);
    internal XmlAttribute InternalAppendAttribute(XmlAttribute node);
}
internal class System.Xml.XmlAutoDetectWriter : XmlRawWriter {
    public OnRemoveWriter OnRemoveWriterEvent { get; public set; }
    public XmlWriterSettings Settings { get; }
    internal IXmlNamespaceResolver NamespaceResolver { get; internal set; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public XmlAutoDetectWriter(TextWriter textWriter, XmlWriterSettings writerSettings);
    public XmlAutoDetectWriter(Stream strm, XmlWriterSettings writerSettings);
    public sealed virtual OnRemoveWriter get_OnRemoveWriterEvent();
    public sealed virtual void set_OnRemoveWriterEvent(OnRemoveWriter value);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    internal virtual IXmlNamespaceResolver get_NamespaceResolver();
    internal virtual void set_NamespaceResolver(IXmlNamespaceResolver value);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
}
internal class System.Xml.XmlCachedStream : MemoryStream {
    internal XmlCachedStream(Uri uri, Stream stream);
}
public class System.Xml.XmlCDataSection : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    internal XPathNodeType XPNodeType { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    protected internal XmlCDataSection(string data, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
public abstract class System.Xml.XmlCharacterData : XmlLinkedNode {
    public string Value { get; public set; }
    public string InnerText { get; public set; }
    public string Data { get; public set; }
    public int Length { get; }
    protected internal XmlCharacterData(string data, XmlDocument doc);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_Data();
    public virtual void set_Data(string value);
    public virtual int get_Length();
    public virtual string Substring(int offset, int count);
    public virtual void AppendData(string strData);
    public virtual void InsertData(int offset, string strData);
    public virtual void DeleteData(int offset, int count);
    public virtual void ReplaceData(int offset, int count, string strData);
    internal bool CheckOnData(string data);
    internal bool DecideXPNodeTypeForTextNodes(XmlNode node, XPathNodeType& xnt);
}
internal class System.Xml.XmlCharCheckingReader : XmlWrappingReader {
    public XmlReaderSettings Settings { get; }
    public ReadState ReadState { get; }
    public bool CanReadBinaryContent { get; }
    internal XmlCharCheckingReader(XmlReader reader, bool checkCharacters, bool ignoreWhitespace, bool ignoreComments, bool ignorePis, DtdProcessing dtdProcessing);
    public virtual XmlReaderSettings get_Settings();
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual ReadState get_ReadState();
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadAsync>d__1")]
public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadContentAsBase64Async>d__1")]
public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadContentAsBinHexAsync>d__1")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadElementContentAsBase64Async>d__1")]
public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingReader/<ReadElementContentAsBinHexAsync>d__1")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
}
internal class System.Xml.XmlCharCheckingReaderWithNS : XmlCharCheckingReader {
    internal IXmlNamespaceResolver readerAsNSResolver;
    internal XmlCharCheckingReaderWithNS(XmlReader reader, IXmlNamespaceResolver readerAsNSResolver, bool checkCharacters, bool ignoreWhitespace, bool ignoreComments, bool ignorePis, DtdProcessing dtdProcessing);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
internal class System.Xml.XmlCharCheckingWriter : XmlWrappingWriter {
    public XmlWriterSettings Settings { get; }
    internal XmlCharCheckingWriter(XmlWriter baseWriter, bool checkValues, bool checkNames, bool replaceNewLines, string newLineChars);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlCharCheckingWriter/<WriteCDataAsync>d__1")]
public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    public virtual Task WriteQualifiedNameAsync(string localName, string ns);
}
internal class System.Xml.XmlCharType : ValueType {
    internal static int SurHighStart;
    internal static int SurHighEnd;
    internal static int SurLowStart;
    internal static int SurLowEnd;
    internal static int SurMask;
    internal static int fWhitespace;
    internal static int fLetter;
    internal static int fNCStartNameSC;
    internal static int fNCNameSC;
    internal static int fCharData;
    internal static int fNCNameXml4e;
    internal static int fText;
    internal static int fAttrValue;
    private static string s_PublicIdBitmap;
    private static UInt32 CharPropertiesSize;
    internal Byte* charProperties;
    public static XmlCharType Instance { get; }
    public static XmlCharType get_Instance();
    public bool IsWhiteSpace(char ch);
    public bool IsExtender(char ch);
    public bool IsNCNameSingleChar(char ch);
    public bool IsStartNCNameSingleChar(char ch);
    public bool IsNameSingleChar(char ch);
    public bool IsStartNameSingleChar(char ch);
    public bool IsCharData(char ch);
    public bool IsPubidChar(char ch);
    internal bool IsTextChar(char ch);
    internal bool IsAttributeValueChar(char ch);
    public bool IsLetter(char ch);
    public bool IsNCNameCharXml4e(char ch);
    public bool IsStartNCNameCharXml4e(char ch);
    public bool IsNameCharXml4e(char ch);
    public bool IsStartNameCharXml4e(char ch);
    public static bool IsDigit(char ch);
    public static bool IsHexDigit(char ch);
    internal static bool IsHighSurrogate(int ch);
    internal static bool IsLowSurrogate(int ch);
    internal static bool IsSurrogate(int ch);
    internal static int CombineSurrogateChar(int lowChar, int highChar);
    internal static void SplitSurrogateChar(int combinedChar, Char& lowChar, Char& highChar);
    internal bool IsOnlyWhitespace(string str);
    internal int IsOnlyWhitespaceWithPos(string str);
    internal int IsOnlyCharData(string str);
    internal static bool IsOnlyDigits(string str, int startPos, int len);
    internal static bool IsOnlyDigits(Char[] chars, int startPos, int len);
    internal int IsPublicId(string str);
}
internal class System.Xml.XmlChildEnumerator : object {
    internal XmlNode container;
    internal XmlNode child;
    internal bool isFirst;
    private object System.Collections.IEnumerator.Current { get; }
    internal XmlNode Current { get; }
    internal XmlChildEnumerator(XmlNode container);
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    internal bool MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    internal XmlNode get_Current();
}
internal class System.Xml.XmlChildNodes : XmlNodeList {
    public int Count { get; }
    public XmlChildNodes(XmlNode container);
    public virtual XmlNode Item(int i);
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
}
public class System.Xml.XmlComment : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    internal XPathNodeType XPNodeType { get; }
    protected internal XmlComment(string comment, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
}
internal static class System.Xml.XmlComplianceUtil : object {
    public static string NonCDataNormalize(string value);
    public static string CDataNormalize(string value);
    public static bool IsValidLanguageID(Char[] value, int startPos, int length);
}
internal static class System.Xml.XmlConfiguration.XmlConfigurationString : object {
    internal static string XmlReaderSectionName;
    internal static string XsltSectionName;
    internal static string ProhibitDefaultResolverName;
    internal static string LimitXPathComplexityName;
    internal static string EnableMemberAccessForXslCompiledTransformName;
    internal static string XmlConfigurationSectionName;
    internal static string XmlReaderSectionPath;
    internal static string XsltSectionPath;
    private static XmlConfigurationString();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.XmlConfiguration.XmlReaderSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("prohibitDefaultResolver")]
public string ProhibitDefaultResolverString { get; public set; }
    internal static bool ProhibitDefaultUrlResolver { get; }
    public string get_ProhibitDefaultResolverString();
    public void set_ProhibitDefaultResolverString(string value);
    internal static bool get_ProhibitDefaultUrlResolver();
    internal static XmlResolver CreateDefaultResolver();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.XmlConfiguration.XsltConfigSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("prohibitDefaultResolver")]
public string ProhibitDefaultResolverString { get; public set; }
    [ConfigurationPropertyAttribute("limitXPathComplexity")]
internal string LimitXPathComplexityString { get; internal set; }
    internal static bool LimitXPathComplexity { get; }
    [ConfigurationPropertyAttribute("enableMemberAccessForXslCompiledTransform")]
internal string EnableMemberAccessForXslCompiledTransformString { get; internal set; }
    internal static bool EnableMemberAccessForXslCompiledTransform { get; }
    public string get_ProhibitDefaultResolverString();
    public void set_ProhibitDefaultResolverString(string value);
    internal static XmlResolver CreateDefaultResolver();
    internal string get_LimitXPathComplexityString();
    internal void set_LimitXPathComplexityString(string value);
    internal static bool get_LimitXPathComplexity();
    internal string get_EnableMemberAccessForXslCompiledTransformString();
    internal void set_EnableMemberAccessForXslCompiledTransformString(string value);
    internal static bool get_EnableMemberAccessForXslCompiledTransform();
}
public class System.Xml.XmlConvert : object {
    internal static Char[] crt;
    internal static Char[] WhitespaceChars;
    private static XmlConvert();
    public static string EncodeName(string name);
    public static string EncodeNmToken(string name);
    public static string EncodeLocalName(string name);
    public static string DecodeName(string name);
    internal static Byte[] FromBinHexString(string s);
    internal static Byte[] FromBinHexString(string s, bool allowOddCount);
    internal static string ToBinHexString(Byte[] inArray);
    public static string VerifyName(string name);
    internal static Exception TryVerifyName(string name);
    internal static string VerifyQName(string name);
    internal static string VerifyQName(string name, ExceptionType exceptionType);
    public static string VerifyNCName(string name);
    internal static string VerifyNCName(string name, ExceptionType exceptionType);
    internal static Exception TryVerifyNCName(string name);
    public static string VerifyTOKEN(string token);
    internal static Exception TryVerifyTOKEN(string token);
    public static string VerifyNMTOKEN(string name);
    internal static string VerifyNMTOKEN(string name, ExceptionType exceptionType);
    internal static Exception TryVerifyNMTOKEN(string name);
    internal static string VerifyNormalizedString(string str);
    internal static Exception TryVerifyNormalizedString(string str);
    public static string VerifyXmlChars(string content);
    public static string VerifyPublicId(string publicId);
    public static string VerifyWhitespace(string content);
    public static bool IsStartNCNameChar(char ch);
    public static bool IsNCNameChar(char ch);
    public static bool IsXmlChar(char ch);
    public static bool IsXmlSurrogatePair(char lowChar, char highChar);
    public static bool IsPublicIdChar(char ch);
    public static bool IsWhitespaceChar(char ch);
    public static string ToString(bool value);
    public static string ToString(char value);
    public static string ToString(decimal value);
    [CLSCompliantAttribute("False")]
public static string ToString(sbyte value);
    public static string ToString(short value);
    public static string ToString(int value);
    public static string ToString(long value);
    public static string ToString(byte value);
    [CLSCompliantAttribute("False")]
public static string ToString(ushort value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong value);
    public static string ToString(float value);
    public static string ToString(double value);
    public static string ToString(TimeSpan value);
    [ObsoleteAttribute("Use XmlConvert.ToString() that takes in XmlDateTimeSerializationMode")]
public static string ToString(DateTime value);
    public static string ToString(DateTime value, string format);
    public static string ToString(DateTime value, XmlDateTimeSerializationMode dateTimeOption);
    public static string ToString(DateTimeOffset value);
    public static string ToString(DateTimeOffset value, string format);
    public static string ToString(Guid value);
    public static bool ToBoolean(string s);
    internal static Exception TryToBoolean(string s, Boolean& result);
    public static char ToChar(string s);
    internal static Exception TryToChar(string s, Char& result);
    public static decimal ToDecimal(string s);
    internal static Exception TryToDecimal(string s, Decimal& result);
    internal static decimal ToInteger(string s);
    internal static Exception TryToInteger(string s, Decimal& result);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string s);
    internal static Exception TryToSByte(string s, SByte& result);
    public static short ToInt16(string s);
    internal static Exception TryToInt16(string s, Int16& result);
    public static int ToInt32(string s);
    internal static Exception TryToInt32(string s, Int32& result);
    public static long ToInt64(string s);
    internal static Exception TryToInt64(string s, Int64& result);
    public static byte ToByte(string s);
    internal static Exception TryToByte(string s, Byte& result);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(string s);
    internal static Exception TryToUInt16(string s, UInt16& result);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(string s);
    internal static Exception TryToUInt32(string s, UInt32& result);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(string s);
    internal static Exception TryToUInt64(string s, UInt64& result);
    public static float ToSingle(string s);
    internal static Exception TryToSingle(string s, Single& result);
    public static double ToDouble(string s);
    internal static Exception TryToDouble(string s, Double& result);
    internal static double ToXPathDouble(object o);
    internal static string ToXPathString(object value);
    internal static double XPathRound(double value);
    public static TimeSpan ToTimeSpan(string s);
    internal static Exception TryToTimeSpan(string s, TimeSpan& result);
    [ObsoleteAttribute("Use XmlConvert.ToDateTime() that takes in XmlDateTimeSerializationMode")]
public static DateTime ToDateTime(string s);
    public static DateTime ToDateTime(string s, string format);
    public static DateTime ToDateTime(string s, String[] formats);
    public static DateTime ToDateTime(string s, XmlDateTimeSerializationMode dateTimeOption);
    public static DateTimeOffset ToDateTimeOffset(string s);
    public static DateTimeOffset ToDateTimeOffset(string s, string format);
    public static DateTimeOffset ToDateTimeOffset(string s, String[] formats);
    public static Guid ToGuid(string s);
    internal static Exception TryToGuid(string s, Guid& result);
    internal static Uri ToUri(string s);
    internal static Exception TryToUri(string s, Uri& result);
    internal static bool StrEqual(Char[] chars, int strPos1, int strLen1, string str2);
    internal static string TrimString(string value);
    internal static string TrimStringStart(string value);
    internal static string TrimStringEnd(string value);
    internal static String[] SplitString(string value);
    internal static String[] SplitString(string value, StringSplitOptions splitStringOptions);
    internal static bool IsNegativeZero(double value);
    internal static void VerifyCharData(string data, ExceptionType exceptionType);
    internal static void VerifyCharData(string data, ExceptionType invCharExceptionType, ExceptionType invSurrogateExceptionType);
    internal static void VerifyCharData(Char[] data, int offset, int len, ExceptionType exceptionType);
    internal static string EscapeValueForDebuggerDisplay(string value);
    internal static Exception CreateException(string res, ExceptionType exceptionType);
    internal static Exception CreateException(string res, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateException(string res, string arg, ExceptionType exceptionType);
    internal static Exception CreateException(string res, string arg, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateException(string res, String[] args, ExceptionType exceptionType);
    internal static Exception CreateException(string res, String[] args, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateInvalidSurrogatePairException(char low, char hi);
    internal static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType);
    internal static Exception CreateInvalidSurrogatePairException(char low, char hi, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateInvalidHighSurrogateCharException(char hi);
    internal static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType);
    internal static Exception CreateInvalidHighSurrogateCharException(char hi, ExceptionType exceptionType, int lineNo, int linePos);
    internal static Exception CreateInvalidCharException(Char[] data, int length, int invCharPos);
    internal static Exception CreateInvalidCharException(Char[] data, int length, int invCharPos, ExceptionType exceptionType);
    internal static Exception CreateInvalidCharException(string data, int invCharPos);
    internal static Exception CreateInvalidCharException(string data, int invCharPos, ExceptionType exceptionType);
    internal static Exception CreateInvalidCharException(char invChar, char nextChar);
    internal static Exception CreateInvalidCharException(char invChar, char nextChar, ExceptionType exceptionType);
    internal static Exception CreateInvalidNameCharException(string name, int index, ExceptionType exceptionType);
    internal static ArgumentException CreateInvalidNameArgumentException(string name, string argumentName);
}
public enum System.Xml.XmlDateTimeSerializationMode : Enum {
    public int value__;
    public static XmlDateTimeSerializationMode Local;
    public static XmlDateTimeSerializationMode Utc;
    public static XmlDateTimeSerializationMode Unspecified;
    public static XmlDateTimeSerializationMode RoundtripKind;
}
public class System.Xml.XmlDeclaration : XmlLinkedNode {
    public string Version { get; internal set; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public string Value { get; public set; }
    public string InnerText { get; public set; }
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    protected internal XmlDeclaration(string version, string encoding, string standalone, XmlDocument doc);
    public string get_Version();
    internal void set_Version(string value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_Standalone();
    public void set_Standalone(string value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
}
public class System.Xml.XmlDocument : XmlNode {
    internal bool fEntRefNodesPresent;
    internal bool fCDataNodesPresent;
    internal string strDocumentName;
    internal string strDocumentFragmentName;
    internal string strCommentName;
    internal string strTextName;
    internal string strCDataSectionName;
    internal string strEntityName;
    internal string strID;
    internal string strXmlns;
    internal string strXml;
    internal string strSpace;
    internal string strLang;
    internal string strEmpty;
    internal string strNonSignificantWhitespaceName;
    internal string strSignificantWhitespaceName;
    internal string strReservedXmlns;
    internal string strReservedXml;
    internal string baseURI;
    internal bool bSetResolver;
    internal object objLock;
    internal static EmptyEnumerator EmptyEnumerator;
    internal static IXmlSchemaInfo NotKnownSchemaInfo;
    internal static IXmlSchemaInfo ValidSchemaInfo;
    internal static IXmlSchemaInfo InvalidSchemaInfo;
    internal SchemaInfo DtdSchemaInfo { get; internal set; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlDocumentType DocumentType { get; }
    internal XmlDeclaration Declaration { get; }
    public XmlImplementation Implementation { get; }
    public string Name { get; }
    public string LocalName { get; }
    public XmlElement DocumentElement { get; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public XmlDocument OwnerDocument { get; }
    public XmlSchemaSet Schemas { get; public set; }
    internal bool CanReportValidity { get; }
    internal bool HasSetResolver { get; }
    unknown XmlResolver XmlResolver {public set; }
    public XmlNameTable NameTable { get; }
    public bool PreserveWhitespace { get; public set; }
    public bool IsReadOnly { get; }
    internal XmlNamedNodeMap Entities { get; internal set; }
    internal bool IsLoading { get; internal set; }
    internal bool ActualLoadingStatus { get; internal set; }
    internal Encoding TextEncoding { get; }
    unknown string InnerText {public set; }
    public string InnerXml { get; public set; }
    internal string Version { get; }
    internal string Encoding { get; }
    internal string Standalone { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public string BaseURI { get; }
    internal XPathNodeType XPNodeType { get; }
    internal bool HasEntityReferences { get; }
    internal XmlAttribute NamespaceXml { get; }
    public XmlDocument(XmlNameTable nt);
    protected internal XmlDocument(XmlImplementation imp);
    private static XmlDocument();
    internal SchemaInfo get_DtdSchemaInfo();
    internal void set_DtdSchemaInfo(SchemaInfo value);
    internal static void CheckName(string name);
    internal XmlName AddXmlName(string prefix, string localName, string namespaceURI, IXmlSchemaInfo schemaInfo);
    internal XmlName GetXmlName(string prefix, string localName, string namespaceURI, IXmlSchemaInfo schemaInfo);
    internal XmlName AddAttrXmlName(string prefix, string localName, string namespaceURI, IXmlSchemaInfo schemaInfo);
    internal bool AddIdInfo(XmlName eleName, XmlName attrName);
    internal XmlName GetIDInfoByElement(XmlName eleName);
    internal void AddElementWithId(string id, XmlElement elem);
    internal void RemoveElementWithId(string id, XmlElement elem);
    public virtual XmlNode CloneNode(bool deep);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlDocumentType get_DocumentType();
    internal virtual XmlDeclaration get_Declaration();
    public XmlImplementation get_Implementation();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public XmlElement get_DocumentElement();
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    public virtual XmlDocument get_OwnerDocument();
    public XmlSchemaSet get_Schemas();
    public void set_Schemas(XmlSchemaSet value);
    internal bool get_CanReportValidity();
    internal bool get_HasSetResolver();
    internal XmlResolver GetResolver();
    public virtual void set_XmlResolver(XmlResolver value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    internal virtual bool CanInsertBefore(XmlNode newChild, XmlNode refChild);
    internal virtual bool CanInsertAfter(XmlNode newChild, XmlNode refChild);
    public XmlAttribute CreateAttribute(string name);
    internal void SetDefaultNamespace(string prefix, string localName, String& namespaceURI);
    public virtual XmlCDataSection CreateCDataSection(string data);
    public virtual XmlComment CreateComment(string data);
    public virtual XmlDocumentType CreateDocumentType(string name, string publicId, string systemId, string internalSubset);
    public virtual XmlDocumentFragment CreateDocumentFragment();
    public XmlElement CreateElement(string name);
    internal void AddDefaultAttributes(XmlElement elem);
    public virtual XmlEntityReference CreateEntityReference(string name);
    public virtual XmlProcessingInstruction CreateProcessingInstruction(string target, string data);
    public virtual XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone);
    public virtual XmlText CreateTextNode(string text);
    public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string text);
    public virtual XPathNavigator CreateNavigator();
    protected internal virtual XPathNavigator CreateNavigator(XmlNode node);
    internal static bool IsTextNode(XmlNodeType nt);
    public virtual XmlWhitespace CreateWhitespace(string text);
    public virtual XmlNodeList GetElementsByTagName(string name);
    public XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI);
    public XmlElement CreateElement(string qualifiedName, string namespaceURI);
    public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    public virtual XmlElement GetElementById(string elementId);
    public virtual XmlNode ImportNode(XmlNode node, bool deep);
    public XmlNameTable get_NameTable();
    public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI);
    protected internal virtual XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public bool get_PreserveWhitespace();
    public void set_PreserveWhitespace(bool value);
    public virtual bool get_IsReadOnly();
    internal XmlNamedNodeMap get_Entities();
    internal void set_Entities(XmlNamedNodeMap value);
    internal bool get_IsLoading();
    internal void set_IsLoading(bool value);
    internal bool get_ActualLoadingStatus();
    internal void set_ActualLoadingStatus(bool value);
    public virtual XmlNode CreateNode(XmlNodeType type, string prefix, string name, string namespaceURI);
    public virtual XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI);
    public virtual XmlNode CreateNode(XmlNodeType type, string name, string namespaceURI);
    public virtual XmlNode ReadNode(XmlReader reader);
    internal XmlNodeType ConvertToNodeType(string nodeTypeString);
    public virtual void Load(string filename);
    public virtual void Load(Stream inStream);
    public virtual void Load(TextReader txtReader);
    public virtual void Load(XmlReader reader);
    public virtual void LoadXml(string xml);
    internal Encoding get_TextEncoding();
    public virtual void set_InnerText(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual void Save(string filename);
    public virtual void Save(Stream outStream);
    public virtual void Save(TextWriter writer);
    public virtual void Save(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter xw);
    public void Validate(ValidationEventHandler validationEventHandler);
    public void Validate(ValidationEventHandler validationEventHandler, XmlNode nodeToValidate);
    public void add_NodeInserting(XmlNodeChangedEventHandler value);
    public void remove_NodeInserting(XmlNodeChangedEventHandler value);
    public void add_NodeInserted(XmlNodeChangedEventHandler value);
    public void remove_NodeInserted(XmlNodeChangedEventHandler value);
    public void add_NodeRemoving(XmlNodeChangedEventHandler value);
    public void remove_NodeRemoving(XmlNodeChangedEventHandler value);
    public void add_NodeRemoved(XmlNodeChangedEventHandler value);
    public void remove_NodeRemoved(XmlNodeChangedEventHandler value);
    public void add_NodeChanging(XmlNodeChangedEventHandler value);
    public void remove_NodeChanging(XmlNodeChangedEventHandler value);
    public void add_NodeChanged(XmlNodeChangedEventHandler value);
    public void remove_NodeChanged(XmlNodeChangedEventHandler value);
    internal virtual XmlNodeChangedEventArgs GetEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action);
    internal XmlNodeChangedEventArgs GetInsertEventArgsForLoad(XmlNode node, XmlNode newParent);
    internal virtual void BeforeEvent(XmlNodeChangedEventArgs args);
    internal virtual void AfterEvent(XmlNodeChangedEventArgs args);
    internal XmlAttribute GetDefaultAttribute(XmlElement elem, string attrPrefix, string attrLocalname, string attrNamespaceURI);
    internal string get_Version();
    internal string get_Encoding();
    internal string get_Standalone();
    internal XmlEntity GetEntityNode(string name);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual string get_BaseURI();
    internal void SetBaseURI(string inBaseURI);
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
    internal virtual XPathNodeType get_XPNodeType();
    internal bool get_HasEntityReferences();
    internal XmlAttribute get_NamespaceXml();
}
public class System.Xml.XmlDocumentFragment : XmlNode {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlDocument OwnerDocument { get; }
    public string InnerXml { get; public set; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    internal XPathNodeType XPNodeType { get; }
    protected internal XmlDocumentFragment(XmlDocument ownerDocument);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlDocument get_OwnerDocument();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual XmlNode CloneNode(bool deep);
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    internal virtual bool CanInsertAfter(XmlNode newChild, XmlNode refChild);
    internal virtual bool CanInsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
}
public class System.Xml.XmlDocumentType : XmlLinkedNode {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public bool IsReadOnly { get; }
    public XmlNamedNodeMap Entities { get; }
    public XmlNamedNodeMap Notations { get; }
    public string PublicId { get; }
    public string SystemId { get; }
    public string InternalSubset { get; }
    internal bool ParseWithNamespaces { get; internal set; }
    internal SchemaInfo DtdSchemaInfo { get; internal set; }
    protected internal XmlDocumentType(string name, string publicId, string systemId, string internalSubset, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual bool get_IsReadOnly();
    public XmlNamedNodeMap get_Entities();
    public XmlNamedNodeMap get_Notations();
    public string get_PublicId();
    public string get_SystemId();
    public string get_InternalSubset();
    internal bool get_ParseWithNamespaces();
    internal void set_ParseWithNamespaces(bool value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal SchemaInfo get_DtdSchemaInfo();
    internal void set_DtdSchemaInfo(SchemaInfo value);
}
internal class System.Xml.XmlDOMTextWriter : XmlTextWriter {
    public XmlDOMTextWriter(Stream w, Encoding encoding);
    public XmlDOMTextWriter(string filename, Encoding encoding);
    public XmlDOMTextWriter(TextWriter w);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
}
internal class System.Xml.XmlDownloadManager : object {
    internal Stream GetStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy);
    internal void Remove(string host);
    internal Task`1<Stream> GetStreamAsync(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy);
}
public class System.Xml.XmlElement : XmlLinkedNode {
    internal XmlName XmlName { get; internal set; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; public set; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlDocument OwnerDocument { get; }
    internal bool IsContainer { get; }
    public bool IsEmpty { get; public set; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public XmlAttributeCollection Attributes { get; }
    public bool HasAttributes { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public string InnerXml { get; public set; }
    public string InnerText { get; public set; }
    public XmlNode NextSibling { get; }
    internal XPathNodeType XPNodeType { get; }
    internal string XPLocalName { get; }
    internal XmlElement(XmlName name, bool empty, XmlDocument doc);
    protected internal XmlElement(string prefix, string localName, string namespaceURI, XmlDocument doc);
    internal XmlName get_XmlName();
    internal void set_XmlName(XmlName value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlDocument get_OwnerDocument();
    internal virtual bool get_IsContainer();
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
    public bool get_IsEmpty();
    public void set_IsEmpty(bool value);
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual XmlAttributeCollection get_Attributes();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string name);
    public virtual void SetAttribute(string name, string value);
    public virtual void RemoveAttribute(string name);
    public virtual XmlAttribute GetAttributeNode(string name);
    public virtual XmlAttribute SetAttributeNode(XmlAttribute newAttr);
    public virtual XmlAttribute RemoveAttributeNode(XmlAttribute oldAttr);
    public virtual XmlNodeList GetElementsByTagName(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string SetAttribute(string localName, string namespaceURI, string value);
    public virtual void RemoveAttribute(string localName, string namespaceURI);
    public virtual XmlAttribute GetAttributeNode(string localName, string namespaceURI);
    public virtual XmlAttribute SetAttributeNode(string localName, string namespaceURI);
    public virtual XmlAttribute RemoveAttributeNode(string localName, string namespaceURI);
    public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    public virtual bool HasAttribute(string name);
    public virtual bool HasAttribute(string localName, string namespaceURI);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual XmlNode RemoveAttributeAt(int i);
    public virtual void RemoveAllAttributes();
    public virtual void RemoveAll();
    internal void RemoveAllChildren();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual XmlNode get_NextSibling();
    internal virtual void SetParent(XmlNode node);
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual string get_XPLocalName();
    internal virtual string GetXPAttribute(string localName, string ns);
}
internal class System.Xml.XmlElementList : XmlNodeList {
    internal int ChangeCount { get; }
    public int Count { get; }
    internal XmlElementList(XmlNode parent, string name);
    internal XmlElementList(XmlNode parent, string localName, string namespaceURI);
    protected virtual override void Finalize();
    internal void ConcurrencyCheck(XmlNodeChangedEventArgs args);
    internal int get_ChangeCount();
    public XmlNode GetNextNode(XmlNode n);
    public virtual XmlNode Item(int index);
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    protected virtual void PrivateDisposeNodeList();
    protected virtual void Dispose(bool disposing);
}
internal class System.Xml.XmlElementListEnumerator : object {
    public object Current { get; }
    public XmlElementListEnumerator(XmlElementList list);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
}
internal class System.Xml.XmlElementListListener : object {
    internal XmlElementListListener(XmlDocument doc, XmlElementList elemList);
    internal void Unregister();
}
internal class System.Xml.XmlEmptyElementListEnumerator : object {
    public object Current { get; }
    public XmlEmptyElementListEnumerator(XmlElementList list);
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual object get_Current();
}
internal class System.Xml.XmlEncodedRawTextWriter : XmlRawWriter {
    protected Byte[] bufBytes;
    protected Stream stream;
    protected Encoding encoding;
    protected XmlCharType xmlCharType;
    protected int bufPos;
    protected int textPos;
    protected int contentPos;
    protected int cdataPos;
    protected int attrEndPos;
    protected int bufLen;
    protected bool writeToNull;
    protected bool hadDoubleBracket;
    protected bool inAttributeValue;
    protected int bufBytesUsed;
    protected Char[] bufChars;
    protected Encoder encoder;
    protected TextWriter writer;
    protected bool trackTextContent;
    protected bool inTextContent;
    protected NewLineHandling newLineHandling;
    protected bool closeOutput;
    protected bool omitXmlDeclaration;
    protected string newLineChars;
    protected bool checkCharacters;
    protected XmlStandalone standalone;
    protected XmlOutputMethod outputMethod;
    protected bool autoXmlDeclaration;
    protected bool mergeCDataSections;
    public XmlWriterSettings Settings { get; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    protected XmlEncodedRawTextWriter(XmlWriterSettings settings);
    public XmlEncodedRawTextWriter(TextWriter writer, XmlWriterSettings settings);
    public XmlEncodedRawTextWriter(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string namespaceName);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void Close();
    public virtual void Flush();
    protected virtual void FlushBuffer();
    protected void WriteAttributeTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void WriteElementTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void RawText(string s);
    protected void RawText(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteRawWithCharChecking(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteCommentOrPi(string text, int stopChar);
    protected void WriteCDataSection(string text);
    internal void EncodeChar(Char*& pSrc, Char* pSrcEnd, Char*& pDst);
    protected void ChangeTextContentMark(bool value);
    protected Char* WriteNewLine(Char* pDst);
    protected static Char* LtEntity(Char* pDst);
    protected static Char* GtEntity(Char* pDst);
    protected static Char* AmpEntity(Char* pDst);
    protected static Char* QuoteEntity(Char* pDst);
    protected static Char* TabEntity(Char* pDst);
    protected static Char* LineFeedEntity(Char* pDst);
    protected static Char* CarriageReturnEntity(Char* pDst);
    protected static Char* RawStartCData(Char* pDst);
    protected static Char* RawEndCData(Char* pDst);
    protected void ValidateContentChars(string chars, string propertyName, bool allowOnlyWhitespace);
    protected void CheckAsyncCall();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteXmlDeclarationAsync>d__1")]
internal virtual Task WriteXmlDeclarationAsync(XmlStandalone standalone);
    internal virtual Task WriteXmlDeclarationAsync(string xmldecl);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteDocTypeAsync>d__1")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteEndAttributeAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteNamespaceDeclarationAsync>d__1")]
internal virtual Task WriteNamespaceDeclarationAsync(string prefix, string namespaceName);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteStartNamespaceDeclarationAsync>d__1")]
internal virtual Task WriteStartNamespaceDeclarationAsync(string prefix);
    internal virtual Task WriteEndNamespaceDeclarationAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCDataAsync>d__1")]
public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCommentAsync>d__1")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteProcessingInstructionAsync>d__1")]
public virtual Task WriteProcessingInstructionAsync(string name, string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteEntityRefAsync>d__1")]
public virtual Task WriteEntityRefAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCharEntityAsync>d__1")]
public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteSurrogateCharEntityAsync>d__1")]
public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawAsync>d__1")]
public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawAsync>d__2")]
public virtual Task WriteRawAsync(string data);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<FlushAsync>d__1")]
public virtual Task FlushAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<FlushBufferAsync>d__1")]
protected virtual Task FlushBufferAsync();
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(Char* pSrc, Char* pSrcEnd);
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(Char[] chars, int index, int count);
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(string text, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteAttributeTextBlockAsync>d__1")]
protected Task WriteAttributeTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteAttributeTextBlockAsync(string text);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(Char* pSrc, Char* pSrcEnd, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteElementTextBlockAsync>d__1")]
protected Task WriteElementTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteElementTextBlockAsync(string text);
    [SecuritySafeCriticalAttribute]
protected int RawTextNoFlush(Char* pSrcBegin, Char* pSrcEnd);
    [SecuritySafeCriticalAttribute]
protected int RawTextNoFlush(string text, int index, int count);
    protected Task RawTextAsync(string text);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(Char* pSrcBegin, Char* pSrcEnd, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawWithCharCheckingAsync>d__1")]
protected Task WriteRawWithCharCheckingAsync(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteRawWithCharCheckingAsync>d__2")]
protected Task WriteRawWithCharCheckingAsync(string text);
    [SecuritySafeCriticalAttribute]
protected int WriteCommentOrPiNoFlush(string text, int index, int count, int stopChar, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCommentOrPiAsync>d__1")]
protected Task WriteCommentOrPiAsync(string text, int stopChar);
    [SecuritySafeCriticalAttribute]
protected int WriteCDataSectionNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriter/<WriteCDataSectionAsync>d__1")]
protected Task WriteCDataSectionAsync(string text);
}
internal class System.Xml.XmlEncodedRawTextWriterIndent : XmlEncodedRawTextWriter {
    protected int indentLevel;
    protected bool newLineOnAttributes;
    protected string indentChars;
    protected bool mixedContent;
    protected ConformanceLevel conformanceLevel;
    public XmlWriterSettings Settings { get; }
    public XmlEncodedRawTextWriterIndent(TextWriter writer, XmlWriterSettings settings);
    public XmlEncodedRawTextWriterIndent(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void OnRootElement(ConformanceLevel currentConformanceLevel);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string target, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteDocTypeAsync>d__1")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteStartElementAsync>d__1")]
public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteEndElementAsync>d__1")]
internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteFullEndElementAsync>d__1")]
internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteStartAttributeAsync>d__1")]
protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteCommentAsync>d__1")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlEncodedRawTextWriterIndent/<WriteProcessingInstructionAsync>d__1")]
public virtual Task WriteProcessingInstructionAsync(string target, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
}
public class System.Xml.XmlEntity : XmlNode {
    public bool IsReadOnly { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string InnerText { get; public set; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public XmlNodeType NodeType { get; }
    public string PublicId { get; }
    public string SystemId { get; }
    public string NotationName { get; }
    public string OuterXml { get; }
    public string InnerXml { get; public set; }
    public string BaseURI { get; }
    internal XmlEntity(string name, string strdata, string publicId, string systemId, string notationName, XmlDocument doc);
    public virtual XmlNode CloneNode(bool deep);
    public virtual bool get_IsReadOnly();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual XmlNodeType get_NodeType();
    public string get_PublicId();
    public string get_SystemId();
    public string get_NotationName();
    public virtual string get_OuterXml();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual string get_BaseURI();
    internal void SetBaseURI(string inBaseURI);
}
public class System.Xml.XmlEntityReference : XmlLinkedNode {
    public string Name { get; }
    public string LocalName { get; }
    public string Value { get; public set; }
    public XmlNodeType NodeType { get; }
    public bool IsReadOnly { get; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public string BaseURI { get; }
    internal string ChildBaseURI { get; }
    protected internal XmlEntityReference(string name, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual bool get_IsReadOnly();
    internal virtual bool get_IsContainer();
    internal virtual void SetParent(XmlNode node);
    internal virtual void SetParentForLoad(XmlNode node);
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal virtual bool IsValidChildType(XmlNodeType type);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual string get_BaseURI();
    internal string get_ChildBaseURI();
}
internal class System.Xml.XmlEventCache : XmlRawWriter {
    public string BaseUri { get; }
    public bool HasRootNode { get; }
    public XmlWriterSettings Settings { get; }
    public XmlEventCache(string baseUri, bool hasRootNode);
    public void EndEvents();
    public string get_BaseUri();
    public bool get_HasRootNode();
    public void EventsToWriter(XmlWriter writer);
    public string EventsToString();
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    protected virtual void Dispose(bool disposing);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual void WriteEndBase64();
}
public class System.Xml.XmlException : SystemException {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string SourceUri { get; }
    public string Message { get; }
    internal string ResString { get; }
    protected XmlException(SerializationInfo info, StreamingContext context);
    public XmlException(string message);
    public XmlException(string message, Exception innerException);
    public XmlException(string message, Exception innerException, int lineNumber, int linePosition);
    internal XmlException(string message, Exception innerException, int lineNumber, int linePosition, string sourceUri);
    internal XmlException(string res, String[] args);
    internal XmlException(string res, String[] args, string sourceUri);
    internal XmlException(string res, string arg);
    internal XmlException(string res, string arg, string sourceUri);
    internal XmlException(string res, string arg, IXmlLineInfo lineInfo);
    internal XmlException(string res, string arg, Exception innerException, IXmlLineInfo lineInfo);
    internal XmlException(string res, string arg, IXmlLineInfo lineInfo, string sourceUri);
    internal XmlException(string res, String[] args, IXmlLineInfo lineInfo);
    internal XmlException(string res, String[] args, IXmlLineInfo lineInfo, string sourceUri);
    internal XmlException(string res, int lineNumber, int linePosition);
    internal XmlException(string res, string arg, int lineNumber, int linePosition);
    internal XmlException(string res, string arg, int lineNumber, int linePosition, string sourceUri);
    internal XmlException(string res, String[] args, int lineNumber, int linePosition);
    internal XmlException(string res, String[] args, int lineNumber, int linePosition, string sourceUri);
    internal XmlException(string res, String[] args, Exception innerException, int lineNumber, int linePosition);
    internal XmlException(string res, String[] args, Exception innerException, int lineNumber, int linePosition, string sourceUri);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static String[] BuildCharExceptionArgs(string data, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(Char[] data, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(Char[] data, int length, int invCharIndex);
    internal static String[] BuildCharExceptionArgs(char invChar, char nextChar);
    public int get_LineNumber();
    public int get_LinePosition();
    public string get_SourceUri();
    public virtual string get_Message();
    internal string get_ResString();
    internal static bool IsCatchableException(Exception e);
}
public class System.Xml.XmlImplementation : object {
    internal XmlNameTable NameTable { get; }
    public XmlImplementation(XmlNameTable nt);
    public bool HasFeature(string strFeature, string strVersion);
    public virtual XmlDocument CreateDocument();
    internal XmlNameTable get_NameTable();
}
public abstract class System.Xml.XmlLinkedNode : XmlNode {
    internal XmlLinkedNode next;
    public XmlNode PreviousSibling { get; }
    public XmlNode NextSibling { get; }
    internal XmlLinkedNode(XmlDocument doc);
    public virtual XmlNode get_PreviousSibling();
    public virtual XmlNode get_NextSibling();
}
internal class System.Xml.XmlLoader : object {
    internal void Load(XmlDocument doc, XmlReader reader, bool preserveWhitespace);
    internal XmlNode ReadCurrentNode(XmlDocument doc, XmlReader reader);
    internal void ParseDocumentType(XmlDocumentType dtNode);
    internal XmlNamespaceManager ParsePartialContent(XmlNode parentNode, string innerxmltext, XmlNodeType nt);
    internal void LoadInnerXmlElement(XmlElement node, string innerxmltext);
    internal void LoadInnerXmlAttribute(XmlAttribute node, string innerxmltext);
    internal void ExpandEntity(XmlEntity ent);
    internal void ExpandEntityReference(XmlEntityReference eref);
    internal static void ParseXmlDeclarationValue(string strValue, String& version, String& encoding, String& standalone);
    internal static Exception UnexpectedNodeType(XmlNodeType nodetype);
}
internal class System.Xml.XmlName : object {
    internal XmlDocument ownerDoc;
    internal XmlName next;
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public int HashCode { get; }
    public XmlDocument OwnerDocument { get; }
    public string Name { get; }
    public XmlSchemaValidity Validity { get; }
    public bool IsDefault { get; }
    public bool IsNil { get; }
    public XmlSchemaSimpleType MemberType { get; }
    public XmlSchemaType SchemaType { get; }
    public XmlSchemaElement SchemaElement { get; }
    public XmlSchemaAttribute SchemaAttribute { get; }
    internal XmlName(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next);
    public static XmlName Create(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next, IXmlSchemaInfo schemaInfo);
    public string get_LocalName();
    public string get_NamespaceURI();
    public string get_Prefix();
    public int get_HashCode();
    public XmlDocument get_OwnerDocument();
    public string get_Name();
    public virtual XmlSchemaValidity get_Validity();
    public virtual bool get_IsDefault();
    public virtual bool get_IsNil();
    public virtual XmlSchemaSimpleType get_MemberType();
    public virtual XmlSchemaType get_SchemaType();
    public virtual XmlSchemaElement get_SchemaElement();
    public virtual XmlSchemaAttribute get_SchemaAttribute();
    public virtual bool Equals(IXmlSchemaInfo schemaInfo);
    public static int GetHashCode(string name);
}
public class System.Xml.XmlNamedNodeMap : object {
    internal XmlNode parent;
    internal SmallXmlNodeList nodes;
    public int Count { get; }
    internal XmlNamedNodeMap(XmlNode parent);
    public virtual XmlNode GetNamedItem(string name);
    public virtual XmlNode SetNamedItem(XmlNode node);
    public virtual XmlNode RemoveNamedItem(string name);
    public virtual int get_Count();
    public virtual XmlNode Item(int index);
    public virtual XmlNode GetNamedItem(string localName, string namespaceURI);
    public virtual XmlNode RemoveNamedItem(string localName, string namespaceURI);
    public virtual IEnumerator GetEnumerator();
    internal int FindNodeOffset(string name);
    internal int FindNodeOffset(string localName, string namespaceURI);
    internal virtual XmlNode AddNode(XmlNode node);
    internal virtual XmlNode AddNodeForLoad(XmlNode node, XmlDocument doc);
    internal virtual XmlNode RemoveNodeAt(int i);
    internal XmlNode ReplaceNodeAt(int i, XmlNode node);
    internal virtual XmlNode InsertNodeAt(int i, XmlNode node);
}
internal class System.Xml.XmlNameEx : XmlName {
    public XmlSchemaValidity Validity { get; }
    public bool IsDefault { get; }
    public bool IsNil { get; }
    public XmlSchemaSimpleType MemberType { get; }
    public XmlSchemaType SchemaType { get; }
    public XmlSchemaElement SchemaElement { get; }
    public XmlSchemaAttribute SchemaAttribute { get; }
    internal XmlNameEx(string prefix, string localName, string ns, int hashCode, XmlDocument ownerDoc, XmlName next, IXmlSchemaInfo schemaInfo);
    public virtual XmlSchemaValidity get_Validity();
    public virtual bool get_IsDefault();
    public virtual bool get_IsNil();
    public virtual XmlSchemaSimpleType get_MemberType();
    public virtual XmlSchemaType get_SchemaType();
    public virtual XmlSchemaElement get_SchemaElement();
    public virtual XmlSchemaAttribute get_SchemaAttribute();
    public void SetValidity(XmlSchemaValidity value);
    public void SetIsDefault(bool value);
    public void SetIsNil(bool value);
    public virtual bool Equals(IXmlSchemaInfo schemaInfo);
}
public class System.Xml.XmlNamespaceManager : object {
    internal static IXmlNamespaceResolver EmptyResolver { get; }
    public XmlNameTable NameTable { get; }
    public string DefaultNamespace { get; }
    public XmlNamespaceManager(XmlNameTable nameTable);
    internal static IXmlNamespaceResolver get_EmptyResolver();
    public virtual XmlNameTable get_NameTable();
    public virtual string get_DefaultNamespace();
    public virtual void PushScope();
    public virtual bool PopScope();
    public virtual void AddNamespace(string prefix, string uri);
    public virtual void RemoveNamespace(string prefix, string uri);
    public virtual IEnumerator GetEnumerator();
    public virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string uri);
    public virtual bool HasNamespace(string prefix);
    internal bool GetNamespaceDeclaration(int idx, String& prefix, String& uri);
}
public enum System.Xml.XmlNamespaceScope : Enum {
    public int value__;
    public static XmlNamespaceScope All;
    public static XmlNamespaceScope ExcludeXml;
    public static XmlNamespaceScope Local;
}
public abstract class System.Xml.XmlNameTable : object {
    public abstract virtual string Get(Char[] array, int offset, int length);
    public abstract virtual string Get(string array);
    public abstract virtual string Add(Char[] array, int offset, int length);
    public abstract virtual string Add(string array);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
public abstract class System.Xml.XmlNode : object {
    internal XmlNode parentNode;
    public string Name { get; }
    public string Value { get; public set; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNodeList ChildNodes { get; }
    public XmlNode PreviousSibling { get; }
    public XmlNode NextSibling { get; }
    public XmlAttributeCollection Attributes { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlNode FirstChild { get; }
    public XmlNode LastChild { get; }
    internal bool IsContainer { get; }
    internal XmlLinkedNode LastNode { get; internal set; }
    public bool HasChildNodes { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; public set; }
    public string LocalName { get; }
    public bool IsReadOnly { get; }
    public string InnerText { get; public set; }
    public string OuterXml { get; }
    public string InnerXml { get; public set; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public string BaseURI { get; }
    internal XmlDocument Document { get; }
    public XmlElement Item { get; }
    public XmlElement Item { get; }
    internal XmlSpace XmlSpace { get; }
    internal string XmlLang { get; }
    internal XPathNodeType XPNodeType { get; }
    internal string XPLocalName { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    internal XmlNode(XmlDocument doc);
    public virtual XPathNavigator CreateNavigator();
    public XmlNode SelectSingleNode(string xpath);
    public XmlNode SelectSingleNode(string xpath, XmlNamespaceManager nsmgr);
    public XmlNodeList SelectNodes(string xpath);
    public XmlNodeList SelectNodes(string xpath, XmlNamespaceManager nsmgr);
    public abstract virtual string get_Name();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public abstract virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNodeList get_ChildNodes();
    public virtual XmlNode get_PreviousSibling();
    public virtual XmlNode get_NextSibling();
    public virtual XmlAttributeCollection get_Attributes();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlNode get_FirstChild();
    public virtual XmlNode get_LastChild();
    internal virtual bool get_IsContainer();
    internal virtual XmlLinkedNode get_LastNode();
    internal virtual void set_LastNode(XmlLinkedNode value);
    internal bool AncestorNode(XmlNode node);
    internal bool IsConnected();
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode PrependChild(XmlNode newChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    internal virtual XmlNode AppendChildForLoad(XmlNode newChild, XmlDocument doc);
    internal virtual bool IsValidChildType(XmlNodeType type);
    internal virtual bool CanInsertBefore(XmlNode newChild, XmlNode refChild);
    internal virtual bool CanInsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual bool get_HasChildNodes();
    public abstract virtual XmlNode CloneNode(bool deep);
    internal virtual void CopyChildren(XmlDocument doc, XmlNode container, bool deep);
    public virtual void Normalize();
    public virtual bool Supports(string feature, string version);
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public abstract virtual string get_LocalName();
    public virtual bool get_IsReadOnly();
    internal static bool HasReadOnlyParent(XmlNode n);
    public virtual XmlNode Clone();
    private sealed virtual override object System.ICloneable.Clone();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerator GetEnumerator();
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_OuterXml();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual string get_BaseURI();
    public abstract virtual void WriteTo(XmlWriter w);
    public abstract virtual void WriteContentTo(XmlWriter w);
    public virtual void RemoveAll();
    internal XmlDocument get_Document();
    public virtual string GetNamespaceOfPrefix(string prefix);
    internal string GetNamespaceOfPrefixStrict(string prefix);
    public virtual string GetPrefixOfNamespace(string namespaceURI);
    internal string GetPrefixOfNamespaceStrict(string namespaceURI);
    public virtual XmlElement get_Item(string name);
    public virtual XmlElement get_Item(string localname, string ns);
    internal virtual void SetParent(XmlNode node);
    internal virtual void SetParentForLoad(XmlNode node);
    internal static void SplitName(string name, String& prefix, String& localName);
    internal virtual XmlNode FindChild(XmlNodeType type);
    internal virtual XmlNodeChangedEventArgs GetEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action);
    internal virtual void BeforeEvent(XmlNodeChangedEventArgs args);
    internal virtual void AfterEvent(XmlNodeChangedEventArgs args);
    internal virtual XmlSpace get_XmlSpace();
    internal virtual string get_XmlLang();
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual string get_XPLocalName();
    internal virtual string GetXPAttribute(string localName, string namespaceURI);
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
    internal static void NestTextNodes(XmlNode prevNode, XmlNode nextNode);
    internal static void UnnestTextNodes(XmlNode prevNode, XmlNode nextNode);
}
public enum System.Xml.XmlNodeChangedAction : Enum {
    public int value__;
    public static XmlNodeChangedAction Insert;
    public static XmlNodeChangedAction Remove;
    public static XmlNodeChangedAction Change;
}
public class System.Xml.XmlNodeChangedEventArgs : EventArgs {
    public XmlNodeChangedAction Action { get; }
    public XmlNode Node { get; }
    public XmlNode OldParent { get; }
    public XmlNode NewParent { get; }
    public string OldValue { get; }
    public string NewValue { get; }
    public XmlNodeChangedEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action);
    public XmlNodeChangedAction get_Action();
    public XmlNode get_Node();
    public XmlNode get_OldParent();
    public XmlNode get_NewParent();
    public string get_OldValue();
    public string get_NewValue();
}
public class System.Xml.XmlNodeChangedEventHandler : MulticastDelegate {
    public XmlNodeChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlNodeChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlNodeChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("ItemOf")]
public abstract class System.Xml.XmlNodeList : object {
    public int Count { get; }
    public XmlNode ItemOf { get; }
    public abstract virtual XmlNode Item(int index);
    public abstract virtual int get_Count();
    public abstract virtual IEnumerator GetEnumerator();
    public virtual XmlNode get_ItemOf(int i);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void PrivateDisposeNodeList();
}
internal class System.Xml.XmlNodeListEnumerator : object {
    public object Current { get; }
    public XmlNodeListEnumerator(XPathNodeList list);
    public sealed virtual void Reset();
    public sealed virtual bool MoveNext();
    public sealed virtual object get_Current();
}
public enum System.Xml.XmlNodeOrder : Enum {
    public int value__;
    public static XmlNodeOrder Before;
    public static XmlNodeOrder After;
    public static XmlNodeOrder Same;
    public static XmlNodeOrder Unknown;
}
public class System.Xml.XmlNodeReader : XmlReader {
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool CanResolveEntity { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public bool HasAttributes { get; }
    public XmlNameTable NameTable { get; }
    public bool CanReadBinaryContent { get; }
    internal IDtdInfo DtdInfo { get; }
    public XmlNodeReader(XmlNode node);
    internal bool IsInReadingStates();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_CanResolveEntity();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int attributeIndex);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string namespaceURI);
    public virtual void MoveToAttribute(int attributeIndex);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual string ReadString();
    public virtual bool get_HasAttributes();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    internal virtual IDtdInfo get_DtdInfo();
}
internal class System.Xml.XmlNodeReaderNavigator : object {
    internal VirtualAttribute[] decNodeAttributes;
    internal VirtualAttribute[] docTypeNodeAttributes;
    public XmlNodeType NodeType { get; }
    public string NamespaceURI { get; }
    public string Name { get; }
    public string LocalName { get; }
    internal bool IsOnAttrVal { get; }
    internal XmlNode OwnerElementNode { get; }
    internal bool CreatedOnAttribute { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public string BaseURI { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public XmlNameTable NameTable { get; }
    public int AttributeCount { get; }
    public XmlDocument Document { get; }
    public XmlNodeReaderNavigator(XmlNode node);
    public XmlNodeType get_NodeType();
    public string get_NamespaceURI();
    public string get_Name();
    public string get_LocalName();
    internal bool get_IsOnAttrVal();
    internal XmlNode get_OwnerElementNode();
    internal bool get_CreatedOnAttribute();
    public string get_Prefix();
    public bool get_HasValue();
    public string get_Value();
    public string get_BaseURI();
    public XmlSpace get_XmlSpace();
    public string get_XmlLang();
    public bool get_IsEmptyElement();
    public bool get_IsDefault();
    public IXmlSchemaInfo get_SchemaInfo();
    public XmlNameTable get_NameTable();
    public int get_AttributeCount();
    public string GetDeclarationAttr(XmlDeclaration decl, string name);
    public string GetDeclarationAttr(int i);
    public int GetDecAttrInd(string name);
    public string GetDocumentTypeAttr(XmlDocumentType docType, string name);
    public string GetDocumentTypeAttr(int i);
    public int GetDocTypeAttrInd(string name);
    public string GetAttribute(string name);
    public string GetAttribute(string name, string ns);
    public string GetAttribute(int attributeIndex);
    public void LogMove(int level);
    public void RollBackMove(Int32& level);
    public void ResetToAttribute(Int32& level);
    public void ResetMove(Int32& level, XmlNodeType& nt);
    public bool MoveToAttribute(string name);
    public bool MoveToAttribute(string name, string namespaceURI);
    public void MoveToAttribute(int attributeIndex);
    public bool MoveToNextAttribute(Int32& level);
    public bool MoveToParent();
    public bool MoveToFirstChild();
    public bool MoveToNext();
    public bool MoveToElement();
    public string LookupNamespace(string prefix);
    internal string DefaultLookupNamespace(string prefix);
    internal string LookupPrefix(string namespaceName);
    internal IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public bool ReadAttributeValue(Int32& level, Boolean& bResolveEntity, XmlNodeType& nt);
    public XmlDocument get_Document();
}
public enum System.Xml.XmlNodeType : Enum {
    public int value__;
    public static XmlNodeType None;
    public static XmlNodeType Element;
    public static XmlNodeType Attribute;
    public static XmlNodeType Text;
    public static XmlNodeType CDATA;
    public static XmlNodeType EntityReference;
    public static XmlNodeType Entity;
    public static XmlNodeType ProcessingInstruction;
    public static XmlNodeType Comment;
    public static XmlNodeType Document;
    public static XmlNodeType DocumentType;
    public static XmlNodeType DocumentFragment;
    public static XmlNodeType Notation;
    public static XmlNodeType Whitespace;
    public static XmlNodeType SignificantWhitespace;
    public static XmlNodeType EndElement;
    public static XmlNodeType EndEntity;
    public static XmlNodeType XmlDeclaration;
}
public class System.Xml.XmlNotation : XmlNode {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public bool IsReadOnly { get; }
    public string PublicId { get; }
    public string SystemId { get; }
    public string OuterXml { get; }
    public string InnerXml { get; public set; }
    internal XmlNotation(string name, string publicId, string systemId, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual bool get_IsReadOnly();
    public string get_PublicId();
    public string get_SystemId();
    public virtual string get_OuterXml();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
}
internal class System.Xml.XmlNullResolver : XmlResolver {
    public static XmlNullResolver Singleton;
    unknown ICredentials Credentials {public set; }
    private static XmlNullResolver();
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual void set_Credentials(ICredentials value);
}
public enum System.Xml.XmlOutputMethod : Enum {
    public int value__;
    public static XmlOutputMethod Xml;
    public static XmlOutputMethod Html;
    public static XmlOutputMethod Text;
    public static XmlOutputMethod AutoDetect;
}
public class System.Xml.XmlParserContext : object {
    public XmlNameTable NameTable { get; public set; }
    public XmlNamespaceManager NamespaceManager { get; public set; }
    public string DocTypeName { get; public set; }
    public string PublicId { get; public set; }
    public string SystemId { get; public set; }
    public string BaseURI { get; public set; }
    public string InternalSubset { get; public set; }
    public string XmlLang { get; public set; }
    public XmlSpace XmlSpace { get; public set; }
    public Encoding Encoding { get; public set; }
    internal bool HasDtdInfo { get; }
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace, Encoding enc);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace, Encoding enc);
    public XmlNameTable get_NameTable();
    public void set_NameTable(XmlNameTable value);
    public XmlNamespaceManager get_NamespaceManager();
    public void set_NamespaceManager(XmlNamespaceManager value);
    public string get_DocTypeName();
    public void set_DocTypeName(string value);
    public string get_PublicId();
    public void set_PublicId(string value);
    public string get_SystemId();
    public void set_SystemId(string value);
    public string get_BaseURI();
    public void set_BaseURI(string value);
    public string get_InternalSubset();
    public void set_InternalSubset(string value);
    public string get_XmlLang();
    public void set_XmlLang(string value);
    public XmlSpace get_XmlSpace();
    public void set_XmlSpace(XmlSpace value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    internal bool get_HasDtdInfo();
}
public class System.Xml.XmlProcessingInstruction : XmlLinkedNode {
    public string Name { get; }
    public string LocalName { get; }
    public string Value { get; public set; }
    public string Target { get; }
    public string Data { get; public set; }
    public string InnerText { get; public set; }
    public XmlNodeType NodeType { get; }
    internal string XPLocalName { get; }
    internal XPathNodeType XPNodeType { get; }
    protected internal XmlProcessingInstruction(string target, string data, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public string get_Target();
    public string get_Data();
    public void set_Data(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual string get_XPLocalName();
    internal virtual XPathNodeType get_XPNodeType();
}
public class System.Xml.XmlQualifiedName : object {
    public static XmlQualifiedName Empty;
    public string Namespace { get; }
    public string Name { get; }
    public bool IsEmpty { get; }
    public XmlQualifiedName(string name);
    public XmlQualifiedName(string name, string ns);
    private static XmlQualifiedName();
    public string get_Namespace();
    public string get_Name();
    public virtual int GetHashCode();
    public bool get_IsEmpty();
    public virtual string ToString();
    public virtual bool Equals(object other);
    public static bool op_Equality(XmlQualifiedName a, XmlQualifiedName b);
    public static bool op_Inequality(XmlQualifiedName a, XmlQualifiedName b);
    public static string ToString(string name, string ns);
    internal void Init(string name, string ns);
    internal void SetNamespace(string ns);
    internal void Verify();
    internal void Atomize(XmlNameTable nameTable);
    internal static XmlQualifiedName Parse(string s, IXmlNamespaceResolver nsmgr, String& prefix);
    internal XmlQualifiedName Clone();
    internal static int Compare(XmlQualifiedName a, XmlQualifiedName b);
}
internal abstract class System.Xml.XmlRawWriter : XmlWriter {
    protected XmlRawWriterBase64Encoder base64Encoder;
    protected IXmlNamespaceResolver resolver;
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal IXmlNamespaceResolver NamespaceResolver { get; internal set; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual string LookupPrefix(string ns);
    public virtual WriteState get_WriteState();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    public virtual void WriteNode(XPathNavigator navigator, bool defattr);
    internal virtual IXmlNamespaceResolver get_NamespaceResolver();
    internal virtual void set_NamespaceResolver(IXmlNamespaceResolver value);
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    internal abstract virtual void StartElementContent();
    internal virtual void OnRootElement(ConformanceLevel conformanceLevel);
    internal abstract virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    internal virtual void WriteQualifiedName(string prefix, string localName, string ns);
    internal abstract virtual void WriteNamespaceDeclaration(string prefix, string ns);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    internal virtual void WriteEndBase64();
    internal virtual void Close(WriteState currentState);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XPathNavigator navigator, bool defattr);
    internal virtual Task WriteXmlDeclarationAsync(XmlStandalone standalone);
    internal virtual Task WriteXmlDeclarationAsync(string xmldecl);
    internal virtual Task StartElementContentAsync();
    internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlRawWriter/<WriteQualifiedNameAsync>d__2")]
internal virtual Task WriteQualifiedNameAsync(string prefix, string localName, string ns);
    internal virtual Task WriteNamespaceDeclarationAsync(string prefix, string ns);
    internal virtual Task WriteStartNamespaceDeclarationAsync(string prefix);
    internal virtual Task WriteEndNamespaceDeclarationAsync();
    internal virtual Task WriteEndBase64Async();
}
internal class System.Xml.XmlRawWriterBase64Encoder : Base64Encoder {
    internal XmlRawWriterBase64Encoder(XmlRawWriter rawWriter);
    internal virtual void WriteChars(Char[] chars, int index, int count);
    internal virtual Task WriteCharsAsync(Char[] chars, int index, int count);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
public abstract class System.Xml.XmlReader : object {
    internal static int DefaultBufferSize;
    internal static int BiggerBufferSize;
    internal static int MaxStreamLengthForDefaultBufferSize;
    internal static int AsyncBufferSize;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool HasAttributes { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    internal bool IsDefaultInternal { get; }
    internal IDtdInfo DtdInfo { get; }
    private static XmlReader();
    public virtual XmlReaderSettings get_Settings();
    public abstract virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public abstract virtual string get_LocalName();
    public abstract virtual string get_NamespaceURI();
    public abstract virtual string get_Prefix();
    public virtual bool get_HasValue();
    public abstract virtual string get_Value();
    public abstract virtual int get_Depth();
    public abstract virtual string get_BaseURI();
    public abstract virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual DateTimeOffset ReadContentAsDateTimeOffset();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAsObject();
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI);
    public virtual bool ReadElementContentAsBoolean();
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    public virtual DateTime ReadElementContentAsDateTime();
    public virtual DateTime ReadElementContentAsDateTime(string localName, string namespaceURI);
    public virtual double ReadElementContentAsDouble();
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI);
    public virtual float ReadElementContentAsFloat();
    public virtual float ReadElementContentAsFloat(string localName, string namespaceURI);
    public virtual decimal ReadElementContentAsDecimal();
    public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI);
    public virtual int ReadElementContentAsInt();
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI);
    public virtual long ReadElementContentAsLong();
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI);
    public virtual string ReadElementContentAsString();
    public virtual string ReadElementContentAsString(string localName, string namespaceURI);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    public abstract virtual int get_AttributeCount();
    public abstract virtual string GetAttribute(string name);
    public abstract virtual string GetAttribute(string name, string namespaceURI);
    public abstract virtual string GetAttribute(int i);
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public abstract virtual bool MoveToAttribute(string name);
    public abstract virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public abstract virtual bool MoveToFirstAttribute();
    public abstract virtual bool MoveToNextAttribute();
    public abstract virtual bool MoveToElement();
    public abstract virtual bool ReadAttributeValue();
    public abstract virtual bool Read();
    public abstract virtual bool get_EOF();
    public virtual void Close();
    public abstract virtual ReadState get_ReadState();
    public virtual void Skip();
    public abstract virtual XmlNameTable get_NameTable();
    public abstract virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public abstract virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    [EditorBrowsableAttribute("1")]
public virtual string ReadString();
    public virtual XmlNodeType MoveToContent();
    public virtual void ReadStartElement();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localname, string ns);
    [EditorBrowsableAttribute("1")]
public virtual string ReadElementString();
    [EditorBrowsableAttribute("1")]
public virtual string ReadElementString(string name);
    [EditorBrowsableAttribute("1")]
public virtual string ReadElementString(string localname, string ns);
    public virtual void ReadEndElement();
    public virtual bool IsStartElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localname, string ns);
    public virtual bool ReadToFollowing(string name);
    public virtual bool ReadToFollowing(string localName, string namespaceURI);
    public virtual bool ReadToDescendant(string name);
    public virtual bool ReadToDescendant(string localName, string namespaceURI);
    public virtual bool ReadToNextSibling(string name);
    public virtual bool ReadToNextSibling(string localName, string namespaceURI);
    public static bool IsName(string str);
    public static bool IsNameToken(string str);
    public virtual string ReadInnerXml();
    public virtual string ReadOuterXml();
    public virtual XmlReader ReadSubtree();
    public virtual bool get_HasAttributes();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    internal virtual XmlNamespaceManager get_NamespaceManager();
    internal static bool IsTextualNode(XmlNodeType nodeType);
    internal static bool CanReadContentAs(XmlNodeType nodeType);
    internal static bool HasValueInternal(XmlNodeType nodeType);
    internal void CheckElement(string localName, string namespaceURI);
    internal Exception CreateReadContentAsException(string methodName);
    internal Exception CreateReadElementContentAsException(string methodName);
    internal bool CanReadContentAs();
    internal static Exception CreateReadContentAsException(string methodName, XmlNodeType nodeType, IXmlLineInfo lineInfo);
    internal static Exception CreateReadElementContentAsException(string methodName, XmlNodeType nodeType, IXmlLineInfo lineInfo);
    internal string InternalReadContentAsString();
    internal bool get_IsDefaultInternal();
    internal virtual IDtdInfo get_DtdInfo();
    internal static Encoding GetEncoding(XmlReader reader);
    internal static ConformanceLevel GetV1ConformanceLevel(XmlReader reader);
    public static XmlReader Create(string inputUri);
    public static XmlReader Create(string inputUri, XmlReaderSettings settings);
    public static XmlReader Create(string inputUri, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(Stream input);
    public static XmlReader Create(Stream input, XmlReaderSettings settings);
    public static XmlReader Create(Stream input, XmlReaderSettings settings, string baseUri);
    public static XmlReader Create(Stream input, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(TextReader input);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings, string baseUri);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(XmlReader reader, XmlReaderSettings settings);
    internal static XmlReader CreateSqlReader(Stream input, XmlReaderSettings settings, XmlParserContext inputContext);
    internal static int CalcBufferSize(Stream input);
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadContentAsObjectAsync>d__1")]
public virtual Task`1<object> ReadContentAsObjectAsync();
    public virtual Task`1<string> ReadContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadContentAsAsync>d__1")]
public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadElementContentAsObjectAsync>d__1")]
public virtual Task`1<object> ReadElementContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadElementContentAsStringAsync>d__1")]
public virtual Task`1<string> ReadElementContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadElementContentAsAsync>d__1")]
public virtual Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<bool> ReadAsync();
    public virtual Task SkipAsync();
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<MoveToContentAsync>d__1")]
public virtual Task`1<XmlNodeType> MoveToContentAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadInnerXmlAsync>d__1")]
public virtual Task`1<string> ReadInnerXmlAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<ReadOuterXmlAsync>d__1")]
public virtual Task`1<string> ReadOuterXmlAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlReader/<InternalReadContentAsStringAsync>d__1")]
internal Task`1<string> InternalReadContentAsStringAsync();
}
public class System.Xml.XmlReaderSettings : object {
    public bool Async { get; public set; }
    public XmlNameTable NameTable { get; public set; }
    internal bool IsXmlResolverSet { get; internal set; }
    unknown XmlResolver XmlResolver {public set; }
    public int LineNumberOffset { get; public set; }
    public int LinePositionOffset { get; public set; }
    public ConformanceLevel ConformanceLevel { get; public set; }
    public bool CheckCharacters { get; public set; }
    public long MaxCharactersInDocument { get; public set; }
    public long MaxCharactersFromEntities { get; public set; }
    public bool IgnoreWhitespace { get; public set; }
    public bool IgnoreProcessingInstructions { get; public set; }
    public bool IgnoreComments { get; public set; }
    [ObsoleteAttribute("Use XmlReaderSettings.DtdProcessing property instead.")]
public bool ProhibitDtd { get; public set; }
    public DtdProcessing DtdProcessing { get; public set; }
    public bool CloseInput { get; public set; }
    public ValidationType ValidationType { get; public set; }
    public XmlSchemaValidationFlags ValidationFlags { get; public set; }
    public XmlSchemaSet Schemas { get; public set; }
    internal bool ReadOnly { get; internal set; }
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public XmlReaderSettings(XmlResolver resolver);
    private static XmlReaderSettings();
    public bool get_Async();
    public void set_Async(bool value);
    public XmlNameTable get_NameTable();
    public void set_NameTable(XmlNameTable value);
    [CompilerGeneratedAttribute]
internal bool get_IsXmlResolverSet();
    [CompilerGeneratedAttribute]
internal void set_IsXmlResolverSet(bool value);
    public void set_XmlResolver(XmlResolver value);
    internal XmlResolver GetXmlResolver();
    internal XmlResolver GetXmlResolver_CheckConfig();
    public int get_LineNumberOffset();
    public void set_LineNumberOffset(int value);
    public int get_LinePositionOffset();
    public void set_LinePositionOffset(int value);
    public ConformanceLevel get_ConformanceLevel();
    public void set_ConformanceLevel(ConformanceLevel value);
    public bool get_CheckCharacters();
    public void set_CheckCharacters(bool value);
    public long get_MaxCharactersInDocument();
    public void set_MaxCharactersInDocument(long value);
    public long get_MaxCharactersFromEntities();
    public void set_MaxCharactersFromEntities(long value);
    public bool get_IgnoreWhitespace();
    public void set_IgnoreWhitespace(bool value);
    public bool get_IgnoreProcessingInstructions();
    public void set_IgnoreProcessingInstructions(bool value);
    public bool get_IgnoreComments();
    public void set_IgnoreComments(bool value);
    public bool get_ProhibitDtd();
    public void set_ProhibitDtd(bool value);
    public DtdProcessing get_DtdProcessing();
    public void set_DtdProcessing(DtdProcessing value);
    public bool get_CloseInput();
    public void set_CloseInput(bool value);
    public ValidationType get_ValidationType();
    public void set_ValidationType(ValidationType value);
    public XmlSchemaValidationFlags get_ValidationFlags();
    public void set_ValidationFlags(XmlSchemaValidationFlags value);
    public XmlSchemaSet get_Schemas();
    public void set_Schemas(XmlSchemaSet value);
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public void Reset();
    public XmlReaderSettings Clone();
    internal ValidationEventHandler GetEventHandler();
    internal XmlReader CreateReader(string inputUri, XmlParserContext inputContext);
    internal XmlReader CreateReader(Stream input, Uri baseUri, string baseUriString, XmlParserContext inputContext);
    internal XmlReader CreateReader(TextReader input, string baseUriString, XmlParserContext inputContext);
    internal XmlReader CreateReader(XmlReader reader);
    internal bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    internal XmlReader AddValidation(XmlReader reader);
    internal XmlReader AddConformanceWrapper(XmlReader baseReader);
    internal static bool EnableLegacyXmlSettings();
}
internal class System.Xml.XmlRegisteredNonCachedStream : Stream {
    protected Stream stream;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal XmlRegisteredNonCachedStream(Stream stream, XmlDownloadManager downloadManager, string host);
    protected virtual override void Finalize();
    protected virtual void Dispose(bool disposing);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
}
internal static class System.Xml.XmlReservedNs : object {
    internal static string NsXml;
    internal static string NsXmlNs;
    internal static string NsDataType;
    internal static string NsDataTypeAlias;
    internal static string NsDataTypeOld;
    internal static string NsMsxsl;
    internal static string NsXdr;
    internal static string NsXslDebug;
    internal static string NsXdrAlias;
    internal static string NsWdXsl;
    internal static string NsXs;
    internal static string NsXsd;
    internal static string NsXsi;
    internal static string NsXslt;
    internal static string NsExsltCommon;
    internal static string NsExsltDates;
    internal static string NsExsltMath;
    internal static string NsExsltRegExps;
    internal static string NsExsltSets;
    internal static string NsExsltStrings;
    internal static string NsXQueryFunc;
    internal static string NsXQueryDataType;
    internal static string NsCollationBase;
    internal static string NsCollCodePoint;
    internal static string NsXsltInternal;
}
public abstract class System.Xml.XmlResolver : object {
    unknown ICredentials Credentials {public set; }
    public abstract virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
    public virtual void set_Credentials(ICredentials value);
    public virtual bool SupportsType(Uri absoluteUri, Type type);
    public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
}
public class System.Xml.XmlSecureResolver : XmlResolver {
    unknown ICredentials Credentials {public set; }
    public XmlSecureResolver(XmlResolver resolver, string securityUrl);
    public XmlSecureResolver(XmlResolver resolver, Evidence evidence);
    public XmlSecureResolver(XmlResolver resolver, PermissionSet permissionSet);
    public virtual void set_Credentials(ICredentials value);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
    public static Evidence CreateEvidenceForUrl(string securityUrl);
    public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
}
public class System.Xml.XmlSignificantWhitespace : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public string Value { get; public set; }
    internal XPathNodeType XPNodeType { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    protected internal XmlSignificantWhitespace(string strData, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode CloneNode(bool deep);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
public enum System.Xml.XmlSpace : Enum {
    public int value__;
    public static XmlSpace None;
    public static XmlSpace Default;
    public static XmlSpace Preserve;
}
internal class System.Xml.XmlSqlBinaryReader : XmlReader {
    internal static Type TypeOfObject;
    internal static Type TypeOfString;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public XmlNameTable NameTable { get; }
    public ReadState ReadState { get; }
    public XmlSqlBinaryReader(Stream stream, Byte[] data, int len, string baseUri, bool closeInput, XmlReaderSettings settings);
    private static XmlSqlBinaryReader();
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual Type get_ValueType();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name, string ns);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual bool MoveToAttribute(string name);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool get_EOF();
    public virtual bool ReadAttributeValue();
    public virtual void Close();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual ReadState get_ReadState();
    public virtual bool Read();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual object ReadContentAsObject();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    public virtual Task`1<string> GetValueAsync();
    public virtual Task`1<bool> ReadAsync();
    public virtual Task`1<object> ReadContentAsObjectAsync();
    public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<XmlNodeType> MoveToContentAsync();
    public virtual Task`1<string> ReadContentAsStringAsync();
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<object> ReadElementContentAsObjectAsync();
    public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<string> ReadInnerXmlAsync();
    public virtual Task`1<string> ReadOuterXmlAsync();
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    public virtual Task SkipAsync();
    public virtual Task`1<string> ReadElementContentAsStringAsync();
}
internal enum System.Xml.XmlStandalone : Enum {
    public int value__;
    public static XmlStandalone Omit;
    public static XmlStandalone Yes;
    public static XmlStandalone No;
}
internal class System.Xml.XmlSubtreeReader : XmlWrappingReader {
    internal int InitialNamespaceAttributeCount;
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public int AttributeCount { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    private int System.Xml.IXmlLineInfo.LineNumber { get; }
    private int System.Xml.IXmlLineInfo.LinePosition { get; }
    internal XmlSubtreeReader(XmlReader reader);
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual XmlNameTable get_NameTable();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual void Close();
    public virtual void Skip();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual string LookupNamespace(string prefix);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LinePosition();
    private sealed virtual override bool System.Xml.IXmlLineInfo.HasLineInfo();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadAsync>d__1")]
public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<SkipAsync>d__1")]
public virtual Task SkipAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsObjectAsync>d__1")]
public virtual Task`1<object> ReadContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsStringAsync>d__1")]
public virtual Task`1<string> ReadContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsAsync>d__1")]
public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsBase64Async>d__1")]
public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadElementContentAsBase64Async>d__1")]
public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadContentAsBinHexAsync>d__1")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlSubtreeReader/<ReadElementContentAsBinHexAsync>d__1")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
}
public class System.Xml.XmlText : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public string Value { get; public set; }
    internal XPathNodeType XPNodeType { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    internal XmlText(string strData);
    protected internal XmlText(string strData, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode CloneNode(bool deep);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlText SplitText(int offset);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
internal class System.Xml.XmlTextEncoder : object {
    unknown char QuoteChar {internal set; }
    internal string AttributeValue { get; }
    internal XmlTextEncoder(TextWriter textWriter);
    internal void set_QuoteChar(char value);
    internal void StartAttribute(bool cacheAttrValue);
    internal void EndAttribute();
    internal string get_AttributeValue();
    internal void WriteSurrogateChar(char lowChar, char highChar);
    internal void Write(Char[] array, int offset, int count);
    internal void WriteSurrogateCharEntity(char lowChar, char highChar);
    internal void Write(string text);
    internal void WriteRawWithSurrogateChecking(string text);
    internal void WriteRaw(string value);
    internal void WriteRaw(Char[] array, int offset, int count);
    internal void WriteCharEntity(char ch);
    internal void WriteEntityRef(string name);
    internal void Flush();
}
[EditorBrowsableAttribute("1")]
public class System.Xml.XmlTextReader : XmlReader {
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public bool Namespaces { get; public set; }
    public bool Normalization { get; public set; }
    public Encoding Encoding { get; }
    public WhitespaceHandling WhitespaceHandling { get; public set; }
    [ObsoleteAttribute("Use DtdProcessing property instead.")]
public bool ProhibitDtd { get; public set; }
    public DtdProcessing DtdProcessing { get; public set; }
    public EntityHandling EntityHandling { get; public set; }
    unknown XmlResolver XmlResolver {public set; }
    internal XmlTextReaderImpl Impl { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    unknown bool XmlValidatingReaderCompatibilityMode {internal set; }
    internal IDtdInfo DtdInfo { get; }
    protected XmlTextReader(XmlNameTable nt);
    public XmlTextReader(Stream input);
    public XmlTextReader(string url, Stream input);
    public XmlTextReader(Stream input, XmlNameTable nt);
    public XmlTextReader(string url, Stream input, XmlNameTable nt);
    public XmlTextReader(TextReader input);
    public XmlTextReader(string url, TextReader input);
    public XmlTextReader(TextReader input, XmlNameTable nt);
    public XmlTextReader(string url, TextReader input, XmlNameTable nt);
    public XmlTextReader(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public XmlTextReader(string xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public XmlTextReader(string url);
    public XmlTextReader(string url, XmlNameTable nt);
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual string ReadString();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public bool get_Namespaces();
    public void set_Namespaces(bool value);
    public bool get_Normalization();
    public void set_Normalization(bool value);
    public Encoding get_Encoding();
    public WhitespaceHandling get_WhitespaceHandling();
    public void set_WhitespaceHandling(WhitespaceHandling value);
    public bool get_ProhibitDtd();
    public void set_ProhibitDtd(bool value);
    public DtdProcessing get_DtdProcessing();
    public void set_DtdProcessing(DtdProcessing value);
    public EntityHandling get_EntityHandling();
    public void set_EntityHandling(EntityHandling value);
    public void set_XmlResolver(XmlResolver value);
    public void ResetState();
    public TextReader GetRemainder();
    public int ReadChars(Char[] buffer, int index, int count);
    public int ReadBase64(Byte[] array, int offset, int len);
    public int ReadBinHex(Byte[] array, int offset, int len);
    internal XmlTextReaderImpl get_Impl();
    internal virtual XmlNamespaceManager get_NamespaceManager();
    internal void set_XmlValidatingReaderCompatibilityMode(bool value);
    internal virtual IDtdInfo get_DtdInfo();
}
internal class System.Xml.XmlTextReaderImpl : XmlReader {
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public ReadState ReadState { get; }
    public bool EOF { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public int AttributeCount { get; }
    internal XmlReader OuterReader { get; internal set; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal bool Namespaces { get; internal set; }
    internal bool Normalization { get; internal set; }
    internal Encoding Encoding { get; }
    internal WhitespaceHandling WhitespaceHandling { get; internal set; }
    internal DtdProcessing DtdProcessing { get; internal set; }
    internal EntityHandling EntityHandling { get; internal set; }
    internal bool IsResolverSet { get; }
    unknown XmlResolver XmlResolver {internal set; }
    internal XmlNameTable DtdParserProxy_NameTable { get; }
    internal IXmlNamespaceResolver DtdParserProxy_NamespaceResolver { get; }
    internal bool DtdParserProxy_DtdValidation { get; }
    internal bool DtdParserProxy_Normalization { get; }
    internal bool DtdParserProxy_Namespaces { get; }
    internal bool DtdParserProxy_V1CompatibilityMode { get; }
    internal Uri DtdParserProxy_BaseUri { get; }
    internal bool DtdParserProxy_IsEof { get; }
    internal Char[] DtdParserProxy_ParsingBuffer { get; }
    internal int DtdParserProxy_ParsingBufferLength { get; }
    internal int DtdParserProxy_CurrentPosition { get; internal set; }
    internal int DtdParserProxy_EntityStackLength { get; }
    internal bool DtdParserProxy_IsEntityEolNormalized { get; }
    internal IValidationEventHandling DtdParserProxy_ValidationEventHandling { get; internal set; }
    internal int DtdParserProxy_LineNo { get; }
    internal int DtdParserProxy_LineStartPosition { get; }
    internal IDtdInfo DtdInfo { get; }
    unknown IValidationEventHandling ValidationEventHandling {internal set; }
    unknown OnDefaultAttributeUseDelegate OnDefaultAttributeUse {internal set; }
    unknown bool XmlValidatingReaderCompatibilityMode {internal set; }
    internal XmlNodeType FragmentType { get; }
    internal object InternalSchemaType { get; internal set; }
    internal object InternalTypedValue { get; internal set; }
    internal bool StandAlone { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    internal bool V1Compat { get; }
    internal ConformanceLevel V1ComformanceLevel { get; }
    unknown bool DisableUndeclaredEntityCheck {internal set; }
    internal XmlTextReaderImpl(XmlNameTable nt);
    internal XmlTextReaderImpl(Stream input);
    internal XmlTextReaderImpl(Stream input, XmlNameTable nt);
    internal XmlTextReaderImpl(string url, Stream input);
    internal XmlTextReaderImpl(string url, Stream input, XmlNameTable nt);
    internal XmlTextReaderImpl(TextReader input);
    internal XmlTextReaderImpl(TextReader input, XmlNameTable nt);
    internal XmlTextReaderImpl(string url, TextReader input);
    internal XmlTextReaderImpl(string url, TextReader input, XmlNameTable nt);
    internal XmlTextReaderImpl(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context);
    internal XmlTextReaderImpl(string xmlFragment, XmlNodeType fragType, XmlParserContext context);
    internal XmlTextReaderImpl(string xmlFragment, XmlParserContext context);
    public XmlTextReaderImpl(string url);
    public XmlTextReaderImpl(string url, XmlNameTable nt);
    internal XmlTextReaderImpl(string uriStr, XmlReaderSettings settings, XmlParserContext context, XmlResolver uriResolver);
    internal XmlTextReaderImpl(Stream stream, Byte[] bytes, int byteCount, XmlReaderSettings settings, Uri baseUri, string baseUriStr, XmlParserContext context, bool closeInput);
    internal XmlTextReaderImpl(TextReader input, XmlReaderSettings settings, string baseUriStr, XmlParserContext context);
    internal XmlTextReaderImpl(string xmlFragment, XmlParserContext context, XmlReaderSettings settings);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual ReadState get_ReadState();
    public virtual bool get_EOF();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_CanResolveEntity();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual void Close();
    public virtual void Skip();
    public virtual string LookupNamespace(string prefix);
    public virtual bool ReadAttributeValue();
    public virtual void ResolveEntity();
    internal XmlReader get_OuterReader();
    internal void set_OuterReader(XmlReader value);
    internal void MoveOffEntityReference();
    public virtual string ReadString();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    internal IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    internal string LookupPrefix(string namespaceName);
    internal bool get_Namespaces();
    internal void set_Namespaces(bool value);
    internal bool get_Normalization();
    internal void set_Normalization(bool value);
    internal Encoding get_Encoding();
    internal WhitespaceHandling get_WhitespaceHandling();
    internal void set_WhitespaceHandling(WhitespaceHandling value);
    internal DtdProcessing get_DtdProcessing();
    internal void set_DtdProcessing(DtdProcessing value);
    internal EntityHandling get_EntityHandling();
    internal void set_EntityHandling(EntityHandling value);
    internal bool get_IsResolverSet();
    internal void set_XmlResolver(XmlResolver value);
    internal void ResetState();
    internal TextReader GetRemainder();
    internal int ReadChars(Char[] buffer, int index, int count);
    internal int ReadBase64(Byte[] array, int offset, int len);
    internal int ReadBinHex(Byte[] array, int offset, int len);
    internal XmlNameTable get_DtdParserProxy_NameTable();
    internal IXmlNamespaceResolver get_DtdParserProxy_NamespaceResolver();
    internal bool get_DtdParserProxy_DtdValidation();
    internal bool get_DtdParserProxy_Normalization();
    internal bool get_DtdParserProxy_Namespaces();
    internal bool get_DtdParserProxy_V1CompatibilityMode();
    internal Uri get_DtdParserProxy_BaseUri();
    internal bool get_DtdParserProxy_IsEof();
    internal Char[] get_DtdParserProxy_ParsingBuffer();
    internal int get_DtdParserProxy_ParsingBufferLength();
    internal int get_DtdParserProxy_CurrentPosition();
    internal void set_DtdParserProxy_CurrentPosition(int value);
    internal int get_DtdParserProxy_EntityStackLength();
    internal bool get_DtdParserProxy_IsEntityEolNormalized();
    internal IValidationEventHandling get_DtdParserProxy_ValidationEventHandling();
    internal void set_DtdParserProxy_ValidationEventHandling(IValidationEventHandling value);
    internal void DtdParserProxy_OnNewLine(int pos);
    internal int get_DtdParserProxy_LineNo();
    internal int get_DtdParserProxy_LineStartPosition();
    internal int DtdParserProxy_ReadData();
    internal int DtdParserProxy_ParseNumericCharRef(StringBuilder internalSubsetBuilder);
    internal int DtdParserProxy_ParseNamedCharRef(bool expand, StringBuilder internalSubsetBuilder);
    internal void DtdParserProxy_ParsePI(StringBuilder sb);
    internal void DtdParserProxy_ParseComment(StringBuilder sb);
    internal bool DtdParserProxy_PushEntity(IDtdEntityInfo entity, Int32& entityId);
    internal bool DtdParserProxy_PopEntity(IDtdEntityInfo& oldEntity, Int32& newEntityId);
    internal bool DtdParserProxy_PushExternalSubset(string systemId, string publicId);
    internal void DtdParserProxy_PushInternalDtd(string baseUri, string internalDtd);
    internal void DtdParserProxy_Throw(Exception e);
    internal void DtdParserProxy_OnSystemId(string systemId, LineInfo keywordLineInfo, LineInfo systemLiteralLineInfo);
    internal void DtdParserProxy_OnPublicId(string publicId, LineInfo keywordLineInfo, LineInfo publicLiteralLineInfo);
    internal void Close(bool closeInput);
    internal virtual IDtdInfo get_DtdInfo();
    internal void SetDtdInfo(IDtdInfo newDtdInfo);
    internal void set_ValidationEventHandling(IValidationEventHandling value);
    internal void set_OnDefaultAttributeUse(OnDefaultAttributeUseDelegate value);
    internal void set_XmlValidatingReaderCompatibilityMode(bool value);
    internal XmlNodeType get_FragmentType();
    internal void ChangeCurrentNodeType(XmlNodeType newNodeType);
    internal XmlResolver GetResolver();
    internal object get_InternalSchemaType();
    internal void set_InternalSchemaType(object value);
    internal object get_InternalTypedValue();
    internal void set_InternalTypedValue(object value);
    internal bool get_StandAlone();
    internal virtual XmlNamespaceManager get_NamespaceManager();
    internal bool get_V1Compat();
    internal ConformanceLevel get_V1ComformanceLevel();
    internal bool AddDefaultAttributeNonDtd(SchemaAttDef attrDef);
    internal void set_DisableUndeclaredEntityCheck(bool value);
    internal static void AdjustLineInfo(Char[] chars, int startPos, int endPos, bool isNormalized, LineInfo& lineInfo);
    internal static void AdjustLineInfo(string str, int startPos, int endPos, bool isNormalized, LineInfo& lineInfo);
    internal static void AdjustLineInfo(Char* pChars, int length, bool isNormalized, LineInfo& lineInfo);
    internal static string StripSpaces(string value);
    internal static void StripSpaces(Char[] value, int index, Int32& len);
    internal static void BlockCopyChars(Char[] src, int srcOffset, Char[] dst, int dstOffset, int count);
    internal static void BlockCopy(Byte[] src, int srcOffset, Byte[] dst, int dstOffset, int count);
    public virtual Task`1<string> GetValueAsync();
    public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<SkipAsync>d__1")]
public virtual Task SkipAsync();
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadContentAsBinHexAsync>d__1")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadElementContentAsBinHexAsync>d__1")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<ReadValueChunkAsync>d__1")]
public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    internal Task`1<int> DtdParserProxy_ReadDataAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_ParseNumericCharRefAsync>d__1")]
internal Task`1<int> DtdParserProxy_ParseNumericCharRefAsync(StringBuilder internalSubsetBuilder);
    internal Task`1<int> DtdParserProxy_ParseNamedCharRefAsync(bool expand, StringBuilder internalSubsetBuilder);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_ParsePIAsync>d__1")]
internal Task DtdParserProxy_ParsePIAsync(StringBuilder sb);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_ParseCommentAsync>d__1")]
internal Task DtdParserProxy_ParseCommentAsync(StringBuilder sb);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_PushEntityAsync>d__1")]
internal Task`1<Tuple`2<int, bool>> DtdParserProxy_PushEntityAsync(IDtdEntityInfo entity);
    [AsyncStateMachineAttribute("System.Xml.XmlTextReaderImpl/<DtdParserProxy_PushExternalSubsetAsync>d__1")]
internal Task`1<bool> DtdParserProxy_PushExternalSubsetAsync(string systemId, string publicId);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.XmlTextWriter : XmlWriter {
    public Stream BaseStream { get; }
    public bool Namespaces { get; public set; }
    public Formatting Formatting { get; public set; }
    public int Indentation { get; public set; }
    public char IndentChar { get; public set; }
    public char QuoteChar { get; public set; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public XmlTextWriter(Stream w, Encoding encoding);
    public XmlTextWriter(string filename, Encoding encoding);
    public XmlTextWriter(TextWriter w);
    private static XmlTextWriter();
    public Stream get_BaseStream();
    public bool get_Namespaces();
    public void set_Namespaces(bool value);
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public int get_Indentation();
    public void set_Indentation(int value);
    public char get_IndentChar();
    public void set_IndentChar(char value);
    public char get_QuoteChar();
    public void set_QuoteChar(char value);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual WriteState get_WriteState();
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
}
internal class System.Xml.XmlTextWriterBase64Encoder : Base64Encoder {
    internal XmlTextWriterBase64Encoder(XmlTextEncoder xmlTextEncoder);
    internal virtual void WriteChars(Char[] chars, int index, int count);
    internal virtual Task WriteCharsAsync(Char[] chars, int index, int count);
}
public enum System.Xml.XmlTokenizedType : Enum {
    public int value__;
    public static XmlTokenizedType CDATA;
    public static XmlTokenizedType ID;
    public static XmlTokenizedType IDREF;
    public static XmlTokenizedType IDREFS;
    public static XmlTokenizedType ENTITY;
    public static XmlTokenizedType ENTITIES;
    public static XmlTokenizedType NMTOKEN;
    public static XmlTokenizedType NMTOKENS;
    public static XmlTokenizedType NOTATION;
    public static XmlTokenizedType ENUMERATION;
    public static XmlTokenizedType QName;
    public static XmlTokenizedType NCName;
    public static XmlTokenizedType None;
}
internal class System.Xml.XmlUnspecifiedAttribute : XmlAttribute {
    public bool Specified { get; }
    unknown string InnerText {public set; }
    protected internal XmlUnspecifiedAttribute(string prefix, string localName, string namespaceURI, XmlDocument doc);
    public virtual bool get_Specified();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void set_InnerText(string value);
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    public virtual void WriteTo(XmlWriter w);
    internal void SetSpecified(bool f);
}
public class System.Xml.XmlUrlResolver : XmlResolver {
    unknown ICredentials Credentials {public set; }
    unknown IWebProxy Proxy {public set; }
    unknown RequestCachePolicy CachePolicy {public set; }
    public virtual void set_Credentials(ICredentials value);
    public void set_Proxy(IWebProxy value);
    public void set_CachePolicy(RequestCachePolicy value);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
    [AsyncStateMachineAttribute("System.Xml.XmlUrlResolver/<GetEntityAsync>d__1")]
public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
}
internal class System.Xml.XmlUtf8RawTextWriter : XmlRawWriter {
    protected Byte[] bufBytes;
    protected Stream stream;
    protected Encoding encoding;
    protected XmlCharType xmlCharType;
    protected int bufPos;
    protected int textPos;
    protected int contentPos;
    protected int cdataPos;
    protected int attrEndPos;
    protected int bufLen;
    protected bool writeToNull;
    protected bool hadDoubleBracket;
    protected bool inAttributeValue;
    protected NewLineHandling newLineHandling;
    protected bool closeOutput;
    protected bool omitXmlDeclaration;
    protected string newLineChars;
    protected bool checkCharacters;
    protected XmlStandalone standalone;
    protected XmlOutputMethod outputMethod;
    protected bool autoXmlDeclaration;
    protected bool mergeCDataSections;
    public XmlWriterSettings Settings { get; }
    internal bool SupportsNamespaceDeclarationInChunks { get; }
    protected XmlUtf8RawTextWriter(XmlWriterSettings settings);
    public XmlUtf8RawTextWriter(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    internal virtual void WriteXmlDeclaration(XmlStandalone standalone);
    internal virtual void WriteXmlDeclaration(string xmldecl);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    internal virtual void WriteNamespaceDeclaration(string prefix, string namespaceName);
    internal virtual bool get_SupportsNamespaceDeclarationInChunks();
    internal virtual void WriteStartNamespaceDeclaration(string prefix);
    internal virtual void WriteEndNamespaceDeclaration();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void Close();
    public virtual void Flush();
    protected virtual void FlushBuffer();
    protected void WriteAttributeTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void WriteElementTextBlock(Char* pSrc, Char* pSrcEnd);
    protected void RawText(string s);
    protected void RawText(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteRawWithCharChecking(Char* pSrcBegin, Char* pSrcEnd);
    protected void WriteCommentOrPi(string text, int stopChar);
    protected void WriteCDataSection(string text);
    internal void EncodeChar(Char*& pSrc, Char* pSrcEnd, Byte*& pDst);
    internal static Byte* EncodeMultibyteUTF8(int ch, Byte* pDst);
    internal static void CharToUTF8(Char*& pSrc, Char* pSrcEnd, Byte*& pDst);
    protected Byte* WriteNewLine(Byte* pDst);
    protected static Byte* LtEntity(Byte* pDst);
    protected static Byte* GtEntity(Byte* pDst);
    protected static Byte* AmpEntity(Byte* pDst);
    protected static Byte* QuoteEntity(Byte* pDst);
    protected static Byte* TabEntity(Byte* pDst);
    protected static Byte* LineFeedEntity(Byte* pDst);
    protected static Byte* CarriageReturnEntity(Byte* pDst);
    protected static Byte* RawStartCData(Byte* pDst);
    protected static Byte* RawEndCData(Byte* pDst);
    protected void ValidateContentChars(string chars, string propertyName, bool allowOnlyWhitespace);
    protected void CheckAsyncCall();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteXmlDeclarationAsync>d__1")]
internal virtual Task WriteXmlDeclarationAsync(XmlStandalone standalone);
    internal virtual Task WriteXmlDeclarationAsync(string xmldecl);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteDocTypeAsync>d__1")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteEndAttributeAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteNamespaceDeclarationAsync>d__1")]
internal virtual Task WriteNamespaceDeclarationAsync(string prefix, string namespaceName);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteStartNamespaceDeclarationAsync>d__1")]
internal virtual Task WriteStartNamespaceDeclarationAsync(string prefix);
    internal virtual Task WriteEndNamespaceDeclarationAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCDataAsync>d__1")]
public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCommentAsync>d__1")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteProcessingInstructionAsync>d__1")]
public virtual Task WriteProcessingInstructionAsync(string name, string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteEntityRefAsync>d__1")]
public virtual Task WriteEntityRefAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCharEntityAsync>d__1")]
public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteSurrogateCharEntityAsync>d__1")]
public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawAsync>d__1")]
public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawAsync>d__2")]
public virtual Task WriteRawAsync(string data);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<FlushAsync>d__1")]
public virtual Task FlushAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<FlushBufferAsync>d__1")]
protected virtual Task FlushBufferAsync();
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(Char* pSrc, Char* pSrcEnd);
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(Char[] chars, int index, int count);
    [SecuritySafeCriticalAttribute]
protected int WriteAttributeTextBlockNoFlush(string text, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteAttributeTextBlockAsync>d__1")]
protected Task WriteAttributeTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteAttributeTextBlockAsync(string text);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(Char* pSrc, Char* pSrcEnd, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteElementTextBlockNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteElementTextBlockAsync>d__1")]
protected Task WriteElementTextBlockAsync(Char[] chars, int index, int count);
    protected Task WriteElementTextBlockAsync(string text);
    [SecuritySafeCriticalAttribute]
protected int RawTextNoFlush(Char* pSrcBegin, Char* pSrcEnd);
    [SecuritySafeCriticalAttribute]
protected int RawTextNoFlush(string text, int index, int count);
    protected Task RawTextAsync(string text);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(Char* pSrcBegin, Char* pSrcEnd, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(Char[] chars, int index, int count, Boolean& needWriteNewLine);
    [SecuritySafeCriticalAttribute]
protected int WriteRawWithCharCheckingNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawWithCharCheckingAsync>d__1")]
protected Task WriteRawWithCharCheckingAsync(Char[] chars, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteRawWithCharCheckingAsync>d__2")]
protected Task WriteRawWithCharCheckingAsync(string text);
    [SecuritySafeCriticalAttribute]
protected int WriteCommentOrPiNoFlush(string text, int index, int count, int stopChar, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCommentOrPiAsync>d__1")]
protected Task WriteCommentOrPiAsync(string text, int stopChar);
    [SecuritySafeCriticalAttribute]
protected int WriteCDataSectionNoFlush(string text, int index, int count, Boolean& needWriteNewLine);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriter/<WriteCDataSectionAsync>d__1")]
protected Task WriteCDataSectionAsync(string text);
}
internal class System.Xml.XmlUtf8RawTextWriterIndent : XmlUtf8RawTextWriter {
    protected int indentLevel;
    protected bool newLineOnAttributes;
    protected string indentChars;
    protected bool mixedContent;
    protected ConformanceLevel conformanceLevel;
    public XmlWriterSettings Settings { get; }
    public XmlUtf8RawTextWriterIndent(Stream stream, XmlWriterSettings settings);
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    internal virtual void StartElementContent();
    internal virtual void OnRootElement(ConformanceLevel currentConformanceLevel);
    internal virtual void WriteEndElement(string prefix, string localName, string ns);
    internal virtual void WriteFullEndElement(string prefix, string localName, string ns);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string target, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteDocTypeAsync>d__1")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteStartElementAsync>d__1")]
public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteEndElementAsync>d__1")]
internal virtual Task WriteEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteFullEndElementAsync>d__1")]
internal virtual Task WriteFullEndElementAsync(string prefix, string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteStartAttributeAsync>d__1")]
protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteCommentAsync>d__1")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlUtf8RawTextWriterIndent/<WriteProcessingInstructionAsync>d__1")]
public virtual Task WriteProcessingInstructionAsync(string target, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
}
[ObsoleteAttribute("Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Xml.XmlValidatingReader : XmlReader {
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public object SchemaType { get; }
    public XmlReader Reader { get; }
    public ValidationType ValidationType { get; public set; }
    public XmlSchemaCollection Schemas { get; }
    public EntityHandling EntityHandling { get; public set; }
    unknown XmlResolver XmlResolver {public set; }
    public bool Namespaces { get; public set; }
    public Encoding Encoding { get; }
    internal XmlValidatingReaderImpl Impl { get; }
    internal IDtdInfo DtdInfo { get; }
    public XmlValidatingReader(XmlReader reader);
    public XmlValidatingReader(string xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public XmlValidatingReader(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual string ReadString();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public object get_SchemaType();
    public XmlReader get_Reader();
    public ValidationType get_ValidationType();
    public void set_ValidationType(ValidationType value);
    public XmlSchemaCollection get_Schemas();
    public EntityHandling get_EntityHandling();
    public void set_EntityHandling(EntityHandling value);
    public void set_XmlResolver(XmlResolver value);
    public bool get_Namespaces();
    public void set_Namespaces(bool value);
    public object ReadTypedValue();
    public Encoding get_Encoding();
    internal XmlValidatingReaderImpl get_Impl();
    internal virtual IDtdInfo get_DtdInfo();
}
internal class System.Xml.XmlValidatingReaderImpl : XmlReader {
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public ReadState ReadState { get; }
    public bool EOF { get; }
    public XmlNameTable NameTable { get; }
    internal Encoding Encoding { get; }
    public int AttributeCount { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanResolveEntity { get; }
    internal XmlReader OuterReader { get; internal set; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal object SchemaType { get; }
    internal XmlReader Reader { get; }
    internal XmlTextReaderImpl ReaderImpl { get; }
    internal ValidationType ValidationType { get; internal set; }
    internal XmlSchemaCollection Schemas { get; }
    internal EntityHandling EntityHandling { get; internal set; }
    unknown XmlResolver XmlResolver {internal set; }
    internal bool Namespaces { get; internal set; }
    internal BaseValidator Validator { get; internal set; }
    internal XmlNamespaceManager NamespaceManager { get; }
    internal bool StandAlone { get; }
    unknown object SchemaTypeObject {internal set; }
    internal object TypedValueObject { get; internal set; }
    internal bool Normalization { get; }
    internal IDtdInfo DtdInfo { get; }
    internal XmlValidatingReaderImpl(XmlReader reader);
    internal XmlValidatingReaderImpl(string xmlFragment, XmlNodeType fragType, XmlParserContext context);
    internal XmlValidatingReaderImpl(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context);
    internal XmlValidatingReaderImpl(XmlReader reader, ValidationEventHandler settingsEventHandler, bool processIdentityConstraints);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual ReadState get_ReadState();
    public virtual bool get_EOF();
    public virtual XmlNameTable get_NameTable();
    internal Encoding get_Encoding();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual void Close();
    public virtual string LookupNamespace(string prefix);
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    internal XmlReader get_OuterReader();
    internal void set_OuterReader(XmlReader value);
    internal void MoveOffEntityReference();
    public virtual string ReadString();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    internal IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    internal string LookupPrefix(string namespaceName);
    internal void add_ValidationEventHandler(ValidationEventHandler value);
    internal void remove_ValidationEventHandler(ValidationEventHandler value);
    internal object get_SchemaType();
    internal XmlReader get_Reader();
    internal XmlTextReaderImpl get_ReaderImpl();
    internal ValidationType get_ValidationType();
    internal void set_ValidationType(ValidationType value);
    internal XmlSchemaCollection get_Schemas();
    internal EntityHandling get_EntityHandling();
    internal void set_EntityHandling(EntityHandling value);
    internal void set_XmlResolver(XmlResolver value);
    internal bool get_Namespaces();
    internal void set_Namespaces(bool value);
    public object ReadTypedValue();
    internal void Close(bool closeStream);
    internal BaseValidator get_Validator();
    internal void set_Validator(BaseValidator value);
    internal virtual XmlNamespaceManager get_NamespaceManager();
    internal bool get_StandAlone();
    internal void set_SchemaTypeObject(object value);
    internal object get_TypedValueObject();
    internal void set_TypedValueObject(object value);
    internal bool get_Normalization();
    internal bool AddDefaultAttribute(SchemaAttDef attdef);
    internal virtual IDtdInfo get_DtdInfo();
    internal void ValidateDefaultAttributeOnUse(IDtdDefaultAttributeInfo defaultAttribute, XmlTextReaderImpl coreReader);
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ReadAsync>d__1")]
public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ReadContentAsBase64Async>d__1")]
public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ReadContentAsBinHexAsync>d__1")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ReadElementContentAsBase64Async>d__1")]
public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ReadElementContentAsBinHexAsync>d__1")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<MoveOffEntityReferenceAsync>d__1")]
internal Task MoveOffEntityReferenceAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlValidatingReaderImpl/<ReadTypedValueAsync>d__1")]
public Task`1<object> ReadTypedValueAsync();
}
internal class System.Xml.XmlWellFormedWriter : XmlWriter {
    internal static String[] stateName;
    internal static String[] tokenName;
    public WriteState WriteState { get; }
    public XmlWriterSettings Settings { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal XmlWriter InnerWriter { get; }
    internal XmlRawWriter RawWriter { get; }
    internal XmlWellFormedWriter(XmlWriter writer, XmlWriterSettings settings);
    private static XmlWellFormedWriter();
    public virtual WriteState get_WriteState();
    public virtual XmlWriterSettings get_Settings();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string namespaceName);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(object value);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    internal XmlWriter get_InnerWriter();
    internal XmlRawWriter get_RawWriter();
    internal string LookupNamespace(string prefix);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteEndDocumentAsync>d__1")]
public virtual Task WriteEndDocumentAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteDocTypeAsync>d__1")]
public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string namespaceName);
    protected internal virtual Task WriteEndAttributeAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCDataAsync>d__1")]
public virtual Task WriteCDataAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCommentAsync>d__1")]
public virtual Task WriteCommentAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteProcessingInstructionAsync>d__1")]
public virtual Task WriteProcessingInstructionAsync(string name, string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteEntityRefAsync>d__1")]
public virtual Task WriteEntityRefAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCharEntityAsync>d__1")]
public virtual Task WriteCharEntityAsync(char ch);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteSurrogateCharEntityAsync>d__1")]
public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteWhitespaceAsync>d__1")]
public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteCharsAsync>d__1")]
public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteRawAsync>d__1")]
public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteRawAsync>d__2")]
public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<FlushAsync>d__1")]
public virtual Task FlushAsync();
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteQualifiedNameAsync>d__1")]
public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlWellFormedWriter/<WriteBinHexAsync>d__1")]
public virtual Task WriteBinHexAsync(Byte[] buffer, int index, int count);
}
public class System.Xml.XmlWhitespace : XmlCharacterData {
    public string Name { get; }
    public string LocalName { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public string Value { get; public set; }
    internal XPathNodeType XPNodeType { get; }
    internal bool IsText { get; }
    public XmlNode PreviousText { get; }
    protected internal XmlWhitespace(string strData, XmlDocument doc);
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteTo(XmlWriter w);
    public virtual void WriteContentTo(XmlWriter w);
    internal virtual XPathNodeType get_XPNodeType();
    internal virtual bool get_IsText();
    public virtual XmlNode get_PreviousText();
}
internal class System.Xml.XmlWrappingReader : XmlReader {
    protected XmlReader reader;
    protected IXmlLineInfo readerAsIXmlLineInfo;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public bool HasAttributes { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public char QuoteChar { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal IDtdInfo DtdInfo { get; }
    internal XmlWrappingReader(XmlReader baseReader);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual Type get_ValueType();
    public virtual int get_AttributeCount();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual bool get_HasAttributes();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_CanResolveEntity();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual char get_QuoteChar();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual void Close();
    public virtual void Skip();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public virtual bool HasLineInfo();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    internal virtual IDtdInfo get_DtdInfo();
    public virtual Task`1<string> GetValueAsync();
    public virtual Task`1<bool> ReadAsync();
    public virtual Task SkipAsync();
}
internal class System.Xml.XmlWrappingWriter : XmlWriter {
    protected XmlWriter writer;
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    internal XmlWrappingWriter(XmlWriter baseWriter);
    public virtual XmlWriterSettings get_Settings();
    public virtual WriteState get_WriteState();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    protected virtual void Dispose(bool disposing);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteEndAttributeAsync();
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task FlushAsync();
}
public abstract class System.Xml.XmlWriter : object {
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public virtual XmlWriterSettings get_Settings();
    public abstract virtual void WriteStartDocument();
    public abstract virtual void WriteStartDocument(bool standalone);
    public abstract virtual void WriteEndDocument();
    public abstract virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public void WriteStartElement(string localName, string ns);
    public abstract virtual void WriteStartElement(string prefix, string localName, string ns);
    public void WriteStartElement(string localName);
    public abstract virtual void WriteEndElement();
    public abstract virtual void WriteFullEndElement();
    public void WriteAttributeString(string localName, string ns, string value);
    public void WriteAttributeString(string localName, string value);
    public void WriteAttributeString(string prefix, string localName, string ns, string value);
    public void WriteStartAttribute(string localName, string ns);
    public abstract virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public void WriteStartAttribute(string localName);
    public abstract virtual void WriteEndAttribute();
    public abstract virtual void WriteCData(string text);
    public abstract virtual void WriteComment(string text);
    public abstract virtual void WriteProcessingInstruction(string name, string text);
    public abstract virtual void WriteEntityRef(string name);
    public abstract virtual void WriteCharEntity(char ch);
    public abstract virtual void WriteWhitespace(string ws);
    public abstract virtual void WriteString(string text);
    public abstract virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public abstract virtual void WriteChars(Char[] buffer, int index, int count);
    public abstract virtual void WriteRaw(Char[] buffer, int index, int count);
    public abstract virtual void WriteRaw(string data);
    public abstract virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public abstract virtual WriteState get_WriteState();
    public virtual void Close();
    public abstract virtual void Flush();
    public abstract virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    public virtual void WriteNode(XPathNavigator navigator, bool defattr);
    public void WriteElementString(string localName, string value);
    public void WriteElementString(string localName, string ns, string value);
    public void WriteElementString(string prefix, string localName, string ns, string value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public static XmlWriter Create(string outputFileName);
    public static XmlWriter Create(string outputFileName, XmlWriterSettings settings);
    public static XmlWriter Create(Stream output);
    public static XmlWriter Create(Stream output, XmlWriterSettings settings);
    public static XmlWriter Create(TextWriter output);
    public static XmlWriter Create(TextWriter output, XmlWriterSettings settings);
    public static XmlWriter Create(StringBuilder output);
    public static XmlWriter Create(StringBuilder output, XmlWriterSettings settings);
    public static XmlWriter Create(XmlWriter output);
    public static XmlWriter Create(XmlWriter output, XmlWriterSettings settings);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public virtual Task WriteEndDocumentAsync();
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public virtual Task WriteEndElementAsync();
    public virtual Task WriteFullEndElementAsync();
    public Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    protected internal virtual Task WriteEndAttributeAsync();
    public virtual Task WriteCDataAsync(string text);
    public virtual Task WriteCommentAsync(string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual Task WriteEntityRefAsync(string name);
    public virtual Task WriteCharEntityAsync(char ch);
    public virtual Task WriteWhitespaceAsync(string ws);
    public virtual Task WriteStringAsync(string text);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual Task WriteBinHexAsync(Byte[] buffer, int index, int count);
    public virtual Task FlushAsync();
    public virtual Task WriteNmTokenAsync(string name);
    public virtual Task WriteNameAsync(string name);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteQualifiedNameAsync>d__1")]
public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteAttributesAsync>d__1")]
public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr);
    public virtual Task WriteNodeAsync(XmlReader reader, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteNodeAsync_CallSyncReader>d__1")]
internal Task WriteNodeAsync_CallSyncReader(XmlReader reader, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteNodeAsync_CallAsyncReader>d__1")]
internal Task WriteNodeAsync_CallAsyncReader(XmlReader reader, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteNodeAsync>d__2")]
public virtual Task WriteNodeAsync(XPathNavigator navigator, bool defattr);
    [AsyncStateMachineAttribute("System.Xml.XmlWriter/<WriteElementStringAsync>d__1")]
public Task WriteElementStringAsync(string prefix, string localName, string ns, string value);
}
public class System.Xml.XmlWriterSettings : object {
    public bool Async { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool OmitXmlDeclaration { get; public set; }
    public NewLineHandling NewLineHandling { get; public set; }
    public string NewLineChars { get; public set; }
    public bool Indent { get; public set; }
    public string IndentChars { get; public set; }
    public bool NewLineOnAttributes { get; public set; }
    public bool CloseOutput { get; public set; }
    public ConformanceLevel ConformanceLevel { get; public set; }
    public bool CheckCharacters { get; public set; }
    public NamespaceHandling NamespaceHandling { get; public set; }
    public bool WriteEndDocumentOnClose { get; public set; }
    public XmlOutputMethod OutputMethod { get; internal set; }
    internal List`1<XmlQualifiedName> CDataSectionElements { get; }
    public bool DoNotEscapeUriAttributes { get; public set; }
    internal bool MergeCDataSections { get; internal set; }
    internal string MediaType { get; internal set; }
    internal string DocTypeSystem { get; internal set; }
    internal string DocTypePublic { get; internal set; }
    internal XmlStandalone Standalone { get; internal set; }
    internal bool AutoXmlDeclaration { get; internal set; }
    internal TriState IndentInternal { get; internal set; }
    internal bool IsQuerySpecific { get; }
    internal bool ReadOnly { get; internal set; }
    internal XmlWriterSettings(XmlQueryDataReader reader);
    public bool get_Async();
    public void set_Async(bool value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool get_OmitXmlDeclaration();
    public void set_OmitXmlDeclaration(bool value);
    public NewLineHandling get_NewLineHandling();
    public void set_NewLineHandling(NewLineHandling value);
    public string get_NewLineChars();
    public void set_NewLineChars(string value);
    public bool get_Indent();
    public void set_Indent(bool value);
    public string get_IndentChars();
    public void set_IndentChars(string value);
    public bool get_NewLineOnAttributes();
    public void set_NewLineOnAttributes(bool value);
    public bool get_CloseOutput();
    public void set_CloseOutput(bool value);
    public ConformanceLevel get_ConformanceLevel();
    public void set_ConformanceLevel(ConformanceLevel value);
    public bool get_CheckCharacters();
    public void set_CheckCharacters(bool value);
    public NamespaceHandling get_NamespaceHandling();
    public void set_NamespaceHandling(NamespaceHandling value);
    public bool get_WriteEndDocumentOnClose();
    public void set_WriteEndDocumentOnClose(bool value);
    public XmlOutputMethod get_OutputMethod();
    internal void set_OutputMethod(XmlOutputMethod value);
    public void Reset();
    public XmlWriterSettings Clone();
    internal List`1<XmlQualifiedName> get_CDataSectionElements();
    public bool get_DoNotEscapeUriAttributes();
    public void set_DoNotEscapeUriAttributes(bool value);
    internal bool get_MergeCDataSections();
    internal void set_MergeCDataSections(bool value);
    internal string get_MediaType();
    internal void set_MediaType(string value);
    internal string get_DocTypeSystem();
    internal void set_DocTypeSystem(string value);
    internal string get_DocTypePublic();
    internal void set_DocTypePublic(string value);
    internal XmlStandalone get_Standalone();
    internal void set_Standalone(XmlStandalone value);
    internal bool get_AutoXmlDeclaration();
    internal void set_AutoXmlDeclaration(bool value);
    internal TriState get_IndentInternal();
    internal void set_IndentInternal(TriState value);
    internal bool get_IsQuerySpecific();
    internal XmlWriter CreateWriter(string outputFileName);
    internal XmlWriter CreateWriter(Stream output);
    internal XmlWriter CreateWriter(TextWriter output);
    internal XmlWriter CreateWriter(XmlWriter output);
    internal bool get_ReadOnly();
    internal void set_ReadOnly(bool value);
    internal void GetObjectData(XmlQueryDataWriter writer);
}
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public class System.Xml.XmlXapResolver : XmlResolver {
    [EditorBrowsableAttribute("1")]
public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    [ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
[EditorBrowsableAttribute("1")]
public static void RegisterApplicationResourceStreamResolver(IApplicationResourceStreamResolver appStreamResolver);
}
public interface System.Xml.XPath.IXPathNavigable {
    public abstract virtual XPathNavigator CreateNavigator();
}
public enum System.Xml.XPath.XmlCaseOrder : Enum {
    public int value__;
    public static XmlCaseOrder None;
    public static XmlCaseOrder UpperFirst;
    public static XmlCaseOrder LowerFirst;
}
public enum System.Xml.XPath.XmlDataType : Enum {
    public int value__;
    public static XmlDataType Text;
    public static XmlDataType Number;
}
internal class System.Xml.XPath.XmlEmptyNavigator : XPathNavigator {
    public static XmlEmptyNavigator Singleton { get; }
    public XPathNodeType NodeType { get; }
    public string NamespaceURI { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public string Value { get; }
    public bool IsEmptyElement { get; }
    public string XmlLang { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public XmlNameTable NameTable { get; }
    public static XmlEmptyNavigator get_Singleton();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_NamespaceURI();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_BaseURI();
    public virtual string get_Value();
    public virtual bool get_IsEmptyElement();
    public virtual string get_XmlLang();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasChildren();
    public virtual XmlNameTable get_NameTable();
    public virtual bool MoveToFirstChild();
    public virtual void MoveToRoot();
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToId(string id);
    public virtual string GetAttribute(string localName, string namespaceName);
    public virtual bool MoveToAttribute(string localName, string namespaceName);
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string prefix);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope scope);
    public virtual bool MoveToParent();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
    public virtual bool IsSamePosition(XPathNavigator other);
    public virtual XPathNavigator Clone();
}
public enum System.Xml.XPath.XmlSortOrder : Enum {
    public int value__;
    public static XmlSortOrder Ascending;
    public static XmlSortOrder Descending;
}
public class System.Xml.XPath.XPathDocument : object {
    internal XmlNameTable NameTable { get; }
    internal bool HasLineInfo { get; }
    internal XPathDocument(XmlNameTable nameTable);
    public XPathDocument(XmlReader reader);
    public XPathDocument(XmlReader reader, XmlSpace space);
    public XPathDocument(TextReader textReader);
    public XPathDocument(Stream stream);
    public XPathDocument(string uri);
    public XPathDocument(string uri, XmlSpace space);
    internal XmlRawWriter LoadFromWriter(LoadFlags flags, string baseUri);
    internal void LoadFromReader(XmlReader reader, XmlSpace space);
    public sealed virtual XPathNavigator CreateNavigator();
    internal XmlNameTable get_NameTable();
    internal bool get_HasLineInfo();
    internal int GetCollapsedTextNode(XPathNode[]& pageText);
    internal void SetCollapsedTextNode(XPathNode[] pageText, int idxText);
    internal int GetRootNode(XPathNode[]& pageRoot);
    internal void SetRootNode(XPathNode[] pageRoot, int idxRoot);
    internal int GetXmlNamespaceNode(XPathNode[]& pageXmlNmsp);
    internal void SetXmlNamespaceNode(XPathNode[] pageXmlNmsp, int idxXmlNmsp);
    internal void AddNamespace(XPathNode[] pageElem, int idxElem, XPathNode[] pageNmsp, int idxNmsp);
    internal int LookupNamespaces(XPathNode[] pageElem, int idxElem, XPathNode[]& pageNmsp);
    internal void AddIdElement(string id, XPathNode[] pageElem, int idxElem);
    internal int LookupIdElement(string id, XPathNode[]& pageElem);
}
public class System.Xml.XPath.XPathException : SystemException {
    public string Message { get; }
    protected XPathException(SerializationInfo info, StreamingContext context);
    public XPathException(string message);
    public XPathException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static XPathException Create(string res);
    internal static XPathException Create(string res, string arg);
    internal static XPathException Create(string res, string arg, string arg2);
    internal static XPathException Create(string res, string arg, Exception innerException);
    public virtual string get_Message();
}
public abstract class System.Xml.XPath.XPathExpression : object {
    public string Expression { get; }
    public XPathResultType ReturnType { get; }
    public abstract virtual string get_Expression();
    public abstract virtual void AddSort(object expr, IComparer comparer);
    public abstract virtual void AddSort(object expr, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public abstract virtual XPathExpression Clone();
    public abstract virtual void SetContext(XmlNamespaceManager nsManager);
    public abstract virtual void SetContext(IXmlNamespaceResolver nsResolver);
    public abstract virtual XPathResultType get_ReturnType();
    public static XPathExpression Compile(string xpath);
    public static XPathExpression Compile(string xpath, IXmlNamespaceResolver nsResolver);
}
public abstract class System.Xml.XPath.XPathItem : object {
    public bool IsNode { get; }
    public XmlSchemaType XmlType { get; }
    public string Value { get; }
    public object TypedValue { get; }
    public Type ValueType { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public abstract virtual bool get_IsNode();
    public abstract virtual XmlSchemaType get_XmlType();
    public abstract virtual string get_Value();
    public abstract virtual object get_TypedValue();
    public abstract virtual Type get_ValueType();
    public abstract virtual bool get_ValueAsBoolean();
    public abstract virtual DateTime get_ValueAsDateTime();
    public abstract virtual double get_ValueAsDouble();
    public abstract virtual int get_ValueAsInt();
    public abstract virtual long get_ValueAsLong();
    public virtual object ValueAs(Type returnType);
    public abstract virtual object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver);
}
public enum System.Xml.XPath.XPathNamespaceScope : Enum {
    public int value__;
    public static XPathNamespaceScope All;
    public static XPathNamespaceScope ExcludeXml;
    public static XPathNamespaceScope Local;
}
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
public abstract class System.Xml.XPath.XPathNavigator : XPathItem {
    internal static XPathNavigatorKeyComparer comparer;
    internal static Char[] NodeTypeLetter;
    internal static Char[] UniqueIdTbl;
    internal static int AllMask;
    internal static int NoAttrNmspMask;
    internal static int TextMask;
    internal static Int32[] ContentKindMasks;
    public bool IsNode { get; }
    public XmlSchemaType XmlType { get; }
    public object TypedValue { get; }
    public Type ValueType { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public XmlNameTable NameTable { get; }
    public static IEqualityComparer NavigatorComparer { get; }
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public string XmlLang { get; }
    public object UnderlyingObject { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public bool CanEdit { get; }
    public string OuterXml { get; public set; }
    public string InnerXml { get; public set; }
    internal UInt32 IndexInParent { get; }
    internal string UniqueId { get; }
    private static XPathNavigator();
    public virtual string ToString();
    public sealed virtual bool get_IsNode();
    public virtual XmlSchemaType get_XmlType();
    public virtual void SetValue(string value);
    public virtual object get_TypedValue();
    public virtual void SetTypedValue(object typedValue);
    public virtual Type get_ValueType();
    public virtual bool get_ValueAsBoolean();
    public virtual DateTime get_ValueAsDateTime();
    public virtual double get_ValueAsDouble();
    public virtual int get_ValueAsInt();
    public virtual long get_ValueAsLong();
    public virtual object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual XPathNavigator CreateNavigator();
    public abstract virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string namespaceURI);
    public virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public static IEqualityComparer get_NavigatorComparer();
    public abstract virtual XPathNavigator Clone();
    public abstract virtual XPathNodeType get_NodeType();
    public abstract virtual string get_LocalName();
    public abstract virtual string get_Name();
    public abstract virtual string get_NamespaceURI();
    public abstract virtual string get_Prefix();
    public abstract virtual string get_BaseURI();
    public abstract virtual bool get_IsEmptyElement();
    public virtual string get_XmlLang();
    public virtual XmlReader ReadSubtree();
    public virtual void WriteSubtree(XmlWriter writer);
    public virtual object get_UnderlyingObject();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public abstract virtual bool MoveToFirstAttribute();
    public abstract virtual bool MoveToNextAttribute();
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string name);
    public abstract virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public abstract virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public bool MoveToFirstNamespace();
    public bool MoveToNextNamespace();
    public abstract virtual bool MoveToNext();
    public abstract virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public abstract virtual bool MoveToFirstChild();
    public abstract virtual bool MoveToParent();
    public virtual void MoveToRoot();
    public abstract virtual bool MoveTo(XPathNavigator other);
    public abstract virtual bool MoveToId(string id);
    public virtual bool MoveToChild(string localName, string namespaceURI);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToFollowing(string localName, string namespaceURI);
    public virtual bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end);
    public virtual bool MoveToFollowing(XPathNodeType type);
    public virtual bool MoveToFollowing(XPathNodeType type, XPathNavigator end);
    public virtual bool MoveToNext(string localName, string namespaceURI);
    public virtual bool MoveToNext(XPathNodeType type);
    public virtual bool get_HasChildren();
    public abstract virtual bool IsSamePosition(XPathNavigator other);
    public virtual bool IsDescendant(XPathNavigator nav);
    public virtual XmlNodeOrder ComparePosition(XPathNavigator nav);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual bool CheckValidity(XmlSchemaSet schemas, ValidationEventHandler validationEventHandler);
    public virtual XPathExpression Compile(string xpath);
    public virtual XPathNavigator SelectSingleNode(string xpath);
    public virtual XPathNavigator SelectSingleNode(string xpath, IXmlNamespaceResolver resolver);
    public virtual XPathNavigator SelectSingleNode(XPathExpression expression);
    public virtual XPathNodeIterator Select(string xpath);
    public virtual XPathNodeIterator Select(string xpath, IXmlNamespaceResolver resolver);
    public virtual XPathNodeIterator Select(XPathExpression expr);
    public virtual object Evaluate(string xpath);
    public virtual object Evaluate(string xpath, IXmlNamespaceResolver resolver);
    public virtual object Evaluate(XPathExpression expr);
    public virtual object Evaluate(XPathExpression expr, XPathNodeIterator context);
    public virtual bool Matches(XPathExpression expr);
    public virtual bool Matches(string xpath);
    public virtual XPathNodeIterator SelectChildren(XPathNodeType type);
    public virtual XPathNodeIterator SelectChildren(string name, string namespaceURI);
    public virtual XPathNodeIterator SelectAncestors(XPathNodeType type, bool matchSelf);
    public virtual XPathNodeIterator SelectAncestors(string name, string namespaceURI, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(XPathNodeType type, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf);
    public virtual bool get_CanEdit();
    public virtual XmlWriter PrependChild();
    public virtual XmlWriter AppendChild();
    public virtual XmlWriter InsertAfter();
    public virtual XmlWriter InsertBefore();
    public virtual XmlWriter CreateAttributes();
    public virtual XmlWriter ReplaceRange(XPathNavigator lastSiblingToReplace);
    public virtual void ReplaceSelf(string newNode);
    public virtual void ReplaceSelf(XmlReader newNode);
    public virtual void ReplaceSelf(XPathNavigator newNode);
    public virtual string get_OuterXml();
    public virtual void set_OuterXml(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual void AppendChild(string newChild);
    public virtual void AppendChild(XmlReader newChild);
    public virtual void AppendChild(XPathNavigator newChild);
    public virtual void PrependChild(string newChild);
    public virtual void PrependChild(XmlReader newChild);
    public virtual void PrependChild(XPathNavigator newChild);
    public virtual void InsertBefore(string newSibling);
    public virtual void InsertBefore(XmlReader newSibling);
    public virtual void InsertBefore(XPathNavigator newSibling);
    public virtual void InsertAfter(string newSibling);
    public virtual void InsertAfter(XmlReader newSibling);
    public virtual void InsertAfter(XPathNavigator newSibling);
    public virtual void DeleteRange(XPathNavigator lastSiblingToDelete);
    public virtual void DeleteSelf();
    public virtual void PrependChildElement(string prefix, string localName, string namespaceURI, string value);
    public virtual void AppendChildElement(string prefix, string localName, string namespaceURI, string value);
    public virtual void InsertElementBefore(string prefix, string localName, string namespaceURI, string value);
    public virtual void InsertElementAfter(string prefix, string localName, string namespaceURI, string value);
    public virtual void CreateAttribute(string prefix, string localName, string namespaceURI, string value);
    internal bool MoveToPrevious(string localName, string namespaceURI);
    internal bool MoveToPrevious(XPathNodeType type);
    internal bool MoveToNonDescendant();
    internal UInt32 get_IndexInParent();
    internal virtual string get_UniqueId();
    internal static XmlNamespaceManager GetNamespaces(IXmlNamespaceResolver resolver);
    internal static int GetContentKindMask(XPathNodeType type);
    internal static int GetKindMask(XPathNodeType type);
    internal static bool IsText(XPathNodeType type);
    internal void BuildSubtree(XmlReader reader, XmlWriter writer);
}
internal class System.Xml.XPath.XPathNavigatorKeyComparer : object {
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object obj1, object obj2);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
}
internal class System.Xml.XPath.XPathNavigatorReader : XmlReader {
    protected IXmlLineInfo lineInfo;
    protected IXmlSchemaInfo schemaInfo;
    internal static string space;
    internal static XmlNodeType[] convertFromXPathNodeType;
    internal object UnderlyingObject { get; }
    protected bool IsReading { get; }
    internal XmlNamespaceManager NamespaceManager { get; }
    public XmlNameTable NameTable { get; }
    public XmlReaderSettings Settings { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public XmlNodeType NodeType { get; }
    public string NamespaceURI { get; }
    public string LocalName { get; }
    public string Prefix { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public bool CanReadBinaryContent { get; }
    public int Depth { get; }
    protected XPathNavigatorReader(XPathNavigator navToRead, IXmlLineInfo xli, IXmlSchemaInfo xsi);
    private static XPathNavigatorReader();
    internal static XmlNodeType ToXmlNodeType(XPathNodeType typ);
    internal object get_UnderlyingObject();
    public static XPathNavigatorReader Create(XPathNavigator navToRead);
    protected bool get_IsReading();
    internal virtual XmlNamespaceManager get_NamespaceManager();
    public virtual XmlNameTable get_NameTable();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    public virtual XmlReaderSettings get_Settings();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_NamespaceURI();
    public virtual string get_LocalName();
    public virtual string get_Prefix();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int index);
    public virtual bool MoveToAttribute(string localName, string namespaceName);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToElement();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual string LookupNamespace(string prefix);
    public virtual int get_Depth();
    public virtual bool Read();
    public virtual void Close();
}
internal class System.Xml.XPath.XPathNavigatorReaderWithSI : XPathNavigatorReader {
    public XmlSchemaValidity Validity { get; }
    public bool IsDefault { get; }
    public bool IsNil { get; }
    public XmlSchemaSimpleType MemberType { get; }
    public XmlSchemaType SchemaType { get; }
    public XmlSchemaElement SchemaElement { get; }
    public XmlSchemaAttribute SchemaAttribute { get; }
    internal XPathNavigatorReaderWithSI(XPathNavigator navToRead, IXmlLineInfo xli, IXmlSchemaInfo xsi);
    public virtual XmlSchemaValidity get_Validity();
    public virtual bool get_IsDefault();
    public virtual bool get_IsNil();
    public virtual XmlSchemaSimpleType get_MemberType();
    public virtual XmlSchemaType get_SchemaType();
    public virtual XmlSchemaElement get_SchemaElement();
    public virtual XmlSchemaAttribute get_SchemaAttribute();
}
[DebuggerDisplayAttribute("Position={CurrentPosition}, Current={debuggerDisplayProxy}")]
public abstract class System.Xml.XPath.XPathNodeIterator : object {
    internal int count;
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public int Count { get; }
    private sealed virtual override object System.ICloneable.Clone();
    public abstract virtual XPathNodeIterator Clone();
    public abstract virtual bool MoveNext();
    public abstract virtual XPathNavigator get_Current();
    public abstract virtual int get_CurrentPosition();
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
}
public enum System.Xml.XPath.XPathNodeType : Enum {
    public int value__;
    public static XPathNodeType Root;
    public static XPathNodeType Element;
    public static XPathNodeType Attribute;
    public static XPathNodeType Namespace;
    public static XPathNodeType Text;
    public static XPathNodeType SignificantWhitespace;
    public static XPathNodeType Whitespace;
    public static XPathNodeType ProcessingInstruction;
    public static XPathNodeType Comment;
    public static XPathNodeType All;
}
public enum System.Xml.XPath.XPathResultType : Enum {
    public int value__;
    public static XPathResultType Number;
    public static XPathResultType String;
    public static XPathResultType Boolean;
    public static XPathResultType NodeSet;
    public static XPathResultType Navigator;
    public static XPathResultType Any;
    public static XPathResultType Error;
}
internal class System.Xml.XPathNodeList : XmlNodeList {
    public int Count { get; }
    public XPathNodeList(XPathNodeIterator nodeIterator);
    private static XPathNodeList();
    public virtual int get_Count();
    internal int ReadUntil(int index);
    public virtual XmlNode Item(int index);
    public virtual IEnumerator GetEnumerator();
}
[DefaultMemberAttribute("Item")]
internal class System.Xml.XsdCachingReader : XmlReader {
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public int AttributeCount { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    private int System.Xml.IXmlLineInfo.LineNumber { get; }
    private int System.Xml.IXmlLineInfo.LinePosition { get; }
    internal XsdCachingReader(XmlReader reader, IXmlLineInfo lineInfo, CachingEventHandler handlerMethod);
    internal void Reset(XmlReader reader);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    internal ValidatingReaderNodeData RecordTextNode(string textValue, string originalStringValue, int depth, int lineNo, int linePos);
    internal void SwitchTextNodeAndEndElement(string textValue, string originalStringValue);
    internal void RecordEndElementNode();
    internal string ReadOriginalContentAsString();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    private sealed virtual override bool System.Xml.IXmlLineInfo.HasLineInfo();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LineNumber();
    private sealed virtual override int System.Xml.IXmlLineInfo.get_LinePosition();
    internal void SetToReplayMode();
    internal XmlReader GetCoreReader();
    internal IXmlLineInfo GetLineInfo();
    public virtual Task`1<string> GetValueAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdCachingReader/<ReadAsync>d__1")]
public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdCachingReader/<SkipAsync>d__1")]
public virtual Task SkipAsync();
    internal Task SetToReplayModeAsync();
}
internal class System.Xml.XsdValidatingReader : XmlReader {
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanReadBinaryContent { get; }
    private bool System.Xml.Schema.IXmlSchemaInfo.IsDefault { get; }
    private bool System.Xml.Schema.IXmlSchemaInfo.IsNil { get; }
    private XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.Validity { get; }
    private XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.MemberType { get; }
    private XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.SchemaType { get; }
    private XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.SchemaElement { get; }
    private XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    internal XsdValidatingReader(XmlReader reader, XmlResolver xmlResolver, XmlReaderSettings readerSettings, XmlSchemaObject partialValidationType);
    internal XsdValidatingReader(XmlReader reader, XmlResolver xmlResolver, XmlReaderSettings readerSettings);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual object ReadContentAsObject();
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual decimal ReadContentAsDecimal();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual string ReadContentAsString();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAsObject();
    public virtual bool ReadElementContentAsBoolean();
    public virtual DateTime ReadElementContentAsDateTime();
    public virtual double ReadElementContentAsDouble();
    public virtual float ReadElementContentAsFloat();
    public virtual decimal ReadElementContentAsDecimal();
    public virtual int ReadElementContentAsInt();
    public virtual long ReadElementContentAsLong();
    public virtual string ReadElementContentAsString();
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    private sealed virtual override bool System.Xml.Schema.IXmlSchemaInfo.get_IsDefault();
    private sealed virtual override bool System.Xml.Schema.IXmlSchemaInfo.get_IsNil();
    private sealed virtual override XmlSchemaValidity System.Xml.Schema.IXmlSchemaInfo.get_Validity();
    private sealed virtual override XmlSchemaSimpleType System.Xml.Schema.IXmlSchemaInfo.get_MemberType();
    private sealed virtual override XmlSchemaType System.Xml.Schema.IXmlSchemaInfo.get_SchemaType();
    private sealed virtual override XmlSchemaElement System.Xml.Schema.IXmlSchemaInfo.get_SchemaElement();
    private sealed virtual override XmlSchemaAttribute System.Xml.Schema.IXmlSchemaInfo.get_SchemaAttribute();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    internal ValidatingReaderNodeData CreateDummyTextNode(string attributeValue, int depth);
    internal void CachingCallBack(XsdCachingReader cachingReader);
    public virtual Task`1<string> GetValueAsync();
    public virtual Task`1<object> ReadContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadContentAsStringAsync>d__1")]
public virtual Task`1<string> ReadContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadContentAsAsync>d__1")]
public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadElementContentAsObjectAsync>d__1")]
public virtual Task`1<object> ReadElementContentAsObjectAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadElementContentAsStringAsync>d__1")]
public virtual Task`1<string> ReadElementContentAsStringAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadElementContentAsAsync>d__1")]
public virtual Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual Task`1<bool> ReadAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<SkipAsync>d__1")]
public virtual Task SkipAsync();
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadContentAsBase64Async>d__1")]
public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadContentAsBinHexAsync>d__1")]
public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadElementContentAsBase64Async>d__1")]
public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    [AsyncStateMachineAttribute("System.Xml.XsdValidatingReader/<ReadElementContentAsBinHexAsync>d__1")]
public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
}
public interface System.Xml.Xsl.IXsltContextFunction {
    public int Minargs { get; }
    public int Maxargs { get; }
    public XPathResultType ReturnType { get; }
    public XPathResultType[] ArgTypes { get; }
    public abstract virtual int get_Minargs();
    public abstract virtual int get_Maxargs();
    public abstract virtual XPathResultType get_ReturnType();
    public abstract virtual XPathResultType[] get_ArgTypes();
    public abstract virtual object Invoke(XsltContext xsltContext, Object[] args, XPathNavigator docContext);
}
public interface System.Xml.Xsl.IXsltContextVariable {
    public bool IsLocal { get; }
    public bool IsParam { get; }
    public XPathResultType VariableType { get; }
    public abstract virtual bool get_IsLocal();
    public abstract virtual bool get_IsParam();
    public abstract virtual XPathResultType get_VariableType();
    public abstract virtual object Evaluate(XsltContext xsltContext);
}
public class System.Xml.Xsl.XslCompiledTransform : object {
    internal CompilerErrorCollection Errors { get; }
    public XmlWriterSettings OutputSettings { get; }
    public TempFileCollection TemporaryFiles { get; }
    private static XslCompiledTransform();
    public XslCompiledTransform(bool enableDebug);
    internal CompilerErrorCollection get_Errors();
    public XmlWriterSettings get_OutputSettings();
    public TempFileCollection get_TemporaryFiles();
    public void Load(XmlReader stylesheet);
    public void Load(XmlReader stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Load(IXPathNavigable stylesheet);
    public void Load(IXPathNavigable stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Load(string stylesheetUri);
    public void Load(string stylesheetUri, XsltSettings settings, XmlResolver stylesheetResolver);
    public static CompilerErrorCollection CompileToType(XmlReader stylesheet, XsltSettings settings, XmlResolver stylesheetResolver, bool debug, TypeBuilder typeBuilder, string scriptAssemblyPath);
    public void Load(Type compiledStylesheet);
    public void Load(MethodInfo executeMethod, Byte[] queryData, Type[] earlyBoundTypes);
    public void Transform(IXPathNavigable input, XmlWriter results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, XmlWriter results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, TextWriter results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, Stream results);
    public void Transform(XmlReader input, XmlWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, TextWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, Stream results);
    public void Transform(string inputUri, XmlWriter results);
    public void Transform(string inputUri, XsltArgumentList arguments, XmlWriter results);
    public void Transform(string inputUri, XsltArgumentList arguments, TextWriter results);
    public void Transform(string inputUri, XsltArgumentList arguments, Stream results);
    public void Transform(string inputUri, string resultsFile);
    public void Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver);
    internal static void PrintQil(object qil, XmlWriter xw, bool printComments, bool printTypes, bool printLineInfo);
}
public class System.Xml.Xsl.XsltArgumentList : object {
    internal XsltMessageEncounteredEventHandler xsltMessageEncountered;
    public object GetParam(string name, string namespaceUri);
    public object GetExtensionObject(string namespaceUri);
    public void AddParam(string name, string namespaceUri, object parameter);
    public void AddExtensionObject(string namespaceUri, object extension);
    public object RemoveParam(string name, string namespaceUri);
    public object RemoveExtensionObject(string namespaceUri);
    public void add_XsltMessageEncountered(XsltMessageEncounteredEventHandler value);
    public void remove_XsltMessageEncountered(XsltMessageEncounteredEventHandler value);
    public void Clear();
}
public class System.Xml.Xsl.XsltCompileException : XsltException {
    protected XsltCompileException(SerializationInfo info, StreamingContext context);
    public XsltCompileException(string message);
    public XsltCompileException(string message, Exception innerException);
    public XsltCompileException(Exception inner, string sourceUri, int lineNumber, int linePosition);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class System.Xml.Xsl.XsltContext : XmlNamespaceManager {
    public bool Whitespace { get; }
    protected XsltContext(NameTable table);
    internal XsltContext(bool dummy);
    public abstract virtual IXsltContextVariable ResolveVariable(string prefix, string name);
    public abstract virtual IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] ArgTypes);
    public abstract virtual bool get_Whitespace();
    public abstract virtual bool PreserveWhitespace(XPathNavigator node);
    public abstract virtual int CompareDocument(string baseUri, string nextbaseUri);
}
public class System.Xml.Xsl.XsltException : SystemException {
    public string SourceUri { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Message { get; }
    protected XsltException(SerializationInfo info, StreamingContext context);
    public XsltException(string message);
    public XsltException(string message, Exception innerException);
    internal XsltException(string res, String[] args, string sourceUri, int lineNumber, int linePosition, Exception inner);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal static XsltException Create(string res, String[] args);
    internal static XsltException Create(string res, String[] args, Exception inner);
    public virtual string get_SourceUri();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    public virtual string get_Message();
}
public abstract class System.Xml.Xsl.XsltMessageEncounteredEventArgs : EventArgs {
    public string Message { get; }
    public abstract virtual string get_Message();
}
public class System.Xml.Xsl.XsltMessageEncounteredEventHandler : MulticastDelegate {
    public XsltMessageEncounteredEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XsltMessageEncounteredEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XsltMessageEncounteredEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Xml.Xsl.XslTransform : object {
    unknown XmlResolver XmlResolver {public set; }
    internal IXsltDebugger Debugger { get; }
    internal XslTransform(object debugger);
    public void set_XmlResolver(XmlResolver value);
    public void Load(XmlReader stylesheet);
    public void Load(XmlReader stylesheet, XmlResolver resolver);
    public void Load(IXPathNavigable stylesheet);
    public void Load(IXPathNavigable stylesheet, XmlResolver resolver);
    public void Load(XPathNavigator stylesheet);
    public void Load(XPathNavigator stylesheet, XmlResolver resolver);
    public void Load(string url);
    public void Load(string url, XmlResolver resolver);
    public void Load(IXPathNavigable stylesheet, XmlResolver resolver, Evidence evidence);
    public void Load(XmlReader stylesheet, XmlResolver resolver, Evidence evidence);
    public void Load(XPathNavigator stylesheet, XmlResolver resolver, Evidence evidence);
    public XmlReader Transform(XPathNavigator input, XsltArgumentList args, XmlResolver resolver);
    public XmlReader Transform(XPathNavigator input, XsltArgumentList args);
    public void Transform(XPathNavigator input, XsltArgumentList args, XmlWriter output, XmlResolver resolver);
    public void Transform(XPathNavigator input, XsltArgumentList args, XmlWriter output);
    public void Transform(XPathNavigator input, XsltArgumentList args, Stream output, XmlResolver resolver);
    public void Transform(XPathNavigator input, XsltArgumentList args, Stream output);
    public void Transform(XPathNavigator input, XsltArgumentList args, TextWriter output, XmlResolver resolver);
    public void Transform(XPathNavigator input, XsltArgumentList args, TextWriter output);
    public XmlReader Transform(IXPathNavigable input, XsltArgumentList args, XmlResolver resolver);
    public XmlReader Transform(IXPathNavigable input, XsltArgumentList args);
    public void Transform(IXPathNavigable input, XsltArgumentList args, TextWriter output, XmlResolver resolver);
    public void Transform(IXPathNavigable input, XsltArgumentList args, TextWriter output);
    public void Transform(IXPathNavigable input, XsltArgumentList args, Stream output, XmlResolver resolver);
    public void Transform(IXPathNavigable input, XsltArgumentList args, Stream output);
    public void Transform(IXPathNavigable input, XsltArgumentList args, XmlWriter output, XmlResolver resolver);
    public void Transform(IXPathNavigable input, XsltArgumentList args, XmlWriter output);
    public void Transform(string inputfile, string outputfile, XmlResolver resolver);
    public void Transform(string inputfile, string outputfile);
    internal IXsltDebugger get_Debugger();
}
public class System.Xml.Xsl.XsltSettings : object {
    public static XsltSettings Default { get; }
    public static XsltSettings TrustedXslt { get; }
    public bool EnableDocumentFunction { get; public set; }
    public bool EnableScript { get; public set; }
    internal bool CheckOnly { get; internal set; }
    internal bool IncludeDebugInformation { get; internal set; }
    internal int WarningLevel { get; internal set; }
    internal bool TreatWarningsAsErrors { get; internal set; }
    internal TempFileCollection TempFiles { get; internal set; }
    public XsltSettings(bool enableDocumentFunction, bool enableScript);
    public static XsltSettings get_Default();
    public static XsltSettings get_TrustedXslt();
    public bool get_EnableDocumentFunction();
    public void set_EnableDocumentFunction(bool value);
    public bool get_EnableScript();
    public void set_EnableScript(bool value);
    internal bool get_CheckOnly();
    internal void set_CheckOnly(bool value);
    internal bool get_IncludeDebugInformation();
    internal void set_IncludeDebugInformation(bool value);
    internal int get_WarningLevel();
    internal void set_WarningLevel(int value);
    internal bool get_TreatWarningsAsErrors();
    internal void set_TreatWarningsAsErrors(bool value);
    internal TempFileCollection get_TempFiles();
    internal void set_TempFiles(TempFileCollection value);
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
