[SuppressMessageAttribute("Microsoft.Naming", "CA1708")]
[SuppressMessageAttribute("Microsoft.Design", "CA1005")]
public class Microsoft.VisualC.StlClr.BinaryDelegate`3 : MulticastDelegate {
    public BinaryDelegate`3(object A_0, IntPtr A_1);
    public sealed virtual TResult Invoke(TArg1 A_0, TArg2 A_1);
    public sealed virtual IAsyncResult BeginInvoke(TArg1 __unnamed000, TArg2 __unnamed001, AsyncCallback callback, object obj);
    public sealed virtual TResult EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualC.StlClr.DequeEnumerator`1 : DequeEnumeratorBase`1<TValue> {
    public TValue Current { get; public set; }
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public DequeEnumerator`1(IDeque`1<TValue> _Cont, int _First);
    public virtual TValue get_Current();
    public virtual void set_Current(TValue A_0);
    private void ~DequeEnumerator`1();
    public virtual bool MoveNext();
    public virtual void Reset();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
[SuppressMessageAttribute("Microsoft.Design", "CA1038")]
public class Microsoft.VisualC.StlClr.DequeEnumeratorBase`1 : object {
    internal bool _Is_reset;
    internal int _Myfirst;
    internal int _Mybias;
    internal IDeque`1<TValue> _Mycont;
    internal UInt32 modopt(System.Runtime.CompilerServices.IsLong) _Mygen;
    public object Current { get; public set; }
    public DequeEnumeratorBase`1(IDeque`1<TValue> _Cont, int _First);
    public virtual object get_Current();
    public virtual void set_Current(object A_0);
    public virtual bool MoveNext();
    public virtual void Reset();
    internal TValue _Getval();
    internal void _Validate();
}
public class Microsoft.VisualC.StlClr.Generic.ConstContainerBidirectionalIterator`1 : object {
    internal INode`1<TValue> _Mynode;
    public ConstContainerBidirectionalIterator`1(ConstContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ConstContainerBidirectionalIterator`1(INode`1<TValue> _Node);
    public ConstContainerBidirectionalIterator`1(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ConstContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ConstContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ConstContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public IBidirectionalIterator`1<TValue> op_Implicit();
    public virtual object Clone();
    public virtual int get_bias();
    public virtual object get_node();
    public virtual bool valid();
    public virtual object container();
    public virtual void next();
    public virtual bool equal_to(IInputIterator`1<TValue> _Right);
    public bool equal_to(ConstContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual TValue& get_cref();
    public virtual TValue& get_ref();
    public virtual void prev();
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_MemberSelection(ConstContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_PointerDereference(ConstContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ConstContainerBidirectionalIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ConstContainerBidirectionalIterator`1& , int A_0);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(IInputIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(ConstContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_Inequality(IInputIterator`1<TValue> _Right);
    public bool op_Inequality(ConstContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ConstContainerBidirectionalIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ConstContainerBidirectionalIterator`1& , int A_0);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1 : object {
    internal IRandomAccessContainer`1<TValue> _Mycont;
    internal int _Myoffset;
    public TValue& Item { get; }
    public ConstContainerRandomAccessIterator`1(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ConstContainerRandomAccessIterator`1(IRandomAccessContainer`1<TValue> _Cont, int _Offset);
    public ConstContainerRandomAccessIterator`1(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public TValue& get_Item(int _Pos);
    public ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public IRandomAccessIterator`1<TValue> op_Implicit();
    public virtual object Clone();
    public virtual int get_bias();
    public virtual object get_node();
    public virtual bool valid();
    public virtual object container();
    public virtual void next();
    public virtual bool equal_to(IInputIterator`1<TValue> _Right);
    public bool equal_to(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual TValue& get_cref();
    public virtual TValue& get_ref();
    public virtual void prev();
    public virtual int move(int _Offset);
    public virtual int distance(IRandomAccessIterator`1<TValue> _Right);
    public int distance(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual bool less_than(IRandomAccessIterator`1<TValue> _Right);
    public bool less_than(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_MemberSelection(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_PointerDereference(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ConstContainerRandomAccessIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ConstContainerRandomAccessIterator`1& , int A_0);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(IInputIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_Inequality(IInputIterator`1<TValue> _Right);
    public bool op_Inequality(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ConstContainerRandomAccessIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ConstContainerRandomAccessIterator`1& , int A_0);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition(ConstContainerRandomAccessIterator`1& , int _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
public static Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition(ConstContainerRandomAccessIterator`1& , int _Left, ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Subtraction(ConstContainerRandomAccessIterator`1& , int _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public int op_Subtraction(IRandomAccessIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_LessThan(IRandomAccessIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_LessThan(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_GreaterThanOrEqual(IRandomAccessIterator`1<TValue> _Right);
    public bool op_GreaterThanOrEqual(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static bool op_GreaterThan(IRandomAccessIterator`1<TValue> _Left, ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_GreaterThan(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
public static bool op_LessThanOrEqual(IRandomAccessIterator`1<TValue> _Left, ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_LessThanOrEqual(ConstContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
}
public class Microsoft.VisualC.StlClr.Generic.ConstReverseBidirectionalIterator`1 : object {
    internal IBidirectionalIterator`1<TValue> _Myiter;
    public ConstReverseBidirectionalIterator`1(ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ConstReverseBidirectionalIterator`1(IBidirectionalIterator`1<TValue> _Iter);
    public ConstReverseBidirectionalIterator`1(ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Iter);
    public ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public IBidirectionalIterator`1<TValue> op_Implicit();
    public IBidirectionalIterator`1<TValue> base();
    public virtual object Clone();
    public virtual int get_bias();
    public virtual object get_node();
    public virtual bool valid();
    public virtual object container();
    public virtual void next();
    public virtual bool equal_to(IInputIterator`1<TValue> _Right);
    public bool equal_to(ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual TValue& get_cref();
    public virtual TValue& get_ref();
    public virtual void prev();
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_MemberSelection(ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_PointerDereference(ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ConstReverseBidirectionalIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ConstReverseBidirectionalIterator`1& , int A_0);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(IInputIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_Inequality(IInputIterator`1<TValue> _Right);
    public bool op_Inequality(ConstReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ConstReverseBidirectionalIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ConstReverseBidirectionalIterator`1& , int A_0);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1 : object {
    internal IRandomAccessIterator`1<TValue> _Myiter;
    public TValue& Item { get; }
    public ConstReverseRandomAccessIterator`1(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ConstReverseRandomAccessIterator`1(IRandomAccessIterator`1<TValue> _Iter);
    public ConstReverseRandomAccessIterator`1(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Iter);
    public TValue& get_Item(int _Pos);
    public ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public IRandomAccessIterator`1<TValue> op_Implicit();
    public IRandomAccessIterator`1<TValue> base();
    public virtual object Clone();
    public virtual int get_bias();
    public virtual object get_node();
    public virtual bool valid();
    public virtual object container();
    public virtual void next();
    public virtual bool equal_to(IInputIterator`1<TValue> _Right);
    public bool equal_to(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual TValue& get_cref();
    public virtual TValue& get_ref();
    public virtual void prev();
    public virtual int move(int _Offset);
    public virtual int distance(IRandomAccessIterator`1<TValue> _Right);
    public int distance(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual bool less_than(IRandomAccessIterator`1<TValue> _Right);
    public bool less_than(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_MemberSelection(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_PointerDereference(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ConstReverseRandomAccessIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ConstReverseRandomAccessIterator`1& , int A_0);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_Inequality(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ConstReverseRandomAccessIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ConstReverseRandomAccessIterator`1& , int A_0);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition(ConstReverseRandomAccessIterator`1& , int _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
public static Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition(ConstReverseRandomAccessIterator`1& , int _Left, ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Subtraction(ConstReverseRandomAccessIterator`1& , int _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public int op_Subtraction(IRandomAccessIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_LessThan(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_GreaterThanOrEqual(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_GreaterThan(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_LessThanOrEqual(ConstReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
}
public class Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1 : object {
    internal INode`1<TValue> _Mynode;
    public ContainerBidirectionalIterator`1(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ContainerBidirectionalIterator`1(INode`1<TValue> _Node);
    public ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public IBidirectionalIterator`1<TValue> op_Implicit();
    public virtual object Clone();
    public virtual int get_bias();
    public virtual object get_node();
    public virtual bool valid();
    public virtual object container();
    public virtual void next();
    public virtual bool equal_to(IInputIterator`1<TValue> _Right);
    public bool equal_to(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual TValue& get_cref();
    public virtual TValue& get_ref();
    public virtual void prev();
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_MemberSelection(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_PointerDereference(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ContainerBidirectionalIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ContainerBidirectionalIterator`1& , int A_0);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(IInputIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_Inequality(IInputIterator`1<TValue> _Right);
    public bool op_Inequality(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ContainerBidirectionalIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ContainerBidirectionalIterator`1& , int A_0);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1 : object {
    internal IRandomAccessContainer`1<TValue> _Mycont;
    internal int _Myoffset;
    public TValue Item { get; public set; }
    public ContainerRandomAccessIterator`1(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ContainerRandomAccessIterator`1(IRandomAccessContainer`1<TValue> _Cont, int _Offset);
    public TValue get_Item(int _Pos);
    public void set_Item(int _Pos, TValue _Val);
    public ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public IRandomAccessIterator`1<TValue> op_Implicit();
    public virtual object Clone();
    public virtual int get_bias();
    public virtual object get_node();
    public virtual bool valid();
    public virtual object container();
    public virtual void next();
    public virtual bool equal_to(IInputIterator`1<TValue> _Right);
    public bool equal_to(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual TValue& get_cref();
    public virtual TValue& get_ref();
    public virtual void prev();
    public virtual int move(int _Offset);
    public virtual int distance(IRandomAccessIterator`1<TValue> _Right);
    public int distance(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual bool less_than(IRandomAccessIterator`1<TValue> _Right);
    public bool less_than(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_MemberSelection(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_PointerDereference(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ContainerRandomAccessIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ContainerRandomAccessIterator`1& , int A_0);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(IInputIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_Inequality(IInputIterator`1<TValue> _Right);
    public bool op_Inequality(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ContainerRandomAccessIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ContainerRandomAccessIterator`1& , int A_0);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition(ContainerRandomAccessIterator`1& , int _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
public static Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition(ContainerRandomAccessIterator`1& , int _Left, ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Subtraction(ContainerRandomAccessIterator`1& , int _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public int op_Subtraction(IRandomAccessIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_LessThan(IRandomAccessIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_LessThan(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_GreaterThanOrEqual(IRandomAccessIterator`1<TValue> _Right);
    public bool op_GreaterThanOrEqual(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static bool op_GreaterThan(IRandomAccessIterator`1<TValue> _Left, ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_GreaterThan(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
public static bool op_LessThanOrEqual(IRandomAccessIterator`1<TValue> _Left, ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_LessThanOrEqual(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
}
public interface Microsoft.VisualC.StlClr.Generic.IBaseIterator`1 {
    public abstract virtual int get_bias();
    public abstract virtual object get_node();
    public abstract virtual bool valid();
    public abstract virtual object container();
    public abstract virtual void next();
}
public interface Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer`1 {
    public abstract virtual UInt32 modopt(System.Runtime.CompilerServices.IsLong) get_generation();
}
public interface Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1 {
    public abstract virtual void prev();
}
public interface Microsoft.VisualC.StlClr.Generic.IForwardIterator`1 {
}
public interface Microsoft.VisualC.StlClr.Generic.IInputIterator`1 {
    public abstract virtual bool equal_to(IInputIterator`1<TValue> A_0);
    public abstract virtual TValue& get_cref();
}
public interface Microsoft.VisualC.StlClr.Generic.INode`1 {
    public TValue& _Value { get; public set; }
    public abstract virtual TValue& get__Value();
    public abstract virtual void set__Value(TValue& __set_formal);
    public abstract virtual IBidirectionalContainer`1<TValue> container();
    public abstract virtual bool is_head();
    public abstract virtual INode`1<TValue> next_node();
    public abstract virtual INode`1<TValue> prev_node();
}
public interface Microsoft.VisualC.StlClr.Generic.IOutputIterator`1 {
    public abstract virtual TValue& get_ref();
}
public interface Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1 {
    public abstract virtual bool valid_bias(int A_0);
    public abstract virtual TValue& at_bias(int A_0);
}
public interface Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1 {
    public abstract virtual int move(int _Offset);
    public abstract virtual int distance(IRandomAccessIterator`1<TValue> _Right);
    public abstract virtual bool less_than(IRandomAccessIterator`1<TValue> _Right);
}
public class Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1 : object {
    internal IBidirectionalIterator`1<TValue> _Myiter;
    public ReverseBidirectionalIterator`1(ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ReverseBidirectionalIterator`1(IBidirectionalIterator`1<TValue> _Iter);
    public ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public IBidirectionalIterator`1<TValue> op_Implicit();
    public IBidirectionalIterator`1<TValue> base();
    public virtual object Clone();
    public virtual int get_bias();
    public virtual object get_node();
    public virtual bool valid();
    public virtual object container();
    public virtual void next();
    [SuppressMessageAttribute("Microsoft.Design", "CA1011")]
public virtual bool equal_to(IInputIterator`1<TValue> _Right);
    public bool equal_to(ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual TValue& get_cref();
    public virtual TValue& get_ref();
    public virtual void prev();
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_MemberSelection(ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_PointerDereference(ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ReverseBidirectionalIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ReverseBidirectionalIterator`1& , int A_0);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(IInputIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_Inequality(IInputIterator`1<TValue> _Right);
    public bool op_Inequality(ReverseBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ReverseBidirectionalIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ReverseBidirectionalIterator`1& , int A_0);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1 : object {
    internal IRandomAccessIterator`1<TValue> _Myiter;
    public TValue Item { get; public set; }
    public ReverseRandomAccessIterator`1(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public ReverseRandomAccessIterator`1(IRandomAccessIterator`1<TValue> _Iter);
    public TValue get_Item(int _Pos);
    public void set_Item(int _Pos, TValue _Val);
    public ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public IRandomAccessIterator`1<TValue> op_Implicit();
    public IRandomAccessIterator`1<TValue> base();
    public virtual object Clone();
    public virtual int get_bias();
    public virtual object get_node();
    public virtual bool valid();
    public virtual object container();
    public virtual void next();
    public virtual bool equal_to(IInputIterator`1<TValue> _Right);
    public bool equal_to(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual TValue& get_cref();
    public virtual TValue& get_ref();
    public virtual void prev();
    public virtual int move(int _Offset);
    public virtual int distance(IRandomAccessIterator`1<TValue> _Right);
    public int distance(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual bool less_than(IRandomAccessIterator`1<TValue> _Right);
    public bool less_than(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_MemberSelection(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
[TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public static TValue& op_PointerDereference(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Left);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ReverseRandomAccessIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Increment(ReverseRandomAccessIterator`1& , int A_0);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_Equality(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_Inequality(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ReverseRandomAccessIterator`1& );
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Decrement(ReverseRandomAccessIterator`1& , int A_0);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition(ReverseRandomAccessIterator`1& , int _Right);
    [SuppressMessageAttribute("Microsoft.Design", "CA1000")]
public static Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Addition(ReverseRandomAccessIterator`1& , int _Left, ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) op_Subtraction(ReverseRandomAccessIterator`1& , int _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public int op_Subtraction(IRandomAccessIterator`1<TValue> _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_LessThan(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_GreaterThanOrEqual(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public bool op_GreaterThan(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public bool op_LessThanOrEqual(ReverseRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
}
public class Microsoft.VisualC.StlClr.GenericPair`2 : object {
    [SuppressMessageAttribute("Microsoft.Design", "CA1051")]
public TValue1 first;
    [SuppressMessageAttribute("Microsoft.Design", "CA1051")]
public TValue2 second;
    public GenericPair`2(GenericPair`2 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public GenericPair`2(KeyValuePair`2& _Right);
    public GenericPair`2(TValue1 _Val1);
    public GenericPair`2(TValue1 _Val1, TValue2 _Val2);
    public GenericPair`2 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) op_Assign(GenericPair`2 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public void swap(GenericPair`2 modreq(System.Runtime.CompilerServices.IsImplicitlyDereferenced) _Right);
    public virtual bool Equals(object _Right_arg);
}
public class Microsoft.VisualC.StlClr.HashEnumerator`2 : HashEnumeratorBase`2<TKey, TValue> {
    public TValue Current { get; public set; }
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public HashEnumerator`2(INode`1<TValue> _First);
    public virtual TValue get_Current();
    public virtual void set_Current(TValue A_0);
    private void ~HashEnumerator`2();
    public virtual bool MoveNext();
    public virtual void Reset();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
[SuppressMessageAttribute("Microsoft.Design", "CA1038")]
public class Microsoft.VisualC.StlClr.HashEnumeratorBase`2 : object {
    internal bool _Is_reset;
    internal INode`1<TValue> _Myfirst;
    internal INode`1<TValue> _Mynode;
    internal UInt32 modopt(System.Runtime.CompilerServices.IsLong) _Mygen;
    public object Current { get; public set; }
    public HashEnumeratorBase`2(INode`1<TValue> _First);
    public virtual object get_Current();
    public virtual void set_Current(object A_0);
    public virtual bool MoveNext();
    public virtual void Reset();
    internal TValue _Getval();
    internal void _Validate();
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.VisualC.StlClr.IDeque`1 {
    public TValue Item { get; public set; }
    public TValue back_item { get; public set; }
    public TValue front_item { get; public set; }
    public abstract virtual TValue get_front_item();
    public abstract virtual void set_front_item(TValue __set_formal);
    public abstract virtual TValue get_back_item();
    public abstract virtual void set_back_item(TValue __set_formal);
    public abstract virtual TValue get_Item(int _Pos);
    public abstract virtual void set_Item(int _Pos, TValue _Val);
    public abstract virtual TValue& at(int _Pos);
    public abstract virtual TValue& front();
    public abstract virtual TValue& back();
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin(ContainerRandomAccessIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end(ContainerRandomAccessIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin(ReverseRandomAccessIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend(ReverseRandomAccessIterator`1& );
    public abstract virtual void resize(int _Newsize);
    public abstract virtual void resize(int _Newsize, TValue _Val);
    public abstract virtual int size();
    public abstract virtual bool empty();
    public abstract virtual void push_front(TValue _Val);
    public abstract virtual void pop_front();
    public abstract virtual void push_back(TValue _Val);
    public abstract virtual void pop_back();
    public abstract virtual void assign(int _Count, TValue _Val);
    public abstract virtual void assign(IInputIterator`1<TValue> _First, IInputIterator`1<TValue> _Last);
    public abstract virtual void assign(IEnumerable _Right);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert(ContainerRandomAccessIterator`1& , ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, TValue _Val);
    public abstract virtual void insert(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, int _Count, TValue _Val);
    public abstract virtual void insert(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, IInputIterator`1<TValue> _First, IInputIterator`1<TValue> _Last);
    public abstract virtual void insert(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where_iter, IEnumerable _Right);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase(ContainerRandomAccessIterator`1& , ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase(ContainerRandomAccessIterator`1& , ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _First_iter, ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Last_iter);
    public abstract virtual void clear();
    public abstract virtual void swap(IDeque`1<TValue> A_0);
    public abstract virtual int begin_bias();
    public abstract virtual int end_bias();
    public abstract virtual UInt32 modopt(System.Runtime.CompilerServices.IsLong) get_generation();
}
[SuppressMessageAttribute("Microsoft.Design", "CA1005")]
public interface Microsoft.VisualC.StlClr.IHash`2 {
    public abstract virtual BinaryDelegate`3<TKey, TKey, bool> key_comp();
    public abstract virtual BinaryDelegate`3<TValue, TValue, bool> value_comp();
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin(ContainerBidirectionalIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end(ContainerBidirectionalIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin(ReverseBidirectionalIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend(ReverseBidirectionalIterator`1& );
    public abstract virtual int size();
    public abstract virtual bool empty();
    public abstract virtual UnaryDelegate`2<TKey, int> hash_delegate();
    public abstract virtual int bucket_count();
    public abstract virtual float load_factor();
    public abstract virtual float max_load_factor();
    public abstract virtual void max_load_factor(float _Newmax);
    public abstract virtual void rehash(int _Buckets);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert(GenericPair`2& , TValue _Val);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert(ContainerBidirectionalIterator`1& , ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, TValue _Val);
    public abstract virtual void insert(IInputIterator`1<TValue> _First, IInputIterator`1<TValue> _Last);
    public abstract virtual void insert(IEnumerable _Right);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase(ContainerBidirectionalIterator`1& , ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase(ContainerBidirectionalIterator`1& , ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _First_iter, ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Last_iter);
    public abstract virtual int erase(TKey _Keyval);
    public abstract virtual void clear();
    public abstract virtual void swap(IHash`2<TKey, TValue> _Right);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) find(ContainerBidirectionalIterator`1& , TKey _Keyval);
    public abstract virtual int count(TKey _Keyval);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) lower_bound(ContainerBidirectionalIterator`1& , TKey _Keyval);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) upper_bound(ContainerBidirectionalIterator`1& , TKey _Keyval);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) equal_range(GenericPair`2& , TKey _Keyval);
}
public interface Microsoft.VisualC.StlClr.IList`1 {
    public TValue back_item { get; public set; }
    public TValue front_item { get; public set; }
    public abstract virtual TValue get_front_item();
    public abstract virtual void set_front_item(TValue __set_formal);
    public abstract virtual TValue get_back_item();
    public abstract virtual void set_back_item(TValue __set_formal);
    public abstract virtual TValue& front();
    public abstract virtual TValue& back();
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin(ContainerBidirectionalIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end(ContainerBidirectionalIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin(ReverseBidirectionalIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend(ReverseBidirectionalIterator`1& );
    public abstract virtual void resize(int _Newsize);
    public abstract virtual void resize(int _Newsize, TValue _Val);
    public abstract virtual int size();
    public abstract virtual bool empty();
    public abstract virtual void push_front(TValue _Val);
    public abstract virtual void pop_front();
    public abstract virtual void push_back(TValue _Val);
    public abstract virtual void pop_back();
    public abstract virtual void assign(int _Count, TValue _Val);
    public abstract virtual void assign(IInputIterator`1<TValue> _First, IInputIterator`1<TValue> _Last);
    public abstract virtual void assign(IEnumerable _Right);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert(ContainerBidirectionalIterator`1& , ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, TValue _Val);
    public abstract virtual void insert(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, int _Count, TValue _Val);
    public abstract virtual void insert(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, IInputIterator`1<TValue> _First, IInputIterator`1<TValue> _Last);
    public abstract virtual void insert(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where_iter, IEnumerable _Right);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase(ContainerBidirectionalIterator`1& , ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase(ContainerBidirectionalIterator`1& , ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _First_iter, ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Last_iter);
    public abstract virtual void clear();
    public abstract virtual void swap(IList`1<TValue> _Right);
    public abstract virtual void splice(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, IList`1<TValue> _Right);
    public abstract virtual void splice(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, IList`1<TValue> _Right, ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _First);
    public abstract virtual void splice(ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, IList`1<TValue> _Right, ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _First, ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Last);
    public abstract virtual void remove(TValue _Val);
    public abstract virtual void remove_if(UnaryDelegate`2<TValue, bool> _Pred);
    public abstract virtual void unique(BinaryDelegate`3<TValue, TValue, bool> _Pred);
    public abstract virtual void merge(IList`1<TValue> _Right, BinaryDelegate`3<TValue, TValue, bool> _Pred);
    public abstract virtual void sort(BinaryDelegate`3<TValue, TValue, bool> _Pred);
    public abstract virtual void reverse();
}
public interface Microsoft.VisualC.StlClr.IPriorityQueue`2 {
    public TValue top_item { get; public set; }
    public abstract virtual TValue get_top_item();
    public abstract virtual void set_top_item(TValue __set_formal);
    public abstract virtual TValue& top();
    public abstract virtual TCont get_container();
    public abstract virtual BinaryDelegate`3<TValue, TValue, bool> value_comp();
    public abstract virtual int size();
    public abstract virtual bool empty();
    public abstract virtual void push(TValue _Val);
    public abstract virtual void pop();
    public abstract virtual void assign(IPriorityQueue`2<TValue, TCont> _Right);
}
public interface Microsoft.VisualC.StlClr.IQueue`2 {
    public abstract virtual TValue& front();
    public abstract virtual TValue& back();
    public abstract virtual TCont get_container();
    public abstract virtual int size();
    public abstract virtual bool empty();
    public abstract virtual void push(TValue _Val);
    public abstract virtual void pop();
    public abstract virtual void assign(IQueue`2<TValue, TCont> _Right);
}
public interface Microsoft.VisualC.StlClr.IStack`2 {
    public TValue top_item { get; public set; }
    public abstract virtual TValue get_top_item();
    public abstract virtual void set_top_item(TValue __set_formal);
    public abstract virtual TValue& top();
    public abstract virtual TCont get_container();
    public abstract virtual int size();
    public abstract virtual bool empty();
    public abstract virtual void push(TValue _Val);
    public abstract virtual void pop();
    public abstract virtual void assign(IStack`2<TValue, TCont> _Right);
}
[SuppressMessageAttribute("Microsoft.Design", "CA1005")]
public interface Microsoft.VisualC.StlClr.ITree`2 {
    public abstract virtual BinaryDelegate`3<TKey, TKey, bool> key_comp();
    public abstract virtual BinaryDelegate`3<TValue, TValue, bool> value_comp();
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin(ContainerBidirectionalIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end(ContainerBidirectionalIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin(ReverseBidirectionalIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend(ReverseBidirectionalIterator`1& );
    public abstract virtual int size();
    public abstract virtual bool empty();
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert(GenericPair`2& , TValue _Val);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert(ContainerBidirectionalIterator`1& , ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, TValue _Val);
    public abstract virtual void insert(IInputIterator`1<TValue> _First, IInputIterator`1<TValue> _Last);
    public abstract virtual void insert(IEnumerable`1<TValue> _Right);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase(ContainerBidirectionalIterator`1& , ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase(ContainerBidirectionalIterator`1& , ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _First_iter, ContainerBidirectionalIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Last_iter);
    public abstract virtual int erase(TKey _Keyval);
    public abstract virtual void clear();
    public abstract virtual void swap(ITree`2<TKey, TValue> _Right);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) find(ContainerBidirectionalIterator`1& , TKey _Keyval);
    public abstract virtual int count(TKey _Keyval);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) lower_bound(ContainerBidirectionalIterator`1& , TKey _Keyval);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) upper_bound(ContainerBidirectionalIterator`1& , TKey _Keyval);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) equal_range(GenericPair`2& , TKey _Keyval);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.VisualC.StlClr.IVector`1 {
    public TValue Item { get; public set; }
    public TValue back_item { get; public set; }
    public TValue front_item { get; public set; }
    public abstract virtual TValue get_front_item();
    public abstract virtual void set_front_item(TValue __set_formal);
    public abstract virtual TValue get_back_item();
    public abstract virtual void set_back_item(TValue __set_formal);
    public abstract virtual TValue get_Item(int _Pos);
    public abstract virtual void set_Item(int _Pos, TValue _Val);
    public abstract virtual TValue& at(int _Pos);
    public abstract virtual TValue& front();
    public abstract virtual TValue& back();
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin(ContainerRandomAccessIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end(ContainerRandomAccessIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin(ReverseRandomAccessIterator`1& );
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend(ReverseRandomAccessIterator`1& );
    public abstract virtual void reserve(int _Capacity);
    public abstract virtual int capacity();
    public abstract virtual void resize(int _Newsize);
    public abstract virtual void resize(int _Newsize, TValue _Val);
    public abstract virtual int size();
    public abstract virtual bool empty();
    public abstract virtual void push_back(TValue _Val);
    public abstract virtual void pop_back();
    public abstract virtual void assign(int _Count, TValue _Val);
    public abstract virtual void assign(IInputIterator`1<TValue> _First, IInputIterator`1<TValue> _Last);
    public abstract virtual void assign(IEnumerable _Right);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert(ContainerRandomAccessIterator`1& , ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, TValue _Val);
    public abstract virtual void insert(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, int _Count, TValue _Val);
    public abstract virtual void insert(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where, IInputIterator`1<TValue> _First, IInputIterator`1<TValue> _Last);
    public abstract virtual void insert(ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where_iter, IEnumerable _Right);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase(ContainerRandomAccessIterator`1& , ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Where);
    public abstract virtual Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase(ContainerRandomAccessIterator`1& , ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _First_iter, ContainerRandomAccessIterator`1 modreq(System.Runtime.CompilerServices.IsByValue) _Last_iter);
    public abstract virtual void clear();
    public abstract virtual void swap(IVector`1<TValue> A_0);
    public abstract virtual UInt32 modopt(System.Runtime.CompilerServices.IsLong) get_generation();
}
[SuppressMessageAttribute("Microsoft.Design", "CA1038")]
public class Microsoft.VisualC.StlClr.ListEnumerator`1 : ListEnumeratorBase`1<TValue> {
    public TValue Current { get; public set; }
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public ListEnumerator`1(INode`1<TValue> _First);
    public virtual TValue get_Current();
    public virtual void set_Current(TValue A_0);
    private void ~ListEnumerator`1();
    public virtual bool MoveNext();
    public virtual void Reset();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
[SuppressMessageAttribute("Microsoft.Design", "CA1038")]
public class Microsoft.VisualC.StlClr.ListEnumeratorBase`1 : object {
    internal bool _Is_reset;
    internal INode`1<TValue> _Myfirst;
    internal INode`1<TValue> _Mynode;
    internal UInt32 modopt(System.Runtime.CompilerServices.IsLong) _Mygen;
    public object Current { get; public set; }
    public ListEnumeratorBase`1(INode`1<TValue> _First);
    public virtual object get_Current();
    public virtual void set_Current(object A_0);
    public virtual bool MoveNext();
    public virtual void Reset();
    internal TValue _Getval();
    internal void _Validate();
}
[SuppressMessageAttribute("Microsoft.Design", "CA1005")]
public class Microsoft.VisualC.StlClr.TreeEnumerator`2 : TreeEnumeratorBase`2<TKey, TValue> {
    public TValue Current { get; public set; }
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public TreeEnumerator`2(INode`1<TValue> _First);
    public virtual TValue get_Current();
    public virtual void set_Current(TValue A_0);
    private void ~TreeEnumerator`2();
    public virtual bool MoveNext();
    public virtual void Reset();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
[SuppressMessageAttribute("Microsoft.Design", "CA1005")]
[SuppressMessageAttribute("Microsoft.Design", "CA1038")]
public class Microsoft.VisualC.StlClr.TreeEnumeratorBase`2 : object {
    internal bool _Is_reset;
    internal INode`1<TValue> _Myfirst;
    internal INode`1<TValue> _Mynode;
    internal UInt32 modopt(System.Runtime.CompilerServices.IsLong) _Mygen;
    public object Current { get; public set; }
    public TreeEnumeratorBase`2(INode`1<TValue> _First);
    public virtual object get_Current();
    public virtual void set_Current(object A_0);
    public virtual bool MoveNext();
    public virtual void Reset();
    internal TValue _Getval();
    internal void _Validate();
}
public class Microsoft.VisualC.StlClr.UnaryDelegate`2 : MulticastDelegate {
    public UnaryDelegate`2(object A_0, IntPtr A_1);
    public sealed virtual TResult Invoke(TArg A_0);
    public sealed virtual IAsyncResult BeginInvoke(TArg __unnamed000, AsyncCallback callback, object obj);
    public sealed virtual TResult EndInvoke(IAsyncResult result);
}
public class Microsoft.VisualC.StlClr.VectorEnumerator`1 : VectorEnumeratorBase`1<TValue> {
    public TValue Current { get; public set; }
    [TargetedPatchingOptOutAttribute("Performance critical to inline this type of method across NGen image boundaries")]
public VectorEnumerator`1(IVector`1<TValue> _Cont, int _First);
    public virtual TValue get_Current();
    public virtual void set_Current(TValue A_0);
    private void ~VectorEnumerator`1();
    public virtual bool MoveNext();
    public virtual void Reset();
    protected virtual void Dispose(bool A_0);
    public sealed virtual void Dispose();
}
[SuppressMessageAttribute("Microsoft.Design", "CA1038")]
public class Microsoft.VisualC.StlClr.VectorEnumeratorBase`1 : object {
    internal bool _Is_reset;
    internal int _Myfirst;
    internal int _Mybias;
    internal IVector`1<TValue> _Mycont;
    internal UInt32 modopt(System.Runtime.CompilerServices.IsLong) _Mygen;
    public object Current { get; public set; }
    public VectorEnumeratorBase`1(IVector`1<TValue> _Cont, int _First);
    public virtual object get_Current();
    public virtual void set_Current(object A_0);
    public virtual bool MoveNext();
    public virtual void Reset();
    internal TValue _Getval();
    internal void _Validate();
}
