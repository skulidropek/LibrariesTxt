public enum System.Activities.DurableInstancing.InstanceCompletionAction : Enum {
    public int value__;
    public static InstanceCompletionAction DeleteNothing;
    public static InstanceCompletionAction DeleteAll;
}
public enum System.Activities.DurableInstancing.InstanceEncodingOption : Enum {
    public int value__;
    public static InstanceEncodingOption None;
    public static InstanceEncodingOption GZip;
}
public enum System.Activities.DurableInstancing.InstanceLockedExceptionAction : Enum {
    public int value__;
    public static InstanceLockedExceptionAction NoRetry;
    public static InstanceLockedExceptionAction BasicRetry;
    public static InstanceLockedExceptionAction AggressiveRetry;
}
public class System.Activities.DurableInstancing.SqlWorkflowInstanceStore : InstanceStore {
    public string ConnectionString { get; public set; }
    public bool EnqueueRunCommands { get; public set; }
    public TimeSpan HostLockRenewalPeriod { get; public set; }
    public InstanceCompletionAction InstanceCompletionAction { get; public set; }
    public InstanceEncodingOption InstanceEncodingOption { get; public set; }
    public InstanceLockedExceptionAction InstanceLockedExceptionAction { get; public set; }
    public TimeSpan RunnableInstancesDetectionPeriod { get; public set; }
    public int MaxConnectionRetries { get; public set; }
    public SqlWorkflowInstanceStore(string connectionString);
    private static SqlWorkflowInstanceStore();
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public bool get_EnqueueRunCommands();
    public void set_EnqueueRunCommands(bool value);
    public TimeSpan get_HostLockRenewalPeriod();
    public void set_HostLockRenewalPeriod(TimeSpan value);
    public InstanceCompletionAction get_InstanceCompletionAction();
    public void set_InstanceCompletionAction(InstanceCompletionAction value);
    public InstanceEncodingOption get_InstanceEncodingOption();
    public void set_InstanceEncodingOption(InstanceEncodingOption value);
    public InstanceLockedExceptionAction get_InstanceLockedExceptionAction();
    public void set_InstanceLockedExceptionAction(InstanceLockedExceptionAction value);
    public TimeSpan get_RunnableInstancesDetectionPeriod();
    public void set_RunnableInstancesDetectionPeriod(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MaxConnectionRetries();
    [CompilerGeneratedAttribute]
public void set_MaxConnectionRetries(int value);
    public void Promote(string name, IEnumerable`1<XName> promoteAsVariant, IEnumerable`1<XName> promoteAsBinary);
    protected internal virtual IAsyncResult BeginTryCommand(InstancePersistenceContext context, InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);
    protected internal virtual bool EndTryCommand(IAsyncResult result);
    protected virtual void OnFreeInstanceHandle(InstanceHandle instanceHandle, object userContext);
    protected virtual object OnNewInstanceHandle(InstanceHandle instanceHandle);
}
