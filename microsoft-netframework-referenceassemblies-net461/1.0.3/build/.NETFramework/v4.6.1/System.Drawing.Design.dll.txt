[SecurityCriticalAttribute]
public class System.Drawing.Design.BitmapEditor : ImageEditor {
    protected virtual string GetFileDialogDescription();
    protected virtual String[] GetExtensions();
    protected virtual Image LoadFromStream(Stream stream);
}
public class System.Drawing.Design.ColorEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
}
[SecurityCriticalAttribute]
public class System.Drawing.Design.ContentAlignmentEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
[SecurityCriticalAttribute]
public class System.Drawing.Design.CursorEditor : UITypeEditor {
    public bool IsDropDownResizable { get; }
    public virtual bool get_IsDropDownResizable();
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
[SecurityCriticalAttribute]
public class System.Drawing.Design.FontEditor : UITypeEditor {
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
}
[SecurityCriticalAttribute]
public class System.Drawing.Design.FontNameEditor : UITypeEditor {
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    public virtual void PaintValue(PaintValueEventArgs e);
}
public class System.Drawing.Design.IconEditor : UITypeEditor {
    private static IconEditor();
    protected static string CreateExtensionsString(String[] extensions, string sep);
    protected static string CreateFilterEntry(IconEditor e);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    protected virtual string GetFileDialogDescription();
    protected virtual String[] GetExtensions();
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    protected virtual Icon LoadFromStream(Stream stream);
    public virtual void PaintValue(PaintValueEventArgs e);
}
public class System.Drawing.Design.ImageEditor : UITypeEditor {
    private static ImageEditor();
    protected virtual Type[] GetImageExtenders();
    protected static string CreateExtensionsString(String[] extensions, string sep);
    protected static string CreateFilterEntry(ImageEditor e);
    public virtual object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value);
    public virtual UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context);
    protected virtual string GetFileDialogDescription();
    protected virtual String[] GetExtensions();
    public virtual bool GetPaintValueSupported(ITypeDescriptorContext context);
    protected virtual Image LoadFromStream(Stream stream);
    public virtual void PaintValue(PaintValueEventArgs e);
}
[SecurityCriticalAttribute]
public class System.Drawing.Design.MetafileEditor : ImageEditor {
    protected virtual string GetFileDialogDescription();
    protected virtual String[] GetExtensions();
    protected virtual Image LoadFromStream(Stream stream);
}
public class System.Drawing.Design.ToolboxItemContainer : object {
    public bool IsCreated { get; }
    public bool IsTransient { get; }
    public IDataObject ToolboxData { get; }
    protected ToolboxItemContainer(SerializationInfo info, StreamingContext context);
    public ToolboxItemContainer(ToolboxItem item);
    public ToolboxItemContainer(IDataObject data);
    public bool get_IsCreated();
    public bool get_IsTransient();
    public virtual IDataObject get_ToolboxData();
    public void UpdateFilter(ToolboxItem item);
    public virtual bool Equals(object obj);
    public virtual ICollection GetFilter(ICollection creators);
    public virtual int GetHashCode();
    [SecurityCriticalAttribute]
protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual ToolboxItem GetToolboxItem(ICollection creators);
    [SecurityCriticalAttribute]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Drawing.Design.ToolboxItemCreator : object {
    public string Format { get; }
    public ToolboxItem Create(IDataObject data);
    public string get_Format();
}
[SecurityCriticalAttribute]
public abstract class System.Drawing.Design.ToolboxService : object {
    protected CategoryNameCollection CategoryNames { get; }
    protected string SelectedCategory { get; protected set; }
    protected ToolboxItemContainer SelectedItemContainer { get; protected set; }
    private CategoryNameCollection System.Drawing.Design.IToolboxService.CategoryNames { get; }
    private string System.Drawing.Design.IToolboxService.SelectedCategory { get; private set; }
    protected abstract virtual CategoryNameCollection get_CategoryNames();
    protected abstract virtual string get_SelectedCategory();
    protected abstract virtual void set_SelectedCategory(string value);
    protected abstract virtual ToolboxItemContainer get_SelectedItemContainer();
    protected abstract virtual void set_SelectedItemContainer(ToolboxItemContainer value);
    protected virtual ToolboxItemContainer CreateItemContainer(ToolboxItem item, IDesignerHost link);
    protected virtual ToolboxItemContainer CreateItemContainer(IDataObject dataObject);
    protected virtual void FilterChanged();
    protected abstract virtual IList GetItemContainers();
    protected abstract virtual IList GetItemContainers(string categoryName);
    public static ToolboxItem GetToolboxItem(Type toolType);
    public static ToolboxItem GetToolboxItem(Type toolType, bool nonPublic);
    public static ICollection GetToolboxItems(Assembly a, string newCodeBase);
    public static ICollection GetToolboxItems(Assembly a, string newCodeBase, bool throwOnError);
    public static ICollection GetToolboxItems(AssemblyName an);
    public static ICollection GetToolboxItems(AssemblyName an, bool throwOnError);
    protected virtual bool IsItemContainer(IDataObject dataObject, IDesignerHost host);
    protected bool IsItemContainerSupported(ToolboxItemContainer container, IDesignerHost host);
    protected abstract virtual void Refresh();
    protected virtual void SelectedItemContainerUsed();
    protected virtual bool SetCursor();
    public static void UnloadToolboxItems();
    private sealed virtual override CategoryNameCollection System.Drawing.Design.IToolboxService.get_CategoryNames();
    private sealed virtual override string System.Drawing.Design.IToolboxService.get_SelectedCategory();
    private sealed virtual override void System.Drawing.Design.IToolboxService.set_SelectedCategory(string value);
    private sealed virtual override void System.Drawing.Design.IToolboxService.AddCreator(ToolboxItemCreatorCallback creator, string format);
    private sealed virtual override void System.Drawing.Design.IToolboxService.AddCreator(ToolboxItemCreatorCallback creator, string format, IDesignerHost host);
    private sealed virtual override void System.Drawing.Design.IToolboxService.AddLinkedToolboxItem(ToolboxItem toolboxItem, IDesignerHost host);
    private sealed virtual override void System.Drawing.Design.IToolboxService.AddLinkedToolboxItem(ToolboxItem toolboxItem, string category, IDesignerHost host);
    private sealed virtual override void System.Drawing.Design.IToolboxService.AddToolboxItem(ToolboxItem toolboxItem);
    private sealed virtual override void System.Drawing.Design.IToolboxService.AddToolboxItem(ToolboxItem toolboxItem, string category);
    private sealed virtual override ToolboxItem System.Drawing.Design.IToolboxService.DeserializeToolboxItem(object serializedObject);
    private sealed virtual override ToolboxItem System.Drawing.Design.IToolboxService.DeserializeToolboxItem(object serializedObject, IDesignerHost host);
    private sealed virtual override ToolboxItem System.Drawing.Design.IToolboxService.GetSelectedToolboxItem();
    private sealed virtual override ToolboxItem System.Drawing.Design.IToolboxService.GetSelectedToolboxItem(IDesignerHost host);
    private sealed virtual override ToolboxItemCollection System.Drawing.Design.IToolboxService.GetToolboxItems();
    private sealed virtual override ToolboxItemCollection System.Drawing.Design.IToolboxService.GetToolboxItems(IDesignerHost host);
    private sealed virtual override ToolboxItemCollection System.Drawing.Design.IToolboxService.GetToolboxItems(string category);
    private sealed virtual override ToolboxItemCollection System.Drawing.Design.IToolboxService.GetToolboxItems(string category, IDesignerHost host);
    private sealed virtual override bool System.Drawing.Design.IToolboxService.IsSupported(object serializedObject, IDesignerHost host);
    private sealed virtual override bool System.Drawing.Design.IToolboxService.IsSupported(object serializedObject, ICollection filterAttributes);
    private sealed virtual override bool System.Drawing.Design.IToolboxService.IsToolboxItem(object serializedObject);
    private sealed virtual override bool System.Drawing.Design.IToolboxService.IsToolboxItem(object serializedObject, IDesignerHost host);
    private sealed virtual override void System.Drawing.Design.IToolboxService.Refresh();
    private sealed virtual override void System.Drawing.Design.IToolboxService.RemoveCreator(string format);
    private sealed virtual override void System.Drawing.Design.IToolboxService.RemoveCreator(string format, IDesignerHost host);
    private sealed virtual override void System.Drawing.Design.IToolboxService.RemoveToolboxItem(ToolboxItem toolboxItem);
    private sealed virtual override void System.Drawing.Design.IToolboxService.RemoveToolboxItem(ToolboxItem toolboxItem, string category);
    private sealed virtual override void System.Drawing.Design.IToolboxService.SelectedToolboxItemUsed();
    private sealed virtual override object System.Drawing.Design.IToolboxService.SerializeToolboxItem(ToolboxItem toolboxItem);
    private sealed virtual override bool System.Drawing.Design.IToolboxService.SetCursor();
    private sealed virtual override void System.Drawing.Design.IToolboxService.SetSelectedToolboxItem(ToolboxItem toolboxItem);
    private sealed virtual override ICollection System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(IDesignerHost designerHost, Type baseType);
}
