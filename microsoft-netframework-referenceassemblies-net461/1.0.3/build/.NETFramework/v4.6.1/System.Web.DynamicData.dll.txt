internal static class AssemblyRef : object {
    internal static string EcmaPublicKey;
    internal static string EcmaPublicKeyToken;
    internal static string EcmaPublicKeyFull;
    internal static string SilverlightPublicKey;
    internal static string SilverlightPublicKeyToken;
    internal static string SilverlightPublicKeyFull;
    internal static string SilverlightPlatformPublicKey;
    internal static string SilverlightPlatformPublicKeyToken;
    internal static string SilverlightPlatformPublicKeyFull;
    internal static string PlatformPublicKey;
    internal static string PlatformPublicKeyToken;
    internal static string PlatformPublicKeyFull;
    internal static string Mscorlib;
    internal static string SystemData;
    internal static string SystemDataOracleClient;
    internal static string System;
    internal static string SystemCore;
    internal static string SystemNumerics;
    internal static string SystemRuntimeRemoting;
    internal static string SystemThreadingTasksDataflow;
    internal static string SystemWindowsForms;
    internal static string SystemXml;
    internal static string MicrosoftPublicKey;
    internal static string MicrosoftPublicKeyToken;
    internal static string MicrosoftPublicKeyFull;
    internal static string SharedLibPublicKey;
    internal static string SharedLibPublicKeyToken;
    internal static string SharedLibPublicKeyFull;
    internal static string SystemComponentModelDataAnnotations;
    internal static string SystemConfiguration;
    internal static string SystemConfigurationInstall;
    internal static string SystemDeployment;
    internal static string SystemDesign;
    internal static string SystemDirectoryServices;
    internal static string SystemDrawingDesign;
    internal static string SystemDrawing;
    internal static string SystemEnterpriseServices;
    internal static string SystemManagement;
    internal static string SystemMessaging;
    internal static string SystemNetHttp;
    internal static string SystemNetHttpWebRequest;
    internal static string SystemRuntimeSerializationFormattersSoap;
    internal static string SystemRuntimeWindowsRuntime;
    internal static string SystemRuntimeWindowsRuntimeUIXaml;
    internal static string SystemSecurity;
    internal static string SystemServiceModelWeb;
    internal static string SystemServiceProcess;
    internal static string SystemWeb;
    internal static string SystemWebAbstractions;
    internal static string SystemWebDynamicData;
    internal static string SystemWebDynamicDataDesign;
    internal static string SystemWebEntityDesign;
    internal static string SystemWebExtensions;
    internal static string SystemWebExtensionsDesign;
    internal static string SystemWebMobile;
    internal static string SystemWebRegularExpressions;
    internal static string SystemWebRouting;
    internal static string SystemWebServices;
    internal static string WindowsBase;
    internal static string MicrosoftVisualStudio;
    internal static string MicrosoftVisualStudioWindowsForms;
    internal static string VJSharpCodeProvider;
    internal static string ASPBrowserCapsPublicKey;
    internal static string ASPBrowserCapsFactory;
    internal static string MicrosoftVSDesigner;
    internal static string MicrosoftVisualStudioWeb;
    internal static string MicrosoftWebDesign;
    internal static string MicrosoftVSDesignerMobile;
    internal static string MicrosoftJScript;
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal class System.Web.DynamicData.ActionConverter : StringConverter {
    private static ActionConverter();
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public enum System.Web.DynamicData.ContainerType : Enum {
    public int value__;
    public static ContainerType List;
    public static ContainerType Item;
}
public class System.Web.DynamicData.ContextConfiguration : object {
    public Func`2<Type, TypeDescriptionProvider> MetadataProviderFactory { get; public set; }
    public bool ScaffoldAllTables { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<Type, TypeDescriptionProvider> get_MetadataProviderFactory();
    [CompilerGeneratedAttribute]
public void set_MetadataProviderFactory(Func`2<Type, TypeDescriptionProvider> value);
    [CompilerGeneratedAttribute]
public bool get_ScaffoldAllTables();
    [CompilerGeneratedAttribute]
public void set_ScaffoldAllTables(bool value);
}
public class System.Web.DynamicData.ControlFilterExpression : DataSourceExpression {
    public string ControlID { get; public set; }
    public string Column { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ControlID();
    [CompilerGeneratedAttribute]
public void set_ControlID(string value);
    [CompilerGeneratedAttribute]
public string get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(string value);
    public virtual void SetContext(Control owner, HttpContext context, IQueryableDataSource dataSource);
    protected virtual object SaveViewState();
    protected virtual void LoadViewState(object savedState);
    protected virtual void TrackViewState();
    [IteratorStateMachineAttribute("System.Web.DynamicData.ControlFilterExpression/<GetControlParameters>d__21")]
internal static IEnumerable`1<Parameter> GetControlParameters(Control control, IDictionary`2<string, MetaColumn> nameColumnMapping);
    public virtual IQueryable GetQueryable(IQueryable source);
}
internal class System.Web.DynamicData.DataBoundControlParameterTarget : object {
    public MetaTable Table { get; }
    public MetaColumn FilteredColumn { get; }
    public DataBoundControlParameterTarget(Control control);
    public sealed virtual MetaTable get_Table();
    public sealed virtual MetaColumn get_FilteredColumn();
    public sealed virtual string GetPropertyNameExpression(string columnName);
}
public class System.Web.DynamicData.DataControlReference : object {
    [BrowsableAttribute("False")]
public DynamicDataManager Owner { get; internal set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute]
[ResourceDescriptionAttribute("DataControlReference_ControlID")]
[TypeConverterAttribute("System.Web.DynamicData.Design.DataControlReferenceIDConverter, System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public string ControlID { get; public set; }
    [CompilerGeneratedAttribute]
public DynamicDataManager get_Owner();
    [CompilerGeneratedAttribute]
internal void set_Owner(DynamicDataManager value);
    [CompilerGeneratedAttribute]
public string get_ControlID();
    [CompilerGeneratedAttribute]
public void set_ControlID(string value);
    public virtual string ToString();
}
public class System.Web.DynamicData.DataControlReferenceCollection : Collection`1<DataControlReference> {
    public DynamicDataManager Owner { get; private set; }
    public DataControlReferenceCollection(DynamicDataManager owner);
    [CompilerGeneratedAttribute]
public DynamicDataManager get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(DynamicDataManager value);
    internal void Initialize();
    protected virtual void SetItem(int index, DataControlReference item);
    protected virtual void InsertItem(int index, DataControlReference item);
    protected virtual void RemoveItem(int index);
}
internal static class System.Web.DynamicData.DataSourceUtil : object {
    private static DataSourceUtil();
    internal static TypeCode TypeCodeFromType(Type type);
    internal static void SetParameterTypeCodeAndDbType(Parameter parameter, MetaColumn column);
}
public class System.Web.DynamicData.DefaultAutoFieldGenerator : object {
    public DefaultAutoFieldGenerator(MetaTable table);
    internal DefaultAutoFieldGenerator(IMetaTable table);
    public sealed virtual ICollection GenerateFields(Control control);
    protected virtual DynamicField CreateField(MetaColumn column, ContainerType containerType, DataBoundControlMode mode);
    internal static ContainerType GetControlContainerType(Control control);
    internal static DataBoundControlMode GetMode(Control control);
}
[ToolboxBitmapAttribute("System.Web.DynamicData.DynamicControl", "DynamicControl.bmp")]
public class System.Web.DynamicData.DynamicControl : Control {
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_DataField")]
public string DataField { get; public set; }
    [BrowsableAttribute("False")]
public MetaColumn Column { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_UIHint")]
public string UIHint { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[CssClassPropertyAttribute]
public string CssClass { get; public set; }
    [BrowsableAttribute("False")]
public MetaTable Table { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("DynamicField_Mode")]
public DataBoundControlMode Mode { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_ValidationGroup")]
public string ValidationGroup { get; public set; }
    [BrowsableAttribute("False")]
public Control FieldTemplate { get; private set; }
    private IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.FormattingOptions { get; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_ConvertEmptyStringToNull")]
public bool ConvertEmptyStringToNull { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_ApplyFormatInEditMode")]
public bool ApplyFormatInEditMode { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_DataFormatString")]
public string DataFormatString { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_HtmlEncode")]
public bool HtmlEncode { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_NullDisplayText")]
public string NullDisplayText { get; public set; }
    internal DynamicControl(IMetaTable table);
    internal DynamicControl(IMetaColumn column);
    public DynamicControl(DataBoundControlMode mode);
    public string get_DataField();
    public void set_DataField(string value);
    public sealed virtual MetaColumn get_Column();
    public void set_Column(MetaColumn value);
    public virtual string get_UIHint();
    public virtual void set_UIHint(string value);
    public virtual string get_CssClass();
    public virtual void set_CssClass(string value);
    public virtual MetaTable get_Table();
    public sealed virtual DataBoundControlMode get_Mode();
    public void set_Mode(DataBoundControlMode value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    internal Control CreateControl();
    protected virtual void OnInit(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
    internal void ResolveColumn();
    [CompilerGeneratedAttribute]
public Control get_FieldTemplate();
    [CompilerGeneratedAttribute]
private void set_FieldTemplate(Control value);
    internal static string GetControlIDFromColumnName(string columnName);
    internal void SetAttributes(IDictionary`2<string, string> attributes);
    public sealed virtual string GetAttribute(string key);
    public sealed virtual void SetAttribute(string key, string value);
    private sealed virtual override IFieldFormattingOptions System.Web.DynamicData.IFieldTemplateHost.get_FormattingOptions();
    public sealed virtual bool get_ConvertEmptyStringToNull();
    public void set_ConvertEmptyStringToNull(bool value);
    public sealed virtual bool get_ApplyFormatInEditMode();
    public void set_ApplyFormatInEditMode(bool value);
    public sealed virtual string get_DataFormatString();
    public void set_DataFormatString(string value);
    public sealed virtual bool get_HtmlEncode();
    public void set_HtmlEncode(bool value);
    public sealed virtual string get_NullDisplayText();
    public void set_NullDisplayText(string value);
}
public class System.Web.DynamicData.DynamicControlParameter : Parameter {
    public string ControlId { get; public set; }
    public DynamicControlParameter(string controlId);
    [CompilerGeneratedAttribute]
public string get_ControlId();
    [CompilerGeneratedAttribute]
public void set_ControlId(string value);
    public virtual IEnumerable`1<Parameter> GetWhereParameters(IDynamicDataSource dataSource);
    protected virtual object Evaluate(HttpContext context, Control control);
}
[ExtensionAttribute]
public static class System.Web.DynamicData.DynamicDataExtensions : object {
    [ExtensionAttribute]
public static void SetMetaTable(INamingContainer control, MetaTable table);
    [ExtensionAttribute]
public static void SetMetaTable(INamingContainer control, MetaTable table, IDictionary`2<string, object> defaultValues);
    [ExtensionAttribute]
public static void SetMetaTable(INamingContainer control, MetaTable table, object defaultValues);
    [ExtensionAttribute]
public static IDictionary`2<string, object> GetDefaultValues(IDataSource dataSource);
    [ExtensionAttribute]
public static IDictionary`2<string, object> GetDefaultValues(INamingContainer control);
    [ExtensionAttribute]
public static MetaTable GetMetaTable(IDataSource dataSource);
    [ExtensionAttribute]
public static bool TryGetMetaTable(IDataSource dataSource, MetaTable& table);
    [ExtensionAttribute]
public static MetaTable GetMetaTable(INamingContainer control);
    [ExtensionAttribute]
public static bool TryGetMetaTable(INamingContainer control, MetaTable& table);
    internal static void ApplyFieldGenerator(INamingContainer control, MetaTable table);
    internal static DefaultValueMapping GetDefaultValueMapping(object control, HttpContextBase context);
    internal static IDictionary`2<string, object> GetDefaultValues(object control, HttpContextBase context);
    internal static MetaTable GetMetaTable(IDataSource dataSource, HttpContextBase context);
    internal static bool TryGetMetaTable(IDataSource dataSource, HttpContextBase context, MetaTable& table);
    internal static MetaTable GetMetaTable(INamingContainer control, HttpContextBase context);
    internal static bool TryGetMetaTable(INamingContainer control, HttpContextBase context, MetaTable& table);
    internal static void SetMetaTableInternal(INamingContainer control, MetaTable table, IDictionary`2<string, object> defaultValues, HttpContextBase context);
    [ExtensionAttribute]
public static MetaTable GetTable(IDynamicDataSource dataSource);
    [ExtensionAttribute]
public static void ExpandDynamicWhereParameters(IDynamicDataSource dataSource);
    [ExtensionAttribute]
public static IDynamicDataSource FindDataSourceControl(Control current);
    [ExtensionAttribute]
public static MetaTable FindMetaTable(Control current);
    [ExtensionAttribute]
public static Control FindFieldTemplate(Control control, string columnName);
    [ExtensionAttribute]
[ObsoleteAttribute("Use the EnablePersistedSelection property on a databound control such as GridView or ListView.")]
public static void EnablePersistedSelection(BaseDataBoundControl dataBoundControl);
    internal static void EnablePersistedSelectionInternal(BaseDataBoundControl dataBoundControl);
    [ExtensionAttribute]
public static void LoadWithForeignKeys(LinqDataSource dataSource, Type rowType);
    [ExtensionAttribute]
public static void LoadWith(LinqDataSource dataSource);
    [ExtensionAttribute]
public static string FormatValue(IFieldFormattingOptions formattingOptions, object fieldValue);
    [ExtensionAttribute]
public static string FormatEditValue(IFieldFormattingOptions formattingOptions, object fieldValue);
    [ExtensionAttribute]
public static object ConvertEditedValue(IFieldFormattingOptions formattingOptions, string value);
    [ExtensionAttribute]
public static Type GetEnumType(MetaColumn column);
    [ExtensionAttribute]
internal static Type GetEnumType(IMetaColumn column);
    [ExtensionAttribute]
internal static bool IsEnumType(MetaColumn column, Type& enumType);
}
[NonVisualControlAttribute]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ToolboxBitmapAttribute("System.Web.DynamicData.DynamicDataManager", "DynamicDataManager.bmp")]
[DesignerAttribute("System.Web.DynamicData.Design.DynamicDataManagerDesigner, System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.DynamicData.DynamicDataManager : Control {
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[ResourceDescriptionAttribute("DynamicDataManager_AutoLoadForeignKeys")]
public bool AutoLoadForeignKeys { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string ClientID { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public ClientIDMode ClientIDMode { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public DataControlReferenceCollection DataControls { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AutoLoadForeignKeys();
    [CompilerGeneratedAttribute]
public void set_AutoLoadForeignKeys(bool value);
    public virtual string get_ClientID();
    public virtual ClientIDMode get_ClientIDMode();
    public virtual void set_ClientIDMode(ClientIDMode value);
    public DataControlReferenceCollection get_DataControls();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnLoad(EventArgs e);
    public void RegisterControl(Control control);
    public void RegisterControl(Control control, bool setSelectionFromUrl);
    internal static void EnablePersistedSelection(BaseDataBoundControl baseDataBoundControl, IMetaTable table);
    internal void RegisterControlInternal(IDataBoundControl dataBoundControl, IDynamicDataSource dataSource, IMetaTable table, bool setSelectionFromUrl, bool isPostBack);
    internal static IControlParameterTarget GetControlParameterTarget(Control control);
}
public class System.Web.DynamicData.DynamicDataRoute : Route {
    internal static string ActionToken;
    internal static string TableToken;
    internal static string ModelToken;
    public string Table { get; public set; }
    public string Action { get; public set; }
    public string ViewName { get; public set; }
    public MetaModel Model { get; public set; }
    public DynamicDataRouteHandler RouteHandler { get; public set; }
    public DynamicDataRoute(string url);
    [CompilerGeneratedAttribute]
public string get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(string value);
    [CompilerGeneratedAttribute]
public string get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(string value);
    [CompilerGeneratedAttribute]
public string get_ViewName();
    [CompilerGeneratedAttribute]
public void set_ViewName(string value);
    public MetaModel get_Model();
    public void set_Model(MetaModel value);
    public virtual RouteData GetRouteData(HttpContextBase httpContext);
    internal static void AddQueryStringParamsToRouteData(HttpContextBase httpContext, RouteData routeData);
    public virtual VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values);
    public MetaTable GetTableFromRouteData(RouteData routeData);
    public string GetActionFromRouteData(RouteData routeData);
    public DynamicDataRouteHandler get_RouteHandler();
    public void set_RouteHandler(DynamicDataRouteHandler value);
}
public class System.Web.DynamicData.DynamicDataRouteHandler : object {
    public MetaModel Model { get; internal set; }
    internal VirtualPathProvider VirtualPathProvider { get; internal set; }
    internal HttpContextBase HttpContext { get; internal set; }
    internal Func`2<string, IHttpHandler> CreateHandlerCallback { get; internal set; }
    private static DynamicDataRouteHandler();
    [CompilerGeneratedAttribute]
public MetaModel get_Model();
    [CompilerGeneratedAttribute]
internal void set_Model(MetaModel value);
    [CompilerGeneratedAttribute]
internal VirtualPathProvider get_VirtualPathProvider();
    [CompilerGeneratedAttribute]
internal void set_VirtualPathProvider(VirtualPathProvider value);
    internal HttpContextBase get_HttpContext();
    internal void set_HttpContext(HttpContextBase value);
    [CompilerGeneratedAttribute]
internal Func`2<string, IHttpHandler> get_CreateHandlerCallback();
    [CompilerGeneratedAttribute]
internal void set_CreateHandlerCallback(Func`2<string, IHttpHandler> value);
    public virtual IHttpHandler CreateHandler(DynamicDataRoute route, MetaTable table, string action);
    protected virtual string GetCustomPageVirtualPath(MetaTable table, string viewName);
    protected virtual string GetScaffoldPageVirtualPath(MetaTable table, string viewName);
    public static RequestContext GetRequestContext(HttpContext httpContext);
    internal static RequestContext GetRequestContext(HttpContextBase httpContext);
    public static MetaTable GetRequestMetaTable(HttpContext httpContext);
    internal static MetaTable GetRequestMetaTable(HttpContextBase httpContext);
    public static void SetRequestMetaTable(HttpContext httpContext, MetaTable table);
    internal static void SetRequestMetaTable(HttpContextBase httpContext, MetaTable table);
    private sealed virtual override IHttpHandler System.Web.Routing.IRouteHandler.GetHttpHandler(RequestContext requestContext);
}
[ToolboxBitmapAttribute("System.Web.DynamicData.DynamicEntity", "DynamicEntity.bmp")]
public class System.Web.DynamicData.DynamicEntity : Control {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("DynamicEntity_Mode")]
public DataBoundControlMode Mode { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_UIHint")]
public string UIHint { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_ValidationGroup")]
public string ValidationGroup { get; public set; }
    private HttpContextBase Context { get; }
    internal DynamicEntity(HttpContextBase context);
    public DataBoundControlMode get_Mode();
    public void set_Mode(DataBoundControlMode value);
    public string get_UIHint();
    public void set_UIHint(string value);
    public string get_ValidationGroup();
    public void set_ValidationGroup(string value);
    private HttpContextBase get_Context();
    protected virtual void OnLoad(EventArgs e);
    protected virtual void Render(HtmlTextWriter writer);
}
[DesignerAttribute("System.Web.DynamicData.Design.DynamicFieldDesigner, System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public class System.Web.DynamicData.DynamicField : DataControlField {
    public string HeaderText { get; public set; }
    public string SortExpression { get; public set; }
    [CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("DynamicField_ValidateRequestMode")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ValidateRequestMode ValidateRequestMode { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("DynamicField_ReadOnly")]
public bool ReadOnly { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_DataField")]
public string DataField { get; public set; }
    protected MetaColumn Column { get; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_UIHint")]
public string UIHint { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_ValidationGroup")]
public string ValidationGroup { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_ConvertEmptyStringToNull")]
public bool ConvertEmptyStringToNull { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_ApplyFormatInEditMode")]
public bool ApplyFormatInEditMode { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_DataFormatString")]
public string DataFormatString { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_HtmlEncode")]
public bool HtmlEncode { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DynamicControlFieldCommon_NullDisplayText")]
public string NullDisplayText { get; public set; }
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public virtual string get_SortExpression();
    public virtual void set_SortExpression(string value);
    public ValidateRequestMode get_ValidateRequestMode();
    public void set_ValidateRequestMode(ValidateRequestMode value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual string get_DataField();
    public virtual void set_DataField(string value);
    protected MetaColumn get_Column();
    public virtual string get_UIHint();
    public virtual void set_UIHint(string value);
    public virtual string get_ValidationGroup();
    public virtual void set_ValidationGroup(string value);
    protected virtual DataControlField CreateField();
    public virtual void InitializeCell(DataControlFieldCell cell, DataControlCellType cellType, DataControlRowState rowState, int rowIndex);
    protected virtual DynamicControl CreateDynamicControl();
    protected virtual void ConfigureDynamicControl(DynamicControl control);
    public virtual void ExtractValuesFromCell(IOrderedDictionary dictionary, DataControlFieldCell cell, DataControlRowState rowState, bool includeReadOnly);
    protected virtual void CopyProperties(DataControlField newField);
    public sealed virtual string GetAttribute(string key);
    public sealed virtual void SetAttribute(string key, string value);
    public sealed virtual bool get_ConvertEmptyStringToNull();
    public void set_ConvertEmptyStringToNull(bool value);
    public sealed virtual bool get_ApplyFormatInEditMode();
    public void set_ApplyFormatInEditMode(bool value);
    public sealed virtual string get_DataFormatString();
    public void set_DataFormatString(string value);
    public sealed virtual bool get_HtmlEncode();
    public void set_HtmlEncode(bool value);
    public sealed virtual string get_NullDisplayText();
    public void set_NullDisplayText(string value);
}
public class System.Web.DynamicData.DynamicFilter : Control {
    protected internal MetaColumn Column { get; private set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DynamicFilter_DataField")]
public string DataField { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DynamicFilter_FilterUIHint")]
public string FilterUIHint { get; public set; }
    internal HttpContextBase Context { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Control FilterTemplate { get; }
    internal DynamicFilter(Func`3<MetaColumn, string, QueryableFilterUserControl> filterLoader);
    [CompilerGeneratedAttribute]
protected internal MetaColumn get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(MetaColumn value);
    public string get_DataField();
    public void set_DataField(string value);
    public string get_FilterUIHint();
    public void set_FilterUIHint(string value);
    internal static QueryableFilterUserControl CreateUserControl(MetaColumn column, string filterUiHint);
    internal HttpContextBase get_Context();
    internal void set_Context(HttpContextBase value);
    [CompilerGeneratedAttribute]
public void add_FilterChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FilterChanged(EventHandler value);
    public Control get_FilterTemplate();
    protected virtual void Render(HtmlTextWriter writer);
    internal void Initialize(IQueryableDataSource dataSource);
    private sealed virtual override void System.Web.DynamicData.IFilterExpressionProvider.Initialize(IQueryableDataSource dataSource);
    private sealed virtual override IQueryable System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(IQueryable source);
}
public class System.Web.DynamicData.DynamicFilterExpression : DataSourceExpression {
    public string ControlID { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ControlID();
    [CompilerGeneratedAttribute]
public void set_ControlID(string value);
    public virtual void SetContext(Control owner, HttpContext context, IQueryableDataSource dataSource);
    public virtual IQueryable GetQueryable(IQueryable source);
}
[DefaultPropertyAttribute("Action")]
[ToolboxBitmapAttribute("System.Web.DynamicData.DynamicHyperLink", "DynamicHyperLink.bmp")]
public class System.Web.DynamicData.DynamicHyperLink : HyperLink {
    [TypeConverterAttribute("System.Web.DynamicData.ActionConverter")]
[DefaultValueAttribute("")]
[CategoryAttribute("Navigation")]
[ResourceDescriptionAttribute("DynamicHyperLink_Action")]
public string Action { get; public set; }
    internal HttpContextBase Context { get; internal set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Navigation")]
[ResourceDescriptionAttribute("DynamicHyperLink_ContextTypeName")]
public string ContextTypeName { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Navigation")]
[ResourceDescriptionAttribute("DynamicHyperLink_DataField")]
public string DataField { get; public set; }
    internal object Page_DataItem { get; internal set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Navigation")]
[ResourceDescriptionAttribute("DynamicHyperLink_TableName")]
public string TableName { get; public set; }
    public string get_Action();
    public void set_Action(string value);
    internal HttpContextBase get_Context();
    internal void set_Context(HttpContextBase value);
    public string get_ContextTypeName();
    public void set_ContextTypeName(string value);
    public string get_DataField();
    public void set_DataField(string value);
    internal object get_Page_DataItem();
    internal void set_Page_DataItem(object value);
    public string get_TableName();
    public void set_TableName(string value);
    protected virtual void OnDataBinding(EventArgs e);
    protected virtual void OnPreRender(EventArgs e);
    internal virtual MetaTable GetTable();
    private sealed virtual override string System.Web.UI.IAttributeAccessor.GetAttribute(string key);
    private sealed virtual override void System.Web.UI.IAttributeAccessor.SetAttribute(string key, string value);
}
public class System.Web.DynamicData.DynamicQueryStringParameter : Parameter {
    public virtual IEnumerable`1<Parameter> GetWhereParameters(IDynamicDataSource dataSource);
    protected virtual object Evaluate(HttpContext context, Control control);
}
public class System.Web.DynamicData.DynamicRouteExpression : DataSourceExpression {
    [DefaultValueAttribute("")]
public string ColumnName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
public void set_ColumnName(string value);
    public virtual void SetContext(Control owner, HttpContext context, IQueryableDataSource dataSource);
    public virtual IQueryable GetQueryable(IQueryable source);
}
[ToolboxBitmapAttribute("System.Web.DynamicData.DynamicValidator", "DynamicValidator.bmp")]
public class System.Web.DynamicData.DynamicValidator : BaseValidator {
    [BrowsableAttribute("False")]
[ThemeableAttribute("False")]
public string ColumnName { get; }
    [BrowsableAttribute("False")]
[ThemeableAttribute("False")]
public MetaColumn Column { get; public set; }
    protected Exception ValidationException { get; protected set; }
    public string get_ColumnName();
    [CompilerGeneratedAttribute]
public MetaColumn get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(MetaColumn value);
    protected virtual Exception get_ValidationException();
    protected virtual void set_ValidationException(Exception value);
    protected virtual bool ControlPropertiesValid();
    protected virtual bool EvaluateIsValid();
    internal static bool TryConvertControlValue(string controlValue, Type columnType, Object& value);
    internal void SetIgnoredModelValidationAttributes(Dictionary`2<Type, bool> ignoredModelValidationAttributes);
    protected virtual void OnInit(EventArgs e);
    protected virtual void ValidateException(Exception exception);
}
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
public class System.Web.DynamicData.EntityTemplate : Control {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.INamingContainer")]
public ITemplate ItemTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public virtual ITemplate get_ItemTemplate();
    [CompilerGeneratedAttribute]
public virtual void set_ItemTemplate(ITemplate value);
}
public class System.Web.DynamicData.EntityTemplateFactory : object {
    internal string TemplateFolderVirtualPath { get; internal set; }
    internal EntityTemplateFactory(Func`2<string, EntityTemplateUserControl> templateInstantiator, VirtualPathProvider vpp);
    internal string get_TemplateFolderVirtualPath();
    internal void set_TemplateFolderVirtualPath(string value);
    public virtual EntityTemplateUserControl CreateEntityTemplate(MetaTable table, DataBoundControlMode mode, string uiHint);
    public virtual string GetEntityTemplateVirtualPath(MetaTable table, DataBoundControlMode mode, string uiHint);
    public virtual string BuildEntityTemplateVirtualPath(string templateName, DataBoundControlMode mode);
    internal void Initialize(MetaModel model);
}
public class System.Web.DynamicData.EntityTemplateUserControl : UserControl {
    public ContainerType ContainerType { get; }
    public string ValidationGroup { get; internal set; }
    public DataBoundControlMode Mode { get; internal set; }
    public MetaTable Table { get; internal set; }
    public virtual ContainerType get_ContainerType();
    [CompilerGeneratedAttribute]
public string get_ValidationGroup();
    [CompilerGeneratedAttribute]
internal void set_ValidationGroup(string value);
    [CompilerGeneratedAttribute]
public DataBoundControlMode get_Mode();
    [CompilerGeneratedAttribute]
internal void set_Mode(DataBoundControlMode value);
    [CompilerGeneratedAttribute]
public MetaTable get_Table();
    [CompilerGeneratedAttribute]
internal void set_Table(MetaTable value);
}
public class System.Web.DynamicData.FieldTemplateFactory : object {
    public string TemplateFolderVirtualPath { get; public set; }
    public MetaModel Model { get; private set; }
    internal FieldTemplateFactory(VirtualPathProvider vpp);
    public string get_TemplateFolderVirtualPath();
    public void set_TemplateFolderVirtualPath(string value);
    public MetaModel get_Model();
    private void set_Model(MetaModel value);
    internal string GetFieldTemplateVirtualPathWithCaching(MetaColumn column, DataBoundControlMode mode, string uiHint);
    public virtual string GetFieldTemplateVirtualPath(MetaColumn column, DataBoundControlMode mode, string uiHint);
    public virtual DataBoundControlMode PreprocessMode(MetaColumn column, DataBoundControlMode mode);
    public virtual string BuildVirtualPath(string templateName, MetaColumn column, DataBoundControlMode mode);
    public virtual void Initialize(MetaModel model);
    public virtual IFieldTemplate CreateFieldTemplate(MetaColumn column, DataBoundControlMode mode, string uiHint);
}
public class System.Web.DynamicData.FieldTemplateUserControl : UserControl {
    [BrowsableAttribute("False")]
public IFieldTemplateHost Host { get; private set; }
    [BrowsableAttribute("False")]
public IFieldFormattingOptions FormattingOptions { get; private set; }
    [BrowsableAttribute("False")]
public MetaColumn Column { get; }
    [BrowsableAttribute("False")]
public ContainerType ContainerType { get; }
    [BrowsableAttribute("False")]
public MetaTable Table { get; }
    [BrowsableAttribute("False")]
public MetaForeignKeyColumn ForeignKeyColumn { get; }
    [BrowsableAttribute("False")]
public MetaChildrenColumn ChildrenColumn { get; }
    [BrowsableAttribute("False")]
public DataBoundControlMode Mode { get; }
    [BrowsableAttribute("False")]
public AttributeCollection MetadataAttributes { get; }
    [BrowsableAttribute("False")]
public Control DataControl { get; }
    [BrowsableAttribute("False")]
public object Row { get; internal set; }
    [BrowsableAttribute("False")]
public object FieldValue { get; public set; }
    [BrowsableAttribute("False")]
public string FieldValueString { get; }
    [BrowsableAttribute("False")]
public string FieldValueEditString { get; }
    protected string ForeignKeyPath { get; }
    internal DefaultValueMapping DefaultValueMapping { get; }
    protected string ChildrenPath { get; }
    internal FieldTemplateUserControl(DefaultValueMapping defaultValueMapping);
    private static FieldTemplateUserControl();
    [CompilerGeneratedAttribute]
public IFieldTemplateHost get_Host();
    [CompilerGeneratedAttribute]
private void set_Host(IFieldTemplateHost value);
    [CompilerGeneratedAttribute]
public IFieldFormattingOptions get_FormattingOptions();
    [CompilerGeneratedAttribute]
private void set_FormattingOptions(IFieldFormattingOptions value);
    public MetaColumn get_Column();
    public virtual ContainerType get_ContainerType();
    public MetaTable get_Table();
    public MetaForeignKeyColumn get_ForeignKeyColumn();
    public MetaChildrenColumn get_ChildrenColumn();
    public DataBoundControlMode get_Mode();
    public AttributeCollection get_MetadataAttributes();
    public virtual Control get_DataControl();
    public virtual object get_Row();
    internal virtual void set_Row(object value);
    public virtual object get_FieldValue();
    public virtual void set_FieldValue(object value);
    protected virtual object GetColumnValue(MetaColumn column);
    public virtual string get_FieldValueString();
    public virtual string get_FieldValueEditString();
    protected string get_ForeignKeyPath();
    internal DefaultValueMapping get_DefaultValueMapping();
    protected string BuildForeignKeyPath(string path);
    protected string get_ChildrenPath();
    protected string BuildChildrenPath(string path);
    protected FieldTemplateUserControl FindOtherFieldTemplate(string columnName);
    protected void PopulateListControl(ListControl listControl);
    protected string GetSelectedValueString();
    protected virtual void ExtractForeignKey(IDictionary dictionary, string selectedValue);
    public virtual string FormatFieldValue(object fieldValue);
    protected virtual object ConvertEditedValue(string value);
    protected virtual void SetUpValidator(BaseValidator validator);
    protected virtual void SetUpValidator(BaseValidator validator, MetaColumn column);
    protected void IgnoreModelValidationAttribute(Type attributeType);
    protected virtual void ExtractValues(IOrderedDictionary dictionary);
    private sealed virtual override void System.Web.UI.IBindableControl.ExtractValues(IOrderedDictionary dictionary);
    private sealed virtual override void System.Web.DynamicData.IFieldTemplate.SetHost(IFieldTemplateHost host);
}
internal class System.Web.DynamicData.FileChangedCallback : MulticastDelegate {
    public FileChangedCallback(object object, IntPtr method);
    public virtual void Invoke(string path);
    public virtual IAsyncResult BeginInvoke(string path, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Web.DynamicData.FileChangeNotifier : object {
    private static VirtualPathProvider VirtualPathProvider { get; internal set; }
    private static VirtualPathProvider get_VirtualPathProvider();
    internal static void set_VirtualPathProvider(VirtualPathProvider value);
    internal static void Register(string virtualPath, FileChangedCallback onFileChanged);
}
public class System.Web.DynamicData.FilterFactory : object {
    internal string FilterFolderVirtualPath { get; internal set; }
    internal FilterFactory(VirtualPathProvider vpp);
    internal string get_FilterFolderVirtualPath();
    internal void set_FilterFolderVirtualPath(string value);
    internal void Initialize(MetaModel model);
    public virtual QueryableFilterUserControl CreateFilterControl(MetaColumn column, string filterUIHint);
    internal string GetFilterVirtualPathWithCaching(MetaColumn column, string filterUIHint);
    public virtual string GetFilterVirtualPath(MetaColumn column, string filterUIHint);
}
[ToolboxItemAttribute("False")]
[ParseChildrenAttribute("True")]
public class System.Web.DynamicData.FilterRepeater : Repeater {
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
public string ContextTypeName { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("DynamicFilter")]
[ThemeableAttribute("False")]
[IDReferencePropertyAttribute("System.Web.DynamicData.FilterUserControlBase")]
[ResourceDescriptionAttribute("DynamicFilterRepeater_DynamicFilterContainerId")]
public string DynamicFilterContainerId { get; public set; }
    public MetaTable Table { get; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[ResourceDescriptionAttribute("FilterRepeater_TableName")]
public string TableName { get; public set; }
    public bool Visible { get; public set; }
    public string get_ContextTypeName();
    public void set_ContextTypeName(string value);
    public string get_DynamicFilterContainerId();
    public void set_DynamicFilterContainerId(string value);
    public MetaTable get_Table();
    public string get_TableName();
    public void set_TableName(string value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual void DataBind();
    protected internal virtual IEnumerable`1<MetaColumn> GetFilteredColumns();
    internal IEnumerable`1<FilterUserControlBase> GetFilterControls();
    internal static bool IsFilterableColumn(MetaColumn column);
    protected virtual void OnFilterItemCreated(RepeaterItem item);
    protected virtual void OnInit(EventArgs e);
    protected virtual void OnItemCreated(RepeaterItemEventArgs e);
    public virtual IEnumerable`1<Parameter> GetWhereParameters(IDynamicDataSource dataSource);
}
public class System.Web.DynamicData.FilterUserControlBase : UserControl {
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
public string TableName { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
public string DataField { get; public set; }
    [CategoryAttribute("Data")]
[DefaultValueAttribute("")]
public string ContextTypeName { get; public set; }
    public string SelectedValue { get; }
    public DataKey SelectedDataKey { get; }
    public string InitialValue { get; }
    public MetaColumn Column { get; }
    internal bool IsPostBackInternal { get; internal set; }
    internal RouteValueDictionary RouteValues { get; internal set; }
    private MetaTable System.Web.DynamicData.IControlParameterTarget.Table { get; }
    private MetaColumn System.Web.DynamicData.IControlParameterTarget.FilteredColumn { get; }
    [CompilerGeneratedAttribute]
public string get_TableName();
    [CompilerGeneratedAttribute]
public void set_TableName(string value);
    [CompilerGeneratedAttribute]
public string get_DataField();
    [CompilerGeneratedAttribute]
public void set_DataField(string value);
    [CompilerGeneratedAttribute]
public string get_ContextTypeName();
    [CompilerGeneratedAttribute]
public void set_ContextTypeName(string value);
    public virtual string get_SelectedValue();
    public virtual DataKey get_SelectedDataKey();
    public string get_InitialValue();
    public void PopulateListControl(ListControl listControl);
    public MetaColumn get_Column();
    internal bool get_IsPostBackInternal();
    internal void set_IsPostBackInternal(bool value);
    internal RouteValueDictionary get_RouteValues();
    internal void set_RouteValues(RouteValueDictionary value);
    private sealed virtual override MetaTable System.Web.DynamicData.IControlParameterTarget.get_Table();
    private sealed virtual override MetaColumn System.Web.DynamicData.IControlParameterTarget.get_FilteredColumn();
    private sealed virtual override string System.Web.DynamicData.IControlParameterTarget.GetPropertyNameExpression(string columnName);
}
public interface System.Web.DynamicData.IControlParameterTarget {
    public MetaTable Table { get; }
    public MetaColumn FilteredColumn { get; }
    public abstract virtual MetaTable get_Table();
    public abstract virtual MetaColumn get_FilteredColumn();
    public abstract virtual string GetPropertyNameExpression(string columnName);
}
public interface System.Web.DynamicData.IFieldFormattingOptions {
    public bool ApplyFormatInEditMode { get; }
    public string DataFormatString { get; }
    public bool ConvertEmptyStringToNull { get; }
    public string NullDisplayText { get; }
    public bool HtmlEncode { get; }
    public abstract virtual bool get_ApplyFormatInEditMode();
    public abstract virtual string get_DataFormatString();
    public abstract virtual bool get_ConvertEmptyStringToNull();
    public abstract virtual string get_NullDisplayText();
    public abstract virtual bool get_HtmlEncode();
}
public interface System.Web.DynamicData.IFieldTemplate {
    public abstract virtual void SetHost(IFieldTemplateHost host);
}
public interface System.Web.DynamicData.IFieldTemplateFactory {
    public abstract virtual void Initialize(MetaModel model);
    public abstract virtual IFieldTemplate CreateFieldTemplate(MetaColumn column, DataBoundControlMode mode, string uiHint);
}
public interface System.Web.DynamicData.IFieldTemplateHost {
    public MetaColumn Column { get; }
    public DataBoundControlMode Mode { get; }
    public IFieldFormattingOptions FormattingOptions { get; }
    public string ValidationGroup { get; }
    public abstract virtual MetaColumn get_Column();
    public abstract virtual DataBoundControlMode get_Mode();
    public abstract virtual IFieldFormattingOptions get_FormattingOptions();
    public abstract virtual string get_ValidationGroup();
}
public interface System.Web.DynamicData.IFilterExpressionProvider {
    public abstract virtual IQueryable GetQueryable(IQueryable source);
    public abstract virtual void Initialize(IQueryableDataSource dataSource);
}
internal interface System.Web.DynamicData.IMetaChildrenColumn {
    public IMetaTable ChildTable { get; }
    public IMetaColumn ColumnInOtherTable { get; }
    public bool IsManyToMany { get; }
    public abstract virtual IMetaTable get_ChildTable();
    public abstract virtual IMetaColumn get_ColumnInOtherTable();
    public abstract virtual string GetChildrenListPath(object row);
    public abstract virtual string GetChildrenPath(string action, object row);
    public abstract virtual string GetChildrenPath(string action, object row, string path);
    public abstract virtual bool get_IsManyToMany();
}
internal interface System.Web.DynamicData.IMetaColumn {
    public bool ApplyFormatInEditMode { get; }
    public bool AllowInitialValue { get; }
    public AttributeCollection Attributes { get; }
    public Type ColumnType { get; }
    public bool ConvertEmptyStringToNull { get; }
    public string DataFormatString { get; }
    public DataTypeAttribute DataTypeAttribute { get; }
    public object DefaultValue { get; }
    public string Description { get; }
    public string DisplayName { get; }
    public PropertyInfo EntityTypeProperty { get; }
    public bool HtmlEncode { get; }
    public bool IsBinaryData { get; }
    public bool IsCustomProperty { get; }
    public bool IsFloatingPoint { get; }
    public bool IsForeignKeyComponent { get; }
    public bool IsGenerated { get; }
    public bool IsInteger { get; }
    public bool IsLongString { get; }
    public bool IsPrimaryKey { get; }
    public bool IsReadOnly { get; }
    public bool IsRequired { get; }
    public bool IsString { get; }
    public int MaxLength { get; }
    public IMetaModel Model { get; }
    public string Name { get; }
    public string NullDisplayText { get; }
    public string Prompt { get; }
    public ColumnProvider Provider { get; }
    public string RequiredErrorMessage { get; }
    public bool Scaffold { get; public set; }
    public string ShortDisplayName { get; }
    public string SortExpression { get; }
    public IMetaTable Table { get; }
    public TypeCode TypeCode { get; }
    public string UIHint { get; }
    public string FilterUIHint { get; }
    public abstract virtual bool get_ApplyFormatInEditMode();
    public abstract virtual bool get_AllowInitialValue();
    public abstract virtual AttributeCollection get_Attributes();
    public abstract virtual Type get_ColumnType();
    public abstract virtual bool get_ConvertEmptyStringToNull();
    public abstract virtual string get_DataFormatString();
    public abstract virtual DataTypeAttribute get_DataTypeAttribute();
    public abstract virtual object get_DefaultValue();
    public abstract virtual string get_Description();
    public abstract virtual string get_DisplayName();
    public abstract virtual PropertyInfo get_EntityTypeProperty();
    public abstract virtual bool get_HtmlEncode();
    public abstract virtual bool get_IsBinaryData();
    public abstract virtual bool get_IsCustomProperty();
    public abstract virtual bool get_IsFloatingPoint();
    public abstract virtual bool get_IsForeignKeyComponent();
    public abstract virtual bool get_IsGenerated();
    public abstract virtual bool get_IsInteger();
    public abstract virtual bool get_IsLongString();
    public abstract virtual bool get_IsPrimaryKey();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual bool get_IsRequired();
    public abstract virtual bool get_IsString();
    public abstract virtual int get_MaxLength();
    public abstract virtual IMetaModel get_Model();
    public abstract virtual string get_Name();
    public abstract virtual string get_NullDisplayText();
    public abstract virtual string get_Prompt();
    public abstract virtual ColumnProvider get_Provider();
    public abstract virtual string get_RequiredErrorMessage();
    public abstract virtual void ResetMetadata();
    public abstract virtual bool get_Scaffold();
    public abstract virtual void set_Scaffold(bool value);
    public abstract virtual string get_ShortDisplayName();
    public abstract virtual string get_SortExpression();
    public abstract virtual IMetaTable get_Table();
    public abstract virtual TypeCode get_TypeCode();
    public abstract virtual string get_UIHint();
    public abstract virtual string get_FilterUIHint();
}
internal interface System.Web.DynamicData.IMetaForeignKeyColumn {
    public ReadOnlyCollection`1<string> ForeignKeyNames { get; }
    public bool IsPrimaryKeyInThisTable { get; }
    public IMetaTable ParentTable { get; }
    public abstract virtual void ExtractForeignKey(IDictionary dictionary, string value);
    public abstract virtual ReadOnlyCollection`1<string> get_ForeignKeyNames();
    public abstract virtual string GetForeignKeyDetailsPath(object row);
    public abstract virtual string GetForeignKeyPath(string action, object row);
    public abstract virtual string GetForeignKeyPath(string action, object row, string path);
    public abstract virtual string GetForeignKeyString(object row);
    public abstract virtual IList`1<object> GetForeignKeyValues(object row);
    public abstract virtual bool get_IsPrimaryKeyInThisTable();
    public abstract virtual IMetaTable get_ParentTable();
}
internal interface System.Web.DynamicData.IMetaModel {
    public string DynamicDataFolderVirtualPath { get; public set; }
    public IFieldTemplateFactory FieldTemplateFactory { get; public set; }
    public ReadOnlyCollection`1<IMetaTable> Tables { get; }
    public List`1<IMetaTable> VisibleTables { get; }
    public abstract virtual string get_DynamicDataFolderVirtualPath();
    public abstract virtual void set_DynamicDataFolderVirtualPath(string value);
    public abstract virtual IFieldTemplateFactory get_FieldTemplateFactory();
    public abstract virtual void set_FieldTemplateFactory(IFieldTemplateFactory value);
    public abstract virtual string GetActionPath(string tableName, string action, object row);
    public abstract virtual IMetaTable GetTable(string tableName, Type contextType);
    public abstract virtual IMetaTable GetTable(string uniqueTableName);
    public abstract virtual IMetaTable GetTable(Type entityType);
    public abstract virtual void RegisterContext(Func`1<object> contextFactory);
    public abstract virtual void RegisterContext(Func`1<object> contextFactory, ContextConfiguration configuration);
    public abstract virtual void RegisterContext(Type contextType);
    public abstract virtual void RegisterContext(Type contextType, ContextConfiguration configuration);
    public abstract virtual void RegisterContext(DataModelProvider dataModelProvider);
    public abstract virtual void RegisterContext(DataModelProvider dataModelProvider, ContextConfiguration configuration);
    public abstract virtual ReadOnlyCollection`1<IMetaTable> get_Tables();
    public abstract virtual bool TryGetTable(string uniqueTableName, IMetaTable& table);
    public abstract virtual bool TryGetTable(Type entityType, IMetaTable& table);
    public abstract virtual List`1<IMetaTable> get_VisibleTables();
}
internal interface System.Web.DynamicData.IMetaTable {
    public AttributeCollection Attributes { get; }
    public ReadOnlyCollection`1<IMetaColumn> Columns { get; }
    public string DataContextPropertyName { get; }
    public Type DataContextType { get; }
    public IMetaColumn DisplayColumn { get; }
    public string DisplayName { get; }
    public Type EntityType { get; }
    public String[] PrimaryKeyNames { get; }
    public string ForeignKeyColumnsNames { get; }
    public bool HasPrimaryKey { get; }
    public bool IsReadOnly { get; }
    public string ListActionPath { get; }
    public IMetaModel Model { get; }
    public string Name { get; }
    public ReadOnlyCollection`1<IMetaColumn> PrimaryKeyColumns { get; }
    public TableProvider Provider { get; }
    public Type RootEntityType { get; }
    public bool Scaffold { get; }
    public IMetaColumn SortColumn { get; }
    public bool SortDescending { get; }
    public abstract virtual AttributeCollection get_Attributes();
    public abstract virtual ReadOnlyCollection`1<IMetaColumn> get_Columns();
    public abstract virtual bool CanDelete(IPrincipal principal);
    public abstract virtual bool CanInsert(IPrincipal principal);
    public abstract virtual bool CanRead(IPrincipal principal);
    public abstract virtual bool CanUpdate(IPrincipal principal);
    public abstract virtual object CreateContext();
    public abstract virtual string get_DataContextPropertyName();
    public abstract virtual Type get_DataContextType();
    public abstract virtual IMetaColumn get_DisplayColumn();
    public abstract virtual string get_DisplayName();
    public abstract virtual Type get_EntityType();
    public abstract virtual String[] get_PrimaryKeyNames();
    public abstract virtual string get_ForeignKeyColumnsNames();
    public abstract virtual string GetActionPath(string action);
    public abstract virtual string GetActionPath(string action, IList`1<object> primaryKeyValues);
    public abstract virtual string GetActionPath(string action, IList`1<object> primaryKeyValues, string path);
    public abstract virtual string GetActionPath(string action, object row);
    public abstract virtual string GetActionPath(string action, object row, string path);
    public abstract virtual string GetActionPath(string action, RouteValueDictionary routeValues);
    public abstract virtual IMetaColumn GetColumn(string columnName);
    public abstract virtual DataKey GetDataKeyFromRoute();
    public abstract virtual string GetDisplayString(object row);
    public abstract virtual IEnumerable`1<IMetaColumn> GetFilteredColumns();
    public abstract virtual IDictionary`2<string, object> GetPrimaryKeyDictionary(object row);
    public abstract virtual string GetPrimaryKeyString(IList`1<object> primaryKeyValues);
    public abstract virtual string GetPrimaryKeyString(object row);
    public abstract virtual IList`1<object> GetPrimaryKeyValues(object row);
    public abstract virtual IQueryable GetQuery();
    public abstract virtual IQueryable GetQuery(object context);
    public abstract virtual IEnumerable`1<IMetaColumn> GetScaffoldColumns(DataBoundControlMode mode, ContainerType containerType);
    public abstract virtual bool get_HasPrimaryKey();
    public abstract virtual bool get_IsReadOnly();
    public abstract virtual string get_ListActionPath();
    public abstract virtual IMetaModel get_Model();
    public abstract virtual string get_Name();
    public abstract virtual ReadOnlyCollection`1<IMetaColumn> get_PrimaryKeyColumns();
    public abstract virtual TableProvider get_Provider();
    public abstract virtual Type get_RootEntityType();
    public abstract virtual bool get_Scaffold();
    public abstract virtual IMetaColumn get_SortColumn();
    public abstract virtual bool get_SortDescending();
    public abstract virtual bool TryGetColumn(string columnName, IMetaColumn& column);
}
public interface System.Web.DynamicData.IWhereParametersProvider {
    public abstract virtual IEnumerable`1<Parameter> GetWhereParameters(IDynamicDataSource dataSource);
}
public class System.Web.DynamicData.MetaChildrenColumn : MetaColumn {
    public bool IsManyToMany { get; }
    public MetaTable ChildTable { get; private set; }
    public MetaColumn ColumnInOtherTable { get; private set; }
    internal string SortExpressionInternal { get; }
    internal bool ScaffoldNoCache { get; }
    private IMetaTable System.Web.DynamicData.IMetaChildrenColumn.ChildTable { get; }
    private IMetaColumn System.Web.DynamicData.IMetaChildrenColumn.ColumnInOtherTable { get; }
    public MetaChildrenColumn(MetaTable table, ColumnProvider entityMember);
    protected internal virtual void Initialize();
    public sealed virtual bool get_IsManyToMany();
    [CompilerGeneratedAttribute]
public MetaTable get_ChildTable();
    [CompilerGeneratedAttribute]
private void set_ChildTable(MetaTable value);
    [CompilerGeneratedAttribute]
public MetaColumn get_ColumnInOtherTable();
    [CompilerGeneratedAttribute]
private void set_ColumnInOtherTable(MetaColumn value);
    internal virtual string get_SortExpressionInternal();
    internal virtual bool get_ScaffoldNoCache();
    public sealed virtual string GetChildrenListPath(object row);
    public sealed virtual string GetChildrenPath(string action, object row);
    public sealed virtual string GetChildrenPath(string action, object row, string path);
    private sealed virtual override IMetaTable System.Web.DynamicData.IMetaChildrenColumn.get_ChildTable();
    private sealed virtual override IMetaColumn System.Web.DynamicData.IMetaChildrenColumn.get_ColumnInOtherTable();
}
public class System.Web.DynamicData.MetaColumn : object {
    public AttributeCollection Attributes { get; }
    public Type ColumnType { get; }
    public DataTypeAttribute DataTypeAttribute { get; }
    public object DefaultValue { get; }
    public string Description { get; }
    public string DisplayName { get; }
    public PropertyInfo EntityTypeProperty { get; }
    public string FilterUIHint { get; }
    public bool IsBinaryData { get; }
    public bool IsCustomProperty { get; }
    public bool IsFloatingPoint { get; }
    public bool IsForeignKeyComponent { get; }
    public bool IsGenerated { get; }
    public bool IsInteger { get; }
    public bool IsLongString { get; }
    public bool IsPrimaryKey { get; }
    public bool IsReadOnly { get; }
    public bool AllowInitialValue { get; }
    public bool IsRequired { get; }
    public bool IsString { get; }
    public int MaxLength { get; }
    public MetaModel Model { get; }
    public string Name { get; }
    public string Prompt { get; }
    public ColumnProvider Provider { get; private set; }
    public string RequiredErrorMessage { get; }
    public bool Scaffold { get; public set; }
    internal bool ScaffoldNoCache { get; }
    public string ShortDisplayName { get; }
    public string SortExpression { get; }
    internal string SortExpressionInternal { get; }
    public MetaTable Table { get; private set; }
    public TypeCode TypeCode { get; }
    public string UIHint { get; }
    public bool ApplyFormatInEditMode { get; }
    public bool ConvertEmptyStringToNull { get; }
    public string DataFormatString { get; }
    public bool HtmlEncode { get; }
    public string NullDisplayText { get; }
    internal IMetaColumnMetadata Metadata { get; internal set; }
    private string System.Web.DynamicData.IMetaColumn.Description { get; }
    private string System.Web.DynamicData.IMetaColumn.DisplayName { get; }
    private string System.Web.DynamicData.IMetaColumn.Prompt { get; }
    private string System.Web.DynamicData.IMetaColumn.ShortDisplayName { get; }
    private IMetaTable System.Web.DynamicData.IMetaColumn.Table { get; }
    private IMetaModel System.Web.DynamicData.IMetaColumn.Model { get; }
    public MetaColumn(MetaTable table, ColumnProvider columnProvider);
    private static MetaColumn();
    public sealed virtual AttributeCollection get_Attributes();
    public sealed virtual Type get_ColumnType();
    public sealed virtual DataTypeAttribute get_DataTypeAttribute();
    public sealed virtual object get_DefaultValue();
    public virtual string get_Description();
    public virtual string get_DisplayName();
    public sealed virtual PropertyInfo get_EntityTypeProperty();
    public sealed virtual string get_FilterUIHint();
    public sealed virtual bool get_IsBinaryData();
    public sealed virtual bool get_IsCustomProperty();
    public sealed virtual bool get_IsFloatingPoint();
    public sealed virtual bool get_IsForeignKeyComponent();
    public sealed virtual bool get_IsGenerated();
    public sealed virtual bool get_IsInteger();
    public sealed virtual bool get_IsLongString();
    public sealed virtual bool get_IsPrimaryKey();
    public virtual bool get_IsReadOnly();
    public sealed virtual bool get_AllowInitialValue();
    public sealed virtual bool get_IsRequired();
    public sealed virtual bool get_IsString();
    public sealed virtual int get_MaxLength();
    public MetaModel get_Model();
    public sealed virtual string get_Name();
    public virtual string get_Prompt();
    [CompilerGeneratedAttribute]
public sealed virtual ColumnProvider get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(ColumnProvider value);
    public sealed virtual string get_RequiredErrorMessage();
    public virtual bool get_Scaffold();
    public virtual void set_Scaffold(bool value);
    internal virtual bool get_ScaffoldNoCache();
    public virtual string get_ShortDisplayName();
    public sealed virtual string get_SortExpression();
    internal virtual string get_SortExpressionInternal();
    [CompilerGeneratedAttribute]
public MetaTable get_Table();
    [CompilerGeneratedAttribute]
private void set_Table(MetaTable value);
    public sealed virtual TypeCode get_TypeCode();
    public virtual string get_UIHint();
    public sealed virtual bool get_ApplyFormatInEditMode();
    public sealed virtual bool get_ConvertEmptyStringToNull();
    public sealed virtual string get_DataFormatString();
    public sealed virtual bool get_HtmlEncode();
    public sealed virtual string get_NullDisplayText();
    protected virtual AttributeCollection BuildAttributeCollection();
    protected internal virtual void Initialize();
    public sealed virtual void ResetMetadata();
    public virtual string ToString();
    internal IMetaColumnMetadata get_Metadata();
    internal void set_Metadata(IMetaColumnMetadata value);
    private sealed virtual override string System.Web.DynamicData.IMetaColumn.get_Description();
    private sealed virtual override string System.Web.DynamicData.IMetaColumn.get_DisplayName();
    private sealed virtual override string System.Web.DynamicData.IMetaColumn.get_Prompt();
    private sealed virtual override string System.Web.DynamicData.IMetaColumn.get_ShortDisplayName();
    private sealed virtual override IMetaTable System.Web.DynamicData.IMetaColumn.get_Table();
    private sealed virtual override IMetaModel System.Web.DynamicData.IMetaColumn.get_Model();
}
public class System.Web.DynamicData.MetaForeignKeyColumn : MetaColumn {
    public MetaTable ParentTable { get; internal set; }
    public bool IsPrimaryKeyInThisTable { get; }
    internal string SortExpressionInternal { get; }
    internal bool ScaffoldNoCache { get; }
    public ReadOnlyCollection`1<string> ForeignKeyNames { get; }
    private IMetaTable System.Web.DynamicData.IMetaForeignKeyColumn.ParentTable { get; }
    public MetaForeignKeyColumn(MetaTable table, ColumnProvider entityMember);
    protected internal virtual void Initialize();
    internal void CreateForeignKeyFilterMapping(IList`1<string> foreignKeyNames, IList`1<string> primaryKeyNames, Func`2<string, bool> propertyExists);
    [CompilerGeneratedAttribute]
public MetaTable get_ParentTable();
    [CompilerGeneratedAttribute]
internal void set_ParentTable(MetaTable value);
    public sealed virtual bool get_IsPrimaryKeyInThisTable();
    public sealed virtual void ExtractForeignKey(IDictionary dictionary, string value);
    public sealed virtual IList`1<object> GetForeignKeyValues(object row);
    public sealed virtual string GetForeignKeyString(object row);
    internal virtual string get_SortExpressionInternal();
    internal virtual bool get_ScaffoldNoCache();
    public string GetFilterExpression(string foreignKeyName);
    public sealed virtual string GetForeignKeyDetailsPath(object row);
    public sealed virtual string GetForeignKeyPath(string action, object row);
    public sealed virtual string GetForeignKeyPath(string action, object row, string path);
    internal MetaTable GetForeignKeyMetaTable(object row);
    public sealed virtual ReadOnlyCollection`1<string> get_ForeignKeyNames();
    private sealed virtual override IMetaTable System.Web.DynamicData.IMetaForeignKeyColumn.get_ParentTable();
}
public class System.Web.DynamicData.MetaModel : object {
    internal int RegisteredDataModelsCount { get; }
    internal HttpContextBase Context { get; internal set; }
    public string DynamicDataFolderVirtualPath { get; public set; }
    public static MetaModel Default { get; internal set; }
    public ReadOnlyCollection`1<MetaTable> Tables { get; }
    public List`1<MetaTable> VisibleTables { get; }
    public IFieldTemplateFactory FieldTemplateFactory { get; public set; }
    public EntityTemplateFactory EntityTemplateFactory { get; public set; }
    public FilterFactory FilterFactory { get; public set; }
    private ReadOnlyCollection`1<IMetaTable> System.Web.DynamicData.IMetaModel.Tables { get; }
    private List`1<IMetaTable> System.Web.DynamicData.IMetaModel.VisibleTables { get; }
    public MetaModel(bool registerGlobally);
    internal MetaModel(SchemaCreator schemaCreator, bool registerGlobally);
    private static MetaModel();
    internal virtual int get_RegisteredDataModelsCount();
    internal HttpContextBase get_Context();
    internal void set_Context(HttpContextBase value);
    public sealed virtual string get_DynamicDataFolderVirtualPath();
    public sealed virtual void set_DynamicDataFolderVirtualPath(string value);
    public static MetaModel get_Default();
    internal static void set_Default(MetaModel value);
    public static MetaModel GetModel(Type contextType);
    public sealed virtual void RegisterContext(Type contextType);
    public sealed virtual void RegisterContext(Type contextType, ContextConfiguration configuration);
    public sealed virtual void RegisterContext(Func`1<object> contextFactory);
    public sealed virtual void RegisterContext(Func`1<object> contextFactory, ContextConfiguration configuration);
    public sealed virtual void RegisterContext(DataModelProvider dataModelProvider);
    public virtual void RegisterContext(DataModelProvider dataModelProvider, ContextConfiguration configuration);
    internal static void CheckForRegistrationException();
    public static void ResetRegistrationException();
    internal static void ClearSimpleCache();
    internal static MetaModel CreateSimpleModel(Type entityType);
    internal static MetaModel CreateSimpleModel(ICustomTypeDescriptor descriptor);
    protected virtual MetaTable CreateTable(TableProvider provider);
    public ReadOnlyCollection`1<MetaTable> get_Tables();
    public List`1<MetaTable> get_VisibleTables();
    public MetaTable GetTable(Type entityType);
    public bool TryGetTable(Type entityType, MetaTable& table);
    public MetaTable GetTable(string uniqueTableName);
    public bool TryGetTable(string uniqueTableName, MetaTable& table);
    public MetaTable GetTable(string tableName, Type contextType);
    public sealed virtual IFieldTemplateFactory get_FieldTemplateFactory();
    public sealed virtual void set_FieldTemplateFactory(IFieldTemplateFactory value);
    public EntityTemplateFactory get_EntityTemplateFactory();
    public void set_EntityTemplateFactory(EntityTemplateFactory value);
    public FilterFactory get_FilterFactory();
    public void set_FilterFactory(FilterFactory value);
    public sealed virtual string GetActionPath(string tableName, string action, object row);
    private sealed virtual override ReadOnlyCollection`1<IMetaTable> System.Web.DynamicData.IMetaModel.get_Tables();
    private sealed virtual override bool System.Web.DynamicData.IMetaModel.TryGetTable(string uniqueTableName, IMetaTable& table);
    private sealed virtual override bool System.Web.DynamicData.IMetaModel.TryGetTable(Type entityType, IMetaTable& table);
    private sealed virtual override List`1<IMetaTable> System.Web.DynamicData.IMetaModel.get_VisibleTables();
    private sealed virtual override IMetaTable System.Web.DynamicData.IMetaModel.GetTable(string tableName, Type contextType);
    private sealed virtual override IMetaTable System.Web.DynamicData.IMetaModel.GetTable(string uniqueTableName);
    private sealed virtual override IMetaTable System.Web.DynamicData.IMetaModel.GetTable(Type entityType);
}
public class System.Web.DynamicData.MetaTable : object {
    public AttributeCollection Attributes { get; }
    public ReadOnlyCollection`1<MetaColumn> Columns { get; internal set; }
    private HttpContextBase Context { get; internal set; }
    public string DataContextPropertyName { get; }
    public Type DataContextType { get; }
    public MetaColumn DisplayColumn { get; }
    public string DisplayName { get; }
    public Type EntityType { get; }
    public string ForeignKeyColumnsNames { get; }
    public bool HasPrimaryKey { get; }
    public bool IsReadOnly { get; }
    public string ListActionPath { get; internal set; }
    public MetaModel Model { get; private set; }
    public string Name { get; private set; }
    public ReadOnlyCollection`1<MetaColumn> PrimaryKeyColumns { get; }
    internal String[] PrimaryKeyNames { get; }
    public TableProvider Provider { get; }
    public Type RootEntityType { get; }
    public bool Scaffold { get; }
    public MetaColumn SortColumn { get; }
    public bool SortDescending { get; }
    private String[] System.Web.DynamicData.IMetaTable.PrimaryKeyNames { get; }
    private ReadOnlyCollection`1<IMetaColumn> System.Web.DynamicData.IMetaTable.Columns { get; }
    private IMetaModel System.Web.DynamicData.IMetaTable.Model { get; }
    private IMetaColumn System.Web.DynamicData.IMetaTable.DisplayColumn { get; }
    private ReadOnlyCollection`1<IMetaColumn> System.Web.DynamicData.IMetaTable.PrimaryKeyColumns { get; }
    private IMetaColumn System.Web.DynamicData.IMetaTable.SortColumn { get; }
    public MetaTable(MetaModel metaModel, TableProvider tableProvider);
    public sealed virtual AttributeCollection get_Attributes();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<MetaColumn> get_Columns();
    [CompilerGeneratedAttribute]
internal void set_Columns(ReadOnlyCollection`1<MetaColumn> value);
    private HttpContextBase get_Context();
    internal void set_Context(HttpContextBase value);
    public sealed virtual string get_DataContextPropertyName();
    public sealed virtual Type get_DataContextType();
    public virtual MetaColumn get_DisplayColumn();
    public virtual string get_DisplayName();
    public sealed virtual Type get_EntityType();
    public sealed virtual string get_ForeignKeyColumnsNames();
    public sealed virtual bool get_HasPrimaryKey();
    public virtual bool get_IsReadOnly();
    public sealed virtual string get_ListActionPath();
    internal void set_ListActionPath(string value);
    [CompilerGeneratedAttribute]
public MetaModel get_Model();
    [CompilerGeneratedAttribute]
private void set_Model(MetaModel value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public ReadOnlyCollection`1<MetaColumn> get_PrimaryKeyColumns();
    internal String[] get_PrimaryKeyNames();
    public sealed virtual TableProvider get_Provider();
    public sealed virtual Type get_RootEntityType();
    public virtual bool get_Scaffold();
    public virtual MetaColumn get_SortColumn();
    public virtual bool get_SortDescending();
    protected virtual AttributeCollection BuildAttributeCollection();
    public virtual bool CanDelete(IPrincipal principal);
    public virtual bool CanInsert(IPrincipal principal);
    public virtual bool CanRead(IPrincipal principal);
    public virtual bool CanUpdate(IPrincipal principal);
    public static MetaTable CreateTable(Type entityType);
    public static MetaTable CreateTable(ICustomTypeDescriptor typeDescriptor);
    protected virtual MetaChildrenColumn CreateChildrenColumn(ColumnProvider columnProvider);
    protected virtual MetaColumn CreateColumn(ColumnProvider columnProvider);
    internal void CreateColumns();
    public virtual object CreateContext();
    protected virtual MetaForeignKeyColumn CreateForeignKeyColumn(ColumnProvider columnProvider);
    public sealed virtual string GetActionPath(string action, object row);
    public sealed virtual string GetActionPath(string action, object row, string path);
    public sealed virtual string GetActionPath(string action);
    public sealed virtual string GetActionPath(string action, RouteValueDictionary routeValues);
    public sealed virtual string GetActionPath(string action, IList`1<object> primaryKeyValues);
    public sealed virtual string GetActionPath(string action, IList`1<object> primaryKeyValues, string path);
    public MetaColumn GetColumn(string columnName);
    public sealed virtual DataKey GetDataKeyFromRoute();
    public virtual string GetDisplayString(object row);
    public virtual IEnumerable`1<MetaColumn> GetFilteredColumns();
    public sealed virtual IDictionary`2<string, object> GetPrimaryKeyDictionary(object row);
    public sealed virtual string GetPrimaryKeyString(object row);
    public sealed virtual string GetPrimaryKeyString(IList`1<object> primaryKeyValues);
    public sealed virtual IList`1<object> GetPrimaryKeyValues(object row);
    public sealed virtual IQueryable GetQuery();
    public virtual IQueryable GetQuery(object context);
    public virtual IEnumerable`1<MetaColumn> GetScaffoldColumns(DataBoundControlMode mode, ContainerType containerType);
    public static MetaTable GetTable(Type entityType);
    protected internal virtual void Initialize();
    internal static bool IsFilterableColumn(IMetaColumn column, IPrincipal user);
    public IDictionary`2<string, object> GetColumnValuesFromRoute(HttpContext context);
    internal IDictionary`2<string, object> GetColumnValuesFromRoute(HttpContextBase context);
    public void ResetMetadata();
    internal void SetScaffoldAndName(bool scaffoldDefaultValue, string nameOverride);
    public virtual string ToString();
    public bool TryGetColumn(string columnName, MetaColumn& column);
    public static bool TryGetTable(Type entityType, MetaTable& table);
    private sealed virtual override String[] System.Web.DynamicData.IMetaTable.get_PrimaryKeyNames();
    private sealed virtual override object System.Web.DynamicData.IMetaTable.CreateContext();
    private sealed virtual override string System.Web.DynamicData.IMetaTable.GetDisplayString(object row);
    private sealed virtual override IQueryable System.Web.DynamicData.IMetaTable.GetQuery(object context);
    private sealed virtual override ReadOnlyCollection`1<IMetaColumn> System.Web.DynamicData.IMetaTable.get_Columns();
    private sealed virtual override IMetaModel System.Web.DynamicData.IMetaTable.get_Model();
    private sealed virtual override IMetaColumn System.Web.DynamicData.IMetaTable.get_DisplayColumn();
    private sealed virtual override IMetaColumn System.Web.DynamicData.IMetaTable.GetColumn(string columnName);
    private sealed virtual override IEnumerable`1<IMetaColumn> System.Web.DynamicData.IMetaTable.GetFilteredColumns();
    private sealed virtual override IEnumerable`1<IMetaColumn> System.Web.DynamicData.IMetaTable.GetScaffoldColumns(DataBoundControlMode mode, ContainerType containerType);
    private sealed virtual override ReadOnlyCollection`1<IMetaColumn> System.Web.DynamicData.IMetaTable.get_PrimaryKeyColumns();
    private sealed virtual override IMetaColumn System.Web.DynamicData.IMetaTable.get_SortColumn();
    private sealed virtual override bool System.Web.DynamicData.IMetaTable.TryGetColumn(string columnName, IMetaColumn& column);
    private sealed virtual override bool System.Web.DynamicData.IMetaTable.CanDelete(IPrincipal principal);
    private sealed virtual override bool System.Web.DynamicData.IMetaTable.CanInsert(IPrincipal principal);
    private sealed virtual override bool System.Web.DynamicData.IMetaTable.CanRead(IPrincipal principal);
    private sealed virtual override bool System.Web.DynamicData.IMetaTable.CanUpdate(IPrincipal principal);
}
[ExtensionAttribute]
internal static class System.Web.DynamicData.Misc : object {
    [ExtensionAttribute]
public static HttpContextWrapper ToWrapper(HttpContext context);
    public static object GetRealDataItem(object dataItem);
    public static MetaTable GetTableFromTypeHierarchy(Type entityType);
    public static Type RemoveNullableFromType(Type type);
    internal static bool IsColumnInDictionary(IMetaColumn column, IDictionary`2<string, object> values);
    internal static IDictionary`2<string, object> ConvertObjectToDictionary(object instance);
    public static T ChangeType(object value);
    public static object ChangeType(object value, Type type);
    internal static bool TypeAllowsNull(Type type);
    public static ContainerType FindContainerType(Control control);
    public static IOrderedDictionary GetEnumNamesAndValues(Type enumType);
    public static object GetUnderlyingTypeValue(Type enumType, object enumValue);
    public static string GetUnderlyingTypeValueString(Type enumType, object enumValue);
    public static string PersistListToCommaSeparatedString(IList`1<object> list);
    public static Object[] GetKeyValues(IList`1<MetaColumn> keyMembers, object entity);
    public static String[] ParseCommaSeparatedString(string stringList);
    public static IQueryable BuildSortQueryable(IQueryable query, IMetaTable table);
    public static void FillListItemCollection(IMetaTable table, ListItemCollection listItemCollection);
    internal static void ExtractValuesFromBindableControls(IOrderedDictionary dictionary, Control container);
    public static Control FindControl(Control control, string controlID);
    public static string GetRouteValue(string key);
    public static string SanitizeQueryStringValue(object value);
    internal static long CombineHashCodes(object o1, object o2);
    internal static long CombineHashCodes(object o1, object o2, object o3);
}
public enum System.Web.DynamicData.ModelProviders.AssociationDirection : Enum {
    public int value__;
    public static AssociationDirection OneToOne;
    public static AssociationDirection OneToMany;
    public static AssociationDirection ManyToOne;
    public static AssociationDirection ManyToMany;
}
public abstract class System.Web.DynamicData.ModelProviders.AssociationProvider : object {
    public AssociationDirection Direction { get; protected set; }
    public ColumnProvider FromColumn { get; protected set; }
    public TableProvider ToTable { get; protected set; }
    public ColumnProvider ToColumn { get; protected set; }
    public bool IsPrimaryKeyInThisTable { get; protected set; }
    public ReadOnlyCollection`1<string> ForeignKeyNames { get; protected set; }
    [CompilerGeneratedAttribute]
public virtual AssociationDirection get_Direction();
    [CompilerGeneratedAttribute]
protected virtual void set_Direction(AssociationDirection value);
    [CompilerGeneratedAttribute]
public virtual ColumnProvider get_FromColumn();
    [CompilerGeneratedAttribute]
protected virtual void set_FromColumn(ColumnProvider value);
    public virtual TableProvider get_ToTable();
    protected virtual void set_ToTable(TableProvider value);
    [CompilerGeneratedAttribute]
public virtual ColumnProvider get_ToColumn();
    [CompilerGeneratedAttribute]
protected virtual void set_ToColumn(ColumnProvider value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsPrimaryKeyInThisTable();
    [CompilerGeneratedAttribute]
protected virtual void set_IsPrimaryKeyInThisTable(bool value);
    [CompilerGeneratedAttribute]
public virtual ReadOnlyCollection`1<string> get_ForeignKeyNames();
    [CompilerGeneratedAttribute]
protected virtual void set_ForeignKeyNames(ReadOnlyCollection`1<string> value);
    public virtual string GetSortExpression(ColumnProvider sortColumn);
    internal string GetSortExpression(ColumnProvider sortColumn, string format);
}
public abstract class System.Web.DynamicData.ModelProviders.ColumnProvider : object {
    internal PropertyDescriptor PropertyDescriptor { get; }
    public AttributeCollection Attributes { get; }
    public string Name { get; protected set; }
    public Type ColumnType { get; protected set; }
    public bool IsPrimaryKey { get; protected set; }
    public bool IsReadOnly { get; protected set; }
    public bool IsGenerated { get; protected set; }
    public bool IsSortable { get; protected set; }
    public int MaxLength { get; protected set; }
    public bool Nullable { get; protected set; }
    public bool IsCustomProperty { get; protected set; }
    public AssociationProvider Association { get; protected set; }
    public TableProvider Table { get; private set; }
    public PropertyInfo EntityTypeProperty { get; protected set; }
    public bool IsForeignKeyComponent { get; protected set; }
    protected ColumnProvider(TableProvider table);
    public virtual string ToString();
    internal virtual PropertyDescriptor get_PropertyDescriptor();
    public virtual AttributeCollection get_Attributes();
    protected static AttributeCollection AddDefaultAttributes(ColumnProvider columnProvider, AttributeCollection attributes);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Type get_ColumnType();
    [CompilerGeneratedAttribute]
protected virtual void set_ColumnType(Type value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsPrimaryKey();
    [CompilerGeneratedAttribute]
protected virtual void set_IsPrimaryKey(bool value);
    public virtual bool get_IsReadOnly();
    protected virtual void set_IsReadOnly(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsGenerated();
    [CompilerGeneratedAttribute]
protected virtual void set_IsGenerated(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsSortable();
    [CompilerGeneratedAttribute]
protected virtual void set_IsSortable(bool value);
    [CompilerGeneratedAttribute]
public virtual int get_MaxLength();
    [CompilerGeneratedAttribute]
protected virtual void set_MaxLength(int value);
    [CompilerGeneratedAttribute]
public virtual bool get_Nullable();
    [CompilerGeneratedAttribute]
protected virtual void set_Nullable(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsCustomProperty();
    [CompilerGeneratedAttribute]
protected virtual void set_IsCustomProperty(bool value);
    [CompilerGeneratedAttribute]
public virtual AssociationProvider get_Association();
    [CompilerGeneratedAttribute]
protected virtual void set_Association(AssociationProvider value);
    [CompilerGeneratedAttribute]
public TableProvider get_Table();
    [CompilerGeneratedAttribute]
private void set_Table(TableProvider value);
    [CompilerGeneratedAttribute]
public virtual PropertyInfo get_EntityTypeProperty();
    [CompilerGeneratedAttribute]
protected virtual void set_EntityTypeProperty(PropertyInfo value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsForeignKeyComponent();
    [CompilerGeneratedAttribute]
protected virtual void set_IsForeignKeyComponent(bool value);
}
public abstract class System.Web.DynamicData.ModelProviders.DataModelProvider : object {
    public ReadOnlyCollection`1<TableProvider> Tables { get; }
    public Type ContextType { get; protected set; }
    public abstract virtual ReadOnlyCollection`1<TableProvider> get_Tables();
    [CompilerGeneratedAttribute]
public virtual Type get_ContextType();
    [CompilerGeneratedAttribute]
protected virtual void set_ContextType(Type value);
    public abstract virtual object CreateContext();
}
internal class System.Web.DynamicData.ModelProviders.DLinqAssociationProvider : AssociationProvider {
    public DLinqAssociationProvider(DLinqColumnProvider column);
    public virtual string GetSortExpression(ColumnProvider sortColumn);
}
internal class System.Web.DynamicData.ModelProviders.DLinqColumnProvider : ColumnProvider {
    public AttributeCollection Attributes { get; }
    internal MetaDataMember Member { get; private set; }
    internal bool ShouldRemove { get; internal set; }
    public PropertyInfo EntityTypeProperty { get; }
    public AssociationProvider Association { get; }
    unknown bool IsForeignKeyComponent {internal set; }
    public DLinqColumnProvider(DLinqTableProvider table, MetaDataMember member);
    private static DLinqColumnProvider();
    public virtual AttributeCollection get_Attributes();
    internal static int ProcessMaxLength(Type memberType, string dbType);
    internal static bool ProcessIsSortable(Type memberType, string dbType);
    [CompilerGeneratedAttribute]
internal MetaDataMember get_Member();
    [CompilerGeneratedAttribute]
private void set_Member(MetaDataMember value);
    internal void Initialize();
    [CompilerGeneratedAttribute]
internal bool get_ShouldRemove();
    [CompilerGeneratedAttribute]
internal void set_ShouldRemove(bool value);
    public virtual PropertyInfo get_EntityTypeProperty();
    public virtual AssociationProvider get_Association();
    internal void set_IsForeignKeyComponent(bool value);
}
internal class System.Web.DynamicData.ModelProviders.DLinqDataModelProvider : DataModelProvider {
    internal Dictionary`2<PropertyInfo, DLinqColumnProvider> ColumnLookup { get; }
    internal List`1<TableProvider> DLinqTables { get; private set; }
    public ReadOnlyCollection`1<TableProvider> Tables { get; }
    public DLinqDataModelProvider(object contextInstance, Func`1<object> contextFactory);
    internal Dictionary`2<PropertyInfo, DLinqColumnProvider> get_ColumnLookup();
    [CompilerGeneratedAttribute]
internal List`1<TableProvider> get_DLinqTables();
    [CompilerGeneratedAttribute]
private void set_DLinqTables(List`1<TableProvider> value);
    public virtual object CreateContext();
    public virtual ReadOnlyCollection`1<TableProvider> get_Tables();
}
internal class System.Web.DynamicData.ModelProviders.DLinqTableProvider : TableProvider {
    public ReadOnlyCollection`1<ColumnProvider> Columns { get; }
    public DLinqTableProvider(DLinqDataModelProvider dataModel, MetaType rowType, string name, PropertyInfo prop);
    internal void Initialize();
    public virtual IQueryable GetQuery(object context);
    public virtual ReadOnlyCollection`1<ColumnProvider> get_Columns();
}
internal class System.Web.DynamicData.ModelProviders.EFAssociationProvider : AssociationProvider {
    public EFAssociationProvider(EFColumnProvider column, NavigationProperty navigationProperty);
    internal static long BuildRelationshipKey(EntityType entityType, RelationshipEndMember member);
    internal static IEnumerable`1<string> GetDependentPropertyNames(NavigationProperty navigationProperty);
    internal static IEnumerable`1<string> GetDependentPropertyNames(NavigationProperty navigationProperty, bool checkRelationshipType);
    public virtual string GetSortExpression(ColumnProvider sortColumn);
}
internal class System.Web.DynamicData.ModelProviders.EFColumnProvider : ColumnProvider {
    internal EdmMember EdmMember { get; private set; }
    public PropertyInfo EntityTypeProperty { get; }
    public Type ColumnType { get; }
    public bool IsSortable { get; }
    public AssociationProvider Association { get; }
    public EFColumnProvider(EntityType entityType, EFTableProvider table, EdmMember m, bool isPrimaryKey);
    [CompilerGeneratedAttribute]
internal EdmMember get_EdmMember();
    [CompilerGeneratedAttribute]
private void set_EdmMember(EdmMember value);
    public virtual PropertyInfo get_EntityTypeProperty();
    public virtual Type get_ColumnType();
    public virtual bool get_IsSortable();
    public virtual AssociationProvider get_Association();
    internal static bool IsSupportedEdmMemberType(EdmMember member);
}
internal class System.Web.DynamicData.ModelProviders.EFDataModelProvider : DataModelProvider {
    internal Dictionary`2<long, EFColumnProvider> RelationshipEndLookup { get; private set; }
    internal Dictionary`2<EntityType, EFTableProvider> TableEndLookup { get; private set; }
    public ReadOnlyCollection`1<TableProvider> Tables { get; }
    public EFDataModelProvider(object contextInstance, Func`1<object> contextFactory);
    [CompilerGeneratedAttribute]
internal Dictionary`2<long, EFColumnProvider> get_RelationshipEndLookup();
    [CompilerGeneratedAttribute]
private void set_RelationshipEndLookup(Dictionary`2<long, EFColumnProvider> value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<EntityType, EFTableProvider> get_TableEndLookup();
    [CompilerGeneratedAttribute]
private void set_TableEndLookup(Dictionary`2<EntityType, EFTableProvider> value);
    public virtual object CreateContext();
    public virtual ReadOnlyCollection`1<TableProvider> get_Tables();
    internal Type GetClrType(EdmType entityType);
    internal Type GetClrType(EnumType enumType);
}
internal class System.Web.DynamicData.ModelProviders.EFTableProvider : TableProvider {
    public ReadOnlyCollection`1<ColumnProvider> Columns { get; }
    public EFTableProvider(EFDataModelProvider dataModel, EntitySet entitySet, EntityType entityType, Type entityClrType, Type parentEntityClrType, Type rootEntityClrType, string name);
    public virtual ReadOnlyCollection`1<ColumnProvider> get_Columns();
    public virtual IQueryable GetQuery(object context);
}
internal class System.Web.DynamicData.ModelProviders.SchemaCreator : object {
    public static SchemaCreator Instance { get; }
    private static SchemaCreator();
    public static SchemaCreator get_Instance();
    public virtual DataModelProvider CreateDataModel(object contextInstance, Func`1<object> contextFactory);
    public virtual bool ValidDataContextType(Type contextType);
    internal static bool IsDataContext(Type contextType);
    internal static bool IsObjectContext(Type contextType);
}
internal class System.Web.DynamicData.ModelProviders.SimpleColumnProvider : ColumnProvider {
    public AttributeCollection Attributes { get; }
    public SimpleColumnProvider(TableProvider tableProvider, PropertyDescriptor propertyDescriptor);
    public virtual AttributeCollection get_Attributes();
}
internal class System.Web.DynamicData.ModelProviders.SimpleDataModelProvider : DataModelProvider {
    public ReadOnlyCollection`1<TableProvider> Tables { get; }
    public SimpleDataModelProvider(Type entityType);
    public SimpleDataModelProvider(ICustomTypeDescriptor typeDescriptor);
    public virtual ReadOnlyCollection`1<TableProvider> get_Tables();
    public virtual object CreateContext();
}
internal class System.Web.DynamicData.ModelProviders.SimpleTableProvider : TableProvider {
    public ReadOnlyCollection`1<ColumnProvider> Columns { get; }
    public SimpleTableProvider(DataModelProvider modelProvider, Type entityType);
    public SimpleTableProvider(DataModelProvider modelProvider, ICustomTypeDescriptor descriptor);
    public virtual ReadOnlyCollection`1<ColumnProvider> get_Columns();
    public virtual ICustomTypeDescriptor GetTypeDescriptor();
    public virtual IQueryable GetQuery(object context);
}
public abstract class System.Web.DynamicData.ModelProviders.TableProvider : object {
    public AttributeCollection Attributes { get; }
    public string Name { get; protected set; }
    public Type EntityType { get; protected set; }
    public ReadOnlyCollection`1<ColumnProvider> Columns { get; }
    public DataModelProvider DataModel { get; internal set; }
    public Type ParentEntityType { get; protected set; }
    public Type RootEntityType { get; protected set; }
    public string DataContextPropertyName { get; protected set; }
    protected TableProvider(DataModelProvider model);
    public virtual string ToString();
    public virtual AttributeCollection get_Attributes();
    public virtual ICustomTypeDescriptor GetTypeDescriptor();
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
protected virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual Type get_EntityType();
    [CompilerGeneratedAttribute]
protected virtual void set_EntityType(Type value);
    public abstract virtual ReadOnlyCollection`1<ColumnProvider> get_Columns();
    public abstract virtual IQueryable GetQuery(object context);
    [CompilerGeneratedAttribute]
public DataModelProvider get_DataModel();
    [CompilerGeneratedAttribute]
internal void set_DataModel(DataModelProvider value);
    public virtual object EvaluateForeignKey(object row, string foreignKeyName);
    [CompilerGeneratedAttribute]
public virtual Type get_ParentEntityType();
    [CompilerGeneratedAttribute]
protected virtual void set_ParentEntityType(Type value);
    public virtual Type get_RootEntityType();
    protected virtual void set_RootEntityType(Type value);
    public virtual string get_DataContextPropertyName();
    protected virtual void set_DataContextPropertyName(string value);
    public virtual bool CanDelete(IPrincipal principal);
    public virtual bool CanInsert(IPrincipal principal);
    public virtual bool CanRead(IPrincipal principal);
    public virtual bool CanUpdate(IPrincipal principal);
}
public static class System.Web.DynamicData.PageAction : object {
    public static string Details { get; }
    public static string List { get; }
    public static string Edit { get; }
    public static string Insert { get; }
    public static string get_Details();
    public static string get_List();
    public static string get_Edit();
    public static string get_Insert();
}
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
public class System.Web.DynamicData.QueryableFilterRepeater : Control {
    private HttpContextBase Context { get; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("DynamicFilter")]
[ThemeableAttribute("False")]
[IDReferencePropertyAttribute("System.Web.DynamicData.QueryableFilterUserControl")]
[ResourceDescriptionAttribute("DynamicFilterRepeater_DynamicFilterContainerId")]
public string DynamicFilterContainerId { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.INamingContainer")]
public ITemplate ItemTemplate { get; public set; }
    internal QueryableFilterRepeater(HttpContextBase context);
    private HttpContextBase get_Context();
    public string get_DynamicFilterContainerId();
    public void set_DynamicFilterContainerId(string value);
    [CompilerGeneratedAttribute]
public virtual ITemplate get_ItemTemplate();
    [CompilerGeneratedAttribute]
public virtual void set_ItemTemplate(ITemplate value);
    protected virtual void OnPreRender(EventArgs e);
    private sealed virtual override void System.Web.DynamicData.IFilterExpressionProvider.Initialize(IQueryableDataSource dataSource);
    internal void Page_InitComplete(object sender, EventArgs e);
    private sealed virtual override IQueryable System.Web.DynamicData.IFilterExpressionProvider.GetQueryable(IQueryable source);
}
public abstract class System.Web.DynamicData.QueryableFilterUserControl : UserControl {
    protected internal MetaColumn Column { get; private set; }
    public Control FilterControl { get; }
    public string DefaultValue { get; }
    public IDictionary`2<string, object> DefaultValues { get; }
    [CompilerGeneratedAttribute]
protected internal MetaColumn get_Column();
    [CompilerGeneratedAttribute]
private void set_Column(MetaColumn value);
    public abstract virtual IQueryable GetQueryable(IQueryable source);
    internal void Initialize(MetaColumn column, IQueryableDataSource iQueryableDataSource, HttpContextBase context);
    [CompilerGeneratedAttribute]
public void add_FilterChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FilterChanged(EventHandler value);
    public virtual Control get_FilterControl();
    public void PopulateListControl(ListControl listControl);
    protected void OnFilterChanged();
    public string get_DefaultValue();
    public IDictionary`2<string, object> get_DefaultValues();
    public static IQueryable ApplyEqualityFilter(IQueryable source, string propertyName, object value);
}
internal static class System.Web.DynamicData.QueryStringHandler : object {
    public static string AddFiltersToPath(string virtualPath, IDictionary`2<string, object> filters);
}
internal class System.Web.DynamicData.RepeaterDataBoundAdapter : object {
    public String[] DataKeyNames { get; public set; }
    public string DataMember { get; public set; }
    public object DataSource { get; public set; }
    public string DataSourceID { get; public set; }
    public IDataSource DataSourceObject { get; }
    public RepeaterDataBoundAdapter(Repeater repeater);
    public sealed virtual String[] get_DataKeyNames();
    public sealed virtual void set_DataKeyNames(String[] value);
    public sealed virtual string get_DataMember();
    public sealed virtual void set_DataMember(string value);
    public sealed virtual object get_DataSource();
    public sealed virtual void set_DataSource(object value);
    public sealed virtual string get_DataSourceID();
    public sealed virtual void set_DataSourceID(string value);
    public sealed virtual IDataSource get_DataSourceObject();
}
internal class System.Web.DynamicData.SimpleFieldTemplateFactory : FieldTemplateFactory {
    internal VirtualPathProvider VirtualPathProvider { get; internal set; }
    protected bool DirectoryExists { get; }
    internal SimpleFieldTemplateFactory(VirtualPathProvider vpp);
    [CompilerGeneratedAttribute]
internal VirtualPathProvider get_VirtualPathProvider();
    [CompilerGeneratedAttribute]
internal void set_VirtualPathProvider(VirtualPathProvider value);
    protected virtual bool get_DirectoryExists();
    public virtual IFieldTemplate CreateFieldTemplate(MetaColumn column, DataBoundControlMode mode, string uiHint);
}
internal class System.Web.DynamicData.SimpleFieldTemplateUserControl : FieldTemplateUserControl {
    protected virtual void OnInit(EventArgs e);
    protected virtual void ExtractValues(IOrderedDictionary dictionary);
    public static SimpleFieldTemplateUserControl CreateBooleanTemplate(bool readOnly);
    public static SimpleFieldTemplateUserControl CreateTextTemplate(MetaColumn column, bool readOnly);
    internal void InitializeValidators();
}
[AttributeUsageAttribute("4")]
public class System.Web.DynamicData.TableNameAttribute : Attribute {
    public string Name { get; private set; }
    public TableNameAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.DynamicData.TemplateFactory : object {
    internal MetaModel Model { get; internal set; }
    internal string TemplateFolderVirtualPath { get; internal set; }
    internal VirtualPathProvider VirtualPathProvider { get; internal set; }
    internal TemplateFactory(string defaultLocation);
    internal TemplateFactory(string defaultLocation, bool trackFolderChanges);
    [CompilerGeneratedAttribute]
internal MetaModel get_Model();
    [CompilerGeneratedAttribute]
internal void set_Model(MetaModel value);
    internal string get_TemplateFolderVirtualPath();
    internal void set_TemplateFolderVirtualPath(string value);
    internal VirtualPathProvider get_VirtualPathProvider();
    internal void set_VirtualPathProvider(VirtualPathProvider value);
    internal string GetTemplatePath(long cacheKey, Func`1<string> templatePathFactoryFunction);
    internal bool FileExists(string virtualPath);
}
[ExtensionAttribute]
internal static class System.Web.DynamicData.Util.AttributeExtensions : object {
    [ExtensionAttribute]
internal static TAttribute FirstOrDefault(AttributeCollection attributes);
    [ExtensionAttribute]
internal static TResult GetAttributePropertyValue(AttributeCollection attributes, Func`2<TAttribute, TResult> propertyGetter);
    [ExtensionAttribute]
internal static TResult GetAttributePropertyValue(AttributeCollection attributes, Func`2<TAttribute, TResult> propertyGetter, TResult defaultValue);
    [ExtensionAttribute]
internal static TResult GetPropertyValue(TAttribute attribute, Func`2<TAttribute, TResult> propertyGetter);
    [ExtensionAttribute]
internal static TResult GetPropertyValue(TAttribute attribute, Func`2<TAttribute, TResult> propertyGetter, TResult defaultValue);
}
internal static class System.Web.DynamicData.Util.DataControlHelper : object {
    internal static IDynamicDataSource FindDataSourceControl(Control current);
    internal static IDataBoundControl GetDataBoundControl(Control control, bool failIfNotFound);
    internal static IDataBoundControl GetControlAdapter(Control control);
}
internal class System.Web.DynamicData.Util.DefaultValueMapping : object {
    public DictionaryCustomTypeDescriptor Instance { get; private set; }
    public IDictionary`2<string, object> Values { get; }
    public DefaultValueMapping(IDictionary`2<string, object> defaultValues);
    [CompilerGeneratedAttribute]
public DictionaryCustomTypeDescriptor get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(DictionaryCustomTypeDescriptor value);
    public IDictionary`2<string, object> get_Values();
    public bool Contains(MetaColumn column);
}
internal class System.Web.DynamicData.Util.DictionaryCustomTypeDescriptor : CustomTypeDescriptor {
    public DictionaryCustomTypeDescriptor(IDictionary`2<string, object> values);
    public object GetValue(string name);
    public virtual PropertyDescriptorCollection GetProperties();
}
internal class System.Web.DynamicData.Util.DictionaryPropertyDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public DictionaryPropertyDescriptor(string name);
    public virtual bool CanResetValue(object component);
    public virtual Type get_ComponentType();
    public virtual object GetValue(object component);
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
internal class System.Web.DynamicData.Util.MappingInfo : object {
    public MetaTable Table { get; public set; }
    public DefaultValueMapping DefaultValueMapping { get; public set; }
    [CompilerGeneratedAttribute]
public MetaTable get_Table();
    [CompilerGeneratedAttribute]
public void set_Table(MetaTable value);
    [CompilerGeneratedAttribute]
public DefaultValueMapping get_DefaultValueMapping();
    [CompilerGeneratedAttribute]
public void set_DefaultValueMapping(DefaultValueMapping value);
}
internal static class System.Web.DynamicData.Util.MetaTableHelper : object {
    private static MetaTableHelper();
    internal static Dictionary`2<object, MappingInfo> GetMapping(HttpContextBase httpContext);
    internal static MetaTable GetTableFromMapping(HttpContextBase httpContext, object control);
    internal static void SetTableInMapping(HttpContextBase httpContext, object control, MetaTable table, IDictionary`2<string, object> defaultValues);
    internal static MetaTable GetTableWithFullFallback(IDataSource dataSource, HttpContextBase context);
    internal static MetaTable GetMetaTableFromObject(object dataSource);
    internal static MetaTable GetTableFromDynamicDataSource(IDynamicDataSource dynamicDataSource);
    internal static MetaTable FindMetaTable(Control current);
    internal static DefaultValueMapping GetDefaultValueMapping(Control current, HttpContextBase context);
    internal static MetaTable FindMetaTable(Control current, HttpContextBase context);
}
internal class System.Web.DynamicData.Util.RouteParametersHelper : object {
    internal static IEnumerable`1<Parameter> GetColumnParameters(MetaTable table, string columnName);
    internal static IEnumerable`1<Parameter> GetForeignKeyParameters(MetaForeignKeyColumn fkColumn);
    internal static IEnumerable`1<Parameter> GetPrimaryKeyParameters(MetaTable table);
    internal static IEnumerable`1<Parameter> GetRegularColumnParameters(MetaColumn column);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Resources.DynamicDataResources : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string AssociationProvider_DirectionDoesNotSupportSorting { get; }
    internal static string AssociationProvider_SortColumnDoesNotBelongToEndTable { get; }
    internal static string Common_PageCannotBeNull { get; }
    internal static string ControlFilterExpression_CouldNotFindControlID { get; }
    internal static string DataControlReference_ControlID { get; }
    internal static string DataSourceUtil_CantDetermineTable { get; }
    internal static string DynamicControl_ControlMustHaveDateFieldAttribute { get; }
    internal static string DynamicControl_ControlNeedsToExistInADataControlUsingDynamicDataSource { get; }
    internal static string DynamicControl_Mode { get; }
    internal static string DynamicControlDesignRender { get; }
    internal static string DynamicControlFieldCommon_ApplyFormatInEditMode { get; }
    internal static string DynamicControlFieldCommon_ConvertEmptyStringToNull { get; }
    internal static string DynamicControlFieldCommon_DataField { get; }
    internal static string DynamicControlFieldCommon_DataFormatString { get; }
    internal static string DynamicControlFieldCommon_HtmlEncode { get; }
    internal static string DynamicControlFieldCommon_NullDisplayText { get; }
    internal static string DynamicControlFieldCommon_UIHint { get; }
    internal static string DynamicControlFieldCommon_ValidationGroup { get; }
    internal static string DynamicControlParameter_DynamicDataSourceColumnNotCompatibleWithTable { get; }
    internal static string DynamicControlParameter_DynamicDataSourceControlCannotBeUsedAsParent { get; }
    internal static string DynamicControlParameter_DynamicDataSourceControlNotFound { get; }
    internal static string DynamicControlParameter_InvalidPK { get; }
    internal static string DynamicDataExtensions_ContextTypePropertyOfDynamicDataSourceMustBeSpecified { get; }
    internal static string DynamicDataManager_AutoLoadForeignKeys { get; }
    internal static string DynamicDataManager_ControlNotFound { get; }
    internal static string DynamicDataManager_EnableQueryStringSelection { get; }
    internal static string DynamicDataManager_OnlyOneDynamicDataManager { get; }
    internal static string DynamicDataManager_UnsupportedControl { get; }
    internal static string DynamicEntity_CantFindTemplate { get; }
    internal static string DynamicEntity_ControlNeedsToExistInAContextSupportingDynamicData { get; }
    internal static string DynamicEntity_Mode { get; }
    internal static string DynamicField_ReadOnly { get; }
    internal static string DynamicField_ValidateRequestMode { get; }
    internal static string DynamicFilter_DataField { get; }
    internal static string DynamicFilter_FilterUIHint { get; }
    internal static string DynamicHyperLink_Action { get; }
    internal static string DynamicHyperLink_CannotBindToNull { get; }
    internal static string DynamicHyperLink_CannotDetermineTable { get; }
    internal static string DynamicHyperLink_CannotSetTableAndContextWhenDatabinding { get; }
    internal static string DynamicHyperLink_ContextTypeName { get; }
    internal static string DynamicHyperLink_DataField { get; }
    internal static string DynamicHyperLink_TableName { get; }
    internal static string DynamicParameter_NeedExpansion { get; }
    internal static string DynamicValidator_CannotConvertValue { get; }
    internal static string DynamicValidator_ControlNotFound { get; }
    internal static string FieldTemplateFactory_FolderNotFound { get; }
    internal static string FieldTemplateUserControl_ColumnIsNotChildren { get; }
    internal static string FieldTemplateUserControl_ColumnIsNotFK { get; }
    internal static string FieldTemplateUserControl_CompareValidationError_Date { get; }
    internal static string FieldTemplateUserControl_CompareValidationError_Decimal { get; }
    internal static string FieldTemplateUserControl_CompareValidationError_Integer { get; }
    internal static string FilterFactory_ColumnHasNoDefaultFilter { get; }
    internal static string FilterRepeater_CantInferInformationFromUrl { get; }
    internal static string FilterRepeater_CouldNotFindControlInTemplate { get; }
    internal static string FilterRepeater_InvalidContextTypeName { get; }
    internal static string FilterRepeater_InvalidTableName { get; }
    internal static string FilterRepeater_MissingContextTypeName { get; }
    internal static string FilterRepeater_MissingTableName { get; }
    internal static string FilterRepeater_UnknownContextTypeName { get; }
    internal static string FilterUserControlBase_BooleanFilter_FalseString { get; }
    internal static string FilterUserControlBase_BooleanFilter_TrueString { get; }
    internal static string FilterUserControlBase_CantInferInformationFromRequestUrl { get; }
    internal static string FilterUserControlBase_InvalidContextTypeName { get; }
    internal static string FilterUserControlBase_InvalidDataField { get; }
    internal static string FilterUserControlBase_InvalidTableName { get; }
    internal static string FilterUserControlBase_MissingContextTypeName { get; }
    internal static string FilterUserControlBase_MissingDataField { get; }
    internal static string FilterUserControlBase_MissingTableName { get; }
    internal static string FilterUserControlBase_SelectedDataKeyNotSupportedForThisField { get; }
    internal static string FilterUserControlBase_UnknownContextType { get; }
    internal static string FilterUserControlBase_UnsupportedDataField { get; }
    internal static string MetadataHandlerRegistration_ContextAlreadyRegistered { get; }
    internal static string MetadataHandlerRegistration_InvalidDataContextType { get; }
    internal static string MetadataValidator_UnknownContextType { get; }
    internal static string MetaModel_ContextAlreadyRegistered { get; }
    internal static string MetaModel_ContextDoesNotBelongToModel { get; }
    internal static string MetaModel_ContextFactoryReturnsNull { get; }
    internal static string MetaModel_ContextTypeNotSupported { get; }
    internal static string MetaModel_EntityNameConflict { get; }
    internal static string MetaModel_EntityNameOverrideConflict { get; }
    internal static string MetaModel_EntityTypeDoesNotBelongToModel { get; }
    internal static string MetaModel_RegistrationErrorOccurred { get; }
    internal static string MetaModel_UnknownContextType { get; }
    internal static string MetaModel_UnknownEntityType { get; }
    internal static string MetaModel_UnknownTable { get; }
    internal static string MetaModel_UnknownTableInContext { get; }
    internal static string MetaTable_CannotGetTableFromControl { get; }
    internal static string MetaTable_CannotGetTableFromDataSource { get; }
    internal static string MetaTable_CannotGetTableFromRoute { get; }
    internal static string MetaTable_CantFindDisplayColumn { get; }
    internal static string MetaTable_CantFindSortColumn { get; }
    internal static string MetaTable_CantUseChildrenColumnAsSortColumn { get; }
    internal static string MetaTable_ColumnNameConflict { get; }
    internal static string MetaTable_NamingContainerIsNotControl { get; }
    internal static string MetaTable_NoSuchColumn { get; }
    internal static string MetaTableHelper_CantFindTable { get; }
    internal static string Misc_CannotConvertType { get; }
    internal static string Misc_NoNamingContainer { get; }
    internal static string QueryStringHandler_VirtualPathCannotBeEmpty { get; }
    internal static string SchemaCreator_UnknownModel { get; }
    internal static string SimpleColumnProvider_ColumnTypeRequired { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_AssociationProvider_DirectionDoesNotSupportSorting();
    internal static string get_AssociationProvider_SortColumnDoesNotBelongToEndTable();
    internal static string get_Common_PageCannotBeNull();
    internal static string get_ControlFilterExpression_CouldNotFindControlID();
    internal static string get_DataControlReference_ControlID();
    internal static string get_DataSourceUtil_CantDetermineTable();
    internal static string get_DynamicControl_ControlMustHaveDateFieldAttribute();
    internal static string get_DynamicControl_ControlNeedsToExistInADataControlUsingDynamicDataSource();
    internal static string get_DynamicControl_Mode();
    internal static string get_DynamicControlDesignRender();
    internal static string get_DynamicControlFieldCommon_ApplyFormatInEditMode();
    internal static string get_DynamicControlFieldCommon_ConvertEmptyStringToNull();
    internal static string get_DynamicControlFieldCommon_DataField();
    internal static string get_DynamicControlFieldCommon_DataFormatString();
    internal static string get_DynamicControlFieldCommon_HtmlEncode();
    internal static string get_DynamicControlFieldCommon_NullDisplayText();
    internal static string get_DynamicControlFieldCommon_UIHint();
    internal static string get_DynamicControlFieldCommon_ValidationGroup();
    internal static string get_DynamicControlParameter_DynamicDataSourceColumnNotCompatibleWithTable();
    internal static string get_DynamicControlParameter_DynamicDataSourceControlCannotBeUsedAsParent();
    internal static string get_DynamicControlParameter_DynamicDataSourceControlNotFound();
    internal static string get_DynamicControlParameter_InvalidPK();
    internal static string get_DynamicDataExtensions_ContextTypePropertyOfDynamicDataSourceMustBeSpecified();
    internal static string get_DynamicDataManager_AutoLoadForeignKeys();
    internal static string get_DynamicDataManager_ControlNotFound();
    internal static string get_DynamicDataManager_EnableQueryStringSelection();
    internal static string get_DynamicDataManager_OnlyOneDynamicDataManager();
    internal static string get_DynamicDataManager_UnsupportedControl();
    internal static string get_DynamicEntity_CantFindTemplate();
    internal static string get_DynamicEntity_ControlNeedsToExistInAContextSupportingDynamicData();
    internal static string get_DynamicEntity_Mode();
    internal static string get_DynamicField_ReadOnly();
    internal static string get_DynamicField_ValidateRequestMode();
    internal static string get_DynamicFilter_DataField();
    internal static string get_DynamicFilter_FilterUIHint();
    internal static string get_DynamicHyperLink_Action();
    internal static string get_DynamicHyperLink_CannotBindToNull();
    internal static string get_DynamicHyperLink_CannotDetermineTable();
    internal static string get_DynamicHyperLink_CannotSetTableAndContextWhenDatabinding();
    internal static string get_DynamicHyperLink_ContextTypeName();
    internal static string get_DynamicHyperLink_DataField();
    internal static string get_DynamicHyperLink_TableName();
    internal static string get_DynamicParameter_NeedExpansion();
    internal static string get_DynamicValidator_CannotConvertValue();
    internal static string get_DynamicValidator_ControlNotFound();
    internal static string get_FieldTemplateFactory_FolderNotFound();
    internal static string get_FieldTemplateUserControl_ColumnIsNotChildren();
    internal static string get_FieldTemplateUserControl_ColumnIsNotFK();
    internal static string get_FieldTemplateUserControl_CompareValidationError_Date();
    internal static string get_FieldTemplateUserControl_CompareValidationError_Decimal();
    internal static string get_FieldTemplateUserControl_CompareValidationError_Integer();
    internal static string get_FilterFactory_ColumnHasNoDefaultFilter();
    internal static string get_FilterRepeater_CantInferInformationFromUrl();
    internal static string get_FilterRepeater_CouldNotFindControlInTemplate();
    internal static string get_FilterRepeater_InvalidContextTypeName();
    internal static string get_FilterRepeater_InvalidTableName();
    internal static string get_FilterRepeater_MissingContextTypeName();
    internal static string get_FilterRepeater_MissingTableName();
    internal static string get_FilterRepeater_UnknownContextTypeName();
    internal static string get_FilterUserControlBase_BooleanFilter_FalseString();
    internal static string get_FilterUserControlBase_BooleanFilter_TrueString();
    internal static string get_FilterUserControlBase_CantInferInformationFromRequestUrl();
    internal static string get_FilterUserControlBase_InvalidContextTypeName();
    internal static string get_FilterUserControlBase_InvalidDataField();
    internal static string get_FilterUserControlBase_InvalidTableName();
    internal static string get_FilterUserControlBase_MissingContextTypeName();
    internal static string get_FilterUserControlBase_MissingDataField();
    internal static string get_FilterUserControlBase_MissingTableName();
    internal static string get_FilterUserControlBase_SelectedDataKeyNotSupportedForThisField();
    internal static string get_FilterUserControlBase_UnknownContextType();
    internal static string get_FilterUserControlBase_UnsupportedDataField();
    internal static string get_MetadataHandlerRegistration_ContextAlreadyRegistered();
    internal static string get_MetadataHandlerRegistration_InvalidDataContextType();
    internal static string get_MetadataValidator_UnknownContextType();
    internal static string get_MetaModel_ContextAlreadyRegistered();
    internal static string get_MetaModel_ContextDoesNotBelongToModel();
    internal static string get_MetaModel_ContextFactoryReturnsNull();
    internal static string get_MetaModel_ContextTypeNotSupported();
    internal static string get_MetaModel_EntityNameConflict();
    internal static string get_MetaModel_EntityNameOverrideConflict();
    internal static string get_MetaModel_EntityTypeDoesNotBelongToModel();
    internal static string get_MetaModel_RegistrationErrorOccurred();
    internal static string get_MetaModel_UnknownContextType();
    internal static string get_MetaModel_UnknownEntityType();
    internal static string get_MetaModel_UnknownTable();
    internal static string get_MetaModel_UnknownTableInContext();
    internal static string get_MetaTable_CannotGetTableFromControl();
    internal static string get_MetaTable_CannotGetTableFromDataSource();
    internal static string get_MetaTable_CannotGetTableFromRoute();
    internal static string get_MetaTable_CantFindDisplayColumn();
    internal static string get_MetaTable_CantFindSortColumn();
    internal static string get_MetaTable_CantUseChildrenColumnAsSortColumn();
    internal static string get_MetaTable_ColumnNameConflict();
    internal static string get_MetaTable_NamingContainerIsNotControl();
    internal static string get_MetaTable_NoSuchColumn();
    internal static string get_MetaTableHelper_CantFindTable();
    internal static string get_Misc_CannotConvertType();
    internal static string get_Misc_NoNamingContainer();
    internal static string get_QueryStringHandler_VirtualPathCannotBeEmpty();
    internal static string get_SchemaCreator_UnknownModel();
    internal static string get_SimpleColumnProvider_ColumnTypeRequired();
}
[ExtensionAttribute]
public static class System.Web.UI.DataControlExtensions : object {
    private static DataControlExtensions();
    [ExtensionAttribute]
public static void EnableDynamicData(INamingContainer control, Type entityType, object defaults);
    [ExtensionAttribute]
public static void EnableDynamicData(INamingContainer control, Type entityType, IDictionary`2<string, object> defaultValues);
    [ExtensionAttribute]
public static void EnableDynamicData(INamingContainer control, Type entityType);
}
[AttributeUsageAttribute("644")]
internal class System.Web.UI.ResourceDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public ResourceDescriptionAttribute(string descriptionResourceName);
    public virtual string get_Description();
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
