internal class EmbeddedResourceFinder : object {
}
internal static class FXAssembly : object {
    internal static string Version;
}
internal static class System.Web.ApplicationServices.ApplicationServiceHelper : object {
    internal static Dictionary`2<string, object> ProfileAllowedGet { get; }
    internal static Dictionary`2<string, object> ProfileAllowedSet { get; }
    internal static bool AuthenticationServiceEnabled { get; }
    internal static bool ProfileServiceEnabled { get; }
    internal static bool RoleServiceEnabled { get; }
    internal static Dictionary`2<string, object> get_ProfileAllowedGet();
    internal static Dictionary`2<string, object> get_ProfileAllowedSet();
    internal static bool get_AuthenticationServiceEnabled();
    internal static bool get_ProfileServiceEnabled();
    internal static bool get_RoleServiceEnabled();
    internal static void EnsureAuthenticated(HttpContext context);
    internal static void EnsureAuthenticationServiceEnabled(HttpContext context, bool enforceSSL);
    internal static void EnsureProfileServiceEnabled();
    internal static void EnsureRoleServiceEnabled();
    internal static IPrincipal GetCurrentUser(HttpContext context);
    internal static Collection`1<ProfilePropertyMetadata> GetProfilePropertiesMetadata();
    internal static string GetUserName(IPrincipal user);
}
public class System.Web.ApplicationServices.ApplicationServicesHostFactory : ServiceHostFactory {
    protected virtual ServiceHost CreateServiceHost(Type serviceType, Uri[] baseAddresses);
}
public class System.Web.ApplicationServices.AuthenticatingEventArgs : EventArgs {
    public bool Authenticated { get; public set; }
    public bool AuthenticationIsComplete { get; public set; }
    public string UserName { get; }
    public string Password { get; }
    public string CustomCredential { get; }
    internal AuthenticatingEventArgs(string username, string password, string customCredential);
    public bool get_Authenticated();
    public void set_Authenticated(bool value);
    public bool get_AuthenticationIsComplete();
    public void set_AuthenticationIsComplete(bool value);
    public string get_UserName();
    public string get_Password();
    public string get_CustomCredential();
}
[AspNetCompatibilityRequirementsAttribute]
[ServiceContractAttribute]
[ServiceBehaviorAttribute]
public class System.Web.ApplicationServices.AuthenticationService : object {
    private static AuthenticationService();
    public static void add_Authenticating(EventHandler`1<AuthenticatingEventArgs> value);
    public static void remove_Authenticating(EventHandler`1<AuthenticatingEventArgs> value);
    public static void add_CreatingCookie(EventHandler`1<CreatingCookieEventArgs> value);
    public static void remove_CreatingCookie(EventHandler`1<CreatingCookieEventArgs> value);
    [OperationContractAttribute]
public bool ValidateUser(string username, string password, string customCredential);
    [OperationContractAttribute]
public bool Login(string username, string password, string customCredential, bool isPersistent);
    [OperationContractAttribute]
public bool IsLoggedIn();
    [OperationContractAttribute]
public void Logout();
}
public class System.Web.ApplicationServices.CreatingCookieEventArgs : EventArgs {
    public string UserName { get; }
    public string Password { get; }
    public string CustomCredential { get; }
    public bool IsPersistent { get; }
    public bool CookieIsSet { get; public set; }
    internal CreatingCookieEventArgs(string username, string password, bool isPersistent, string customCredential);
    public string get_UserName();
    public string get_Password();
    public string get_CustomCredential();
    public bool get_IsPersistent();
    public void set_CookieIsSet(bool value);
    public bool get_CookieIsSet();
}
public static class System.Web.ApplicationServices.KnownTypesProvider : object {
    public static Type[] GetKnownTypes(ICustomAttributeProvider knownTypeAttributeTarget);
}
[DataContractAttribute]
public class System.Web.ApplicationServices.ProfilePropertyMetadata : object {
    public ExtensionDataObject ExtensionData { get; public set; }
    [DataMemberAttribute]
public string PropertyName { get; public set; }
    [DataMemberAttribute]
public string TypeName { get; public set; }
    [DataMemberAttribute]
public bool AllowAnonymousAccess { get; public set; }
    [DataMemberAttribute]
public bool IsReadOnly { get; public set; }
    [DataMemberAttribute]
public int SerializeAs { get; public set; }
    [DataMemberAttribute]
public string DefaultValue { get; public set; }
    public sealed virtual ExtensionDataObject get_ExtensionData();
    public sealed virtual void set_ExtensionData(ExtensionDataObject value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public bool get_AllowAnonymousAccess();
    public void set_AllowAnonymousAccess(bool value);
    public bool get_IsReadOnly();
    public void set_IsReadOnly(bool value);
    public int get_SerializeAs();
    public void set_SerializeAs(int value);
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
}
[ServiceContractAttribute]
[ServiceKnownTypeAttribute("GetKnownTypes", "System.Web.ApplicationServices.KnownTypesProvider")]
[AspNetCompatibilityRequirementsAttribute]
[ServiceBehaviorAttribute]
public class System.Web.ApplicationServices.ProfileService : object {
    private static ProfileService();
    public static void add_ValidatingProperties(EventHandler`1<ValidatingPropertiesEventArgs> value);
    public static void remove_ValidatingProperties(EventHandler`1<ValidatingPropertiesEventArgs> value);
    [OperationContractAttribute]
public Dictionary`2<string, object> GetPropertiesForCurrentUser(IEnumerable`1<string> properties, bool authenticatedUserOnly);
    [OperationContractAttribute]
public Dictionary`2<string, object> GetAllPropertiesForCurrentUser(bool authenticatedUserOnly);
    [OperationContractAttribute]
public Collection`1<string> SetPropertiesForCurrentUser(IDictionary`2<string, object> values, bool authenticatedUserOnly);
    [OperationContractAttribute]
public ProfilePropertyMetadata[] GetPropertiesMetadata();
}
[AspNetCompatibilityRequirementsAttribute]
[ServiceContractAttribute]
[ServiceBehaviorAttribute]
public class System.Web.ApplicationServices.RoleService : object {
    private static RoleService();
    public static void add_SelectingProvider(EventHandler`1<SelectingProviderEventArgs> value);
    public static void remove_SelectingProvider(EventHandler`1<SelectingProviderEventArgs> value);
    [OperationContractAttribute]
public String[] GetRolesForCurrentUser();
    [OperationContractAttribute]
public bool IsCurrentUserInRole(string role);
}
public class System.Web.ApplicationServices.SelectingProviderEventArgs : EventArgs {
    public IPrincipal User { get; }
    public string ProviderName { get; public set; }
    internal SelectingProviderEventArgs(IPrincipal user, string providerName);
    public IPrincipal get_User();
    public string get_ProviderName();
    public void set_ProviderName(string value);
}
public class System.Web.ApplicationServices.ValidatingPropertiesEventArgs : EventArgs {
    public IDictionary`2<string, object> Properties { get; }
    public Collection`1<string> FailedProperties { get; }
    internal ValidatingPropertiesEventArgs(IDictionary`2<string, object> properties);
    public IDictionary`2<string, object> get_Properties();
    public Collection`1<string> get_FailedProperties();
}
public class System.Web.ClientServices.ClientFormsIdentity : object {
    public string Name { get; }
    public bool IsAuthenticated { get; }
    public string AuthenticationType { get; }
    public CookieContainer AuthenticationCookies { get; }
    public MembershipProvider Provider { get; }
    public ClientFormsIdentity(string name, string password, MembershipProvider provider, string authenticationType, bool isAuthenticated, CookieContainer authenticationCookies);
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsAuthenticated();
    public sealed virtual string get_AuthenticationType();
    public CookieContainer get_AuthenticationCookies();
    public MembershipProvider get_Provider();
    public void RevalidateUser();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class System.Web.ClientServices.ClientRolePrincipal : object {
    public IIdentity Identity { get; }
    public ClientRolePrincipal(IIdentity identity);
    public sealed virtual IIdentity get_Identity();
    public sealed virtual bool IsInRole(string role);
}
public static class System.Web.ClientServices.ConnectivityStatus : object {
    public static bool IsOffline { get; public set; }
    public static bool get_IsOffline();
    public static void set_IsOffline(bool value);
}
internal class System.Web.ClientServices.Providers.ClientData : object {
    internal string LastLoggedInUserName { get; internal set; }
    internal DateTime LastLoggedInDateUtc { get; internal set; }
    internal string PasswordHash { get; internal set; }
    internal string PasswordSalt { get; internal set; }
    internal String[] Roles { get; internal set; }
    internal DateTime RolesCachedDateUtc { get; internal set; }
    internal String[] SettingsNames { get; internal set; }
    internal String[] SettingsStoredAs { get; internal set; }
    internal String[] SettingsValues { get; internal set; }
    internal bool SettingsNeedReset { get; internal set; }
    internal bool SettingsCacheIsMoreFresh { get; internal set; }
    internal String[] CookieNames { get; internal set; }
    internal String[] CookieValues { get; internal set; }
    private static ClientData();
    internal string get_LastLoggedInUserName();
    internal void set_LastLoggedInUserName(string value);
    internal DateTime get_LastLoggedInDateUtc();
    internal void set_LastLoggedInDateUtc(DateTime value);
    internal string get_PasswordHash();
    internal void set_PasswordHash(string value);
    internal string get_PasswordSalt();
    internal void set_PasswordSalt(string value);
    internal String[] get_Roles();
    internal void set_Roles(String[] value);
    internal DateTime get_RolesCachedDateUtc();
    internal void set_RolesCachedDateUtc(DateTime value);
    internal String[] get_SettingsNames();
    internal void set_SettingsNames(String[] value);
    internal String[] get_SettingsStoredAs();
    internal void set_SettingsStoredAs(String[] value);
    internal String[] get_SettingsValues();
    internal void set_SettingsValues(String[] value);
    internal bool get_SettingsNeedReset();
    internal void set_SettingsNeedReset(bool value);
    internal bool get_SettingsCacheIsMoreFresh();
    internal void set_SettingsCacheIsMoreFresh(bool value);
    internal String[] get_CookieNames();
    internal void set_CookieNames(String[] value);
    internal String[] get_CookieValues();
    internal void set_CookieValues(String[] value);
    internal void Save();
    internal static ClientData Load(string username, bool useIsolatedStorage);
}
internal static class System.Web.ClientServices.Providers.ClientDataManager : object {
    internal static ClientData GetAppClientData(bool useIsolatedStore);
    internal static ClientData GetUserClientData(string username, bool useIsolatedStore);
    internal static string GetCookie(string username, string cookieName, bool useIsolatedStore);
    internal static string StoreCookie(string username, string cookieName, string cookieValue, bool useIsolatedStore);
    internal static void DeleteAllCookies(string username, bool useIsolatedStore);
}
public class System.Web.ClientServices.Providers.ClientFormsAuthenticationCredentials : object {
    public string UserName { get; public set; }
    public string Password { get; public set; }
    public bool RememberMe { get; public set; }
    public ClientFormsAuthenticationCredentials(string username, string password, bool rememberMe);
    public string get_UserName();
    public void set_UserName(string value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_RememberMe();
    public void set_RememberMe(bool value);
}
public class System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider : MembershipProvider {
    public string ServiceUri { get; public set; }
    public bool EnablePasswordRetrieval { get; }
    public bool EnablePasswordReset { get; }
    public bool RequiresQuestionAndAnswer { get; }
    public string ApplicationName { get; public set; }
    public int MaxInvalidPasswordAttempts { get; }
    public int PasswordAttemptWindow { get; }
    public bool RequiresUniqueEmail { get; }
    public MembershipPasswordFormat PasswordFormat { get; }
    public int MinRequiredPasswordLength { get; }
    public int MinRequiredNonAlphanumericCharacters { get; }
    public string PasswordStrengthRegularExpression { get; }
    public static bool ValidateUser(string username, string password, string serviceUri);
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual bool ValidateUser(string username, string password);
    public bool ValidateUser(string username, string password, bool rememberMe);
    public void Logout();
    public string get_ServiceUri();
    public void set_ServiceUri(string value);
    [CompilerGeneratedAttribute]
public void add_UserValidated(EventHandler`1<UserValidatedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_UserValidated(EventHandler`1<UserValidatedEventArgs> value);
    public virtual bool get_EnablePasswordRetrieval();
    public virtual bool get_EnablePasswordReset();
    public virtual bool get_RequiresQuestionAndAnswer();
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public virtual int get_MaxInvalidPasswordAttempts();
    public virtual int get_PasswordAttemptWindow();
    public virtual bool get_RequiresUniqueEmail();
    public virtual MembershipPasswordFormat get_PasswordFormat();
    public virtual int get_MinRequiredPasswordLength();
    public virtual int get_MinRequiredNonAlphanumericCharacters();
    public virtual string get_PasswordStrengthRegularExpression();
    public virtual MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status);
    public virtual bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer);
    public virtual string GetPassword(string username, string answer);
    public virtual bool ChangePassword(string username, string oldPassword, string newPassword);
    public virtual string ResetPassword(string username, string answer);
    public virtual void UpdateUser(MembershipUser user);
    public virtual bool UnlockUser(string username);
    public virtual MembershipUser GetUser(object providerUserKey, bool userIsOnline);
    public virtual MembershipUser GetUser(string username, bool userIsOnline);
    public virtual string GetUserNameByEmail(string email);
    public virtual bool DeleteUser(string username, bool deleteAllRelatedData);
    public virtual MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, Int32& totalRecords);
    public virtual int GetNumberOfUsersOnline();
    public virtual MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public virtual MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, Int32& totalRecords);
}
public class System.Web.ClientServices.Providers.ClientRoleProvider : RoleProvider {
    public string ServiceUri { get; public set; }
    public string ApplicationName { get; public set; }
    public virtual void Initialize(string name, NameValueCollection config);
    public virtual bool IsUserInRole(string username, string roleName);
    public virtual String[] GetRolesForUser(string username);
    public void ResetCache();
    public string get_ServiceUri();
    public void set_ServiceUri(string value);
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public virtual void CreateRole(string roleName);
    public virtual bool DeleteRole(string roleName, bool throwOnPopulatedRole);
    public virtual bool RoleExists(string roleName);
    public virtual void AddUsersToRoles(String[] usernames, String[] roleNames);
    public virtual void RemoveUsersFromRoles(String[] usernames, String[] roleNames);
    public virtual String[] GetUsersInRole(string roleName);
    public virtual String[] GetAllRoles();
    public virtual String[] FindUsersInRole(string roleName, string usernameToMatch);
}
[SecurityCriticalAttribute]
public class System.Web.ClientServices.Providers.ClientSettingsProvider : SettingsProvider {
    public string ApplicationName { get; public set; }
    public static string ServiceUri { get; public set; }
    private static ClientSettingsProvider();
    [SecuritySafeCriticalAttribute]
public virtual string get_ApplicationName();
    [SecuritySafeCriticalAttribute]
public virtual void set_ApplicationName(string value);
    public static SettingsPropertyCollection GetPropertyMetadata(string serviceUri);
    [SecuritySafeCriticalAttribute]
public virtual void Initialize(string name, NameValueCollection config);
    [SecuritySafeCriticalAttribute]
public virtual SettingsPropertyValueCollection GetPropertyValues(SettingsContext context, SettingsPropertyCollection propertyCollection);
    [SecuritySafeCriticalAttribute]
public virtual void SetPropertyValues(SettingsContext context, SettingsPropertyValueCollection propertyValueCollection);
    [SecuritySafeCriticalAttribute]
public sealed virtual void Reset(SettingsContext context);
    [SecuritySafeCriticalAttribute]
public sealed virtual void Upgrade(SettingsContext context, SettingsPropertyCollection properties);
    [SecuritySafeCriticalAttribute]
public sealed virtual SettingsPropertyValue GetPreviousVersion(SettingsContext context, SettingsProperty property);
    public static string get_ServiceUri();
    public static void set_ServiceUri(string value);
    [CompilerGeneratedAttribute]
public void add_SettingsSaved(EventHandler`1<SettingsSavedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SettingsSaved(EventHandler`1<SettingsSavedEventArgs> value);
    internal static Type[] GetKnownTypes(ICustomAttributeProvider knownTypeAttributeTarget);
}
public class System.Web.ClientServices.Providers.ClientWindowsAuthenticationMembershipProvider : MembershipProvider {
    public bool EnablePasswordRetrieval { get; }
    public bool EnablePasswordReset { get; }
    public bool RequiresQuestionAndAnswer { get; }
    public string ApplicationName { get; public set; }
    public int MaxInvalidPasswordAttempts { get; }
    public int PasswordAttemptWindow { get; }
    public bool RequiresUniqueEmail { get; }
    public MembershipPasswordFormat PasswordFormat { get; }
    public int MinRequiredPasswordLength { get; }
    public int MinRequiredNonAlphanumericCharacters { get; }
    public string PasswordStrengthRegularExpression { get; }
    public virtual bool ValidateUser(string username, string password);
    public void Logout();
    public virtual bool get_EnablePasswordRetrieval();
    public virtual bool get_EnablePasswordReset();
    public virtual bool get_RequiresQuestionAndAnswer();
    public virtual string get_ApplicationName();
    public virtual void set_ApplicationName(string value);
    public virtual int get_MaxInvalidPasswordAttempts();
    public virtual int get_PasswordAttemptWindow();
    public virtual bool get_RequiresUniqueEmail();
    public virtual MembershipPasswordFormat get_PasswordFormat();
    public virtual int get_MinRequiredPasswordLength();
    public virtual int get_MinRequiredNonAlphanumericCharacters();
    public virtual string get_PasswordStrengthRegularExpression();
    public virtual MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, MembershipCreateStatus& status);
    public virtual bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer);
    public virtual string GetPassword(string username, string answer);
    public virtual bool ChangePassword(string username, string oldPassword, string newPassword);
    public virtual string ResetPassword(string username, string answer);
    public virtual void UpdateUser(MembershipUser user);
    public virtual bool UnlockUser(string username);
    public virtual MembershipUser GetUser(object providerUserKey, bool userIsOnline);
    public virtual MembershipUser GetUser(string username, bool userIsOnline);
    public virtual string GetUserNameByEmail(string email);
    public virtual bool DeleteUser(string username, bool deleteAllRelatedData);
    public virtual MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, Int32& totalRecords);
    public virtual int GetNumberOfUsersOnline();
    public virtual MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, Int32& totalRecords);
    public virtual MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, Int32& totalRecords);
}
public interface System.Web.ClientServices.Providers.IClientFormsAuthenticationCredentialsProvider {
    public abstract virtual ClientFormsAuthenticationCredentials GetCredentials();
}
internal static class System.Web.ClientServices.Providers.ProxyHelper : object {
    internal static object CreateWebRequestAndGetResponse(string serverUri, CookieContainer& cookies, string username, string connectionString, string connectionStringProvider, String[] paramNames, Object[] paramValues, Type returnType);
    internal static CookieContainer ConstructCookieContainer(string serverUri, string username, string connectionString, string connectionStringProvider);
    internal static bool DoAnyCookiesExist(string serverUri, string username, string connectionString, string connectionStringProvider);
}
public class System.Web.ClientServices.Providers.SettingsSavedEventArgs : EventArgs {
    public ReadOnlyCollection`1<string> FailedSettingsList { get; }
    public SettingsSavedEventArgs(IEnumerable`1<string> failedSettingsList);
    public ReadOnlyCollection`1<string> get_FailedSettingsList();
}
internal static class System.Web.ClientServices.Providers.SqlHelper : object {
    private static SqlHelper();
    internal static string GetDefaultConnectionString();
    internal static int IsSpecialConnectionString(string connectionString);
    internal static DbConnection GetConnection(string username, string connectionString, string sqlProvider);
    internal static void AddParameter(DbConnection conn, DbCommand cmd, string paramName, object paramValue);
    internal static string GetCookieFromDB(string name, string username, string connectionString, string sqlProvider);
    internal static string StoreCookieInDB(string cookieName, string cookieValue, string username, string connectionString, string sqlProvider);
    internal static void DeleteAllCookies(string username, string connectionString, string sqlProvider);
    internal static string GetFullDBFileName(string username, string extension);
    internal static string GetPartialDBFileName(string username, string extension);
}
internal static class System.Web.ClientServices.Providers.UnsafeNativeMethods : object {
    internal static int InternetSetCookieW(string uri, string cookieName, string cookieValue);
    internal static int InternetGetCookieW(string uri, string cookieName, StringBuilder cookieValue, Int32& dwSize);
}
public class System.Web.ClientServices.Providers.UserValidatedEventArgs : EventArgs {
    public string UserName { get; }
    public UserValidatedEventArgs(string username);
    public string get_UserName();
}
public interface System.Web.Compilation.IWcfReferenceReceiveContextInformation {
    public abstract virtual void ReceiveImportContextInformation(IDictionary`2<string, Byte[]> serviceReferenceExtensionFileContents, IServiceProvider serviceProvider);
}
[SecurityCriticalAttribute]
public class System.Web.Compilation.WCFBuildProvider : BuildProvider {
    internal static string WebRefDirectoryName;
    internal static string SvcMapExtension;
    internal static string DataSvcMapExtension;
    [SecuritySafeCriticalAttribute]
public virtual void GenerateCode(AssemblyBuilder assemblyBuilder);
    internal static string MakeValidTypeNameFromString(string typeName);
}
[SecurityCriticalAttribute]
internal class System.Web.Compilation.WCFModel.AsmxEndpointPickerExtension : object {
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.ServiceModel.Description.IWsdlImportExtension.ImportContract(WsdlImporter importer, WsdlContractConversionContext context);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint(WsdlImporter importer, WsdlEndpointConversionContext context);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.ServiceModel.Description.IWsdlImportExtension.BeforeImport(ServiceDescriptionCollection wsdlDocuments, XmlSchemaSet xmlSchemas, ICollection`1<XmlElement> policy);
}
internal class System.Web.Compilation.WCFModel.ClientOptions : object {
    [XmlElementAttribute]
public bool GenerateAsynchronousMethods { get; public set; }
    [XmlElementAttribute]
public bool GenerateTaskBasedAsynchronousMethod { get; public set; }
    [XmlIgnoreAttribute]
public bool GenerateTaskBasedAsynchronousMethodSpecified { get; }
    [XmlElementAttribute]
public bool EnableDataBinding { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ExcludedType", "System.Web.Compilation.WCFModel.ReferencedType")]
public List`1<ReferencedType> ExcludedTypeList { get; }
    [XmlElementAttribute]
public bool ImportXmlTypes { get; public set; }
    [XmlElementAttribute]
public bool GenerateInternalTypes { get; public set; }
    [XmlElementAttribute]
public bool GenerateMessageContracts { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("NamespaceMapping", "System.Web.Compilation.WCFModel.NamespaceMapping")]
public List`1<NamespaceMapping> NamespaceMappingList { get; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("CollectionMapping", "System.Web.Compilation.WCFModel.ReferencedCollectionType")]
public List`1<ReferencedCollectionType> CollectionMappingList { get; }
    [XmlElementAttribute]
public bool GenerateSerializableTypes { get; public set; }
    [XmlElementAttribute]
public ProxySerializerType Serializer { get; public set; }
    [XmlElementAttribute]
public bool UseSerializerForFaults { get; public set; }
    [XmlIgnoreAttribute]
public bool UseSerializerForFaultsSpecified { get; }
    [XmlElementAttribute]
public bool Wrapped { get; public set; }
    [XmlIgnoreAttribute]
public bool WrappedSpecified { get; }
    [XmlElementAttribute]
public bool ReferenceAllAssemblies { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ReferencedAssembly", "System.Web.Compilation.WCFModel.ReferencedAssembly")]
public List`1<ReferencedAssembly> ReferencedAssemblyList { get; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ReferencedDataContractType", "System.Web.Compilation.WCFModel.ReferencedType")]
public List`1<ReferencedType> ReferencedDataContractTypeList { get; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ServiceContractMapping", "System.Web.Compilation.WCFModel.ContractMapping")]
public List`1<ContractMapping> ServiceContractMappingList { get; }
    public bool get_GenerateAsynchronousMethods();
    public void set_GenerateAsynchronousMethods(bool value);
    public bool get_GenerateTaskBasedAsynchronousMethod();
    public void set_GenerateTaskBasedAsynchronousMethod(bool value);
    public bool get_GenerateTaskBasedAsynchronousMethodSpecified();
    public bool get_EnableDataBinding();
    public void set_EnableDataBinding(bool value);
    public List`1<ReferencedType> get_ExcludedTypeList();
    public bool get_ImportXmlTypes();
    public void set_ImportXmlTypes(bool value);
    public bool get_GenerateInternalTypes();
    public void set_GenerateInternalTypes(bool value);
    public bool get_GenerateMessageContracts();
    public void set_GenerateMessageContracts(bool value);
    public List`1<NamespaceMapping> get_NamespaceMappingList();
    public List`1<ReferencedCollectionType> get_CollectionMappingList();
    public bool get_GenerateSerializableTypes();
    public void set_GenerateSerializableTypes(bool value);
    public ProxySerializerType get_Serializer();
    public void set_Serializer(ProxySerializerType value);
    public bool get_UseSerializerForFaults();
    public void set_UseSerializerForFaults(bool value);
    public bool get_UseSerializerForFaultsSpecified();
    public bool get_Wrapped();
    public void set_Wrapped(bool value);
    public bool get_WrappedSpecified();
    public bool get_ReferenceAllAssemblies();
    public void set_ReferenceAllAssemblies(bool value);
    public List`1<ReferencedAssembly> get_ReferencedAssemblyList();
    public List`1<ReferencedType> get_ReferencedDataContractTypeList();
    public List`1<ContractMapping> get_ServiceContractMappingList();
}
internal class System.Web.Compilation.WCFModel.ContractMapping : object {
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string TargetNamespace { get; public set; }
    [XmlAttributeAttribute]
public string TypeName { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_TargetNamespace();
    public void set_TargetNamespace(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
}
internal class System.Web.Compilation.WCFModel.DataSvcMapFile : MapFile {
    public DataSvcMapFileImpl Impl { get; }
    public string ID { get; public set; }
    public List`1<MetadataSource> MetadataSourceList { get; }
    public List`1<MetadataFile> MetadataList { get; }
    public List`1<ExtensionFile> Extensions { get; }
    public List`1<Parameter> Parameters { get; }
    public DataSvcMapFile(DataSvcMapFileImpl impl);
    public DataSvcMapFileImpl get_Impl();
    public virtual string get_ID();
    public virtual void set_ID(string value);
    public virtual List`1<MetadataSource> get_MetadataSourceList();
    public virtual List`1<MetadataFile> get_MetadataList();
    public virtual List`1<ExtensionFile> get_Extensions();
    public List`1<Parameter> get_Parameters();
}
[XmlRootAttribute]
internal class System.Web.Compilation.WCFModel.DataSvcMapFileImpl : object {
    public static string NamespaceUri;
    [XmlAttributeAttribute]
public string ID { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("MetadataSource", "System.Web.Compilation.WCFModel.MetadataSource")]
public List`1<MetadataSource> MetadataSourceList { get; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("MetadataFile", "System.Web.Compilation.WCFModel.MetadataFile")]
public List`1<MetadataFile> MetadataList { get; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ExtensionFile", "System.Web.Compilation.WCFModel.ExtensionFile")]
public List`1<ExtensionFile> Extensions { get; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("Parameter", "System.Web.Compilation.WCFModel.Parameter")]
public List`1<Parameter> Parameters { get; }
    public string get_ID();
    public void set_ID(string value);
    public List`1<MetadataSource> get_MetadataSourceList();
    public List`1<MetadataFile> get_MetadataList();
    public List`1<ExtensionFile> get_Extensions();
    public List`1<Parameter> get_Parameters();
}
internal class System.Web.Compilation.WCFModel.DataSvcMapFileLoader : MapFileLoader {
    protected string MapFileName { get; }
    public DataSvcMapFileLoader(string mapFilePath);
    protected virtual string get_MapFileName();
    protected virtual MapFile Wrap(object mapFileImpl);
    protected virtual object Unwrap(MapFile mapFile);
    protected virtual XmlSchemaSet GetMapFileSchemaSet();
    protected virtual XmlSerializer GetMapFileSerializer();
    protected virtual TextReader GetMapFileReader();
    protected virtual Byte[] ReadMetadataFile(string name);
    protected virtual Byte[] ReadExtensionFile(string name);
}
internal class System.Web.Compilation.WCFModel.DataSvcMapFileXmlSerializer.DataSvcMapFileImplSerializer : XmlSerializer1 {
    public virtual bool CanDeserialize(XmlReader xmlReader);
    protected virtual void Serialize(object objectToSerialize, XmlSerializationWriter writer);
    protected virtual object Deserialize(XmlSerializationReader reader);
}
internal class System.Web.Compilation.WCFModel.DataSvcMapFileXmlSerializer.XmlSerializationReaderDataSvcMapFileImpl : XmlSerializationReader {
    public object Read9_ReferenceGroup();
    protected virtual void InitCallbacks();
    protected virtual void InitIDs();
}
internal class System.Web.Compilation.WCFModel.DataSvcMapFileXmlSerializer.XmlSerializationWriterDataSvcMapFileImpl : XmlSerializationWriter {
    public void Write9_ReferenceGroup(object o);
    protected virtual void InitCallbacks();
}
internal abstract class System.Web.Compilation.WCFModel.DataSvcMapFileXmlSerializer.XmlSerializer1 : XmlSerializer {
    protected virtual XmlSerializationReader CreateReader();
    protected virtual XmlSerializationWriter CreateWriter();
}
internal class System.Web.Compilation.WCFModel.DataSvcMapFileXmlSerializer.XmlSerializerContract : XmlSerializerImplementation {
    public XmlSerializationReader Reader { get; }
    public XmlSerializationWriter Writer { get; }
    public Hashtable ReadMethods { get; }
    public Hashtable WriteMethods { get; }
    public Hashtable TypedSerializers { get; }
    public virtual XmlSerializationReader get_Reader();
    public virtual XmlSerializationWriter get_Writer();
    public virtual Hashtable get_ReadMethods();
    public virtual Hashtable get_WriteMethods();
    public virtual Hashtable get_TypedSerializers();
    public virtual bool CanSerialize(Type type);
    public virtual XmlSerializer GetSerializer(Type type);
}
internal class System.Web.Compilation.WCFModel.ExtensionFile : ExternalFile {
    [XmlIgnoreAttribute]
public Byte[] ContentBuffer { get; public set; }
    internal bool IsBufferValid { get; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    public ExtensionFile(string name, string fileName, Byte[] content);
    public Byte[] get_ContentBuffer();
    public void set_ContentBuffer(Byte[] value);
    internal bool get_IsBufferValid();
    public string get_Name();
    public void set_Name(string value);
    internal void CleanUpContent();
}
internal class System.Web.Compilation.WCFModel.ExternalFile : object {
    [XmlIgnoreAttribute]
public Exception ErrorInLoading { get; public set; }
    [XmlAttributeAttribute]
public string FileName { get; public set; }
    [XmlIgnoreAttribute]
public bool IsExistingFile { get; public set; }
    public ExternalFile(string fileName);
    public Exception get_ErrorInLoading();
    public void set_ErrorInLoading(Exception value);
    public string get_FileName();
    public void set_FileName(string value);
    public bool get_IsExistingFile();
    public void set_IsExistingFile(bool value);
    public static bool IsLocalFileName(string fileName);
}
internal class System.Web.Compilation.WCFModel.GeneratedContractType : object {
    [XmlAttributeAttribute]
public string TargetNamespace { get; public set; }
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string ContractType { get; public set; }
    [XmlAttributeAttribute]
public string ConfigurationName { get; public set; }
    public GeneratedContractType(string targetNamespace, string portName, string contractType, string configurationName);
    public string get_TargetNamespace();
    public void set_TargetNamespace(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_ContractType();
    public void set_ContractType(string value);
    public string get_ConfigurationName();
    public void set_ConfigurationName(string value);
}
[SecurityCriticalAttribute]
internal class System.Web.Compilation.WCFModel.HttpBindingExtension : object {
    public bool IsHttpBindingContract(ContractDescription contract);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.ServiceModel.Description.IWsdlImportExtension.BeforeImport(ServiceDescriptionCollection wsdlDocuments, XmlSchemaSet xmlSchemas, ICollection`1<XmlElement> policy);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.ServiceModel.Description.IWsdlImportExtension.ImportContract(WsdlImporter importer, WsdlContractConversionContext context);
    [SecuritySafeCriticalAttribute]
private sealed virtual override void System.ServiceModel.Description.IWsdlImportExtension.ImportEndpoint(WsdlImporter importer, WsdlEndpointConversionContext context);
}
internal interface System.Web.Compilation.WCFModel.IContractGeneratorReferenceTypeLoader {
    public abstract virtual Type LoadType(string typeName);
    public abstract virtual Assembly LoadAssembly(string assemblyName);
    public abstract virtual void LoadAllAssemblies(IEnumerable`1& loadedAssemblies, IEnumerable`1& loadingErrors);
}
internal interface System.Web.Compilation.WCFModel.IContractGeneratorReferenceTypeLoader2 {
    public abstract virtual IEnumerable`1<Type> LoadExportedTypes(Assembly assembly);
}
internal abstract class System.Web.Compilation.WCFModel.MapFile : object {
    public IEnumerable`1<ProxyGenerationError> LoadErrors { get; internal set; }
    public string ID { get; public set; }
    public List`1<MetadataSource> MetadataSourceList { get; }
    public List`1<MetadataFile> MetadataList { get; }
    public List`1<ExtensionFile> Extensions { get; }
    public IEnumerable`1<ProxyGenerationError> get_LoadErrors();
    internal void set_LoadErrors(IEnumerable`1<ProxyGenerationError> value);
    public abstract virtual string get_ID();
    public abstract virtual void set_ID(string value);
    public abstract virtual List`1<MetadataSource> get_MetadataSourceList();
    public abstract virtual List`1<MetadataFile> get_MetadataList();
    public abstract virtual List`1<ExtensionFile> get_Extensions();
}
internal abstract class System.Web.Compilation.WCFModel.MapFileLoader : object {
    protected string MapFileName { get; }
    public void SaveMapFile(MapFile mapFile);
    public MapFile LoadMapFile();
    public void LoadMetadataFile(MetadataFile metadataFile);
    public void LoadExtensionFile(ExtensionFile extensionFile);
    protected abstract virtual string get_MapFileName();
    protected abstract virtual MapFile Wrap(object mapFileImpl);
    protected abstract virtual object Unwrap(MapFile mapFile);
    protected abstract virtual XmlSchemaSet GetMapFileSchemaSet();
    protected abstract virtual XmlSerializer GetMapFileSerializer();
    protected virtual TextReader GetMapFileReader();
    protected virtual TextWriter GetMapFileWriter();
    protected virtual Byte[] ReadMetadataFile(string name);
    protected virtual void WriteMetadataFile(MetadataFile file);
    protected virtual Byte[] ReadExtensionFile(string name);
    protected virtual void WriteExtensionFile(ExtensionFile file);
}
internal class System.Web.Compilation.WCFModel.MetadataFile : ExternalFile {
    public static string DEFAULT_FILE_NAME;
    public Byte[] BinaryContent { get; }
    public string Content { get; }
    [XmlAttributeAttribute("MetadataType")]
public MetadataType FileType { get; public set; }
    [XmlAttributeAttribute]
public string ID { get; public set; }
    [XmlAttributeAttribute]
public bool Ignore { get; public set; }
    [XmlIgnoreAttribute]
public bool IgnoreSpecified { get; public set; }
    [XmlAttributeAttribute]
public bool IsMergeResult { get; public set; }
    [XmlIgnoreAttribute]
public bool IsMergeResultSpecified { get; public set; }
    public DiscoveryDocument MetadataDiscoveryDocument { get; }
    [XmlIgnoreAttribute]
public Exception MetadataFormatError { get; }
    public ServiceDescription MetadataServiceDescription { get; }
    public XmlSchema MetadataXmlSchema { get; }
    public XmlDocument MetadataXmlDocument { get; }
    [XmlAttributeAttribute]
public int SourceId { get; public set; }
    [XmlIgnoreAttribute]
public bool SourceIdSpecified { get; public set; }
    [XmlAttributeAttribute]
public string SourceUrl { get; public set; }
    public string TargetNamespace { get; }
    public MetadataFile(string name, string url, string content);
    public MetadataFile(string name, string url, Byte[] byteContent);
    public Byte[] get_BinaryContent();
    public string get_Content();
    public MetadataType get_FileType();
    public void set_FileType(MetadataType value);
    public string get_ID();
    public void set_ID(string value);
    public bool get_Ignore();
    public void set_Ignore(bool value);
    public bool get_IgnoreSpecified();
    public void set_IgnoreSpecified(bool value);
    public bool get_IsMergeResult();
    public void set_IsMergeResult(bool value);
    public bool get_IsMergeResultSpecified();
    public void set_IsMergeResultSpecified(bool value);
    public DiscoveryDocument get_MetadataDiscoveryDocument();
    public Exception get_MetadataFormatError();
    public ServiceDescription get_MetadataServiceDescription();
    public XmlSchema get_MetadataXmlSchema();
    public XmlDocument get_MetadataXmlDocument();
    public int get_SourceId();
    public void set_SourceId(int value);
    public bool get_SourceIdSpecified();
    public void set_SourceIdSpecified(bool value);
    public string get_SourceUrl();
    public void set_SourceUrl(string value);
    public string get_TargetNamespace();
    public string GetDefaultExtension();
    public string GetDefaultFileName();
    internal void LoadContent(Byte[] byteContent);
    internal void LoadContent(string content);
    internal void CleanUpContent();
    internal MetadataSection CreateMetadataSection();
    internal string GetMetadataSourceUrl();
}
internal class System.Web.Compilation.WCFModel.MetadataSource : object {
    [XmlAttributeAttribute]
public string Address { get; public set; }
    [XmlAttributeAttribute]
public string Protocol { get; public set; }
    [XmlAttributeAttribute]
public int SourceId { get; public set; }
    public MetadataSource(string protocol, string address, int sourceId);
    public string get_Address();
    public void set_Address(string value);
    public string get_Protocol();
    public void set_Protocol(string value);
    public int get_SourceId();
    public void set_SourceId(int value);
}
internal class System.Web.Compilation.WCFModel.NamespaceMapping : object {
    [XmlAttributeAttribute]
public string TargetNamespace { get; public set; }
    [XmlAttributeAttribute]
public string ClrNamespace { get; public set; }
    public string get_TargetNamespace();
    public void set_TargetNamespace(string value);
    public string get_ClrNamespace();
    public void set_ClrNamespace(string value);
}
internal class System.Web.Compilation.WCFModel.Parameter : object {
    [XmlAttributeAttribute]
public string Name { get; public set; }
    [XmlAttributeAttribute]
public string Value { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
internal class System.Web.Compilation.WCFModel.ProxyGenerationError : object {
    public GeneratorState ErrorGeneratorState { get; }
    public bool IsWarning { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Message { get; }
    public string MetadataFile { get; }
    public ProxyGenerationError(MetadataConversionError errorMessage);
    public ProxyGenerationError(GeneratorState generatorState, string fileName, Exception errorException);
    public ProxyGenerationError(GeneratorState generatorState, string fileName, Exception errorException, bool isWarning);
    public ProxyGenerationError(GeneratorState generatorState, string fileName, XmlException errorException);
    public ProxyGenerationError(GeneratorState generatorState, string fileName, XmlSchemaException errorException);
    public ProxyGenerationError(GeneratorState generatorState, string fileName, XmlSchemaException errorException, bool isWarning);
    public GeneratorState get_ErrorGeneratorState();
    public bool get_IsWarning();
    public int get_LineNumber();
    public int get_LinePosition();
    public string get_Message();
    public string get_MetadataFile();
}
internal class System.Web.Compilation.WCFModel.ReferencedAssembly : object {
    [XmlAttributeAttribute]
public string AssemblyName { get; public set; }
    public ReferencedAssembly(string assemblyName);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
}
internal class System.Web.Compilation.WCFModel.ReferencedCollectionType : object {
    [XmlAttributeAttribute]
public string TypeName { get; public set; }
    [XmlAttributeAttribute]
public CollectionCategory Category { get; public set; }
    public string get_TypeName();
    public void set_TypeName(string value);
    public CollectionCategory get_Category();
    public void set_Category(CollectionCategory value);
}
internal class System.Web.Compilation.WCFModel.ReferencedType : object {
    [XmlAttributeAttribute]
public string TypeName { get; public set; }
    public string get_TypeName();
    public void set_TypeName(string value);
}
internal class System.Web.Compilation.WCFModel.SchemaMerger : object {
    private static SchemaMerger();
    internal static void MergeSchemas(IEnumerable`1<XmlSchema> schemaList, IList`1<ProxyGenerationError> importErrors, IEnumerable`1& duplicatedSchemas);
}
internal class System.Web.Compilation.WCFModel.SvcMapFile : MapFile {
    public SvcMapFileImpl Impl { get; }
    public string ID { get; public set; }
    public List`1<MetadataSource> MetadataSourceList { get; }
    public List`1<MetadataFile> MetadataList { get; }
    public List`1<ExtensionFile> Extensions { get; }
    public ClientOptions ClientOptions { get; }
    public SvcMapFile(SvcMapFileImpl impl);
    public SvcMapFileImpl get_Impl();
    public virtual string get_ID();
    public virtual void set_ID(string value);
    public virtual List`1<MetadataSource> get_MetadataSourceList();
    public virtual List`1<MetadataFile> get_MetadataList();
    public virtual List`1<ExtensionFile> get_Extensions();
    public ClientOptions get_ClientOptions();
}
[XmlRootAttribute]
internal class System.Web.Compilation.WCFModel.SvcMapFileImpl : object {
    public static string NamespaceUri;
    [XmlAttributeAttribute]
public string ID { get; public set; }
    [XmlElementAttribute]
public ClientOptions ClientOptions { get; public set; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("MetadataSource", "System.Web.Compilation.WCFModel.MetadataSource")]
public List`1<MetadataSource> MetadataSourceList { get; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("MetadataFile", "System.Web.Compilation.WCFModel.MetadataFile")]
public List`1<MetadataFile> MetadataList { get; }
    [XmlArrayAttribute]
[XmlArrayItemAttribute("ExtensionFile", "System.Web.Compilation.WCFModel.ExtensionFile")]
public List`1<ExtensionFile> Extensions { get; }
    public string get_ID();
    public void set_ID(string value);
    public ClientOptions get_ClientOptions();
    public void set_ClientOptions(ClientOptions value);
    public List`1<MetadataSource> get_MetadataSourceList();
    public List`1<MetadataFile> get_MetadataList();
    public List`1<ExtensionFile> get_Extensions();
}
internal class System.Web.Compilation.WCFModel.SvcMapFileLoader : MapFileLoader {
    protected string MapFileName { get; }
    public SvcMapFileLoader(string mapFilePath);
    protected virtual string get_MapFileName();
    protected virtual MapFile Wrap(object mapFileImpl);
    protected virtual object Unwrap(MapFile mapFile);
    protected virtual XmlSchemaSet GetMapFileSchemaSet();
    protected virtual XmlSerializer GetMapFileSerializer();
    protected virtual TextReader GetMapFileReader();
    protected virtual Byte[] ReadMetadataFile(string name);
    protected virtual Byte[] ReadExtensionFile(string name);
}
internal class System.Web.Compilation.WCFModel.SvcMapFileXmlSerializer.SvcMapFileImplSerializer : XmlSerializer1 {
    public virtual bool CanDeserialize(XmlReader xmlReader);
    protected virtual void Serialize(object objectToSerialize, XmlSerializationWriter writer);
    protected virtual object Deserialize(XmlSerializationReader reader);
}
internal class System.Web.Compilation.WCFModel.SvcMapFileXmlSerializer.XmlSerializationReaderSvcMapFileImpl : XmlSerializationReader {
    public object Read16_ReferenceGroup();
    protected virtual void InitCallbacks();
    protected virtual void InitIDs();
}
internal class System.Web.Compilation.WCFModel.SvcMapFileXmlSerializer.XmlSerializationWriterSvcMapFileImpl : XmlSerializationWriter {
    public void Write16_ReferenceGroup(object o);
    protected virtual void InitCallbacks();
}
internal abstract class System.Web.Compilation.WCFModel.SvcMapFileXmlSerializer.XmlSerializer1 : XmlSerializer {
    protected virtual XmlSerializationReader CreateReader();
    protected virtual XmlSerializationWriter CreateWriter();
}
internal class System.Web.Compilation.WCFModel.SvcMapFileXmlSerializer.XmlSerializerContract : XmlSerializerImplementation {
    public XmlSerializationReader Reader { get; }
    public XmlSerializationWriter Writer { get; }
    public Hashtable ReadMethods { get; }
    public Hashtable WriteMethods { get; }
    public Hashtable TypedSerializers { get; }
    public virtual XmlSerializationReader get_Reader();
    public virtual XmlSerializationWriter get_Writer();
    public virtual Hashtable get_ReadMethods();
    public virtual Hashtable get_WriteMethods();
    public virtual Hashtable get_TypedSerializers();
    public virtual bool CanSerialize(Type type);
    public virtual XmlSerializer GetSerializer(Type type);
}
[SecurityCriticalAttribute]
internal class System.Web.Compilation.WCFModel.VSWCFServiceContractGenerator : object {
    public IEnumerable`1<Binding> BindingCollection { get; }
    public IEnumerable`1<GeneratedContractType> ProxyGeneratedContractTypes { get; }
    public IEnumerable`1<ProxyGenerationError> ProxyGenerationErrors { get; }
    public IEnumerable`1<ProxyGenerationError> ImportErrors { get; }
    public IEnumerable`1<ContractDescription> ContractCollection { get; }
    public IEnumerable`1<ServiceEndpoint> EndpointCollection { get; }
    public Dictionary`2<ServiceEndpoint, ChannelEndpointElement> EndpointMap { get; }
    public Configuration TargetConfiguration { get; }
    public CodeCompileUnit TargetCompileUnit { get; }
    protected VSWCFServiceContractGenerator(List`1<ProxyGenerationError> importErrors, CodeCompileUnit targetCompileUnit, Configuration targetConfiguration, IEnumerable`1<Binding> bindingCollection, IEnumerable`1<ContractDescription> contractCollection, List`1<ServiceEndpoint> serviceEndpointList, Dictionary`2<ServiceEndpoint, ChannelEndpointElement> serviceEndpointToChannelEndpointElementMap, List`1<GeneratedContractType> proxyGeneratedContractTypes, IEnumerable`1<ProxyGenerationError> proxyGenerationErrors);
    private static VSWCFServiceContractGenerator();
    public IEnumerable`1<Binding> get_BindingCollection();
    public IEnumerable`1<GeneratedContractType> get_ProxyGeneratedContractTypes();
    public IEnumerable`1<ProxyGenerationError> get_ProxyGenerationErrors();
    public IEnumerable`1<ProxyGenerationError> get_ImportErrors();
    public IEnumerable`1<ContractDescription> get_ContractCollection();
    public IEnumerable`1<ServiceEndpoint> get_EndpointCollection();
    public Dictionary`2<ServiceEndpoint, ChannelEndpointElement> get_EndpointMap();
    public Configuration get_TargetConfiguration();
    public CodeCompileUnit get_TargetCompileUnit();
    public static VSWCFServiceContractGenerator GenerateCodeAndConfiguration(SvcMapFile svcMapFile, Configuration toolConfiguration, CodeDomProvider codeDomProvider, string proxyNamespace, Configuration targetConfiguration, string configurationNamespace, IServiceProvider serviceProviderForImportExtensions, IContractGeneratorReferenceTypeLoader typeLoader, int targetFrameworkVersion, Type typedDataSetSchemaImporterExtension);
    protected static ServiceContractGenerator CreateContractGenerator(ClientOptions proxyOptions, WsdlImporter wsdlImporter, CodeCompileUnit targetCompileUnit, string proxyNamespace, Configuration targetConfiguration, IContractGeneratorReferenceTypeLoader typeLoader, int targetFrameworkVersion, IList`1<ProxyGenerationError> importErrors);
    protected static void GenerateProxy(WsdlImporter importer, ServiceContractGenerator contractGenerator, CodeCompileUnit targetCompileUnit, string proxyNamespace, string configurationNamespace, IEnumerable`1<ContractDescription> contractCollection, IEnumerable`1<Binding> bindingCollection, List`1<ServiceEndpoint> serviceEndpointList, IList`1<ProxyGenerationError> proxyGenerationErrors, Dictionary`2& serviceEndpointToChannelEndpointElementMap, List`1& proxyGeneratedContractTypes);
    protected static XmlSerializerImportOptions CreateXmlSerializerImportOptions(ClientOptions proxyOptions, CodeCompileUnit targetCompileUnit, CodeDomProvider codeDomProvider, string proxyNamespace, Type typedDataSetSchemaImporterExtension);
    protected static XsdDataContractImporter CreateDataContractImporter(ClientOptions proxyOptions, CodeCompileUnit targetCompileUnit, CodeDomProvider codeDomProvider, string proxyNamespace, IContractGeneratorReferenceTypeLoader typeLoader, int targetFrameworkVersion, IList`1<ProxyGenerationError> importErrors);
    protected static IEnumerable`1<Type> LoadSharedDataContractTypes(ClientOptions proxyOptions, IContractGeneratorReferenceTypeLoader typeLoader, int targetFrameworkVersion, IList`1<ProxyGenerationError> importErrors);
    protected static IEnumerable`1<Type> LoadSharedCollectionTypes(ClientOptions proxyOptions, IContractGeneratorReferenceTypeLoader typeLoader, IList`1<ProxyGenerationError> importErrors);
    protected static WsdlImporter CreateWsdlImporter(SvcMapFile svcMapFile, Configuration toolConfiguration, CodeCompileUnit targetCompileUnit, CodeDomProvider codeDomProvider, string targetNamespace, IServiceProvider serviceProviderForImportExtensions, IContractGeneratorReferenceTypeLoader typeLoader, int targetFrameworkVersion, IList`1<ProxyGenerationError> importErrors, Type typedDataSetSchemaImporterExtension);
    internal static void ProvideImportExtensionsWithContextInformation(SvcMapFile svcMapFile, IServiceProvider serviceProviderForImportExtensions, IEnumerable`1<IWsdlImportExtension> wsdlImportExtensions, IEnumerable`1<IPolicyImportExtension> policyImportExtensions);
    protected static List`1<MetadataSection> CollectMetadataDocuments(IEnumerable`1<MetadataFile> metadataList, IList`1<ProxyGenerationError> importErrors);
    internal static ProxyGenerationError ConvertMetadataErrorToProxyGenerationError(MetadataFile metadataItem, Exception ex);
    protected static void ImportWCFModel(WsdlImporter importer, CodeCompileUnit compileUnit, IList`1<ProxyGenerationError> generationErrors, List`1& serviceEndpointList, IEnumerable`1& bindingCollection, IEnumerable`1& contractCollection);
    internal static bool ContainsHttpBindings(ServiceDescription wsdlFile);
}
internal class System.Web.Compilation.WCFModel.WsdlInspector : object {
    internal static void CheckDuplicatedWsdlItems(ICollection`1<ServiceDescription> wsdlFiles, IList`1<ProxyGenerationError> importErrors);
}
internal class System.Web.Compilation.WCFModel.XmlStrings : object {
}
public class System.Web.Configuration.Converter : ConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("type")]
[StringValidatorAttribute]
public string Type { get; public set; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    private static Converter();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public string get_Type();
    public void set_Type(string value);
    public string get_Name();
    public void set_Name(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Web.Configuration.Converter")]
public class System.Web.Configuration.ConvertersCollection : ConfigurationElementCollection {
    protected ConfigurationPropertyCollection Properties { get; }
    public Converter Item { get; public set; }
    private static ConvertersCollection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public Converter get_Item(int index);
    public void set_Item(int index, Converter value);
    public void Add(Converter converter);
    public void Remove(Converter converter);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    [SecuritySafeCriticalAttribute]
internal JavaScriptConverter[] CreateConverters();
}
public class System.Web.Configuration.ScriptingAuthenticationServiceSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    [ConfigurationPropertyAttribute("requireSSL")]
public bool RequireSSL { get; public set; }
    private static ScriptingAuthenticationServiceSection();
    internal static ScriptingAuthenticationServiceSection GetConfigurationSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public bool get_RequireSSL();
    public void set_RequireSSL(bool value);
}
public class System.Web.Configuration.ScriptingJsonSerializationSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("converters")]
public ConvertersCollection Converters { get; }
    [ConfigurationPropertyAttribute("recursionLimit")]
public int RecursionLimit { get; public set; }
    [ConfigurationPropertyAttribute("maxJsonLength")]
public int MaxJsonLength { get; public set; }
    private static ScriptingJsonSerializationSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public ConvertersCollection get_Converters();
    public int get_RecursionLimit();
    public void set_RecursionLimit(int value);
    public int get_MaxJsonLength();
    public void set_MaxJsonLength(int value);
}
public class System.Web.Configuration.ScriptingProfileServiceSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    [ConfigurationPropertyAttribute("readAccessProperties")]
public String[] ReadAccessProperties { get; public set; }
    [ConfigurationPropertyAttribute("writeAccessProperties")]
public String[] WriteAccessProperties { get; public set; }
    private static ScriptingProfileServiceSection();
    internal static ScriptingProfileServiceSection GetConfigurationSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public String[] get_ReadAccessProperties();
    public void set_ReadAccessProperties(String[] value);
    public String[] get_WriteAccessProperties();
    public void set_WriteAccessProperties(String[] value);
}
public class System.Web.Configuration.ScriptingRoleServiceSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    private static ScriptingRoleServiceSection();
    internal static ScriptingRoleServiceSection GetConfigurationSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
public class System.Web.Configuration.ScriptingScriptResourceHandlerSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("enableCaching")]
public bool EnableCaching { get; public set; }
    [ConfigurationPropertyAttribute("enableCompression")]
public bool EnableCompression { get; public set; }
    private static ScriptingScriptResourceHandlerSection();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_EnableCaching();
    public void set_EnableCaching(bool value);
    public bool get_EnableCompression();
    public void set_EnableCompression(bool value);
}
public class System.Web.Configuration.ScriptingSectionGroup : ConfigurationSectionGroup {
    [ConfigurationPropertyAttribute("webServices")]
public ScriptingWebServicesSectionGroup WebServices { get; }
    [ConfigurationPropertyAttribute("scriptResourceHandler")]
public ScriptingScriptResourceHandlerSection ScriptResourceHandler { get; }
    public ScriptingWebServicesSectionGroup get_WebServices();
    public ScriptingScriptResourceHandlerSection get_ScriptResourceHandler();
}
public class System.Web.Configuration.ScriptingWebServicesSectionGroup : ConfigurationSectionGroup {
    [ConfigurationPropertyAttribute("jsonSerialization")]
public ScriptingJsonSerializationSection JsonSerialization { get; }
    [ConfigurationPropertyAttribute("profileService")]
public ScriptingProfileServiceSection ProfileService { get; }
    [ConfigurationPropertyAttribute("authenticationService")]
public ScriptingAuthenticationServiceSection AuthenticationService { get; }
    [ConfigurationPropertyAttribute("roleService")]
public ScriptingRoleServiceSection RoleService { get; }
    public ScriptingJsonSerializationSection get_JsonSerialization();
    public ScriptingProfileServiceSection get_ProfileService();
    public ScriptingAuthenticationServiceSection get_AuthenticationService();
    public ScriptingRoleServiceSection get_RoleService();
}
public class System.Web.Configuration.SystemWebExtensionsSectionGroup : ConfigurationSectionGroup {
    [ConfigurationPropertyAttribute("scripting")]
public ScriptingSectionGroup Scripting { get; }
    public ScriptingSectionGroup get_Scripting();
}
public enum System.Web.DynamicData.DynamicDataSourceOperation : Enum {
    public int value__;
    public static DynamicDataSourceOperation Delete;
    public static DynamicDataSourceOperation Insert;
    public static DynamicDataSourceOperation Select;
    public static DynamicDataSourceOperation Update;
    public static DynamicDataSourceOperation ContextCreate;
}
public class System.Web.DynamicData.DynamicValidatorEventArgs : EventArgs {
    public Exception Exception { get; }
    public DynamicDataSourceOperation Operation { get; }
    public DynamicValidatorEventArgs(Exception exception, DynamicDataSourceOperation operation);
    public Exception get_Exception();
    public DynamicDataSourceOperation get_Operation();
}
public interface System.Web.DynamicData.IDynamicDataSource {
    public bool AutoGenerateWhereClause { get; public set; }
    public Type ContextType { get; public set; }
    public bool EnableDelete { get; public set; }
    public bool EnableInsert { get; public set; }
    public bool EnableUpdate { get; public set; }
    public string EntitySetName { get; public set; }
    public string Where { get; public set; }
    public ParameterCollection WhereParameters { get; }
    public abstract virtual bool get_AutoGenerateWhereClause();
    public abstract virtual void set_AutoGenerateWhereClause(bool value);
    public abstract virtual Type get_ContextType();
    public abstract virtual void set_ContextType(Type value);
    public abstract virtual bool get_EnableDelete();
    public abstract virtual void set_EnableDelete(bool value);
    public abstract virtual bool get_EnableInsert();
    public abstract virtual void set_EnableInsert(bool value);
    public abstract virtual bool get_EnableUpdate();
    public abstract virtual void set_EnableUpdate(bool value);
    public abstract virtual string get_EntitySetName();
    public abstract virtual void set_EntitySetName(string value);
    public abstract virtual string get_Where();
    public abstract virtual void set_Where(string value);
    public abstract virtual ParameterCollection get_WhereParameters();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Exception(EventHandler`1<DynamicValidatorEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Exception(EventHandler`1<DynamicValidatorEventArgs> value);
}
public interface System.Web.DynamicData.IDynamicValidatorException {
    public IDictionary`2<string, Exception> InnerExceptions { get; }
    public abstract virtual IDictionary`2<string, Exception> get_InnerExceptions();
}
internal class System.Web.Globalization.ClientCultureInfo : object {
    public string name;
    public NumberFormatInfo numberFormat;
    public DateTimeFormatInfo dateTimeFormat;
    public Object[] eras;
    private static ClientCultureInfo();
    internal Tuple`2<string, string> GetClientCultureScriptBlock();
    internal static Tuple`2<string, string> GetClientCultureScriptBlock(CultureInfo cultureInfo);
}
internal interface System.Web.Handlers.IScriptResourceHandler {
    public abstract virtual string GetScriptResourceUrl(Assembly assembly, string resourceName, CultureInfo culture, bool zip);
    public abstract virtual string GetScriptResourceUrl(List`1<Tuple`2<Assembly, List`1<Tuple`2<string, CultureInfo>>>> assemblyResourceLists, bool zip);
    public abstract virtual string GetEmptyPageUrl(string title);
}
public class System.Web.Handlers.ScriptModule : object {
    private static ScriptModule();
    protected virtual void Dispose();
    protected virtual void Init(HttpApplication app);
    private sealed virtual override void System.Web.IHttpModule.Dispose();
    private sealed virtual override void System.Web.IHttpModule.Init(HttpApplication context);
}
public class System.Web.Handlers.ScriptResourceHandler : object {
    protected bool IsReusable { get; }
    private bool System.Web.IHttpHandler.IsReusable { get; }
    private static ScriptResourceHandler();
    internal static CultureInfo DetermineNearestAvailableCulture(Assembly assembly, string scriptResourceName, CultureInfo culture);
    internal static string GetEmptyPageUrl(string title);
    internal static string GetScriptResourceUrl(Assembly assembly, string resourceName, CultureInfo culture, bool zip);
    internal static string GetScriptResourceUrl(List`1<Tuple`2<Assembly, List`1<Tuple`2<string, CultureInfo>>>> assemblyResourceLists, bool zip);
    protected virtual bool get_IsReusable();
    internal static bool IsScriptResourceRequest(string path);
    [SecuritySafeCriticalAttribute]
protected virtual void ProcessRequest(HttpContext context);
    internal static void ProcessRequest(HttpContextBase context, VirtualFileReader fileReader, Action`2<string, Exception> logAction, bool validatePath);
    internal static void SetScriptResourceHandler(IScriptResourceHandler scriptResourceHandler);
    private sealed virtual override void System.Web.IHttpHandler.ProcessRequest(HttpContext context);
    private sealed virtual override bool System.Web.IHttpHandler.get_IsReusable();
}
internal abstract class System.Web.HttpResponseInternalBase : HttpResponseBase {
    public virtual TextWriter SwitchWriter(TextWriter writer);
}
internal class System.Web.HttpResponseInternalWrapper : HttpResponseInternalBase {
    public HttpCachePolicyBase Cache { get; }
    public string ContentType { get; public set; }
    public Stream Filter { get; public set; }
    public TextWriter Output { get; }
    public bool Buffer { get; public set; }
    public bool BufferOutput { get; public set; }
    public string CacheControl { get; public set; }
    public string Charset { get; public set; }
    public Encoding ContentEncoding { get; public set; }
    public HttpCookieCollection Cookies { get; }
    public int Expires { get; public set; }
    public DateTime ExpiresAbsolute { get; public set; }
    public NameValueCollection Headers { get; }
    public Encoding HeaderEncoding { get; public set; }
    public bool IsClientConnected { get; }
    public bool IsRequestBeingRedirected { get; }
    public string RedirectLocation { get; public set; }
    public string Status { get; public set; }
    public int StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public int SubStatusCode { get; public set; }
    public bool SuppressContent { get; public set; }
    public bool TrySkipIisCustomErrors { get; public set; }
    public HttpResponseInternalWrapper(HttpResponse httpResponse);
    public virtual HttpCachePolicyBase get_Cache();
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual Stream get_Filter();
    public virtual void set_Filter(Stream value);
    public virtual TextWriter get_Output();
    public virtual void Clear();
    public virtual void End();
    public virtual void Write(string s);
    public virtual bool get_Buffer();
    public virtual void set_Buffer(bool value);
    public virtual bool get_BufferOutput();
    public virtual void set_BufferOutput(bool value);
    public virtual string get_CacheControl();
    public virtual void set_CacheControl(string value);
    public virtual string get_Charset();
    public virtual void set_Charset(string value);
    public virtual Encoding get_ContentEncoding();
    public virtual void set_ContentEncoding(Encoding value);
    public virtual HttpCookieCollection get_Cookies();
    public virtual int get_Expires();
    public virtual void set_Expires(int value);
    public virtual DateTime get_ExpiresAbsolute();
    public virtual void set_ExpiresAbsolute(DateTime value);
    public virtual NameValueCollection get_Headers();
    public virtual Encoding get_HeaderEncoding();
    public virtual void set_HeaderEncoding(Encoding value);
    public virtual bool get_IsClientConnected();
    public virtual bool get_IsRequestBeingRedirected();
    public virtual string get_RedirectLocation();
    public virtual void set_RedirectLocation(string value);
    public virtual string get_Status();
    public virtual void set_Status(string value);
    public virtual int get_StatusCode();
    public virtual void set_StatusCode(int value);
    public virtual string get_StatusDescription();
    public virtual void set_StatusDescription(string value);
    public virtual int get_SubStatusCode();
    public virtual void set_SubStatusCode(int value);
    public virtual bool get_SuppressContent();
    public virtual void set_SuppressContent(bool value);
    public virtual bool get_TrySkipIisCustomErrors();
    public virtual void set_TrySkipIisCustomErrors(bool value);
    public virtual void AddCacheItemDependency(string cacheKey);
    public virtual void AddCacheItemDependencies(ArrayList cacheKeys);
    public virtual void AddCacheItemDependencies(String[] cacheKeys);
    public virtual void AddCacheDependency(CacheDependency[] dependencies);
    public virtual void AddFileDependency(string filename);
    public virtual void AddFileDependencies(ArrayList filenames);
    public virtual void AddFileDependencies(String[] filenames);
    public virtual void AppendCookie(HttpCookie cookie);
    public virtual void AppendHeader(string name, string value);
    public virtual void AppendToLog(string param);
    public virtual string ApplyAppPathModifier(string virtualPath);
    public virtual void BinaryWrite(Byte[] buffer);
    public virtual void ClearContent();
    public virtual void ClearHeaders();
    public virtual void DisableKernelCache();
    public virtual void Flush();
    public virtual void Pics(string value);
    public virtual void Redirect(string url);
    public virtual void Redirect(string url, bool endResponse);
    public virtual void SetCookie(HttpCookie cookie);
    public virtual TextWriter SwitchWriter(TextWriter writer);
    public virtual void TransmitFile(string filename);
    public virtual void TransmitFile(string filename, long offset, long length);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(object obj);
    public virtual void WriteFile(string filename);
    public virtual void WriteFile(string filename, bool readIntoMemory);
    public virtual void WriteFile(string filename, long offset, long size);
    public virtual void WriteFile(IntPtr fileHandle, long offset, long size);
    public virtual void WriteSubstitution(HttpResponseSubstitutionCallback callback);
}
public class System.Web.Management.WebServiceErrorEvent : WebRequestErrorEvent {
    public static int WebServiceErrorEventCode { get; }
    protected internal WebServiceErrorEvent(string message, object eventSource, Exception exception);
    public static int get_WebServiceErrorEventCode();
}
[ScriptServiceAttribute]
internal class System.Web.Profile.ProfileService : object {
    [WebMethodAttribute]
public Dictionary`2<string, object> GetAllPropertiesForCurrentUser(bool authenticatedUserOnly);
    [WebMethodAttribute]
public Dictionary`2<string, object> GetPropertiesForCurrentUser(IEnumerable`1<string> properties, bool authenticatedUserOnly);
    [WebMethodAttribute]
public Collection`1<ProfilePropertyMetadata> GetPropertiesMetadata();
    [WebMethodAttribute]
public Collection`1<string> SetPropertiesForCurrentUser(IDictionary`2<string, object> values, bool authenticatedUserOnly);
}
internal class System.Web.Query.Dynamic.ClassFactory : object {
    public static ClassFactory Instance;
    private static ClassFactory();
    public Type GetDynamicClass(IEnumerable`1<DynamicProperty> properties);
}
public abstract class System.Web.Query.Dynamic.DynamicClass : object {
    public virtual string ToString();
}
internal static class System.Web.Query.Dynamic.DynamicExpression : object {
    private static DynamicExpression();
    public static Expression Parse(Type resultType, string expression, Object[] values);
    public static LambdaExpression ParseLambda(Type itType, Type resultType, string expression, Object[] values);
    public static LambdaExpression ParseLambda(ParameterExpression[] parameters, Type resultType, string expression, Object[] values);
    public static Expression`1<Func`2<T, S>> ParseLambda(string expression, Object[] values);
    public static Type CreateClass(DynamicProperty[] properties);
    public static Type CreateClass(IEnumerable`1<DynamicProperty> properties);
    public static LambdaExpression Lambda(Expression body, ParameterExpression[] parameters);
    public static Type GetFuncType(Type[] typeArgs);
}
internal class System.Web.Query.Dynamic.DynamicOrdering : object {
    public Expression Selector;
    public bool Ascending;
}
internal class System.Web.Query.Dynamic.DynamicProperty : object {
    public string Name { get; }
    public Type Type { get; }
    public DynamicProperty(string name, Type type);
    public string get_Name();
    public Type get_Type();
}
[ExtensionAttribute]
internal static class System.Web.Query.Dynamic.DynamicQueryable : object {
    [ExtensionAttribute]
public static IQueryable`1<T> Where(IQueryable`1<T> source, string predicate, Object[] values);
    [ExtensionAttribute]
public static IQueryable Where(IQueryable source, string predicate, Object[] values);
    [ExtensionAttribute]
public static IQueryable Select(IQueryable source, string selector, Object[] values);
    [ExtensionAttribute]
public static IQueryable`1<T> OrderBy(IQueryable`1<T> source, string ordering, Object[] values);
    [ExtensionAttribute]
public static IQueryable OrderBy(IQueryable source, string ordering, Object[] values);
    [ExtensionAttribute]
public static IQueryable Take(IQueryable source, int count);
    [ExtensionAttribute]
public static IQueryable Skip(IQueryable source, int count);
    [ExtensionAttribute]
public static IQueryable GroupBy(IQueryable source, string keySelector, string elementSelector, Object[] values);
    [ExtensionAttribute]
public static bool Any(IQueryable source);
    [ExtensionAttribute]
public static int Count(IQueryable source);
}
internal class System.Web.Query.Dynamic.ExpressionParser : object {
    public ExpressionParser(ParameterExpression[] parameters, string expression, Object[] values);
    private static ExpressionParser();
    public Expression Parse(Type resultType);
    public IEnumerable`1<DynamicOrdering> ParseOrdering();
}
public class System.Web.Query.Dynamic.ParseException : Exception {
    public int Position { get; }
    public ParseException(string message, int position);
    public int get_Position();
    public virtual string ToString();
}
internal class System.Web.Query.Dynamic.Signature : object {
    public DynamicProperty[] properties;
    public int hashCode;
    public Signature(IEnumerable`1<DynamicProperty> properties);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Signature other);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Resources.AtlasWeb : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ApplicationServiceManager_Path { get; }
    internal static string AppService_Disabled { get; }
    internal static string AppService_MultiplePaths { get; }
    internal static string AppService_RequiredSSL { get; }
    internal static string AppService_UnknownProfileProperty { get; }
    internal static string ArgumentMustBeCurrentUser { get; }
    internal static string ArgumentMustBeNull { get; }
    internal static string AsyncPostBackTrigger_CannotFindEvent { get; }
    internal static string AsyncPostBackTrigger_EventName { get; }
    internal static string AsyncPostBackTrigger_InvalidEvent { get; }
    internal static string AttributeNotRecognized { get; }
    internal static string Category_Sorting { get; }
    internal static string ClientService_BadJsonResponse { get; }
    internal static string Common_ArgumentInvalidType { get; }
    internal static string Common_GreaterThanOrEqualToZero { get; }
    internal static string Common_GreaterThanOrEqualToZeroAndLessThanOrEqualToOne { get; }
    internal static string Common_NullOrEmpty { get; }
    internal static string Common_PageCannotBeNull { get; }
    internal static string Common_ScriptManagerRequired { get; }
    internal static string CompositeScriptReference_Scripts { get; }
    internal static string ConvertersCollection_NotJavaScriptConverter { get; }
    internal static string ConvertersCollection_UnknownType { get; }
    internal static string DataBoundControlHelper_NoNamingContainer { get; }
    internal static string DataPager_ControlIsntPageable { get; }
    internal static string DataPager_Fields { get; }
    internal static string DataPager_NoNamingContainer { get; }
    internal static string DataPager_NoPageableItemContainer { get; }
    internal static string DataPager_PageableItemContainerNotFound { get; }
    internal static string DataPager_PagedControlID { get; }
    internal static string DataPager_PagePropertiesCannotBeSet { get; }
    internal static string DataPager_PageSize { get; }
    internal static string DataPager_QueryStringField { get; }
    internal static string DataPagerField_Visible { get; }
    internal static string DataSourceControlExtender_TargetControlIDMustBeSpecified { get; }
    internal static string DataSourceControlExtender_TargetControlMustImplementIDataSource { get; }
    internal static string DynamicControlBase_ConvertEmptyStringToNull { get; }
    internal static string DynamicControlBase_DataField { get; }
    internal static string DynamicControlBase_DataFormatString { get; }
    internal static string DynamicControlBase_HtmlEncode { get; }
    internal static string DynamicControlBase_NullDisplayText { get; }
    internal static string DynamicControlBase_UIHint { get; }
    internal static string DynamicControlBase_ValidationGroup { get; }
    internal static string DynamicFilterRepeater_DynamicFilterContainerId { get; }
    internal static string DynamicNavigatorDataSource_NoAccessibleTablesFound { get; }
    internal static string DynamicNavigatorDataSource_NoModelsRegistered { get; }
    internal static string DynamicNavigatorDataSource_NoTablesInModels { get; }
    internal static string ExpressionParser_AmbiguousConstructorInvocation { get; }
    internal static string ExpressionParser_AmbiguousIndexerInvocation { get; }
    internal static string ExpressionParser_AmbiguousMethodInvocation { get; }
    internal static string ExpressionParser_ArgsIncompatibleWithLambda { get; }
    internal static string ExpressionParser_BothTypesConvertToOther { get; }
    internal static string ExpressionParser_CannotConvertValue { get; }
    internal static string ExpressionParser_CannotIndexMultipleDimensionalArray { get; }
    internal static string ExpressionParser_CloseBracketOrCommaExpected { get; }
    internal static string ExpressionParser_CloseParenOrCommaExpected { get; }
    internal static string ExpressionParser_CloseParenOrOperatorExpected { get; }
    internal static string ExpressionParser_ColonExpected { get; }
    internal static string ExpressionParser_DigitExpected { get; }
    internal static string ExpressionParser_DotOrOpenParenExpected { get; }
    internal static string ExpressionParser_DuplicateIdentifier { get; }
    internal static string ExpressionParser_ExpressionExpected { get; }
    internal static string ExpressionParser_ExpressionTypeMismatch { get; }
    internal static string ExpressionParser_FirstExprMustBeBool { get; }
    internal static string ExpressionParser_IdentifierExpected { get; }
    internal static string ExpressionParser_IifRequiresThreeArgs { get; }
    internal static string ExpressionParser_IncompatibleOperand { get; }
    internal static string ExpressionParser_IncompatibleOperands { get; }
    internal static string ExpressionParser_InvalidCharacter { get; }
    internal static string ExpressionParser_InvalidCharacterLiteral { get; }
    internal static string ExpressionParser_InvalidIndex { get; }
    internal static string ExpressionParser_InvalidIntegerLiteral { get; }
    internal static string ExpressionParser_InvalidRealLiteral { get; }
    internal static string ExpressionParser_MethodIsVoid { get; }
    internal static string ExpressionParser_MethodsAreInaccessible { get; }
    internal static string ExpressionParser_MissingAsClause { get; }
    internal static string ExpressionParser_NeitherTypeConvertsToOther { get; }
    internal static string ExpressionParser_NoApplicableAggregate { get; }
    internal static string ExpressionParser_NoApplicableIndexer { get; }
    internal static string ExpressionParser_NoApplicableMethod { get; }
    internal static string ExpressionParser_NoItInScope { get; }
    internal static string ExpressionParser_NoMatchingConstructor { get; }
    internal static string ExpressionParser_OpenBracketExpected { get; }
    internal static string ExpressionParser_OpenParenExpected { get; }
    internal static string ExpressionParser_SyntaxError { get; }
    internal static string ExpressionParser_TokenExpected { get; }
    internal static string ExpressionParser_TypeHasNoNullableForm { get; }
    internal static string ExpressionParser_UnknownIdentifier { get; }
    internal static string ExpressionParser_UnknownPropertyOrField { get; }
    internal static string ExpressionParser_UnterminatedStringLiteral { get; }
    internal static string Expressions_DataFieldRequired { get; }
    internal static string ExtenderControl_TargetControlDifferentUpdatePanel { get; }
    internal static string ExtenderControl_TargetControlID { get; }
    internal static string ExtenderControl_TargetControlIDEmpty { get; }
    internal static string ExtenderControl_TargetControlIDInvalid { get; }
    internal static string FilterRepeater_TableName { get; }
    internal static string JSON_ArrayTypeNotSupported { get; }
    internal static string JSON_BadEscape { get; }
    internal static string JSON_CannotConvertObjectToType { get; }
    internal static string JSON_CannotCreateListType { get; }
    internal static string JSON_CannotSerializeMemberGeneric { get; }
    internal static string JSON_CircularReference { get; }
    internal static string JSON_DepthLimitExceeded { get; }
    internal static string JSON_DeserializerTypeMismatch { get; }
    internal static string JSON_DictionaryTypeNotSupported { get; }
    internal static string JSON_ExpectedOpenBrace { get; }
    internal static string JSON_IllegalPrimitive { get; }
    internal static string JSON_InvalidArrayEnd { get; }
    internal static string JSON_InvalidArrayExpectComma { get; }
    internal static string JSON_InvalidArrayExtraComma { get; }
    internal static string JSON_InvalidArrayStart { get; }
    internal static string JSON_InvalidEnumType { get; }
    internal static string JSON_InvalidMaxJsonLength { get; }
    internal static string JSON_InvalidMemberName { get; }
    internal static string JSON_InvalidObject { get; }
    internal static string JSON_InvalidRecursionLimit { get; }
    internal static string JSON_MaxJsonLengthExceeded { get; }
    internal static string JSON_NoConstructor { get; }
    internal static string JSON_StringNotQuoted { get; }
    internal static string JSON_UnterminatedString { get; }
    internal static string JSON_ValueTypeCannotBeNull { get; }
    internal static string LinqDataSource_AutoGenerateOrderByClause { get; }
    internal static string LinqDataSource_AutoGenerateWhereClause { get; }
    internal static string LinqDataSource_AutoPage { get; }
    internal static string LinqDataSource_AutoSort { get; }
    internal static string LinqDataSource_ContextCreated { get; }
    internal static string LinqDataSource_ContextCreating { get; }
    internal static string LinqDataSource_ContextDisposing { get; }
    internal static string LinqDataSource_ContextTypeName { get; }
    internal static string LinqDataSource_Deleted { get; }
    internal static string LinqDataSource_DeleteParameters { get; }
    internal static string LinqDataSource_Deleting { get; }
    internal static string LinqDataSource_Description { get; }
    internal static string LinqDataSource_DisplayName { get; }
    internal static string LinqDataSource_EnableDelete { get; }
    internal static string LinqDataSource_EnableInsert { get; }
    internal static string LinqDataSource_EnableObjectTracking { get; }
    internal static string LinqDataSource_EnableUpdate { get; }
    internal static string LinqDataSource_GroupBy { get; }
    internal static string LinqDataSource_GroupByParameters { get; }
    internal static string LinqDataSource_Inserted { get; }
    internal static string LinqDataSource_Inserting { get; }
    internal static string LinqDataSource_InsertParameters { get; }
    internal static string LinqDataSource_InvalidViewName { get; }
    internal static string LinqDataSource_OrderBy { get; }
    internal static string LinqDataSource_OrderByParameters { get; }
    internal static string LinqDataSource_OrderGroupsBy { get; }
    internal static string LinqDataSource_OrderGroupsByParameters { get; }
    internal static string LinqDataSource_Select { get; }
    internal static string LinqDataSource_Selected { get; }
    internal static string LinqDataSource_Selecting { get; }
    internal static string LinqDataSource_SelectParameters { get; }
    internal static string LinqDataSource_StoreOriginalValuesInViewState { get; }
    internal static string LinqDataSource_TableName { get; }
    internal static string LinqDataSource_Updated { get; }
    internal static string LinqDataSource_UpdateParameters { get; }
    internal static string LinqDataSource_Updating { get; }
    internal static string LinqDataSource_Where { get; }
    internal static string LinqDataSource_WhereParameters { get; }
    internal static string LinqDataSourceValidationException_ValidationFailed { get; }
    internal static string LinqDataSourceView_CannotConvertType { get; }
    internal static string LinqDataSourceView_ContextTypeNameChanged { get; }
    internal static string LinqDataSourceView_ContextTypeNameNotFound { get; }
    internal static string LinqDataSourceView_ContextTypeNameNotSpecified { get; }
    internal static string LinqDataSourceView_DeleteNotSupported { get; }
    internal static string LinqDataSourceView_EnableObjectTrackingChanged { get; }
    internal static string LinqDataSourceView_GroupByNotSupportedOnEdit { get; }
    internal static string LinqDataSourceView_InsertNotSupported { get; }
    internal static string LinqDataSourceView_InsertRequiresValues { get; }
    internal static string LinqDataSourceView_InvalidContextType { get; }
    internal static string LinqDataSourceView_InvalidOrderByFieldName { get; }
    internal static string LinqDataSourceView_InvalidParameterName { get; }
    internal static string LinqDataSourceView_InvalidTablePropertyType { get; }
    internal static string LinqDataSourceView_OrderByAlreadySpecified { get; }
    internal static string LinqDataSourceView_OrderGroupsByRequiresGroupBy { get; }
    internal static string LinqDataSourceView_OriginalValuesNotFound { get; }
    internal static string LinqDataSourceView_PagingNotHandled { get; }
    internal static string LinqDataSourceView_ParametersMustBeNamed { get; }
    internal static string LinqDataSourceView_SelectNewNotSupportedOnEdit { get; }
    internal static string LinqDataSourceView_TableCannotBeStatic { get; }
    internal static string LinqDataSourceView_TableNameChanged { get; }
    internal static string LinqDataSourceView_TableNameNotFound { get; }
    internal static string LinqDataSourceView_TableNameNotSpecified { get; }
    internal static string LinqDataSourceView_UpdateNotSupported { get; }
    internal static string LinqDataSourceView_ValidationFailed { get; }
    internal static string LinqDataSourceView_WhereAlreadySpecified { get; }
    internal static string ListView_AlternatingItemTemplate { get; }
    internal static string ListView_ContainerNameMustNotBeEmpty { get; }
    internal static string ListView_ConvertEmptyStringToNull { get; }
    internal static string ListView_DataKeyNames { get; }
    internal static string ListView_DataKeyNamesMustBeSpecified { get; }
    internal static string ListView_DataKeys { get; }
    internal static string ListView_DataSourceDoesntSupportPaging { get; }
    internal static string ListView_DataSourceMustBeCollectionWhenNotDataBinding { get; }
    internal static string ListView_EditIndex { get; }
    internal static string ListView_EditItem { get; }
    internal static string ListView_EditItemTemplate { get; }
    internal static string ListView_EmptyDataTemplate { get; }
    internal static string ListView_EmptyItemTemplate { get; }
    internal static string ListView_EnableDataBoundControlManager { get; }
    internal static string ListView_EnableModelValidation { get; }
    internal static string ListView_EnablePersistedSelection { get; }
    internal static string ListView_GroupContainerID { get; }
    internal static string ListView_GroupItemCount { get; }
    internal static string ListView_GroupItemCountNoGroupTemplate { get; }
    internal static string ListView_GroupSeparatorTemplate { get; }
    internal static string ListView_GroupTemplate { get; }
    internal static string ListView_InsertItem { get; }
    internal static string ListView_InsertItemPosition { get; }
    internal static string ListView_InsertItemTemplate { get; }
    internal static string ListView_InsertTemplateRequired { get; }
    internal static string ListView_InvalidCancel { get; }
    internal static string ListView_InvalidCommand { get; }
    internal static string ListView_InvalidDelete { get; }
    internal static string ListView_InvalidEdit { get; }
    internal static string ListView_InvalidInsert { get; }
    internal static string ListView_InvalidSelect { get; }
    internal static string ListView_InvalidUpdate { get; }
    internal static string ListView_ItemPlaceholderID { get; }
    internal static string ListView_Items { get; }
    internal static string ListView_ItemSeparatorTemplate { get; }
    internal static string ListView_ItemsNotDataItems { get; }
    internal static string ListView_ItemTemplate { get; }
    internal static string ListView_ItemTemplateRequired { get; }
    internal static string ListView_LayoutTemplate { get; }
    internal static string ListView_Missing_VirtualItemCount { get; }
    internal static string ListView_NeedICollectionOrTotalRowCount { get; }
    internal static string ListView_NoGroupPlaceholder { get; }
    internal static string ListView_NoInsertItem { get; }
    internal static string ListView_NoItemPlaceholder { get; }
    internal static string ListView_NullView { get; }
    internal static string ListView_OnItemCanceling { get; }
    internal static string ListView_OnItemCommand { get; }
    internal static string ListView_OnItemCreated { get; }
    internal static string ListView_OnItemDataBound { get; }
    internal static string ListView_OnItemDeleted { get; }
    internal static string ListView_OnItemDeleting { get; }
    internal static string ListView_OnItemEditing { get; }
    internal static string ListView_OnItemInserted { get; }
    internal static string ListView_OnItemInserting { get; }
    internal static string ListView_OnItemUpdated { get; }
    internal static string ListView_OnItemUpdating { get; }
    internal static string ListView_OnLayoutCreated { get; }
    internal static string ListView_OnPagePropertiesChanged { get; }
    internal static string ListView_OnPagePropertiesChanging { get; }
    internal static string ListView_OnSelectedIndexChanged { get; }
    internal static string ListView_OnSelectedIndexChanging { get; }
    internal static string ListView_OnSorted { get; }
    internal static string ListView_OnSorting { get; }
    internal static string ListView_PersistedSelectionRequiresDataKeysNames { get; }
    internal static string ListView_SelectedIndex { get; }
    internal static string ListView_SelectedItemTemplate { get; }
    internal static string ListView_SortDirection { get; }
    internal static string ListView_SortExpression { get; }
    internal static string ListView_StyleNotSupported { get; }
    internal static string ListView_StylePropertiesNotSupported { get; }
    internal static string ListView_UnhandledEvent { get; }
    internal static string ListViewPagedDataSource_CannotGetCount { get; }
    internal static string ListViewPagedDataSource_EnumeratorMoveNextNotCalled { get; }
    internal static string MethodExpression_ChangingTheReturnTypeIsNotAllowed { get; }
    internal static string MethodExpression_DataSourceMustBeIDynamicDataSource { get; }
    internal static string MethodExpression_FirstParamterMustBeCorrectType { get; }
    internal static string MethodExpression_MethodMustBeStatic { get; }
    internal static string MethodExpression_MethodNameMustBeSpecified { get; }
    internal static string MethodExpression_MethodNotFound { get; }
    internal static string MethodExpression_ParameterNotFound { get; }
    internal static string NextPreviousPagerField_ButtonCssClass { get; }
    internal static string NextPreviousPagerField_ButtonType { get; }
    internal static string NextPreviousPagerField_FirstPageImageUrl { get; }
    internal static string NextPreviousPagerField_FirstPageText { get; }
    internal static string NextPreviousPagerField_LastPageImageUrl { get; }
    internal static string NextPreviousPagerField_LastPageText { get; }
    internal static string NextPreviousPagerField_NextPageImageUrl { get; }
    internal static string NextPreviousPagerField_NextPageText { get; }
    internal static string NextPreviousPagerField_PreviousPageImageUrl { get; }
    internal static string NextPreviousPagerField_PreviousPageText { get; }
    internal static string NextPreviousPagerField_RenderDisabledButtonsAsLabels { get; }
    internal static string NextPreviousPagerField_RenderNonBreakingSpacesBetweenControls { get; }
    internal static string NextPreviousPagerField_ShowFirstPageButton { get; }
    internal static string NextPreviousPagerField_ShowLastPageButton { get; }
    internal static string NextPreviousPagerField_ShowNextPageButton { get; }
    internal static string NextPreviousPagerField_ShowPreviousPageButton { get; }
    internal static string NextPrevPagerField_DefaultFirstPageText { get; }
    internal static string NextPrevPagerField_DefaultLastPageText { get; }
    internal static string NextPrevPagerField_DefaultNextPageText { get; }
    internal static string NextPrevPagerField_DefaultPreviousPageText { get; }
    internal static string NumericPagerField_ButtonCount { get; }
    internal static string NumericPagerField_ButtonType { get; }
    internal static string NumericPagerField_CurrentPageLabelCssClass { get; }
    internal static string NumericPagerField_DefaultNextPageText { get; }
    internal static string NumericPagerField_DefaultPreviousPageText { get; }
    internal static string NumericPagerField_NextPageImageUrl { get; }
    internal static string NumericPagerField_NextPageText { get; }
    internal static string NumericPagerField_NextPreviousButtonCssClass { get; }
    internal static string NumericPagerField_NumericButtonCssClass { get; }
    internal static string NumericPagerField_PreviousPageImageUrl { get; }
    internal static string NumericPagerField_PreviousPageText { get; }
    internal static string NumericPagerField_RenderNonBreakingSpacesBetweenControls { get; }
    internal static string OfTypeExpression_CannotFindType { get; }
    internal static string OfTypeExpression_TypeNameNotSpecified { get; }
    internal static string PageRequestManager_RegisterDataItemInNonAsyncRequest { get; }
    internal static string PageRequestManager_RegisterDataItemTwice { get; }
    internal static string PagerFieldCollection_InvalidType { get; }
    internal static string PagerFieldCollection_InvalidTypeIndex { get; }
    internal static string ParseException_ParseExceptionFormat { get; }
    internal static string ProfileServiceManager_LoadProperitesWithNonDefaultPath { get; }
    internal static string ProfileServiceManager_LoadProperties { get; }
    internal static string ProxyGenerator_UnsupportedType { get; }
    internal static string ProxyHelper_BadStatusCode { get; }
    internal static string QueryExtender_DataSourceMustBeIQueryableDataSource { get; }
    internal static string QueryExtender_Expressions { get; }
    internal static string RangeExpression_MaximumValueRequired { get; }
    internal static string RangeExpression_MinimumValueRequired { get; }
    internal static string RangeExpression_RangeTypeMustBeSpecified { get; }
    internal static string RoleService_RoleProviderNotFound { get; }
    internal static string RoleService_RolesFeatureNotEnabled { get; }
    internal static string RoleServiceManager_LoadRoles { get; }
    internal static string RoleServiceManager_LoadRolesWithNonDefaultPath { get; }
    internal static string ScriptControlDescriptor_IDNotSettable { get; }
    internal static string ScriptControlManager_ExtenderControlNotRegistered { get; }
    internal static string ScriptControlManager_NoTargetControlTypes { get; }
    internal static string ScriptControlManager_RegisterExtenderControlTooEarly { get; }
    internal static string ScriptControlManager_RegisterExtenderControlTooLate { get; }
    internal static string ScriptControlManager_RegisterScriptControlTooEarly { get; }
    internal static string ScriptControlManager_RegisterScriptControlTooLate { get; }
    internal static string ScriptControlManager_ScriptControlNotRegistered { get; }
    internal static string ScriptControlManager_TargetControlTypeInvalid { get; }
    internal static string ScriptManager_AjaxFrameworkAssembly { get; }
    internal static string ScriptManager_AjaxFrameworkMode { get; }
    internal static string ScriptManager_AllowCustomErrorsRedirect { get; }
    internal static string ScriptManager_AsyncPostBackError { get; }
    internal static string ScriptManager_AsyncPostBackErrorMessage { get; }
    internal static string ScriptManager_AsyncPostBackNotInPartialRenderingMode { get; }
    internal static string ScriptManager_AsyncPostBackTimeout { get; }
    internal static string ScriptManager_AuthenticationService { get; }
    internal static string ScriptManager_CannotAddHistoryPointOutsideOfAsyncPostBack { get; }
    internal static string ScriptManager_CannotAddHistoryPointWithHistoryDisabled { get; }
    internal static string ScriptManager_CannotChangeAjaxFrameworkMode { get; }
    internal static string ScriptManager_CannotChangeEnableCdn { get; }
    internal static string ScriptManager_CannotChangeEnableCdnFallback { get; }
    internal static string ScriptManager_CannotChangeEnableHistory { get; }
    internal static string ScriptManager_CannotChangeEnablePartialRendering { get; }
    internal static string ScriptManager_CannotChangeEnableScriptGlobalization { get; }
    internal static string ScriptManager_CannotChangeSupportsPartialRendering { get; }
    internal static string ScriptManager_CannotRegisterBothPostBacks { get; }
    internal static string ScriptManager_CannotRegisterScriptInMultipleCompositeReferences { get; }
    internal static string ScriptManager_CannotSetSupportsPartialRenderingWhenDisabled { get; }
    internal static string ScriptManager_ClientNavigateHandler { get; }
    internal static string ScriptManager_CompositeScript { get; }
    internal static string ScriptManager_EmptyPageUrl { get; }
    internal static string ScriptManager_EnableCdn { get; }
    internal static string ScriptManager_EnableCdnFallback { get; }
    internal static string ScriptManager_EnableHistory { get; }
    internal static string ScriptManager_EnablePageMethods { get; }
    internal static string ScriptManager_EnablePartialRendering { get; }
    internal static string ScriptManager_EnableScriptGlobalization { get; }
    internal static string ScriptManager_EnableScriptLocalization { get; }
    internal static string ScriptManager_EnableSecureHistoryState { get; }
    internal static string ScriptManager_FrameworkFailedToLoad { get; }
    internal static string ScriptManager_InvalidControlRegistration { get; }
    internal static string ScriptManager_LoadScriptsBeforeUI { get; }
    internal static string ScriptManager_MustHaveGreaterVersion { get; }
    internal static string ScriptManager_Navigate { get; }
    internal static string ScriptManager_OnlyOneScriptManager { get; }
    internal static string ScriptManager_PageUntitled { get; }
    internal static string ScriptManager_ProfileService { get; }
    internal static string ScriptManager_ResolveCompositeScriptReference { get; }
    internal static string ScriptManager_ResolveScriptReference { get; }
    internal static string ScriptManager_RoleService { get; }
    internal static string ScriptManager_ScriptMode { get; }
    internal static string ScriptManager_ScriptPath { get; }
    internal static string ScriptManager_Scripts { get; }
    internal static string ScriptManager_Services { get; }
    internal static string ScriptManager_UpdatePanelNotRegistered { get; }
    internal static string ScriptReference_Assembly { get; }
    internal static string ScriptReference_AssemblyRequiresName { get; }
    internal static string ScriptReference_IgnoreScriptPath { get; }
    internal static string ScriptReference_InvalidReleaseScriptName { get; }
    internal static string ScriptReference_InvalidReleaseScriptPath { get; }
    internal static string ScriptReference_Name { get; }
    internal static string ScriptReference_NameAndPathCannotBeEmpty { get; }
    internal static string ScriptReference_NotifyScriptLoaded { get; }
    internal static string ScriptReference_Path { get; }
    internal static string ScriptReference_ResourceRequiresAjaxAssembly { get; }
    internal static string ScriptReference_ResourceUICultures { get; }
    internal static string ScriptReference_ScriptMode { get; }
    internal static string ScriptRegistrationManager_ControlNotOnPage { get; }
    internal static string ScriptRegistrationManager_InvalidChars { get; }
    internal static string ScriptRegistrationManager_NoCloseTag { get; }
    internal static string ScriptRegistrationManager_NoTags { get; }
    internal static string ScriptResourceDefinition_InvalidPath { get; }
    internal static string ScriptResourceDefinition_NameAndPathCannotBeEmpty { get; }
    internal static string ScriptResourceHandler_DuplicateScriptResources { get; }
    internal static string ScriptResourceHandler_InvalidRequest { get; }
    internal static string ScriptResourceHandler_ResourceUrlTooLong { get; }
    internal static string ScriptResourceHandler_TypeNameMismatch { get; }
    internal static string ScriptResourceHandler_UnknownResource { get; }
    internal static string SearchExpression_ParameterRequired { get; }
    internal static string ServiceReference_InlineScript { get; }
    internal static string ServiceReference_Path { get; }
    internal static string ServiceReference_PathCannotBeEmpty { get; }
    internal static string ServiceUriNotFound { get; }
    internal static string SqlHelper_SqlEverywhereNotInstalled { get; }
    internal static string TemplatePagerField_OnPagerCommand { get; }
    internal static string TemplatePagerField_PagerTemplate { get; }
    internal static string TemplatePagerField_UnhandledEvent { get; }
    internal static string Timer_IntervalMustBeGreaterThanZero { get; }
    internal static string Timer_TimerEnable { get; }
    internal static string Timer_TimerInterval { get; }
    internal static string Timer_TimerTick { get; }
    internal static string UnhandledExceptionEventLogMessage { get; }
    internal static string UpdatePanel_CannotModifyControlCollection { get; }
    internal static string UpdatePanel_CannotSetContentTemplate { get; }
    internal static string UpdatePanel_ChildrenAsTriggers { get; }
    internal static string UpdatePanel_ChildrenTriggersAndUpdateAlways { get; }
    internal static string UpdatePanel_RenderMode { get; }
    internal static string UpdatePanel_SetPartialRenderingModeCalledOnce { get; }
    internal static string UpdatePanel_Triggers { get; }
    internal static string UpdatePanel_UpdateConditional { get; }
    internal static string UpdatePanel_UpdateMode { get; }
    internal static string UpdatePanel_UpdateTooLate { get; }
    internal static string UpdatePanelControlTrigger_ControlID { get; }
    internal static string UpdatePanelControlTrigger_ControlNotFound { get; }
    internal static string UpdatePanelControlTrigger_NoControlID { get; }
    internal static string UpdateProgress_AssociatedUpdatePanelID { get; }
    internal static string UpdateProgress_DisplayAfter { get; }
    internal static string UpdateProgress_DisplayAfterInvalid { get; }
    internal static string UpdateProgress_DynamicLayout { get; }
    internal static string UpdateProgress_NoUpdatePanel { get; }
    internal static string UpdateProgress_ProgressTemplate { get; }
    internal static string UserIsNotAuthenticated { get; }
    internal static string WebResourceUtil_AssemblyDoesNotContainDebugWebResource { get; }
    internal static string WebResourceUtil_AssemblyDoesNotContainEmbeddedResource { get; }
    internal static string WebResourceUtil_AssemblyDoesNotContainReleaseWebResource { get; }
    internal static string WebResourceUtil_SystemWebExtensionsDoesNotContainReleaseWebResource { get; }
    internal static string WebService_Error { get; }
    internal static string WebService_InvalidGenerateScriptType { get; }
    internal static string WebService_InvalidInlineVirtualPath { get; }
    internal static string WebService_InvalidVerbRequest { get; }
    internal static string WebService_InvalidWebServiceCall { get; }
    internal static string WebService_InvalidXmlReturnType { get; }
    internal static string WebService_MissingArg { get; }
    internal static string WebService_NoScriptServiceAttribute { get; }
    internal static string WebService_NoWebServiceData { get; }
    internal static string WebService_NoWebServiceDataInlineScript { get; }
    internal static string WebService_RedirectError { get; }
    internal static string WebService_UnknownWebMethod { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ApplicationServiceManager_Path();
    internal static string get_AppService_Disabled();
    internal static string get_AppService_MultiplePaths();
    internal static string get_AppService_RequiredSSL();
    internal static string get_AppService_UnknownProfileProperty();
    internal static string get_ArgumentMustBeCurrentUser();
    internal static string get_ArgumentMustBeNull();
    internal static string get_AsyncPostBackTrigger_CannotFindEvent();
    internal static string get_AsyncPostBackTrigger_EventName();
    internal static string get_AsyncPostBackTrigger_InvalidEvent();
    internal static string get_AttributeNotRecognized();
    internal static string get_Category_Sorting();
    internal static string get_ClientService_BadJsonResponse();
    internal static string get_Common_ArgumentInvalidType();
    internal static string get_Common_GreaterThanOrEqualToZero();
    internal static string get_Common_GreaterThanOrEqualToZeroAndLessThanOrEqualToOne();
    internal static string get_Common_NullOrEmpty();
    internal static string get_Common_PageCannotBeNull();
    internal static string get_Common_ScriptManagerRequired();
    internal static string get_CompositeScriptReference_Scripts();
    internal static string get_ConvertersCollection_NotJavaScriptConverter();
    internal static string get_ConvertersCollection_UnknownType();
    internal static string get_DataBoundControlHelper_NoNamingContainer();
    internal static string get_DataPager_ControlIsntPageable();
    internal static string get_DataPager_Fields();
    internal static string get_DataPager_NoNamingContainer();
    internal static string get_DataPager_NoPageableItemContainer();
    internal static string get_DataPager_PageableItemContainerNotFound();
    internal static string get_DataPager_PagedControlID();
    internal static string get_DataPager_PagePropertiesCannotBeSet();
    internal static string get_DataPager_PageSize();
    internal static string get_DataPager_QueryStringField();
    internal static string get_DataPagerField_Visible();
    internal static string get_DataSourceControlExtender_TargetControlIDMustBeSpecified();
    internal static string get_DataSourceControlExtender_TargetControlMustImplementIDataSource();
    internal static string get_DynamicControlBase_ConvertEmptyStringToNull();
    internal static string get_DynamicControlBase_DataField();
    internal static string get_DynamicControlBase_DataFormatString();
    internal static string get_DynamicControlBase_HtmlEncode();
    internal static string get_DynamicControlBase_NullDisplayText();
    internal static string get_DynamicControlBase_UIHint();
    internal static string get_DynamicControlBase_ValidationGroup();
    internal static string get_DynamicFilterRepeater_DynamicFilterContainerId();
    internal static string get_DynamicNavigatorDataSource_NoAccessibleTablesFound();
    internal static string get_DynamicNavigatorDataSource_NoModelsRegistered();
    internal static string get_DynamicNavigatorDataSource_NoTablesInModels();
    internal static string get_ExpressionParser_AmbiguousConstructorInvocation();
    internal static string get_ExpressionParser_AmbiguousIndexerInvocation();
    internal static string get_ExpressionParser_AmbiguousMethodInvocation();
    internal static string get_ExpressionParser_ArgsIncompatibleWithLambda();
    internal static string get_ExpressionParser_BothTypesConvertToOther();
    internal static string get_ExpressionParser_CannotConvertValue();
    internal static string get_ExpressionParser_CannotIndexMultipleDimensionalArray();
    internal static string get_ExpressionParser_CloseBracketOrCommaExpected();
    internal static string get_ExpressionParser_CloseParenOrCommaExpected();
    internal static string get_ExpressionParser_CloseParenOrOperatorExpected();
    internal static string get_ExpressionParser_ColonExpected();
    internal static string get_ExpressionParser_DigitExpected();
    internal static string get_ExpressionParser_DotOrOpenParenExpected();
    internal static string get_ExpressionParser_DuplicateIdentifier();
    internal static string get_ExpressionParser_ExpressionExpected();
    internal static string get_ExpressionParser_ExpressionTypeMismatch();
    internal static string get_ExpressionParser_FirstExprMustBeBool();
    internal static string get_ExpressionParser_IdentifierExpected();
    internal static string get_ExpressionParser_IifRequiresThreeArgs();
    internal static string get_ExpressionParser_IncompatibleOperand();
    internal static string get_ExpressionParser_IncompatibleOperands();
    internal static string get_ExpressionParser_InvalidCharacter();
    internal static string get_ExpressionParser_InvalidCharacterLiteral();
    internal static string get_ExpressionParser_InvalidIndex();
    internal static string get_ExpressionParser_InvalidIntegerLiteral();
    internal static string get_ExpressionParser_InvalidRealLiteral();
    internal static string get_ExpressionParser_MethodIsVoid();
    internal static string get_ExpressionParser_MethodsAreInaccessible();
    internal static string get_ExpressionParser_MissingAsClause();
    internal static string get_ExpressionParser_NeitherTypeConvertsToOther();
    internal static string get_ExpressionParser_NoApplicableAggregate();
    internal static string get_ExpressionParser_NoApplicableIndexer();
    internal static string get_ExpressionParser_NoApplicableMethod();
    internal static string get_ExpressionParser_NoItInScope();
    internal static string get_ExpressionParser_NoMatchingConstructor();
    internal static string get_ExpressionParser_OpenBracketExpected();
    internal static string get_ExpressionParser_OpenParenExpected();
    internal static string get_ExpressionParser_SyntaxError();
    internal static string get_ExpressionParser_TokenExpected();
    internal static string get_ExpressionParser_TypeHasNoNullableForm();
    internal static string get_ExpressionParser_UnknownIdentifier();
    internal static string get_ExpressionParser_UnknownPropertyOrField();
    internal static string get_ExpressionParser_UnterminatedStringLiteral();
    internal static string get_Expressions_DataFieldRequired();
    internal static string get_ExtenderControl_TargetControlDifferentUpdatePanel();
    internal static string get_ExtenderControl_TargetControlID();
    internal static string get_ExtenderControl_TargetControlIDEmpty();
    internal static string get_ExtenderControl_TargetControlIDInvalid();
    internal static string get_FilterRepeater_TableName();
    internal static string get_JSON_ArrayTypeNotSupported();
    internal static string get_JSON_BadEscape();
    internal static string get_JSON_CannotConvertObjectToType();
    internal static string get_JSON_CannotCreateListType();
    internal static string get_JSON_CannotSerializeMemberGeneric();
    internal static string get_JSON_CircularReference();
    internal static string get_JSON_DepthLimitExceeded();
    internal static string get_JSON_DeserializerTypeMismatch();
    internal static string get_JSON_DictionaryTypeNotSupported();
    internal static string get_JSON_ExpectedOpenBrace();
    internal static string get_JSON_IllegalPrimitive();
    internal static string get_JSON_InvalidArrayEnd();
    internal static string get_JSON_InvalidArrayExpectComma();
    internal static string get_JSON_InvalidArrayExtraComma();
    internal static string get_JSON_InvalidArrayStart();
    internal static string get_JSON_InvalidEnumType();
    internal static string get_JSON_InvalidMaxJsonLength();
    internal static string get_JSON_InvalidMemberName();
    internal static string get_JSON_InvalidObject();
    internal static string get_JSON_InvalidRecursionLimit();
    internal static string get_JSON_MaxJsonLengthExceeded();
    internal static string get_JSON_NoConstructor();
    internal static string get_JSON_StringNotQuoted();
    internal static string get_JSON_UnterminatedString();
    internal static string get_JSON_ValueTypeCannotBeNull();
    internal static string get_LinqDataSource_AutoGenerateOrderByClause();
    internal static string get_LinqDataSource_AutoGenerateWhereClause();
    internal static string get_LinqDataSource_AutoPage();
    internal static string get_LinqDataSource_AutoSort();
    internal static string get_LinqDataSource_ContextCreated();
    internal static string get_LinqDataSource_ContextCreating();
    internal static string get_LinqDataSource_ContextDisposing();
    internal static string get_LinqDataSource_ContextTypeName();
    internal static string get_LinqDataSource_Deleted();
    internal static string get_LinqDataSource_DeleteParameters();
    internal static string get_LinqDataSource_Deleting();
    internal static string get_LinqDataSource_Description();
    internal static string get_LinqDataSource_DisplayName();
    internal static string get_LinqDataSource_EnableDelete();
    internal static string get_LinqDataSource_EnableInsert();
    internal static string get_LinqDataSource_EnableObjectTracking();
    internal static string get_LinqDataSource_EnableUpdate();
    internal static string get_LinqDataSource_GroupBy();
    internal static string get_LinqDataSource_GroupByParameters();
    internal static string get_LinqDataSource_Inserted();
    internal static string get_LinqDataSource_Inserting();
    internal static string get_LinqDataSource_InsertParameters();
    internal static string get_LinqDataSource_InvalidViewName();
    internal static string get_LinqDataSource_OrderBy();
    internal static string get_LinqDataSource_OrderByParameters();
    internal static string get_LinqDataSource_OrderGroupsBy();
    internal static string get_LinqDataSource_OrderGroupsByParameters();
    internal static string get_LinqDataSource_Select();
    internal static string get_LinqDataSource_Selected();
    internal static string get_LinqDataSource_Selecting();
    internal static string get_LinqDataSource_SelectParameters();
    internal static string get_LinqDataSource_StoreOriginalValuesInViewState();
    internal static string get_LinqDataSource_TableName();
    internal static string get_LinqDataSource_Updated();
    internal static string get_LinqDataSource_UpdateParameters();
    internal static string get_LinqDataSource_Updating();
    internal static string get_LinqDataSource_Where();
    internal static string get_LinqDataSource_WhereParameters();
    internal static string get_LinqDataSourceValidationException_ValidationFailed();
    internal static string get_LinqDataSourceView_CannotConvertType();
    internal static string get_LinqDataSourceView_ContextTypeNameChanged();
    internal static string get_LinqDataSourceView_ContextTypeNameNotFound();
    internal static string get_LinqDataSourceView_ContextTypeNameNotSpecified();
    internal static string get_LinqDataSourceView_DeleteNotSupported();
    internal static string get_LinqDataSourceView_EnableObjectTrackingChanged();
    internal static string get_LinqDataSourceView_GroupByNotSupportedOnEdit();
    internal static string get_LinqDataSourceView_InsertNotSupported();
    internal static string get_LinqDataSourceView_InsertRequiresValues();
    internal static string get_LinqDataSourceView_InvalidContextType();
    internal static string get_LinqDataSourceView_InvalidOrderByFieldName();
    internal static string get_LinqDataSourceView_InvalidParameterName();
    internal static string get_LinqDataSourceView_InvalidTablePropertyType();
    internal static string get_LinqDataSourceView_OrderByAlreadySpecified();
    internal static string get_LinqDataSourceView_OrderGroupsByRequiresGroupBy();
    internal static string get_LinqDataSourceView_OriginalValuesNotFound();
    internal static string get_LinqDataSourceView_PagingNotHandled();
    internal static string get_LinqDataSourceView_ParametersMustBeNamed();
    internal static string get_LinqDataSourceView_SelectNewNotSupportedOnEdit();
    internal static string get_LinqDataSourceView_TableCannotBeStatic();
    internal static string get_LinqDataSourceView_TableNameChanged();
    internal static string get_LinqDataSourceView_TableNameNotFound();
    internal static string get_LinqDataSourceView_TableNameNotSpecified();
    internal static string get_LinqDataSourceView_UpdateNotSupported();
    internal static string get_LinqDataSourceView_ValidationFailed();
    internal static string get_LinqDataSourceView_WhereAlreadySpecified();
    internal static string get_ListView_AlternatingItemTemplate();
    internal static string get_ListView_ContainerNameMustNotBeEmpty();
    internal static string get_ListView_ConvertEmptyStringToNull();
    internal static string get_ListView_DataKeyNames();
    internal static string get_ListView_DataKeyNamesMustBeSpecified();
    internal static string get_ListView_DataKeys();
    internal static string get_ListView_DataSourceDoesntSupportPaging();
    internal static string get_ListView_DataSourceMustBeCollectionWhenNotDataBinding();
    internal static string get_ListView_EditIndex();
    internal static string get_ListView_EditItem();
    internal static string get_ListView_EditItemTemplate();
    internal static string get_ListView_EmptyDataTemplate();
    internal static string get_ListView_EmptyItemTemplate();
    internal static string get_ListView_EnableDataBoundControlManager();
    internal static string get_ListView_EnableModelValidation();
    internal static string get_ListView_EnablePersistedSelection();
    internal static string get_ListView_GroupContainerID();
    internal static string get_ListView_GroupItemCount();
    internal static string get_ListView_GroupItemCountNoGroupTemplate();
    internal static string get_ListView_GroupSeparatorTemplate();
    internal static string get_ListView_GroupTemplate();
    internal static string get_ListView_InsertItem();
    internal static string get_ListView_InsertItemPosition();
    internal static string get_ListView_InsertItemTemplate();
    internal static string get_ListView_InsertTemplateRequired();
    internal static string get_ListView_InvalidCancel();
    internal static string get_ListView_InvalidCommand();
    internal static string get_ListView_InvalidDelete();
    internal static string get_ListView_InvalidEdit();
    internal static string get_ListView_InvalidInsert();
    internal static string get_ListView_InvalidSelect();
    internal static string get_ListView_InvalidUpdate();
    internal static string get_ListView_ItemPlaceholderID();
    internal static string get_ListView_Items();
    internal static string get_ListView_ItemSeparatorTemplate();
    internal static string get_ListView_ItemsNotDataItems();
    internal static string get_ListView_ItemTemplate();
    internal static string get_ListView_ItemTemplateRequired();
    internal static string get_ListView_LayoutTemplate();
    internal static string get_ListView_Missing_VirtualItemCount();
    internal static string get_ListView_NeedICollectionOrTotalRowCount();
    internal static string get_ListView_NoGroupPlaceholder();
    internal static string get_ListView_NoInsertItem();
    internal static string get_ListView_NoItemPlaceholder();
    internal static string get_ListView_NullView();
    internal static string get_ListView_OnItemCanceling();
    internal static string get_ListView_OnItemCommand();
    internal static string get_ListView_OnItemCreated();
    internal static string get_ListView_OnItemDataBound();
    internal static string get_ListView_OnItemDeleted();
    internal static string get_ListView_OnItemDeleting();
    internal static string get_ListView_OnItemEditing();
    internal static string get_ListView_OnItemInserted();
    internal static string get_ListView_OnItemInserting();
    internal static string get_ListView_OnItemUpdated();
    internal static string get_ListView_OnItemUpdating();
    internal static string get_ListView_OnLayoutCreated();
    internal static string get_ListView_OnPagePropertiesChanged();
    internal static string get_ListView_OnPagePropertiesChanging();
    internal static string get_ListView_OnSelectedIndexChanged();
    internal static string get_ListView_OnSelectedIndexChanging();
    internal static string get_ListView_OnSorted();
    internal static string get_ListView_OnSorting();
    internal static string get_ListView_PersistedSelectionRequiresDataKeysNames();
    internal static string get_ListView_SelectedIndex();
    internal static string get_ListView_SelectedItemTemplate();
    internal static string get_ListView_SortDirection();
    internal static string get_ListView_SortExpression();
    internal static string get_ListView_StyleNotSupported();
    internal static string get_ListView_StylePropertiesNotSupported();
    internal static string get_ListView_UnhandledEvent();
    internal static string get_ListViewPagedDataSource_CannotGetCount();
    internal static string get_ListViewPagedDataSource_EnumeratorMoveNextNotCalled();
    internal static string get_MethodExpression_ChangingTheReturnTypeIsNotAllowed();
    internal static string get_MethodExpression_DataSourceMustBeIDynamicDataSource();
    internal static string get_MethodExpression_FirstParamterMustBeCorrectType();
    internal static string get_MethodExpression_MethodMustBeStatic();
    internal static string get_MethodExpression_MethodNameMustBeSpecified();
    internal static string get_MethodExpression_MethodNotFound();
    internal static string get_MethodExpression_ParameterNotFound();
    internal static string get_NextPreviousPagerField_ButtonCssClass();
    internal static string get_NextPreviousPagerField_ButtonType();
    internal static string get_NextPreviousPagerField_FirstPageImageUrl();
    internal static string get_NextPreviousPagerField_FirstPageText();
    internal static string get_NextPreviousPagerField_LastPageImageUrl();
    internal static string get_NextPreviousPagerField_LastPageText();
    internal static string get_NextPreviousPagerField_NextPageImageUrl();
    internal static string get_NextPreviousPagerField_NextPageText();
    internal static string get_NextPreviousPagerField_PreviousPageImageUrl();
    internal static string get_NextPreviousPagerField_PreviousPageText();
    internal static string get_NextPreviousPagerField_RenderDisabledButtonsAsLabels();
    internal static string get_NextPreviousPagerField_RenderNonBreakingSpacesBetweenControls();
    internal static string get_NextPreviousPagerField_ShowFirstPageButton();
    internal static string get_NextPreviousPagerField_ShowLastPageButton();
    internal static string get_NextPreviousPagerField_ShowNextPageButton();
    internal static string get_NextPreviousPagerField_ShowPreviousPageButton();
    internal static string get_NextPrevPagerField_DefaultFirstPageText();
    internal static string get_NextPrevPagerField_DefaultLastPageText();
    internal static string get_NextPrevPagerField_DefaultNextPageText();
    internal static string get_NextPrevPagerField_DefaultPreviousPageText();
    internal static string get_NumericPagerField_ButtonCount();
    internal static string get_NumericPagerField_ButtonType();
    internal static string get_NumericPagerField_CurrentPageLabelCssClass();
    internal static string get_NumericPagerField_DefaultNextPageText();
    internal static string get_NumericPagerField_DefaultPreviousPageText();
    internal static string get_NumericPagerField_NextPageImageUrl();
    internal static string get_NumericPagerField_NextPageText();
    internal static string get_NumericPagerField_NextPreviousButtonCssClass();
    internal static string get_NumericPagerField_NumericButtonCssClass();
    internal static string get_NumericPagerField_PreviousPageImageUrl();
    internal static string get_NumericPagerField_PreviousPageText();
    internal static string get_NumericPagerField_RenderNonBreakingSpacesBetweenControls();
    internal static string get_OfTypeExpression_CannotFindType();
    internal static string get_OfTypeExpression_TypeNameNotSpecified();
    internal static string get_PageRequestManager_RegisterDataItemInNonAsyncRequest();
    internal static string get_PageRequestManager_RegisterDataItemTwice();
    internal static string get_PagerFieldCollection_InvalidType();
    internal static string get_PagerFieldCollection_InvalidTypeIndex();
    internal static string get_ParseException_ParseExceptionFormat();
    internal static string get_ProfileServiceManager_LoadProperitesWithNonDefaultPath();
    internal static string get_ProfileServiceManager_LoadProperties();
    internal static string get_ProxyGenerator_UnsupportedType();
    internal static string get_ProxyHelper_BadStatusCode();
    internal static string get_QueryExtender_DataSourceMustBeIQueryableDataSource();
    internal static string get_QueryExtender_Expressions();
    internal static string get_RangeExpression_MaximumValueRequired();
    internal static string get_RangeExpression_MinimumValueRequired();
    internal static string get_RangeExpression_RangeTypeMustBeSpecified();
    internal static string get_RoleService_RoleProviderNotFound();
    internal static string get_RoleService_RolesFeatureNotEnabled();
    internal static string get_RoleServiceManager_LoadRoles();
    internal static string get_RoleServiceManager_LoadRolesWithNonDefaultPath();
    internal static string get_ScriptControlDescriptor_IDNotSettable();
    internal static string get_ScriptControlManager_ExtenderControlNotRegistered();
    internal static string get_ScriptControlManager_NoTargetControlTypes();
    internal static string get_ScriptControlManager_RegisterExtenderControlTooEarly();
    internal static string get_ScriptControlManager_RegisterExtenderControlTooLate();
    internal static string get_ScriptControlManager_RegisterScriptControlTooEarly();
    internal static string get_ScriptControlManager_RegisterScriptControlTooLate();
    internal static string get_ScriptControlManager_ScriptControlNotRegistered();
    internal static string get_ScriptControlManager_TargetControlTypeInvalid();
    internal static string get_ScriptManager_AjaxFrameworkAssembly();
    internal static string get_ScriptManager_AjaxFrameworkMode();
    internal static string get_ScriptManager_AllowCustomErrorsRedirect();
    internal static string get_ScriptManager_AsyncPostBackError();
    internal static string get_ScriptManager_AsyncPostBackErrorMessage();
    internal static string get_ScriptManager_AsyncPostBackNotInPartialRenderingMode();
    internal static string get_ScriptManager_AsyncPostBackTimeout();
    internal static string get_ScriptManager_AuthenticationService();
    internal static string get_ScriptManager_CannotAddHistoryPointOutsideOfAsyncPostBack();
    internal static string get_ScriptManager_CannotAddHistoryPointWithHistoryDisabled();
    internal static string get_ScriptManager_CannotChangeAjaxFrameworkMode();
    internal static string get_ScriptManager_CannotChangeEnableCdn();
    internal static string get_ScriptManager_CannotChangeEnableCdnFallback();
    internal static string get_ScriptManager_CannotChangeEnableHistory();
    internal static string get_ScriptManager_CannotChangeEnablePartialRendering();
    internal static string get_ScriptManager_CannotChangeEnableScriptGlobalization();
    internal static string get_ScriptManager_CannotChangeSupportsPartialRendering();
    internal static string get_ScriptManager_CannotRegisterBothPostBacks();
    internal static string get_ScriptManager_CannotRegisterScriptInMultipleCompositeReferences();
    internal static string get_ScriptManager_CannotSetSupportsPartialRenderingWhenDisabled();
    internal static string get_ScriptManager_ClientNavigateHandler();
    internal static string get_ScriptManager_CompositeScript();
    internal static string get_ScriptManager_EmptyPageUrl();
    internal static string get_ScriptManager_EnableCdn();
    internal static string get_ScriptManager_EnableCdnFallback();
    internal static string get_ScriptManager_EnableHistory();
    internal static string get_ScriptManager_EnablePageMethods();
    internal static string get_ScriptManager_EnablePartialRendering();
    internal static string get_ScriptManager_EnableScriptGlobalization();
    internal static string get_ScriptManager_EnableScriptLocalization();
    internal static string get_ScriptManager_EnableSecureHistoryState();
    internal static string get_ScriptManager_FrameworkFailedToLoad();
    internal static string get_ScriptManager_InvalidControlRegistration();
    internal static string get_ScriptManager_LoadScriptsBeforeUI();
    internal static string get_ScriptManager_MustHaveGreaterVersion();
    internal static string get_ScriptManager_Navigate();
    internal static string get_ScriptManager_OnlyOneScriptManager();
    internal static string get_ScriptManager_PageUntitled();
    internal static string get_ScriptManager_ProfileService();
    internal static string get_ScriptManager_ResolveCompositeScriptReference();
    internal static string get_ScriptManager_ResolveScriptReference();
    internal static string get_ScriptManager_RoleService();
    internal static string get_ScriptManager_ScriptMode();
    internal static string get_ScriptManager_ScriptPath();
    internal static string get_ScriptManager_Scripts();
    internal static string get_ScriptManager_Services();
    internal static string get_ScriptManager_UpdatePanelNotRegistered();
    internal static string get_ScriptReference_Assembly();
    internal static string get_ScriptReference_AssemblyRequiresName();
    internal static string get_ScriptReference_IgnoreScriptPath();
    internal static string get_ScriptReference_InvalidReleaseScriptName();
    internal static string get_ScriptReference_InvalidReleaseScriptPath();
    internal static string get_ScriptReference_Name();
    internal static string get_ScriptReference_NameAndPathCannotBeEmpty();
    internal static string get_ScriptReference_NotifyScriptLoaded();
    internal static string get_ScriptReference_Path();
    internal static string get_ScriptReference_ResourceRequiresAjaxAssembly();
    internal static string get_ScriptReference_ResourceUICultures();
    internal static string get_ScriptReference_ScriptMode();
    internal static string get_ScriptRegistrationManager_ControlNotOnPage();
    internal static string get_ScriptRegistrationManager_InvalidChars();
    internal static string get_ScriptRegistrationManager_NoCloseTag();
    internal static string get_ScriptRegistrationManager_NoTags();
    internal static string get_ScriptResourceDefinition_InvalidPath();
    internal static string get_ScriptResourceDefinition_NameAndPathCannotBeEmpty();
    internal static string get_ScriptResourceHandler_DuplicateScriptResources();
    internal static string get_ScriptResourceHandler_InvalidRequest();
    internal static string get_ScriptResourceHandler_ResourceUrlTooLong();
    internal static string get_ScriptResourceHandler_TypeNameMismatch();
    internal static string get_ScriptResourceHandler_UnknownResource();
    internal static string get_SearchExpression_ParameterRequired();
    internal static string get_ServiceReference_InlineScript();
    internal static string get_ServiceReference_Path();
    internal static string get_ServiceReference_PathCannotBeEmpty();
    internal static string get_ServiceUriNotFound();
    internal static string get_SqlHelper_SqlEverywhereNotInstalled();
    internal static string get_TemplatePagerField_OnPagerCommand();
    internal static string get_TemplatePagerField_PagerTemplate();
    internal static string get_TemplatePagerField_UnhandledEvent();
    internal static string get_Timer_IntervalMustBeGreaterThanZero();
    internal static string get_Timer_TimerEnable();
    internal static string get_Timer_TimerInterval();
    internal static string get_Timer_TimerTick();
    internal static string get_UnhandledExceptionEventLogMessage();
    internal static string get_UpdatePanel_CannotModifyControlCollection();
    internal static string get_UpdatePanel_CannotSetContentTemplate();
    internal static string get_UpdatePanel_ChildrenAsTriggers();
    internal static string get_UpdatePanel_ChildrenTriggersAndUpdateAlways();
    internal static string get_UpdatePanel_RenderMode();
    internal static string get_UpdatePanel_SetPartialRenderingModeCalledOnce();
    internal static string get_UpdatePanel_Triggers();
    internal static string get_UpdatePanel_UpdateConditional();
    internal static string get_UpdatePanel_UpdateMode();
    internal static string get_UpdatePanel_UpdateTooLate();
    internal static string get_UpdatePanelControlTrigger_ControlID();
    internal static string get_UpdatePanelControlTrigger_ControlNotFound();
    internal static string get_UpdatePanelControlTrigger_NoControlID();
    internal static string get_UpdateProgress_AssociatedUpdatePanelID();
    internal static string get_UpdateProgress_DisplayAfter();
    internal static string get_UpdateProgress_DisplayAfterInvalid();
    internal static string get_UpdateProgress_DynamicLayout();
    internal static string get_UpdateProgress_NoUpdatePanel();
    internal static string get_UpdateProgress_ProgressTemplate();
    internal static string get_UserIsNotAuthenticated();
    internal static string get_WebResourceUtil_AssemblyDoesNotContainDebugWebResource();
    internal static string get_WebResourceUtil_AssemblyDoesNotContainEmbeddedResource();
    internal static string get_WebResourceUtil_AssemblyDoesNotContainReleaseWebResource();
    internal static string get_WebResourceUtil_SystemWebExtensionsDoesNotContainReleaseWebResource();
    internal static string get_WebService_Error();
    internal static string get_WebService_InvalidGenerateScriptType();
    internal static string get_WebService_InvalidInlineVirtualPath();
    internal static string get_WebService_InvalidVerbRequest();
    internal static string get_WebService_InvalidWebServiceCall();
    internal static string get_WebService_InvalidXmlReturnType();
    internal static string get_WebService_MissingArg();
    internal static string get_WebService_NoScriptServiceAttribute();
    internal static string get_WebService_NoWebServiceData();
    internal static string get_WebService_NoWebServiceDataInlineScript();
    internal static string get_WebService_RedirectError();
    internal static string get_WebService_UnknownWebMethod();
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class System.Web.Resources.WCFModelStrings : object {
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string ReferenceGroup_AppendLinePosition { get; }
    internal static string ReferenceGroup_DataContractExcludedAndIncluded { get; }
    internal static string ReferenceGroup_DuplicatedSchemaItems { get; }
    internal static string ReferenceGroup_DuplicatedSchemaItemsIgnored { get; }
    internal static string ReferenceGroup_EmptyAddress { get; }
    internal static string ReferenceGroup_EmptyProtocol { get; }
    internal static string ReferenceGroup_FailedToGenerateCode { get; }
    internal static string ReferenceGroup_FailedToLoadAssembly { get; }
    internal static string ReferenceGroup_FieldDefinedDifferentlyInDuplicatedMessage { get; }
    internal static string ReferenceGroup_FieldDefinedInOneOfDuplicatedMessage { get; }
    internal static string ReferenceGroup_InvalidFileName { get; }
    internal static string ReferenceGroup_InvalidSourceId { get; }
    internal static string ReferenceGroup_OperationDefinedDifferently { get; }
    internal static string ReferenceGroup_OperationDefinedInOneOfDuplicatedServiceContract { get; }
    internal static string ReferenceGroup_ServiceContractMappingMissMatch { get; }
    internal static string ReferenceGroup_SharedTypeMustBePublic { get; }
    internal static string ReferenceGroup_TwoExternalFilesWithSameName { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ReferenceGroup_AppendLinePosition();
    internal static string get_ReferenceGroup_DataContractExcludedAndIncluded();
    internal static string get_ReferenceGroup_DuplicatedSchemaItems();
    internal static string get_ReferenceGroup_DuplicatedSchemaItemsIgnored();
    internal static string get_ReferenceGroup_EmptyAddress();
    internal static string get_ReferenceGroup_EmptyProtocol();
    internal static string get_ReferenceGroup_FailedToGenerateCode();
    internal static string get_ReferenceGroup_FailedToLoadAssembly();
    internal static string get_ReferenceGroup_FieldDefinedDifferentlyInDuplicatedMessage();
    internal static string get_ReferenceGroup_FieldDefinedInOneOfDuplicatedMessage();
    internal static string get_ReferenceGroup_InvalidFileName();
    internal static string get_ReferenceGroup_InvalidSourceId();
    internal static string get_ReferenceGroup_OperationDefinedDifferently();
    internal static string get_ReferenceGroup_OperationDefinedInOneOfDuplicatedServiceContract();
    internal static string get_ReferenceGroup_ServiceContractMappingMissMatch();
    internal static string get_ReferenceGroup_SharedTypeMustBePublic();
    internal static string get_ReferenceGroup_TwoExternalFilesWithSameName();
}
[AttributeUsageAttribute("1")]
public class System.Web.Script.AjaxFrameworkAssemblyAttribute : Attribute {
    protected internal virtual Assembly GetDefaultAjaxFrameworkAssembly(Assembly currentAssembly);
}
public abstract class System.Web.Script.Serialization.JavaScriptConverter : object {
    public IEnumerable`1<Type> SupportedTypes { get; }
    public abstract virtual IEnumerable`1<Type> get_SupportedTypes();
    public abstract virtual object Deserialize(IDictionary`2<string, object> dictionary, Type type, JavaScriptSerializer serializer);
    public abstract virtual IDictionary`2<string, object> Serialize(object obj, JavaScriptSerializer serializer);
}
internal class System.Web.Script.Serialization.JavaScriptObjectDeserializer : object {
    internal JavaScriptString _s;
    internal static object BasicDeserialize(string input, int depthLimit, JavaScriptSerializer serializer);
}
public class System.Web.Script.Serialization.JavaScriptSerializer : object {
    internal static string ServerTypeFieldName;
    internal static int DefaultRecursionLimit;
    internal static int DefaultMaxJsonLength;
    internal static long DatetimeMinTimeTicks;
    public int MaxJsonLength { get; public set; }
    public int RecursionLimit { get; public set; }
    internal JavaScriptTypeResolver TypeResolver { get; }
    public JavaScriptSerializer(JavaScriptTypeResolver resolver);
    private static JavaScriptSerializer();
    internal static string SerializeInternal(object o);
    internal static object Deserialize(JavaScriptSerializer serializer, string input, Type type, int depthLimit);
    public int get_MaxJsonLength();
    public void set_MaxJsonLength(int value);
    public int get_RecursionLimit();
    public void set_RecursionLimit(int value);
    internal JavaScriptTypeResolver get_TypeResolver();
    public void RegisterConverters(IEnumerable`1<JavaScriptConverter> converters);
    internal bool ConverterExistsForType(Type t, JavaScriptConverter& converter);
    public object DeserializeObject(string input);
    public T Deserialize(string input);
    public object Deserialize(string input, Type targetType);
    public T ConvertToType(object obj);
    public object ConvertToType(object obj, Type targetType);
    public string Serialize(object obj);
    internal string Serialize(object obj, SerializationFormat serializationFormat);
    public void Serialize(object obj, StringBuilder output);
    internal void Serialize(object obj, StringBuilder output, SerializationFormat serializationFormat);
}
internal class System.Web.Script.Serialization.JavaScriptString : object {
    internal JavaScriptString(string s);
    internal Nullable`1<char> GetNextNonEmptyChar();
    internal Nullable`1<char> MoveNext();
    internal string MoveNext(int count);
    internal void MovePrev();
    internal void MovePrev(int count);
    public virtual string ToString();
    internal string GetDebugString(string message);
    internal int IndexOf(string substr);
    internal string Substring(int length);
}
public abstract class System.Web.Script.Serialization.JavaScriptTypeResolver : object {
    public abstract virtual Type ResolveType(string id);
    public abstract virtual string ResolveTypeId(Type type);
}
internal static class System.Web.Script.Serialization.ObjectConverter : object {
    private static ObjectConverter();
    internal static object ConvertObjectToType(object o, Type type, JavaScriptSerializer serializer);
    internal static bool IsClientInstantiatableType(Type t, JavaScriptSerializer serializer);
    internal static bool TryConvertObjectToType(object o, Type type, JavaScriptSerializer serializer, Object& convertedObject);
}
[AttributeUsageAttribute("384")]
public class System.Web.Script.Serialization.ScriptIgnoreAttribute : Attribute {
    public bool ApplyToOverrides { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ApplyToOverrides();
    [CompilerGeneratedAttribute]
public void set_ApplyToOverrides(bool value);
}
public class System.Web.Script.Serialization.SimpleTypeResolver : JavaScriptTypeResolver {
    public virtual Type ResolveType(string id);
    public virtual string ResolveTypeId(Type type);
}
internal abstract class System.Web.Script.Services.ClientProxyGenerator : object {
    protected StringBuilder _builder;
    protected bool _debugMode;
    private static ClientProxyGenerator();
    internal string GetClientProxyScript(WebServiceData webServiceData);
    protected void GenerateRegisterClass(WebServiceData webServiceData);
    protected virtual void GenerateConstructor(WebServiceData webServiceData);
    protected virtual void GeneratePrototype(WebServiceData webServiceData);
    protected virtual void GenerateTypeDeclaration(WebServiceData webServiceData, bool genClass);
    protected void GenerateFields();
    protected virtual void GenerateMethods();
    protected void GenerateStaticMethods(WebServiceData webServiceData);
    protected abstract virtual string GetProxyPath();
    protected virtual string GetJsonpCallbackParameterName();
    protected virtual bool GetSupportsJsonp();
    protected void GenerateStaticInstance(WebServiceData data);
    protected virtual string GetClientTypeNamespace(string ns);
    protected virtual string GetProxyTypeName(WebServiceData data);
}
[AttributeUsageAttribute("1092")]
public class System.Web.Script.Services.GenerateScriptTypeAttribute : Attribute {
    public Type Type { get; }
    public string ScriptTypeId { get; public set; }
    public GenerateScriptTypeAttribute(Type type);
    public Type get_Type();
    public string get_ScriptTypeId();
    public void set_ScriptTypeId(string value);
}
internal class System.Web.Script.Services.PageClientProxyGenerator : ClientProxyGenerator {
    internal PageClientProxyGenerator(IPage page, bool debug);
    internal PageClientProxyGenerator(string path, bool debug);
    internal static string GetClientProxyScript(HttpContext context, IPage page, bool debug);
    protected virtual void GenerateTypeDeclaration(WebServiceData webServiceData, bool genClass);
    protected virtual string GetProxyTypeName(WebServiceData data);
    protected virtual string GetProxyPath();
}
public static class System.Web.Script.Services.ProxyGenerator : object {
    public static string GetClientProxyScript(Type type, string path, bool debug);
    public static string GetClientProxyScript(Type type, string path, bool debug, ServiceEndpoint serviceEndpoint);
}
public enum System.Web.Script.Services.ResponseFormat : Enum {
    public int value__;
    public static ResponseFormat Json;
    public static ResponseFormat Xml;
}
internal class System.Web.Script.Services.RestClientProxyHandler : object {
    public bool IsReusable { get; }
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
}
internal class System.Web.Script.Services.RestHandler : object {
    public bool IsReusable { get; }
    internal static IHttpHandler CreateHandler(HttpContext context);
    internal static void ExecuteWebServiceCall(HttpContext context, WebServiceMethodData methodData);
    internal static void WriteExceptionJsonString(HttpContext context, Exception ex);
    internal static void WriteExceptionJsonString(HttpContext context, Exception ex, int statusCode);
    public sealed virtual void ProcessRequest(HttpContext context);
    public sealed virtual bool get_IsReusable();
}
internal class System.Web.Script.Services.RestHandlerFactory : object {
    internal static string ClientProxyRequestPathInfo;
    internal static string ClientDebugProxyRequestPathInfo;
    public virtual IHttpHandler GetHandler(HttpContext context, string requestType, string url, string pathTranslated);
    public virtual void ReleaseHandler(IHttpHandler handler);
    internal static bool IsRestRequest(HttpContext context);
    internal static bool IsRestMethodCall(HttpRequest request);
    internal static bool IsClientProxyDebugRequest(string pathInfo);
    internal static bool IsClientProxyRequest(string pathInfo);
}
internal class System.Web.Script.Services.RestHandlerWithSession : RestHandler {
}
internal class System.Web.Script.Services.ScriptHandlerFactory : object {
    [SecuritySafeCriticalAttribute]
public virtual IHttpHandler GetHandler(HttpContext context, string requestType, string url, string pathTranslated);
    public virtual void ReleaseHandler(IHttpHandler handler);
}
[AttributeUsageAttribute("64")]
public class System.Web.Script.Services.ScriptMethodAttribute : Attribute {
    public ResponseFormat ResponseFormat { get; public set; }
    public bool UseHttpGet { get; public set; }
    public bool XmlSerializeString { get; public set; }
    public ResponseFormat get_ResponseFormat();
    public void set_ResponseFormat(ResponseFormat value);
    public bool get_UseHttpGet();
    public void set_UseHttpGet(bool value);
    public bool get_XmlSerializeString();
    public void set_XmlSerializeString(bool value);
}
[AttributeUsageAttribute("1028")]
public class System.Web.Script.Services.ScriptServiceAttribute : Attribute {
}
internal static class System.Web.Script.Services.ServicesUtilities : object {
    internal static string GetClientTypeName(string name);
    internal static string GetClientTypeFromServerType(WebServiceData webServiceData, Type type);
    internal static Type UnwrapNullableType(Type type);
    internal static string XmlSerializeObjectToString(object obj);
}
internal class System.Web.Script.Services.WebServiceClientProxyGenerator : ClientProxyGenerator {
    internal WebServiceClientProxyGenerator(string path, bool debug);
    internal static string GetInlineClientProxyScript(string path, HttpContext context, bool debug);
    [SecuritySafeCriticalAttribute]
internal static string GetClientProxyScript(HttpContext context);
    protected virtual string GetProxyPath();
}
internal class System.Web.Script.Services.WebServiceData : JavaScriptTypeResolver {
    internal static string _profileServiceFileName;
    internal static string _authenticationServiceFileName;
    internal static string _roleServiceFileName;
    internal JavaScriptSerializer Serializer { get; }
    internal WebServiceTypeData TypeData { get; }
    internal ICollection`1<WebServiceMethodData> MethodDatas { get; }
    internal IEnumerable`1<WebServiceTypeData> ClientTypes { get; }
    internal Dictionary`2<string, WebServiceTypeData> ClientTypeDictionary { get; internal set; }
    internal Dictionary`2<Type, string> ClientTypeNameDictionary { get; }
    internal IEnumerable`1<WebServiceEnumData> EnumTypes { get; }
    internal Dictionary`2<string, WebServiceEnumData> EnumTypeDictionary { get; internal set; }
    internal WebServiceData(Type type, bool pageMethods);
    internal WebServiceData(WebServiceTypeData typeData, Dictionary`2<string, WebServiceMethodData> methods);
    internal JavaScriptSerializer get_Serializer();
    internal static WebServiceData GetWebServiceData(HttpContext context, string virtualPath);
    internal static WebServiceData GetWebServiceData(HttpContext context, string virtualPath, bool failIfNoData, bool pageMethods);
    [SecuritySafeCriticalAttribute]
internal static WebServiceData GetWebServiceData(HttpContext context, string virtualPath, bool failIfNoData, bool pageMethods, bool inlineScript);
    internal WebServiceTypeData get_TypeData();
    internal ICollection`1<WebServiceMethodData> get_MethodDatas();
    internal void ClearProcessedTypes();
    internal void Initialize(WebServiceTypeData typeData, Dictionary`2<string, WebServiceMethodData> methods);
    internal WebServiceMethodData GetMethodData(string methodName);
    internal void ProcessClientType(Type t, bool force, bool isWCF);
    internal IEnumerable`1<WebServiceTypeData> get_ClientTypes();
    internal Dictionary`2<string, WebServiceTypeData> get_ClientTypeDictionary();
    internal void set_ClientTypeDictionary(Dictionary`2<string, WebServiceTypeData> value);
    internal Dictionary`2<Type, string> get_ClientTypeNameDictionary();
    internal IEnumerable`1<WebServiceEnumData> get_EnumTypes();
    internal Dictionary`2<string, WebServiceEnumData> get_EnumTypeDictionary();
    internal void set_EnumTypeDictionary(Dictionary`2<string, WebServiceEnumData> value);
    public virtual Type ResolveType(string id);
    public virtual string ResolveTypeId(Type type);
    internal string GetTypeStringRepresentation(string typeName);
    internal string GetTypeStringRepresentation(string typeName, bool ensure);
    internal string GetTypeStringRepresentation(WebServiceTypeData typeData);
}
internal class System.Web.Script.Services.WebServiceEnumData : WebServiceTypeData {
    internal bool IsULong { get; }
    internal String[] Names { get; }
    internal Int64[] Values { get; }
    internal WebServiceEnumData(string typeName, string typeNamespace, String[] names, Int64[] values, bool isULong);
    internal WebServiceEnumData(string typeName, string typeNamespace, Type t, String[] names, Int64[] values, bool isULong);
    internal WebServiceEnumData(string typeName, string typeNamespace, String[] names, Array values, bool isULong);
    internal WebServiceEnumData(string typeName, string typeNamespace, Type t, String[] names, Array values, bool isULong);
    internal bool get_IsULong();
    internal String[] get_Names();
    internal Int64[] get_Values();
}
internal class System.Web.Script.Services.WebServiceMethodData : object {
    internal WebServiceData Owner { get; }
    internal string MethodName { get; }
    internal MethodInfo MethodInfo { get; }
    internal IDictionary`2<string, WebServiceParameterData> ParameterDataDictionary { get; }
    internal ICollection`1<WebServiceParameterData> ParameterDatas { get; }
    internal int CacheDuration { get; }
    internal bool RequiresSession { get; }
    internal bool IsStatic { get; }
    internal Type ReturnType { get; }
    internal bool UseXmlResponse { get; }
    internal bool XmlSerializeString { get; }
    internal bool UseGet { get; }
    internal WebServiceMethodData(WebServiceData owner, MethodInfo methodInfo, WebMethodAttribute webMethodAttribute, ScriptMethodAttribute scriptMethodAttribute);
    internal WebServiceMethodData(WebServiceData owner, string methodName, Dictionary`2<string, WebServiceParameterData> parameterData, bool useHttpGet);
    internal WebServiceData get_Owner();
    internal string get_MethodName();
    internal MethodInfo get_MethodInfo();
    internal IDictionary`2<string, WebServiceParameterData> get_ParameterDataDictionary();
    internal ICollection`1<WebServiceParameterData> get_ParameterDatas();
    internal int get_CacheDuration();
    internal bool get_RequiresSession();
    internal bool get_IsStatic();
    internal Type get_ReturnType();
    internal bool get_UseXmlResponse();
    internal bool get_XmlSerializeString();
    internal bool get_UseGet();
    internal object CallMethodFromRawParams(object target, IDictionary`2<string, object> parameters);
}
internal class System.Web.Script.Services.WebServiceParameterData : object {
    internal int Index { get; }
    internal ParameterInfo ParameterInfo { get; }
    internal string ParameterName { get; }
    internal Type ParameterType { get; }
    internal WebServiceParameterData(ParameterInfo param, int index);
    internal WebServiceParameterData(string paramName, Type paramType, int index);
    internal int get_Index();
    internal ParameterInfo get_ParameterInfo();
    internal string get_ParameterName();
    internal Type get_ParameterType();
}
internal class System.Web.Script.Services.WebServiceTypeData : object {
    internal string StringRepresentation { get; }
    internal string TypeName { get; }
    internal string TypeNamespace { get; }
    internal Type Type { get; }
    private static WebServiceTypeData();
    internal WebServiceTypeData(string name, string ns, Type type);
    internal WebServiceTypeData(string name, string ns);
    internal string get_StringRepresentation();
    internal string get_TypeName();
    internal string get_TypeNamespace();
    internal Type get_Type();
    internal static List`1<WebServiceTypeData> GetKnownTypes(Type type, WebServiceTypeData typeData);
    internal static WebServiceTypeData GetWebServiceTypeData(Type type);
    internal static XmlQualifiedName ImportActualType(XmlSchemaAnnotation annotation, XmlQualifiedName defaultTypeName, XmlQualifiedName typeName);
}
[ScriptServiceAttribute]
internal class System.Web.Security.AuthenticationService : object {
    [WebMethodAttribute]
public bool Login(string userName, string password, bool createPersistentCookie);
    [WebMethodAttribute]
public void Logout();
    [WebMethodAttribute]
public bool IsLoggedIn();
}
[ScriptServiceAttribute]
internal class System.Web.Security.RoleService : object {
    [WebMethodAttribute]
public String[] GetRolesForCurrentUser();
    [WebMethodAttribute]
public bool IsCurrentUserInRole(string role);
}
public enum System.Web.UI.AjaxFrameworkMode : Enum {
    public int value__;
    public static AjaxFrameworkMode Enabled;
    public static AjaxFrameworkMode Disabled;
    public static AjaxFrameworkMode Explicit;
}
internal class System.Web.UI.AppLevelCompilationSectionCache : object {
    public static AppLevelCompilationSectionCache Instance { get; }
    public bool Debug { get; }
    private static AppLevelCompilationSectionCache();
    public static AppLevelCompilationSectionCache get_Instance();
    public sealed virtual bool get_Debug();
}
internal static class System.Web.UI.ApplicationServiceManager : object {
    public static int StringBuilderCapacity;
    public static string MergeServiceUrls(string serviceUrl, string existingUrl, Control urlBase);
}
internal static class System.Web.UI.AssemblyCache : object {
    public static Assembly SystemWebExtensions;
    public static Assembly SystemWeb;
    internal static bool _useCompilationSection;
    internal static Hashtable _versionCache;
    private static AssemblyCache();
    public static Version GetVersion(Assembly assembly);
    public static Assembly Load(string assemblyName);
    public static bool IsAjaxFrameworkAssembly(Assembly assembly);
    public static AjaxFrameworkAssemblyAttribute GetAjaxFrameworkAssemblyAttribute(Assembly assembly);
    internal static AjaxFrameworkAssemblyAttribute SafeGetAjaxFrameworkAssemblyAttribute(ICustomAttributeProvider attributeProvider);
}
public class System.Web.UI.AsyncPostBackErrorEventArgs : EventArgs {
    public Exception Exception { get; }
    public AsyncPostBackErrorEventArgs(Exception exception);
    public Exception get_Exception();
}
public class System.Web.UI.AsyncPostBackTrigger : UpdatePanelControlTrigger {
    [TypeConverterAttribute("System.Web.UI.Design.AsyncPostBackTriggerControlIDConverter, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public string ControlID { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("AsyncPostBackTrigger_EventName")]
[TypeConverterAttribute("System.Web.UI.Design.AsyncPostBackTriggerEventNameConverter, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public string EventName { get; public set; }
    internal IScriptManagerInternal ScriptManager { get; }
    internal AsyncPostBackTrigger(IScriptManagerInternal scriptManager);
    public string get_ControlID();
    public void set_ControlID(string value);
    public string get_EventName();
    public void set_EventName(string value);
    internal IScriptManagerInternal get_ScriptManager();
    protected internal virtual void Initialize();
    protected internal virtual bool HasTriggered();
    public void OnEvent(object sender, EventArgs e);
    public virtual string ToString();
}
[DefaultPropertyAttribute("Path")]
[TypeConverterAttribute("System.Web.UI.EmptyStringExpandableObjectConverter")]
public class System.Web.UI.AuthenticationServiceManager : object {
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[NotifyParentPropertyAttribute("True")]
[ResourceDescriptionAttribute("ApplicationServiceManager_Path")]
[UrlPropertyAttribute]
public string Path { get; public set; }
    internal static void ConfigureAuthenticationService(StringBuilder& sb, HttpContext context, ScriptManager scriptManager, List`1<ScriptManagerProxy> proxies);
    public string get_Path();
    public void set_Path(string value);
}
internal class System.Web.UI.BundleReflectionHelper : object {
    internal object BundleResolver { get; internal set; }
    public BundleReflectionHelper(object bundleResolver);
    internal object get_BundleResolver();
    internal void set_BundleResolver(object value);
    public bool IsBundleVirtualPath(string virtualPath);
    public IEnumerable`1<string> GetBundleContents(string virtualPath);
    public string GetBundleUrl(string virtualPath);
    internal static object CallBundleResolverCurrent();
}
internal class System.Web.UI.ClientScriptManagerWrapper : object {
    private Dictionary`2<Assembly, Dictionary`2<string, object>> System.Web.UI.IClientScriptManager.RegisteredResourcesToSuppress { get; }
    internal ClientScriptManagerWrapper(ClientScriptManager clientScriptManager);
    private sealed virtual override Dictionary`2<Assembly, Dictionary`2<string, object>> System.Web.UI.IClientScriptManager.get_RegisteredResourcesToSuppress();
    private sealed virtual override string System.Web.UI.IClientScriptManager.GetPostBackEventReference(PostBackOptions options);
    private sealed virtual override string System.Web.UI.IClientScriptManager.GetWebResourceUrl(Type type, string resourceName);
    private sealed virtual override void System.Web.UI.IClientScriptManager.RegisterClientScriptBlock(Type type, string key, string script);
    private sealed virtual override void System.Web.UI.IClientScriptManager.RegisterClientScriptInclude(Type type, string key, string url);
    private sealed virtual override void System.Web.UI.IClientScriptManager.RegisterClientScriptBlock(Type type, string key, string script, bool addScriptTags);
    private sealed virtual override void System.Web.UI.IClientScriptManager.RegisterStartupScript(Type type, string key, string script, bool addScriptTags);
}
internal class System.Web.UI.ClientUrlResolverWrapper : object {
    private string System.Web.UI.IClientUrlResolver.AppRelativeTemplateSourceDirectory { get; }
    public ClientUrlResolverWrapper(Control control);
    private sealed virtual override string System.Web.UI.IClientUrlResolver.get_AppRelativeTemplateSourceDirectory();
    private sealed virtual override string System.Web.UI.IClientUrlResolver.ResolveClientUrl(string relativeUrl);
}
[DefaultPropertyAttribute("Path")]
[TypeConverterAttribute("System.Web.UI.EmptyStringExpandableObjectConverter")]
public class System.Web.UI.CompositeScriptReference : ScriptReferenceBase {
    [ResourceDescriptionAttribute("CompositeScriptReference_Scripts")]
[CategoryAttribute("Behavior")]
[EditorAttribute("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[NotifyParentPropertyAttribute("True")]
[MergablePropertyAttribute("False")]
public ScriptReferenceCollection Scripts { get; }
    public ScriptReferenceCollection get_Scripts();
    protected internal virtual string GetUrl(ScriptManager scriptManager, bool zip);
    [ObsoleteAttribute("Use IsAjaxFrameworkScript(ScriptManager)")]
protected internal virtual bool IsFromSystemWebExtensions();
    protected internal virtual bool IsAjaxFrameworkScript(ScriptManager scriptManager);
}
public class System.Web.UI.CompositeScriptReferenceEventArgs : EventArgs {
    public CompositeScriptReference CompositeScript { get; }
    public CompositeScriptReferenceEventArgs(CompositeScriptReference compositeScript);
    public CompositeScriptReference get_CompositeScript();
}
internal class System.Web.UI.ControlUtil : object {
    internal static Control FindTargetControl(string controlID, Control control, bool searchNamingContainers);
    internal static bool IsBuiltInHiddenField(string hiddenFieldName);
}
internal class System.Web.UI.CustomErrorsSectionWrapper : object {
    private string System.Web.UI.ICustomErrorsSection.DefaultRedirect { get; }
    private CustomErrorCollection System.Web.UI.ICustomErrorsSection.Errors { get; }
    public CustomErrorsSectionWrapper(CustomErrorsSection customErrorsSection);
    private sealed virtual override string System.Web.UI.ICustomErrorsSection.get_DefaultRedirect();
    private sealed virtual override CustomErrorCollection System.Web.UI.ICustomErrorsSection.get_Errors();
}
internal class System.Web.UI.DeploymentSectionCache : object {
    public static DeploymentSectionCache Instance { get; }
    public bool Retail { get; }
    private static DeploymentSectionCache();
    public static DeploymentSectionCache get_Instance();
    public sealed virtual bool get_Retail();
}
internal class System.Web.UI.EmptyStringExpandableObjectConverter : ExpandableObjectConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[DefaultPropertyAttribute("TargetControlID")]
[DesignerAttribute("System.Web.UI.Design.ExtenderControlDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[NonVisualControlAttribute]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ToolboxItemAttribute("System.Web.UI.Design.ExtenderControlToolboxItem, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public abstract class System.Web.UI.ExtenderControl : Control {
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute]
[ResourceDescriptionAttribute("ExtenderControl_TargetControlID")]
public string TargetControlID { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    internal ExtenderControl(IScriptManagerInternal scriptManager, IPage page);
    public string get_TargetControlID();
    public void set_TargetControlID(string value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected abstract virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors(Control targetControl);
    protected abstract virtual IEnumerable`1<ScriptReference> GetScriptReferences();
    private sealed virtual override IEnumerable`1<ScriptDescriptor> System.Web.UI.IExtenderControl.GetScriptDescriptors(Control targetControl);
    private sealed virtual override IEnumerable`1<ScriptReference> System.Web.UI.IExtenderControl.GetScriptReferences();
}
public class System.Web.UI.HistoryEventArgs : EventArgs {
    public NameValueCollection State { get; }
    public HistoryEventArgs(NameValueCollection state);
    public NameValueCollection get_State();
}
internal class System.Web.UI.HtmlFormWrapper : object {
    private string System.Web.UI.IHtmlForm.ClientID { get; }
    private string System.Web.UI.IHtmlForm.Method { get; }
    public HtmlFormWrapper(HtmlForm form);
    private sealed virtual override string System.Web.UI.IHtmlForm.get_ClientID();
    private sealed virtual override string System.Web.UI.IHtmlForm.get_Method();
    private sealed virtual override void System.Web.UI.IHtmlForm.RenderControl(HtmlTextWriter writer);
    private sealed virtual override void System.Web.UI.IHtmlForm.SetRenderMethodDelegate(RenderMethod renderMethod);
}
internal interface System.Web.UI.IClientScriptManager {
    public Dictionary`2<Assembly, Dictionary`2<string, object>> RegisteredResourcesToSuppress { get; }
    public abstract virtual Dictionary`2<Assembly, Dictionary`2<string, object>> get_RegisteredResourcesToSuppress();
    public abstract virtual string GetPostBackEventReference(PostBackOptions options);
    public abstract virtual string GetWebResourceUrl(Type type, string resourceName);
    public abstract virtual void RegisterClientScriptBlock(Type type, string key, string script);
    public abstract virtual void RegisterClientScriptInclude(Type type, string key, string url);
    public abstract virtual void RegisterClientScriptBlock(Type type, string key, string script, bool addScriptTags);
    public abstract virtual void RegisterStartupScript(Type type, string key, string script, bool addScriptTags);
}
internal interface System.Web.UI.IClientUrlResolver {
    public string AppRelativeTemplateSourceDirectory { get; }
    public abstract virtual string get_AppRelativeTemplateSourceDirectory();
    public abstract virtual string ResolveClientUrl(string relativeUrl);
}
internal interface System.Web.UI.ICompilationSection {
    public bool Debug { get; }
    public abstract virtual bool get_Debug();
}
internal interface System.Web.UI.IControl {
    public HttpContextBase Context { get; }
    public bool DesignMode { get; }
    public abstract virtual HttpContextBase get_Context();
    public abstract virtual bool get_DesignMode();
}
internal interface System.Web.UI.ICustomErrorsSection {
    public string DefaultRedirect { get; }
    public CustomErrorCollection Errors { get; }
    public abstract virtual string get_DefaultRedirect();
    public abstract virtual CustomErrorCollection get_Errors();
}
internal interface System.Web.UI.IDeploymentSection {
    public bool Retail { get; }
    public abstract virtual bool get_Retail();
}
public interface System.Web.UI.IExtenderControl {
    public abstract virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors(Control targetControl);
    public abstract virtual IEnumerable`1<ScriptReference> GetScriptReferences();
}
internal interface System.Web.UI.IHtmlForm {
    public string ClientID { get; }
    public string Method { get; }
    public abstract virtual string get_ClientID();
    public abstract virtual string get_Method();
    public abstract virtual void RenderControl(HtmlTextWriter writer);
    public abstract virtual void SetRenderMethodDelegate(RenderMethod renderMethod);
}
internal interface System.Web.UI.IPage {
    public string AppRelativeVirtualPath { get; }
    public IDictionary`2<string, string> HiddenFieldsToRender { get; }
    public IClientScriptManager ClientScript { get; }
    public bool EnableEventValidation { get; }
    public IHtmlForm Form { get; }
    public HtmlHead Header { get; }
    public bool IsPostBack { get; }
    public bool IsValid { get; }
    public IDictionary Items { get; }
    public HttpRequestBase Request { get; }
    public HttpResponseInternalBase Response { get; }
    public HttpServerUtilityBase Server { get; }
    public string Title { get; public set; }
    public abstract virtual string get_AppRelativeVirtualPath();
    public abstract virtual IDictionary`2<string, string> get_HiddenFieldsToRender();
    public abstract virtual IClientScriptManager get_ClientScript();
    public abstract virtual bool get_EnableEventValidation();
    public abstract virtual IHtmlForm get_Form();
    public abstract virtual HtmlHead get_Header();
    public abstract virtual bool get_IsPostBack();
    public abstract virtual bool get_IsValid();
    public abstract virtual IDictionary get_Items();
    public abstract virtual HttpRequestBase get_Request();
    public abstract virtual HttpResponseInternalBase get_Response();
    public abstract virtual HttpServerUtilityBase get_Server();
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Error(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Error(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_InitComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_InitComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PreRender(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PreRender(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PreRenderComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PreRenderComplete(EventHandler value);
    public abstract virtual void RegisterRequiresViewStateEncryption();
    public abstract virtual void SetFocus(Control control);
    public abstract virtual void SetFocus(string clientID);
    public abstract virtual void SetPostFormRenderDelegate(RenderMethod renderMethod);
    public abstract virtual void SetRenderMethodDelegate(RenderMethod renderMethod);
    public abstract virtual void Validate(string validationGroup);
    public abstract virtual void VerifyRenderingInServerForm(Control control);
}
public interface System.Web.UI.IScriptControl {
    public abstract virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    public abstract virtual IEnumerable`1<ScriptReference> GetScriptReferences();
}
internal interface System.Web.UI.IScriptManagerInternal {
    public string AsyncPostBackSourceElementID { get; }
    public bool SupportsPartialRendering { get; }
    public bool IsInAsyncPostBack { get; }
    public abstract virtual string get_AsyncPostBackSourceElementID();
    public abstract virtual bool get_SupportsPartialRendering();
    public abstract virtual bool get_IsInAsyncPostBack();
    public abstract virtual void RegisterAsyncPostBackControl(Control control);
    public abstract virtual void RegisterExtenderControl(TExtenderControl extenderControl, Control targetControl);
    public abstract virtual void RegisterPostBackControl(Control control);
    public abstract virtual void RegisterProxy(ScriptManagerProxy proxy);
    public abstract virtual void RegisterScriptControl(TScriptControl scriptControl);
    public abstract virtual void RegisterScriptDescriptors(IExtenderControl extenderControl);
    public abstract virtual void RegisterScriptDescriptors(IScriptControl scriptControl);
    public abstract virtual void RegisterUpdatePanel(UpdatePanel updatePanel);
    public abstract virtual void UnregisterUpdatePanel(UpdatePanel updatePanel);
}
internal class System.Web.UI.PageRequestManager : object {
    internal static string UpdatePanelVersionToken;
    internal static string UpdatePanelVersionNumber;
    internal static string PageRedirectToken;
    internal static string HiddenFieldToken;
    internal static string ArrayDeclarationToken;
    internal static string ExpandoToken;
    internal static string OnSubmitToken;
    internal static string ScriptBlockToken;
    internal static string ScriptStartupBlockToken;
    internal static string ScriptDisposeToken;
    internal static string ErrorToken;
    internal static string AsyncPostBackErrorKey;
    internal static string AsyncPostBackErrorMessageKey;
    internal static string AsyncPostBackErrorHttpCodeKey;
    internal static string AsyncPostBackRedirectLocationKey;
    public string AsyncPostBackSourceElementID { get; }
    public PageRequestManager(ScriptManager owner);
    private static PageRequestManager();
    public string get_AsyncPostBackSourceElementID();
    internal static void EncodeString(TextWriter writer, string type, string id, string content);
    internal static bool IsAsyncPostBackRequest(HttpRequestBase request);
    internal void LoadPostData(string postDataKey, NameValueCollection postCollection);
    internal void OnInit();
    internal void OnPreRender();
    public void RegisterAsyncPostBackControl(Control control);
    public void RegisterDataItem(Control control, string dataItem, bool isJsonSerialized);
    public void RegisterPostBackControl(Control control);
    internal void RegisterUpdatePanel(UpdatePanel updatePanel);
    internal void Render(HtmlTextWriter writer);
    internal void RenderPageRequestManagerScript(HtmlTextWriter writer);
    public void SetFocus(Control control);
    public void SetFocus(string clientID);
    internal void SetFocusInternal(string clientID);
    internal void UnregisterUpdatePanel(UpdatePanel updatePanel);
}
internal class System.Web.UI.PageWrapper : object {
    private string System.Web.UI.IPage.AppRelativeVirtualPath { get; }
    private IDictionary`2<string, string> System.Web.UI.IPage.HiddenFieldsToRender { get; }
    private IClientScriptManager System.Web.UI.IPage.ClientScript { get; }
    private bool System.Web.UI.IPage.EnableEventValidation { get; }
    private IHtmlForm System.Web.UI.IPage.Form { get; }
    private HtmlHead System.Web.UI.IPage.Header { get; }
    private bool System.Web.UI.IPage.IsPostBack { get; }
    private bool System.Web.UI.IPage.IsValid { get; }
    private IDictionary System.Web.UI.IPage.Items { get; }
    private HttpRequestBase System.Web.UI.IPage.Request { get; }
    private HttpResponseInternalBase System.Web.UI.IPage.Response { get; }
    private HttpServerUtilityBase System.Web.UI.IPage.Server { get; }
    private string System.Web.UI.IPage.Title { get; private set; }
    public PageWrapper(Page page);
    private sealed virtual override string System.Web.UI.IPage.get_AppRelativeVirtualPath();
    private sealed virtual override IDictionary`2<string, string> System.Web.UI.IPage.get_HiddenFieldsToRender();
    private sealed virtual override IClientScriptManager System.Web.UI.IPage.get_ClientScript();
    private sealed virtual override bool System.Web.UI.IPage.get_EnableEventValidation();
    private sealed virtual override IHtmlForm System.Web.UI.IPage.get_Form();
    private sealed virtual override HtmlHead System.Web.UI.IPage.get_Header();
    private sealed virtual override bool System.Web.UI.IPage.get_IsPostBack();
    private sealed virtual override bool System.Web.UI.IPage.get_IsValid();
    private sealed virtual override IDictionary System.Web.UI.IPage.get_Items();
    private sealed virtual override HttpRequestBase System.Web.UI.IPage.get_Request();
    private sealed virtual override HttpResponseInternalBase System.Web.UI.IPage.get_Response();
    private sealed virtual override HttpServerUtilityBase System.Web.UI.IPage.get_Server();
    private sealed virtual override string System.Web.UI.IPage.get_Title();
    private sealed virtual override void System.Web.UI.IPage.set_Title(string value);
    private sealed virtual override void System.Web.UI.IPage.add_Error(EventHandler value);
    private sealed virtual override void System.Web.UI.IPage.remove_Error(EventHandler value);
    private sealed virtual override void System.Web.UI.IPage.add_InitComplete(EventHandler value);
    private sealed virtual override void System.Web.UI.IPage.remove_InitComplete(EventHandler value);
    private sealed virtual override void System.Web.UI.IPage.add_LoadComplete(EventHandler value);
    private sealed virtual override void System.Web.UI.IPage.remove_LoadComplete(EventHandler value);
    private sealed virtual override void System.Web.UI.IPage.RegisterRequiresViewStateEncryption();
    private sealed virtual override void System.Web.UI.IPage.SetFocus(Control control);
    private sealed virtual override void System.Web.UI.IPage.SetFocus(string clientID);
    private sealed virtual override void System.Web.UI.IPage.add_PreRender(EventHandler value);
    private sealed virtual override void System.Web.UI.IPage.remove_PreRender(EventHandler value);
    private sealed virtual override void System.Web.UI.IPage.add_PreRenderComplete(EventHandler value);
    private sealed virtual override void System.Web.UI.IPage.remove_PreRenderComplete(EventHandler value);
    private sealed virtual override void System.Web.UI.IPage.SetPostFormRenderDelegate(RenderMethod renderMethod);
    private sealed virtual override void System.Web.UI.IPage.SetRenderMethodDelegate(RenderMethod renderMethod);
    private sealed virtual override void System.Web.UI.IPage.Validate(string validationGroup);
    private sealed virtual override void System.Web.UI.IPage.VerifyRenderingInServerForm(Control control);
}
public class System.Web.UI.PostBackTrigger : UpdatePanelControlTrigger {
    [TypeConverterAttribute("System.Web.UI.Design.PostBackTriggerControlIDConverter, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
public string ControlID { get; public set; }
    internal IScriptManagerInternal ScriptManager { get; }
    internal PostBackTrigger(IScriptManagerInternal scriptManager);
    public string get_ControlID();
    public void set_ControlID(string value);
    internal IScriptManagerInternal get_ScriptManager();
    protected internal virtual void Initialize();
    protected internal virtual bool HasTriggered();
    public virtual string ToString();
}
[DefaultPropertyAttribute("Path")]
[TypeConverterAttribute("System.Web.UI.EmptyStringExpandableObjectConverter")]
public class System.Web.UI.ProfileServiceManager : object {
    internal bool HasLoadProperties { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
[ResourceDescriptionAttribute("ProfileServiceManager_LoadProperties")]
public String[] LoadProperties { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[NotifyParentPropertyAttribute("True")]
[ResourceDescriptionAttribute("ApplicationServiceManager_Path")]
[UrlPropertyAttribute]
public string Path { get; public set; }
    internal static void ConfigureProfileService(StringBuilder& sb, HttpContext context, ScriptManager scriptManager, List`1<ScriptManagerProxy> proxies);
    internal static ArrayList MergeProperties(ArrayList existingProperties, String[] newProperties);
    internal static void GetSettingsProperty(ProfileBase profile, string fullPropertyName, SortedList`2<string, object> topLevelSettings, SortedList`2& profileGroups, bool ensureExists);
    internal bool get_HasLoadProperties();
    public String[] get_LoadProperties();
    public void set_LoadProperties(String[] value);
    public string get_Path();
    public void set_Path(string value);
}
public class System.Web.UI.RegisteredArrayDeclaration : object {
    public string Name { get; }
    public string Value { get; }
    public Control Control { get; }
    internal RegisteredArrayDeclaration(Control control, string arrayName, string arrayValue);
    public string get_Name();
    public string get_Value();
    public Control get_Control();
}
public class System.Web.UI.RegisteredDisposeScript : object {
    public Control Control { get; }
    public string Script { get; }
    internal UpdatePanel ParentUpdatePanel { get; }
    internal RegisteredDisposeScript(Control control, string disposeScript, UpdatePanel parentUpdatePanel);
    public Control get_Control();
    public string get_Script();
    internal UpdatePanel get_ParentUpdatePanel();
}
public class System.Web.UI.RegisteredExpandoAttribute : object {
    public string Name { get; }
    public string Value { get; }
    public Control Control { get; }
    public string ControlId { get; }
    public bool Encode { get; }
    internal RegisteredExpandoAttribute(Control control, string controlId, string name, string value, bool encode);
    public string get_Name();
    public string get_Value();
    public Control get_Control();
    public string get_ControlId();
    public bool get_Encode();
}
public class System.Web.UI.RegisteredHiddenField : object {
    public Control Control { get; }
    public string InitialValue { get; }
    public string Name { get; }
    internal RegisteredHiddenField(Control control, string hiddenFieldName, string hiddenFieldInitialValue);
    public Control get_Control();
    public string get_InitialValue();
    public string get_Name();
}
public class System.Web.UI.RegisteredScript : object {
    public bool AddScriptTags { get; }
    public Control Control { get; }
    public string Key { get; }
    public string Script { get; }
    public RegisteredScriptType ScriptType { get; }
    public Type Type { get; }
    public string Url { get; }
    internal RegisteredScript(Control control, Type type, string key, string url);
    internal RegisteredScript(RegisteredScriptType scriptType, Control control, Type type, string key, string script, bool addScriptTags);
    public bool get_AddScriptTags();
    public Control get_Control();
    public string get_Key();
    public string get_Script();
    public RegisteredScriptType get_ScriptType();
    public Type get_Type();
    public string get_Url();
}
public enum System.Web.UI.RegisteredScriptType : Enum {
    public int value__;
    public static RegisteredScriptType ClientScriptInclude;
    public static RegisteredScriptType ClientScriptBlock;
    public static RegisteredScriptType ClientStartupScript;
    public static RegisteredScriptType OnSubmitStatement;
}
[AttributeUsageAttribute("32767")]
internal class System.Web.UI.ResourceCategoryAttribute : CategoryAttribute {
    public object TypeId { get; }
    internal ResourceCategoryAttribute(string category);
    public virtual object get_TypeId();
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Web.UI.ResourceDefaultValueAttribute : DefaultValueAttribute {
    public object TypeId { get; }
    public object Value { get; }
    internal ResourceDefaultValueAttribute(Type type, string value);
    internal ResourceDefaultValueAttribute(string value);
    public virtual object get_TypeId();
    public virtual object get_Value();
}
[AttributeUsageAttribute("644")]
internal class System.Web.UI.ResourceDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public ResourceDescriptionAttribute(string descriptionResourceName);
    public virtual string get_Description();
}
[AttributeUsageAttribute("4")]
internal class System.Web.UI.ResourceDisplayNameAttribute : DisplayNameAttribute {
    public string DisplayName { get; }
    public ResourceDisplayNameAttribute(string displayNameResourceName);
    public virtual string get_DisplayName();
}
[DefaultPropertyAttribute("Path")]
[TypeConverterAttribute("System.Web.UI.EmptyStringExpandableObjectConverter")]
public class System.Web.UI.RoleServiceManager : object {
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[NotifyParentPropertyAttribute("True")]
[ResourceDescriptionAttribute("RoleServiceManager_LoadRoles")]
public bool LoadRoles { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[NotifyParentPropertyAttribute("True")]
[ResourceDescriptionAttribute("ApplicationServiceManager_Path")]
[UrlPropertyAttribute]
public string Path { get; public set; }
    internal static void ConfigureRoleService(StringBuilder& sb, HttpContext context, ScriptManager scriptManager, List`1<ScriptManagerProxy> proxies);
    public bool get_LoadRoles();
    public void set_LoadRoles(bool value);
    public string get_Path();
    public void set_Path(string value);
}
public class System.Web.UI.ScriptBehaviorDescriptor : ScriptComponentDescriptor {
    public string ClientID { get; }
    public string ElementID { get; }
    public string Name { get; public set; }
    public ScriptBehaviorDescriptor(string type, string elementID);
    public virtual string get_ClientID();
    public string get_ElementID();
    public string get_Name();
    public void set_Name(string value);
    protected internal virtual string GetScript();
}
public class System.Web.UI.ScriptComponentDescriptor : ScriptDescriptor {
    public string ClientID { get; }
    internal string ElementIDInternal { get; }
    public string ID { get; public set; }
    internal bool RegisterDispose { get; internal set; }
    public string Type { get; public set; }
    public ScriptComponentDescriptor(string type);
    internal ScriptComponentDescriptor(string type, string elementID);
    public virtual string get_ClientID();
    internal string get_ElementIDInternal();
    public virtual string get_ID();
    public virtual void set_ID(string value);
    internal bool get_RegisterDispose();
    internal void set_RegisterDispose(bool value);
    public string get_Type();
    public void set_Type(string value);
    public void AddComponentProperty(string name, string componentID);
    public void AddElementProperty(string name, string elementID);
    public void AddEvent(string name, string handler);
    public void AddProperty(string name, object value);
    public void AddScriptProperty(string name, string script);
    protected internal virtual string GetScript();
    internal virtual void RegisterDisposeForDescriptor(ScriptManager scriptManager, Control owner);
}
public abstract class System.Web.UI.ScriptControl : WebControl {
    internal ScriptControl(IScriptManagerInternal scriptManager, IPage page);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected abstract virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    protected abstract virtual IEnumerable`1<ScriptReference> GetScriptReferences();
    private sealed virtual override IEnumerable`1<ScriptDescriptor> System.Web.UI.IScriptControl.GetScriptDescriptors();
    private sealed virtual override IEnumerable`1<ScriptReference> System.Web.UI.IScriptControl.GetScriptReferences();
}
public class System.Web.UI.ScriptControlDescriptor : ScriptComponentDescriptor {
    public string ClientID { get; }
    public string ElementID { get; }
    public string ID { get; public set; }
    public ScriptControlDescriptor(string type, string elementID);
    public virtual string get_ClientID();
    public string get_ElementID();
    public virtual string get_ID();
    public virtual void set_ID(string value);
}
internal class System.Web.UI.ScriptControlManager : object {
    public ScriptControlManager(ScriptManager scriptManager);
    public void AddScriptReferences(List`1<ScriptReferenceBase> scriptReferences);
    public void OnPagePreRender(object sender, EventArgs e);
    public void RegisterExtenderControl(TExtenderControl extenderControl, Control targetControl);
    public void RegisterScriptControl(TScriptControl scriptControl);
    public void RegisterScriptDescriptors(IExtenderControl extenderControl);
    public void RegisterScriptDescriptors(IScriptControl scriptControl);
}
public abstract class System.Web.UI.ScriptDescriptor : object {
    protected internal abstract virtual string GetScript();
    internal virtual void RegisterDisposeForDescriptor(ScriptManager scriptManager, Control owner);
}
[DefaultPropertyAttribute("Scripts")]
[DesignerAttribute("System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[NonVisualControlAttribute]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ToolboxBitmapAttribute("EmbeddedResourceFinder", "System.Web.Resources.ScriptManager.bmp")]
public class System.Web.UI.ScriptManager : Control {
    internal bool _supportsPartialRenderingSetByUser;
    internal ScriptReferenceBase _applicationServicesReference;
    [ResourceDescriptionAttribute("ScriptManager_AjaxFrameworkAssembly")]
[BrowsableAttribute("False")]
public Assembly AjaxFrameworkAssembly { get; }
    [DefaultValueAttribute("True")]
[ResourceDescriptionAttribute("ScriptManager_AllowCustomErrorsRedirect")]
[CategoryAttribute("Behavior")]
public bool AllowCustomErrorsRedirect { get; public set; }
    [DefaultValueAttribute("")]
[ResourceDescriptionAttribute("ScriptManager_AsyncPostBackErrorMessage")]
[CategoryAttribute("Behavior")]
public string AsyncPostBackErrorMessage { get; public set; }
    [BrowsableAttribute("False")]
public string AsyncPostBackSourceElementID { get; }
    [ResourceDescriptionAttribute("ScriptManager_AsyncPostBackTimeout")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("90")]
public int AsyncPostBackTimeout { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_AuthenticationService")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public AuthenticationServiceManager AuthenticationService { get; }
    internal BundleReflectionHelper BundleReflectionHelper { get; internal set; }
    public static ScriptResourceMapping ScriptResourceMapping { get; }
    [ResourceDescriptionAttribute("ScriptManager_ClientNavigateHandler")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
public string ClientNavigateHandler { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_CompositeScript")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public CompositeScriptReference CompositeScript { get; }
    internal IControl Control { get; }
    internal ICustomErrorsSection CustomErrorsSection { get; }
    internal static Assembly DefaultAjaxFrameworkAssembly { get; internal set; }
    internal bool DeploymentSectionRetail { get; }
    [ResourceDescriptionAttribute("ScriptManager_EmptyPageUrl")]
[CategoryAttribute("Appearance")]
[EditorAttribute("System.Web.UI.Design.UrlEditor", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[UrlPropertyAttribute]
public string EmptyPageUrl { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_EnableCdn")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
public bool EnableCdn { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_EnableCdnFallback")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool EnableCdnFallback { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_EnableHistory")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
public bool EnableHistory { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_AjaxFrameworkMode")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AjaxFrameworkMode AjaxFrameworkMode { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_EnablePageMethods")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
public bool EnablePageMethods { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_EnablePartialRendering")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool EnablePartialRendering { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_EnableScriptGlobalization")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
public bool EnableScriptGlobalization { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_EnableScriptLocalization")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool EnableScriptLocalization { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_EnableSecureHistoryState")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool EnableSecureHistoryState { get; public set; }
    internal bool HasAuthenticationServiceManager { get; }
    internal bool HasProfileServiceManager { get; }
    internal bool HasRoleServiceManager { get; }
    [BrowsableAttribute("False")]
public bool IsDebuggingEnabled { get; }
    [BrowsableAttribute("False")]
public bool IsInAsyncPostBack { get; }
    [BrowsableAttribute("False")]
public bool IsNavigating { get; }
    internal bool IsRestMethodCall { get; }
    internal bool IsSecureConnection { get; }
    internal IPage IPage { get; }
    [ResourceDescriptionAttribute("ScriptManager_LoadScriptsBeforeUI")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool LoadScriptsBeforeUI { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_ProfileService")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public ProfileServiceManager ProfileService { get; }
    internal List`1<ScriptManagerProxy> Proxies { get; }
    [ResourceDescriptionAttribute("ScriptManager_RoleService")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public RoleServiceManager RoleService { get; }
    internal ScriptControlManager ScriptControlManager { get; }
    [ResourceDescriptionAttribute("ScriptManager_ScriptMode")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ScriptMode ScriptMode { get; public set; }
    internal ScriptRegistrationManager ScriptRegistration { get; }
    [ResourceDescriptionAttribute("ScriptManager_Scripts")]
[CategoryAttribute("Behavior")]
[EditorAttribute("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public ScriptReferenceCollection Scripts { get; }
    [ResourceDescriptionAttribute("ScriptManager_ScriptPath")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[ObsoleteAttribute("This property is obsolete. Set the Path property on each individual ScriptReference instead.")]
public string ScriptPath { get; public set; }
    [ResourceDescriptionAttribute("ScriptManager_Services")]
[CategoryAttribute("Behavior")]
[EditorAttribute("System.Web.UI.Design.ServiceReferenceCollectionEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public ServiceReferenceCollection Services { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
public bool SupportsPartialRendering { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    internal bool Zip { get; internal set; }
    private HttpContextBase System.Web.UI.IControl.Context { get; }
    private bool System.Web.UI.IControl.DesignMode { get; }
    private bool System.Web.UI.IScriptManager.IsSecureConnection { get; }
    private static ScriptManager();
    internal ScriptManager(IControl control, IPage page, ICompilationSection appLevelCompilationSection, IDeploymentSection deploymentSection, ICustomErrorsSection customErrorsSection, Assembly ajaxFrameworkAssembly, bool isSecureConnection);
    public virtual Assembly get_AjaxFrameworkAssembly();
    public bool get_AllowCustomErrorsRedirect();
    public void set_AllowCustomErrorsRedirect(bool value);
    public string get_AsyncPostBackErrorMessage();
    public void set_AsyncPostBackErrorMessage(string value);
    public sealed virtual string get_AsyncPostBackSourceElementID();
    public int get_AsyncPostBackTimeout();
    public void set_AsyncPostBackTimeout(int value);
    public AuthenticationServiceManager get_AuthenticationService();
    internal BundleReflectionHelper get_BundleReflectionHelper();
    internal void set_BundleReflectionHelper(BundleReflectionHelper value);
    public static ScriptResourceMapping get_ScriptResourceMapping();
    public string get_ClientNavigateHandler();
    public void set_ClientNavigateHandler(string value);
    public CompositeScriptReference get_CompositeScript();
    internal IControl get_Control();
    [SecurityCriticalAttribute]
internal ICustomErrorsSection get_CustomErrorsSection();
    internal static Assembly get_DefaultAjaxFrameworkAssembly();
    internal static void set_DefaultAjaxFrameworkAssembly(Assembly value);
    internal bool get_DeploymentSectionRetail();
    public virtual string get_EmptyPageUrl();
    public virtual void set_EmptyPageUrl(string value);
    public sealed virtual bool get_EnableCdn();
    public void set_EnableCdn(bool value);
    public sealed virtual bool get_EnableCdnFallback();
    public void set_EnableCdnFallback(bool value);
    public bool get_EnableHistory();
    public void set_EnableHistory(bool value);
    public AjaxFrameworkMode get_AjaxFrameworkMode();
    public void set_AjaxFrameworkMode(AjaxFrameworkMode value);
    public bool get_EnablePageMethods();
    public void set_EnablePageMethods(bool value);
    public bool get_EnablePartialRendering();
    public void set_EnablePartialRendering(bool value);
    public bool get_EnableScriptGlobalization();
    public void set_EnableScriptGlobalization(bool value);
    public bool get_EnableScriptLocalization();
    public void set_EnableScriptLocalization(bool value);
    public bool get_EnableSecureHistoryState();
    public void set_EnableSecureHistoryState(bool value);
    internal bool get_HasAuthenticationServiceManager();
    internal bool get_HasProfileServiceManager();
    internal bool get_HasRoleServiceManager();
    public sealed virtual bool get_IsDebuggingEnabled();
    public sealed virtual bool get_IsInAsyncPostBack();
    public bool get_IsNavigating();
    internal bool get_IsRestMethodCall();
    internal bool get_IsSecureConnection();
    internal IPage get_IPage();
    public bool get_LoadScriptsBeforeUI();
    public void set_LoadScriptsBeforeUI(bool value);
    public ProfileServiceManager get_ProfileService();
    internal List`1<ScriptManagerProxy> get_Proxies();
    public RoleServiceManager get_RoleService();
    internal ScriptControlManager get_ScriptControlManager();
    public ScriptMode get_ScriptMode();
    public void set_ScriptMode(ScriptMode value);
    internal ScriptRegistrationManager get_ScriptRegistration();
    public ScriptReferenceCollection get_Scripts();
    public string get_ScriptPath();
    public void set_ScriptPath(string value);
    public ServiceReferenceCollection get_Services();
    public sealed virtual bool get_SupportsPartialRendering();
    public void set_SupportsPartialRendering(bool value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    internal bool get_Zip();
    internal void set_Zip(bool value);
    public void add_AsyncPostBackError(EventHandler`1<AsyncPostBackErrorEventArgs> value);
    public void remove_AsyncPostBackError(EventHandler`1<AsyncPostBackErrorEventArgs> value);
    public void add_Navigate(EventHandler`1<HistoryEventArgs> value);
    public void remove_Navigate(EventHandler`1<HistoryEventArgs> value);
    public void add_ResolveCompositeScriptReference(EventHandler`1<CompositeScriptReferenceEventArgs> value);
    public void remove_ResolveCompositeScriptReference(EventHandler`1<CompositeScriptReferenceEventArgs> value);
    public void add_ResolveScriptReference(EventHandler`1<ScriptReferenceEventArgs> value);
    public void remove_ResolveScriptReference(EventHandler`1<ScriptReferenceEventArgs> value);
    public void AddHistoryPoint(string key, string value);
    public void AddHistoryPoint(string key, string value, string title);
    public void AddHistoryPoint(NameValueCollection state, string title);
    internal void AddFrameworkScripts(List`1<ScriptReferenceBase> scripts);
    internal void AddScriptCollections(List`1<ScriptReferenceBase> scripts, IEnumerable`1<ScriptManagerProxy> proxies);
    internal string CreateUniqueScriptKey();
    public static ScriptManager GetCurrent(Page page);
    public ReadOnlyCollection`1<RegisteredArrayDeclaration> GetRegisteredArrayDeclarations();
    public ReadOnlyCollection`1<RegisteredScript> GetRegisteredClientScriptBlocks();
    public ReadOnlyCollection`1<RegisteredDisposeScript> GetRegisteredDisposeScripts();
    public ReadOnlyCollection`1<RegisteredExpandoAttribute> GetRegisteredExpandoAttributes();
    public ReadOnlyCollection`1<RegisteredHiddenField> GetRegisteredHiddenFields();
    public ReadOnlyCollection`1<RegisteredScript> GetRegisteredOnSubmitStatements();
    public ReadOnlyCollection`1<RegisteredScript> GetRegisteredStartupScripts();
    internal string GetScriptResourceUrl(string resourceName, Assembly assembly);
    public string GetStateString();
    protected virtual bool LoadPostData(string postDataKey, NameValueCollection postCollection);
    protected internal virtual void OnAsyncPostBackError(AsyncPostBackErrorEventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnResolveCompositeScriptReference(CompositeScriptReferenceEventArgs e);
    protected virtual void OnResolveScriptReference(ScriptReferenceEventArgs e);
    protected virtual void RaisePostBackEvent(string eventArgument);
    protected virtual void RaisePostDataChangedEvent();
    public static void RegisterArrayDeclaration(Page page, string arrayName, string arrayValue);
    public static void RegisterArrayDeclaration(Control control, string arrayName, string arrayValue);
    public sealed virtual void RegisterAsyncPostBackControl(Control control);
    internal virtual void RegisterClientScriptBlockInternal(Control control, Type type, string key, string script, bool addScriptTags);
    public static void RegisterClientScriptBlock(Page page, Type type, string key, string script, bool addScriptTags);
    public static void RegisterClientScriptBlock(Control control, Type type, string key, string script, bool addScriptTags);
    internal virtual void RegisterClientScriptIncludeInternal(Control control, Type type, string key, string url);
    public static void RegisterClientScriptInclude(Page page, Type type, string key, string url);
    public static void RegisterClientScriptInclude(Control control, Type type, string key, string url);
    public static void RegisterClientScriptResource(Page page, Type type, string resourceName);
    public static void RegisterClientScriptResource(Control control, Type type, string resourceName);
    public static void RegisterNamedClientScriptResource(Control control, string resourceName);
    public static void RegisterNamedClientScriptResource(Page page, string resourceName);
    public void RegisterDataItem(Control control, string dataItem);
    public void RegisterDataItem(Control control, string dataItem, bool isJsonSerialized);
    public void RegisterDispose(Control control, string disposeScript);
    public static void RegisterExpandoAttribute(Control control, string controlId, string attributeName, string attributeValue, bool encode);
    public sealed virtual void RegisterExtenderControl(TExtenderControl extenderControl, Control targetControl);
    public static void RegisterHiddenField(Page page, string hiddenFieldName, string hiddenFieldInitialValue);
    public static void RegisterHiddenField(Control control, string hiddenFieldName, string hiddenFieldInitialValue);
    public static void RegisterOnSubmitStatement(Page page, Type type, string key, string script);
    public static void RegisterOnSubmitStatement(Control control, Type type, string key, string script);
    public sealed virtual void RegisterScriptControl(TScriptControl scriptControl);
    public sealed virtual void RegisterScriptDescriptors(IExtenderControl extenderControl);
    public sealed virtual void RegisterScriptDescriptors(IScriptControl scriptControl);
    public sealed virtual void RegisterPostBackControl(Control control);
    internal List`1<ScriptReferenceBase> ProcessBundleReferences(List`1<ScriptReferenceBase> scripts);
    internal List`1<ScriptReferenceBase> RemoveDuplicates(List`1<ScriptReferenceBase> scripts, AjaxFrameworkMode ajaxFrameworkMode, bool loadScriptsBeforeUI, IClientScriptManager clientScriptManager, ScriptReferenceBase& applicationServicesReference);
    internal virtual void RegisterStartupScriptInternal(Control control, Type type, string key, string script, bool addScriptTags);
    public static void RegisterStartupScript(Page page, Type type, string key, string script, bool addScriptTags);
    public static void RegisterStartupScript(Control control, Type type, string key, string script, bool addScriptTags);
    protected internal virtual void Render(HtmlTextWriter writer);
    public void SetFocus(Control control);
    public void SetFocus(string clientID);
    private sealed virtual override HttpContextBase System.Web.UI.IControl.get_Context();
    private sealed virtual override bool System.Web.UI.IControl.get_DesignMode();
    private sealed virtual override void System.Web.UI.IScriptManagerInternal.RegisterProxy(ScriptManagerProxy proxy);
    private sealed virtual override void System.Web.UI.IScriptManagerInternal.RegisterUpdatePanel(UpdatePanel updatePanel);
    private sealed virtual override void System.Web.UI.IScriptManagerInternal.UnregisterUpdatePanel(UpdatePanel updatePanel);
    private sealed virtual override bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, NameValueCollection postCollection);
    private sealed virtual override void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent();
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    private sealed virtual override void System.Web.UI.IScriptManager.RegisterArrayDeclaration(Control control, string arrayName, string arrayValue);
    private sealed virtual override void System.Web.UI.IScriptManager.RegisterClientScriptBlock(Control control, Type type, string key, string script, bool addScriptTags);
    private sealed virtual override void System.Web.UI.IScriptManager.RegisterClientScriptInclude(Control control, Type type, string key, string url);
    private sealed virtual override void System.Web.UI.IScriptManager.RegisterClientScriptResource(Control control, Type type, string resourceName);
    private sealed virtual override void System.Web.UI.IScriptManager.RegisterDispose(Control control, string disposeScript);
    private sealed virtual override void System.Web.UI.IScriptManager.RegisterExpandoAttribute(Control control, string controlId, string attributeName, string attributeValue, bool encode);
    private sealed virtual override void System.Web.UI.IScriptManager.RegisterHiddenField(Control control, string hiddenFieldName, string hiddenFieldValue);
    private sealed virtual override void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(Control control, Type type, string key, string script);
    private sealed virtual override void System.Web.UI.IScriptManager.RegisterPostBackControl(Control control);
    private sealed virtual override void System.Web.UI.IScriptManager.RegisterStartupScript(Control control, Type type, string key, string script, bool addScriptTags);
    private sealed virtual override void System.Web.UI.IScriptManager.SetFocusInternal(string clientID);
    private sealed virtual override bool System.Web.UI.IScriptManager.get_IsSecureConnection();
    private sealed virtual override string System.Web.UI.IClientUrlResolver.get_AppRelativeTemplateSourceDirectory();
}
[DefaultPropertyAttribute("Scripts")]
[DesignerAttribute("System.Web.UI.Design.ScriptManagerProxyDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[NonVisualControlAttribute]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ToolboxBitmapAttribute("EmbeddedResourceFinder", "System.Web.Resources.ScriptManagerProxy.bmp")]
public class System.Web.UI.ScriptManagerProxy : Control {
    [ResourceDescriptionAttribute("ScriptManager_AuthenticationService")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public AuthenticationServiceManager AuthenticationService { get; }
    [ResourceDescriptionAttribute("ScriptManager_CompositeScript")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public CompositeScriptReference CompositeScript { get; }
    internal bool HasProfileServiceManager { get; }
    internal bool HasAuthenticationServiceManager { get; }
    internal bool HasRoleServiceManager { get; }
    internal EventHandler`1<HistoryEventArgs> NavigateEvent { get; }
    [ResourceDescriptionAttribute("ScriptManager_ProfileService")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public ProfileServiceManager ProfileService { get; }
    [ResourceDescriptionAttribute("ScriptManager_RoleService")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("2")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public RoleServiceManager RoleService { get; }
    [ResourceDescriptionAttribute("ScriptManager_Scripts")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public ScriptReferenceCollection Scripts { get; }
    [ResourceDescriptionAttribute("ScriptManager_Services")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ServiceReferenceCollectionEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public ServiceReferenceCollection Services { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    private HttpContextBase System.Web.UI.IControl.Context { get; }
    private bool System.Web.UI.IControl.DesignMode { get; }
    internal ScriptManagerProxy(IScriptManagerInternal scriptManager);
    private static ScriptManagerProxy();
    public AuthenticationServiceManager get_AuthenticationService();
    public CompositeScriptReference get_CompositeScript();
    internal bool get_HasProfileServiceManager();
    internal bool get_HasAuthenticationServiceManager();
    internal bool get_HasRoleServiceManager();
    internal EventHandler`1<HistoryEventArgs> get_NavigateEvent();
    public ProfileServiceManager get_ProfileService();
    public RoleServiceManager get_RoleService();
    public ScriptReferenceCollection get_Scripts();
    public ServiceReferenceCollection get_Services();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public void add_Navigate(EventHandler`1<HistoryEventArgs> value);
    public void remove_Navigate(EventHandler`1<HistoryEventArgs> value);
    internal void CollectScripts(List`1<ScriptReferenceBase> scripts);
    protected internal virtual void OnInit(EventArgs e);
    internal void RegisterServices(ScriptManager scriptManager);
    private sealed virtual override HttpContextBase System.Web.UI.IControl.get_Context();
    private sealed virtual override bool System.Web.UI.IControl.get_DesignMode();
    private sealed virtual override string System.Web.UI.IClientUrlResolver.get_AppRelativeTemplateSourceDirectory();
}
public enum System.Web.UI.ScriptMode : Enum {
    public int value__;
    public static ScriptMode Auto;
    public static ScriptMode Inherit;
    public static ScriptMode Debug;
    public static ScriptMode Release;
}
[DefaultPropertyAttribute("Path")]
public class System.Web.UI.ScriptReference : ScriptReferenceBase {
    internal bool IsDirectRegistration { get; internal set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("ScriptReference_Assembly")]
public string Assembly { get; public set; }
    internal Assembly EffectiveAssembly { get; }
    internal string EffectivePath { get; }
    internal string EffectiveResourceName { get; }
    internal ScriptMode EffectiveScriptMode { get; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[ResourceDescriptionAttribute("ScriptReference_IgnoreScriptPath")]
[ObsoleteAttribute("This property is obsolete. Instead of using ScriptManager.ScriptPath, set the Path property on each individual ScriptReference.")]
public bool IgnoreScriptPath { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("ScriptReference_Name")]
public string Name { get; public set; }
    internal ScriptEffectiveInfo ScriptInfo { get; }
    public ScriptReference(string name, string assembly);
    public ScriptReference(string path);
    internal ScriptReference(string name, IClientUrlResolver clientUrlResolver, Control containingControl);
    private static ScriptReference();
    [CompilerGeneratedAttribute]
internal bool get_IsDirectRegistration();
    [CompilerGeneratedAttribute]
internal void set_IsDirectRegistration(bool value);
    public string get_Assembly();
    public void set_Assembly(string value);
    internal Assembly get_EffectiveAssembly();
    internal string get_EffectivePath();
    internal string get_EffectiveResourceName();
    internal ScriptMode get_EffectiveScriptMode();
    public bool get_IgnoreScriptPath();
    public void set_IgnoreScriptPath(bool value);
    public string get_Name();
    public void set_Name(string value);
    internal ScriptEffectiveInfo get_ScriptInfo();
    internal bool DetermineResourceNameAndAssembly(ScriptManager scriptManager, bool isDebuggingEnabled, String& resourceName, Assembly& assembly);
    internal CultureInfo DetermineCulture(ScriptManager scriptManager);
    internal Assembly GetAssembly();
    internal Assembly GetAssembly(ScriptManager scriptManager);
    internal string GetPath(ScriptManager scriptManager, string releasePath, string predeterminedDebugPath, bool isDebuggingEnabled);
    internal Assembly ApplyFallbackResource(Assembly assembly, string releaseName);
    internal static string GetScriptPath(string resourceName, Assembly assembly, CultureInfo culture, string scriptPath);
    protected internal virtual string GetUrl(ScriptManager scriptManager, bool zip);
    internal string GetUrlInternal(ScriptManager scriptManager, bool zip);
    internal string GetUrlInternal(ScriptManager scriptManager, bool zip, bool useCdnPath);
    protected internal virtual bool IsAjaxFrameworkScript(ScriptManager scriptManager);
    [ObsoleteAttribute("This method is obsolete. Use IsAjaxFrameworkScript(ScriptManager) instead.")]
protected internal virtual bool IsFromSystemWebExtensions();
    internal bool IsFromSystemWeb();
    internal bool ShouldUseDebugScript(string releaseName, Assembly assembly, bool isDebuggingEnabled, Assembly currentAjaxAssembly);
    public virtual string ToString();
}
[DefaultPropertyAttribute("Path")]
public abstract class System.Web.UI.ScriptReferenceBase : object {
    internal bool AlwaysLoadBeforeUI { get; internal set; }
    internal IClientUrlResolver ClientUrlResolver { get; internal set; }
    internal Control ContainingControl { get; internal set; }
    internal bool IsStaticReference { get; internal set; }
    internal bool IsBundleReference { get; internal set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[ResourceDescriptionAttribute("ScriptReference_NotifyScriptLoaded")]
[ObsoleteAttribute("NotifyScriptLoaded is no longer required in script references.")]
public bool NotifyScriptLoaded { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[ResourceDescriptionAttribute("ScriptReference_Path")]
[UrlPropertyAttribute("*.js")]
public string Path { get; public set; }
    [ResourceDescriptionAttribute("ScriptReference_ResourceUICultures")]
[DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[MergablePropertyAttribute("False")]
[NotifyParentPropertyAttribute("True")]
[TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
public String[] ResourceUICultures { get; public set; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[NotifyParentPropertyAttribute("True")]
[ResourceDescriptionAttribute("ScriptReference_ScriptMode")]
public ScriptMode ScriptMode { get; public set; }
    internal bool IsDefiningSys { get; internal set; }
    internal bool get_AlwaysLoadBeforeUI();
    internal void set_AlwaysLoadBeforeUI(bool value);
    internal IClientUrlResolver get_ClientUrlResolver();
    internal void set_ClientUrlResolver(IClientUrlResolver value);
    internal Control get_ContainingControl();
    internal void set_ContainingControl(Control value);
    internal bool get_IsStaticReference();
    internal void set_IsStaticReference(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsBundleReference();
    [CompilerGeneratedAttribute]
internal void set_IsBundleReference(bool value);
    public bool get_NotifyScriptLoaded();
    public void set_NotifyScriptLoaded(bool value);
    public string get_Path();
    public void set_Path(string value);
    public String[] get_ResourceUICultures();
    public void set_ResourceUICultures(String[] value);
    public ScriptMode get_ScriptMode();
    public void set_ScriptMode(ScriptMode value);
    [ObsoleteAttribute("Use IsAjaxFrameworkScript(ScriptManager)")]
protected internal abstract virtual bool IsFromSystemWebExtensions();
    protected internal virtual bool IsAjaxFrameworkScript(ScriptManager scriptManager);
    [CompilerGeneratedAttribute]
internal virtual bool get_IsDefiningSys();
    [CompilerGeneratedAttribute]
internal virtual void set_IsDefiningSys(bool value);
    internal static string GetDebugPath(string releasePath);
    protected internal abstract virtual string GetUrl(ScriptManager scriptManager, bool zip);
    protected static string ReplaceExtension(string pathOrName);
}
public class System.Web.UI.ScriptReferenceCollection : Collection`1<ScriptReference> {
}
public class System.Web.UI.ScriptReferenceEventArgs : EventArgs {
    public ScriptReference Script { get; }
    public ScriptReferenceEventArgs(ScriptReference script);
    public ScriptReference get_Script();
}
internal class System.Web.UI.ScriptRegistrationManager : object {
    public List`1<RegisteredArrayDeclaration> ScriptArrays { get; }
    public List`1<RegisteredScript> ScriptBlocks { get; }
    public List`1<RegisteredDisposeScript> ScriptDisposes { get; }
    public List`1<RegisteredExpandoAttribute> ScriptExpandos { get; }
    public List`1<RegisteredHiddenField> ScriptHiddenFields { get; }
    public List`1<RegisteredScript> ScriptStartupBlocks { get; }
    public List`1<RegisteredScript> ScriptSubmitStatements { get; }
    public ScriptRegistrationManager(ScriptManager scriptManager);
    private static ScriptRegistrationManager();
    public List`1<RegisteredArrayDeclaration> get_ScriptArrays();
    public List`1<RegisteredScript> get_ScriptBlocks();
    public List`1<RegisteredDisposeScript> get_ScriptDisposes();
    public List`1<RegisteredExpandoAttribute> get_ScriptExpandos();
    public List`1<RegisteredHiddenField> get_ScriptHiddenFields();
    public List`1<RegisteredScript> get_ScriptStartupBlocks();
    public List`1<RegisteredScript> get_ScriptSubmitStatements();
    public static void RegisterArrayDeclaration(Control control, string arrayName, string arrayValue);
    public static void RegisterClientScriptBlock(Control control, Type type, string key, string script, bool addScriptTags);
    public static void RegisterClientScriptInclude(Control control, Type type, string key, string url);
    public static void RegisterFallbackScriptForAjaxPostbacks(Control control, Type type, string key, string fallbackExpression, string fallbackPath);
    public static void RegisterClientScriptResource(Control control, Type type, string resourceName);
    internal void RegisterDispose(Control control, string disposeScript);
    public static void RegisterExpandoAttribute(Control control, string controlId, string attributeName, string attributeValue, bool encode);
    public static void RegisterHiddenField(Control control, string hiddenFieldName, string hiddenFieldInitialValue);
    public static void RegisterOnSubmitStatement(Control control, Type type, string key, string script);
    public static void RegisterStartupScript(Control control, Type type, string key, string script, bool addScriptTags);
    public void RenderActiveArrayDeclarations(List`1<UpdatePanel> updatePanels, HtmlTextWriter writer);
    public void RenderActiveExpandos(List`1<UpdatePanel> updatePanels, HtmlTextWriter writer);
    public void RenderActiveHiddenFields(List`1<UpdatePanel> updatePanels, HtmlTextWriter writer);
    public void RenderActiveScriptDisposes(List`1<UpdatePanel> updatePanels, HtmlTextWriter writer);
    public void RenderActiveScripts(List`1<UpdatePanel> updatePanels, HtmlTextWriter writer);
    public void RenderActiveSubmitStatements(List`1<UpdatePanel> updatePanels, HtmlTextWriter writer);
}
[AttributeUsageAttribute("1")]
public class System.Web.UI.ScriptResourceAttribute : Attribute {
    public string ScriptName { get; }
    [ObsoleteAttribute("This property is obsolete. Use StringResourceName instead.")]
public string ScriptResourceName { get; }
    public string StringResourceClientTypeName { get; }
    public string StringResourceName { get; }
    [ObsoleteAttribute("This property is obsolete. Use StringResourceClientTypeName instead.")]
public string TypeName { get; }
    public ScriptResourceAttribute(string scriptName);
    public ScriptResourceAttribute(string scriptName, string stringResourceName, string stringResourceClientTypeName);
    private static ScriptResourceAttribute();
    public string get_ScriptName();
    public string get_ScriptResourceName();
    public string get_StringResourceClientTypeName();
    public string get_StringResourceName();
    public string get_TypeName();
    internal static ResourceManager GetResourceManager(string resourceName, Assembly assembly);
    internal static string GetScriptFromWebResourceInternal(Assembly assembly, string resourceName, CultureInfo culture, bool zip, String& contentType);
}
public class System.Web.UI.ScriptResourceDefinition : object {
    public string CdnDebugPath { get; public set; }
    public string CdnPath { get; public set; }
    internal string CdnDebugPathSecureConnection { get; }
    internal string CdnPathSecureConnection { get; }
    public bool CdnSupportsSecureConnection { get; public set; }
    public string LoadSuccessExpression { get; public set; }
    public string DebugPath { get; public set; }
    public string Path { get; public set; }
    public Assembly ResourceAssembly { get; public set; }
    public string ResourceName { get; public set; }
    private string System.Web.UI.IScriptResourceDefinition.CdnPathSecureConnection { get; }
    private string System.Web.UI.IScriptResourceDefinition.CdnDebugPathSecureConnection { get; }
    public sealed virtual string get_CdnDebugPath();
    public void set_CdnDebugPath(string value);
    public sealed virtual string get_CdnPath();
    public void set_CdnPath(string value);
    internal string get_CdnDebugPathSecureConnection();
    internal string get_CdnPathSecureConnection();
    public bool get_CdnSupportsSecureConnection();
    public void set_CdnSupportsSecureConnection(bool value);
    public string get_LoadSuccessExpression();
    public void set_LoadSuccessExpression(string value);
    public sealed virtual string get_DebugPath();
    public void set_DebugPath(string value);
    public sealed virtual string get_Path();
    public void set_Path(string value);
    public sealed virtual Assembly get_ResourceAssembly();
    public void set_ResourceAssembly(Assembly value);
    public sealed virtual string get_ResourceName();
    public void set_ResourceName(string value);
    private sealed virtual override string System.Web.UI.IScriptResourceDefinition.get_CdnPathSecureConnection();
    private sealed virtual override string System.Web.UI.IScriptResourceDefinition.get_CdnDebugPathSecureConnection();
}
internal class System.Web.UI.ScriptResourceInfo : object {
    public static ScriptResourceInfo Empty;
    public string CdnPath { get; }
    public string CdnPathSecureConnection { get; }
    public string LoadSuccessExpression { get; }
    public string ContentType { get; }
    public bool IsDebug { get; }
    public bool PerformSubstitution { get; }
    public string ScriptName { get; }
    public string ScriptResourceName { get; }
    public string TypeName { get; }
    public ScriptResourceInfo(WebResourceAttribute wra, ScriptResourceAttribute sra, Assembly assembly);
    private static ScriptResourceInfo();
    public string get_CdnPath();
    public string get_CdnPathSecureConnection();
    public string get_LoadSuccessExpression();
    public string get_ContentType();
    public bool get_IsDebug();
    public bool get_PerformSubstitution();
    public string get_ScriptName();
    public string get_ScriptResourceName();
    public string get_TypeName();
    public static ScriptResourceInfo GetInstance(Assembly assembly, string resourceName);
}
public class System.Web.UI.ScriptResourceMapping : object {
    public void AddDefinition(string name, ScriptResourceDefinition definition);
    public void AddDefinition(string name, Assembly assembly, ScriptResourceDefinition definition);
    public void Clear();
    public ScriptResourceDefinition GetDefinition(string name);
    public ScriptResourceDefinition GetDefinition(string name, Assembly assembly);
    public ScriptResourceDefinition GetDefinition(ScriptReference scriptReference);
    public ScriptResourceDefinition RemoveDefinition(string name);
    public ScriptResourceDefinition RemoveDefinition(string name, Assembly assembly);
    private sealed virtual override IScriptResourceDefinition System.Web.UI.IScriptResourceMapping.GetDefinition(string name);
    private sealed virtual override IScriptResourceDefinition System.Web.UI.IScriptResourceMapping.GetDefinition(string name, Assembly assembly);
}
[DefaultPropertyAttribute("Path")]
public class System.Web.UI.ServiceReference : object {
    internal Control _containingControl;
    [ResourceDescriptionAttribute("ServiceReference_InlineScript")]
[DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
public bool InlineScript { get; public set; }
    [ResourceDescriptionAttribute("ServiceReference_Path")]
[DefaultValueAttribute("")]
[CategoryAttribute("Behavior")]
[UrlPropertyAttribute]
public string Path { get; public set; }
    public ServiceReference(string path);
    public virtual bool get_InlineScript();
    public virtual void set_InlineScript(bool value);
    public virtual string get_Path();
    public virtual void set_Path(string value);
    protected internal virtual string GetProxyScript(ScriptManager scriptManager, Control containingControl);
    protected internal virtual string GetProxyUrl(ScriptManager scriptManager, Control containingControl);
    internal void Register(Control containingControl, ScriptManager scriptManager);
    public virtual string ToString();
}
public class System.Web.UI.ServiceReferenceCollection : Collection`1<ServiceReference> {
}
[AttributeUsageAttribute("4")]
public class System.Web.UI.TargetControlTypeAttribute : Attribute {
    public Type TargetControlType { get; }
    public object TypeId { get; }
    public TargetControlTypeAttribute(Type targetControlType);
    public Type get_TargetControlType();
    public virtual object get_TypeId();
}
internal static class System.Web.UI.TargetControlTypeCache : object {
    private static TargetControlTypeCache();
    public static Type[] GetTargetControlTypes(Type extenderControlType);
}
[DefaultEventAttribute("Tick")]
[DefaultPropertyAttribute("Interval")]
[DesignerAttribute("System.Web.UI.Design.TimerDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[NonVisualControlAttribute]
[ToolboxBitmapAttribute("EmbeddedResourceFinder", "System.Web.Resources.Timer.bmp")]
[SupportsEventValidationAttribute]
public class System.Web.UI.Timer : Control {
    [ResourceDescriptionAttribute("Timer_TimerEnable")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [ResourceDescriptionAttribute("Timer_TimerInterval")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("60000")]
public int Interval { get; public set; }
    internal ScriptManager ScriptManager { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    private static Timer();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_Interval();
    public void set_Interval(int value);
    internal ScriptManager get_ScriptManager();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public void add_Tick(EventHandler`1<EventArgs> value);
    public void remove_Tick(EventHandler`1<EventArgs> value);
    [IteratorStateMachineAttribute("System.Web.UI.Timer/<GetScriptDescriptors>d__22")]
protected virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    [IteratorStateMachineAttribute("System.Web.UI.Timer/<GetScriptReferences>d__23")]
protected virtual IEnumerable`1<ScriptReference> GetScriptReferences();
    private sealed virtual override void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument);
    private sealed virtual override IEnumerable`1<ScriptDescriptor> System.Web.UI.IScriptControl.GetScriptDescriptors();
    private sealed virtual override IEnumerable`1<ScriptReference> System.Web.UI.IScriptControl.GetScriptReferences();
    protected internal virtual void OnPreRender(EventArgs e);
    protected virtual void OnTick(EventArgs e);
    protected virtual void RaisePostBackEvent(string eventArgument);
    protected internal virtual void Render(HtmlTextWriter writer);
}
[DefaultPropertyAttribute("Triggers")]
[DesignerAttribute("System.Web.UI.Design.UpdatePanelDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ToolboxBitmapAttribute("EmbeddedResourceFinder", "System.Web.Resources.UpdatePanel.bmp")]
public class System.Web.UI.UpdatePanel : Control {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("WebControl_Attributes")]
public AttributeCollection Attributes { get; }
    [ResourceDescriptionAttribute("UpdatePanel_ChildrenAsTriggers")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
public bool ChildrenAsTriggers { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute("1")]
[TemplateInstanceAttribute("1")]
public ITemplate ContentTemplate { get; public set; }
    public ControlCollection Controls { get; }
    [BrowsableAttribute("False")]
public Control ContentTemplateContainer { get; }
    [BrowsableAttribute("False")]
public bool IsInPartialRendering { get; }
    protected internal bool RequiresUpdate { get; }
    [ResourceDescriptionAttribute("UpdatePanel_RenderMode")]
[CategoryAttribute("Layout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdatePanelRenderMode RenderMode { get; public set; }
    internal IScriptManagerInternal ScriptManager { get; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.UpdatePanelTriggerCollectionEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[ResourceDescriptionAttribute("UpdatePanel_Triggers")]
[PersistenceModeAttribute("1")]
[MergablePropertyAttribute("False")]
public UpdatePanelTriggerCollection Triggers { get; }
    [ResourceDescriptionAttribute("UpdatePanel_UpdateMode")]
[CategoryAttribute("Behavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdatePanelUpdateMode UpdateMode { get; public set; }
    internal UpdatePanel(IScriptManagerInternal scriptManager, IPage page);
    public AttributeCollection get_Attributes();
    public bool get_ChildrenAsTriggers();
    public void set_ChildrenAsTriggers(bool value);
    public ITemplate get_ContentTemplate();
    public void set_ContentTemplate(ITemplate value);
    public sealed virtual ControlCollection get_Controls();
    public Control get_ContentTemplateContainer();
    public bool get_IsInPartialRendering();
    protected internal virtual bool get_RequiresUpdate();
    public UpdatePanelRenderMode get_RenderMode();
    public void set_RenderMode(UpdatePanelRenderMode value);
    internal IScriptManagerInternal get_ScriptManager();
    public UpdatePanelTriggerCollection get_Triggers();
    public UpdatePanelUpdateMode get_UpdateMode();
    public void set_UpdateMode(UpdatePanelUpdateMode value);
    internal void ClearContent();
    protected virtual Control CreateContentTemplateContainer();
    protected sealed virtual ControlCollection CreateControlCollection();
    protected internal virtual void Initialize();
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnLoad(EventArgs e);
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void OnUnload(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual void RenderChildren(HtmlTextWriter writer);
    internal void SetAsyncPostBackMode(bool asyncPostBackMode);
    public void Update();
    private sealed virtual override string System.Web.UI.IAttributeAccessor.GetAttribute(string key);
    private sealed virtual override void System.Web.UI.IAttributeAccessor.SetAttribute(string key, string value);
}
public abstract class System.Web.UI.UpdatePanelControlTrigger : UpdatePanelTrigger {
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute]
[ResourceDescriptionAttribute("UpdatePanelControlTrigger_ControlID")]
public string ControlID { get; public set; }
    public string get_ControlID();
    public void set_ControlID(string value);
    protected Control FindTargetControl(bool searchNamingContainers);
}
public enum System.Web.UI.UpdatePanelRenderMode : Enum {
    public int value__;
    public static UpdatePanelRenderMode Block;
    public static UpdatePanelRenderMode Inline;
}
public abstract class System.Web.UI.UpdatePanelTrigger : object {
    [BrowsableAttribute("False")]
public UpdatePanel Owner { get; }
    public UpdatePanel get_Owner();
    protected internal abstract virtual bool HasTriggered();
    protected internal virtual void Initialize();
    internal void SetOwner(UpdatePanel owner);
}
public class System.Web.UI.UpdatePanelTriggerCollection : Collection`1<UpdatePanelTrigger> {
    public UpdatePanel Owner { get; }
    public UpdatePanelTriggerCollection(UpdatePanel owner);
    public UpdatePanel get_Owner();
    protected virtual void ClearItems();
    internal bool HasTriggered();
    internal void Initialize();
    protected virtual void InsertItem(int index, UpdatePanelTrigger item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, UpdatePanelTrigger item);
}
public enum System.Web.UI.UpdatePanelUpdateMode : Enum {
    public int value__;
    public static UpdatePanelUpdateMode Always;
    public static UpdatePanelUpdateMode Conditional;
}
[DefaultPropertyAttribute("AssociatedUpdatePanelID")]
[DesignerAttribute("System.Web.UI.Design.UpdateProgressDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ToolboxBitmapAttribute("EmbeddedResourceFinder", "System.Web.Resources.UpdateProgress.bmp")]
public class System.Web.UI.UpdateProgress : Control {
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.UpdatePanel")]
[ResourceDescriptionAttribute("UpdateProgress_AssociatedUpdatePanelID")]
[TypeConverterAttribute("System.Web.UI.Design.UpdateProgressAssociatedUpdatePanelIDConverter")]
public string AssociatedUpdatePanelID { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[WebSysDescriptionAttribute("WebControl_Attributes")]
public AttributeCollection Attributes { get; }
    public ControlCollection Controls { get; }
    [DefaultValueAttribute("500")]
[ResourceDescriptionAttribute("UpdateProgress_DisplayAfter")]
[CategoryAttribute("Behavior")]
public int DisplayAfter { get; public set; }
    [BrowsableAttribute("False")]
[PersistenceModeAttribute("1")]
[ResourceDescriptionAttribute("UpdateProgress_ProgressTemplate")]
public ITemplate ProgressTemplate { get; public set; }
    [DefaultValueAttribute("True")]
[ResourceDescriptionAttribute("UpdateProgress_DynamicLayout")]
[CategoryAttribute("Behavior")]
public bool DynamicLayout { get; public set; }
    public string get_AssociatedUpdatePanelID();
    public void set_AssociatedUpdatePanelID(string value);
    public AttributeCollection get_Attributes();
    public virtual ControlCollection get_Controls();
    public int get_DisplayAfter();
    public void set_DisplayAfter(int value);
    public ITemplate get_ProgressTemplate();
    public void set_ProgressTemplate(ITemplate value);
    public bool get_DynamicLayout();
    public void set_DynamicLayout(bool value);
    protected internal virtual void CreateChildControls();
    public virtual void DataBind();
    protected internal virtual void OnPreRender(EventArgs e);
    protected internal virtual void Render(HtmlTextWriter writer);
    [IteratorStateMachineAttribute("System.Web.UI.UpdateProgress/<GetScriptReferences>d__28")]
protected virtual IEnumerable`1<ScriptReference> GetScriptReferences();
    [IteratorStateMachineAttribute("System.Web.UI.UpdateProgress/<GetScriptDescriptors>d__29")]
protected virtual IEnumerable`1<ScriptDescriptor> GetScriptDescriptors();
    private sealed virtual override string System.Web.UI.IAttributeAccessor.GetAttribute(string key);
    private sealed virtual override void System.Web.UI.IAttributeAccessor.SetAttribute(string key, string value);
    private sealed virtual override IEnumerable`1<ScriptReference> System.Web.UI.IScriptControl.GetScriptReferences();
    private sealed virtual override IEnumerable`1<ScriptDescriptor> System.Web.UI.IScriptControl.GetScriptDescriptors();
}
public abstract class System.Web.UI.WebControls.ContextDataSource : QueryableDataSource {
    public string ContextTypeName { get; public set; }
    protected string EntitySetName { get; protected set; }
    public string EntityTypeName { get; public set; }
    internal ContextDataSource(IPage page);
    internal ContextDataSource(ContextDataSourceView view);
    public virtual string get_ContextTypeName();
    public virtual void set_ContextTypeName(string value);
    protected string get_EntitySetName();
    protected void set_EntitySetName(string value);
    public virtual string get_EntityTypeName();
    public virtual void set_EntityTypeName(string value);
}
public class System.Web.UI.WebControls.ContextDataSourceContextData : object {
    public object Context { get; public set; }
    public object EntitySet { get; public set; }
    public ContextDataSourceContextData(object context);
    [CompilerGeneratedAttribute]
public object get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(object value);
    [CompilerGeneratedAttribute]
public object get_EntitySet();
    [CompilerGeneratedAttribute]
public void set_EntitySet(object value);
}
public abstract class System.Web.UI.WebControls.ContextDataSourceView : QueryableDataSourceView {
    protected static object EventContextCreating;
    protected static object EventContextCreated;
    protected static object EventContextDisposing;
    public string EntitySetName { get; public set; }
    public string EntityTypeName { get; public set; }
    protected Type EntityType { get; }
    public string ContextTypeName { get; public set; }
    public Type ContextType { get; }
    protected object Context { get; protected set; }
    protected object EntitySet { get; private set; }
    protected Type EntitySetType { get; }
    protected ContextDataSourceView(DataSourceControl owner, string viewName, HttpContext context);
    internal ContextDataSourceView(DataSourceControl owner, string viewName, HttpContext context, IDynamicQueryable queryable);
    private static ContextDataSourceView();
    public string get_EntitySetName();
    public void set_EntitySetName(string value);
    public string get_EntityTypeName();
    public void set_EntityTypeName(string value);
    protected virtual Type get_EntityType();
    public virtual string get_ContextTypeName();
    public virtual void set_ContextTypeName(string value);
    public virtual Type get_ContextType();
    [CompilerGeneratedAttribute]
protected object get_Context();
    [CompilerGeneratedAttribute]
protected void set_Context(object value);
    [CompilerGeneratedAttribute]
protected object get_EntitySet();
    [CompilerGeneratedAttribute]
private void set_EntitySet(object value);
    protected Type get_EntitySetType();
    protected virtual Type GetEntitySetType();
    protected virtual Type GetDataObjectType(Type type);
    protected virtual ContextDataSourceContextData CreateContext(DataSourceOperation operation);
    protected virtual object GetSource(QueryContext context);
    protected virtual int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues);
    protected virtual int ExecuteDelete(IDictionary keys, IDictionary oldValues);
    protected virtual int ExecuteInsert(IDictionary values);
    protected virtual void DisposeContext(object dataContext);
    protected void DisposeContext();
}
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ThemeableAttribute("True")]
[SupportsEventValidationAttribute]
[DesignerAttribute("System.Web.UI.Design.WebControls.DataPagerDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[ToolboxBitmapAttribute("System.Web.UI.WebControls.DataPager", "DataPager.bmp")]
public class System.Web.UI.WebControls.DataPager : Control {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public AttributeCollection Attributes { get; }
    public ControlCollection Controls { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.DataPagerFieldTypeEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[CategoryAttribute("Default")]
[ResourceDescriptionAttribute("DataPager_Fields")]
public DataPagerFieldCollection Fields { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int MaximumRows { get; }
    [DefaultValueAttribute("")]
[IDReferencePropertyAttribute("System.Web.UI.WebControls.IPageableItemContainer")]
[WebCategoryAttribute("Paging")]
[ResourceDescriptionAttribute("DataPager_PagedControlID")]
[ThemeableAttribute("False")]
public string PagedControlID { get; public set; }
    internal IPage IPage { get; }
    [DefaultValueAttribute("10")]
[WebCategoryAttribute("Paging")]
[ResourceDescriptionAttribute("DataPager_PageSize")]
public int PageSize { get; public set; }
    [WebCategoryAttribute("Paging")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("DataPager_QueryStringField")]
public string QueryStringField { get; public set; }
    internal bool QueryStringHandled { get; internal set; }
    internal string QueryStringValue { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int StartRowIndex { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected HtmlTextWriterTag TagKey { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int TotalRowCount { get; }
    internal DataPager(IPage page);
    public AttributeCollection get_Attributes();
    public virtual ControlCollection get_Controls();
    public virtual DataPagerFieldCollection get_Fields();
    public int get_MaximumRows();
    public virtual string get_PagedControlID();
    public virtual void set_PagedControlID(string value);
    internal IPage get_IPage();
    public int get_PageSize();
    public void set_PageSize(int value);
    public string get_QueryStringField();
    public void set_QueryStringField(string value);
    internal bool get_QueryStringHandled();
    internal void set_QueryStringHandled(bool value);
    internal string get_QueryStringValue();
    public int get_StartRowIndex();
    protected virtual HtmlTextWriterTag get_TagKey();
    public int get_TotalRowCount();
    protected virtual void AddAttributesToRender(HtmlTextWriter writer);
    protected virtual void ConnectToEvents(IPageableItemContainer container);
    protected virtual void CreatePagerFields();
    public virtual void DataBind();
    protected virtual IPageableItemContainer FindPageableItemContainer();
    internal string GetQueryStringNavigateUrl(int pageNumber);
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadViewState(object savedState);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnLoad(EventArgs e);
    protected virtual void OnTotalRowCountAvailable(object sender, PageEventArgs e);
    protected virtual void RecreateChildControls();
    protected internal virtual void Render(HtmlTextWriter writer);
    public virtual void RenderBeginTag(HtmlTextWriter writer);
    protected virtual void RenderContents(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    public virtual void SetPageProperties(int startRowIndex, int maximumRows, bool databind);
    protected virtual void TrackViewState();
    private sealed virtual override void System.Web.UI.WebControls.ICompositeControlDesignerAccessor.RecreateChildControls();
    private sealed virtual override string System.Web.UI.IAttributeAccessor.GetAttribute(string name);
    private sealed virtual override void System.Web.UI.IAttributeAccessor.SetAttribute(string name, string value);
}
public class System.Web.UI.WebControls.DataPagerCommandEventArgs : CommandEventArgs {
    public DataPagerFieldItem Item { get; }
    public int NewMaximumRows { get; public set; }
    public int NewStartRowIndex { get; public set; }
    public DataPagerField PagerField { get; }
    public int TotalRowCount { get; }
    public DataPagerCommandEventArgs(DataPagerField pagerField, int totalRowCount, CommandEventArgs originalArgs, DataPagerFieldItem item);
    public DataPagerFieldItem get_Item();
    public int get_NewMaximumRows();
    public void set_NewMaximumRows(int value);
    public int get_NewStartRowIndex();
    public void set_NewStartRowIndex(int value);
    public DataPagerField get_PagerField();
    public int get_TotalRowCount();
}
public abstract class System.Web.UI.WebControls.DataPagerField : object {
    protected StateBag ViewState { get; }
    protected bool IsTrackingViewState { get; }
    protected DataPager DataPager { get; }
    protected bool QueryStringHandled { get; protected set; }
    protected string QueryStringValue { get; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[ResourceDescriptionAttribute("DataPagerField_Visible")]
public bool Visible { get; public set; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    [CompilerGeneratedAttribute]
internal void add_FieldChanged(EventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_FieldChanged(EventHandler value);
    protected StateBag get_ViewState();
    protected bool get_IsTrackingViewState();
    protected DataPager get_DataPager();
    protected bool get_QueryStringHandled();
    protected void set_QueryStringHandled(bool value);
    protected string get_QueryStringValue();
    public bool get_Visible();
    public void set_Visible(bool value);
    protected internal DataPagerField CloneField();
    protected virtual void CopyProperties(DataPagerField newField);
    public abstract virtual void CreateDataPagers(DataPagerFieldItem container, int startRowIndex, int maximumRows, int totalRowCount, int fieldIndex);
    protected abstract virtual DataPagerField CreateField();
    protected string GetQueryStringNavigateUrl(int pageNumber);
    public abstract virtual void HandleEvent(CommandEventArgs e);
    protected virtual void LoadViewState(object savedState);
    protected virtual void OnFieldChanged();
    protected virtual object SaveViewState();
    internal void SetDirty();
    internal void SetDataPager(DataPager dataPager);
    protected virtual void TrackViewState();
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.DataPagerFieldCollection : StateManagedCollection {
    [BrowsableAttribute("False")]
public DataPagerField Item { get; }
    public DataPagerFieldCollection(DataPager dataPager);
    private static DataPagerFieldCollection();
    [CompilerGeneratedAttribute]
public void add_FieldsChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FieldsChanged(EventHandler value);
    public DataPagerField get_Item(int index);
    public void Add(DataPagerField field);
    public DataPagerFieldCollection CloneFields(DataPager pager);
    public bool Contains(DataPagerField field);
    public void CopyTo(DataPagerField[] array, int index);
    protected virtual object CreateKnownType(int index);
    protected virtual Type[] GetKnownTypes();
    public int IndexOf(DataPagerField field);
    public void Insert(int index, DataPagerField field);
    protected virtual void OnClearComplete();
    protected virtual void OnInsertComplete(int index, object value);
    protected virtual void OnRemoveComplete(int index, object value);
    protected virtual void OnValidate(object o);
    public void RemoveAt(int index);
    public void Remove(DataPagerField field);
    protected virtual void SetDirtyObject(object o);
}
public class System.Web.UI.WebControls.DataPagerFieldCommandEventArgs : CommandEventArgs {
    public object CommandSource { get; }
    public DataPagerFieldItem Item { get; }
    public DataPagerFieldCommandEventArgs(DataPagerFieldItem item, object commandSource, CommandEventArgs originalArgs);
    public object get_CommandSource();
    public DataPagerFieldItem get_Item();
}
public class System.Web.UI.WebControls.DataPagerFieldItem : Control {
    public DataPager Pager { get; }
    public DataPagerField PagerField { get; }
    public DataPagerFieldItem(DataPagerField field, DataPager pager);
    public DataPager get_Pager();
    public DataPagerField get_PagerField();
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
}
[ExtensionAttribute]
internal static class System.Web.UI.WebControls.DataSourceHelper : object {
    public static object SaveViewState(ParameterCollection parameters);
    public static void TrackViewState(ParameterCollection parameters);
    [ExtensionAttribute]
public static IDictionary`2<string, object> ToDictionary(ParameterCollection parameters, HttpContext context, Control control);
    [ExtensionAttribute]
internal static IDictionary`2<string, object> ToDictionary(IOrderedDictionary parameterValues);
    [ExtensionAttribute]
public static IOrderedDictionary ToCaseInsensitiveDictionary(IDictionary dictionary);
    internal static object CreateObjectInstance(Type type);
    public static bool MergeDictionaries(object dataObjectType, ParameterCollection referenceValues, IDictionary source, IDictionary destination, IDictionary`2<string, Exception> validationErrors);
    public static bool MergeDictionaries(object dataObjectType, ParameterCollection reference, IDictionary source, IDictionary destination, IDictionary destinationCopy, IDictionary`2<string, Exception> validationErrors);
    public static Type GetType(string typeName);
    public static object BuildDataObject(Type dataObjectType, IDictionary inputParameters, IDictionary`2<string, Exception> validationErrors);
    internal static object BuildObjectValue(object value, Type destinationType, string paramName);
}
internal class System.Web.UI.WebControls.DynamicQueryableWrapper : object {
    public sealed virtual IQueryable Where(IQueryable source, string predicate, Object[] values);
    public sealed virtual IQueryable Select(IQueryable source, string selector, Object[] values);
    public sealed virtual IQueryable OrderBy(IQueryable source, string ordering, Object[] values);
    public sealed virtual IQueryable Take(IQueryable source, int count);
    public sealed virtual IQueryable Skip(IQueryable source, int count);
    public sealed virtual IQueryable GroupBy(IQueryable source, string keySelector, string elementSelector, Object[] values);
    public sealed virtual int Count(IQueryable source);
}
[PersistChildrenAttribute("False")]
[ParseChildrenAttribute("True", "Parameters")]
public class System.Web.UI.WebControls.Expressions.CustomExpression : ParameterDataSourceExpression {
    public void add_Querying(EventHandler`1<CustomExpressionEventArgs> value);
    public void remove_Querying(EventHandler`1<CustomExpressionEventArgs> value);
    public virtual IQueryable GetQueryable(IQueryable source);
}
public class System.Web.UI.WebControls.Expressions.CustomExpressionEventArgs : EventArgs {
    public IQueryable Query { get; public set; }
    public IDictionary`2<string, object> Values { get; private set; }
    public CustomExpressionEventArgs(IQueryable source, IDictionary`2<string, object> values);
    [CompilerGeneratedAttribute]
public IQueryable get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(IQueryable value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IDictionary`2<string, object> value);
}
public abstract class System.Web.UI.WebControls.Expressions.DataSourceExpression : object {
    protected HttpContext Context { get; private set; }
    protected Control Owner { get; private set; }
    public IQueryableDataSource DataSource { get; internal set; }
    protected bool IsTrackingViewState { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected StateBag ViewState { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    internal DataSourceExpression(Control owner);
    [CompilerGeneratedAttribute]
protected HttpContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(HttpContext value);
    [CompilerGeneratedAttribute]
protected Control get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(Control value);
    [CompilerGeneratedAttribute]
public IQueryableDataSource get_DataSource();
    [CompilerGeneratedAttribute]
internal void set_DataSource(IQueryableDataSource value);
    protected bool get_IsTrackingViewState();
    protected StateBag get_ViewState();
    public void SetDirty();
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    public abstract virtual IQueryable GetQueryable(IQueryable source);
    public virtual void SetContext(Control owner, HttpContext context, IQueryableDataSource dataSource);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
[DefaultMemberAttribute("Item")]
public class System.Web.UI.WebControls.Expressions.DataSourceExpressionCollection : StateManagedCollection {
    public HttpContext Context { get; private set; }
    public Control Owner { get; private set; }
    public DataSourceExpression Item { get; public set; }
    private static DataSourceExpressionCollection();
    [CompilerGeneratedAttribute]
public HttpContext get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(HttpContext value);
    [CompilerGeneratedAttribute]
public Control get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(Control value);
    public DataSourceExpression get_Item(int index);
    public void set_Item(int index, DataSourceExpression value);
    internal void SetContext(Control owner, HttpContext context, IQueryableDataSource dataSource);
    public void Add(DataSourceExpression expression);
    protected virtual object CreateKnownType(int index);
    public void CopyTo(DataSourceExpression[] expressionArray, int index);
    public void Contains(DataSourceExpression expression);
    protected virtual Type[] GetKnownTypes();
    public int IndexOf(DataSourceExpression expression);
    public void Insert(int index, DataSourceExpression expression);
    public void Remove(DataSourceExpression expression);
    public void RemoveAt(int index);
    protected virtual void SetDirtyObject(object o);
}
[ExtensionAttribute]
internal static class System.Web.UI.WebControls.Expressions.ExpressionHelper : object {
    public static Expression GetValue(Expression exp);
    public static Type GetUnderlyingType(Type type);
    public static object BuildObjectValue(object value, Type type);
    public static Expression CreatePropertyExpression(Expression parameterExpression, string propertyName);
    [ExtensionAttribute]
public static IQueryable Where(IQueryable source, LambdaExpression lambda);
    [ExtensionAttribute]
public static IQueryable Call(IQueryable source, string queryMethod, Type[] genericArgs, Expression[] arguments);
    [ExtensionAttribute]
public static IQueryable Call(IQueryable source, string queryableMethod, LambdaExpression lambda, Type[] genericArgs);
    public static Expression Or(IEnumerable`1<Expression> expressions);
    public static Expression And(IEnumerable`1<Expression> expressions);
}
public class System.Web.UI.WebControls.Expressions.MethodExpression : ParameterDataSourceExpression {
    public string TypeName { get; public set; }
    public string MethodName { get; public set; }
    public bool IgnoreIfNotFound { get; public set; }
    private static MethodExpression();
    public string get_TypeName();
    public void set_TypeName(string value);
    public string get_MethodName();
    public void set_MethodName(string value);
    public bool get_IgnoreIfNotFound();
    public void set_IgnoreIfNotFound(bool value);
    internal MethodInfo ResolveMethod();
    public virtual IQueryable GetQueryable(IQueryable source);
}
public class System.Web.UI.WebControls.Expressions.OfTypeExpression : DataSourceExpression {
    [DefaultValueAttribute("")]
public string TypeName { get; public set; }
    public OfTypeExpression(Type type);
    internal OfTypeExpression(Control owner);
    public string get_TypeName();
    public void set_TypeName(string value);
    public virtual IQueryable GetQueryable(IQueryable query);
}
[PersistChildrenAttribute("False")]
[ParseChildrenAttribute("True", "ThenByExpressions")]
public class System.Web.UI.WebControls.Expressions.OrderByExpression : DataSourceExpression {
    public string DataField { get; public set; }
    public SortDirection Direction { get; public set; }
    [PersistenceModeAttribute("2")]
public Collection`1<ThenBy> ThenByExpressions { get; }
    public string get_DataField();
    public void set_DataField(string value);
    public SortDirection get_Direction();
    public void set_Direction(SortDirection value);
    public Collection`1<ThenBy> get_ThenByExpressions();
    public virtual IQueryable GetQueryable(IQueryable source);
}
[PersistChildrenAttribute("False")]
[ParseChildrenAttribute("True", "Parameters")]
public abstract class System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression : DataSourceExpression {
    [PersistenceModeAttribute("2")]
public ParameterCollection Parameters { get; }
    public ParameterCollection get_Parameters();
    internal virtual IDictionary`2<string, object> GetValues();
    public virtual void SetContext(Control owner, HttpContext context, IQueryableDataSource dataSource);
    protected virtual object SaveViewState();
    protected virtual void LoadViewState(object savedState);
    protected virtual void TrackViewState();
}
public class System.Web.UI.WebControls.Expressions.PropertyExpression : ParameterDataSourceExpression {
    public virtual IQueryable GetQueryable(IQueryable source);
}
[ParseChildrenAttribute("True", "Expressions")]
[PersistChildrenAttribute("False")]
public class System.Web.UI.WebControls.Expressions.QueryExpression : object {
    [PersistenceModeAttribute("2")]
public DataSourceExpressionCollection Expressions { get; }
    public DataSourceExpressionCollection get_Expressions();
    public void Initialize(Control owner, HttpContext context, IQueryableDataSource dataSource);
    public virtual IQueryable GetQueryable(IQueryable source);
}
public class System.Web.UI.WebControls.Expressions.RangeExpression : ParameterDataSourceExpression {
    public string DataField { get; public set; }
    public RangeType MinType { get; public set; }
    public RangeType MaxType { get; public set; }
    public string get_DataField();
    public void set_DataField(string value);
    public RangeType get_MinType();
    public void set_MinType(RangeType value);
    public RangeType get_MaxType();
    public void set_MaxType(RangeType value);
    internal virtual IOrderedDictionary GetValues();
    public virtual IQueryable GetQueryable(IQueryable source);
}
public enum System.Web.UI.WebControls.Expressions.RangeType : Enum {
    public int value__;
    public static RangeType None;
    public static RangeType Exclusive;
    public static RangeType Inclusive;
}
public class System.Web.UI.WebControls.Expressions.SearchExpression : ParameterDataSourceExpression {
    public string DataFields { get; public set; }
    public SearchType SearchType { get; public set; }
    public StringComparison ComparisonType { get; public set; }
    public string get_DataFields();
    public void set_DataFields(string value);
    public SearchType get_SearchType();
    public void set_SearchType(SearchType value);
    public StringComparison get_ComparisonType();
    public void set_ComparisonType(StringComparison value);
    public virtual IQueryable GetQueryable(IQueryable source);
}
public enum System.Web.UI.WebControls.Expressions.SearchType : Enum {
    public int value__;
    public static SearchType Contains;
    public static SearchType StartsWith;
    public static SearchType EndsWith;
}
public class System.Web.UI.WebControls.Expressions.ThenBy : object {
    public string DataField { get; public set; }
    public SortDirection Direction { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DataField();
    [CompilerGeneratedAttribute]
public void set_DataField(string value);
    [CompilerGeneratedAttribute]
public SortDirection get_Direction();
    [CompilerGeneratedAttribute]
public void set_Direction(SortDirection value);
}
internal interface System.Web.UI.WebControls.IDynamicQueryable {
    public abstract virtual IQueryable Where(IQueryable source, string predicate, Object[] values);
    public abstract virtual IQueryable Select(IQueryable source, string selector, Object[] values);
    public abstract virtual IQueryable OrderBy(IQueryable source, string ordering, Object[] values);
    public abstract virtual IQueryable Take(IQueryable source, int count);
    public abstract virtual IQueryable Skip(IQueryable source, int count);
    public abstract virtual IQueryable GroupBy(IQueryable source, string keySelector, string elementSelector, Object[] values);
    public abstract virtual int Count(IQueryable source);
}
internal interface System.Web.UI.WebControls.ILinqToSql {
    public abstract virtual void Add(ITable table, object row);
    public abstract virtual void Attach(ITable table, object row);
    public abstract virtual object GetOriginalEntityState(ITable table, object row);
    public abstract virtual void Refresh(DataContext dataContext, RefreshMode mode, object entity);
    public abstract virtual void Remove(ITable table, object row);
    public abstract virtual void SubmitChanges(DataContext dataContext);
}
public enum System.Web.UI.WebControls.InsertItemPosition : Enum {
    public int value__;
    public static InsertItemPosition None;
    public static InsertItemPosition FirstItem;
    public static InsertItemPosition LastItem;
}
public interface System.Web.UI.WebControls.IPageableItemContainer {
    public int StartRowIndex { get; }
    public int MaximumRows { get; }
    public abstract virtual int get_StartRowIndex();
    public abstract virtual int get_MaximumRows();
    public abstract virtual void SetPageProperties(int startRowIndex, int maximumRows, bool databind);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TotalRowCountAvailable(EventHandler`1<PageEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TotalRowCountAvailable(EventHandler`1<PageEventArgs> value);
}
public interface System.Web.UI.WebControls.IQueryableDataSource {
    public abstract virtual void RaiseViewChanged();
    [CompilerGeneratedAttribute]
public abstract virtual void add_QueryCreated(EventHandler`1<QueryCreatedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_QueryCreated(EventHandler`1<QueryCreatedEventArgs> value);
}
[DefaultEventAttribute("Selecting")]
[DefaultPropertyAttribute("ContextTypeName")]
[DesignerAttribute("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
[ResourceDescriptionAttribute("LinqDataSource_Description")]
[ResourceDisplayNameAttribute("LinqDataSource_DisplayName")]
[ToolboxBitmapAttribute("System.Web.UI.WebControls.LinqDataSource", "LinqDataSource.bmp")]
public class System.Web.UI.WebControls.LinqDataSource : ContextDataSource {
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("LinqDataSource_AutoGenerateOrderByClause")]
public bool AutoGenerateOrderByClause { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("LinqDataSource_AutoGenerateWhereClause")]
public bool AutoGenerateWhereClause { get; public set; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("LinqDataSource_AutoPage")]
public bool AutoPage { get; public set; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("LinqDataSource_AutoSort")]
public bool AutoSort { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_DeleteParameters")]
[BrowsableAttribute("False")]
public ParameterCollection DeleteParameters { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_ContextTypeName")]
public string ContextTypeName { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("LinqDataSource_EnableDelete")]
public bool EnableDelete { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("LinqDataSource_EnableInsert")]
public bool EnableInsert { get; public set; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("LinqDataSource_EnableObjectTracking")]
public bool EnableObjectTracking { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("LinqDataSource_EnableUpdate")]
public bool EnableUpdate { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_GroupBy")]
public string GroupBy { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_GroupByParameters")]
[BrowsableAttribute("False")]
public ParameterCollection GroupByParameters { get; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_InsertParameters")]
[BrowsableAttribute("False")]
public ParameterCollection InsertParameters { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_OrderBy")]
public string OrderBy { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_OrderByParameters")]
[BrowsableAttribute("False")]
public ParameterCollection OrderByParameters { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_OrderGroupsBy")]
public string OrderGroupsBy { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_OrderGroupsByParameters")]
[BrowsableAttribute("False")]
public ParameterCollection OrderGroupsByParameters { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_Select")]
public string Select { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_SelectParameters")]
[BrowsableAttribute("False")]
public ParameterCollection SelectParameters { get; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("LinqDataSource_StoreOriginalValuesInViewState")]
public bool StoreOriginalValuesInViewState { get; public set; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_TableName")]
public string TableName { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_UpdateParameters")]
[BrowsableAttribute("False")]
public ParameterCollection UpdateParameters { get; }
    [DefaultValueAttribute("")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_Where")]
public string Where { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[PersistenceModeAttribute("1")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("LinqDataSource_WhereParameters")]
[BrowsableAttribute("False")]
public ParameterCollection WhereParameters { get; }
    private Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; private set; }
    private string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; private set; }
    internal LinqDataSource(LinqDataSourceView view);
    internal LinqDataSource(IPage page);
    public bool get_AutoGenerateOrderByClause();
    public void set_AutoGenerateOrderByClause(bool value);
    public sealed virtual bool get_AutoGenerateWhereClause();
    public sealed virtual void set_AutoGenerateWhereClause(bool value);
    public bool get_AutoPage();
    public void set_AutoPage(bool value);
    public bool get_AutoSort();
    public void set_AutoSort(bool value);
    public ParameterCollection get_DeleteParameters();
    public virtual string get_ContextTypeName();
    public virtual void set_ContextTypeName(string value);
    public sealed virtual bool get_EnableDelete();
    public sealed virtual void set_EnableDelete(bool value);
    public sealed virtual bool get_EnableInsert();
    public sealed virtual void set_EnableInsert(bool value);
    public bool get_EnableObjectTracking();
    public void set_EnableObjectTracking(bool value);
    public sealed virtual bool get_EnableUpdate();
    public sealed virtual void set_EnableUpdate(bool value);
    public string get_GroupBy();
    public void set_GroupBy(string value);
    public ParameterCollection get_GroupByParameters();
    public ParameterCollection get_InsertParameters();
    public string get_OrderBy();
    public void set_OrderBy(string value);
    public ParameterCollection get_OrderByParameters();
    public string get_OrderGroupsBy();
    public void set_OrderGroupsBy(string value);
    public ParameterCollection get_OrderGroupsByParameters();
    public string get_Select();
    public void set_Select(string value);
    public ParameterCollection get_SelectParameters();
    public bool get_StoreOriginalValuesInViewState();
    public void set_StoreOriginalValuesInViewState(bool value);
    public string get_TableName();
    public void set_TableName(string value);
    public ParameterCollection get_UpdateParameters();
    public sealed virtual string get_Where();
    public sealed virtual void set_Where(string value);
    public sealed virtual ParameterCollection get_WhereParameters();
    public void add_ContextCreated(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void remove_ContextCreated(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void add_ContextCreating(EventHandler`1<LinqDataSourceContextEventArgs> value);
    public void remove_ContextCreating(EventHandler`1<LinqDataSourceContextEventArgs> value);
    public void add_ContextDisposing(EventHandler`1<LinqDataSourceDisposeEventArgs> value);
    public void remove_ContextDisposing(EventHandler`1<LinqDataSourceDisposeEventArgs> value);
    public void add_Deleted(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void remove_Deleted(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void add_Deleting(EventHandler`1<LinqDataSourceDeleteEventArgs> value);
    public void remove_Deleting(EventHandler`1<LinqDataSourceDeleteEventArgs> value);
    public void add_Inserted(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void remove_Inserted(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void add_Inserting(EventHandler`1<LinqDataSourceInsertEventArgs> value);
    public void remove_Inserting(EventHandler`1<LinqDataSourceInsertEventArgs> value);
    public void add_Selected(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void remove_Selected(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void add_Selecting(EventHandler`1<LinqDataSourceSelectEventArgs> value);
    public void remove_Selecting(EventHandler`1<LinqDataSourceSelectEventArgs> value);
    public void add_Updated(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void remove_Updated(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void add_Updating(EventHandler`1<LinqDataSourceUpdateEventArgs> value);
    public void remove_Updating(EventHandler`1<LinqDataSourceUpdateEventArgs> value);
    protected virtual LinqDataSourceView CreateView();
    protected virtual QueryableDataSourceView CreateQueryableView();
    public int Delete(IDictionary keys, IDictionary oldValues);
    public int Insert(IDictionary values);
    protected internal virtual void OnInit(EventArgs e);
    protected internal virtual void OnUnload(EventArgs e);
    public int Update(IDictionary keys, IDictionary values, IDictionary oldValues);
    private sealed virtual override Type System.Web.DynamicData.IDynamicDataSource.get_ContextType();
    private sealed virtual override void System.Web.DynamicData.IDynamicDataSource.set_ContextType(Type value);
    private sealed virtual override string System.Web.DynamicData.IDynamicDataSource.get_EntitySetName();
    private sealed virtual override void System.Web.DynamicData.IDynamicDataSource.set_EntitySetName(string value);
    private sealed virtual override void System.Web.DynamicData.IDynamicDataSource.add_Exception(EventHandler`1<DynamicValidatorEventArgs> value);
    private sealed virtual override void System.Web.DynamicData.IDynamicDataSource.remove_Exception(EventHandler`1<DynamicValidatorEventArgs> value);
}
public class System.Web.UI.WebControls.LinqDataSourceContextEventArgs : EventArgs {
    public object ObjectInstance { get; public set; }
    public DataSourceOperation Operation { get; }
    public LinqDataSourceContextEventArgs(DataSourceOperation operation);
    public object get_ObjectInstance();
    public void set_ObjectInstance(object value);
    public DataSourceOperation get_Operation();
}
public class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs : CancelEventArgs {
    public LinqDataSourceValidationException Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public object OriginalObject { get; }
    public LinqDataSourceDeleteEventArgs(object originalObject);
    public LinqDataSourceDeleteEventArgs(LinqDataSourceValidationException exception);
    public LinqDataSourceValidationException get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public object get_OriginalObject();
}
public class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs : CancelEventArgs {
    public object ObjectInstance { get; }
    public LinqDataSourceDisposeEventArgs(object instance);
    public object get_ObjectInstance();
}
internal class System.Web.UI.WebControls.LinqDataSourceHelper : object {
    public static bool EnumerableContentEquals(IEnumerable enumerableA, IEnumerable enumerableB);
    public static Type FindGenericEnumerableType(Type type);
}
public class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs : CancelEventArgs {
    public LinqDataSourceValidationException Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public object NewObject { get; }
    public LinqDataSourceInsertEventArgs(object newObject);
    public LinqDataSourceInsertEventArgs(LinqDataSourceValidationException exception);
    public LinqDataSourceValidationException get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public object get_NewObject();
}
public class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs : CancelEventArgs {
    public DataSourceSelectArguments Arguments { get; }
    public IDictionary`2<string, object> GroupByParameters { get; }
    public IOrderedDictionary OrderByParameters { get; }
    public IDictionary`2<string, object> OrderGroupsByParameters { get; }
    public object Result { get; public set; }
    public IDictionary`2<string, object> SelectParameters { get; }
    public IDictionary`2<string, object> WhereParameters { get; }
    public LinqDataSourceSelectEventArgs(DataSourceSelectArguments arguments, IDictionary`2<string, object> whereParameters, IOrderedDictionary orderByParameters, IDictionary`2<string, object> groupByParameters, IDictionary`2<string, object> orderGroupsByParameters, IDictionary`2<string, object> selectParameters);
    public DataSourceSelectArguments get_Arguments();
    public IDictionary`2<string, object> get_GroupByParameters();
    public IOrderedDictionary get_OrderByParameters();
    public IDictionary`2<string, object> get_OrderGroupsByParameters();
    public object get_Result();
    public void set_Result(object value);
    public IDictionary`2<string, object> get_SelectParameters();
    public IDictionary`2<string, object> get_WhereParameters();
}
public class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs : EventArgs {
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public object Result { get; }
    public int TotalRowCount { get; }
    public LinqDataSourceStatusEventArgs(object result);
    public LinqDataSourceStatusEventArgs(object result, int totalRowCount);
    public LinqDataSourceStatusEventArgs(Exception exception);
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public object get_Result();
    public int get_TotalRowCount();
}
public class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs : CancelEventArgs {
    public LinqDataSourceValidationException Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public object OriginalObject { get; }
    public object NewObject { get; }
    public LinqDataSourceUpdateEventArgs(object originalObject, object newObject);
    public LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException exception);
    public LinqDataSourceValidationException get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public object get_OriginalObject();
    public object get_NewObject();
}
public class System.Web.UI.WebControls.LinqDataSourceValidationException : Exception {
    public IDictionary`2<string, Exception> InnerExceptions { get; }
    public LinqDataSourceValidationException(string message);
    public LinqDataSourceValidationException(string message, Exception innerException);
    public LinqDataSourceValidationException(string message, IDictionary`2<string, Exception> innerExceptions);
    protected LinqDataSourceValidationException(SerializationInfo info, StreamingContext context);
    public sealed virtual IDictionary`2<string, Exception> get_InnerExceptions();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Web.UI.WebControls.LinqDataSourceView : ContextDataSourceView {
    public bool CanDelete { get; }
    public bool CanInsert { get; }
    public bool CanPage { get; }
    public bool CanRetrieveTotalRowCount { get; }
    public bool CanSort { get; }
    public bool CanUpdate { get; }
    public Type ContextType { get; }
    public string ContextTypeName { get; public set; }
    public bool EnableDelete { get; public set; }
    public bool EnableInsert { get; public set; }
    public bool EnableObjectTracking { get; public set; }
    public bool EnableUpdate { get; public set; }
    public bool StoreOriginalValuesInViewState { get; public set; }
    public string TableName { get; public set; }
    public LinqDataSourceView(LinqDataSource owner, string name, HttpContext context);
    internal LinqDataSourceView(LinqDataSource owner, string name, HttpContext context, IDynamicQueryable dynamicQueryable, ILinqToSql linqToSql);
    private static LinqDataSourceView();
    public virtual bool get_CanDelete();
    public virtual bool get_CanInsert();
    public virtual bool get_CanPage();
    public virtual bool get_CanRetrieveTotalRowCount();
    public virtual bool get_CanSort();
    public virtual bool get_CanUpdate();
    [SecuritySafeCriticalAttribute]
public virtual Type get_ContextType();
    public virtual string get_ContextTypeName();
    public virtual void set_ContextTypeName(string value);
    public bool get_EnableDelete();
    public void set_EnableDelete(bool value);
    public bool get_EnableInsert();
    public void set_EnableInsert(bool value);
    public bool get_EnableObjectTracking();
    public void set_EnableObjectTracking(bool value);
    public bool get_EnableUpdate();
    public void set_EnableUpdate(bool value);
    public bool get_StoreOriginalValuesInViewState();
    public void set_StoreOriginalValuesInViewState(bool value);
    public string get_TableName();
    public void set_TableName(string value);
    public void add_ContextCreated(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void remove_ContextCreated(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void add_ContextCreating(EventHandler`1<LinqDataSourceContextEventArgs> value);
    public void remove_ContextCreating(EventHandler`1<LinqDataSourceContextEventArgs> value);
    public void add_ContextDisposing(EventHandler`1<LinqDataSourceDisposeEventArgs> value);
    public void remove_ContextDisposing(EventHandler`1<LinqDataSourceDisposeEventArgs> value);
    public void add_Deleted(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void remove_Deleted(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void add_Deleting(EventHandler`1<LinqDataSourceDeleteEventArgs> value);
    public void remove_Deleting(EventHandler`1<LinqDataSourceDeleteEventArgs> value);
    internal void add_Exception(EventHandler`1<DynamicValidatorEventArgs> value);
    internal void remove_Exception(EventHandler`1<DynamicValidatorEventArgs> value);
    public void add_Inserted(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void remove_Inserted(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void add_Inserting(EventHandler`1<LinqDataSourceInsertEventArgs> value);
    public void remove_Inserting(EventHandler`1<LinqDataSourceInsertEventArgs> value);
    public void add_Selected(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void remove_Selected(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void add_Selecting(EventHandler`1<LinqDataSourceSelectEventArgs> value);
    public void remove_Selecting(EventHandler`1<LinqDataSourceSelectEventArgs> value);
    public void add_Updated(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void remove_Updated(EventHandler`1<LinqDataSourceStatusEventArgs> value);
    public void add_Updating(EventHandler`1<LinqDataSourceUpdateEventArgs> value);
    public void remove_Updating(EventHandler`1<LinqDataSourceUpdateEventArgs> value);
    protected virtual object CreateContext(Type contextType);
    protected virtual ContextDataSourceContextData CreateContext(DataSourceOperation operation);
    protected virtual void DeleteDataObject(object dataContext, object table, object oldDataObject);
    protected virtual int DeleteObject(object oldEntity);
    protected virtual void DisposeContext(object dataContext);
    protected virtual int ExecuteDelete(IDictionary keys, IDictionary oldValues);
    protected virtual int ExecuteInsert(IDictionary values);
    protected virtual int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues);
    protected internal virtual IEnumerable ExecuteSelect(DataSourceSelectArguments arguments);
    protected virtual object GetSource(QueryContext context);
    protected virtual MemberInfo GetTableMemberInfo(Type contextType);
    protected virtual void HandleValidationErrors(IDictionary`2<string, Exception> errors, DataSourceOperation operation);
    protected virtual void InsertDataObject(object dataContext, object table, object newDataObject);
    protected virtual int InsertObject(object newEntity);
    protected virtual void OnContextCreated(LinqDataSourceStatusEventArgs e);
    protected virtual void OnContextCreating(LinqDataSourceContextEventArgs e);
    protected virtual void OnContextDisposing(LinqDataSourceDisposeEventArgs e);
    protected virtual void OnDeleted(LinqDataSourceStatusEventArgs e);
    protected virtual void OnDeleting(LinqDataSourceDeleteEventArgs e);
    protected virtual void OnException(DynamicValidatorEventArgs e);
    protected virtual void OnInserted(LinqDataSourceStatusEventArgs e);
    protected virtual void OnInserting(LinqDataSourceInsertEventArgs e);
    protected virtual void OnSelected(LinqDataSourceStatusEventArgs e);
    protected virtual void OnSelecting(LinqDataSourceSelectEventArgs e);
    protected virtual void OnUpdated(LinqDataSourceStatusEventArgs e);
    protected virtual void OnUpdating(LinqDataSourceUpdateEventArgs e);
    internal void ReleaseSelectContexts();
    protected virtual void ResetDataObject(object table, object dataObject);
    public IEnumerable Select(DataSourceSelectArguments arguments);
    protected virtual void StoreOriginalValues(IList results);
    protected virtual void UpdateDataObject(object dataContext, object table, object oldDataObject, object newDataObject);
    protected virtual int UpdateObject(object oldEntity, object newEntity);
    protected virtual void ValidateContextType(Type contextType, bool selecting);
    protected virtual void ValidateDeleteSupported(IDictionary keys, IDictionary oldValues);
    protected virtual void ValidateEditSupported();
    protected virtual void ValidateInsertSupported(IDictionary values);
    protected virtual void ValidateTableType(Type tableType, bool selecting);
    protected virtual void ValidateUpdateSupported(IDictionary keys, IDictionary values, IDictionary oldValues);
}
internal class System.Web.UI.WebControls.LinqToSqlWrapper : object {
    public sealed virtual void Add(ITable table, object row);
    public sealed virtual void Attach(ITable table, object row);
    public sealed virtual object GetOriginalEntityState(ITable table, object row);
    public sealed virtual void Refresh(DataContext dataContext, RefreshMode mode, object entity);
    public sealed virtual void Remove(ITable table, object row);
    public sealed virtual void SubmitChanges(DataContext dataContext);
}
[DefaultPropertyAttribute("SelectedValue")]
[DesignerAttribute("System.Web.UI.Design.WebControls.ListViewDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[ControlValuePropertyAttribute("SelectedValue")]
[DefaultEventAttribute("SelectedIndexChanged")]
[SupportsEventValidationAttribute]
[ToolboxBitmapAttribute("System.Web.UI.WebControls.ListView", "ListView.bmp")]
[DataKeyPropertyAttribute("SelectedPersistedDataKey")]
public class System.Web.UI.WebControls.ListView : DataBoundControl {
    internal static string ItemCountViewStateKey;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string AccessKey { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListViewDataItem", "1")]
[ResourceDescriptionAttribute("ListView_AlternatingItemTemplate")]
public ITemplate AlternatingItemTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Unit BorderWidth { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public BorderStyle BorderStyle { get; public set; }
    public ControlCollection Controls { get; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[ResourceDescriptionAttribute("ListView_ConvertEmptyStringToNull")]
public bool ConvertEmptyStringToNull { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
[CssClassPropertyAttribute]
public string CssClass { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResourceDescriptionAttribute("ListView_DataKeys")]
public DataKeyArray DataKeys { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataKeyArray ClientIDRowSuffixDataKeys { get; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[CategoryAttribute("Data")]
[ResourceDescriptionAttribute("ListView_DataKeyNames")]
[TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
public String[] DataKeyNames { get; public set; }
    [CategoryAttribute("Default")]
[DefaultValueAttribute("-1")]
[ResourceDescriptionAttribute("ListView_EditIndex")]
public int EditIndex { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResourceDescriptionAttribute("ListView_EditItem")]
public ListViewItem EditItem { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListViewDataItem", "1")]
[ResourceDescriptionAttribute("ListView_EditItemTemplate")]
public ITemplate EditItemTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListView")]
[ResourceDescriptionAttribute("ListView_EmptyDataTemplate")]
public ITemplate EmptyDataTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListViewItem")]
[ResourceDescriptionAttribute("ListView_EmptyItemTemplate")]
public ITemplate EmptyItemTemplate { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("True")]
[ResourceDescriptionAttribute("ListView_EnableModelValidation")]
public bool EnableModelValidation { get; public set; }
    [WebCategoryAttribute("Behavior")]
[DefaultValueAttribute("False")]
[ResourceDescriptionAttribute("ListView_EnablePersistedSelection")]
public bool EnablePersistedSelection { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public FontInfo Font { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [DefaultValueAttribute("groupPlaceholder")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("ListView_GroupPlaceholderID")]
public string GroupPlaceholderID { get; public set; }
    [CategoryAttribute("Default")]
[DefaultValueAttribute("1")]
[ResourceDescriptionAttribute("ListView_GroupItemCount")]
public int GroupItemCount { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListViewItem")]
[ResourceDescriptionAttribute("ListView_GroupSeparatorTemplate")]
public ITemplate GroupSeparatorTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListViewItem")]
[ResourceDescriptionAttribute("ListView_GroupTemplate")]
public ITemplate GroupTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Unit Height { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResourceDescriptionAttribute("ListView_InsertItem")]
public ListViewItem InsertItem { get; }
    [CategoryAttribute("Default")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResourceDescriptionAttribute("ListView_InsertItemPosition")]
public InsertItemPosition InsertItemPosition { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListViewItem", "1")]
[ResourceDescriptionAttribute("ListView_InsertItemTemplate")]
public ITemplate InsertItemTemplate { get; public set; }
    [DefaultValueAttribute("itemPlaceholder")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("ListView_ItemPlaceholderID")]
public string ItemPlaceholderID { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResourceDescriptionAttribute("ListView_Items")]
public IList`1<ListViewDataItem> Items { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListViewItem")]
[ResourceDescriptionAttribute("ListView_ItemSeparatorTemplate")]
public ITemplate ItemSeparatorTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListViewDataItem", "1")]
[ResourceDescriptionAttribute("ListView_ItemTemplate")]
public ITemplate ItemTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListView")]
[ResourceDescriptionAttribute("ListView_LayoutTemplate")]
public ITemplate LayoutTemplate { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Web.UI.WebControls.StringArrayConverter")]
[WebCategoryAttribute("Data")]
public String[] ClientIDRowSuffix { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataKey SelectedDataKey { get; }
    [CategoryAttribute("Default")]
[DefaultValueAttribute("-1")]
[ResourceDescriptionAttribute("ListView_SelectedIndex")]
public int SelectedIndex { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.ListViewDataItem", "1")]
[ResourceDescriptionAttribute("ListView_SelectedItemTemplate")]
public ITemplate SelectedItemTemplate { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object SelectedValue { get; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DesignerSerializationVisibilityAttribute("0")]
[PersistenceModeAttribute("1")]
[ResourceDescriptionAttribute("ListView_SortDirection")]
[ResourceCategoryAttribute("Sorting")]
public SortDirection SortDirection { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[ResourceDescriptionAttribute("ListView_SortExpression")]
[ResourceCategoryAttribute("Sorting")]
public string SortExpression { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public short TabIndex { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public string ToolTip { get; public set; }
    [BrowsableAttribute("False")]
public DataKey SelectedPersistedDataKey { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Unit Width { get; public set; }
    protected bool IsUsingModelBinders { get; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_UpdateMethod")]
public string UpdateMethod { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_DeleteMethod")]
public string DeleteMethod { get; public set; }
    [DefaultValueAttribute("")]
[ThemeableAttribute("False")]
[WebCategoryAttribute("Data")]
[WebSysDescriptionAttribute("DataBoundControl_InsertMethod")]
public string InsertMethod { get; public set; }
    private int System.Web.UI.WebControls.IPageableItemContainer.StartRowIndex { get; }
    protected int StartRowIndex { get; }
    private int System.Web.UI.WebControls.IPageableItemContainer.MaximumRows { get; }
    protected int MaximumRows { get; }
    private DataKey System.Web.UI.WebControls.IPersistedSelector.DataKey { get; private set; }
    private DataKeyArray System.Web.UI.IDataKeysControl.ClientIDRowSuffixDataKeys { get; }
    private DataKeyArray System.Web.UI.WebControls.IDataBoundListControl.DataKeys { get; }
    private DataKey System.Web.UI.WebControls.IDataBoundListControl.SelectedDataKey { get; }
    private int System.Web.UI.WebControls.IDataBoundListControl.SelectedIndex { get; private set; }
    private String[] System.Web.UI.WebControls.IDataBoundListControl.ClientIDRowSuffix { get; private set; }
    private bool System.Web.UI.WebControls.IDataBoundListControl.EnablePersistedSelection { get; private set; }
    private string System.Web.UI.WebControls.IDataBoundControl.DataSourceID { get; private set; }
    private IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject { get; }
    private object System.Web.UI.WebControls.IDataBoundControl.DataSource { get; private set; }
    private String[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames { get; private set; }
    private string System.Web.UI.WebControls.IDataBoundControl.DataMember { get; private set; }
    private IEnumerable System.Web.UI.WebControls.IWizardSideBarListControl.Items { get; }
    private static ListView();
    public virtual string get_AccessKey();
    public virtual void set_AccessKey(string value);
    public virtual ITemplate get_AlternatingItemTemplate();
    public virtual void set_AlternatingItemTemplate(ITemplate value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Color get_BorderColor();
    public virtual void set_BorderColor(Color value);
    public virtual Unit get_BorderWidth();
    public virtual void set_BorderWidth(Unit value);
    public virtual BorderStyle get_BorderStyle();
    public virtual void set_BorderStyle(BorderStyle value);
    public virtual ControlCollection get_Controls();
    public virtual bool get_ConvertEmptyStringToNull();
    public virtual void set_ConvertEmptyStringToNull(bool value);
    public virtual string get_CssClass();
    public virtual void set_CssClass(string value);
    public virtual DataKeyArray get_DataKeys();
    public DataKeyArray get_ClientIDRowSuffixDataKeys();
    public virtual String[] get_DataKeyNames();
    public virtual void set_DataKeyNames(String[] value);
    public virtual int get_EditIndex();
    public virtual void set_EditIndex(int value);
    public virtual ListViewItem get_EditItem();
    public virtual ITemplate get_EditItemTemplate();
    public virtual void set_EditItemTemplate(ITemplate value);
    public virtual ITemplate get_EmptyDataTemplate();
    public virtual void set_EmptyDataTemplate(ITemplate value);
    public virtual ITemplate get_EmptyItemTemplate();
    public virtual void set_EmptyItemTemplate(ITemplate value);
    public virtual bool get_EnableModelValidation();
    public virtual void set_EnableModelValidation(bool value);
    public virtual bool get_EnablePersistedSelection();
    public virtual void set_EnablePersistedSelection(bool value);
    public virtual FontInfo get_Font();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual string get_GroupPlaceholderID();
    public virtual void set_GroupPlaceholderID(string value);
    public virtual int get_GroupItemCount();
    public virtual void set_GroupItemCount(int value);
    public virtual ITemplate get_GroupSeparatorTemplate();
    public virtual void set_GroupSeparatorTemplate(ITemplate value);
    public virtual ITemplate get_GroupTemplate();
    public virtual void set_GroupTemplate(ITemplate value);
    public virtual Unit get_Height();
    public virtual void set_Height(Unit value);
    public virtual ListViewItem get_InsertItem();
    public virtual InsertItemPosition get_InsertItemPosition();
    public virtual void set_InsertItemPosition(InsertItemPosition value);
    public virtual ITemplate get_InsertItemTemplate();
    public virtual void set_InsertItemTemplate(ITemplate value);
    public virtual string get_ItemPlaceholderID();
    public virtual void set_ItemPlaceholderID(string value);
    public virtual IList`1<ListViewDataItem> get_Items();
    public virtual ITemplate get_ItemSeparatorTemplate();
    public virtual void set_ItemSeparatorTemplate(ITemplate value);
    public virtual ITemplate get_ItemTemplate();
    public virtual void set_ItemTemplate(ITemplate value);
    public virtual ITemplate get_LayoutTemplate();
    public virtual void set_LayoutTemplate(ITemplate value);
    public virtual String[] get_ClientIDRowSuffix();
    public virtual void set_ClientIDRowSuffix(String[] value);
    public virtual DataKey get_SelectedDataKey();
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public virtual ITemplate get_SelectedItemTemplate();
    public virtual void set_SelectedItemTemplate(ITemplate value);
    public object get_SelectedValue();
    public virtual SortDirection get_SortDirection();
    public virtual string get_SortExpression();
    public virtual short get_TabIndex();
    public virtual void set_TabIndex(short value);
    public virtual string get_ToolTip();
    public virtual void set_ToolTip(string value);
    public virtual DataKey get_SelectedPersistedDataKey();
    public virtual void set_SelectedPersistedDataKey(DataKey value);
    public virtual Unit get_Width();
    public virtual void set_Width(Unit value);
    public void add_ItemDeleted(EventHandler`1<ListViewDeletedEventArgs> value);
    public void remove_ItemDeleted(EventHandler`1<ListViewDeletedEventArgs> value);
    public void add_ItemInserted(EventHandler`1<ListViewInsertedEventArgs> value);
    public void remove_ItemInserted(EventHandler`1<ListViewInsertedEventArgs> value);
    public void add_ItemUpdated(EventHandler`1<ListViewUpdatedEventArgs> value);
    public void remove_ItemUpdated(EventHandler`1<ListViewUpdatedEventArgs> value);
    public void add_ItemCanceling(EventHandler`1<ListViewCancelEventArgs> value);
    public void remove_ItemCanceling(EventHandler`1<ListViewCancelEventArgs> value);
    public void add_ItemCommand(EventHandler`1<ListViewCommandEventArgs> value);
    public void remove_ItemCommand(EventHandler`1<ListViewCommandEventArgs> value);
    public void add_ItemCreated(EventHandler`1<ListViewItemEventArgs> value);
    public void remove_ItemCreated(EventHandler`1<ListViewItemEventArgs> value);
    public void add_ItemDataBound(EventHandler`1<ListViewItemEventArgs> value);
    public void remove_ItemDataBound(EventHandler`1<ListViewItemEventArgs> value);
    public void add_ItemDeleting(EventHandler`1<ListViewDeleteEventArgs> value);
    public void remove_ItemDeleting(EventHandler`1<ListViewDeleteEventArgs> value);
    public void add_ItemEditing(EventHandler`1<ListViewEditEventArgs> value);
    public void remove_ItemEditing(EventHandler`1<ListViewEditEventArgs> value);
    public void add_ItemInserting(EventHandler`1<ListViewInsertEventArgs> value);
    public void remove_ItemInserting(EventHandler`1<ListViewInsertEventArgs> value);
    public void add_ItemUpdating(EventHandler`1<ListViewUpdateEventArgs> value);
    public void remove_ItemUpdating(EventHandler`1<ListViewUpdateEventArgs> value);
    public void add_LayoutCreated(EventHandler value);
    public void remove_LayoutCreated(EventHandler value);
    public void add_PagePropertiesChanged(EventHandler value);
    public void remove_PagePropertiesChanged(EventHandler value);
    public void add_PagePropertiesChanging(EventHandler`1<PagePropertiesChangingEventArgs> value);
    public void remove_PagePropertiesChanging(EventHandler`1<PagePropertiesChangingEventArgs> value);
    public void add_SelectedIndexChanged(EventHandler value);
    public void remove_SelectedIndexChanged(EventHandler value);
    public void add_SelectedIndexChanging(EventHandler`1<ListViewSelectEventArgs> value);
    public void remove_SelectedIndexChanging(EventHandler`1<ListViewSelectEventArgs> value);
    public void add_Sorted(EventHandler value);
    public void remove_Sorted(EventHandler value);
    public void add_Sorting(EventHandler`1<ListViewSortEventArgs> value);
    public void remove_Sorting(EventHandler`1<ListViewSortEventArgs> value);
    protected virtual bool get_IsUsingModelBinders();
    public virtual string get_UpdateMethod();
    public virtual void set_UpdateMethod(string value);
    public virtual string get_DeleteMethod();
    public virtual void set_DeleteMethod(string value);
    public virtual string get_InsertMethod();
    public virtual void set_InsertMethod(string value);
    protected virtual void AddControlToContainer(Control control, Control container, int addLocation);
    protected internal virtual void CreateChildControls();
    protected virtual int CreateChildControls(IEnumerable dataSource, bool dataBinding);
    protected virtual Style CreateControlStyle();
    protected virtual DataSourceSelectArguments CreateDataSourceSelectArguments();
    protected virtual void CreateEmptyDataItem();
    protected virtual ListViewItem CreateEmptyItem();
    protected virtual ListViewItem CreateInsertItem();
    protected virtual ListViewItem CreateItem(ListViewItemType itemType);
    protected virtual ListViewDataItem CreateDataItem(int dataItemIndex, int displayIndex);
    protected virtual IList`1<ListViewDataItem> CreateItemsWithoutGroups(ListViewPagedDataSource dataSource, bool dataBinding, InsertItemPosition insertPosition, ArrayList keyArray);
    protected virtual IList`1<ListViewDataItem> CreateItemsInGroups(ListViewPagedDataSource dataSource, bool dataBinding, InsertItemPosition insertPosition, ArrayList keyArray);
    protected virtual void CreateSuffixArrayList(ListViewPagedDataSource dataSource, ArrayList suffixArray);
    protected virtual void CreateLayoutTemplate();
    public virtual void DeleteItem(int itemIndex);
    protected virtual void EnsureLayoutTemplate();
    public virtual void ExtractItemValues(IOrderedDictionary itemValues, ListViewItem item, bool includePrimaryKey);
    protected virtual Control FindPlaceholder(string containerID, Control container);
    public virtual void InsertNewItem(bool causesValidation);
    protected virtual void InstantiateEmptyDataTemplate(Control container);
    protected virtual void InstantiateEmptyItemTemplate(Control container);
    protected virtual void InstantiateGroupTemplate(Control container);
    protected virtual void InstantiateGroupSeparatorTemplate(Control container);
    protected virtual void InstantiateInsertItemTemplate(Control container);
    protected virtual void InstantiateItemSeparatorTemplate(Control container);
    protected virtual void InstantiateItemTemplate(Control container, int displayIndex);
    protected internal virtual void LoadControlState(object savedState);
    protected virtual void LoadViewState(object savedState);
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual void OnItemCanceling(ListViewCancelEventArgs e);
    protected virtual void OnItemCommand(ListViewCommandEventArgs e);
    protected virtual void OnItemCreated(ListViewItemEventArgs e);
    protected virtual void OnItemDataBound(ListViewItemEventArgs e);
    protected virtual void OnItemDeleted(ListViewDeletedEventArgs e);
    protected virtual void OnItemDeleting(ListViewDeleteEventArgs e);
    protected virtual void OnItemEditing(ListViewEditEventArgs e);
    protected virtual void OnItemInserted(ListViewInsertedEventArgs e);
    protected virtual void OnItemInserting(ListViewInsertEventArgs e);
    protected virtual void OnItemUpdated(ListViewUpdatedEventArgs e);
    protected virtual void OnItemUpdating(ListViewUpdateEventArgs e);
    protected virtual void OnLayoutCreated(EventArgs e);
    protected virtual void OnPagePropertiesChanged(EventArgs e);
    protected virtual void OnPagePropertiesChanging(PagePropertiesChangingEventArgs e);
    protected virtual void OnTotalRowCountAvailable(PageEventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSelectedIndexChanging(ListViewSelectEventArgs e);
    protected virtual void OnSorted(EventArgs e);
    protected virtual void OnSorting(ListViewSortEventArgs e);
    protected internal virtual void PerformDataBinding(IEnumerable data);
    protected virtual void PerformSelect();
    protected virtual void RemoveItems();
    protected internal virtual void Render(HtmlTextWriter writer);
    protected internal virtual object SaveControlState();
    protected virtual object SaveViewState();
    public virtual void Sort(string sortExpression, SortDirection sortDirection);
    public virtual void UpdateItem(int itemIndex, bool causesValidation);
    internal virtual void UpdateModelDataSourceProperties(ModelDataSource modelDataSource);
    private sealed virtual override int System.Web.UI.WebControls.IPageableItemContainer.get_StartRowIndex();
    protected virtual int get_StartRowIndex();
    private sealed virtual override int System.Web.UI.WebControls.IPageableItemContainer.get_MaximumRows();
    protected virtual int get_MaximumRows();
    private sealed virtual override void System.Web.UI.WebControls.IPageableItemContainer.SetPageProperties(int startRowIndex, int maximumRows, bool databind);
    public void SelectItem(int rowIndex);
    public void SetEditItem(int rowIndex);
    protected virtual void SetPageProperties(int startRowIndex, int maximumRows, bool databind);
    private sealed virtual override void System.Web.UI.WebControls.IPageableItemContainer.add_TotalRowCountAvailable(EventHandler`1<PageEventArgs> value);
    private sealed virtual override void System.Web.UI.WebControls.IPageableItemContainer.remove_TotalRowCountAvailable(EventHandler`1<PageEventArgs> value);
    private sealed virtual override DataKey System.Web.UI.WebControls.IPersistedSelector.get_DataKey();
    private sealed virtual override void System.Web.UI.WebControls.IPersistedSelector.set_DataKey(DataKey value);
    private sealed virtual override DataKeyArray System.Web.UI.IDataKeysControl.get_ClientIDRowSuffixDataKeys();
    private sealed virtual override DataKeyArray System.Web.UI.WebControls.IDataBoundListControl.get_DataKeys();
    private sealed virtual override DataKey System.Web.UI.WebControls.IDataBoundListControl.get_SelectedDataKey();
    private sealed virtual override int System.Web.UI.WebControls.IDataBoundListControl.get_SelectedIndex();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundListControl.set_SelectedIndex(int value);
    private sealed virtual override String[] System.Web.UI.WebControls.IDataBoundListControl.get_ClientIDRowSuffix();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundListControl.set_ClientIDRowSuffix(String[] value);
    private sealed virtual override bool System.Web.UI.WebControls.IDataBoundListControl.get_EnablePersistedSelection();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundListControl.set_EnablePersistedSelection(bool value);
    private sealed virtual override string System.Web.UI.WebControls.IDataBoundControl.get_DataSourceID();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataSourceID(string value);
    private sealed virtual override IDataSource System.Web.UI.WebControls.IDataBoundControl.get_DataSourceObject();
    private sealed virtual override object System.Web.UI.WebControls.IDataBoundControl.get_DataSource();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataSource(object value);
    private sealed virtual override String[] System.Web.UI.WebControls.IDataBoundControl.get_DataKeyNames();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataKeyNames(String[] value);
    private sealed virtual override string System.Web.UI.WebControls.IDataBoundControl.get_DataMember();
    private sealed virtual override void System.Web.UI.WebControls.IDataBoundControl.set_DataMember(string value);
    private sealed virtual override IEnumerable System.Web.UI.WebControls.IWizardSideBarListControl.get_Items();
    private sealed virtual override void System.Web.UI.WebControls.IWizardSideBarListControl.add_ItemCommand(CommandEventHandler value);
    private sealed virtual override void System.Web.UI.WebControls.IWizardSideBarListControl.remove_ItemCommand(CommandEventHandler value);
    private sealed virtual override void System.Web.UI.WebControls.IWizardSideBarListControl.add_ItemDataBound(EventHandler`1<WizardSideBarListControlItemEventArgs> value);
    private sealed virtual override void System.Web.UI.WebControls.IWizardSideBarListControl.remove_ItemDataBound(EventHandler`1<WizardSideBarListControlItemEventArgs> value);
}
public class System.Web.UI.WebControls.ListViewCancelEventArgs : CancelEventArgs {
    public int ItemIndex { get; }
    public ListViewCancelMode CancelMode { get; }
    public ListViewCancelEventArgs(int itemIndex, ListViewCancelMode cancelMode);
    public int get_ItemIndex();
    public ListViewCancelMode get_CancelMode();
}
public enum System.Web.UI.WebControls.ListViewCancelMode : Enum {
    public int value__;
    public static ListViewCancelMode CancelingEdit;
    public static ListViewCancelMode CancelingInsert;
}
public class System.Web.UI.WebControls.ListViewCommandEventArgs : CommandEventArgs {
    public object CommandSource { get; }
    public ListViewItem Item { get; }
    public bool Handled { get; public set; }
    public ListViewCommandEventArgs(ListViewItem item, object commandSource, CommandEventArgs originalArgs);
    public object get_CommandSource();
    public ListViewItem get_Item();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
internal class System.Web.UI.WebControls.ListViewContainer : Control {
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
}
public class System.Web.UI.WebControls.ListViewDataItem : ListViewItem {
    public object DataItem { get; public set; }
    public int DataItemIndex { get; }
    public int DisplayIndex { get; }
    public ListViewDataItem(int dataItemIndex, int displayIndex);
    public virtual object get_DataItem();
    public virtual void set_DataItem(object value);
    public virtual int get_DataItemIndex();
    public virtual int get_DisplayIndex();
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
}
public class System.Web.UI.WebControls.ListViewDeletedEventArgs : EventArgs {
    public int AffectedRows { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary Values { get; }
    public ListViewDeletedEventArgs(int affectedRows, Exception exception);
    public int get_AffectedRows();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_Values();
    internal void SetKeys(IOrderedDictionary keys);
    internal void SetValues(IOrderedDictionary values);
}
public class System.Web.UI.WebControls.ListViewDeleteEventArgs : CancelEventArgs {
    public int ItemIndex { get; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary Values { get; }
    public ListViewDeleteEventArgs(int itemIndex);
    public int get_ItemIndex();
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_Values();
}
public class System.Web.UI.WebControls.ListViewEditEventArgs : CancelEventArgs {
    public int NewEditIndex { get; }
    public ListViewEditEventArgs(int newEditIndex);
    public int get_NewEditIndex();
}
public class System.Web.UI.WebControls.ListViewInsertedEventArgs : EventArgs {
    public int AffectedRows { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public bool KeepInInsertMode { get; public set; }
    public IOrderedDictionary Values { get; }
    public ListViewInsertedEventArgs(int affectedRows, Exception exception);
    public int get_AffectedRows();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public bool get_KeepInInsertMode();
    public void set_KeepInInsertMode(bool value);
    public IOrderedDictionary get_Values();
    internal void SetValues(IOrderedDictionary values);
}
public class System.Web.UI.WebControls.ListViewInsertEventArgs : CancelEventArgs {
    public ListViewItem Item { get; }
    public IOrderedDictionary Values { get; }
    public ListViewInsertEventArgs(ListViewItem item);
    public ListViewItem get_Item();
    public IOrderedDictionary get_Values();
}
[ToolboxItemAttribute("False")]
public class System.Web.UI.WebControls.ListViewItem : Control {
    public ListViewItemType ItemType { get; }
    public object DataItem { get; public set; }
    public int DataItemIndex { get; }
    public int DisplayIndex { get; }
    public ListViewItem(ListViewItemType itemType);
    public ListViewItemType get_ItemType();
    [CompilerGeneratedAttribute]
public virtual object get_DataItem();
    [CompilerGeneratedAttribute]
public virtual void set_DataItem(object value);
    public virtual int get_DataItemIndex();
    public virtual int get_DisplayIndex();
    protected virtual bool OnBubbleEvent(object source, EventArgs e);
}
public class System.Web.UI.WebControls.ListViewItemEventArgs : EventArgs {
    public ListViewItem Item { get; }
    public ListViewItemEventArgs(ListViewItem item);
    public ListViewItem get_Item();
}
public enum System.Web.UI.WebControls.ListViewItemType : Enum {
    public int value__;
    public static ListViewItemType DataItem;
    public static ListViewItemType InsertItem;
    public static ListViewItemType EmptyItem;
}
public class System.Web.UI.WebControls.ListViewPagedDataSource : object {
    public bool AllowServerPaging { get; public set; }
    public int Count { get; }
    public IEnumerable DataSource { get; public set; }
    public int DataSourceCount { get; }
    public bool IsReadOnly { get; }
    public bool IsServerPagingEnabled { get; }
    public bool IsSynchronized { get; }
    public int MaximumRows { get; public set; }
    public int StartRowIndex { get; public set; }
    public object SyncRoot { get; }
    public int TotalRowCount { get; public set; }
    public bool get_AllowServerPaging();
    public void set_AllowServerPaging(bool value);
    public sealed virtual int get_Count();
    public IEnumerable get_DataSource();
    public void set_DataSource(IEnumerable value);
    public int get_DataSourceCount();
    public bool get_IsReadOnly();
    public bool get_IsServerPagingEnabled();
    public sealed virtual bool get_IsSynchronized();
    public int get_MaximumRows();
    public void set_MaximumRows(int value);
    public int get_StartRowIndex();
    public void set_StartRowIndex(int value);
    public sealed virtual object get_SyncRoot();
    public int get_TotalRowCount();
    public void set_TotalRowCount(int value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public sealed virtual string GetListName(PropertyDescriptor[] listAccessors);
}
public class System.Web.UI.WebControls.ListViewSelectEventArgs : CancelEventArgs {
    public int NewSelectedIndex { get; public set; }
    public ListViewSelectEventArgs(int newSelectedIndex);
    public int get_NewSelectedIndex();
    public void set_NewSelectedIndex(int value);
}
public class System.Web.UI.WebControls.ListViewSortEventArgs : CancelEventArgs {
    public SortDirection SortDirection { get; public set; }
    public string SortExpression { get; public set; }
    public ListViewSortEventArgs(string sortExpression, SortDirection sortDirection);
    public SortDirection get_SortDirection();
    public void set_SortDirection(SortDirection value);
    public string get_SortExpression();
    public void set_SortExpression(string value);
}
internal class System.Web.UI.WebControls.ListViewTableCell : HtmlTableCell {
    protected virtual ControlCollection CreateControlCollection();
    protected internal virtual void Render(HtmlTextWriter writer);
}
internal class System.Web.UI.WebControls.ListViewTableRow : HtmlTableRow {
    protected virtual ControlCollection CreateControlCollection();
    protected internal virtual void Render(HtmlTextWriter writer);
}
public class System.Web.UI.WebControls.ListViewUpdatedEventArgs : EventArgs {
    public int AffectedRows { get; }
    public Exception Exception { get; }
    public bool ExceptionHandled { get; public set; }
    public bool KeepInEditMode { get; public set; }
    public IOrderedDictionary NewValues { get; }
    public IOrderedDictionary OldValues { get; }
    public ListViewUpdatedEventArgs(int affectedRows, Exception exception);
    public int get_AffectedRows();
    public Exception get_Exception();
    public bool get_ExceptionHandled();
    public void set_ExceptionHandled(bool value);
    public bool get_KeepInEditMode();
    public void set_KeepInEditMode(bool value);
    public IOrderedDictionary get_NewValues();
    public IOrderedDictionary get_OldValues();
    internal void SetKeys(IOrderedDictionary keys);
    internal void SetNewValues(IOrderedDictionary newValues);
    internal void SetOldValues(IOrderedDictionary oldValues);
}
public class System.Web.UI.WebControls.ListViewUpdateEventArgs : CancelEventArgs {
    public int ItemIndex { get; }
    public IOrderedDictionary Keys { get; }
    public IOrderedDictionary NewValues { get; }
    public IOrderedDictionary OldValues { get; }
    public ListViewUpdateEventArgs(int itemIndex);
    public int get_ItemIndex();
    public IOrderedDictionary get_Keys();
    public IOrderedDictionary get_NewValues();
    public IOrderedDictionary get_OldValues();
}
public class System.Web.UI.WebControls.NextPreviousPagerField : DataPagerField {
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("NextPreviousPagerField_ButtonCssClass")]
[CssClassPropertyAttribute]
public string ButtonCssClass { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResourceDescriptionAttribute("NextPreviousPagerField_ButtonType")]
public ButtonType ButtonType { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor", "System.Drawing.Design.UITypeEditor")]
[ResourceDescriptionAttribute("NextPreviousPagerField_FirstPageImageUrl")]
[UrlPropertyAttribute]
public string FirstPageImageUrl { get; public set; }
    [CategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[ResourceDefaultValueAttribute("NextPrevPagerField_DefaultFirstPageText")]
[ResourceDescriptionAttribute("NextPreviousPagerField_FirstPageText")]
public string FirstPageText { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor", "System.Drawing.Design.UITypeEditor")]
[ResourceDescriptionAttribute("NextPreviousPagerField_LastPageImageUrl")]
[UrlPropertyAttribute]
public string LastPageImageUrl { get; public set; }
    [CategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[ResourceDefaultValueAttribute("NextPrevPagerField_DefaultLastPageText")]
[ResourceDescriptionAttribute("NextPreviousPagerField_LastPageText")]
public string LastPageText { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ResourceDescriptionAttribute("NextPreviousPagerField_NextPageImageUrl")]
[UrlPropertyAttribute]
public string NextPageImageUrl { get; public set; }
    [CategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[ResourceDefaultValueAttribute("NextPrevPagerField_DefaultNextPageText")]
[ResourceDescriptionAttribute("NextPreviousPagerField_NextPageText")]
public string NextPageText { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor", "System.Drawing.Design.UITypeEditor")]
[ResourceDescriptionAttribute("NextPreviousPagerField_PreviousPageImageUrl")]
[UrlPropertyAttribute]
public string PreviousPageImageUrl { get; public set; }
    [CategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[ResourceDefaultValueAttribute("NextPrevPagerField_DefaultPreviousPageText")]
[ResourceDescriptionAttribute("NextPreviousPagerField_PreviousPageText")]
public string PreviousPageText { get; public set; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("NextPreviousPagerField_RenderNonBreakingSpacesBetweenControls")]
public bool RenderNonBreakingSpacesBetweenControls { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("NextPreviousPagerField_RenderDisabledButtonsAsLabels")]
public bool RenderDisabledButtonsAsLabels { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("NextPreviousPagerField_ShowFirstPageButton")]
public bool ShowFirstPageButton { get; public set; }
    [DefaultValueAttribute("False")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("NextPreviousPagerField_ShowLastPageButton")]
public bool ShowLastPageButton { get; public set; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("NextPreviousPagerField_ShowNextPageButton")]
public bool ShowNextPageButton { get; public set; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("NextPreviousPagerField_ShowPreviousPageButton")]
public bool ShowPreviousPageButton { get; public set; }
    public string get_ButtonCssClass();
    public void set_ButtonCssClass(string value);
    public ButtonType get_ButtonType();
    public void set_ButtonType(ButtonType value);
    public string get_FirstPageImageUrl();
    public void set_FirstPageImageUrl(string value);
    public string get_FirstPageText();
    public void set_FirstPageText(string value);
    public string get_LastPageImageUrl();
    public void set_LastPageImageUrl(string value);
    public string get_LastPageText();
    public void set_LastPageText(string value);
    public string get_NextPageImageUrl();
    public void set_NextPageImageUrl(string value);
    public string get_NextPageText();
    public void set_NextPageText(string value);
    public string get_PreviousPageImageUrl();
    public void set_PreviousPageImageUrl(string value);
    public string get_PreviousPageText();
    public void set_PreviousPageText(string value);
    public bool get_RenderNonBreakingSpacesBetweenControls();
    public void set_RenderNonBreakingSpacesBetweenControls(bool value);
    public bool get_RenderDisabledButtonsAsLabels();
    public void set_RenderDisabledButtonsAsLabels(bool value);
    public bool get_ShowFirstPageButton();
    public void set_ShowFirstPageButton(bool value);
    public bool get_ShowLastPageButton();
    public void set_ShowLastPageButton(bool value);
    public bool get_ShowNextPageButton();
    public void set_ShowNextPageButton(bool value);
    public bool get_ShowPreviousPageButton();
    public void set_ShowPreviousPageButton(bool value);
    protected virtual void CopyProperties(DataPagerField newField);
    protected virtual DataPagerField CreateField();
    public virtual void HandleEvent(CommandEventArgs e);
    public virtual void CreateDataPagers(DataPagerFieldItem container, int startRowIndex, int maximumRows, int totalRowCount, int fieldIndex);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
public class System.Web.UI.WebControls.NumericPagerField : DataPagerField {
    [DefaultValueAttribute("5")]
[CategoryAttribute("Appearance")]
[ResourceDescriptionAttribute("NumericPagerField_ButtonCount")]
public int ButtonCount { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[ResourceDescriptionAttribute("NumericPagerField_ButtonType")]
public ButtonType ButtonType { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("NumericPagerField_CurrentPageLabelCssClass")]
[CssClassPropertyAttribute]
public string CurrentPageLabelCssClass { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor", "System.Drawing.Design.UITypeEditor")]
[ResourceDescriptionAttribute("NumericPagerField_NextPageImageUrl")]
[UrlPropertyAttribute]
public string NextPageImageUrl { get; public set; }
    [CategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[ResourceDefaultValueAttribute("NumericPagerField_DefaultNextPageText")]
[ResourceDescriptionAttribute("NumericPagerField_NextPageText")]
public string NextPageText { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("NumericPagerField_NextPreviousButtonCssClass")]
[CssClassPropertyAttribute]
public string NextPreviousButtonCssClass { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("NumericPagerField_NumericButtonCssClass")]
[CssClassPropertyAttribute]
public string NumericButtonCssClass { get; public set; }
    [CategoryAttribute("Appearance")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Web.UI.Design.ImageUrlEditor", "System.Drawing.Design.UITypeEditor")]
[ResourceDescriptionAttribute("NumericPagerField_PreviousPageImageUrl")]
[UrlPropertyAttribute]
public string PreviousPageImageUrl { get; public set; }
    [CategoryAttribute("Appearance")]
[LocalizableAttribute("True")]
[ResourceDefaultValueAttribute("NumericPagerField_DefaultPreviousPageText")]
[ResourceDescriptionAttribute("NumericPagerField_PreviousPageText")]
public string PreviousPageText { get; public set; }
    [DefaultValueAttribute("True")]
[CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("NumericPagerField_RenderNonBreakingSpacesBetweenControls")]
public bool RenderNonBreakingSpacesBetweenControls { get; public set; }
    public int get_ButtonCount();
    public void set_ButtonCount(int value);
    public ButtonType get_ButtonType();
    public void set_ButtonType(ButtonType value);
    public string get_CurrentPageLabelCssClass();
    public void set_CurrentPageLabelCssClass(string value);
    public string get_NextPageImageUrl();
    public void set_NextPageImageUrl(string value);
    public string get_NextPageText();
    public void set_NextPageText(string value);
    public string get_NextPreviousButtonCssClass();
    public void set_NextPreviousButtonCssClass(string value);
    public string get_NumericButtonCssClass();
    public void set_NumericButtonCssClass(string value);
    public string get_PreviousPageImageUrl();
    public void set_PreviousPageImageUrl(string value);
    public string get_PreviousPageText();
    public void set_PreviousPageText(string value);
    public bool get_RenderNonBreakingSpacesBetweenControls();
    public void set_RenderNonBreakingSpacesBetweenControls(bool value);
    protected virtual void CopyProperties(DataPagerField newField);
    protected virtual DataPagerField CreateField();
    public virtual void HandleEvent(CommandEventArgs e);
    public virtual void CreateDataPagers(DataPagerFieldItem container, int startRowIndex, int maximumRows, int totalRowCount, int fieldIndex);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
public class System.Web.UI.WebControls.PageEventArgs : EventArgs {
    public int MaximumRows { get; }
    public int StartRowIndex { get; }
    public int TotalRowCount { get; }
    public PageEventArgs(int startRowIndex, int maximumRows, int totalRowCount);
    public int get_MaximumRows();
    public int get_StartRowIndex();
    public int get_TotalRowCount();
}
public class System.Web.UI.WebControls.PagePropertiesChangingEventArgs : EventArgs {
    public int MaximumRows { get; }
    public int StartRowIndex { get; }
    public PagePropertiesChangingEventArgs(int startRowIndex, int maximumRows);
    public int get_MaximumRows();
    public int get_StartRowIndex();
}
[ParseChildrenAttribute("True")]
[PersistChildrenAttribute("False")]
public abstract class System.Web.UI.WebControls.QueryableDataSource : DataSourceControl {
    internal IPage IPage { get; }
    internal QueryableDataSource(IPage page);
    internal QueryableDataSource(QueryableDataSourceView view);
    internal IPage get_IPage();
    protected abstract virtual QueryableDataSourceView CreateQueryableView();
    protected virtual ICollection GetViewNames();
    protected virtual DataSourceView GetView(string viewName);
    protected internal virtual void OnInit(EventArgs e);
    internal void SetView(QueryableDataSourceView view);
    protected virtual void UpdateParameterVales();
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    protected virtual void LoadViewState(object savedState);
    public sealed virtual void RaiseViewChanged();
    public sealed virtual void add_QueryCreated(EventHandler`1<QueryCreatedEventArgs> value);
    public sealed virtual void remove_QueryCreated(EventHandler`1<QueryCreatedEventArgs> value);
}
public class System.Web.UI.WebControls.QueryableDataSourceEditData : object {
    public object NewDataObject { get; public set; }
    public object OriginalDataObject { get; public set; }
    public object get_NewDataObject();
    public void set_NewDataObject(object value);
    public object get_OriginalDataObject();
    public void set_OriginalDataObject(object value);
}
[ExtensionAttribute]
internal static class System.Web.UI.WebControls.QueryableDataSourceHelper : object {
    private static QueryableDataSourceHelper();
    internal static IQueryable AsQueryable(object o);
    [ExtensionAttribute]
public static IList ToList(IQueryable query, Type dataObjectType);
    public static bool EnumerableContentEquals(IEnumerable enumerableA, IEnumerable enumerableB);
    public static Type FindGenericEnumerableType(Type type);
    [ExtensionAttribute]
internal static IDictionary`2<string, object> ToEscapedParameterKeys(ParameterCollection parameters, HttpContext context, Control control);
    [ExtensionAttribute]
internal static IDictionary`2<string, object> ToEscapedParameterKeys(IDictionary parameters, Control owner);
    [ExtensionAttribute]
internal static IDictionary`2<string, object> ToEscapedParameterKeys(IDictionary`2<string, object> parameters, Control owner);
    internal static IQueryable CreateOrderByExpression(IOrderedDictionary parameters, IQueryable source, IDynamicQueryable queryable);
    internal static IQueryable CreateWhereExpression(IDictionary`2<string, object> parameters, IQueryable source, IDynamicQueryable queryable);
    internal static void ValidateOrderByParameter(string name, string value);
    internal static void ValidateParameterName(string name, Control owner);
}
public abstract class System.Web.UI.WebControls.QueryableDataSourceView : DataSourceView {
    protected static object EventSelected;
    protected static object EventSelecting;
    public bool AutoGenerateOrderByClause { get; public set; }
    public bool AutoGenerateWhereClause { get; public set; }
    public bool AutoPage { get; public set; }
    public bool AutoSort { get; public set; }
    public bool CanDelete { get; }
    public bool CanInsert { get; }
    public bool CanPage { get; }
    public bool CanRetrieveTotalRowCount { get; }
    public bool CanSort { get; }
    public bool CanUpdate { get; }
    public ParameterCollection DeleteParameters { get; }
    protected Type EntityType { get; }
    public ParameterCollection GroupByParameters { get; }
    protected bool IsTrackingViewState { get; }
    public ParameterCollection InsertParameters { get; }
    public ParameterCollection OrderByParameters { get; }
    public ParameterCollection OrderGroupsByParameters { get; }
    public string OrderBy { get; public set; }
    public string OrderGroupsBy { get; public set; }
    public string GroupBy { get; public set; }
    public ParameterCollection SelectNewParameters { get; }
    public string SelectNew { get; public set; }
    public ParameterCollection WhereParameters { get; }
    public string Where { get; public set; }
    public ParameterCollection UpdateParameters { get; }
    private bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    protected QueryableDataSourceView(DataSourceControl owner, string viewName, HttpContext context);
    internal QueryableDataSourceView(DataSourceControl owner, string viewName, HttpContext context, IDynamicQueryable queryable);
    private static QueryableDataSourceView();
    public bool get_AutoGenerateOrderByClause();
    public void set_AutoGenerateOrderByClause(bool value);
    public bool get_AutoGenerateWhereClause();
    public void set_AutoGenerateWhereClause(bool value);
    public virtual bool get_AutoPage();
    public virtual void set_AutoPage(bool value);
    public virtual bool get_AutoSort();
    public virtual void set_AutoSort(bool value);
    public virtual bool get_CanDelete();
    public virtual bool get_CanInsert();
    public virtual bool get_CanPage();
    public virtual bool get_CanRetrieveTotalRowCount();
    public virtual bool get_CanSort();
    public virtual bool get_CanUpdate();
    public virtual ParameterCollection get_DeleteParameters();
    protected abstract virtual Type get_EntityType();
    public virtual ParameterCollection get_GroupByParameters();
    protected bool get_IsTrackingViewState();
    public virtual ParameterCollection get_InsertParameters();
    public virtual ParameterCollection get_OrderByParameters();
    public virtual ParameterCollection get_OrderGroupsByParameters();
    public virtual string get_OrderBy();
    public virtual void set_OrderBy(string value);
    public virtual string get_OrderGroupsBy();
    public virtual void set_OrderGroupsBy(string value);
    public virtual string get_GroupBy();
    public virtual void set_GroupBy(string value);
    public virtual ParameterCollection get_SelectNewParameters();
    public virtual string get_SelectNew();
    public virtual void set_SelectNew(string value);
    public virtual ParameterCollection get_WhereParameters();
    public virtual string get_Where();
    public virtual void set_Where(string value);
    public virtual ParameterCollection get_UpdateParameters();
    protected void OnQueryParametersChanged(object sender, EventArgs e);
    public void RaiseViewChanged();
    protected abstract virtual object GetSource(QueryContext context);
    protected QueryContext CreateQueryContext(DataSourceSelectArguments arguments);
    protected virtual IQueryable BuildQuery(DataSourceSelectArguments arguments);
    protected virtual IQueryable ExecuteQuery(IQueryable source, QueryContext context);
    protected IQueryable ExecuteQueryExpressions(IQueryable source, QueryContext context);
    protected IQueryable ExecuteSorting(IQueryable source, QueryContext context);
    protected IQueryable ExecutePaging(IQueryable source, QueryContext context);
    protected virtual void LoadViewState(object savedState);
    protected virtual object SaveViewState();
    protected virtual void TrackViewState();
    protected internal virtual IEnumerable ExecuteSelect(DataSourceSelectArguments arguments);
    protected void ClearOriginalValues();
    protected virtual IDictionary GetOriginalValues(IDictionary keys);
    protected virtual void StoreOriginalValues(IList results);
    protected void StoreOriginalValues(IList results, Func`2<PropertyDescriptor, bool> include);
    public int Update(IDictionary keys, IDictionary values, IDictionary oldValues);
    public int Delete(IDictionary keys, IDictionary oldValues);
    public int Insert(IDictionary values);
    protected QueryableDataSourceEditData BuildDeleteObject(IDictionary keys, IDictionary oldValues, IDictionary`2<string, Exception> validationErrors);
    protected QueryableDataSourceEditData BuildInsertObject(IDictionary values, IDictionary`2<string, Exception> validationErrors);
    protected QueryableDataSourceEditData BuildUpdateObjects(IDictionary keys, IDictionary values, IDictionary oldValues, IDictionary`2<string, Exception> validationErrors);
    protected virtual int DeleteObject(object oldEntity);
    protected virtual int UpdateObject(object oldEntity, object newEntity);
    protected virtual int InsertObject(object newEntity);
    protected abstract virtual void HandleValidationErrors(IDictionary`2<string, Exception> errors, DataSourceOperation operation);
    protected virtual int ExecuteDelete(IDictionary keys, IDictionary oldValues);
    protected virtual int ExecuteInsert(IDictionary values);
    protected virtual int ExecuteUpdate(IDictionary keys, IDictionary values, IDictionary oldValues);
    public void add_QueryCreated(EventHandler`1<QueryCreatedEventArgs> value);
    public void remove_QueryCreated(EventHandler`1<QueryCreatedEventArgs> value);
    protected virtual void OnQueryCreated(QueryCreatedEventArgs e);
    private sealed virtual override bool System.Web.UI.IStateManager.get_IsTrackingViewState();
    private sealed virtual override void System.Web.UI.IStateManager.LoadViewState(object state);
    private sealed virtual override object System.Web.UI.IStateManager.SaveViewState();
    private sealed virtual override void System.Web.UI.IStateManager.TrackViewState();
}
public class System.Web.UI.WebControls.QueryContext : object {
    public IDictionary`2<string, object> SelectParameters { get; private set; }
    public IOrderedDictionary OrderByParameters { get; private set; }
    public IDictionary`2<string, object> GroupByParameters { get; private set; }
    public IDictionary`2<string, object> OrderGroupsByParameters { get; private set; }
    public IDictionary`2<string, object> WhereParameters { get; private set; }
    public DataSourceSelectArguments Arguments { get; private set; }
    public QueryContext(IDictionary`2<string, object> whereParameters, IDictionary`2<string, object> orderGroupsByParameters, IOrderedDictionary orderByParameters, IDictionary`2<string, object> groupByParameters, IDictionary`2<string, object> selectParameters, DataSourceSelectArguments arguments);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_SelectParameters();
    [CompilerGeneratedAttribute]
private void set_SelectParameters(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IOrderedDictionary get_OrderByParameters();
    [CompilerGeneratedAttribute]
private void set_OrderByParameters(IOrderedDictionary value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_GroupByParameters();
    [CompilerGeneratedAttribute]
private void set_GroupByParameters(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_OrderGroupsByParameters();
    [CompilerGeneratedAttribute]
private void set_OrderGroupsByParameters(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_WhereParameters();
    [CompilerGeneratedAttribute]
private void set_WhereParameters(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public DataSourceSelectArguments get_Arguments();
    [CompilerGeneratedAttribute]
private void set_Arguments(DataSourceSelectArguments value);
}
public class System.Web.UI.WebControls.QueryCreatedEventArgs : EventArgs {
    public IQueryable Query { get; public set; }
    public QueryCreatedEventArgs(IQueryable query);
    [CompilerGeneratedAttribute]
public IQueryable get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(IQueryable value);
}
[TargetControlTypeAttribute("System.Web.UI.WebControls.IQueryableDataSource")]
[NonVisualControlAttribute]
[DefaultPropertyAttribute("TargetControlID")]
[ToolboxBitmapAttribute("System.Web.UI.WebControls.QueryExtender", "QueryExtender.bmp")]
[DesignerAttribute("System.Web.UI.Design.QueryExtenderDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]
[ParseChildrenAttribute("True", "Expressions")]
[PersistChildrenAttribute("False")]
public class System.Web.UI.WebControls.QueryExtender : Control {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IQueryableDataSource DataSource { get; }
    [CategoryAttribute("Behavior")]
[ResourceDescriptionAttribute("QueryExtender_Expressions")]
[PersistenceModeAttribute("2")]
public DataSourceExpressionCollection Expressions { get; }
    [CategoryAttribute("Behavior")]
[DefaultValueAttribute("")]
[IDReferencePropertyAttribute]
[ResourceDescriptionAttribute("ExtenderControl_TargetControlID")]
public string TargetControlID { get; public set; }
    internal QueryExtender(IQueryableDataSource dataSource);
    public virtual IQueryableDataSource get_DataSource();
    public DataSourceExpressionCollection get_Expressions();
    public virtual string get_TargetControlID();
    public virtual void set_TargetControlID(string value);
    protected internal virtual void OnInit(EventArgs e);
    protected virtual object SaveViewState();
    protected virtual void LoadViewState(object savedState);
    protected virtual void TrackViewState();
}
public class System.Web.UI.WebControls.TemplatePagerField : DataPagerField {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[ResourceDescriptionAttribute("TemplatePagerField_PagerTemplate")]
[PersistenceModeAttribute("1")]
[TemplateContainerAttribute("System.Web.UI.WebControls.DataPagerFieldItem", "1")]
public ITemplate PagerTemplate { get; public set; }
    private static TemplatePagerField();
    public virtual ITemplate get_PagerTemplate();
    public virtual void set_PagerTemplate(ITemplate value);
    public void add_PagerCommand(EventHandler`1<DataPagerCommandEventArgs> value);
    public void remove_PagerCommand(EventHandler`1<DataPagerCommandEventArgs> value);
    protected virtual void CopyProperties(DataPagerField newField);
    protected virtual DataPagerField CreateField();
    public virtual void HandleEvent(CommandEventArgs e);
    public virtual void CreateDataPagers(DataPagerFieldItem container, int startRowIndex, int maximumRows, int totalRowCount, int fieldIndex);
    protected virtual void OnPagerCommand(DataPagerCommandEventArgs e);
}
internal static class System.Web.UI.WebResourceUtil : object {
    private static WebResourceUtil();
    public static bool AssemblyContainsWebResource(Assembly assembly, string resourceName);
    public static void VerifyAssemblyContainsReleaseWebResource(Assembly assembly, string releaseResourceName, Assembly currentAjaxAssembly);
    public static void VerifyAssemblyContainsDebugWebResource(Assembly assembly, string debugResourceName);
}
internal static class System.Web.Util.HeaderUtility : object {
    public static bool IsEncodingInAcceptList(string acceptEncodingHeader, string expectedEncoding);
}
internal static class System.Web.Util.HexParser : object {
    public static Byte[] Parse(string token);
    public static string ToString(Byte[] tokenBytes);
}
internal class System.Web.Util.ListEqualityComparer : object {
    internal static ListEqualityComparer Instance;
    private static ListEqualityComparer();
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object x, object y);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
}
[DefaultMemberAttribute("Item")]
internal class System.Web.Util.OrderedDictionary`2 : object {
    public int Count { get; }
    public ICollection`1<TKey> Keys { get; }
    public TValue Item { get; public set; }
    public ICollection`1<TValue> Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    public OrderedDictionary`2(int capacity);
    public sealed virtual int get_Count();
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual void Clear();
    public sealed virtual bool ContainsKey(TKey key);
    public bool ContainsValue(TValue value);
    [IteratorStateMachineAttribute("System.Web.Util.OrderedDictionary`2/<GetEnumerator>d__18")]
public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair`2<TKey, TValue> item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
