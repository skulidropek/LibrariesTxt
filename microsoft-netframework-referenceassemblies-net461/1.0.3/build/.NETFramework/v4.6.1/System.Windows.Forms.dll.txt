public class System.Resources.ResXDataNode : object {
    public string Comment { get; public set; }
    public string Name { get; public set; }
    public ResXFileRef FileRef { get; }
    public ResXDataNode(string name, object value);
    public ResXDataNode(string name, object value, Func`2<Type, string> typeNameConverter);
    public ResXDataNode(string name, ResXFileRef fileRef);
    public ResXDataNode(string name, ResXFileRef fileRef, Func`2<Type, string> typeNameConverter);
    private static ResXDataNode();
    public string get_Comment();
    public void set_Comment(string value);
    public string get_Name();
    public void set_Name(string value);
    public ResXFileRef get_FileRef();
    public Point GetNodePosition();
    public string GetValueTypeName(ITypeResolutionService typeResolver);
    public string GetValueTypeName(AssemblyName[] names);
    public object GetValue(ITypeResolutionService typeResolver);
    public object GetValue(AssemblyName[] names);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
}
[TypeConverterAttribute("System.Resources.ResXFileRef/Converter")]
public class System.Resources.ResXFileRef : object {
    public string FileName { get; }
    public string TypeName { get; }
    public Encoding TextFileEncoding { get; }
    public ResXFileRef(string fileName, string typeName);
    public ResXFileRef(string fileName, string typeName, Encoding textFileEncoding);
    public string get_FileName();
    public string get_TypeName();
    public Encoding get_TextFileEncoding();
    public virtual string ToString();
}
public class System.Resources.ResXResourceReader : object {
    public string BasePath { get; public set; }
    public bool UseResXDataNodes { get; public set; }
    public ResXResourceReader(string fileName);
    public ResXResourceReader(string fileName, ITypeResolutionService typeResolver);
    public ResXResourceReader(TextReader reader);
    public ResXResourceReader(TextReader reader, ITypeResolutionService typeResolver);
    public ResXResourceReader(Stream stream);
    public ResXResourceReader(Stream stream, ITypeResolutionService typeResolver);
    public ResXResourceReader(Stream stream, AssemblyName[] assemblyNames);
    public ResXResourceReader(TextReader reader, AssemblyName[] assemblyNames);
    public ResXResourceReader(string fileName, AssemblyName[] assemblyNames);
    protected virtual override void Finalize();
    public string get_BasePath();
    public void set_BasePath(string value);
    public bool get_UseResXDataNodes();
    public void set_UseResXDataNodes(bool value);
    public sealed virtual void Close();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    public static ResXResourceReader FromFileContents(string fileContents);
    public static ResXResourceReader FromFileContents(string fileContents, ITypeResolutionService typeResolver);
    public static ResXResourceReader FromFileContents(string fileContents, AssemblyName[] assemblyNames);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public IDictionaryEnumerator GetMetadataEnumerator();
}
public class System.Resources.ResXResourceSet : ResourceSet {
    public ResXResourceSet(string fileName);
    public ResXResourceSet(Stream stream);
    public virtual Type GetDefaultReader();
    public virtual Type GetDefaultWriter();
}
public class System.Resources.ResXResourceWriter : object {
    public static string BinSerializedObjectMimeType;
    public static string SoapSerializedObjectMimeType;
    public static string DefaultSerializedObjectMimeType;
    public static string ByteArraySerializedObjectMimeType;
    public static string ResMimeType;
    public static string Version;
    public static string ResourceSchema;
    public string BasePath { get; public set; }
    public ResXResourceWriter(string fileName);
    public ResXResourceWriter(string fileName, Func`2<Type, string> typeNameConverter);
    public ResXResourceWriter(Stream stream);
    public ResXResourceWriter(Stream stream, Func`2<Type, string> typeNameConverter);
    public ResXResourceWriter(TextWriter textWriter);
    public ResXResourceWriter(TextWriter textWriter, Func`2<Type, string> typeNameConverter);
    private static ResXResourceWriter();
    public string get_BasePath();
    public void set_BasePath(string value);
    protected virtual override void Finalize();
    public virtual void AddAlias(string aliasName, AssemblyName assemblyName);
    public void AddMetadata(string name, Byte[] value);
    public void AddMetadata(string name, string value);
    public void AddMetadata(string name, object value);
    public sealed virtual void AddResource(string name, Byte[] value);
    public sealed virtual void AddResource(string name, object value);
    public sealed virtual void AddResource(string name, string value);
    public void AddResource(ResXDataNode node);
    public sealed virtual void Close();
    public virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Generate();
}
public enum System.Windows.Forms.AccessibleEvents : Enum {
    public int value__;
    public static AccessibleEvents SystemSound;
    public static AccessibleEvents SystemAlert;
    public static AccessibleEvents SystemForeground;
    public static AccessibleEvents SystemMenuStart;
    public static AccessibleEvents SystemMenuEnd;
    public static AccessibleEvents SystemMenuPopupStart;
    public static AccessibleEvents SystemMenuPopupEnd;
    public static AccessibleEvents SystemCaptureStart;
    public static AccessibleEvents SystemCaptureEnd;
    public static AccessibleEvents SystemMoveSizeStart;
    public static AccessibleEvents SystemMoveSizeEnd;
    public static AccessibleEvents SystemContextHelpStart;
    public static AccessibleEvents SystemContextHelpEnd;
    public static AccessibleEvents SystemDragDropStart;
    public static AccessibleEvents SystemDragDropEnd;
    public static AccessibleEvents SystemDialogStart;
    public static AccessibleEvents SystemDialogEnd;
    public static AccessibleEvents SystemScrollingStart;
    public static AccessibleEvents SystemScrollingEnd;
    public static AccessibleEvents SystemSwitchStart;
    public static AccessibleEvents SystemSwitchEnd;
    public static AccessibleEvents SystemMinimizeStart;
    public static AccessibleEvents SystemMinimizeEnd;
    public static AccessibleEvents Create;
    public static AccessibleEvents Destroy;
    public static AccessibleEvents Show;
    public static AccessibleEvents Hide;
    public static AccessibleEvents Reorder;
    public static AccessibleEvents Focus;
    public static AccessibleEvents Selection;
    public static AccessibleEvents SelectionAdd;
    public static AccessibleEvents SelectionRemove;
    public static AccessibleEvents SelectionWithin;
    public static AccessibleEvents StateChange;
    public static AccessibleEvents LocationChange;
    public static AccessibleEvents NameChange;
    public static AccessibleEvents DescriptionChange;
    public static AccessibleEvents ValueChange;
    public static AccessibleEvents ParentChange;
    public static AccessibleEvents HelpChange;
    public static AccessibleEvents DefaultActionChange;
    public static AccessibleEvents AcceleratorChange;
}
public enum System.Windows.Forms.AccessibleNavigation : Enum {
    public int value__;
    public static AccessibleNavigation Down;
    public static AccessibleNavigation FirstChild;
    public static AccessibleNavigation LastChild;
    public static AccessibleNavigation Left;
    public static AccessibleNavigation Next;
    public static AccessibleNavigation Previous;
    public static AccessibleNavigation Right;
    public static AccessibleNavigation Up;
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.AccessibleObject : StandardOleMarshalObject {
    public Rectangle Bounds { get; }
    public string DefaultAction { get; }
    public string Description { get; }
    public string Help { get; }
    public string KeyboardShortcut { get; }
    public string Name { get; public set; }
    public AccessibleObject Parent { get; }
    public AccessibleRole Role { get; }
    public AccessibleStates State { get; }
    public string Value { get; public set; }
    private int Accessibility.IAccessible.accChildCount { get; }
    private object Accessibility.IAccessible.accFocus { get; }
    private object Accessibility.IAccessible.accParent { get; }
    private object Accessibility.IAccessible.accSelection { get; }
    private Type System.Reflection.IReflect.UnderlyingSystemType { get; }
    public virtual Rectangle get_Bounds();
    public virtual string get_DefaultAction();
    public virtual string get_Description();
    public virtual string get_Help();
    public virtual string get_KeyboardShortcut();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public virtual AccessibleObject get_Parent();
    public virtual AccessibleRole get_Role();
    public virtual AccessibleStates get_State();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual AccessibleObject GetChild(int index);
    public virtual int GetChildCount();
    public virtual AccessibleObject GetFocused();
    public virtual int GetHelpTopic(String& fileName);
    public virtual AccessibleObject GetSelected();
    public virtual AccessibleObject HitTest(int x, int y);
    private sealed virtual override void Accessibility.IAccessible.accDoDefaultAction(object childID);
    private sealed virtual override object Accessibility.IAccessible.accHitTest(int xLeft, int yTop);
    private sealed virtual override void Accessibility.IAccessible.accLocation(Int32& pxLeft, Int32& pyTop, Int32& pcxWidth, Int32& pcyHeight, object childID);
    private sealed virtual override object Accessibility.IAccessible.accNavigate(int navDir, object childID);
    private sealed virtual override void Accessibility.IAccessible.accSelect(int flagsSelect, object childID);
    public virtual void DoDefaultAction();
    private sealed virtual override object Accessibility.IAccessible.get_accChild(object childID);
    private sealed virtual override int Accessibility.IAccessible.get_accChildCount();
    private sealed virtual override string Accessibility.IAccessible.get_accDefaultAction(object childID);
    private sealed virtual override string Accessibility.IAccessible.get_accDescription(object childID);
    private sealed virtual override object Accessibility.IAccessible.get_accFocus();
    private sealed virtual override string Accessibility.IAccessible.get_accHelp(object childID);
    private sealed virtual override int Accessibility.IAccessible.get_accHelpTopic(String& pszHelpFile, object childID);
    private sealed virtual override string Accessibility.IAccessible.get_accKeyboardShortcut(object childID);
    private sealed virtual override string Accessibility.IAccessible.get_accName(object childID);
    private sealed virtual override object Accessibility.IAccessible.get_accParent();
    private sealed virtual override object Accessibility.IAccessible.get_accRole(object childID);
    private sealed virtual override object Accessibility.IAccessible.get_accSelection();
    private sealed virtual override object Accessibility.IAccessible.get_accState(object childID);
    private sealed virtual override string Accessibility.IAccessible.get_accValue(object childID);
    private sealed virtual override void Accessibility.IAccessible.set_accName(object childID, string newName);
    private sealed virtual override void Accessibility.IAccessible.set_accValue(object childID, string newValue);
    public virtual AccessibleObject Navigate(AccessibleNavigation navdir);
    public virtual void Select(AccessibleSelection flags);
    protected void UseStdAccessibleObjects(IntPtr handle);
    protected void UseStdAccessibleObjects(IntPtr handle, int objid);
    private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr, Binder binder, Type[] types, ParameterModifier[] modifiers);
    private sealed virtual override MethodInfo System.Reflection.IReflect.GetMethod(string name, BindingFlags bindingAttr);
    private sealed virtual override MethodInfo[] System.Reflection.IReflect.GetMethods(BindingFlags bindingAttr);
    private sealed virtual override FieldInfo System.Reflection.IReflect.GetField(string name, BindingFlags bindingAttr);
    private sealed virtual override FieldInfo[] System.Reflection.IReflect.GetFields(BindingFlags bindingAttr);
    private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr);
    private sealed virtual override PropertyInfo System.Reflection.IReflect.GetProperty(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers);
    private sealed virtual override PropertyInfo[] System.Reflection.IReflect.GetProperties(BindingFlags bindingAttr);
    private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMember(string name, BindingFlags bindingAttr);
    private sealed virtual override MemberInfo[] System.Reflection.IReflect.GetMembers(BindingFlags bindingAttr);
    private sealed virtual override object System.Reflection.IReflect.InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, Object[] args, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParameters);
    private sealed virtual override Type System.Reflection.IReflect.get_UnderlyingSystemType();
}
public enum System.Windows.Forms.AccessibleRole : Enum {
    public int value__;
    public static AccessibleRole Default;
    public static AccessibleRole None;
    public static AccessibleRole TitleBar;
    public static AccessibleRole MenuBar;
    public static AccessibleRole ScrollBar;
    public static AccessibleRole Grip;
    public static AccessibleRole Sound;
    public static AccessibleRole Cursor;
    public static AccessibleRole Caret;
    public static AccessibleRole Alert;
    public static AccessibleRole Window;
    public static AccessibleRole Client;
    public static AccessibleRole MenuPopup;
    public static AccessibleRole MenuItem;
    public static AccessibleRole ToolTip;
    public static AccessibleRole Application;
    public static AccessibleRole Document;
    public static AccessibleRole Pane;
    public static AccessibleRole Chart;
    public static AccessibleRole Dialog;
    public static AccessibleRole Border;
    public static AccessibleRole Grouping;
    public static AccessibleRole Separator;
    public static AccessibleRole ToolBar;
    public static AccessibleRole StatusBar;
    public static AccessibleRole Table;
    public static AccessibleRole ColumnHeader;
    public static AccessibleRole RowHeader;
    public static AccessibleRole Column;
    public static AccessibleRole Row;
    public static AccessibleRole Cell;
    public static AccessibleRole Link;
    public static AccessibleRole HelpBalloon;
    public static AccessibleRole Character;
    public static AccessibleRole List;
    public static AccessibleRole ListItem;
    public static AccessibleRole Outline;
    public static AccessibleRole OutlineItem;
    public static AccessibleRole PageTab;
    public static AccessibleRole PropertyPage;
    public static AccessibleRole Indicator;
    public static AccessibleRole Graphic;
    public static AccessibleRole StaticText;
    public static AccessibleRole Text;
    public static AccessibleRole PushButton;
    public static AccessibleRole CheckButton;
    public static AccessibleRole RadioButton;
    public static AccessibleRole ComboBox;
    public static AccessibleRole DropList;
    public static AccessibleRole ProgressBar;
    public static AccessibleRole Dial;
    public static AccessibleRole HotkeyField;
    public static AccessibleRole Slider;
    public static AccessibleRole SpinButton;
    public static AccessibleRole Diagram;
    public static AccessibleRole Animation;
    public static AccessibleRole Equation;
    public static AccessibleRole ButtonDropDown;
    public static AccessibleRole ButtonMenu;
    public static AccessibleRole ButtonDropDownGrid;
    public static AccessibleRole WhiteSpace;
    public static AccessibleRole PageTabList;
    public static AccessibleRole Clock;
    public static AccessibleRole SplitButton;
    public static AccessibleRole IpAddress;
    public static AccessibleRole OutlineButton;
}
[FlagsAttribute]
public enum System.Windows.Forms.AccessibleSelection : Enum {
    public int value__;
    public static AccessibleSelection None;
    public static AccessibleSelection TakeFocus;
    public static AccessibleSelection TakeSelection;
    public static AccessibleSelection ExtendSelection;
    public static AccessibleSelection AddSelection;
    public static AccessibleSelection RemoveSelection;
}
[FlagsAttribute]
public enum System.Windows.Forms.AccessibleStates : Enum {
    public int value__;
    public static AccessibleStates None;
    public static AccessibleStates Unavailable;
    public static AccessibleStates Selected;
    public static AccessibleStates Focused;
    public static AccessibleStates Pressed;
    public static AccessibleStates Checked;
    public static AccessibleStates Mixed;
    public static AccessibleStates Indeterminate;
    public static AccessibleStates ReadOnly;
    public static AccessibleStates HotTracked;
    public static AccessibleStates Default;
    public static AccessibleStates Expanded;
    public static AccessibleStates Collapsed;
    public static AccessibleStates Busy;
    public static AccessibleStates Floating;
    public static AccessibleStates Marqueed;
    public static AccessibleStates Animated;
    public static AccessibleStates Invisible;
    public static AccessibleStates Offscreen;
    public static AccessibleStates Sizeable;
    public static AccessibleStates Moveable;
    public static AccessibleStates SelfVoicing;
    public static AccessibleStates Focusable;
    public static AccessibleStates Selectable;
    public static AccessibleStates Linked;
    public static AccessibleStates Traversed;
    public static AccessibleStates MultiSelectable;
    public static AccessibleStates ExtSelectable;
    public static AccessibleStates AlertLow;
    public static AccessibleStates AlertMedium;
    public static AccessibleStates AlertHigh;
    public static AccessibleStates Protected;
    public static AccessibleStates HasPopup;
    [ObsoleteAttribute("This enumeration value has been deprecated. There is no replacement. http://go.microsoft.com/fwlink/?linkid=14202")]
public static AccessibleStates Valid;
}
internal class System.Windows.Forms.AlphaSortedEnumConverter : EnumConverter {
    protected IComparer Comparer { get; }
    public AlphaSortedEnumConverter(Type type);
    protected virtual IComparer get_Comparer();
}
public class System.Windows.Forms.AmbientProperties : object {
    public Color BackColor { get; public set; }
    public Cursor Cursor { get; public set; }
    public Font Font { get; public set; }
    public Color ForeColor { get; public set; }
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Cursor get_Cursor();
    public void set_Cursor(Cursor value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
}
[EditorAttribute("System.Windows.Forms.Design.AnchorEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[FlagsAttribute]
public enum System.Windows.Forms.AnchorStyles : Enum {
    public int value__;
    public static AnchorStyles Top;
    public static AnchorStyles Bottom;
    public static AnchorStyles Left;
    public static AnchorStyles Right;
    public static AnchorStyles None;
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.Appearance : Enum {
    public int value__;
    public static Appearance Normal;
    public static Appearance Button;
}
internal class System.Windows.Forms.ApplicableToButtonAttribute : Attribute {
}
public class System.Windows.Forms.Application : object {
    public static bool AllowQuit { get; }
    public static RegistryKey CommonAppDataRegistry { get; }
    public static string CommonAppDataPath { get; }
    public static string CompanyName { get; }
    public static CultureInfo CurrentCulture { get; public set; }
    public static InputLanguage CurrentInputLanguage { get; public set; }
    public static string ExecutablePath { get; }
    public static string LocalUserAppDataPath { get; }
    public static bool MessageLoop { get; }
    public static FormCollection OpenForms { get; }
    public static string ProductName { get; }
    public static string ProductVersion { get; }
    public static bool RenderWithVisualStyles { get; }
    public static string SafeTopLevelCaptionFormat { get; public set; }
    public static string StartupPath { get; }
    public static bool UseWaitCursor { get; public set; }
    public static string UserAppDataPath { get; }
    public static RegistryKey UserAppDataRegistry { get; }
    public static VisualStyleState VisualStyleState { get; public set; }
    private static Application();
    public static bool get_AllowQuit();
    public static RegistryKey get_CommonAppDataRegistry();
    public static string get_CommonAppDataPath();
    public static string get_CompanyName();
    public static CultureInfo get_CurrentCulture();
    public static void set_CurrentCulture(CultureInfo value);
    public static InputLanguage get_CurrentInputLanguage();
    public static void set_CurrentInputLanguage(InputLanguage value);
    public static string get_ExecutablePath();
    public static string get_LocalUserAppDataPath();
    public static bool get_MessageLoop();
    public static FormCollection get_OpenForms();
    public static string get_ProductName();
    public static string get_ProductVersion();
    [EditorBrowsableAttribute("2")]
public static void RegisterMessageLoop(MessageLoopCallback callback);
    public static bool get_RenderWithVisualStyles();
    public static string get_SafeTopLevelCaptionFormat();
    public static void set_SafeTopLevelCaptionFormat(string value);
    public static string get_StartupPath();
    [EditorBrowsableAttribute("2")]
public static void UnregisterMessageLoop();
    public static bool get_UseWaitCursor();
    public static void set_UseWaitCursor(bool value);
    public static string get_UserAppDataPath();
    public static RegistryKey get_UserAppDataRegistry();
    public static VisualStyleState get_VisualStyleState();
    public static void set_VisualStyleState(VisualStyleState value);
    public static void add_ApplicationExit(EventHandler value);
    public static void remove_ApplicationExit(EventHandler value);
    public static void AddMessageFilter(IMessageFilter value);
    [EditorBrowsableAttribute("2")]
public static bool FilterMessage(Message& message);
    public static void add_Idle(EventHandler value);
    public static void remove_Idle(EventHandler value);
    public static void add_EnterThreadModal(EventHandler value);
    public static void remove_EnterThreadModal(EventHandler value);
    public static void add_LeaveThreadModal(EventHandler value);
    public static void remove_LeaveThreadModal(EventHandler value);
    public static void add_ThreadException(ThreadExceptionEventHandler value);
    public static void remove_ThreadException(ThreadExceptionEventHandler value);
    public static void add_ThreadExit(EventHandler value);
    public static void remove_ThreadExit(EventHandler value);
    public static void DoEvents();
    public static void EnableVisualStyles();
    public static void Exit();
    [EditorBrowsableAttribute("2")]
public static void Exit(CancelEventArgs e);
    public static void ExitThread();
    public static ApartmentState OleRequired();
    public static void OnThreadException(Exception t);
    [EditorBrowsableAttribute("2")]
public static void RaiseIdle(EventArgs e);
    public static void RemoveMessageFilter(IMessageFilter value);
    public static void Restart();
    public static void Run();
    public static void Run(Form mainForm);
    public static void Run(ApplicationContext context);
    public static void SetCompatibleTextRenderingDefault(bool defaultValue);
    public static bool SetSuspendState(PowerState state, bool force, bool disableWakeEvent);
    public static void SetUnhandledExceptionMode(UnhandledExceptionMode mode);
    public static void SetUnhandledExceptionMode(UnhandledExceptionMode mode, bool threadScope);
}
public class System.Windows.Forms.ApplicationContext : object {
    public Form MainForm { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    public ApplicationContext(Form mainForm);
    protected virtual override void Finalize();
    public Form get_MainForm();
    public void set_MainForm(Form value);
    public object get_Tag();
    public void set_Tag(object value);
    [CompilerGeneratedAttribute]
public void add_ThreadExit(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ThreadExit(EventHandler value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public void ExitThread();
    protected virtual void ExitThreadCore();
    protected virtual void OnMainFormClosed(object sender, EventArgs e);
}
[ComVisibleAttribute("True")]
[FlagsAttribute]
public enum System.Windows.Forms.ArrangeDirection : Enum {
    public int value__;
    public static ArrangeDirection Down;
    public static ArrangeDirection Left;
    public static ArrangeDirection Right;
    public static ArrangeDirection Up;
}
[FlagsAttribute]
public enum System.Windows.Forms.ArrangeStartingPosition : Enum {
    public int value__;
    public static ArrangeStartingPosition BottomLeft;
    public static ArrangeStartingPosition BottomRight;
    public static ArrangeStartingPosition Hide;
    public static ArrangeStartingPosition TopLeft;
    public static ArrangeStartingPosition TopRight;
}
public enum System.Windows.Forms.ArrowDirection : Enum {
    public int value__;
    public static ArrowDirection Up;
    public static ArrowDirection Down;
    public static ArrowDirection Left;
    public static ArrowDirection Right;
}
public enum System.Windows.Forms.AutoCompleteMode : Enum {
    public int value__;
    public static AutoCompleteMode None;
    public static AutoCompleteMode Suggest;
    public static AutoCompleteMode Append;
    public static AutoCompleteMode SuggestAppend;
}
public enum System.Windows.Forms.AutoCompleteSource : Enum {
    public int value__;
    public static AutoCompleteSource FileSystem;
    public static AutoCompleteSource HistoryList;
    public static AutoCompleteSource RecentlyUsedList;
    public static AutoCompleteSource AllUrl;
    public static AutoCompleteSource AllSystemSources;
    public static AutoCompleteSource FileSystemDirectories;
    public static AutoCompleteSource CustomSource;
    public static AutoCompleteSource None;
    public static AutoCompleteSource ListItems;
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.AutoCompleteStringCollection : object {
    public string Item { get; public set; }
    public int Count { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    public string get_Item(int index);
    public void set_Item(int index, string value);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    protected void OnCollectionChanged(CollectionChangeEventArgs e);
    public int Add(string value);
    public void AddRange(String[] value);
    public sealed virtual void Clear();
    public bool Contains(string value);
    public void CopyTo(String[] array, int index);
    public int IndexOf(string value);
    public void Insert(int index, string value);
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public void Remove(string value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public enum System.Windows.Forms.AutoScaleMode : Enum {
    public int value__;
    public static AutoScaleMode None;
    public static AutoScaleMode Font;
    public static AutoScaleMode Dpi;
    public static AutoScaleMode Inherit;
}
public enum System.Windows.Forms.AutoSizeMode : Enum {
    public int value__;
    public static AutoSizeMode GrowAndShrink;
    public static AutoSizeMode GrowOnly;
}
public enum System.Windows.Forms.AutoValidate : Enum {
    public int value__;
    public static AutoValidate Disable;
    public static AutoValidate EnablePreventFocusChange;
    public static AutoValidate EnableAllowFocusChange;
    public static AutoValidate Inherit;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultEventAttribute("Enter")]
[DesignerAttribute("System.Windows.Forms.Design.AxHostDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Windows.Forms.AxHost : Control {
    protected CreateParams CreateParams { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImeMode ImeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Cursor Cursor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContextMenu ContextMenu { get; public set; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[LocalizableAttribute("True")]
public bool RightToLeft { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public bool EditMode { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasAboutBox { get; }
    unknown ISite Site {public set; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public State OcxState { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public ContainerControl ContainingControl { get; public set; }
    protected AxHost(string clsid);
    protected AxHost(string clsid, int flags);
    private static AxHost();
    protected virtual CreateParams get_CreateParams();
    protected virtual void AttachInterfaces();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_MouseClick(EventHandler value);
    public void remove_MouseClick(EventHandler value);
    public void add_MouseDoubleClick(EventHandler value);
    public void remove_MouseDoubleClick(EventHandler value);
    public virtual Cursor get_Cursor();
    public virtual void set_Cursor(Cursor value);
    public virtual ContextMenu get_ContextMenu();
    public virtual void set_ContextMenu(ContextMenu value);
    protected virtual Size get_DefaultSize();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual bool get_RightToLeft();
    public virtual void set_RightToLeft(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    [EditorBrowsableAttribute("2")]
protected bool PropsValid();
    [EditorBrowsableAttribute("2")]
public sealed virtual void BeginInit();
    [EditorBrowsableAttribute("2")]
public sealed virtual void EndInit();
    public bool get_EditMode();
    public bool get_HasAboutBox();
    public void ShowAboutBox();
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public void add_BindingContextChanged(EventHandler value);
    public void remove_BindingContextChanged(EventHandler value);
    public void add_ContextMenuChanged(EventHandler value);
    public void remove_ContextMenuChanged(EventHandler value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_DragDrop(DragEventHandler value);
    public void remove_DragDrop(DragEventHandler value);
    public void add_DragEnter(DragEventHandler value);
    public void remove_DragEnter(DragEventHandler value);
    public void add_DragOver(DragEventHandler value);
    public void remove_DragOver(DragEventHandler value);
    public void add_DragLeave(EventHandler value);
    public void remove_DragLeave(EventHandler value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public void add_HelpRequested(HelpEventHandler value);
    public void remove_HelpRequested(HelpEventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_Layout(LayoutEventHandler value);
    public void remove_Layout(LayoutEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_MouseHover(EventHandler value);
    public void remove_MouseHover(EventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseWheel(MouseEventHandler value);
    public void remove_MouseWheel(MouseEventHandler value);
    public void add_ChangeUICues(UICuesEventHandler value);
    public void remove_ChangeUICues(UICuesEventHandler value);
    public void add_StyleChanged(EventHandler value);
    public void remove_StyleChanged(EventHandler value);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    public virtual void set_Site(ISite value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLostFocus(EventArgs e);
    [EditorBrowsableAttribute("1")]
public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds);
    protected virtual void CreateHandle();
    [EditorBrowsableAttribute("2")]
protected virtual Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void DestroyHandle();
    protected virtual void OnInPlaceActive();
    protected virtual void SetVisibleCore(bool value);
    protected virtual bool IsInputChar(char charCode);
    protected virtual bool ProcessDialogKey(Keys keyData);
    public virtual bool PreProcessMessage(Message& msg);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected void SetAboutBoxDelegate(AboutBoxDelegate d);
    public State get_OcxState();
    public void set_OcxState(State value);
    public ContainerControl get_ContainingControl();
    public void set_ContainingControl(ContainerControl value);
    public void DoVerb(int verb);
    protected virtual object CreateInstanceCore(Guid clsid);
    [EditorBrowsableAttribute("2")]
public void InvokeEditMode();
    [EditorBrowsableAttribute("2")]
private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    [EditorBrowsableAttribute("2")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    [EditorBrowsableAttribute("2")]
private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    [EditorBrowsableAttribute("2")]
private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    [EditorBrowsableAttribute("2")]
private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    [EditorBrowsableAttribute("2")]
private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    [EditorBrowsableAttribute("2")]
private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    [EditorBrowsableAttribute("2")]
private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    [EditorBrowsableAttribute("2")]
private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    [EditorBrowsableAttribute("2")]
private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    [EditorBrowsableAttribute("2")]
private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    [EditorBrowsableAttribute("2")]
private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    [EditorBrowsableAttribute("2")]
public object GetOcx();
    [EditorBrowsableAttribute("2")]
protected virtual void CreateSink();
    [EditorBrowsableAttribute("2")]
protected virtual void DetachSink();
    public bool HasPropertyPages();
    [EditorBrowsableAttribute("2")]
public void MakeDirty();
    public void ShowPropertyPages();
    public void ShowPropertyPages(Control control);
    protected virtual void WndProc(Message& m);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void Dispose(bool disposing);
    [EditorBrowsableAttribute("2")]
protected static object GetIPictureFromPicture(Image image);
    [EditorBrowsableAttribute("2")]
protected static object GetIPictureFromCursor(Cursor cursor);
    [EditorBrowsableAttribute("2")]
protected static object GetIPictureDispFromPicture(Image image);
    [EditorBrowsableAttribute("2")]
protected static Image GetPictureFromIPicture(object picture);
    [EditorBrowsableAttribute("2")]
protected static Image GetPictureFromIPictureDisp(object picture);
    [CLSCompliantAttribute("False")]
[EditorBrowsableAttribute("2")]
protected static Color GetColorFromOleColor(UInt32 color);
    [CLSCompliantAttribute("False")]
[EditorBrowsableAttribute("2")]
protected static UInt32 GetOleColorFromColor(Color color);
    [EditorBrowsableAttribute("2")]
protected static object GetIFontFromFont(Font font);
    [EditorBrowsableAttribute("2")]
protected static Font GetFontFromIFont(object font);
    [EditorBrowsableAttribute("2")]
protected static object GetIFontDispFromFont(Font font);
    [EditorBrowsableAttribute("2")]
protected static Font GetFontFromIFontDisp(object font);
    [EditorBrowsableAttribute("2")]
protected static double GetOADateFromTime(DateTime time);
    [EditorBrowsableAttribute("2")]
protected static DateTime GetTimeFromOADate(double date);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseMove(object o1, object o2, object o3, object o4);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseMove(short button, short shift, float x, float y);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseMove(short button, short shift, int x, int y);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseUp(object o1, object o2, object o3, object o4);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseUp(short button, short shift, float x, float y);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseUp(short button, short shift, int x, int y);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseDown(object o1, object o2, object o3, object o4);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseDown(short button, short shift, float x, float y);
    [EditorBrowsableAttribute("2")]
protected void RaiseOnMouseDown(short button, short shift, int x, int y);
}
public class System.Windows.Forms.BaseCollection : MarshalByRefObject {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public int Count { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public object SyncRoot { get; }
    protected ArrayList List { get; }
    public virtual int get_Count();
    public sealed virtual void CopyTo(Array ar, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    protected virtual ArrayList get_List();
}
[FlagsAttribute]
public enum System.Windows.Forms.BatteryChargeStatus : Enum {
    public int value__;
    public static BatteryChargeStatus High;
    public static BatteryChargeStatus Low;
    public static BatteryChargeStatus Critical;
    public static BatteryChargeStatus Charging;
    public static BatteryChargeStatus NoSystemBattery;
    public static BatteryChargeStatus Unknown;
}
[TypeConverterAttribute("System.Windows.Forms.ListBindingConverter")]
public class System.Windows.Forms.Binding : object {
    public object DataSource { get; }
    public BindingMemberInfo BindingMemberInfo { get; }
    [DefaultValueAttribute("")]
public IBindableComponent BindableComponent { get; }
    [DefaultValueAttribute("")]
public Control Control { get; }
    public bool IsBinding { get; }
    public BindingManagerBase BindingManagerBase { get; }
    [DefaultValueAttribute("")]
public string PropertyName { get; }
    [DefaultValueAttribute("False")]
public bool FormattingEnabled { get; public set; }
    [DefaultValueAttribute("")]
public IFormatProvider FormatInfo { get; public set; }
    public string FormatString { get; public set; }
    public object NullValue { get; public set; }
    public object DataSourceNullValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ControlUpdateMode ControlUpdateMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataSourceUpdateMode DataSourceUpdateMode { get; public set; }
    public Binding(string propertyName, object dataSource, string dataMember);
    public Binding(string propertyName, object dataSource, string dataMember, bool formattingEnabled);
    public Binding(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode);
    public Binding(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue);
    public Binding(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);
    public Binding(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);
    public object get_DataSource();
    public BindingMemberInfo get_BindingMemberInfo();
    public IBindableComponent get_BindableComponent();
    public Control get_Control();
    public bool get_IsBinding();
    public BindingManagerBase get_BindingManagerBase();
    public string get_PropertyName();
    public void add_BindingComplete(BindingCompleteEventHandler value);
    public void remove_BindingComplete(BindingCompleteEventHandler value);
    public void add_Parse(ConvertEventHandler value);
    public void remove_Parse(ConvertEventHandler value);
    public void add_Format(ConvertEventHandler value);
    public void remove_Format(ConvertEventHandler value);
    public bool get_FormattingEnabled();
    public void set_FormattingEnabled(bool value);
    public IFormatProvider get_FormatInfo();
    public void set_FormatInfo(IFormatProvider value);
    public string get_FormatString();
    public void set_FormatString(string value);
    public object get_NullValue();
    public void set_NullValue(object value);
    public object get_DataSourceNullValue();
    public void set_DataSourceNullValue(object value);
    public ControlUpdateMode get_ControlUpdateMode();
    public void set_ControlUpdateMode(ControlUpdateMode value);
    public DataSourceUpdateMode get_DataSourceUpdateMode();
    public void set_DataSourceUpdateMode(DataSourceUpdateMode value);
    protected virtual void OnBindingComplete(BindingCompleteEventArgs e);
    protected virtual void OnParse(ConvertEventArgs cevent);
    protected virtual void OnFormat(ConvertEventArgs cevent);
    public void ReadValue();
    public void WriteValue();
}
public enum System.Windows.Forms.BindingCompleteContext : Enum {
    public int value__;
    public static BindingCompleteContext ControlUpdate;
    public static BindingCompleteContext DataSourceUpdate;
}
public class System.Windows.Forms.BindingCompleteEventArgs : CancelEventArgs {
    public Binding Binding { get; }
    public BindingCompleteState BindingCompleteState { get; }
    public BindingCompleteContext BindingCompleteContext { get; }
    public string ErrorText { get; }
    public Exception Exception { get; }
    public BindingCompleteEventArgs(Binding binding, BindingCompleteState state, BindingCompleteContext context, string errorText, Exception exception, bool cancel);
    public BindingCompleteEventArgs(Binding binding, BindingCompleteState state, BindingCompleteContext context, string errorText, Exception exception);
    public BindingCompleteEventArgs(Binding binding, BindingCompleteState state, BindingCompleteContext context, string errorText);
    public BindingCompleteEventArgs(Binding binding, BindingCompleteState state, BindingCompleteContext context);
    public Binding get_Binding();
    public BindingCompleteState get_BindingCompleteState();
    public BindingCompleteContext get_BindingCompleteContext();
    public string get_ErrorText();
    public Exception get_Exception();
}
public class System.Windows.Forms.BindingCompleteEventHandler : MulticastDelegate {
    public BindingCompleteEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BindingCompleteEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BindingCompleteEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.BindingCompleteState : Enum {
    public int value__;
    public static BindingCompleteState Success;
    public static BindingCompleteState DataError;
    public static BindingCompleteState Exception;
}
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
public class System.Windows.Forms.BindingContext : object {
    private int System.Collections.ICollection.Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public BindingManagerBase Item { get; }
    public BindingManagerBase Item { get; }
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array ar, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public bool get_IsReadOnly();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public BindingManagerBase get_Item(object dataSource);
    public BindingManagerBase get_Item(object dataSource, string dataMember);
    protected internal void Add(object dataSource, BindingManagerBase listManager);
    protected virtual void AddCore(object dataSource, BindingManagerBase listManager);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    protected internal void Clear();
    protected virtual void ClearCore();
    public bool Contains(object dataSource);
    public bool Contains(object dataSource, string dataMember);
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    protected internal void Remove(object dataSource);
    protected virtual void RemoveCore(object dataSource);
    public static void UpdateBinding(BindingContext newBindingContext, Binding binding);
}
public abstract class System.Windows.Forms.BindingManagerBase : object {
    protected EventHandler onCurrentChangedHandler;
    protected EventHandler onPositionChangedHandler;
    public BindingsCollection Bindings { get; }
    public object Current { get; }
    public int Position { get; public set; }
    public bool IsBindingSuspended { get; }
    public int Count { get; }
    public BindingsCollection get_Bindings();
    protected internal void OnBindingComplete(BindingCompleteEventArgs args);
    protected internal abstract virtual void OnCurrentChanged(EventArgs e);
    protected internal abstract virtual void OnCurrentItemChanged(EventArgs e);
    protected internal void OnDataError(Exception e);
    public abstract virtual object get_Current();
    public virtual PropertyDescriptorCollection GetItemProperties();
    protected internal virtual PropertyDescriptorCollection GetItemProperties(ArrayList dataSources, ArrayList listAccessors);
    protected virtual PropertyDescriptorCollection GetItemProperties(Type listType, int offset, ArrayList dataSources, ArrayList listAccessors);
    public void add_BindingComplete(BindingCompleteEventHandler value);
    public void remove_BindingComplete(BindingCompleteEventHandler value);
    public void add_CurrentChanged(EventHandler value);
    public void remove_CurrentChanged(EventHandler value);
    public void add_CurrentItemChanged(EventHandler value);
    public void remove_CurrentItemChanged(EventHandler value);
    public void add_DataError(BindingManagerDataErrorEventHandler value);
    public void remove_DataError(BindingManagerDataErrorEventHandler value);
    public abstract virtual void CancelCurrentEdit();
    public abstract virtual void EndCurrentEdit();
    public abstract virtual void AddNew();
    public abstract virtual void RemoveAt(int index);
    public abstract virtual int get_Position();
    public abstract virtual void set_Position(int value);
    public void add_PositionChanged(EventHandler value);
    public void remove_PositionChanged(EventHandler value);
    protected abstract virtual void UpdateIsBinding();
    protected internal abstract virtual string GetListName(ArrayList listAccessors);
    public abstract virtual void SuspendBinding();
    public abstract virtual void ResumeBinding();
    protected void PullData();
    protected void PushData();
    public bool get_IsBindingSuspended();
    public abstract virtual int get_Count();
}
public class System.Windows.Forms.BindingManagerDataErrorEventArgs : EventArgs {
    public Exception Exception { get; }
    public BindingManagerDataErrorEventArgs(Exception exception);
    public Exception get_Exception();
}
public class System.Windows.Forms.BindingManagerDataErrorEventHandler : MulticastDelegate {
    public BindingManagerDataErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, BindingManagerDataErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, BindingManagerDataErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.BindingMemberInfo : ValueType {
    private string dataList;
    private string dataField;
    public string BindingPath { get; }
    public string BindingField { get; }
    public string BindingMember { get; }
    public BindingMemberInfo(string dataMember);
    public string get_BindingPath();
    public string get_BindingField();
    public string get_BindingMember();
    public virtual bool Equals(object otherObject);
    public static bool op_Equality(BindingMemberInfo a, BindingMemberInfo b);
    public static bool op_Inequality(BindingMemberInfo a, BindingMemberInfo b);
    public virtual int GetHashCode();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("BindingSource")]
[DefaultEventAttribute("RefreshItems")]
[DesignerAttribute("System.Windows.Forms.Design.BindingNavigatorDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionBindingNavigator")]
public class System.Windows.Forms.BindingNavigator : ToolStrip {
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("BindingNavigatorBindingSourcePropDescr")]
[TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
public BindingSource BindingSource { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorMoveFirstItemPropDescr")]
public ToolStripItem MoveFirstItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorMovePreviousItemPropDescr")]
public ToolStripItem MovePreviousItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorMoveNextItemPropDescr")]
public ToolStripItem MoveNextItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorMoveLastItemPropDescr")]
public ToolStripItem MoveLastItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorAddNewItemPropDescr")]
public ToolStripItem AddNewItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorDeleteItemPropDescr")]
public ToolStripItem DeleteItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorPositionItemPropDescr")]
public ToolStripItem PositionItem { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatItems")]
[SRDescriptionAttribute("BindingNavigatorCountItemPropDescr")]
public ToolStripItem CountItem { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("BindingNavigatorCountItemFormatPropDescr")]
public string CountItemFormat { get; public set; }
    public BindingNavigator(BindingSource bindingSource);
    [EditorBrowsableAttribute("1")]
public BindingNavigator(IContainer container);
    public BindingNavigator(bool addStandardItems);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    protected virtual void Dispose(bool disposing);
    public virtual void AddStandardItems();
    public BindingSource get_BindingSource();
    public void set_BindingSource(BindingSource value);
    public ToolStripItem get_MoveFirstItem();
    public void set_MoveFirstItem(ToolStripItem value);
    public ToolStripItem get_MovePreviousItem();
    public void set_MovePreviousItem(ToolStripItem value);
    public ToolStripItem get_MoveNextItem();
    public void set_MoveNextItem(ToolStripItem value);
    public ToolStripItem get_MoveLastItem();
    public void set_MoveLastItem(ToolStripItem value);
    public ToolStripItem get_AddNewItem();
    public void set_AddNewItem(ToolStripItem value);
    public ToolStripItem get_DeleteItem();
    public void set_DeleteItem(ToolStripItem value);
    public ToolStripItem get_PositionItem();
    public void set_PositionItem(ToolStripItem value);
    public ToolStripItem get_CountItem();
    public void set_CountItem(ToolStripItem value);
    public string get_CountItemFormat();
    public void set_CountItemFormat(string value);
    public void add_RefreshItems(EventHandler value);
    public void remove_RefreshItems(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void RefreshItemsCore();
    protected virtual void OnRefreshItems();
    public bool Validate();
}
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
public class System.Windows.Forms.BindingsCollection : BaseCollection {
    public int Count { get; }
    protected ArrayList List { get; }
    public Binding Item { get; }
    public virtual int get_Count();
    protected virtual ArrayList get_List();
    public Binding get_Item(int index);
    protected internal void Add(Binding binding);
    protected virtual void AddCore(Binding dataBinding);
    public void add_CollectionChanging(CollectionChangeEventHandler value);
    public void remove_CollectionChanging(CollectionChangeEventHandler value);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    protected internal void Clear();
    protected virtual void ClearCore();
    protected virtual void OnCollectionChanging(CollectionChangeEventArgs e);
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    protected internal void Remove(Binding binding);
    protected internal void RemoveAt(int index);
    protected virtual void RemoveCore(Binding dataBinding);
    protected internal bool ShouldSerializeMyAll();
}
[DefaultMemberAttribute("Item")]
[DefaultPropertyAttribute("DataSource")]
[DefaultEventAttribute("CurrentChanged")]
[ComplexBindingPropertiesAttribute("DataSource", "DataMember")]
[DesignerAttribute("System.Windows.Forms.Design.BindingSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionBindingSource")]
public class System.Windows.Forms.BindingSource : Component {
    [BrowsableAttribute("False")]
public CurrencyManager CurrencyManager { get; }
    [BrowsableAttribute("False")]
public object Current { get; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("BindingSourceDataMemberDescr")]
public string DataMember { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SRDescriptionAttribute("BindingSourceDataSourceDescr")]
public object DataSource { get; public set; }
    [BrowsableAttribute("False")]
public bool IsBindingSuspended { get; }
    [BrowsableAttribute("False")]
public IList List { get; }
    [DefaultValueAttribute("-1")]
[BrowsableAttribute("False")]
public int Position { get; public set; }
    [DefaultValueAttribute("True")]
[BrowsableAttribute("False")]
public bool RaiseListChangedEvents { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("BindingSourceSortDescr")]
public string Sort { get; public set; }
    private bool System.ComponentModel.ISupportInitializeNotification.IsInitialized { get; }
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]
public object SyncRoot { get; }
    [BrowsableAttribute("False")]
public object Item { get; public set; }
    [BrowsableAttribute("False")]
public bool IsFixedSize { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public bool AllowEdit { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("BindingSourceAllowNewDescr")]
public bool AllowNew { get; public set; }
    [BrowsableAttribute("False")]
public bool AllowRemove { get; }
    [BrowsableAttribute("False")]
public bool SupportsChangeNotification { get; }
    [BrowsableAttribute("False")]
public bool SupportsSearching { get; }
    [BrowsableAttribute("False")]
public bool SupportsSorting { get; }
    [BrowsableAttribute("False")]
public bool IsSorted { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public PropertyDescriptor SortProperty { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ListSortDirection SortDirection { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ListSortDescriptionCollection SortDescriptions { get; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("BindingSourceFilterDescr")]
public string Filter { get; public set; }
    [BrowsableAttribute("False")]
public bool SupportsAdvancedSorting { get; }
    [BrowsableAttribute("False")]
public bool SupportsFiltering { get; }
    public BindingSource(object dataSource, string dataMember);
    public BindingSource(IContainer container);
    private static BindingSource();
    public virtual CurrencyManager get_CurrencyManager();
    public virtual CurrencyManager GetRelatedCurrencyManager(string dataMember);
    public object get_Current();
    public string get_DataMember();
    public void set_DataMember(string value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public bool get_IsBindingSuspended();
    public IList get_List();
    public int get_Position();
    public void set_Position(int value);
    public bool get_RaiseListChangedEvents();
    public void set_RaiseListChangedEvents(bool value);
    public string get_Sort();
    public void set_Sort(string value);
    public void add_AddingNew(AddingNewEventHandler value);
    public void remove_AddingNew(AddingNewEventHandler value);
    public void add_BindingComplete(BindingCompleteEventHandler value);
    public void remove_BindingComplete(BindingCompleteEventHandler value);
    public void add_DataError(BindingManagerDataErrorEventHandler value);
    public void remove_DataError(BindingManagerDataErrorEventHandler value);
    public void add_DataSourceChanged(EventHandler value);
    public void remove_DataSourceChanged(EventHandler value);
    public void add_DataMemberChanged(EventHandler value);
    public void remove_DataMemberChanged(EventHandler value);
    public void add_CurrentChanged(EventHandler value);
    public void remove_CurrentChanged(EventHandler value);
    public void add_CurrentItemChanged(EventHandler value);
    public void remove_CurrentItemChanged(EventHandler value);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public void add_PositionChanged(EventHandler value);
    public void remove_PositionChanged(EventHandler value);
    public void CancelEdit();
    protected virtual void Dispose(bool disposing);
    public void EndEdit();
    public int Find(string propertyName, object key);
    public void MoveFirst();
    public void MoveLast();
    public void MoveNext();
    public void MovePrevious();
    protected virtual void OnAddingNew(AddingNewEventArgs e);
    protected virtual void OnBindingComplete(BindingCompleteEventArgs e);
    protected virtual void OnCurrentChanged(EventArgs e);
    protected virtual void OnCurrentItemChanged(EventArgs e);
    protected virtual void OnDataError(BindingManagerDataErrorEventArgs e);
    protected virtual void OnDataMemberChanged(EventArgs e);
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected virtual void OnPositionChanged(EventArgs e);
    public void RemoveCurrent();
    [EditorBrowsableAttribute("2")]
public virtual void ResetAllowNew();
    public void ResetBindings(bool metadataChanged);
    public void ResetCurrentItem();
    public void ResetItem(int itemIndex);
    public void ResumeBinding();
    public void SuspendBinding();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    private sealed virtual override bool System.ComponentModel.ISupportInitializeNotification.get_IsInitialized();
    private sealed virtual override void System.ComponentModel.ISupportInitializeNotification.add_Initialized(EventHandler value);
    private sealed virtual override void System.ComponentModel.ISupportInitializeNotification.remove_Initialized(EventHandler value);
    public virtual IEnumerator GetEnumerator();
    public virtual void CopyTo(Array arr, int index);
    public virtual int get_Count();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    public virtual int Add(object value);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual object get_Item(int index);
    public virtual void set_Item(int index, object value);
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual string GetListName(PropertyDescriptor[] listAccessors);
    public virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
    public virtual object AddNew();
    public virtual bool get_AllowEdit();
    public virtual bool get_AllowNew();
    public virtual void set_AllowNew(bool value);
    public virtual bool get_AllowRemove();
    public virtual bool get_SupportsChangeNotification();
    public virtual bool get_SupportsSearching();
    public virtual bool get_SupportsSorting();
    public virtual bool get_IsSorted();
    public virtual PropertyDescriptor get_SortProperty();
    public virtual ListSortDirection get_SortDirection();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    [EditorBrowsableAttribute("1")]
public virtual void ApplySort(PropertyDescriptor property, ListSortDirection sort);
    public virtual int Find(PropertyDescriptor prop, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor prop);
    public virtual void RemoveSort();
    [EditorBrowsableAttribute("1")]
public virtual void ApplySort(ListSortDescriptionCollection sorts);
    public virtual ListSortDescriptionCollection get_SortDescriptions();
    public virtual string get_Filter();
    public virtual void set_Filter(string value);
    public virtual void RemoveFilter();
    public virtual bool get_SupportsAdvancedSorting();
    public virtual bool get_SupportsFiltering();
    private sealed virtual override void System.ComponentModel.ICancelAddNew.CancelNew(int position);
    private sealed virtual override void System.ComponentModel.ICancelAddNew.EndNew(int position);
}
public enum System.Windows.Forms.BootMode : Enum {
    public int value__;
    public static BootMode Normal;
    public static BootMode FailSafe;
    public static BootMode FailSafeWithNetwork;
}
[ComVisibleAttribute("True")]
[FlagsAttribute]
public enum System.Windows.Forms.Border3DSide : Enum {
    public int value__;
    public static Border3DSide Left;
    public static Border3DSide Top;
    public static Border3DSide Right;
    public static Border3DSide Bottom;
    public static Border3DSide Middle;
    public static Border3DSide All;
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.Border3DStyle : Enum {
    public int value__;
    public static Border3DStyle Adjust;
    public static Border3DStyle Bump;
    public static Border3DStyle Etched;
    public static Border3DStyle Flat;
    public static Border3DStyle Raised;
    public static Border3DStyle RaisedInner;
    public static Border3DStyle RaisedOuter;
    public static Border3DStyle Sunken;
    public static Border3DStyle SunkenInner;
    public static Border3DStyle SunkenOuter;
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.BorderStyle : Enum {
    public int value__;
    public static BorderStyle None;
    public static BorderStyle FixedSingle;
    public static BorderStyle Fixed3D;
}
[FlagsAttribute]
public enum System.Windows.Forms.BoundsSpecified : Enum {
    public int value__;
    public static BoundsSpecified X;
    public static BoundsSpecified Y;
    public static BoundsSpecified Width;
    public static BoundsSpecified Height;
    public static BoundsSpecified Location;
    public static BoundsSpecified Size;
    public static BoundsSpecified All;
    public static BoundsSpecified None;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[SRDescriptionAttribute("DescriptionButton")]
[DesignerAttribute("System.Windows.Forms.Design.ButtonBaseDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.Button : ButtonBase {
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlAutoSizeModeDescr")]
public AutoSizeMode AutoSizeMode { get; public set; }
    protected CreateParams CreateParams { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ButtonDialogResultDescr")]
public DialogResult DialogResult { get; public set; }
    public AutoSizeMode get_AutoSizeMode();
    public void set_AutoSizeMode(AutoSizeMode value);
    protected virtual CreateParams get_CreateParams();
    public virtual DialogResult get_DialogResult();
    public virtual void set_DialogResult(DialogResult value);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public virtual void NotifyDefault(bool value);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    protected virtual void OnTextChanged(EventArgs e);
    public sealed virtual void PerformClick();
    protected internal virtual bool ProcessMnemonic(char charCode);
    public virtual string ToString();
    protected virtual void WndProc(Message& m);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.ButtonBaseDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Windows.Forms.ButtonBase : Control {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[SRDescriptionAttribute("ButtonAutoEllipsisDescr")]
public bool AutoEllipsis { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ControlBackColorDescr")]
public Color BackColor { get; public set; }
    protected Size DefaultSize { get; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected internal bool IsDefault { get; protected internal set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonFlatAppearance")]
[DesignerSerializationVisibilityAttribute("2")]
public FlatButtonAppearance FlatAppearance { get; }
    [SRDescriptionAttribute("ButtonImageDescr")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
public Image Image { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonImageAlignDescr")]
[SRCategoryAttribute("CatAppearance")]
public ContentAlignment ImageAlign { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("-1")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ButtonImageIndexDescr")]
[SRCategoryAttribute("CatAppearance")]
public int ImageIndex { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ButtonImageIndexDescr")]
[SRCategoryAttribute("CatAppearance")]
public string ImageKey { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("ButtonImageListDescr")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatAppearance")]
public ImageList ImageList { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SettingsBindableAttribute("True")]
public string Text { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonTextAlignDescr")]
[SRCategoryAttribute("CatAppearance")]
public ContentAlignment TextAlign { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonTextImageRelationDescr")]
[SRCategoryAttribute("CatAppearance")]
public TextImageRelation TextImageRelation { get; public set; }
    [SRDescriptionAttribute("ButtonUseMnemonicDescr")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
public bool UseMnemonic { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonUseVisualStyleBackColorDescr")]
public bool UseVisualStyleBackColor { get; public set; }
    public bool get_AutoEllipsis();
    public void set_AutoEllipsis(bool value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    protected virtual Size get_DefaultSize();
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected internal bool get_IsDefault();
    protected internal void set_IsDefault(bool value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public FlatButtonAppearance get_FlatAppearance();
    public Image get_Image();
    public void set_Image(Image value);
    public ContentAlignment get_ImageAlign();
    public void set_ImageAlign(ContentAlignment value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public ImageList get_ImageList();
    public void set_ImageList(ImageList value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual ContentAlignment get_TextAlign();
    public virtual void set_TextAlign(ContentAlignment value);
    public TextImageRelation get_TextImageRelation();
    public void set_TextImageRelation(TextImageRelation value);
    public bool get_UseMnemonic();
    public void set_UseMnemonic(bool value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnMouseEnter(EventArgs eventargs);
    protected virtual void OnMouseLeave(EventArgs eventargs);
    protected virtual void OnMouseMove(MouseEventArgs mevent);
    protected virtual void OnMouseDown(MouseEventArgs mevent);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    protected void ResetFlagsandPaint();
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs kevent);
    protected virtual void OnKeyUp(KeyEventArgs kevent);
    protected virtual void OnPaint(PaintEventArgs pevent);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    public bool get_UseVisualStyleBackColor();
    public void set_UseVisualStyleBackColor(bool value);
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.ButtonBorderStyle : Enum {
    public int value__;
    public static ButtonBorderStyle None;
    public static ButtonBorderStyle Dotted;
    public static ButtonBorderStyle Dashed;
    public static ButtonBorderStyle Solid;
    public static ButtonBorderStyle Inset;
    public static ButtonBorderStyle Outset;
}
public class System.Windows.Forms.ButtonRenderer : object {
    public static bool RenderMatchingApplicationState { get; public set; }
    private static ButtonRenderer();
    public static bool get_RenderMatchingApplicationState();
    public static void set_RenderMatchingApplicationState(bool value);
    public static bool IsBackgroundPartiallyTransparent(PushButtonState state);
    public static void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl);
    public static void DrawButton(Graphics g, Rectangle bounds, PushButtonState state);
    public static void DrawButton(Graphics g, Rectangle bounds, bool focused, PushButtonState state);
    public static void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, bool focused, PushButtonState state);
    public static void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, TextFormatFlags flags, bool focused, PushButtonState state);
    public static void DrawButton(Graphics g, Rectangle bounds, Image image, Rectangle imageBounds, bool focused, PushButtonState state);
    public static void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, Image image, Rectangle imageBounds, bool focused, PushButtonState state);
    public static void DrawButton(Graphics g, Rectangle bounds, string buttonText, Font font, TextFormatFlags flags, Image image, Rectangle imageBounds, bool focused, PushButtonState state);
}
[FlagsAttribute]
public enum System.Windows.Forms.ButtonState : Enum {
    public int value__;
    public static ButtonState Checked;
    public static ButtonState Flat;
    public static ButtonState Inactive;
    public static ButtonState Normal;
    public static ButtonState Pushed;
    public static ButtonState All;
}
public class System.Windows.Forms.CacheVirtualItemsEventArgs : EventArgs {
    public int StartIndex { get; }
    public int EndIndex { get; }
    public CacheVirtualItemsEventArgs(int startIndex, int endIndex);
    public int get_StartIndex();
    public int get_EndIndex();
}
public class System.Windows.Forms.CacheVirtualItemsEventHandler : MulticastDelegate {
    public CacheVirtualItemsEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CacheVirtualItemsEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CacheVirtualItemsEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.CaptionButton : Enum {
    public int value__;
    public static CaptionButton Close;
    public static CaptionButton Help;
    public static CaptionButton Maximize;
    public static CaptionButton Minimize;
    public static CaptionButton Restore;
}
public enum System.Windows.Forms.CharacterCasing : Enum {
    public int value__;
    public static CharacterCasing Normal;
    public static CharacterCasing Upper;
    public static CharacterCasing Lower;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Checked")]
[DefaultEventAttribute("CheckedChanged")]
[DefaultBindingPropertyAttribute("CheckState")]
[ToolboxItemAttribute("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionCheckBox")]
public class System.Windows.Forms.CheckBox : ButtonBase {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("CheckBoxAppearanceDescr")]
public Appearance Appearance { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("CheckBoxAutoCheckDescr")]
public bool AutoCheck { get; public set; }
    [BindableAttribute("True")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("CheckBoxCheckAlignDescr")]
public ContentAlignment CheckAlign { get; public set; }
    [BindableAttribute("True")]
[SettingsBindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("CheckBoxCheckedDescr")]
public bool Checked { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("CheckBoxCheckStateDescr")]
public CheckState CheckState { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ContentAlignment TextAlign { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("CheckBoxThreeStateDescr")]
public bool ThreeState { get; public set; }
    private static CheckBox();
    public Appearance get_Appearance();
    public void set_Appearance(Appearance value);
    public void add_AppearanceChanged(EventHandler value);
    public void remove_AppearanceChanged(EventHandler value);
    public bool get_AutoCheck();
    public void set_AutoCheck(bool value);
    public ContentAlignment get_CheckAlign();
    public void set_CheckAlign(ContentAlignment value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public CheckState get_CheckState();
    public void set_CheckState(CheckState value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    public virtual ContentAlignment get_TextAlign();
    public virtual void set_TextAlign(ContentAlignment value);
    public bool get_ThreeState();
    public void set_ThreeState(bool value);
    public void add_CheckedChanged(EventHandler value);
    public void remove_CheckedChanged(EventHandler value);
    public void add_CheckStateChanged(EventHandler value);
    public void remove_CheckStateChanged(EventHandler value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void OnAppearanceChanged(EventArgs e);
    protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnCheckStateChanged(EventArgs e);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    protected internal virtual bool ProcessMnemonic(char charCode);
    public virtual string ToString();
}
public class System.Windows.Forms.CheckBoxRenderer : object {
    public static bool RenderMatchingApplicationState { get; public set; }
    private static CheckBoxRenderer();
    public static bool get_RenderMatchingApplicationState();
    public static void set_RenderMatchingApplicationState(bool value);
    public static bool IsBackgroundPartiallyTransparent(CheckBoxState state);
    public static void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl);
    public static void DrawCheckBox(Graphics g, Point glyphLocation, CheckBoxState state);
    public static void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, bool focused, CheckBoxState state);
    public static void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, TextFormatFlags flags, bool focused, CheckBoxState state);
    public static void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, Image image, Rectangle imageBounds, bool focused, CheckBoxState state);
    public static void DrawCheckBox(Graphics g, Point glyphLocation, Rectangle textBounds, string checkBoxText, Font font, TextFormatFlags flags, Image image, Rectangle imageBounds, bool focused, CheckBoxState state);
    public static Size GetGlyphSize(Graphics g, CheckBoxState state);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[LookupBindingPropertiesAttribute]
[SRDescriptionAttribute("DescriptionCheckedListBox")]
public class System.Windows.Forms.CheckedListBox : ListBox {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CheckedListBoxCheckOnClickDescr")]
public bool CheckOnClick { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CheckedIndexCollection CheckedIndices { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CheckedItemCollection CheckedItems { get; }
    protected CreateParams CreateParams { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object DataSource { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string DisplayMember { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public DrawMode DrawMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public int ItemHeight { get; public set; }
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxItemsDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public ObjectCollection Items { get; }
    public SelectionMode SelectionMode { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CheckedListBoxThreeDCheckBoxesDescr")]
public bool ThreeDCheckBoxes { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string ValueMember { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    private static CheckedListBox();
    public bool get_CheckOnClick();
    public void set_CheckOnClick(bool value);
    public CheckedIndexCollection get_CheckedIndices();
    public CheckedItemCollection get_CheckedItems();
    protected virtual CreateParams get_CreateParams();
    public object get_DataSource();
    public void set_DataSource(object value);
    public string get_DisplayMember();
    public void set_DisplayMember(string value);
    public virtual DrawMode get_DrawMode();
    public virtual void set_DrawMode(DrawMode value);
    public virtual int get_ItemHeight();
    public virtual void set_ItemHeight(int value);
    public ObjectCollection get_Items();
    public virtual SelectionMode get_SelectionMode();
    public virtual void set_SelectionMode(SelectionMode value);
    public bool get_ThreeDCheckBoxes();
    public void set_ThreeDCheckBoxes(bool value);
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    public string get_ValueMember();
    public void set_ValueMember(string value);
    public void add_DataSourceChanged(EventHandler value);
    public void remove_DataSourceChanged(EventHandler value);
    public void add_DisplayMemberChanged(EventHandler value);
    public void remove_DisplayMemberChanged(EventHandler value);
    public void add_ItemCheck(ItemCheckEventHandler value);
    public void remove_ItemCheck(ItemCheckEventHandler value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_DrawItem(DrawItemEventHandler value);
    public void remove_DrawItem(DrawItemEventHandler value);
    public void add_MeasureItem(MeasureItemEventHandler value);
    public void remove_MeasureItem(MeasureItemEventHandler value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_ValueMemberChanged(EventHandler value);
    public void remove_ValueMemberChanged(EventHandler value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ObjectCollection CreateItemCollection();
    public CheckState GetItemCheckState(int index);
    public bool GetItemChecked(int index);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    protected virtual void OnItemCheck(ItemCheckEventArgs ice);
    protected virtual void OnMeasureItem(MeasureItemEventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void RefreshItems();
    public void SetItemCheckState(int index, CheckState value);
    public void SetItemChecked(int index, bool value);
    protected virtual void WmReflectCommand(Message& m);
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.CheckState : Enum {
    public int value__;
    public static CheckState Unchecked;
    public static CheckState Checked;
    public static CheckState Indeterminate;
}
public class System.Windows.Forms.Clipboard : object {
    public static void SetDataObject(object data);
    public static void SetDataObject(object data, bool copy);
    public static void SetDataObject(object data, bool copy, int retryTimes, int retryDelay);
    public static IDataObject GetDataObject();
    public static void Clear();
    public static bool ContainsAudio();
    public static bool ContainsData(string format);
    public static bool ContainsFileDropList();
    public static bool ContainsImage();
    public static bool ContainsText();
    public static bool ContainsText(TextDataFormat format);
    public static Stream GetAudioStream();
    public static object GetData(string format);
    public static StringCollection GetFileDropList();
    public static Image GetImage();
    public static string GetText();
    public static string GetText(TextDataFormat format);
    public static void SetAudio(Byte[] audioBytes);
    public static void SetAudio(Stream audioStream);
    public static void SetData(string format, object data);
    public static void SetFileDropList(StringCollection filePaths);
    public static void SetImage(Image image);
    public static void SetText(string text);
    public static void SetText(string text, TextDataFormat format);
}
public enum System.Windows.Forms.CloseReason : Enum {
    public int value__;
    public static CloseReason None;
    public static CloseReason WindowsShutDown;
    public static CloseReason MdiFormClosing;
    public static CloseReason UserClosing;
    public static CloseReason TaskManagerClosing;
    public static CloseReason FormOwnerClosing;
    public static CloseReason ApplicationExitCall;
}
public enum System.Windows.Forms.ColorDepth : Enum {
    public int value__;
    public static ColorDepth Depth4Bit;
    public static ColorDepth Depth8Bit;
    public static ColorDepth Depth16Bit;
    public static ColorDepth Depth24Bit;
    public static ColorDepth Depth32Bit;
}
[DefaultPropertyAttribute("Color")]
[SRDescriptionAttribute("DescriptionColorDialog")]
public class System.Windows.Forms.ColorDialog : CommonDialog {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("CDallowFullOpenDescr")]
public bool AllowFullOpen { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CDanyColorDescr")]
public bool AnyColor { get; public set; }
    [SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("CDcolorDescr")]
public Color Color { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("CDcustomColorsDescr")]
public Int32[] CustomColors { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CDfullOpenDescr")]
public bool FullOpen { get; public set; }
    protected IntPtr Instance { get; }
    protected int Options { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CDshowHelpDescr")]
public bool ShowHelp { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("CDsolidColorOnlyDescr")]
public bool SolidColorOnly { get; public set; }
    public virtual bool get_AllowFullOpen();
    public virtual void set_AllowFullOpen(bool value);
    public virtual bool get_AnyColor();
    public virtual void set_AnyColor(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    public Int32[] get_CustomColors();
    public void set_CustomColors(Int32[] value);
    public virtual bool get_FullOpen();
    public virtual void set_FullOpen(bool value);
    protected virtual IntPtr get_Instance();
    protected virtual int get_Options();
    public virtual bool get_ShowHelp();
    public virtual void set_ShowHelp(bool value);
    public virtual bool get_SolidColorOnly();
    public virtual void set_SolidColorOnly(bool value);
    public virtual void Reset();
    protected virtual bool RunDialog(IntPtr hwndOwner);
    public virtual string ToString();
}
public class System.Windows.Forms.ColumnClickEventArgs : EventArgs {
    public int Column { get; }
    public ColumnClickEventArgs(int column);
    public int get_Column();
}
public class System.Windows.Forms.ColumnClickEventHandler : MulticastDelegate {
    public ColumnClickEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ColumnClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ColumnClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("Text")]
[TypeConverterAttribute("System.Windows.Forms.ColumnHeaderConverter")]
public class System.Windows.Forms.ColumnHeader : Component {
    [LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ColumnHeaderDisplayIndexDescr")]
public int DisplayIndex { get; public set; }
    [BrowsableAttribute("False")]
public int Index { get; }
    [DefaultValueAttribute("-1")]
[TypeConverterAttribute("System.Windows.Forms.ImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public int ImageIndex { get; public set; }
    [BrowsableAttribute("False")]
public ImageList ImageList { get; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public string ImageKey { get; public set; }
    [BrowsableAttribute("False")]
public ListView ListView { get; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("ColumnHeaderNameDescr")]
public string Name { get; public set; }
    [LocalizableAttribute("True")]
[SRDescriptionAttribute("ColumnCaption")]
public string Text { get; public set; }
    [SRDescriptionAttribute("ColumnAlignment")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public HorizontalAlignment TextAlign { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [SRDescriptionAttribute("ColumnWidth")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("60")]
public int Width { get; public set; }
    public ColumnHeader(int imageIndex);
    public ColumnHeader(string imageKey);
    public int get_DisplayIndex();
    public void set_DisplayIndex(int value);
    public int get_Index();
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public ImageList get_ImageList();
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public ListView get_ListView();
    public string get_Name();
    public void set_Name(string value);
    public string get_Text();
    public void set_Text(string value);
    public HorizontalAlignment get_TextAlign();
    public void set_TextAlign(HorizontalAlignment value);
    public object get_Tag();
    public void set_Tag(object value);
    public int get_Width();
    public void set_Width(int value);
    public void AutoResize(ColumnHeaderAutoResizeStyle headerAutoResize);
    public sealed virtual object Clone();
    protected virtual void Dispose(bool disposing);
    public virtual string ToString();
}
public enum System.Windows.Forms.ColumnHeaderAutoResizeStyle : Enum {
    public int value__;
    public static ColumnHeaderAutoResizeStyle None;
    public static ColumnHeaderAutoResizeStyle HeaderSize;
    public static ColumnHeaderAutoResizeStyle ColumnContent;
}
public class System.Windows.Forms.ColumnHeaderConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public enum System.Windows.Forms.ColumnHeaderStyle : Enum {
    public int value__;
    public static ColumnHeaderStyle None;
    public static ColumnHeaderStyle Nonclickable;
    public static ColumnHeaderStyle Clickable;
}
public class System.Windows.Forms.ColumnReorderedEventArgs : CancelEventArgs {
    public int OldDisplayIndex { get; }
    public int NewDisplayIndex { get; }
    public ColumnHeader Header { get; }
    public ColumnReorderedEventArgs(int oldDisplayIndex, int newDisplayIndex, ColumnHeader header);
    public int get_OldDisplayIndex();
    public int get_NewDisplayIndex();
    public ColumnHeader get_Header();
}
public class System.Windows.Forms.ColumnReorderedEventHandler : MulticastDelegate {
    public ColumnReorderedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ColumnReorderedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ColumnReorderedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ColumnStyle : TableLayoutStyle {
    public float Width { get; public set; }
    public ColumnStyle(SizeType sizeType);
    public ColumnStyle(SizeType sizeType, float width);
    public float get_Width();
    public void set_Width(float value);
}
public class System.Windows.Forms.ColumnWidthChangedEventArgs : EventArgs {
    public int ColumnIndex { get; }
    public ColumnWidthChangedEventArgs(int columnIndex);
    public int get_ColumnIndex();
}
public class System.Windows.Forms.ColumnWidthChangedEventHandler : MulticastDelegate {
    public ColumnWidthChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ColumnWidthChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ColumnWidthChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ColumnWidthChangingEventArgs : CancelEventArgs {
    public int ColumnIndex { get; }
    public int NewWidth { get; public set; }
    public ColumnWidthChangingEventArgs(int columnIndex, int newWidth, bool cancel);
    public ColumnWidthChangingEventArgs(int columnIndex, int newWidth);
    public int get_ColumnIndex();
    public int get_NewWidth();
    public void set_NewWidth(int value);
}
public class System.Windows.Forms.ColumnWidthChangingEventHandler : MulticastDelegate {
    public ColumnWidthChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ColumnWidthChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ColumnWidthChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultEventAttribute("SelectedIndexChanged")]
[DefaultPropertyAttribute("Items")]
[DefaultBindingPropertyAttribute("Text")]
[DesignerAttribute("System.Windows.Forms.Design.ComboBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionComboBox")]
public class System.Windows.Forms.ComboBox : ListControl {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxAutoCompleteModeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteMode AutoCompleteMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxAutoCompleteSourceDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteSource AutoCompleteSource { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxAutoCompleteCustomSourceDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteStringCollection AutoCompleteCustomSource { get; public set; }
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SRDescriptionAttribute("ListControlDataSourceDescr")]
public object DataSource { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxDrawModeDescr")]
[RefreshPropertiesAttribute("2")]
public DrawMode DrawMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ComboBoxDropDownWidthDescr")]
public int DropDownWidth { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ComboBoxDropDownHeightDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("106")]
public int DropDownHeight { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxDroppedDownDescr")]
public bool DroppedDown { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    public bool Focused { get; }
    public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxIntegralHeightDescr")]
public bool IntegralHeight { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxItemHeightDescr")]
public int ItemHeight { get; public set; }
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxItemsDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
public ObjectCollection Items { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("8")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxMaxDropDownItemsDescr")]
public int MaxDropDownItems { get; public set; }
    public Size MaximumSize { get; public set; }
    public Size MinimumSize { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxMaxLengthDescr")]
public int MaxLength { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxPreferredHeightDescr")]
public int PreferredHeight { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedIndexDescr")]
public int SelectedIndex { get; public set; }
    [BrowsableAttribute("False")]
[BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedItemDescr")]
public object SelectedItem { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedTextDescr")]
public string SelectedText { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectionLengthDescr")]
public int SelectionLength { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectionStartDescr")]
public int SelectionStart { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ComboBoxSortedDescr")]
public bool Sorted { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxStyleDescr")]
[RefreshPropertiesAttribute("2")]
public ComboBoxStyle DropDownStyle { get; public set; }
    [LocalizableAttribute("True")]
[BindableAttribute("True")]
public string Text { get; public set; }
    private static ComboBox();
    public AutoCompleteMode get_AutoCompleteMode();
    public void set_AutoCompleteMode(AutoCompleteMode value);
    public AutoCompleteSource get_AutoCompleteSource();
    public void set_AutoCompleteSource(AutoCompleteSource value);
    public AutoCompleteStringCollection get_AutoCompleteCustomSource();
    public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    public object get_DataSource();
    public void set_DataSource(object value);
    public DrawMode get_DrawMode();
    public void set_DrawMode(DrawMode value);
    public int get_DropDownWidth();
    public void set_DropDownWidth(int value);
    public int get_DropDownHeight();
    public void set_DropDownHeight(int value);
    public bool get_DroppedDown();
    public void set_DroppedDown(bool value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public virtual bool get_Focused();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public bool get_IntegralHeight();
    public void set_IntegralHeight(bool value);
    public int get_ItemHeight();
    public void set_ItemHeight(int value);
    public ObjectCollection get_Items();
    public int get_MaxDropDownItems();
    public void set_MaxDropDownItems(int value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public int get_PreferredHeight();
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public string get_SelectedText();
    public void set_SelectedText(string value);
    public int get_SelectionLength();
    public void set_SelectionLength(int value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    public ComboBoxStyle get_DropDownStyle();
    public void set_DropDownStyle(ComboBoxStyle value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_DrawItem(DrawItemEventHandler value);
    public void remove_DrawItem(DrawItemEventHandler value);
    public void add_DropDown(EventHandler value);
    public void remove_DropDown(EventHandler value);
    public void add_MeasureItem(MeasureItemEventHandler value);
    public void remove_MeasureItem(MeasureItemEventHandler value);
    public void add_SelectedIndexChanged(EventHandler value);
    public void remove_SelectedIndexChanged(EventHandler value);
    public void add_SelectionChangeCommitted(EventHandler value);
    public void remove_SelectionChangeCommitted(EventHandler value);
    public void add_DropDownStyleChanged(EventHandler value);
    public void remove_DropDownStyleChanged(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_TextUpdate(EventHandler value);
    public void remove_TextUpdate(EventHandler value);
    public void add_DropDownClosed(EventHandler value);
    public void remove_DropDownClosed(EventHandler value);
    [ObsoleteAttribute("This method has been deprecated.  There is no replacement.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void AddItemsCore(Object[] value);
    public void BeginUpdate();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void Dispose(bool disposing);
    public void EndUpdate();
    public int FindString(string s);
    public int FindString(string s, int startIndex);
    public int FindStringExact(string s);
    public int FindStringExact(string s, int startIndex);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    public int GetItemHeight(int index);
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void CreateHandle();
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnDropDown(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    protected virtual void OnMeasureItem(MeasureItemEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnSelectionChangeCommitted(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSelectedValueChanged(EventArgs e);
    protected virtual void OnSelectedItemChanged(EventArgs e);
    protected virtual void OnDropDownStyleChanged(EventArgs e);
    protected virtual void OnParentBackColorChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnGotFocus(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLostFocus(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnTextChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValidating(CancelEventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected virtual void OnDisplayMemberChanged(EventArgs e);
    protected virtual void OnDropDownClosed(EventArgs e);
    protected virtual void OnTextUpdate(EventArgs e);
    protected virtual bool ProcessKeyEventArgs(Message& m);
    protected virtual void RefreshItems();
    protected virtual void RefreshItem(int index);
    public virtual void ResetText();
    public void Select(int start, int length);
    public void SelectAll();
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void SetItemsCore(IList value);
    protected virtual void SetItemCore(int index, object value);
    public virtual string ToString();
    protected virtual void WndProc(Message& m);
}
public class System.Windows.Forms.ComboBoxRenderer : object {
    public static bool IsSupported { get; }
    private static ComboBoxRenderer();
    public static bool get_IsSupported();
    public static void DrawTextBox(Graphics g, Rectangle bounds, ComboBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, ComboBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, Rectangle textBounds, ComboBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, TextFormatFlags flags, ComboBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string comboBoxText, Font font, Rectangle textBounds, TextFormatFlags flags, ComboBoxState state);
    public static void DrawDropDownButton(Graphics g, Rectangle bounds, ComboBoxState state);
}
public enum System.Windows.Forms.ComboBoxStyle : Enum {
    public int value__;
    public static ComboBoxStyle Simple;
    public static ComboBoxStyle DropDown;
    public static ComboBoxStyle DropDownList;
}
[ToolboxItemFilterAttribute("System.Windows.Forms")]
public abstract class System.Windows.Forms.CommonDialog : Component {
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    private static CommonDialog();
    public object get_Tag();
    public void set_Tag(object value);
    public void add_HelpRequest(EventHandler value);
    public void remove_HelpRequest(EventHandler value);
    protected virtual IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    protected virtual void OnHelpRequest(EventArgs e);
    protected virtual IntPtr OwnerWndProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    public abstract virtual void Reset();
    protected abstract virtual bool RunDialog(IntPtr hwndOwner);
    public DialogResult ShowDialog();
    public DialogResult ShowDialog(IWin32Window owner);
}
public class System.Windows.Forms.ComponentModel.Com2Interop.Com2Variant : object {
}
public interface System.Windows.Forms.ComponentModel.Com2Interop.ICom2PropertyPageDisplayService {
    public abstract virtual void ShowPropertyPage(string title, object component, int dispid, Guid pageGuid, IntPtr parentHandle);
}
public interface System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser {
    public bool InPropertySet { get; }
    public abstract virtual void DropDownDone();
    public abstract virtual bool get_InPropertySet();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ComComponentNameChanged(ComponentRenameEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ComComponentNameChanged(ComponentRenameEventHandler value);
    public abstract virtual bool EnsurePendingChangesCommitted();
    public abstract virtual void HandleF4();
    public abstract virtual void LoadState(RegistryKey key);
    public abstract virtual void SaveState(RegistryKey key);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
public class System.Windows.Forms.ContainerControl : ScrollableControl {
    [LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[SRCategoryAttribute("CatLayout")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public SizeF AutoScaleDimensions { get; public set; }
    protected SizeF AutoScaleFactor { get; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ContainerControlAutoScaleModeDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public AutoScaleMode AutoScaleMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ContainerControlAutoValidate")]
public AutoValidate AutoValidate { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("ContainerControlBindingContextDescr")]
public BindingContext BindingContext { get; public set; }
    protected bool CanEnableIme { get; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ContainerControlActiveControlDescr")]
public Control ActiveControl { get; public set; }
    protected CreateParams CreateParams { get; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CatLayout")]
[EditorBrowsableAttribute("2")]
public SizeF CurrentAutoScaleDimensions { get; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ContainerControlParentFormDescr")]
public Form ParentForm { get; }
    private static ContainerControl();
    public SizeF get_AutoScaleDimensions();
    public void set_AutoScaleDimensions(SizeF value);
    protected SizeF get_AutoScaleFactor();
    public AutoScaleMode get_AutoScaleMode();
    public void set_AutoScaleMode(AutoScaleMode value);
    public virtual AutoValidate get_AutoValidate();
    public virtual void set_AutoValidate(AutoValidate value);
    public void add_AutoValidateChanged(EventHandler value);
    public void remove_AutoValidateChanged(EventHandler value);
    public virtual BindingContext get_BindingContext();
    public virtual void set_BindingContext(BindingContext value);
    protected virtual bool get_CanEnableIme();
    public sealed virtual Control get_ActiveControl();
    public sealed virtual void set_ActiveControl(Control value);
    protected virtual CreateParams get_CreateParams();
    public SizeF get_CurrentAutoScaleDimensions();
    public Form get_ParentForm();
    private sealed virtual override bool System.Windows.Forms.IContainerControl.ActivateControl(Control control);
    [EditorBrowsableAttribute("2")]
protected virtual void AdjustFormScrollbars(bool displayScrollbars);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnAutoValidateChanged(EventArgs e);
    protected virtual void OnCreateControl();
    [EditorBrowsableAttribute("2")]
protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnParentChanged(EventArgs e);
    public void PerformAutoScale();
    [EditorBrowsableAttribute("2")]
protected virtual bool ProcessDialogChar(char charCode);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected virtual bool ProcessTabKey(bool forward);
    protected virtual void Select(bool directed, bool forward);
    protected virtual void UpdateDefaultButton();
    public bool Validate();
    public bool Validate(bool checkAutoValidate);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public virtual bool ValidateChildren();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public virtual bool ValidateChildren(ValidationConstraints validationConstraints);
    [EditorBrowsableAttribute("2")]
protected virtual void WndProc(Message& m);
}
public class System.Windows.Forms.ContentsResizedEventArgs : EventArgs {
    public Rectangle NewRectangle { get; }
    public ContentsResizedEventArgs(Rectangle newRectangle);
    public Rectangle get_NewRectangle();
}
public class System.Windows.Forms.ContentsResizedEventHandler : MulticastDelegate {
    public ContentsResizedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ContentsResizedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ContentsResizedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultEventAttribute("Popup")]
public class System.Windows.Forms.ContextMenu : Menu {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ContextMenuSourceControlDescr")]
public Control SourceControl { get; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("MenuRightToLeftDescr")]
public RightToLeft RightToLeft { get; public set; }
    public ContextMenu(MenuItem[] menuItems);
    public Control get_SourceControl();
    public void add_Popup(EventHandler value);
    public void remove_Popup(EventHandler value);
    public void add_Collapse(EventHandler value);
    public void remove_Collapse(EventHandler value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    protected internal virtual void OnPopup(EventArgs e);
    protected internal virtual void OnCollapse(EventArgs e);
    protected internal virtual bool ProcessCmdKey(Message& msg, Keys keyData, Control control);
    public void Show(Control control, Point pos);
    public void Show(Control control, Point pos, LeftRightAlignment alignment);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultEventAttribute("Opening")]
[SRDescriptionAttribute("DescriptionContextMenuStrip")]
public class System.Windows.Forms.ContextMenuStrip : ToolStripDropDownMenu {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ContextMenuStripSourceControlDescr")]
public Control SourceControl { get; }
    public ContextMenuStrip(IContainer container);
    protected virtual void Dispose(bool disposing);
    public Control get_SourceControl();
    protected virtual void SetVisibleCore(bool visible);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Text")]
[DefaultEventAttribute("Click")]
[DesignerAttribute("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
public class System.Windows.Forms.Control : Component {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlAccessibilityObjectDescr")]
public AccessibleObject AccessibilityObject { get; }
    [SRCategoryAttribute("CatAccessibility")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlAccessibleDefaultActionDescr")]
public string AccessibleDefaultActionDescription { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlAccessibleDescriptionDescr")]
public string AccessibleDescription { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlAccessibleNameDescr")]
public string AccessibleName { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlAccessibleRoleDescr")]
public AccessibleRole AccessibleRole { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlAllowDropDescr")]
public bool AllowDrop { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlAnchorDescr")]
[RefreshPropertiesAttribute("2")]
public AnchorStyles Anchor { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[RefreshPropertiesAttribute("1")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlAutoSizeDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
public Point AutoScrollOffset { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public LayoutEngine LayoutEngine { get; }
    [SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-501")]
[SRDescriptionAttribute("ControlBackColorDescr")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlBackgroundImageDescr")]
public Image BackgroundImage { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlBackgroundImageLayoutDescr")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlBindingContextDescr")]
public BindingContext BindingContext { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlBottomDescr")]
[SRCategoryAttribute("CatLayout")]
public int Bottom { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlBoundsDescr")]
[SRCategoryAttribute("CatLayout")]
public Rectangle Bounds { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatFocus")]
[SRDescriptionAttribute("ControlCanFocusDescr")]
public bool CanFocus { get; }
    protected bool CanRaiseEvents { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatFocus")]
[SRDescriptionAttribute("ControlCanSelectDescr")]
public bool CanSelect { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatFocus")]
[SRDescriptionAttribute("ControlCaptureDescr")]
public bool Capture { get; public set; }
    [SRCategoryAttribute("CatFocus")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ControlCausesValidationDescr")]
public bool CausesValidation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[SRDescriptionAttribute("ControlCheckForIllegalCrossThreadCalls")]
[DesignerSerializationVisibilityAttribute("0")]
public static bool CheckForIllegalCrossThreadCalls { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ControlClientRectangleDescr")]
public Rectangle ClientRectangle { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlClientSizeDescr")]
public Size ClientSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[DescriptionAttribute("ControlCompanyNameDescr")]
public string CompanyName { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlContainsFocusDescr")]
public bool ContainsFocus { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ControlContextMenuDescr")]
[BrowsableAttribute("False")]
public ContextMenu ContextMenu { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ControlContextMenuDescr")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("ControlControlsDescr")]
public ControlCollection Controls { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlCreatedDescr")]
public bool Created { get; }
    protected CreateParams CreateParams { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ControlCursorDescr")]
[AmbientValueAttribute("")]
public Cursor Cursor { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("ControlBindingsDescr")]
[RefreshPropertiesAttribute("1")]
[ParenthesizePropertyNameAttribute("True")]
public ControlBindingsCollection DataBindings { get; }
    public static Color DefaultBackColor { get; }
    protected Cursor DefaultCursor { get; }
    public static Font DefaultFont { get; }
    public static Color DefaultForeColor { get; }
    protected Padding DefaultMargin { get; }
    protected Size DefaultMaximumSize { get; }
    protected Size DefaultMinimumSize { get; }
    protected Padding DefaultPadding { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlDisplayRectangleDescr")]
public Rectangle DisplayRectangle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlDisposedDescr")]
public bool IsDisposed { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlDisposingDescr")]
public bool Disposing { get; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlDockDescr")]
public DockStyle Dock { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ControlDoubleBufferedDescr")]
protected bool DoubleBuffered { get; protected set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DispIdAttribute("-514")]
[SRDescriptionAttribute("ControlEnabledDescr")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlFocusedDescr")]
public bool Focused { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DispIdAttribute("-512")]
[AmbientValueAttribute("")]
[SRDescriptionAttribute("ControlFontDescr")]
public Font Font { get; public set; }
    protected int FontHeight { get; protected set; }
    [SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-513")]
[SRDescriptionAttribute("ControlForeColorDescr")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DispIdAttribute("-515")]
[SRDescriptionAttribute("ControlHandleDescr")]
public IntPtr Handle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlHasChildrenDescr")]
public bool HasChildren { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlHeightDescr")]
public int Height { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlHandleCreatedDescr")]
public bool IsHandleCreated { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlInvokeRequiredDescr")]
public bool InvokeRequired { get; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlIsAccessibleDescr")]
public bool IsAccessible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("IsMirroredDescr")]
public bool IsMirrored { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlLeftDescr")]
public int Left { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlLocationDescr")]
public Point Location { get; public set; }
    [SRDescriptionAttribute("ControlMarginDescr")]
[SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
public Padding Margin { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlMaximumSizeDescr")]
[AmbientValueAttribute("System.Drawing.Size", "0, 0")]
public Size MaximumSize { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlMinimumSizeDescr")]
public Size MinimumSize { get; public set; }
    public static Keys ModifierKeys { get; }
    public static MouseButtons MouseButtons { get; }
    public static Point MousePosition { get; }
    [BrowsableAttribute("False")]
public string Name { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlParentDescr")]
public Control Parent { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlProductNameDescr")]
public string ProductName { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlProductVersionDescr")]
public string ProductVersion { get; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlRecreatingHandleDescr")]
public bool RecreatingHandle { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlRegionDescr")]
public Region Region { get; public set; }
    [ObsoleteAttribute("This property has been deprecated. Please use RightToLeft instead. http://go.microsoft.com/fwlink/?linkid=14202")]
protected internal bool RenderRightToLeft { get; }
    internal bool RenderTransparent { get; }
    [SRDescriptionAttribute("ControlResizeRedrawDescr")]
protected bool ResizeRedraw { get; protected set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlRightDescr")]
public int Right { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlRightToLeftDescr")]
public RightToLeft RightToLeft { get; public set; }
    [EditorBrowsableAttribute("2")]
protected bool ScaleChildren { get; }
    [EditorBrowsableAttribute("2")]
public ISite Site { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlSizeDescr")]
public Size Size { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[MergablePropertyAttribute("False")]
[SRDescriptionAttribute("ControlTabIndexDescr")]
public int TabIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[DispIdAttribute("-516")]
[SRDescriptionAttribute("ControlTabStopDescr")]
public bool TabStop { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[BindableAttribute("True")]
[DispIdAttribute("-517")]
[SRDescriptionAttribute("ControlTextDescr")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlTopDescr")]
public int Top { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlTopLevelControlDescr")]
public Control TopLevelControl { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected internal bool ShowKeyboardCues { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected internal bool ShowFocusCues { get; }
    [DefaultValueAttribute("False")]
[EditorBrowsableAttribute("0")]
[BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ControlUseWaitCursorDescr")]
public bool UseWaitCursor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlVisibleDescr")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlWidthDescr")]
public int Width { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlWindowTargetDescr")]
public IWindowTarget WindowTarget { get; public set; }
    [BrowsableAttribute("False")]
public Size PreferredSize { get; }
    [SRDescriptionAttribute("ControlPaddingDescr")]
[SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
public Padding Padding { get; public set; }
    protected bool CanEnableIme { get; }
    protected ImeMode DefaultImeMode { get; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlIMEModeDescr")]
public ImeMode ImeMode { get; public set; }
    protected ImeMode ImeModeBase { get; protected set; }
    protected static ImeMode PropagatingImeMode { get; private set; }
    private static Control();
    public Control(string text);
    public Control(string text, int left, int top, int width, int height);
    public Control(Control parent, string text);
    public Control(Control parent, string text, int left, int top, int width, int height);
    public AccessibleObject get_AccessibilityObject();
    protected virtual AccessibleObject GetAccessibilityObjectById(int objectId);
    public string get_AccessibleDefaultActionDescription();
    public void set_AccessibleDefaultActionDescription(string value);
    public string get_AccessibleDescription();
    public void set_AccessibleDescription(string value);
    public string get_AccessibleName();
    public void set_AccessibleName(string value);
    public AccessibleRole get_AccessibleRole();
    public void set_AccessibleRole(AccessibleRole value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Point get_AutoScrollOffset();
    public virtual void set_AutoScrollOffset(Point value);
    protected void SetAutoSizeMode(AutoSizeMode mode);
    protected AutoSizeMode GetAutoSizeMode();
    public virtual LayoutEngine get_LayoutEngine();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    [EditorBrowsableAttribute("1")]
public void ResetBindings();
    public virtual BindingContext get_BindingContext();
    public virtual void set_BindingContext(BindingContext value);
    public void add_BindingContextChanged(EventHandler value);
    public void remove_BindingContextChanged(EventHandler value);
    public int get_Bottom();
    public sealed virtual Rectangle get_Bounds();
    public void set_Bounds(Rectangle value);
    public bool get_CanFocus();
    protected virtual bool get_CanRaiseEvents();
    public bool get_CanSelect();
    public bool get_Capture();
    public void set_Capture(bool value);
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    public static bool get_CheckForIllegalCrossThreadCalls();
    public static void set_CheckForIllegalCrossThreadCalls(bool value);
    public Rectangle get_ClientRectangle();
    public Size get_ClientSize();
    public void set_ClientSize(Size value);
    public void add_ClientSizeChanged(EventHandler value);
    public void remove_ClientSizeChanged(EventHandler value);
    public string get_CompanyName();
    public bool get_ContainsFocus();
    public virtual ContextMenu get_ContextMenu();
    public virtual void set_ContextMenu(ContextMenu value);
    public void add_ContextMenuChanged(EventHandler value);
    public void remove_ContextMenuChanged(EventHandler value);
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public void add_ContextMenuStripChanged(EventHandler value);
    public void remove_ContextMenuStripChanged(EventHandler value);
    public ControlCollection get_Controls();
    public bool get_Created();
    protected virtual CreateParams get_CreateParams();
    public virtual Cursor get_Cursor();
    public virtual void set_Cursor(Cursor value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    public sealed virtual ControlBindingsCollection get_DataBindings();
    public static Color get_DefaultBackColor();
    protected virtual Cursor get_DefaultCursor();
    public static Font get_DefaultFont();
    public static Color get_DefaultForeColor();
    protected virtual Padding get_DefaultMargin();
    protected virtual Size get_DefaultMaximumSize();
    protected virtual Size get_DefaultMinimumSize();
    protected virtual Padding get_DefaultPadding();
    protected virtual Size get_DefaultSize();
    public virtual Rectangle get_DisplayRectangle();
    public bool get_IsDisposed();
    public bool get_Disposing();
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public virtual bool get_Focused();
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    protected int get_FontHeight();
    protected void set_FontHeight(int value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
public virtual Size GetPreferredSize(Size proposedSize);
    public sealed virtual IntPtr get_Handle();
    public bool get_HasChildren();
    public int get_Height();
    public void set_Height(int value);
    public bool get_IsHandleCreated();
    public sealed virtual bool get_InvokeRequired();
    public bool get_IsAccessible();
    public void set_IsAccessible(bool value);
    public bool get_IsMirrored();
    public int get_Left();
    public void set_Left(int value);
    public Point get_Location();
    public void set_Location(Point value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public Padding get_Margin();
    public void set_Margin(Padding value);
    public void add_MarginChanged(EventHandler value);
    public void remove_MarginChanged(EventHandler value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public static Keys get_ModifierKeys();
    public static MouseButtons get_MouseButtons();
    public static Point get_MousePosition();
    public string get_Name();
    public void set_Name(string value);
    public Control get_Parent();
    public void set_Parent(Control value);
    public string get_ProductName();
    public string get_ProductVersion();
    public bool get_RecreatingHandle();
    public Region get_Region();
    public void set_Region(Region value);
    public void add_RegionChanged(EventHandler value);
    public void remove_RegionChanged(EventHandler value);
    protected internal bool get_RenderRightToLeft();
    internal bool get_RenderTransparent();
    protected bool get_ResizeRedraw();
    protected void set_ResizeRedraw(bool value);
    public int get_Right();
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    protected virtual bool get_ScaleChildren();
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public Size get_Size();
    public void set_Size(Size value);
    public void add_SizeChanged(EventHandler value);
    public void remove_SizeChanged(EventHandler value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public object get_Tag();
    public void set_Tag(object value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public int get_Top();
    public void set_Top(int value);
    public Control get_TopLevelControl();
    protected internal virtual bool get_ShowKeyboardCues();
    protected internal virtual bool get_ShowFocusCues();
    public bool get_UseWaitCursor();
    public void set_UseWaitCursor(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public void add_VisibleChanged(EventHandler value);
    public void remove_VisibleChanged(EventHandler value);
    public int get_Width();
    public void set_Width(int value);
    public IWindowTarget get_WindowTarget();
    public void set_WindowTarget(IWindowTarget value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_ControlAdded(ControlEventHandler value);
    public void remove_ControlAdded(ControlEventHandler value);
    public void add_ControlRemoved(ControlEventHandler value);
    public void remove_ControlRemoved(ControlEventHandler value);
    public void add_DragDrop(DragEventHandler value);
    public void remove_DragDrop(DragEventHandler value);
    public void add_DragEnter(DragEventHandler value);
    public void remove_DragEnter(DragEventHandler value);
    public void add_DragOver(DragEventHandler value);
    public void remove_DragOver(DragEventHandler value);
    public void add_DragLeave(EventHandler value);
    public void remove_DragLeave(EventHandler value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public void add_HandleCreated(EventHandler value);
    public void remove_HandleCreated(EventHandler value);
    public void add_HandleDestroyed(EventHandler value);
    public void remove_HandleDestroyed(EventHandler value);
    public void add_HelpRequested(HelpEventHandler value);
    public void remove_HelpRequested(HelpEventHandler value);
    public void add_Invalidated(InvalidateEventHandler value);
    public void remove_Invalidated(InvalidateEventHandler value);
    public Size get_PreferredSize();
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public void add_GotFocus(EventHandler value);
    public void remove_GotFocus(EventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_Layout(LayoutEventHandler value);
    public void remove_Layout(LayoutEventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public void add_LostFocus(EventHandler value);
    public void remove_LostFocus(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_MouseCaptureChanged(EventHandler value);
    public void remove_MouseCaptureChanged(EventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_MouseHover(EventHandler value);
    public void remove_MouseHover(EventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseWheel(MouseEventHandler value);
    public void remove_MouseWheel(MouseEventHandler value);
    public void add_Move(EventHandler value);
    public void remove_Move(EventHandler value);
    public void add_PreviewKeyDown(PreviewKeyDownEventHandler value);
    public void remove_PreviewKeyDown(PreviewKeyDownEventHandler value);
    public void add_Resize(EventHandler value);
    public void remove_Resize(EventHandler value);
    public void add_ChangeUICues(UICuesEventHandler value);
    public void remove_ChangeUICues(UICuesEventHandler value);
    public void add_StyleChanged(EventHandler value);
    public void remove_StyleChanged(EventHandler value);
    public void add_SystemColorsChanged(EventHandler value);
    public void remove_SystemColorsChanged(EventHandler value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected internal void AccessibilityNotifyClients(AccessibleEvents accEvent, int childID);
    [EditorBrowsableAttribute("2")]
protected void AccessibilityNotifyClients(AccessibleEvents accEvent, int objectID, int childID);
    public void add_ParentChanged(EventHandler value);
    public void remove_ParentChanged(EventHandler value);
    [EditorBrowsableAttribute("2")]
public IAsyncResult BeginInvoke(Delegate method);
    [EditorBrowsableAttribute("2")]
public sealed virtual IAsyncResult BeginInvoke(Delegate method, Object[] args);
    public void BringToFront();
    public bool Contains(Control ctl);
    [EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    [EditorBrowsableAttribute("2")]
protected virtual ControlCollection CreateControlsInstance();
    public Graphics CreateGraphics();
    [EditorBrowsableAttribute("2")]
protected virtual void CreateHandle();
    public void CreateControl();
    [EditorBrowsableAttribute("2")]
protected virtual void DefWndProc(Message& m);
    [EditorBrowsableAttribute("2")]
protected virtual void DestroyHandle();
    protected virtual void Dispose(bool disposing);
    public DragDropEffects DoDragDrop(object data, DragDropEffects allowedEffects);
    public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds);
    [EditorBrowsableAttribute("2")]
public sealed virtual object EndInvoke(IAsyncResult asyncResult);
    public Form FindForm();
    protected bool GetTopLevel();
    [EditorBrowsableAttribute("2")]
protected void RaiseKeyEvent(object key, KeyEventArgs e);
    [EditorBrowsableAttribute("2")]
protected void RaiseMouseEvent(object key, MouseEventArgs e);
    [EditorBrowsableAttribute("2")]
public bool Focus();
    [EditorBrowsableAttribute("2")]
public static Control FromChildHandle(IntPtr handle);
    [EditorBrowsableAttribute("2")]
public static Control FromHandle(IntPtr handle);
    public Control GetChildAtPoint(Point pt, GetChildAtPointSkip skipValue);
    public Control GetChildAtPoint(Point pt);
    public IContainerControl GetContainerControl();
    [EditorBrowsableAttribute("2")]
protected virtual Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified);
    public Control GetNextControl(Control ctl, bool forward);
    protected bool GetStyle(ControlStyles flag);
    public void Hide();
    [EditorBrowsableAttribute("2")]
protected virtual void InitLayout();
    public void Invalidate(Region region);
    public void Invalidate(Region region, bool invalidateChildren);
    public void Invalidate();
    public void Invalidate(bool invalidateChildren);
    public void Invalidate(Rectangle rc);
    public void Invalidate(Rectangle rc, bool invalidateChildren);
    public object Invoke(Delegate method);
    public sealed virtual object Invoke(Delegate method, Object[] args);
    protected void InvokePaint(Control c, PaintEventArgs e);
    protected void InvokePaintBackground(Control c, PaintEventArgs e);
    public static bool IsKeyLocked(Keys keyVal);
    protected virtual bool IsInputChar(char charCode);
    protected virtual bool IsInputKey(Keys keyData);
    public static bool IsMnemonic(char charCode, string text);
    [EditorBrowsableAttribute("2")]
protected virtual void NotifyInvalidate(Rectangle invalidatedArea);
    [EditorBrowsableAttribute("2")]
protected void InvokeOnClick(Control toInvoke, EventArgs e);
    protected virtual void OnAutoSizeChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnBackColorChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnBackgroundImageChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnBackgroundImageLayoutChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnBindingContextChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCausesValidationChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnContextMenuChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnContextMenuStripChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCursorChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDockChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnEnabledChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnFontChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnForeColorChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnNotifyMessage(Message m);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentBackColorChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentBackgroundImageChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentBindingContextChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentCursorChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentEnabledChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentFontChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentForeColorChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentRightToLeftChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentVisibleChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnPrint(PaintEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnTabIndexChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnTabStopChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnTextChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnVisibleChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnClick(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnClientSizeChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnControlAdded(ControlEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnControlRemoved(ControlEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateControl();
    [EditorBrowsableAttribute("2")]
protected virtual void OnHandleCreated(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLocationChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnHandleDestroyed(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDoubleClick(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDragEnter(DragEventArgs drgevent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDragOver(DragEventArgs drgevent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDragLeave(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDragDrop(DragEventArgs drgevent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnGiveFeedback(GiveFeedbackEventArgs gfbevent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnEnter(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected void InvokeGotFocus(Control toInvoke, EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnGotFocus(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnHelpRequested(HelpEventArgs hevent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnInvalidated(InvalidateEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnKeyDown(KeyEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnKeyPress(KeyPressEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnKeyUp(KeyEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLayout(LayoutEventArgs levent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLeave(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected void InvokeLostFocus(Control toInvoke, EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnMarginChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseClick(MouseEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseCaptureChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseDown(MouseEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseEnter(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseLeave(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseHover(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseMove(MouseEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseUp(MouseEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseWheel(MouseEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMove(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnPaddingChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnPaintBackground(PaintEventArgs pevent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnQueryContinueDrag(QueryContinueDragEventArgs qcdevent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRegionChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnResize(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnPreviewKeyDown(PreviewKeyDownEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnSizeChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnChangeUICues(UICuesEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnStyleChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnSystemColorsChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValidating(CancelEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValidated(EventArgs e);
    [EditorBrowsableAttribute("2")]
public void PerformLayout();
    [EditorBrowsableAttribute("2")]
public void PerformLayout(Control affectedControl, string affectedProperty);
    public Point PointToClient(Point p);
    public Point PointToScreen(Point p);
    public virtual bool PreProcessMessage(Message& msg);
    [EditorBrowsableAttribute("2")]
public PreProcessControlState PreProcessControlMessage(Message& msg);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected virtual bool ProcessDialogChar(char charCode);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual bool ProcessKeyEventArgs(Message& m);
    protected internal virtual bool ProcessKeyMessage(Message& m);
    protected virtual bool ProcessKeyPreview(Message& m);
    protected internal virtual bool ProcessMnemonic(char charCode);
    [EditorBrowsableAttribute("2")]
protected void RaiseDragEvent(object key, DragEventArgs e);
    [EditorBrowsableAttribute("2")]
protected void RaisePaintEvent(object key, PaintEventArgs e);
    [EditorBrowsableAttribute("1")]
public virtual void ResetBackColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetCursor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetFont();
    [EditorBrowsableAttribute("1")]
public virtual void ResetForeColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetRightToLeft();
    [EditorBrowsableAttribute("2")]
protected void RecreateHandle();
    public Rectangle RectangleToClient(Rectangle r);
    public Rectangle RectangleToScreen(Rectangle r);
    [EditorBrowsableAttribute("2")]
protected static bool ReflectMessage(IntPtr hWnd, Message& m);
    public virtual void Refresh();
    [EditorBrowsableAttribute("2")]
protected void ResetMouseEventArgs();
    public virtual void ResetText();
    public void ResumeLayout();
    public void ResumeLayout(bool performLayout);
    [ObsoleteAttribute("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")]
[EditorBrowsableAttribute("1")]
public void Scale(float ratio);
    [ObsoleteAttribute("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")]
[EditorBrowsableAttribute("1")]
public void Scale(float dx, float dy);
    [EditorBrowsableAttribute("2")]
public void Scale(SizeF factor);
    [EditorBrowsableAttribute("2")]
protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    public void Select();
    protected virtual void Select(bool directed, bool forward);
    public bool SelectNextControl(Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);
    public void SendToBack();
    public void SetBounds(int x, int y, int width, int height);
    public void SetBounds(int x, int y, int width, int height, BoundsSpecified specified);
    [EditorBrowsableAttribute("2")]
protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    [EditorBrowsableAttribute("2")]
protected virtual void SetClientSizeCore(int x, int y);
    [EditorBrowsableAttribute("2")]
protected virtual Size SizeFromClientSize(Size clientSize);
    [EditorBrowsableAttribute("2")]
protected void SetStyle(ControlStyles flag, bool value);
    protected void SetTopLevel(bool value);
    protected virtual void SetVisibleCore(bool value);
    [EditorBrowsableAttribute("2")]
protected HorizontalAlignment RtlTranslateAlignment(HorizontalAlignment align);
    [EditorBrowsableAttribute("2")]
protected LeftRightAlignment RtlTranslateAlignment(LeftRightAlignment align);
    [EditorBrowsableAttribute("2")]
protected ContentAlignment RtlTranslateAlignment(ContentAlignment align);
    [EditorBrowsableAttribute("2")]
protected HorizontalAlignment RtlTranslateHorizontal(HorizontalAlignment align);
    [EditorBrowsableAttribute("2")]
protected LeftRightAlignment RtlTranslateLeftRight(LeftRightAlignment align);
    [EditorBrowsableAttribute("2")]
protected internal ContentAlignment RtlTranslateContent(ContentAlignment align);
    public void Show();
    public void SuspendLayout();
    public void Update();
    [EditorBrowsableAttribute("2")]
protected internal void UpdateBounds();
    [EditorBrowsableAttribute("2")]
protected void UpdateBounds(int x, int y, int width, int height);
    [EditorBrowsableAttribute("2")]
protected void UpdateBounds(int x, int y, int width, int height, int clientWidth, int clientHeight);
    [EditorBrowsableAttribute("2")]
protected void UpdateZOrder();
    [EditorBrowsableAttribute("2")]
protected void UpdateStyles();
    protected virtual void WndProc(Message& m);
    private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs drgEvent);
    private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs drgEvent);
    private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs e);
    private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs drgEvent);
    protected virtual bool get_CanEnableIme();
    protected virtual ImeMode get_DefaultImeMode();
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    protected virtual ImeMode get_ImeModeBase();
    protected virtual void set_ImeModeBase(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    protected static ImeMode get_PropagatingImeMode();
    private static void set_PropagatingImeMode(ImeMode value);
    protected virtual void OnImeModeChanged(EventArgs e);
    [EditorBrowsableAttribute("1")]
public void ResetImeMode();
}
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
[EditorAttribute("System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[TypeConverterAttribute("System.Windows.Forms.Design.ControlBindingsConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.ControlBindingsCollection : BindingsCollection {
    public IBindableComponent BindableComponent { get; }
    public Control Control { get; }
    public Binding Item { get; }
    public DataSourceUpdateMode DefaultDataSourceUpdateMode { get; public set; }
    public ControlBindingsCollection(IBindableComponent control);
    public IBindableComponent get_BindableComponent();
    public Control get_Control();
    public Binding get_Item(string propertyName);
    public void Add(Binding binding);
    public Binding Add(string propertyName, object dataSource, string dataMember);
    public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled);
    public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode);
    public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue);
    public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue, string formatString);
    public Binding Add(string propertyName, object dataSource, string dataMember, bool formattingEnabled, DataSourceUpdateMode updateMode, object nullValue, string formatString, IFormatProvider formatInfo);
    protected virtual void AddCore(Binding dataBinding);
    public void Clear();
    protected virtual void ClearCore();
    public DataSourceUpdateMode get_DefaultDataSourceUpdateMode();
    public void set_DefaultDataSourceUpdateMode(DataSourceUpdateMode value);
    public void Remove(Binding binding);
    public void RemoveAt(int index);
    protected virtual void RemoveCore(Binding dataBinding);
}
public class System.Windows.Forms.ControlEventArgs : EventArgs {
    public Control Control { get; }
    public ControlEventArgs(Control control);
    public Control get_Control();
}
public class System.Windows.Forms.ControlEventHandler : MulticastDelegate {
    public ControlEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ControlEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ControlEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ControlPaint : object {
    public static Color ContrastControlDark { get; }
    private static ControlPaint();
    public static Color get_ContrastControlDark();
    public static IntPtr CreateHBitmap16Bit(Bitmap bitmap, Color background);
    public static IntPtr CreateHBitmapTransparencyMask(Bitmap bitmap);
    public static IntPtr CreateHBitmapColorMask(Bitmap bitmap, IntPtr monochromeMask);
    public static Color Dark(Color baseColor, float percOfDarkDark);
    public static Color Dark(Color baseColor);
    public static Color DarkDark(Color baseColor);
    public static void DrawBorder(Graphics graphics, Rectangle bounds, Color color, ButtonBorderStyle style);
    public static void DrawBorder(Graphics graphics, Rectangle bounds, Color leftColor, int leftWidth, ButtonBorderStyle leftStyle, Color topColor, int topWidth, ButtonBorderStyle topStyle, Color rightColor, int rightWidth, ButtonBorderStyle rightStyle, Color bottomColor, int bottomWidth, ButtonBorderStyle bottomStyle);
    public static void DrawBorder3D(Graphics graphics, Rectangle rectangle);
    public static void DrawBorder3D(Graphics graphics, Rectangle rectangle, Border3DStyle style);
    public static void DrawBorder3D(Graphics graphics, Rectangle rectangle, Border3DStyle style, Border3DSide sides);
    public static void DrawBorder3D(Graphics graphics, int x, int y, int width, int height);
    public static void DrawBorder3D(Graphics graphics, int x, int y, int width, int height, Border3DStyle style);
    public static void DrawBorder3D(Graphics graphics, int x, int y, int width, int height, Border3DStyle style, Border3DSide sides);
    public static void DrawButton(Graphics graphics, Rectangle rectangle, ButtonState state);
    public static void DrawButton(Graphics graphics, int x, int y, int width, int height, ButtonState state);
    public static void DrawCaptionButton(Graphics graphics, Rectangle rectangle, CaptionButton button, ButtonState state);
    public static void DrawCaptionButton(Graphics graphics, int x, int y, int width, int height, CaptionButton button, ButtonState state);
    public static void DrawCheckBox(Graphics graphics, Rectangle rectangle, ButtonState state);
    public static void DrawCheckBox(Graphics graphics, int x, int y, int width, int height, ButtonState state);
    public static void DrawComboButton(Graphics graphics, Rectangle rectangle, ButtonState state);
    public static void DrawComboButton(Graphics graphics, int x, int y, int width, int height, ButtonState state);
    public static void DrawContainerGrabHandle(Graphics graphics, Rectangle bounds);
    public static void DrawFocusRectangle(Graphics graphics, Rectangle rectangle);
    public static void DrawFocusRectangle(Graphics graphics, Rectangle rectangle, Color foreColor, Color backColor);
    public static void DrawGrabHandle(Graphics graphics, Rectangle rectangle, bool primary, bool enabled);
    public static void DrawGrid(Graphics graphics, Rectangle area, Size pixelsBetweenDots, Color backColor);
    public static void DrawImageDisabled(Graphics graphics, Image image, int x, int y, Color background);
    public static void DrawLockedFrame(Graphics graphics, Rectangle rectangle, bool primary);
    public static void DrawMenuGlyph(Graphics graphics, Rectangle rectangle, MenuGlyph glyph);
    public static void DrawMenuGlyph(Graphics graphics, Rectangle rectangle, MenuGlyph glyph, Color foreColor, Color backColor);
    public static void DrawMenuGlyph(Graphics graphics, int x, int y, int width, int height, MenuGlyph glyph);
    public static void DrawMenuGlyph(Graphics graphics, int x, int y, int width, int height, MenuGlyph glyph, Color foreColor, Color backColor);
    public static void DrawMixedCheckBox(Graphics graphics, Rectangle rectangle, ButtonState state);
    public static void DrawMixedCheckBox(Graphics graphics, int x, int y, int width, int height, ButtonState state);
    public static void DrawRadioButton(Graphics graphics, Rectangle rectangle, ButtonState state);
    public static void DrawRadioButton(Graphics graphics, int x, int y, int width, int height, ButtonState state);
    public static void DrawReversibleFrame(Rectangle rectangle, Color backColor, FrameStyle style);
    public static void DrawReversibleLine(Point start, Point end, Color backColor);
    public static void DrawScrollButton(Graphics graphics, Rectangle rectangle, ScrollButton button, ButtonState state);
    public static void DrawScrollButton(Graphics graphics, int x, int y, int width, int height, ScrollButton button, ButtonState state);
    public static void DrawSelectionFrame(Graphics graphics, bool active, Rectangle outsideRect, Rectangle insideRect, Color backColor);
    public static void DrawSizeGrip(Graphics graphics, Color backColor, Rectangle bounds);
    public static void DrawSizeGrip(Graphics graphics, Color backColor, int x, int y, int width, int height);
    public static void DrawStringDisabled(Graphics graphics, string s, Font font, Color color, RectangleF layoutRectangle, StringFormat format);
    public static void DrawStringDisabled(IDeviceContext dc, string s, Font font, Color color, Rectangle layoutRectangle, TextFormatFlags format);
    public static void DrawVisualStyleBorder(Graphics graphics, Rectangle bounds);
    public static void FillReversibleRectangle(Rectangle rectangle, Color backColor);
    public static Color Light(Color baseColor, float percOfLightLight);
    public static Color Light(Color baseColor);
    public static Color LightLight(Color baseColor);
}
[FlagsAttribute]
public enum System.Windows.Forms.ControlStyles : Enum {
    public int value__;
    public static ControlStyles ContainerControl;
    public static ControlStyles UserPaint;
    public static ControlStyles Opaque;
    public static ControlStyles ResizeRedraw;
    public static ControlStyles FixedWidth;
    public static ControlStyles FixedHeight;
    public static ControlStyles StandardClick;
    public static ControlStyles Selectable;
    public static ControlStyles UserMouse;
    public static ControlStyles SupportsTransparentBackColor;
    public static ControlStyles StandardDoubleClick;
    public static ControlStyles AllPaintingInWmPaint;
    public static ControlStyles CacheText;
    public static ControlStyles EnableNotifyMessage;
    [EditorBrowsableAttribute("1")]
public static ControlStyles DoubleBuffer;
    public static ControlStyles OptimizedDoubleBuffer;
    public static ControlStyles UseTextForAccessibility;
}
public enum System.Windows.Forms.ControlUpdateMode : Enum {
    public int value__;
    public static ControlUpdateMode OnPropertyChanged;
    public static ControlUpdateMode Never;
}
public class System.Windows.Forms.ConvertEventArgs : EventArgs {
    public object Value { get; public set; }
    public Type DesiredType { get; }
    public ConvertEventArgs(object value, Type desiredType);
    public object get_Value();
    public void set_Value(object value);
    public Type get_DesiredType();
}
public class System.Windows.Forms.ConvertEventHandler : MulticastDelegate {
    public ConvertEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ConvertEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ConvertEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.CreateParams : object {
    public string ClassName { get; public set; }
    public string Caption { get; public set; }
    public int Style { get; public set; }
    public int ExStyle { get; public set; }
    public int ClassStyle { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public int Width { get; public set; }
    public int Height { get; public set; }
    public IntPtr Parent { get; public set; }
    public object Param { get; public set; }
    public string get_ClassName();
    public void set_ClassName(string value);
    public string get_Caption();
    public void set_Caption(string value);
    public int get_Style();
    public void set_Style(int value);
    public int get_ExStyle();
    public void set_ExStyle(int value);
    public int get_ClassStyle();
    public void set_ClassStyle(int value);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public int get_Width();
    public void set_Width(int value);
    public int get_Height();
    public void set_Height(int value);
    public IntPtr get_Parent();
    public void set_Parent(IntPtr value);
    public object get_Param();
    public void set_Param(object value);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.CurrencyManager : BindingManagerBase {
    protected int listposition;
    protected Type finalType;
    public int Count { get; }
    public object Current { get; }
    public IList List { get; }
    public int Position { get; public set; }
    public void add_ItemChanged(ItemChangedEventHandler value);
    public void remove_ItemChanged(ItemChangedEventHandler value);
    public void add_ListChanged(ListChangedEventHandler value);
    public void remove_ListChanged(ListChangedEventHandler value);
    public virtual int get_Count();
    public virtual object get_Current();
    public IList get_List();
    public virtual int get_Position();
    public virtual void set_Position(int value);
    public virtual void AddNew();
    public virtual void CancelCurrentEdit();
    protected void CheckEmpty();
    public virtual void RemoveAt(int index);
    public virtual void EndCurrentEdit();
    protected internal virtual string GetListName(ArrayList listAccessors);
    public virtual PropertyDescriptorCollection GetItemProperties();
    public void add_MetaDataChanged(EventHandler value);
    public void remove_MetaDataChanged(EventHandler value);
    protected internal virtual void OnCurrentChanged(EventArgs e);
    protected internal virtual void OnCurrentItemChanged(EventArgs e);
    protected virtual void OnItemChanged(ItemChangedEventArgs e);
    protected internal void OnMetaDataChanged(EventArgs e);
    protected virtual void OnPositionChanged(EventArgs e);
    public void Refresh();
    public virtual void ResumeBinding();
    public virtual void SuspendBinding();
    protected virtual void UpdateIsBinding();
}
[TypeConverterAttribute("System.Windows.Forms.CursorConverter")]
[EditorAttribute("System.Drawing.Design.CursorEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Windows.Forms.Cursor : object {
    public static Rectangle Clip { get; public set; }
    public static Cursor Current { get; public set; }
    public IntPtr Handle { get; }
    public Point HotSpot { get; }
    public static Point Position { get; public set; }
    public Size Size { get; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    public Cursor(IntPtr handle);
    public Cursor(string fileName);
    public Cursor(Type type, string resource);
    public Cursor(Stream stream);
    private static Cursor();
    public static Rectangle get_Clip();
    public static void set_Clip(Rectangle value);
    public static Cursor get_Current();
    public static void set_Current(Cursor value);
    public IntPtr get_Handle();
    public Point get_HotSpot();
    public static Point get_Position();
    public static void set_Position(Point value);
    public Size get_Size();
    public object get_Tag();
    public void set_Tag(object value);
    public IntPtr CopyHandle();
    public sealed virtual void Dispose();
    public void Draw(Graphics g, Rectangle targetRect);
    public void DrawStretched(Graphics g, Rectangle targetRect);
    protected virtual override void Finalize();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
    public static void Hide();
    public static void Show();
    public virtual string ToString();
    public static bool op_Equality(Cursor left, Cursor right);
    public static bool op_Inequality(Cursor left, Cursor right);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class System.Windows.Forms.CursorConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Windows.Forms.Cursors : object {
    public static Cursor AppStarting { get; }
    public static Cursor Arrow { get; }
    public static Cursor Cross { get; }
    public static Cursor Default { get; }
    public static Cursor IBeam { get; }
    public static Cursor No { get; }
    public static Cursor SizeAll { get; }
    public static Cursor SizeNESW { get; }
    public static Cursor SizeNS { get; }
    public static Cursor SizeNWSE { get; }
    public static Cursor SizeWE { get; }
    public static Cursor UpArrow { get; }
    public static Cursor WaitCursor { get; }
    public static Cursor Help { get; }
    public static Cursor HSplit { get; }
    public static Cursor VSplit { get; }
    public static Cursor NoMove2D { get; }
    public static Cursor NoMoveHoriz { get; }
    public static Cursor NoMoveVert { get; }
    public static Cursor PanEast { get; }
    public static Cursor PanNE { get; }
    public static Cursor PanNorth { get; }
    public static Cursor PanNW { get; }
    public static Cursor PanSE { get; }
    public static Cursor PanSouth { get; }
    public static Cursor PanSW { get; }
    public static Cursor PanWest { get; }
    public static Cursor Hand { get; }
    private static Cursors();
    public static Cursor get_AppStarting();
    public static Cursor get_Arrow();
    public static Cursor get_Cross();
    public static Cursor get_Default();
    public static Cursor get_IBeam();
    public static Cursor get_No();
    public static Cursor get_SizeAll();
    public static Cursor get_SizeNESW();
    public static Cursor get_SizeNS();
    public static Cursor get_SizeNWSE();
    public static Cursor get_SizeWE();
    public static Cursor get_UpArrow();
    public static Cursor get_WaitCursor();
    public static Cursor get_Help();
    public static Cursor get_HSplit();
    public static Cursor get_VSplit();
    public static Cursor get_NoMove2D();
    public static Cursor get_NoMoveHoriz();
    public static Cursor get_NoMoveVert();
    public static Cursor get_PanEast();
    public static Cursor get_PanNE();
    public static Cursor get_PanNorth();
    public static Cursor get_PanNW();
    public static Cursor get_PanSE();
    public static Cursor get_PanSouth();
    public static Cursor get_PanSW();
    public static Cursor get_PanWest();
    public static Cursor get_Hand();
}
public class System.Windows.Forms.DataFormats : object {
    public static string Text;
    public static string UnicodeText;
    public static string Dib;
    public static string Bitmap;
    public static string EnhancedMetafile;
    public static string MetafilePict;
    public static string SymbolicLink;
    public static string Dif;
    public static string Tiff;
    public static string OemText;
    public static string Palette;
    public static string PenData;
    public static string Riff;
    public static string WaveAudio;
    public static string FileDrop;
    public static string Locale;
    public static string Html;
    public static string Rtf;
    public static string CommaSeparatedValue;
    public static string StringFormat;
    public static string Serializable;
    private static DataFormats();
    public static Format GetFormat(string format);
    public static Format GetFormat(int id);
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.DataGridDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("DataSource")]
[DefaultEventAttribute("Navigate")]
[ComplexBindingPropertiesAttribute("DataSource", "DataMember")]
public class System.Windows.Forms.DataGrid : Control {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridAllowSortingDescr")]
public bool AllowSorting { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridAlternatingBackColorDescr")]
public Color AlternatingBackColor { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("ControlBackColorDescr")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("ControlForeColorDescr")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("DataGridBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridCaptionBackColorDescr")]
public Color CaptionBackColor { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridCaptionForeColorDescr")]
public Color CaptionForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("")]
[SRDescriptionAttribute("DataGridCaptionFontDescr")]
public Font CaptionFont { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DataGridCaptionTextDescr")]
public string CaptionText { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatDisplay")]
[SRDescriptionAttribute("DataGridCaptionVisibleDescr")]
public bool CaptionVisible { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DataGridCurrentCellDescr")]
public DataGridCell CurrentCell { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridSelectionBackColorDescr")]
public Color SelectionBackColor { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridSelectionForeColorDescr")]
public Color SelectionForeColor { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SRDescriptionAttribute("DataGridDataSourceDescr")]
public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DataGridDataMemberDescr")]
public string DataMember { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[SRDescriptionAttribute("DataGridListManagerDescr")]
protected internal CurrencyManager ListManager { get; protected internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[SRDescriptionAttribute("DataGridSelectedIndexDescr")]
public int CurrentRowIndex { get; public set; }
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DataGridGridTablesDescr")]
public GridTableStylesCollection TableStyles { get; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridGridLineColorDescr")]
public Color GridLineColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DataGridGridLineStyleDescr")]
public DataGridLineStyle GridLineStyle { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatDisplay")]
[SRDescriptionAttribute("DataGridParentRowsLabelStyleDescr")]
public DataGridParentRowsLabelStyle ParentRowsLabelStyle { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DataGridFirstVisibleColumnDescr")]
public int FirstVisibleColumn { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridFlatModeDescr")]
public bool FlatMode { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridHeaderBackColorDescr")]
public Color HeaderBackColor { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridBackgroundColorDescr")]
public Color BackgroundColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridHeaderFontDescr")]
public Font HeaderFont { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridHeaderForeColorDescr")]
public Color HeaderForeColor { get; public set; }
    [SRDescriptionAttribute("DataGridHorizScrollBarDescr")]
protected ScrollBar HorizScrollBar { get; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridLinkColorDescr")]
public Color LinkColor { get; public set; }
    [SRDescriptionAttribute("DataGridLinkHoverColorDescr")]
[SRCategoryAttribute("CatColors")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color LinkHoverColor { get; public set; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridNavigationModeDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool AllowNavigation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Cursor Cursor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridParentRowsBackColorDescr")]
public Color ParentRowsBackColor { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridParentRowsForeColorDescr")]
public Color ParentRowsForeColor { get; public set; }
    [DefaultValueAttribute("75")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridPreferredColumnWidthDescr")]
[TypeConverterAttribute("System.Windows.Forms.DataGridPreferredColumnWidthTypeConverter")]
public int PreferredColumnWidth { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridPreferredRowHeightDescr")]
public int PreferredRowHeight { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [SRCategoryAttribute("CatDisplay")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridColumnHeadersVisibleDescr")]
public bool ColumnHeadersVisible { get; public set; }
    [SRCategoryAttribute("CatDisplay")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridParentRowsVisibleDescr")]
public bool ParentRowsVisible { get; public set; }
    [SRCategoryAttribute("CatDisplay")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridRowHeadersVisibleDescr")]
public bool RowHeadersVisible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("35")]
[SRDescriptionAttribute("DataGridRowHeaderWidthDescr")]
public int RowHeaderWidth { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[SRDescriptionAttribute("DataGridVertScrollBarDescr")]
protected ScrollBar VertScrollBar { get; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DataGridVisibleColumnCountDescr")]
public int VisibleColumnCount { get; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("DataGridVisibleRowCountDescr")]
public int VisibleRowCount { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public ISite Site { get; public set; }
    private static DataGrid();
    public bool get_AllowSorting();
    public void set_AllowSorting(bool value);
    public Color get_AlternatingBackColor();
    public void set_AlternatingBackColor(Color value);
    public void ResetAlternatingBackColor();
    protected virtual bool ShouldSerializeAlternatingBackColor();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual void ResetBackColor();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual void ResetForeColor();
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public void add_BorderStyleChanged(EventHandler value);
    public void remove_BorderStyleChanged(EventHandler value);
    protected virtual Size get_DefaultSize();
    public Color get_CaptionBackColor();
    public void set_CaptionBackColor(Color value);
    protected virtual bool ShouldSerializeCaptionBackColor();
    public Color get_CaptionForeColor();
    public void set_CaptionForeColor(Color value);
    protected virtual bool ShouldSerializeCaptionForeColor();
    public Font get_CaptionFont();
    public void set_CaptionFont(Font value);
    public string get_CaptionText();
    public void set_CaptionText(string value);
    public bool get_CaptionVisible();
    public void set_CaptionVisible(bool value);
    public void add_CaptionVisibleChanged(EventHandler value);
    public void remove_CaptionVisibleChanged(EventHandler value);
    public DataGridCell get_CurrentCell();
    public void set_CurrentCell(DataGridCell value);
    public void add_CurrentCellChanged(EventHandler value);
    public void remove_CurrentCellChanged(EventHandler value);
    public Color get_SelectionBackColor();
    public void set_SelectionBackColor(Color value);
    protected bool ShouldSerializeSelectionBackColor();
    public void ResetSelectionBackColor();
    public Color get_SelectionForeColor();
    public void set_SelectionForeColor(Color value);
    protected virtual bool ShouldSerializeSelectionForeColor();
    public void ResetSelectionForeColor();
    public object get_DataSource();
    public void set_DataSource(object value);
    public void add_DataSourceChanged(EventHandler value);
    public void remove_DataSourceChanged(EventHandler value);
    public string get_DataMember();
    public void set_DataMember(string value);
    public void SetDataBinding(object dataSource, string dataMember);
    protected internal CurrencyManager get_ListManager();
    protected internal void set_ListManager(CurrencyManager value);
    public int get_CurrentRowIndex();
    public void set_CurrentRowIndex(int value);
    public GridTableStylesCollection get_TableStyles();
    public Color get_GridLineColor();
    public void set_GridLineColor(Color value);
    protected virtual bool ShouldSerializeGridLineColor();
    public void ResetGridLineColor();
    public DataGridLineStyle get_GridLineStyle();
    public void set_GridLineStyle(DataGridLineStyle value);
    public DataGridParentRowsLabelStyle get_ParentRowsLabelStyle();
    public void set_ParentRowsLabelStyle(DataGridParentRowsLabelStyle value);
    public void add_ParentRowsLabelStyleChanged(EventHandler value);
    public void remove_ParentRowsLabelStyleChanged(EventHandler value);
    public int get_FirstVisibleColumn();
    public bool get_FlatMode();
    public void set_FlatMode(bool value);
    public void add_FlatModeChanged(EventHandler value);
    public void remove_FlatModeChanged(EventHandler value);
    public Color get_HeaderBackColor();
    public void set_HeaderBackColor(Color value);
    protected virtual bool ShouldSerializeHeaderBackColor();
    public void ResetHeaderBackColor();
    protected virtual bool ShouldSerializeBackgroundColor();
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public void add_BackgroundColorChanged(EventHandler value);
    public void remove_BackgroundColorChanged(EventHandler value);
    public Font get_HeaderFont();
    public void set_HeaderFont(Font value);
    protected bool ShouldSerializeHeaderFont();
    public void ResetHeaderFont();
    public Color get_HeaderForeColor();
    public void set_HeaderForeColor(Color value);
    protected virtual bool ShouldSerializeHeaderForeColor();
    public void ResetHeaderForeColor();
    protected ScrollBar get_HorizScrollBar();
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    public void ResetLinkColor();
    public Color get_LinkHoverColor();
    public void set_LinkHoverColor(Color value);
    protected virtual bool ShouldSerializeLinkHoverColor();
    public void ResetLinkHoverColor();
    public bool get_AllowNavigation();
    public void set_AllowNavigation(bool value);
    public void add_AllowNavigationChanged(EventHandler value);
    public void remove_AllowNavigationChanged(EventHandler value);
    public virtual Cursor get_Cursor();
    public virtual void set_Cursor(Cursor value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public Color get_ParentRowsBackColor();
    public void set_ParentRowsBackColor(Color value);
    protected virtual bool ShouldSerializeParentRowsBackColor();
    public Color get_ParentRowsForeColor();
    public void set_ParentRowsForeColor(Color value);
    protected virtual bool ShouldSerializeParentRowsForeColor();
    public int get_PreferredColumnWidth();
    public void set_PreferredColumnWidth(int value);
    public int get_PreferredRowHeight();
    public void set_PreferredRowHeight(int value);
    protected bool ShouldSerializePreferredRowHeight();
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public void add_ReadOnlyChanged(EventHandler value);
    public void remove_ReadOnlyChanged(EventHandler value);
    public bool get_ColumnHeadersVisible();
    public void set_ColumnHeadersVisible(bool value);
    public bool get_ParentRowsVisible();
    public void set_ParentRowsVisible(bool value);
    public void add_ParentRowsVisibleChanged(EventHandler value);
    public void remove_ParentRowsVisibleChanged(EventHandler value);
    public bool get_RowHeadersVisible();
    public void set_RowHeadersVisible(bool value);
    public int get_RowHeaderWidth();
    public void set_RowHeaderWidth(int value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    protected ScrollBar get_VertScrollBar();
    public int get_VisibleColumnCount();
    public int get_VisibleRowCount();
    public object get_Item(int rowIndex, int columnIndex);
    public void set_Item(int rowIndex, int columnIndex, object value);
    public object get_Item(DataGridCell cell);
    public void set_Item(DataGridCell cell, object value);
    protected virtual void OnBorderStyleChanged(EventArgs e);
    protected virtual void OnCaptionVisibleChanged(EventArgs e);
    protected virtual void OnCurrentCellChanged(EventArgs e);
    protected virtual void OnFlatModeChanged(EventArgs e);
    protected virtual void OnBackgroundColorChanged(EventArgs e);
    protected virtual void OnAllowNavigationChanged(EventArgs e);
    protected virtual void OnParentRowsVisibleChanged(EventArgs e);
    protected virtual void OnParentRowsLabelStyleChanged(EventArgs e);
    protected virtual void OnReadOnlyChanged(EventArgs e);
    protected void OnNavigate(NavigateEventArgs e);
    protected void OnRowHeaderClick(EventArgs e);
    protected void OnScroll(EventArgs e);
    protected virtual void GridHScrolled(object sender, ScrollEventArgs se);
    protected virtual void GridVScrolled(object sender, ScrollEventArgs se);
    protected void OnBackButtonClicked(object sender, EventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnBindingContextChanged(EventArgs e);
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected void OnShowParentDetailsButtonClicked(object sender, EventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs ebe);
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnEnter(EventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs ke);
    protected virtual void OnKeyPress(KeyPressEventArgs kpe);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnPaint(PaintEventArgs pe);
    protected virtual void OnResize(EventArgs e);
    public void add_Navigate(NavigateEventHandler value);
    public void remove_Navigate(NavigateEventHandler value);
    protected void add_RowHeaderClick(EventHandler value);
    protected void remove_RowHeaderClick(EventHandler value);
    public void add_Scroll(EventHandler value);
    public void remove_Scroll(EventHandler value);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public sealed virtual bool BeginEdit(DataGridColumnStyle gridColumn, int rowNumber);
    public sealed virtual void BeginInit();
    public void Collapse(int row);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void Dispose(bool disposing);
    public sealed virtual bool EndEdit(DataGridColumnStyle gridColumn, int rowNumber, bool shouldAbort);
    protected internal virtual void ColumnStartedEditing(Rectangle bounds);
    protected internal virtual void ColumnStartedEditing(Control editingControl);
    public void Expand(int row);
    protected virtual DataGridColumnStyle CreateGridColumn(PropertyDescriptor prop, bool isDefault);
    protected virtual DataGridColumnStyle CreateGridColumn(PropertyDescriptor prop);
    public sealed virtual void EndInit();
    public Rectangle GetCurrentCellBounds();
    public Rectangle GetCellBounds(int row, int col);
    public Rectangle GetCellBounds(DataGridCell dgc);
    public HitTestInfo HitTest(int x, int y);
    public HitTestInfo HitTest(Point position);
    public bool IsExpanded(int rowNumber);
    public bool IsSelected(int row);
    public void NavigateBack();
    public void NavigateTo(int rowNumber, string relationName);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected bool ProcessGridKey(KeyEventArgs ke);
    protected virtual bool ProcessKeyPreview(Message& m);
    protected bool ProcessTabKey(Keys keyData);
    protected virtual void CancelEditing();
    public void add_BackButtonClick(EventHandler value);
    public void remove_BackButtonClick(EventHandler value);
    public void add_ShowParentDetailsButtonClick(EventHandler value);
    public void remove_ShowParentDetailsButtonClick(EventHandler value);
    protected void ResetSelection();
    public void Select(int row);
    public void SubObjectsSiteChange(bool site);
    public void UnSelect(int row);
    protected virtual string GetOutputTextDelimiter();
}
public class System.Windows.Forms.DataGridBoolColumn : DataGridColumnStyle {
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("True")]
public object TrueValue { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
[DefaultValueAttribute("False")]
public object FalseValue { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object NullValue { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridBoolColumnAllowNullValue")]
public bool AllowNull { get; public set; }
    public DataGridBoolColumn(PropertyDescriptor prop);
    public DataGridBoolColumn(PropertyDescriptor prop, bool isDefault);
    private static DataGridBoolColumn();
    public object get_TrueValue();
    public void set_TrueValue(object value);
    public void add_TrueValueChanged(EventHandler value);
    public void remove_TrueValueChanged(EventHandler value);
    public object get_FalseValue();
    public void set_FalseValue(object value);
    public void add_FalseValueChanged(EventHandler value);
    public void remove_FalseValueChanged(EventHandler value);
    public object get_NullValue();
    public void set_NullValue(object value);
    protected internal virtual void ConcedeFocus();
    protected internal virtual object GetColumnValueAtRow(CurrencyManager lm, int row);
    protected internal virtual void SetColumnValueAtRow(CurrencyManager lm, int row, object value);
    protected internal virtual Size GetPreferredSize(Graphics g, object value);
    protected internal virtual int GetMinimumHeight();
    protected internal virtual int GetPreferredHeight(Graphics g, object value);
    protected internal virtual void Abort(int rowNum);
    protected internal virtual bool Commit(CurrencyManager dataSource, int rowNum);
    protected internal virtual void Edit(CurrencyManager source, int rowNum, Rectangle bounds, bool readOnly, string displayText, bool cellIsVisible);
    protected internal virtual void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum);
    protected internal virtual void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, bool alignToRight);
    protected internal virtual void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, Brush backBrush, Brush foreBrush, bool alignToRight);
    public bool get_AllowNull();
    public void set_AllowNull(bool value);
    public void add_AllowNullChanged(EventHandler value);
    public void remove_AllowNullChanged(EventHandler value);
    protected internal virtual void EnterNullValue();
}
public class System.Windows.Forms.DataGridCell : ValueType {
    private int rowNumber;
    private int columnNumber;
    public int ColumnNumber { get; public set; }
    public int RowNumber { get; public set; }
    public DataGridCell(int r, int c);
    public int get_ColumnNumber();
    public void set_ColumnNumber(int value);
    public int get_RowNumber();
    public void set_RowNumber(int value);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("Header")]
public abstract class System.Windows.Forms.DataGridColumnStyle : Component {
    [SRCategoryAttribute("CatDisplay")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public HorizontalAlignment Alignment { get; public set; }
    [BrowsableAttribute("False")]
public AccessibleObject HeaderAccessibleObject { get; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public PropertyDescriptor PropertyDescriptor { get; public set; }
    [BrowsableAttribute("False")]
public DataGridTableStyle DataGridTableStyle { get; }
    protected int FontHeight { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatDisplay")]
public string HeaderText { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataGridColumnStyleMappingNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
public string MappingName { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatDisplay")]
public string NullText { get; public set; }
    [DefaultValueAttribute("False")]
public bool ReadOnly { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("100")]
public int Width { get; public set; }
    public DataGridColumnStyle(PropertyDescriptor prop);
    private static DataGridColumnStyle();
    public virtual HorizontalAlignment get_Alignment();
    public virtual void set_Alignment(HorizontalAlignment value);
    public void add_AlignmentChanged(EventHandler value);
    public void remove_AlignmentChanged(EventHandler value);
    protected internal virtual void UpdateUI(CurrencyManager source, int rowNum, string displayText);
    public AccessibleObject get_HeaderAccessibleObject();
    public virtual PropertyDescriptor get_PropertyDescriptor();
    public virtual void set_PropertyDescriptor(PropertyDescriptor value);
    public void add_PropertyDescriptorChanged(EventHandler value);
    public void remove_PropertyDescriptorChanged(EventHandler value);
    protected virtual AccessibleObject CreateHeaderAccessibleObject();
    protected virtual void SetDataGrid(DataGrid value);
    protected virtual void SetDataGridInColumn(DataGrid value);
    public virtual DataGridTableStyle get_DataGridTableStyle();
    protected int get_FontHeight();
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public virtual string get_HeaderText();
    public virtual void set_HeaderText(string value);
    public void add_HeaderTextChanged(EventHandler value);
    public void remove_HeaderTextChanged(EventHandler value);
    public string get_MappingName();
    public void set_MappingName(string value);
    public void add_MappingNameChanged(EventHandler value);
    public void remove_MappingNameChanged(EventHandler value);
    public void ResetHeaderText();
    public virtual string get_NullText();
    public virtual void set_NullText(string value);
    public void add_NullTextChanged(EventHandler value);
    public void remove_NullTextChanged(EventHandler value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public void add_ReadOnlyChanged(EventHandler value);
    public void remove_ReadOnlyChanged(EventHandler value);
    public virtual int get_Width();
    public virtual void set_Width(int value);
    public void add_WidthChanged(EventHandler value);
    public void remove_WidthChanged(EventHandler value);
    protected void BeginUpdate();
    protected void EndUpdate();
    protected internal abstract virtual Size GetPreferredSize(Graphics g, object value);
    protected internal abstract virtual int GetMinimumHeight();
    protected internal abstract virtual int GetPreferredHeight(Graphics g, object value);
    protected internal virtual object GetColumnValueAtRow(CurrencyManager source, int rowNum);
    protected virtual void Invalidate();
    protected void CheckValidDataSource(CurrencyManager value);
    protected internal abstract virtual void Abort(int rowNum);
    protected internal abstract virtual bool Commit(CurrencyManager dataSource, int rowNum);
    protected internal virtual void Edit(CurrencyManager source, int rowNum, Rectangle bounds, bool readOnly);
    protected internal virtual void Edit(CurrencyManager source, int rowNum, Rectangle bounds, bool readOnly, string displayText);
    protected internal abstract virtual void Edit(CurrencyManager source, int rowNum, Rectangle bounds, bool readOnly, string displayText, bool cellIsVisible);
    protected internal virtual void EnterNullValue();
    protected internal virtual void ConcedeFocus();
    protected internal abstract virtual void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum);
    protected internal abstract virtual void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, bool alignToRight);
    protected internal virtual void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, Brush backBrush, Brush foreBrush, bool alignToRight);
    protected internal virtual void SetColumnValueAtRow(CurrencyManager source, int rowNum, object value);
    protected internal virtual void ColumnStartedEditing(Control editingControl);
    private sealed virtual override void System.Windows.Forms.IDataGridColumnStyleEditingNotificationService.ColumnStartedEditing(Control editingControl);
    protected internal virtual void ReleaseHostedControl();
}
public enum System.Windows.Forms.DataGridLineStyle : Enum {
    public int value__;
    public static DataGridLineStyle None;
    public static DataGridLineStyle Solid;
}
public enum System.Windows.Forms.DataGridParentRowsLabelStyle : Enum {
    public int value__;
    public static DataGridParentRowsLabelStyle None;
    public static DataGridParentRowsLabelStyle TableName;
    public static DataGridParentRowsLabelStyle ColumnName;
    public static DataGridParentRowsLabelStyle Both;
}
public class System.Windows.Forms.DataGridPreferredColumnWidthTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class System.Windows.Forms.DataGridTableStyle : Component {
    public static DataGridTableStyle DefaultTableStyle;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridAllowSortingDescr")]
public bool AllowSorting { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridAlternatingBackColorDescr")]
public Color AlternatingBackColor { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("ControlBackColorDescr")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("ControlForeColorDescr")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridGridLineColorDescr")]
public Color GridLineColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DataGridGridLineStyleDescr")]
public DataGridLineStyle GridLineStyle { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridHeaderBackColorDescr")]
public Color HeaderBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("")]
[SRDescriptionAttribute("DataGridHeaderFontDescr")]
public Font HeaderFont { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridHeaderForeColorDescr")]
public Color HeaderForeColor { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridLinkColorDescr")]
public Color LinkColor { get; public set; }
    [SRDescriptionAttribute("DataGridLinkHoverColorDescr")]
[SRCategoryAttribute("CatColors")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color LinkHoverColor { get; public set; }
    [DefaultValueAttribute("75")]
[SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DataGridPreferredColumnWidthDescr")]
[TypeConverterAttribute("System.Windows.Forms.DataGridPreferredColumnWidthTypeConverter")]
public int PreferredColumnWidth { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DataGridPreferredRowHeightDescr")]
public int PreferredRowHeight { get; public set; }
    [SRCategoryAttribute("CatDisplay")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridColumnHeadersVisibleDescr")]
public bool ColumnHeadersVisible { get; public set; }
    [SRCategoryAttribute("CatDisplay")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridRowHeadersVisibleDescr")]
public bool RowHeadersVisible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("35")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DataGridRowHeaderWidthDescr")]
public int RowHeaderWidth { get; public set; }
    [SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridSelectionBackColorDescr")]
public Color SelectionBackColor { get; public set; }
    [DescriptionAttribute("The foreground color for the current data grid row")]
[SRCategoryAttribute("CatColors")]
[SRDescriptionAttribute("DataGridSelectionForeColorDescr")]
public Color SelectionForeColor { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataGridTableStyleMappingNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
public string MappingName { get; public set; }
    [LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
public GridColumnStylesCollection GridColumnStyles { get; }
    [BrowsableAttribute("False")]
public DataGrid DataGrid { get; public set; }
    [DefaultValueAttribute("False")]
public bool ReadOnly { get; public set; }
    public DataGridTableStyle(bool isDefaultTableStyle);
    public DataGridTableStyle(CurrencyManager listManager);
    private static DataGridTableStyle();
    public bool get_AllowSorting();
    public void set_AllowSorting(bool value);
    public void add_AllowSortingChanged(EventHandler value);
    public void remove_AllowSortingChanged(EventHandler value);
    public Color get_AlternatingBackColor();
    public void set_AlternatingBackColor(Color value);
    public void add_AlternatingBackColorChanged(EventHandler value);
    public void remove_AlternatingBackColorChanged(EventHandler value);
    public void ResetAlternatingBackColor();
    protected virtual bool ShouldSerializeAlternatingBackColor();
    protected bool ShouldSerializeBackColor();
    protected bool ShouldSerializeForeColor();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public void ResetBackColor();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public void ResetForeColor();
    public Color get_GridLineColor();
    public void set_GridLineColor(Color value);
    public void add_GridLineColorChanged(EventHandler value);
    public void remove_GridLineColorChanged(EventHandler value);
    protected virtual bool ShouldSerializeGridLineColor();
    public void ResetGridLineColor();
    public DataGridLineStyle get_GridLineStyle();
    public void set_GridLineStyle(DataGridLineStyle value);
    public void add_GridLineStyleChanged(EventHandler value);
    public void remove_GridLineStyleChanged(EventHandler value);
    public Color get_HeaderBackColor();
    public void set_HeaderBackColor(Color value);
    public void add_HeaderBackColorChanged(EventHandler value);
    public void remove_HeaderBackColorChanged(EventHandler value);
    protected virtual bool ShouldSerializeHeaderBackColor();
    public void ResetHeaderBackColor();
    public Font get_HeaderFont();
    public void set_HeaderFont(Font value);
    public void add_HeaderFontChanged(EventHandler value);
    public void remove_HeaderFontChanged(EventHandler value);
    public void ResetHeaderFont();
    public Color get_HeaderForeColor();
    public void set_HeaderForeColor(Color value);
    public void add_HeaderForeColorChanged(EventHandler value);
    public void remove_HeaderForeColorChanged(EventHandler value);
    protected virtual bool ShouldSerializeHeaderForeColor();
    public void ResetHeaderForeColor();
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    public void add_LinkColorChanged(EventHandler value);
    public void remove_LinkColorChanged(EventHandler value);
    protected virtual bool ShouldSerializeLinkColor();
    public void ResetLinkColor();
    public Color get_LinkHoverColor();
    public void set_LinkHoverColor(Color value);
    public void add_LinkHoverColorChanged(EventHandler value);
    public void remove_LinkHoverColorChanged(EventHandler value);
    protected virtual bool ShouldSerializeLinkHoverColor();
    public void ResetLinkHoverColor();
    public int get_PreferredColumnWidth();
    public void set_PreferredColumnWidth(int value);
    public void add_PreferredColumnWidthChanged(EventHandler value);
    public void remove_PreferredColumnWidthChanged(EventHandler value);
    public int get_PreferredRowHeight();
    public void set_PreferredRowHeight(int value);
    public void add_PreferredRowHeightChanged(EventHandler value);
    public void remove_PreferredRowHeightChanged(EventHandler value);
    protected bool ShouldSerializePreferredRowHeight();
    public bool get_ColumnHeadersVisible();
    public void set_ColumnHeadersVisible(bool value);
    public void add_ColumnHeadersVisibleChanged(EventHandler value);
    public void remove_ColumnHeadersVisibleChanged(EventHandler value);
    public bool get_RowHeadersVisible();
    public void set_RowHeadersVisible(bool value);
    public void add_RowHeadersVisibleChanged(EventHandler value);
    public void remove_RowHeadersVisibleChanged(EventHandler value);
    public int get_RowHeaderWidth();
    public void set_RowHeaderWidth(int value);
    public void add_RowHeaderWidthChanged(EventHandler value);
    public void remove_RowHeaderWidthChanged(EventHandler value);
    public Color get_SelectionBackColor();
    public void set_SelectionBackColor(Color value);
    public void add_SelectionBackColorChanged(EventHandler value);
    public void remove_SelectionBackColorChanged(EventHandler value);
    protected bool ShouldSerializeSelectionBackColor();
    public void ResetSelectionBackColor();
    public Color get_SelectionForeColor();
    public void set_SelectionForeColor(Color value);
    public void add_SelectionForeColorChanged(EventHandler value);
    public void remove_SelectionForeColorChanged(EventHandler value);
    protected virtual bool ShouldSerializeSelectionForeColor();
    public void ResetSelectionForeColor();
    protected internal virtual DataGridColumnStyle CreateGridColumn(PropertyDescriptor prop);
    protected internal virtual DataGridColumnStyle CreateGridColumn(PropertyDescriptor prop, bool isDefault);
    public string get_MappingName();
    public void set_MappingName(string value);
    public void add_MappingNameChanged(EventHandler value);
    public void remove_MappingNameChanged(EventHandler value);
    public virtual GridColumnStylesCollection get_GridColumnStyles();
    public virtual DataGrid get_DataGrid();
    public virtual void set_DataGrid(DataGrid value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public void add_ReadOnlyChanged(EventHandler value);
    public void remove_ReadOnlyChanged(EventHandler value);
    public sealed virtual bool BeginEdit(DataGridColumnStyle gridColumn, int rowNumber);
    public sealed virtual bool EndEdit(DataGridColumnStyle gridColumn, int rowNumber, bool shouldAbort);
    protected virtual void OnReadOnlyChanged(EventArgs e);
    protected virtual void OnMappingNameChanged(EventArgs e);
    protected virtual void OnAlternatingBackColorChanged(EventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnAllowSortingChanged(EventArgs e);
    protected virtual void OnGridLineColorChanged(EventArgs e);
    protected virtual void OnGridLineStyleChanged(EventArgs e);
    protected virtual void OnHeaderBackColorChanged(EventArgs e);
    protected virtual void OnHeaderFontChanged(EventArgs e);
    protected virtual void OnHeaderForeColorChanged(EventArgs e);
    protected virtual void OnLinkColorChanged(EventArgs e);
    protected virtual void OnLinkHoverColorChanged(EventArgs e);
    protected virtual void OnPreferredRowHeightChanged(EventArgs e);
    protected virtual void OnPreferredColumnWidthChanged(EventArgs e);
    protected virtual void OnColumnHeadersVisibleChanged(EventArgs e);
    protected virtual void OnRowHeadersVisibleChanged(EventArgs e);
    protected virtual void OnRowHeaderWidthChanged(EventArgs e);
    protected virtual void OnSelectionForeColorChanged(EventArgs e);
    protected virtual void OnSelectionBackColorChanged(EventArgs e);
    protected virtual void Dispose(bool disposing);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("GridEditName")]
public class System.Windows.Forms.DataGridTextBox : TextBox {
    public bool IsInEditOrNavigateMode { get; public set; }
    public void SetDataGrid(DataGrid parentGrid);
    protected virtual void WndProc(Message& m);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    protected internal virtual bool ProcessKeyMessage(Message& m);
    public bool get_IsInEditOrNavigateMode();
    public void set_IsInEditOrNavigateMode(bool value);
}
public class System.Windows.Forms.DataGridTextBoxColumn : DataGridColumnStyle {
    [BrowsableAttribute("False")]
public TextBox TextBox { get; }
    [SRDescriptionAttribute("FormatControlFormatDescr")]
[DefaultValueAttribute("")]
unknown PropertyDescriptor PropertyDescriptor {public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.DataGridColumnStyleFormatEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string Format { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public IFormatProvider FormatInfo { get; public set; }
    public bool ReadOnly { get; public set; }
    public DataGridTextBoxColumn(PropertyDescriptor prop);
    public DataGridTextBoxColumn(PropertyDescriptor prop, string format);
    public DataGridTextBoxColumn(PropertyDescriptor prop, string format, bool isDefault);
    public DataGridTextBoxColumn(PropertyDescriptor prop, bool isDefault);
    public virtual TextBox get_TextBox();
    protected virtual void SetDataGridInColumn(DataGrid value);
    public virtual void set_PropertyDescriptor(PropertyDescriptor value);
    public string get_Format();
    public void set_Format(string value);
    public IFormatProvider get_FormatInfo();
    public void set_FormatInfo(IFormatProvider value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    protected internal virtual void ConcedeFocus();
    protected void HideEditBox();
    protected internal virtual void UpdateUI(CurrencyManager source, int rowNum, string displayText);
    protected void EndEdit();
    protected internal virtual Size GetPreferredSize(Graphics g, object value);
    protected internal virtual int GetMinimumHeight();
    protected internal virtual int GetPreferredHeight(Graphics g, object value);
    protected internal virtual void Abort(int rowNum);
    protected internal virtual void EnterNullValue();
    protected internal virtual bool Commit(CurrencyManager dataSource, int rowNum);
    protected internal virtual void Edit(CurrencyManager source, int rowNum, Rectangle bounds, bool readOnly, string displayText, bool cellIsVisible);
    protected internal virtual void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum);
    protected internal virtual void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, bool alignToRight);
    protected internal virtual void Paint(Graphics g, Rectangle bounds, CurrencyManager source, int rowNum, Brush backBrush, Brush foreBrush, bool alignToRight);
    protected void PaintText(Graphics g, Rectangle bounds, string text, bool alignToRight);
    protected void PaintText(Graphics g, Rectangle textBounds, string text, Brush backBrush, Brush foreBrush, bool alignToRight);
    protected internal virtual void ReleaseHostedControl();
}
[DefaultMemberAttribute("Item")]
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("CellContentClick")]
[ComplexBindingPropertiesAttribute("DataSource", "DataMember")]
[DockingAttribute("1")]
[EditorAttribute("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.ComponentEditor")]
[SRDescriptionAttribute("DescriptionDataGridView")]
public class System.Windows.Forms.DataGridView : Control {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle { get; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_AllowUserToAddRowsDescr")]
public bool AllowUserToAddRows { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_AllowUserToDeleteRowsDescr")]
public bool AllowUserToDeleteRows { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_AllowUserToOrderColumnsDescr")]
public bool AllowUserToOrderColumns { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_AllowUserToResizeColumnsDescr")]
public bool AllowUserToResizeColumns { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_AllowUserToResizeRowsDescr")]
public bool AllowUserToResizeRows { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_AlternatingRowsDefaultCellStyleDescr")]
public DataGridViewCellStyle AlternatingRowsDefaultCellStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("True")]
public bool AutoGenerateColumns { get; public set; }
    public bool AutoSize { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_AutoSizeColumnsModeDescr")]
public DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_AutoSizeRowsModeDescr")]
public DataGridViewAutoSizeRowsMode AutoSizeRowsMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color BackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridViewBackgroundColorDescr")]
public Color BackgroundColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_BorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    protected bool CanEnableIme { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_CellBorderStyleDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewCellBorderStyle CellBorderStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ClipboardCopyModeDescr")]
public DataGridViewClipboardCopyMode ClipboardCopyMode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("0")]
[EditorBrowsableAttribute("2")]
public int ColumnCount { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnHeadersBorderStyleDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnHeadersDefaultCellStyleDescr")]
[AmbientValueAttribute("")]
public DataGridViewCellStyle ColumnHeadersDefaultCellStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DataGridView_ColumnHeadersHeightDescr")]
public int ColumnHeadersHeight { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ColumnHeadersHeightSizeModeDescr")]
public DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridViewColumnHeadersVisibleDescr")]
public bool ColumnHeadersVisible { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
[MergablePropertyAttribute("False")]
public DataGridViewColumnCollection Columns { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CurrentCell { get; public set; }
    [BrowsableAttribute("False")]
public Point CurrentCellAddress { get; }
    [BrowsableAttribute("False")]
public DataGridViewRow CurrentRow { get; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DataGridViewDataMemberDescr")]
public string DataMember { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SRDescriptionAttribute("DataGridViewDataSourceDescr")]
public object DataSource { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_DefaultCellStyleDescr")]
[AmbientValueAttribute("")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    protected Size DefaultSize { get; }
    public Rectangle DisplayRectangle { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DataGridView_EditModeDescr")]
public DataGridViewEditMode EditMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Control EditingControl { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Panel EditingPanel { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridView_EnableHeadersVisualStylesDescr")]
public bool EnableHeadersVisualStyles { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell FirstDisplayedCell { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public int FirstDisplayedScrollingColumnHiddenWidth { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int FirstDisplayedScrollingColumnIndex { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int FirstDisplayedScrollingRowIndex { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridViewGridColorDescr")]
public Color GridColor { get; public set; }
    protected ScrollBar HorizontalScrollBar { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int HorizontalScrollingOffset { get; public set; }
    [BrowsableAttribute("False")]
public bool IsCurrentCellDirty { get; }
    [BrowsableAttribute("False")]
public bool IsCurrentCellInEditMode { get; }
    [BrowsableAttribute("False")]
public bool IsCurrentRowDirty { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridView_MultiSelectDescr")]
public bool MultiSelect { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int NewRowIndex { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("0")]
public int RowCount { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowHeadersBorderStyleDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewHeaderBorderStyle RowHeadersBorderStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowHeadersDefaultCellStyleDescr")]
[AmbientValueAttribute("")]
public DataGridViewCellStyle RowHeadersDefaultCellStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("DataGridViewRowHeadersVisibleDescr")]
public bool RowHeadersVisible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DataGridView_RowHeadersWidthDescr")]
public int RowHeadersWidth { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_RowHeadersWidthSizeModeDescr")]
public DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode { get; public set; }
    [BrowsableAttribute("False")]
public DataGridViewRowCollection Rows { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowsDefaultCellStyleDescr")]
public DataGridViewCellStyle RowsDefaultCellStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("True")]
[SRDescriptionAttribute("DataGridView_RowTemplateDescr")]
[DesignerSerializationVisibilityAttribute("2")]
public DataGridViewRow RowTemplate { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_ScrollBarsDescr")]
public ScrollBars ScrollBars { get; public set; }
    [BrowsableAttribute("False")]
public DataGridViewSelectedCellCollection SelectedCells { get; }
    [BrowsableAttribute("False")]
public DataGridViewSelectedColumnCollection SelectedColumns { get; }
    [BrowsableAttribute("False")]
public DataGridViewSelectedRowCollection SelectedRows { get; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DataGridView_SelectionModeDescr")]
public DataGridViewSelectionMode SelectionMode { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ShowCellErrorsDescr")]
public bool ShowCellErrors { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ShowCellToolTipsDescr")]
public bool ShowCellToolTips { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ShowEditingIconDescr")]
public bool ShowEditingIcon { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ShowRowErrorsDescr")]
public bool ShowRowErrors { get; public set; }
    [BrowsableAttribute("False")]
public DataGridViewColumn SortedColumn { get; }
    [BrowsableAttribute("False")]
public SortOrder SortOrder { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("2")]
[SRDescriptionAttribute("DataGridView_StandardTabDescr")]
public bool StandardTab { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewHeaderCell TopLeftHeaderCell { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Cursor UserSetCursor { get; }
    protected ScrollBar VerticalScrollBar { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int VerticalScrollingOffset { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("2")]
[SRDescriptionAttribute("DataGridViewVirtualModeDescr")]
public bool VirtualMode { get; public set; }
    private static DataGridView();
    public virtual DataGridViewAdvancedBorderStyle get_AdjustedTopLeftHeaderBorderStyle();
    public DataGridViewAdvancedBorderStyle get_AdvancedCellBorderStyle();
    public DataGridViewAdvancedBorderStyle get_AdvancedColumnHeadersBorderStyle();
    public DataGridViewAdvancedBorderStyle get_AdvancedRowHeadersBorderStyle();
    public bool get_AllowUserToAddRows();
    public void set_AllowUserToAddRows(bool value);
    public void add_AllowUserToAddRowsChanged(EventHandler value);
    public void remove_AllowUserToAddRowsChanged(EventHandler value);
    public bool get_AllowUserToDeleteRows();
    public void set_AllowUserToDeleteRows(bool value);
    public void add_AllowUserToDeleteRowsChanged(EventHandler value);
    public void remove_AllowUserToDeleteRowsChanged(EventHandler value);
    public bool get_AllowUserToOrderColumns();
    public void set_AllowUserToOrderColumns(bool value);
    public void add_AllowUserToOrderColumnsChanged(EventHandler value);
    public void remove_AllowUserToOrderColumnsChanged(EventHandler value);
    public bool get_AllowUserToResizeColumns();
    public void set_AllowUserToResizeColumns(bool value);
    public void add_AllowUserToResizeColumnsChanged(EventHandler value);
    public void remove_AllowUserToResizeColumnsChanged(EventHandler value);
    public bool get_AllowUserToResizeRows();
    public void set_AllowUserToResizeRows(bool value);
    public void add_AllowUserToResizeRowsChanged(EventHandler value);
    public void remove_AllowUserToResizeRowsChanged(EventHandler value);
    public DataGridViewCellStyle get_AlternatingRowsDefaultCellStyle();
    public void set_AlternatingRowsDefaultCellStyle(DataGridViewCellStyle value);
    public void add_AlternatingRowsDefaultCellStyleChanged(EventHandler value);
    public void remove_AlternatingRowsDefaultCellStyleChanged(EventHandler value);
    public bool get_AutoGenerateColumns();
    public void set_AutoGenerateColumns(bool value);
    public void add_AutoGenerateColumnsChanged(EventHandler value);
    public void remove_AutoGenerateColumnsChanged(EventHandler value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public DataGridViewAutoSizeColumnsMode get_AutoSizeColumnsMode();
    public void set_AutoSizeColumnsMode(DataGridViewAutoSizeColumnsMode value);
    public void add_AutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventHandler value);
    public void remove_AutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventHandler value);
    public DataGridViewAutoSizeRowsMode get_AutoSizeRowsMode();
    public void set_AutoSizeRowsMode(DataGridViewAutoSizeRowsMode value);
    public void add_AutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public void remove_AutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public Color get_BackgroundColor();
    public void set_BackgroundColor(Color value);
    public void add_BackgroundColorChanged(EventHandler value);
    public void remove_BackgroundColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public void add_BorderStyleChanged(EventHandler value);
    public void remove_BorderStyleChanged(EventHandler value);
    protected virtual bool get_CanEnableIme();
    public DataGridViewCellBorderStyle get_CellBorderStyle();
    public void set_CellBorderStyle(DataGridViewCellBorderStyle value);
    public void add_CellBorderStyleChanged(EventHandler value);
    public void remove_CellBorderStyleChanged(EventHandler value);
    public DataGridViewClipboardCopyMode get_ClipboardCopyMode();
    public void set_ClipboardCopyMode(DataGridViewClipboardCopyMode value);
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public DataGridViewHeaderBorderStyle get_ColumnHeadersBorderStyle();
    public void set_ColumnHeadersBorderStyle(DataGridViewHeaderBorderStyle value);
    public void add_ColumnHeadersBorderStyleChanged(EventHandler value);
    public void remove_ColumnHeadersBorderStyleChanged(EventHandler value);
    public DataGridViewCellStyle get_ColumnHeadersDefaultCellStyle();
    public void set_ColumnHeadersDefaultCellStyle(DataGridViewCellStyle value);
    public void add_ColumnHeadersDefaultCellStyleChanged(EventHandler value);
    public void remove_ColumnHeadersDefaultCellStyleChanged(EventHandler value);
    public int get_ColumnHeadersHeight();
    public void set_ColumnHeadersHeight(int value);
    public void add_ColumnHeadersHeightChanged(EventHandler value);
    public void remove_ColumnHeadersHeightChanged(EventHandler value);
    public DataGridViewColumnHeadersHeightSizeMode get_ColumnHeadersHeightSizeMode();
    public void set_ColumnHeadersHeightSizeMode(DataGridViewColumnHeadersHeightSizeMode value);
    public void add_ColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public void remove_ColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public bool get_ColumnHeadersVisible();
    public void set_ColumnHeadersVisible(bool value);
    public DataGridViewColumnCollection get_Columns();
    public DataGridViewCell get_CurrentCell();
    public void set_CurrentCell(DataGridViewCell value);
    public Point get_CurrentCellAddress();
    public DataGridViewRow get_CurrentRow();
    public string get_DataMember();
    public void set_DataMember(string value);
    public void add_DataMemberChanged(EventHandler value);
    public void remove_DataMemberChanged(EventHandler value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public void add_DataSourceChanged(EventHandler value);
    public void remove_DataSourceChanged(EventHandler value);
    public DataGridViewCellStyle get_DefaultCellStyle();
    public void set_DefaultCellStyle(DataGridViewCellStyle value);
    public void add_DefaultCellStyleChanged(EventHandler value);
    public void remove_DefaultCellStyleChanged(EventHandler value);
    protected virtual Size get_DefaultSize();
    public virtual Rectangle get_DisplayRectangle();
    public DataGridViewEditMode get_EditMode();
    public void set_EditMode(DataGridViewEditMode value);
    public void add_EditModeChanged(EventHandler value);
    public void remove_EditModeChanged(EventHandler value);
    public Control get_EditingControl();
    public Panel get_EditingPanel();
    public bool get_EnableHeadersVisualStyles();
    public void set_EnableHeadersVisualStyles(bool value);
    public DataGridViewCell get_FirstDisplayedCell();
    public void set_FirstDisplayedCell(DataGridViewCell value);
    public int get_FirstDisplayedScrollingColumnHiddenWidth();
    public int get_FirstDisplayedScrollingColumnIndex();
    public void set_FirstDisplayedScrollingColumnIndex(int value);
    public int get_FirstDisplayedScrollingRowIndex();
    public void set_FirstDisplayedScrollingRowIndex(int value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public Color get_GridColor();
    public void set_GridColor(Color value);
    public void add_GridColorChanged(EventHandler value);
    public void remove_GridColorChanged(EventHandler value);
    protected ScrollBar get_HorizontalScrollBar();
    public int get_HorizontalScrollingOffset();
    public void set_HorizontalScrollingOffset(int value);
    public bool get_IsCurrentCellDirty();
    public bool get_IsCurrentCellInEditMode();
    public bool get_IsCurrentRowDirty();
    public bool get_MultiSelect();
    public void set_MultiSelect(bool value);
    public void add_MultiSelectChanged(EventHandler value);
    public void remove_MultiSelectChanged(EventHandler value);
    public int get_NewRowIndex();
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public void add_ReadOnlyChanged(EventHandler value);
    public void remove_ReadOnlyChanged(EventHandler value);
    public int get_RowCount();
    public void set_RowCount(int value);
    public DataGridViewHeaderBorderStyle get_RowHeadersBorderStyle();
    public void set_RowHeadersBorderStyle(DataGridViewHeaderBorderStyle value);
    public void add_RowHeadersBorderStyleChanged(EventHandler value);
    public void remove_RowHeadersBorderStyleChanged(EventHandler value);
    public DataGridViewCellStyle get_RowHeadersDefaultCellStyle();
    public void set_RowHeadersDefaultCellStyle(DataGridViewCellStyle value);
    public void add_RowHeadersDefaultCellStyleChanged(EventHandler value);
    public void remove_RowHeadersDefaultCellStyleChanged(EventHandler value);
    public bool get_RowHeadersVisible();
    public void set_RowHeadersVisible(bool value);
    public int get_RowHeadersWidth();
    public void set_RowHeadersWidth(int value);
    public void add_RowHeadersWidthChanged(EventHandler value);
    public void remove_RowHeadersWidthChanged(EventHandler value);
    public DataGridViewRowHeadersWidthSizeMode get_RowHeadersWidthSizeMode();
    public void set_RowHeadersWidthSizeMode(DataGridViewRowHeadersWidthSizeMode value);
    public void add_RowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public void remove_RowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventHandler value);
    public DataGridViewRowCollection get_Rows();
    public DataGridViewCellStyle get_RowsDefaultCellStyle();
    public void set_RowsDefaultCellStyle(DataGridViewCellStyle value);
    public void add_RowsDefaultCellStyleChanged(EventHandler value);
    public void remove_RowsDefaultCellStyleChanged(EventHandler value);
    public DataGridViewRow get_RowTemplate();
    public void set_RowTemplate(DataGridViewRow value);
    public ScrollBars get_ScrollBars();
    public void set_ScrollBars(ScrollBars value);
    public DataGridViewSelectedCellCollection get_SelectedCells();
    public DataGridViewSelectedColumnCollection get_SelectedColumns();
    public DataGridViewSelectedRowCollection get_SelectedRows();
    public DataGridViewSelectionMode get_SelectionMode();
    public void set_SelectionMode(DataGridViewSelectionMode value);
    public bool get_ShowCellErrors();
    public void set_ShowCellErrors(bool value);
    public bool get_ShowCellToolTips();
    public void set_ShowCellToolTips(bool value);
    public bool get_ShowEditingIcon();
    public void set_ShowEditingIcon(bool value);
    public bool get_ShowRowErrors();
    public void set_ShowRowErrors(bool value);
    public DataGridViewColumn get_SortedColumn();
    public SortOrder get_SortOrder();
    public bool get_StandardTab();
    public void set_StandardTab(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public DataGridViewCell get_Item(int columnIndex, int rowIndex);
    public void set_Item(int columnIndex, int rowIndex, DataGridViewCell value);
    public DataGridViewCell get_Item(string columnName, int rowIndex);
    public void set_Item(string columnName, int rowIndex, DataGridViewCell value);
    public DataGridViewHeaderCell get_TopLeftHeaderCell();
    public void set_TopLeftHeaderCell(DataGridViewHeaderCell value);
    public Cursor get_UserSetCursor();
    protected ScrollBar get_VerticalScrollBar();
    public int get_VerticalScrollingOffset();
    public bool get_VirtualMode();
    public void set_VirtualMode(bool value);
    public void add_AutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventHandler value);
    public void remove_AutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventHandler value);
    public void add_CancelRowEdit(QuestionEventHandler value);
    public void remove_CancelRowEdit(QuestionEventHandler value);
    public void add_CellBeginEdit(DataGridViewCellCancelEventHandler value);
    public void remove_CellBeginEdit(DataGridViewCellCancelEventHandler value);
    public void add_CellClick(DataGridViewCellEventHandler value);
    public void remove_CellClick(DataGridViewCellEventHandler value);
    public void add_CellContentClick(DataGridViewCellEventHandler value);
    public void remove_CellContentClick(DataGridViewCellEventHandler value);
    public void add_CellContentDoubleClick(DataGridViewCellEventHandler value);
    public void remove_CellContentDoubleClick(DataGridViewCellEventHandler value);
    public void add_CellContextMenuStripChanged(DataGridViewCellEventHandler value);
    public void remove_CellContextMenuStripChanged(DataGridViewCellEventHandler value);
    public void add_CellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventHandler value);
    public void remove_CellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventHandler value);
    public void add_CellDoubleClick(DataGridViewCellEventHandler value);
    public void remove_CellDoubleClick(DataGridViewCellEventHandler value);
    public void add_CellEndEdit(DataGridViewCellEventHandler value);
    public void remove_CellEndEdit(DataGridViewCellEventHandler value);
    public void add_CellEnter(DataGridViewCellEventHandler value);
    public void remove_CellEnter(DataGridViewCellEventHandler value);
    public void add_CellErrorTextChanged(DataGridViewCellEventHandler value);
    public void remove_CellErrorTextChanged(DataGridViewCellEventHandler value);
    public void add_CellErrorTextNeeded(DataGridViewCellErrorTextNeededEventHandler value);
    public void remove_CellErrorTextNeeded(DataGridViewCellErrorTextNeededEventHandler value);
    public void add_CellFormatting(DataGridViewCellFormattingEventHandler value);
    public void remove_CellFormatting(DataGridViewCellFormattingEventHandler value);
    public void add_CellLeave(DataGridViewCellEventHandler value);
    public void remove_CellLeave(DataGridViewCellEventHandler value);
    public void add_CellMouseClick(DataGridViewCellMouseEventHandler value);
    public void remove_CellMouseClick(DataGridViewCellMouseEventHandler value);
    public void add_CellMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void remove_CellMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void add_CellMouseDown(DataGridViewCellMouseEventHandler value);
    public void remove_CellMouseDown(DataGridViewCellMouseEventHandler value);
    public void add_CellMouseEnter(DataGridViewCellEventHandler value);
    public void remove_CellMouseEnter(DataGridViewCellEventHandler value);
    public void add_CellMouseLeave(DataGridViewCellEventHandler value);
    public void remove_CellMouseLeave(DataGridViewCellEventHandler value);
    public void add_CellMouseMove(DataGridViewCellMouseEventHandler value);
    public void remove_CellMouseMove(DataGridViewCellMouseEventHandler value);
    public void add_CellMouseUp(DataGridViewCellMouseEventHandler value);
    public void remove_CellMouseUp(DataGridViewCellMouseEventHandler value);
    public void add_CellPainting(DataGridViewCellPaintingEventHandler value);
    public void remove_CellPainting(DataGridViewCellPaintingEventHandler value);
    public void add_CellParsing(DataGridViewCellParsingEventHandler value);
    public void remove_CellParsing(DataGridViewCellParsingEventHandler value);
    public void add_CellStateChanged(DataGridViewCellStateChangedEventHandler value);
    public void remove_CellStateChanged(DataGridViewCellStateChangedEventHandler value);
    public void add_CellStyleChanged(DataGridViewCellEventHandler value);
    public void remove_CellStyleChanged(DataGridViewCellEventHandler value);
    public void add_CellStyleContentChanged(DataGridViewCellStyleContentChangedEventHandler value);
    public void remove_CellStyleContentChanged(DataGridViewCellStyleContentChangedEventHandler value);
    public void add_CellToolTipTextChanged(DataGridViewCellEventHandler value);
    public void remove_CellToolTipTextChanged(DataGridViewCellEventHandler value);
    public void add_CellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventHandler value);
    public void remove_CellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventHandler value);
    public void add_CellValidated(DataGridViewCellEventHandler value);
    public void remove_CellValidated(DataGridViewCellEventHandler value);
    public void add_CellValidating(DataGridViewCellValidatingEventHandler value);
    public void remove_CellValidating(DataGridViewCellValidatingEventHandler value);
    public void add_CellValueChanged(DataGridViewCellEventHandler value);
    public void remove_CellValueChanged(DataGridViewCellEventHandler value);
    public void add_CellValueNeeded(DataGridViewCellValueEventHandler value);
    public void remove_CellValueNeeded(DataGridViewCellValueEventHandler value);
    public void add_CellValuePushed(DataGridViewCellValueEventHandler value);
    public void remove_CellValuePushed(DataGridViewCellValueEventHandler value);
    public void add_ColumnAdded(DataGridViewColumnEventHandler value);
    public void remove_ColumnAdded(DataGridViewColumnEventHandler value);
    public void add_ColumnContextMenuStripChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnContextMenuStripChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnDataPropertyNameChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnDataPropertyNameChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnDefaultCellStyleChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnDefaultCellStyleChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnDisplayIndexChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnDisplayIndexChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventHandler value);
    public void remove_ColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventHandler value);
    public void add_ColumnDividerWidthChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnDividerWidthChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnHeaderMouseClick(DataGridViewCellMouseEventHandler value);
    public void remove_ColumnHeaderMouseClick(DataGridViewCellMouseEventHandler value);
    public void add_ColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void remove_ColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void add_ColumnHeaderCellChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnHeaderCellChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnMinimumWidthChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnMinimumWidthChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnNameChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnNameChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnRemoved(DataGridViewColumnEventHandler value);
    public void remove_ColumnRemoved(DataGridViewColumnEventHandler value);
    public void add_ColumnSortModeChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnSortModeChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnStateChanged(DataGridViewColumnStateChangedEventHandler value);
    public void remove_ColumnStateChanged(DataGridViewColumnStateChangedEventHandler value);
    public void add_ColumnToolTipTextChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnToolTipTextChanged(DataGridViewColumnEventHandler value);
    public void add_ColumnWidthChanged(DataGridViewColumnEventHandler value);
    public void remove_ColumnWidthChanged(DataGridViewColumnEventHandler value);
    public void add_CurrentCellChanged(EventHandler value);
    public void remove_CurrentCellChanged(EventHandler value);
    public void add_CurrentCellDirtyStateChanged(EventHandler value);
    public void remove_CurrentCellDirtyStateChanged(EventHandler value);
    public void add_DataBindingComplete(DataGridViewBindingCompleteEventHandler value);
    public void remove_DataBindingComplete(DataGridViewBindingCompleteEventHandler value);
    public void add_DataError(DataGridViewDataErrorEventHandler value);
    public void remove_DataError(DataGridViewDataErrorEventHandler value);
    public void add_DefaultValuesNeeded(DataGridViewRowEventHandler value);
    public void remove_DefaultValuesNeeded(DataGridViewRowEventHandler value);
    public void add_EditingControlShowing(DataGridViewEditingControlShowingEventHandler value);
    public void remove_EditingControlShowing(DataGridViewEditingControlShowingEventHandler value);
    public void add_NewRowNeeded(DataGridViewRowEventHandler value);
    public void remove_NewRowNeeded(DataGridViewRowEventHandler value);
    public void add_RowContextMenuStripChanged(DataGridViewRowEventHandler value);
    public void remove_RowContextMenuStripChanged(DataGridViewRowEventHandler value);
    public void add_RowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventHandler value);
    public void remove_RowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventHandler value);
    public void add_RowDefaultCellStyleChanged(DataGridViewRowEventHandler value);
    public void remove_RowDefaultCellStyleChanged(DataGridViewRowEventHandler value);
    public void add_RowDirtyStateNeeded(QuestionEventHandler value);
    public void remove_RowDirtyStateNeeded(QuestionEventHandler value);
    public void add_RowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventHandler value);
    public void remove_RowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventHandler value);
    public void add_RowDividerHeightChanged(DataGridViewRowEventHandler value);
    public void remove_RowDividerHeightChanged(DataGridViewRowEventHandler value);
    public void add_RowEnter(DataGridViewCellEventHandler value);
    public void remove_RowEnter(DataGridViewCellEventHandler value);
    public void add_RowErrorTextChanged(DataGridViewRowEventHandler value);
    public void remove_RowErrorTextChanged(DataGridViewRowEventHandler value);
    public void add_RowErrorTextNeeded(DataGridViewRowErrorTextNeededEventHandler value);
    public void remove_RowErrorTextNeeded(DataGridViewRowErrorTextNeededEventHandler value);
    public void add_RowHeaderMouseClick(DataGridViewCellMouseEventHandler value);
    public void remove_RowHeaderMouseClick(DataGridViewCellMouseEventHandler value);
    public void add_RowHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void remove_RowHeaderMouseDoubleClick(DataGridViewCellMouseEventHandler value);
    public void add_RowHeaderCellChanged(DataGridViewRowEventHandler value);
    public void remove_RowHeaderCellChanged(DataGridViewRowEventHandler value);
    public void add_RowHeightChanged(DataGridViewRowEventHandler value);
    public void remove_RowHeightChanged(DataGridViewRowEventHandler value);
    public void add_RowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventHandler value);
    public void remove_RowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventHandler value);
    public void add_RowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventHandler value);
    public void remove_RowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventHandler value);
    public void add_RowLeave(DataGridViewCellEventHandler value);
    public void remove_RowLeave(DataGridViewCellEventHandler value);
    public void add_RowMinimumHeightChanged(DataGridViewRowEventHandler value);
    public void remove_RowMinimumHeightChanged(DataGridViewRowEventHandler value);
    public void add_RowPostPaint(DataGridViewRowPostPaintEventHandler value);
    public void remove_RowPostPaint(DataGridViewRowPostPaintEventHandler value);
    public void add_RowPrePaint(DataGridViewRowPrePaintEventHandler value);
    public void remove_RowPrePaint(DataGridViewRowPrePaintEventHandler value);
    public void add_RowsAdded(DataGridViewRowsAddedEventHandler value);
    public void remove_RowsAdded(DataGridViewRowsAddedEventHandler value);
    public void add_RowsRemoved(DataGridViewRowsRemovedEventHandler value);
    public void remove_RowsRemoved(DataGridViewRowsRemovedEventHandler value);
    public void add_RowStateChanged(DataGridViewRowStateChangedEventHandler value);
    public void remove_RowStateChanged(DataGridViewRowStateChangedEventHandler value);
    public void add_RowUnshared(DataGridViewRowEventHandler value);
    public void remove_RowUnshared(DataGridViewRowEventHandler value);
    public void add_RowValidated(DataGridViewCellEventHandler value);
    public void remove_RowValidated(DataGridViewCellEventHandler value);
    public void add_RowValidating(DataGridViewCellCancelEventHandler value);
    public void remove_RowValidating(DataGridViewCellCancelEventHandler value);
    public void add_Scroll(ScrollEventHandler value);
    public void remove_Scroll(ScrollEventHandler value);
    public void add_SelectionChanged(EventHandler value);
    public void remove_SelectionChanged(EventHandler value);
    public void add_SortCompare(DataGridViewSortCompareEventHandler value);
    public void remove_SortCompare(DataGridViewSortCompareEventHandler value);
    public void add_Sorted(EventHandler value);
    public void remove_Sorted(EventHandler value);
    public void add_StyleChanged(EventHandler value);
    public void remove_StyleChanged(EventHandler value);
    public void add_UserAddedRow(DataGridViewRowEventHandler value);
    public void remove_UserAddedRow(DataGridViewRowEventHandler value);
    public void add_UserDeletedRow(DataGridViewRowEventHandler value);
    public void remove_UserDeletedRow(DataGridViewRowEventHandler value);
    public void add_UserDeletingRow(DataGridViewRowCancelEventHandler value);
    public void remove_UserDeletingRow(DataGridViewRowCancelEventHandler value);
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    protected virtual void AccessibilityNotifyCurrentCellChanged(Point cellAddress);
    [EditorBrowsableAttribute("2")]
public virtual DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn);
    public bool AreAllCellsSelected(bool includeInvisibleCells);
    public void AutoResizeColumn(int columnIndex);
    public void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode);
    protected void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight);
    public void AutoResizeColumnHeadersHeight();
    public void AutoResizeColumnHeadersHeight(int columnIndex);
    protected void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth);
    protected void AutoResizeColumnHeadersHeight(int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth);
    public void AutoResizeColumns();
    public void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode);
    protected void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight);
    public void AutoResizeRow(int rowIndex);
    public void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode);
    protected void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);
    public void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);
    protected void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight);
    public void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode);
    protected void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight);
    public void AutoResizeRows();
    public void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode);
    protected void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth);
    protected void AutoResizeRows(int rowIndexStart, int rowsCount, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);
    public virtual bool BeginEdit(bool selectAll);
    public bool CancelEdit();
    public void ClearSelection();
    protected void ClearSelection(int columnIndexException, int rowIndexException, bool selectExceptionElement);
    public bool CommitEdit(DataGridViewDataErrorContexts context);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ControlCollection CreateControlsInstance();
    [EditorBrowsableAttribute("2")]
protected virtual DataGridViewColumnCollection CreateColumnsInstance();
    [EditorBrowsableAttribute("2")]
protected virtual DataGridViewRowCollection CreateRowsInstance();
    public int DisplayedColumnCount(bool includePartialColumns);
    public int DisplayedRowCount(bool includePartialRow);
    protected virtual void Dispose(bool disposing);
    public bool EndEdit();
    public bool EndEdit(DataGridViewDataErrorContexts context);
    protected virtual AccessibleObject GetAccessibilityObjectById(int objectId);
    public int GetCellCount(DataGridViewElementStates includeFilter);
    public Rectangle GetCellDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow);
    public virtual DataObject GetClipboardContent();
    public Rectangle GetColumnDisplayRectangle(int columnIndex, bool cutOverflow);
    public Rectangle GetRowDisplayRectangle(int rowIndex, bool cutOverflow);
    public HitTestInfo HitTest(int x, int y);
    public void InvalidateCell(DataGridViewCell dataGridViewCell);
    public void InvalidateCell(int columnIndex, int rowIndex);
    public void InvalidateColumn(int columnIndex);
    public void InvalidateRow(int rowIndex);
    protected virtual bool IsInputChar(char charCode);
    protected virtual bool IsInputKey(Keys keyData);
    public virtual void NotifyCurrentCellDirty(bool dirty);
    protected virtual void OnAllowUserToAddRowsChanged(EventArgs e);
    protected virtual void OnAllowUserToDeleteRowsChanged(EventArgs e);
    protected virtual void OnAllowUserToOrderColumnsChanged(EventArgs e);
    protected virtual void OnAllowUserToResizeColumnsChanged(EventArgs e);
    protected virtual void OnAllowUserToResizeRowsChanged(EventArgs e);
    protected virtual void OnAlternatingRowsDefaultCellStyleChanged(EventArgs e);
    protected virtual void OnAutoGenerateColumnsChanged(EventArgs e);
    protected virtual void OnAutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventArgs e);
    protected virtual void OnAutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventArgs e);
    protected virtual void OnAutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventArgs e);
    protected virtual void OnBackgroundColorChanged(EventArgs e);
    protected virtual void OnBindingContextChanged(EventArgs e);
    protected virtual void OnBorderStyleChanged(EventArgs e);
    protected virtual void OnCancelRowEdit(QuestionEventArgs e);
    protected virtual void OnCellBeginEdit(DataGridViewCellCancelEventArgs e);
    protected virtual void OnCellBorderStyleChanged(EventArgs e);
    protected virtual void OnCellClick(DataGridViewCellEventArgs e);
    protected virtual void OnCellContentClick(DataGridViewCellEventArgs e);
    protected virtual void OnCellContentDoubleClick(DataGridViewCellEventArgs e);
    protected virtual void OnCellContextMenuStripChanged(DataGridViewCellEventArgs e);
    protected virtual void OnCellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventArgs e);
    protected virtual void OnCellDoubleClick(DataGridViewCellEventArgs e);
    protected virtual void OnCellEndEdit(DataGridViewCellEventArgs e);
    protected virtual void OnCellEnter(DataGridViewCellEventArgs e);
    protected virtual void OnCellErrorTextChanged(DataGridViewCellEventArgs e);
    protected virtual void OnCellErrorTextNeeded(DataGridViewCellErrorTextNeededEventArgs e);
    protected virtual void OnCellFormatting(DataGridViewCellFormattingEventArgs e);
    protected virtual void OnCellLeave(DataGridViewCellEventArgs e);
    protected virtual void OnCellMouseClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnCellMouseDoubleClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnCellMouseDown(DataGridViewCellMouseEventArgs e);
    protected virtual void OnCellMouseEnter(DataGridViewCellEventArgs e);
    protected virtual void OnCellMouseLeave(DataGridViewCellEventArgs e);
    protected virtual void OnCellMouseMove(DataGridViewCellMouseEventArgs e);
    protected virtual void OnCellMouseUp(DataGridViewCellMouseEventArgs e);
    protected internal virtual void OnCellPainting(DataGridViewCellPaintingEventArgs e);
    protected virtual void OnCellParsing(DataGridViewCellParsingEventArgs e);
    protected virtual void OnCellStateChanged(DataGridViewCellStateChangedEventArgs e);
    protected virtual void OnCellStyleChanged(DataGridViewCellEventArgs e);
    protected virtual void OnCellStyleContentChanged(DataGridViewCellStyleContentChangedEventArgs e);
    protected virtual void OnCellToolTipTextChanged(DataGridViewCellEventArgs e);
    protected virtual void OnCellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventArgs e);
    protected virtual void OnCellValidated(DataGridViewCellEventArgs e);
    protected virtual void OnCellValidating(DataGridViewCellValidatingEventArgs e);
    protected virtual void OnCellValueChanged(DataGridViewCellEventArgs e);
    protected virtual void OnCellValueNeeded(DataGridViewCellValueEventArgs e);
    protected virtual void OnCellValuePushed(DataGridViewCellValueEventArgs e);
    protected virtual void OnColumnAdded(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnContextMenuStripChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnDataPropertyNameChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnDefaultCellStyleChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnDisplayIndexChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventArgs e);
    protected virtual void OnColumnDividerWidthChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnHeaderCellChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnHeaderMouseClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnColumnHeadersBorderStyleChanged(EventArgs e);
    protected virtual void OnColumnHeadersDefaultCellStyleChanged(EventArgs e);
    protected virtual void OnColumnHeadersHeightChanged(EventArgs e);
    protected virtual void OnColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventArgs e);
    protected virtual void OnColumnMinimumWidthChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnNameChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnRemoved(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnSortModeChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnStateChanged(DataGridViewColumnStateChangedEventArgs e);
    protected virtual void OnColumnToolTipTextChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnColumnWidthChanged(DataGridViewColumnEventArgs e);
    protected virtual void OnCurrentCellChanged(EventArgs e);
    protected virtual void OnCurrentCellDirtyStateChanged(EventArgs e);
    protected virtual void OnCursorChanged(EventArgs e);
    protected virtual void OnDataBindingComplete(DataGridViewBindingCompleteEventArgs e);
    protected virtual void OnDataError(bool displayErrorDialogIfNoHandler, DataGridViewDataErrorEventArgs e);
    protected virtual void OnDataMemberChanged(EventArgs e);
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected virtual void OnDefaultCellStyleChanged(EventArgs e);
    protected virtual void OnDefaultValuesNeeded(DataGridViewRowEventArgs e);
    protected virtual void OnDoubleClick(EventArgs e);
    protected virtual void OnEditingControlShowing(DataGridViewEditingControlShowingEventArgs e);
    protected virtual void OnEditModeChanged(EventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnEnter(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnGridColorChanged(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnKeyDown(KeyEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnKeyPress(KeyPressEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnMouseClick(MouseEventArgs e);
    protected virtual void OnMouseDoubleClick(MouseEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnMultiSelectChanged(EventArgs e);
    protected virtual void OnNewRowNeeded(DataGridViewRowEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnReadOnlyChanged(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnRowContextMenuStripChanged(DataGridViewRowEventArgs e);
    protected virtual void OnRowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventArgs e);
    protected virtual void OnRowDefaultCellStyleChanged(DataGridViewRowEventArgs e);
    protected virtual void OnRowDirtyStateNeeded(QuestionEventArgs e);
    protected virtual void OnRowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventArgs e);
    protected virtual void OnRowDividerHeightChanged(DataGridViewRowEventArgs e);
    protected virtual void OnRowEnter(DataGridViewCellEventArgs e);
    protected virtual void OnRowErrorTextChanged(DataGridViewRowEventArgs e);
    protected virtual void OnRowErrorTextNeeded(DataGridViewRowErrorTextNeededEventArgs e);
    protected virtual void OnRowHeaderCellChanged(DataGridViewRowEventArgs e);
    protected virtual void OnRowHeaderMouseClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnRowHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnRowHeadersBorderStyleChanged(EventArgs e);
    protected virtual void OnRowHeadersDefaultCellStyleChanged(EventArgs e);
    protected virtual void OnRowHeadersWidthChanged(EventArgs e);
    protected virtual void OnRowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventArgs e);
    protected virtual void OnRowHeightChanged(DataGridViewRowEventArgs e);
    protected virtual void OnRowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventArgs e);
    protected virtual void OnRowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventArgs e);
    protected virtual void OnRowLeave(DataGridViewCellEventArgs e);
    protected virtual void OnRowMinimumHeightChanged(DataGridViewRowEventArgs e);
    protected internal virtual void OnRowPostPaint(DataGridViewRowPostPaintEventArgs e);
    protected internal virtual void OnRowPrePaint(DataGridViewRowPrePaintEventArgs e);
    protected virtual void OnRowsAdded(DataGridViewRowsAddedEventArgs e);
    protected virtual void OnRowsDefaultCellStyleChanged(EventArgs e);
    protected virtual void OnRowsRemoved(DataGridViewRowsRemovedEventArgs e);
    protected virtual void OnRowStateChanged(int rowIndex, DataGridViewRowStateChangedEventArgs e);
    protected virtual void OnRowUnshared(DataGridViewRowEventArgs e);
    protected virtual void OnRowValidating(DataGridViewCellCancelEventArgs e);
    protected virtual void OnRowValidated(DataGridViewCellEventArgs e);
    protected virtual void OnScroll(ScrollEventArgs e);
    protected virtual void OnSelectionChanged(EventArgs e);
    protected virtual void OnSortCompare(DataGridViewSortCompareEventArgs e);
    protected virtual void OnSorted(EventArgs e);
    protected virtual void OnUserAddedRow(DataGridViewRowEventArgs e);
    protected virtual void OnUserDeletedRow(DataGridViewRowEventArgs e);
    protected virtual void OnUserDeletingRow(DataGridViewRowCancelEventArgs e);
    protected virtual void OnValidating(CancelEventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual void PaintBackground(Graphics graphics, Rectangle clipBounds, Rectangle gridBounds);
    protected bool ProcessAKey(Keys keyData);
    protected bool ProcessDeleteKey(Keys keyData);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected bool ProcessDownKey(Keys keyData);
    protected bool ProcessEndKey(Keys keyData);
    protected bool ProcessEnterKey(Keys keyData);
    protected bool ProcessEscapeKey(Keys keyData);
    protected bool ProcessF2Key(Keys keyData);
    protected bool ProcessHomeKey(Keys keyData);
    protected bool ProcessInsertKey(Keys keyData);
    protected virtual bool ProcessKeyEventArgs(Message& m);
    protected virtual bool ProcessKeyPreview(Message& m);
    protected bool ProcessLeftKey(Keys keyData);
    protected bool ProcessNextKey(Keys keyData);
    protected bool ProcessPriorKey(Keys keyData);
    protected bool ProcessRightKey(Keys keyData);
    protected bool ProcessSpaceKey(Keys keyData);
    protected bool ProcessTabKey(Keys keyData);
    protected virtual bool ProcessDataGridViewKey(KeyEventArgs e);
    protected bool ProcessUpKey(Keys keyData);
    protected bool ProcessZeroKey(Keys keyData);
    public bool RefreshEdit();
    [EditorBrowsableAttribute("1")]
public virtual void ResetText();
    public void SelectAll();
    protected virtual bool SetCurrentCellAddressCore(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void SetSelectedCellCore(int columnIndex, int rowIndex, bool selected);
    protected virtual void SetSelectedColumnCore(int columnIndex, bool selected);
    protected virtual void SetSelectedRowCore(int rowIndex, bool selected);
    public virtual void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction);
    public virtual void Sort(IComparer comparer);
    public void UpdateCellErrorText(int columnIndex, int rowIndex);
    public void UpdateCellValue(int columnIndex, int rowIndex);
    public void UpdateRowErrorText(int rowIndex);
    public void UpdateRowErrorText(int rowIndexStart, int rowIndexEnd);
    public void UpdateRowHeightInfo(int rowIndex, bool updateToEnd);
    protected virtual void WndProc(Message& m);
}
public class System.Windows.Forms.DataGridViewAdvancedBorderStyle : object {
    public DataGridViewAdvancedCellBorderStyle All { get; public set; }
    public DataGridViewAdvancedCellBorderStyle Bottom { get; public set; }
    public DataGridViewAdvancedCellBorderStyle Left { get; public set; }
    public DataGridViewAdvancedCellBorderStyle Right { get; public set; }
    public DataGridViewAdvancedCellBorderStyle Top { get; public set; }
    public DataGridViewAdvancedCellBorderStyle get_All();
    public void set_All(DataGridViewAdvancedCellBorderStyle value);
    public DataGridViewAdvancedCellBorderStyle get_Bottom();
    public void set_Bottom(DataGridViewAdvancedCellBorderStyle value);
    public DataGridViewAdvancedCellBorderStyle get_Left();
    public void set_Left(DataGridViewAdvancedCellBorderStyle value);
    public DataGridViewAdvancedCellBorderStyle get_Right();
    public void set_Right(DataGridViewAdvancedCellBorderStyle value);
    public DataGridViewAdvancedCellBorderStyle get_Top();
    public void set_Top(DataGridViewAdvancedCellBorderStyle value);
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override object System.ICloneable.Clone();
}
public enum System.Windows.Forms.DataGridViewAdvancedCellBorderStyle : Enum {
    public int value__;
    public static DataGridViewAdvancedCellBorderStyle NotSet;
    public static DataGridViewAdvancedCellBorderStyle None;
    public static DataGridViewAdvancedCellBorderStyle Single;
    public static DataGridViewAdvancedCellBorderStyle Inset;
    public static DataGridViewAdvancedCellBorderStyle InsetDouble;
    public static DataGridViewAdvancedCellBorderStyle Outset;
    public static DataGridViewAdvancedCellBorderStyle OutsetDouble;
    public static DataGridViewAdvancedCellBorderStyle OutsetPartial;
}
public enum System.Windows.Forms.DataGridViewAutoSizeColumnMode : Enum {
    public int value__;
    public static DataGridViewAutoSizeColumnMode NotSet;
    public static DataGridViewAutoSizeColumnMode None;
    public static DataGridViewAutoSizeColumnMode AllCells;
    public static DataGridViewAutoSizeColumnMode AllCellsExceptHeader;
    public static DataGridViewAutoSizeColumnMode DisplayedCells;
    public static DataGridViewAutoSizeColumnMode DisplayedCellsExceptHeader;
    public static DataGridViewAutoSizeColumnMode ColumnHeader;
    public static DataGridViewAutoSizeColumnMode Fill;
}
public class System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs : EventArgs {
    public DataGridViewColumn Column { get; }
    public DataGridViewAutoSizeColumnMode PreviousMode { get; }
    public DataGridViewAutoSizeColumnModeEventArgs(DataGridViewColumn dataGridViewColumn, DataGridViewAutoSizeColumnMode previousMode);
    public DataGridViewColumn get_Column();
    public DataGridViewAutoSizeColumnMode get_PreviousMode();
}
public class System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler : MulticastDelegate {
    public DataGridViewAutoSizeColumnModeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewAutoSizeColumnModeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewAutoSizeColumnModeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.DataGridViewAutoSizeColumnsMode : Enum {
    public int value__;
    public static DataGridViewAutoSizeColumnsMode AllCells;
    public static DataGridViewAutoSizeColumnsMode AllCellsExceptHeader;
    public static DataGridViewAutoSizeColumnsMode DisplayedCells;
    public static DataGridViewAutoSizeColumnsMode DisplayedCellsExceptHeader;
    public static DataGridViewAutoSizeColumnsMode None;
    public static DataGridViewAutoSizeColumnsMode ColumnHeader;
    public static DataGridViewAutoSizeColumnsMode Fill;
}
public class System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs : EventArgs {
    public DataGridViewAutoSizeColumnMode[] PreviousModes { get; }
    public DataGridViewAutoSizeColumnsModeEventArgs(DataGridViewAutoSizeColumnMode[] previousModes);
    public DataGridViewAutoSizeColumnMode[] get_PreviousModes();
}
public class System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler : MulticastDelegate {
    public DataGridViewAutoSizeColumnsModeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewAutoSizeColumnsModeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewAutoSizeColumnsModeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewAutoSizeModeEventArgs : EventArgs {
    public bool PreviousModeAutoSized { get; }
    public DataGridViewAutoSizeModeEventArgs(bool previousModeAutoSized);
    public bool get_PreviousModeAutoSized();
}
public class System.Windows.Forms.DataGridViewAutoSizeModeEventHandler : MulticastDelegate {
    public DataGridViewAutoSizeModeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewAutoSizeModeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewAutoSizeModeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.DataGridViewAutoSizeRowMode : Enum {
    public int value__;
    public static DataGridViewAutoSizeRowMode AllCells;
    public static DataGridViewAutoSizeRowMode AllCellsExceptHeader;
    public static DataGridViewAutoSizeRowMode RowHeader;
}
public enum System.Windows.Forms.DataGridViewAutoSizeRowsMode : Enum {
    public int value__;
    public static DataGridViewAutoSizeRowsMode AllCells;
    public static DataGridViewAutoSizeRowsMode AllCellsExceptHeaders;
    public static DataGridViewAutoSizeRowsMode AllHeaders;
    public static DataGridViewAutoSizeRowsMode DisplayedCells;
    public static DataGridViewAutoSizeRowsMode DisplayedCellsExceptHeaders;
    public static DataGridViewAutoSizeRowsMode DisplayedHeaders;
    public static DataGridViewAutoSizeRowsMode None;
}
public class System.Windows.Forms.DataGridViewBand : DataGridViewElement {
    [DefaultValueAttribute("")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    [BrowsableAttribute("False")]
public Type DefaultHeaderCellType { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Displayed { get; }
    [DefaultValueAttribute("False")]
public bool Frozen { get; public set; }
    [BrowsableAttribute("False")]
public bool HasDefaultCellStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected DataGridViewHeaderCell HeaderCellCore { get; protected set; }
    [BrowsableAttribute("False")]
public int Index { get; }
    [BrowsableAttribute("False")]
public DataGridViewCellStyle InheritedStyle { get; }
    protected bool IsRow { get; }
    [DefaultValueAttribute("False")]
public bool ReadOnly { get; public set; }
    [BrowsableAttribute("True")]
public DataGridViewTriState Resizable { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Selected { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    [DefaultValueAttribute("True")]
public bool Visible { get; public set; }
    private static DataGridViewBand();
    protected virtual override void Finalize();
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    public Type get_DefaultHeaderCellType();
    public void set_DefaultHeaderCellType(Type value);
    public virtual bool get_Displayed();
    public virtual bool get_Frozen();
    public virtual void set_Frozen(bool value);
    public bool get_HasDefaultCellStyle();
    protected DataGridViewHeaderCell get_HeaderCellCore();
    protected void set_HeaderCellCore(DataGridViewHeaderCell value);
    public int get_Index();
    public virtual DataGridViewCellStyle get_InheritedStyle();
    protected bool get_IsRow();
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual DataGridViewTriState get_Resizable();
    public virtual void set_Resizable(DataGridViewTriState value);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public object get_Tag();
    public void set_Tag(object value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public virtual object Clone();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnDataGridViewChanged();
    public virtual string ToString();
}
public class System.Windows.Forms.DataGridViewBindingCompleteEventArgs : EventArgs {
    public ListChangedType ListChangedType { get; }
    public DataGridViewBindingCompleteEventArgs(ListChangedType listChangedType);
    public ListChangedType get_ListChangedType();
}
public class System.Windows.Forms.DataGridViewBindingCompleteEventHandler : MulticastDelegate {
    public DataGridViewBindingCompleteEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewBindingCompleteEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewBindingCompleteEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewButtonCell : DataGridViewCell {
    public Type EditType { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FlatStyle FlatStyle { get; public set; }
    public Type FormattedValueType { get; }
    [DefaultValueAttribute("False")]
public bool UseColumnTextForButtonValue { get; public set; }
    public Type ValueType { get; }
    private static DataGridViewButtonCell();
    public virtual Type get_EditType();
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public virtual Type get_FormattedValueType();
    public bool get_UseColumnTextForButtonValue();
    public void set_UseColumnTextForButtonValue(bool value);
    public virtual Type get_ValueType();
    public virtual object Clone();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual object GetValue(int rowIndex);
    protected virtual bool KeyDownUnsharesRow(KeyEventArgs e, int rowIndex);
    protected virtual bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex);
    protected virtual bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseEnterUnsharesRow(int rowIndex);
    protected virtual bool MouseLeaveUnsharesRow(int rowIndex);
    protected virtual bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e, int rowIndex);
    protected virtual void OnKeyUp(KeyEventArgs e, int rowIndex);
    protected virtual void OnLeave(int rowIndex, bool throughMouseClick);
    protected virtual void OnMouseDown(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseLeave(int rowIndex);
    protected virtual void OnMouseMove(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseUp(DataGridViewCellMouseEventArgs e);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    public virtual string ToString();
}
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewButtonColumn", "DataGridViewButtonColumn.bmp")]
public class System.Windows.Forms.DataGridViewButtonColumn : DataGridViewColumn {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnDefaultCellStyleDescr")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ButtonColumnFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ButtonColumnTextDescr")]
public string Text { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ButtonColumnUseColumnTextForButtonValueDescr")]
public bool UseColumnTextForButtonValue { get; public set; }
    private static DataGridViewButtonColumn();
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public string get_Text();
    public void set_Text(string value);
    public bool get_UseColumnTextForButtonValue();
    public void set_UseColumnTextForButtonValue(bool value);
    public virtual object Clone();
    public virtual string ToString();
}
[TypeConverterAttribute("System.Windows.Forms.DataGridViewCellConverter")]
public abstract class System.Windows.Forms.DataGridViewCell : DataGridViewElement {
    [BrowsableAttribute("False")]
public AccessibleObject AccessibilityObject { get; }
    public int ColumnIndex { get; }
    [BrowsableAttribute("False")]
public Rectangle ContentBounds { get; }
    [DefaultValueAttribute("")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
public object DefaultNewRowValue { get; }
    [BrowsableAttribute("False")]
public bool Displayed { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public object EditedFormattedValue { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Type EditType { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Rectangle ErrorIconBounds { get; }
    [BrowsableAttribute("False")]
public string ErrorText { get; public set; }
    [BrowsableAttribute("False")]
public object FormattedValue { get; }
    [BrowsableAttribute("False")]
public Type FormattedValueType { get; }
    [BrowsableAttribute("False")]
public bool Frozen { get; }
    [BrowsableAttribute("False")]
public bool HasStyle { get; }
    [BrowsableAttribute("False")]
public DataGridViewElementStates InheritedState { get; }
    [BrowsableAttribute("False")]
public DataGridViewCellStyle InheritedStyle { get; }
    [BrowsableAttribute("False")]
public bool IsInEditMode { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewColumn OwningColumn { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewRow OwningRow { get; }
    [BrowsableAttribute("False")]
public Size PreferredSize { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool ReadOnly { get; public set; }
    [BrowsableAttribute("False")]
public bool Resizable { get; }
    [BrowsableAttribute("False")]
public int RowIndex { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Selected { get; public set; }
    [BrowsableAttribute("False")]
public Size Size { get; }
    [BrowsableAttribute("True")]
public DataGridViewCellStyle Style { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ToolTipText { get; public set; }
    [BrowsableAttribute("False")]
public object Value { get; public set; }
    [BrowsableAttribute("False")]
public Type ValueType { get; public set; }
    [BrowsableAttribute("False")]
public bool Visible { get; }
    private static DataGridViewCell();
    protected virtual override void Finalize();
    public AccessibleObject get_AccessibilityObject();
    public int get_ColumnIndex();
    public Rectangle get_ContentBounds();
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public virtual object get_DefaultNewRowValue();
    public virtual bool get_Displayed();
    public object get_EditedFormattedValue();
    public virtual Type get_EditType();
    public Rectangle get_ErrorIconBounds();
    public string get_ErrorText();
    public void set_ErrorText(string value);
    public object get_FormattedValue();
    public virtual Type get_FormattedValueType();
    public virtual bool get_Frozen();
    public bool get_HasStyle();
    public DataGridViewElementStates get_InheritedState();
    public DataGridViewCellStyle get_InheritedStyle();
    public bool get_IsInEditMode();
    public DataGridViewColumn get_OwningColumn();
    public DataGridViewRow get_OwningRow();
    public Size get_PreferredSize();
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual bool get_Resizable();
    public int get_RowIndex();
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public Size get_Size();
    public DataGridViewCellStyle get_Style();
    public void set_Style(DataGridViewCellStyle value);
    public object get_Tag();
    public void set_Tag(object value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public object get_Value();
    public void set_Value(object value);
    public virtual Type get_ValueType();
    public virtual void set_ValueType(Type value);
    public virtual bool get_Visible();
    [EditorBrowsableAttribute("2")]
public virtual DataGridViewAdvancedBorderStyle AdjustCellBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);
    protected virtual Rectangle BorderWidths(DataGridViewAdvancedBorderStyle advancedBorderStyle);
    protected virtual bool ClickUnsharesRow(DataGridViewCellEventArgs e);
    public virtual object Clone();
    protected virtual bool ContentClickUnsharesRow(DataGridViewCellEventArgs e);
    protected virtual bool ContentDoubleClickUnsharesRow(DataGridViewCellEventArgs e);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    [EditorBrowsableAttribute("2")]
public virtual void DetachEditingControl();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual bool DoubleClickUnsharesRow(DataGridViewCellEventArgs e);
    protected virtual bool EnterUnsharesRow(int rowIndex, bool throughMouseClick);
    protected virtual object GetClipboardContent(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format);
    public Rectangle GetContentBounds(int rowIndex);
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    public object GetEditedFormattedValue(int rowIndex, DataGridViewDataErrorContexts context);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected internal virtual string GetErrorText(int rowIndex);
    protected virtual object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context);
    public virtual ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex);
    public virtual DataGridViewElementStates GetInheritedState(int rowIndex);
    public virtual DataGridViewCellStyle GetInheritedStyle(DataGridViewCellStyle inheritedCellStyle, int rowIndex, bool includeColors);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual Size GetSize(int rowIndex);
    protected virtual object GetValue(int rowIndex);
    [EditorBrowsableAttribute("2")]
public virtual void InitializeEditingControl(int rowIndex, object initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle);
    protected virtual bool KeyDownUnsharesRow(KeyEventArgs e, int rowIndex);
    public virtual bool KeyEntersEditMode(KeyEventArgs e);
    protected virtual bool KeyPressUnsharesRow(KeyPressEventArgs e, int rowIndex);
    protected virtual bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex);
    protected virtual bool LeaveUnsharesRow(int rowIndex, bool throughMouseClick);
    [EditorBrowsableAttribute("2")]
public static int MeasureTextHeight(Graphics graphics, string text, Font font, int maxWidth, TextFormatFlags flags);
    [EditorBrowsableAttribute("2")]
public static int MeasureTextHeight(Graphics graphics, string text, Font font, int maxWidth, TextFormatFlags flags, Boolean& widthTruncated);
    [EditorBrowsableAttribute("2")]
public static Size MeasureTextPreferredSize(Graphics graphics, string text, Font font, float maxRatio, TextFormatFlags flags);
    [EditorBrowsableAttribute("2")]
public static Size MeasureTextSize(Graphics graphics, string text, Font font, TextFormatFlags flags);
    [EditorBrowsableAttribute("2")]
public static int MeasureTextWidth(Graphics graphics, string text, Font font, int maxHeight, TextFormatFlags flags);
    protected virtual bool MouseClickUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseDoubleClickUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseEnterUnsharesRow(int rowIndex);
    protected virtual bool MouseLeaveUnsharesRow(int rowIndex);
    protected virtual bool MouseMoveUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual void OnClick(DataGridViewCellEventArgs e);
    protected virtual void OnContentClick(DataGridViewCellEventArgs e);
    protected virtual void OnContentDoubleClick(DataGridViewCellEventArgs e);
    protected virtual void OnDoubleClick(DataGridViewCellEventArgs e);
    protected virtual void OnEnter(int rowIndex, bool throughMouseClick);
    protected virtual void OnKeyDown(KeyEventArgs e, int rowIndex);
    protected virtual void OnKeyPress(KeyPressEventArgs e, int rowIndex);
    protected virtual void OnKeyUp(KeyEventArgs e, int rowIndex);
    protected virtual void OnLeave(int rowIndex, bool throughMouseClick);
    protected virtual void OnMouseClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseDoubleClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseDown(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseEnter(int rowIndex);
    protected virtual void OnMouseLeave(int rowIndex);
    protected virtual void OnMouseMove(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseUp(DataGridViewCellMouseEventArgs e);
    protected virtual void OnDataGridViewChanged();
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    protected virtual void PaintBorder(Graphics graphics, Rectangle clipBounds, Rectangle bounds, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle);
    protected virtual void PaintErrorIcon(Graphics graphics, Rectangle clipBounds, Rectangle cellValueBounds, string errorText);
    public virtual object ParseFormattedValue(object formattedValue, DataGridViewCellStyle cellStyle, TypeConverter formattedValueTypeConverter, TypeConverter valueTypeConverter);
    [EditorBrowsableAttribute("2")]
public virtual void PositionEditingControl(bool setLocation, bool setSize, Rectangle cellBounds, Rectangle cellClip, DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);
    [EditorBrowsableAttribute("2")]
public virtual Rectangle PositionEditingPanel(Rectangle cellBounds, Rectangle cellClip, DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);
    protected virtual bool SetValue(int rowIndex, object value);
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewCellBorderStyle : Enum {
    public int value__;
    public static DataGridViewCellBorderStyle Custom;
    public static DataGridViewCellBorderStyle Single;
    public static DataGridViewCellBorderStyle Raised;
    public static DataGridViewCellBorderStyle Sunken;
    public static DataGridViewCellBorderStyle None;
    public static DataGridViewCellBorderStyle SingleVertical;
    public static DataGridViewCellBorderStyle RaisedVertical;
    public static DataGridViewCellBorderStyle SunkenVertical;
    public static DataGridViewCellBorderStyle SingleHorizontal;
    public static DataGridViewCellBorderStyle RaisedHorizontal;
    public static DataGridViewCellBorderStyle SunkenHorizontal;
}
public class System.Windows.Forms.DataGridViewCellCancelEventArgs : CancelEventArgs {
    public int ColumnIndex { get; }
    public int RowIndex { get; }
    public DataGridViewCellCancelEventArgs(int columnIndex, int rowIndex);
    public int get_ColumnIndex();
    public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewCellCancelEventHandler : MulticastDelegate {
    public DataGridViewCellCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.DataGridViewCellCollection : BaseCollection {
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList List { get; }
    public DataGridViewCell Item { get; public set; }
    public DataGridViewCell Item { get; public set; }
    public DataGridViewCellCollection(DataGridViewRow dataGridViewRow);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual ArrayList get_List();
    public DataGridViewCell get_Item(int index);
    public void set_Item(int index, DataGridViewCell value);
    public DataGridViewCell get_Item(string columnName);
    public void set_Item(string columnName, DataGridViewCell value);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public virtual int Add(DataGridViewCell dataGridViewCell);
    [DesignerSerializationVisibilityAttribute("0")]
public virtual void AddRange(DataGridViewCell[] dataGridViewCells);
    public virtual void Clear();
    public void CopyTo(DataGridViewCell[] array, int index);
    public virtual bool Contains(DataGridViewCell dataGridViewCell);
    public int IndexOf(DataGridViewCell dataGridViewCell);
    public virtual void Insert(int index, DataGridViewCell dataGridViewCell);
    protected void OnCollectionChanged(CollectionChangeEventArgs e);
    public virtual void Remove(DataGridViewCell cell);
    public virtual void RemoveAt(int index);
}
public class System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs : DataGridViewCellEventArgs {
    public ContextMenuStrip ContextMenuStrip { get; public set; }
    public DataGridViewCellContextMenuStripNeededEventArgs(int columnIndex, int rowIndex);
    public ContextMenuStrip get_ContextMenuStrip();
    public void set_ContextMenuStrip(ContextMenuStrip value);
}
public class System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler : MulticastDelegate {
    public DataGridViewCellContextMenuStripNeededEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellContextMenuStripNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellContextMenuStripNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Forms.DataGridViewCellConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs : DataGridViewCellEventArgs {
    public string ErrorText { get; public set; }
    public string get_ErrorText();
    public void set_ErrorText(string value);
}
public class System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler : MulticastDelegate {
    public DataGridViewCellErrorTextNeededEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellErrorTextNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellErrorTextNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewCellEventArgs : EventArgs {
    public int ColumnIndex { get; }
    public int RowIndex { get; }
    public DataGridViewCellEventArgs(int columnIndex, int rowIndex);
    public int get_ColumnIndex();
    public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewCellEventHandler : MulticastDelegate {
    public DataGridViewCellEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewCellFormattingEventArgs : ConvertEventArgs {
    public DataGridViewCellStyle CellStyle { get; public set; }
    public int ColumnIndex { get; }
    public bool FormattingApplied { get; public set; }
    public int RowIndex { get; }
    public DataGridViewCellFormattingEventArgs(int columnIndex, int rowIndex, object value, Type desiredType, DataGridViewCellStyle cellStyle);
    public DataGridViewCellStyle get_CellStyle();
    public void set_CellStyle(DataGridViewCellStyle value);
    public int get_ColumnIndex();
    public bool get_FormattingApplied();
    public void set_FormattingApplied(bool value);
    public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewCellFormattingEventHandler : MulticastDelegate {
    public DataGridViewCellFormattingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellFormattingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellFormattingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewCellMouseEventArgs : MouseEventArgs {
    public int ColumnIndex { get; }
    public int RowIndex { get; }
    public DataGridViewCellMouseEventArgs(int columnIndex, int rowIndex, int localX, int localY, MouseEventArgs e);
    public int get_ColumnIndex();
    public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewCellMouseEventHandler : MulticastDelegate {
    public DataGridViewCellMouseEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellMouseEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellMouseEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewCellPaintingEventArgs : HandledEventArgs {
    public DataGridViewAdvancedBorderStyle AdvancedBorderStyle { get; }
    public Rectangle CellBounds { get; }
    public DataGridViewCellStyle CellStyle { get; }
    public Rectangle ClipBounds { get; }
    public int ColumnIndex { get; }
    public string ErrorText { get; }
    public object FormattedValue { get; }
    public Graphics Graphics { get; }
    public DataGridViewPaintParts PaintParts { get; }
    public int RowIndex { get; }
    public DataGridViewElementStates State { get; }
    public object Value { get; }
    public DataGridViewCellPaintingEventArgs(DataGridView dataGridView, Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, int columnIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    public DataGridViewAdvancedBorderStyle get_AdvancedBorderStyle();
    public Rectangle get_CellBounds();
    public DataGridViewCellStyle get_CellStyle();
    public Rectangle get_ClipBounds();
    public int get_ColumnIndex();
    public string get_ErrorText();
    public object get_FormattedValue();
    public Graphics get_Graphics();
    public DataGridViewPaintParts get_PaintParts();
    public int get_RowIndex();
    public DataGridViewElementStates get_State();
    public object get_Value();
    public void Paint(Rectangle clipBounds, DataGridViewPaintParts paintParts);
    public void PaintBackground(Rectangle clipBounds, bool cellsPaintSelectionBackground);
    public void PaintContent(Rectangle clipBounds);
}
public class System.Windows.Forms.DataGridViewCellPaintingEventHandler : MulticastDelegate {
    public DataGridViewCellPaintingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellPaintingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellPaintingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewCellParsingEventArgs : ConvertEventArgs {
    public int RowIndex { get; }
    public int ColumnIndex { get; }
    public DataGridViewCellStyle InheritedCellStyle { get; public set; }
    public bool ParsingApplied { get; public set; }
    public DataGridViewCellParsingEventArgs(int rowIndex, int columnIndex, object value, Type desiredType, DataGridViewCellStyle inheritedCellStyle);
    public int get_RowIndex();
    public int get_ColumnIndex();
    public DataGridViewCellStyle get_InheritedCellStyle();
    public void set_InheritedCellStyle(DataGridViewCellStyle value);
    public bool get_ParsingApplied();
    public void set_ParsingApplied(bool value);
}
public class System.Windows.Forms.DataGridViewCellParsingEventHandler : MulticastDelegate {
    public DataGridViewCellParsingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellParsingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellParsingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewCellStateChangedEventArgs : EventArgs {
    public DataGridViewCell Cell { get; }
    public DataGridViewElementStates StateChanged { get; }
    public DataGridViewCellStateChangedEventArgs(DataGridViewCell dataGridViewCell, DataGridViewElementStates stateChanged);
    public DataGridViewCell get_Cell();
    public DataGridViewElementStates get_StateChanged();
}
public class System.Windows.Forms.DataGridViewCellStateChangedEventHandler : MulticastDelegate {
    public DataGridViewCellStateChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellStateChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellStateChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TypeConverterAttribute("System.Windows.Forms.DataGridViewCellStyleConverter")]
[EditorAttribute("System.Windows.Forms.Design.DataGridViewCellStyleEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Windows.Forms.DataGridViewCellStyle : object {
    [SRDescriptionAttribute("DataGridViewCellStyleAlignmentDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
public DataGridViewContentAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public object DataSourceNullValue { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
public Color ForeColor { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.FormatStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CatBehavior")]
[EditorBrowsableAttribute("2")]
public string Format { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public IFormatProvider FormatProvider { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsDataSourceNullValueDefault { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsFormatProviderDefault { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsNullValueDefault { get; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
[SRCategoryAttribute("CatData")]
public object NullValue { get; public set; }
    [SRCategoryAttribute("CatLayout")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
public Color SelectionBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
public Color SelectionForeColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object Tag { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
public DataGridViewTriState WrapMode { get; public set; }
    public DataGridViewCellStyle(DataGridViewCellStyle dataGridViewCellStyle);
    private static DataGridViewCellStyle();
    public DataGridViewContentAlignment get_Alignment();
    public void set_Alignment(DataGridViewContentAlignment value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public object get_DataSourceNullValue();
    public void set_DataSourceNullValue(object value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public string get_Format();
    public void set_Format(string value);
    public IFormatProvider get_FormatProvider();
    public void set_FormatProvider(IFormatProvider value);
    public bool get_IsDataSourceNullValueDefault();
    public bool get_IsFormatProviderDefault();
    public bool get_IsNullValueDefault();
    public object get_NullValue();
    public void set_NullValue(object value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public Color get_SelectionBackColor();
    public void set_SelectionBackColor(Color value);
    public Color get_SelectionForeColor();
    public void set_SelectionForeColor(Color value);
    public object get_Tag();
    public void set_Tag(object value);
    public DataGridViewTriState get_WrapMode();
    public void set_WrapMode(DataGridViewTriState value);
    public virtual void ApplyStyle(DataGridViewCellStyle dataGridViewCellStyle);
    public virtual DataGridViewCellStyle Clone();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
    private sealed virtual override object System.ICloneable.Clone();
}
public class System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs : EventArgs {
    public DataGridViewCellStyle CellStyle { get; }
    public DataGridViewCellStyleScopes CellStyleScope { get; }
    public DataGridViewCellStyle get_CellStyle();
    public DataGridViewCellStyleScopes get_CellStyleScope();
}
public class System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler : MulticastDelegate {
    public DataGridViewCellStyleContentChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellStyleContentChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellStyleContentChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewCellStyleConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[FlagsAttribute]
public enum System.Windows.Forms.DataGridViewCellStyleScopes : Enum {
    public int value__;
    public static DataGridViewCellStyleScopes None;
    public static DataGridViewCellStyleScopes Cell;
    public static DataGridViewCellStyleScopes Column;
    public static DataGridViewCellStyleScopes Row;
    public static DataGridViewCellStyleScopes DataGridView;
    public static DataGridViewCellStyleScopes ColumnHeaders;
    public static DataGridViewCellStyleScopes RowHeaders;
    public static DataGridViewCellStyleScopes Rows;
    public static DataGridViewCellStyleScopes AlternatingRows;
}
public class System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs : DataGridViewCellEventArgs {
    public string ToolTipText { get; public set; }
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
}
public class System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler : MulticastDelegate {
    public DataGridViewCellToolTipTextNeededEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellToolTipTextNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellToolTipTextNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewCellValidatingEventArgs : CancelEventArgs {
    public int ColumnIndex { get; }
    public object FormattedValue { get; }
    public int RowIndex { get; }
    public int get_ColumnIndex();
    public object get_FormattedValue();
    public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewCellValidatingEventHandler : MulticastDelegate {
    public DataGridViewCellValidatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellValidatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellValidatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewCellValueEventArgs : EventArgs {
    public int ColumnIndex { get; }
    public int RowIndex { get; }
    public object Value { get; public set; }
    public DataGridViewCellValueEventArgs(int columnIndex, int rowIndex);
    public int get_ColumnIndex();
    public int get_RowIndex();
    public object get_Value();
    public void set_Value(object value);
}
public class System.Windows.Forms.DataGridViewCellValueEventHandler : MulticastDelegate {
    public DataGridViewCellValueEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewCellValueEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewCellValueEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewCheckBoxCell : DataGridViewCell {
    public object EditingCellFormattedValue { get; public set; }
    public bool EditingCellValueChanged { get; public set; }
    public Type EditType { get; }
    [DefaultValueAttribute("")]
public object FalseValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FlatStyle FlatStyle { get; public set; }
    public Type FormattedValueType { get; }
    [DefaultValueAttribute("")]
public object IndeterminateValue { get; public set; }
    [DefaultValueAttribute("False")]
public bool ThreeState { get; public set; }
    [DefaultValueAttribute("")]
public object TrueValue { get; public set; }
    public Type ValueType { get; public set; }
    public DataGridViewCheckBoxCell(bool threeState);
    private static DataGridViewCheckBoxCell();
    public virtual object get_EditingCellFormattedValue();
    public virtual void set_EditingCellFormattedValue(object value);
    public virtual bool get_EditingCellValueChanged();
    public virtual void set_EditingCellValueChanged(bool value);
    public virtual object GetEditingCellFormattedValue(DataGridViewDataErrorContexts context);
    public virtual void PrepareEditingCellForEdit(bool selectAll);
    public virtual Type get_EditType();
    public object get_FalseValue();
    public void set_FalseValue(object value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public virtual Type get_FormattedValueType();
    public object get_IndeterminateValue();
    public void set_IndeterminateValue(object value);
    public bool get_ThreeState();
    public void set_ThreeState(bool value);
    public object get_TrueValue();
    public void set_TrueValue(object value);
    public virtual Type get_ValueType();
    public virtual void set_ValueType(Type value);
    public virtual object Clone();
    protected virtual bool ContentClickUnsharesRow(DataGridViewCellEventArgs e);
    protected virtual bool ContentDoubleClickUnsharesRow(DataGridViewCellEventArgs e);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual bool KeyDownUnsharesRow(KeyEventArgs e, int rowIndex);
    protected virtual bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex);
    protected virtual bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseEnterUnsharesRow(int rowIndex);
    protected virtual bool MouseLeaveUnsharesRow(int rowIndex);
    protected virtual bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual void OnContentClick(DataGridViewCellEventArgs e);
    protected virtual void OnContentDoubleClick(DataGridViewCellEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e, int rowIndex);
    protected virtual void OnKeyUp(KeyEventArgs e, int rowIndex);
    protected virtual void OnLeave(int rowIndex, bool throughMouseClick);
    protected virtual void OnMouseDown(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseLeave(int rowIndex);
    protected virtual void OnMouseMove(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseUp(DataGridViewCellMouseEventArgs e);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    public virtual object ParseFormattedValue(object formattedValue, DataGridViewCellStyle cellStyle, TypeConverter formattedValueTypeConverter, TypeConverter valueTypeConverter);
    public virtual string ToString();
}
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewCheckBoxColumn", "DataGridViewCheckBoxColumn.bmp")]
public class System.Windows.Forms.DataGridViewCheckBoxColumn : DataGridViewColumn {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnDefaultCellStyleDescr")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_CheckBoxColumnFalseValueDescr")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object FalseValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_CheckBoxColumnFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_CheckBoxColumnIndeterminateValueDescr")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object IndeterminateValue { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_CheckBoxColumnThreeStateDescr")]
public bool ThreeState { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_CheckBoxColumnTrueValueDescr")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object TrueValue { get; public set; }
    public DataGridViewCheckBoxColumn(bool threeState);
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    public object get_FalseValue();
    public void set_FalseValue(object value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public object get_IndeterminateValue();
    public void set_IndeterminateValue(object value);
    public bool get_ThreeState();
    public void set_ThreeState(bool value);
    public object get_TrueValue();
    public void set_TrueValue(object value);
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewClipboardCopyMode : Enum {
    public int value__;
    public static DataGridViewClipboardCopyMode Disable;
    public static DataGridViewClipboardCopyMode EnableWithAutoHeaderText;
    public static DataGridViewClipboardCopyMode EnableWithoutHeaderText;
    public static DataGridViewClipboardCopyMode EnableAlwaysIncludeHeaderText;
}
[DesignerAttribute("System.Windows.Forms.Design.DataGridViewColumnDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[TypeConverterAttribute("System.Windows.Forms.DataGridViewColumnConverter")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class System.Windows.Forms.DataGridViewColumn : DataGridViewBand {
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("DataGridViewColumn_AutoSizeModeDescr")]
[RefreshPropertiesAttribute("2")]
public DataGridViewAutoSizeColumnMode AutoSizeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public Type CellType { get; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ColumnContextMenuStripDescr")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.Forms.Design.DataMemberFieldConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.DataGridViewColumnDataPropertyNameEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("DataGridView_ColumnDataPropertyNameDescr")]
[SRCategoryAttribute("CatData")]
public string DataPropertyName { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnDefaultCellStyleDescr")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int DisplayIndex { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_ColumnDividerWidthDescr")]
public int DividerWidth { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("DataGridViewColumn_FillWeightDescr")]
public float FillWeight { get; public set; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_ColumnFrozenDescr")]
public bool Frozen { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewColumnHeaderCell HeaderCell { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnHeaderTextDescr")]
[LocalizableAttribute("True")]
public string HeaderText { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewAutoSizeColumnMode InheritedAutoSizeMode { get; }
    [BrowsableAttribute("False")]
public DataGridViewCellStyle InheritedStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsDataBound { get; }
    [DefaultValueAttribute("5")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("DataGridView_ColumnMinimumWidthDescr")]
[RefreshPropertiesAttribute("2")]
public int MinimumWidth { get; public set; }
    [BrowsableAttribute("False")]
public string Name { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ColumnReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ColumnResizableDescr")]
public DataGridViewTriState Resizable { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ISite Site { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ColumnSortModeDescr")]
public DataGridViewColumnSortMode SortMode { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnToolTipTextDescr")]
public string ToolTipText { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public Type ValueType { get; public set; }
    [DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnVisibleDescr")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DataGridView_ColumnWidthDescr")]
[RefreshPropertiesAttribute("2")]
public int Width { get; public set; }
    public DataGridViewColumn(DataGridViewCell cellTemplate);
    private static DataGridViewColumn();
    public DataGridViewAutoSizeColumnMode get_AutoSizeMode();
    public void set_AutoSizeMode(DataGridViewAutoSizeColumnMode value);
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    public Type get_CellType();
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public string get_DataPropertyName();
    public void set_DataPropertyName(string value);
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    public int get_DisplayIndex();
    public void set_DisplayIndex(int value);
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    public int get_DividerWidth();
    public void set_DividerWidth(int value);
    public float get_FillWeight();
    public void set_FillWeight(float value);
    public virtual bool get_Frozen();
    public virtual void set_Frozen(bool value);
    public DataGridViewColumnHeaderCell get_HeaderCell();
    public void set_HeaderCell(DataGridViewColumnHeaderCell value);
    public string get_HeaderText();
    public void set_HeaderText(string value);
    public DataGridViewAutoSizeColumnMode get_InheritedAutoSizeMode();
    public virtual DataGridViewCellStyle get_InheritedStyle();
    public bool get_IsDataBound();
    public int get_MinimumWidth();
    public void set_MinimumWidth(int value);
    public string get_Name();
    public void set_Name(string value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual DataGridViewTriState get_Resizable();
    public virtual void set_Resizable(DataGridViewTriState value);
    public sealed virtual ISite get_Site();
    public sealed virtual void set_Site(ISite value);
    public DataGridViewColumnSortMode get_SortMode();
    public void set_SortMode(DataGridViewColumnSortMode value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public Type get_ValueType();
    public void set_ValueType(Type value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    public int get_Width();
    public void set_Width(int value);
    public virtual object Clone();
    protected virtual void Dispose(bool disposing);
    public virtual int GetPreferredWidth(DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.DataGridViewColumnCollection : BaseCollection {
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList List { get; }
    protected DataGridView DataGridView { get; }
    public DataGridViewColumn Item { get; }
    public DataGridViewColumn Item { get; }
    public DataGridViewColumnCollection(DataGridView dataGridView);
    private static DataGridViewColumnCollection();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual ArrayList get_List();
    protected DataGridView get_DataGridView();
    public DataGridViewColumn get_Item(int index);
    public DataGridViewColumn get_Item(string columnName);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    [DesignerSerializationVisibilityAttribute("0")]
public virtual int Add(string columnName, string headerText);
    public virtual int Add(DataGridViewColumn dataGridViewColumn);
    public virtual void AddRange(DataGridViewColumn[] dataGridViewColumns);
    public virtual void Clear();
    public virtual bool Contains(DataGridViewColumn dataGridViewColumn);
    public virtual bool Contains(string columnName);
    public void CopyTo(DataGridViewColumn[] array, int index);
    public int GetColumnCount(DataGridViewElementStates includeFilter);
    public int GetColumnsWidth(DataGridViewElementStates includeFilter);
    public DataGridViewColumn GetFirstColumn(DataGridViewElementStates includeFilter);
    public DataGridViewColumn GetFirstColumn(DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public DataGridViewColumn GetLastColumn(DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public DataGridViewColumn GetNextColumn(DataGridViewColumn dataGridViewColumnStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public DataGridViewColumn GetPreviousColumn(DataGridViewColumn dataGridViewColumnStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public int IndexOf(DataGridViewColumn dataGridViewColumn);
    public virtual void Insert(int columnIndex, DataGridViewColumn dataGridViewColumn);
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs e);
    public virtual void Remove(DataGridViewColumn dataGridViewColumn);
    public virtual void Remove(string columnName);
    public virtual void RemoveAt(int index);
}
internal class System.Windows.Forms.DataGridViewColumnConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[AttributeUsageAttribute("4")]
public class System.Windows.Forms.DataGridViewColumnDesignTimeVisibleAttribute : Attribute {
    public static DataGridViewColumnDesignTimeVisibleAttribute Yes;
    public static DataGridViewColumnDesignTimeVisibleAttribute No;
    public static DataGridViewColumnDesignTimeVisibleAttribute Default;
    public bool Visible { get; }
    public DataGridViewColumnDesignTimeVisibleAttribute(bool visible);
    private static DataGridViewColumnDesignTimeVisibleAttribute();
    public bool get_Visible();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public class System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs : HandledMouseEventArgs {
    public int ColumnIndex { get; }
    public DataGridViewColumnDividerDoubleClickEventArgs(int columnIndex, HandledMouseEventArgs e);
    public int get_ColumnIndex();
}
public class System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler : MulticastDelegate {
    public DataGridViewColumnDividerDoubleClickEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewColumnDividerDoubleClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewColumnDividerDoubleClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewColumnEventArgs : EventArgs {
    public DataGridViewColumn Column { get; }
    public DataGridViewColumnEventArgs(DataGridViewColumn dataGridViewColumn);
    public DataGridViewColumn get_Column();
}
public class System.Windows.Forms.DataGridViewColumnEventHandler : MulticastDelegate {
    public DataGridViewColumnEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewColumnEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewColumnEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewColumnHeaderCell : DataGridViewHeaderCell {
    [DesignerSerializationVisibilityAttribute("0")]
public SortOrder SortGlyphDirection { get; public set; }
    private static DataGridViewColumnHeaderCell();
    public SortOrder get_SortGlyphDirection();
    public void set_SortGlyphDirection(SortOrder value);
    public virtual object Clone();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual object GetClipboardContent(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format);
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    public virtual ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex);
    public virtual DataGridViewCellStyle GetInheritedStyle(DataGridViewCellStyle inheritedCellStyle, int rowIndex, bool includeColors);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual object GetValue(int rowIndex);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates dataGridViewElementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    protected virtual bool SetValue(int rowIndex, object value);
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode : Enum {
    public int value__;
    public static DataGridViewColumnHeadersHeightSizeMode EnableResizing;
    public static DataGridViewColumnHeadersHeightSizeMode DisableResizing;
    public static DataGridViewColumnHeadersHeightSizeMode AutoSize;
}
public enum System.Windows.Forms.DataGridViewColumnSortMode : Enum {
    public int value__;
    public static DataGridViewColumnSortMode NotSortable;
    public static DataGridViewColumnSortMode Automatic;
    public static DataGridViewColumnSortMode Programmatic;
}
public class System.Windows.Forms.DataGridViewColumnStateChangedEventArgs : EventArgs {
    public DataGridViewColumn Column { get; }
    public DataGridViewElementStates StateChanged { get; }
    public DataGridViewColumnStateChangedEventArgs(DataGridViewColumn dataGridViewColumn, DataGridViewElementStates stateChanged);
    public DataGridViewColumn get_Column();
    public DataGridViewElementStates get_StateChanged();
}
public class System.Windows.Forms.DataGridViewColumnStateChangedEventHandler : MulticastDelegate {
    public DataGridViewColumnStateChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewColumnStateChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewColumnStateChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewComboBoxCell : DataGridViewCell {
    [DefaultValueAttribute("True")]
public bool AutoComplete { get; public set; }
    public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
public string DisplayMember { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewComboBoxDisplayStyle DisplayStyle { get; public set; }
    [DefaultValueAttribute("False")]
public bool DisplayStyleForCurrentCellOnly { get; public set; }
    [DefaultValueAttribute("1")]
public int DropDownWidth { get; public set; }
    public Type EditType { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public FlatStyle FlatStyle { get; public set; }
    public Type FormattedValueType { get; }
    [BrowsableAttribute("False")]
public ObjectCollection Items { get; }
    [DefaultValueAttribute("8")]
public int MaxDropDownItems { get; public set; }
    [DefaultValueAttribute("False")]
public bool Sorted { get; public set; }
    [DefaultValueAttribute("")]
public string ValueMember { get; public set; }
    public Type ValueType { get; }
    private static DataGridViewComboBoxCell();
    public virtual bool get_AutoComplete();
    public virtual void set_AutoComplete(bool value);
    public virtual object get_DataSource();
    public virtual void set_DataSource(object value);
    public virtual string get_DisplayMember();
    public virtual void set_DisplayMember(string value);
    public DataGridViewComboBoxDisplayStyle get_DisplayStyle();
    public void set_DisplayStyle(DataGridViewComboBoxDisplayStyle value);
    public bool get_DisplayStyleForCurrentCellOnly();
    public void set_DisplayStyleForCurrentCellOnly(bool value);
    public virtual int get_DropDownWidth();
    public virtual void set_DropDownWidth(int value);
    public virtual Type get_EditType();
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public virtual Type get_FormattedValueType();
    public virtual ObjectCollection get_Items();
    public virtual int get_MaxDropDownItems();
    public virtual void set_MaxDropDownItems(int value);
    public virtual bool get_Sorted();
    public virtual void set_Sorted(bool value);
    public virtual string get_ValueMember();
    public virtual void set_ValueMember(string value);
    public virtual Type get_ValueType();
    public virtual object Clone();
    public virtual void DetachEditingControl();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    public virtual void InitializeEditingControl(int rowIndex, object initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle);
    public virtual bool KeyEntersEditMode(KeyEventArgs e);
    protected virtual void OnDataGridViewChanged();
    protected virtual void OnEnter(int rowIndex, bool throughMouseClick);
    protected virtual void OnLeave(int rowIndex, bool throughMouseClick);
    protected virtual void OnMouseClick(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseEnter(int rowIndex);
    protected virtual void OnMouseLeave(int rowIndex);
    protected virtual void OnMouseMove(DataGridViewCellMouseEventArgs e);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    public virtual object ParseFormattedValue(object formattedValue, DataGridViewCellStyle cellStyle, TypeConverter formattedValueTypeConverter, TypeConverter valueTypeConverter);
    public virtual string ToString();
}
[DesignerAttribute("System.Windows.Forms.Design.DataGridViewComboBoxColumnDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewComboBoxColumn", "DataGridViewComboBoxColumn.bmp")]
public class System.Windows.Forms.DataGridViewComboBoxColumn : DataGridViewColumn {
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnAutoCompleteDescr")]
public bool AutoComplete { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnDataSourceDescr")]
[RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnDisplayMemberDescr")]
[TypeConverterAttribute("System.Windows.Forms.Design.DataMemberFieldConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string DisplayMember { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnDisplayStyleDescr")]
public DataGridViewComboBoxDisplayStyle DisplayStyle { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnDisplayStyleForCurrentCellOnlyDescr")]
public bool DisplayStyleForCurrentCellOnly { get; public set; }
    [DefaultValueAttribute("1")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnDropDownWidthDescr")]
public int DropDownWidth { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnItemsDescr")]
public ObjectCollection Items { get; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnValueMemberDescr")]
[TypeConverterAttribute("System.Windows.Forms.Design.DataMemberFieldConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string ValueMember { get; public set; }
    [DefaultValueAttribute("8")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnMaxDropDownItemsDescr")]
public int MaxDropDownItems { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_ComboBoxColumnSortedDescr")]
public bool Sorted { get; public set; }
    private static DataGridViewComboBoxColumn();
    public bool get_AutoComplete();
    public void set_AutoComplete(bool value);
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public string get_DisplayMember();
    public void set_DisplayMember(string value);
    public DataGridViewComboBoxDisplayStyle get_DisplayStyle();
    public void set_DisplayStyle(DataGridViewComboBoxDisplayStyle value);
    public bool get_DisplayStyleForCurrentCellOnly();
    public void set_DisplayStyleForCurrentCellOnly(bool value);
    public int get_DropDownWidth();
    public void set_DropDownWidth(int value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public ObjectCollection get_Items();
    public string get_ValueMember();
    public void set_ValueMember(string value);
    public int get_MaxDropDownItems();
    public void set_MaxDropDownItems(int value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    public virtual object Clone();
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewComboBoxDisplayStyle : Enum {
    public int value__;
    public static DataGridViewComboBoxDisplayStyle ComboBox;
    public static DataGridViewComboBoxDisplayStyle DropDownButton;
    public static DataGridViewComboBoxDisplayStyle Nothing;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
public class System.Windows.Forms.DataGridViewComboBoxEditingControl : ComboBox {
    public DataGridView EditingControlDataGridView { get; public set; }
    public object EditingControlFormattedValue { get; public set; }
    public int EditingControlRowIndex { get; public set; }
    public bool EditingControlValueChanged { get; public set; }
    public Cursor EditingPanelCursor { get; }
    public bool RepositionEditingControlOnValueChange { get; }
    public virtual DataGridView get_EditingControlDataGridView();
    public virtual void set_EditingControlDataGridView(DataGridView value);
    public virtual object get_EditingControlFormattedValue();
    public virtual void set_EditingControlFormattedValue(object value);
    public virtual int get_EditingControlRowIndex();
    public virtual void set_EditingControlRowIndex(int value);
    public virtual bool get_EditingControlValueChanged();
    public virtual void set_EditingControlValueChanged(bool value);
    public virtual Cursor get_EditingPanelCursor();
    public virtual bool get_RepositionEditingControlOnValueChange();
    public virtual void ApplyCellStyleToEditingControl(DataGridViewCellStyle dataGridViewCellStyle);
    public virtual bool EditingControlWantsInputKey(Keys keyData, bool dataGridViewWantsInputKey);
    public virtual object GetEditingControlFormattedValue(DataGridViewDataErrorContexts context);
    public virtual void PrepareEditingControlForEdit(bool selectAll);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
}
public enum System.Windows.Forms.DataGridViewContentAlignment : Enum {
    public int value__;
    public static DataGridViewContentAlignment NotSet;
    public static DataGridViewContentAlignment TopLeft;
    public static DataGridViewContentAlignment TopCenter;
    public static DataGridViewContentAlignment TopRight;
    public static DataGridViewContentAlignment MiddleLeft;
    public static DataGridViewContentAlignment MiddleCenter;
    public static DataGridViewContentAlignment MiddleRight;
    public static DataGridViewContentAlignment BottomLeft;
    public static DataGridViewContentAlignment BottomCenter;
    public static DataGridViewContentAlignment BottomRight;
}
[FlagsAttribute]
public enum System.Windows.Forms.DataGridViewDataErrorContexts : Enum {
    public int value__;
    public static DataGridViewDataErrorContexts Formatting;
    public static DataGridViewDataErrorContexts Display;
    public static DataGridViewDataErrorContexts PreferredSize;
    public static DataGridViewDataErrorContexts RowDeletion;
    public static DataGridViewDataErrorContexts Parsing;
    public static DataGridViewDataErrorContexts Commit;
    public static DataGridViewDataErrorContexts InitialValueRestoration;
    public static DataGridViewDataErrorContexts LeaveControl;
    public static DataGridViewDataErrorContexts CurrentCellChange;
    public static DataGridViewDataErrorContexts Scroll;
    public static DataGridViewDataErrorContexts ClipboardContent;
}
public class System.Windows.Forms.DataGridViewDataErrorEventArgs : DataGridViewCellCancelEventArgs {
    public DataGridViewDataErrorContexts Context { get; }
    public Exception Exception { get; }
    public bool ThrowException { get; public set; }
    public DataGridViewDataErrorEventArgs(Exception exception, int columnIndex, int rowIndex, DataGridViewDataErrorContexts context);
    public DataGridViewDataErrorContexts get_Context();
    public Exception get_Exception();
    public bool get_ThrowException();
    public void set_ThrowException(bool value);
}
public class System.Windows.Forms.DataGridViewDataErrorEventHandler : MulticastDelegate {
    public DataGridViewDataErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewDataErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewDataErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewEditingControlShowingEventArgs : EventArgs {
    public DataGridViewCellStyle CellStyle { get; public set; }
    public Control Control { get; }
    public DataGridViewEditingControlShowingEventArgs(Control control, DataGridViewCellStyle cellStyle);
    public DataGridViewCellStyle get_CellStyle();
    public void set_CellStyle(DataGridViewCellStyle value);
    public Control get_Control();
}
public class System.Windows.Forms.DataGridViewEditingControlShowingEventHandler : MulticastDelegate {
    public DataGridViewEditingControlShowingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewEditingControlShowingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewEditingControlShowingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.DataGridViewEditMode : Enum {
    public int value__;
    public static DataGridViewEditMode EditOnEnter;
    public static DataGridViewEditMode EditOnKeystroke;
    public static DataGridViewEditMode EditOnKeystrokeOrF2;
    public static DataGridViewEditMode EditOnF2;
    public static DataGridViewEditMode EditProgrammatically;
}
public class System.Windows.Forms.DataGridViewElement : object {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public DataGridViewElementStates State { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridView DataGridView { get; }
    public virtual DataGridViewElementStates get_State();
    public DataGridView get_DataGridView();
    protected virtual void OnDataGridViewChanged();
    protected void RaiseCellClick(DataGridViewCellEventArgs e);
    protected void RaiseCellContentClick(DataGridViewCellEventArgs e);
    protected void RaiseCellContentDoubleClick(DataGridViewCellEventArgs e);
    protected void RaiseCellValueChanged(DataGridViewCellEventArgs e);
    protected void RaiseDataError(DataGridViewDataErrorEventArgs e);
    protected void RaiseMouseWheel(MouseEventArgs e);
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.DataGridViewElementStates : Enum {
    public int value__;
    public static DataGridViewElementStates None;
    public static DataGridViewElementStates Displayed;
    public static DataGridViewElementStates Frozen;
    public static DataGridViewElementStates ReadOnly;
    public static DataGridViewElementStates Resizable;
    public static DataGridViewElementStates ResizableSet;
    public static DataGridViewElementStates Selected;
    public static DataGridViewElementStates Visible;
}
public enum System.Windows.Forms.DataGridViewHeaderBorderStyle : Enum {
    public int value__;
    public static DataGridViewHeaderBorderStyle Custom;
    public static DataGridViewHeaderBorderStyle Single;
    public static DataGridViewHeaderBorderStyle Raised;
    public static DataGridViewHeaderBorderStyle Sunken;
    public static DataGridViewHeaderBorderStyle None;
}
public class System.Windows.Forms.DataGridViewHeaderCell : DataGridViewCell {
    protected ButtonState ButtonState { get; }
    [BrowsableAttribute("False")]
public bool Displayed { get; }
    public Type FormattedValueType { get; }
    [BrowsableAttribute("False")]
public bool Frozen { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool ReadOnly { get; public set; }
    [BrowsableAttribute("False")]
public bool Resizable { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Selected { get; public set; }
    public Type ValueType { get; public set; }
    [BrowsableAttribute("False")]
public bool Visible { get; }
    private static DataGridViewHeaderCell();
    protected ButtonState get_ButtonState();
    protected virtual void Dispose(bool disposing);
    public virtual bool get_Displayed();
    public virtual Type get_FormattedValueType();
    public virtual bool get_Frozen();
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual bool get_Resizable();
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public virtual Type get_ValueType();
    public virtual void set_ValueType(Type value);
    public virtual bool get_Visible();
    public virtual object Clone();
    public virtual ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex);
    public virtual DataGridViewElementStates GetInheritedState(int rowIndex);
    protected virtual Size GetSize(int rowIndex);
    protected virtual object GetValue(int rowIndex);
    protected virtual bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseEnterUnsharesRow(int rowIndex);
    protected virtual bool MouseLeaveUnsharesRow(int rowIndex);
    protected virtual bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseDown(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseEnter(int rowIndex);
    protected virtual void OnMouseLeave(int rowIndex);
    protected virtual void OnMouseUp(DataGridViewCellMouseEventArgs e);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates dataGridViewElementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewHitTestType : Enum {
    public int value__;
    public static DataGridViewHitTestType None;
    public static DataGridViewHitTestType Cell;
    public static DataGridViewHitTestType ColumnHeader;
    public static DataGridViewHitTestType RowHeader;
    public static DataGridViewHitTestType TopLeftHeader;
    public static DataGridViewHitTestType HorizontalScrollBar;
    public static DataGridViewHitTestType VerticalScrollBar;
}
public class System.Windows.Forms.DataGridViewImageCell : DataGridViewCell {
    public object DefaultNewRowValue { get; }
    [DefaultValueAttribute("")]
public string Description { get; public set; }
    public Type EditType { get; }
    public Type FormattedValueType { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewImageCellLayout ImageLayout { get; public set; }
    [DefaultValueAttribute("False")]
public bool ValueIsIcon { get; public set; }
    public Type ValueType { get; public set; }
    public DataGridViewImageCell(bool valueIsIcon);
    private static DataGridViewImageCell();
    public virtual object get_DefaultNewRowValue();
    public string get_Description();
    public void set_Description(string value);
    public virtual Type get_EditType();
    public virtual Type get_FormattedValueType();
    public DataGridViewImageCellLayout get_ImageLayout();
    public void set_ImageLayout(DataGridViewImageCellLayout value);
    public bool get_ValueIsIcon();
    public void set_ValueIsIcon(bool value);
    public virtual Type get_ValueType();
    public virtual void set_ValueType(Type value);
    public virtual object Clone();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual object GetFormattedValue(object value, int rowIndex, DataGridViewCellStyle& cellStyle, TypeConverter valueTypeConverter, TypeConverter formattedValueTypeConverter, DataGridViewDataErrorContexts context);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual object GetValue(int rowIndex);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates elementState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewImageCellLayout : Enum {
    public int value__;
    public static DataGridViewImageCellLayout NotSet;
    public static DataGridViewImageCellLayout Normal;
    public static DataGridViewImageCellLayout Stretch;
    public static DataGridViewImageCellLayout Zoom;
}
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewImageColumn", "DataGridViewImageColumn.bmp")]
public class System.Windows.Forms.DataGridViewImageColumn : DataGridViewColumn {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [BrowsableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_ColumnDefaultCellStyleDescr")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridViewImageColumn_DescriptionDescr")]
public string Description { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Icon Icon { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridViewImageColumn_ImageDescr")]
public Image Image { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridViewImageColumn_ImageLayoutDescr")]
public DataGridViewImageCellLayout ImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool ValuesAreIcons { get; public set; }
    public DataGridViewImageColumn(bool valuesAreIcons);
    private static DataGridViewImageColumn();
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    public string get_Description();
    public void set_Description(string value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    public Image get_Image();
    public void set_Image(Image value);
    public DataGridViewImageCellLayout get_ImageLayout();
    public void set_ImageLayout(DataGridViewImageCellLayout value);
    public bool get_ValuesAreIcons();
    public void set_ValuesAreIcons(bool value);
    public virtual object Clone();
    public virtual string ToString();
}
public class System.Windows.Forms.DataGridViewLinkCell : DataGridViewCell {
    public Color ActiveLinkColor { get; public set; }
    public Type EditType { get; }
    public Type FormattedValueType { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public LinkBehavior LinkBehavior { get; public set; }
    public Color LinkColor { get; public set; }
    public bool LinkVisited { get; public set; }
    [DefaultValueAttribute("True")]
public bool TrackVisitedState { get; public set; }
    [DefaultValueAttribute("False")]
public bool UseColumnTextForLinkValue { get; public set; }
    public Color VisitedLinkColor { get; public set; }
    public Type ValueType { get; }
    private static DataGridViewLinkCell();
    public Color get_ActiveLinkColor();
    public void set_ActiveLinkColor(Color value);
    public virtual Type get_EditType();
    public virtual Type get_FormattedValueType();
    public LinkBehavior get_LinkBehavior();
    public void set_LinkBehavior(LinkBehavior value);
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    public bool get_LinkVisited();
    public void set_LinkVisited(bool value);
    public bool get_TrackVisitedState();
    public void set_TrackVisitedState(bool value);
    public bool get_UseColumnTextForLinkValue();
    public void set_UseColumnTextForLinkValue(bool value);
    public Color get_VisitedLinkColor();
    public void set_VisitedLinkColor(Color value);
    public virtual Type get_ValueType();
    public virtual object Clone();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual object GetValue(int rowIndex);
    protected virtual bool KeyUpUnsharesRow(KeyEventArgs e, int rowIndex);
    protected virtual bool MouseDownUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseLeaveUnsharesRow(int rowIndex);
    protected virtual bool MouseMoveUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual bool MouseUpUnsharesRow(DataGridViewCellMouseEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e, int rowIndex);
    protected virtual void OnMouseDown(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseLeave(int rowIndex);
    protected virtual void OnMouseMove(DataGridViewCellMouseEventArgs e);
    protected virtual void OnMouseUp(DataGridViewCellMouseEventArgs e);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    public virtual string ToString();
}
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewLinkColumn", "DataGridViewLinkColumn.bmp")]
public class System.Windows.Forms.DataGridViewLinkColumn : DataGridViewColumn {
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_LinkColumnActiveLinkColorDescr")]
public Color ActiveLinkColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_LinkColumnLinkBehaviorDescr")]
public LinkBehavior LinkBehavior { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_LinkColumnLinkColorDescr")]
public Color LinkColor { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_LinkColumnTextDescr")]
public string Text { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_LinkColumnTrackVisitedStateDescr")]
public bool TrackVisitedState { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_LinkColumnUseColumnTextForLinkValueDescr")]
public bool UseColumnTextForLinkValue { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_LinkColumnVisitedLinkColorDescr")]
public Color VisitedLinkColor { get; public set; }
    private static DataGridViewLinkColumn();
    public Color get_ActiveLinkColor();
    public void set_ActiveLinkColor(Color value);
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    public LinkBehavior get_LinkBehavior();
    public void set_LinkBehavior(LinkBehavior value);
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    public string get_Text();
    public void set_Text(string value);
    public bool get_TrackVisitedState();
    public void set_TrackVisitedState(bool value);
    public bool get_UseColumnTextForLinkValue();
    public void set_UseColumnTextForLinkValue(bool value);
    public Color get_VisitedLinkColor();
    public void set_VisitedLinkColor(Color value);
    public virtual object Clone();
    public virtual string ToString();
}
[FlagsAttribute]
public enum System.Windows.Forms.DataGridViewPaintParts : Enum {
    public int value__;
    public static DataGridViewPaintParts None;
    public static DataGridViewPaintParts All;
    public static DataGridViewPaintParts Background;
    public static DataGridViewPaintParts Border;
    public static DataGridViewPaintParts ContentBackground;
    public static DataGridViewPaintParts ContentForeground;
    public static DataGridViewPaintParts ErrorIcon;
    public static DataGridViewPaintParts Focus;
    public static DataGridViewPaintParts SelectionBackground;
}
[TypeConverterAttribute("System.Windows.Forms.DataGridViewRowConverter")]
public class System.Windows.Forms.DataGridViewRow : DataGridViewBand {
    [BrowsableAttribute("False")]
public AccessibleObject AccessibilityObject { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public DataGridViewCellCollection Cells { get; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_RowContextMenuStripDescr")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public object DataBoundItem { get; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowDefaultCellStyleDescr")]
public DataGridViewCellStyle DefaultCellStyle { get; public set; }
    [BrowsableAttribute("False")]
public bool Displayed { get; }
    [DefaultValueAttribute("0")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowDividerHeightDescr")]
public int DividerHeight { get; public set; }
    [DefaultValueAttribute("")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowErrorTextDescr")]
public string ErrorText { get; public set; }
    [BrowsableAttribute("False")]
public bool Frozen { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewRowHeaderCell HeaderCell { get; public set; }
    [DefaultValueAttribute("22")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DataGridView_RowHeightDescr")]
public int Height { get; public set; }
    public DataGridViewCellStyle InheritedStyle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsNewRow { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int MinimumHeight { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_RowReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_RowResizableDescr")]
public DataGridViewTriState Resizable { get; public set; }
    public bool Selected { get; public set; }
    public DataGridViewElementStates State { get; }
    [BrowsableAttribute("False")]
public bool Visible { get; public set; }
    private static DataGridViewRow();
    public AccessibleObject get_AccessibilityObject();
    public DataGridViewCellCollection get_Cells();
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public object get_DataBoundItem();
    public virtual DataGridViewCellStyle get_DefaultCellStyle();
    public virtual void set_DefaultCellStyle(DataGridViewCellStyle value);
    public virtual bool get_Displayed();
    public int get_DividerHeight();
    public void set_DividerHeight(int value);
    public string get_ErrorText();
    public void set_ErrorText(string value);
    public virtual bool get_Frozen();
    public virtual void set_Frozen(bool value);
    public DataGridViewRowHeaderCell get_HeaderCell();
    public void set_HeaderCell(DataGridViewRowHeaderCell value);
    public int get_Height();
    public void set_Height(int value);
    public virtual DataGridViewCellStyle get_InheritedStyle();
    public bool get_IsNewRow();
    public int get_MinimumHeight();
    public void set_MinimumHeight(int value);
    public virtual bool get_ReadOnly();
    public virtual void set_ReadOnly(bool value);
    public virtual DataGridViewTriState get_Resizable();
    public virtual void set_Resizable(DataGridViewTriState value);
    public virtual bool get_Selected();
    public virtual void set_Selected(bool value);
    public virtual DataGridViewElementStates get_State();
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    [EditorBrowsableAttribute("2")]
public virtual DataGridViewAdvancedBorderStyle AdjustRowHeaderBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedRow, bool isLastVisibleRow);
    public virtual object Clone();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    public void CreateCells(DataGridView dataGridView);
    public void CreateCells(DataGridView dataGridView, Object[] values);
    [EditorBrowsableAttribute("2")]
protected virtual DataGridViewCellCollection CreateCellsInstance();
    [EditorBrowsableAttribute("2")]
protected internal virtual void DrawFocus(Graphics graphics, Rectangle clipBounds, Rectangle bounds, int rowIndex, DataGridViewElementStates rowState, DataGridViewCellStyle cellStyle, bool cellsPaintSelectionBackground);
    public ContextMenuStrip GetContextMenuStrip(int rowIndex);
    public string GetErrorText(int rowIndex);
    public virtual int GetPreferredHeight(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth);
    [EditorBrowsableAttribute("2")]
public virtual DataGridViewElementStates GetState(int rowIndex);
    protected internal virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow);
    [EditorBrowsableAttribute("2")]
protected internal virtual void PaintCells(Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow, DataGridViewPaintParts paintParts);
    [EditorBrowsableAttribute("2")]
protected internal virtual void PaintHeader(Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, bool isFirstDisplayedRow, bool isLastVisibleRow, DataGridViewPaintParts paintParts);
    public bool SetValues(Object[] values);
    public virtual string ToString();
}
public class System.Windows.Forms.DataGridViewRowCancelEventArgs : CancelEventArgs {
    public DataGridViewRow Row { get; }
    public DataGridViewRowCancelEventArgs(DataGridViewRow dataGridViewRow);
    public DataGridViewRow get_Row();
}
public class System.Windows.Forms.DataGridViewRowCancelEventHandler : MulticastDelegate {
    public DataGridViewRowCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.DataGridViewRowCollectionCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.DataGridViewRowCollection : object {
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public int Count { get; }
    protected ArrayList List { get; }
    protected DataGridView DataGridView { get; }
    public DataGridViewRow Item { get; }
    public DataGridViewRowCollection(DataGridView dataGridView);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public int get_Count();
    protected ArrayList get_List();
    public DataGridViewRow SharedRow(int rowIndex);
    protected DataGridView get_DataGridView();
    public DataGridViewRow get_Item(int index);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    [DesignerSerializationVisibilityAttribute("0")]
public virtual int Add();
    [DesignerSerializationVisibilityAttribute("0")]
public virtual int Add(Object[] values);
    public virtual int Add(DataGridViewRow dataGridViewRow);
    [DesignerSerializationVisibilityAttribute("0")]
public virtual int Add(int count);
    public virtual int AddCopy(int indexSource);
    public virtual int AddCopies(int indexSource, int count);
    [DesignerSerializationVisibilityAttribute("0")]
public virtual void AddRange(DataGridViewRow[] dataGridViewRows);
    public virtual void Clear();
    public virtual bool Contains(DataGridViewRow dataGridViewRow);
    public void CopyTo(DataGridViewRow[] array, int index);
    public int GetFirstRow(DataGridViewElementStates includeFilter);
    public int GetFirstRow(DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public int GetLastRow(DataGridViewElementStates includeFilter);
    public int GetNextRow(int indexStart, DataGridViewElementStates includeFilter);
    public int GetNextRow(int indexStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public int GetPreviousRow(int indexStart, DataGridViewElementStates includeFilter);
    public int GetPreviousRow(int indexStart, DataGridViewElementStates includeFilter, DataGridViewElementStates excludeFilter);
    public int GetRowCount(DataGridViewElementStates includeFilter);
    public int GetRowsHeight(DataGridViewElementStates includeFilter);
    public virtual DataGridViewElementStates GetRowState(int rowIndex);
    public int IndexOf(DataGridViewRow dataGridViewRow);
    public virtual void Insert(int rowIndex, Object[] values);
    public virtual void Insert(int rowIndex, DataGridViewRow dataGridViewRow);
    public virtual void Insert(int rowIndex, int count);
    public virtual void InsertCopy(int indexSource, int indexDestination);
    public virtual void InsertCopies(int indexSource, int indexDestination, int count);
    public virtual void InsertRange(int rowIndex, DataGridViewRow[] dataGridViewRows);
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs e);
    public virtual void Remove(DataGridViewRow dataGridViewRow);
    public virtual void RemoveAt(int index);
}
public class System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs : EventArgs {
    public int RowIndex { get; }
    public ContextMenuStrip ContextMenuStrip { get; public set; }
    public DataGridViewRowContextMenuStripNeededEventArgs(int rowIndex);
    public int get_RowIndex();
    public ContextMenuStrip get_ContextMenuStrip();
    public void set_ContextMenuStrip(ContextMenuStrip value);
}
public class System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler : MulticastDelegate {
    public DataGridViewRowContextMenuStripNeededEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowContextMenuStripNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowContextMenuStripNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Forms.DataGridViewRowConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs : HandledMouseEventArgs {
    public int RowIndex { get; }
    public DataGridViewRowDividerDoubleClickEventArgs(int rowIndex, HandledMouseEventArgs e);
    public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler : MulticastDelegate {
    public DataGridViewRowDividerDoubleClickEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowDividerDoubleClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowDividerDoubleClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs : EventArgs {
    public string ErrorText { get; public set; }
    public int RowIndex { get; }
    public string get_ErrorText();
    public void set_ErrorText(string value);
    public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler : MulticastDelegate {
    public DataGridViewRowErrorTextNeededEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowErrorTextNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowErrorTextNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowEventArgs : EventArgs {
    public DataGridViewRow Row { get; }
    public DataGridViewRowEventArgs(DataGridViewRow dataGridViewRow);
    public DataGridViewRow get_Row();
}
public class System.Windows.Forms.DataGridViewRowEventHandler : MulticastDelegate {
    public DataGridViewRowEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowHeaderCell : DataGridViewHeaderCell {
    private static DataGridViewRowHeaderCell();
    public virtual object Clone();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual object GetClipboardContent(int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format);
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected internal virtual string GetErrorText(int rowIndex);
    public virtual ContextMenuStrip GetInheritedContextMenuStrip(int rowIndex);
    public virtual DataGridViewCellStyle GetInheritedStyle(DataGridViewCellStyle inheritedCellStyle, int rowIndex, bool includeColors);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual object GetValue(int rowIndex);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    protected virtual bool SetValue(int rowIndex, object value);
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode : Enum {
    public int value__;
    public static DataGridViewRowHeadersWidthSizeMode EnableResizing;
    public static DataGridViewRowHeadersWidthSizeMode DisableResizing;
    public static DataGridViewRowHeadersWidthSizeMode AutoSizeToAllHeaders;
    public static DataGridViewRowHeadersWidthSizeMode AutoSizeToDisplayedHeaders;
    public static DataGridViewRowHeadersWidthSizeMode AutoSizeToFirstHeader;
}
public class System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs : EventArgs {
    public int Height { get; public set; }
    public int MinimumHeight { get; public set; }
    public int RowIndex { get; }
    public int get_Height();
    public void set_Height(int value);
    public int get_MinimumHeight();
    public void set_MinimumHeight(int value);
    public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler : MulticastDelegate {
    public DataGridViewRowHeightInfoNeededEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowHeightInfoNeededEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowHeightInfoNeededEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs : HandledEventArgs {
    public int Height { get; }
    public int MinimumHeight { get; }
    public int RowIndex { get; }
    public int get_Height();
    public int get_MinimumHeight();
    public int get_RowIndex();
}
public class System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler : MulticastDelegate {
    public DataGridViewRowHeightInfoPushedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowHeightInfoPushedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowHeightInfoPushedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowPostPaintEventArgs : EventArgs {
    public Rectangle ClipBounds { get; public set; }
    public string ErrorText { get; }
    public Graphics Graphics { get; }
    public DataGridViewCellStyle InheritedRowStyle { get; }
    public bool IsFirstDisplayedRow { get; }
    public bool IsLastVisibleRow { get; }
    public Rectangle RowBounds { get; }
    public int RowIndex { get; }
    public DataGridViewElementStates State { get; }
    public DataGridViewRowPostPaintEventArgs(DataGridView dataGridView, Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, string errorText, DataGridViewCellStyle inheritedRowStyle, bool isFirstDisplayedRow, bool isLastVisibleRow);
    public Rectangle get_ClipBounds();
    public void set_ClipBounds(Rectangle value);
    public string get_ErrorText();
    public Graphics get_Graphics();
    public DataGridViewCellStyle get_InheritedRowStyle();
    public bool get_IsFirstDisplayedRow();
    public bool get_IsLastVisibleRow();
    public Rectangle get_RowBounds();
    public int get_RowIndex();
    public DataGridViewElementStates get_State();
    public void DrawFocus(Rectangle bounds, bool cellsPaintSelectionBackground);
    public void PaintCells(Rectangle clipBounds, DataGridViewPaintParts paintParts);
    public void PaintCellsBackground(Rectangle clipBounds, bool cellsPaintSelectionBackground);
    public void PaintCellsContent(Rectangle clipBounds);
    public void PaintHeader(bool paintSelectionBackground);
    public void PaintHeader(DataGridViewPaintParts paintParts);
}
public class System.Windows.Forms.DataGridViewRowPostPaintEventHandler : MulticastDelegate {
    public DataGridViewRowPostPaintEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowPostPaintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowPostPaintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowPrePaintEventArgs : HandledEventArgs {
    public Rectangle ClipBounds { get; public set; }
    public string ErrorText { get; }
    public Graphics Graphics { get; }
    public DataGridViewCellStyle InheritedRowStyle { get; }
    public bool IsFirstDisplayedRow { get; }
    public bool IsLastVisibleRow { get; }
    public DataGridViewPaintParts PaintParts { get; public set; }
    public Rectangle RowBounds { get; }
    public int RowIndex { get; }
    public DataGridViewElementStates State { get; }
    public DataGridViewRowPrePaintEventArgs(DataGridView dataGridView, Graphics graphics, Rectangle clipBounds, Rectangle rowBounds, int rowIndex, DataGridViewElementStates rowState, string errorText, DataGridViewCellStyle inheritedRowStyle, bool isFirstDisplayedRow, bool isLastVisibleRow);
    public Rectangle get_ClipBounds();
    public void set_ClipBounds(Rectangle value);
    public string get_ErrorText();
    public Graphics get_Graphics();
    public DataGridViewCellStyle get_InheritedRowStyle();
    public bool get_IsFirstDisplayedRow();
    public bool get_IsLastVisibleRow();
    public DataGridViewPaintParts get_PaintParts();
    public void set_PaintParts(DataGridViewPaintParts value);
    public Rectangle get_RowBounds();
    public int get_RowIndex();
    public DataGridViewElementStates get_State();
    public void DrawFocus(Rectangle bounds, bool cellsPaintSelectionBackground);
    public void PaintCells(Rectangle clipBounds, DataGridViewPaintParts paintParts);
    public void PaintCellsBackground(Rectangle clipBounds, bool cellsPaintSelectionBackground);
    public void PaintCellsContent(Rectangle clipBounds);
    public void PaintHeader(bool paintSelectionBackground);
    public void PaintHeader(DataGridViewPaintParts paintParts);
}
public class System.Windows.Forms.DataGridViewRowPrePaintEventHandler : MulticastDelegate {
    public DataGridViewRowPrePaintEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowPrePaintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowPrePaintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowsAddedEventArgs : EventArgs {
    public int RowIndex { get; }
    public int RowCount { get; }
    public DataGridViewRowsAddedEventArgs(int rowIndex, int rowCount);
    public int get_RowIndex();
    public int get_RowCount();
}
public class System.Windows.Forms.DataGridViewRowsAddedEventHandler : MulticastDelegate {
    public DataGridViewRowsAddedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowsAddedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowsAddedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowsRemovedEventArgs : EventArgs {
    public int RowIndex { get; }
    public int RowCount { get; }
    public DataGridViewRowsRemovedEventArgs(int rowIndex, int rowCount);
    public int get_RowIndex();
    public int get_RowCount();
}
public class System.Windows.Forms.DataGridViewRowsRemovedEventHandler : MulticastDelegate {
    public DataGridViewRowsRemovedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowsRemovedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowsRemovedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewRowStateChangedEventArgs : EventArgs {
    public DataGridViewRow Row { get; }
    public DataGridViewElementStates StateChanged { get; }
    public DataGridViewRowStateChangedEventArgs(DataGridViewRow dataGridViewRow, DataGridViewElementStates stateChanged);
    public DataGridViewRow get_Row();
    public DataGridViewElementStates get_StateChanged();
}
public class System.Windows.Forms.DataGridViewRowStateChangedEventHandler : MulticastDelegate {
    public DataGridViewRowStateChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewRowStateChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewRowStateChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.DataGridViewSelectedCellCollection : BaseCollection {
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList List { get; }
    public DataGridViewCell Item { get; }
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual ArrayList get_List();
    public DataGridViewCell get_Item(int index);
    [EditorBrowsableAttribute("1")]
public void Clear();
    public bool Contains(DataGridViewCell dataGridViewCell);
    public void CopyTo(DataGridViewCell[] array, int index);
    [EditorBrowsableAttribute("1")]
public void Insert(int index, DataGridViewCell dataGridViewCell);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.DataGridViewSelectedColumnCollection : BaseCollection {
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList List { get; }
    public DataGridViewColumn Item { get; }
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual ArrayList get_List();
    public DataGridViewColumn get_Item(int index);
    [EditorBrowsableAttribute("1")]
public void Clear();
    public bool Contains(DataGridViewColumn dataGridViewColumn);
    public void CopyTo(DataGridViewColumn[] array, int index);
    [EditorBrowsableAttribute("1")]
public void Insert(int index, DataGridViewColumn dataGridViewColumn);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.DataGridViewSelectedRowCollection : BaseCollection {
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList List { get; }
    public DataGridViewRow Item { get; }
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual ArrayList get_List();
    public DataGridViewRow get_Item(int index);
    [EditorBrowsableAttribute("1")]
public void Clear();
    public bool Contains(DataGridViewRow dataGridViewRow);
    public void CopyTo(DataGridViewRow[] array, int index);
    [EditorBrowsableAttribute("1")]
public void Insert(int index, DataGridViewRow dataGridViewRow);
}
public enum System.Windows.Forms.DataGridViewSelectionMode : Enum {
    public int value__;
    public static DataGridViewSelectionMode CellSelect;
    public static DataGridViewSelectionMode FullRowSelect;
    public static DataGridViewSelectionMode FullColumnSelect;
    public static DataGridViewSelectionMode RowHeaderSelect;
    public static DataGridViewSelectionMode ColumnHeaderSelect;
}
public class System.Windows.Forms.DataGridViewSortCompareEventArgs : HandledEventArgs {
    public object CellValue1 { get; }
    public object CellValue2 { get; }
    public DataGridViewColumn Column { get; }
    public int RowIndex1 { get; }
    public int RowIndex2 { get; }
    public int SortResult { get; public set; }
    public DataGridViewSortCompareEventArgs(DataGridViewColumn dataGridViewColumn, object cellValue1, object cellValue2, int rowIndex1, int rowIndex2);
    public object get_CellValue1();
    public object get_CellValue2();
    public DataGridViewColumn get_Column();
    public int get_RowIndex1();
    public int get_RowIndex2();
    public int get_SortResult();
    public void set_SortResult(int value);
}
public class System.Windows.Forms.DataGridViewSortCompareEventHandler : MulticastDelegate {
    public DataGridViewSortCompareEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataGridViewSortCompareEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataGridViewSortCompareEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DataGridViewTextBoxCell : DataGridViewCell {
    public Type FormattedValueType { get; }
    [DefaultValueAttribute("32767")]
public int MaxInputLength { get; public set; }
    public Type ValueType { get; }
    private static DataGridViewTextBoxCell();
    public virtual Type get_FormattedValueType();
    public virtual int get_MaxInputLength();
    public virtual void set_MaxInputLength(int value);
    public virtual Type get_ValueType();
    public virtual object Clone();
    [EditorBrowsableAttribute("2")]
public virtual void DetachEditingControl();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    public virtual void InitializeEditingControl(int rowIndex, object initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle);
    public virtual bool KeyEntersEditMode(KeyEventArgs e);
    protected virtual void OnEnter(int rowIndex, bool throughMouseClick);
    protected virtual void OnLeave(int rowIndex, bool throughMouseClick);
    protected virtual void OnMouseClick(DataGridViewCellMouseEventArgs e);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    public virtual void PositionEditingControl(bool setLocation, bool setSize, Rectangle cellBounds, Rectangle cellClip, DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);
    public virtual string ToString();
}
[ToolboxBitmapAttribute("System.Windows.Forms.DataGridViewTextBoxColumn", "DataGridViewTextBoxColumn.bmp")]
public class System.Windows.Forms.DataGridViewTextBoxColumn : DataGridViewColumn {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataGridViewCell CellTemplate { get; public set; }
    [DefaultValueAttribute("32767")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DataGridView_TextBoxColumnMaxInputLengthDescr")]
public int MaxInputLength { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataGridViewColumnSortMode SortMode { get; public set; }
    public virtual DataGridViewCell get_CellTemplate();
    public virtual void set_CellTemplate(DataGridViewCell value);
    public int get_MaxInputLength();
    public void set_MaxInputLength(int value);
    public DataGridViewColumnSortMode get_SortMode();
    public void set_SortMode(DataGridViewColumnSortMode value);
    public virtual string ToString();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
public class System.Windows.Forms.DataGridViewTextBoxEditingControl : TextBox {
    public DataGridView EditingControlDataGridView { get; public set; }
    public object EditingControlFormattedValue { get; public set; }
    public int EditingControlRowIndex { get; public set; }
    public bool EditingControlValueChanged { get; public set; }
    public Cursor EditingPanelCursor { get; }
    public bool RepositionEditingControlOnValueChange { get; }
    private static DataGridViewTextBoxEditingControl();
    public virtual DataGridView get_EditingControlDataGridView();
    public virtual void set_EditingControlDataGridView(DataGridView value);
    public virtual object get_EditingControlFormattedValue();
    public virtual void set_EditingControlFormattedValue(object value);
    public virtual int get_EditingControlRowIndex();
    public virtual void set_EditingControlRowIndex(int value);
    public virtual bool get_EditingControlValueChanged();
    public virtual void set_EditingControlValueChanged(bool value);
    public virtual Cursor get_EditingPanelCursor();
    public virtual bool get_RepositionEditingControlOnValueChange();
    public virtual void ApplyCellStyleToEditingControl(DataGridViewCellStyle dataGridViewCellStyle);
    public virtual bool EditingControlWantsInputKey(Keys keyData, bool dataGridViewWantsInputKey);
    public virtual object GetEditingControlFormattedValue(DataGridViewDataErrorContexts context);
    public virtual void PrepareEditingControlForEdit(bool selectAll);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual bool ProcessKeyEventArgs(Message& m);
}
public class System.Windows.Forms.DataGridViewTopLeftHeaderCell : DataGridViewColumnHeaderCell {
    private static DataGridViewTopLeftHeaderCell();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual Rectangle GetContentBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Rectangle GetErrorIconBounds(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex);
    protected virtual Size GetPreferredSize(Graphics graphics, DataGridViewCellStyle cellStyle, int rowIndex, Size constraintSize);
    protected virtual void Paint(Graphics graphics, Rectangle clipBounds, Rectangle cellBounds, int rowIndex, DataGridViewElementStates cellState, object value, object formattedValue, string errorText, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle, DataGridViewPaintParts paintParts);
    protected virtual void PaintBorder(Graphics graphics, Rectangle clipBounds, Rectangle bounds, DataGridViewCellStyle cellStyle, DataGridViewAdvancedBorderStyle advancedBorderStyle);
    public virtual string ToString();
}
public enum System.Windows.Forms.DataGridViewTriState : Enum {
    public int value__;
    public static DataGridViewTriState NotSet;
    public static DataGridViewTriState True;
    public static DataGridViewTriState False;
}
[ClassInterfaceAttribute("0")]
public class System.Windows.Forms.DataObject : object {
    public DataObject(object data);
    public DataObject(string format, object data);
    private static DataObject();
    public virtual object GetData(string format, bool autoConvert);
    public virtual object GetData(string format);
    public virtual object GetData(Type format);
    public virtual bool GetDataPresent(Type format);
    public virtual bool GetDataPresent(string format, bool autoConvert);
    public virtual bool GetDataPresent(string format);
    public virtual String[] GetFormats(bool autoConvert);
    public virtual String[] GetFormats();
    public virtual bool ContainsAudio();
    public virtual bool ContainsFileDropList();
    public virtual bool ContainsImage();
    public virtual bool ContainsText();
    public virtual bool ContainsText(TextDataFormat format);
    public virtual Stream GetAudioStream();
    public virtual StringCollection GetFileDropList();
    public virtual Image GetImage();
    public virtual string GetText();
    public virtual string GetText(TextDataFormat format);
    public virtual void SetAudio(Byte[] audioBytes);
    public virtual void SetAudio(Stream audioStream);
    public virtual void SetFileDropList(StringCollection filePaths);
    public virtual void SetImage(Image image);
    public virtual void SetText(string textData);
    public virtual void SetText(string textData, TextDataFormat format);
    private sealed virtual override int System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(FORMATETC& pFormatetc, ADVF advf, IAdviseSink pAdvSink, Int32& pdwConnection);
    private sealed virtual override void System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(int dwConnection);
    private sealed virtual override int System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(IEnumSTATDATA& enumAdvise);
    private sealed virtual override IEnumFORMATETC System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(DATADIR dwDirection);
    private sealed virtual override int System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(FORMATETC& pformatetcIn, FORMATETC& pformatetcOut);
    private sealed virtual override void System.Runtime.InteropServices.ComTypes.IDataObject.GetData(FORMATETC& formatetc, STGMEDIUM& medium);
    private sealed virtual override void System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(FORMATETC& formatetc, STGMEDIUM& medium);
    private sealed virtual override int System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(FORMATETC& formatetc);
    private sealed virtual override void System.Runtime.InteropServices.ComTypes.IDataObject.SetData(FORMATETC& pFormatetcIn, STGMEDIUM& pmedium, bool fRelease);
    public virtual void SetData(string format, bool autoConvert, object data);
    public virtual void SetData(string format, object data);
    public virtual void SetData(Type format, object data);
    public virtual void SetData(object data);
}
public enum System.Windows.Forms.DataSourceUpdateMode : Enum {
    public int value__;
    public static DataSourceUpdateMode OnValidation;
    public static DataSourceUpdateMode OnPropertyChanged;
    public static DataSourceUpdateMode Never;
}
public class System.Windows.Forms.DateBoldEventArgs : EventArgs {
    public DateTime StartDate { get; }
    public int Size { get; }
    public Int32[] DaysToBold { get; public set; }
    public DateTime get_StartDate();
    public int get_Size();
    public Int32[] get_DaysToBold();
    public void set_DaysToBold(Int32[] value);
}
public class System.Windows.Forms.DateBoldEventHandler : MulticastDelegate {
    public DateBoldEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DateBoldEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DateBoldEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DateRangeEventArgs : EventArgs {
    public DateTime Start { get; }
    public DateTime End { get; }
    public DateRangeEventArgs(DateTime start, DateTime end);
    public DateTime get_Start();
    public DateTime get_End();
}
public class System.Windows.Forms.DateRangeEventHandler : MulticastDelegate {
    public DateRangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DateRangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DateRangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Value")]
[DefaultEventAttribute("ValueChanged")]
[DefaultBindingPropertyAttribute("Value")]
[DesignerAttribute("System.Windows.Forms.Design.DateTimePickerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionDateTimePicker")]
public class System.Windows.Forms.DateTimePicker : Control {
    protected static Color DefaultTitleBackColor;
    protected static Color DefaultTitleForeColor;
    protected static Color DefaultMonthBackColor;
    protected static Color DefaultTrailingForeColor;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DateTime MinDateTime;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public static DateTime MaxDateTime;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerCalendarForeColorDescr")]
public Color CalendarForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("")]
[SRDescriptionAttribute("DateTimePickerCalendarFontDescr")]
public Font CalendarFont { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerCalendarTitleBackColorDescr")]
public Color CalendarTitleBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerCalendarTitleForeColorDescr")]
public Color CalendarTitleForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerCalendarTrailingForeColorDescr")]
public Color CalendarTrailingForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerCalendarMonthBackgroundDescr")]
public Color CalendarMonthBackground { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[BindableAttribute("True")]
[SRDescriptionAttribute("DateTimePickerCheckedDescr")]
public bool Checked { get; public set; }
    protected CreateParams CreateParams { get; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DateTimePickerCustomFormatDescr")]
public string CustomFormat { get; public set; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("DateTimePickerDropDownAlignDescr")]
public LeftRightAlignment DropDownAlign { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("DateTimePickerFormatDescr")]
public DateTimePickerFormat Format { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DateTimePickerMaxDateDescr")]
public DateTime MaxDate { get; public set; }
    public static DateTime MaximumDateTime { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("DateTimePickerMinDateDescr")]
public DateTime MinDate { get; public set; }
    public static DateTime MinimumDateTime { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int PreferredHeight { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerShowNoneDescr")]
public bool ShowCheckBox { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DateTimePickerShowUpDownDescr")]
public bool ShowUpDown { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BindableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("DateTimePickerValueDescr")]
public DateTime Value { get; public set; }
    private static DateTimePicker();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public Color get_CalendarForeColor();
    public void set_CalendarForeColor(Color value);
    public Font get_CalendarFont();
    public void set_CalendarFont(Font value);
    public Color get_CalendarTitleBackColor();
    public void set_CalendarTitleBackColor(Color value);
    public Color get_CalendarTitleForeColor();
    public void set_CalendarTitleForeColor(Color value);
    public Color get_CalendarTrailingForeColor();
    public void set_CalendarTrailingForeColor(Color value);
    public Color get_CalendarMonthBackground();
    public void set_CalendarMonthBackground(Color value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    protected virtual CreateParams get_CreateParams();
    public string get_CustomFormat();
    public void set_CustomFormat(string value);
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public LeftRightAlignment get_DropDownAlign();
    public void set_DropDownAlign(LeftRightAlignment value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public DateTimePickerFormat get_Format();
    public void set_Format(DateTimePickerFormat value);
    public void add_FormatChanged(EventHandler value);
    public void remove_FormatChanged(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public DateTime get_MaxDate();
    public void set_MaxDate(DateTime value);
    public static DateTime get_MaximumDateTime();
    public DateTime get_MinDate();
    public void set_MinDate(DateTime value);
    public static DateTime get_MinimumDateTime();
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public int get_PreferredHeight();
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public bool get_ShowCheckBox();
    public void set_ShowCheckBox(bool value);
    public bool get_ShowUpDown();
    public void set_ShowUpDown(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public DateTime get_Value();
    public void set_Value(DateTime value);
    public void add_CloseUp(EventHandler value);
    public void remove_CloseUp(EventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    public void add_DropDown(EventHandler value);
    public void remove_DropDown(EventHandler value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void CreateHandle();
    protected virtual void DestroyHandle();
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void OnCloseUp(EventArgs eventargs);
    protected virtual void OnDropDown(EventArgs eventargs);
    protected virtual void OnFormatChanged(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnValueChanged(EventArgs eventargs);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    public virtual string ToString();
    protected virtual void OnSystemColorsChanged(EventArgs e);
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.DateTimePickerFormat : Enum {
    public int value__;
    public static DateTimePickerFormat Long;
    public static DateTimePickerFormat Short;
    public static DateTimePickerFormat Time;
    public static DateTimePickerFormat Custom;
}
public enum System.Windows.Forms.Day : Enum {
    public int value__;
    public static Day Monday;
    public static Day Tuesday;
    public static Day Wednesday;
    public static Day Thursday;
    public static Day Friday;
    public static Day Saturday;
    public static Day Sunday;
    public static Day Default;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[ToolboxItemAttribute("False")]
public class System.Windows.Forms.Design.ComponentEditorForm : Form {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    public ComponentEditorForm(object component, Type[] pageTypes);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    protected virtual void OnActivated(EventArgs e);
    protected virtual void OnHelpRequested(HelpEventArgs e);
    protected virtual void OnSelChangeSelector(object source, TreeViewEventArgs e);
    public virtual bool PreProcessMessage(Message& msg);
    public virtual DialogResult ShowForm();
    public virtual DialogResult ShowForm(int page);
    public virtual DialogResult ShowForm(IWin32Window owner);
    public virtual DialogResult ShowForm(IWin32Window owner, int page);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
public abstract class System.Windows.Forms.Design.ComponentEditorPage : Panel {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    protected IComponentEditorPageSite PageSite { get; protected set; }
    protected IComponent Component { get; protected set; }
    protected bool FirstActivate { get; protected set; }
    protected bool LoadRequired { get; protected set; }
    protected int Loading { get; protected set; }
    public bool CommitOnDeactivate { get; public set; }
    protected CreateParams CreateParams { get; }
    public Icon Icon { get; public set; }
    public string Title { get; }
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    protected IComponentEditorPageSite get_PageSite();
    protected void set_PageSite(IComponentEditorPageSite value);
    protected IComponent get_Component();
    protected void set_Component(IComponent value);
    protected bool get_FirstActivate();
    protected void set_FirstActivate(bool value);
    protected bool get_LoadRequired();
    protected void set_LoadRequired(bool value);
    protected int get_Loading();
    protected void set_Loading(int value);
    public bool get_CommitOnDeactivate();
    public void set_CommitOnDeactivate(bool value);
    protected virtual CreateParams get_CreateParams();
    public Icon get_Icon();
    public void set_Icon(Icon value);
    public virtual string get_Title();
    public virtual void Activate();
    public virtual void ApplyChanges();
    public virtual void Deactivate();
    protected void EnterLoadingMode();
    protected void ExitLoadingMode();
    public virtual Control GetControl();
    protected IComponent GetSelectedComponent();
    public virtual bool IsPageMessage(Message& msg);
    protected bool IsFirstActivate();
    protected bool IsLoading();
    protected abstract virtual void LoadComponent();
    public virtual void OnApplyComplete();
    protected virtual void ReloadComponent();
    protected abstract virtual void SaveComponent();
    protected virtual void SetDirty();
    public virtual void SetComponent(IComponent component);
    public virtual void SetSite(IComponentEditorPageSite site);
    public virtual void ShowHelp();
    public virtual bool SupportsHelp();
}
public class System.Windows.Forms.Design.EventsTab : PropertyTab {
    public string TabName { get; }
    public string HelpKeyword { get; }
    public EventsTab(IServiceProvider sp);
    public virtual string get_TabName();
    public virtual string get_HelpKeyword();
    public virtual bool CanExtend(object extendee);
    public virtual PropertyDescriptor GetDefaultProperty(object obj);
    public virtual PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object component, Attribute[] attributes);
}
[GuidAttribute("06A9C74B-5E32-4561-BE73-381B37869F4F")]
public interface System.Windows.Forms.Design.IUIService {
    public IDictionary Styles { get; }
    public abstract virtual IDictionary get_Styles();
    public abstract virtual bool CanShowComponentEditor(object component);
    public abstract virtual IWin32Window GetDialogOwnerWindow();
    public abstract virtual void SetUIDirty();
    public abstract virtual bool ShowComponentEditor(object component, IWin32Window parent);
    public abstract virtual DialogResult ShowDialog(Form form);
    public abstract virtual void ShowError(string message);
    public abstract virtual void ShowError(Exception ex);
    public abstract virtual void ShowError(Exception ex, string message);
    public abstract virtual void ShowMessage(string message);
    public abstract virtual void ShowMessage(string message, string caption);
    public abstract virtual DialogResult ShowMessage(string message, string caption, MessageBoxButtons buttons);
    public abstract virtual bool ShowToolWindow(Guid toolWindow);
}
public interface System.Windows.Forms.Design.IWindowsFormsEditorService {
    public abstract virtual void CloseDropDown();
    public abstract virtual void DropDownControl(Control control);
    public abstract virtual DialogResult ShowDialog(Form dialog);
}
public abstract class System.Windows.Forms.Design.PropertyTab : object {
    public Bitmap Bitmap { get; }
    public Object[] Components { get; public set; }
    public string TabName { get; }
    public string HelpKeyword { get; }
    protected virtual override void Finalize();
    public virtual Bitmap get_Bitmap();
    public virtual Object[] get_Components();
    public virtual void set_Components(Object[] value);
    public abstract virtual string get_TabName();
    public virtual string get_HelpKeyword();
    public virtual bool CanExtend(object extendee);
    public virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual PropertyDescriptor GetDefaultProperty(object component);
    public virtual PropertyDescriptorCollection GetProperties(object component);
    public abstract virtual PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object component, Attribute[] attributes);
}
[FlagsAttribute]
public enum System.Windows.Forms.Design.ToolStripItemDesignerAvailability : Enum {
    public int value__;
    public static ToolStripItemDesignerAvailability None;
    public static ToolStripItemDesignerAvailability ToolStrip;
    public static ToolStripItemDesignerAvailability MenuStrip;
    public static ToolStripItemDesignerAvailability ContextMenuStrip;
    public static ToolStripItemDesignerAvailability StatusStrip;
    public static ToolStripItemDesignerAvailability All;
}
[AttributeUsageAttribute("4")]
public class System.Windows.Forms.Design.ToolStripItemDesignerAvailabilityAttribute : Attribute {
    public static ToolStripItemDesignerAvailabilityAttribute Default;
    public ToolStripItemDesignerAvailability ItemAdditionVisibility { get; }
    public ToolStripItemDesignerAvailabilityAttribute(ToolStripItemDesignerAvailability visibility);
    private static ToolStripItemDesignerAvailabilityAttribute();
    public ToolStripItemDesignerAvailability get_ItemAdditionVisibility();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public abstract class System.Windows.Forms.Design.WindowsFormsComponentEditor : ComponentEditor {
    public virtual bool EditComponent(ITypeDescriptorContext context, object component);
    public bool EditComponent(object component, IWin32Window owner);
    public virtual bool EditComponent(ITypeDescriptorContext context, object component, IWin32Window owner);
    protected virtual Type[] GetComponentEditorPages();
    protected virtual int GetInitialComponentEditorPageIndex();
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.DialogResult : Enum {
    public int value__;
    public static DialogResult None;
    public static DialogResult OK;
    public static DialogResult Cancel;
    public static DialogResult Abort;
    public static DialogResult Retry;
    public static DialogResult Ignore;
    public static DialogResult Yes;
    public static DialogResult No;
}
[AttributeUsageAttribute("4")]
public class System.Windows.Forms.DockingAttribute : Attribute {
    public static DockingAttribute Default;
    public DockingBehavior DockingBehavior { get; }
    public DockingAttribute(DockingBehavior dockingBehavior);
    private static DockingAttribute();
    public DockingBehavior get_DockingBehavior();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public enum System.Windows.Forms.DockingBehavior : Enum {
    public int value__;
    public static DockingBehavior Never;
    public static DockingBehavior Ask;
    public static DockingBehavior AutoDock;
}
[EditorAttribute("System.Windows.Forms.Design.DockEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public enum System.Windows.Forms.DockStyle : Enum {
    public int value__;
    public static DockStyle None;
    public static DockStyle Top;
    public static DockStyle Bottom;
    public static DockStyle Left;
    public static DockStyle Right;
    public static DockStyle Fill;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Items")]
[DefaultEventAttribute("SelectedItemChanged")]
[DefaultBindingPropertyAttribute("SelectedItem")]
[SRDescriptionAttribute("DescriptionDomainUpDown")]
public class System.Windows.Forms.DomainUpDown : UpDownBase {
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("DomainUpDownItemsDescr")]
[LocalizableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.StringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public DomainUpDownItemCollection Items { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("-1")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("DomainUpDownSelectedIndexDescr")]
public int SelectedIndex { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("DomainUpDownSelectedItemDescr")]
public object SelectedItem { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DomainUpDownSortedDescr")]
public bool Sorted { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("DomainUpDownWrapDescr")]
public bool Wrap { get; public set; }
    private static DomainUpDown();
    public DomainUpDownItemCollection get_Items();
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    public bool get_Wrap();
    public void set_Wrap(bool value);
    public void add_SelectedItemChanged(EventHandler value);
    public void remove_SelectedItemChanged(EventHandler value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    public virtual void DownButton();
    protected virtual void OnChanged(object source, EventArgs e);
    protected virtual void OnTextBoxKeyPress(object source, KeyPressEventArgs e);
    protected void OnSelectedItemChanged(object source, EventArgs e);
    public virtual string ToString();
    public virtual void UpButton();
    protected virtual void UpdateEditText();
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.DragAction : Enum {
    public int value__;
    public static DragAction Continue;
    public static DragAction Drop;
    public static DragAction Cancel;
}
[FlagsAttribute]
public enum System.Windows.Forms.DragDropEffects : Enum {
    public int value__;
    public static DragDropEffects None;
    public static DragDropEffects Copy;
    public static DragDropEffects Move;
    public static DragDropEffects Link;
    public static DragDropEffects Scroll;
    public static DragDropEffects All;
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.DragEventArgs : EventArgs {
    public IDataObject Data { get; }
    public int KeyState { get; }
    public int X { get; }
    public int Y { get; }
    public DragDropEffects AllowedEffect { get; }
    public DragDropEffects Effect { get; public set; }
    public DragEventArgs(IDataObject data, int keyState, int x, int y, DragDropEffects allowedEffect, DragDropEffects effect);
    public IDataObject get_Data();
    public int get_KeyState();
    public int get_X();
    public int get_Y();
    public DragDropEffects get_AllowedEffect();
    public DragDropEffects get_Effect();
    public void set_Effect(DragDropEffects value);
}
public class System.Windows.Forms.DragEventHandler : MulticastDelegate {
    public DragEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DragEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DragEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DrawItemEventArgs : EventArgs {
    public Color BackColor { get; }
    public Rectangle Bounds { get; }
    public Font Font { get; }
    public Color ForeColor { get; }
    public Graphics Graphics { get; }
    public int Index { get; }
    public DrawItemState State { get; }
    public DrawItemEventArgs(Graphics graphics, Font font, Rectangle rect, int index, DrawItemState state);
    public DrawItemEventArgs(Graphics graphics, Font font, Rectangle rect, int index, DrawItemState state, Color foreColor, Color backColor);
    public Color get_BackColor();
    public Rectangle get_Bounds();
    public Font get_Font();
    public Color get_ForeColor();
    public Graphics get_Graphics();
    public int get_Index();
    public DrawItemState get_State();
    public virtual void DrawBackground();
    public virtual void DrawFocusRectangle();
}
public class System.Windows.Forms.DrawItemEventHandler : MulticastDelegate {
    public DrawItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DrawItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Windows.Forms.DrawItemState : Enum {
    public int value__;
    public static DrawItemState Checked;
    public static DrawItemState ComboBoxEdit;
    public static DrawItemState Default;
    public static DrawItemState Disabled;
    public static DrawItemState Focus;
    public static DrawItemState Grayed;
    public static DrawItemState HotLight;
    public static DrawItemState Inactive;
    public static DrawItemState NoAccelerator;
    public static DrawItemState NoFocusRect;
    public static DrawItemState Selected;
    public static DrawItemState None;
}
public class System.Windows.Forms.DrawListViewColumnHeaderEventArgs : EventArgs {
    public bool DrawDefault { get; public set; }
    public Graphics Graphics { get; }
    public Rectangle Bounds { get; }
    public int ColumnIndex { get; }
    public ColumnHeader Header { get; }
    public ListViewItemStates State { get; }
    public Color ForeColor { get; }
    public Color BackColor { get; }
    public Font Font { get; }
    public DrawListViewColumnHeaderEventArgs(Graphics graphics, Rectangle bounds, int columnIndex, ColumnHeader header, ListViewItemStates state, Color foreColor, Color backColor, Font font);
    public bool get_DrawDefault();
    public void set_DrawDefault(bool value);
    public Graphics get_Graphics();
    public Rectangle get_Bounds();
    public int get_ColumnIndex();
    public ColumnHeader get_Header();
    public ListViewItemStates get_State();
    public Color get_ForeColor();
    public Color get_BackColor();
    public Font get_Font();
    public void DrawBackground();
    public void DrawText();
    public void DrawText(TextFormatFlags flags);
}
public class System.Windows.Forms.DrawListViewColumnHeaderEventHandler : MulticastDelegate {
    public DrawListViewColumnHeaderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DrawListViewColumnHeaderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawListViewColumnHeaderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DrawListViewItemEventArgs : EventArgs {
    public bool DrawDefault { get; public set; }
    public Graphics Graphics { get; }
    public ListViewItem Item { get; }
    public Rectangle Bounds { get; }
    public int ItemIndex { get; }
    public ListViewItemStates State { get; }
    public DrawListViewItemEventArgs(Graphics graphics, ListViewItem item, Rectangle bounds, int itemIndex, ListViewItemStates state);
    public bool get_DrawDefault();
    public void set_DrawDefault(bool value);
    public Graphics get_Graphics();
    public ListViewItem get_Item();
    public Rectangle get_Bounds();
    public int get_ItemIndex();
    public ListViewItemStates get_State();
    public void DrawBackground();
    public void DrawFocusRectangle();
    public void DrawText();
    public void DrawText(TextFormatFlags flags);
}
public class System.Windows.Forms.DrawListViewItemEventHandler : MulticastDelegate {
    public DrawListViewItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DrawListViewItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawListViewItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DrawListViewSubItemEventArgs : EventArgs {
    public bool DrawDefault { get; public set; }
    public Graphics Graphics { get; }
    public Rectangle Bounds { get; }
    public ListViewItem Item { get; }
    public ListViewSubItem SubItem { get; }
    public int ItemIndex { get; }
    public int ColumnIndex { get; }
    public ColumnHeader Header { get; }
    public ListViewItemStates ItemState { get; }
    public DrawListViewSubItemEventArgs(Graphics graphics, Rectangle bounds, ListViewItem item, ListViewSubItem subItem, int itemIndex, int columnIndex, ColumnHeader header, ListViewItemStates itemState);
    public bool get_DrawDefault();
    public void set_DrawDefault(bool value);
    public Graphics get_Graphics();
    public Rectangle get_Bounds();
    public ListViewItem get_Item();
    public ListViewSubItem get_SubItem();
    public int get_ItemIndex();
    public int get_ColumnIndex();
    public ColumnHeader get_Header();
    public ListViewItemStates get_ItemState();
    public void DrawBackground();
    public void DrawFocusRectangle(Rectangle bounds);
    public void DrawText();
    public void DrawText(TextFormatFlags flags);
}
public class System.Windows.Forms.DrawListViewSubItemEventHandler : MulticastDelegate {
    public DrawListViewSubItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DrawListViewSubItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawListViewSubItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.DrawMode : Enum {
    public int value__;
    public static DrawMode Normal;
    public static DrawMode OwnerDrawFixed;
    public static DrawMode OwnerDrawVariable;
}
public class System.Windows.Forms.DrawToolTipEventArgs : EventArgs {
    public Graphics Graphics { get; }
    public IWin32Window AssociatedWindow { get; }
    public Control AssociatedControl { get; }
    public Rectangle Bounds { get; }
    public string ToolTipText { get; }
    public Font Font { get; }
    public DrawToolTipEventArgs(Graphics graphics, IWin32Window associatedWindow, Control associatedControl, Rectangle bounds, string toolTipText, Color backColor, Color foreColor, Font font);
    public Graphics get_Graphics();
    public IWin32Window get_AssociatedWindow();
    public Control get_AssociatedControl();
    public Rectangle get_Bounds();
    public string get_ToolTipText();
    public Font get_Font();
    public void DrawBackground();
    public void DrawText();
    public void DrawText(TextFormatFlags flags);
    public void DrawBorder();
}
public class System.Windows.Forms.DrawToolTipEventHandler : MulticastDelegate {
    public DrawToolTipEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DrawToolTipEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawToolTipEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.DrawTreeNodeEventArgs : EventArgs {
    public bool DrawDefault { get; public set; }
    public Graphics Graphics { get; }
    public TreeNode Node { get; }
    public Rectangle Bounds { get; }
    public TreeNodeStates State { get; }
    public DrawTreeNodeEventArgs(Graphics graphics, TreeNode node, Rectangle bounds, TreeNodeStates state);
    public bool get_DrawDefault();
    public void set_DrawDefault(bool value);
    public Graphics get_Graphics();
    public TreeNode get_Node();
    public Rectangle get_Bounds();
    public TreeNodeStates get_State();
}
public class System.Windows.Forms.DrawTreeNodeEventHandler : MulticastDelegate {
    public DrawTreeNodeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DrawTreeNodeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DrawTreeNodeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ErrorBlinkStyle : Enum {
    public int value__;
    public static ErrorBlinkStyle BlinkIfDifferentError;
    public static ErrorBlinkStyle AlwaysBlink;
    public static ErrorBlinkStyle NeverBlink;
}
public enum System.Windows.Forms.ErrorIconAlignment : Enum {
    public int value__;
    public static ErrorIconAlignment TopLeft;
    public static ErrorIconAlignment TopRight;
    public static ErrorIconAlignment MiddleLeft;
    public static ErrorIconAlignment MiddleRight;
    public static ErrorIconAlignment BottomLeft;
    public static ErrorIconAlignment BottomRight;
}
[ProvidePropertyAttribute("IconPadding", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("IconAlignment", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("Error", "System.Windows.Forms.Control")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[ComplexBindingPropertiesAttribute("DataSource", "DataMember")]
[SRDescriptionAttribute("DescriptionErrorProvider")]
public class System.Windows.Forms.ErrorProvider : Component {
    unknown ISite Site {public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ErrorProviderBlinkStyleDescr")]
public ErrorBlinkStyle BlinkStyle { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("ErrorProviderContainerControlDescr")]
public ContainerControl ContainerControl { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftDescr")]
public bool RightToLeft { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SRDescriptionAttribute("ErrorProviderDataSourceDescr")]
public object DataSource { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ErrorProviderDataMemberDescr")]
public string DataMember { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("250")]
[SRDescriptionAttribute("ErrorProviderBlinkRateDescr")]
[RefreshPropertiesAttribute("2")]
public int BlinkRate { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ErrorProviderIconDescr")]
public Icon Icon { get; public set; }
    public ErrorProvider(ContainerControl parentControl);
    public ErrorProvider(IContainer container);
    private static ErrorProvider();
    public virtual void set_Site(ISite value);
    public ErrorBlinkStyle get_BlinkStyle();
    public void set_BlinkStyle(ErrorBlinkStyle value);
    public ContainerControl get_ContainerControl();
    public void set_ContainerControl(ContainerControl value);
    public virtual bool get_RightToLeft();
    public virtual void set_RightToLeft(bool value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    public object get_Tag();
    public void set_Tag(object value);
    public object get_DataSource();
    public void set_DataSource(object value);
    public string get_DataMember();
    public void set_DataMember(string value);
    public void BindToDataAndErrors(object newDataSource, string newDataMember);
    public void UpdateBinding();
    public int get_BlinkRate();
    public void set_BlinkRate(int value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
    public void Clear();
    public sealed virtual bool CanExtend(object extendee);
    protected virtual void Dispose(bool disposing);
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ErrorProviderErrorDescr")]
public string GetError(Control control);
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ErrorProviderIconAlignmentDescr")]
public ErrorIconAlignment GetIconAlignment(Control control);
    [DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ErrorProviderIconPaddingDescr")]
public int GetIconPadding(Control control);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    public void SetError(Control control, string value);
    public void SetIconAlignment(Control control, ErrorIconAlignment value);
    public void SetIconPadding(Control control, int padding);
}
public abstract class System.Windows.Forms.FeatureSupport : object {
    public static bool IsPresent(string featureClassName, string featureConstName);
    public static bool IsPresent(string featureClassName, string featureConstName, Version minimumVersion);
    public static Version GetVersionPresent(string featureClassName, string featureConstName);
    public virtual bool IsPresent(object feature);
    public virtual bool IsPresent(object feature, Version minimumVersion);
    public abstract virtual Version GetVersionPresent(object feature);
}
[DefaultEventAttribute("FileOk")]
[DefaultPropertyAttribute("FileName")]
public abstract class System.Windows.Forms.FileDialog : CommonDialog {
    protected static object EventFileOk;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FDaddExtensionDescr")]
public bool AddExtension { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FDcheckFileExistsDescr")]
public bool CheckFileExists { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FDcheckPathExistsDescr")]
public bool CheckPathExists { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("FDdefaultExtDescr")]
public string DefaultExt { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FDdereferenceLinksDescr")]
public bool DereferenceLinks { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("FDfileNameDescr")]
public string FileName { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FDFileNamesDescr")]
public String[] FileNames { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FDfilterDescr")]
public string Filter { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("FDfilterIndexDescr")]
public int FilterIndex { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("FDinitialDirDescr")]
public string InitialDirectory { get; public set; }
    protected IntPtr Instance { get; }
    protected int Options { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FDrestoreDirectoryDescr")]
public bool RestoreDirectory { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FDshowHelpDescr")]
public bool ShowHelp { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FDsupportMultiDottedExtensionsDescr")]
public bool SupportMultiDottedExtensions { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FDtitleDescr")]
public string Title { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FDvalidateNamesDescr")]
public bool ValidateNames { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public FileDialogCustomPlacesCollection CustomPlaces { get; }
    [DefaultValueAttribute("True")]
public bool AutoUpgradeEnabled { get; public set; }
    private static FileDialog();
    public bool get_AddExtension();
    public void set_AddExtension(bool value);
    public virtual bool get_CheckFileExists();
    public virtual void set_CheckFileExists(bool value);
    public bool get_CheckPathExists();
    public void set_CheckPathExists(bool value);
    public string get_DefaultExt();
    public void set_DefaultExt(string value);
    public bool get_DereferenceLinks();
    public void set_DereferenceLinks(bool value);
    public string get_FileName();
    public void set_FileName(string value);
    public String[] get_FileNames();
    public string get_Filter();
    public void set_Filter(string value);
    public int get_FilterIndex();
    public void set_FilterIndex(int value);
    public string get_InitialDirectory();
    public void set_InitialDirectory(string value);
    protected virtual IntPtr get_Instance();
    protected int get_Options();
    public bool get_RestoreDirectory();
    public void set_RestoreDirectory(bool value);
    public bool get_ShowHelp();
    public void set_ShowHelp(bool value);
    public bool get_SupportMultiDottedExtensions();
    public void set_SupportMultiDottedExtensions(bool value);
    public string get_Title();
    public void set_Title(string value);
    public bool get_ValidateNames();
    public void set_ValidateNames(bool value);
    public void add_FileOk(CancelEventHandler value);
    public void remove_FileOk(CancelEventHandler value);
    protected virtual IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    protected void OnFileOk(CancelEventArgs e);
    public virtual void Reset();
    protected virtual bool RunDialog(IntPtr hWndOwner);
    public virtual string ToString();
    public FileDialogCustomPlacesCollection get_CustomPlaces();
    public bool get_AutoUpgradeEnabled();
    public void set_AutoUpgradeEnabled(bool value);
}
public class System.Windows.Forms.FileDialogCustomPlace : object {
    public string Path { get; public set; }
    public Guid KnownFolderGuid { get; public set; }
    public FileDialogCustomPlace(string path);
    public FileDialogCustomPlace(Guid knownFolderGuid);
    public string get_Path();
    public void set_Path(string value);
    public Guid get_KnownFolderGuid();
    public void set_KnownFolderGuid(Guid value);
    public virtual string ToString();
}
public class System.Windows.Forms.FileDialogCustomPlacesCollection : Collection`1<FileDialogCustomPlace> {
    public void Add(string path);
    public void Add(Guid knownFolderGuid);
}
public enum System.Windows.Forms.FixedPanel : Enum {
    public int value__;
    public static FixedPanel None;
    public static FixedPanel Panel1;
    public static FixedPanel Panel2;
}
[TypeConverterAttribute("System.Windows.Forms.FlatButtonAppearanceConverter")]
public class System.Windows.Forms.FlatButtonAppearance : object {
    [BrowsableAttribute("True")]
[ApplicableToButtonAttribute]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonBorderSizeDescr")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("1")]
public int BorderSize { get; public set; }
    [BrowsableAttribute("True")]
[ApplicableToButtonAttribute]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonBorderColorDescr")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color BorderColor { get; public set; }
    [BrowsableAttribute("True")]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonCheckedBackColorDescr")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color CheckedBackColor { get; public set; }
    [BrowsableAttribute("True")]
[ApplicableToButtonAttribute]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonMouseDownBackColorDescr")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color MouseDownBackColor { get; public set; }
    [BrowsableAttribute("True")]
[ApplicableToButtonAttribute]
[NotifyParentPropertyAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ButtonMouseOverBackColorDescr")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("System.Drawing.Color", "")]
public Color MouseOverBackColor { get; public set; }
    public int get_BorderSize();
    public void set_BorderSize(int value);
    public Color get_BorderColor();
    public void set_BorderColor(Color value);
    public Color get_CheckedBackColor();
    public void set_CheckedBackColor(Color value);
    public Color get_MouseDownBackColor();
    public void set_MouseDownBackColor(Color value);
    public Color get_MouseOverBackColor();
    public void set_MouseOverBackColor(Color value);
}
internal class System.Windows.Forms.FlatButtonAppearanceConverter : ExpandableObjectConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
public enum System.Windows.Forms.FlatStyle : Enum {
    public int value__;
    public static FlatStyle Flat;
    public static FlatStyle Popup;
    public static FlatStyle Standard;
    public static FlatStyle System;
}
public enum System.Windows.Forms.FlowDirection : Enum {
    public int value__;
    public static FlowDirection LeftToRight;
    public static FlowDirection TopDown;
    public static FlowDirection RightToLeft;
    public static FlowDirection BottomUp;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[ProvidePropertyAttribute("FlowBreak", "System.Windows.Forms.Control")]
[DefaultPropertyAttribute("FlowDirection")]
[DesignerAttribute("System.Windows.Forms.Design.FlowLayoutPanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DockingAttribute("1")]
[SRDescriptionAttribute("DescriptionFlowLayoutPanel")]
public class System.Windows.Forms.FlowLayoutPanel : Panel {
    public LayoutEngine LayoutEngine { get; }
    [SRDescriptionAttribute("FlowPanelFlowDirectionDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
public FlowDirection FlowDirection { get; public set; }
    [SRDescriptionAttribute("FlowPanelWrapContentsDescr")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
public bool WrapContents { get; public set; }
    public virtual LayoutEngine get_LayoutEngine();
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    public bool get_WrapContents();
    public void set_WrapContents(bool value);
    private sealed virtual override bool System.ComponentModel.IExtenderProvider.CanExtend(object obj);
    [DefaultValueAttribute("False")]
[DisplayNameAttribute("FlowBreak")]
public bool GetFlowBreak(Control control);
    [DisplayNameAttribute("FlowBreak")]
public void SetFlowBreak(Control control, bool value);
}
[DefaultPropertyAttribute("FlowDirection")]
public class System.Windows.Forms.FlowLayoutSettings : LayoutSettings {
    public LayoutEngine LayoutEngine { get; }
    [SRDescriptionAttribute("FlowPanelFlowDirectionDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
public FlowDirection FlowDirection { get; public set; }
    [SRDescriptionAttribute("FlowPanelWrapContentsDescr")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CatLayout")]
public bool WrapContents { get; public set; }
    public virtual LayoutEngine get_LayoutEngine();
    public FlowDirection get_FlowDirection();
    public void set_FlowDirection(FlowDirection value);
    public bool get_WrapContents();
    public void set_WrapContents(bool value);
    public void SetFlowBreak(object child, bool value);
    public bool GetFlowBreak(object child);
}
[DefaultEventAttribute("HelpRequest")]
[DefaultPropertyAttribute("SelectedPath")]
[DesignerAttribute("System.Windows.Forms.Design.FolderBrowserDialogDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionFolderBrowserDialog")]
public class System.Windows.Forms.FolderBrowserDialog : CommonDialog {
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("False")]
[SRCategoryAttribute("CatFolderBrowsing")]
[SRDescriptionAttribute("FolderBrowserDialogShowNewFolderButton")]
public bool ShowNewFolderButton { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.SelectedPathEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatFolderBrowsing")]
[SRDescriptionAttribute("FolderBrowserDialogSelectedPath")]
public string SelectedPath { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("False")]
[SRCategoryAttribute("CatFolderBrowsing")]
[SRDescriptionAttribute("FolderBrowserDialogRootFolder")]
[TypeConverterAttribute("System.Windows.Forms.SpecialFolderEnumConverter")]
public SpecialFolder RootFolder { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatFolderBrowsing")]
[SRDescriptionAttribute("FolderBrowserDialogDescription")]
public string Description { get; public set; }
    public void add_HelpRequest(EventHandler value);
    public void remove_HelpRequest(EventHandler value);
    public bool get_ShowNewFolderButton();
    public void set_ShowNewFolderButton(bool value);
    public string get_SelectedPath();
    public void set_SelectedPath(string value);
    public SpecialFolder get_RootFolder();
    public void set_RootFolder(SpecialFolder value);
    public string get_Description();
    public void set_Description(string value);
    public virtual void Reset();
    protected virtual bool RunDialog(IntPtr hWndOwner);
}
[DefaultEventAttribute("Apply")]
[DefaultPropertyAttribute("Font")]
[SRDescriptionAttribute("DescriptionFontDialog")]
public class System.Windows.Forms.FontDialog : CommonDialog {
    protected static object EventApply;
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FnDallowSimulationsDescr")]
public bool AllowSimulations { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FnDallowVectorFontsDescr")]
public bool AllowVectorFonts { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FnDallowVerticalFontsDescr")]
public bool AllowVerticalFonts { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FnDallowScriptChangeDescr")]
public bool AllowScriptChange { get; public set; }
    [SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("FnDcolorDescr")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color Color { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDfixedPitchOnlyDescr")]
public bool FixedPitchOnly { get; public set; }
    [SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("FnDfontDescr")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDfontMustExistDescr")]
public bool FontMustExist { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("FnDmaxSizeDescr")]
public int MaxSize { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("FnDminSizeDescr")]
public int MinSize { get; public set; }
    protected int Options { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDscriptsOnlyDescr")]
public bool ScriptsOnly { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDshowApplyDescr")]
public bool ShowApply { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDshowColorDescr")]
public bool ShowColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FnDshowEffectsDescr")]
public bool ShowEffects { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FnDshowHelpDescr")]
public bool ShowHelp { get; public set; }
    private static FontDialog();
    public bool get_AllowSimulations();
    public void set_AllowSimulations(bool value);
    public bool get_AllowVectorFonts();
    public void set_AllowVectorFonts(bool value);
    public bool get_AllowVerticalFonts();
    public void set_AllowVerticalFonts(bool value);
    public bool get_AllowScriptChange();
    public void set_AllowScriptChange(bool value);
    public Color get_Color();
    public void set_Color(Color value);
    public bool get_FixedPitchOnly();
    public void set_FixedPitchOnly(bool value);
    public Font get_Font();
    public void set_Font(Font value);
    public bool get_FontMustExist();
    public void set_FontMustExist(bool value);
    public int get_MaxSize();
    public void set_MaxSize(int value);
    public int get_MinSize();
    public void set_MinSize(int value);
    protected int get_Options();
    public bool get_ScriptsOnly();
    public void set_ScriptsOnly(bool value);
    public bool get_ShowApply();
    public void set_ShowApply(bool value);
    public bool get_ShowColor();
    public void set_ShowColor(bool value);
    public bool get_ShowEffects();
    public void set_ShowEffects(bool value);
    public bool get_ShowHelp();
    public void set_ShowHelp(bool value);
    public void add_Apply(EventHandler value);
    public void remove_Apply(EventHandler value);
    protected virtual IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    protected virtual void OnApply(EventArgs e);
    public virtual void Reset();
    protected virtual bool RunDialog(IntPtr hWndOwner);
    public virtual string ToString();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[ToolboxItemFilterAttribute("System.Windows.Forms.Control.TopLevel")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DesignerAttribute("System.Windows.Forms.Design.FormDocumentDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")]
[DesignerCategoryAttribute("Form")]
[DefaultEventAttribute("Load")]
[InitializationEventAttribute("Load")]
public class System.Windows.Forms.Form : ContainerControl {
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("FormAcceptButtonDescr")]
public IButtonControl AcceptButton { get; public set; }
    public static Form ActiveForm { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormActiveMDIChildDescr")]
public Form ActiveMdiChild { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlAllowTransparencyDescr")]
public bool AllowTransparency { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("FormAutoScaleDescr")]
[ObsoleteAttribute("This property has been deprecated. Use the AutoScaleMode property instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoScale { get; public set; }
    [LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScaleBaseSize { get; public set; }
    [LocalizableAttribute("True")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRDescriptionAttribute("ControlAutoSizeModeDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoValidate AutoValidate { get; public set; }
    public Color BackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("FormBorderStyleDescr")]
public FormBorderStyle FormBorderStyle { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("FormCancelButtonDescr")]
public IButtonControl CancelButton { get; public set; }
    [LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("1")]
public Size ClientSize { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FormControlBoxDescr")]
public bool ControlBox { get; public set; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormDesktopBoundsDescr")]
public Rectangle DesktopBounds { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormDesktopLocationDescr")]
public Point DesktopLocation { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormDialogResultDescr")]
public DialogResult DialogResult { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FormHelpButtonDescr")]
public bool HelpButton { get; public set; }
    [AmbientValueAttribute("")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatWindowStyle")]
[SRDescriptionAttribute("FormIconDescr")]
public Icon Icon { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormIsMDIChildDescr")]
public bool IsMdiChild { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FormIsMDIContainerDescr")]
public bool IsMdiContainer { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsRestrictedWindow { get; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("FormKeyPreviewDescr")]
public bool KeyPreview { get; public set; }
    [SettingsBindableAttribute("True")]
public Point Location { get; public set; }
    protected Rectangle MaximizedBounds { get; protected set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FormMaximumSizeDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("System.Drawing.Size", "0, 0")]
public Size MaximumSize { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("FormMenuStripDescr")]
[TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
public MenuStrip MainMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Padding Margin { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("FormMenuDescr")]
[TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[BrowsableAttribute("False")]
public MainMenu Menu { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FormMinimumSizeDescr")]
[RefreshPropertiesAttribute("2")]
public Size MinimumSize { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FormMaximizeBoxDescr")]
public bool MaximizeBox { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormMDIChildrenDescr")]
public Form[] MdiChildren { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormMDIParentDescr")]
public Form MdiParent { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormMergedMenuDescr")]
public MainMenu MergedMenu { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("FormMinimizeBoxDescr")]
public bool MinimizeBox { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormModalDescr")]
public bool Modal { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[TypeConverterAttribute("System.Windows.Forms.OpacityConverter")]
[SRDescriptionAttribute("FormOpacityDescr")]
[DefaultValueAttribute("1")]
public double Opacity { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormOwnedFormsDescr")]
public Form[] OwnedForms { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormOwnerDescr")]
public Form Owner { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Rectangle RestoreBounds { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatWindowStyle")]
[SRDescriptionAttribute("FormShowInTaskbarDescr")]
public bool ShowInTaskbar { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatWindowStyle")]
[SRDescriptionAttribute("FormShowIconDescr")]
public bool ShowIcon { get; public set; }
    [BrowsableAttribute("False")]
protected bool ShowWithoutActivation { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[LocalizableAttribute("False")]
public Size Size { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("FormSizeGripStyleDescr")]
public SizeGripStyle SizeGripStyle { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("FormStartPositionDescr")]
public FormStartPosition StartPosition { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public int TabIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DispIdAttribute("-516")]
[SRDescriptionAttribute("ControlTabStopDescr")]
public bool TabStop { get; public set; }
    [SettingsBindableAttribute("True")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public bool TopLevel { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatWindowStyle")]
[SRDescriptionAttribute("FormTopMostDescr")]
public bool TopMost { get; public set; }
    [SRCategoryAttribute("CatWindowStyle")]
[SRDescriptionAttribute("FormTransparencyKeyDescr")]
public Color TransparencyKey { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("FormWindowStateDescr")]
public FormWindowState WindowState { get; public set; }
    private static Form();
    public IButtonControl get_AcceptButton();
    public void set_AcceptButton(IButtonControl value);
    public static Form get_ActiveForm();
    public Form get_ActiveMdiChild();
    public bool get_AllowTransparency();
    public void set_AllowTransparency(bool value);
    public bool get_AutoScale();
    public void set_AutoScale(bool value);
    public virtual Size get_AutoScaleBaseSize();
    public virtual void set_AutoScaleBaseSize(Size value);
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public AutoSizeMode get_AutoSizeMode();
    public void set_AutoSizeMode(AutoSizeMode value);
    public virtual AutoValidate get_AutoValidate();
    public virtual void set_AutoValidate(AutoValidate value);
    public void add_AutoValidateChanged(EventHandler value);
    public void remove_AutoValidateChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public FormBorderStyle get_FormBorderStyle();
    public void set_FormBorderStyle(FormBorderStyle value);
    public IButtonControl get_CancelButton();
    public void set_CancelButton(IButtonControl value);
    public Size get_ClientSize();
    public void set_ClientSize(Size value);
    public bool get_ControlBox();
    public void set_ControlBox(bool value);
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Size get_DefaultSize();
    public Rectangle get_DesktopBounds();
    public void set_DesktopBounds(Rectangle value);
    public Point get_DesktopLocation();
    public void set_DesktopLocation(Point value);
    public DialogResult get_DialogResult();
    public void set_DialogResult(DialogResult value);
    public bool get_HelpButton();
    public void set_HelpButton(bool value);
    public void add_HelpButtonClicked(CancelEventHandler value);
    public void remove_HelpButtonClicked(CancelEventHandler value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    public bool get_IsMdiChild();
    public bool get_IsMdiContainer();
    public void set_IsMdiContainer(bool value);
    public bool get_IsRestrictedWindow();
    public bool get_KeyPreview();
    public void set_KeyPreview(bool value);
    public Point get_Location();
    public void set_Location(Point value);
    protected Rectangle get_MaximizedBounds();
    protected void set_MaximizedBounds(Rectangle value);
    public void add_MaximizedBoundsChanged(EventHandler value);
    public void remove_MaximizedBoundsChanged(EventHandler value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public void add_MaximumSizeChanged(EventHandler value);
    public void remove_MaximumSizeChanged(EventHandler value);
    public MenuStrip get_MainMenuStrip();
    public void set_MainMenuStrip(MenuStrip value);
    public Padding get_Margin();
    public void set_Margin(Padding value);
    public void add_MarginChanged(EventHandler value);
    public void remove_MarginChanged(EventHandler value);
    public MainMenu get_Menu();
    public void set_Menu(MainMenu value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public void add_MinimumSizeChanged(EventHandler value);
    public void remove_MinimumSizeChanged(EventHandler value);
    public bool get_MaximizeBox();
    public void set_MaximizeBox(bool value);
    public Form[] get_MdiChildren();
    public Form get_MdiParent();
    public void set_MdiParent(Form value);
    public MainMenu get_MergedMenu();
    public bool get_MinimizeBox();
    public void set_MinimizeBox(bool value);
    public bool get_Modal();
    public double get_Opacity();
    public void set_Opacity(double value);
    public Form[] get_OwnedForms();
    public Form get_Owner();
    public void set_Owner(Form value);
    public Rectangle get_RestoreBounds();
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public bool get_ShowInTaskbar();
    public void set_ShowInTaskbar(bool value);
    public bool get_ShowIcon();
    public void set_ShowIcon(bool value);
    protected virtual bool get_ShowWithoutActivation();
    public Size get_Size();
    public void set_Size(Size value);
    public SizeGripStyle get_SizeGripStyle();
    public void set_SizeGripStyle(SizeGripStyle value);
    public FormStartPosition get_StartPosition();
    public void set_StartPosition(FormStartPosition value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public bool get_TopLevel();
    public void set_TopLevel(bool value);
    public bool get_TopMost();
    public void set_TopMost(bool value);
    public Color get_TransparencyKey();
    public void set_TransparencyKey(Color value);
    [EditorBrowsableAttribute("2")]
protected virtual void SetVisibleCore(bool value);
    public FormWindowState get_WindowState();
    public void set_WindowState(FormWindowState value);
    public void add_Activated(EventHandler value);
    public void remove_Activated(EventHandler value);
    public void add_Closing(CancelEventHandler value);
    public void remove_Closing(CancelEventHandler value);
    public void add_Closed(EventHandler value);
    public void remove_Closed(EventHandler value);
    public void add_Deactivate(EventHandler value);
    public void remove_Deactivate(EventHandler value);
    public void add_FormClosing(FormClosingEventHandler value);
    public void remove_FormClosing(FormClosingEventHandler value);
    public void add_FormClosed(FormClosedEventHandler value);
    public void remove_FormClosed(FormClosedEventHandler value);
    public void add_Load(EventHandler value);
    public void remove_Load(EventHandler value);
    public void add_MdiChildActivate(EventHandler value);
    public void remove_MdiChildActivate(EventHandler value);
    public void add_MenuComplete(EventHandler value);
    public void remove_MenuComplete(EventHandler value);
    public void add_MenuStart(EventHandler value);
    public void remove_MenuStart(EventHandler value);
    public void add_InputLanguageChanged(InputLanguageChangedEventHandler value);
    public void remove_InputLanguageChanged(InputLanguageChangedEventHandler value);
    public void add_InputLanguageChanging(InputLanguageChangingEventHandler value);
    public void remove_InputLanguageChanging(InputLanguageChangingEventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public void add_Shown(EventHandler value);
    public void remove_Shown(EventHandler value);
    public void Activate();
    protected void ActivateMdiChild(Form form);
    public void AddOwnedForm(Form ownedForm);
    [EditorBrowsableAttribute("2")]
protected virtual void AdjustFormScrollbars(bool displayScrollbars);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method has been deprecated. Use the ApplyAutoScaling method instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected void ApplyAutoScaling();
    public void Close();
    [EditorBrowsableAttribute("2")]
protected virtual ControlCollection CreateControlsInstance();
    [EditorBrowsableAttribute("2")]
protected virtual void CreateHandle();
    [EditorBrowsableAttribute("2")]
protected virtual void DefWndProc(Message& m);
    protected virtual void Dispose(bool disposing);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This method has been deprecated. Use the AutoScaleDimensions property instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public static SizeF GetAutoScaleSize(Font font);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected void CenterToParent();
    protected void CenterToScreen();
    public void LayoutMdi(MdiLayout value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnActivated(EventArgs e);
    protected virtual void OnBackgroundImageChanged(EventArgs e);
    protected virtual void OnBackgroundImageLayoutChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnClosing(CancelEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnClosed(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnFormClosing(FormClosingEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnFormClosed(FormClosedEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateControl();
    [EditorBrowsableAttribute("2")]
protected virtual void OnDeactivate(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnEnabledChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnEnter(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnFontChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnHandleCreated(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnHandleDestroyed(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnHelpButtonClicked(CancelEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs levent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLoad(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMaximizedBoundsChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMaximumSizeChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMinimumSizeChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnInputLanguageChanged(InputLanguageChangedEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnInputLanguageChanging(InputLanguageChangingEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnVisibleChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMdiChildActivate(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMenuStart(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMenuComplete(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnPaint(PaintEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnResize(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnShown(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnTextChanged(EventArgs e);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected virtual bool ProcessDialogKey(Keys keyData);
    [EditorBrowsableAttribute("2")]
protected virtual bool ProcessDialogChar(char charCode);
    protected virtual bool ProcessKeyPreview(Message& m);
    protected virtual bool ProcessTabKey(bool forward);
    public void RemoveOwnedForm(Form ownedForm);
    public void add_ResizeBegin(EventHandler value);
    public void remove_ResizeBegin(EventHandler value);
    public void add_ResizeEnd(EventHandler value);
    public void remove_ResizeEnd(EventHandler value);
    protected virtual void Select(bool directed, bool forward);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float x, float y);
    [EditorBrowsableAttribute("2")]
protected virtual Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified);
    [EditorBrowsableAttribute("2")]
protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    [EditorBrowsableAttribute("2")]
protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    [EditorBrowsableAttribute("2")]
protected virtual void SetClientSizeCore(int x, int y);
    public void SetDesktopBounds(int x, int y, int width, int height);
    public void SetDesktopLocation(int x, int y);
    public void Show(IWin32Window owner);
    public DialogResult ShowDialog();
    public DialogResult ShowDialog(IWin32Window owner);
    public virtual string ToString();
    protected virtual void UpdateDefaultButton();
    [EditorBrowsableAttribute("2")]
protected virtual void OnResizeBegin(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnResizeEnd(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnStyleChanged(EventArgs e);
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public virtual bool ValidateChildren();
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public virtual bool ValidateChildren(ValidationConstraints validationConstraints);
    [EditorBrowsableAttribute("2")]
protected virtual void WndProc(Message& m);
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.FormBorderStyle : Enum {
    public int value__;
    public static FormBorderStyle None;
    public static FormBorderStyle FixedSingle;
    public static FormBorderStyle Fixed3D;
    public static FormBorderStyle FixedDialog;
    public static FormBorderStyle Sizable;
    public static FormBorderStyle FixedToolWindow;
    public static FormBorderStyle SizableToolWindow;
}
public class System.Windows.Forms.FormClosedEventArgs : EventArgs {
    public CloseReason CloseReason { get; }
    public FormClosedEventArgs(CloseReason closeReason);
    public CloseReason get_CloseReason();
}
public class System.Windows.Forms.FormClosedEventHandler : MulticastDelegate {
    public FormClosedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormClosedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormClosedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.FormClosingEventArgs : CancelEventArgs {
    public CloseReason CloseReason { get; }
    public FormClosingEventArgs(CloseReason closeReason, bool cancel);
    public CloseReason get_CloseReason();
}
public class System.Windows.Forms.FormClosingEventHandler : MulticastDelegate {
    public FormClosingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FormClosingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FormClosingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.FormCollection : ReadOnlyCollectionBase {
    public Form Item { get; }
    public Form Item { get; }
    private static FormCollection();
    public virtual Form get_Item(string name);
    public virtual Form get_Item(int index);
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.FormStartPosition : Enum {
    public int value__;
    public static FormStartPosition Manual;
    public static FormStartPosition CenterScreen;
    public static FormStartPosition WindowsDefaultLocation;
    public static FormStartPosition WindowsDefaultBounds;
    public static FormStartPosition CenterParent;
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.FormWindowState : Enum {
    public int value__;
    public static FormWindowState Normal;
    public static FormWindowState Minimized;
    public static FormWindowState Maximized;
}
public enum System.Windows.Forms.FrameStyle : Enum {
    public int value__;
    public static FrameStyle Dashed;
    public static FrameStyle Thick;
}
[FlagsAttribute]
public enum System.Windows.Forms.GetChildAtPointSkip : Enum {
    public int value__;
    public static GetChildAtPointSkip None;
    public static GetChildAtPointSkip Invisible;
    public static GetChildAtPointSkip Disabled;
    public static GetChildAtPointSkip Transparent;
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.GiveFeedbackEventArgs : EventArgs {
    public DragDropEffects Effect { get; }
    public bool UseDefaultCursors { get; public set; }
    public GiveFeedbackEventArgs(DragDropEffects effect, bool useDefaultCursors);
    public DragDropEffects get_Effect();
    public bool get_UseDefaultCursors();
    public void set_UseDefaultCursors(bool value);
}
public class System.Windows.Forms.GiveFeedbackEventHandler : MulticastDelegate {
    public GiveFeedbackEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, GiveFeedbackEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, GiveFeedbackEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Windows.Forms.Design.DataGridColumnCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.GridColumnStylesCollection : BaseCollection {
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList List { get; }
    public DataGridColumnStyle Item { get; }
    public DataGridColumnStyle Item { get; }
    public DataGridColumnStyle Item { get; }
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual ArrayList get_List();
    public DataGridColumnStyle get_Item(int index);
    public DataGridColumnStyle get_Item(string columnName);
    public DataGridColumnStyle get_Item(PropertyDescriptor propertyDesciptor);
    public virtual int Add(DataGridColumnStyle column);
    public void AddRange(DataGridColumnStyle[] columns);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public void Clear();
    public bool Contains(PropertyDescriptor propertyDescriptor);
    public bool Contains(DataGridColumnStyle column);
    public bool Contains(string name);
    public int IndexOf(DataGridColumnStyle element);
    protected void OnCollectionChanged(CollectionChangeEventArgs e);
    public void Remove(DataGridColumnStyle column);
    public void RemoveAt(int index);
    public void ResetPropertyDescriptors();
}
public abstract class System.Windows.Forms.GridItem : object {
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    public GridItemCollection GridItems { get; }
    public GridItemType GridItemType { get; }
    public string Label { get; }
    public GridItem Parent { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public object Value { get; }
    public bool Expandable { get; }
    public bool Expanded { get; public set; }
    public object get_Tag();
    public void set_Tag(object value);
    public abstract virtual GridItemCollection get_GridItems();
    public abstract virtual GridItemType get_GridItemType();
    public abstract virtual string get_Label();
    public abstract virtual GridItem get_Parent();
    public abstract virtual PropertyDescriptor get_PropertyDescriptor();
    public abstract virtual object get_Value();
    public virtual bool get_Expandable();
    public virtual bool get_Expanded();
    public virtual void set_Expanded(bool value);
    public abstract virtual bool Select();
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.GridItemCollection : object {
    public static GridItemCollection Empty;
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    public GridItem Item { get; }
    public GridItem Item { get; }
    private static GridItemCollection();
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public GridItem get_Item(int index);
    public GridItem get_Item(string label);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array dest, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public enum System.Windows.Forms.GridItemType : Enum {
    public int value__;
    public static GridItemType Property;
    public static GridItemType Category;
    public static GridItemType ArrayValue;
    public static GridItemType Root;
}
public class System.Windows.Forms.GridTablesFactory : object {
    public static DataGridTableStyle[] CreateGridTables(DataGridTableStyle gridTable, object dataSource, string dataMember, BindingContext bindingManager);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.GridTableStylesCollection : BaseCollection {
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    protected ArrayList List { get; }
    public DataGridTableStyle Item { get; }
    public DataGridTableStyle Item { get; }
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected virtual ArrayList get_List();
    public DataGridTableStyle get_Item(int index);
    public DataGridTableStyle get_Item(string tableName);
    public virtual int Add(DataGridTableStyle table);
    public virtual void AddRange(DataGridTableStyle[] tables);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public void Clear();
    public bool Contains(DataGridTableStyle table);
    public bool Contains(string name);
    protected void OnCollectionChanged(CollectionChangeEventArgs e);
    public void Remove(DataGridTableStyle table);
    public void RemoveAt(int index);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultEventAttribute("Enter")]
[DefaultPropertyAttribute("Text")]
[DesignerAttribute("System.Windows.Forms.Design.GroupBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionGroupBox")]
public class System.Windows.Forms.GroupBox : Control {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool AllowDrop { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRDescriptionAttribute("ControlAutoSizeModeDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
public AutoSizeMode AutoSizeMode { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Padding DefaultPadding { get; }
    protected Size DefaultSize { get; }
    public Rectangle DisplayRectangle { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ButtonFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool TabStop { get; public set; }
    [LocalizableAttribute("True")]
public string Text { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public AutoSizeMode get_AutoSizeMode();
    public void set_AutoSizeMode(AutoSizeMode value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Padding get_DefaultPadding();
    protected virtual Size get_DefaultSize();
    public virtual Rectangle get_DisplayRectangle();
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    public virtual string ToString();
    protected virtual void WndProc(Message& m);
    protected virtual AccessibleObject CreateAccessibilityInstance();
}
public class System.Windows.Forms.GroupBoxRenderer : object {
    public static bool RenderMatchingApplicationState { get; public set; }
    private static GroupBoxRenderer();
    public static bool get_RenderMatchingApplicationState();
    public static void set_RenderMatchingApplicationState(bool value);
    public static bool IsBackgroundPartiallyTransparent(GroupBoxState state);
    public static void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl);
    public static void DrawGroupBox(Graphics g, Rectangle bounds, GroupBoxState state);
    public static void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, GroupBoxState state);
    public static void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, Color textColor, GroupBoxState state);
    public static void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, TextFormatFlags flags, GroupBoxState state);
    public static void DrawGroupBox(Graphics g, Rectangle bounds, string groupBoxText, Font font, Color textColor, TextFormatFlags flags, GroupBoxState state);
}
public class System.Windows.Forms.HandledMouseEventArgs : MouseEventArgs {
    public bool Handled { get; public set; }
    public HandledMouseEventArgs(MouseButtons button, int clicks, int x, int y, int delta);
    public HandledMouseEventArgs(MouseButtons button, int clicks, int x, int y, int delta, bool defaultHandledValue);
    public bool get_Handled();
    public void set_Handled(bool value);
}
public class System.Windows.Forms.Help : object {
    public static void ShowHelp(Control parent, string url);
    public static void ShowHelp(Control parent, string url, HelpNavigator navigator);
    public static void ShowHelp(Control parent, string url, string keyword);
    public static void ShowHelp(Control parent, string url, HelpNavigator command, object parameter);
    public static void ShowHelpIndex(Control parent, string url);
    public static void ShowPopup(Control parent, string caption, Point location);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.HelpEventArgs : EventArgs {
    public Point MousePos { get; }
    public bool Handled { get; public set; }
    public HelpEventArgs(Point mousePos);
    public Point get_MousePos();
    public bool get_Handled();
    public void set_Handled(bool value);
}
public class System.Windows.Forms.HelpEventHandler : MulticastDelegate {
    public HelpEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, HelpEventArgs hlpevent);
    public virtual IAsyncResult BeginInvoke(object sender, HelpEventArgs hlpevent, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.HelpNavigator : Enum {
    public int value__;
    public static HelpNavigator Topic;
    public static HelpNavigator TableOfContents;
    public static HelpNavigator Index;
    public static HelpNavigator Find;
    public static HelpNavigator AssociateIndex;
    public static HelpNavigator KeywordIndex;
    public static HelpNavigator TopicId;
}
[ProvidePropertyAttribute("HelpString", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("HelpKeyword", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("HelpNavigator", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("ShowHelp", "System.Windows.Forms.Control")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[SRDescriptionAttribute("DescriptionHelpProvider")]
public class System.Windows.Forms.HelpProvider : Component {
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.HelpNamespaceEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("HelpProviderHelpNamespaceDescr")]
public string HelpNamespace { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    public virtual string get_HelpNamespace();
    public virtual void set_HelpNamespace(string value);
    public object get_Tag();
    public void set_Tag(object value);
    public virtual bool CanExtend(object target);
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("HelpProviderHelpKeywordDescr")]
public virtual string GetHelpKeyword(Control ctl);
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("HelpProviderNavigatorDescr")]
public virtual HelpNavigator GetHelpNavigator(Control ctl);
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("HelpProviderHelpStringDescr")]
public virtual string GetHelpString(Control ctl);
    [LocalizableAttribute("True")]
[SRDescriptionAttribute("HelpProviderShowHelpDescr")]
public virtual bool GetShowHelp(Control ctl);
    public virtual void SetHelpString(Control ctl, string helpString);
    public virtual void SetHelpKeyword(Control ctl, string keyword);
    public virtual void SetHelpNavigator(Control ctl, HelpNavigator navigator);
    public virtual void SetShowHelp(Control ctl, bool value);
    public virtual void ResetShowHelp(Control ctl);
    public virtual string ToString();
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.HorizontalAlignment : Enum {
    public int value__;
    public static HorizontalAlignment Left;
    public static HorizontalAlignment Right;
    public static HorizontalAlignment Center;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[SRDescriptionAttribute("DescriptionHScrollBar")]
public class System.Windows.Forms.HScrollBar : ScrollBar {
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
}
public class System.Windows.Forms.HScrollProperties : ScrollProperties {
    public HScrollProperties(ScrollableControl container);
}
public class System.Windows.Forms.HtmlDocument : object {
    public HtmlElement ActiveElement { get; }
    public HtmlElement Body { get; }
    public string Domain { get; public set; }
    public string Title { get; public set; }
    public Uri Url { get; }
    public HtmlWindow Window { get; }
    public Color BackColor { get; public set; }
    public Color ForeColor { get; public set; }
    public Color LinkColor { get; public set; }
    public Color ActiveLinkColor { get; public set; }
    public Color VisitedLinkColor { get; public set; }
    public bool Focused { get; }
    public object DomDocument { get; }
    public string Cookie { get; public set; }
    public bool RightToLeft { get; public set; }
    public string Encoding { get; public set; }
    public string DefaultEncoding { get; }
    public HtmlElementCollection All { get; }
    public HtmlElementCollection Links { get; }
    public HtmlElementCollection Images { get; }
    public HtmlElementCollection Forms { get; }
    private static HtmlDocument();
    public HtmlElement get_ActiveElement();
    public HtmlElement get_Body();
    public string get_Domain();
    public void set_Domain(string value);
    public string get_Title();
    public void set_Title(string value);
    public Uri get_Url();
    public HtmlWindow get_Window();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    public Color get_ActiveLinkColor();
    public void set_ActiveLinkColor(Color value);
    public Color get_VisitedLinkColor();
    public void set_VisitedLinkColor(Color value);
    public bool get_Focused();
    public object get_DomDocument();
    public string get_Cookie();
    public void set_Cookie(string value);
    public bool get_RightToLeft();
    public void set_RightToLeft(bool value);
    public string get_Encoding();
    public void set_Encoding(string value);
    public string get_DefaultEncoding();
    public HtmlElementCollection get_All();
    public HtmlElementCollection get_Links();
    public HtmlElementCollection get_Images();
    public HtmlElementCollection get_Forms();
    public void Write(string text);
    public void ExecCommand(string command, bool showUI, object value);
    [EditorBrowsableAttribute("2")]
public void Focus();
    public HtmlElement GetElementById(string id);
    public HtmlElement GetElementFromPoint(Point point);
    public HtmlElementCollection GetElementsByTagName(string tagName);
    public HtmlDocument OpenNew(bool replaceInHistory);
    public HtmlElement CreateElement(string elementTag);
    public object InvokeScript(string scriptName, Object[] args);
    public object InvokeScript(string scriptName);
    public void AttachEventHandler(string eventName, EventHandler eventHandler);
    public void DetachEventHandler(string eventName, EventHandler eventHandler);
    public void add_Click(HtmlElementEventHandler value);
    public void remove_Click(HtmlElementEventHandler value);
    public void add_ContextMenuShowing(HtmlElementEventHandler value);
    public void remove_ContextMenuShowing(HtmlElementEventHandler value);
    public void add_Focusing(HtmlElementEventHandler value);
    public void remove_Focusing(HtmlElementEventHandler value);
    public void add_LosingFocus(HtmlElementEventHandler value);
    public void remove_LosingFocus(HtmlElementEventHandler value);
    public void add_MouseDown(HtmlElementEventHandler value);
    public void remove_MouseDown(HtmlElementEventHandler value);
    public void add_MouseLeave(HtmlElementEventHandler value);
    public void remove_MouseLeave(HtmlElementEventHandler value);
    public void add_MouseMove(HtmlElementEventHandler value);
    public void remove_MouseMove(HtmlElementEventHandler value);
    public void add_MouseOver(HtmlElementEventHandler value);
    public void remove_MouseOver(HtmlElementEventHandler value);
    public void add_MouseUp(HtmlElementEventHandler value);
    public void remove_MouseUp(HtmlElementEventHandler value);
    public void add_Stop(HtmlElementEventHandler value);
    public void remove_Stop(HtmlElementEventHandler value);
    public static bool op_Equality(HtmlDocument left, HtmlDocument right);
    public static bool op_Inequality(HtmlDocument left, HtmlDocument right);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
public class System.Windows.Forms.HtmlElement : object {
    public HtmlElementCollection All { get; }
    public HtmlElementCollection Children { get; }
    public bool CanHaveChildren { get; }
    public Rectangle ClientRectangle { get; }
    public HtmlDocument Document { get; }
    public bool Enabled { get; public set; }
    public HtmlElement FirstChild { get; }
    public string Id { get; public set; }
    public string InnerHtml { get; public set; }
    public string InnerText { get; public set; }
    public string Name { get; public set; }
    public HtmlElement NextSibling { get; }
    public Rectangle OffsetRectangle { get; }
    public HtmlElement OffsetParent { get; }
    public string OuterHtml { get; public set; }
    public string OuterText { get; public set; }
    public HtmlElement Parent { get; }
    public Rectangle ScrollRectangle { get; }
    public int ScrollLeft { get; public set; }
    public int ScrollTop { get; public set; }
    public string Style { get; public set; }
    public string TagName { get; }
    public short TabIndex { get; public set; }
    public object DomElement { get; }
    private static HtmlElement();
    public HtmlElementCollection get_All();
    public HtmlElementCollection get_Children();
    public bool get_CanHaveChildren();
    public Rectangle get_ClientRectangle();
    public HtmlDocument get_Document();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public HtmlElement get_FirstChild();
    public string get_Id();
    public void set_Id(string value);
    public string get_InnerHtml();
    public void set_InnerHtml(string value);
    public string get_InnerText();
    public void set_InnerText(string value);
    public string get_Name();
    public void set_Name(string value);
    public HtmlElement get_NextSibling();
    public Rectangle get_OffsetRectangle();
    public HtmlElement get_OffsetParent();
    public string get_OuterHtml();
    public void set_OuterHtml(string value);
    public string get_OuterText();
    public void set_OuterText(string value);
    public HtmlElement get_Parent();
    public Rectangle get_ScrollRectangle();
    public int get_ScrollLeft();
    public void set_ScrollLeft(int value);
    public int get_ScrollTop();
    public void set_ScrollTop(int value);
    public string get_Style();
    public void set_Style(string value);
    public string get_TagName();
    public short get_TabIndex();
    public void set_TabIndex(short value);
    public object get_DomElement();
    public HtmlElement AppendChild(HtmlElement newElement);
    public void AttachEventHandler(string eventName, EventHandler eventHandler);
    public void DetachEventHandler(string eventName, EventHandler eventHandler);
    public void Focus();
    public string GetAttribute(string attributeName);
    public HtmlElementCollection GetElementsByTagName(string tagName);
    public HtmlElement InsertAdjacentElement(HtmlElementInsertionOrientation orient, HtmlElement newElement);
    public object InvokeMember(string methodName);
    public object InvokeMember(string methodName, Object[] parameter);
    public void RemoveFocus();
    public void RaiseEvent(string eventName);
    public void ScrollIntoView(bool alignWithTop);
    public void SetAttribute(string attributeName, string value);
    public void add_Click(HtmlElementEventHandler value);
    public void remove_Click(HtmlElementEventHandler value);
    public void add_DoubleClick(HtmlElementEventHandler value);
    public void remove_DoubleClick(HtmlElementEventHandler value);
    public void add_Drag(HtmlElementEventHandler value);
    public void remove_Drag(HtmlElementEventHandler value);
    public void add_DragEnd(HtmlElementEventHandler value);
    public void remove_DragEnd(HtmlElementEventHandler value);
    public void add_DragLeave(HtmlElementEventHandler value);
    public void remove_DragLeave(HtmlElementEventHandler value);
    public void add_DragOver(HtmlElementEventHandler value);
    public void remove_DragOver(HtmlElementEventHandler value);
    public void add_Focusing(HtmlElementEventHandler value);
    public void remove_Focusing(HtmlElementEventHandler value);
    public void add_GotFocus(HtmlElementEventHandler value);
    public void remove_GotFocus(HtmlElementEventHandler value);
    public void add_LosingFocus(HtmlElementEventHandler value);
    public void remove_LosingFocus(HtmlElementEventHandler value);
    public void add_LostFocus(HtmlElementEventHandler value);
    public void remove_LostFocus(HtmlElementEventHandler value);
    public void add_KeyDown(HtmlElementEventHandler value);
    public void remove_KeyDown(HtmlElementEventHandler value);
    public void add_KeyPress(HtmlElementEventHandler value);
    public void remove_KeyPress(HtmlElementEventHandler value);
    public void add_KeyUp(HtmlElementEventHandler value);
    public void remove_KeyUp(HtmlElementEventHandler value);
    public void add_MouseMove(HtmlElementEventHandler value);
    public void remove_MouseMove(HtmlElementEventHandler value);
    public void add_MouseDown(HtmlElementEventHandler value);
    public void remove_MouseDown(HtmlElementEventHandler value);
    public void add_MouseOver(HtmlElementEventHandler value);
    public void remove_MouseOver(HtmlElementEventHandler value);
    public void add_MouseUp(HtmlElementEventHandler value);
    public void remove_MouseUp(HtmlElementEventHandler value);
    public void add_MouseEnter(HtmlElementEventHandler value);
    public void remove_MouseEnter(HtmlElementEventHandler value);
    public void add_MouseLeave(HtmlElementEventHandler value);
    public void remove_MouseLeave(HtmlElementEventHandler value);
    public static bool op_Equality(HtmlElement left, HtmlElement right);
    public static bool op_Inequality(HtmlElement left, HtmlElement right);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.HtmlElementCollection : object {
    public HtmlElement Item { get; }
    public HtmlElement Item { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public HtmlElement get_Item(int index);
    public HtmlElement get_Item(string elementId);
    public HtmlElementCollection GetElementsByName(string name);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array dest, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Windows.Forms.HtmlElementErrorEventArgs : EventArgs {
    public string Description { get; }
    public bool Handled { get; public set; }
    public int LineNumber { get; }
    public Uri Url { get; }
    public string get_Description();
    public bool get_Handled();
    public void set_Handled(bool value);
    public int get_LineNumber();
    public Uri get_Url();
}
public class System.Windows.Forms.HtmlElementErrorEventHandler : MulticastDelegate {
    public HtmlElementErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, HtmlElementErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, HtmlElementErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.HtmlElementEventArgs : EventArgs {
    public MouseButtons MouseButtonsPressed { get; }
    public Point ClientMousePosition { get; }
    public Point OffsetMousePosition { get; }
    public Point MousePosition { get; }
    public bool BubbleEvent { get; public set; }
    public int KeyPressedCode { get; }
    public bool AltKeyPressed { get; }
    public bool CtrlKeyPressed { get; }
    public bool ShiftKeyPressed { get; }
    public string EventType { get; }
    public bool ReturnValue { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public HtmlElement FromElement { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public HtmlElement ToElement { get; }
    public MouseButtons get_MouseButtonsPressed();
    public Point get_ClientMousePosition();
    public Point get_OffsetMousePosition();
    public Point get_MousePosition();
    public bool get_BubbleEvent();
    public void set_BubbleEvent(bool value);
    public int get_KeyPressedCode();
    public bool get_AltKeyPressed();
    public bool get_CtrlKeyPressed();
    public bool get_ShiftKeyPressed();
    public string get_EventType();
    public bool get_ReturnValue();
    public void set_ReturnValue(bool value);
    public HtmlElement get_FromElement();
    public HtmlElement get_ToElement();
}
public class System.Windows.Forms.HtmlElementEventHandler : MulticastDelegate {
    public HtmlElementEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, HtmlElementEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, HtmlElementEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.HtmlElementInsertionOrientation : Enum {
    public int value__;
    public static HtmlElementInsertionOrientation BeforeBegin;
    public static HtmlElementInsertionOrientation AfterBegin;
    public static HtmlElementInsertionOrientation BeforeEnd;
    public static HtmlElementInsertionOrientation AfterEnd;
}
public class System.Windows.Forms.HtmlHistory : object {
    public int Length { get; }
    public object DomHistory { get; }
    public sealed virtual void Dispose();
    public int get_Length();
    public void Back(int numberBack);
    public void Forward(int numberForward);
    public void Go(Uri url);
    public void Go(string urlString);
    public void Go(int relativePosition);
    public object get_DomHistory();
}
public class System.Windows.Forms.HtmlWindow : object {
    public HtmlDocument Document { get; }
    public object DomWindow { get; }
    public HtmlWindowCollection Frames { get; }
    public HtmlHistory History { get; }
    public bool IsClosed { get; }
    public string Name { get; public set; }
    public HtmlWindow Opener { get; }
    public HtmlWindow Parent { get; }
    public Point Position { get; }
    public Size Size { get; public set; }
    public string StatusBarText { get; public set; }
    public Uri Url { get; }
    public HtmlElement WindowFrameElement { get; }
    private static HtmlWindow();
    public HtmlDocument get_Document();
    public object get_DomWindow();
    public HtmlWindowCollection get_Frames();
    public HtmlHistory get_History();
    public bool get_IsClosed();
    public string get_Name();
    public void set_Name(string value);
    public HtmlWindow get_Opener();
    public HtmlWindow get_Parent();
    public Point get_Position();
    public Size get_Size();
    public void set_Size(Size value);
    public string get_StatusBarText();
    public void set_StatusBarText(string value);
    public Uri get_Url();
    public HtmlElement get_WindowFrameElement();
    public void Alert(string message);
    public void AttachEventHandler(string eventName, EventHandler eventHandler);
    public void Close();
    public bool Confirm(string message);
    public void DetachEventHandler(string eventName, EventHandler eventHandler);
    public void Focus();
    public void MoveTo(int x, int y);
    public void MoveTo(Point point);
    public void Navigate(Uri url);
    public void Navigate(string urlString);
    public HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry);
    public HtmlWindow Open(Uri url, string target, string windowOptions, bool replaceEntry);
    public HtmlWindow OpenNew(string urlString, string windowOptions);
    public HtmlWindow OpenNew(Uri url, string windowOptions);
    public string Prompt(string message, string defaultInputValue);
    public void RemoveFocus();
    public void ResizeTo(int width, int height);
    public void ResizeTo(Size size);
    public void ScrollTo(int x, int y);
    public void ScrollTo(Point point);
    public void add_Error(HtmlElementErrorEventHandler value);
    public void remove_Error(HtmlElementErrorEventHandler value);
    public void add_GotFocus(HtmlElementEventHandler value);
    public void remove_GotFocus(HtmlElementEventHandler value);
    public void add_Load(HtmlElementEventHandler value);
    public void remove_Load(HtmlElementEventHandler value);
    public void add_LostFocus(HtmlElementEventHandler value);
    public void remove_LostFocus(HtmlElementEventHandler value);
    public void add_Resize(HtmlElementEventHandler value);
    public void remove_Resize(HtmlElementEventHandler value);
    public void add_Scroll(HtmlElementEventHandler value);
    public void remove_Scroll(HtmlElementEventHandler value);
    public void add_Unload(HtmlElementEventHandler value);
    public void remove_Unload(HtmlElementEventHandler value);
    public static bool op_Equality(HtmlWindow left, HtmlWindow right);
    public static bool op_Inequality(HtmlWindow left, HtmlWindow right);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.HtmlWindowCollection : object {
    public HtmlWindow Item { get; }
    public HtmlWindow Item { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public HtmlWindow get_Item(int index);
    public HtmlWindow get_Item(string windowId);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array dest, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public interface System.Windows.Forms.IBindableComponent {
    public ControlBindingsCollection DataBindings { get; }
    public BindingContext BindingContext { get; public set; }
    public abstract virtual ControlBindingsCollection get_DataBindings();
    public abstract virtual BindingContext get_BindingContext();
    public abstract virtual void set_BindingContext(BindingContext value);
}
public interface System.Windows.Forms.IButtonControl {
    public DialogResult DialogResult { get; public set; }
    public abstract virtual DialogResult get_DialogResult();
    public abstract virtual void set_DialogResult(DialogResult value);
    public abstract virtual void NotifyDefault(bool value);
    public abstract virtual void PerformClick();
}
public interface System.Windows.Forms.ICommandExecutor {
    public abstract virtual void Execute();
}
public interface System.Windows.Forms.IComponentEditorPageSite {
    public abstract virtual Control GetControl();
    public abstract virtual void SetDirty();
}
public interface System.Windows.Forms.IContainerControl {
    public Control ActiveControl { get; public set; }
    public abstract virtual Control get_ActiveControl();
    public abstract virtual void set_ActiveControl(Control value);
    public abstract virtual bool ActivateControl(Control active);
}
[SRDescriptionAttribute("ICurrencyManagerProviderDescr")]
public interface System.Windows.Forms.ICurrencyManagerProvider {
    public CurrencyManager CurrencyManager { get; }
    public abstract virtual CurrencyManager get_CurrencyManager();
    public abstract virtual CurrencyManager GetRelatedCurrencyManager(string dataMember);
}
public interface System.Windows.Forms.IDataGridColumnStyleEditingNotificationService {
    public abstract virtual void ColumnStartedEditing(Control editingControl);
}
public interface System.Windows.Forms.IDataGridEditingService {
    public abstract virtual bool BeginEdit(DataGridColumnStyle gridColumn, int rowNumber);
    public abstract virtual bool EndEdit(DataGridColumnStyle gridColumn, int rowNumber, bool shouldAbort);
}
public interface System.Windows.Forms.IDataGridViewEditingCell {
    public object EditingCellFormattedValue { get; public set; }
    public bool EditingCellValueChanged { get; public set; }
    public abstract virtual object get_EditingCellFormattedValue();
    public abstract virtual void set_EditingCellFormattedValue(object value);
    public abstract virtual bool get_EditingCellValueChanged();
    public abstract virtual void set_EditingCellValueChanged(bool value);
    public abstract virtual object GetEditingCellFormattedValue(DataGridViewDataErrorContexts context);
    public abstract virtual void PrepareEditingCellForEdit(bool selectAll);
}
public interface System.Windows.Forms.IDataGridViewEditingControl {
    public DataGridView EditingControlDataGridView { get; public set; }
    public object EditingControlFormattedValue { get; public set; }
    public int EditingControlRowIndex { get; public set; }
    public bool EditingControlValueChanged { get; public set; }
    public Cursor EditingPanelCursor { get; }
    public bool RepositionEditingControlOnValueChange { get; }
    public abstract virtual DataGridView get_EditingControlDataGridView();
    public abstract virtual void set_EditingControlDataGridView(DataGridView value);
    public abstract virtual object get_EditingControlFormattedValue();
    public abstract virtual void set_EditingControlFormattedValue(object value);
    public abstract virtual int get_EditingControlRowIndex();
    public abstract virtual void set_EditingControlRowIndex(int value);
    public abstract virtual bool get_EditingControlValueChanged();
    public abstract virtual void set_EditingControlValueChanged(bool value);
    public abstract virtual Cursor get_EditingPanelCursor();
    public abstract virtual bool get_RepositionEditingControlOnValueChange();
    public abstract virtual void ApplyCellStyleToEditingControl(DataGridViewCellStyle dataGridViewCellStyle);
    public abstract virtual bool EditingControlWantsInputKey(Keys keyData, bool dataGridViewWantsInputKey);
    public abstract virtual object GetEditingControlFormattedValue(DataGridViewDataErrorContexts context);
    public abstract virtual void PrepareEditingControlForEdit(bool selectAll);
}
[ComVisibleAttribute("True")]
public interface System.Windows.Forms.IDataObject {
    public abstract virtual object GetData(string format, bool autoConvert);
    public abstract virtual object GetData(string format);
    public abstract virtual object GetData(Type format);
    public abstract virtual void SetData(string format, bool autoConvert, object data);
    public abstract virtual void SetData(string format, object data);
    public abstract virtual void SetData(Type format, object data);
    public abstract virtual void SetData(object data);
    public abstract virtual bool GetDataPresent(string format, bool autoConvert);
    public abstract virtual bool GetDataPresent(string format);
    public abstract virtual bool GetDataPresent(Type format);
    public abstract virtual String[] GetFormats(bool autoConvert);
    public abstract virtual String[] GetFormats();
}
public interface System.Windows.Forms.IDropTarget {
    public abstract virtual void OnDragEnter(DragEventArgs e);
    public abstract virtual void OnDragLeave(EventArgs e);
    public abstract virtual void OnDragDrop(DragEventArgs e);
    public abstract virtual void OnDragOver(DragEventArgs e);
}
public interface System.Windows.Forms.IFeatureSupport {
    public abstract virtual bool IsPresent(object feature);
    public abstract virtual bool IsPresent(object feature, Version minimumVersion);
    public abstract virtual Version GetVersionPresent(object feature);
}
public interface System.Windows.Forms.IFileReaderService {
    public abstract virtual Stream OpenFileFromSource(string relativePath);
}
public class System.Windows.Forms.ImageIndexConverter : Int32Converter {
    protected bool IncludeNoneAsStandardValue { get; }
    protected virtual bool get_IncludeNoneAsStandardValue();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Windows.Forms.ImageKeyConverter : StringConverter {
    protected bool IncludeNoneAsStandardValue { get; }
    protected virtual bool get_IncludeNoneAsStandardValue();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public enum System.Windows.Forms.ImageLayout : Enum {
    public int value__;
    public static ImageLayout None;
    public static ImageLayout Tile;
    public static ImageLayout Center;
    public static ImageLayout Stretch;
    public static ImageLayout Zoom;
}
[DesignerAttribute("System.Windows.Forms.Design.ImageListDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[DefaultPropertyAttribute("Images")]
[TypeConverterAttribute("System.Windows.Forms.ImageListConverter")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.ImageListCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionImageList")]
public class System.Windows.Forms.ImageList : Component {
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ImageListColorDepthDescr")]
public ColorDepth ColorDepth { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ImageListHandleDescr")]
public IntPtr Handle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ImageListHandleCreatedDescr")]
public bool HandleCreated { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ImageListImagesDescr")]
[MergablePropertyAttribute("False")]
public ImageCollection Images { get; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ImageListSizeDescr")]
public Size ImageSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ImageListImageStreamDescr")]
public ImageListStreamer ImageStream { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ImageListTransparentColorDescr")]
public Color TransparentColor { get; public set; }
    public ImageList(IContainer container);
    private static ImageList();
    public ColorDepth get_ColorDepth();
    public void set_ColorDepth(ColorDepth value);
    public IntPtr get_Handle();
    public bool get_HandleCreated();
    public ImageCollection get_Images();
    public Size get_ImageSize();
    public void set_ImageSize(Size value);
    public ImageListStreamer get_ImageStream();
    public void set_ImageStream(ImageListStreamer value);
    public object get_Tag();
    public void set_Tag(object value);
    public Color get_TransparentColor();
    public void set_TransparentColor(Color value);
    public void add_RecreateHandle(EventHandler value);
    public void remove_RecreateHandle(EventHandler value);
    protected virtual void Dispose(bool disposing);
    public void Draw(Graphics g, Point pt, int index);
    public void Draw(Graphics g, int x, int y, int index);
    public void Draw(Graphics g, int x, int y, int width, int height, int index);
    public virtual string ToString();
}
internal class System.Windows.Forms.ImageListConverter : ComponentConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class System.Windows.Forms.ImageListStreamer : object {
    private static ImageListStreamer();
    public sealed virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public sealed virtual void Dispose();
}
public static class System.Windows.Forms.ImeContext : object {
    public static void Disable(IntPtr handle);
    public static void Enable(IntPtr handle);
    public static ImeMode GetImeMode(IntPtr handle);
    public static bool IsOpen(IntPtr handle);
    public static void SetImeStatus(ImeMode imeMode, IntPtr handle);
    public static void SetOpenStatus(bool open, IntPtr handle);
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.ImeMode : Enum {
    public int value__;
    public static ImeMode Inherit;
    public static ImeMode NoControl;
    public static ImeMode On;
    public static ImeMode Off;
    public static ImeMode Disable;
    public static ImeMode Hiragana;
    public static ImeMode Katakana;
    public static ImeMode KatakanaHalf;
    public static ImeMode AlphaFull;
    public static ImeMode Alpha;
    public static ImeMode HangulFull;
    public static ImeMode Hangul;
    public static ImeMode Close;
    public static ImeMode OnHalf;
}
public class System.Windows.Forms.ImeModeConversion : ValueType {
    internal int setBits;
    internal int clearBits;
    internal static int ImeDisabled;
    internal static int ImeDirectInput;
    internal static int ImeClosed;
    internal static int ImeNativeInput;
    internal static int ImeNativeFullHiragana;
    internal static int ImeNativeHalfHiragana;
    internal static int ImeNativeFullKatakana;
    internal static int ImeNativeHalfKatakana;
    internal static int ImeAlphaFull;
    internal static int ImeAlphaHalf;
    public static Dictionary`2<ImeMode, ImeModeConversion> ImeModeConversionBits { get; }
    public static bool IsCurrentConversionTableSupported { get; }
    private static ImeModeConversion();
    public static Dictionary`2<ImeMode, ImeModeConversion> get_ImeModeConversionBits();
    public static bool get_IsCurrentConversionTableSupported();
}
public interface System.Windows.Forms.IMessageFilter {
    public abstract virtual bool PreFilterMessage(Message& m);
}
public class System.Windows.Forms.InputLanguage : object {
    public CultureInfo Culture { get; }
    public static InputLanguage CurrentInputLanguage { get; public set; }
    public static InputLanguage DefaultInputLanguage { get; }
    public IntPtr Handle { get; }
    public static InputLanguageCollection InstalledInputLanguages { get; }
    public string LayoutName { get; }
    public CultureInfo get_Culture();
    public static InputLanguage get_CurrentInputLanguage();
    public static void set_CurrentInputLanguage(InputLanguage value);
    public static InputLanguage get_DefaultInputLanguage();
    public IntPtr get_Handle();
    public static InputLanguageCollection get_InstalledInputLanguages();
    public string get_LayoutName();
    public virtual bool Equals(object value);
    public static InputLanguage FromCulture(CultureInfo culture);
    public virtual int GetHashCode();
}
public class System.Windows.Forms.InputLanguageChangedEventArgs : EventArgs {
    public InputLanguage InputLanguage { get; }
    public CultureInfo Culture { get; }
    public byte CharSet { get; }
    public InputLanguageChangedEventArgs(CultureInfo culture, byte charSet);
    public InputLanguageChangedEventArgs(InputLanguage inputLanguage, byte charSet);
    public InputLanguage get_InputLanguage();
    public CultureInfo get_Culture();
    public byte get_CharSet();
}
public class System.Windows.Forms.InputLanguageChangedEventHandler : MulticastDelegate {
    public InputLanguageChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InputLanguageChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InputLanguageChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.InputLanguageChangingEventArgs : CancelEventArgs {
    public InputLanguage InputLanguage { get; }
    public CultureInfo Culture { get; }
    public bool SysCharSet { get; }
    public InputLanguageChangingEventArgs(CultureInfo culture, bool sysCharSet);
    public InputLanguageChangingEventArgs(InputLanguage inputLanguage, bool sysCharSet);
    public InputLanguage get_InputLanguage();
    public CultureInfo get_Culture();
    public bool get_SysCharSet();
}
public class System.Windows.Forms.InputLanguageChangingEventHandler : MulticastDelegate {
    public InputLanguageChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InputLanguageChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InputLanguageChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.InputLanguageCollection : ReadOnlyCollectionBase {
    public InputLanguage Item { get; }
    public InputLanguage get_Item(int index);
    public bool Contains(InputLanguage value);
    public void CopyTo(InputLanguage[] array, int index);
    public int IndexOf(InputLanguage value);
}
public enum System.Windows.Forms.InsertKeyMode : Enum {
    public int value__;
    public static InsertKeyMode Default;
    public static InsertKeyMode Insert;
    public static InsertKeyMode Overwrite;
}
public class System.Windows.Forms.InvalidateEventArgs : EventArgs {
    public Rectangle InvalidRect { get; }
    public InvalidateEventArgs(Rectangle invalidRect);
    public Rectangle get_InvalidRect();
}
public class System.Windows.Forms.InvalidateEventHandler : MulticastDelegate {
    public InvalidateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InvalidateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InvalidateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ItemActivation : Enum {
    public int value__;
    public static ItemActivation Standard;
    public static ItemActivation OneClick;
    public static ItemActivation TwoClick;
}
public enum System.Windows.Forms.ItemBoundsPortion : Enum {
    public int value__;
    public static ItemBoundsPortion Entire;
    public static ItemBoundsPortion Icon;
    public static ItemBoundsPortion Label;
    public static ItemBoundsPortion ItemOnly;
}
public class System.Windows.Forms.ItemChangedEventArgs : EventArgs {
    public int Index { get; }
    public int get_Index();
}
public class System.Windows.Forms.ItemChangedEventHandler : MulticastDelegate {
    public ItemChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ItemChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ItemChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ItemCheckedEventArgs : EventArgs {
    public ListViewItem Item { get; }
    public ItemCheckedEventArgs(ListViewItem item);
    public ListViewItem get_Item();
}
public class System.Windows.Forms.ItemCheckedEventHandler : MulticastDelegate {
    public ItemCheckedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ItemCheckedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ItemCheckedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.ItemCheckEventArgs : EventArgs {
    public int Index { get; }
    public CheckState NewValue { get; public set; }
    public CheckState CurrentValue { get; }
    public ItemCheckEventArgs(int index, CheckState newCheckValue, CheckState currentValue);
    public int get_Index();
    public CheckState get_NewValue();
    public void set_NewValue(CheckState value);
    public CheckState get_CurrentValue();
}
public class System.Windows.Forms.ItemCheckEventHandler : MulticastDelegate {
    public ItemCheckEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ItemCheckEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ItemCheckEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.ItemDragEventArgs : EventArgs {
    public MouseButtons Button { get; }
    public object Item { get; }
    public ItemDragEventArgs(MouseButtons button);
    public ItemDragEventArgs(MouseButtons button, object item);
    public MouseButtons get_Button();
    public object get_Item();
}
public class System.Windows.Forms.ItemDragEventHandler : MulticastDelegate {
    public ItemDragEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ItemDragEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ItemDragEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[GuidAttribute("458AB8A2-A1EA-4d7b-8EBE-DEE5D3D9442C")]
[InterfaceTypeAttribute("1")]
[ComVisibleAttribute("True")]
public interface System.Windows.Forms.IWin32Window {
    public IntPtr Handle { get; }
    public abstract virtual IntPtr get_Handle();
}
public interface System.Windows.Forms.IWindowTarget {
    public abstract virtual void OnHandleChange(IntPtr newHandle);
    public abstract virtual void OnMessage(Message& m);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.KeyEventArgs : EventArgs {
    public bool Alt { get; }
    public bool Control { get; }
    public bool Handled { get; public set; }
    public Keys KeyCode { get; }
    public int KeyValue { get; }
    public Keys KeyData { get; }
    public Keys Modifiers { get; }
    public bool Shift { get; }
    public bool SuppressKeyPress { get; public set; }
    public KeyEventArgs(Keys keyData);
    public virtual bool get_Alt();
    public bool get_Control();
    public bool get_Handled();
    public void set_Handled(bool value);
    public Keys get_KeyCode();
    public int get_KeyValue();
    public Keys get_KeyData();
    public Keys get_Modifiers();
    public virtual bool get_Shift();
    public bool get_SuppressKeyPress();
    public void set_SuppressKeyPress(bool value);
}
public class System.Windows.Forms.KeyEventHandler : MulticastDelegate {
    public KeyEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, KeyEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, KeyEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.KeyPressEventArgs : EventArgs {
    public char KeyChar { get; public set; }
    public bool Handled { get; public set; }
    public KeyPressEventArgs(char keyChar);
    public char get_KeyChar();
    public void set_KeyChar(char value);
    public bool get_Handled();
    public void set_Handled(bool value);
}
public class System.Windows.Forms.KeyPressEventHandler : MulticastDelegate {
    public KeyPressEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, KeyPressEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, KeyPressEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
[TypeConverterAttribute("System.Windows.Forms.KeysConverter")]
[EditorAttribute("System.Windows.Forms.Design.ShortcutKeysEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.Keys : Enum {
    public int value__;
    public static Keys KeyCode;
    public static Keys Modifiers;
    public static Keys None;
    public static Keys LButton;
    public static Keys RButton;
    public static Keys Cancel;
    public static Keys MButton;
    public static Keys XButton1;
    public static Keys XButton2;
    public static Keys Back;
    public static Keys Tab;
    public static Keys LineFeed;
    public static Keys Clear;
    public static Keys Return;
    public static Keys Enter;
    public static Keys ShiftKey;
    public static Keys ControlKey;
    public static Keys Menu;
    public static Keys Pause;
    public static Keys Capital;
    public static Keys CapsLock;
    public static Keys KanaMode;
    public static Keys HanguelMode;
    public static Keys HangulMode;
    public static Keys JunjaMode;
    public static Keys FinalMode;
    public static Keys HanjaMode;
    public static Keys KanjiMode;
    public static Keys Escape;
    public static Keys IMEConvert;
    public static Keys IMENonconvert;
    public static Keys IMEAccept;
    public static Keys IMEAceept;
    public static Keys IMEModeChange;
    public static Keys Space;
    public static Keys Prior;
    public static Keys PageUp;
    public static Keys Next;
    public static Keys PageDown;
    public static Keys End;
    public static Keys Home;
    public static Keys Left;
    public static Keys Up;
    public static Keys Right;
    public static Keys Down;
    public static Keys Select;
    public static Keys Print;
    public static Keys Execute;
    public static Keys Snapshot;
    public static Keys PrintScreen;
    public static Keys Insert;
    public static Keys Delete;
    public static Keys Help;
    public static Keys D0;
    public static Keys D1;
    public static Keys D2;
    public static Keys D3;
    public static Keys D4;
    public static Keys D5;
    public static Keys D6;
    public static Keys D7;
    public static Keys D8;
    public static Keys D9;
    public static Keys A;
    public static Keys B;
    public static Keys C;
    public static Keys D;
    public static Keys E;
    public static Keys F;
    public static Keys G;
    public static Keys H;
    public static Keys I;
    public static Keys J;
    public static Keys K;
    public static Keys L;
    public static Keys M;
    public static Keys N;
    public static Keys O;
    public static Keys P;
    public static Keys Q;
    public static Keys R;
    public static Keys S;
    public static Keys T;
    public static Keys U;
    public static Keys V;
    public static Keys W;
    public static Keys X;
    public static Keys Y;
    public static Keys Z;
    public static Keys LWin;
    public static Keys RWin;
    public static Keys Apps;
    public static Keys Sleep;
    public static Keys NumPad0;
    public static Keys NumPad1;
    public static Keys NumPad2;
    public static Keys NumPad3;
    public static Keys NumPad4;
    public static Keys NumPad5;
    public static Keys NumPad6;
    public static Keys NumPad7;
    public static Keys NumPad8;
    public static Keys NumPad9;
    public static Keys Multiply;
    public static Keys Add;
    public static Keys Separator;
    public static Keys Subtract;
    public static Keys Decimal;
    public static Keys Divide;
    public static Keys F1;
    public static Keys F2;
    public static Keys F3;
    public static Keys F4;
    public static Keys F5;
    public static Keys F6;
    public static Keys F7;
    public static Keys F8;
    public static Keys F9;
    public static Keys F10;
    public static Keys F11;
    public static Keys F12;
    public static Keys F13;
    public static Keys F14;
    public static Keys F15;
    public static Keys F16;
    public static Keys F17;
    public static Keys F18;
    public static Keys F19;
    public static Keys F20;
    public static Keys F21;
    public static Keys F22;
    public static Keys F23;
    public static Keys F24;
    public static Keys NumLock;
    public static Keys Scroll;
    public static Keys LShiftKey;
    public static Keys RShiftKey;
    public static Keys LControlKey;
    public static Keys RControlKey;
    public static Keys LMenu;
    public static Keys RMenu;
    public static Keys BrowserBack;
    public static Keys BrowserForward;
    public static Keys BrowserRefresh;
    public static Keys BrowserStop;
    public static Keys BrowserSearch;
    public static Keys BrowserFavorites;
    public static Keys BrowserHome;
    public static Keys VolumeMute;
    public static Keys VolumeDown;
    public static Keys VolumeUp;
    public static Keys MediaNextTrack;
    public static Keys MediaPreviousTrack;
    public static Keys MediaStop;
    public static Keys MediaPlayPause;
    public static Keys LaunchMail;
    public static Keys SelectMedia;
    public static Keys LaunchApplication1;
    public static Keys LaunchApplication2;
    public static Keys OemSemicolon;
    public static Keys Oem1;
    public static Keys Oemplus;
    public static Keys Oemcomma;
    public static Keys OemMinus;
    public static Keys OemPeriod;
    public static Keys OemQuestion;
    public static Keys Oem2;
    public static Keys Oemtilde;
    public static Keys Oem3;
    public static Keys OemOpenBrackets;
    public static Keys Oem4;
    public static Keys OemPipe;
    public static Keys Oem5;
    public static Keys OemCloseBrackets;
    public static Keys Oem6;
    public static Keys OemQuotes;
    public static Keys Oem7;
    public static Keys Oem8;
    public static Keys OemBackslash;
    public static Keys Oem102;
    public static Keys ProcessKey;
    public static Keys Packet;
    public static Keys Attn;
    public static Keys Crsel;
    public static Keys Exsel;
    public static Keys EraseEof;
    public static Keys Play;
    public static Keys Zoom;
    public static Keys NoName;
    public static Keys Pa1;
    public static Keys OemClear;
    public static Keys Shift;
    public static Keys Control;
    public static Keys Alt;
}
public class System.Windows.Forms.KeysConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public sealed virtual int Compare(object a, object b);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Text")]
[DefaultBindingPropertyAttribute("Text")]
[DesignerAttribute("System.Windows.Forms.Design.LabelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionLabel")]
public class System.Windows.Forms.Label : Control {
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("LabelAutoSizeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[SRDescriptionAttribute("LabelAutoEllipsisDescr")]
public bool AutoEllipsis { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("LabelBackgroundImageDescr")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("LabelBorderDescr")]
public BorderStyle BorderStyle { get; public set; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Padding DefaultMargin { get; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ButtonFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonImageDescr")]
[SRCategoryAttribute("CatAppearance")]
public Image Image { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("-1")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ButtonImageIndexDescr")]
[SRCategoryAttribute("CatAppearance")]
public int ImageIndex { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ButtonImageIndexDescr")]
[SRCategoryAttribute("CatAppearance")]
public string ImageKey { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("ButtonImageListDescr")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatAppearance")]
public ImageList ImageList { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ButtonImageAlignDescr")]
[SRCategoryAttribute("CatAppearance")]
public ContentAlignment ImageAlign { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("LabelPreferredHeightDescr")]
public int PreferredHeight { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("LabelPreferredWidthDescr")]
public int PreferredWidth { get; }
    [ObsoleteAttribute("This property has been deprecated. Use BackColor instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected bool RenderTransparent { get; protected set; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [SRDescriptionAttribute("LabelTextAlignDescr")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
public ContentAlignment TextAlign { get; public set; }
    [EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SettingsBindableAttribute("True")]
public string Text { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    [SRDescriptionAttribute("LabelUseMnemonicDescr")]
[DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
public bool UseMnemonic { get; public set; }
    private static Label();
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public bool get_AutoEllipsis();
    public void set_AutoEllipsis(bool value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public virtual BorderStyle get_BorderStyle();
    public virtual void set_BorderStyle(BorderStyle value);
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Padding get_DefaultMargin();
    protected virtual Size get_DefaultSize();
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public Image get_Image();
    public void set_Image(Image value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public ImageList get_ImageList();
    public void set_ImageList(ImageList value);
    public ContentAlignment get_ImageAlign();
    public void set_ImageAlign(ContentAlignment value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public virtual int get_PreferredHeight();
    public virtual int get_PreferredWidth();
    protected virtual bool get_RenderTransparent();
    protected virtual void set_RenderTransparent(bool value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public virtual ContentAlignment get_TextAlign();
    public virtual void set_TextAlign(ContentAlignment value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextAlignChanged(EventHandler value);
    public void remove_TextAlignChanged(EventHandler value);
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    public bool get_UseMnemonic();
    public void set_UseMnemonic(bool value);
    protected Rectangle CalcImageRenderBounds(Image image, Rectangle r, ContentAlignment align);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void Dispose(bool disposing);
    protected void DrawImage(Graphics g, Image image, Rectangle r, ContentAlignment align);
    public virtual Size GetPreferredSize(Size proposedSize);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual void OnTextAlignChanged(EventArgs e);
    protected virtual void OnPaddingChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public virtual string ToString();
    protected virtual void WndProc(Message& m);
}
public class System.Windows.Forms.LabelEditEventArgs : EventArgs {
    public string Label { get; }
    public int Item { get; }
    public bool CancelEdit { get; public set; }
    public LabelEditEventArgs(int item);
    public LabelEditEventArgs(int item, string label);
    public string get_Label();
    public int get_Item();
    public bool get_CancelEdit();
    public void set_CancelEdit(bool value);
}
public class System.Windows.Forms.LabelEditEventHandler : MulticastDelegate {
    public LabelEditEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LabelEditEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LabelEditEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.Layout.ArrangedElementCollection : object {
    internal IArrangedElement Item { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public bool IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private static ArrangedElementCollection();
    internal virtual IArrangedElement get_Item(int index);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public virtual bool get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public virtual IEnumerator GetEnumerator();
}
internal interface System.Windows.Forms.Layout.IArrangedElement {
    public Rectangle Bounds { get; }
    public Rectangle DisplayRectangle { get; }
    public abstract virtual Rectangle get_Bounds();
    public abstract virtual Size GetPreferredSize(Size proposedSize);
    public abstract virtual Rectangle get_DisplayRectangle();
}
public abstract class System.Windows.Forms.Layout.LayoutEngine : object {
    public virtual void InitLayout(object child, BoundsSpecified specified);
    public virtual bool Layout(object container, LayoutEventArgs layoutEventArgs);
}
public class System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Forms.LayoutEventArgs : EventArgs {
    public IComponent AffectedComponent { get; }
    public Control AffectedControl { get; }
    public string AffectedProperty { get; }
    public LayoutEventArgs(IComponent affectedComponent, string affectedProperty);
    public LayoutEventArgs(Control affectedControl, string affectedProperty);
    public IComponent get_AffectedComponent();
    public Control get_AffectedControl();
    public string get_AffectedProperty();
}
public class System.Windows.Forms.LayoutEventHandler : MulticastDelegate {
    public LayoutEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LayoutEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LayoutEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Windows.Forms.LayoutSettings : object {
    public LayoutEngine LayoutEngine { get; }
    public virtual LayoutEngine get_LayoutEngine();
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.LeftRightAlignment : Enum {
    public int value__;
    public static LeftRightAlignment Left;
    public static LeftRightAlignment Right;
}
[TypeConverterAttribute("System.Windows.Forms.LinkArea/LinkAreaConverter")]
public class System.Windows.Forms.LinkArea : ValueType {
    private int start;
    private int length;
    public int Start { get; public set; }
    public int Length { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsEmpty { get; }
    public LinkArea(int start, int length);
    public int get_Start();
    public void set_Start(int value);
    public int get_Length();
    public void set_Length(int value);
    public bool get_IsEmpty();
    public virtual bool Equals(object o);
    public virtual string ToString();
    public static bool op_Equality(LinkArea linkArea1, LinkArea linkArea2);
    public static bool op_Inequality(LinkArea linkArea1, LinkArea linkArea2);
    public virtual int GetHashCode();
}
public enum System.Windows.Forms.LinkBehavior : Enum {
    public int value__;
    public static LinkBehavior SystemDefault;
    public static LinkBehavior AlwaysUnderline;
    public static LinkBehavior HoverUnderline;
    public static LinkBehavior NeverUnderline;
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.LinkClickedEventArgs : EventArgs {
    public string LinkText { get; }
    public LinkClickedEventArgs(string linkText);
    public string get_LinkText();
}
public class System.Windows.Forms.LinkClickedEventHandler : MulticastDelegate {
    public LinkClickedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LinkClickedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LinkClickedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.LinkConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultEventAttribute("LinkClicked")]
[ToolboxItemAttribute("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionLinkLabel")]
public class System.Windows.Forms.LinkLabel : Label {
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("LinkLabelActiveLinkColorDescr")]
public Color ActiveLinkColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("LinkLabelDisabledLinkColorDescr")]
public Color DisabledLinkColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FlatStyle FlatStyle { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.LinkAreaEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("LinkLabelLinkAreaDescr")]
public LinkArea LinkArea { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("LinkLabelLinkBehaviorDescr")]
public LinkBehavior LinkBehavior { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("LinkLabelLinkColorDescr")]
public Color LinkColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public LinkCollection Links { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("LinkLabelLinkVisitedDescr")]
public bool LinkVisited { get; public set; }
    protected Cursor OverrideCursor { get; protected set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public bool TabStop { get; public set; }
    [RefreshPropertiesAttribute("2")]
public string Text { get; public set; }
    [RefreshPropertiesAttribute("2")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("LinkLabelVisitedLinkColorDescr")]
public Color VisitedLinkColor { get; public set; }
    private DialogResult System.Windows.Forms.IButtonControl.DialogResult { get; private set; }
    [RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    private static LinkLabel();
    public Color get_ActiveLinkColor();
    public void set_ActiveLinkColor(Color value);
    public Color get_DisabledLinkColor();
    public void set_DisabledLinkColor(Color value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public LinkArea get_LinkArea();
    public void set_LinkArea(LinkArea value);
    public LinkBehavior get_LinkBehavior();
    public void set_LinkBehavior(LinkBehavior value);
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    public LinkCollection get_Links();
    public bool get_LinkVisited();
    public void set_LinkVisited(bool value);
    protected Cursor get_OverrideCursor();
    protected void set_OverrideCursor(Cursor value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public Color get_VisitedLinkColor();
    public void set_VisitedLinkColor(Color value);
    public void add_LinkClicked(LinkLabelLinkClickedEventHandler value);
    public void remove_LinkClicked(LinkLabelLinkClickedEventHandler value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void CreateHandle();
    protected Link PointInLink(int x, int y);
    private sealed virtual override DialogResult System.Windows.Forms.IButtonControl.get_DialogResult();
    private sealed virtual override void System.Windows.Forms.IButtonControl.set_DialogResult(DialogResult value);
    private sealed virtual override void System.Windows.Forms.IButtonControl.NotifyDefault(bool value);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnLinkClicked(LinkLabelLinkClickedEventArgs e);
    protected virtual void OnPaddingChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnAutoSizeChanged(EventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual void OnTextAlignChanged(EventArgs e);
    private sealed virtual override void System.Windows.Forms.IButtonControl.PerformClick();
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void Select(bool directed, bool forward);
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    protected virtual void WndProc(Message& msg);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.LinkLabelLinkClickedEventArgs : EventArgs {
    public MouseButtons Button { get; }
    public Link Link { get; }
    public LinkLabelLinkClickedEventArgs(Link link);
    public LinkLabelLinkClickedEventArgs(Link link, MouseButtons button);
    public MouseButtons get_Button();
    public Link get_Link();
}
public class System.Windows.Forms.LinkLabelLinkClickedEventHandler : MulticastDelegate {
    public LinkLabelLinkClickedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, LinkLabelLinkClickedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, LinkLabelLinkClickedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.LinkState : Enum {
    public int value__;
    public static LinkState Normal;
    public static LinkState Hover;
    public static LinkState Active;
    public static LinkState Visited;
}
public class System.Windows.Forms.ListBindingConverter : TypeConverter {
    private static ListBindingConverter();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
}
public static class System.Windows.Forms.ListBindingHelper : object {
    public static object GetList(object list);
    public static object GetList(object dataSource, string dataMember);
    public static string GetListName(object list, PropertyDescriptor[] listAccessors);
    public static PropertyDescriptorCollection GetListItemProperties(object list);
    public static PropertyDescriptorCollection GetListItemProperties(object list, PropertyDescriptor[] listAccessors);
    public static PropertyDescriptorCollection GetListItemProperties(object dataSource, string dataMember, PropertyDescriptor[] listAccessors);
    public static Type GetListItemType(object list);
    public static Type GetListItemType(object dataSource, string dataMember);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("SelectedIndexChanged")]
[DefaultPropertyAttribute("Items")]
[DefaultBindingPropertyAttribute("SelectedValue")]
[SRDescriptionAttribute("DescriptionListBox")]
public class System.Windows.Forms.ListBox : ListControl {
    public static int NoMatches;
    public static int DefaultItemHeight;
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("ListBoxBorderDescr")]
public BorderStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("ListBoxColumnWidthDescr")]
public int ColumnWidth { get; public set; }
    protected CreateParams CreateParams { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
public bool UseCustomTabOffsets { get; public set; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListBoxDrawModeDescr")]
[RefreshPropertiesAttribute("2")]
public DrawMode DrawMode { get; public set; }
    public Font Font { get; public set; }
    public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxHorizontalExtentDescr")]
public int HorizontalExtent { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxHorizontalScrollbarDescr")]
public bool HorizontalScrollbar { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxIntegralHeightDescr")]
[RefreshPropertiesAttribute("2")]
public bool IntegralHeight { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("13")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxItemHeightDescr")]
[RefreshPropertiesAttribute("2")]
public int ItemHeight { get; public set; }
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxItemsDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
public ObjectCollection Items { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListBoxMultiColumnDescr")]
public bool MultiColumn { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxPreferredHeightDescr")]
public int PreferredHeight { get; }
    public RightToLeft RightToLeft { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListBoxScrollIsVisibleDescr")]
public bool ScrollAlwaysVisible { get; public set; }
    protected bool AllowSelection { get; }
    [BrowsableAttribute("False")]
[BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxSelectedIndexDescr")]
public int SelectedIndex { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxSelectedIndicesDescr")]
public SelectedIndexCollection SelectedIndices { get; }
    [BrowsableAttribute("False")]
[BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxSelectedItemDescr")]
public object SelectedItem { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxSelectedItemsDescr")]
public SelectedObjectCollection SelectedItems { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListBoxSelectionModeDescr")]
public SelectionMode SelectionMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListBoxSortedDescr")]
public bool Sorted { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListBoxTopIndexDescr")]
public int TopIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ListBoxUseTabStopsDescr")]
public bool UseTabStops { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ListBoxCustomTabOffsetsDescr")]
[DesignerSerializationVisibilityAttribute("2")]
[BrowsableAttribute("False")]
public IntegerCollection CustomTabOffsets { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    private static ListBox();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public int get_ColumnWidth();
    public void set_ColumnWidth(int value);
    protected virtual CreateParams get_CreateParams();
    public bool get_UseCustomTabOffsets();
    public void set_UseCustomTabOffsets(bool value);
    protected virtual Size get_DefaultSize();
    public virtual DrawMode get_DrawMode();
    public virtual void set_DrawMode(DrawMode value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public int get_HorizontalExtent();
    public void set_HorizontalExtent(int value);
    public bool get_HorizontalScrollbar();
    public void set_HorizontalScrollbar(bool value);
    public bool get_IntegralHeight();
    public void set_IntegralHeight(bool value);
    public virtual int get_ItemHeight();
    public virtual void set_ItemHeight(int value);
    public ObjectCollection get_Items();
    public bool get_MultiColumn();
    public void set_MultiColumn(bool value);
    public int get_PreferredHeight();
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public bool get_ScrollAlwaysVisible();
    public void set_ScrollAlwaysVisible(bool value);
    protected virtual bool get_AllowSelection();
    public virtual int get_SelectedIndex();
    public virtual void set_SelectedIndex(int value);
    public SelectedIndexCollection get_SelectedIndices();
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public SelectedObjectCollection get_SelectedItems();
    public virtual SelectionMode get_SelectionMode();
    public virtual void set_SelectionMode(SelectionMode value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public int get_TopIndex();
    public void set_TopIndex(int value);
    public bool get_UseTabStops();
    public void set_UseTabStops(bool value);
    public IntegerCollection get_CustomTabOffsets();
    [ObsoleteAttribute("This method has been deprecated.  There is no replacement.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void AddItemsCore(Object[] value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_DrawItem(DrawItemEventHandler value);
    public void remove_DrawItem(DrawItemEventHandler value);
    public void add_MeasureItem(MeasureItemEventHandler value);
    public void remove_MeasureItem(MeasureItemEventHandler value);
    public void add_SelectedIndexChanged(EventHandler value);
    public void remove_SelectedIndexChanged(EventHandler value);
    public void BeginUpdate();
    protected virtual ObjectCollection CreateItemCollection();
    public void ClearSelected();
    public void EndUpdate();
    public int FindString(string s);
    public int FindString(string s, int startIndex);
    public int FindStringExact(string s);
    public int FindStringExact(string s, int startIndex);
    public int GetItemHeight(int index);
    public Rectangle GetItemRectangle(int index);
    [EditorBrowsableAttribute("2")]
protected virtual Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified);
    public bool GetSelected(int index);
    public int IndexFromPoint(Point p);
    public int IndexFromPoint(int x, int y);
    protected virtual void OnChangeUICues(UICuesEventArgs e);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnMeasureItem(MeasureItemEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSelectedValueChanged(EventArgs e);
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected virtual void OnDisplayMemberChanged(EventArgs e);
    public virtual void Refresh();
    protected virtual void RefreshItems();
    protected virtual void RefreshItem(int index);
    public virtual void ResetBackColor();
    public virtual void ResetForeColor();
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void SetItemsCore(IList value);
    protected virtual void SetItemCore(int index, object value);
    public void SetSelected(int index, bool value);
    protected virtual void Sort();
    public virtual string ToString();
    protected virtual void WmReflectCommand(Message& m);
    protected virtual void WndProc(Message& m);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[LookupBindingPropertiesAttribute("DataSource", "DisplayMember", "ValueMember", "SelectedValue")]
public abstract class System.Windows.Forms.ListControl : Control {
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[AttributeProviderAttribute("System.ComponentModel.IListSource")]
[SRDescriptionAttribute("ListControlDataSourceDescr")]
public object DataSource { get; public set; }
    protected CurrencyManager DataManager { get; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.Forms.Design.DataMemberFieldConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ListControlDisplayMemberDescr")]
public string DisplayMember { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("")]
public IFormatProvider FormatInfo { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("ListControlFormatStringDescr")]
[EditorAttribute("System.Windows.Forms.Design.FormatStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
public string FormatString { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListControlFormattingEnabledDescr")]
public bool FormattingEnabled { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.DataMemberFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ListControlValueMemberDescr")]
public string ValueMember { get; public set; }
    protected bool AllowSelection { get; }
    public int SelectedIndex { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListControlSelectedValueDescr")]
[BindableAttribute("True")]
public object SelectedValue { get; public set; }
    private static ListControl();
    public object get_DataSource();
    public void set_DataSource(object value);
    public void add_DataSourceChanged(EventHandler value);
    public void remove_DataSourceChanged(EventHandler value);
    protected CurrencyManager get_DataManager();
    public string get_DisplayMember();
    public void set_DisplayMember(string value);
    public void add_DisplayMemberChanged(EventHandler value);
    public void remove_DisplayMemberChanged(EventHandler value);
    public void add_Format(ListControlConvertEventHandler value);
    public void remove_Format(ListControlConvertEventHandler value);
    public IFormatProvider get_FormatInfo();
    public void set_FormatInfo(IFormatProvider value);
    public void add_FormatInfoChanged(EventHandler value);
    public void remove_FormatInfoChanged(EventHandler value);
    public string get_FormatString();
    public void set_FormatString(string value);
    public void add_FormatStringChanged(EventHandler value);
    public void remove_FormatStringChanged(EventHandler value);
    public bool get_FormattingEnabled();
    public void set_FormattingEnabled(bool value);
    public void add_FormattingEnabledChanged(EventHandler value);
    public void remove_FormattingEnabledChanged(EventHandler value);
    public string get_ValueMember();
    public void set_ValueMember(string value);
    public void add_ValueMemberChanged(EventHandler value);
    public void remove_ValueMemberChanged(EventHandler value);
    protected virtual bool get_AllowSelection();
    public abstract virtual int get_SelectedIndex();
    public abstract virtual void set_SelectedIndex(int value);
    public object get_SelectedValue();
    public void set_SelectedValue(object value);
    public void add_SelectedValueChanged(EventHandler value);
    public void remove_SelectedValueChanged(EventHandler value);
    protected object FilterItemOnProperty(object item);
    protected object FilterItemOnProperty(object item, string field);
    public string GetItemText(object item);
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void OnBindingContextChanged(EventArgs e);
    protected virtual void OnDataSourceChanged(EventArgs e);
    protected virtual void OnDisplayMemberChanged(EventArgs e);
    protected virtual void OnFormat(ListControlConvertEventArgs e);
    protected virtual void OnFormatInfoChanged(EventArgs e);
    protected virtual void OnFormatStringChanged(EventArgs e);
    protected virtual void OnFormattingEnabledChanged(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnValueMemberChanged(EventArgs e);
    protected virtual void OnSelectedValueChanged(EventArgs e);
    protected abstract virtual void RefreshItem(int index);
    protected virtual void RefreshItems();
    protected abstract virtual void SetItemsCore(IList items);
    protected virtual void SetItemCore(int index, object value);
}
public class System.Windows.Forms.ListControlConvertEventArgs : ConvertEventArgs {
    public object ListItem { get; }
    public ListControlConvertEventArgs(object value, Type desiredType, object listItem);
    public object get_ListItem();
}
public class System.Windows.Forms.ListControlConvertEventHandler : MulticastDelegate {
    public ListControlConvertEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ListControlConvertEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListControlConvertEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DockingAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Items")]
[DefaultEventAttribute("SelectedIndexChanged")]
[SRDescriptionAttribute("DescriptionListView")]
public class System.Windows.Forms.ListView : Control {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListViewActivationDescr")]
public ItemActivation Activation { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListViewAlignmentDescr")]
public ListViewAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewAllowColumnReorderDescr")]
public bool AllowColumnReorder { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ListViewAutoArrangeDescr")]
public bool AutoArrange { get; public set; }
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewBackgroundImageTiledDescr")]
public bool BackgroundImageTiled { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("borderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewCheckBoxesDescr")]
public bool CheckBoxes { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CheckedIndexCollection CheckedIndices { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public CheckedListViewItemCollection CheckedItems { get; }
    [SRCategoryAttribute("CatBehavior")]
[DesignerSerializationVisibilityAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ListViewColumnsDescr")]
[LocalizableAttribute("True")]
[MergablePropertyAttribute("False")]
public ColumnHeaderCollection Columns { get; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    protected bool DoubleBuffered { get; protected set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewFocusedItemDescr")]
public ListViewItem FocusedItem { get; public set; }
    public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewFullRowSelectDescr")]
public bool FullRowSelect { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewGridLinesDescr")]
public bool GridLines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ListViewGroupsDescr")]
[MergablePropertyAttribute("False")]
public ListViewGroupCollection Groups { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListViewHeaderStyleDescr")]
public ColumnHeaderStyle HeaderStyle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ListViewHideSelectionDescr")]
public bool HideSelection { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewHotTrackingDescr")]
public bool HotTracking { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewHoverSelectDescr")]
public bool HoverSelection { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewInsertionMarkDescr")]
public ListViewInsertionMark InsertionMark { get; }
    [SRCategoryAttribute("CatBehavior")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("ListViewItemsDescr")]
[MergablePropertyAttribute("False")]
public ListViewItemCollection Items { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewLabelEditDescr")]
public bool LabelEdit { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ListViewLabelWrapDescr")]
public bool LabelWrap { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ListViewLargeImageListDescr")]
public ImageList LargeImageList { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewItemSorterDescr")]
public IComparer ListViewItemSorter { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ListViewMultiSelectDescr")]
public bool MultiSelect { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewOwnerDrawDescr")]
public bool OwnerDraw { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ListViewScrollableDescr")]
public bool Scrollable { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SelectedIndexCollection SelectedIndices { get; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewSelectedItemsDescr")]
public SelectedListViewItemCollection SelectedItems { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ListViewShowGroupsDescr")]
public bool ShowGroups { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ListViewSmallImageListDescr")]
public ImageList SmallImageList { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ListViewShowItemToolTipsDescr")]
public bool ShowItemToolTips { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListViewSortingDescr")]
public SortOrder Sorting { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ListViewStateImageListDescr")]
public ImageList StateImageList { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("True")]
[SRDescriptionAttribute("ListViewTileSizeDescr")]
public Size TileSize { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewTopItemDescr")]
public ListViewItem TopItem { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("True")]
public bool UseCompatibleStateImageBehavior { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ListViewViewDescr")]
public View View { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ListViewVirtualListSizeDescr")]
public int VirtualListSize { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ListViewVirtualModeDescr")]
public bool VirtualMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    private static ListView();
    public ItemActivation get_Activation();
    public void set_Activation(ItemActivation value);
    public ListViewAlignment get_Alignment();
    public void set_Alignment(ListViewAlignment value);
    public bool get_AllowColumnReorder();
    public void set_AllowColumnReorder(bool value);
    public bool get_AutoArrange();
    public void set_AutoArrange(bool value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public bool get_BackgroundImageTiled();
    public void set_BackgroundImageTiled(bool value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public bool get_CheckBoxes();
    public void set_CheckBoxes(bool value);
    public CheckedIndexCollection get_CheckedIndices();
    public CheckedListViewItemCollection get_CheckedItems();
    public ColumnHeaderCollection get_Columns();
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public ListViewItem get_FocusedItem();
    public void set_FocusedItem(ListViewItem value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public bool get_FullRowSelect();
    public void set_FullRowSelect(bool value);
    public bool get_GridLines();
    public void set_GridLines(bool value);
    public ListViewGroupCollection get_Groups();
    public ColumnHeaderStyle get_HeaderStyle();
    public void set_HeaderStyle(ColumnHeaderStyle value);
    public bool get_HideSelection();
    public void set_HideSelection(bool value);
    public bool get_HotTracking();
    public void set_HotTracking(bool value);
    public bool get_HoverSelection();
    public void set_HoverSelection(bool value);
    public ListViewInsertionMark get_InsertionMark();
    public ListViewItemCollection get_Items();
    public bool get_LabelEdit();
    public void set_LabelEdit(bool value);
    public bool get_LabelWrap();
    public void set_LabelWrap(bool value);
    public ImageList get_LargeImageList();
    public void set_LargeImageList(ImageList value);
    public IComparer get_ListViewItemSorter();
    public void set_ListViewItemSorter(IComparer value);
    public bool get_MultiSelect();
    public void set_MultiSelect(bool value);
    public bool get_OwnerDraw();
    public void set_OwnerDraw(bool value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public bool get_Scrollable();
    public void set_Scrollable(bool value);
    public SelectedIndexCollection get_SelectedIndices();
    public SelectedListViewItemCollection get_SelectedItems();
    public bool get_ShowGroups();
    public void set_ShowGroups(bool value);
    public ImageList get_SmallImageList();
    public void set_SmallImageList(ImageList value);
    public bool get_ShowItemToolTips();
    public void set_ShowItemToolTips(bool value);
    public SortOrder get_Sorting();
    public void set_Sorting(SortOrder value);
    public ImageList get_StateImageList();
    public void set_StateImageList(ImageList value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public Size get_TileSize();
    public void set_TileSize(Size value);
    public ListViewItem get_TopItem();
    public void set_TopItem(ListViewItem value);
    public bool get_UseCompatibleStateImageBehavior();
    public void set_UseCompatibleStateImageBehavior(bool value);
    public View get_View();
    public void set_View(View value);
    public int get_VirtualListSize();
    public void set_VirtualListSize(int value);
    public bool get_VirtualMode();
    public void set_VirtualMode(bool value);
    public void add_AfterLabelEdit(LabelEditEventHandler value);
    public void remove_AfterLabelEdit(LabelEditEventHandler value);
    public void add_BeforeLabelEdit(LabelEditEventHandler value);
    public void remove_BeforeLabelEdit(LabelEditEventHandler value);
    public void add_CacheVirtualItems(CacheVirtualItemsEventHandler value);
    public void remove_CacheVirtualItems(CacheVirtualItemsEventHandler value);
    public void add_ColumnClick(ColumnClickEventHandler value);
    public void remove_ColumnClick(ColumnClickEventHandler value);
    public void add_ColumnReordered(ColumnReorderedEventHandler value);
    public void remove_ColumnReordered(ColumnReorderedEventHandler value);
    public void add_ColumnWidthChanged(ColumnWidthChangedEventHandler value);
    public void remove_ColumnWidthChanged(ColumnWidthChangedEventHandler value);
    public void add_ColumnWidthChanging(ColumnWidthChangingEventHandler value);
    public void remove_ColumnWidthChanging(ColumnWidthChangingEventHandler value);
    public void add_DrawColumnHeader(DrawListViewColumnHeaderEventHandler value);
    public void remove_DrawColumnHeader(DrawListViewColumnHeaderEventHandler value);
    public void add_DrawItem(DrawListViewItemEventHandler value);
    public void remove_DrawItem(DrawListViewItemEventHandler value);
    public void add_DrawSubItem(DrawListViewSubItemEventHandler value);
    public void remove_DrawSubItem(DrawListViewSubItemEventHandler value);
    public void add_ItemActivate(EventHandler value);
    public void remove_ItemActivate(EventHandler value);
    public void add_ItemCheck(ItemCheckEventHandler value);
    public void remove_ItemCheck(ItemCheckEventHandler value);
    public void add_ItemChecked(ItemCheckedEventHandler value);
    public void remove_ItemChecked(ItemCheckedEventHandler value);
    public void add_ItemDrag(ItemDragEventHandler value);
    public void remove_ItemDrag(ItemDragEventHandler value);
    public void add_ItemMouseHover(ListViewItemMouseHoverEventHandler value);
    public void remove_ItemMouseHover(ListViewItemMouseHoverEventHandler value);
    public void add_ItemSelectionChanged(ListViewItemSelectionChangedEventHandler value);
    public void remove_ItemSelectionChanged(ListViewItemSelectionChangedEventHandler value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_RetrieveVirtualItem(RetrieveVirtualItemEventHandler value);
    public void remove_RetrieveVirtualItem(RetrieveVirtualItemEventHandler value);
    public void add_SearchForVirtualItem(SearchForVirtualItemEventHandler value);
    public void remove_SearchForVirtualItem(SearchForVirtualItemEventHandler value);
    public void add_SelectedIndexChanged(EventHandler value);
    public void remove_SelectedIndexChanged(EventHandler value);
    public void add_VirtualItemsSelectionRangeChanged(ListViewVirtualItemsSelectionRangeChangedEventHandler value);
    public void remove_VirtualItemsSelectionRangeChanged(ListViewVirtualItemsSelectionRangeChangedEventHandler value);
    public void ArrangeIcons(ListViewAlignment value);
    public void ArrangeIcons();
    public void AutoResizeColumns(ColumnHeaderAutoResizeStyle headerAutoResize);
    public void AutoResizeColumn(int columnIndex, ColumnHeaderAutoResizeStyle headerAutoResize);
    public void BeginUpdate();
    public void Clear();
    protected virtual void CreateHandle();
    protected virtual void Dispose(bool disposing);
    public void EndUpdate();
    public void EnsureVisible(int index);
    public ListViewItem FindItemWithText(string text);
    public ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int startIndex);
    public ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);
    public ListViewItem FindNearestItem(SearchDirectionHint dir, Point point);
    public ListViewItem FindNearestItem(SearchDirectionHint searchDirection, int x, int y);
    public ListViewItem GetItemAt(int x, int y);
    public Rectangle GetItemRect(int index);
    public Rectangle GetItemRect(int index, ItemBoundsPortion portion);
    public ListViewHitTestInfo HitTest(Point point);
    public ListViewHitTestInfo HitTest(int x, int y);
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void OnAfterLabelEdit(LabelEditEventArgs e);
    protected virtual void OnBackgroundImageChanged(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseHover(EventArgs e);
    protected virtual void OnBeforeLabelEdit(LabelEditEventArgs e);
    protected virtual void OnCacheVirtualItems(CacheVirtualItemsEventArgs e);
    protected virtual void OnColumnClick(ColumnClickEventArgs e);
    protected virtual void OnColumnReordered(ColumnReorderedEventArgs e);
    protected virtual void OnColumnWidthChanged(ColumnWidthChangedEventArgs e);
    protected virtual void OnColumnWidthChanging(ColumnWidthChangingEventArgs e);
    protected virtual void OnDrawColumnHeader(DrawListViewColumnHeaderEventArgs e);
    protected virtual void OnDrawItem(DrawListViewItemEventArgs e);
    protected virtual void OnDrawSubItem(DrawListViewSubItemEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnItemActivate(EventArgs e);
    protected virtual void OnItemCheck(ItemCheckEventArgs ice);
    protected virtual void OnItemChecked(ItemCheckedEventArgs e);
    protected virtual void OnItemDrag(ItemDragEventArgs e);
    protected virtual void OnItemMouseHover(ListViewItemMouseHoverEventArgs e);
    protected virtual void OnItemSelectionChanged(ListViewItemSelectionChangedEventArgs e);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnRetrieveVirtualItem(RetrieveVirtualItemEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    protected virtual void OnSearchForVirtualItem(SearchForVirtualItemEventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSystemColorsChanged(EventArgs e);
    protected virtual void OnVirtualItemsSelectionRangeChanged(ListViewVirtualItemsSelectionRangeChangedEventArgs e);
    protected void RealizeProperties();
    [EditorBrowsableAttribute("2")]
public void RedrawItems(int startIndex, int endIndex, bool invalidateOnly);
    public void Sort();
    public virtual string ToString();
    protected void UpdateExtendedStyles();
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.ListViewAlignment : Enum {
    public int value__;
    public static ListViewAlignment Default;
    public static ListViewAlignment Top;
    public static ListViewAlignment Left;
    public static ListViewAlignment SnapToGrid;
}
[TypeConverterAttribute("System.Windows.Forms.ListViewGroupConverter")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("Header")]
public class System.Windows.Forms.ListViewGroup : object {
    [SRCategoryAttribute("CatAppearance")]
public string Header { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
public HorizontalAlignment HeaderAlignment { get; public set; }
    [BrowsableAttribute("False")]
public ListViewItemCollection Items { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ListView ListView { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ListViewGroupNameDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    public ListViewGroup(string key, string headerText);
    public ListViewGroup(string header);
    public ListViewGroup(string header, HorizontalAlignment headerAlignment);
    private static ListViewGroup();
    public string get_Header();
    public void set_Header(string value);
    public HorizontalAlignment get_HeaderAlignment();
    public void set_HeaderAlignment(HorizontalAlignment value);
    public ListViewItemCollection get_Items();
    public ListView get_ListView();
    public string get_Name();
    public void set_Name(string value);
    public object get_Tag();
    public void set_Tag(object value);
    public virtual string ToString();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.ListViewGroupCollection : object {
    public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    public ListViewGroup Item { get; public set; }
    public ListViewGroup Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    public ListViewGroup get_Item(int index);
    public void set_Item(int index, ListViewGroup value);
    public ListViewGroup get_Item(string key);
    public void set_Item(string key, ListViewGroup value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public int Add(ListViewGroup group);
    public ListViewGroup Add(string key, string headerText);
    private sealed virtual override int System.Collections.IList.Add(object value);
    public void AddRange(ListViewGroup[] groups);
    public void AddRange(ListViewGroupCollection groups);
    public sealed virtual void Clear();
    public bool Contains(ListViewGroup value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(ListViewGroup value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    public void Insert(int index, ListViewGroup group);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    public void Remove(ListViewGroup group);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    public sealed virtual void RemoveAt(int index);
}
internal class System.Windows.Forms.ListViewGroupConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.Windows.Forms.ListViewHitTestInfo : object {
    public ListViewHitTestLocations Location { get; }
    public ListViewItem Item { get; }
    public ListViewSubItem SubItem { get; }
    public ListViewHitTestInfo(ListViewItem hitItem, ListViewSubItem hitSubItem, ListViewHitTestLocations hitLocation);
    public ListViewHitTestLocations get_Location();
    public ListViewItem get_Item();
    public ListViewSubItem get_SubItem();
}
[FlagsAttribute]
public enum System.Windows.Forms.ListViewHitTestLocations : Enum {
    public int value__;
    public static ListViewHitTestLocations None;
    public static ListViewHitTestLocations AboveClientArea;
    public static ListViewHitTestLocations BelowClientArea;
    public static ListViewHitTestLocations LeftOfClientArea;
    public static ListViewHitTestLocations RightOfClientArea;
    public static ListViewHitTestLocations Image;
    public static ListViewHitTestLocations StateImage;
    public static ListViewHitTestLocations Label;
}
public class System.Windows.Forms.ListViewInsertionMark : object {
    public bool AppearsAfterItem { get; public set; }
    public Rectangle Bounds { get; }
    public Color Color { get; public set; }
    public int Index { get; public set; }
    public bool get_AppearsAfterItem();
    public void set_AppearsAfterItem(bool value);
    public Rectangle get_Bounds();
    public Color get_Color();
    public void set_Color(Color value);
    public int get_Index();
    public void set_Index(int value);
    public int NearestIndex(Point pt);
}
[TypeConverterAttribute("System.Windows.Forms.ListViewItemConverter")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("Text")]
public class System.Windows.Forms.ListViewItem : object {
    [DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatAppearance")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle Bounds { get; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatAppearance")]
public bool Checked { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public bool Focused { get; public set; }
    [LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatAppearance")]
public Font Font { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatAppearance")]
public Color ForeColor { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
public ListViewGroup Group { get; public set; }
    [DefaultValueAttribute("-1")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ListViewItemImageIndexDescr")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
public int ImageIndex { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DesignerSerializationVisibilityAttribute("0")]
[RefreshPropertiesAttribute("2")]
[SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
public string ImageKey { get; public set; }
    [BrowsableAttribute("False")]
public ImageList ImageList { get; }
    [DefaultValueAttribute("0")]
[SRDescriptionAttribute("ListViewItemIndentCountDescr")]
[SRCategoryAttribute("CatDisplay")]
public int IndentCount { get; public set; }
    [BrowsableAttribute("False")]
public int Index { get; }
    [BrowsableAttribute("False")]
public ListView ListView { get; }
    [LocalizableAttribute("True")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Name { get; public set; }
    [SRCategoryAttribute("CatDisplay")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Point Position { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Selected { get; public set; }
    [LocalizableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
[DefaultValueAttribute("-1")]
[SRDescriptionAttribute("ListViewItemStateImageIndexDescr")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RelatedImageListAttribute("ListView.StateImageList")]
public int StateImageIndex { get; public set; }
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ListViewItemSubItemsDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListViewSubItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public ListViewSubItemCollection SubItems { get; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [LocalizableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRCategoryAttribute("CatAppearance")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
public string ToolTipText { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
public bool UseItemStyleForSubItems { get; public set; }
    protected ListViewItem(SerializationInfo info, StreamingContext context);
    public ListViewItem(string text);
    public ListViewItem(string text, int imageIndex);
    public ListViewItem(String[] items);
    public ListViewItem(String[] items, int imageIndex);
    public ListViewItem(String[] items, int imageIndex, Color foreColor, Color backColor, Font font);
    public ListViewItem(ListViewSubItem[] subItems, int imageIndex);
    public ListViewItem(ListViewGroup group);
    public ListViewItem(string text, ListViewGroup group);
    public ListViewItem(string text, int imageIndex, ListViewGroup group);
    public ListViewItem(String[] items, ListViewGroup group);
    public ListViewItem(String[] items, int imageIndex, ListViewGroup group);
    public ListViewItem(String[] items, int imageIndex, Color foreColor, Color backColor, Font font, ListViewGroup group);
    public ListViewItem(ListViewSubItem[] subItems, int imageIndex, ListViewGroup group);
    public ListViewItem(string text, string imageKey);
    public ListViewItem(String[] items, string imageKey);
    public ListViewItem(String[] items, string imageKey, Color foreColor, Color backColor, Font font);
    public ListViewItem(ListViewSubItem[] subItems, string imageKey);
    public ListViewItem(string text, string imageKey, ListViewGroup group);
    public ListViewItem(String[] items, string imageKey, ListViewGroup group);
    public ListViewItem(String[] items, string imageKey, Color foreColor, Color backColor, Font font, ListViewGroup group);
    public ListViewItem(ListViewSubItem[] subItems, string imageKey, ListViewGroup group);
    private static ListViewItem();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Rectangle get_Bounds();
    public bool get_Checked();
    public void set_Checked(bool value);
    public bool get_Focused();
    public void set_Focused(bool value);
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public ListViewGroup get_Group();
    public void set_Group(ListViewGroup value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public ImageList get_ImageList();
    public int get_IndentCount();
    public void set_IndentCount(int value);
    public int get_Index();
    public ListView get_ListView();
    public string get_Name();
    public void set_Name(string value);
    public Point get_Position();
    public void set_Position(Point value);
    public bool get_Selected();
    public void set_Selected(bool value);
    public int get_StateImageIndex();
    public void set_StateImageIndex(int value);
    public ListViewSubItemCollection get_SubItems();
    public object get_Tag();
    public void set_Tag(object value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public bool get_UseItemStyleForSubItems();
    public void set_UseItemStyleForSubItems(bool value);
    public void BeginEdit();
    public virtual object Clone();
    public virtual void EnsureVisible();
    public ListViewItem FindNearestItem(SearchDirectionHint searchDirection);
    public Rectangle GetBounds(ItemBoundsPortion portion);
    public ListViewSubItem GetSubItemAt(int x, int y);
    public virtual void Remove();
    protected virtual void Deserialize(SerializationInfo info, StreamingContext context);
    protected virtual void Serialize(SerializationInfo info, StreamingContext context);
    public virtual string ToString();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Windows.Forms.ListViewItemConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.ListViewItemMouseHoverEventArgs : EventArgs {
    public ListViewItem Item { get; }
    public ListViewItemMouseHoverEventArgs(ListViewItem item);
    public ListViewItem get_Item();
}
public class System.Windows.Forms.ListViewItemMouseHoverEventHandler : MulticastDelegate {
    public ListViewItemMouseHoverEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ListViewItemMouseHoverEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListViewItemMouseHoverEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ListViewItemSelectionChangedEventArgs : EventArgs {
    public bool IsSelected { get; }
    public ListViewItem Item { get; }
    public int ItemIndex { get; }
    public ListViewItemSelectionChangedEventArgs(ListViewItem item, int itemIndex, bool isSelected);
    public bool get_IsSelected();
    public ListViewItem get_Item();
    public int get_ItemIndex();
}
public class System.Windows.Forms.ListViewItemSelectionChangedEventHandler : MulticastDelegate {
    public ListViewItemSelectionChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ListViewItemSelectionChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListViewItemSelectionChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Windows.Forms.ListViewItemStates : Enum {
    public int value__;
    public static ListViewItemStates Checked;
    public static ListViewItemStates Default;
    public static ListViewItemStates Focused;
    public static ListViewItemStates Grayed;
    public static ListViewItemStates Hot;
    public static ListViewItemStates Indeterminate;
    public static ListViewItemStates Marked;
    public static ListViewItemStates Selected;
    public static ListViewItemStates ShowKeyboardCues;
}
internal class System.Windows.Forms.ListViewSubItemConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs : EventArgs {
    public int EndIndex { get; }
    public bool IsSelected { get; }
    public int StartIndex { get; }
    public ListViewVirtualItemsSelectionRangeChangedEventArgs(int startIndex, int endIndex, bool isSelected);
    public int get_EndIndex();
    public bool get_IsSelected();
    public int get_StartIndex();
}
public class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler : MulticastDelegate {
    public ListViewVirtualItemsSelectionRangeChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ListViewVirtualItemsSelectionRangeChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListViewVirtualItemsSelectionRangeChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolboxItemFilterAttribute("System.Windows.Forms.MainMenu")]
public class System.Windows.Forms.MainMenu : Menu {
    [LocalizableAttribute("True")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("MenuRightToLeftDescr")]
public RightToLeft RightToLeft { get; public set; }
    public MainMenu(IContainer container);
    public MainMenu(MenuItem[] items);
    public void add_Collapse(EventHandler value);
    public void remove_Collapse(EventHandler value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public virtual MainMenu CloneMenu();
    protected virtual IntPtr CreateMenuHandle();
    protected virtual void Dispose(bool disposing);
    public Form GetForm();
    protected internal virtual void OnCollapse(EventArgs e);
    public virtual string ToString();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultEventAttribute("MaskInputRejected")]
[DefaultBindingPropertyAttribute("Text")]
[DefaultPropertyAttribute("Mask")]
[DesignerAttribute("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionMaskedTextBox")]
public class System.Windows.Forms.MaskedTextBox : TextBoxBase {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AcceptsTab { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxAllowPromptAsInputDescr")]
[DefaultValueAttribute("True")]
public bool AllowPromptAsInput { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxAsciiOnlyDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("False")]
public bool AsciiOnly { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxBeepOnErrorDescr")]
[DefaultValueAttribute("False")]
public bool BeepOnError { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CanUndo { get; }
    protected CreateParams CreateParams { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxCultureDescr")]
[RefreshPropertiesAttribute("2")]
public CultureInfo Culture { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxCutCopyMaskFormat")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MaskFormat CutCopyMaskFormat { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IFormatProvider FormatProvider { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxHidePromptOnLeaveDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("False")]
public bool HidePromptOnLeave { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxInsertKeyModeDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public InsertKeyMode InsertKeyMode { get; public set; }
    [BrowsableAttribute("False")]
public bool IsOverwriteMode { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public String[] Lines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxMaskDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[LocalizableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string Mask { get; public set; }
    [BrowsableAttribute("False")]
public bool MaskCompleted { get; }
    [BrowsableAttribute("False")]
public bool MaskFull { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public MaskedTextProvider MaskedTextProvider { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public int MaxLength { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Multiline { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxPasswordCharDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute(" ")]
public char PasswordChar { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("MaskedTextBoxPromptCharDescr")]
[RefreshPropertiesAttribute("2")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("_")]
public char PromptChar { get; public set; }
    public bool ReadOnly { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxRejectInputOnFirstFailureDescr")]
[DefaultValueAttribute("False")]
public bool RejectInputOnFirstFailure { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxResetOnPrompt")]
[DefaultValueAttribute("True")]
public bool ResetOnPrompt { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxResetOnSpace")]
[DefaultValueAttribute("True")]
public bool ResetOnSpace { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxSkipLiterals")]
[DefaultValueAttribute("True")]
public bool SkipLiterals { get; public set; }
    public string SelectedText { get; public set; }
    [EditorAttribute("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRCategoryAttribute("CatAppearance")]
[RefreshPropertiesAttribute("2")]
[BindableAttribute("True")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
public int TextLength { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxTextAlignDescr")]
public HorizontalAlignment TextAlign { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxTextMaskFormat")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MaskFormat TextMaskFormat { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MaskedTextBoxUseSystemPasswordCharDescr")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("False")]
public bool UseSystemPasswordChar { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public Type ValidatingType { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool WordWrap { get; public set; }
    public MaskedTextBox(string mask);
    public MaskedTextBox(MaskedTextProvider maskedTextProvider);
    private static MaskedTextBox();
    public bool get_AcceptsTab();
    public void set_AcceptsTab(bool value);
    public bool get_AllowPromptAsInput();
    public void set_AllowPromptAsInput(bool value);
    public void add_AcceptsTabChanged(EventHandler value);
    public void remove_AcceptsTabChanged(EventHandler value);
    public bool get_AsciiOnly();
    public void set_AsciiOnly(bool value);
    public bool get_BeepOnError();
    public void set_BeepOnError(bool value);
    public bool get_CanUndo();
    protected virtual CreateParams get_CreateParams();
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public MaskFormat get_CutCopyMaskFormat();
    public void set_CutCopyMaskFormat(MaskFormat value);
    public IFormatProvider get_FormatProvider();
    public void set_FormatProvider(IFormatProvider value);
    public bool get_HidePromptOnLeave();
    public void set_HidePromptOnLeave(bool value);
    public InsertKeyMode get_InsertKeyMode();
    public void set_InsertKeyMode(InsertKeyMode value);
    protected virtual bool IsInputKey(Keys keyData);
    public bool get_IsOverwriteMode();
    public void add_IsOverwriteModeChanged(EventHandler value);
    public void remove_IsOverwriteModeChanged(EventHandler value);
    public String[] get_Lines();
    public void set_Lines(String[] value);
    public string get_Mask();
    public void set_Mask(string value);
    public void add_MaskChanged(EventHandler value);
    public void remove_MaskChanged(EventHandler value);
    public bool get_MaskCompleted();
    public bool get_MaskFull();
    public MaskedTextProvider get_MaskedTextProvider();
    public void add_MaskInputRejected(MaskInputRejectedEventHandler value);
    public void remove_MaskInputRejected(MaskInputRejectedEventHandler value);
    public virtual int get_MaxLength();
    public virtual void set_MaxLength(int value);
    public virtual bool get_Multiline();
    public virtual void set_Multiline(bool value);
    public void add_MultilineChanged(EventHandler value);
    public void remove_MultilineChanged(EventHandler value);
    public char get_PasswordChar();
    public void set_PasswordChar(char value);
    public char get_PromptChar();
    public void set_PromptChar(char value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public bool get_RejectInputOnFirstFailure();
    public void set_RejectInputOnFirstFailure(bool value);
    public bool get_ResetOnPrompt();
    public void set_ResetOnPrompt(bool value);
    public bool get_ResetOnSpace();
    public void set_ResetOnSpace(bool value);
    public bool get_SkipLiterals();
    public void set_SkipLiterals(bool value);
    public virtual string get_SelectedText();
    public virtual void set_SelectedText(string value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual int get_TextLength();
    public HorizontalAlignment get_TextAlign();
    public void set_TextAlign(HorizontalAlignment value);
    public void add_TextAlignChanged(EventHandler value);
    public void remove_TextAlignChanged(EventHandler value);
    public MaskFormat get_TextMaskFormat();
    public void set_TextMaskFormat(MaskFormat value);
    public virtual string ToString();
    public void add_TypeValidationCompleted(TypeValidationEventHandler value);
    public void remove_TypeValidationCompleted(TypeValidationEventHandler value);
    public bool get_UseSystemPasswordChar();
    public void set_UseSystemPasswordChar(bool value);
    public Type get_ValidatingType();
    public void set_ValidatingType(Type value);
    public bool get_WordWrap();
    public void set_WordWrap(bool value);
    [EditorBrowsableAttribute("1")]
public void ClearUndo();
    [EditorBrowsableAttribute("2")]
protected virtual void CreateHandle();
    public virtual char GetCharFromPosition(Point pt);
    public virtual int GetCharIndexFromPosition(Point pt);
    [EditorBrowsableAttribute("1")]
public int GetFirstCharIndexOfCurrentLine();
    [EditorBrowsableAttribute("1")]
public int GetFirstCharIndexFromLine(int lineNumber);
    [EditorBrowsableAttribute("1")]
public virtual int GetLineFromCharIndex(int index);
    public virtual Point GetPositionFromCharIndex(int index);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnIsOverwriteModeChanged(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMaskChanged(EventArgs e);
    [EditorBrowsableAttribute("1")]
protected virtual void OnMultilineChanged(EventArgs e);
    protected virtual void OnTextAlignChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnValidating(CancelEventArgs e);
    protected virtual void OnTextChanged(EventArgs e);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    protected internal virtual bool ProcessKeyMessage(Message& m);
    [EditorBrowsableAttribute("1")]
public void ScrollToCaret();
    [EditorBrowsableAttribute("1")]
public void Undo();
    public object ValidateText();
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.MaskFormat : Enum {
    public int value__;
    public static MaskFormat IncludePrompt;
    public static MaskFormat IncludeLiterals;
    public static MaskFormat IncludePromptAndLiterals;
    public static MaskFormat ExcludePromptAndLiterals;
}
public class System.Windows.Forms.MaskInputRejectedEventArgs : EventArgs {
    public int Position { get; }
    public MaskedTextResultHint RejectionHint { get; }
    public MaskInputRejectedEventArgs(int position, MaskedTextResultHint rejectionHint);
    public int get_Position();
    public MaskedTextResultHint get_RejectionHint();
}
public class System.Windows.Forms.MaskInputRejectedEventHandler : MulticastDelegate {
    public MaskInputRejectedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MaskInputRejectedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MaskInputRejectedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class System.Windows.Forms.MdiClient : Control {
    [LocalizableAttribute("True")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected CreateParams CreateParams { get; }
    public Form[] MdiChildren { get; }
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    protected virtual CreateParams get_CreateParams();
    public Form[] get_MdiChildren();
    protected virtual ControlCollection CreateControlsInstance();
    public void LayoutMdi(MdiLayout value);
    protected virtual void OnResize(EventArgs e);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.MdiLayout : Enum {
    public int value__;
    public static MdiLayout Cascade;
    public static MdiLayout TileHorizontal;
    public static MdiLayout TileVertical;
    public static MdiLayout ArrangeIcons;
}
internal class System.Windows.Forms.MdiWindowListItemConverter : ComponentConverter {
    public MdiWindowListItemConverter(Type type);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public class System.Windows.Forms.MeasureItemEventArgs : EventArgs {
    public Graphics Graphics { get; }
    public int Index { get; }
    public int ItemHeight { get; public set; }
    public int ItemWidth { get; public set; }
    public MeasureItemEventArgs(Graphics graphics, int index, int itemHeight);
    public MeasureItemEventArgs(Graphics graphics, int index);
    public Graphics get_Graphics();
    public int get_Index();
    public int get_ItemHeight();
    public void set_ItemHeight(int value);
    public int get_ItemWidth();
    public void set_ItemWidth(int value);
}
public class System.Windows.Forms.MeasureItemEventHandler : MulticastDelegate {
    public MeasureItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MeasureItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MeasureItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[ListBindableAttribute("False")]
public abstract class System.Windows.Forms.Menu : Component {
    public static int FindHandle;
    public static int FindShortcut;
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlHandleDescr")]
public IntPtr Handle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("MenuIsParentDescr")]
public bool IsParent { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("MenuMDIListItemDescr")]
public MenuItem MdiListItem { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("MenuMenuItemsDescr")]
[MergablePropertyAttribute("False")]
public MenuItemCollection MenuItems { get; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    protected Menu(MenuItem[] items);
    public IntPtr get_Handle();
    public virtual bool get_IsParent();
    public MenuItem get_MdiListItem();
    public string get_Name();
    public void set_Name(string value);
    public MenuItemCollection get_MenuItems();
    public object get_Tag();
    public void set_Tag(object value);
    protected internal void CloneMenu(Menu menuSrc);
    protected virtual IntPtr CreateMenuHandle();
    protected virtual void Dispose(bool disposing);
    public MenuItem FindMenuItem(int type, IntPtr value);
    protected int FindMergePosition(int mergeOrder);
    public ContextMenu GetContextMenu();
    public MainMenu GetMainMenu();
    public virtual void MergeMenu(Menu menuSrc);
    protected internal virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    public virtual string ToString();
}
public enum System.Windows.Forms.MenuGlyph : Enum {
    public int value__;
    public static MenuGlyph Arrow;
    public static MenuGlyph Checkmark;
    public static MenuGlyph Bullet;
    public static MenuGlyph Min;
    public static MenuGlyph Max;
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultEventAttribute("Click")]
[DefaultPropertyAttribute("Text")]
public class System.Windows.Forms.MenuItem : Menu {
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
public bool BarBreak { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
public bool Break { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("MenuItemCheckedDescr")]
public bool Checked { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("MenuItemDefaultDescr")]
public bool DefaultItem { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("MenuItemOwnerDrawDescr")]
public bool OwnerDraw { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("MenuItemEnabledDescr")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
public int Index { get; public set; }
    [BrowsableAttribute("False")]
public bool IsParent { get; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("MenuItemMDIListDescr")]
public bool MdiList { get; public set; }
    protected int MenuID { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("MenuItemMergeTypeDescr")]
public MenuMerge MergeType { get; public set; }
    [DefaultValueAttribute("0")]
[SRDescriptionAttribute("MenuItemMergeOrderDescr")]
public int MergeOrder { get; public set; }
    [BrowsableAttribute("False")]
public char Mnemonic { get; }
    [BrowsableAttribute("False")]
public Menu Parent { get; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("MenuItemRadioCheckDescr")]
public bool RadioCheck { get; public set; }
    [LocalizableAttribute("True")]
[SRDescriptionAttribute("MenuItemTextDescr")]
public string Text { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("MenuItemShortCutDescr")]
public Shortcut Shortcut { get; public set; }
    [DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("MenuItemShowShortCutDescr")]
public bool ShowShortcut { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("MenuItemVisibleDescr")]
public bool Visible { get; public set; }
    public MenuItem(string text);
    public MenuItem(string text, EventHandler onClick);
    public MenuItem(string text, EventHandler onClick, Shortcut shortcut);
    public MenuItem(string text, MenuItem[] items);
    public MenuItem(MenuMerge mergeType, int mergeOrder, Shortcut shortcut, string text, EventHandler onClick, EventHandler onPopup, EventHandler onSelect, MenuItem[] items);
    private static MenuItem();
    public bool get_BarBreak();
    public void set_BarBreak(bool value);
    public bool get_Break();
    public void set_Break(bool value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public bool get_DefaultItem();
    public void set_DefaultItem(bool value);
    public bool get_OwnerDraw();
    public void set_OwnerDraw(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_Index();
    public void set_Index(int value);
    public virtual bool get_IsParent();
    public bool get_MdiList();
    public void set_MdiList(bool value);
    protected int get_MenuID();
    public MenuMerge get_MergeType();
    public void set_MergeType(MenuMerge value);
    public int get_MergeOrder();
    public void set_MergeOrder(int value);
    public char get_Mnemonic();
    public Menu get_Parent();
    public bool get_RadioCheck();
    public void set_RadioCheck(bool value);
    public string get_Text();
    public void set_Text(string value);
    public Shortcut get_Shortcut();
    public void set_Shortcut(Shortcut value);
    public bool get_ShowShortcut();
    public void set_ShowShortcut(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_DrawItem(DrawItemEventHandler value);
    public void remove_DrawItem(DrawItemEventHandler value);
    public void add_MeasureItem(MeasureItemEventHandler value);
    public void remove_MeasureItem(MeasureItemEventHandler value);
    public void add_Popup(EventHandler value);
    public void remove_Popup(EventHandler value);
    public void add_Select(EventHandler value);
    public void remove_Select(EventHandler value);
    public virtual MenuItem CloneMenu();
    protected void CloneMenu(MenuItem itemSrc);
    protected virtual void Dispose(bool disposing);
    public virtual MenuItem MergeMenu();
    public void MergeMenu(MenuItem itemSrc);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnMeasureItem(MeasureItemEventArgs e);
    protected virtual void OnPopup(EventArgs e);
    protected virtual void OnSelect(EventArgs e);
    protected virtual void OnInitMenuPopup(EventArgs e);
    public void PerformClick();
    public virtual void PerformSelect();
    public virtual string ToString();
}
public enum System.Windows.Forms.MenuMerge : Enum {
    public int value__;
    public static MenuMerge Add;
    public static MenuMerge Replace;
    public static MenuMerge MergeItems;
    public static MenuMerge Remove;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[SRDescriptionAttribute("DescriptionMenuStrip")]
public class System.Windows.Forms.MenuStrip : ToolStrip {
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripCanOverflowDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
public bool CanOverflow { get; public set; }
    protected bool DefaultShowItemToolTips { get; }
    protected Padding DefaultGripMargin { get; }
    protected Size DefaultSize { get; }
    protected Padding DefaultPadding { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripGripStyle GripStyle { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripShowItemToolTipsDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool ShowItemToolTips { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripStretchDescr")]
public bool Stretch { get; public set; }
    [DefaultValueAttribute("")]
[MergablePropertyAttribute("False")]
[SRDescriptionAttribute("MenuStripMdiWindowListItem")]
[SRCategoryAttribute("CatBehavior")]
[TypeConverterAttribute("System.Windows.Forms.MdiWindowListItemConverter")]
public ToolStripMenuItem MdiWindowListItem { get; public set; }
    private static MenuStrip();
    public bool get_CanOverflow();
    public void set_CanOverflow(bool value);
    protected virtual bool get_DefaultShowItemToolTips();
    protected virtual Padding get_DefaultGripMargin();
    protected virtual Size get_DefaultSize();
    protected virtual Padding get_DefaultPadding();
    public ToolStripGripStyle get_GripStyle();
    public void set_GripStyle(ToolStripGripStyle value);
    public void add_MenuActivate(EventHandler value);
    public void remove_MenuActivate(EventHandler value);
    public void add_MenuDeactivate(EventHandler value);
    public void remove_MenuDeactivate(EventHandler value);
    public bool get_ShowItemToolTips();
    public void set_ShowItemToolTips(bool value);
    public bool get_Stretch();
    public void set_Stretch(bool value);
    public ToolStripMenuItem get_MdiWindowListItem();
    public void set_MdiWindowListItem(ToolStripMenuItem value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected internal virtual ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick);
    protected virtual void OnMenuActivate(EventArgs e);
    protected virtual void OnMenuDeactivate(EventArgs e);
    protected virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.MergeAction : Enum {
    public int value__;
    public static MergeAction Append;
    public static MergeAction Insert;
    public static MergeAction Replace;
    public static MergeAction Remove;
    public static MergeAction MatchOnly;
}
public class System.Windows.Forms.Message : ValueType {
    private IntPtr hWnd;
    private int msg;
    private IntPtr wparam;
    private IntPtr lparam;
    private IntPtr result;
    public IntPtr HWnd { get; public set; }
    public int Msg { get; public set; }
    public IntPtr WParam { get; public set; }
    public IntPtr LParam { get; public set; }
    public IntPtr Result { get; public set; }
    public IntPtr get_HWnd();
    public void set_HWnd(IntPtr value);
    public int get_Msg();
    public void set_Msg(int value);
    public IntPtr get_WParam();
    public void set_WParam(IntPtr value);
    public IntPtr get_LParam();
    public void set_LParam(IntPtr value);
    public IntPtr get_Result();
    public void set_Result(IntPtr value);
    public object GetLParam(Type cls);
    public static Message Create(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);
    public virtual bool Equals(object o);
    public static bool op_Inequality(Message a, Message b);
    public static bool op_Equality(Message a, Message b);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Windows.Forms.MessageBox : object {
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, bool displayHelpButton);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, string keyword);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, string keyword);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator, object param);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options, string helpFilePath, HelpNavigator navigator, object param);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon);
    public static DialogResult Show(string text, string caption, MessageBoxButtons buttons);
    public static DialogResult Show(string text, string caption);
    public static DialogResult Show(string text);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton, MessageBoxOptions options);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon, MessageBoxDefaultButton defaultButton);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons, MessageBoxIcon icon);
    public static DialogResult Show(IWin32Window owner, string text, string caption, MessageBoxButtons buttons);
    public static DialogResult Show(IWin32Window owner, string text, string caption);
    public static DialogResult Show(IWin32Window owner, string text);
}
public enum System.Windows.Forms.MessageBoxButtons : Enum {
    public int value__;
    public static MessageBoxButtons OK;
    public static MessageBoxButtons OKCancel;
    public static MessageBoxButtons AbortRetryIgnore;
    public static MessageBoxButtons YesNoCancel;
    public static MessageBoxButtons YesNo;
    public static MessageBoxButtons RetryCancel;
}
public enum System.Windows.Forms.MessageBoxDefaultButton : Enum {
    public int value__;
    public static MessageBoxDefaultButton Button1;
    public static MessageBoxDefaultButton Button2;
    public static MessageBoxDefaultButton Button3;
}
public enum System.Windows.Forms.MessageBoxIcon : Enum {
    public int value__;
    public static MessageBoxIcon None;
    public static MessageBoxIcon Hand;
    public static MessageBoxIcon Question;
    public static MessageBoxIcon Exclamation;
    public static MessageBoxIcon Asterisk;
    public static MessageBoxIcon Stop;
    public static MessageBoxIcon Error;
    public static MessageBoxIcon Warning;
    public static MessageBoxIcon Information;
}
[FlagsAttribute]
public enum System.Windows.Forms.MessageBoxOptions : Enum {
    public int value__;
    public static MessageBoxOptions ServiceNotification;
    public static MessageBoxOptions DefaultDesktopOnly;
    public static MessageBoxOptions RightAlign;
    public static MessageBoxOptions RtlReading;
}
public class System.Windows.Forms.MethodInvoker : MulticastDelegate {
    public MethodInvoker(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("SelectionRange")]
[DefaultEventAttribute("DateChanged")]
[DefaultBindingPropertyAttribute("SelectionRange")]
[DesignerAttribute("System.Windows.Forms.Design.MonthCalendarDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionMonthCalendar")]
public class System.Windows.Forms.MonthCalendar : Control {
    [LocalizableAttribute("True")]
[SRDescriptionAttribute("MonthCalendarAnnuallyBoldedDatesDescr")]
public DateTime[] AnnuallyBoldedDates { get; public set; }
    [SRDescriptionAttribute("MonthCalendarMonthBackColorDescr")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [LocalizableAttribute("True")]
public DateTime[] BoldedDates { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("MonthCalendarDimensionsDescr")]
public Size CalendarDimensions { get; public set; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Padding DefaultMargin { get; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("MonthCalendarFirstDayOfWeekDescr")]
public Day FirstDayOfWeek { get; public set; }
    [SRDescriptionAttribute("MonthCalendarForeColorDescr")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MonthCalendarMaxDateDescr")]
public DateTime MaxDate { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("7")]
[SRDescriptionAttribute("MonthCalendarMaxSelectionCountDescr")]
public int MaxSelectionCount { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MonthCalendarMinDateDescr")]
public DateTime MinDate { get; public set; }
    [LocalizableAttribute("True")]
[SRDescriptionAttribute("MonthCalendarMonthlyBoldedDatesDescr")]
public DateTime[] MonthlyBoldedDates { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("MonthCalendarScrollChangeDescr")]
public int ScrollChange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("MonthCalendarSelectionEndDescr")]
public DateTime SelectionEnd { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("MonthCalendarSelectionStartDescr")]
public DateTime SelectionStart { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MonthCalendarSelectionRangeDescr")]
[BindableAttribute("True")]
public SelectionRange SelectionRange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("MonthCalendarShowTodayDescr")]
public bool ShowToday { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("MonthCalendarShowTodayCircleDescr")]
public bool ShowTodayCircle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("MonthCalendarShowWeekNumbersDescr")]
public bool ShowWeekNumbers { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("MonthCalendarSingleMonthSizeDescr")]
public Size SingleMonthSize { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[LocalizableAttribute("False")]
public Size Size { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("MonthCalendarTodayDateDescr")]
public DateTime TodayDate { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("MonthCalendarTodayDateSetDescr")]
public bool TodayDateSet { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("MonthCalendarTitleBackColorDescr")]
public Color TitleBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("MonthCalendarTitleForeColorDescr")]
public Color TitleForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("MonthCalendarTrailingForeColorDescr")]
public Color TrailingForeColor { get; public set; }
    private static MonthCalendar();
    public DateTime[] get_AnnuallyBoldedDates();
    public void set_AnnuallyBoldedDates(DateTime[] value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public DateTime[] get_BoldedDates();
    public void set_BoldedDates(DateTime[] value);
    public Size get_CalendarDimensions();
    public void set_CalendarDimensions(Size value);
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Padding get_DefaultMargin();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public Day get_FirstDayOfWeek();
    public void set_FirstDayOfWeek(Day value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public DateTime get_MaxDate();
    public void set_MaxDate(DateTime value);
    public int get_MaxSelectionCount();
    public void set_MaxSelectionCount(int value);
    public DateTime get_MinDate();
    public void set_MinDate(DateTime value);
    public DateTime[] get_MonthlyBoldedDates();
    public void set_MonthlyBoldedDates(DateTime[] value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public int get_ScrollChange();
    public void set_ScrollChange(int value);
    public DateTime get_SelectionEnd();
    public void set_SelectionEnd(DateTime value);
    public DateTime get_SelectionStart();
    public void set_SelectionStart(DateTime value);
    public SelectionRange get_SelectionRange();
    public void set_SelectionRange(SelectionRange value);
    public bool get_ShowToday();
    public void set_ShowToday(bool value);
    public bool get_ShowTodayCircle();
    public void set_ShowTodayCircle(bool value);
    public bool get_ShowWeekNumbers();
    public void set_ShowWeekNumbers(bool value);
    public Size get_SingleMonthSize();
    public Size get_Size();
    public void set_Size(Size value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public DateTime get_TodayDate();
    public void set_TodayDate(DateTime value);
    public bool get_TodayDateSet();
    public Color get_TitleBackColor();
    public void set_TitleBackColor(Color value);
    public Color get_TitleForeColor();
    public void set_TitleForeColor(Color value);
    public Color get_TrailingForeColor();
    public void set_TrailingForeColor(Color value);
    public void AddAnnuallyBoldedDate(DateTime date);
    public void AddBoldedDate(DateTime date);
    public void AddMonthlyBoldedDate(DateTime date);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_DateChanged(DateRangeEventHandler value);
    public void remove_DateChanged(DateRangeEventHandler value);
    public void add_DateSelected(DateRangeEventHandler value);
    public void remove_DateSelected(DateRangeEventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    protected virtual void CreateHandle();
    protected virtual void Dispose(bool disposing);
    public SelectionRange GetDisplayRange(bool visible);
    public HitTestInfo HitTest(int x, int y);
    public HitTestInfo HitTest(Point point);
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnDateChanged(DateRangeEventArgs drevent);
    protected virtual void OnDateSelected(DateRangeEventArgs drevent);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    public void RemoveAllAnnuallyBoldedDates();
    public void RemoveAllBoldedDates();
    public void RemoveAllMonthlyBoldedDates();
    public void RemoveAnnuallyBoldedDate(DateTime date);
    public void RemoveBoldedDate(DateTime date);
    public void RemoveMonthlyBoldedDate(DateTime date);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public void SetCalendarDimensions(int x, int y);
    public void SetDate(DateTime date);
    public void SetSelectionRange(DateTime date1, DateTime date2);
    public virtual string ToString();
    public void UpdateBoldedDates();
    protected virtual void WndProc(Message& m);
    [EditorBrowsableAttribute("2")]
protected virtual void DefWndProc(Message& m);
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.MouseButtons : Enum {
    public int value__;
    public static MouseButtons Left;
    public static MouseButtons None;
    public static MouseButtons Right;
    public static MouseButtons Middle;
    public static MouseButtons XButton1;
    public static MouseButtons XButton2;
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.MouseEventArgs : EventArgs {
    public MouseButtons Button { get; }
    public int Clicks { get; }
    public int X { get; }
    public int Y { get; }
    public int Delta { get; }
    public Point Location { get; }
    public MouseEventArgs(MouseButtons button, int clicks, int x, int y, int delta);
    public MouseButtons get_Button();
    public int get_Clicks();
    public int get_X();
    public int get_Y();
    public int get_Delta();
    public Point get_Location();
}
public class System.Windows.Forms.MouseEventHandler : MulticastDelegate {
    public MouseEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MouseEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MouseEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.NativeWindow : MarshalByRefObject {
    public IntPtr Handle { get; }
    private static NativeWindow();
    protected virtual override void Finalize();
    public sealed virtual IntPtr get_Handle();
    public void AssignHandle(IntPtr handle);
    public virtual void CreateHandle(CreateParams cp);
    public void DefWndProc(Message& m);
    public virtual void DestroyHandle();
    public static NativeWindow FromHandle(IntPtr handle);
    protected virtual void OnHandleChange();
    protected virtual void OnThreadException(Exception e);
    public virtual void ReleaseHandle();
    protected virtual void WndProc(Message& m);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.NavigateEventArgs : EventArgs {
    public bool Forward { get; }
    public NavigateEventArgs(bool isForward);
    public bool get_Forward();
}
public class System.Windows.Forms.NavigateEventHandler : MulticastDelegate {
    public NavigateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NavigateEventArgs ne);
    public virtual IAsyncResult BeginInvoke(object sender, NavigateEventArgs ne, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.NodeLabelEditEventArgs : EventArgs {
    public bool CancelEdit { get; public set; }
    public string Label { get; }
    public TreeNode Node { get; }
    public NodeLabelEditEventArgs(TreeNode node);
    public NodeLabelEditEventArgs(TreeNode node, string label);
    public bool get_CancelEdit();
    public void set_CancelEdit(bool value);
    public string get_Label();
    public TreeNode get_Node();
}
public class System.Windows.Forms.NodeLabelEditEventHandler : MulticastDelegate {
    public NodeLabelEditEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, NodeLabelEditEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, NodeLabelEditEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Windows.Forms.NoneExcludedImageIndexConverter : ImageIndexConverter {
    protected bool IncludeNoneAsStandardValue { get; }
    protected virtual bool get_IncludeNoneAsStandardValue();
}
[DefaultPropertyAttribute("Text")]
[DefaultEventAttribute("MouseDoubleClick")]
[DesignerAttribute("System.Windows.Forms.Design.NotifyIconDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[SRDescriptionAttribute("DescriptionNotifyIcon")]
public class System.Windows.Forms.NotifyIcon : Component {
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("NotifyIconBalloonTipTextDescr")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string BalloonTipText { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("NotifyIconBalloonTipIconDescr")]
public ToolTipIcon BalloonTipIcon { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("NotifyIconBalloonTipTitleDescr")]
public string BalloonTipTitle { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("NotifyIconMenuDescr")]
public ContextMenu ContextMenu { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("NotifyIconMenuDescr")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("NotifyIconIconDescr")]
public Icon Icon { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("NotifyIconTextDescr")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("NotifyIconVisDescr")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    public NotifyIcon(IContainer container);
    private static NotifyIcon();
    public string get_BalloonTipText();
    public void set_BalloonTipText(string value);
    public ToolTipIcon get_BalloonTipIcon();
    public void set_BalloonTipIcon(ToolTipIcon value);
    public string get_BalloonTipTitle();
    public void set_BalloonTipTitle(string value);
    public void add_BalloonTipClicked(EventHandler value);
    public void remove_BalloonTipClicked(EventHandler value);
    public void add_BalloonTipClosed(EventHandler value);
    public void remove_BalloonTipClosed(EventHandler value);
    public void add_BalloonTipShown(EventHandler value);
    public void remove_BalloonTipShown(EventHandler value);
    public ContextMenu get_ContextMenu();
    public void set_ContextMenu(ContextMenu value);
    public ContextMenuStrip get_ContextMenuStrip();
    public void set_ContextMenuStrip(ContextMenuStrip value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    public string get_Text();
    public void set_Text(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public object get_Tag();
    public void set_Tag(object value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    protected virtual void Dispose(bool disposing);
    public void ShowBalloonTip(int timeout);
    public void ShowBalloonTip(int timeout, string tipTitle, string tipText, ToolTipIcon tipIcon);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Value")]
[DefaultEventAttribute("ValueChanged")]
[DefaultBindingPropertyAttribute("Value")]
[SRDescriptionAttribute("DescriptionNumericUpDown")]
public class System.Windows.Forms.NumericUpDown : UpDownBase {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public NumericUpDownAccelerationCollection Accelerations { get; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("NumericUpDownDecimalPlacesDescr")]
public int DecimalPlaces { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("NumericUpDownHexadecimalDescr")]
public bool Hexadecimal { get; public set; }
    [SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("NumericUpDownIncrementDescr")]
public decimal Increment { get; public set; }
    [SRCategoryAttribute("CatData")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("NumericUpDownMaximumDescr")]
public decimal Maximum { get; public set; }
    [SRCategoryAttribute("CatData")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("NumericUpDownMinimumDescr")]
public decimal Minimum { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("NumericUpDownThousandsSeparatorDescr")]
public bool ThousandsSeparator { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BindableAttribute("True")]
[SRDescriptionAttribute("NumericUpDownValueDescr")]
public decimal Value { get; public set; }
    private static NumericUpDown();
    public NumericUpDownAccelerationCollection get_Accelerations();
    public int get_DecimalPlaces();
    public void set_DecimalPlaces(int value);
    public bool get_Hexadecimal();
    public void set_Hexadecimal(bool value);
    public decimal get_Increment();
    public void set_Increment(decimal value);
    public decimal get_Maximum();
    public void set_Maximum(decimal value);
    public decimal get_Minimum();
    public void set_Minimum(decimal value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public bool get_ThousandsSeparator();
    public void set_ThousandsSeparator(bool value);
    public decimal get_Value();
    public void set_Value(decimal value);
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    public sealed virtual void BeginInit();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    public virtual void DownButton();
    public sealed virtual void EndInit();
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnTextBoxKeyPress(object source, KeyPressEventArgs e);
    protected virtual void OnValueChanged(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected void ParseEditText();
    public virtual string ToString();
    public virtual void UpButton();
    protected virtual void UpdateEditText();
    protected virtual void ValidateEditText();
}
public class System.Windows.Forms.NumericUpDownAcceleration : object {
    public int Seconds { get; public set; }
    public decimal Increment { get; public set; }
    public NumericUpDownAcceleration(int seconds, decimal increment);
    public int get_Seconds();
    public void set_Seconds(int value);
    public decimal get_Increment();
    public void set_Increment(decimal value);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.NumericUpDownAccelerationCollection : MarshalByRefObject {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public NumericUpDownAcceleration Item { get; }
    public sealed virtual void Add(NumericUpDownAcceleration acceleration);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(NumericUpDownAcceleration acceleration);
    public sealed virtual void CopyTo(NumericUpDownAcceleration[] array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(NumericUpDownAcceleration acceleration);
    private sealed virtual override IEnumerator`1<NumericUpDownAcceleration> System.Collections.Generic.IEnumerable<System.Windows.Forms.NumericUpDownAcceleration>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void AddRange(NumericUpDownAcceleration[] accelerations);
    public NumericUpDownAcceleration get_Item(int index);
}
public class System.Windows.Forms.OpacityConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[SRDescriptionAttribute("DescriptionOpenFileDialog")]
public class System.Windows.Forms.OpenFileDialog : FileDialog {
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("OFDcheckFileExistsDescr")]
public bool CheckFileExists { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("OFDmultiSelectDescr")]
public bool Multiselect { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("OFDreadOnlyCheckedDescr")]
public bool ReadOnlyChecked { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("OFDshowReadOnlyDescr")]
public bool ShowReadOnly { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string SafeFileName { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public String[] SafeFileNames { get; }
    public virtual bool get_CheckFileExists();
    public virtual void set_CheckFileExists(bool value);
    public bool get_Multiselect();
    public void set_Multiselect(bool value);
    public bool get_ReadOnlyChecked();
    public void set_ReadOnlyChecked(bool value);
    public bool get_ShowReadOnly();
    public void set_ShowReadOnly(bool value);
    public Stream OpenFile();
    public virtual void Reset();
    public string get_SafeFileName();
    public String[] get_SafeFileNames();
}
public enum System.Windows.Forms.Orientation : Enum {
    public int value__;
    public static Orientation Horizontal;
    public static Orientation Vertical;
}
public class System.Windows.Forms.OSFeature : FeatureSupport {
    public static object LayeredWindows;
    public static object Themes;
    public static OSFeature Feature { get; }
    private static OSFeature();
    public static OSFeature get_Feature();
    public virtual Version GetVersionPresent(object feature);
    public static bool IsPresent(SystemParameter enumVal);
}
public class System.Windows.Forms.OwnerDrawPropertyBag : MarshalByRefObject {
    public Font Font { get; public set; }
    public Color ForeColor { get; public set; }
    public Color BackColor { get; public set; }
    protected OwnerDrawPropertyBag(SerializationInfo info, StreamingContext context);
    private static OwnerDrawPropertyBag();
    public Font get_Font();
    public void set_Font(Font value);
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public virtual bool IsEmpty();
    public static OwnerDrawPropertyBag Copy(OwnerDrawPropertyBag value);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
}
[TypeConverterAttribute("System.Windows.Forms.PaddingConverter")]
public class System.Windows.Forms.Padding : ValueType {
    private bool _all;
    private int _top;
    private int _left;
    private int _right;
    private int _bottom;
    public static Padding Empty;
    [RefreshPropertiesAttribute("1")]
public int All { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Bottom { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Left { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Right { get; public set; }
    [RefreshPropertiesAttribute("1")]
public int Top { get; public set; }
    [BrowsableAttribute("False")]
public int Horizontal { get; }
    [BrowsableAttribute("False")]
public int Vertical { get; }
    [BrowsableAttribute("False")]
public Size Size { get; }
    public Padding(int all);
    public Padding(int left, int top, int right, int bottom);
    private static Padding();
    public int get_All();
    public void set_All(int value);
    public int get_Bottom();
    public void set_Bottom(int value);
    public int get_Left();
    public void set_Left(int value);
    public int get_Right();
    public void set_Right(int value);
    public int get_Top();
    public void set_Top(int value);
    public int get_Horizontal();
    public int get_Vertical();
    public Size get_Size();
    public static Padding Add(Padding p1, Padding p2);
    public static Padding Subtract(Padding p1, Padding p2);
    public virtual bool Equals(object other);
    public static Padding op_Addition(Padding p1, Padding p2);
    public static Padding op_Subtraction(Padding p1, Padding p2);
    public static bool op_Equality(Padding p1, Padding p2);
    public static bool op_Inequality(Padding p1, Padding p2);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Windows.Forms.PaddingConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[DefaultPropertyAttribute("Document")]
[SRDescriptionAttribute("DescriptionPageSetupDialog")]
public class System.Windows.Forms.PageSetupDialog : CommonDialog {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PSDallowMarginsDescr")]
public bool AllowMargins { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PSDallowOrientationDescr")]
public bool AllowOrientation { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PSDallowPaperDescr")]
public bool AllowPaper { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PSDallowPrinterDescr")]
public bool AllowPrinter { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("PDdocumentDescr")]
public PrintDocument Document { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("PSDenableMetricDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public bool EnableMetric { get; public set; }
    [SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("PSDminMarginsDescr")]
public Margins MinMargins { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("PSDpageSettingsDescr")]
public PageSettings PageSettings { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("PSDprinterSettingsDescr")]
public PrinterSettings PrinterSettings { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PSDshowHelpDescr")]
public bool ShowHelp { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PSDshowNetworkDescr")]
public bool ShowNetwork { get; public set; }
    public bool get_AllowMargins();
    public void set_AllowMargins(bool value);
    public bool get_AllowOrientation();
    public void set_AllowOrientation(bool value);
    public bool get_AllowPaper();
    public void set_AllowPaper(bool value);
    public bool get_AllowPrinter();
    public void set_AllowPrinter(bool value);
    public PrintDocument get_Document();
    public void set_Document(PrintDocument value);
    public bool get_EnableMetric();
    public void set_EnableMetric(bool value);
    public Margins get_MinMargins();
    public void set_MinMargins(Margins value);
    public PageSettings get_PageSettings();
    public void set_PageSettings(PageSettings value);
    public PrinterSettings get_PrinterSettings();
    public void set_PrinterSettings(PrinterSettings value);
    public bool get_ShowHelp();
    public void set_ShowHelp(bool value);
    public bool get_ShowNetwork();
    public void set_ShowNetwork(bool value);
    public virtual void Reset();
    protected virtual bool RunDialog(IntPtr hwndOwner);
}
public class System.Windows.Forms.PaintEventArgs : EventArgs {
    public Rectangle ClipRectangle { get; }
    public Graphics Graphics { get; }
    public PaintEventArgs(Graphics graphics, Rectangle clipRect);
    protected virtual override void Finalize();
    public Rectangle get_ClipRectangle();
    public Graphics get_Graphics();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
public class System.Windows.Forms.PaintEventHandler : MulticastDelegate {
    public PaintEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PaintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PaintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("BorderStyle")]
[DefaultEventAttribute("Paint")]
[DockingAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.PanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionPanel")]
public class System.Windows.Forms.Panel : ScrollableControl {
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRDescriptionAttribute("ControlAutoSizeModeDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("PanelBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [DefaultValueAttribute("False")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual AutoSizeMode get_AutoSizeMode();
    public virtual void set_AutoSizeMode(AutoSizeMode value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    protected virtual void OnResize(EventArgs eventargs);
    public virtual string ToString();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Image")]
[DefaultBindingPropertyAttribute("Image")]
[DockingAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.PictureBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionPictureBox")]
public class System.Windows.Forms.PictureBox : Control {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AllowDrop { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("PictureBoxBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool CausesValidation { get; public set; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatAsynchronous")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("PictureBoxErrorImageDescr")]
public Image ErrorImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[BindableAttribute("True")]
[SRDescriptionAttribute("PictureBoxImageDescr")]
public Image Image { get; public set; }
    [SRCategoryAttribute("CatAsynchronous")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("PictureBoxImageLocationDescr")]
public string ImageLocation { get; public set; }
    [SRCategoryAttribute("CatAsynchronous")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("PictureBoxInitialImageDescr")]
public Image InitialImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public RightToLeft RightToLeft { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("PictureBoxSizeModeDescr")]
[RefreshPropertiesAttribute("2")]
public PictureBoxSizeMode SizeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public int TabIndex { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAsynchronous")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PictureBoxWaitOnLoadDescr")]
public bool WaitOnLoad { get; public set; }
    private static PictureBox();
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    [SRCategoryAttribute("CatAsynchronous")]
[SRDescriptionAttribute("PictureBoxCancelAsyncDescr")]
public void CancelAsync();
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Size get_DefaultSize();
    public Image get_ErrorImage();
    public void set_ErrorImage(Image value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public Image get_Image();
    public void set_Image(Image value);
    public string get_ImageLocation();
    public void set_ImageLocation(string value);
    public Image get_InitialImage();
    public void set_InitialImage(Image value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    [SRCategoryAttribute("CatAsynchronous")]
[SRDescriptionAttribute("PictureBoxLoad0Descr")]
public void Load();
    [SRCategoryAttribute("CatAsynchronous")]
[SRDescriptionAttribute("PictureBoxLoad1Descr")]
public void Load(string url);
    [SRCategoryAttribute("CatAsynchronous")]
[SRDescriptionAttribute("PictureBoxLoadAsync0Descr")]
public void LoadAsync();
    [SRCategoryAttribute("CatAsynchronous")]
[SRDescriptionAttribute("PictureBoxLoadAsync1Descr")]
public void LoadAsync(string url);
    public void add_LoadCompleted(AsyncCompletedEventHandler value);
    public void remove_LoadCompleted(AsyncCompletedEventHandler value);
    public void add_LoadProgressChanged(ProgressChangedEventHandler value);
    public void remove_LoadProgressChanged(ProgressChangedEventHandler value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    public PictureBoxSizeMode get_SizeMode();
    public void set_SizeMode(PictureBoxSizeMode value);
    public void add_SizeModeChanged(EventHandler value);
    public void remove_SizeModeChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnEnabledChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnHandleDestroyed(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnLoadCompleted(AsyncCompletedEventArgs e);
    protected virtual void OnLoadProgressChanged(ProgressChangedEventArgs e);
    protected virtual void OnPaint(PaintEventArgs pe);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnSizeModeChanged(EventArgs e);
    public virtual string ToString();
    public bool get_WaitOnLoad();
    public void set_WaitOnLoad(bool value);
    private sealed virtual override void System.ComponentModel.ISupportInitialize.BeginInit();
    private sealed virtual override void System.ComponentModel.ISupportInitialize.EndInit();
}
public enum System.Windows.Forms.PictureBoxSizeMode : Enum {
    public int value__;
    public static PictureBoxSizeMode Normal;
    public static PictureBoxSizeMode StretchImage;
    public static PictureBoxSizeMode AutoSize;
    public static PictureBoxSizeMode CenterImage;
    public static PictureBoxSizeMode Zoom;
}
public class System.Windows.Forms.PopupEventArgs : CancelEventArgs {
    public IWin32Window AssociatedWindow { get; }
    public Control AssociatedControl { get; }
    public bool IsBalloon { get; }
    public Size ToolTipSize { get; public set; }
    public PopupEventArgs(IWin32Window associatedWindow, Control associatedControl, bool isBalloon, Size size);
    public IWin32Window get_AssociatedWindow();
    public Control get_AssociatedControl();
    public bool get_IsBalloon();
    public Size get_ToolTipSize();
    public void set_ToolTipSize(Size value);
}
public class System.Windows.Forms.PopupEventHandler : MulticastDelegate {
    public PopupEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PopupEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PopupEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.PowerLineStatus : Enum {
    public int value__;
    public static PowerLineStatus Offline;
    public static PowerLineStatus Online;
    public static PowerLineStatus Unknown;
}
public enum System.Windows.Forms.PowerState : Enum {
    public int value__;
    public static PowerState Suspend;
    public static PowerState Hibernate;
}
public class System.Windows.Forms.PowerStatus : object {
    public PowerLineStatus PowerLineStatus { get; }
    public BatteryChargeStatus BatteryChargeStatus { get; }
    public int BatteryFullLifetime { get; }
    public float BatteryLifePercent { get; }
    public int BatteryLifeRemaining { get; }
    public PowerLineStatus get_PowerLineStatus();
    public BatteryChargeStatus get_BatteryChargeStatus();
    public int get_BatteryFullLifetime();
    public float get_BatteryLifePercent();
    public int get_BatteryLifeRemaining();
}
public enum System.Windows.Forms.PreProcessControlState : Enum {
    public int value__;
    public static PreProcessControlState MessageProcessed;
    public static PreProcessControlState MessageNeeded;
    public static PreProcessControlState MessageNotNeeded;
}
public class System.Windows.Forms.PreviewKeyDownEventArgs : EventArgs {
    public bool Alt { get; }
    public bool Control { get; }
    public Keys KeyCode { get; }
    public int KeyValue { get; }
    public Keys KeyData { get; }
    public Keys Modifiers { get; }
    public bool Shift { get; }
    public bool IsInputKey { get; public set; }
    public PreviewKeyDownEventArgs(Keys keyData);
    public bool get_Alt();
    public bool get_Control();
    public Keys get_KeyCode();
    public int get_KeyValue();
    public Keys get_KeyData();
    public Keys get_Modifiers();
    public bool get_Shift();
    public bool get_IsInputKey();
    public void set_IsInputKey(bool value);
}
public class System.Windows.Forms.PreviewKeyDownEventHandler : MulticastDelegate {
    public PreviewKeyDownEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PreviewKeyDownEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PreviewKeyDownEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.PrintControllerWithStatusDialog : PrintController {
    public bool IsPreview { get; }
    public PrintControllerWithStatusDialog(PrintController underlyingController);
    public PrintControllerWithStatusDialog(PrintController underlyingController, string dialogTitle);
    public virtual bool get_IsPreview();
    public virtual void OnStartPrint(PrintDocument document, PrintEventArgs e);
    public virtual Graphics OnStartPage(PrintDocument document, PrintPageEventArgs e);
    public virtual void OnEndPage(PrintDocument document, PrintPageEventArgs e);
    public virtual void OnEndPrint(PrintDocument document, PrintEventArgs e);
}
[DefaultPropertyAttribute("Document")]
[SRDescriptionAttribute("DescriptionPrintDialog")]
[DesignerAttribute("System.Windows.Forms.Design.PrintDialogDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.PrintDialog : CommonDialog {
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDallowCurrentPageDescr")]
public bool AllowCurrentPage { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDallowPagesDescr")]
public bool AllowSomePages { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PDallowPrintToFileDescr")]
public bool AllowPrintToFile { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDallowSelectionDescr")]
public bool AllowSelection { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("PDdocumentDescr")]
public PrintDocument Document { get; public set; }
    [SRCategoryAttribute("CatData")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("PDprinterSettingsDescr")]
public PrinterSettings PrinterSettings { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDprintToFileDescr")]
public bool PrintToFile { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDshowHelpDescr")]
public bool ShowHelp { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PDshowNetworkDescr")]
public bool ShowNetwork { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("PDuseEXDialog")]
public bool UseEXDialog { get; public set; }
    public bool get_AllowCurrentPage();
    public void set_AllowCurrentPage(bool value);
    public bool get_AllowSomePages();
    public void set_AllowSomePages(bool value);
    public bool get_AllowPrintToFile();
    public void set_AllowPrintToFile(bool value);
    public bool get_AllowSelection();
    public void set_AllowSelection(bool value);
    public PrintDocument get_Document();
    public void set_Document(PrintDocument value);
    public PrinterSettings get_PrinterSettings();
    public void set_PrinterSettings(PrinterSettings value);
    public bool get_PrintToFile();
    public void set_PrintToFile(bool value);
    public bool get_ShowHelp();
    public void set_ShowHelp(bool value);
    public bool get_ShowNetwork();
    public void set_ShowNetwork(bool value);
    public bool get_UseEXDialog();
    public void set_UseEXDialog(bool value);
    public virtual void Reset();
    protected virtual bool RunDialog(IntPtr hwndOwner);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Document")]
[SRDescriptionAttribute("DescriptionPrintPreviewControl")]
public class System.Windows.Forms.PrintPreviewControl : Control {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PrintPreviewAntiAliasDescr")]
public bool UseAntiAlias { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PrintPreviewAutoZoomDescr")]
public bool AutoZoom { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("PrintPreviewDocumentDescr")]
public PrintDocument Document { get; public set; }
    [DefaultValueAttribute("1")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("PrintPreviewColumnsDescr")]
public int Columns { get; public set; }
    protected CreateParams CreateParams { get; }
    [DefaultValueAttribute("1")]
[SRDescriptionAttribute("PrintPreviewRowsDescr")]
[SRCategoryAttribute("CatBehavior")]
public int Rows { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlRightToLeftDescr")]
public RightToLeft RightToLeft { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [DefaultValueAttribute("0")]
[SRDescriptionAttribute("PrintPreviewStartPageDescr")]
[SRCategoryAttribute("CatBehavior")]
public int StartPage { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("PrintPreviewZoomDescr")]
[DefaultValueAttribute("0,3")]
public double Zoom { get; public set; }
    private static PrintPreviewControl();
    public bool get_UseAntiAlias();
    public void set_UseAntiAlias(bool value);
    public bool get_AutoZoom();
    public void set_AutoZoom(bool value);
    public PrintDocument get_Document();
    public void set_Document(PrintDocument value);
    public int get_Columns();
    public void set_Columns(int value);
    protected virtual CreateParams get_CreateParams();
    public int get_Rows();
    public void set_Rows(int value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public int get_StartPage();
    public void set_StartPage(int value);
    public void add_StartPageChanged(EventHandler value);
    public void remove_StartPageChanged(EventHandler value);
    public double get_Zoom();
    public void set_Zoom(double value);
    public void InvalidatePreview();
    protected virtual void OnResize(EventArgs eventargs);
    protected virtual void OnPaint(PaintEventArgs pevent);
    protected virtual void OnStartPageChanged(EventArgs e);
    [EditorBrowsableAttribute("1")]
public virtual void ResetBackColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetForeColor();
    protected virtual void WndProc(Message& m);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.ComponentModel.Design.ComponentDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignTimeVisibleAttribute("True")]
[DefaultPropertyAttribute("Document")]
[ToolboxItemFilterAttribute("System.Windows.Forms.Control.TopLevel")]
[ToolboxItemAttribute("True")]
[SRDescriptionAttribute("DescriptionPrintPreviewDialog")]
public class System.Windows.Forms.PrintPreviewDialog : Form {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public IButtonControl AcceptButton { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoScale { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public AutoValidate AutoValidate { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public IButtonControl CancelButton { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool ControlBox { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FormBorderStyle FormBorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool HelpButton { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Icon Icon { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool IsMdiContainer { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool KeyPreview { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size MaximumSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool MaximizeBox { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Padding Margin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public MainMenu Menu { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public Size MinimumSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size Size { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FormStartPosition StartPosition { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TopMost { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color TransparencyKey { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool UseWaitCursor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public FormWindowState WindowState { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public AccessibleRole AccessibleRole { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string AccessibleDescription { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string AccessibleName { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool CausesValidation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ControlBindingsCollection DataBindings { get; }
    protected Size DefaultMinimumSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Point Location { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public object Tag { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AllowDrop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Cursor Cursor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size AutoScrollMinSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public AnchorStyles Anchor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public RightToLeft RightToLeft { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool RightToLeftLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DockStyle Dock { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContextMenu ContextMenu { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DockPaddingEdges DockPadding { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("PrintPreviewAntiAliasDescr")]
public bool UseAntiAlias { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This property has been deprecated. Use the AutoScaleDimensions property instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public Size AutoScaleBaseSize { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("PrintPreviewDocumentDescr")]
public PrintDocument Document { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool MinimizeBox { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("PrintPreviewPrintPreviewControlDescr")]
[BrowsableAttribute("False")]
public PrintPreviewControl PrintPreviewControl { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public double Opacity { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool ShowInTaskbar { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[EditorBrowsableAttribute("1")]
public SizeGripStyle SizeGripStyle { get; public set; }
    public IButtonControl get_AcceptButton();
    public void set_AcceptButton(IButtonControl value);
    public bool get_AutoScale();
    public void set_AutoScale(bool value);
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual AutoValidate get_AutoValidate();
    public virtual void set_AutoValidate(AutoValidate value);
    public void add_AutoValidateChanged(EventHandler value);
    public void remove_AutoValidateChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public IButtonControl get_CancelButton();
    public void set_CancelButton(IButtonControl value);
    public bool get_ControlBox();
    public void set_ControlBox(bool value);
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public void add_ContextMenuStripChanged(EventHandler value);
    public void remove_ContextMenuStripChanged(EventHandler value);
    public FormBorderStyle get_FormBorderStyle();
    public void set_FormBorderStyle(FormBorderStyle value);
    public bool get_HelpButton();
    public void set_HelpButton(bool value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    public bool get_IsMdiContainer();
    public void set_IsMdiContainer(bool value);
    public bool get_KeyPreview();
    public void set_KeyPreview(bool value);
    public Size get_MaximumSize();
    public void set_MaximumSize(Size value);
    public void add_MaximumSizeChanged(EventHandler value);
    public void remove_MaximumSizeChanged(EventHandler value);
    public bool get_MaximizeBox();
    public void set_MaximizeBox(bool value);
    public Padding get_Margin();
    public void set_Margin(Padding value);
    public void add_MarginChanged(EventHandler value);
    public void remove_MarginChanged(EventHandler value);
    public MainMenu get_Menu();
    public void set_Menu(MainMenu value);
    public Size get_MinimumSize();
    public void set_MinimumSize(Size value);
    public void add_MinimumSizeChanged(EventHandler value);
    public void remove_MinimumSizeChanged(EventHandler value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public Size get_Size();
    public void set_Size(Size value);
    public void add_SizeChanged(EventHandler value);
    public void remove_SizeChanged(EventHandler value);
    public FormStartPosition get_StartPosition();
    public void set_StartPosition(FormStartPosition value);
    public bool get_TopMost();
    public void set_TopMost(bool value);
    public Color get_TransparencyKey();
    public void set_TransparencyKey(Color value);
    public bool get_UseWaitCursor();
    public void set_UseWaitCursor(bool value);
    public FormWindowState get_WindowState();
    public void set_WindowState(FormWindowState value);
    public AccessibleRole get_AccessibleRole();
    public void set_AccessibleRole(AccessibleRole value);
    public string get_AccessibleDescription();
    public void set_AccessibleDescription(string value);
    public string get_AccessibleName();
    public void set_AccessibleName(string value);
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    public ControlBindingsCollection get_DataBindings();
    protected virtual Size get_DefaultMinimumSize();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public Point get_Location();
    public void set_Location(Point value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public object get_Tag();
    public void set_Tag(object value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual Cursor get_Cursor();
    public virtual void set_Cursor(Cursor value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public void add_VisibleChanged(EventHandler value);
    public void remove_VisibleChanged(EventHandler value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public virtual ContextMenu get_ContextMenu();
    public virtual void set_ContextMenu(ContextMenu value);
    public void add_ContextMenuChanged(EventHandler value);
    public void remove_ContextMenuChanged(EventHandler value);
    public DockPaddingEdges get_DockPadding();
    public bool get_UseAntiAlias();
    public void set_UseAntiAlias(bool value);
    public virtual Size get_AutoScaleBaseSize();
    public virtual void set_AutoScaleBaseSize(Size value);
    public PrintDocument get_Document();
    public void set_Document(PrintDocument value);
    public bool get_MinimizeBox();
    public void set_MinimizeBox(bool value);
    public PrintPreviewControl get_PrintPreviewControl();
    public double get_Opacity();
    public void set_Opacity(double value);
    public bool get_ShowInTaskbar();
    public void set_ShowInTaskbar(bool value);
    public SizeGripStyle get_SizeGripStyle();
    public void set_SizeGripStyle(SizeGripStyle value);
    protected virtual void OnClosing(CancelEventArgs e);
    protected virtual void CreateHandle();
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual bool ProcessTabKey(bool forward);
}
public class System.Windows.Forms.ProfessionalColors : object {
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedHighlightDescr")]
public static Color ButtonSelectedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedHighlightBorderDescr")]
public static Color ButtonSelectedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedHighlightDescr")]
public static Color ButtonPressedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedHighlightBorderDescr")]
public static Color ButtonPressedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedHighlightDescr")]
public static Color ButtonCheckedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedHighlightBorderDescr")]
public static Color ButtonCheckedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedBorderDescr")]
public static Color ButtonPressedBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedBorderDescr")]
public static Color ButtonSelectedBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientBeginDescr")]
public static Color ButtonCheckedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientMiddleDescr")]
public static Color ButtonCheckedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientEndDescr")]
public static Color ButtonCheckedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientBeginDescr")]
public static Color ButtonSelectedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientMiddleDescr")]
public static Color ButtonSelectedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientEndDescr")]
public static Color ButtonSelectedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientBeginDescr")]
public static Color ButtonPressedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientMiddleDescr")]
public static Color ButtonPressedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientEndDescr")]
public static Color ButtonPressedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckBackgroundDescr")]
public static Color CheckBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckSelectedBackgroundDescr")]
public static Color CheckSelectedBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckPressedBackgroundDescr")]
public static Color CheckPressedBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsGripDarkDescr")]
public static Color GripDark { get; }
    [SRDescriptionAttribute("ProfessionalColorsGripLightDescr")]
public static Color GripLight { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientBeginDescr")]
public static Color ImageMarginGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientMiddleDescr")]
public static Color ImageMarginGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientEndDescr")]
public static Color ImageMarginGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientBeginDescr")]
public static Color ImageMarginRevealedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientMiddleDescr")]
public static Color ImageMarginRevealedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientEndDescr")]
public static Color ImageMarginRevealedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuStripGradientBeginDescr")]
public static Color MenuStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuStripGradientEndDescr")]
public static Color MenuStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuBorderDescr")]
public static Color MenuBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedDescr")]
public static Color MenuItemSelected { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemBorderDescr")]
public static Color MenuItemBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedGradientBeginDescr")]
public static Color MenuItemSelectedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedGradientEndDescr")]
public static Color MenuItemSelectedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientBeginDescr")]
public static Color MenuItemPressedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientMiddleDescr")]
public static Color MenuItemPressedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientEndDescr")]
public static Color MenuItemPressedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsRaftingContainerGradientBeginDescr")]
public static Color RaftingContainerGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsRaftingContainerGradientEndDescr")]
public static Color RaftingContainerGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsSeparatorDarkDescr")]
public static Color SeparatorDark { get; }
    [SRDescriptionAttribute("ProfessionalColorsSeparatorLightDescr")]
public static Color SeparatorLight { get; }
    [SRDescriptionAttribute("ProfessionalColorsStatusStripGradientBeginDescr")]
public static Color StatusStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsStatusStripGradientEndDescr")]
public static Color StatusStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripBorderDescr")]
public static Color ToolStripBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripDropDownBackgroundDescr")]
public static Color ToolStripDropDownBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientBeginDescr")]
public static Color ToolStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientMiddleDescr")]
public static Color ToolStripGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientEndDescr")]
public static Color ToolStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripContentPanelGradientBeginDescr")]
public static Color ToolStripContentPanelGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripContentPanelGradientEndDescr")]
public static Color ToolStripContentPanelGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripPanelGradientBeginDescr")]
public static Color ToolStripPanelGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripPanelGradientEndDescr")]
public static Color ToolStripPanelGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientBeginDescr")]
public static Color OverflowButtonGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientMiddleDescr")]
public static Color OverflowButtonGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientEndDescr")]
public static Color OverflowButtonGradientEnd { get; }
    private static ProfessionalColors();
    public static Color get_ButtonSelectedHighlight();
    public static Color get_ButtonSelectedHighlightBorder();
    public static Color get_ButtonPressedHighlight();
    public static Color get_ButtonPressedHighlightBorder();
    public static Color get_ButtonCheckedHighlight();
    public static Color get_ButtonCheckedHighlightBorder();
    public static Color get_ButtonPressedBorder();
    public static Color get_ButtonSelectedBorder();
    public static Color get_ButtonCheckedGradientBegin();
    public static Color get_ButtonCheckedGradientMiddle();
    public static Color get_ButtonCheckedGradientEnd();
    public static Color get_ButtonSelectedGradientBegin();
    public static Color get_ButtonSelectedGradientMiddle();
    public static Color get_ButtonSelectedGradientEnd();
    public static Color get_ButtonPressedGradientBegin();
    public static Color get_ButtonPressedGradientMiddle();
    public static Color get_ButtonPressedGradientEnd();
    public static Color get_CheckBackground();
    public static Color get_CheckSelectedBackground();
    public static Color get_CheckPressedBackground();
    public static Color get_GripDark();
    public static Color get_GripLight();
    public static Color get_ImageMarginGradientBegin();
    public static Color get_ImageMarginGradientMiddle();
    public static Color get_ImageMarginGradientEnd();
    public static Color get_ImageMarginRevealedGradientBegin();
    public static Color get_ImageMarginRevealedGradientMiddle();
    public static Color get_ImageMarginRevealedGradientEnd();
    public static Color get_MenuStripGradientBegin();
    public static Color get_MenuStripGradientEnd();
    public static Color get_MenuBorder();
    public static Color get_MenuItemSelected();
    public static Color get_MenuItemBorder();
    public static Color get_MenuItemSelectedGradientBegin();
    public static Color get_MenuItemSelectedGradientEnd();
    public static Color get_MenuItemPressedGradientBegin();
    public static Color get_MenuItemPressedGradientMiddle();
    public static Color get_MenuItemPressedGradientEnd();
    public static Color get_RaftingContainerGradientBegin();
    public static Color get_RaftingContainerGradientEnd();
    public static Color get_SeparatorDark();
    public static Color get_SeparatorLight();
    public static Color get_StatusStripGradientBegin();
    public static Color get_StatusStripGradientEnd();
    public static Color get_ToolStripBorder();
    public static Color get_ToolStripDropDownBackground();
    public static Color get_ToolStripGradientBegin();
    public static Color get_ToolStripGradientMiddle();
    public static Color get_ToolStripGradientEnd();
    public static Color get_ToolStripContentPanelGradientBegin();
    public static Color get_ToolStripContentPanelGradientEnd();
    public static Color get_ToolStripPanelGradientBegin();
    public static Color get_ToolStripPanelGradientEnd();
    public static Color get_OverflowButtonGradientBegin();
    public static Color get_OverflowButtonGradientMiddle();
    public static Color get_OverflowButtonGradientEnd();
}
public class System.Windows.Forms.ProfessionalColorTable : object {
    public bool UseSystemColors { get; public set; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedHighlightDescr")]
public Color ButtonSelectedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedHighlightBorderDescr")]
public Color ButtonSelectedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedHighlightDescr")]
public Color ButtonPressedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedHighlightBorderDescr")]
public Color ButtonPressedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedHighlightDescr")]
public Color ButtonCheckedHighlight { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedHighlightBorderDescr")]
public Color ButtonCheckedHighlightBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedBorderDescr")]
public Color ButtonPressedBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedBorderDescr")]
public Color ButtonSelectedBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientBeginDescr")]
public Color ButtonCheckedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientMiddleDescr")]
public Color ButtonCheckedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonCheckedGradientEndDescr")]
public Color ButtonCheckedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientBeginDescr")]
public Color ButtonSelectedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientMiddleDescr")]
public Color ButtonSelectedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonSelectedGradientEndDescr")]
public Color ButtonSelectedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientBeginDescr")]
public Color ButtonPressedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientMiddleDescr")]
public Color ButtonPressedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsButtonPressedGradientEndDescr")]
public Color ButtonPressedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckBackgroundDescr")]
public Color CheckBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckSelectedBackgroundDescr")]
public Color CheckSelectedBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsCheckPressedBackgroundDescr")]
public Color CheckPressedBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsGripDarkDescr")]
public Color GripDark { get; }
    [SRDescriptionAttribute("ProfessionalColorsGripLightDescr")]
public Color GripLight { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientBeginDescr")]
public Color ImageMarginGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientMiddleDescr")]
public Color ImageMarginGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginGradientEndDescr")]
public Color ImageMarginGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientBeginDescr")]
public Color ImageMarginRevealedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientMiddleDescr")]
public Color ImageMarginRevealedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsImageMarginRevealedGradientEndDescr")]
public Color ImageMarginRevealedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuStripGradientBeginDescr")]
public Color MenuStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuStripGradientEndDescr")]
public Color MenuStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedDescr")]
public Color MenuItemSelected { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemBorderDescr")]
public Color MenuItemBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuBorderDescr")]
public Color MenuBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedGradientBeginDescr")]
public Color MenuItemSelectedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemSelectedGradientEndDescr")]
public Color MenuItemSelectedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientBeginDescr")]
public Color MenuItemPressedGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientMiddleDescr")]
public Color MenuItemPressedGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsMenuItemPressedGradientEndDescr")]
public Color MenuItemPressedGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsRaftingContainerGradientBeginDescr")]
public Color RaftingContainerGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsRaftingContainerGradientEndDescr")]
public Color RaftingContainerGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsSeparatorDarkDescr")]
public Color SeparatorDark { get; }
    [SRDescriptionAttribute("ProfessionalColorsSeparatorLightDescr")]
public Color SeparatorLight { get; }
    [SRDescriptionAttribute("ProfessionalColorsStatusStripGradientBeginDescr")]
public Color StatusStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsStatusStripGradientEndDescr")]
public Color StatusStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripBorderDescr")]
public Color ToolStripBorder { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripDropDownBackgroundDescr")]
public Color ToolStripDropDownBackground { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientBeginDescr")]
public Color ToolStripGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientMiddleDescr")]
public Color ToolStripGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripGradientEndDescr")]
public Color ToolStripGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripContentPanelGradientBeginDescr")]
public Color ToolStripContentPanelGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripContentPanelGradientEndDescr")]
public Color ToolStripContentPanelGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripPanelGradientBeginDescr")]
public Color ToolStripPanelGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsToolStripPanelGradientEndDescr")]
public Color ToolStripPanelGradientEnd { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientBeginDescr")]
public Color OverflowButtonGradientBegin { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientMiddleDescr")]
public Color OverflowButtonGradientMiddle { get; }
    [SRDescriptionAttribute("ProfessionalColorsOverflowButtonGradientEndDescr")]
public Color OverflowButtonGradientEnd { get; }
    public bool get_UseSystemColors();
    public void set_UseSystemColors(bool value);
    public virtual Color get_ButtonSelectedHighlight();
    public virtual Color get_ButtonSelectedHighlightBorder();
    public virtual Color get_ButtonPressedHighlight();
    public virtual Color get_ButtonPressedHighlightBorder();
    public virtual Color get_ButtonCheckedHighlight();
    public virtual Color get_ButtonCheckedHighlightBorder();
    public virtual Color get_ButtonPressedBorder();
    public virtual Color get_ButtonSelectedBorder();
    public virtual Color get_ButtonCheckedGradientBegin();
    public virtual Color get_ButtonCheckedGradientMiddle();
    public virtual Color get_ButtonCheckedGradientEnd();
    public virtual Color get_ButtonSelectedGradientBegin();
    public virtual Color get_ButtonSelectedGradientMiddle();
    public virtual Color get_ButtonSelectedGradientEnd();
    public virtual Color get_ButtonPressedGradientBegin();
    public virtual Color get_ButtonPressedGradientMiddle();
    public virtual Color get_ButtonPressedGradientEnd();
    public virtual Color get_CheckBackground();
    public virtual Color get_CheckSelectedBackground();
    public virtual Color get_CheckPressedBackground();
    public virtual Color get_GripDark();
    public virtual Color get_GripLight();
    public virtual Color get_ImageMarginGradientBegin();
    public virtual Color get_ImageMarginGradientMiddle();
    public virtual Color get_ImageMarginGradientEnd();
    public virtual Color get_ImageMarginRevealedGradientBegin();
    public virtual Color get_ImageMarginRevealedGradientMiddle();
    public virtual Color get_ImageMarginRevealedGradientEnd();
    public virtual Color get_MenuStripGradientBegin();
    public virtual Color get_MenuStripGradientEnd();
    public virtual Color get_MenuItemSelected();
    public virtual Color get_MenuItemBorder();
    public virtual Color get_MenuBorder();
    public virtual Color get_MenuItemSelectedGradientBegin();
    public virtual Color get_MenuItemSelectedGradientEnd();
    public virtual Color get_MenuItemPressedGradientBegin();
    public virtual Color get_MenuItemPressedGradientMiddle();
    public virtual Color get_MenuItemPressedGradientEnd();
    public virtual Color get_RaftingContainerGradientBegin();
    public virtual Color get_RaftingContainerGradientEnd();
    public virtual Color get_SeparatorDark();
    public virtual Color get_SeparatorLight();
    public virtual Color get_StatusStripGradientBegin();
    public virtual Color get_StatusStripGradientEnd();
    public virtual Color get_ToolStripBorder();
    public virtual Color get_ToolStripDropDownBackground();
    public virtual Color get_ToolStripGradientBegin();
    public virtual Color get_ToolStripGradientMiddle();
    public virtual Color get_ToolStripGradientEnd();
    public virtual Color get_ToolStripContentPanelGradientBegin();
    public virtual Color get_ToolStripContentPanelGradientEnd();
    public virtual Color get_ToolStripPanelGradientBegin();
    public virtual Color get_ToolStripPanelGradientEnd();
    public virtual Color get_OverflowButtonGradientBegin();
    public virtual Color get_OverflowButtonGradientMiddle();
    public virtual Color get_OverflowButtonGradientEnd();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Value")]
[DefaultBindingPropertyAttribute("Value")]
[SRDescriptionAttribute("DescriptionProgressBar")]
public class System.Windows.Forms.ProgressBar : Control {
    protected CreateParams CreateParams { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AllowDrop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarStyleDescr")]
public ProgressBarStyle Style { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool CausesValidation { get; public set; }
    protected ImeMode DefaultImeMode { get; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [DefaultValueAttribute("100")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarMarqueeAnimationSpeed")]
public int MarqueeAnimationSpeed { get; public set; }
    [DefaultValueAttribute("100")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ProgressBarMaximumDescr")]
public int Maximum { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ProgressBarMinimumDescr")]
public int Minimum { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [DefaultValueAttribute("10")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarStepDescr")]
public int Step { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CatBehavior")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ProgressBarValueDescr")]
public int Value { get; public set; }
    protected virtual CreateParams get_CreateParams();
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public ProgressBarStyle get_Style();
    public void set_Style(ProgressBarStyle value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public int get_MarqueeAnimationSpeed();
    public void set_MarqueeAnimationSpeed(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public int get_Step();
    public void set_Step(int value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public int get_Value();
    public void set_Value(int value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    protected virtual void CreateHandle();
    public void Increment(int value);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    public void PerformStep();
    [EditorBrowsableAttribute("1")]
public virtual void ResetForeColor();
    public virtual string ToString();
}
public class System.Windows.Forms.ProgressBarRenderer : object {
    public static bool IsSupported { get; }
    public static int ChunkThickness { get; }
    public static int ChunkSpaceThickness { get; }
    private static ProgressBarRenderer();
    public static bool get_IsSupported();
    public static void DrawHorizontalBar(Graphics g, Rectangle bounds);
    public static void DrawVerticalBar(Graphics g, Rectangle bounds);
    public static void DrawHorizontalChunks(Graphics g, Rectangle bounds);
    public static void DrawVerticalChunks(Graphics g, Rectangle bounds);
    public static int get_ChunkThickness();
    public static int get_ChunkSpaceThickness();
}
public enum System.Windows.Forms.ProgressBarStyle : Enum {
    public int value__;
    public static ProgressBarStyle Blocks;
    public static ProgressBarStyle Continuous;
    public static ProgressBarStyle Marquee;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.PropertyGridDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionPropertyGrid")]
public class System.Windows.Forms.PropertyGrid : ContainerControl {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoScroll { get; public set; }
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public AttributeCollection BrowsableAttributes { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[SRDescriptionAttribute("PropertyGridCanShowCommandsDesc")]
public bool CanShowCommands { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCategoryForeColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "ControlText")]
public Color CategoryForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsBackColorDesc")]
public Color CommandsBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsForeColorDesc")]
public Color CommandsForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsLinkColorDesc")]
public Color CommandsLinkColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsActiveLinkColorDesc")]
public Color CommandsActiveLinkColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsDisabledLinkColorDesc")]
public Color CommandsDisabledLinkColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCommandsBorderColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "ControlDark")]
public Color CommandsBorderColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool CommandsVisible { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PropertyGridCommandsVisibleIfAvailable")]
public bool CommandsVisibleIfAvailable { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public Point ContextMenuDefaultLocation { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ControlCollection Controls { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected Type DefaultTabType { get; }
    protected bool DrawFlatToolbar { get; protected set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridHelpBackColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "Control")]
public Color HelpBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridHelpForeColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "ControlText")]
public Color HelpForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridHelpBorderColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "ControlDark")]
public Color HelpBorderColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("PropertyGridHelpVisibleDesc")]
public bool HelpVisible { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridSelectedItemWithFocusBackColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "Highlight")]
public Color SelectedItemWithFocusBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridSelectedItemWithFocusForeColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "HighlightText")]
public Color SelectedItemWithFocusForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridDisabledItemForeColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "GrayText")]
public Color DisabledItemForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCategorySplitterColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "Control")]
public Color CategorySplitterColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridCanShowVisualStyleGlyphsDesc")]
[DefaultValueAttribute("True")]
public bool CanShowVisualStyleGlyphs { get; public set; }
    private bool System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.InPropertySet { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridLineColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "InactiveBorder")]
public Color LineColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("PropertyGridPropertySortDesc")]
public PropertySort PropertySort { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public PropertyTabCollection PropertyTabs { get; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("PropertyGridSelectedObjectDesc")]
[SRCategoryAttribute("CatBehavior")]
[TypeConverterAttribute("System.Windows.Forms.PropertyGrid/SelectedObjectConverter")]
public object SelectedObject { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Object[] SelectedObjects { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public PropertyTab SelectedTab { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public GridItem SelectedGridItem { get; public set; }
    protected internal bool ShowFocusCues { get; }
    public ISite Site { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridLargeButtonsDesc")]
[DefaultValueAttribute("False")]
public bool LargeButtons { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("PropertyGridToolbarVisibleDesc")]
public bool ToolbarVisible { get; public set; }
    protected ToolStripRenderer ToolStripRenderer { get; protected set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridViewBackColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "Window")]
public Color ViewBackColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridViewForeColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "WindowText")]
public Color ViewForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("PropertyGridViewBorderColorDesc")]
[DefaultValueAttribute("System.Drawing.Color", "ControlDark")]
public Color ViewBorderColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected Bitmap SortByPropertyImage { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected Bitmap SortByCategoryImage { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
protected Bitmap ShowPropertyPageImage { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("UseCompatibleTextRenderingDescr")]
public bool UseCompatibleTextRendering { get; public set; }
    private static PropertyGrid();
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public void set_BrowsableAttributes(AttributeCollection value);
    public AttributeCollection get_BrowsableAttributes();
    public virtual bool get_CanShowCommands();
    public Color get_CategoryForeColor();
    public void set_CategoryForeColor(Color value);
    public Color get_CommandsBackColor();
    public void set_CommandsBackColor(Color value);
    public Color get_CommandsForeColor();
    public void set_CommandsForeColor(Color value);
    public Color get_CommandsLinkColor();
    public void set_CommandsLinkColor(Color value);
    public Color get_CommandsActiveLinkColor();
    public void set_CommandsActiveLinkColor(Color value);
    public Color get_CommandsDisabledLinkColor();
    public void set_CommandsDisabledLinkColor(Color value);
    public Color get_CommandsBorderColor();
    public void set_CommandsBorderColor(Color value);
    public virtual bool get_CommandsVisible();
    public virtual bool get_CommandsVisibleIfAvailable();
    public virtual void set_CommandsVisibleIfAvailable(bool value);
    public Point get_ContextMenuDefaultLocation();
    public ControlCollection get_Controls();
    protected virtual Size get_DefaultSize();
    protected virtual Type get_DefaultTabType();
    protected bool get_DrawFlatToolbar();
    protected void set_DrawFlatToolbar(bool value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public Color get_HelpBackColor();
    public void set_HelpBackColor(Color value);
    public Color get_HelpForeColor();
    public void set_HelpForeColor(Color value);
    public Color get_HelpBorderColor();
    public void set_HelpBorderColor(Color value);
    public virtual bool get_HelpVisible();
    public virtual void set_HelpVisible(bool value);
    public Color get_SelectedItemWithFocusBackColor();
    public void set_SelectedItemWithFocusBackColor(Color value);
    public Color get_SelectedItemWithFocusForeColor();
    public void set_SelectedItemWithFocusForeColor(Color value);
    public Color get_DisabledItemForeColor();
    public void set_DisabledItemForeColor(Color value);
    public Color get_CategorySplitterColor();
    public void set_CategorySplitterColor(Color value);
    public bool get_CanShowVisualStyleGlyphs();
    public void set_CanShowVisualStyleGlyphs(bool value);
    private sealed virtual override bool System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.get_InPropertySet();
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public PropertySort get_PropertySort();
    public void set_PropertySort(PropertySort value);
    public PropertyTabCollection get_PropertyTabs();
    public object get_SelectedObject();
    public void set_SelectedObject(object value);
    public void set_SelectedObjects(Object[] value);
    public Object[] get_SelectedObjects();
    public PropertyTab get_SelectedTab();
    public GridItem get_SelectedGridItem();
    public void set_SelectedGridItem(GridItem value);
    protected internal virtual bool get_ShowFocusCues();
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public bool get_LargeButtons();
    public void set_LargeButtons(bool value);
    public virtual bool get_ToolbarVisible();
    public virtual void set_ToolbarVisible(bool value);
    protected ToolStripRenderer get_ToolStripRenderer();
    protected void set_ToolStripRenderer(ToolStripRenderer value);
    public Color get_ViewBackColor();
    public void set_ViewBackColor(Color value);
    public Color get_ViewForeColor();
    public void set_ViewForeColor(Color value);
    public Color get_ViewBorderColor();
    public void set_ViewBorderColor(Color value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_PropertyValueChanged(PropertyValueChangedEventHandler value);
    public void remove_PropertyValueChanged(PropertyValueChangedEventHandler value);
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.add_ComComponentNameChanged(ComponentRenameEventHandler value);
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.remove_ComComponentNameChanged(ComponentRenameEventHandler value);
    public void add_PropertyTabChanged(PropertyTabChangedEventHandler value);
    public void remove_PropertyTabChanged(PropertyTabChangedEventHandler value);
    public void add_PropertySortChanged(EventHandler value);
    public void remove_PropertySortChanged(EventHandler value);
    public void add_SelectedGridItemChanged(SelectedGridItemChangedEventHandler value);
    public void remove_SelectedGridItemChanged(SelectedGridItemChangedEventHandler value);
    public void add_SelectedObjectsChanged(EventHandler value);
    public void remove_SelectedObjectsChanged(EventHandler value);
    public void CollapseAllGridItems();
    protected virtual PropertyTab CreatePropertyTab(Type tabType);
    protected virtual void Dispose(bool disposing);
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.DropDownDone();
    private sealed virtual override bool System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.EnsurePendingChangesCommitted();
    public void ExpandAllGridItems();
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.HandleF4();
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.LoadState(RegistryKey optRoot);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected virtual void OnMouseDown(MouseEventArgs me);
    protected virtual void OnMouseMove(MouseEventArgs me);
    protected virtual void OnMouseUp(MouseEventArgs me);
    protected virtual void OnResize(EventArgs e);
    protected void OnComComponentNameChanged(ComponentRenameEventArgs e);
    protected void OnNotifyPropertyValueUIItemsChanged(object sender, EventArgs e);
    protected virtual void OnPaint(PaintEventArgs pevent);
    protected virtual void OnPropertySortChanged(EventArgs e);
    protected virtual void OnPropertyTabChanged(PropertyTabChangedEventArgs e);
    protected virtual void OnPropertyValueChanged(PropertyValueChangedEventArgs e);
    protected virtual void OnSelectedGridItemChanged(SelectedGridItemChangedEventArgs e);
    protected virtual void OnSelectedObjectsChanged(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual bool ProcessDialogKey(Keys keyData);
    public virtual void Refresh();
    public void RefreshTabs(PropertyTabScope tabScope);
    public void ResetSelectedProperty();
    private sealed virtual override void System.Windows.Forms.ComponentModel.Com2Interop.IComPropertyBrowser.SaveState(RegistryKey optRoot);
    protected void ShowEventsButton(bool value);
    protected virtual Bitmap get_SortByPropertyImage();
    protected virtual Bitmap get_SortByCategoryImage();
    protected virtual Bitmap get_ShowPropertyPageImage();
    public bool get_UseCompatibleTextRendering();
    public void set_UseCompatibleTextRendering(bool value);
    protected virtual void OnSystemColorsChanged(EventArgs e);
    protected virtual void WndProc(Message& m);
}
public interface System.Windows.Forms.PropertyGridInternal.IRootGridEntry {
    public AttributeCollection BrowsableAttributes { get; public set; }
    public abstract virtual AttributeCollection get_BrowsableAttributes();
    public abstract virtual void set_BrowsableAttributes(AttributeCollection value);
    public abstract virtual void ResetBrowsableAttributes();
    public abstract virtual void ShowCategories(bool showCategories);
}
public class System.Windows.Forms.PropertyGridInternal.PropertiesTab : PropertyTab {
    public string TabName { get; }
    public string HelpKeyword { get; }
    public virtual string get_TabName();
    public virtual string get_HelpKeyword();
    public virtual PropertyDescriptor GetDefaultProperty(object obj);
    public virtual PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object component, Attribute[] attributes);
}
public class System.Windows.Forms.PropertyGridInternal.PropertyGridCommands : object {
    protected static Guid wfcMenuGroup;
    protected static Guid wfcMenuCommand;
    public static CommandID Reset;
    public static CommandID Description;
    public static CommandID Hide;
    public static CommandID Commands;
    private static PropertyGridCommands();
}
public class System.Windows.Forms.PropertyManager : BindingManagerBase {
    public object Current { get; }
    public int Position { get; public set; }
    public int Count { get; }
    public virtual object get_Current();
    public virtual void SuspendBinding();
    public virtual void ResumeBinding();
    protected internal virtual string GetListName(ArrayList listAccessors);
    public virtual void CancelCurrentEdit();
    public virtual void EndCurrentEdit();
    protected virtual void UpdateIsBinding();
    protected internal virtual void OnCurrentChanged(EventArgs ea);
    protected internal virtual void OnCurrentItemChanged(EventArgs ea);
    public virtual int get_Position();
    public virtual void set_Position(int value);
    public virtual int get_Count();
    public virtual void AddNew();
    public virtual void RemoveAt(int index);
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.PropertySort : Enum {
    public int value__;
    public static PropertySort NoSort;
    public static PropertySort Alphabetical;
    public static PropertySort Categorized;
    public static PropertySort CategorizedAlphabetical;
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.PropertyTabChangedEventArgs : EventArgs {
    public PropertyTab OldTab { get; }
    public PropertyTab NewTab { get; }
    public PropertyTabChangedEventArgs(PropertyTab oldTab, PropertyTab newTab);
    public PropertyTab get_OldTab();
    public PropertyTab get_NewTab();
}
public class System.Windows.Forms.PropertyTabChangedEventHandler : MulticastDelegate {
    public PropertyTabChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object s, PropertyTabChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object s, PropertyTabChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.PropertyValueChangedEventArgs : EventArgs {
    public GridItem ChangedItem { get; }
    public object OldValue { get; }
    public PropertyValueChangedEventArgs(GridItem changedItem, object oldValue);
    public GridItem get_ChangedItem();
    public object get_OldValue();
}
public class System.Windows.Forms.PropertyValueChangedEventHandler : MulticastDelegate {
    public PropertyValueChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object s, PropertyValueChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object s, PropertyValueChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.QueryAccessibilityHelpEventArgs : EventArgs {
    public string HelpNamespace { get; public set; }
    public string HelpString { get; public set; }
    public string HelpKeyword { get; public set; }
    public QueryAccessibilityHelpEventArgs(string helpNamespace, string helpString, string helpKeyword);
    public string get_HelpNamespace();
    public void set_HelpNamespace(string value);
    public string get_HelpString();
    public void set_HelpString(string value);
    public string get_HelpKeyword();
    public void set_HelpKeyword(string value);
}
public class System.Windows.Forms.QueryAccessibilityHelpEventHandler : MulticastDelegate {
    public QueryAccessibilityHelpEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, QueryAccessibilityHelpEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QueryAccessibilityHelpEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.QueryContinueDragEventArgs : EventArgs {
    public int KeyState { get; }
    public bool EscapePressed { get; }
    public DragAction Action { get; public set; }
    public QueryContinueDragEventArgs(int keyState, bool escapePressed, DragAction action);
    public int get_KeyState();
    public bool get_EscapePressed();
    public DragAction get_Action();
    public void set_Action(DragAction value);
}
public class System.Windows.Forms.QueryContinueDragEventHandler : MulticastDelegate {
    public QueryContinueDragEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, QueryContinueDragEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QueryContinueDragEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.QuestionEventArgs : EventArgs {
    public bool Response { get; public set; }
    public QuestionEventArgs(bool response);
    public bool get_Response();
    public void set_Response(bool value);
}
public class System.Windows.Forms.QuestionEventHandler : MulticastDelegate {
    public QuestionEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, QuestionEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, QuestionEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Checked")]
[DefaultEventAttribute("CheckedChanged")]
[DefaultBindingPropertyAttribute("Checked")]
[ToolboxItemAttribute("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerAttribute("System.Windows.Forms.Design.RadioButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionRadioButton")]
public class System.Windows.Forms.RadioButton : ButtonBase {
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("RadioButtonAutoCheckDescr")]
public bool AutoCheck { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("RadioButtonAppearanceDescr")]
public Appearance Appearance { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("RadioButtonCheckAlignDescr")]
public ContentAlignment CheckAlign { get; public set; }
    [BindableAttribute("True")]
[SettingsBindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("RadioButtonCheckedDescr")]
public bool Checked { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [DefaultValueAttribute("False")]
public bool TabStop { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ContentAlignment TextAlign { get; public set; }
    private static RadioButton();
    public bool get_AutoCheck();
    public void set_AutoCheck(bool value);
    public Appearance get_Appearance();
    public void set_Appearance(Appearance value);
    public void add_AppearanceChanged(EventHandler value);
    public void remove_AppearanceChanged(EventHandler value);
    public ContentAlignment get_CheckAlign();
    public void set_CheckAlign(ContentAlignment value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public virtual ContentAlignment get_TextAlign();
    public virtual void set_TextAlign(ContentAlignment value);
    public void add_CheckedChanged(EventHandler value);
    public void remove_CheckedChanged(EventHandler value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnEnter(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    public void PerformClick();
    protected internal virtual bool ProcessMnemonic(char charCode);
    public virtual string ToString();
}
public class System.Windows.Forms.RadioButtonRenderer : object {
    public static bool RenderMatchingApplicationState { get; public set; }
    private static RadioButtonRenderer();
    public static bool get_RenderMatchingApplicationState();
    public static void set_RenderMatchingApplicationState(bool value);
    public static bool IsBackgroundPartiallyTransparent(RadioButtonState state);
    public static void DrawParentBackground(Graphics g, Rectangle bounds, Control childControl);
    public static void DrawRadioButton(Graphics g, Point glyphLocation, RadioButtonState state);
    public static void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, bool focused, RadioButtonState state);
    public static void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, TextFormatFlags flags, bool focused, RadioButtonState state);
    public static void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, Image image, Rectangle imageBounds, bool focused, RadioButtonState state);
    public static void DrawRadioButton(Graphics g, Point glyphLocation, Rectangle textBounds, string radioButtonText, Font font, TextFormatFlags flags, Image image, Rectangle imageBounds, bool focused, RadioButtonState state);
    public static Size GetGlyphSize(Graphics g, RadioButtonState state);
}
[AttributeUsageAttribute("128")]
public class System.Windows.Forms.RelatedImageListAttribute : Attribute {
    public string RelatedImageList { get; }
    public RelatedImageListAttribute(string relatedImageList);
    public string get_RelatedImageList();
}
public class System.Windows.Forms.RetrieveVirtualItemEventArgs : EventArgs {
    public int ItemIndex { get; }
    public ListViewItem Item { get; public set; }
    public RetrieveVirtualItemEventArgs(int itemIndex);
    public int get_ItemIndex();
    public ListViewItem get_Item();
    public void set_Item(ListViewItem value);
}
public class System.Windows.Forms.RetrieveVirtualItemEventHandler : MulticastDelegate {
    public RetrieveVirtualItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RetrieveVirtualItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RetrieveVirtualItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
[DockingAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.RichTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionRichTextBox")]
public class System.Windows.Forms.RichTextBox : TextBoxBase {
    [BrowsableAttribute("False")]
public bool AllowDrop { get; public set; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("RichTextBoxAutoWordSelection")]
public bool AutoWordSelection { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("RichTextBoxBulletIndent")]
public int BulletIndent { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxCanRedoDescr")]
public bool CanRedo { get; }
    protected CreateParams CreateParams { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("RichTextBoxDetectURLs")]
public bool DetectUrls { get; public set; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("RichTextBoxEnableAutoDragDrop")]
public bool EnableAutoDragDrop { get; public set; }
    public Color ForeColor { get; public set; }
    public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public RichTextBoxLanguageOptions LanguageOption { get; public set; }
    [DefaultValueAttribute("2147483647")]
public int MaxLength { get; public set; }
    [DefaultValueAttribute("True")]
public bool Multiline { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxRedoActionNameDescr")]
public string RedoActionName { get; }
    [DefaultValueAttribute("True")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool RichTextShortcutsEnabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("RichTextBoxRightMargin")]
public int RightMargin { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxRTF")]
[RefreshPropertiesAttribute("1")]
public string Rtf { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("RichTextBoxScrollBars")]
public RichTextBoxScrollBars ScrollBars { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelAlignment")]
public HorizontalAlignment SelectionAlignment { get; public set; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelBullet")]
public bool SelectionBullet { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelCharOffset")]
public int SelectionCharOffset { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelColor")]
public Color SelectionColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelBackColor")]
public Color SelectionBackColor { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelFont")]
public Font SelectionFont { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelHangingIndent")]
public int SelectionHangingIndent { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelIndent")]
public int SelectionIndent { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectionLengthDescr")]
public int SelectionLength { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("RichTextBoxSelProtected")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool SelectionProtected { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelRTF")]
public string SelectedRtf { get; public set; }
    [DefaultValueAttribute("0")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelRightIndent")]
public int SelectionRightIndent { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelTabs")]
public Int32[] SelectionTabs { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelText")]
public string SelectedText { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxSelTypeDescr")]
public RichTextBoxSelectionTypes SelectionType { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("RichTextBoxSelMargin")]
public bool ShowSelectionMargin { get; public set; }
    [LocalizableAttribute("True")]
[RefreshPropertiesAttribute("1")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
public int TextLength { get; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("RichTextBoxUndoActionNameDescr")]
public string UndoActionName { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("1")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("RichTextBoxZoomFactor")]
public float ZoomFactor { get; public set; }
    private static RichTextBox();
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public bool get_AutoWordSelection();
    public void set_AutoWordSelection(bool value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public int get_BulletIndent();
    public void set_BulletIndent(int value);
    public bool get_CanRedo();
    protected virtual CreateParams get_CreateParams();
    public bool get_DetectUrls();
    public void set_DetectUrls(bool value);
    protected virtual Size get_DefaultSize();
    public bool get_EnableAutoDragDrop();
    public void set_EnableAutoDragDrop(bool value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public RichTextBoxLanguageOptions get_LanguageOption();
    public void set_LanguageOption(RichTextBoxLanguageOptions value);
    public virtual int get_MaxLength();
    public virtual void set_MaxLength(int value);
    public virtual bool get_Multiline();
    public virtual void set_Multiline(bool value);
    public string get_RedoActionName();
    public bool get_RichTextShortcutsEnabled();
    public void set_RichTextShortcutsEnabled(bool value);
    public int get_RightMargin();
    public void set_RightMargin(int value);
    public string get_Rtf();
    public void set_Rtf(string value);
    public RichTextBoxScrollBars get_ScrollBars();
    public void set_ScrollBars(RichTextBoxScrollBars value);
    public HorizontalAlignment get_SelectionAlignment();
    public void set_SelectionAlignment(HorizontalAlignment value);
    public bool get_SelectionBullet();
    public void set_SelectionBullet(bool value);
    public int get_SelectionCharOffset();
    public void set_SelectionCharOffset(int value);
    public Color get_SelectionColor();
    public void set_SelectionColor(Color value);
    public Color get_SelectionBackColor();
    public void set_SelectionBackColor(Color value);
    public Font get_SelectionFont();
    public void set_SelectionFont(Font value);
    public int get_SelectionHangingIndent();
    public void set_SelectionHangingIndent(int value);
    public int get_SelectionIndent();
    public void set_SelectionIndent(int value);
    public virtual int get_SelectionLength();
    public virtual void set_SelectionLength(int value);
    public bool get_SelectionProtected();
    public void set_SelectionProtected(bool value);
    public string get_SelectedRtf();
    public void set_SelectedRtf(string value);
    public int get_SelectionRightIndent();
    public void set_SelectionRightIndent(int value);
    public Int32[] get_SelectionTabs();
    public void set_SelectionTabs(Int32[] value);
    public virtual string get_SelectedText();
    public virtual void set_SelectedText(string value);
    public RichTextBoxSelectionTypes get_SelectionType();
    public bool get_ShowSelectionMargin();
    public void set_ShowSelectionMargin(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual int get_TextLength();
    public string get_UndoActionName();
    public float get_ZoomFactor();
    public void set_ZoomFactor(float value);
    public void add_ContentsResized(ContentsResizedEventHandler value);
    public void remove_ContentsResized(ContentsResizedEventHandler value);
    public void add_DragDrop(DragEventHandler value);
    public void remove_DragDrop(DragEventHandler value);
    public void add_DragEnter(DragEventHandler value);
    public void remove_DragEnter(DragEventHandler value);
    public void add_DragLeave(EventHandler value);
    public void remove_DragLeave(EventHandler value);
    public void add_DragOver(DragEventHandler value);
    public void remove_DragOver(DragEventHandler value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void add_HScroll(EventHandler value);
    public void remove_HScroll(EventHandler value);
    public void add_LinkClicked(LinkClickedEventHandler value);
    public void remove_LinkClicked(LinkClickedEventHandler value);
    public void add_ImeChange(EventHandler value);
    public void remove_ImeChange(EventHandler value);
    public void add_Protected(EventHandler value);
    public void remove_Protected(EventHandler value);
    public void add_SelectionChanged(EventHandler value);
    public void remove_SelectionChanged(EventHandler value);
    public void add_VScroll(EventHandler value);
    public void remove_VScroll(EventHandler value);
    public bool CanPaste(Format clipFormat);
    [EditorBrowsableAttribute("1")]
public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds);
    public int Find(string str);
    public int Find(string str, RichTextBoxFinds options);
    public int Find(string str, int start, RichTextBoxFinds options);
    public int Find(string str, int start, int end, RichTextBoxFinds options);
    public int Find(Char[] characterSet);
    public int Find(Char[] characterSet, int start);
    public int Find(Char[] characterSet, int start, int end);
    public virtual int GetCharIndexFromPosition(Point pt);
    public virtual int GetLineFromCharIndex(int index);
    public virtual Point GetPositionFromCharIndex(int index);
    public void LoadFile(string path);
    public void LoadFile(string path, RichTextBoxStreamType fileType);
    public void LoadFile(Stream data, RichTextBoxStreamType fileType);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnContextMenuChanged(EventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnContentsResized(ContentsResizedEventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnHScroll(EventArgs e);
    protected virtual void OnLinkClicked(LinkClickedEventArgs e);
    protected virtual void OnImeChange(EventArgs e);
    protected virtual void OnProtected(EventArgs e);
    protected virtual void OnSelectionChanged(EventArgs e);
    protected virtual void OnVScroll(EventArgs e);
    public void Paste(Format clipFormat);
    protected virtual bool ProcessCmdKey(Message& m, Keys keyData);
    public void Redo();
    public void SaveFile(string path);
    public void SaveFile(string path, RichTextBoxStreamType fileType);
    public void SaveFile(Stream data, RichTextBoxStreamType fileType);
    protected virtual object CreateRichEditOleCallback();
    protected virtual void WndProc(Message& m);
}
[FlagsAttribute]
public enum System.Windows.Forms.RichTextBoxFinds : Enum {
    public int value__;
    public static RichTextBoxFinds None;
    public static RichTextBoxFinds WholeWord;
    public static RichTextBoxFinds MatchCase;
    public static RichTextBoxFinds NoHighlight;
    public static RichTextBoxFinds Reverse;
}
[FlagsAttribute]
public enum System.Windows.Forms.RichTextBoxLanguageOptions : Enum {
    public int value__;
    public static RichTextBoxLanguageOptions AutoFont;
    public static RichTextBoxLanguageOptions AutoFontSizeAdjust;
    public static RichTextBoxLanguageOptions AutoKeyboard;
    public static RichTextBoxLanguageOptions DualFont;
    public static RichTextBoxLanguageOptions ImeAlwaysSendNotify;
    public static RichTextBoxLanguageOptions ImeCancelComplete;
    public static RichTextBoxLanguageOptions UIFonts;
}
public enum System.Windows.Forms.RichTextBoxScrollBars : Enum {
    public int value__;
    public static RichTextBoxScrollBars None;
    public static RichTextBoxScrollBars Horizontal;
    public static RichTextBoxScrollBars Vertical;
    public static RichTextBoxScrollBars Both;
    public static RichTextBoxScrollBars ForcedHorizontal;
    public static RichTextBoxScrollBars ForcedVertical;
    public static RichTextBoxScrollBars ForcedBoth;
}
public enum System.Windows.Forms.RichTextBoxSelectionAttribute : Enum {
    public int value__;
    public static RichTextBoxSelectionAttribute Mixed;
    public static RichTextBoxSelectionAttribute None;
    public static RichTextBoxSelectionAttribute All;
}
[FlagsAttribute]
public enum System.Windows.Forms.RichTextBoxSelectionTypes : Enum {
    public int value__;
    public static RichTextBoxSelectionTypes Empty;
    public static RichTextBoxSelectionTypes Text;
    public static RichTextBoxSelectionTypes Object;
    public static RichTextBoxSelectionTypes MultiChar;
    public static RichTextBoxSelectionTypes MultiObject;
}
public enum System.Windows.Forms.RichTextBoxStreamType : Enum {
    public int value__;
    public static RichTextBoxStreamType RichText;
    public static RichTextBoxStreamType PlainText;
    public static RichTextBoxStreamType RichNoOleObjs;
    public static RichTextBoxStreamType TextTextOleObjs;
    public static RichTextBoxStreamType UnicodePlainText;
}
public enum System.Windows.Forms.RichTextBoxWordPunctuations : Enum {
    public int value__;
    public static RichTextBoxWordPunctuations Level1;
    public static RichTextBoxWordPunctuations Level2;
    public static RichTextBoxWordPunctuations Custom;
    public static RichTextBoxWordPunctuations All;
}
public enum System.Windows.Forms.RightToLeft : Enum {
    public int value__;
    public static RightToLeft No;
    public static RightToLeft Yes;
    public static RightToLeft Inherit;
}
public class System.Windows.Forms.RowStyle : TableLayoutStyle {
    public float Height { get; public set; }
    public RowStyle(SizeType sizeType);
    public RowStyle(SizeType sizeType, float height);
    public float get_Height();
    public void set_Height(float value);
}
[DesignerAttribute("System.Windows.Forms.Design.SaveFileDialogDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionSaveFileDialog")]
public class System.Windows.Forms.SaveFileDialog : FileDialog {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("SaveFileDialogCreatePrompt")]
public bool CreatePrompt { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("SaveFileDialogOverWritePrompt")]
public bool OverwritePrompt { get; public set; }
    public bool get_CreatePrompt();
    public void set_CreatePrompt(bool value);
    public bool get_OverwritePrompt();
    public void set_OverwritePrompt(bool value);
    public Stream OpenFile();
    public virtual void Reset();
}
public class System.Windows.Forms.Screen : object {
    public static Screen[] AllScreens { get; }
    public int BitsPerPixel { get; }
    public Rectangle Bounds { get; }
    public string DeviceName { get; }
    public bool Primary { get; }
    public static Screen PrimaryScreen { get; }
    public Rectangle WorkingArea { get; }
    private static Screen();
    public static Screen[] get_AllScreens();
    public int get_BitsPerPixel();
    public Rectangle get_Bounds();
    public string get_DeviceName();
    public bool get_Primary();
    public static Screen get_PrimaryScreen();
    public Rectangle get_WorkingArea();
    public virtual bool Equals(object obj);
    public static Screen FromPoint(Point point);
    public static Screen FromRectangle(Rectangle rect);
    public static Screen FromControl(Control control);
    public static Screen FromHandle(IntPtr hwnd);
    public static Rectangle GetWorkingArea(Point pt);
    public static Rectangle GetWorkingArea(Rectangle rect);
    public static Rectangle GetWorkingArea(Control ctl);
    public static Rectangle GetBounds(Point pt);
    public static Rectangle GetBounds(Rectangle rect);
    public static Rectangle GetBounds(Control ctl);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public enum System.Windows.Forms.ScreenOrientation : Enum {
    public int value__;
    public static ScreenOrientation Angle0;
    public static ScreenOrientation Angle90;
    public static ScreenOrientation Angle180;
    public static ScreenOrientation Angle270;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.ScrollableControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.ScrollableControl : Control {
    protected static int ScrollStateAutoScrolling;
    protected static int ScrollStateHScrollVisible;
    protected static int ScrollStateVScrollVisible;
    protected static int ScrollStateUserHasScrolled;
    protected static int ScrollStateFullDrag;
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FormAutoScrollDescr")]
public bool AutoScroll { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FormAutoScrollMarginDescr")]
public Size AutoScrollMargin { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormAutoScrollPositionDescr")]
public Point AutoScrollPosition { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("FormAutoScrollMinSizeDescr")]
public Size AutoScrollMinSize { get; public set; }
    protected CreateParams CreateParams { get; }
    public Rectangle DisplayRectangle { get; }
    private Rectangle System.Windows.Forms.Layout.IArrangedElement.DisplayRectangle { get; }
    protected bool HScroll { get; protected set; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ScrollableControlHorizontalScrollDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
public HScrollProperties HorizontalScroll { get; }
    protected bool VScroll { get; protected set; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ScrollableControlVerticalScrollDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
public VScrollProperties VerticalScroll { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DockPaddingEdges DockPadding { get; }
    private static ScrollableControl();
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Point get_AutoScrollPosition();
    public void set_AutoScrollPosition(Point value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    protected virtual CreateParams get_CreateParams();
    public virtual Rectangle get_DisplayRectangle();
    private sealed virtual override Rectangle System.Windows.Forms.Layout.IArrangedElement.get_DisplayRectangle();
    protected bool get_HScroll();
    protected void set_HScroll(bool value);
    public HScrollProperties get_HorizontalScroll();
    protected bool get_VScroll();
    protected void set_VScroll(bool value);
    public VScrollProperties get_VerticalScroll();
    public DockPaddingEdges get_DockPadding();
    [EditorBrowsableAttribute("2")]
protected virtual void AdjustFormScrollbars(bool displayScrollbars);
    [EditorBrowsableAttribute("2")]
protected bool GetScrollState(int bit);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLayout(LayoutEventArgs levent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseWheel(MouseEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnPaddingChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnVisibleChanged(EventArgs e);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    protected void SetDisplayRectLocation(int x, int y);
    public void ScrollControlIntoView(Control activeControl);
    protected virtual Point ScrollToControl(Control activeControl);
    public void add_Scroll(ScrollEventHandler value);
    public void remove_Scroll(ScrollEventHandler value);
    protected virtual void OnScroll(ScrollEventArgs se);
    public void SetAutoScrollMargin(int x, int y);
    protected void SetScrollState(int bit, bool value);
    [EditorBrowsableAttribute("2")]
protected virtual void WndProc(Message& m);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Value")]
[DefaultEventAttribute("Scroll")]
public abstract class System.Windows.Forms.ScrollBar : Control {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Padding DefaultMargin { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("10")]
[SRDescriptionAttribute("ScrollBarLargeChangeDescr")]
[RefreshPropertiesAttribute("2")]
public int LargeChange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("ScrollBarMaximumDescr")]
[RefreshPropertiesAttribute("2")]
public int Maximum { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("ScrollBarMinimumDescr")]
[RefreshPropertiesAttribute("2")]
public int Minimum { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("ScrollBarSmallChangeDescr")]
public int SmallChange { get; public set; }
    [DefaultValueAttribute("False")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ScrollBarValueDescr")]
public int Value { get; public set; }
    private static ScrollBar();
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Padding get_DefaultMargin();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public int get_LargeChange();
    public void set_LargeChange(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    public int get_SmallChange();
    public void set_SmallChange(int value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public int get_Value();
    public void set_Value(int value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_Scroll(ScrollEventHandler value);
    public void remove_Scroll(ScrollEventHandler value);
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    protected virtual Rectangle GetScaledBounds(Rectangle bounds, SizeF factor, BoundsSpecified specified);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnScroll(ScrollEventArgs se);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnValueChanged(EventArgs e);
    public virtual string ToString();
    protected void UpdateScrollInfo();
    protected virtual void WndProc(Message& m);
}
public class System.Windows.Forms.ScrollBarRenderer : object {
    public static bool IsSupported { get; }
    private static ScrollBarRenderer();
    public static bool get_IsSupported();
    public static void DrawArrowButton(Graphics g, Rectangle bounds, ScrollBarArrowButtonState state);
    public static void DrawHorizontalThumb(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawVerticalThumb(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawHorizontalThumbGrip(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawVerticalThumbGrip(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawRightHorizontalTrack(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawLeftHorizontalTrack(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawUpperVerticalTrack(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawLowerVerticalTrack(Graphics g, Rectangle bounds, ScrollBarState state);
    public static void DrawSizeBox(Graphics g, Rectangle bounds, ScrollBarSizeBoxState state);
    public static Size GetThumbGripSize(Graphics g, ScrollBarState state);
    public static Size GetSizeBoxSize(Graphics g, ScrollBarState state);
}
public enum System.Windows.Forms.ScrollBars : Enum {
    public int value__;
    public static ScrollBars None;
    public static ScrollBars Horizontal;
    public static ScrollBars Vertical;
    public static ScrollBars Both;
}
public enum System.Windows.Forms.ScrollButton : Enum {
    public int value__;
    public static ScrollButton Down;
    public static ScrollButton Left;
    public static ScrollButton Right;
    public static ScrollButton Up;
    public static ScrollButton Min;
    public static ScrollButton Max;
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.ScrollEventArgs : EventArgs {
    public ScrollOrientation ScrollOrientation { get; }
    public ScrollEventType Type { get; }
    public int NewValue { get; public set; }
    public int OldValue { get; }
    public ScrollEventArgs(ScrollEventType type, int newValue);
    public ScrollEventArgs(ScrollEventType type, int newValue, ScrollOrientation scroll);
    public ScrollEventArgs(ScrollEventType type, int oldValue, int newValue);
    public ScrollEventArgs(ScrollEventType type, int oldValue, int newValue, ScrollOrientation scroll);
    public ScrollOrientation get_ScrollOrientation();
    public ScrollEventType get_Type();
    public int get_NewValue();
    public void set_NewValue(int value);
    public int get_OldValue();
}
public class System.Windows.Forms.ScrollEventHandler : MulticastDelegate {
    public ScrollEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ScrollEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ScrollEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.ScrollEventType : Enum {
    public int value__;
    public static ScrollEventType SmallDecrement;
    public static ScrollEventType SmallIncrement;
    public static ScrollEventType LargeDecrement;
    public static ScrollEventType LargeIncrement;
    public static ScrollEventType ThumbPosition;
    public static ScrollEventType ThumbTrack;
    public static ScrollEventType First;
    public static ScrollEventType Last;
    public static ScrollEventType EndScroll;
}
public enum System.Windows.Forms.ScrollOrientation : Enum {
    public int value__;
    public static ScrollOrientation HorizontalScroll;
    public static ScrollOrientation VerticalScroll;
}
public abstract class System.Windows.Forms.ScrollProperties : object {
    protected ScrollableControl ParentControl { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ScrollBarEnableDescr")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("10")]
[SRDescriptionAttribute("ScrollBarLargeChangeDescr")]
[RefreshPropertiesAttribute("2")]
public int LargeChange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("ScrollBarMaximumDescr")]
[RefreshPropertiesAttribute("2")]
public int Maximum { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[SRDescriptionAttribute("ScrollBarMinimumDescr")]
[RefreshPropertiesAttribute("2")]
public int Minimum { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("ScrollBarSmallChangeDescr")]
public int SmallChange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ScrollBarValueDescr")]
public int Value { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ScrollBarVisibleDescr")]
public bool Visible { get; public set; }
    protected ScrollProperties(ScrollableControl container);
    protected ScrollableControl get_ParentControl();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_LargeChange();
    public void set_LargeChange(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    public int get_SmallChange();
    public void set_SmallChange(int value);
    public int get_Value();
    public void set_Value(int value);
    public bool get_Visible();
    public void set_Visible(bool value);
}
public enum System.Windows.Forms.SearchDirectionHint : Enum {
    public int value__;
    public static SearchDirectionHint Up;
    public static SearchDirectionHint Down;
    public static SearchDirectionHint Left;
    public static SearchDirectionHint Right;
}
public class System.Windows.Forms.SearchForVirtualItemEventArgs : EventArgs {
    public bool IsTextSearch { get; }
    public bool IncludeSubItemsInSearch { get; }
    public int Index { get; public set; }
    public bool IsPrefixSearch { get; }
    public string Text { get; }
    public Point StartingPoint { get; }
    public SearchDirectionHint Direction { get; }
    public int StartIndex { get; }
    public SearchForVirtualItemEventArgs(bool isTextSearch, bool isPrefixSearch, bool includeSubItemsInSearch, string text, Point startingPoint, SearchDirectionHint direction, int startIndex);
    public bool get_IsTextSearch();
    public bool get_IncludeSubItemsInSearch();
    public int get_Index();
    public void set_Index(int value);
    public bool get_IsPrefixSearch();
    public string get_Text();
    public Point get_StartingPoint();
    public SearchDirectionHint get_Direction();
    public int get_StartIndex();
}
public class System.Windows.Forms.SearchForVirtualItemEventHandler : MulticastDelegate {
    public SearchForVirtualItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SearchForVirtualItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SearchForVirtualItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.SecurityIDType : Enum {
    public int value__;
    public static SecurityIDType User;
    public static SecurityIDType Group;
    public static SecurityIDType Domain;
    public static SecurityIDType Alias;
    public static SecurityIDType WellKnownGroup;
    public static SecurityIDType DeletedAccount;
    public static SecurityIDType Invalid;
    public static SecurityIDType Unknown;
    public static SecurityIDType Computer;
}
public class System.Windows.Forms.SelectedGridItemChangedEventArgs : EventArgs {
    public GridItem NewSelection { get; }
    public GridItem OldSelection { get; }
    public SelectedGridItemChangedEventArgs(GridItem oldSel, GridItem newSel);
    public GridItem get_NewSelection();
    public GridItem get_OldSelection();
}
public class System.Windows.Forms.SelectedGridItemChangedEventHandler : MulticastDelegate {
    public SelectedGridItemChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SelectedGridItemChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SelectedGridItemChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.SelectionMode : Enum {
    public int value__;
    public static SelectionMode None;
    public static SelectionMode One;
    public static SelectionMode MultiSimple;
    public static SelectionMode MultiExtended;
}
[TypeConverterAttribute("System.Windows.Forms.SelectionRangeConverter")]
public class System.Windows.Forms.SelectionRange : object {
    public DateTime End { get; public set; }
    public DateTime Start { get; public set; }
    public SelectionRange(DateTime lower, DateTime upper);
    public SelectionRange(SelectionRange range);
    public DateTime get_End();
    public void set_End(DateTime value);
    public DateTime get_Start();
    public void set_Start(DateTime value);
    public virtual string ToString();
}
public class System.Windows.Forms.SelectionRangeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class System.Windows.Forms.SendKeys : object {
    private static SendKeys();
    public static void Send(string keys);
    public static void SendWait(string keys);
    public static void Flush();
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.Shortcut : Enum {
    public int value__;
    public static Shortcut None;
    public static Shortcut CtrlA;
    public static Shortcut CtrlB;
    public static Shortcut CtrlC;
    public static Shortcut CtrlD;
    public static Shortcut CtrlE;
    public static Shortcut CtrlF;
    public static Shortcut CtrlG;
    public static Shortcut CtrlH;
    public static Shortcut CtrlI;
    public static Shortcut CtrlJ;
    public static Shortcut CtrlK;
    public static Shortcut CtrlL;
    public static Shortcut CtrlM;
    public static Shortcut CtrlN;
    public static Shortcut CtrlO;
    public static Shortcut CtrlP;
    public static Shortcut CtrlQ;
    public static Shortcut CtrlR;
    public static Shortcut CtrlS;
    public static Shortcut CtrlT;
    public static Shortcut CtrlU;
    public static Shortcut CtrlV;
    public static Shortcut CtrlW;
    public static Shortcut CtrlX;
    public static Shortcut CtrlY;
    public static Shortcut CtrlZ;
    public static Shortcut CtrlShiftA;
    public static Shortcut CtrlShiftB;
    public static Shortcut CtrlShiftC;
    public static Shortcut CtrlShiftD;
    public static Shortcut CtrlShiftE;
    public static Shortcut CtrlShiftF;
    public static Shortcut CtrlShiftG;
    public static Shortcut CtrlShiftH;
    public static Shortcut CtrlShiftI;
    public static Shortcut CtrlShiftJ;
    public static Shortcut CtrlShiftK;
    public static Shortcut CtrlShiftL;
    public static Shortcut CtrlShiftM;
    public static Shortcut CtrlShiftN;
    public static Shortcut CtrlShiftO;
    public static Shortcut CtrlShiftP;
    public static Shortcut CtrlShiftQ;
    public static Shortcut CtrlShiftR;
    public static Shortcut CtrlShiftS;
    public static Shortcut CtrlShiftT;
    public static Shortcut CtrlShiftU;
    public static Shortcut CtrlShiftV;
    public static Shortcut CtrlShiftW;
    public static Shortcut CtrlShiftX;
    public static Shortcut CtrlShiftY;
    public static Shortcut CtrlShiftZ;
    public static Shortcut F1;
    public static Shortcut F2;
    public static Shortcut F3;
    public static Shortcut F4;
    public static Shortcut F5;
    public static Shortcut F6;
    public static Shortcut F7;
    public static Shortcut F8;
    public static Shortcut F9;
    public static Shortcut F10;
    public static Shortcut F11;
    public static Shortcut F12;
    public static Shortcut ShiftF1;
    public static Shortcut ShiftF2;
    public static Shortcut ShiftF3;
    public static Shortcut ShiftF4;
    public static Shortcut ShiftF5;
    public static Shortcut ShiftF6;
    public static Shortcut ShiftF7;
    public static Shortcut ShiftF8;
    public static Shortcut ShiftF9;
    public static Shortcut ShiftF10;
    public static Shortcut ShiftF11;
    public static Shortcut ShiftF12;
    public static Shortcut CtrlF1;
    public static Shortcut CtrlF2;
    public static Shortcut CtrlF3;
    public static Shortcut CtrlF4;
    public static Shortcut CtrlF5;
    public static Shortcut CtrlF6;
    public static Shortcut CtrlF7;
    public static Shortcut CtrlF8;
    public static Shortcut CtrlF9;
    public static Shortcut CtrlF10;
    public static Shortcut CtrlF11;
    public static Shortcut CtrlF12;
    public static Shortcut CtrlShiftF1;
    public static Shortcut CtrlShiftF2;
    public static Shortcut CtrlShiftF3;
    public static Shortcut CtrlShiftF4;
    public static Shortcut CtrlShiftF5;
    public static Shortcut CtrlShiftF6;
    public static Shortcut CtrlShiftF7;
    public static Shortcut CtrlShiftF8;
    public static Shortcut CtrlShiftF9;
    public static Shortcut CtrlShiftF10;
    public static Shortcut CtrlShiftF11;
    public static Shortcut CtrlShiftF12;
    public static Shortcut Ins;
    public static Shortcut CtrlIns;
    public static Shortcut ShiftIns;
    public static Shortcut Del;
    public static Shortcut CtrlDel;
    public static Shortcut ShiftDel;
    public static Shortcut AltRightArrow;
    public static Shortcut AltLeftArrow;
    public static Shortcut AltUpArrow;
    public static Shortcut AltDownArrow;
    public static Shortcut AltBksp;
    public static Shortcut AltF1;
    public static Shortcut AltF2;
    public static Shortcut AltF3;
    public static Shortcut AltF4;
    public static Shortcut AltF5;
    public static Shortcut AltF6;
    public static Shortcut AltF7;
    public static Shortcut AltF8;
    public static Shortcut AltF9;
    public static Shortcut AltF10;
    public static Shortcut AltF11;
    public static Shortcut AltF12;
    public static Shortcut Alt0;
    public static Shortcut Alt1;
    public static Shortcut Alt2;
    public static Shortcut Alt3;
    public static Shortcut Alt4;
    public static Shortcut Alt5;
    public static Shortcut Alt6;
    public static Shortcut Alt7;
    public static Shortcut Alt8;
    public static Shortcut Alt9;
    public static Shortcut Ctrl0;
    public static Shortcut Ctrl1;
    public static Shortcut Ctrl2;
    public static Shortcut Ctrl3;
    public static Shortcut Ctrl4;
    public static Shortcut Ctrl5;
    public static Shortcut Ctrl6;
    public static Shortcut Ctrl7;
    public static Shortcut Ctrl8;
    public static Shortcut Ctrl9;
    public static Shortcut CtrlShift0;
    public static Shortcut CtrlShift1;
    public static Shortcut CtrlShift2;
    public static Shortcut CtrlShift3;
    public static Shortcut CtrlShift4;
    public static Shortcut CtrlShift5;
    public static Shortcut CtrlShift6;
    public static Shortcut CtrlShift7;
    public static Shortcut CtrlShift8;
    public static Shortcut CtrlShift9;
}
public enum System.Windows.Forms.SizeGripStyle : Enum {
    public int value__;
    public static SizeGripStyle Auto;
    public static SizeGripStyle Show;
    public static SizeGripStyle Hide;
}
public enum System.Windows.Forms.SizeType : Enum {
    public int value__;
    public static SizeType AutoSize;
    public static SizeType Absolute;
    public static SizeType Percent;
}
public enum System.Windows.Forms.SortOrder : Enum {
    public int value__;
    public static SortOrder None;
    public static SortOrder Ascending;
    public static SortOrder Descending;
}
internal class System.Windows.Forms.SpecialFolderEnumConverter : AlphaSortedEnumConverter {
    public SpecialFolderEnumConverter(Type type);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultEventAttribute("SplitterMoved")]
[DockingAttribute("2")]
[DesignerAttribute("System.Windows.Forms.Design.SplitContainerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionSplitContainer")]
public class System.Windows.Forms.SplitContainer : ContainerControl {
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("FormAutoScrollDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("System.Drawing.Point", "0, 0")]
public Point AutoScrollOffset { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size AutoScrollMinSize { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size AutoScrollMargin { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("FormAutoScrollPositionDescr")]
public Point AutoScrollPosition { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("ContainerControlBindingContextDescr")]
public BindingContext BindingContext { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("SplitterBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ControlCollection Controls { get; }
    public DockStyle Dock { get; public set; }
    protected Size DefaultSize { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("SplitContainerFixedPanelDescr")]
public FixedPanel FixedPanel { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("SplitContainerIsSplitterFixedDescr")]
public bool IsSplitterFixed { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("SplitContainerOrientationDescr")]
public Orientation Orientation { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("SplitContainerPanel1Descr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public SplitterPanel Panel1 { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("SplitContainerPanel1CollapsedDescr")]
public bool Panel1Collapsed { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("SplitContainerPanel2CollapsedDescr")]
public bool Panel2Collapsed { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("25")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("SplitContainerPanel1MinSizeDescr")]
[RefreshPropertiesAttribute("1")]
public int Panel1MinSize { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("SplitContainerPanel2Descr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public SplitterPanel Panel2 { get; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("25")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("SplitContainerPanel2MinSizeDescr")]
[RefreshPropertiesAttribute("1")]
public int Panel2MinSize { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SettingsBindableAttribute("True")]
[SRDescriptionAttribute("SplitContainerSplitterDistanceDescr")]
[DefaultValueAttribute("50")]
public int SplitterDistance { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("1")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("SplitContainerSplitterIncrementDescr")]
public int SplitterIncrement { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("SplitContainerSplitterRectangleDescr")]
[BrowsableAttribute("False")]
public Rectangle SplitterRectangle { get; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("SplitContainerSplitterWidthDescr")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("4")]
public int SplitterWidth { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[DispIdAttribute("-516")]
[SRDescriptionAttribute("ControlTabStopDescr")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    private static SplitContainer();
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public virtual Point get_AutoScrollOffset();
    public virtual void set_AutoScrollOffset(Point value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Point get_AutoScrollPosition();
    public void set_AutoScrollPosition(Point value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public virtual BindingContext get_BindingContext();
    public virtual void set_BindingContext(BindingContext value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public ControlCollection get_Controls();
    public void add_ControlAdded(ControlEventHandler value);
    public void remove_ControlAdded(ControlEventHandler value);
    public void add_ControlRemoved(ControlEventHandler value);
    public void remove_ControlRemoved(ControlEventHandler value);
    public DockStyle get_Dock();
    public void set_Dock(DockStyle value);
    protected virtual Size get_DefaultSize();
    public FixedPanel get_FixedPanel();
    public void set_FixedPanel(FixedPanel value);
    public bool get_IsSplitterFixed();
    public void set_IsSplitterFixed(bool value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public SplitterPanel get_Panel1();
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public bool get_Panel1Collapsed();
    public void set_Panel1Collapsed(bool value);
    public bool get_Panel2Collapsed();
    public void set_Panel2Collapsed(bool value);
    public int get_Panel1MinSize();
    public void set_Panel1MinSize(int value);
    public SplitterPanel get_Panel2();
    public int get_Panel2MinSize();
    public void set_Panel2MinSize(int value);
    public int get_SplitterDistance();
    public void set_SplitterDistance(int value);
    public int get_SplitterIncrement();
    public void set_SplitterIncrement(int value);
    public Rectangle get_SplitterRectangle();
    public int get_SplitterWidth();
    public void set_SplitterWidth(int value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public void add_SplitterMoving(SplitterCancelEventHandler value);
    public void remove_SplitterMoving(SplitterCancelEventHandler value);
    public void add_SplitterMoved(SplitterEventHandler value);
    public void remove_SplitterMoved(SplitterEventHandler value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMove(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    public void OnSplitterMoving(SplitterCancelEventArgs e);
    public void OnSplitterMoved(SplitterEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    protected virtual void Select(bool directed, bool forward);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected virtual bool ProcessTabKey(bool forward);
    protected virtual void OnMouseCaptureChanged(EventArgs e);
    protected virtual void WndProc(Message& msg);
    [EditorBrowsableAttribute("2")]
protected virtual ControlCollection CreateControlsInstance();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultEventAttribute("SplitterMoved")]
[DefaultPropertyAttribute("Dock")]
[SRDescriptionAttribute("DescriptionSplitter")]
[DesignerAttribute("System.Windows.Forms.Design.SplitterDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.Splitter : Control {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AnchorStyles Anchor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AllowDrop { get; public set; }
    protected Size DefaultSize { get; }
    protected Cursor DefaultCursor { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("SplitterBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DockStyle Dock { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("25")]
[SRDescriptionAttribute("SplitterMinExtraDescr")]
public int MinExtra { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("25")]
[SRDescriptionAttribute("SplitterMinSizeDescr")]
public int MinSize { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("SplitterSplitPositionDescr")]
public int SplitPosition { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    private static Splitter();
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    protected virtual Size get_DefaultSize();
    protected virtual Cursor get_DefaultCursor();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public int get_MinExtra();
    public void set_MinExtra(int value);
    public int get_MinSize();
    public void set_MinSize(int value);
    public int get_SplitPosition();
    public void set_SplitPosition(int value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public void add_SplitterMoving(SplitterEventHandler value);
    public void remove_SplitterMoving(SplitterEventHandler value);
    public void add_SplitterMoved(SplitterEventHandler value);
    public void remove_SplitterMoved(SplitterEventHandler value);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnSplitterMoving(SplitterEventArgs sevent);
    protected virtual void OnSplitterMoved(SplitterEventArgs sevent);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public virtual string ToString();
}
public class System.Windows.Forms.SplitterCancelEventArgs : CancelEventArgs {
    public int MouseCursorX { get; }
    public int MouseCursorY { get; }
    public int SplitX { get; public set; }
    public int SplitY { get; public set; }
    public SplitterCancelEventArgs(int mouseCursorX, int mouseCursorY, int splitX, int splitY);
    public int get_MouseCursorX();
    public int get_MouseCursorY();
    public int get_SplitX();
    public void set_SplitX(int value);
    public int get_SplitY();
    public void set_SplitY(int value);
}
public class System.Windows.Forms.SplitterCancelEventHandler : MulticastDelegate {
    public SplitterCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SplitterCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SplitterCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.SplitterEventArgs : EventArgs {
    public int X { get; }
    public int Y { get; }
    public int SplitX { get; public set; }
    public int SplitY { get; public set; }
    public SplitterEventArgs(int x, int y, int splitX, int splitY);
    public int get_X();
    public int get_Y();
    public int get_SplitX();
    public void set_SplitX(int value);
    public int get_SplitY();
    public void set_SplitY(int value);
}
public class System.Windows.Forms.SplitterEventHandler : MulticastDelegate {
    public SplitterEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SplitterEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SplitterEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DockingAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.SplitterPanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("False")]
public class System.Windows.Forms.SplitterPanel : Panel {
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public bool AutoSize { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[LocalizableAttribute("False")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public AnchorStyles Anchor { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public BorderStyle BorderStyle { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DockStyle Dock { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DockPaddingEdges DockPadding { get; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlHeightDescr")]
public int Height { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Point Location { get; public set; }
    protected Padding DefaultMargin { get; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size MinimumSize { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size MaximumSize { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public string Name { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Control Parent { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Size Size { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int TabIndex { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public bool TabStop { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlWidthDescr")]
public int Width { get; public set; }
    public SplitterPanel(SplitContainer owner);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual AutoSizeMode get_AutoSizeMode();
    public virtual void set_AutoSizeMode(AutoSizeMode value);
    public AnchorStyles get_Anchor();
    public void set_Anchor(AnchorStyles value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public DockStyle get_Dock();
    public void set_Dock(DockStyle value);
    public DockPaddingEdges get_DockPadding();
    public int get_Height();
    public void set_Height(int value);
    public Point get_Location();
    public void set_Location(Point value);
    protected virtual Padding get_DefaultMargin();
    public Size get_MinimumSize();
    public void set_MinimumSize(Size value);
    public Size get_MaximumSize();
    public void set_MaximumSize(Size value);
    public string get_Name();
    public void set_Name(string value);
    public Control get_Parent();
    public void set_Parent(Control value);
    public Size get_Size();
    public void set_Size(Size value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public int get_Width();
    public void set_Width(int value);
    public void add_VisibleChanged(EventHandler value);
    public void remove_VisibleChanged(EventHandler value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
}
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.SRCategoryAttribute : CategoryAttribute {
    public SRCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.SRDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    public SRDescriptionAttribute(string description);
    public virtual string get_Description();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultEventAttribute("PanelClick")]
[DefaultPropertyAttribute("Text")]
[DesignerAttribute("System.Windows.Forms.Design.StatusBarDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.StatusBar : Control {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DockStyle Dock { get; public set; }
    [LocalizableAttribute("True")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("StatusBarPanelsDescr")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[MergablePropertyAttribute("False")]
public StatusBarPanelCollection Panels { get; }
    [LocalizableAttribute("True")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("StatusBarShowPanelsDescr")]
public bool ShowPanels { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("StatusBarSizingGripDescr")]
public bool SizingGrip { get; public set; }
    [DefaultValueAttribute("False")]
public bool TabStop { get; public set; }
    private static StatusBar();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public StatusBarPanelCollection get_Panels();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public bool get_ShowPanels();
    public void set_ShowPanels(bool value);
    public bool get_SizingGrip();
    public void set_SizingGrip(bool value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_DrawItem(StatusBarDrawItemEventHandler value);
    public void remove_DrawItem(StatusBarDrawItemEventHandler value);
    public void add_PanelClick(StatusBarPanelClickEventHandler value);
    public void remove_PanelClick(StatusBarPanelClickEventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    protected virtual void CreateHandle();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnPanelClick(StatusBarPanelClickEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnDrawItem(StatusBarDrawItemEventArgs sbdievent);
    protected virtual void OnResize(EventArgs e);
    public virtual string ToString();
    protected virtual void WndProc(Message& m);
}
public class System.Windows.Forms.StatusBarDrawItemEventArgs : DrawItemEventArgs {
    public StatusBarPanel Panel { get; }
    public StatusBarDrawItemEventArgs(Graphics g, Font font, Rectangle r, int itemId, DrawItemState itemState, StatusBarPanel panel);
    public StatusBarDrawItemEventArgs(Graphics g, Font font, Rectangle r, int itemId, DrawItemState itemState, StatusBarPanel panel, Color foreColor, Color backColor);
    public StatusBarPanel get_Panel();
}
public class System.Windows.Forms.StatusBarDrawItemEventHandler : MulticastDelegate {
    public StatusBarDrawItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StatusBarDrawItemEventArgs sbdevent);
    public virtual IAsyncResult BeginInvoke(object sender, StatusBarDrawItemEventArgs sbdevent, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("Text")]
public class System.Windows.Forms.StatusBarPanel : Component {
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("StatusBarPanelAlignmentDescr")]
public HorizontalAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("StatusBarPanelAutoSizeDescr")]
public StatusBarPanelAutoSize AutoSize { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("StatusBarPanelBorderStyleDescr")]
public StatusBarPanelBorderStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("StatusBarPanelIconDescr")]
public Icon Icon { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("10")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("StatusBarPanelMinWidthDescr")]
public int MinWidth { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("StatusBarPanelNameDescr")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public StatusBar Parent { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("StatusBarPanelStyleDescr")]
public StatusBarPanelStyle Style { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("StatusBarPanelTextDescr")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("StatusBarPanelToolTipTextDescr")]
public string ToolTipText { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("StatusBarPanelWidthDescr")]
public int Width { get; public set; }
    public HorizontalAlignment get_Alignment();
    public void set_Alignment(HorizontalAlignment value);
    public StatusBarPanelAutoSize get_AutoSize();
    public void set_AutoSize(StatusBarPanelAutoSize value);
    public StatusBarPanelBorderStyle get_BorderStyle();
    public void set_BorderStyle(StatusBarPanelBorderStyle value);
    public Icon get_Icon();
    public void set_Icon(Icon value);
    public int get_MinWidth();
    public void set_MinWidth(int value);
    public string get_Name();
    public void set_Name(string value);
    public StatusBar get_Parent();
    public StatusBarPanelStyle get_Style();
    public void set_Style(StatusBarPanelStyle value);
    public object get_Tag();
    public void set_Tag(object value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public int get_Width();
    public void set_Width(int value);
    public sealed virtual void BeginInit();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void EndInit();
    public virtual string ToString();
}
public enum System.Windows.Forms.StatusBarPanelAutoSize : Enum {
    public int value__;
    public static StatusBarPanelAutoSize None;
    public static StatusBarPanelAutoSize Spring;
    public static StatusBarPanelAutoSize Contents;
}
public enum System.Windows.Forms.StatusBarPanelBorderStyle : Enum {
    public int value__;
    public static StatusBarPanelBorderStyle None;
    public static StatusBarPanelBorderStyle Raised;
    public static StatusBarPanelBorderStyle Sunken;
}
public class System.Windows.Forms.StatusBarPanelClickEventArgs : MouseEventArgs {
    public StatusBarPanel StatusBarPanel { get; }
    public StatusBarPanelClickEventArgs(StatusBarPanel statusBarPanel, MouseButtons button, int clicks, int x, int y);
    public StatusBarPanel get_StatusBarPanel();
}
public class System.Windows.Forms.StatusBarPanelClickEventHandler : MulticastDelegate {
    public StatusBarPanelClickEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StatusBarPanelClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StatusBarPanelClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.StatusBarPanelStyle : Enum {
    public int value__;
    public static StatusBarPanelStyle Text;
    public static StatusBarPanelStyle OwnerDraw;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[SRDescriptionAttribute("DescriptionStatusStrip")]
public class System.Windows.Forms.StatusStrip : ToolStrip {
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripCanOverflowDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
public bool CanOverflow { get; public set; }
    protected bool DefaultShowItemToolTips { get; }
    protected Size DefaultSize { get; }
    protected Padding DefaultPadding { get; }
    protected DockStyle DefaultDock { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DockStyle Dock { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripGripStyle GripStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripLayoutStyle LayoutStyle { get; public set; }
    [BrowsableAttribute("False")]
public Padding Padding { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripShowItemToolTipsDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool ShowItemToolTips { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("StatusStripSizingGripDescr")]
public bool SizingGrip { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle SizeGripBounds { get; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripStretchDescr")]
public bool Stretch { get; public set; }
    private static StatusStrip();
    public bool get_CanOverflow();
    public void set_CanOverflow(bool value);
    protected virtual bool get_DefaultShowItemToolTips();
    protected virtual Size get_DefaultSize();
    protected virtual Padding get_DefaultPadding();
    protected virtual DockStyle get_DefaultDock();
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public ToolStripGripStyle get_GripStyle();
    public void set_GripStyle(ToolStripGripStyle value);
    public ToolStripLayoutStyle get_LayoutStyle();
    public void set_LayoutStyle(ToolStripLayoutStyle value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public bool get_ShowItemToolTips();
    public void set_ShowItemToolTips(bool value);
    public bool get_SizingGrip();
    public void set_SizingGrip(bool value);
    public Rectangle get_SizeGripBounds();
    public bool get_Stretch();
    public void set_Stretch(bool value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected internal virtual ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick);
    protected virtual void Dispose(bool disposing);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void SetDisplayedItems();
    protected virtual void OnSpringTableLayoutCore();
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.StructFormat : Enum {
    public int value__;
    public static StructFormat Ansi;
    public static StructFormat Unicode;
    public static StructFormat Auto;
}
public class System.Windows.Forms.SystemInformation : object {
    public static bool DragFullWindows { get; }
    public static bool HighContrast { get; }
    public static int MouseWheelScrollLines { get; }
    public static Size PrimaryMonitorSize { get; }
    public static int VerticalScrollBarWidth { get; }
    public static int HorizontalScrollBarHeight { get; }
    public static int CaptionHeight { get; }
    public static Size BorderSize { get; }
    public static Size FixedFrameBorderSize { get; }
    public static int VerticalScrollBarThumbHeight { get; }
    public static int HorizontalScrollBarThumbWidth { get; }
    public static Size IconSize { get; }
    public static Size CursorSize { get; }
    public static Font MenuFont { get; }
    public static int MenuHeight { get; }
    public static PowerStatus PowerStatus { get; }
    public static Rectangle WorkingArea { get; }
    public static int KanjiWindowHeight { get; }
    [EditorBrowsableAttribute("1")]
public static bool MousePresent { get; }
    public static int VerticalScrollBarArrowHeight { get; }
    public static int HorizontalScrollBarArrowWidth { get; }
    public static bool DebugOS { get; }
    public static bool MouseButtonsSwapped { get; }
    public static Size MinimumWindowSize { get; }
    public static Size CaptionButtonSize { get; }
    public static Size FrameBorderSize { get; }
    public static Size MinWindowTrackSize { get; }
    public static Size DoubleClickSize { get; }
    public static int DoubleClickTime { get; }
    public static Size IconSpacingSize { get; }
    public static bool RightAlignedMenus { get; }
    public static bool PenWindows { get; }
    public static bool DbcsEnabled { get; }
    public static int MouseButtons { get; }
    public static bool Secure { get; }
    public static Size Border3DSize { get; }
    public static Size MinimizedWindowSpacingSize { get; }
    public static Size SmallIconSize { get; }
    public static int ToolWindowCaptionHeight { get; }
    public static Size ToolWindowCaptionButtonSize { get; }
    public static Size MenuButtonSize { get; }
    public static ArrangeStartingPosition ArrangeStartingPosition { get; }
    public static ArrangeDirection ArrangeDirection { get; }
    public static Size MinimizedWindowSize { get; }
    public static Size MaxWindowTrackSize { get; }
    public static Size PrimaryMonitorMaximizedWindowSize { get; }
    public static bool Network { get; }
    public static bool TerminalServerSession { get; }
    public static BootMode BootMode { get; }
    public static Size DragSize { get; }
    public static bool ShowSounds { get; }
    public static Size MenuCheckSize { get; }
    public static bool MidEastEnabled { get; }
    public static bool NativeMouseWheelSupport { get; }
    public static bool MouseWheelPresent { get; }
    public static Rectangle VirtualScreen { get; }
    public static int MonitorCount { get; }
    public static bool MonitorsSameDisplayFormat { get; }
    public static string ComputerName { get; }
    public static string UserDomainName { get; }
    public static bool UserInteractive { get; }
    public static string UserName { get; }
    public static bool IsDropShadowEnabled { get; }
    public static bool IsFlatMenuEnabled { get; }
    public static bool IsFontSmoothingEnabled { get; }
    public static int FontSmoothingContrast { get; }
    public static int FontSmoothingType { get; }
    public static int IconHorizontalSpacing { get; }
    public static int IconVerticalSpacing { get; }
    public static bool IsIconTitleWrappingEnabled { get; }
    public static bool MenuAccessKeysUnderlined { get; }
    public static int KeyboardDelay { get; }
    public static bool IsKeyboardPreferred { get; }
    public static int KeyboardSpeed { get; }
    public static Size MouseHoverSize { get; }
    public static int MouseHoverTime { get; }
    public static int MouseSpeed { get; }
    public static bool IsSnapToDefaultEnabled { get; }
    public static LeftRightAlignment PopupMenuAlignment { get; }
    public static bool IsMenuFadeEnabled { get; }
    public static int MenuShowDelay { get; }
    public static bool IsComboBoxAnimationEnabled { get; }
    public static bool IsTitleBarGradientEnabled { get; }
    public static bool IsHotTrackingEnabled { get; }
    public static bool IsListBoxSmoothScrollingEnabled { get; }
    public static bool IsMenuAnimationEnabled { get; }
    public static bool IsSelectionFadeEnabled { get; }
    public static bool IsToolTipAnimationEnabled { get; }
    public static bool UIEffectsEnabled { get; }
    public static bool IsActiveWindowTrackingEnabled { get; }
    public static int ActiveWindowTrackingDelay { get; }
    public static bool IsMinimizeRestoreAnimationEnabled { get; }
    public static int BorderMultiplierFactor { get; }
    public static int CaretBlinkTime { get; }
    public static int CaretWidth { get; }
    public static int MouseWheelScrollDelta { get; }
    public static int VerticalFocusThickness { get; }
    public static int HorizontalFocusThickness { get; }
    public static int VerticalResizeBorderThickness { get; }
    public static int HorizontalResizeBorderThickness { get; }
    public static ScreenOrientation ScreenOrientation { get; }
    public static int SizingBorderWidth { get; }
    public static Size SmallCaptionButtonSize { get; }
    public static Size MenuBarButtonSize { get; }
    private static SystemInformation();
    public static bool get_DragFullWindows();
    public static bool get_HighContrast();
    public static int get_MouseWheelScrollLines();
    public static Size get_PrimaryMonitorSize();
    public static int get_VerticalScrollBarWidth();
    public static int get_HorizontalScrollBarHeight();
    public static int get_CaptionHeight();
    public static Size get_BorderSize();
    public static Size get_FixedFrameBorderSize();
    public static int get_VerticalScrollBarThumbHeight();
    public static int get_HorizontalScrollBarThumbWidth();
    public static Size get_IconSize();
    public static Size get_CursorSize();
    public static Font get_MenuFont();
    public static int get_MenuHeight();
    public static PowerStatus get_PowerStatus();
    public static Rectangle get_WorkingArea();
    public static int get_KanjiWindowHeight();
    public static bool get_MousePresent();
    public static int get_VerticalScrollBarArrowHeight();
    public static int get_HorizontalScrollBarArrowWidth();
    public static bool get_DebugOS();
    public static bool get_MouseButtonsSwapped();
    public static Size get_MinimumWindowSize();
    public static Size get_CaptionButtonSize();
    public static Size get_FrameBorderSize();
    public static Size get_MinWindowTrackSize();
    public static Size get_DoubleClickSize();
    public static int get_DoubleClickTime();
    public static Size get_IconSpacingSize();
    public static bool get_RightAlignedMenus();
    public static bool get_PenWindows();
    public static bool get_DbcsEnabled();
    public static int get_MouseButtons();
    public static bool get_Secure();
    public static Size get_Border3DSize();
    public static Size get_MinimizedWindowSpacingSize();
    public static Size get_SmallIconSize();
    public static int get_ToolWindowCaptionHeight();
    public static Size get_ToolWindowCaptionButtonSize();
    public static Size get_MenuButtonSize();
    public static ArrangeStartingPosition get_ArrangeStartingPosition();
    public static ArrangeDirection get_ArrangeDirection();
    public static Size get_MinimizedWindowSize();
    public static Size get_MaxWindowTrackSize();
    public static Size get_PrimaryMonitorMaximizedWindowSize();
    public static bool get_Network();
    public static bool get_TerminalServerSession();
    public static BootMode get_BootMode();
    public static Size get_DragSize();
    public static bool get_ShowSounds();
    public static Size get_MenuCheckSize();
    public static bool get_MidEastEnabled();
    public static bool get_NativeMouseWheelSupport();
    public static bool get_MouseWheelPresent();
    public static Rectangle get_VirtualScreen();
    public static int get_MonitorCount();
    public static bool get_MonitorsSameDisplayFormat();
    public static string get_ComputerName();
    public static string get_UserDomainName();
    public static bool get_UserInteractive();
    public static string get_UserName();
    public static bool get_IsDropShadowEnabled();
    public static bool get_IsFlatMenuEnabled();
    public static bool get_IsFontSmoothingEnabled();
    public static int get_FontSmoothingContrast();
    public static int get_FontSmoothingType();
    public static int get_IconHorizontalSpacing();
    public static int get_IconVerticalSpacing();
    public static bool get_IsIconTitleWrappingEnabled();
    public static bool get_MenuAccessKeysUnderlined();
    public static int get_KeyboardDelay();
    public static bool get_IsKeyboardPreferred();
    public static int get_KeyboardSpeed();
    public static Size get_MouseHoverSize();
    public static int get_MouseHoverTime();
    public static int get_MouseSpeed();
    public static bool get_IsSnapToDefaultEnabled();
    public static LeftRightAlignment get_PopupMenuAlignment();
    public static bool get_IsMenuFadeEnabled();
    public static int get_MenuShowDelay();
    public static bool get_IsComboBoxAnimationEnabled();
    public static bool get_IsTitleBarGradientEnabled();
    public static bool get_IsHotTrackingEnabled();
    public static bool get_IsListBoxSmoothScrollingEnabled();
    public static bool get_IsMenuAnimationEnabled();
    public static bool get_IsSelectionFadeEnabled();
    public static bool get_IsToolTipAnimationEnabled();
    public static bool get_UIEffectsEnabled();
    public static bool get_IsActiveWindowTrackingEnabled();
    public static int get_ActiveWindowTrackingDelay();
    public static bool get_IsMinimizeRestoreAnimationEnabled();
    public static int get_BorderMultiplierFactor();
    public static int get_CaretBlinkTime();
    public static int get_CaretWidth();
    public static int get_MouseWheelScrollDelta();
    public static int get_VerticalFocusThickness();
    public static int get_HorizontalFocusThickness();
    public static int get_VerticalResizeBorderThickness();
    public static int get_HorizontalResizeBorderThickness();
    public static ScreenOrientation get_ScreenOrientation();
    public static int get_SizingBorderWidth();
    public static Size get_SmallCaptionButtonSize();
    public static Size get_MenuBarButtonSize();
}
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.SystemParameter : Enum {
    public int value__;
    public static SystemParameter DropShadow;
    public static SystemParameter FlatMenu;
    public static SystemParameter FontSmoothingContrastMetric;
    public static SystemParameter FontSmoothingTypeMetric;
    public static SystemParameter MenuFadeEnabled;
    public static SystemParameter SelectionFade;
    public static SystemParameter ToolTipAnimationMetric;
    public static SystemParameter UIEffects;
    public static SystemParameter CaretWidthMetric;
    public static SystemParameter VerticalFocusThicknessMetric;
    public static SystemParameter HorizontalFocusThicknessMetric;
}
public enum System.Windows.Forms.TabAlignment : Enum {
    public int value__;
    public static TabAlignment Top;
    public static TabAlignment Bottom;
    public static TabAlignment Left;
    public static TabAlignment Right;
}
public enum System.Windows.Forms.TabAppearance : Enum {
    public int value__;
    public static TabAppearance Normal;
    public static TabAppearance Buttons;
    public static TabAppearance FlatButtons;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("TabPages")]
[DefaultEventAttribute("SelectedIndexChanged")]
[DesignerAttribute("System.Windows.Forms.Design.TabControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionTabControl")]
public class System.Windows.Forms.TabControl : Control {
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("TabBaseAlignmentDescr")]
public TabAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TabBaseAppearanceDescr")]
public TabAppearance Appearance { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    protected CreateParams CreateParams { get; }
    public Rectangle DisplayRectangle { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TabBaseDrawModeDescr")]
public TabDrawMode DrawMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TabBaseHotTrackDescr")]
public bool HotTrack { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("TabBaseImageListDescr")]
public ImageList ImageList { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TabBaseItemSizeDescr")]
public Size ItemSize { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TabBaseMultilineDescr")]
public bool Multiline { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TabBasePaddingDescr")]
public Point Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TabBaseRowCountDescr")]
public int RowCount { get; }
    [BrowsableAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("-1")]
[SRDescriptionAttribute("selectedIndexDescr")]
public int SelectedIndex { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TabControlSelectedTabDescr")]
public TabPage SelectedTab { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TabBaseSizeModeDescr")]
[RefreshPropertiesAttribute("2")]
public TabSizeMode SizeMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TabBaseShowToolTipsDescr")]
public bool ShowToolTips { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TabBaseTabCountDescr")]
public int TabCount { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TabControlTabsDescr")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorAttribute("System.Windows.Forms.Design.TabPageCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[MergablePropertyAttribute("False")]
public TabPageCollection TabPages { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    private static TabControl();
    public TabAlignment get_Alignment();
    public void set_Alignment(TabAlignment value);
    public TabAppearance get_Appearance();
    public void set_Appearance(TabAppearance value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    protected virtual CreateParams get_CreateParams();
    public virtual Rectangle get_DisplayRectangle();
    public TabDrawMode get_DrawMode();
    public void set_DrawMode(TabDrawMode value);
    public bool get_HotTrack();
    public void set_HotTrack(bool value);
    public ImageList get_ImageList();
    public void set_ImageList(ImageList value);
    public Size get_ItemSize();
    public void set_ItemSize(Size value);
    public bool get_Multiline();
    public void set_Multiline(bool value);
    public Point get_Padding();
    public void set_Padding(Point value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public int get_RowCount();
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public TabPage get_SelectedTab();
    public void set_SelectedTab(TabPage value);
    public TabSizeMode get_SizeMode();
    public void set_SizeMode(TabSizeMode value);
    public bool get_ShowToolTips();
    public void set_ShowToolTips(bool value);
    public int get_TabCount();
    public TabPageCollection get_TabPages();
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void add_DrawItem(DrawItemEventHandler value);
    public void remove_DrawItem(DrawItemEventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public void add_SelectedIndexChanged(EventHandler value);
    public void remove_SelectedIndexChanged(EventHandler value);
    public void add_Selecting(TabControlCancelEventHandler value);
    public void remove_Selecting(TabControlCancelEventHandler value);
    public void add_Selected(TabControlEventHandler value);
    public void remove_Selected(TabControlEventHandler value);
    public void add_Deselecting(TabControlCancelEventHandler value);
    public void remove_Deselecting(TabControlCancelEventHandler value);
    public void add_Deselected(TabControlEventHandler value);
    public void remove_Deselected(TabControlEventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    protected virtual ControlCollection CreateControlsInstance();
    protected virtual void CreateHandle();
    public void DeselectTab(int index);
    public void DeselectTab(TabPage tabPage);
    public void DeselectTab(string tabPageName);
    protected virtual void Dispose(bool disposing);
    public Control GetControl(int index);
    protected virtual Object[] GetItems();
    protected virtual Object[] GetItems(Type baseType);
    public Rectangle GetTabRect(int index);
    protected string GetToolTipText(object item);
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnDrawItem(DrawItemEventArgs e);
    protected virtual void OnEnter(EventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs ke);
    protected virtual void OnResize(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSelecting(TabControlCancelEventArgs e);
    protected virtual void OnSelected(TabControlEventArgs e);
    protected virtual void OnDeselecting(TabControlCancelEventArgs e);
    protected virtual void OnDeselected(TabControlEventArgs e);
    protected virtual bool ProcessKeyPreview(Message& m);
    protected virtual void OnFontChanged(EventArgs e);
    protected void RemoveAll();
    public void SelectTab(int index);
    public void SelectTab(TabPage tabPage);
    public void SelectTab(string tabPageName);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected void UpdateTabSelection(bool updateFocus);
    protected virtual void OnStyleChanged(EventArgs e);
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.TabControlAction : Enum {
    public int value__;
    public static TabControlAction Selecting;
    public static TabControlAction Selected;
    public static TabControlAction Deselecting;
    public static TabControlAction Deselected;
}
public class System.Windows.Forms.TabControlCancelEventArgs : CancelEventArgs {
    public TabPage TabPage { get; }
    public int TabPageIndex { get; }
    public TabControlAction Action { get; }
    public TabControlCancelEventArgs(TabPage tabPage, int tabPageIndex, bool cancel, TabControlAction action);
    public TabPage get_TabPage();
    public int get_TabPageIndex();
    public TabControlAction get_Action();
}
public class System.Windows.Forms.TabControlCancelEventHandler : MulticastDelegate {
    public TabControlCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TabControlCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TabControlCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.TabControlEventArgs : EventArgs {
    public TabPage TabPage { get; }
    public int TabPageIndex { get; }
    public TabControlAction Action { get; }
    public TabControlEventArgs(TabPage tabPage, int tabPageIndex, TabControlAction action);
    public TabPage get_TabPage();
    public int get_TabPageIndex();
    public TabControlAction get_Action();
}
public class System.Windows.Forms.TabControlEventHandler : MulticastDelegate {
    public TabControlEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TabControlEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TabControlEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.TabDrawMode : Enum {
    public int value__;
    public static TabDrawMode Normal;
    public static TabDrawMode OwnerDrawFixed;
}
public class System.Windows.Forms.TableLayoutCellPaintEventArgs : PaintEventArgs {
    public Rectangle CellBounds { get; }
    public int Row { get; }
    public int Column { get; }
    public TableLayoutCellPaintEventArgs(Graphics g, Rectangle clipRectangle, Rectangle cellBounds, int column, int row);
    public Rectangle get_CellBounds();
    public int get_Row();
    public int get_Column();
}
public class System.Windows.Forms.TableLayoutCellPaintEventHandler : MulticastDelegate {
    public TableLayoutCellPaintEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TableLayoutCellPaintEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TableLayoutCellPaintEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.TableLayoutColumnStyleCollection : TableLayoutStyleCollection {
    public ColumnStyle Item { get; public set; }
    public int Add(ColumnStyle columnStyle);
    public void Insert(int index, ColumnStyle columnStyle);
    public ColumnStyle get_Item(int index);
    public void set_Item(int index, ColumnStyle value);
    public void Remove(ColumnStyle columnStyle);
    public bool Contains(ColumnStyle columnStyle);
    public int IndexOf(ColumnStyle columnStyle);
}
[ListBindableAttribute("False")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.TableLayoutControlCollectionCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.TableLayoutControlCollection : ControlCollection {
    public TableLayoutPanel Container { get; }
    public TableLayoutControlCollection(TableLayoutPanel container);
    public TableLayoutPanel get_Container();
    public virtual void Add(Control control, int column, int row);
}
[ProvidePropertyAttribute("ColumnSpan", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("RowSpan", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("Row", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("Column", "System.Windows.Forms.Control")]
[ProvidePropertyAttribute("CellPosition", "System.Windows.Forms.Control")]
[DefaultPropertyAttribute("ColumnCount")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.TableLayoutPanelCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DockingAttribute("0")]
[DesignerAttribute("System.Windows.Forms.Design.TableLayoutPanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[SRDescriptionAttribute("DescriptionTableLayoutPanel")]
public class System.Windows.Forms.TableLayoutPanel : Panel {
    public LayoutEngine LayoutEngine { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public TableLayoutSettings LayoutSettings { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[LocalizableAttribute("True")]
public BorderStyle BorderStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TableLayoutPanelCellBorderStyleDescr")]
[LocalizableAttribute("True")]
public TableLayoutPanelCellBorderStyle CellBorderStyle { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
[SRDescriptionAttribute("ControlControlsDescr")]
public TableLayoutControlCollection Controls { get; }
    [SRDescriptionAttribute("GridPanelColumnsDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
public int ColumnCount { get; public set; }
    [SRDescriptionAttribute("TableLayoutPanelGrowStyleDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TableLayoutPanelGrowStyle GrowStyle { get; public set; }
    [SRDescriptionAttribute("GridPanelRowsDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
public int RowCount { get; public set; }
    [SRDescriptionAttribute("GridPanelRowStylesDescr")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatLayout")]
[DisplayNameAttribute("Rows")]
[MergablePropertyAttribute("False")]
[BrowsableAttribute("False")]
public TableLayoutRowStyleCollection RowStyles { get; }
    [SRDescriptionAttribute("GridPanelColumnStylesDescr")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatLayout")]
[DisplayNameAttribute("Columns")]
[BrowsableAttribute("False")]
[MergablePropertyAttribute("False")]
public TableLayoutColumnStyleCollection ColumnStyles { get; }
    private static TableLayoutPanel();
    public virtual LayoutEngine get_LayoutEngine();
    public TableLayoutSettings get_LayoutSettings();
    public void set_LayoutSettings(TableLayoutSettings value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public TableLayoutPanelCellBorderStyle get_CellBorderStyle();
    public void set_CellBorderStyle(TableLayoutPanelCellBorderStyle value);
    public TableLayoutControlCollection get_Controls();
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public TableLayoutPanelGrowStyle get_GrowStyle();
    public void set_GrowStyle(TableLayoutPanelGrowStyle value);
    public int get_RowCount();
    public void set_RowCount(int value);
    public TableLayoutRowStyleCollection get_RowStyles();
    public TableLayoutColumnStyleCollection get_ColumnStyles();
    [EditorBrowsableAttribute("2")]
protected virtual ControlCollection CreateControlsInstance();
    private sealed virtual override bool System.ComponentModel.IExtenderProvider.CanExtend(object obj);
    [SRDescriptionAttribute("GridPanelGetColumnSpanDescr")]
[DefaultValueAttribute("1")]
[SRCategoryAttribute("CatLayout")]
[DisplayNameAttribute("ColumnSpan")]
public int GetColumnSpan(Control control);
    public void SetColumnSpan(Control control, int value);
    [SRDescriptionAttribute("GridPanelGetRowSpanDescr")]
[DefaultValueAttribute("1")]
[SRCategoryAttribute("CatLayout")]
[DisplayNameAttribute("RowSpan")]
public int GetRowSpan(Control control);
    public void SetRowSpan(Control control, int value);
    [DefaultValueAttribute("-1")]
[SRDescriptionAttribute("GridPanelRowDescr")]
[SRCategoryAttribute("CatLayout")]
[DesignerSerializationVisibilityAttribute("0")]
[DisplayNameAttribute("Row")]
public int GetRow(Control control);
    public void SetRow(Control control, int row);
    [DefaultValueAttribute("System.Windows.Forms.TableLayoutPanelCellPosition", "-1,-1")]
[SRDescriptionAttribute("GridPanelCellPositionDescr")]
[SRCategoryAttribute("CatLayout")]
[DesignerSerializationVisibilityAttribute("0")]
[DisplayNameAttribute("Cell")]
public TableLayoutPanelCellPosition GetCellPosition(Control control);
    public void SetCellPosition(Control control, TableLayoutPanelCellPosition position);
    [DefaultValueAttribute("-1")]
[SRDescriptionAttribute("GridPanelColumnDescr")]
[SRCategoryAttribute("CatLayout")]
[DesignerSerializationVisibilityAttribute("0")]
[DisplayNameAttribute("Column")]
public int GetColumn(Control control);
    public void SetColumn(Control control, int column);
    public Control GetControlFromPosition(int column, int row);
    public TableLayoutPanelCellPosition GetPositionFromControl(Control control);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Int32[] GetColumnWidths();
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Int32[] GetRowHeights();
    public void add_CellPaint(TableLayoutCellPaintEventHandler value);
    public void remove_CellPaint(TableLayoutCellPaintEventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLayout(LayoutEventArgs levent);
    protected virtual void OnCellPaint(TableLayoutCellPaintEventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
}
public enum System.Windows.Forms.TableLayoutPanelCellBorderStyle : Enum {
    public int value__;
    public static TableLayoutPanelCellBorderStyle None;
    public static TableLayoutPanelCellBorderStyle Single;
    public static TableLayoutPanelCellBorderStyle Inset;
    public static TableLayoutPanelCellBorderStyle InsetDouble;
    public static TableLayoutPanelCellBorderStyle Outset;
    public static TableLayoutPanelCellBorderStyle OutsetDouble;
    public static TableLayoutPanelCellBorderStyle OutsetPartial;
}
[TypeConverterAttribute("System.Windows.Forms.TableLayoutPanelCellPositionTypeConverter")]
public class System.Windows.Forms.TableLayoutPanelCellPosition : ValueType {
    private int row;
    private int column;
    public int Row { get; public set; }
    public int Column { get; public set; }
    public TableLayoutPanelCellPosition(int column, int row);
    public int get_Row();
    public void set_Row(int value);
    public int get_Column();
    public void set_Column(int value);
    public virtual bool Equals(object other);
    public static bool op_Equality(TableLayoutPanelCellPosition p1, TableLayoutPanelCellPosition p2);
    public static bool op_Inequality(TableLayoutPanelCellPosition p1, TableLayoutPanelCellPosition p2);
    public virtual string ToString();
    public virtual int GetHashCode();
}
internal class System.Windows.Forms.TableLayoutPanelCellPositionTypeConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public enum System.Windows.Forms.TableLayoutPanelGrowStyle : Enum {
    public int value__;
    public static TableLayoutPanelGrowStyle FixedSize;
    public static TableLayoutPanelGrowStyle AddRows;
    public static TableLayoutPanelGrowStyle AddColumns;
}
[DefaultMemberAttribute("Item")]
public class System.Windows.Forms.TableLayoutRowStyleCollection : TableLayoutStyleCollection {
    public RowStyle Item { get; public set; }
    public int Add(RowStyle rowStyle);
    public void Insert(int index, RowStyle rowStyle);
    public RowStyle get_Item(int index);
    public void set_Item(int index, RowStyle value);
    public void Remove(RowStyle rowStyle);
    public bool Contains(RowStyle rowStyle);
    public int IndexOf(RowStyle rowStyle);
}
[TypeConverterAttribute("System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter")]
public class System.Windows.Forms.TableLayoutSettings : LayoutSettings {
    public LayoutEngine LayoutEngine { get; }
    [SRDescriptionAttribute("GridPanelColumnsDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("0")]
public int ColumnCount { get; public set; }
    [SRDescriptionAttribute("GridPanelRowsDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("0")]
public int RowCount { get; public set; }
    [SRDescriptionAttribute("GridPanelRowStylesDescr")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatLayout")]
public TableLayoutRowStyleCollection RowStyles { get; }
    [SRDescriptionAttribute("GridPanelColumnStylesDescr")]
[DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatLayout")]
public TableLayoutColumnStyleCollection ColumnStyles { get; }
    [SRDescriptionAttribute("TableLayoutPanelGrowStyleDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TableLayoutPanelGrowStyle GrowStyle { get; public set; }
    private static TableLayoutSettings();
    public virtual LayoutEngine get_LayoutEngine();
    public int get_ColumnCount();
    public void set_ColumnCount(int value);
    public int get_RowCount();
    public void set_RowCount(int value);
    public TableLayoutRowStyleCollection get_RowStyles();
    public TableLayoutColumnStyleCollection get_ColumnStyles();
    public TableLayoutPanelGrowStyle get_GrowStyle();
    public void set_GrowStyle(TableLayoutPanelGrowStyle value);
    public int GetColumnSpan(object control);
    public void SetColumnSpan(object control, int value);
    public int GetRowSpan(object control);
    public void SetRowSpan(object control, int value);
    [SRDescriptionAttribute("GridPanelRowDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("-1")]
public int GetRow(object control);
    public void SetRow(object control, int row);
    [SRDescriptionAttribute("TableLayoutSettingsGetCellPositionDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("-1")]
public TableLayoutPanelCellPosition GetCellPosition(object control);
    [SRDescriptionAttribute("TableLayoutSettingsSetCellPositionDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("-1")]
public void SetCellPosition(object control, TableLayoutPanelCellPosition cellPosition);
    [SRDescriptionAttribute("GridPanelColumnDescr")]
[SRCategoryAttribute("CatLayout")]
[DefaultValueAttribute("-1")]
public int GetColumn(object control);
    public void SetColumn(object control, int column);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
}
[TypeConverterAttribute("System.Windows.Forms.TableLayoutSettings/StyleConverter")]
public abstract class System.Windows.Forms.TableLayoutStyle : object {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SizeType SizeType { get; public set; }
    public SizeType get_SizeType();
    public void set_SizeType(SizeType value);
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Windows.Forms.Design.StyleCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public abstract class System.Windows.Forms.TableLayoutStyleCollection : object {
    private object System.Collections.IList.Item { get; private set; }
    public TableLayoutStyle Item { get; public set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private sealed virtual override int System.Collections.IList.Add(object style);
    public int Add(TableLayoutStyle style);
    private sealed virtual override void System.Collections.IList.Insert(int index, object style);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public TableLayoutStyle get_Item(int index);
    public void set_Item(int index, TableLayoutStyle value);
    private sealed virtual override void System.Collections.IList.Remove(object style);
    public sealed virtual void Clear();
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.Contains(object style);
    private sealed virtual override int System.Collections.IList.IndexOf(object style);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int startIndex);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.TabPageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultEventAttribute("Click")]
[DefaultPropertyAttribute("Text")]
public class System.Windows.Forms.TabPage : Panel {
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[LocalizableAttribute("False")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ControlBackColorDescr")]
public Color BackColor { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("-1")]
[SRDescriptionAttribute("TabItemImageIndexDescr")]
public int ImageIndex { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("TabItemImageIndexDescr")]
public string ImageKey { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public AnchorStyles Anchor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public DockStyle Dock { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Enabled { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TabItemUseVisualStyleBackColorDescr")]
public bool UseVisualStyleBackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Point Location { get; public set; }
    [DefaultValueAttribute("System.Drawing.Size", "0, 0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size MaximumSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size MinimumSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Size PreferredSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public int TabIndex { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [LocalizableAttribute("True")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public string Text { get; public set; }
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TabItemToolTipTextDescr")]
public string ToolTipText { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Visible { get; public set; }
    public TabPage(string text);
    public virtual AutoSizeMode get_AutoSizeMode();
    public virtual void set_AutoSizeMode(AutoSizeMode value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    protected virtual ControlCollection CreateControlsInstance();
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public bool get_UseVisualStyleBackColor();
    public void set_UseVisualStyleBackColor(bool value);
    public Point get_Location();
    public void set_Location(Point value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public Size get_PreferredSize();
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public void add_VisibleChanged(EventHandler value);
    public void remove_VisibleChanged(EventHandler value);
    public static TabPage GetTabPageOfComponent(object comp);
    protected virtual void OnEnter(EventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public virtual string ToString();
}
public class System.Windows.Forms.TabRenderer : object {
    public static bool IsSupported { get; }
    private static TabRenderer();
    public static bool get_IsSupported();
    public static void DrawTabItem(Graphics g, Rectangle bounds, TabItemState state);
    public static void DrawTabItem(Graphics g, Rectangle bounds, bool focused, TabItemState state);
    public static void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, TabItemState state);
    public static void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, bool focused, TabItemState state);
    public static void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, TextFormatFlags flags, bool focused, TabItemState state);
    public static void DrawTabItem(Graphics g, Rectangle bounds, Image image, Rectangle imageRectangle, bool focused, TabItemState state);
    public static void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, Image image, Rectangle imageRectangle, bool focused, TabItemState state);
    public static void DrawTabItem(Graphics g, Rectangle bounds, string tabItemText, Font font, TextFormatFlags flags, Image image, Rectangle imageRectangle, bool focused, TabItemState state);
    public static void DrawTabPage(Graphics g, Rectangle bounds);
}
public enum System.Windows.Forms.TabSizeMode : Enum {
    public int value__;
    public static TabSizeMode Normal;
    public static TabSizeMode FillToRight;
    public static TabSizeMode Fixed;
}
[ClassInterfaceAttribute("1")]
[ComVisibleAttribute("True")]
[DesignerAttribute("System.Windows.Forms.Design.TextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionTextBox")]
public class System.Windows.Forms.TextBox : TextBoxBase {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxAcceptsReturnDescr")]
public bool AcceptsReturn { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxAutoCompleteModeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteMode AutoCompleteMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxAutoCompleteSourceDescr")]
[TypeConverterAttribute("System.Windows.Forms.TextBoxAutoCompleteSourceConverter")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteSource AutoCompleteSource { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxAutoCompleteCustomSourceDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteStringCollection AutoCompleteCustomSource { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxCharacterCasingDescr")]
public CharacterCasing CharacterCasing { get; public set; }
    public bool Multiline { get; public set; }
    protected CreateParams CreateParams { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute(" ")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxPasswordCharDescr")]
[RefreshPropertiesAttribute("2")]
public char PasswordChar { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxScrollBarsDescr")]
public ScrollBars ScrollBars { get; public set; }
    public string Text { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxTextAlignDescr")]
public HorizontalAlignment TextAlign { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxUseSystemPasswordCharDescr")]
[RefreshPropertiesAttribute("2")]
public bool UseSystemPasswordChar { get; public set; }
    private static TextBox();
    public bool get_AcceptsReturn();
    public void set_AcceptsReturn(bool value);
    public AutoCompleteMode get_AutoCompleteMode();
    public void set_AutoCompleteMode(AutoCompleteMode value);
    public AutoCompleteSource get_AutoCompleteSource();
    public void set_AutoCompleteSource(AutoCompleteSource value);
    public AutoCompleteStringCollection get_AutoCompleteCustomSource();
    public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value);
    public CharacterCasing get_CharacterCasing();
    public void set_CharacterCasing(CharacterCasing value);
    public virtual bool get_Multiline();
    public virtual void set_Multiline(bool value);
    protected virtual CreateParams get_CreateParams();
    public char get_PasswordChar();
    public void set_PasswordChar(char value);
    public ScrollBars get_ScrollBars();
    public void set_ScrollBars(ScrollBars value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public HorizontalAlignment get_TextAlign();
    public void set_TextAlign(HorizontalAlignment value);
    public bool get_UseSystemPasswordChar();
    public void set_UseSystemPasswordChar(bool value);
    public void add_TextAlignChanged(EventHandler value);
    public void remove_TextAlignChanged(EventHandler value);
    protected virtual void Dispose(bool disposing);
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnTextAlignChanged(EventArgs e);
    protected virtual bool ProcessCmdKey(Message& m, Keys keyData);
    public void Paste(string text);
    protected virtual void WndProc(Message& m);
}
internal class System.Windows.Forms.TextBoxAutoCompleteSourceConverter : EnumConverter {
    public TextBoxAutoCompleteSourceConverter(Type type);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultEventAttribute("TextChanged")]
[DefaultBindingPropertyAttribute("Text")]
[DesignerAttribute("System.Windows.Forms.Design.TextBoxBaseDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Windows.Forms.TextBoxBase : Control {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxAcceptsTabDescr")]
public bool AcceptsTab { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxShortcutsEnabledDescr")]
public bool ShortcutsEnabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxAutoSizeDescr")]
[RefreshPropertiesAttribute("2")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoSize { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-501")]
[SRDescriptionAttribute("ControlBackColorDescr")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("TextBoxBorderDescr")]
public BorderStyle BorderStyle { get; public set; }
    protected bool CanEnableIme { get; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxCanUndoDescr")]
public bool CanUndo { get; }
    protected CreateParams CreateParams { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    protected Cursor DefaultCursor { get; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatAppearance")]
[DispIdAttribute("-513")]
[SRDescriptionAttribute("ControlForeColorDescr")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxHideSelectionDescr")]
public bool HideSelection { get; public set; }
    protected ImeMode ImeModeBase { get; protected set; }
    [SRCategoryAttribute("CatAppearance")]
[DesignerSerializationVisibilityAttribute("0")]
[MergablePropertyAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxLinesDescr")]
[EditorAttribute("System.Windows.Forms.Design.StringArrayEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public String[] Lines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("32767")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxMaxLengthDescr")]
public int MaxLength { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxModifiedDescr")]
public bool Modified { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxMultilineDescr")]
[RefreshPropertiesAttribute("1")]
public bool Multiline { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxPreferredHeightDescr")]
public int PreferredHeight { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("TextBoxReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectedTextDescr")]
public string SelectedText { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectionLengthDescr")]
public int SelectionLength { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectionStartDescr")]
public int SelectionStart { get; public set; }
    [LocalizableAttribute("True")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
public int TextLength { get; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxWordWrapDescr")]
public bool WordWrap { get; public set; }
    private static TextBoxBase();
    public bool get_AcceptsTab();
    public void set_AcceptsTab(bool value);
    public void add_AcceptsTabChanged(EventHandler value);
    public void remove_AcceptsTabChanged(EventHandler value);
    public virtual bool get_ShortcutsEnabled();
    public virtual void set_ShortcutsEnabled(bool value);
    protected virtual bool ProcessCmdKey(Message& msg, Keys keyData);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public void add_BorderStyleChanged(EventHandler value);
    public void remove_BorderStyleChanged(EventHandler value);
    protected virtual bool get_CanEnableIme();
    public bool get_CanUndo();
    protected virtual CreateParams get_CreateParams();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    protected virtual Cursor get_DefaultCursor();
    protected virtual Size get_DefaultSize();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public bool get_HideSelection();
    public void set_HideSelection(bool value);
    public void add_HideSelectionChanged(EventHandler value);
    public void remove_HideSelectionChanged(EventHandler value);
    protected virtual ImeMode get_ImeModeBase();
    protected virtual void set_ImeModeBase(ImeMode value);
    public String[] get_Lines();
    public void set_Lines(String[] value);
    public virtual int get_MaxLength();
    public virtual void set_MaxLength(int value);
    public bool get_Modified();
    public void set_Modified(bool value);
    public void add_ModifiedChanged(EventHandler value);
    public void remove_ModifiedChanged(EventHandler value);
    public virtual bool get_Multiline();
    public virtual void set_Multiline(bool value);
    public void add_MultilineChanged(EventHandler value);
    public void remove_MultilineChanged(EventHandler value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public int get_PreferredHeight();
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public void add_ReadOnlyChanged(EventHandler value);
    public void remove_ReadOnlyChanged(EventHandler value);
    public virtual string get_SelectedText();
    public virtual void set_SelectedText(string value);
    public virtual int get_SelectionLength();
    public virtual void set_SelectionLength(int value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual int get_TextLength();
    public bool get_WordWrap();
    public void set_WordWrap(bool value);
    public void AppendText(string text);
    public void Clear();
    public void ClearUndo();
    public void Copy();
    protected virtual void CreateHandle();
    public void Cut();
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    public void Paste();
    protected virtual bool ProcessDialogKey(Keys keyData);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    protected virtual void OnAcceptsTabChanged(EventArgs e);
    protected virtual void OnBorderStyleChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnHideSelectionChanged(EventArgs e);
    protected virtual void OnModifiedChanged(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    protected virtual void OnMultilineChanged(EventArgs e);
    protected virtual void OnPaddingChanged(EventArgs e);
    protected virtual void OnReadOnlyChanged(EventArgs e);
    protected virtual void OnTextChanged(EventArgs e);
    public virtual char GetCharFromPosition(Point pt);
    public virtual int GetCharIndexFromPosition(Point pt);
    public virtual int GetLineFromCharIndex(int index);
    public virtual Point GetPositionFromCharIndex(int index);
    public int GetFirstCharIndexFromLine(int lineNumber);
    public int GetFirstCharIndexOfCurrentLine();
    public void ScrollToCaret();
    public void DeselectAll();
    public void Select(int start, int length);
    public void SelectAll();
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public virtual string ToString();
    public void Undo();
    protected virtual void WndProc(Message& m);
}
public class System.Windows.Forms.TextBoxRenderer : object {
    public static bool IsSupported { get; }
    private static TextBoxRenderer();
    public static bool get_IsSupported();
    public static void DrawTextBox(Graphics g, Rectangle bounds, TextBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, TextBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, Rectangle textBounds, TextBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, TextFormatFlags flags, TextBoxState state);
    public static void DrawTextBox(Graphics g, Rectangle bounds, string textBoxText, Font font, Rectangle textBounds, TextFormatFlags flags, TextBoxState state);
}
public enum System.Windows.Forms.TextDataFormat : Enum {
    public int value__;
    public static TextDataFormat Text;
    public static TextDataFormat UnicodeText;
    public static TextDataFormat Rtf;
    public static TextDataFormat Html;
    public static TextDataFormat CommaSeparatedValue;
}
[FlagsAttribute]
public enum System.Windows.Forms.TextFormatFlags : Enum {
    public int value__;
    public static TextFormatFlags Bottom;
    public static TextFormatFlags EndEllipsis;
    public static TextFormatFlags ExpandTabs;
    public static TextFormatFlags ExternalLeading;
    public static TextFormatFlags Default;
    public static TextFormatFlags HidePrefix;
    public static TextFormatFlags HorizontalCenter;
    public static TextFormatFlags Internal;
    public static TextFormatFlags Left;
    public static TextFormatFlags ModifyString;
    public static TextFormatFlags NoClipping;
    public static TextFormatFlags NoPrefix;
    public static TextFormatFlags NoFullWidthCharacterBreak;
    public static TextFormatFlags PathEllipsis;
    public static TextFormatFlags PrefixOnly;
    public static TextFormatFlags Right;
    public static TextFormatFlags RightToLeft;
    public static TextFormatFlags SingleLine;
    public static TextFormatFlags TextBoxControl;
    public static TextFormatFlags Top;
    public static TextFormatFlags VerticalCenter;
    public static TextFormatFlags WordBreak;
    public static TextFormatFlags WordEllipsis;
    public static TextFormatFlags PreserveGraphicsClipping;
    public static TextFormatFlags PreserveGraphicsTranslateTransform;
    public static TextFormatFlags GlyphOverhangPadding;
    public static TextFormatFlags NoPadding;
    public static TextFormatFlags LeftAndRightPadding;
}
public enum System.Windows.Forms.TextImageRelation : Enum {
    public int value__;
    public static TextImageRelation Overlay;
    public static TextImageRelation ImageBeforeText;
    public static TextImageRelation TextBeforeImage;
    public static TextImageRelation ImageAboveText;
    public static TextImageRelation TextAboveImage;
}
public class System.Windows.Forms.TextRenderer : object {
    public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor);
    public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, Color backColor);
    public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, TextFormatFlags flags);
    public static void DrawText(IDeviceContext dc, string text, Font font, Point pt, Color foreColor, Color backColor, TextFormatFlags flags);
    public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor);
    public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, Color backColor);
    public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, TextFormatFlags flags);
    public static void DrawText(IDeviceContext dc, string text, Font font, Rectangle bounds, Color foreColor, Color backColor, TextFormatFlags flags);
    public static Size MeasureText(string text, Font font);
    public static Size MeasureText(string text, Font font, Size proposedSize);
    public static Size MeasureText(string text, Font font, Size proposedSize, TextFormatFlags flags);
    public static Size MeasureText(IDeviceContext dc, string text, Font font);
    public static Size MeasureText(IDeviceContext dc, string text, Font font, Size proposedSize);
    public static Size MeasureText(IDeviceContext dc, string text, Font font, Size proposedSize, TextFormatFlags flags);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
public class System.Windows.Forms.ThreadExceptionDialog : Form {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    public ThreadExceptionDialog(Exception t);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
}
public enum System.Windows.Forms.TickStyle : Enum {
    public int value__;
    public static TickStyle None;
    public static TickStyle TopLeft;
    public static TickStyle BottomRight;
    public static TickStyle Both;
}
[DefaultPropertyAttribute("Interval")]
[DefaultEventAttribute("Tick")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[SRDescriptionAttribute("DescriptionTimer")]
public class System.Windows.Forms.Timer : Component {
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TimerEnabledDescr")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("100")]
[SRDescriptionAttribute("TimerIntervalDescr")]
public int Interval { get; public set; }
    public Timer(IContainer container);
    public object get_Tag();
    public void set_Tag(object value);
    public void add_Tick(EventHandler value);
    public void remove_Tick(EventHandler value);
    protected virtual void Dispose(bool disposing);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public int get_Interval();
    public void set_Interval(int value);
    protected virtual void OnTick(EventArgs e);
    public void Start();
    public void Stop();
    public virtual string ToString();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultEventAttribute("ButtonClick")]
[DesignerAttribute("System.Windows.Forms.Design.ToolBarDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Buttons")]
public class System.Windows.Forms.ToolBar : Control {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolBarAppearanceDescr")]
public ToolBarAppearance Appearance { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolBarAutoSizeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("ToolBarBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolBarButtonsDescr")]
[MergablePropertyAttribute("False")]
public ToolBarButtonCollection Buttons { get; }
    [SRCategoryAttribute("CatAppearance")]
[RefreshPropertiesAttribute("1")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolBarButtonSizeDescr")]
public Size ButtonSize { get; public set; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Size DefaultSize { get; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ToolBarDividerDescr")]
public bool Divider { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DockStyle Dock { get; public set; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolBarDropDownArrowsDescr")]
public bool DropDownArrows { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ToolBarImageListDescr")]
public ImageList ImageList { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ToolBarImageSizeDescr")]
public Size ImageSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public RightToLeft RightToLeft { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolBarShowToolTipsDescr")]
public bool ShowToolTips { get; public set; }
    [DefaultValueAttribute("False")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolBarTextAlignDescr")]
public ToolBarTextAlign TextAlign { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolBarWrappableDescr")]
public bool Wrappable { get; public set; }
    public ToolBarAppearance get_Appearance();
    public void set_Appearance(ToolBarAppearance value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public ToolBarButtonCollection get_Buttons();
    public Size get_ButtonSize();
    public void set_ButtonSize(Size value);
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Size get_DefaultSize();
    public bool get_Divider();
    public void set_Divider(bool value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public bool get_DropDownArrows();
    public void set_DropDownArrows(bool value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public ImageList get_ImageList();
    public void set_ImageList(ImageList value);
    public Size get_ImageSize();
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    public bool get_ShowToolTips();
    public void set_ShowToolTips(bool value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public ToolBarTextAlign get_TextAlign();
    public void set_TextAlign(ToolBarTextAlign value);
    public bool get_Wrappable();
    public void set_Wrappable(bool value);
    public void add_ButtonClick(ToolBarButtonClickEventHandler value);
    public void remove_ButtonClick(ToolBarButtonClickEventHandler value);
    public void add_ButtonDropDown(ToolBarButtonClickEventHandler value);
    public void remove_ButtonDropDown(ToolBarButtonClickEventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    protected virtual void CreateHandle();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnButtonClick(ToolBarButtonClickEventArgs e);
    protected virtual void OnButtonDropDown(ToolBarButtonClickEventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public virtual string ToString();
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.ToolBarAppearance : Enum {
    public int value__;
    public static ToolBarAppearance Normal;
    public static ToolBarAppearance Flat;
}
[DesignerAttribute("System.Windows.Forms.Design.ToolBarButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Text")]
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
public class System.Windows.Forms.ToolBarButton : Component {
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRDescriptionAttribute("ToolBarButtonMenuDescr")]
public Menu DropDownMenu { get; public set; }
    [DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolBarButtonEnabledDescr")]
public bool Enabled { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("-1")]
[RefreshPropertiesAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolBarButtonImageIndexDescr")]
public int ImageIndex { get; public set; }
    [TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ToolBarButtonImageIndexDescr")]
public string ImageKey { get; public set; }
    [BrowsableAttribute("False")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public ToolBar Parent { get; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolBarButtonPartialPushDescr")]
public bool PartialPush { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolBarButtonPushedDescr")]
public bool Pushed { get; public set; }
    public Rectangle Rectangle { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolBarButtonStyleDescr")]
[RefreshPropertiesAttribute("2")]
public ToolBarButtonStyle Style { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ToolBarButtonTextDescr")]
public string Text { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ToolBarButtonToolTipTextDescr")]
public string ToolTipText { get; public set; }
    [DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolBarButtonVisibleDescr")]
public bool Visible { get; public set; }
    public ToolBarButton(string text);
    public Menu get_DropDownMenu();
    public void set_DropDownMenu(Menu value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public string get_Name();
    public void set_Name(string value);
    public ToolBar get_Parent();
    public bool get_PartialPush();
    public void set_PartialPush(bool value);
    public bool get_Pushed();
    public void set_Pushed(bool value);
    public Rectangle get_Rectangle();
    public ToolBarButtonStyle get_Style();
    public void set_Style(ToolBarButtonStyle value);
    public object get_Tag();
    public void set_Tag(object value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    protected virtual void Dispose(bool disposing);
    public virtual string ToString();
}
public class System.Windows.Forms.ToolBarButtonClickEventArgs : EventArgs {
    public ToolBarButton Button { get; public set; }
    public ToolBarButtonClickEventArgs(ToolBarButton button);
    public ToolBarButton get_Button();
    public void set_Button(ToolBarButton value);
}
public class System.Windows.Forms.ToolBarButtonClickEventHandler : MulticastDelegate {
    public ToolBarButtonClickEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolBarButtonClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolBarButtonClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ToolBarButtonStyle : Enum {
    public int value__;
    public static ToolBarButtonStyle PushButton;
    public static ToolBarButtonStyle ToggleButton;
    public static ToolBarButtonStyle Separator;
    public static ToolBarButtonStyle DropDownButton;
}
public enum System.Windows.Forms.ToolBarTextAlign : Enum {
    public int value__;
    public static ToolBarTextAlign Underneath;
    public static ToolBarTextAlign Right;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.ToolStripCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("Items")]
[SRDescriptionAttribute("DescriptionToolStrip")]
[DefaultEventAttribute("ItemClicked")]
public class System.Windows.Forms.ToolStrip : ScrollableControl {
    [DefaultValueAttribute("True")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMinSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Point AutoScrollPosition { get; public set; }
    public bool AllowDrop { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripAllowItemReorderDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool AllowItemReorder { get; public set; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ToolStripAllowMergeDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool AllowMerge { get; public set; }
    public AnchorStyles Anchor { get; public set; }
    [SRDescriptionAttribute("ToolStripBackColorDescr")]
[SRCategoryAttribute("CatAppearance")]
public Color BackColor { get; public set; }
    public BindingContext BindingContext { get; public set; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ToolStripCanOverflowDescr")]
[SRCategoryAttribute("CatLayout")]
public bool CanOverflow { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("False")]
public bool CausesValidation { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ControlCollection Controls { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Cursor Cursor { get; public set; }
    public Font Font { get; public set; }
    protected Size DefaultSize { get; }
    protected Padding DefaultPadding { get; }
    protected Padding DefaultMargin { get; }
    protected DockStyle DefaultDock { get; }
    protected Padding DefaultGripMargin { get; }
    protected bool DefaultShowItemToolTips { get; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("ToolStripDefaultDropDownDirectionDescr")]
[SRCategoryAttribute("CatBehavior")]
public ToolStripDropDownDirection DefaultDropDownDirection { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DockStyle Dock { get; public set; }
    protected internal ToolStripItemCollection DisplayedItems { get; }
    public Rectangle DisplayRectangle { get; }
    [BrowsableAttribute("False")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripGripStyleDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripGripStyle GripStyle { get; public set; }
    [BrowsableAttribute("False")]
public ToolStripGripDisplayStyle GripDisplayStyle { get; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripGripDisplayStyleDescr")]
public Padding GripMargin { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle GripRectangle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool HasChildren { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public HScrollProperties HorizontalScroll { get; }
    [DefaultValueAttribute("System.Drawing.Size", "16,16")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripImageScalingSizeDescr")]
public Size ImageScalingSize { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripImageListDescr")]
[BrowsableAttribute("False")]
public ImageList ImageList { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool IsCurrentlyDragging { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("ToolStripItemsDescr")]
[MergablePropertyAttribute("False")]
public ToolStripItemCollection Items { get; }
    [BrowsableAttribute("False")]
public bool IsDropDown { get; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public LayoutSettings LayoutSettings { get; public set; }
    [SRDescriptionAttribute("ToolStripLayoutStyle")]
[SRCategoryAttribute("CatLayout")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripLayoutStyle LayoutStyle { get; public set; }
    public LayoutEngine LayoutEngine { get; }
    protected internal Size MaxItemSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public ToolStripOverflowButton OverflowButton { get; }
    [BrowsableAttribute("False")]
public Orientation Orientation { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripStretchDescr")]
public bool Stretch { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripRenderer Renderer { get; public set; }
    [SRDescriptionAttribute("ToolStripRenderModeDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripRenderMode RenderMode { get; public set; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ToolStripShowItemToolTipsDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool ShowItemToolTips { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[DispIdAttribute("-516")]
[SRDescriptionAttribute("ControlTabStopDescr")]
public bool TabStop { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripTextDirectionDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripTextDirection TextDirection { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public VScrollProperties VerticalScroll { get; }
    public ToolStrip(ToolStripItem[] items);
    private static ToolStrip();
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public Point get_AutoScrollPosition();
    public void set_AutoScrollPosition(Point value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public bool get_AllowItemReorder();
    public void set_AllowItemReorder(bool value);
    public bool get_AllowMerge();
    public void set_AllowMerge(bool value);
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public void add_BeginDrag(EventHandler value);
    public void remove_BeginDrag(EventHandler value);
    public virtual BindingContext get_BindingContext();
    public virtual void set_BindingContext(BindingContext value);
    public bool get_CanOverflow();
    public void set_CanOverflow(bool value);
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    public ControlCollection get_Controls();
    public void add_ControlAdded(ControlEventHandler value);
    public void remove_ControlAdded(ControlEventHandler value);
    public virtual Cursor get_Cursor();
    public virtual void set_Cursor(Cursor value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    public void add_ControlRemoved(ControlEventHandler value);
    public void remove_ControlRemoved(ControlEventHandler value);
    public void add_EndDrag(EventHandler value);
    public void remove_EndDrag(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    protected virtual Size get_DefaultSize();
    protected virtual Padding get_DefaultPadding();
    protected virtual Padding get_DefaultMargin();
    protected virtual DockStyle get_DefaultDock();
    protected virtual Padding get_DefaultGripMargin();
    protected virtual bool get_DefaultShowItemToolTips();
    public virtual ToolStripDropDownDirection get_DefaultDropDownDirection();
    public virtual void set_DefaultDropDownDirection(ToolStripDropDownDirection value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    protected internal virtual ToolStripItemCollection get_DisplayedItems();
    public virtual Rectangle get_DisplayRectangle();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public ToolStripGripStyle get_GripStyle();
    public void set_GripStyle(ToolStripGripStyle value);
    public ToolStripGripDisplayStyle get_GripDisplayStyle();
    public Padding get_GripMargin();
    public void set_GripMargin(Padding value);
    public Rectangle get_GripRectangle();
    public bool get_HasChildren();
    public HScrollProperties get_HorizontalScroll();
    public Size get_ImageScalingSize();
    public void set_ImageScalingSize(Size value);
    public ImageList get_ImageList();
    public void set_ImageList(ImageList value);
    public sealed virtual bool get_IsCurrentlyDragging();
    public virtual ToolStripItemCollection get_Items();
    public void add_ItemAdded(ToolStripItemEventHandler value);
    public void remove_ItemAdded(ToolStripItemEventHandler value);
    public void add_ItemClicked(ToolStripItemClickedEventHandler value);
    public void remove_ItemClicked(ToolStripItemClickedEventHandler value);
    public void add_ItemRemoved(ToolStripItemEventHandler value);
    public void remove_ItemRemoved(ToolStripItemEventHandler value);
    public bool get_IsDropDown();
    public LayoutSettings get_LayoutSettings();
    public void set_LayoutSettings(LayoutSettings value);
    public ToolStripLayoutStyle get_LayoutStyle();
    public void set_LayoutStyle(ToolStripLayoutStyle value);
    public void add_LayoutCompleted(EventHandler value);
    public void remove_LayoutCompleted(EventHandler value);
    public void add_LayoutStyleChanged(EventHandler value);
    public void remove_LayoutStyleChanged(EventHandler value);
    public virtual LayoutEngine get_LayoutEngine();
    protected internal virtual Size get_MaxItemSize();
    public ToolStripOverflowButton get_OverflowButton();
    public Orientation get_Orientation();
    public void add_PaintGrip(PaintEventHandler value);
    public void remove_PaintGrip(PaintEventHandler value);
    public sealed virtual bool get_Stretch();
    public sealed virtual void set_Stretch(bool value);
    public ToolStripRenderer get_Renderer();
    public void set_Renderer(ToolStripRenderer value);
    public void add_RendererChanged(EventHandler value);
    public void remove_RendererChanged(EventHandler value);
    public ToolStripRenderMode get_RenderMode();
    public void set_RenderMode(ToolStripRenderMode value);
    public bool get_ShowItemToolTips();
    public void set_ShowItemToolTips(bool value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public virtual ToolStripTextDirection get_TextDirection();
    public virtual void set_TextDirection(ToolStripTextDirection value);
    public VScrollProperties get_VerticalScroll();
    protected virtual LayoutSettings CreateLayoutSettings(ToolStripLayoutStyle layoutStyle);
    protected internal virtual ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick);
    protected virtual void Dispose(bool disposing);
    public virtual ToolStripItem GetNextItem(ToolStripItem start, ArrowDirection direction);
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual bool IsInputChar(char charCode);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected virtual bool ProcessDialogKey(Keys keyData);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected virtual void OnBeginDrag(EventArgs e);
    protected virtual void OnEndDrag(EventArgs e);
    protected virtual void OnDockChanged(EventArgs e);
    protected virtual void OnRendererChanged(EventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnInvalidated(InvalidateEventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected internal virtual void OnItemAdded(ToolStripItemEventArgs e);
    protected virtual void OnItemClicked(ToolStripItemClickedEventArgs e);
    protected internal virtual void OnItemRemoved(ToolStripItemEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnLayoutCompleted(EventArgs e);
    protected virtual void OnLayoutStyleChanged(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs mea);
    protected virtual void OnMouseMove(MouseEventArgs mea);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseCaptureChanged(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mea);
    protected virtual void OnPaint(PaintEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected internal virtual void OnPaintGrip(PaintEventArgs e);
    protected virtual void OnScroll(ScrollEventArgs se);
    protected virtual void OnTabStopChanged(EventArgs e);
    [EditorBrowsableAttribute("1")]
public Control GetChildAtPoint(Point point);
    [EditorBrowsableAttribute("1")]
public Control GetChildAtPoint(Point pt, GetChildAtPointSkip skipValue);
    public ToolStripItem GetItemAt(int x, int y);
    public ToolStripItem GetItemAt(Point point);
    [EditorBrowsableAttribute("2")]
protected virtual void RestoreFocus();
    [EditorBrowsableAttribute("1")]
public void ResetMinimumSize();
    protected internal void SetItemLocation(ToolStripItem item, Point location);
    protected static void SetItemParent(ToolStripItem item, ToolStrip parent);
    protected virtual void SetVisibleCore(bool visible);
    protected virtual void Select(bool directed, bool forward);
    [EditorBrowsableAttribute("1")]
public void SetAutoScrollMargin(int x, int y);
    protected virtual void SetDisplayedItems();
    public virtual string ToString();
    protected virtual void WndProc(Message& m);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ControlCollection CreateControlsInstance();
}
public class System.Windows.Forms.ToolStripArrowRenderEventArgs : EventArgs {
    public Rectangle ArrowRectangle { get; public set; }
    public Color ArrowColor { get; public set; }
    public ArrowDirection Direction { get; public set; }
    public Graphics Graphics { get; }
    public ToolStripItem Item { get; }
    public ToolStripArrowRenderEventArgs(Graphics g, ToolStripItem toolStripItem, Rectangle arrowRectangle, Color arrowColor, ArrowDirection arrowDirection);
    public Rectangle get_ArrowRectangle();
    public void set_ArrowRectangle(Rectangle value);
    public Color get_ArrowColor();
    public void set_ArrowColor(Color value);
    public ArrowDirection get_Direction();
    public void set_Direction(ArrowDirection value);
    public Graphics get_Graphics();
    public ToolStripItem get_Item();
}
public class System.Windows.Forms.ToolStripArrowRenderEventHandler : MulticastDelegate {
    public ToolStripArrowRenderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripArrowRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripArrowRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolStripItemDesignerAvailabilityAttribute("1")]
public class System.Windows.Forms.ToolStripButton : ToolStripItem {
    [DefaultValueAttribute("True")]
public bool AutoToolTip { get; public set; }
    public bool CanSelect { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripButtonCheckOnClickDescr")]
public bool CheckOnClick { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripButtonCheckedDescr")]
public bool Checked { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("CheckBoxCheckStateDescr")]
public CheckState CheckState { get; public set; }
    protected bool DefaultAutoToolTip { get; }
    public ToolStripButton(string text);
    public ToolStripButton(Image image);
    public ToolStripButton(string text, Image image);
    public ToolStripButton(string text, Image image, EventHandler onClick);
    public ToolStripButton(string text, Image image, EventHandler onClick, string name);
    private static ToolStripButton();
    public bool get_AutoToolTip();
    public void set_AutoToolTip(bool value);
    public virtual bool get_CanSelect();
    public bool get_CheckOnClick();
    public void set_CheckOnClick(bool value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public CheckState get_CheckState();
    public void set_CheckState(CheckState value);
    public void add_CheckedChanged(EventHandler value);
    public void remove_CheckedChanged(EventHandler value);
    public void add_CheckStateChanged(EventHandler value);
    public void remove_CheckStateChanged(EventHandler value);
    protected virtual bool get_DefaultAutoToolTip();
    [EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnCheckStateChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnClick(EventArgs e);
}
[ToolStripItemDesignerAvailabilityAttribute("7")]
[DefaultPropertyAttribute("Items")]
public class System.Windows.Forms.ToolStripComboBox : ToolStripControlHost {
    [DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxAutoCompleteCustomSourceDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteStringCollection AutoCompleteCustomSource { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxAutoCompleteModeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteMode AutoCompleteMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxAutoCompleteSourceDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteSource AutoCompleteSource { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ComboBox ComboBox { get; }
    protected Size DefaultSize { get; }
    protected internal Padding DefaultMargin { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ComboBoxDropDownHeightDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DefaultValueAttribute("106")]
public int DropDownHeight { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ComboBoxStyleDescr")]
[RefreshPropertiesAttribute("2")]
public ComboBoxStyle DropDownStyle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ComboBoxDropDownWidthDescr")]
public int DropDownWidth { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxDroppedDownDescr")]
public bool DroppedDown { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxFlatStyleDescr")]
public FlatStyle FlatStyle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxIntegralHeightDescr")]
public bool IntegralHeight { get; public set; }
    [SRCategoryAttribute("CatData")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxItemsDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public ObjectCollection Items { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("8")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxMaxDropDownItemsDescr")]
public int MaxDropDownItems { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ComboBoxMaxLengthDescr")]
public int MaxLength { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedIndexDescr")]
public int SelectedIndex { get; public set; }
    [BrowsableAttribute("False")]
[BindableAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedItemDescr")]
public object SelectedItem { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectedTextDescr")]
public string SelectedText { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectionLengthDescr")]
public int SelectionLength { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ComboBoxSelectionStartDescr")]
public int SelectionStart { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ComboBoxSortedDescr")]
public bool Sorted { get; public set; }
    public ToolStripComboBox(string name);
    [EditorBrowsableAttribute("1")]
public ToolStripComboBox(Control c);
    private static ToolStripComboBox();
    public AutoCompleteStringCollection get_AutoCompleteCustomSource();
    public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value);
    public AutoCompleteMode get_AutoCompleteMode();
    public void set_AutoCompleteMode(AutoCompleteMode value);
    public AutoCompleteSource get_AutoCompleteSource();
    public void set_AutoCompleteSource(AutoCompleteSource value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public ComboBox get_ComboBox();
    protected virtual Size get_DefaultSize();
    protected internal virtual Padding get_DefaultMargin();
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_DropDown(EventHandler value);
    public void remove_DropDown(EventHandler value);
    public void add_DropDownClosed(EventHandler value);
    public void remove_DropDownClosed(EventHandler value);
    public void add_DropDownStyleChanged(EventHandler value);
    public void remove_DropDownStyleChanged(EventHandler value);
    public int get_DropDownHeight();
    public void set_DropDownHeight(int value);
    public ComboBoxStyle get_DropDownStyle();
    public void set_DropDownStyle(ComboBoxStyle value);
    public int get_DropDownWidth();
    public void set_DropDownWidth(int value);
    public bool get_DroppedDown();
    public void set_DroppedDown(bool value);
    public FlatStyle get_FlatStyle();
    public void set_FlatStyle(FlatStyle value);
    public bool get_IntegralHeight();
    public void set_IntegralHeight(bool value);
    public ObjectCollection get_Items();
    public int get_MaxDropDownItems();
    public void set_MaxDropDownItems(int value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public int get_SelectedIndex();
    public void set_SelectedIndex(int value);
    public void add_SelectedIndexChanged(EventHandler value);
    public void remove_SelectedIndexChanged(EventHandler value);
    public object get_SelectedItem();
    public void set_SelectedItem(object value);
    public string get_SelectedText();
    public void set_SelectedText(string value);
    public int get_SelectionLength();
    public void set_SelectionLength(int value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    public void add_TextUpdate(EventHandler value);
    public void remove_TextUpdate(EventHandler value);
    public void BeginUpdate();
    public void EndUpdate();
    public int FindString(string s);
    public int FindString(string s, int startIndex);
    public int FindStringExact(string s);
    public int FindStringExact(string s, int startIndex);
    public int GetItemHeight(int index);
    public void Select(int start, int length);
    public void SelectAll();
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected virtual void OnDropDown(EventArgs e);
    protected virtual void OnDropDownClosed(EventArgs e);
    protected virtual void OnDropDownStyleChanged(EventArgs e);
    protected virtual void OnSelectedIndexChanged(EventArgs e);
    protected virtual void OnSelectionChangeCommitted(EventArgs e);
    protected virtual void OnTextUpdate(EventArgs e);
    protected virtual void OnSubscribeControlEvents(Control control);
    protected virtual void OnUnsubscribeControlEvents(Control control);
    public virtual string ToString();
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripContainerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("ToolStripContainerDesc")]
public class System.Windows.Forms.ToolStripContainer : ContainerControl {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMinSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerBottomToolStripPanelDescr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ToolStripPanel BottomToolStripPanel { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerBottomToolStripPanelVisibleDescr")]
[DefaultValueAttribute("True")]
public bool BottomToolStripPanelVisible { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerContentPanelDescr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ToolStripContentPanel ContentPanel { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CausesValidation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Cursor Cursor { get; public set; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerLeftToolStripPanelDescr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ToolStripPanel LeftToolStripPanel { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerLeftToolStripPanelVisibleDescr")]
[DefaultValueAttribute("True")]
public bool LeftToolStripPanelVisible { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerRightToolStripPanelDescr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ToolStripPanel RightToolStripPanel { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerRightToolStripPanelVisibleDescr")]
[DefaultValueAttribute("True")]
public bool RightToolStripPanelVisible { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerTopToolStripPanelDescr")]
[LocalizableAttribute("False")]
[DesignerSerializationVisibilityAttribute("2")]
public ToolStripPanel TopToolStripPanel { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripContainerTopToolStripPanelVisibleDescr")]
[DefaultValueAttribute("True")]
public bool TopToolStripPanelVisible { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ControlCollection Controls { get; }
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public Image get_BackgroundImage();
    public void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public ToolStripPanel get_BottomToolStripPanel();
    public bool get_BottomToolStripPanelVisible();
    public void set_BottomToolStripPanelVisible(bool value);
    public ToolStripContentPanel get_ContentPanel();
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    public ContextMenuStrip get_ContextMenuStrip();
    public void set_ContextMenuStrip(ContextMenuStrip value);
    public void add_ContextMenuStripChanged(EventHandler value);
    public void remove_ContextMenuStripChanged(EventHandler value);
    public virtual Cursor get_Cursor();
    public virtual void set_Cursor(Cursor value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    protected virtual Size get_DefaultSize();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public ToolStripPanel get_LeftToolStripPanel();
    public bool get_LeftToolStripPanelVisible();
    public void set_LeftToolStripPanelVisible(bool value);
    public ToolStripPanel get_RightToolStripPanel();
    public bool get_RightToolStripPanelVisible();
    public void set_RightToolStripPanelVisible(bool value);
    public ToolStripPanel get_TopToolStripPanel();
    public bool get_TopToolStripPanelVisible();
    public void set_TopToolStripPanelVisible(bool value);
    public ControlCollection get_Controls();
    [EditorBrowsableAttribute("2")]
protected virtual ControlCollection CreateControlsInstance();
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnSizeChanged(EventArgs e);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripContentPanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("Load")]
[DockingAttribute("0")]
[InitializationEventAttribute("Load")]
[ToolboxItemAttribute("False")]
public class System.Windows.Forms.ToolStripContentPanel : Panel {
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[LocalizableAttribute("False")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public AnchorStyles Anchor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMinSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoSize { get; public set; }
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CausesValidation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public DockStyle Dock { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Point Location { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size MinimumSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size MaximumSize { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public int TabIndex { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripRenderer Renderer { get; public set; }
    [SRDescriptionAttribute("ToolStripRenderModeDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripRenderMode RenderMode { get; public set; }
    private static ToolStripContentPanel();
    public virtual AutoSizeMode get_AutoSizeMode();
    public virtual void set_AutoSizeMode(AutoSizeMode value);
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public void add_CausesValidationChanged(EventHandler value);
    public void remove_CausesValidationChanged(EventHandler value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    public void add_Load(EventHandler value);
    public void remove_Load(EventHandler value);
    public Point get_Location();
    public void set_Location(Point value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public string get_Name();
    public void set_Name(string value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public ToolStripRenderer get_Renderer();
    public void set_Renderer(ToolStripRenderer value);
    public ToolStripRenderMode get_RenderMode();
    public void set_RenderMode(ToolStripRenderMode value);
    public void add_RendererChanged(EventHandler value);
    public void remove_RendererChanged(EventHandler value);
    protected virtual void OnHandleCreated(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnLoad(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnRendererChanged(EventArgs e);
}
public class System.Windows.Forms.ToolStripContentPanelRenderEventArgs : EventArgs {
    public Graphics Graphics { get; }
    public bool Handled { get; public set; }
    public ToolStripContentPanel ToolStripContentPanel { get; }
    public ToolStripContentPanelRenderEventArgs(Graphics g, ToolStripContentPanel contentPanel);
    public Graphics get_Graphics();
    public bool get_Handled();
    public void set_Handled(bool value);
    public ToolStripContentPanel get_ToolStripContentPanel();
}
public class System.Windows.Forms.ToolStripContentPanelRenderEventHandler : MulticastDelegate {
    public ToolStripContentPanelRenderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripContentPanelRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripContentPanelRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ToolStripControlHost : ToolStripItem {
    public Color BackColor { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemImageDescr")]
[DefaultValueAttribute("")]
public Image BackgroundImage { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlBackgroundImageLayoutDescr")]
public ImageLayout BackgroundImageLayout { get; public set; }
    public bool CanSelect { get; }
    [SRCategoryAttribute("CatFocus")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("ControlCausesValidationDescr")]
public bool CausesValidation { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("False")]
public ContentAlignment ControlAlign { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Control Control { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripItemDisplayStyle DisplayStyle { get; public set; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool DoubleClickEnabled { get; public set; }
    public Font Font { get; public set; }
    public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
public bool Focused { get; }
    public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image Image { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripItemImageScaling ImageScaling { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color ImageTransparentColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ContentAlignment ImageAlign { get; public set; }
    public RightToLeft RightToLeft { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool RightToLeftAutoMirrorImage { get; public set; }
    public bool Selected { get; }
    public Size Size { get; public set; }
    [EditorBrowsableAttribute("2")]
public ISite Site { get; public set; }
    [DefaultValueAttribute("")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContentAlignment TextAlign { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripTextDirection TextDirection { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public TextImageRelation TextImageRelation { get; public set; }
    public ToolStripControlHost(Control c);
    public ToolStripControlHost(Control c, string name);
    private static ToolStripControlHost();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public virtual bool get_CanSelect();
    public bool get_CausesValidation();
    public void set_CausesValidation(bool value);
    public ContentAlignment get_ControlAlign();
    public void set_ControlAlign(ContentAlignment value);
    public Control get_Control();
    protected virtual Size get_DefaultSize();
    public ToolStripItemDisplayStyle get_DisplayStyle();
    public void set_DisplayStyle(ToolStripItemDisplayStyle value);
    public void add_DisplayStyleChanged(EventHandler value);
    public void remove_DisplayStyleChanged(EventHandler value);
    public bool get_DoubleClickEnabled();
    public void set_DoubleClickEnabled(bool value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public virtual bool get_Focused();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_GotFocus(EventHandler value);
    public void remove_GotFocus(EventHandler value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public ToolStripItemImageScaling get_ImageScaling();
    public void set_ImageScaling(ToolStripItemImageScaling value);
    public Color get_ImageTransparentColor();
    public void set_ImageTransparentColor(Color value);
    public ContentAlignment get_ImageAlign();
    public void set_ImageAlign(ContentAlignment value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public void add_LostFocus(EventHandler value);
    public void remove_LostFocus(EventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public bool get_RightToLeftAutoMirrorImage();
    public void set_RightToLeftAutoMirrorImage(bool value);
    public virtual bool get_Selected();
    public virtual Size get_Size();
    public virtual void set_Size(Size value);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public ContentAlignment get_TextAlign();
    public void set_TextAlign(ContentAlignment value);
    public virtual ToolStripTextDirection get_TextDirection();
    public virtual void set_TextDirection(ToolStripTextDirection value);
    public TextImageRelation get_TextImageRelation();
    public void set_TextImageRelation(TextImageRelation value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    [EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void Dispose(bool disposing);
    [EditorBrowsableAttribute("2")]
public void Focus();
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected virtual void OnEnter(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLeave(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnBoundsChanged();
    protected virtual void OnPaint(PaintEventArgs e);
    protected internal virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnParentChanged(ToolStrip oldParent, ToolStrip newParent);
    protected virtual void OnSubscribeControlEvents(Control control);
    protected virtual void OnUnsubscribeControlEvents(Control control);
    protected virtual void OnValidating(CancelEventArgs e);
    protected virtual void OnValidated(EventArgs e);
    protected virtual void OnHostedControlResize(EventArgs e);
    protected internal virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected internal virtual bool ProcessDialogKey(Keys keyData);
    protected virtual void SetVisibleCore(bool visible);
    [EditorBrowsableAttribute("1")]
public virtual void ResetBackColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetForeColor();
}
[DesignerAttribute("System.Windows.Forms.Design.ToolStripDropDownDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
public class System.Windows.Forms.ToolStripDropDown : ToolStrip {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool AllowItemReorder { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlAllowTransparencyDescr")]
public bool AllowTransparency { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public AnchorStyles Anchor { get; public set; }
    [DefaultValueAttribute("True")]
public bool AutoSize { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripDropDownAutoCloseDescr")]
public bool AutoClose { get; public set; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool CanOverflow { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContextMenu ContextMenu { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Padding DefaultPadding { get; }
    protected bool DefaultShowItemToolTips { get; }
    protected DockStyle DefaultDock { get; }
    public ToolStripDropDownDirection DefaultDropDownDirection { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
public DockStyle Dock { get; public set; }
    public bool DropShadowEnabled { get; public set; }
    public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ToolStripGripDisplayStyle GripDisplayStyle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Rectangle GripRectangle { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding GripMargin { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ToolStripGripStyle GripStyle { get; public set; }
    [BrowsableAttribute("False")]
public bool IsAutoGenerated { get; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public Point Location { get; public set; }
    protected internal Size MaxItemSize { get; }
    [SRCategoryAttribute("CatWindowStyle")]
[TypeConverterAttribute("System.Windows.Forms.OpacityConverter")]
[SRDescriptionAttribute("FormOpacityDescr")]
[DefaultValueAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public double Opacity { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ToolStripOverflowButton OverflowButton { get; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
public ToolStripItem OwnerItem { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
public Region Region { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[AmbientValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ControlRightToLeftDescr")]
public RightToLeft RightToLeft { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Stretch { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripTextDirectionDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripTextDirection TextDirection { get; public set; }
    protected bool TopMost { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public bool TopLevel { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int TabIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlVisibleDescr")]
[DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Visible { get; public set; }
    private static ToolStripDropDown();
    public bool get_AllowItemReorder();
    public void set_AllowItemReorder(bool value);
    public bool get_AllowTransparency();
    public void set_AllowTransparency(bool value);
    public virtual AnchorStyles get_Anchor();
    public virtual void set_Anchor(AnchorStyles value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public bool get_AutoClose();
    public void set_AutoClose(bool value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public void add_BindingContextChanged(EventHandler value);
    public void remove_BindingContextChanged(EventHandler value);
    public bool get_CanOverflow();
    public void set_CanOverflow(bool value);
    public void add_ChangeUICues(UICuesEventHandler value);
    public void remove_ChangeUICues(UICuesEventHandler value);
    public ContextMenu get_ContextMenu();
    public void set_ContextMenu(ContextMenu value);
    public void add_ContextMenuChanged(EventHandler value);
    public void remove_ContextMenuChanged(EventHandler value);
    public ContextMenuStrip get_ContextMenuStrip();
    public void set_ContextMenuStrip(ContextMenuStrip value);
    public void add_ContextMenuStripChanged(EventHandler value);
    public void remove_ContextMenuStripChanged(EventHandler value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Padding get_DefaultPadding();
    protected virtual bool get_DefaultShowItemToolTips();
    protected virtual DockStyle get_DefaultDock();
    public virtual ToolStripDropDownDirection get_DefaultDropDownDirection();
    public virtual void set_DefaultDropDownDirection(ToolStripDropDownDirection value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public void add_DockChanged(EventHandler value);
    public void remove_DockChanged(EventHandler value);
    public bool get_DropShadowEnabled();
    public void set_DropShadowEnabled(bool value);
    public void add_Closed(ToolStripDropDownClosedEventHandler value);
    public void remove_Closed(ToolStripDropDownClosedEventHandler value);
    public void add_Closing(ToolStripDropDownClosingEventHandler value);
    public void remove_Closing(ToolStripDropDownClosingEventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public ToolStripGripDisplayStyle get_GripDisplayStyle();
    public Rectangle get_GripRectangle();
    public Padding get_GripMargin();
    public void set_GripMargin(Padding value);
    public ToolStripGripStyle get_GripStyle();
    public void set_GripStyle(ToolStripGripStyle value);
    public void add_HelpRequested(HelpEventHandler value);
    public void remove_HelpRequested(HelpEventHandler value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public bool get_IsAutoGenerated();
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public Point get_Location();
    public void set_Location(Point value);
    public void add_Opening(CancelEventHandler value);
    public void remove_Opening(CancelEventHandler value);
    public void add_Opened(EventHandler value);
    public void remove_Opened(EventHandler value);
    protected internal virtual Size get_MaxItemSize();
    public double get_Opacity();
    public void set_Opacity(double value);
    public ToolStripOverflowButton get_OverflowButton();
    public ToolStripItem get_OwnerItem();
    public void set_OwnerItem(ToolStripItem value);
    public Region get_Region();
    public void set_Region(Region value);
    public void add_RegionChanged(EventHandler value);
    public void remove_RegionChanged(EventHandler value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public void add_Scroll(ScrollEventHandler value);
    public void remove_Scroll(ScrollEventHandler value);
    public bool get_Stretch();
    public void set_Stretch(bool value);
    public void add_StyleChanged(EventHandler value);
    public void remove_StyleChanged(EventHandler value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public virtual ToolStripTextDirection get_TextDirection();
    public virtual void set_TextDirection(ToolStripTextDirection value);
    protected virtual bool get_TopMost();
    public bool get_TopLevel();
    public void set_TopLevel(bool value);
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public bool get_Visible();
    public void set_Visible(bool value);
    protected virtual void Dispose(bool disposing);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual LayoutSettings CreateLayoutSettings(ToolStripLayoutStyle style);
    protected virtual void CreateHandle();
    public void Close();
    public void Close(ToolStripDropDownCloseReason reason);
    protected virtual void OnClosed(ToolStripDropDownClosedEventArgs e);
    protected virtual void OnClosing(ToolStripDropDownClosingEventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnItemClicked(ToolStripItemClickedEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnOpening(CancelEventArgs e);
    protected virtual void OnOpened(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mea);
    protected virtual bool ProcessDialogKey(Keys keyData);
    [EditorBrowsableAttribute("2")]
protected virtual bool ProcessDialogChar(char charCode);
    protected internal virtual bool ProcessMnemonic(char charCode);
    [EditorBrowsableAttribute("1")]
protected virtual void ScaleCore(float dx, float dy);
    protected virtual void ScaleControl(SizeF factor, BoundsSpecified specified);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    protected virtual void SetVisibleCore(bool visible);
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public void Show();
    public void Show(Control control, Point position);
    public void Show(Control control, Point position, ToolStripDropDownDirection direction);
    public void Show(Control control, int x, int y);
    public void Show(Point screenLocation);
    public void Show(Point position, ToolStripDropDownDirection direction);
    public void Show(int x, int y);
    protected virtual void WndProc(Message& m);
}
[ToolStripItemDesignerAvailabilityAttribute("9")]
public class System.Windows.Forms.ToolStripDropDownButton : ToolStripDropDownItem {
    [DefaultValueAttribute("True")]
public bool AutoToolTip { get; public set; }
    protected bool DefaultAutoToolTip { get; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ToolStripDropDownButtonShowDropDownArrowDescr")]
[SRCategoryAttribute("CatAppearance")]
public bool ShowDropDownArrow { get; public set; }
    public ToolStripDropDownButton(string text);
    public ToolStripDropDownButton(Image image);
    public ToolStripDropDownButton(string text, Image image);
    public ToolStripDropDownButton(string text, Image image, EventHandler onClick);
    public ToolStripDropDownButton(string text, Image image, EventHandler onClick, string name);
    public ToolStripDropDownButton(string text, Image image, ToolStripItem[] dropDownItems);
    public bool get_AutoToolTip();
    public void set_AutoToolTip(bool value);
    protected virtual bool get_DefaultAutoToolTip();
    public bool get_ShowDropDownArrow();
    public void set_ShowDropDownArrow(bool value);
    protected virtual ToolStripDropDown CreateDefaultDropDown();
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected internal virtual bool ProcessMnemonic(char charCode);
}
public class System.Windows.Forms.ToolStripDropDownClosedEventArgs : EventArgs {
    public ToolStripDropDownCloseReason CloseReason { get; }
    public ToolStripDropDownClosedEventArgs(ToolStripDropDownCloseReason reason);
    public ToolStripDropDownCloseReason get_CloseReason();
}
public class System.Windows.Forms.ToolStripDropDownClosedEventHandler : MulticastDelegate {
    public ToolStripDropDownClosedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripDropDownClosedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripDropDownClosedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ToolStripDropDownCloseReason : Enum {
    public int value__;
    public static ToolStripDropDownCloseReason AppFocusChange;
    public static ToolStripDropDownCloseReason AppClicked;
    public static ToolStripDropDownCloseReason ItemClicked;
    public static ToolStripDropDownCloseReason Keyboard;
    public static ToolStripDropDownCloseReason CloseCalled;
}
public class System.Windows.Forms.ToolStripDropDownClosingEventArgs : CancelEventArgs {
    public ToolStripDropDownCloseReason CloseReason { get; }
    public ToolStripDropDownClosingEventArgs(ToolStripDropDownCloseReason reason);
    public ToolStripDropDownCloseReason get_CloseReason();
}
public class System.Windows.Forms.ToolStripDropDownClosingEventHandler : MulticastDelegate {
    public ToolStripDropDownClosingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripDropDownClosingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripDropDownClosingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ToolStripDropDownDirection : Enum {
    public int value__;
    public static ToolStripDropDownDirection AboveLeft;
    public static ToolStripDropDownDirection AboveRight;
    public static ToolStripDropDownDirection BelowLeft;
    public static ToolStripDropDownDirection BelowRight;
    public static ToolStripDropDownDirection Left;
    public static ToolStripDropDownDirection Right;
    public static ToolStripDropDownDirection Default;
}
[DesignerAttribute("System.Windows.Forms.Design.ToolStripMenuItemDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultPropertyAttribute("DropDownItems")]
public abstract class System.Windows.Forms.ToolStripDropDownItem : ToolStripItem {
    [TypeConverterAttribute("System.ComponentModel.ReferenceConverter")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("ToolStripDropDownDescr")]
public ToolStripDropDown DropDown { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("ToolStripDropDownItemDropDownDirectionDescr")]
[SRCategoryAttribute("CatBehavior")]
public ToolStripDropDownDirection DropDownDirection { get; public set; }
    protected internal Point DropDownLocation { get; }
    [DesignerSerializationVisibilityAttribute("2")]
[SRCategoryAttribute("CatData")]
[SRDescriptionAttribute("ToolStripDropDownItemsDescr")]
public ToolStripItemCollection DropDownItems { get; }
    [BrowsableAttribute("False")]
public bool HasDropDownItems { get; }
    [BrowsableAttribute("False")]
public bool HasDropDown { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Pressed { get; }
    protected ToolStripDropDownItem(string text, Image image, EventHandler onClick);
    protected ToolStripDropDownItem(string text, Image image, EventHandler onClick, string name);
    protected ToolStripDropDownItem(string text, Image image, ToolStripItem[] dropDownItems);
    private static ToolStripDropDownItem();
    public ToolStripDropDown get_DropDown();
    public void set_DropDown(ToolStripDropDown value);
    public ToolStripDropDownDirection get_DropDownDirection();
    public void set_DropDownDirection(ToolStripDropDownDirection value);
    public void add_DropDownClosed(EventHandler value);
    public void remove_DropDownClosed(EventHandler value);
    protected internal virtual Point get_DropDownLocation();
    public void add_DropDownOpening(EventHandler value);
    public void remove_DropDownOpening(EventHandler value);
    public void add_DropDownOpened(EventHandler value);
    public void remove_DropDownOpened(EventHandler value);
    public ToolStripItemCollection get_DropDownItems();
    public void add_DropDownItemClicked(ToolStripItemClickedEventHandler value);
    public void remove_DropDownItemClicked(ToolStripItemClickedEventHandler value);
    public virtual bool get_HasDropDownItems();
    public bool get_HasDropDown();
    public virtual bool get_Pressed();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ToolStripDropDown CreateDefaultDropDown();
    protected virtual void Dispose(bool disposing);
    public void HideDropDown();
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnBoundsChanged();
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnDropDownHide(EventArgs e);
    protected virtual void OnDropDownShow(EventArgs e);
    protected internal virtual void OnDropDownOpened(EventArgs e);
    protected internal virtual void OnDropDownClosed(EventArgs e);
    protected internal virtual void OnDropDownItemClicked(ToolStripItemClickedEventArgs e);
    protected internal virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected internal virtual bool ProcessDialogKey(Keys keyData);
    public void ShowDropDown();
}
public class System.Windows.Forms.ToolStripDropDownItemAccessibleObject : ToolStripItemAccessibleObject {
    public AccessibleRole Role { get; }
    public ToolStripDropDownItemAccessibleObject(ToolStripDropDownItem item);
    public virtual AccessibleRole get_Role();
    public virtual void DoDefaultAction();
    public virtual AccessibleObject GetChild(int index);
    public virtual int GetChildCount();
}
[DesignerAttribute("System.Windows.Forms.Design.ToolStripDropDownDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
public class System.Windows.Forms.ToolStripDropDownMenu : ToolStripDropDown {
    protected Padding DefaultPadding { get; }
    public Rectangle DisplayRectangle { get; }
    public LayoutEngine LayoutEngine { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripLayoutStyle LayoutStyle { get; public set; }
    protected internal Size MaxItemSize { get; }
    [DefaultValueAttribute("True")]
[SRDescriptionAttribute("ToolStripDropDownMenuShowImageMarginDescr")]
[SRCategoryAttribute("CatAppearance")]
public bool ShowImageMargin { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripDropDownMenuShowCheckMarginDescr")]
[SRCategoryAttribute("CatAppearance")]
public bool ShowCheckMargin { get; public set; }
    private static ToolStripDropDownMenu();
    protected virtual Padding get_DefaultPadding();
    public virtual Rectangle get_DisplayRectangle();
    public virtual LayoutEngine get_LayoutEngine();
    public ToolStripLayoutStyle get_LayoutStyle();
    public void set_LayoutStyle(ToolStripLayoutStyle value);
    protected internal virtual Size get_MaxItemSize();
    public bool get_ShowImageMargin();
    public void set_ShowImageMargin(bool value);
    public bool get_ShowCheckMargin();
    public void set_ShowCheckMargin(bool value);
    protected internal virtual ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void SetDisplayedItems();
}
public enum System.Windows.Forms.ToolStripGripDisplayStyle : Enum {
    public int value__;
    public static ToolStripGripDisplayStyle Horizontal;
    public static ToolStripGripDisplayStyle Vertical;
}
public class System.Windows.Forms.ToolStripGripRenderEventArgs : ToolStripRenderEventArgs {
    public Rectangle GripBounds { get; }
    public ToolStripGripDisplayStyle GripDisplayStyle { get; }
    public ToolStripGripStyle GripStyle { get; }
    public ToolStripGripRenderEventArgs(Graphics g, ToolStrip toolStrip);
    public Rectangle get_GripBounds();
    public ToolStripGripDisplayStyle get_GripDisplayStyle();
    public ToolStripGripStyle get_GripStyle();
}
public class System.Windows.Forms.ToolStripGripRenderEventHandler : MulticastDelegate {
    public ToolStripGripRenderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripGripRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripGripRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ToolStripGripStyle : Enum {
    public int value__;
    public static ToolStripGripStyle Hidden;
    public static ToolStripGripStyle Visible;
}
[DesignTimeVisibleAttribute("False")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripItemDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DefaultEventAttribute("Click")]
[ToolboxItemAttribute("False")]
[DefaultPropertyAttribute("Text")]
public abstract class System.Windows.Forms.ToolStripItem : Component {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ToolStripItemAccessibilityObjectDescr")]
public AccessibleObject AccessibilityObject { get; }
    [SRCategoryAttribute("CatAccessibility")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ToolStripItemAccessibleDefaultActionDescr")]
public string AccessibleDefaultActionDescription { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemAccessibleDescriptionDescr")]
public string AccessibleDescription { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemAccessibleNameDescr")]
public string AccessibleName { get; public set; }
    [SRCategoryAttribute("CatAccessibility")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripItemAccessibleRoleDescr")]
public AccessibleRole AccessibleRole { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripItemAlignmentDescr")]
public ToolStripItemAlignment Alignment { get; public set; }
    [SRCategoryAttribute("CatDragDrop")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripItemAllowDropDescr")]
[EditorBrowsableAttribute("2")]
[BrowsableAttribute("False")]
public bool AllowDrop { get; public set; }
    [DefaultValueAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("1")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemAutoSizeDescr")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripItemAutoToolTipDescr")]
[SRCategoryAttribute("CatBehavior")]
public bool AutoToolTip { get; public set; }
    [BrowsableAttribute("False")]
[SRDescriptionAttribute("ToolStripItemAvailableDescr")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Available { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemImageDescr")]
[DefaultValueAttribute("")]
public Image BackgroundImage { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ControlBackgroundImageLayoutDescr")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemBackColorDescr")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle Bounds { get; }
    [BrowsableAttribute("False")]
public Rectangle ContentRectangle { get; }
    [BrowsableAttribute("False")]
public bool CanSelect { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AnchorStyles Anchor { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DockStyle Dock { get; public set; }
    protected bool DefaultAutoToolTip { get; }
    protected internal Padding DefaultMargin { get; }
    protected Padding DefaultPadding { get; }
    protected Size DefaultSize { get; }
    protected ToolStripItemDisplayStyle DefaultDisplayStyle { get; }
    protected internal bool DismissWhenClicked { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemDisplayStyleDescr")]
public ToolStripItemDisplayStyle DisplayStyle { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripItemDoubleClickedEnabledDescr")]
public bool DoubleClickEnabled { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemEnabledDescr")]
[DefaultValueAttribute("True")]
public bool Enabled { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemForeColorDescr")]
public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemFontDescr")]
public Font Font { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public int Height { get; public set; }
    private Rectangle System.Windows.Forms.Layout.IArrangedElement.DisplayRectangle { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemImageAlignDescr")]
public ContentAlignment ImageAlign { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemImageDescr")]
public Image Image { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemImageTransparentColorDescr")]
public Color ImageTransparentColor { get; public set; }
    [SRDescriptionAttribute("ToolStripItemImageIndexDescr")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ToolStripImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("False")]
[RelatedImageListAttribute("Owner.ImageList")]
public int ImageIndex { get; public set; }
    [SRDescriptionAttribute("ToolStripItemImageKeyDescr")]
[SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[RefreshPropertiesAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.ToolStripImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("False")]
[RelatedImageListAttribute("Owner.ImageList")]
public string ImageKey { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemImageScalingDescr")]
public ToolStripItemImageScaling ImageScaling { get; public set; }
    [BrowsableAttribute("False")]
public bool IsDisposed { get; }
    [BrowsableAttribute("False")]
public bool IsOnDropDown { get; }
    [BrowsableAttribute("False")]
public bool IsOnOverflow { get; }
    [SRDescriptionAttribute("ToolStripItemMarginDescr")]
[SRCategoryAttribute("CatLayout")]
public Padding Margin { get; public set; }
    [SRDescriptionAttribute("ToolStripMergeActionDescr")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatLayout")]
public MergeAction MergeAction { get; public set; }
    [SRDescriptionAttribute("ToolStripMergeIndexDescr")]
[DefaultValueAttribute("-1")]
[SRCategoryAttribute("CatLayout")]
public int MergeIndex { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStrip Owner { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripItem OwnerItem { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
protected internal ToolStrip Parent { get; protected internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripItemOverflowDescr")]
[SRCategoryAttribute("CatLayout")]
public ToolStripItemOverflow Overflow { get; public set; }
    [SRDescriptionAttribute("ToolStripItemPaddingDescr")]
[SRCategoryAttribute("CatLayout")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
public ToolStripItemPlacement Placement { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Pressed { get; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemRightToLeftDescr")]
public RightToLeft RightToLeft { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemRightToLeftAutoMirrorImageDescr")]
public bool RightToLeftAutoMirrorImage { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Selected { get; }
    protected internal bool ShowKeyboardCues { get; }
    [SRCategoryAttribute("CatLayout")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemSizeDescr")]
public Size Size { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemTagDescr")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [DefaultValueAttribute("")]
[SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemTextDescr")]
public string Text { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripItemTextAlignDescr")]
public ContentAlignment TextAlign { get; public set; }
    [SRDescriptionAttribute("ToolStripTextDirectionDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripTextDirection TextDirection { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemTextImageRelationDescr")]
[SRCategoryAttribute("CatAppearance")]
public TextImageRelation TextImageRelation { get; public set; }
    [SRDescriptionAttribute("ToolStripItemToolTipTextDescr")]
[SRCategoryAttribute("CatBehavior")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[LocalizableAttribute("True")]
public string ToolTipText { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolStripItemVisibleDescr")]
public bool Visible { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("0")]
public int Width { get; public set; }
    protected ToolStripItem(string text, Image image, EventHandler onClick);
    protected ToolStripItem(string text, Image image, EventHandler onClick, string name);
    private static ToolStripItem();
    public AccessibleObject get_AccessibilityObject();
    public string get_AccessibleDefaultActionDescription();
    public void set_AccessibleDefaultActionDescription(string value);
    public string get_AccessibleDescription();
    public void set_AccessibleDescription(string value);
    public string get_AccessibleName();
    public void set_AccessibleName(string value);
    public AccessibleRole get_AccessibleRole();
    public void set_AccessibleRole(AccessibleRole value);
    public ToolStripItemAlignment get_Alignment();
    public void set_Alignment(ToolStripItemAlignment value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public bool get_AutoSize();
    public void set_AutoSize(bool value);
    public bool get_AutoToolTip();
    public void set_AutoToolTip(bool value);
    public bool get_Available();
    public void set_Available(bool value);
    public void add_AvailableChanged(EventHandler value);
    public void remove_AvailableChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public virtual Rectangle get_Bounds();
    public Rectangle get_ContentRectangle();
    public virtual bool get_CanSelect();
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public AnchorStyles get_Anchor();
    public void set_Anchor(AnchorStyles value);
    public DockStyle get_Dock();
    public void set_Dock(DockStyle value);
    protected virtual bool get_DefaultAutoToolTip();
    protected internal virtual Padding get_DefaultMargin();
    protected virtual Padding get_DefaultPadding();
    protected virtual Size get_DefaultSize();
    protected virtual ToolStripItemDisplayStyle get_DefaultDisplayStyle();
    protected internal virtual bool get_DismissWhenClicked();
    public virtual ToolStripItemDisplayStyle get_DisplayStyle();
    public virtual void set_DisplayStyle(ToolStripItemDisplayStyle value);
    public void add_DisplayStyleChanged(EventHandler value);
    public void remove_DisplayStyleChanged(EventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public bool get_DoubleClickEnabled();
    public void set_DoubleClickEnabled(bool value);
    public void add_DragDrop(DragEventHandler value);
    public void remove_DragDrop(DragEventHandler value);
    public void add_DragEnter(DragEventHandler value);
    public void remove_DragEnter(DragEventHandler value);
    public void add_DragOver(DragEventHandler value);
    public void remove_DragOver(DragEventHandler value);
    public void add_DragLeave(EventHandler value);
    public void remove_DragLeave(EventHandler value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public int get_Height();
    public void set_Height(int value);
    private sealed virtual override Rectangle System.Windows.Forms.Layout.IArrangedElement.get_DisplayRectangle();
    public ContentAlignment get_ImageAlign();
    public void set_ImageAlign(ContentAlignment value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public Color get_ImageTransparentColor();
    public void set_ImageTransparentColor(Color value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public ToolStripItemImageScaling get_ImageScaling();
    public void set_ImageScaling(ToolStripItemImageScaling value);
    public bool get_IsDisposed();
    public bool get_IsOnDropDown();
    public bool get_IsOnOverflow();
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public Padding get_Margin();
    public void set_Margin(Padding value);
    public MergeAction get_MergeAction();
    public void set_MergeAction(MergeAction value);
    public int get_MergeIndex();
    public void set_MergeIndex(int value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_MouseHover(EventHandler value);
    public void remove_MouseHover(EventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public string get_Name();
    public void set_Name(string value);
    public ToolStrip get_Owner();
    public void set_Owner(ToolStrip value);
    public ToolStripItem get_OwnerItem();
    public void add_OwnerChanged(EventHandler value);
    public void remove_OwnerChanged(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    protected internal ToolStrip get_Parent();
    protected internal void set_Parent(ToolStrip value);
    public ToolStripItemOverflow get_Overflow();
    public void set_Overflow(ToolStripItemOverflow value);
    public virtual Padding get_Padding();
    public virtual void set_Padding(Padding value);
    public ToolStripItemPlacement get_Placement();
    public virtual bool get_Pressed();
    public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public bool get_RightToLeftAutoMirrorImage();
    public void set_RightToLeftAutoMirrorImage(bool value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    public virtual bool get_Selected();
    protected internal virtual bool get_ShowKeyboardCues();
    public virtual Size get_Size();
    public virtual void set_Size(Size value);
    public object get_Tag();
    public void set_Tag(object value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public virtual ContentAlignment get_TextAlign();
    public virtual void set_TextAlign(ContentAlignment value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public virtual ToolStripTextDirection get_TextDirection();
    public virtual void set_TextDirection(ToolStripTextDirection value);
    public TextImageRelation get_TextImageRelation();
    public void set_TextImageRelation(TextImageRelation value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public bool get_Visible();
    public void set_Visible(bool value);
    public void add_VisibleChanged(EventHandler value);
    public void remove_VisibleChanged(EventHandler value);
    public int get_Width();
    public void set_Width(int value);
    [EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void Dispose(bool disposing);
    [EditorBrowsableAttribute("2")]
public DragDropEffects DoDragDrop(object data, DragDropEffects allowedEffects);
    public ToolStrip GetCurrentParent();
    public virtual Size GetPreferredSize(Size constrainingSize);
    public void Invalidate();
    public void Invalidate(Rectangle r);
    protected internal virtual bool IsInputKey(Keys keyData);
    protected internal virtual bool IsInputChar(char charCode);
    [EditorBrowsableAttribute("2")]
protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnBoundsChanged();
    protected virtual void OnClick(EventArgs e);
    protected internal virtual void OnLayout(LayoutEventArgs e);
    private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragEnter(DragEventArgs dragEvent);
    private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragOver(DragEventArgs dragEvent);
    private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs e);
    private sealed virtual override void System.Windows.Forms.IDropTarget.OnDragDrop(DragEventArgs dragEvent);
    protected virtual void OnAvailableChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDragEnter(DragEventArgs dragEvent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDragOver(DragEventArgs dragEvent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDragLeave(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDragDrop(DragEventArgs dragEvent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnDisplayStyleChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnGiveFeedback(GiveFeedbackEventArgs giveFeedbackEvent);
    [EditorBrowsableAttribute("2")]
protected virtual void OnQueryContinueDrag(QueryContinueDragEventArgs queryContinueDragEvent);
    protected virtual void OnDoubleClick(EventArgs e);
    protected virtual void OnEnabledChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnForeColorChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnLocationChanged(EventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseMove(MouseEventArgs mea);
    protected virtual void OnMouseHover(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentBackColorChanged(EventArgs e);
    protected virtual void OnParentChanged(ToolStrip oldParent, ToolStrip newParent);
    protected internal virtual void OnParentEnabledChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected internal virtual void OnOwnerFontChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnParentForeColorChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected internal virtual void OnParentRightToLeftChanged(EventArgs e);
    protected virtual void OnOwnerChanged(EventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnTextChanged(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    public void PerformClick();
    protected internal virtual bool ProcessDialogKey(Keys keyData);
    protected internal virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected internal virtual bool ProcessMnemonic(char charCode);
    public void Select();
    protected virtual void SetVisibleCore(bool visible);
    protected internal virtual void SetBounds(Rectangle bounds);
    [EditorBrowsableAttribute("1")]
public virtual void ResetBackColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetDisplayStyle();
    [EditorBrowsableAttribute("1")]
public virtual void ResetForeColor();
    [EditorBrowsableAttribute("1")]
public virtual void ResetFont();
    [EditorBrowsableAttribute("1")]
public virtual void ResetImage();
    [EditorBrowsableAttribute("1")]
public void ResetMargin();
    [EditorBrowsableAttribute("1")]
public void ResetPadding();
    [EditorBrowsableAttribute("1")]
public virtual void ResetRightToLeft();
    [EditorBrowsableAttribute("1")]
public virtual void ResetTextDirection();
    public virtual string ToString();
}
public enum System.Windows.Forms.ToolStripItemAlignment : Enum {
    public int value__;
    public static ToolStripItemAlignment Left;
    public static ToolStripItemAlignment Right;
}
public class System.Windows.Forms.ToolStripItemClickedEventArgs : EventArgs {
    public ToolStripItem ClickedItem { get; }
    public ToolStripItemClickedEventArgs(ToolStripItem clickedItem);
    public ToolStripItem get_ClickedItem();
}
public class System.Windows.Forms.ToolStripItemClickedEventHandler : MulticastDelegate {
    public ToolStripItemClickedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripItemClickedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripItemClickedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Windows.Forms.Design.ToolStripCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[ListBindableAttribute("False")]
public class System.Windows.Forms.ToolStripItemCollection : ArrangedElementCollection {
    public ToolStripItem Item { get; }
    public ToolStripItem Item { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public ToolStripItemCollection(ToolStrip owner, ToolStripItem[] value);
    public virtual ToolStripItem get_Item(int index);
    public virtual ToolStripItem get_Item(string key);
    public ToolStripItem Add(string text);
    public ToolStripItem Add(Image image);
    public ToolStripItem Add(string text, Image image);
    public ToolStripItem Add(string text, Image image, EventHandler onClick);
    public int Add(ToolStripItem value);
    public void AddRange(ToolStripItem[] toolStripItems);
    public void AddRange(ToolStripItemCollection toolStripItems);
    public bool Contains(ToolStripItem value);
    public virtual void Clear();
    public virtual bool ContainsKey(string key);
    public ToolStripItem[] Find(string key, bool searchAllChildren);
    public virtual bool get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public void Insert(int index, ToolStripItem value);
    public int IndexOf(ToolStripItem value);
    public virtual int IndexOfKey(string key);
    public void Remove(ToolStripItem value);
    public void RemoveAt(int index);
    public virtual void RemoveByKey(string key);
    public void CopyTo(ToolStripItem[] array, int index);
}
public enum System.Windows.Forms.ToolStripItemDisplayStyle : Enum {
    public int value__;
    public static ToolStripItemDisplayStyle None;
    public static ToolStripItemDisplayStyle Text;
    public static ToolStripItemDisplayStyle Image;
    public static ToolStripItemDisplayStyle ImageAndText;
}
public class System.Windows.Forms.ToolStripItemEventArgs : EventArgs {
    public ToolStripItem Item { get; }
    public ToolStripItemEventArgs(ToolStripItem item);
    public ToolStripItem get_Item();
}
public class System.Windows.Forms.ToolStripItemEventHandler : MulticastDelegate {
    public ToolStripItemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripItemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripItemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ToolStripItemImageRenderEventArgs : ToolStripItemRenderEventArgs {
    public Image Image { get; }
    public Rectangle ImageRectangle { get; }
    public ToolStripItemImageRenderEventArgs(Graphics g, ToolStripItem item, Rectangle imageRectangle);
    public ToolStripItemImageRenderEventArgs(Graphics g, ToolStripItem item, Image image, Rectangle imageRectangle);
    public Image get_Image();
    public Rectangle get_ImageRectangle();
}
public class System.Windows.Forms.ToolStripItemImageRenderEventHandler : MulticastDelegate {
    public ToolStripItemImageRenderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripItemImageRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripItemImageRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ToolStripItemImageScaling : Enum {
    public int value__;
    public static ToolStripItemImageScaling None;
    public static ToolStripItemImageScaling SizeToFit;
}
public enum System.Windows.Forms.ToolStripItemOverflow : Enum {
    public int value__;
    public static ToolStripItemOverflow Never;
    public static ToolStripItemOverflow Always;
    public static ToolStripItemOverflow AsNeeded;
}
public enum System.Windows.Forms.ToolStripItemPlacement : Enum {
    public int value__;
    public static ToolStripItemPlacement Main;
    public static ToolStripItemPlacement Overflow;
    public static ToolStripItemPlacement None;
}
public class System.Windows.Forms.ToolStripItemRenderEventArgs : EventArgs {
    public Graphics Graphics { get; }
    public ToolStripItem Item { get; }
    public ToolStrip ToolStrip { get; }
    public ToolStripItemRenderEventArgs(Graphics g, ToolStripItem item);
    public Graphics get_Graphics();
    public ToolStripItem get_Item();
    public ToolStrip get_ToolStrip();
}
public class System.Windows.Forms.ToolStripItemRenderEventHandler : MulticastDelegate {
    public ToolStripItemRenderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripItemRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripItemRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.ToolStripItemTextRenderEventArgs : ToolStripItemRenderEventArgs {
    public string Text { get; public set; }
    public Color TextColor { get; public set; }
    public Font TextFont { get; public set; }
    public Rectangle TextRectangle { get; public set; }
    public TextFormatFlags TextFormat { get; public set; }
    public ToolStripTextDirection TextDirection { get; public set; }
    public ToolStripItemTextRenderEventArgs(Graphics g, ToolStripItem item, string text, Rectangle textRectangle, Color textColor, Font textFont, TextFormatFlags format);
    public ToolStripItemTextRenderEventArgs(Graphics g, ToolStripItem item, string text, Rectangle textRectangle, Color textColor, Font textFont, ContentAlignment textAlign);
    public string get_Text();
    public void set_Text(string value);
    public Color get_TextColor();
    public void set_TextColor(Color value);
    public Font get_TextFont();
    public void set_TextFont(Font value);
    public Rectangle get_TextRectangle();
    public void set_TextRectangle(Rectangle value);
    public TextFormatFlags get_TextFormat();
    public void set_TextFormat(TextFormatFlags value);
    public ToolStripTextDirection get_TextDirection();
    public void set_TextDirection(ToolStripTextDirection value);
}
public class System.Windows.Forms.ToolStripItemTextRenderEventHandler : MulticastDelegate {
    public ToolStripItemTextRenderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripItemTextRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripItemTextRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolStripItemDesignerAvailabilityAttribute("1")]
public class System.Windows.Forms.ToolStripLabel : ToolStripItem {
    public bool CanSelect { get; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripLabelIsLinkDescr")]
public bool IsLink { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripLabelActiveLinkColorDescr")]
public Color ActiveLinkColor { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripLabelLinkBehaviorDescr")]
public LinkBehavior LinkBehavior { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripLabelLinkColorDescr")]
public Color LinkColor { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripLabelLinkVisitedDescr")]
public bool LinkVisited { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("ToolStripLabelVisitedLinkColorDescr")]
public Color VisitedLinkColor { get; public set; }
    public ToolStripLabel(string text);
    public ToolStripLabel(Image image);
    public ToolStripLabel(string text, Image image);
    public ToolStripLabel(string text, Image image, bool isLink);
    public ToolStripLabel(string text, Image image, bool isLink, EventHandler onClick);
    public ToolStripLabel(string text, Image image, bool isLink, EventHandler onClick, string name);
    public virtual bool get_CanSelect();
    public bool get_IsLink();
    public void set_IsLink(bool value);
    public Color get_ActiveLinkColor();
    public void set_ActiveLinkColor(Color value);
    public LinkBehavior get_LinkBehavior();
    public void set_LinkBehavior(LinkBehavior value);
    public Color get_LinkColor();
    public void set_LinkColor(Color value);
    public bool get_LinkVisited();
    public void set_LinkVisited(bool value);
    public Color get_VisitedLinkColor();
    public void set_VisitedLinkColor(Color value);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual void OnPaint(PaintEventArgs e);
    protected internal virtual bool ProcessMnemonic(char charCode);
}
public enum System.Windows.Forms.ToolStripLayoutStyle : Enum {
    public int value__;
    public static ToolStripLayoutStyle StackWithOverflow;
    public static ToolStripLayoutStyle HorizontalStackWithOverflow;
    public static ToolStripLayoutStyle VerticalStackWithOverflow;
    public static ToolStripLayoutStyle Flow;
    public static ToolStripLayoutStyle Table;
}
public class System.Windows.Forms.ToolStripManager : object {
    public static ToolStripRenderer Renderer { get; public set; }
    public static ToolStripManagerRenderMode RenderMode { get; public set; }
    public static bool VisualStylesEnabled { get; public set; }
    private static ToolStripManager();
    public static ToolStrip FindToolStrip(string toolStripName);
    public static ToolStripRenderer get_Renderer();
    public static void set_Renderer(ToolStripRenderer value);
    public static void add_RendererChanged(EventHandler value);
    public static void remove_RendererChanged(EventHandler value);
    public static ToolStripManagerRenderMode get_RenderMode();
    public static void set_RenderMode(ToolStripManagerRenderMode value);
    public static bool get_VisualStylesEnabled();
    public static void set_VisualStylesEnabled(bool value);
    public static void LoadSettings(Form targetForm);
    public static void LoadSettings(Form targetForm, string key);
    public static void SaveSettings(Form sourceForm);
    public static void SaveSettings(Form sourceForm, string key);
    public static bool IsValidShortcut(Keys shortcut);
    public static bool IsShortcutDefined(Keys shortcut);
    public static bool Merge(ToolStrip sourceToolStrip, ToolStrip targetToolStrip);
    public static bool Merge(ToolStrip sourceToolStrip, string targetName);
    public static bool RevertMerge(ToolStrip targetToolStrip);
    public static bool RevertMerge(ToolStrip targetToolStrip, ToolStrip sourceToolStrip);
    public static bool RevertMerge(string targetName);
}
public enum System.Windows.Forms.ToolStripManagerRenderMode : Enum {
    public int value__;
    [BrowsableAttribute("False")]
public static ToolStripManagerRenderMode Custom;
    public static ToolStripManagerRenderMode System;
    public static ToolStripManagerRenderMode Professional;
}
[ToolStripItemDesignerAvailabilityAttribute("6")]
[DesignerSerializerAttribute("System.Windows.Forms.Design.ToolStripMenuItemCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.ToolStripMenuItem : ToolStripDropDownItem {
    protected Size DefaultSize { get; }
    protected internal Padding DefaultMargin { get; }
    protected Padding DefaultPadding { get; }
    public bool Enabled { get; public set; }
    [BindableAttribute("True")]
[DefaultValueAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("CheckBoxCheckedDescr")]
public bool Checked { get; public set; }
    [DefaultValueAttribute("False")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ToolStripButtonCheckOnClickDescr")]
public bool CheckOnClick { get; public set; }
    [BindableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("CheckBoxCheckStateDescr")]
public CheckState CheckState { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripItemOverflowDescr")]
[SRCategoryAttribute("CatLayout")]
public ToolStripItemOverflow Overflow { get; public set; }
    [LocalizableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("MenuItemShortCutDescr")]
public Keys ShortcutKeys { get; public set; }
    [SRDescriptionAttribute("ToolStripMenuItemShortcutKeyDisplayStringDescr")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("")]
[LocalizableAttribute("True")]
public string ShortcutKeyDisplayString { get; public set; }
    [DefaultValueAttribute("True")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("MenuItemShowShortCutDescr")]
public bool ShowShortcutKeys { get; public set; }
    [BrowsableAttribute("False")]
public bool IsMdiWindowListEntry { get; }
    public ToolStripMenuItem(string text);
    public ToolStripMenuItem(Image image);
    public ToolStripMenuItem(string text, Image image);
    public ToolStripMenuItem(string text, Image image, EventHandler onClick);
    public ToolStripMenuItem(string text, Image image, EventHandler onClick, string name);
    public ToolStripMenuItem(string text, Image image, ToolStripItem[] dropDownItems);
    public ToolStripMenuItem(string text, Image image, EventHandler onClick, Keys shortcutKeys);
    private static ToolStripMenuItem();
    protected virtual ToolStripDropDown CreateDefaultDropDown();
    [EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual Size get_DefaultSize();
    protected internal virtual Padding get_DefaultMargin();
    protected virtual Padding get_DefaultPadding();
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public bool get_Checked();
    public void set_Checked(bool value);
    public bool get_CheckOnClick();
    public void set_CheckOnClick(bool value);
    public CheckState get_CheckState();
    public void set_CheckState(CheckState value);
    public void add_CheckedChanged(EventHandler value);
    public void remove_CheckedChanged(EventHandler value);
    public void add_CheckStateChanged(EventHandler value);
    public void remove_CheckStateChanged(EventHandler value);
    public ToolStripItemOverflow get_Overflow();
    public void set_Overflow(ToolStripItemOverflow value);
    public Keys get_ShortcutKeys();
    public void set_ShortcutKeys(Keys value);
    public string get_ShortcutKeyDisplayString();
    public void set_ShortcutKeyDisplayString(string value);
    public bool get_ShowShortcutKeys();
    public void set_ShowShortcutKeys(bool value);
    public bool get_IsMdiWindowListEntry();
    protected virtual void Dispose(bool disposing);
    protected virtual void OnClick(EventArgs e);
    protected virtual void OnCheckedChanged(EventArgs e);
    protected virtual void OnCheckStateChanged(EventArgs e);
    protected virtual void OnDropDownHide(EventArgs e);
    protected virtual void OnDropDownShow(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseEnter(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnOwnerChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected internal virtual bool ProcessCmdKey(Message& m, Keys keyData);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected internal virtual void SetBounds(Rectangle rect);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
public class System.Windows.Forms.ToolStripOverflow : ToolStripDropDown {
    protected internal ToolStripItemCollection DisplayedItems { get; }
    public ToolStripItemCollection Items { get; }
    public LayoutEngine LayoutEngine { get; }
    public ToolStripOverflow(ToolStripItem parentItem);
    protected internal virtual ToolStripItemCollection get_DisplayedItems();
    public virtual ToolStripItemCollection get_Items();
    public virtual LayoutEngine get_LayoutEngine();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void SetDisplayedItems();
}
[ToolStripItemDesignerAvailabilityAttribute("0")]
public class System.Windows.Forms.ToolStripOverflowButton : ToolStripDropDownButton {
    protected internal Padding DefaultMargin { get; }
    public bool HasDropDownItems { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool RightToLeftAutoMirrorImage { get; public set; }
    private static ToolStripOverflowButton();
    protected virtual void Dispose(bool disposing);
    protected internal virtual Padding get_DefaultMargin();
    public virtual bool get_HasDropDownItems();
    public bool get_RightToLeftAutoMirrorImage();
    public void set_RightToLeftAutoMirrorImage(bool value);
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ToolStripDropDown CreateDefaultDropDown();
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected internal virtual void SetBounds(Rectangle bounds);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.ToolStripPanelDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ToolboxBitmapAttribute("System.Windows.Forms.ToolStripPanel", "ToolStripPanel_standalone.bmp")]
public class System.Windows.Forms.ToolStripPanel : ContainerControl {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AllowDrop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMinSize { get; public set; }
    [DefaultValueAttribute("True")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    protected Padding DefaultPadding { get; }
    protected Padding DefaultMargin { get; }
    public Padding RowMargin { get; public set; }
    public DockStyle Dock { get; public set; }
    public LayoutEngine LayoutEngine { get; }
    [DefaultValueAttribute("False")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public bool Locked { get; public set; }
    public Orientation Orientation { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripRenderer Renderer { get; public set; }
    [SRDescriptionAttribute("ToolStripRenderModeDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripRenderMode RenderMode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ToolStripPanelRowsDescr")]
public ToolStripPanelRow[] Rows { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public int TabIndex { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool TabStop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    private static ToolStripPanel();
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    protected virtual Padding get_DefaultPadding();
    protected virtual Padding get_DefaultMargin();
    public Padding get_RowMargin();
    public void set_RowMargin(Padding value);
    public virtual DockStyle get_Dock();
    public virtual void set_Dock(DockStyle value);
    public virtual LayoutEngine get_LayoutEngine();
    public bool get_Locked();
    public void set_Locked(bool value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public ToolStripRenderer get_Renderer();
    public void set_Renderer(ToolStripRenderer value);
    public ToolStripRenderMode get_RenderMode();
    public void set_RenderMode(ToolStripRenderMode value);
    public void add_RendererChanged(EventHandler value);
    public void remove_RendererChanged(EventHandler value);
    public ToolStripPanelRow[] get_Rows();
    public int get_TabIndex();
    public void set_TabIndex(int value);
    public void add_TabIndexChanged(EventHandler value);
    public void remove_TabIndexChanged(EventHandler value);
    public bool get_TabStop();
    public void set_TabStop(bool value);
    public void add_TabStopChanged(EventHandler value);
    public void remove_TabStopChanged(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void BeginInit();
    public void EndInit();
    protected virtual ControlCollection CreateControlsInstance();
    protected virtual void Dispose(bool disposing);
    [EditorBrowsableAttribute("2")]
protected virtual void OnPaintBackground(PaintEventArgs e);
    protected virtual void OnControlAdded(ControlEventArgs e);
    protected virtual void OnControlRemoved(ControlEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnRendererChanged(EventArgs e);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnDockChanged(EventArgs e);
    public void Join(ToolStrip toolStripToDrag);
    public void Join(ToolStrip toolStripToDrag, int row);
    public void Join(ToolStrip toolStripToDrag, int x, int y);
    public void Join(ToolStrip toolStripToDrag, Point location);
    public ToolStripPanelRow PointToRow(Point clientLocation);
}
public class System.Windows.Forms.ToolStripPanelRenderEventArgs : EventArgs {
    public Graphics Graphics { get; }
    public ToolStripPanel ToolStripPanel { get; }
    public bool Handled { get; public set; }
    public ToolStripPanelRenderEventArgs(Graphics g, ToolStripPanel toolStripPanel);
    public Graphics get_Graphics();
    public ToolStripPanel get_ToolStripPanel();
    public bool get_Handled();
    public void set_Handled(bool value);
}
public class System.Windows.Forms.ToolStripPanelRenderEventHandler : MulticastDelegate {
    public ToolStripPanelRenderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripPanelRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripPanelRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolboxItemAttribute("False")]
public class System.Windows.Forms.ToolStripPanelRow : Component {
    public Rectangle Bounds { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlControlsDescr")]
public Control[] Controls { get; }
    protected Padding DefaultMargin { get; }
    protected Padding DefaultPadding { get; }
    public Rectangle DisplayRectangle { get; }
    public LayoutEngine LayoutEngine { get; }
    public Padding Margin { get; public set; }
    public Padding Padding { get; public set; }
    public ToolStripPanel ToolStripPanel { get; }
    public Orientation Orientation { get; }
    private Rectangle System.Windows.Forms.Layout.IArrangedElement.DisplayRectangle { get; }
    public ToolStripPanelRow(ToolStripPanel parent);
    private static ToolStripPanelRow();
    public sealed virtual Rectangle get_Bounds();
    public Control[] get_Controls();
    protected virtual Padding get_DefaultMargin();
    protected virtual Padding get_DefaultPadding();
    public Rectangle get_DisplayRectangle();
    public LayoutEngine get_LayoutEngine();
    public Padding get_Margin();
    public void set_Margin(Padding value);
    public virtual Padding get_Padding();
    public virtual void set_Padding(Padding value);
    public ToolStripPanel get_ToolStripPanel();
    public Orientation get_Orientation();
    public bool CanMove(ToolStrip toolStripToDrag);
    protected virtual void Dispose(bool disposing);
    protected internal virtual void OnControlAdded(Control control, int index);
    protected internal virtual void OnOrientationChanged();
    protected void OnBoundsChanged(Rectangle oldBounds, Rectangle newBounds);
    protected internal virtual void OnControlRemoved(Control control, int index);
    protected virtual void OnLayout(LayoutEventArgs e);
    private sealed virtual override Rectangle System.Windows.Forms.Layout.IArrangedElement.get_DisplayRectangle();
    private sealed virtual override Size System.Windows.Forms.Layout.IArrangedElement.GetPreferredSize(Size constrainingSize);
}
public class System.Windows.Forms.ToolStripProfessionalRenderer : ToolStripRenderer {
    public ProfessionalColorTable ColorTable { get; }
    public bool RoundedEdges { get; public set; }
    public ToolStripProfessionalRenderer(ProfessionalColorTable professionalColorTable);
    private static ToolStripProfessionalRenderer();
    public ProfessionalColorTable get_ColorTable();
    public bool get_RoundedEdges();
    public void set_RoundedEdges(bool value);
    protected virtual void OnRenderToolStripBackground(ToolStripRenderEventArgs e);
    protected virtual void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e);
    protected virtual void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderToolStripBorder(ToolStripRenderEventArgs e);
    protected virtual void OnRenderGrip(ToolStripGripRenderEventArgs e);
    protected virtual void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderArrow(ToolStripArrowRenderEventArgs e);
    protected virtual void OnRenderImageMargin(ToolStripRenderEventArgs e);
    protected virtual void OnRenderItemText(ToolStripItemTextRenderEventArgs e);
    protected virtual void OnRenderItemCheck(ToolStripItemImageRenderEventArgs e);
    protected virtual void OnRenderItemImage(ToolStripItemImageRenderEventArgs e);
    protected virtual void OnRenderToolStripPanelBackground(ToolStripPanelRenderEventArgs e);
    protected virtual void OnRenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventArgs e);
}
[DefaultPropertyAttribute("Value")]
public class System.Windows.Forms.ToolStripProgressBar : ToolStripControlHost {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ProgressBar ProgressBar { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected Size DefaultSize { get; }
    protected internal Padding DefaultMargin { get; }
    [DefaultValueAttribute("100")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarMarqueeAnimationSpeed")]
public int MarqueeAnimationSpeed { get; public set; }
    [DefaultValueAttribute("100")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ProgressBarMaximumDescr")]
public int Maximum { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CatBehavior")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("ProgressBarMinimumDescr")]
public int Minimum { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [DefaultValueAttribute("10")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarStepDescr")]
public int Step { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("ProgressBarStyleDescr")]
public ProgressBarStyle Style { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [DefaultValueAttribute("0")]
[SRCategoryAttribute("CatBehavior")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ProgressBarValueDescr")]
public int Value { get; public set; }
    public ToolStripProgressBar(string name);
    private static ToolStripProgressBar();
    public ProgressBar get_ProgressBar();
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    protected virtual Size get_DefaultSize();
    protected internal virtual Padding get_DefaultMargin();
    public int get_MarqueeAnimationSpeed();
    public void set_MarqueeAnimationSpeed(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public int get_Step();
    public void set_Step(int value);
    public ProgressBarStyle get_Style();
    public void set_Style(ProgressBarStyle value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public int get_Value();
    public void set_Value(int value);
    protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    protected virtual void OnSubscribeControlEvents(Control control);
    protected virtual void OnUnsubscribeControlEvents(Control control);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_LocationChanged(EventHandler value);
    public void remove_LocationChanged(EventHandler value);
    public void add_OwnerChanged(EventHandler value);
    public void remove_OwnerChanged(EventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void add_Validated(EventHandler value);
    public void remove_Validated(EventHandler value);
    public void add_Validating(CancelEventHandler value);
    public void remove_Validating(CancelEventHandler value);
    public void Increment(int value);
    public void PerformStep();
}
public abstract class System.Windows.Forms.ToolStripRenderer : object {
    protected static int Offset2X;
    protected static int Offset2Y;
    private static ToolStripRenderer();
    public void add_RenderArrow(ToolStripArrowRenderEventHandler value);
    public void remove_RenderArrow(ToolStripArrowRenderEventHandler value);
    public void add_RenderToolStripBackground(ToolStripRenderEventHandler value);
    public void remove_RenderToolStripBackground(ToolStripRenderEventHandler value);
    public void add_RenderToolStripPanelBackground(ToolStripPanelRenderEventHandler value);
    public void remove_RenderToolStripPanelBackground(ToolStripPanelRenderEventHandler value);
    public void add_RenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventHandler value);
    public void remove_RenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventHandler value);
    public void add_RenderToolStripBorder(ToolStripRenderEventHandler value);
    public void remove_RenderToolStripBorder(ToolStripRenderEventHandler value);
    public void add_RenderButtonBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderButtonBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderDropDownButtonBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderDropDownButtonBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderOverflowButtonBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderOverflowButtonBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderGrip(ToolStripGripRenderEventHandler value);
    public void remove_RenderGrip(ToolStripGripRenderEventHandler value);
    public void add_RenderItemBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderItemBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderItemImage(ToolStripItemImageRenderEventHandler value);
    public void remove_RenderItemImage(ToolStripItemImageRenderEventHandler value);
    public void add_RenderItemCheck(ToolStripItemImageRenderEventHandler value);
    public void remove_RenderItemCheck(ToolStripItemImageRenderEventHandler value);
    public void add_RenderItemText(ToolStripItemTextRenderEventHandler value);
    public void remove_RenderItemText(ToolStripItemTextRenderEventHandler value);
    public void add_RenderImageMargin(ToolStripRenderEventHandler value);
    public void remove_RenderImageMargin(ToolStripRenderEventHandler value);
    public void add_RenderLabelBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderLabelBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderMenuItemBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderMenuItemBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderToolStripStatusLabelBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderToolStripStatusLabelBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderStatusStripSizingGrip(ToolStripRenderEventHandler value);
    public void remove_RenderStatusStripSizingGrip(ToolStripRenderEventHandler value);
    public void add_RenderSplitButtonBackground(ToolStripItemRenderEventHandler value);
    public void remove_RenderSplitButtonBackground(ToolStripItemRenderEventHandler value);
    public void add_RenderSeparator(ToolStripSeparatorRenderEventHandler value);
    public void remove_RenderSeparator(ToolStripSeparatorRenderEventHandler value);
    public static Image CreateDisabledImage(Image normalImage);
    public void DrawArrow(ToolStripArrowRenderEventArgs e);
    public void DrawToolStripBackground(ToolStripRenderEventArgs e);
    public void DrawGrip(ToolStripGripRenderEventArgs e);
    public void DrawItemBackground(ToolStripItemRenderEventArgs e);
    public void DrawImageMargin(ToolStripRenderEventArgs e);
    public void DrawLabelBackground(ToolStripItemRenderEventArgs e);
    public void DrawButtonBackground(ToolStripItemRenderEventArgs e);
    public void DrawToolStripBorder(ToolStripRenderEventArgs e);
    public void DrawDropDownButtonBackground(ToolStripItemRenderEventArgs e);
    public void DrawOverflowButtonBackground(ToolStripItemRenderEventArgs e);
    public void DrawItemImage(ToolStripItemImageRenderEventArgs e);
    public void DrawItemCheck(ToolStripItemImageRenderEventArgs e);
    public void DrawItemText(ToolStripItemTextRenderEventArgs e);
    public void DrawMenuItemBackground(ToolStripItemRenderEventArgs e);
    public void DrawSplitButton(ToolStripItemRenderEventArgs e);
    public void DrawToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e);
    public void DrawStatusStripSizingGrip(ToolStripRenderEventArgs e);
    public void DrawSeparator(ToolStripSeparatorRenderEventArgs e);
    public void DrawToolStripPanelBackground(ToolStripPanelRenderEventArgs e);
    public void DrawToolStripContentPanelBackground(ToolStripContentPanelRenderEventArgs e);
    protected internal virtual void Initialize(ToolStrip toolStrip);
    protected internal virtual void InitializePanel(ToolStripPanel toolStripPanel);
    protected internal virtual void InitializeContentPanel(ToolStripContentPanel contentPanel);
    protected internal virtual void InitializeItem(ToolStripItem item);
    protected static void ScaleArrowOffsetsIfNeeded();
    protected virtual void OnRenderArrow(ToolStripArrowRenderEventArgs e);
    protected virtual void OnRenderToolStripBackground(ToolStripRenderEventArgs e);
    protected virtual void OnRenderToolStripBorder(ToolStripRenderEventArgs e);
    protected virtual void OnRenderGrip(ToolStripGripRenderEventArgs e);
    protected virtual void OnRenderItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderImageMargin(ToolStripRenderEventArgs e);
    protected virtual void OnRenderButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderItemImage(ToolStripItemImageRenderEventArgs e);
    protected virtual void OnRenderItemCheck(ToolStripItemImageRenderEventArgs e);
    protected virtual void OnRenderItemText(ToolStripItemTextRenderEventArgs e);
    protected virtual void OnRenderLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e);
    protected virtual void OnRenderToolStripPanelBackground(ToolStripPanelRenderEventArgs e);
    protected virtual void OnRenderToolStripContentPanelBackground(ToolStripContentPanelRenderEventArgs e);
    protected virtual void OnRenderToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderStatusStripSizingGrip(ToolStripRenderEventArgs e);
    protected virtual void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e);
}
public class System.Windows.Forms.ToolStripRenderEventArgs : EventArgs {
    public Rectangle AffectedBounds { get; }
    public Color BackColor { get; }
    public Graphics Graphics { get; }
    public ToolStrip ToolStrip { get; }
    public Rectangle ConnectedArea { get; }
    public ToolStripRenderEventArgs(Graphics g, ToolStrip toolStrip);
    public ToolStripRenderEventArgs(Graphics g, ToolStrip toolStrip, Rectangle affectedBounds, Color backColor);
    public Rectangle get_AffectedBounds();
    public Color get_BackColor();
    public Graphics get_Graphics();
    public ToolStrip get_ToolStrip();
    public Rectangle get_ConnectedArea();
}
public class System.Windows.Forms.ToolStripRenderEventHandler : MulticastDelegate {
    public ToolStripRenderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.ToolStripRenderMode : Enum {
    public int value__;
    [BrowsableAttribute("False")]
public static ToolStripRenderMode Custom;
    public static ToolStripRenderMode System;
    public static ToolStripRenderMode Professional;
    public static ToolStripRenderMode ManagerRenderMode;
}
[ToolStripItemDesignerAvailabilityAttribute("5")]
public class System.Windows.Forms.ToolStripSeparator : ToolStripItem {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoToolTip { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    public bool CanSelect { get; }
    protected Size DefaultSize { get; }
    protected internal Padding DefaultMargin { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool DoubleClickEnabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripItemDisplayStyle DisplayStyle { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ContentAlignment ImageAlign { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image Image { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[RefreshPropertiesAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
public int ImageIndex { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string ImageKey { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color ImageTransparentColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ToolStripItemImageScaling ImageScaling { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ContentAlignment TextAlign { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ToolStripTextDirection TextDirection { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public TextImageRelation TextImageRelation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public string ToolTipText { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool RightToLeftAutoMirrorImage { get; public set; }
    public bool get_AutoToolTip();
    public void set_AutoToolTip(bool value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public virtual bool get_CanSelect();
    protected virtual Size get_DefaultSize();
    protected internal virtual Padding get_DefaultMargin();
    public bool get_DoubleClickEnabled();
    public void set_DoubleClickEnabled(bool value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public ToolStripItemDisplayStyle get_DisplayStyle();
    public void set_DisplayStyle(ToolStripItemDisplayStyle value);
    public void add_DisplayStyleChanged(EventHandler value);
    public void remove_DisplayStyleChanged(EventHandler value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public ContentAlignment get_ImageAlign();
    public void set_ImageAlign(ContentAlignment value);
    public virtual Image get_Image();
    public virtual void set_Image(Image value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public Color get_ImageTransparentColor();
    public void set_ImageTransparentColor(Color value);
    public ToolStripItemImageScaling get_ImageScaling();
    public void set_ImageScaling(ToolStripItemImageScaling value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public ContentAlignment get_TextAlign();
    public void set_TextAlign(ContentAlignment value);
    public virtual ToolStripTextDirection get_TextDirection();
    public virtual void set_TextDirection(ToolStripTextDirection value);
    public TextImageRelation get_TextImageRelation();
    public void set_TextImageRelation(TextImageRelation value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public bool get_RightToLeftAutoMirrorImage();
    public void set_RightToLeftAutoMirrorImage(bool value);
    [EditorBrowsableAttribute("2")]
protected virtual AccessibleObject CreateAccessibilityInstance();
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected virtual void OnPaint(PaintEventArgs e);
    [EditorBrowsableAttribute("1")]
protected virtual void OnFontChanged(EventArgs e);
    protected internal virtual void SetBounds(Rectangle rect);
}
public class System.Windows.Forms.ToolStripSeparatorRenderEventArgs : ToolStripItemRenderEventArgs {
    public bool Vertical { get; }
    public ToolStripSeparatorRenderEventArgs(Graphics g, ToolStripSeparator separator, bool vertical);
    public bool get_Vertical();
}
public class System.Windows.Forms.ToolStripSeparatorRenderEventHandler : MulticastDelegate {
    public ToolStripSeparatorRenderEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ToolStripSeparatorRenderEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ToolStripSeparatorRenderEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ToolStripItemDesignerAvailabilityAttribute("9")]
[DefaultEventAttribute("ButtonClick")]
public class System.Windows.Forms.ToolStripSplitButton : ToolStripDropDownItem {
    [DefaultValueAttribute("True")]
public bool AutoToolTip { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle ButtonBounds { get; }
    [BrowsableAttribute("False")]
public bool ButtonPressed { get; }
    [BrowsableAttribute("False")]
public bool ButtonSelected { get; }
    protected bool DefaultAutoToolTip { get; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
public ToolStripItem DefaultItem { get; public set; }
    protected internal bool DismissWhenClicked { get; }
    [BrowsableAttribute("False")]
public Rectangle DropDownButtonBounds { get; }
    [BrowsableAttribute("False")]
public bool DropDownButtonPressed { get; }
    [BrowsableAttribute("False")]
public bool DropDownButtonSelected { get; }
    [SRCategoryAttribute("CatLayout")]
[SRDescriptionAttribute("ToolStripSplitButtonDropDownButtonWidthDescr")]
public int DropDownButtonWidth { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle SplitterBounds { get; }
    public ToolStripSplitButton(string text);
    public ToolStripSplitButton(Image image);
    public ToolStripSplitButton(string text, Image image);
    public ToolStripSplitButton(string text, Image image, EventHandler onClick);
    public ToolStripSplitButton(string text, Image image, EventHandler onClick, string name);
    public ToolStripSplitButton(string text, Image image, ToolStripItem[] dropDownItems);
    private static ToolStripSplitButton();
    public bool get_AutoToolTip();
    public void set_AutoToolTip(bool value);
    public Rectangle get_ButtonBounds();
    public bool get_ButtonPressed();
    public bool get_ButtonSelected();
    public void add_ButtonClick(EventHandler value);
    public void remove_ButtonClick(EventHandler value);
    public void add_ButtonDoubleClick(EventHandler value);
    public void remove_ButtonDoubleClick(EventHandler value);
    protected virtual bool get_DefaultAutoToolTip();
    public ToolStripItem get_DefaultItem();
    public void set_DefaultItem(ToolStripItem value);
    public void add_DefaultItemChanged(EventHandler value);
    public void remove_DefaultItemChanged(EventHandler value);
    protected internal virtual bool get_DismissWhenClicked();
    public Rectangle get_DropDownButtonBounds();
    public bool get_DropDownButtonPressed();
    public bool get_DropDownButtonSelected();
    public int get_DropDownButtonWidth();
    public void set_DropDownButtonWidth(int value);
    public Rectangle get_SplitterBounds();
    protected virtual AccessibleObject CreateAccessibilityInstance();
    protected virtual ToolStripDropDown CreateDefaultDropDown();
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected internal virtual bool ProcessDialogKey(Keys keyData);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected virtual void OnButtonClick(EventArgs e);
    public virtual void OnButtonDoubleClick(EventArgs e);
    protected virtual void OnDefaultItemChanged(EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    public void PerformButtonClick();
    [EditorBrowsableAttribute("1")]
public virtual void ResetDropDownButtonWidth();
}
[ToolStripItemDesignerAvailabilityAttribute("8")]
public class System.Windows.Forms.ToolStripStatusLabel : ToolStripLabel {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
public ToolStripItemAlignment Alignment { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripStatusLabelBorderStyleDescr")]
[SRCategoryAttribute("CatAppearance")]
public Border3DStyle BorderStyle { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolStripStatusLabelBorderSidesDescr")]
[SRCategoryAttribute("CatAppearance")]
public ToolStripStatusLabelBorderSides BorderSides { get; public set; }
    protected internal Padding DefaultMargin { get; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolStripStatusLabelSpringDescr")]
[SRCategoryAttribute("CatAppearance")]
public bool Spring { get; public set; }
    public ToolStripStatusLabel(string text);
    public ToolStripStatusLabel(Image image);
    public ToolStripStatusLabel(string text, Image image);
    public ToolStripStatusLabel(string text, Image image, EventHandler onClick);
    public ToolStripStatusLabel(string text, Image image, EventHandler onClick, string name);
    public ToolStripItemAlignment get_Alignment();
    public void set_Alignment(ToolStripItemAlignment value);
    public Border3DStyle get_BorderStyle();
    public void set_BorderStyle(Border3DStyle value);
    public ToolStripStatusLabelBorderSides get_BorderSides();
    public void set_BorderSides(ToolStripStatusLabelBorderSides value);
    protected internal virtual Padding get_DefaultMargin();
    public bool get_Spring();
    public void set_Spring(bool value);
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected virtual void OnPaint(PaintEventArgs e);
}
[ComVisibleAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.BorderSidesEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[FlagsAttribute]
public enum System.Windows.Forms.ToolStripStatusLabelBorderSides : Enum {
    public int value__;
    public static ToolStripStatusLabelBorderSides All;
    public static ToolStripStatusLabelBorderSides Bottom;
    public static ToolStripStatusLabelBorderSides Left;
    public static ToolStripStatusLabelBorderSides Right;
    public static ToolStripStatusLabelBorderSides Top;
    public static ToolStripStatusLabelBorderSides None;
}
public class System.Windows.Forms.ToolStripSystemRenderer : ToolStripRenderer {
    private static ToolStripSystemRenderer();
    protected virtual void OnRenderToolStripBackground(ToolStripRenderEventArgs e);
    protected virtual void OnRenderToolStripBorder(ToolStripRenderEventArgs e);
    protected virtual void OnRenderGrip(ToolStripGripRenderEventArgs e);
    protected virtual void OnRenderItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderImageMargin(ToolStripRenderEventArgs e);
    protected virtual void OnRenderButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderOverflowButtonBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderSeparator(ToolStripSeparatorRenderEventArgs e);
    protected virtual void OnRenderToolStripStatusLabelBackground(ToolStripItemRenderEventArgs e);
    protected virtual void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e);
}
[ToolStripItemDesignerAvailabilityAttribute("7")]
public class System.Windows.Forms.ToolStripTextBox : ToolStripControlHost {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected internal Padding DefaultMargin { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public TextBox TextBox { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxAcceptsTabDescr")]
public bool AcceptsTab { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxAcceptsReturnDescr")]
public bool AcceptsReturn { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxAutoCompleteCustomSourceDescr")]
[EditorAttribute("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteStringCollection AutoCompleteCustomSource { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxAutoCompleteModeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteMode AutoCompleteMode { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxAutoCompleteSourceDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoCompleteSource AutoCompleteSource { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("TextBoxBorderDescr")]
public BorderStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxCanUndoDescr")]
public bool CanUndo { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxCharacterCasingDescr")]
public CharacterCasing CharacterCasing { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxHideSelectionDescr")]
public bool HideSelection { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DesignerSerializationVisibilityAttribute("0")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxLinesDescr")]
[EditorAttribute("System.Windows.Forms.Design.StringArrayEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public String[] Lines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("32767")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxMaxLengthDescr")]
public int MaxLength { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxModifiedDescr")]
public bool Modified { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TextBoxMultilineDescr")]
[RefreshPropertiesAttribute("1")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Multiline { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TextBoxReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectedTextDescr")]
public string SelectedText { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectionLengthDescr")]
public int SelectionLength { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TextBoxSelectionStartDescr")]
public int SelectionStart { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxShortcutsEnabledDescr")]
public bool ShortcutsEnabled { get; public set; }
    [BrowsableAttribute("False")]
public int TextLength { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TextBoxTextAlignDescr")]
public HorizontalAlignment TextBoxTextAlign { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TextBoxWordWrapDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool WordWrap { get; public set; }
    public ToolStripTextBox(string name);
    [EditorBrowsableAttribute("1")]
public ToolStripTextBox(Control c);
    private static ToolStripTextBox();
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    protected internal virtual Padding get_DefaultMargin();
    protected virtual Size get_DefaultSize();
    public TextBox get_TextBox();
    public virtual Size GetPreferredSize(Size constrainingSize);
    protected virtual void OnAcceptsTabChanged(EventArgs e);
    protected virtual void OnBorderStyleChanged(EventArgs e);
    protected virtual void OnHideSelectionChanged(EventArgs e);
    protected virtual void OnModifiedChanged(EventArgs e);
    protected virtual void OnMultilineChanged(EventArgs e);
    protected virtual void OnReadOnlyChanged(EventArgs e);
    protected virtual void OnSubscribeControlEvents(Control control);
    protected virtual void OnUnsubscribeControlEvents(Control control);
    public bool get_AcceptsTab();
    public void set_AcceptsTab(bool value);
    public bool get_AcceptsReturn();
    public void set_AcceptsReturn(bool value);
    public AutoCompleteStringCollection get_AutoCompleteCustomSource();
    public void set_AutoCompleteCustomSource(AutoCompleteStringCollection value);
    public AutoCompleteMode get_AutoCompleteMode();
    public void set_AutoCompleteMode(AutoCompleteMode value);
    public AutoCompleteSource get_AutoCompleteSource();
    public void set_AutoCompleteSource(AutoCompleteSource value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public bool get_CanUndo();
    public CharacterCasing get_CharacterCasing();
    public void set_CharacterCasing(CharacterCasing value);
    public bool get_HideSelection();
    public void set_HideSelection(bool value);
    public String[] get_Lines();
    public void set_Lines(String[] value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public bool get_Modified();
    public void set_Modified(bool value);
    public bool get_Multiline();
    public void set_Multiline(bool value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public string get_SelectedText();
    public void set_SelectedText(string value);
    public int get_SelectionLength();
    public void set_SelectionLength(int value);
    public int get_SelectionStart();
    public void set_SelectionStart(int value);
    public bool get_ShortcutsEnabled();
    public void set_ShortcutsEnabled(bool value);
    public int get_TextLength();
    public HorizontalAlignment get_TextBoxTextAlign();
    public void set_TextBoxTextAlign(HorizontalAlignment value);
    public bool get_WordWrap();
    public void set_WordWrap(bool value);
    public void add_AcceptsTabChanged(EventHandler value);
    public void remove_AcceptsTabChanged(EventHandler value);
    public void add_BorderStyleChanged(EventHandler value);
    public void remove_BorderStyleChanged(EventHandler value);
    public void add_HideSelectionChanged(EventHandler value);
    public void remove_HideSelectionChanged(EventHandler value);
    public void add_ModifiedChanged(EventHandler value);
    public void remove_ModifiedChanged(EventHandler value);
    public void add_MultilineChanged(EventHandler value);
    public void remove_MultilineChanged(EventHandler value);
    public void add_ReadOnlyChanged(EventHandler value);
    public void remove_ReadOnlyChanged(EventHandler value);
    public void add_TextBoxTextAlignChanged(EventHandler value);
    public void remove_TextBoxTextAlignChanged(EventHandler value);
    public void AppendText(string text);
    public void Clear();
    public void ClearUndo();
    public void Copy();
    public void Cut();
    public void DeselectAll();
    public char GetCharFromPosition(Point pt);
    public int GetCharIndexFromPosition(Point pt);
    public int GetFirstCharIndexFromLine(int lineNumber);
    public int GetFirstCharIndexOfCurrentLine();
    public int GetLineFromCharIndex(int index);
    public Point GetPositionFromCharIndex(int index);
    public void Paste();
    public void ScrollToCaret();
    public void Select(int start, int length);
    public void SelectAll();
    public void Undo();
}
public enum System.Windows.Forms.ToolStripTextDirection : Enum {
    public int value__;
    public static ToolStripTextDirection Inherit;
    public static ToolStripTextDirection Horizontal;
    public static ToolStripTextDirection Vertical90;
    public static ToolStripTextDirection Vertical270;
}
[ProvidePropertyAttribute("ToolTip", "System.Windows.Forms.Control")]
[DefaultEventAttribute("Popup")]
[ToolboxItemFilterAttribute("System.Windows.Forms")]
[SRDescriptionAttribute("DescriptionToolTip")]
public class System.Windows.Forms.ToolTip : Component {
    [SRDescriptionAttribute("ToolTipActiveDescr")]
[DefaultValueAttribute("True")]
public bool Active { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("ToolTipAutomaticDelayDescr")]
[DefaultValueAttribute("500")]
public int AutomaticDelay { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("ToolTipAutoPopDelayDescr")]
public int AutoPopDelay { get; public set; }
    [SRDescriptionAttribute("ToolTipBackColorDescr")]
[DefaultValueAttribute("System.Drawing.Color", "Info")]
public Color BackColor { get; public set; }
    protected CreateParams CreateParams { get; }
    [SRDescriptionAttribute("ToolTipForeColorDescr")]
[DefaultValueAttribute("System.Drawing.Color", "InfoText")]
public Color ForeColor { get; public set; }
    [SRDescriptionAttribute("ToolTipIsBalloonDescr")]
[DefaultValueAttribute("False")]
public bool IsBalloon { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("ToolTipInitialDelayDescr")]
public int InitialDelay { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolTipOwnerDrawDescr")]
public bool OwnerDraw { get; public set; }
    [RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("ToolTipReshowDelayDescr")]
public int ReshowDelay { get; public set; }
    [DefaultValueAttribute("False")]
[SRDescriptionAttribute("ToolTipShowAlwaysDescr")]
public bool ShowAlways { get; public set; }
    [SRDescriptionAttribute("ToolTipStripAmpersandsDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool StripAmpersands { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("ToolTipToolTipIconDescr")]
public ToolTipIcon ToolTipIcon { get; public set; }
    [DefaultValueAttribute("")]
[SRDescriptionAttribute("ToolTipTitleDescr")]
public string ToolTipTitle { get; public set; }
    [SRDescriptionAttribute("ToolTipUseAnimationDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool UseAnimation { get; public set; }
    [SRDescriptionAttribute("ToolTipUseFadingDescr")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool UseFading { get; public set; }
    public ToolTip(IContainer cont);
    public bool get_Active();
    public void set_Active(bool value);
    public int get_AutomaticDelay();
    public void set_AutomaticDelay(int value);
    public int get_AutoPopDelay();
    public void set_AutoPopDelay(int value);
    public Color get_BackColor();
    public void set_BackColor(Color value);
    protected virtual CreateParams get_CreateParams();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public bool get_IsBalloon();
    public void set_IsBalloon(bool value);
    public int get_InitialDelay();
    public void set_InitialDelay(int value);
    public bool get_OwnerDraw();
    public void set_OwnerDraw(bool value);
    public int get_ReshowDelay();
    public void set_ReshowDelay(int value);
    public bool get_ShowAlways();
    public void set_ShowAlways(bool value);
    public bool get_StripAmpersands();
    public void set_StripAmpersands(bool value);
    public object get_Tag();
    public void set_Tag(object value);
    public ToolTipIcon get_ToolTipIcon();
    public void set_ToolTipIcon(ToolTipIcon value);
    public string get_ToolTipTitle();
    public void set_ToolTipTitle(string value);
    public bool get_UseAnimation();
    public void set_UseAnimation(bool value);
    public bool get_UseFading();
    public void set_UseFading(bool value);
    public void add_Draw(DrawToolTipEventHandler value);
    public void remove_Draw(DrawToolTipEventHandler value);
    public void add_Popup(PopupEventHandler value);
    public void remove_Popup(PopupEventHandler value);
    public sealed virtual bool CanExtend(object target);
    protected virtual void Dispose(bool disposing);
    [DefaultValueAttribute("")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("ToolTipToolTipDescr")]
[EditorAttribute("System.ComponentModel.Design.MultilineStringEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public string GetToolTip(Control control);
    public void RemoveAll();
    public void SetToolTip(Control control, string caption);
    public void Show(string text, IWin32Window window);
    public void Show(string text, IWin32Window window, int duration);
    public void Show(string text, IWin32Window window, Point point);
    public void Show(string text, IWin32Window window, Point point, int duration);
    public void Show(string text, IWin32Window window, int x, int y);
    public void Show(string text, IWin32Window window, int x, int y, int duration);
    public void Hide(IWin32Window win);
    protected void StopTimer();
    protected virtual override void Finalize();
    public virtual string ToString();
}
public enum System.Windows.Forms.ToolTipIcon : Enum {
    public int value__;
    public static ToolTipIcon None;
    public static ToolTipIcon Info;
    public static ToolTipIcon Warning;
    public static ToolTipIcon Error;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Value")]
[DefaultEventAttribute("Scroll")]
[DefaultBindingPropertyAttribute("Value")]
[DesignerAttribute("System.Windows.Forms.Design.TrackBarDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionTrackBar")]
public class System.Windows.Forms.TrackBar : Control {
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TrackBarAutoSizeDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    protected CreateParams CreateParams { get; }
    protected ImeMode DefaultImeMode { get; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImeMode ImeMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("5")]
[SRDescriptionAttribute("TrackBarLargeChangeDescr")]
public int LargeChange { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("10")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("TrackBarMaximumDescr")]
public int Maximum { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[RefreshPropertiesAttribute("1")]
[SRDescriptionAttribute("TrackBarMinimumDescr")]
public int Minimum { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TrackBarOrientationDescr")]
public Orientation Orientation { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("TrackBarSmallChangeDescr")]
public int SmallChange { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TrackBarTickStyleDescr")]
public TickStyle TickStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("1")]
[SRDescriptionAttribute("TrackBarTickFrequencyDescr")]
public int TickFrequency { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("0")]
[BindableAttribute("True")]
[SRDescriptionAttribute("TrackBarValueDescr")]
public int Value { get; public set; }
    private static TrackBar();
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    protected virtual CreateParams get_CreateParams();
    protected virtual ImeMode get_DefaultImeMode();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public int get_LargeChange();
    public void set_LargeChange(int value);
    public int get_Maximum();
    public void set_Maximum(int value);
    public int get_Minimum();
    public void set_Minimum(int value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public int get_SmallChange();
    public void set_SmallChange(int value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public TickStyle get_TickStyle();
    public void set_TickStyle(TickStyle value);
    public int get_TickFrequency();
    public void set_TickFrequency(int value);
    public int get_Value();
    public void set_Value(int value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public void add_Scroll(EventHandler value);
    public void remove_Scroll(EventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_ValueChanged(EventHandler value);
    public void remove_ValueChanged(EventHandler value);
    public sealed virtual void BeginInit();
    protected virtual void CreateHandle();
    public sealed virtual void EndInit();
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void OnHandleCreated(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    protected virtual void OnScroll(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnValueChanged(EventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void OnSystemColorsChanged(EventArgs e);
    protected virtual void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified);
    public void SetRange(int minValue, int maxValue);
    public virtual string ToString();
    protected virtual void WndProc(Message& m);
}
public class System.Windows.Forms.TrackBarRenderer : object {
    public static bool IsSupported { get; }
    private static TrackBarRenderer();
    public static bool get_IsSupported();
    public static void DrawHorizontalTrack(Graphics g, Rectangle bounds);
    public static void DrawVerticalTrack(Graphics g, Rectangle bounds);
    public static void DrawHorizontalThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawVerticalThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawLeftPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawRightPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawTopPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawBottomPointingThumb(Graphics g, Rectangle bounds, TrackBarThumbState state);
    public static void DrawHorizontalTicks(Graphics g, Rectangle bounds, int numTicks, EdgeStyle edgeStyle);
    public static void DrawVerticalTicks(Graphics g, Rectangle bounds, int numTicks, EdgeStyle edgeStyle);
    public static Size GetLeftPointingThumbSize(Graphics g, TrackBarThumbState state);
    public static Size GetRightPointingThumbSize(Graphics g, TrackBarThumbState state);
    public static Size GetTopPointingThumbSize(Graphics g, TrackBarThumbState state);
    public static Size GetBottomPointingThumbSize(Graphics g, TrackBarThumbState state);
}
[TypeConverterAttribute("System.Windows.Forms.TreeNodeConverter")]
[DefaultPropertyAttribute("Text")]
public class System.Windows.Forms.TreeNode : MarshalByRefObject {
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeBackColorDescr")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
public Rectangle Bounds { get; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeCheckedDescr")]
[DefaultValueAttribute("False")]
public bool Checked { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ControlContextMenuDescr")]
public ContextMenu ContextMenu { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("ControlContextMenuDescr")]
public ContextMenuStrip ContextMenuStrip { get; public set; }
    [BrowsableAttribute("False")]
public TreeNode FirstNode { get; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeForeColorDescr")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
public string FullPath { get; }
    [BrowsableAttribute("False")]
public IntPtr Handle { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeImageIndexDescr")]
[TypeConverterAttribute("System.Windows.Forms.TreeViewImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[DefaultValueAttribute("-1")]
[RelatedImageListAttribute("TreeView.ImageList")]
public int ImageIndex { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeImageKeyDescr")]
[TypeConverterAttribute("System.Windows.Forms.TreeViewImageKeyConverter")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[RelatedImageListAttribute("TreeView.ImageList")]
public string ImageKey { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeIndexDescr")]
public int Index { get; }
    [BrowsableAttribute("False")]
public bool IsEditing { get; }
    [BrowsableAttribute("False")]
public bool IsExpanded { get; }
    [BrowsableAttribute("False")]
public bool IsSelected { get; }
    [BrowsableAttribute("False")]
public bool IsVisible { get; }
    [BrowsableAttribute("False")]
public TreeNode LastNode { get; }
    [BrowsableAttribute("False")]
public int Level { get; }
    [BrowsableAttribute("False")]
public TreeNode NextNode { get; }
    [BrowsableAttribute("False")]
public TreeNode NextVisibleNode { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeNodeFontDescr")]
[DefaultValueAttribute("")]
public Font NodeFont { get; public set; }
    [ListBindableAttribute("False")]
[BrowsableAttribute("False")]
public TreeNodeCollection Nodes { get; }
    [BrowsableAttribute("False")]
public TreeNode Parent { get; }
    [BrowsableAttribute("False")]
public TreeNode PrevNode { get; }
    [BrowsableAttribute("False")]
public TreeNode PrevVisibleNode { get; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeSelectedImageIndexDescr")]
[TypeConverterAttribute("System.Windows.Forms.TreeViewImageIndexConverter")]
[DefaultValueAttribute("-1")]
[RefreshPropertiesAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RelatedImageListAttribute("TreeView.ImageList")]
public int SelectedImageIndex { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeSelectedImageKeyDescr")]
[TypeConverterAttribute("System.Windows.Forms.TreeViewImageKeyConverter")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RelatedImageListAttribute("TreeView.ImageList")]
public string SelectedImageKey { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeStateImageKeyDescr")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[DefaultValueAttribute("")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[RelatedImageListAttribute("TreeView.StateImageList")]
public string StateImageKey { get; public set; }
    [LocalizableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
[DefaultValueAttribute("-1")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeNodeStateImageIndexDescr")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[RefreshPropertiesAttribute("2")]
[RelatedImageListAttribute("TreeView.StateImageList")]
public int StateImageIndex { get; public set; }
    [SRCategoryAttribute("CatData")]
[LocalizableAttribute("False")]
[BindableAttribute("True")]
[SRDescriptionAttribute("ControlTagDescr")]
[DefaultValueAttribute("")]
[TypeConverterAttribute("System.ComponentModel.StringConverter")]
public object Tag { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeTextDescr")]
public string Text { get; public set; }
    [LocalizableAttribute("False")]
[SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeToolTipTextDescr")]
[DefaultValueAttribute("")]
public string ToolTipText { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeNodeNodeNameDescr")]
public string Name { get; public set; }
    [BrowsableAttribute("False")]
public TreeView TreeView { get; }
    public TreeNode(string text);
    public TreeNode(string text, TreeNode[] children);
    public TreeNode(string text, int imageIndex, int selectedImageIndex);
    public TreeNode(string text, int imageIndex, int selectedImageIndex, TreeNode[] children);
    protected TreeNode(SerializationInfo serializationInfo, StreamingContext context);
    private static TreeNode();
    public Color get_BackColor();
    public void set_BackColor(Color value);
    public Rectangle get_Bounds();
    public bool get_Checked();
    public void set_Checked(bool value);
    public virtual ContextMenu get_ContextMenu();
    public virtual void set_ContextMenu(ContextMenu value);
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    public TreeNode get_FirstNode();
    public Color get_ForeColor();
    public void set_ForeColor(Color value);
    public string get_FullPath();
    public IntPtr get_Handle();
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public int get_Index();
    public bool get_IsEditing();
    public bool get_IsExpanded();
    public bool get_IsSelected();
    public bool get_IsVisible();
    public TreeNode get_LastNode();
    public int get_Level();
    public TreeNode get_NextNode();
    public TreeNode get_NextVisibleNode();
    public Font get_NodeFont();
    public void set_NodeFont(Font value);
    public TreeNodeCollection get_Nodes();
    public TreeNode get_Parent();
    public TreeNode get_PrevNode();
    public TreeNode get_PrevVisibleNode();
    public int get_SelectedImageIndex();
    public void set_SelectedImageIndex(int value);
    public string get_SelectedImageKey();
    public void set_SelectedImageKey(string value);
    public string get_StateImageKey();
    public void set_StateImageKey(string value);
    public int get_StateImageIndex();
    public void set_StateImageIndex(int value);
    public object get_Tag();
    public void set_Tag(object value);
    public string get_Text();
    public void set_Text(string value);
    public string get_ToolTipText();
    public void set_ToolTipText(string value);
    public string get_Name();
    public void set_Name(string value);
    public TreeView get_TreeView();
    public static TreeNode FromHandle(TreeView tree, IntPtr handle);
    public void BeginEdit();
    public virtual object Clone();
    public void Collapse(bool ignoreChildren);
    public void Collapse();
    protected virtual void Deserialize(SerializationInfo serializationInfo, StreamingContext context);
    public void EndEdit(bool cancel);
    public void EnsureVisible();
    public void Expand();
    public void ExpandAll();
    public int GetNodeCount(bool includeSubTrees);
    public void Remove();
    protected virtual void Serialize(SerializationInfo si, StreamingContext context);
    public void Toggle();
    public virtual string ToString();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
public class System.Windows.Forms.TreeNodeCollection : object {
    public TreeNode Item { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public TreeNode Item { get; }
    [BrowsableAttribute("False")]
public int Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public virtual TreeNode get_Item(int index);
    public virtual void set_Item(int index, TreeNode value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    public virtual TreeNode get_Item(string key);
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public virtual TreeNode Add(string text);
    public virtual TreeNode Add(string key, string text);
    public virtual TreeNode Add(string key, string text, int imageIndex);
    public virtual TreeNode Add(string key, string text, string imageKey);
    public virtual TreeNode Add(string key, string text, int imageIndex, int selectedImageIndex);
    public virtual TreeNode Add(string key, string text, string imageKey, string selectedImageKey);
    public virtual void AddRange(TreeNode[] nodes);
    public TreeNode[] Find(string key, bool searchAllChildren);
    public virtual int Add(TreeNode node);
    private sealed virtual override int System.Collections.IList.Add(object node);
    public bool Contains(TreeNode node);
    public virtual bool ContainsKey(string key);
    private sealed virtual override bool System.Collections.IList.Contains(object node);
    public int IndexOf(TreeNode node);
    private sealed virtual override int System.Collections.IList.IndexOf(object node);
    public virtual int IndexOfKey(string key);
    public virtual void Insert(int index, TreeNode node);
    private sealed virtual override void System.Collections.IList.Insert(int index, object node);
    public virtual TreeNode Insert(int index, string text);
    public virtual TreeNode Insert(int index, string key, string text);
    public virtual TreeNode Insert(int index, string key, string text, int imageIndex);
    public virtual TreeNode Insert(int index, string key, string text, string imageKey);
    public virtual TreeNode Insert(int index, string key, string text, int imageIndex, int selectedImageIndex);
    public virtual TreeNode Insert(int index, string key, string text, string imageKey, string selectedImageKey);
    public virtual void Clear();
    public sealed virtual void CopyTo(Array dest, int index);
    public void Remove(TreeNode node);
    private sealed virtual override void System.Collections.IList.Remove(object node);
    public virtual void RemoveAt(int index);
    public virtual void RemoveByKey(string key);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Windows.Forms.TreeNodeConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Forms.TreeNodeMouseClickEventArgs : MouseEventArgs {
    public TreeNode Node { get; }
    public TreeNodeMouseClickEventArgs(TreeNode node, MouseButtons button, int clicks, int x, int y);
    public TreeNode get_Node();
}
public class System.Windows.Forms.TreeNodeMouseClickEventHandler : MulticastDelegate {
    public TreeNodeMouseClickEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TreeNodeMouseClickEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TreeNodeMouseClickEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
public class System.Windows.Forms.TreeNodeMouseHoverEventArgs : EventArgs {
    public TreeNode Node { get; }
    public TreeNodeMouseHoverEventArgs(TreeNode node);
    public TreeNode get_Node();
}
public class System.Windows.Forms.TreeNodeMouseHoverEventHandler : MulticastDelegate {
    public TreeNodeMouseHoverEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TreeNodeMouseHoverEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TreeNodeMouseHoverEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Windows.Forms.TreeNodeStates : Enum {
    public int value__;
    public static TreeNodeStates Checked;
    public static TreeNodeStates Default;
    public static TreeNodeStates Focused;
    public static TreeNodeStates Grayed;
    public static TreeNodeStates Hot;
    public static TreeNodeStates Indeterminate;
    public static TreeNodeStates Marked;
    public static TreeNodeStates Selected;
    public static TreeNodeStates ShowKeyboardCues;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Nodes")]
[DefaultEventAttribute("AfterSelect")]
[DockingAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.TreeViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[SRDescriptionAttribute("DescriptionTreeView")]
public class System.Windows.Forms.TreeView : Control {
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("borderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewCheckBoxesDescr")]
public bool CheckBoxes { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [EditorBrowsableAttribute("1")]
protected bool DoubleBuffered { get; protected set; }
    public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewFullRowSelectDescr")]
public bool FullRowSelect { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TreeViewHideSelectionDescr")]
public bool HideSelection { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewHotTrackingDescr")]
public bool HotTracking { get; public set; }
    [DefaultValueAttribute("-1")]
[SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[RefreshPropertiesAttribute("2")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("TreeViewImageIndexDescr")]
[RelatedImageListAttribute("ImageList")]
public int ImageIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("TreeViewImageKeyDescr")]
[RelatedImageListAttribute("ImageList")]
public string ImageKey { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("TreeViewImageListDescr")]
[RefreshPropertiesAttribute("2")]
public ImageList ImageList { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("")]
[SRDescriptionAttribute("TreeViewStateImageListDescr")]
public ImageList StateImageList { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeViewIndentDescr")]
public int Indent { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[SRDescriptionAttribute("TreeViewItemHeightDescr")]
public int ItemHeight { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewLabelEditDescr")]
public bool LabelEdit { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[SRDescriptionAttribute("TreeViewLineColorDescr")]
[DefaultValueAttribute("System.Drawing.Color", "Black")]
public Color LineColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DesignerSerializationVisibilityAttribute("2")]
[LocalizableAttribute("True")]
[SRDescriptionAttribute("TreeViewNodesDescr")]
[MergablePropertyAttribute("False")]
public TreeNodeCollection Nodes { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("TreeViewDrawModeDescr")]
public TreeViewDrawMode DrawMode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("\")]
[SRDescriptionAttribute("TreeViewPathSeparatorDescr")]
public string PathSeparator { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[LocalizableAttribute("True")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("ControlRightToLeftLayoutDescr")]
public bool RightToLeftLayout { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TreeViewScrollableDescr")]
public bool Scrollable { get; public set; }
    [DefaultValueAttribute("-1")]
[SRCategoryAttribute("CatBehavior")]
[TypeConverterAttribute("System.Windows.Forms.NoneExcludedImageIndexConverter")]
[LocalizableAttribute("True")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[SRDescriptionAttribute("TreeViewSelectedImageIndexDescr")]
[RelatedImageListAttribute("ImageList")]
public int SelectedImageIndex { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[LocalizableAttribute("True")]
[TypeConverterAttribute("System.Windows.Forms.ImageKeyConverter")]
[EditorAttribute("System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("2")]
[SRDescriptionAttribute("TreeViewSelectedImageKeyDescr")]
[RelatedImageListAttribute("ImageList")]
public string SelectedImageKey { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TreeViewSelectedNodeDescr")]
public TreeNode SelectedNode { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TreeViewShowLinesDescr")]
public bool ShowLines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewShowShowNodeToolTipsDescr")]
public bool ShowNodeToolTips { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TreeViewShowPlusMinusDescr")]
public bool ShowPlusMinus { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("TreeViewShowRootLinesDescr")]
public bool ShowRootLines { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("TreeViewSortedDescr")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public bool Sorted { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TreeViewNodeSorterDescr")]
public IComparer TreeViewNodeSorter { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TreeViewTopNodeDescr")]
public TreeNode TopNode { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("TreeViewVisibleCountDescr")]
public int VisibleCount { get; }
    private static TreeView();
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    public bool get_CheckBoxes();
    public void set_CheckBoxes(bool value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    protected virtual bool get_DoubleBuffered();
    protected virtual void set_DoubleBuffered(bool value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public bool get_FullRowSelect();
    public void set_FullRowSelect(bool value);
    public bool get_HideSelection();
    public void set_HideSelection(bool value);
    public bool get_HotTracking();
    public void set_HotTracking(bool value);
    public int get_ImageIndex();
    public void set_ImageIndex(int value);
    public string get_ImageKey();
    public void set_ImageKey(string value);
    public ImageList get_ImageList();
    public void set_ImageList(ImageList value);
    public ImageList get_StateImageList();
    public void set_StateImageList(ImageList value);
    public int get_Indent();
    public void set_Indent(int value);
    public int get_ItemHeight();
    public void set_ItemHeight(int value);
    public bool get_LabelEdit();
    public void set_LabelEdit(bool value);
    public Color get_LineColor();
    public void set_LineColor(Color value);
    public TreeNodeCollection get_Nodes();
    public TreeViewDrawMode get_DrawMode();
    public void set_DrawMode(TreeViewDrawMode value);
    public string get_PathSeparator();
    public void set_PathSeparator(string value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public virtual bool get_RightToLeftLayout();
    public virtual void set_RightToLeftLayout(bool value);
    public bool get_Scrollable();
    public void set_Scrollable(bool value);
    public int get_SelectedImageIndex();
    public void set_SelectedImageIndex(int value);
    public string get_SelectedImageKey();
    public void set_SelectedImageKey(string value);
    public TreeNode get_SelectedNode();
    public void set_SelectedNode(TreeNode value);
    public bool get_ShowLines();
    public void set_ShowLines(bool value);
    public bool get_ShowNodeToolTips();
    public void set_ShowNodeToolTips(bool value);
    public bool get_ShowPlusMinus();
    public void set_ShowPlusMinus(bool value);
    public bool get_ShowRootLines();
    public void set_ShowRootLines(bool value);
    public bool get_Sorted();
    public void set_Sorted(bool value);
    public IComparer get_TreeViewNodeSorter();
    public void set_TreeViewNodeSorter(IComparer value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public TreeNode get_TopNode();
    public void set_TopNode(TreeNode value);
    public int get_VisibleCount();
    public void add_BeforeLabelEdit(NodeLabelEditEventHandler value);
    public void remove_BeforeLabelEdit(NodeLabelEditEventHandler value);
    public void add_AfterLabelEdit(NodeLabelEditEventHandler value);
    public void remove_AfterLabelEdit(NodeLabelEditEventHandler value);
    public void add_BeforeCheck(TreeViewCancelEventHandler value);
    public void remove_BeforeCheck(TreeViewCancelEventHandler value);
    public void add_AfterCheck(TreeViewEventHandler value);
    public void remove_AfterCheck(TreeViewEventHandler value);
    public void add_BeforeCollapse(TreeViewCancelEventHandler value);
    public void remove_BeforeCollapse(TreeViewCancelEventHandler value);
    public void add_AfterCollapse(TreeViewEventHandler value);
    public void remove_AfterCollapse(TreeViewEventHandler value);
    public void add_BeforeExpand(TreeViewCancelEventHandler value);
    public void remove_BeforeExpand(TreeViewCancelEventHandler value);
    public void add_AfterExpand(TreeViewEventHandler value);
    public void remove_AfterExpand(TreeViewEventHandler value);
    public void add_DrawNode(DrawTreeNodeEventHandler value);
    public void remove_DrawNode(DrawTreeNodeEventHandler value);
    public void add_ItemDrag(ItemDragEventHandler value);
    public void remove_ItemDrag(ItemDragEventHandler value);
    public void add_NodeMouseHover(TreeNodeMouseHoverEventHandler value);
    public void remove_NodeMouseHover(TreeNodeMouseHoverEventHandler value);
    public void add_BeforeSelect(TreeViewCancelEventHandler value);
    public void remove_BeforeSelect(TreeViewCancelEventHandler value);
    public void add_AfterSelect(TreeViewEventHandler value);
    public void remove_AfterSelect(TreeViewEventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_NodeMouseClick(TreeNodeMouseClickEventHandler value);
    public void remove_NodeMouseClick(TreeNodeMouseClickEventHandler value);
    public void add_NodeMouseDoubleClick(TreeNodeMouseClickEventHandler value);
    public void remove_NodeMouseDoubleClick(TreeNodeMouseClickEventHandler value);
    public void add_RightToLeftLayoutChanged(EventHandler value);
    public void remove_RightToLeftLayoutChanged(EventHandler value);
    public void BeginUpdate();
    public void CollapseAll();
    protected virtual void CreateHandle();
    protected virtual void Dispose(bool disposing);
    public void EndUpdate();
    public void ExpandAll();
    public TreeViewHitTestInfo HitTest(Point pt);
    public TreeViewHitTestInfo HitTest(int x, int y);
    public int GetNodeCount(bool includeSubTrees);
    public TreeNode GetNodeAt(Point pt);
    public TreeNode GetNodeAt(int x, int y);
    protected virtual bool IsInputKey(Keys keyData);
    protected virtual void OnDrawNode(DrawTreeNodeEventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnMouseLeave(EventArgs e);
    protected virtual void OnMouseHover(EventArgs e);
    protected virtual void OnBeforeLabelEdit(NodeLabelEditEventArgs e);
    protected virtual void OnAfterLabelEdit(NodeLabelEditEventArgs e);
    protected virtual void OnBeforeCheck(TreeViewCancelEventArgs e);
    protected virtual void OnAfterCheck(TreeViewEventArgs e);
    protected internal virtual void OnBeforeCollapse(TreeViewCancelEventArgs e);
    protected internal virtual void OnAfterCollapse(TreeViewEventArgs e);
    protected virtual void OnBeforeExpand(TreeViewCancelEventArgs e);
    protected virtual void OnAfterExpand(TreeViewEventArgs e);
    protected virtual void OnItemDrag(ItemDragEventArgs e);
    protected virtual void OnNodeMouseHover(TreeNodeMouseHoverEventArgs e);
    protected virtual void OnBeforeSelect(TreeViewCancelEventArgs e);
    protected virtual void OnAfterSelect(TreeViewEventArgs e);
    protected virtual void OnNodeMouseClick(TreeNodeMouseClickEventArgs e);
    protected virtual void OnNodeMouseDoubleClick(TreeNodeMouseClickEventArgs e);
    protected virtual void OnKeyDown(KeyEventArgs e);
    protected virtual void OnKeyUp(KeyEventArgs e);
    protected virtual void OnKeyPress(KeyPressEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnRightToLeftLayoutChanged(EventArgs e);
    public void Sort();
    public virtual string ToString();
    protected OwnerDrawPropertyBag GetItemRenderStyles(TreeNode node, int state);
    protected virtual void WndProc(Message& m);
}
public enum System.Windows.Forms.TreeViewAction : Enum {
    public int value__;
    public static TreeViewAction Unknown;
    public static TreeViewAction ByKeyboard;
    public static TreeViewAction ByMouse;
    public static TreeViewAction Collapse;
    public static TreeViewAction Expand;
}
public class System.Windows.Forms.TreeViewCancelEventArgs : CancelEventArgs {
    public TreeNode Node { get; }
    public TreeViewAction Action { get; }
    public TreeViewCancelEventArgs(TreeNode node, bool cancel, TreeViewAction action);
    public TreeNode get_Node();
    public TreeViewAction get_Action();
}
public class System.Windows.Forms.TreeViewCancelEventHandler : MulticastDelegate {
    public TreeViewCancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TreeViewCancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TreeViewCancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.TreeViewDrawMode : Enum {
    public int value__;
    public static TreeViewDrawMode Normal;
    public static TreeViewDrawMode OwnerDrawText;
    public static TreeViewDrawMode OwnerDrawAll;
}
public class System.Windows.Forms.TreeViewEventArgs : EventArgs {
    public TreeNode Node { get; }
    public TreeViewAction Action { get; }
    public TreeViewEventArgs(TreeNode node);
    public TreeViewEventArgs(TreeNode node, TreeViewAction action);
    public TreeNode get_Node();
    public TreeViewAction get_Action();
}
public class System.Windows.Forms.TreeViewEventHandler : MulticastDelegate {
    public TreeViewEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TreeViewEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TreeViewEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.TreeViewHitTestInfo : object {
    public TreeViewHitTestLocations Location { get; }
    public TreeNode Node { get; }
    public TreeViewHitTestInfo(TreeNode hitNode, TreeViewHitTestLocations hitLocation);
    public TreeViewHitTestLocations get_Location();
    public TreeNode get_Node();
}
[FlagsAttribute]
[ComVisibleAttribute("True")]
public enum System.Windows.Forms.TreeViewHitTestLocations : Enum {
    public int value__;
    public static TreeViewHitTestLocations None;
    public static TreeViewHitTestLocations Image;
    public static TreeViewHitTestLocations Label;
    public static TreeViewHitTestLocations Indent;
    public static TreeViewHitTestLocations AboveClientArea;
    public static TreeViewHitTestLocations BelowClientArea;
    public static TreeViewHitTestLocations LeftOfClientArea;
    public static TreeViewHitTestLocations RightOfClientArea;
    public static TreeViewHitTestLocations RightOfLabel;
    public static TreeViewHitTestLocations StateImage;
    public static TreeViewHitTestLocations PlusMinus;
}
public class System.Windows.Forms.TreeViewImageIndexConverter : ImageIndexConverter {
    protected bool IncludeNoneAsStandardValue { get; }
    protected virtual bool get_IncludeNoneAsStandardValue();
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
}
public class System.Windows.Forms.TreeViewImageKeyConverter : ImageKeyConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Windows.Forms.TypeValidationEventArgs : EventArgs {
    public bool Cancel { get; public set; }
    public bool IsValidInput { get; }
    public string Message { get; }
    public object ReturnValue { get; }
    public Type ValidatingType { get; }
    public TypeValidationEventArgs(Type validatingType, bool isValidInput, object returnValue, string message);
    public bool get_Cancel();
    public void set_Cancel(bool value);
    public bool get_IsValidInput();
    public string get_Message();
    public object get_ReturnValue();
    public Type get_ValidatingType();
}
public class System.Windows.Forms.TypeValidationEventHandler : MulticastDelegate {
    public TypeValidationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, TypeValidationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, TypeValidationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Windows.Forms.UICues : Enum {
    public int value__;
    public static UICues ShowFocus;
    public static UICues ShowKeyboard;
    public static UICues Shown;
    public static UICues ChangeFocus;
    public static UICues ChangeKeyboard;
    public static UICues Changed;
    public static UICues None;
}
public class System.Windows.Forms.UICuesEventArgs : EventArgs {
    public bool ShowFocus { get; }
    public bool ShowKeyboard { get; }
    public bool ChangeFocus { get; }
    public bool ChangeKeyboard { get; }
    public UICues Changed { get; }
    public UICuesEventArgs(UICues uicues);
    public bool get_ShowFocus();
    public bool get_ShowKeyboard();
    public bool get_ChangeFocus();
    public bool get_ChangeKeyboard();
    public UICues get_Changed();
}
public class System.Windows.Forms.UICuesEventHandler : MulticastDelegate {
    public UICuesEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UICuesEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UICuesEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.UnhandledExceptionMode : Enum {
    public int value__;
    public static UnhandledExceptionMode Automatic;
    public static UnhandledExceptionMode ThrowException;
    public static UnhandledExceptionMode CatchException;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.UpDownBaseDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public abstract class System.Windows.Forms.UpDownBase : ContainerControl {
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AutoScroll { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMargin { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Size AutoScrollMinSize { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DispIdAttribute("-504")]
[SRDescriptionAttribute("UpDownBaseBorderStyleDescr")]
public BorderStyle BorderStyle { get; public set; }
    protected bool ChangingText { get; protected set; }
    public ContextMenu ContextMenu { get; public set; }
    public ContextMenuStrip ContextMenuStrip { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public DockPaddingEdges DockPadding { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("ControlFocusedDescr")]
public bool Focused { get; }
    public Color ForeColor { get; public set; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
[SRDescriptionAttribute("UpDownBaseInterceptArrowKeysDescr")]
public bool InterceptArrowKeys { get; public set; }
    public Size MaximumSize { get; public set; }
    public Size MinimumSize { get; public set; }
    [SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("2")]
[DesignerSerializationVisibilityAttribute("0")]
[SRDescriptionAttribute("UpDownBasePreferredHeightDescr")]
public int PreferredHeight { get; }
    [SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
[SRDescriptionAttribute("UpDownBaseReadOnlyDescr")]
public bool ReadOnly { get; public set; }
    [LocalizableAttribute("True")]
public string Text { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("UpDownBaseTextAlignDescr")]
public HorizontalAlignment TextAlign { get; public set; }
    [LocalizableAttribute("True")]
[SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("UpDownBaseAlignmentDescr")]
public LeftRightAlignment UpDownAlign { get; public set; }
    protected bool UserEdit { get; protected set; }
    private static UpDownBase();
    public virtual bool get_AutoScroll();
    public virtual void set_AutoScroll(bool value);
    public Size get_AutoScrollMargin();
    public void set_AutoScrollMargin(Size value);
    public Size get_AutoScrollMinSize();
    public void set_AutoScrollMinSize(Size value);
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    protected bool get_ChangingText();
    protected void set_ChangingText(bool value);
    public virtual ContextMenu get_ContextMenu();
    public virtual void set_ContextMenu(ContextMenu value);
    public virtual ContextMenuStrip get_ContextMenuStrip();
    public virtual void set_ContextMenuStrip(ContextMenuStrip value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    public DockPaddingEdges get_DockPadding();
    public virtual bool get_Focused();
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public bool get_InterceptArrowKeys();
    public void set_InterceptArrowKeys(bool value);
    public virtual Size get_MaximumSize();
    public virtual void set_MaximumSize(Size value);
    public virtual Size get_MinimumSize();
    public virtual void set_MinimumSize(Size value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_MouseHover(EventHandler value);
    public void remove_MouseHover(EventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public int get_PreferredHeight();
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public HorizontalAlignment get_TextAlign();
    public void set_TextAlign(HorizontalAlignment value);
    public LeftRightAlignment get_UpDownAlign();
    public void set_UpDownAlign(LeftRightAlignment value);
    protected bool get_UserEdit();
    protected void set_UserEdit(bool value);
    public abstract virtual void DownButton();
    protected virtual void OnChanged(object source, EventArgs e);
    protected virtual void OnHandleCreated(EventArgs e);
    protected virtual void OnHandleDestroyed(EventArgs e);
    protected virtual void OnPaint(PaintEventArgs e);
    protected virtual void OnTextBoxKeyDown(object source, KeyEventArgs e);
    protected virtual void OnTextBoxKeyPress(object source, KeyPressEventArgs e);
    protected virtual void OnTextBoxLostFocus(object source, EventArgs e);
    protected virtual void OnTextBoxResize(object source, EventArgs e);
    protected virtual void OnTextBoxTextChanged(object source, EventArgs e);
    protected virtual void OnMouseDown(MouseEventArgs e);
    protected virtual void OnMouseUp(MouseEventArgs mevent);
    protected virtual void OnMouseWheel(MouseEventArgs e);
    protected virtual void OnLayout(LayoutEventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    public void Select(int start, int length);
    public abstract virtual void UpButton();
    protected abstract virtual void UpdateEditText();
    protected virtual void ValidateEditText();
    [EditorBrowsableAttribute("2")]
protected virtual void WndProc(Message& m);
}
public class System.Windows.Forms.UpDownEventArgs : EventArgs {
    public int ButtonID { get; }
    public UpDownEventArgs(int buttonPushed);
    public int get_ButtonID();
}
public class System.Windows.Forms.UpDownEventHandler : MulticastDelegate {
    public UpDownEventHandler(object object, IntPtr method);
    public virtual void Invoke(object source, UpDownEventArgs e);
    public virtual IAsyncResult BeginInvoke(object source, UpDownEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DesignerAttribute("System.Windows.Forms.Design.UserControlDocumentDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")]
[DesignerAttribute("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[DesignerCategoryAttribute("UserControl")]
[DefaultEventAttribute("Load")]
public class System.Windows.Forms.UserControl : ContainerControl {
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
[DesignerSerializationVisibilityAttribute("1")]
public bool AutoSize { get; public set; }
    [SRDescriptionAttribute("ControlAutoSizeModeDescr")]
[SRCategoryAttribute("CatLayout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[LocalizableAttribute("True")]
public AutoSizeMode AutoSizeMode { get; public set; }
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public AutoValidate AutoValidate { get; public set; }
    [SRCategoryAttribute("CatAppearance")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[SRDescriptionAttribute("UserControlBorderStyleDescr")]
[BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public BorderStyle BorderStyle { get; public set; }
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[BindableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string Text { get; public set; }
    private static UserControl();
    public virtual bool get_AutoSize();
    public virtual void set_AutoSize(bool value);
    public void add_AutoSizeChanged(EventHandler value);
    public void remove_AutoSizeChanged(EventHandler value);
    public AutoSizeMode get_AutoSizeMode();
    public void set_AutoSizeMode(AutoSizeMode value);
    public virtual AutoValidate get_AutoValidate();
    public virtual void set_AutoValidate(AutoValidate value);
    public void add_AutoValidateChanged(EventHandler value);
    public void remove_AutoValidateChanged(EventHandler value);
    public BorderStyle get_BorderStyle();
    public void set_BorderStyle(BorderStyle value);
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    public void add_Load(EventHandler value);
    public void remove_Load(EventHandler value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public virtual bool ValidateChildren();
    [BrowsableAttribute("True")]
[EditorBrowsableAttribute("0")]
public virtual bool ValidateChildren(ValidationConstraints validationConstraints);
    [EditorBrowsableAttribute("2")]
protected virtual void OnCreateControl();
    [EditorBrowsableAttribute("2")]
protected virtual void OnLoad(EventArgs e);
    protected virtual void OnResize(EventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void OnMouseDown(MouseEventArgs e);
    [EditorBrowsableAttribute("2")]
protected virtual void WndProc(Message& m);
}
[FlagsAttribute]
public enum System.Windows.Forms.ValidationConstraints : Enum {
    public int value__;
    public static ValidationConstraints None;
    public static ValidationConstraints Selectable;
    public static ValidationConstraints Enabled;
    public static ValidationConstraints Visible;
    public static ValidationConstraints TabStop;
    public static ValidationConstraints ImmediateChildren;
}
public enum System.Windows.Forms.View : Enum {
    public int value__;
    public static View LargeIcon;
    public static View Details;
    public static View SmallIcon;
    public static View List;
    public static View Tile;
}
public enum System.Windows.Forms.VisualStyles.BackgroundType : Enum {
    public int value__;
    public static BackgroundType ImageFile;
    public static BackgroundType BorderFill;
    public static BackgroundType None;
}
public enum System.Windows.Forms.VisualStyles.BooleanProperty : Enum {
    public int value__;
    public static BooleanProperty Transparent;
    public static BooleanProperty AutoSize;
    public static BooleanProperty BorderOnly;
    public static BooleanProperty Composited;
    public static BooleanProperty BackgroundFill;
    public static BooleanProperty GlyphTransparent;
    public static BooleanProperty GlyphOnly;
    public static BooleanProperty AlwaysShowSizingBar;
    public static BooleanProperty MirrorImage;
    public static BooleanProperty UniformSizing;
    public static BooleanProperty IntegralSizing;
    public static BooleanProperty SourceGrow;
    public static BooleanProperty SourceShrink;
}
public enum System.Windows.Forms.VisualStyles.BorderType : Enum {
    public int value__;
    public static BorderType Rectangle;
    public static BorderType RoundedRectangle;
    public static BorderType Ellipse;
}
public enum System.Windows.Forms.VisualStyles.CheckBoxState : Enum {
    public int value__;
    public static CheckBoxState UncheckedNormal;
    public static CheckBoxState UncheckedHot;
    public static CheckBoxState UncheckedPressed;
    public static CheckBoxState UncheckedDisabled;
    public static CheckBoxState CheckedNormal;
    public static CheckBoxState CheckedHot;
    public static CheckBoxState CheckedPressed;
    public static CheckBoxState CheckedDisabled;
    public static CheckBoxState MixedNormal;
    public static CheckBoxState MixedHot;
    public static CheckBoxState MixedPressed;
    public static CheckBoxState MixedDisabled;
}
public enum System.Windows.Forms.VisualStyles.ColorProperty : Enum {
    public int value__;
    public static ColorProperty BorderColor;
    public static ColorProperty FillColor;
    public static ColorProperty TextColor;
    public static ColorProperty EdgeLightColor;
    public static ColorProperty EdgeHighlightColor;
    public static ColorProperty EdgeShadowColor;
    public static ColorProperty EdgeDarkShadowColor;
    public static ColorProperty EdgeFillColor;
    public static ColorProperty TransparentColor;
    public static ColorProperty GradientColor1;
    public static ColorProperty GradientColor2;
    public static ColorProperty GradientColor3;
    public static ColorProperty GradientColor4;
    public static ColorProperty GradientColor5;
    public static ColorProperty ShadowColor;
    public static ColorProperty GlowColor;
    public static ColorProperty TextBorderColor;
    public static ColorProperty TextShadowColor;
    public static ColorProperty GlyphTextColor;
    public static ColorProperty GlyphTransparentColor;
    public static ColorProperty FillColorHint;
    public static ColorProperty BorderColorHint;
    public static ColorProperty AccentColorHint;
}
public enum System.Windows.Forms.VisualStyles.ComboBoxState : Enum {
    public int value__;
    public static ComboBoxState Normal;
    public static ComboBoxState Hot;
    public static ComboBoxState Pressed;
    public static ComboBoxState Disabled;
}
public enum System.Windows.Forms.VisualStyles.ContentAlignment : Enum {
    public int value__;
    public static ContentAlignment Left;
    public static ContentAlignment Center;
    public static ContentAlignment Right;
}
[FlagsAttribute]
public enum System.Windows.Forms.VisualStyles.EdgeEffects : Enum {
    public int value__;
    public static EdgeEffects None;
    public static EdgeEffects FillInterior;
    public static EdgeEffects Flat;
    public static EdgeEffects Soft;
    public static EdgeEffects Mono;
}
[FlagsAttribute]
public enum System.Windows.Forms.VisualStyles.Edges : Enum {
    public int value__;
    public static Edges Left;
    public static Edges Top;
    public static Edges Right;
    public static Edges Bottom;
    public static Edges Diagonal;
}
public enum System.Windows.Forms.VisualStyles.EdgeStyle : Enum {
    public int value__;
    public static EdgeStyle Raised;
    public static EdgeStyle Sunken;
    public static EdgeStyle Etched;
    public static EdgeStyle Bump;
}
public enum System.Windows.Forms.VisualStyles.EnumProperty : Enum {
    public int value__;
    public static EnumProperty BackgroundType;
    public static EnumProperty BorderType;
    public static EnumProperty FillType;
    public static EnumProperty SizingType;
    public static EnumProperty HorizontalAlignment;
    public static EnumProperty ContentAlignment;
    public static EnumProperty VerticalAlignment;
    public static EnumProperty OffsetType;
    public static EnumProperty IconEffect;
    public static EnumProperty TextShadowType;
    public static EnumProperty ImageLayout;
    public static EnumProperty GlyphType;
    public static EnumProperty ImageSelectType;
    public static EnumProperty GlyphFontSizingType;
    public static EnumProperty TrueSizeScalingType;
}
public enum System.Windows.Forms.VisualStyles.FilenameProperty : Enum {
    public int value__;
    public static FilenameProperty ImageFile;
    public static FilenameProperty ImageFile1;
    public static FilenameProperty ImageFile2;
    public static FilenameProperty ImageFile3;
    public static FilenameProperty ImageFile4;
    public static FilenameProperty ImageFile5;
    public static FilenameProperty StockImageFile;
    public static FilenameProperty GlyphImageFile;
}
public enum System.Windows.Forms.VisualStyles.FillType : Enum {
    public int value__;
    public static FillType Solid;
    public static FillType VerticalGradient;
    public static FillType HorizontalGradient;
    public static FillType RadialGradient;
    public static FillType TileImage;
}
public enum System.Windows.Forms.VisualStyles.FontProperty : Enum {
    public int value__;
    public static FontProperty GlyphFont;
}
public enum System.Windows.Forms.VisualStyles.GlyphFontSizingType : Enum {
    public int value__;
    public static GlyphFontSizingType None;
    public static GlyphFontSizingType Size;
    public static GlyphFontSizingType Dpi;
}
public enum System.Windows.Forms.VisualStyles.GlyphType : Enum {
    public int value__;
    public static GlyphType None;
    public static GlyphType ImageGlyph;
    public static GlyphType FontGlyph;
}
public enum System.Windows.Forms.VisualStyles.GroupBoxState : Enum {
    public int value__;
    public static GroupBoxState Normal;
    public static GroupBoxState Disabled;
}
public enum System.Windows.Forms.VisualStyles.HitTestCode : Enum {
    public int value__;
    public static HitTestCode Nowhere;
    public static HitTestCode Client;
    public static HitTestCode Left;
    public static HitTestCode Right;
    public static HitTestCode Top;
    public static HitTestCode Bottom;
    public static HitTestCode TopLeft;
    public static HitTestCode TopRight;
    public static HitTestCode BottomLeft;
    public static HitTestCode BottomRight;
}
[FlagsAttribute]
public enum System.Windows.Forms.VisualStyles.HitTestOptions : Enum {
    public int value__;
    public static HitTestOptions BackgroundSegment;
    public static HitTestOptions FixedBorder;
    public static HitTestOptions Caption;
    public static HitTestOptions ResizingBorderLeft;
    public static HitTestOptions ResizingBorderTop;
    public static HitTestOptions ResizingBorderRight;
    public static HitTestOptions ResizingBorderBottom;
    public static HitTestOptions ResizingBorder;
    public static HitTestOptions SizingTemplate;
    public static HitTestOptions SystemSizingMargins;
}
public enum System.Windows.Forms.VisualStyles.HorizontalAlign : Enum {
    public int value__;
    public static HorizontalAlign Left;
    public static HorizontalAlign Center;
    public static HorizontalAlign Right;
}
public enum System.Windows.Forms.VisualStyles.IconEffect : Enum {
    public int value__;
    public static IconEffect None;
    public static IconEffect Glow;
    public static IconEffect Shadow;
    public static IconEffect Pulse;
    public static IconEffect Alpha;
}
public enum System.Windows.Forms.VisualStyles.ImageOrientation : Enum {
    public int value__;
    public static ImageOrientation Vertical;
    public static ImageOrientation Horizontal;
}
public enum System.Windows.Forms.VisualStyles.ImageSelectType : Enum {
    public int value__;
    public static ImageSelectType None;
    public static ImageSelectType Size;
    public static ImageSelectType Dpi;
}
public enum System.Windows.Forms.VisualStyles.IntegerProperty : Enum {
    public int value__;
    public static IntegerProperty ImageCount;
    public static IntegerProperty AlphaLevel;
    public static IntegerProperty BorderSize;
    public static IntegerProperty RoundCornerWidth;
    public static IntegerProperty RoundCornerHeight;
    public static IntegerProperty GradientRatio1;
    public static IntegerProperty GradientRatio2;
    public static IntegerProperty GradientRatio3;
    public static IntegerProperty GradientRatio4;
    public static IntegerProperty GradientRatio5;
    public static IntegerProperty ProgressChunkSize;
    public static IntegerProperty ProgressSpaceSize;
    public static IntegerProperty Saturation;
    public static IntegerProperty TextBorderSize;
    public static IntegerProperty AlphaThreshold;
    public static IntegerProperty Width;
    public static IntegerProperty Height;
    public static IntegerProperty GlyphIndex;
    public static IntegerProperty TrueSizeStretchMark;
    public static IntegerProperty MinDpi1;
    public static IntegerProperty MinDpi2;
    public static IntegerProperty MinDpi3;
    public static IntegerProperty MinDpi4;
    public static IntegerProperty MinDpi5;
}
public enum System.Windows.Forms.VisualStyles.MarginProperty : Enum {
    public int value__;
    public static MarginProperty SizingMargins;
    public static MarginProperty ContentMargins;
    public static MarginProperty CaptionMargins;
}
public enum System.Windows.Forms.VisualStyles.OffsetType : Enum {
    public int value__;
    public static OffsetType TopLeft;
    public static OffsetType TopRight;
    public static OffsetType TopMiddle;
    public static OffsetType BottomLeft;
    public static OffsetType BottomRight;
    public static OffsetType BottomMiddle;
    public static OffsetType MiddleLeft;
    public static OffsetType MiddleRight;
    public static OffsetType LeftOfCaption;
    public static OffsetType RightOfCaption;
    public static OffsetType LeftOfLastButton;
    public static OffsetType RightOfLastButton;
    public static OffsetType AboveLastButton;
    public static OffsetType BelowLastButton;
}
public enum System.Windows.Forms.VisualStyles.PointProperty : Enum {
    public int value__;
    public static PointProperty Offset;
    public static PointProperty TextShadowOffset;
    public static PointProperty MinSize;
    public static PointProperty MinSize1;
    public static PointProperty MinSize2;
    public static PointProperty MinSize3;
    public static PointProperty MinSize4;
    public static PointProperty MinSize5;
}
public enum System.Windows.Forms.VisualStyles.PushButtonState : Enum {
    public int value__;
    public static PushButtonState Normal;
    public static PushButtonState Hot;
    public static PushButtonState Pressed;
    public static PushButtonState Disabled;
    public static PushButtonState Default;
}
public enum System.Windows.Forms.VisualStyles.RadioButtonState : Enum {
    public int value__;
    public static RadioButtonState UncheckedNormal;
    public static RadioButtonState UncheckedHot;
    public static RadioButtonState UncheckedPressed;
    public static RadioButtonState UncheckedDisabled;
    public static RadioButtonState CheckedNormal;
    public static RadioButtonState CheckedHot;
    public static RadioButtonState CheckedPressed;
    public static RadioButtonState CheckedDisabled;
}
public enum System.Windows.Forms.VisualStyles.ScrollBarArrowButtonState : Enum {
    public int value__;
    public static ScrollBarArrowButtonState UpNormal;
    public static ScrollBarArrowButtonState UpHot;
    public static ScrollBarArrowButtonState UpPressed;
    public static ScrollBarArrowButtonState UpDisabled;
    public static ScrollBarArrowButtonState DownNormal;
    public static ScrollBarArrowButtonState DownHot;
    public static ScrollBarArrowButtonState DownPressed;
    public static ScrollBarArrowButtonState DownDisabled;
    public static ScrollBarArrowButtonState LeftNormal;
    public static ScrollBarArrowButtonState LeftHot;
    public static ScrollBarArrowButtonState LeftPressed;
    public static ScrollBarArrowButtonState LeftDisabled;
    public static ScrollBarArrowButtonState RightNormal;
    public static ScrollBarArrowButtonState RightHot;
    public static ScrollBarArrowButtonState RightPressed;
    public static ScrollBarArrowButtonState RightDisabled;
}
public enum System.Windows.Forms.VisualStyles.ScrollBarSizeBoxState : Enum {
    public int value__;
    public static ScrollBarSizeBoxState RightAlign;
    public static ScrollBarSizeBoxState LeftAlign;
}
public enum System.Windows.Forms.VisualStyles.ScrollBarState : Enum {
    public int value__;
    public static ScrollBarState Normal;
    public static ScrollBarState Hot;
    public static ScrollBarState Pressed;
    public static ScrollBarState Disabled;
}
public enum System.Windows.Forms.VisualStyles.SizingType : Enum {
    public int value__;
    public static SizingType FixedSize;
    public static SizingType Stretch;
    public static SizingType Tile;
}
public enum System.Windows.Forms.VisualStyles.StringProperty : Enum {
    public int value__;
    public static StringProperty Text;
}
public enum System.Windows.Forms.VisualStyles.TabItemState : Enum {
    public int value__;
    public static TabItemState Normal;
    public static TabItemState Hot;
    public static TabItemState Selected;
    public static TabItemState Disabled;
}
public enum System.Windows.Forms.VisualStyles.TextBoxState : Enum {
    public int value__;
    public static TextBoxState Normal;
    public static TextBoxState Hot;
    public static TextBoxState Selected;
    public static TextBoxState Disabled;
    public static TextBoxState Readonly;
    public static TextBoxState Assist;
}
public class System.Windows.Forms.VisualStyles.TextMetrics : ValueType {
    private int height;
    private int ascent;
    private int descent;
    private int internalLeading;
    private int externalLeading;
    private int aveCharWidth;
    private int maxCharWidth;
    private int weight;
    private int overhang;
    private int digitizedAspectX;
    private int digitizedAspectY;
    private char firstChar;
    private char lastChar;
    private char defaultChar;
    private char breakChar;
    private bool italic;
    private bool underlined;
    private bool struckOut;
    private TextMetricsPitchAndFamilyValues pitchAndFamily;
    private TextMetricsCharacterSet charSet;
    public int Height { get; public set; }
    public int Ascent { get; public set; }
    public int Descent { get; public set; }
    public int InternalLeading { get; public set; }
    public int ExternalLeading { get; public set; }
    public int AverageCharWidth { get; public set; }
    public int MaxCharWidth { get; public set; }
    public int Weight { get; public set; }
    public int Overhang { get; public set; }
    public int DigitizedAspectX { get; public set; }
    public int DigitizedAspectY { get; public set; }
    public char FirstChar { get; public set; }
    public char LastChar { get; public set; }
    public char DefaultChar { get; public set; }
    public char BreakChar { get; public set; }
    public bool Italic { get; public set; }
    public bool Underlined { get; public set; }
    public bool StruckOut { get; public set; }
    public TextMetricsPitchAndFamilyValues PitchAndFamily { get; public set; }
    public TextMetricsCharacterSet CharSet { get; public set; }
    public int get_Height();
    public void set_Height(int value);
    public int get_Ascent();
    public void set_Ascent(int value);
    public int get_Descent();
    public void set_Descent(int value);
    public int get_InternalLeading();
    public void set_InternalLeading(int value);
    public int get_ExternalLeading();
    public void set_ExternalLeading(int value);
    public int get_AverageCharWidth();
    public void set_AverageCharWidth(int value);
    public int get_MaxCharWidth();
    public void set_MaxCharWidth(int value);
    public int get_Weight();
    public void set_Weight(int value);
    public int get_Overhang();
    public void set_Overhang(int value);
    public int get_DigitizedAspectX();
    public void set_DigitizedAspectX(int value);
    public int get_DigitizedAspectY();
    public void set_DigitizedAspectY(int value);
    public char get_FirstChar();
    public void set_FirstChar(char value);
    public char get_LastChar();
    public void set_LastChar(char value);
    public char get_DefaultChar();
    public void set_DefaultChar(char value);
    public char get_BreakChar();
    public void set_BreakChar(char value);
    public bool get_Italic();
    public void set_Italic(bool value);
    public bool get_Underlined();
    public void set_Underlined(bool value);
    public bool get_StruckOut();
    public void set_StruckOut(bool value);
    public TextMetricsPitchAndFamilyValues get_PitchAndFamily();
    public void set_PitchAndFamily(TextMetricsPitchAndFamilyValues value);
    public TextMetricsCharacterSet get_CharSet();
    public void set_CharSet(TextMetricsCharacterSet value);
}
public enum System.Windows.Forms.VisualStyles.TextMetricsCharacterSet : Enum {
    public int value__;
    public static TextMetricsCharacterSet Ansi;
    public static TextMetricsCharacterSet Baltic;
    public static TextMetricsCharacterSet ChineseBig5;
    public static TextMetricsCharacterSet Default;
    public static TextMetricsCharacterSet EastEurope;
    public static TextMetricsCharacterSet Gb2312;
    public static TextMetricsCharacterSet Greek;
    public static TextMetricsCharacterSet Hangul;
    public static TextMetricsCharacterSet Mac;
    public static TextMetricsCharacterSet Oem;
    public static TextMetricsCharacterSet Russian;
    public static TextMetricsCharacterSet ShiftJis;
    public static TextMetricsCharacterSet Symbol;
    public static TextMetricsCharacterSet Turkish;
    public static TextMetricsCharacterSet Vietnamese;
    public static TextMetricsCharacterSet Johab;
    public static TextMetricsCharacterSet Arabic;
    public static TextMetricsCharacterSet Hebrew;
    public static TextMetricsCharacterSet Thai;
}
[FlagsAttribute]
public enum System.Windows.Forms.VisualStyles.TextMetricsPitchAndFamilyValues : Enum {
    public int value__;
    public static TextMetricsPitchAndFamilyValues FixedPitch;
    public static TextMetricsPitchAndFamilyValues Vector;
    public static TextMetricsPitchAndFamilyValues TrueType;
    public static TextMetricsPitchAndFamilyValues Device;
}
public enum System.Windows.Forms.VisualStyles.TextShadowType : Enum {
    public int value__;
    public static TextShadowType None;
    public static TextShadowType Single;
    public static TextShadowType Continuous;
}
public enum System.Windows.Forms.VisualStyles.ThemeSizeType : Enum {
    public int value__;
    public static ThemeSizeType Minimum;
    public static ThemeSizeType True;
    public static ThemeSizeType Draw;
}
public enum System.Windows.Forms.VisualStyles.ToolBarState : Enum {
    public int value__;
    public static ToolBarState Normal;
    public static ToolBarState Hot;
    public static ToolBarState Pressed;
    public static ToolBarState Disabled;
    public static ToolBarState Checked;
    public static ToolBarState HotChecked;
}
public enum System.Windows.Forms.VisualStyles.TrackBarThumbState : Enum {
    public int value__;
    public static TrackBarThumbState Normal;
    public static TrackBarThumbState Hot;
    public static TrackBarThumbState Pressed;
    public static TrackBarThumbState Disabled;
}
public enum System.Windows.Forms.VisualStyles.TrueSizeScalingType : Enum {
    public int value__;
    public static TrueSizeScalingType None;
    public static TrueSizeScalingType Size;
    public static TrueSizeScalingType Dpi;
}
public enum System.Windows.Forms.VisualStyles.VerticalAlignment : Enum {
    public int value__;
    public static VerticalAlignment Top;
    public static VerticalAlignment Center;
    public static VerticalAlignment Bottom;
}
public class System.Windows.Forms.VisualStyles.VisualStyleElement : object {
    public string ClassName { get; }
    public int Part { get; }
    public int State { get; }
    private static VisualStyleElement();
    public static VisualStyleElement CreateElement(string className, int part, int state);
    public string get_ClassName();
    public int get_Part();
    public int get_State();
}
public static class System.Windows.Forms.VisualStyles.VisualStyleInformation : object {
    public static bool IsSupportedByOS { get; }
    public static bool IsEnabledByUser { get; }
    public static string ColorScheme { get; }
    public static string Size { get; }
    public static string DisplayName { get; }
    public static string Company { get; }
    public static string Author { get; }
    public static string Copyright { get; }
    public static string Url { get; }
    public static string Version { get; }
    public static string Description { get; }
    public static bool SupportsFlatMenus { get; }
    public static int MinimumColorDepth { get; }
    public static Color TextControlBorder { get; }
    public static Color ControlHighlightHot { get; }
    private static VisualStyleInformation();
    public static bool get_IsSupportedByOS();
    public static bool get_IsEnabledByUser();
    public static string get_ColorScheme();
    public static string get_Size();
    public static string get_DisplayName();
    public static string get_Company();
    public static string get_Author();
    public static string get_Copyright();
    public static string get_Url();
    public static string get_Version();
    public static string get_Description();
    public static bool get_SupportsFlatMenus();
    public static int get_MinimumColorDepth();
    public static Color get_TextControlBorder();
    public static Color get_ControlHighlightHot();
}
public class System.Windows.Forms.VisualStyles.VisualStyleRenderer : object {
    public static bool IsSupported { get; }
    public string Class { get; }
    public int Part { get; }
    public int State { get; }
    public IntPtr Handle { get; }
    public int LastHResult { get; }
    private static VisualStyleRenderer();
    public VisualStyleRenderer(VisualStyleElement element);
    public VisualStyleRenderer(string className, int part, int state);
    public static bool get_IsSupported();
    public static bool IsElementDefined(VisualStyleElement element);
    public string get_Class();
    public int get_Part();
    public int get_State();
    public IntPtr get_Handle();
    public void SetParameters(VisualStyleElement element);
    public void SetParameters(string className, int part, int state);
    public void DrawBackground(IDeviceContext dc, Rectangle bounds);
    public void DrawBackground(IDeviceContext dc, Rectangle bounds, Rectangle clipRectangle);
    public Rectangle DrawEdge(IDeviceContext dc, Rectangle bounds, Edges edges, EdgeStyle style, EdgeEffects effects);
    public void DrawImage(Graphics g, Rectangle bounds, Image image);
    public void DrawImage(Graphics g, Rectangle bounds, ImageList imageList, int imageIndex);
    public void DrawParentBackground(IDeviceContext dc, Rectangle bounds, Control childControl);
    public void DrawText(IDeviceContext dc, Rectangle bounds, string textToDraw);
    public void DrawText(IDeviceContext dc, Rectangle bounds, string textToDraw, bool drawDisabled);
    public void DrawText(IDeviceContext dc, Rectangle bounds, string textToDraw, bool drawDisabled, TextFormatFlags flags);
    public Rectangle GetBackgroundContentRectangle(IDeviceContext dc, Rectangle bounds);
    public Rectangle GetBackgroundExtent(IDeviceContext dc, Rectangle contentBounds);
    [SuppressUnmanagedCodeSecurityAttribute]
public Region GetBackgroundRegion(IDeviceContext dc, Rectangle bounds);
    public bool GetBoolean(BooleanProperty prop);
    public Color GetColor(ColorProperty prop);
    public int GetEnumValue(EnumProperty prop);
    public string GetFilename(FilenameProperty prop);
    public Font GetFont(IDeviceContext dc, FontProperty prop);
    public int GetInteger(IntegerProperty prop);
    public Size GetPartSize(IDeviceContext dc, ThemeSizeType type);
    public Size GetPartSize(IDeviceContext dc, Rectangle bounds, ThemeSizeType type);
    public Point GetPoint(PointProperty prop);
    public Padding GetMargins(IDeviceContext dc, MarginProperty prop);
    public string GetString(StringProperty prop);
    public Rectangle GetTextExtent(IDeviceContext dc, string textToDraw, TextFormatFlags flags);
    public Rectangle GetTextExtent(IDeviceContext dc, Rectangle bounds, string textToDraw, TextFormatFlags flags);
    public TextMetrics GetTextMetrics(IDeviceContext dc);
    public HitTestCode HitTestBackground(IDeviceContext dc, Rectangle backgroundRectangle, Point pt, HitTestOptions options);
    public HitTestCode HitTestBackground(Graphics g, Rectangle backgroundRectangle, Region region, Point pt, HitTestOptions options);
    public HitTestCode HitTestBackground(IDeviceContext dc, Rectangle backgroundRectangle, IntPtr hRgn, Point pt, HitTestOptions options);
    public bool IsBackgroundPartiallyTransparent();
    public int get_LastHResult();
}
public enum System.Windows.Forms.VisualStyles.VisualStyleState : Enum {
    public int value__;
    public static VisualStyleState NoneEnabled;
    public static VisualStyleState ClientAreaEnabled;
    public static VisualStyleState NonClientAreaEnabled;
    public static VisualStyleState ClientAndNonClientAreasEnabled;
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[SRDescriptionAttribute("DescriptionVScrollBar")]
public class System.Windows.Forms.VScrollBar : ScrollBar {
    protected CreateParams CreateParams { get; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
public RightToLeft RightToLeft { get; public set; }
    protected virtual CreateParams get_CreateParams();
    protected virtual Size get_DefaultSize();
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
}
public class System.Windows.Forms.VScrollProperties : ScrollProperties {
    public VScrollProperties(ScrollableControl container);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Url")]
[DefaultEventAttribute("DocumentCompleted")]
[DockingAttribute("2")]
[SRDescriptionAttribute("DescriptionWebBrowser")]
[DesignerAttribute("System.Windows.Forms.Design.WebBrowserDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.WebBrowser : WebBrowserBase {
    [SRDescriptionAttribute("WebBrowserAllowNavigationDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
public bool AllowNavigation { get; public set; }
    [SRDescriptionAttribute("WebBrowserAllowWebBrowserDropDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
public bool AllowWebBrowserDrop { get; public set; }
    [SRDescriptionAttribute("WebBrowserScriptErrorsSuppressedDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("False")]
public bool ScriptErrorsSuppressed { get; public set; }
    [SRDescriptionAttribute("WebBrowserWebBrowserShortcutsEnabledDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
public bool WebBrowserShortcutsEnabled { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CanGoBack { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool CanGoForward { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public HtmlDocument Document { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Stream DocumentStream { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DocumentText { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DocumentTitle { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string DocumentType { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebBrowserEncryptionLevel EncryptionLevel { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsBusy { get; }
    [SRDescriptionAttribute("WebBrowserIsOfflineDescr")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsOffline { get; }
    [SRDescriptionAttribute("WebBrowserIsWebBrowserContextMenuEnabledDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
public bool IsWebBrowserContextMenuEnabled { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object ObjectForScripting { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Padding Padding { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public WebBrowserReadyState ReadyState { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string StatusText { get; }
    [SRDescriptionAttribute("WebBrowserUrlDescr")]
[BindableAttribute("True")]
[SRCategoryAttribute("CatBehavior")]
[TypeConverterAttribute("System.Windows.Forms.WebBrowserUriTypeConverter")]
[DefaultValueAttribute("")]
public Uri Url { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public Version Version { get; }
    [SRDescriptionAttribute("WebBrowserScrollBarsEnabledDescr")]
[SRCategoryAttribute("CatBehavior")]
[DefaultValueAttribute("True")]
public bool ScrollBarsEnabled { get; public set; }
    public bool Focused { get; }
    protected Size DefaultSize { get; }
    public bool get_AllowNavigation();
    public void set_AllowNavigation(bool value);
    public bool get_AllowWebBrowserDrop();
    public void set_AllowWebBrowserDrop(bool value);
    public bool get_ScriptErrorsSuppressed();
    public void set_ScriptErrorsSuppressed(bool value);
    public bool get_WebBrowserShortcutsEnabled();
    public void set_WebBrowserShortcutsEnabled(bool value);
    public bool get_CanGoBack();
    public bool get_CanGoForward();
    public HtmlDocument get_Document();
    public Stream get_DocumentStream();
    public void set_DocumentStream(Stream value);
    public string get_DocumentText();
    public void set_DocumentText(string value);
    public string get_DocumentTitle();
    public string get_DocumentType();
    public WebBrowserEncryptionLevel get_EncryptionLevel();
    public bool get_IsBusy();
    public bool get_IsOffline();
    public bool get_IsWebBrowserContextMenuEnabled();
    public void set_IsWebBrowserContextMenuEnabled(bool value);
    public object get_ObjectForScripting();
    public void set_ObjectForScripting(object value);
    public Padding get_Padding();
    public void set_Padding(Padding value);
    public void add_PaddingChanged(EventHandler value);
    public void remove_PaddingChanged(EventHandler value);
    public WebBrowserReadyState get_ReadyState();
    public virtual string get_StatusText();
    public Uri get_Url();
    public void set_Url(Uri value);
    public Version get_Version();
    public bool GoBack();
    public bool GoForward();
    public void GoHome();
    public void GoSearch();
    public void Navigate(Uri url);
    public void Navigate(string urlString);
    public void Navigate(Uri url, string targetFrameName);
    public void Navigate(string urlString, string targetFrameName);
    public void Navigate(Uri url, bool newWindow);
    public void Navigate(string urlString, bool newWindow);
    public void Navigate(Uri url, string targetFrameName, Byte[] postData, string additionalHeaders);
    public void Navigate(string urlString, string targetFrameName, Byte[] postData, string additionalHeaders);
    public void Print();
    public virtual void Refresh();
    public void Refresh(WebBrowserRefreshOption opt);
    public bool get_ScrollBarsEnabled();
    public void set_ScrollBarsEnabled(bool value);
    public void ShowPageSetupDialog();
    public void ShowPrintDialog();
    public void ShowPrintPreviewDialog();
    public void ShowPropertiesDialog();
    public void ShowSaveAsDialog();
    public void Stop();
    [CompilerGeneratedAttribute]
public void add_CanGoBackChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CanGoBackChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_CanGoForwardChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CanGoForwardChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_DocumentCompleted(WebBrowserDocumentCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DocumentCompleted(WebBrowserDocumentCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_DocumentTitleChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_DocumentTitleChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_EncryptionLevelChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_EncryptionLevelChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_FileDownload(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_FileDownload(EventHandler value);
    [CompilerGeneratedAttribute]
public void add_Navigated(WebBrowserNavigatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Navigated(WebBrowserNavigatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_Navigating(WebBrowserNavigatingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Navigating(WebBrowserNavigatingEventHandler value);
    [CompilerGeneratedAttribute]
public void add_NewWindow(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_NewWindow(CancelEventHandler value);
    [CompilerGeneratedAttribute]
public void add_ProgressChanged(WebBrowserProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ProgressChanged(WebBrowserProgressChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_StatusTextChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_StatusTextChanged(EventHandler value);
    public virtual bool get_Focused();
    protected virtual void Dispose(bool disposing);
    protected virtual Size get_DefaultSize();
    protected virtual void AttachInterfaces(object nativeActiveXObject);
    protected virtual void DetachInterfaces();
    protected virtual WebBrowserSiteBase CreateWebBrowserSiteBase();
    protected virtual void CreateSink();
    protected virtual void DetachSink();
    protected virtual void OnCanGoBackChanged(EventArgs e);
    protected virtual void OnCanGoForwardChanged(EventArgs e);
    protected virtual void OnDocumentCompleted(WebBrowserDocumentCompletedEventArgs e);
    protected virtual void OnDocumentTitleChanged(EventArgs e);
    protected virtual void OnEncryptionLevelChanged(EventArgs e);
    protected virtual void OnFileDownload(EventArgs e);
    protected virtual void OnNavigated(WebBrowserNavigatedEventArgs e);
    protected virtual void OnNavigating(WebBrowserNavigatingEventArgs e);
    protected virtual void OnNewWindow(CancelEventArgs e);
    protected virtual void OnProgressChanged(WebBrowserProgressChangedEventArgs e);
    protected virtual void OnStatusTextChanged(EventArgs e);
    protected virtual void WndProc(Message& m);
}
[ComVisibleAttribute("True")]
[ClassInterfaceAttribute("1")]
[DefaultPropertyAttribute("Name")]
[DefaultEventAttribute("Enter")]
[DesignerAttribute("System.Windows.Forms.Design.AxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class System.Windows.Forms.WebBrowserBase : Control {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public object ActiveXInstance { get; }
    unknown ISite Site {public set; }
    protected Size DefaultSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color BackColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Font Font { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Color ForeColor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImeMode ImeMode { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool AllowDrop { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Image BackgroundImage { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public ImageLayout BackgroundImageLayout { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public Cursor Cursor { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Enabled { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[LocalizableAttribute("False")]
public RightToLeft RightToLeft { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BindableAttribute("False")]
public string Text { get; public set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool UseWaitCursor { get; public set; }
    public object get_ActiveXInstance();
    protected virtual WebBrowserSiteBase CreateWebBrowserSiteBase();
    protected virtual void AttachInterfaces(object nativeActiveXObject);
    protected virtual void DetachInterfaces();
    protected virtual void CreateSink();
    protected virtual void DetachSink();
    [EditorBrowsableAttribute("1")]
public void DrawToBitmap(Bitmap bitmap, Rectangle targetBounds);
    public virtual void set_Site(ISite value);
    protected virtual bool ProcessDialogKey(Keys keyData);
    public virtual bool PreProcessMessage(Message& msg);
    protected internal virtual bool ProcessMnemonic(char charCode);
    protected virtual void WndProc(Message& m);
    protected virtual void OnParentChanged(EventArgs e);
    protected virtual void OnVisibleChanged(EventArgs e);
    protected virtual void OnGotFocus(EventArgs e);
    protected virtual void OnLostFocus(EventArgs e);
    protected virtual void OnRightToLeftChanged(EventArgs e);
    protected virtual void OnFontChanged(EventArgs e);
    protected virtual void OnForeColorChanged(EventArgs e);
    protected virtual void OnBackColorChanged(EventArgs e);
    protected virtual void Dispose(bool disposing);
    protected virtual Size get_DefaultSize();
    protected virtual bool IsInputChar(char charCode);
    [EditorBrowsableAttribute("2")]
protected virtual void OnHandleCreated(EventArgs e);
    public virtual Color get_BackColor();
    public virtual void set_BackColor(Color value);
    public virtual Font get_Font();
    public virtual void set_Font(Font value);
    public virtual Color get_ForeColor();
    public virtual void set_ForeColor(Color value);
    public ImeMode get_ImeMode();
    public void set_ImeMode(ImeMode value);
    public virtual bool get_AllowDrop();
    public virtual void set_AllowDrop(bool value);
    public virtual Image get_BackgroundImage();
    public virtual void set_BackgroundImage(Image value);
    public virtual ImageLayout get_BackgroundImageLayout();
    public virtual void set_BackgroundImageLayout(ImageLayout value);
    public virtual Cursor get_Cursor();
    public virtual void set_Cursor(Cursor value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public virtual RightToLeft get_RightToLeft();
    public virtual void set_RightToLeft(RightToLeft value);
    public virtual string get_Text();
    public virtual void set_Text(string value);
    public bool get_UseWaitCursor();
    public void set_UseWaitCursor(bool value);
    public void add_BackgroundImageLayoutChanged(EventHandler value);
    public void remove_BackgroundImageLayoutChanged(EventHandler value);
    public void add_Enter(EventHandler value);
    public void remove_Enter(EventHandler value);
    public void add_Leave(EventHandler value);
    public void remove_Leave(EventHandler value);
    public void add_MouseCaptureChanged(EventHandler value);
    public void remove_MouseCaptureChanged(EventHandler value);
    public void add_MouseClick(MouseEventHandler value);
    public void remove_MouseClick(MouseEventHandler value);
    public void add_MouseDoubleClick(MouseEventHandler value);
    public void remove_MouseDoubleClick(MouseEventHandler value);
    public void add_BackColorChanged(EventHandler value);
    public void remove_BackColorChanged(EventHandler value);
    public void add_BackgroundImageChanged(EventHandler value);
    public void remove_BackgroundImageChanged(EventHandler value);
    public void add_BindingContextChanged(EventHandler value);
    public void remove_BindingContextChanged(EventHandler value);
    public void add_CursorChanged(EventHandler value);
    public void remove_CursorChanged(EventHandler value);
    public void add_EnabledChanged(EventHandler value);
    public void remove_EnabledChanged(EventHandler value);
    public void add_FontChanged(EventHandler value);
    public void remove_FontChanged(EventHandler value);
    public void add_ForeColorChanged(EventHandler value);
    public void remove_ForeColorChanged(EventHandler value);
    public void add_RightToLeftChanged(EventHandler value);
    public void remove_RightToLeftChanged(EventHandler value);
    public void add_TextChanged(EventHandler value);
    public void remove_TextChanged(EventHandler value);
    public void add_Click(EventHandler value);
    public void remove_Click(EventHandler value);
    public void add_DragDrop(DragEventHandler value);
    public void remove_DragDrop(DragEventHandler value);
    public void add_DragEnter(DragEventHandler value);
    public void remove_DragEnter(DragEventHandler value);
    public void add_DragOver(DragEventHandler value);
    public void remove_DragOver(DragEventHandler value);
    public void add_DragLeave(EventHandler value);
    public void remove_DragLeave(EventHandler value);
    public void add_GiveFeedback(GiveFeedbackEventHandler value);
    public void remove_GiveFeedback(GiveFeedbackEventHandler value);
    public void add_HelpRequested(HelpEventHandler value);
    public void remove_HelpRequested(HelpEventHandler value);
    public void add_Paint(PaintEventHandler value);
    public void remove_Paint(PaintEventHandler value);
    public void add_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void remove_QueryContinueDrag(QueryContinueDragEventHandler value);
    public void add_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void remove_QueryAccessibilityHelp(QueryAccessibilityHelpEventHandler value);
    public void add_DoubleClick(EventHandler value);
    public void remove_DoubleClick(EventHandler value);
    public void add_ImeModeChanged(EventHandler value);
    public void remove_ImeModeChanged(EventHandler value);
    public void add_KeyDown(KeyEventHandler value);
    public void remove_KeyDown(KeyEventHandler value);
    public void add_KeyPress(KeyPressEventHandler value);
    public void remove_KeyPress(KeyPressEventHandler value);
    public void add_KeyUp(KeyEventHandler value);
    public void remove_KeyUp(KeyEventHandler value);
    public void add_Layout(LayoutEventHandler value);
    public void remove_Layout(LayoutEventHandler value);
    public void add_MouseDown(MouseEventHandler value);
    public void remove_MouseDown(MouseEventHandler value);
    public void add_MouseEnter(EventHandler value);
    public void remove_MouseEnter(EventHandler value);
    public void add_MouseLeave(EventHandler value);
    public void remove_MouseLeave(EventHandler value);
    public void add_MouseHover(EventHandler value);
    public void remove_MouseHover(EventHandler value);
    public void add_MouseMove(MouseEventHandler value);
    public void remove_MouseMove(MouseEventHandler value);
    public void add_MouseUp(MouseEventHandler value);
    public void remove_MouseUp(MouseEventHandler value);
    public void add_MouseWheel(MouseEventHandler value);
    public void remove_MouseWheel(MouseEventHandler value);
    public void add_ChangeUICues(UICuesEventHandler value);
    public void remove_ChangeUICues(UICuesEventHandler value);
    public void add_StyleChanged(EventHandler value);
    public void remove_StyleChanged(EventHandler value);
}
public class System.Windows.Forms.WebBrowserDocumentCompletedEventArgs : EventArgs {
    public Uri Url { get; }
    public WebBrowserDocumentCompletedEventArgs(Uri url);
    public Uri get_Url();
}
public class System.Windows.Forms.WebBrowserDocumentCompletedEventHandler : MulticastDelegate {
    public WebBrowserDocumentCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebBrowserDocumentCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebBrowserDocumentCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.WebBrowserEncryptionLevel : Enum {
    public int value__;
    public static WebBrowserEncryptionLevel Insecure;
    public static WebBrowserEncryptionLevel Mixed;
    public static WebBrowserEncryptionLevel Unknown;
    public static WebBrowserEncryptionLevel Bit40;
    public static WebBrowserEncryptionLevel Bit56;
    public static WebBrowserEncryptionLevel Fortezza;
    public static WebBrowserEncryptionLevel Bit128;
}
public class System.Windows.Forms.WebBrowserNavigatedEventArgs : EventArgs {
    public Uri Url { get; }
    public WebBrowserNavigatedEventArgs(Uri url);
    public Uri get_Url();
}
public class System.Windows.Forms.WebBrowserNavigatedEventHandler : MulticastDelegate {
    public WebBrowserNavigatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebBrowserNavigatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebBrowserNavigatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.WebBrowserNavigatingEventArgs : CancelEventArgs {
    public Uri Url { get; }
    public string TargetFrameName { get; }
    public WebBrowserNavigatingEventArgs(Uri url, string targetFrameName);
    public Uri get_Url();
    public string get_TargetFrameName();
}
public class System.Windows.Forms.WebBrowserNavigatingEventHandler : MulticastDelegate {
    public WebBrowserNavigatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebBrowserNavigatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebBrowserNavigatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Windows.Forms.WebBrowserProgressChangedEventArgs : EventArgs {
    public long CurrentProgress { get; }
    public long MaximumProgress { get; }
    public WebBrowserProgressChangedEventArgs(long currentProgress, long maximumProgress);
    public long get_CurrentProgress();
    public long get_MaximumProgress();
}
public class System.Windows.Forms.WebBrowserProgressChangedEventHandler : MulticastDelegate {
    public WebBrowserProgressChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, WebBrowserProgressChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, WebBrowserProgressChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Windows.Forms.WebBrowserReadyState : Enum {
    public int value__;
    public static WebBrowserReadyState Uninitialized;
    public static WebBrowserReadyState Loading;
    public static WebBrowserReadyState Loaded;
    public static WebBrowserReadyState Interactive;
    public static WebBrowserReadyState Complete;
}
public enum System.Windows.Forms.WebBrowserRefreshOption : Enum {
    public int value__;
    public static WebBrowserRefreshOption Normal;
    public static WebBrowserRefreshOption IfExpired;
    public static WebBrowserRefreshOption Continue;
    public static WebBrowserRefreshOption Completely;
}
public class System.Windows.Forms.WebBrowserSiteBase : object {
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
internal class System.Windows.Forms.WebBrowserUriTypeConverter : UriTypeConverter {
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[AttributeUsageAttribute("32767")]
internal class System.Windows.Forms.WinCategoryAttribute : CategoryAttribute {
    public WinCategoryAttribute(string category);
    protected virtual string GetLocalizedString(string value);
}
public class System.Windows.Forms.WindowsFormsSection : ConfigurationSection {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("jitDebugging")]
public bool JitDebugging { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public bool get_JitDebugging();
    public void set_JitDebugging(bool value);
}
public class System.Windows.Forms.WindowsFormsSynchronizationContext : SynchronizationContext {
    [EditorBrowsableAttribute("2")]
public static bool AutoInstall { get; public set; }
    public sealed virtual void Dispose();
    public virtual void Send(SendOrPostCallback d, object state);
    public virtual void Post(SendOrPostCallback d, object state);
    public virtual SynchronizationContext CreateCopy();
    public static bool get_AutoInstall();
    public static void set_AutoInstall(bool value);
    public static void Uninstall();
}
