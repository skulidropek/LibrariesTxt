[DebuggerStepThroughAttribute]
[ContentPropertyAttribute("ExpressionText")]
public class Microsoft.CSharp.Activities.CSharpReference`1 : CodeActivity`1<Location`1<TResult>> {
    public string ExpressionText { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Language { get; }
    public bool RequiresCompilation { get; }
    public CSharpReference`1(string expressionText);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExpressionText();
    [CompilerGeneratedAttribute]
public void set_ExpressionText(string value);
    public sealed virtual string get_Language();
    public sealed virtual bool get_RequiresCompilation();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual Location`1<TResult> Execute(CodeActivityContext context);
    public sealed virtual Expression GetExpressionTree();
}
[DebuggerStepThroughAttribute]
[ContentPropertyAttribute("ExpressionText")]
public class Microsoft.CSharp.Activities.CSharpValue`1 : CodeActivity`1<TResult> {
    public string ExpressionText { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Language { get; }
    public bool RequiresCompilation { get; }
    public CSharpValue`1(string expressionText);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExpressionText();
    [CompilerGeneratedAttribute]
public void set_ExpressionText(string value);
    public sealed virtual string get_Language();
    public sealed virtual bool get_RequiresCompilation();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
    public sealed virtual Expression GetExpressionTree();
}
public static class Microsoft.VisualBasic.Activities.VisualBasic : object {
    private static VisualBasic();
    public static void SetSettings(object target, VisualBasicSettings value);
    public static VisualBasicSettings GetSettings(object target);
    public static void SetSettingsForImplementation(object target, VisualBasicSettings value);
    public static bool ShouldSerializeSettings(object target);
}
public static class Microsoft.VisualBasic.Activities.VisualBasicDesignerHelper : object {
    public static Constraint NameShadowingConstraint { get; }
    private static VisualBasicDesignerHelper();
    public static Constraint get_NameShadowingConstraint();
    public static Activity RecompileVisualBasicValue(ActivityWithResult visualBasicValue, Type& returnType, SourceExpressionException& compileError, VisualBasicSettings& vbSettings);
    public static Activity RecompileVisualBasicReference(ActivityWithResult visualBasicReference, Type& returnType, SourceExpressionException& compileError, VisualBasicSettings& vbSettings);
    public static Activity CreatePrecompiledVisualBasicValue(Type targetType, string expressionText, IEnumerable`1<string> namespaces, IEnumerable`1<string> referencedAssemblies, LocationReferenceEnvironment environment, Type& returnType, SourceExpressionException& compileError, VisualBasicSettings& vbSettings);
    public static Activity CreatePrecompiledVisualBasicReference(Type targetType, string expressionText, IEnumerable`1<string> namespaces, IEnumerable`1<string> referencedAssemblies, LocationReferenceEnvironment environment, Type& returnType, SourceExpressionException& compileError, VisualBasicSettings& vbSettings);
}
internal class Microsoft.VisualBasic.Activities.VisualBasicHelper : object {
    public static HashSet`1<Assembly> DefaultReferencedAssemblies;
    internal static string Language { get; }
    public string TextToCompile { get; }
    public VisualBasicHelper(string expressionText, HashSet`1<AssemblyName> refAssemNames, HashSet`1<string> namespaceImportsNames);
    private static VisualBasicHelper();
    internal static string get_Language();
    public static AssemblyName GetFastAssemblyName(Assembly assembly);
    public string get_TextToCompile();
    public static void GetAllImportReferences(Activity activity, bool isDesignTime, IList`1& namespaces, IList`1& assemblies);
    public static Expression`1<Func`2<ActivityContext, T>> Compile(string expressionText, CodeActivityPublicEnvironmentAccessor publicAccessor, bool isLocationExpression);
    [SecuritySafeCriticalAttribute]
public LambdaExpression CompileNonGeneric(LocationReferenceEnvironment environment);
    public Expression`1<Func`2<ActivityContext, T>> Compile(CodeActivityPublicEnvironmentAccessor publicAccessor, bool isLocationReference);
    public Expression`1<Func`2<ActivityContext, T>> Compile(LocationReferenceEnvironment environment);
    [SecuritySafeCriticalAttribute]
public Expression`1<Func`2<ActivityContext, T>> Compile(LocationReferenceEnvironment environment, bool isLocationReference);
}
public class Microsoft.VisualBasic.Activities.VisualBasicImportReference : object {
    public string Assembly { get; public set; }
    public string Import { get; public set; }
    internal AssemblyName AssemblyName { get; }
    internal XNamespace Xmlns { get; internal set; }
    internal Assembly EarlyBoundAssembly { get; internal set; }
    private static VisualBasicImportReference();
    public string get_Assembly();
    public void set_Assembly(string value);
    public string get_Import();
    public void set_Import(string value);
    internal AssemblyName get_AssemblyName();
    [CompilerGeneratedAttribute]
internal XNamespace get_Xmlns();
    [CompilerGeneratedAttribute]
internal void set_Xmlns(XNamespace value);
    [CompilerGeneratedAttribute]
internal Assembly get_EarlyBoundAssembly();
    [CompilerGeneratedAttribute]
internal void set_EarlyBoundAssembly(Assembly value);
    internal VisualBasicImportReference Clone();
    public virtual int GetHashCode();
    public sealed virtual bool Equals(VisualBasicImportReference other);
    internal void GenerateXamlNamespace(INamespacePrefixLookup namespaceLookup);
}
internal class Microsoft.VisualBasic.Activities.VisualBasicNameShadowingConstraint : Constraint {
    protected virtual void OnExecute(NativeActivityContext context, object objectToValidate, ValidationContext objectToValidateContext);
}
[DebuggerStepThroughAttribute]
public class Microsoft.VisualBasic.Activities.VisualBasicReference`1 : CodeActivity`1<Location`1<TResult>> {
    public string ExpressionText { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Language { get; }
    public bool RequiresCompilation { get; }
    public VisualBasicReference`1(string expressionText);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExpressionText();
    [CompilerGeneratedAttribute]
public void set_ExpressionText(string value);
    public sealed virtual string get_Language();
    public sealed virtual bool get_RequiresCompilation();
    protected virtual Location`1<TResult> Execute(CodeActivityContext context);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    public sealed virtual bool CanConvertToString(IValueSerializerContext context);
    public sealed virtual string ConvertToString(IValueSerializerContext context);
    public sealed virtual Expression GetExpressionTree();
}
[ValueSerializerAttribute("Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer")]
[TypeConverterAttribute("Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter")]
public class Microsoft.VisualBasic.Activities.VisualBasicSettings : object {
    public static VisualBasicSettings Default { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public ISet`1<VisualBasicImportReference> ImportReferences { get; private set; }
    internal bool SuppressXamlSerialization { get; internal set; }
    private static VisualBasicSettings();
    public static VisualBasicSettings get_Default();
    [CompilerGeneratedAttribute]
public ISet`1<VisualBasicImportReference> get_ImportReferences();
    [CompilerGeneratedAttribute]
private void set_ImportReferences(ISet`1<VisualBasicImportReference> value);
    [CompilerGeneratedAttribute]
internal bool get_SuppressXamlSerialization();
    [CompilerGeneratedAttribute]
internal void set_SuppressXamlSerialization(bool value);
    internal void GenerateXamlReferences(IValueSerializerContext context);
    internal static T GetService(ITypeDescriptorContext context);
}
[DebuggerStepThroughAttribute]
public class Microsoft.VisualBasic.Activities.VisualBasicValue`1 : CodeActivity`1<TResult> {
    public string ExpressionText { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Language { get; }
    public bool RequiresCompilation { get; }
    public VisualBasicValue`1(string expressionText);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ExpressionText();
    [CompilerGeneratedAttribute]
public void set_ExpressionText(string value);
    public sealed virtual string get_Language();
    public sealed virtual bool get_RequiresCompilation();
    protected virtual TResult Execute(CodeActivityContext context);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    public sealed virtual bool CanConvertToString(IValueSerializerContext context);
    public sealed virtual string ConvertToString(IValueSerializerContext context);
    public sealed virtual Expression GetExpressionTree();
}
internal static class Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicExpressionConverter : object {
    private static VisualBasicExpressionConverter();
    public static VisualBasicSettings CollectXmlNamespacesAndAssemblies(ITypeDescriptorContext context);
}
public class Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer : ValueSerializer {
    internal static string VisualBasicSettingsValue;
    internal static string ImplementationVisualBasicSettingsValue;
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
}
[ContentPropertyAttribute("Implementation")]
public abstract class System.Activities.Activity : object {
    internal static ReadOnlyCollection`1<Constraint> EmptyConstraints;
    [TypeConverterAttribute("System.Activities.XamlIntegration.ImplementationVersionConverter")]
[DefaultValueAttribute("")]
protected internal Version ImplementationVersion { get; protected internal set; }
    [XamlDeferLoadAttribute("System.Activities.XamlIntegration.FuncDeferringLoader", "System.Activities.Activity")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[AmbientAttribute]
protected Func`1<Activity> Implementation { get; protected set; }
    protected Collection`1<Constraint> Constraints { get; }
    protected internal int CacheId { get; }
    internal RelationshipType RelationshipToParent { get; }
    internal bool HasNonEmptySubtree { get; }
    internal int SymbolCount { get; }
    internal IdSpace MemberOf { get; internal set; }
    internal IdSpace ParentOf { get; internal set; }
    internal QualifiedId QualifiedId { get; }
    internal bool UseOldFastPath { get; internal set; }
    internal bool SkipArgumentResolution { get; internal set; }
    internal bool IsFastPath { get; }
    internal bool IsActivityWithResult { get; }
    internal object Origin { get; internal set; }
    public string DisplayName { get; public set; }
    public string Id { get; }
    internal bool IsExpressionRoot { get; }
    internal bool HasStartedCachingMetadata { get; }
    internal bool IsMetadataCached { get; }
    internal bool IsMetadataFullyCached { get; }
    internal bool IsRuntimeReady { get; }
    internal Activity RootActivity { get; }
    internal int InternalId { get; internal set; }
    internal ActivityDelegate HandlerOf { get; private set; }
    internal Activity Parent { get; private set; }
    internal LocationReferenceEnvironment HostEnvironment { get; }
    internal IList`1<RuntimeArgument> RuntimeArguments { get; }
    internal IList`1<Activity> Children { get; }
    internal IList`1<Activity> ImplementationChildren { get; }
    internal IList`1<Activity> ImportedChildren { get; }
    internal IList`1<ActivityDelegate> Delegates { get; }
    internal IList`1<ActivityDelegate> ImplementationDelegates { get; }
    internal IList`1<ActivityDelegate> ImportedDelegates { get; }
    internal bool HasBeenAssociatedWithAnInstance { get; internal set; }
    internal Dictionary`2<string, List`1<RuntimeArgument>> OverloadGroups { get; internal set; }
    internal List`1<RuntimeArgument> RequiredArgumentsNotInOverloadGroups { get; internal set; }
    internal OverloadGroupEquivalenceInfo EquivalenceInfo { get; internal set; }
    internal IList`1<Variable> RuntimeVariables { get; }
    internal IList`1<Variable> ImplementationVariables { get; }
    internal IList`1<Constraint> RuntimeConstraints { get; }
    internal LocationReferenceEnvironment PublicEnvironment { get; internal set; }
    internal LocationReferenceEnvironment ImplementationEnvironment { get; internal set; }
    internal bool InternalCanInduceIdle { get; }
    internal bool HasTempViolations { get; }
    internal object ThisLock { get; }
    internal int RequiredExtensionTypesCount { get; }
    internal int DefaultExtensionsCount { get; }
    private static Activity();
    [CompilerGeneratedAttribute]
protected internal virtual Version get_ImplementationVersion();
    [CompilerGeneratedAttribute]
protected internal virtual void set_ImplementationVersion(Version value);
    [CompilerGeneratedAttribute]
protected virtual Func`1<Activity> get_Implementation();
    [CompilerGeneratedAttribute]
protected virtual void set_Implementation(Func`1<Activity> value);
    protected Collection`1<Constraint> get_Constraints();
    protected internal int get_CacheId();
    internal RelationshipType get_RelationshipToParent();
    internal bool get_HasNonEmptySubtree();
    internal int get_SymbolCount();
    [CompilerGeneratedAttribute]
internal IdSpace get_MemberOf();
    [CompilerGeneratedAttribute]
internal void set_MemberOf(IdSpace value);
    [CompilerGeneratedAttribute]
internal IdSpace get_ParentOf();
    [CompilerGeneratedAttribute]
internal void set_ParentOf(IdSpace value);
    internal QualifiedId get_QualifiedId();
    [CompilerGeneratedAttribute]
internal bool get_UseOldFastPath();
    [CompilerGeneratedAttribute]
internal void set_UseOldFastPath(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SkipArgumentResolution();
    [CompilerGeneratedAttribute]
internal void set_SkipArgumentResolution(bool value);
    internal bool get_IsFastPath();
    internal virtual bool get_IsActivityWithResult();
    [CompilerGeneratedAttribute]
internal object get_Origin();
    [CompilerGeneratedAttribute]
internal void set_Origin(object value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Id();
    internal bool get_IsExpressionRoot();
    internal bool get_HasStartedCachingMetadata();
    internal bool get_IsMetadataCached();
    internal bool get_IsMetadataFullyCached();
    internal bool get_IsRuntimeReady();
    internal Activity get_RootActivity();
    internal int get_InternalId();
    internal void set_InternalId(int value);
    [CompilerGeneratedAttribute]
internal ActivityDelegate get_HandlerOf();
    [CompilerGeneratedAttribute]
private void set_HandlerOf(ActivityDelegate value);
    [CompilerGeneratedAttribute]
internal Activity get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(Activity value);
    internal LocationReferenceEnvironment get_HostEnvironment();
    internal IList`1<RuntimeArgument> get_RuntimeArguments();
    internal IList`1<Activity> get_Children();
    internal IList`1<Activity> get_ImplementationChildren();
    internal IList`1<Activity> get_ImportedChildren();
    internal IList`1<ActivityDelegate> get_Delegates();
    internal IList`1<ActivityDelegate> get_ImplementationDelegates();
    internal IList`1<ActivityDelegate> get_ImportedDelegates();
    internal bool get_HasBeenAssociatedWithAnInstance();
    internal void set_HasBeenAssociatedWithAnInstance(bool value);
    internal Dictionary`2<string, List`1<RuntimeArgument>> get_OverloadGroups();
    internal void set_OverloadGroups(Dictionary`2<string, List`1<RuntimeArgument>> value);
    internal List`1<RuntimeArgument> get_RequiredArgumentsNotInOverloadGroups();
    internal void set_RequiredArgumentsNotInOverloadGroups(List`1<RuntimeArgument> value);
    internal OverloadGroupEquivalenceInfo get_EquivalenceInfo();
    internal void set_EquivalenceInfo(OverloadGroupEquivalenceInfo value);
    internal IList`1<Variable> get_RuntimeVariables();
    internal IList`1<Variable> get_ImplementationVariables();
    internal IList`1<Constraint> get_RuntimeConstraints();
    [CompilerGeneratedAttribute]
internal LocationReferenceEnvironment get_PublicEnvironment();
    [CompilerGeneratedAttribute]
internal void set_PublicEnvironment(LocationReferenceEnvironment value);
    [CompilerGeneratedAttribute]
internal LocationReferenceEnvironment get_ImplementationEnvironment();
    [CompilerGeneratedAttribute]
internal void set_ImplementationEnvironment(LocationReferenceEnvironment value);
    internal virtual bool get_InternalCanInduceIdle();
    internal bool get_HasTempViolations();
    internal object get_ThisLock();
    internal int get_RequiredExtensionTypesCount();
    internal int get_DefaultExtensionsCount();
    internal bool GetActivityExtensionInformation(Dictionary`2& activityExtensionProviders, HashSet`1& requiredActivityExtensionTypes);
    internal virtual bool IsResultArgument(RuntimeArgument argument);
    internal bool CanBeScheduledBy(Activity parent);
    internal void ClearIdInfo();
    internal void SetChildrenCollection(Collection`1<Activity> children);
    internal void AddChild(Activity child);
    internal void SetImplementationChildrenCollection(Collection`1<Activity> implementationChildren);
    internal void AddImplementationChild(Activity implementationChild);
    internal void SetImportedChildrenCollection(Collection`1<Activity> importedChildren);
    internal void AddImportedChild(Activity importedChild);
    internal void SetDelegatesCollection(Collection`1<ActivityDelegate> delegates);
    internal void AddDelegate(ActivityDelegate activityDelegate);
    internal void SetImplementationDelegatesCollection(Collection`1<ActivityDelegate> implementationDelegates);
    internal void AddImplementationDelegate(ActivityDelegate implementationDelegate);
    internal void SetImportedDelegatesCollection(Collection`1<ActivityDelegate> importedDelegates);
    internal void AddImportedDelegate(ActivityDelegate importedDelegate);
    internal void SetVariablesCollection(Collection`1<Variable> variables);
    internal void AddVariable(Variable variable);
    internal void SetImplementationVariablesCollection(Collection`1<Variable> implementationVariables);
    internal void AddImplementationVariable(Variable implementationVariable);
    internal void SetArgumentsCollection(Collection`1<RuntimeArgument> arguments, bool createEmptyBindings);
    internal void AddArgument(RuntimeArgument argument, bool createEmptyBindings);
    internal void SetTempValidationErrorCollection(IList`1<ValidationError> validationErrors);
    internal void TransferTempValidationErrors(IList`1& newList);
    internal void AddTempValidationError(ValidationError validationError);
    internal RuntimeArgument AddTempAutoGeneratedArgument(Type argumentType, ArgumentDirection direction);
    internal void ResetTempAutoGeneratedArguments();
    internal virtual IList`1<Constraint> InternalGetConstraints();
    internal static bool NullCheck(T obj);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeDisplayName();
    internal virtual void InternalAbort(ActivityInstance instance, ActivityExecutor executor, Exception terminationReason);
    internal virtual void InternalExecute(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal virtual void InternalCancel(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal bool IsSingletonActivityDeclared(string name);
    internal void DeclareSingletonActivity(string name, Activity activity);
    internal Activity GetSingletonActivity(string name);
    internal void ClearCachedInformation();
    internal void InitializeAsRoot(LocationReferenceEnvironment hostEnvironment);
    internal LocationReferenceEnvironment GetParentEnvironment();
    internal bool InitializeRelationship(ActivityDelegate activityDelegate, ActivityCollectionType collectionType, IList`1& validationErrors);
    internal bool InitializeRelationship(RuntimeArgument argument, IList`1& validationErrors);
    internal bool InitializeRelationship(Variable variable, bool isPublic, IList`1& validationErrors);
    internal bool InitializeRelationship(Activity parent, ActivityCollectionType collectionType, IList`1& validationErrors);
    internal void InternalCacheMetadata(bool createEmptyBindings, IList`1& validationErrors);
    internal void SetCached(bool isSkippingPrivateChildren);
    internal void SetRuntimeReady();
    internal virtual void OnInternalCacheMetadata(bool createEmptyBindings);
    protected virtual void CacheMetadata(ActivityMetadata metadata);
    internal virtual void OnInternalCreateDynamicUpdateMap(Finalizer finalizer, IDefinitionMatcher matcher, Activity originalActivity);
    protected virtual void OnCreateDynamicUpdateMap(UpdateMapMetadata metadata, Activity originalActivity);
    internal void AddDefaultExtensionProvider(Func`1<T> extensionProvider);
    internal void RequireExtension(Type extensionType);
}
[TypeConverterAttribute("System.Activities.XamlIntegration.ActivityWithResultConverter")]
[ValueSerializerAttribute("System.Activities.XamlIntegration.ActivityWithResultValueSerializer")]
public abstract class System.Activities.Activity`1 : ActivityWithResult {
    [DefaultValueAttribute("")]
public OutArgument`1<TResult> Result { get; public set; }
    internal Type InternalResultType { get; }
    internal OutArgument ResultCore { get; internal set; }
    [CompilerGeneratedAttribute]
public OutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(OutArgument`1<TResult> value);
    internal virtual Type get_InternalResultType();
    internal virtual OutArgument get_ResultCore();
    internal virtual void set_ResultCore(OutArgument value);
    public static Activity`1<TResult> op_Implicit(TResult constValue);
    public static Activity`1<TResult> op_Implicit(Variable variable);
    public static Activity`1<TResult> op_Implicit(Variable`1<TResult> variable);
    public static Activity`1<TResult> FromValue(TResult constValue);
    public static Activity`1<TResult> FromVariable(Variable variable);
    public static Activity`1<TResult> FromVariable(Variable`1<TResult> variable);
    internal virtual bool IsResultArgument(RuntimeArgument argument);
    internal sealed virtual void OnInternalCacheMetadata(bool createEmptyBindings);
    internal virtual void OnInternalCacheMetadataExceptResult(bool createEmptyBindings);
    internal virtual object InternalExecuteInResolutionContextUntyped(CodeActivityContext resolutionContext);
    internal virtual TResult InternalExecuteInResolutionContext(CodeActivityContext resolutionContext);
}
public class System.Activities.ActivityAction : ActivityDelegate {
    private static ActivityAction();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`1 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T> Argument { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T> get_Argument();
    [CompilerGeneratedAttribute]
public void set_Argument(DelegateInArgument`1<T> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`10 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`11 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`12 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T12> Argument12 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(DelegateInArgument`1<T12> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`13 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T12> Argument12 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T13> Argument13 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(DelegateInArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(DelegateInArgument`1<T13> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`14 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T12> Argument12 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T13> Argument13 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T14> Argument14 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(DelegateInArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(DelegateInArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(DelegateInArgument`1<T14> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`15 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T12> Argument12 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T13> Argument13 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T14> Argument14 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T15> Argument15 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(DelegateInArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(DelegateInArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(DelegateInArgument`1<T14> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T15> get_Argument15();
    [CompilerGeneratedAttribute]
public void set_Argument15(DelegateInArgument`1<T15> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`16 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T12> Argument12 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T13> Argument13 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T14> Argument14 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T15> Argument15 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T16> Argument16 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(DelegateInArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(DelegateInArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(DelegateInArgument`1<T14> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T15> get_Argument15();
    [CompilerGeneratedAttribute]
public void set_Argument15(DelegateInArgument`1<T15> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T16> get_Argument16();
    [CompilerGeneratedAttribute]
public void set_Argument16(DelegateInArgument`1<T16> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`2 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`3 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`4 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`5 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`6 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`7 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [DefaultValueAttribute("")]
internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`8 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityAction`9 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
[ContentPropertyAttribute("Implementation")]
public class System.Activities.ActivityBuilder : object {
    public string Name { get; public set; }
    [DependsOnAttribute("Name")]
public Collection`1<Attribute> Attributes { get; }
    [BrowsableAttribute("False")]
[DependsOnAttribute("Attributes")]
public KeyedCollection`2<string, DynamicActivityProperty> Properties { get; }
    [DependsOnAttribute("Properties")]
[BrowsableAttribute("False")]
public Collection`1<Constraint> Constraints { get; }
    [TypeConverterAttribute("System.Activities.XamlIntegration.ImplementationVersionConverter")]
[DefaultValueAttribute("")]
[DependsOnAttribute("Name")]
public Version ImplementationVersion { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DependsOnAttribute("Constraints")]
public Activity Implementation { get; public set; }
    private static ActivityBuilder();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public Collection`1<Attribute> get_Attributes();
    public KeyedCollection`2<string, DynamicActivityProperty> get_Properties();
    public Collection`1<Constraint> get_Constraints();
    [CompilerGeneratedAttribute]
public Version get_ImplementationVersion();
    [CompilerGeneratedAttribute]
public void set_ImplementationVersion(Version value);
    [CompilerGeneratedAttribute]
public Activity get_Implementation();
    [CompilerGeneratedAttribute]
public void set_Implementation(Activity value);
    public static ActivityPropertyReference GetPropertyReference(object target);
    public static void SetPropertyReference(object target, ActivityPropertyReference value);
    public static IList`1<ActivityPropertyReference> GetPropertyReferences(object target);
    public static bool ShouldSerializePropertyReference(object target);
    public static bool ShouldSerializePropertyReferences(object target);
    internal static bool HasPropertyReferences(object target);
    private sealed virtual override Activity System.Activities.Debugger.IDebuggableWorkflowTree.GetWorkflowRoot();
    internal static KeyedCollection`2<string, DynamicActivityProperty> CreateActivityPropertyCollection();
}
[ContentPropertyAttribute("Implementation")]
public class System.Activities.ActivityBuilder`1 : object {
    public string Name { get; public set; }
    [DependsOnAttribute("Name")]
public Collection`1<Attribute> Attributes { get; }
    [BrowsableAttribute("False")]
[DependsOnAttribute("Attributes")]
public KeyedCollection`2<string, DynamicActivityProperty> Properties { get; }
    [DependsOnAttribute("Properties")]
[BrowsableAttribute("False")]
public Collection`1<Constraint> Constraints { get; }
    [TypeConverterAttribute("System.Activities.XamlIntegration.ImplementationVersionConverter")]
[DefaultValueAttribute("")]
[DependsOnAttribute("Name")]
public Version ImplementationVersion { get; public set; }
    [DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[DependsOnAttribute("Constraints")]
public Activity Implementation { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public Collection`1<Attribute> get_Attributes();
    public KeyedCollection`2<string, DynamicActivityProperty> get_Properties();
    public Collection`1<Constraint> get_Constraints();
    [CompilerGeneratedAttribute]
public Version get_ImplementationVersion();
    [CompilerGeneratedAttribute]
public void set_ImplementationVersion(Version value);
    [CompilerGeneratedAttribute]
public Activity get_Implementation();
    [CompilerGeneratedAttribute]
public void set_Implementation(Activity value);
    private sealed virtual override Activity System.Activities.Debugger.IDebuggableWorkflowTree.GetWorkflowRoot();
}
internal enum System.Activities.ActivityCollectionType : Enum {
    public int value__;
    public static ActivityCollectionType Public;
    public static ActivityCollectionType Imports;
    public static ActivityCollectionType Implementation;
}
public class System.Activities.ActivityContext : object {
    internal LocationEnvironment Environment { get; }
    internal bool AllowChainedEnvironmentAccess { get; internal set; }
    internal Activity Activity { get; private set; }
    internal ActivityInstance CurrentInstance { get; }
    internal ActivityExecutor CurrentExecutor { get; }
    public string ActivityInstanceId { get; }
    public Guid WorkflowInstanceId { get; }
    public WorkflowDataContext DataContext { get; }
    internal bool IsDisposed { get; }
    internal ActivityContext(ActivityInstance instance, ActivityExecutor executor);
    internal LocationEnvironment get_Environment();
    [CompilerGeneratedAttribute]
internal bool get_AllowChainedEnvironmentAccess();
    [CompilerGeneratedAttribute]
internal void set_AllowChainedEnvironmentAccess(bool value);
    [CompilerGeneratedAttribute]
internal Activity get_Activity();
    [CompilerGeneratedAttribute]
private void set_Activity(Activity value);
    internal ActivityInstance get_CurrentInstance();
    internal ActivityExecutor get_CurrentExecutor();
    public string get_ActivityInstanceId();
    public Guid get_WorkflowInstanceId();
    public WorkflowDataContext get_DataContext();
    internal bool get_IsDisposed();
    public T GetExtension();
    internal Location GetIgnorableResultLocation(RuntimeArgument resultArgument);
    internal void Reinitialize(ActivityInstance instance, ActivityExecutor executor);
    internal void Reinitialize(ActivityInstance instance, ActivityExecutor executor, Activity activity, long instanceId);
    internal void Dispose();
    internal void DisposeDataContext();
    public Location`1<T> GetLocation(LocationReference locationReference);
    public T GetValue(LocationReference locationReference);
    internal T GetValueCore(LocationReference locationReference);
    public void SetValue(LocationReference locationReference, T value);
    internal void SetValueCore(LocationReference locationReference, T value);
    public T GetValue(OutArgument`1<T> argument);
    public T GetValue(InOutArgument`1<T> argument);
    public T GetValue(InArgument`1<T> argument);
    public object GetValue(Argument argument);
    public object GetValue(RuntimeArgument runtimeArgument);
    public void SetValue(OutArgument`1<T> argument, T value);
    public void SetValue(InOutArgument`1<T> argument, T value);
    public void SetValue(InArgument`1<T> argument, T value);
    public void SetValue(Argument argument, object value);
    internal void TrackCore(CustomTrackingRecord record);
    internal void ThrowIfDisposed();
}
internal static class System.Activities.ActivityDefaults : object {
    public static TimeSpan AcquireLockTimeout;
    public static TimeSpan AsyncOperationContextCompleteTimeout;
    public static TimeSpan CloseTimeout;
    public static TimeSpan DeleteTimeout;
    public static TimeSpan InvokeTimeout;
    public static TimeSpan LoadTimeout;
    public static TimeSpan OpenTimeout;
    public static TimeSpan ResumeBookmarkTimeout;
    public static TimeSpan SaveTimeout;
    public static TimeSpan InternalSaveTimeout;
    public static TimeSpan TrackingTimeout;
    public static TimeSpan TransactionCompletionTimeout;
    private static ActivityDefaults();
}
[ContentPropertyAttribute("Handler")]
public abstract class System.Activities.ActivityDelegate : object {
    internal static string ArgumentName;
    internal static string Argument1Name;
    internal static string Argument2Name;
    internal static string Argument3Name;
    internal static string Argument4Name;
    internal static string Argument5Name;
    internal static string Argument6Name;
    internal static string Argument7Name;
    internal static string Argument8Name;
    internal static string Argument9Name;
    internal static string Argument10Name;
    internal static string Argument11Name;
    internal static string Argument12Name;
    internal static string Argument13Name;
    internal static string Argument14Name;
    internal static string Argument15Name;
    internal static string Argument16Name;
    internal static string ResultArgumentName;
    public string DisplayName { get; public set; }
    [DefaultValueAttribute("")]
public Activity Handler { get; public set; }
    internal LocationReferenceEnvironment Environment { get; internal set; }
    internal Activity Owner { get; }
    internal ActivityCollectionType ParentCollectionType { get; }
    internal IList`1<RuntimeDelegateArgument> RuntimeDelegateArguments { get; }
    private static ActivityDelegate();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Activity get_Handler();
    [CompilerGeneratedAttribute]
public void set_Handler(Activity value);
    [CompilerGeneratedAttribute]
internal LocationReferenceEnvironment get_Environment();
    [CompilerGeneratedAttribute]
internal void set_Environment(LocationReferenceEnvironment value);
    internal Activity get_Owner();
    internal ActivityCollectionType get_ParentCollectionType();
    internal IList`1<RuntimeDelegateArgument> get_RuntimeDelegateArguments();
    protected internal virtual DelegateOutArgument GetResultArgument();
    protected virtual void OnGetRuntimeDelegateArguments(IList`1<RuntimeDelegateArgument> runtimeDelegateArguments);
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
    internal void InternalCacheMetadata();
    internal bool CanBeScheduledBy(Activity parent);
    internal bool InitializeRelationship(Activity parent, ActivityCollectionType collectionType, IList`1& validationErrors);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeDisplayName();
    public virtual string ToString();
}
public class System.Activities.ActivityFunc`1 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`10 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`11 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`12 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`13 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T12> Argument12 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(DelegateInArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`14 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T12> Argument12 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T13> Argument13 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(DelegateInArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(DelegateInArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`15 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T12> Argument12 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T13> Argument13 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T14> Argument14 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(DelegateInArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(DelegateInArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(DelegateInArgument`1<T14> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`16 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T12> Argument12 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T13> Argument13 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T14> Argument14 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T15> Argument15 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(DelegateInArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(DelegateInArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(DelegateInArgument`1<T14> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T15> get_Argument15();
    [CompilerGeneratedAttribute]
public void set_Argument15(DelegateInArgument`1<T15> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`17 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T12> Argument12 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T13> Argument13 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T14> Argument14 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T15> Argument15 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T16> Argument16 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(DelegateInArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(DelegateInArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(DelegateInArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(DelegateInArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(DelegateInArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(DelegateInArgument`1<T14> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T15> get_Argument15();
    [CompilerGeneratedAttribute]
public void set_Argument15(DelegateInArgument`1<T15> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T16> get_Argument16();
    [CompilerGeneratedAttribute]
public void set_Argument16(DelegateInArgument`1<T16> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`2 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T> Argument { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T> get_Argument();
    [CompilerGeneratedAttribute]
public void set_Argument(DelegateInArgument`1<T> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`3 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`4 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`5 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`6 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`7 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`8 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
public class System.Activities.ActivityFunc`9 : ActivityDelegate {
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T1> Argument1 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateInArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public DelegateOutArgument`1<TResult> Result { get; public set; }
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(DelegateInArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(DelegateInArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(DelegateInArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(DelegateInArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(DelegateInArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(DelegateInArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(DelegateInArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public DelegateInArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(DelegateInArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public DelegateOutArgument`1<TResult> get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(DelegateOutArgument`1<TResult> value);
    protected internal virtual DelegateOutArgument GetResultArgument();
    internal virtual IList`1<RuntimeDelegateArgument> InternalGetRuntimeDelegateArguments();
}
[DataContractAttribute]
public class System.Activities.ActivityInstance : object {
    public Activity Activity { get; internal set; }
    internal Substate SubState { get; }
    [DataMemberAttribute]
internal LocationEnvironment SerializedEnvironment { get; internal set; }
    [DataMemberAttribute]
internal int SerializedBusyCount { get; internal set; }
    [DataMemberAttribute]
internal ExtendedData SerializedExtendedData { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedNoSymbols { get; internal set; }
    [DataMemberAttribute]
internal ActivityInstanceState SerializedState { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedIsCancellationRequested { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedPerformingDefaultCancelation { get; internal set; }
    [DataMemberAttribute]
internal Substate SerializedSubstate { get; internal set; }
    [DataMemberAttribute]
internal long SerializedId { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedInitializationIncomplete { get; internal set; }
    internal LocationEnvironment Environment { get; }
    internal ActivityInstanceMap InstanceMap { get; }
    public bool IsCompleted { get; }
    public ActivityInstanceState State { get; }
    internal bool IsCancellationRequested { get; internal set; }
    internal bool IsPerformingDefaultCancelation { get; }
    public string Id { get; }
    internal long InternalId { get; }
    internal bool IsEnvironmentOwner { get; }
    internal bool IsResolvingArguments { get; }
    internal bool HasNotExecuted { get; }
    internal bool HasPendingWork { get; }
    internal bool OnlyHasOutstandingBookmarks { get; }
    internal ActivityInstance Parent { get; }
    internal bool WaitingForTransactionContext { get; internal set; }
    [DataMemberAttribute]
internal CompletionBookmark CompletionBookmark { get; internal set; }
    internal FaultBookmark FaultBookmark { get; internal set; }
    internal bool HasChildren { get; }
    internal ExecutionPropertyManager PropertyManager { get; internal set; }
    internal WorkflowDataContext DataContext { get; internal set; }
    internal object CompiledDataContexts { get; internal set; }
    internal object CompiledDataContextsForImplementation { get; internal set; }
    internal bool HasActivityReferences { get; }
    [DataMemberAttribute]
internal ExecutionPropertyManager SerializedPropertyManager { get; internal set; }
    [DataMemberAttribute]
internal ChildList SerializedChildren { get; internal set; }
    [DataMemberAttribute]
internal string OwnerName { get; internal set; }
    [DataMemberAttribute]
public Version ImplementationVersion { get; internal set; }
    internal ActivityInstance(Activity activity);
    public Activity get_Activity();
    internal void set_Activity(Activity value);
    private sealed virtual override Activity System.Activities.Runtime.ActivityInstanceMap.IActivityReference.get_Activity();
    internal Substate get_SubState();
    internal LocationEnvironment get_SerializedEnvironment();
    internal void set_SerializedEnvironment(LocationEnvironment value);
    internal int get_SerializedBusyCount();
    internal void set_SerializedBusyCount(int value);
    internal ExtendedData get_SerializedExtendedData();
    internal void set_SerializedExtendedData(ExtendedData value);
    internal bool get_SerializedNoSymbols();
    internal void set_SerializedNoSymbols(bool value);
    internal ActivityInstanceState get_SerializedState();
    internal void set_SerializedState(ActivityInstanceState value);
    internal bool get_SerializedIsCancellationRequested();
    internal void set_SerializedIsCancellationRequested(bool value);
    internal bool get_SerializedPerformingDefaultCancelation();
    internal void set_SerializedPerformingDefaultCancelation(bool value);
    internal Substate get_SerializedSubstate();
    internal void set_SerializedSubstate(Substate value);
    internal long get_SerializedId();
    internal void set_SerializedId(long value);
    internal bool get_SerializedInitializationIncomplete();
    internal void set_SerializedInitializationIncomplete(bool value);
    internal LocationEnvironment get_Environment();
    internal ActivityInstanceMap get_InstanceMap();
    public bool get_IsCompleted();
    public ActivityInstanceState get_State();
    internal bool get_IsCancellationRequested();
    internal void set_IsCancellationRequested(bool value);
    internal bool get_IsPerformingDefaultCancelation();
    public string get_Id();
    internal long get_InternalId();
    internal bool get_IsEnvironmentOwner();
    internal bool get_IsResolvingArguments();
    internal bool get_HasNotExecuted();
    internal bool get_HasPendingWork();
    internal bool get_OnlyHasOutstandingBookmarks();
    internal ActivityInstance get_Parent();
    internal bool get_WaitingForTransactionContext();
    internal void set_WaitingForTransactionContext(bool value);
    internal CompletionBookmark get_CompletionBookmark();
    internal void set_CompletionBookmark(CompletionBookmark value);
    internal FaultBookmark get_FaultBookmark();
    internal void set_FaultBookmark(FaultBookmark value);
    internal bool get_HasChildren();
    internal ExecutionPropertyManager get_PropertyManager();
    internal void set_PropertyManager(ExecutionPropertyManager value);
    internal WorkflowDataContext get_DataContext();
    internal void set_DataContext(WorkflowDataContext value);
    [CompilerGeneratedAttribute]
internal object get_CompiledDataContexts();
    [CompilerGeneratedAttribute]
internal void set_CompiledDataContexts(object value);
    [CompilerGeneratedAttribute]
internal object get_CompiledDataContextsForImplementation();
    [CompilerGeneratedAttribute]
internal void set_CompiledDataContextsForImplementation(object value);
    internal bool get_HasActivityReferences();
    internal ExecutionPropertyManager get_SerializedPropertyManager();
    internal void set_SerializedPropertyManager(ExecutionPropertyManager value);
    internal ChildList get_SerializedChildren();
    internal void set_SerializedChildren(ChildList value);
    internal string get_OwnerName();
    internal void set_OwnerName(string value);
    [CompilerGeneratedAttribute]
public Version get_ImplementationVersion();
    [CompilerGeneratedAttribute]
internal void set_ImplementationVersion(Version value);
    internal static ActivityInstance CreateCompletedInstance(Activity activity);
    internal static ActivityInstance CreateCanceledInstance(Activity activity);
    internal ReadOnlyCollection`1<ActivityInstance> GetChildren();
    internal HybridCollection`1<ActivityInstance> GetRawChildren();
    internal void IncrementBusyCount();
    internal void DecrementBusyCount();
    internal void DecrementBusyCount(int amount);
    internal void AddActivityReference(ActivityInstanceReference reference);
    internal void AddBookmark(Bookmark bookmark, BookmarkOptions options);
    internal void RemoveBookmark(Bookmark bookmark, BookmarkOptions options);
    internal void RemoveAllBookmarks(BookmarkScopeManager bookmarkScopeManager, BookmarkManager bookmarkManager);
    internal void SetInitializationIncomplete();
    internal void MarkCanceled();
    internal void MarkAsComplete(BookmarkScopeManager bookmarkScopeManager, BookmarkManager bookmarkManager);
    internal void Abort(ActivityExecutor executor, BookmarkManager bookmarkManager, Exception terminationReason, bool isTerminate);
    internal void BaseCancel(NativeActivityContext context);
    internal void CancelChildren(NativeActivityContext context);
    internal void Cancel(ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal void Execute(ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal void AddChild(ActivityInstance item);
    internal void RemoveChild(ActivityInstance item);
    internal void AppendChildren(TreeProcessingList nextInstanceList, Queue`1& instancesRemaining);
    internal void FixupInstance(ActivityInstance parent, ActivityInstanceMap instanceMap, ActivityExecutor executor);
    internal bool TryFixupChildren(ActivityInstanceMap instanceMap, ActivityExecutor executor);
    internal void FillInstanceMap(ActivityInstanceMap instanceMap);
    internal bool Initialize(ActivityInstance parent, ActivityInstanceMap instanceMap, LocationEnvironment parentEnvironment, long instanceId, ActivityExecutor executor);
    internal bool Initialize(ActivityInstance parent, ActivityInstanceMap instanceMap, LocationEnvironment parentEnvironment, long instanceId, ActivityExecutor executor, int delegateParameterCount);
    internal void ResolveNewArgumentsDuringDynamicUpdate(ActivityExecutor executor, IList`1<int> dynamicUpdateArgumentIndexes);
    internal bool ResolveArguments(ActivityExecutor executor, IDictionary`2<string, object> argumentValueOverrides, Location resultLocation, int startIndex);
    internal void ResolveNewVariableDefaultsDuringDynamicUpdate(ActivityExecutor executor, IList`1<int> dynamicUpdateVariableIndexes, bool forImplementation);
    internal bool ResolveVariables(ActivityExecutor executor);
    private sealed virtual override void System.Activities.Runtime.ActivityInstanceMap.IActivityReference.Load(Activity activity, ActivityInstanceMap instanceMap);
    internal bool UpdateState(ActivityExecutor executor);
    internal void SetInitializedSubstate(ActivityExecutor executor);
    internal void FinalizeState(ActivityExecutor executor, bool faultActivity);
    internal void FinalizeState(ActivityExecutor executor, bool faultActivity, bool skipTracking);
    private sealed virtual override void System.Activities.Runtime.ActivityInstanceMap.IActivityReferenceWithEnvironment.UpdateEnvironment(EnvironmentUpdateMap map, Activity activity);
}
[DataContractAttribute]
public enum System.Activities.ActivityInstanceState : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ActivityInstanceState Executing;
    [EnumMemberAttribute]
public static ActivityInstanceState Closed;
    [EnumMemberAttribute]
public static ActivityInstanceState Canceled;
    [EnumMemberAttribute]
public static ActivityInstanceState Faulted;
}
[ExtensionAttribute]
internal static class System.Activities.ActivityInstanceStateExtension : object {
    [ExtensionAttribute]
internal static string GetStateName(ActivityInstanceState state);
}
internal class System.Activities.ActivityLocationReferenceEnvironment : LocationReferenceEnvironment {
    public Activity Root { get; }
    public Activity InternalRoot { get; public set; }
    public ActivityLocationReferenceEnvironment(LocationReferenceEnvironment parent);
    public virtual Activity get_Root();
    [CompilerGeneratedAttribute]
public Activity get_InternalRoot();
    [CompilerGeneratedAttribute]
public void set_InternalRoot(Activity value);
    public virtual bool IsVisible(LocationReference locationReference);
    public void Declare(LocationReference locationReference, Activity owner, IList`1& validationErrors);
    public virtual bool TryGetLocationReference(string name, LocationReference& result);
    public virtual IEnumerable`1<LocationReference> GetLocationReferences();
}
public class System.Activities.ActivityMetadata : ValueType {
    private Activity activity;
    private LocationReferenceEnvironment environment;
    private bool createEmptyBindings;
    internal bool CreateEmptyBindings { get; }
    public LocationReferenceEnvironment Environment { get; }
    public bool HasViolations { get; }
    internal ActivityMetadata(Activity activity, LocationReferenceEnvironment environment, bool createEmptyBindings);
    internal bool get_CreateEmptyBindings();
    public LocationReferenceEnvironment get_Environment();
    public bool get_HasViolations();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(ActivityMetadata left, ActivityMetadata right);
    public static bool op_Inequality(ActivityMetadata left, ActivityMetadata right);
    public void Bind(Argument binding, RuntimeArgument argument);
    public void SetValidationErrorsCollection(Collection`1<ValidationError> validationErrors);
    public void AddValidationError(string validationErrorMessage);
    public void AddValidationError(ValidationError validationError);
    public void SetArgumentsCollection(Collection`1<RuntimeArgument> arguments);
    public void AddArgument(RuntimeArgument argument);
    public void SetImportedChildrenCollection(Collection`1<Activity> importedChildren);
    public void AddImportedChild(Activity importedChild);
    public void AddImportedChild(Activity importedChild, object origin);
    public void SetImportedDelegatesCollection(Collection`1<ActivityDelegate> importedDelegates);
    public void AddImportedDelegate(ActivityDelegate importedDelegate);
    public void AddImportedDelegate(ActivityDelegate importedDelegate, object origin);
    public void SetVariablesCollection(Collection`1<Variable> variables);
    public void AddVariable(Variable variable);
    public void AddVariable(Variable variable, object origin);
    public Collection`1<RuntimeArgument> GetArgumentsWithReflection();
    public Collection`1<Activity> GetImportedChildrenWithReflection();
    public Collection`1<Variable> GetVariablesWithReflection();
    public Collection`1<ActivityDelegate> GetImportedDelegatesWithReflection();
    public void AddDefaultExtensionProvider(Func`1<T> extensionProvider);
    public void RequireExtension();
    public void RequireExtension(Type extensionType);
    internal void Dispose();
}
public class System.Activities.ActivityPropertyReference : object {
    public string SourceProperty { get; public set; }
    public string TargetProperty { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceProperty();
    [CompilerGeneratedAttribute]
public void set_SourceProperty(string value);
    [CompilerGeneratedAttribute]
public string get_TargetProperty();
    [CompilerGeneratedAttribute]
public void set_TargetProperty(string value);
}
internal static class System.Activities.ActivityUtilities : object {
    public static ReadOnlyDictionaryInternal`2<string, object> EmptyParameters { get; }
    internal static PropertyChangedEventArgs ValuePropertyChangedEventArgs { get; }
    private static ActivityUtilities();
    public static ReadOnlyDictionaryInternal`2<string, object> get_EmptyParameters();
    internal static PropertyChangedEventArgs get_ValuePropertyChangedEventArgs();
    public static bool IsInScope(ActivityInstance potentialChild, ActivityInstance scope);
    public static bool IsHandle(Type type);
    public static bool IsCompletedState(ActivityInstanceState state);
    public static bool TryGetArgumentDirectionAndType(Type propertyType, ArgumentDirection& direction, Type& argumentType);
    public static bool IsArgumentType(Type propertyType);
    public static bool IsRuntimeArgumentType(Type propertyType);
    public static bool IsArgumentDictionaryType(Type type, Type& innerType);
    public static bool IsKnownCollectionType(Type type, Type& innerType);
    public static bool IsActivityDelegateType(Type propertyType);
    public static bool IsActivityType(Type propertyType);
    public static bool IsActivityType(Type propertyType, bool includeConstraints);
    public static bool TryGetDelegateArgumentDirectionAndType(Type propertyType, ArgumentDirection& direction, Type& argumentType);
    public static bool IsVariableType(Type propertyType, Type& innerType);
    public static bool IsVariableType(Type propertyType);
    public static bool IsLocationGenericType(Type type, Type& genericArgumentType);
    public static object CreateVariableReference(Variable variable);
    public static ActivityWithResult CreateLocationAccessExpression(LocationReference locationReference, bool isReference, bool useLocationReferenceValue);
    public static Argument CreateArgument(Type type, ArgumentDirection direction);
    public static Argument CreateArgumentOfObject(ArgumentDirection direction);
    public static Type CreateLocation(Type locationType);
    public static Type CreateActivityWithResult(Type resultType);
    public static Argument CreateReferenceArgument(Type argumentType, ArgumentDirection direction, string referencedArgumentName);
    public static Variable CreateVariable(string name, Type type, VariableModifiers modifiers);
    public static RuntimeArgument FindArgument(string argumentName, Activity argumentConsumer);
    public static string GetDisplayName(object source);
    internal static void ValidateOrigin(object origin, Activity activity);
    public static void CacheRootMetadata(Activity activity, LocationReferenceEnvironment hostEnvironment, ProcessActivityTreeOptions options, ProcessActivityCallback callback, IList`1& validationErrors);
    public static void FinishCachingSubtree(ChildActivity subtreeRoot, ActivityCallStack parentChain, ProcessActivityTreeOptions options);
    public static void FinishCachingSubtree(ChildActivity subtreeRoot, ActivityCallStack parentChain, ProcessActivityTreeOptions options, ProcessActivityCallback callback);
    public static void ProcessActivityInstanceTree(ActivityInstance rootInstance, ActivityExecutor executor, Func`3<ActivityInstance, ActivityExecutor, bool> callback);
    public static FaultBookmark CreateFaultBookmark(FaultCallback onFaulted, ActivityInstance owningInstance);
    public static CompletionBookmark CreateCompletionBookmark(CompletionCallback onCompleted, ActivityInstance owningInstance);
    public static CompletionBookmark CreateCompletionBookmark(DelegateCompletionCallback onCompleted, ActivityInstance owningInstance);
    public static CompletionBookmark CreateCompletionBookmark(CompletionCallback`1<TResult> onCompleted, ActivityInstance owningInstance);
    public static string GetTraceString(Bookmark bookmark);
    public static string GetTraceString(BookmarkScope bookmarkScope);
    public static void RemoveNulls(IList list);
    public static void Add(Collection`1& collection, T data);
    public static void Add(IList`1& list, T data);
}
public abstract class System.Activities.ActivityWithResult : Activity {
    public Type ResultType { get; }
    [IgnoreDataMemberAttribute]
public OutArgument Result { get; public set; }
    internal Type InternalResultType { get; }
    internal OutArgument ResultCore { get; internal set; }
    internal RuntimeArgument ResultRuntimeArgument { get; internal set; }
    internal bool IsActivityWithResult { get; }
    public Type get_ResultType();
    public OutArgument get_Result();
    public void set_Result(OutArgument value);
    internal abstract virtual Type get_InternalResultType();
    internal abstract virtual OutArgument get_ResultCore();
    internal abstract virtual void set_ResultCore(OutArgument value);
    [CompilerGeneratedAttribute]
internal RuntimeArgument get_ResultRuntimeArgument();
    [CompilerGeneratedAttribute]
internal void set_ResultRuntimeArgument(RuntimeArgument value);
    internal abstract virtual object InternalExecuteInResolutionContextUntyped(CodeActivityContext resolutionContext);
    internal virtual bool get_IsActivityWithResult();
}
internal class System.Activities.ActivityWithResultWrapper`1 : CodeActivity`1<T> {
    public ActivityWithResultWrapper`1(ActivityWithResult expression);
    private sealed virtual override ActivityWithResult System.Activities.Argument.IExpressionWrapper.get_InnerExpression();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual T Execute(CodeActivityContext context);
}
public abstract class System.Activities.Argument : object {
    public static int UnspecifiedEvaluationOrder;
    public static string ResultValue;
    public Type ArgumentType { get; internal set; }
    public ArgumentDirection Direction { get; internal set; }
    [DefaultValueAttribute("-1")]
public int EvaluationOrder { get; public set; }
    [IgnoreDataMemberAttribute]
[DefaultValueAttribute("")]
public ActivityWithResult Expression { get; public set; }
    internal ActivityWithResult ExpressionCore { get; internal set; }
    internal RuntimeArgument RuntimeArgument { get; internal set; }
    internal bool IsInTree { get; }
    internal bool WasDesignTimeNull { get; internal set; }
    internal int Id { get; }
    internal bool IsEmpty { get; }
    private static Argument();
    [CompilerGeneratedAttribute]
public Type get_ArgumentType();
    [CompilerGeneratedAttribute]
internal void set_ArgumentType(Type value);
    public ArgumentDirection get_Direction();
    internal void set_Direction(ArgumentDirection value);
    public int get_EvaluationOrder();
    public void set_EvaluationOrder(int value);
    public ActivityWithResult get_Expression();
    public void set_Expression(ActivityWithResult value);
    internal abstract virtual ActivityWithResult get_ExpressionCore();
    internal abstract virtual void set_ExpressionCore(ActivityWithResult value);
    internal RuntimeArgument get_RuntimeArgument();
    internal void set_RuntimeArgument(RuntimeArgument value);
    internal bool get_IsInTree();
    [CompilerGeneratedAttribute]
internal bool get_WasDesignTimeNull();
    [CompilerGeneratedAttribute]
internal void set_WasDesignTimeNull(bool value);
    internal int get_Id();
    internal bool get_IsEmpty();
    public static Argument CreateReference(Argument argumentToReference, string referencedArgumentName);
    internal bool CanConvertToString(IValueSerializerContext context);
    internal string ConvertToString(IValueSerializerContext context);
    internal static void Bind(Argument binding, RuntimeArgument argument);
    internal static void TryBind(Argument binding, RuntimeArgument argument, Activity violationOwner);
    public static Argument Create(Type type, ArgumentDirection direction);
    internal abstract virtual Location CreateDefaultLocation();
    internal abstract virtual void Declare(LocationEnvironment targetEnvironment, ActivityInstance activityInstance);
    public object Get(ActivityContext context);
    public T Get(ActivityContext context);
    public void Set(ActivityContext context, object value);
    internal void Validate(Activity owner, IList`1& validationErrors);
    internal abstract virtual bool TryPopulateValue(LocationEnvironment targetEnvironment, ActivityInstance targetActivityInstance, ActivityExecutor executor);
    public Location GetLocation(ActivityContext context);
    internal void ThrowIfNotInTree();
    internal static Location`1<T> CreateLocation();
}
public enum System.Activities.ArgumentDirection : Enum {
    public int value__;
    public static ArgumentDirection In;
    public static ArgumentDirection Out;
    public static ArgumentDirection InOut;
}
internal static class System.Activities.ArgumentDirectionHelper : object {
    internal static bool IsDefined(ArgumentDirection direction);
    public static void Validate(ArgumentDirection direction, string argumentName);
    public static bool IsIn(Argument argument);
    public static bool IsIn(ArgumentDirection direction);
    public static bool IsOut(Argument argument);
    public static bool IsOut(ArgumentDirection direction);
}
public abstract class System.Activities.AsyncCodeActivity : Activity {
    protected internal Version ImplementationVersion { get; protected internal set; }
    [IgnoreDataMemberAttribute]
protected Func`1<Activity> Implementation { get; protected set; }
    internal static AsyncCallback OnExecuteComplete { get; }
    internal bool InternalCanInduceIdle { get; }
    protected internal sealed virtual Version get_ImplementationVersion();
    protected internal sealed virtual void set_ImplementationVersion(Version value);
    protected sealed virtual Func`1<Activity> get_Implementation();
    protected sealed virtual void set_Implementation(Func`1<Activity> value);
    internal static AsyncCallback get_OnExecuteComplete();
    internal virtual bool get_InternalCanInduceIdle();
    protected abstract virtual IAsyncResult BeginExecute(AsyncCodeActivityContext context, AsyncCallback callback, object state);
    protected abstract virtual void EndExecute(AsyncCodeActivityContext context, IAsyncResult result);
    protected virtual void Cancel(AsyncCodeActivityContext context);
    internal sealed virtual void InternalExecute(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    private sealed virtual override void System.Activities.IAsyncCodeActivity.FinishExecution(AsyncCodeActivityContext context, IAsyncResult result);
    internal static void CompleteAsynchronousExecution(IAsyncResult result);
    internal sealed virtual void InternalCancel(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal sealed virtual void InternalAbort(ActivityInstance instance, ActivityExecutor executor, Exception terminationReason);
    internal sealed virtual void OnInternalCacheMetadata(bool createEmptyBindings);
    internal sealed virtual void OnInternalCreateDynamicUpdateMap(Finalizer finalizer, IDefinitionMatcher matcher, Activity originalActivity);
    protected sealed virtual void OnCreateDynamicUpdateMap(UpdateMapMetadata metadata, Activity originalActivity);
    protected sealed virtual void CacheMetadata(ActivityMetadata metadata);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
}
public abstract class System.Activities.AsyncCodeActivity`1 : Activity`1<TResult> {
    protected internal Version ImplementationVersion { get; protected internal set; }
    [IgnoreDataMemberAttribute]
protected Func`1<Activity> Implementation { get; protected set; }
    internal bool InternalCanInduceIdle { get; }
    protected internal sealed virtual Version get_ImplementationVersion();
    protected internal sealed virtual void set_ImplementationVersion(Version value);
    protected sealed virtual Func`1<Activity> get_Implementation();
    protected sealed virtual void set_Implementation(Func`1<Activity> value);
    internal virtual bool get_InternalCanInduceIdle();
    protected abstract virtual IAsyncResult BeginExecute(AsyncCodeActivityContext context, AsyncCallback callback, object state);
    protected abstract virtual TResult EndExecute(AsyncCodeActivityContext context, IAsyncResult result);
    protected virtual void Cancel(AsyncCodeActivityContext context);
    internal sealed virtual void InternalExecute(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    private sealed virtual override void System.Activities.IAsyncCodeActivity.FinishExecution(AsyncCodeActivityContext context, IAsyncResult result);
    internal sealed virtual void InternalCancel(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal sealed virtual void InternalAbort(ActivityInstance instance, ActivityExecutor executor, Exception terminationReason);
    internal sealed virtual void OnInternalCacheMetadataExceptResult(bool createEmptyBindings);
    internal sealed virtual void OnInternalCreateDynamicUpdateMap(Finalizer finalizer, IDefinitionMatcher matcher, Activity originalActivity);
    protected sealed virtual void OnCreateDynamicUpdateMap(UpdateMapMetadata metadata, Activity originalActivity);
    protected sealed virtual void CacheMetadata(ActivityMetadata metadata);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
}
public class System.Activities.AsyncCodeActivityContext : CodeActivityContext {
    public bool IsCancellationRequested { get; }
    public object UserState { get; public set; }
    internal AsyncCodeActivityContext(AsyncOperationContext asyncContext, ActivityInstance instance, ActivityExecutor executor);
    public bool get_IsCancellationRequested();
    public object get_UserState();
    public void set_UserState(object value);
    public void MarkCanceled();
}
internal class System.Activities.AsyncInvokeContext : object {
    public object UserState { get; private set; }
    public AsyncInvokeOperation Operation { get; private set; }
    public WorkflowApplication WorkflowApplication { get; public set; }
    public WorkflowInvoker Invoker { get; private set; }
    public IDictionary`2<string, object> Outputs { get; public set; }
    public AsyncInvokeContext(object userState, WorkflowInvoker invoker);
    [CompilerGeneratedAttribute]
public object get_UserState();
    [CompilerGeneratedAttribute]
private void set_UserState(object value);
    [CompilerGeneratedAttribute]
public AsyncInvokeOperation get_Operation();
    [CompilerGeneratedAttribute]
private void set_Operation(AsyncInvokeOperation value);
    [CompilerGeneratedAttribute]
public WorkflowApplication get_WorkflowApplication();
    [CompilerGeneratedAttribute]
public void set_WorkflowApplication(WorkflowApplication value);
    [CompilerGeneratedAttribute]
public WorkflowInvoker get_Invoker();
    [CompilerGeneratedAttribute]
private void set_Invoker(WorkflowInvoker value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Outputs();
    [CompilerGeneratedAttribute]
public void set_Outputs(IDictionary`2<string, object> value);
}
internal class System.Activities.AsyncInvokeOperation : object {
    public AsyncInvokeOperation(SynchronizationContext syncContext);
    public void OperationStarted();
    public void OperationCompleted();
    public void PostOperationCompleted(SendOrPostCallback callback, object arg);
}
internal class System.Activities.AsyncOperationContext : object {
    internal bool IsStillActive { get; }
    public object UserState { get; public set; }
    public bool HasCalledAsyncCodeActivityCancel { get; public set; }
    public bool IsAborting { get; public set; }
    internal AsyncOperationContext(ActivityExecutor executor, ActivityInstance owningActivityInstance);
    internal bool get_IsStillActive();
    [CompilerGeneratedAttribute]
public object get_UserState();
    [CompilerGeneratedAttribute]
public void set_UserState(object value);
    [CompilerGeneratedAttribute]
public bool get_HasCalledAsyncCodeActivityCancel();
    [CompilerGeneratedAttribute]
public void set_HasCalledAsyncCodeActivityCancel(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsAborting();
    [CompilerGeneratedAttribute]
public void set_IsAborting(bool value);
    internal void CancelOperation();
    public void CompleteOperation();
    internal void CompleteAsyncCodeActivity(CompleteData completeData);
}
[DataContractAttribute]
public class System.Activities.Bookmark : object {
    internal static Bookmark AsyncOperationCompletionBookmark { get; }
    internal static IEqualityComparer`1<Bookmark> Comparer { get; }
    [DataMemberAttribute]
internal ExclusiveHandleList SerializedExclusiveHandlesThatReferenceThis { get; internal set; }
    [DataMemberAttribute]
internal long SerializedId { get; internal set; }
    [DataMemberAttribute]
internal string SerializedExternalName { get; internal set; }
    [DataMemberAttribute]
internal BookmarkScope Scope { get; internal set; }
    internal bool IsNamed { get; }
    public string Name { get; }
    internal long Id { get; }
    internal ExclusiveHandleList ExclusiveHandles { get; internal set; }
    public Bookmark(string name);
    private static Bookmark();
    internal static Bookmark get_AsyncOperationCompletionBookmark();
    internal static IEqualityComparer`1<Bookmark> get_Comparer();
    internal ExclusiveHandleList get_SerializedExclusiveHandlesThatReferenceThis();
    internal void set_SerializedExclusiveHandlesThatReferenceThis(ExclusiveHandleList value);
    internal long get_SerializedId();
    internal void set_SerializedId(long value);
    internal string get_SerializedExternalName();
    internal void set_SerializedExternalName(string value);
    [CompilerGeneratedAttribute]
internal BookmarkScope get_Scope();
    [CompilerGeneratedAttribute]
internal void set_Scope(BookmarkScope value);
    internal bool get_IsNamed();
    public string get_Name();
    internal long get_Id();
    internal ExclusiveHandleList get_ExclusiveHandles();
    internal void set_ExclusiveHandles(ExclusiveHandleList value);
    internal static Bookmark Create(long id);
    internal BookmarkInfo GenerateBookmarkInfo(BookmarkCallbackWrapper bookmarkCallback);
    public sealed virtual bool Equals(Bookmark other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Activities.BookmarkCallback : MulticastDelegate {
    public BookmarkCallback(object object, IntPtr method);
    public virtual void Invoke(NativeActivityContext context, Bookmark bookmark, object value);
    public virtual IAsyncResult BeginInvoke(NativeActivityContext context, Bookmark bookmark, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Activities.BookmarkOptions : Enum {
    public int value__;
    public static BookmarkOptions None;
    public static BookmarkOptions MultipleResume;
    public static BookmarkOptions NonBlocking;
}
internal static class System.Activities.BookmarkOptionsHelper : object {
    public static void Validate(BookmarkOptions options, string argumentName);
    public static bool SupportsMultipleResumes(BookmarkOptions options);
    public static bool IsNonBlocking(BookmarkOptions options);
}
public enum System.Activities.BookmarkResumptionResult : Enum {
    public int value__;
    public static BookmarkResumptionResult Success;
    public static BookmarkResumptionResult NotFound;
    public static BookmarkResumptionResult NotReady;
}
[DataContractAttribute]
public class System.Activities.BookmarkScope : object {
    public bool IsInitialized { get; }
    public Guid Id { get; internal set; }
    [DataMemberAttribute]
internal long SerializedTemporaryId { get; internal set; }
    [DataMemberAttribute]
internal Guid SerializedId { get; internal set; }
    internal long TemporaryId { get; }
    public static BookmarkScope Default { get; }
    internal bool IsDefault { get; }
    internal BookmarkScope(long temporaryId);
    public BookmarkScope(Guid id);
    public bool get_IsInitialized();
    public Guid get_Id();
    internal void set_Id(Guid value);
    internal int IncrementHandleReferenceCount();
    internal int DecrementHandleReferenceCount();
    internal long get_SerializedTemporaryId();
    internal void set_SerializedTemporaryId(long value);
    internal Guid get_SerializedId();
    internal void set_SerializedId(Guid value);
    internal long get_TemporaryId();
    public static BookmarkScope get_Default();
    internal bool get_IsDefault();
    public void Initialize(NativeActivityContext context, Guid id);
    public virtual int GetHashCode();
    internal BookmarkScopeInfo GenerateScopeInfo();
    public sealed virtual bool Equals(BookmarkScope other);
}
[DataContractAttribute]
public class System.Activities.BookmarkScopeHandle : Handle {
    public static BookmarkScopeHandle Default { get; }
    public BookmarkScope BookmarkScope { get; }
    [DataMemberAttribute]
internal BookmarkScope SerializedBookmarkScope { get; internal set; }
    internal BookmarkScopeHandle(BookmarkScope bookmarkScope);
    private static BookmarkScopeHandle();
    public static BookmarkScopeHandle get_Default();
    public BookmarkScope get_BookmarkScope();
    internal BookmarkScope get_SerializedBookmarkScope();
    internal void set_SerializedBookmarkScope(BookmarkScope value);
    public void CreateBookmarkScope(NativeActivityContext context);
    public void CreateBookmarkScope(NativeActivityContext context, Guid scopeId);
    public void Initialize(NativeActivityContext context, Guid scope);
    protected virtual void OnUninitialize(HandleInitializationContext context);
}
public abstract class System.Activities.CodeActivity : Activity {
    protected internal Version ImplementationVersion { get; protected internal set; }
    [IgnoreDataMemberAttribute]
protected Func`1<Activity> Implementation { get; protected set; }
    protected internal sealed virtual Version get_ImplementationVersion();
    protected internal sealed virtual void set_ImplementationVersion(Version value);
    protected sealed virtual Func`1<Activity> get_Implementation();
    protected sealed virtual void set_Implementation(Func`1<Activity> value);
    protected abstract virtual void Execute(CodeActivityContext context);
    internal sealed virtual void InternalExecute(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal sealed virtual void InternalCancel(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal sealed virtual void InternalAbort(ActivityInstance instance, ActivityExecutor executor, Exception terminationReason);
    internal sealed virtual void OnInternalCacheMetadata(bool createEmptyBindings);
    internal sealed virtual void OnInternalCreateDynamicUpdateMap(Finalizer finalizer, IDefinitionMatcher matcher, Activity originalActivity);
    protected sealed virtual void OnCreateDynamicUpdateMap(UpdateMapMetadata metadata, Activity originalActivity);
    protected sealed virtual void CacheMetadata(ActivityMetadata metadata);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
}
public abstract class System.Activities.CodeActivity`1 : Activity`1<TResult> {
    protected internal Version ImplementationVersion { get; protected internal set; }
    [IgnoreDataMemberAttribute]
protected Func`1<Activity> Implementation { get; protected set; }
    protected internal sealed virtual Version get_ImplementationVersion();
    protected internal sealed virtual void set_ImplementationVersion(Version value);
    protected sealed virtual Func`1<Activity> get_Implementation();
    protected sealed virtual void set_Implementation(Func`1<Activity> value);
    protected abstract virtual TResult Execute(CodeActivityContext context);
    internal sealed virtual void InternalExecute(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal sealed virtual void InternalCancel(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal sealed virtual void InternalAbort(ActivityInstance instance, ActivityExecutor executor, Exception terminationReason);
    internal sealed virtual void OnInternalCacheMetadataExceptResult(bool createEmptyBindings);
    internal sealed virtual TResult InternalExecuteInResolutionContext(CodeActivityContext context);
    internal sealed virtual void OnInternalCreateDynamicUpdateMap(Finalizer finalizer, IDefinitionMatcher matcher, Activity originalActivity);
    protected sealed virtual void OnCreateDynamicUpdateMap(UpdateMapMetadata metadata, Activity originalActivity);
    protected sealed virtual void CacheMetadata(ActivityMetadata metadata);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
}
public class System.Activities.CodeActivityContext : ActivityContext {
    internal CodeActivityContext(ActivityInstance instance, ActivityExecutor executor);
    internal void Initialize(ActivityInstance instance, ActivityExecutor executor);
    public THandle GetProperty();
    public void Track(CustomTrackingRecord record);
}
public class System.Activities.CodeActivityMetadata : ValueType {
    private Activity activity;
    private LocationReferenceEnvironment environment;
    private bool createEmptyBindings;
    internal bool CreateEmptyBindings { get; }
    public LocationReferenceEnvironment Environment { get; }
    internal Activity CurrentActivity { get; }
    public bool HasViolations { get; }
    internal CodeActivityMetadata(Activity activity, LocationReferenceEnvironment environment, bool createEmptyBindings);
    internal bool get_CreateEmptyBindings();
    public LocationReferenceEnvironment get_Environment();
    internal Activity get_CurrentActivity();
    public bool get_HasViolations();
    public static bool op_Equality(CodeActivityMetadata left, CodeActivityMetadata right);
    public static bool op_Inequality(CodeActivityMetadata left, CodeActivityMetadata right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Bind(Argument binding, RuntimeArgument argument);
    public void SetValidationErrorsCollection(Collection`1<ValidationError> validationErrors);
    public void AddValidationError(string validationErrorMessage);
    public void AddValidationError(ValidationError validationError);
    public void SetArgumentsCollection(Collection`1<RuntimeArgument> arguments);
    public void AddArgument(RuntimeArgument argument);
    public Collection`1<RuntimeArgument> GetArgumentsWithReflection();
    public void AddDefaultExtensionProvider(Func`1<T> extensionProvider);
    public void RequireExtension();
    public void RequireExtension(Type extensionType);
    internal void ThrowIfDisposed();
    internal void Dispose();
}
public class System.Activities.CodeActivityPublicEnvironmentAccessor : ValueType {
    private CodeActivityMetadata metadata;
    private bool withoutArgument;
    public CodeActivityMetadata ActivityMetadata { get; }
    public CodeActivityMetadata get_ActivityMetadata();
    public static CodeActivityPublicEnvironmentAccessor Create(CodeActivityMetadata metadata);
    internal static CodeActivityPublicEnvironmentAccessor CreateWithoutArgument(CodeActivityMetadata metadata);
    public static bool op_Equality(CodeActivityPublicEnvironmentAccessor left, CodeActivityPublicEnvironmentAccessor right);
    public static bool op_Inequality(CodeActivityPublicEnvironmentAccessor left, CodeActivityPublicEnvironmentAccessor right);
    public bool TryGetAccessToPublicLocation(LocationReference publicLocation, ArgumentDirection accessDirection, LocationReference& equivalentLocation);
    public bool TryGetReferenceToPublicLocation(LocationReference publicReference, LocationReference& equivalentReference);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal bool TryGetAccessToPublicLocation(LocationReference publicLocation, ArgumentDirection accessDirection, bool useLocationReferenceValue, LocationReference& equivalentLocation);
    internal bool TryGetReferenceToPublicLocation(LocationReference publicReference, bool useLocationReferenceValue, LocationReference& equivalentReference);
    internal void CreateArgument(LocationReference sourceReference, ArgumentDirection accessDirection, bool useLocationReferenceValue);
    internal void CreateLocationArgument(LocationReference sourceReference, bool useLocationReferenceValue);
}
public class System.Activities.CompletionCallback : MulticastDelegate {
    public CompletionCallback(object object, IntPtr method);
    public virtual void Invoke(NativeActivityContext context, ActivityInstance completedInstance);
    public virtual IAsyncResult BeginInvoke(NativeActivityContext context, ActivityInstance completedInstance, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Activities.CompletionCallback`1 : MulticastDelegate {
    public CompletionCallback`1(object object, IntPtr method);
    public virtual void Invoke(NativeActivityContext context, ActivityInstance completedInstance, TResult result);
    public virtual IAsyncResult BeginInvoke(NativeActivityContext context, ActivityInstance completedInstance, TResult result, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerDisplayAttribute("{this.ToString()}")]
internal class System.Activities.Debugger.BinarySearchResult : object {
    internal bool IsFound { get; }
    [DebuggerBrowsableAttribute("0")]
internal int FoundIndex { get; }
    [DebuggerBrowsableAttribute("0")]
internal int NextIndex { get; }
    [DebuggerBrowsableAttribute("0")]
internal bool IsNextIndexAvailable { get; }
    internal BinarySearchResult(int resultFromBinarySearch, int count);
    internal bool get_IsFound();
    internal int get_FoundIndex();
    internal int get_NextIndex();
    internal bool get_IsNextIndexAvailable();
    public virtual string ToString();
}
internal class System.Activities.Debugger.CharacterSpottingTextReader : TextReader {
    private int System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.CurrentLine { get; }
    private int System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.CurrentPosition { get; }
    private List`1<DocumentLocation> System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.StartBrackets { get; }
    private List`1<DocumentLocation> System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.EndBrackets { get; }
    private List`1<DocumentLocation> System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.SingleQuotes { get; }
    private List`1<DocumentLocation> System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.DoubleQuotes { get; }
    public CharacterSpottingTextReader(TextReader underlyingReader);
    public virtual void Close();
    public virtual int Peek();
    public virtual int Read();
    internal DocumentLocation FindCharacterStrictlyAfter(char c, DocumentLocation afterLocation);
    internal DocumentLocation FindCharacterStrictlyBefore(char c, DocumentLocation documentLocation);
    private sealed virtual override int System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.get_CurrentLine();
    private sealed virtual override int System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.get_CurrentPosition();
    private sealed virtual override List`1<DocumentLocation> System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.get_StartBrackets();
    private sealed virtual override List`1<DocumentLocation> System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.get_EndBrackets();
    private sealed virtual override List`1<DocumentLocation> System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.get_SingleQuotes();
    private sealed virtual override List`1<DocumentLocation> System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest.get_DoubleQuotes();
}
[DebuggerNonUserCodeAttribute]
internal class System.Activities.Debugger.DebugController : object {
    public DebugController(WorkflowInstance host);
    public void WorkflowStarted();
    public void WorkflowCompleted();
    public void ActivityStarted(ActivityInstance activityInstance);
    public void ActivityCompleted(ActivityInstance activityInstance);
}
public class System.Activities.Debugger.DebugInfo : object {
    internal DebugInfo(ActivityInstance activityInstance);
    internal object EvaluateExpression(string expressionString);
    internal LocalInfo[] GetArguments();
    internal LocalInfo[] GetLocals();
    internal bool SetValueAsString(Location location, string value, string stringRadix);
}
[DebuggerNonUserCodeAttribute]
internal class System.Activities.Debugger.DebugManager : object {
    unknown bool IsPriming {public set; }
    public DebugManager(Activity root, string moduleNamePrefix, string typeNamePrefix, string auxiliaryThreadName, bool breakOnStartup, WorkflowInstance host, bool debugStartedAtRoot);
    internal DebugManager(Activity root, string moduleNamePrefix, string typeNamePrefix, string auxiliaryThreadName, bool breakOnStartup, WorkflowInstance host, bool debugStartedAtRoot, bool resetDynamicModule);
    public void set_IsPriming(bool value);
    internal void Instrument(Activity activity);
    public void Instrument(Activity rootActivity, Dictionary`2<object, SourceLocation> sourceLocations, string typeNamePrefix, Dictionary`2<string, Byte[]> checksumCache);
    public void Exit();
    public void OnEnterState(ActivityInstance instance);
    public void OnEnterState(Activity expression, ActivityInstance instance, LocationEnvironment environment);
    public void OnLeaveState(ActivityInstance activityInstance);
}
[DebuggerDisplayAttribute("({LineNumber.Value}:{LinePosition.Value})")]
internal class System.Activities.Debugger.DocumentLocation : object {
    internal OneBasedCounter LineNumber { get; }
    internal OneBasedCounter LinePosition { get; }
    internal DocumentLocation(OneBasedCounter lineNumber, OneBasedCounter linePosition);
    internal DocumentLocation(int lineNumber, int linePosition);
    internal OneBasedCounter get_LineNumber();
    internal OneBasedCounter get_LinePosition();
    public sealed virtual bool Equals(DocumentLocation that);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(DocumentLocation that);
}
[DebuggerDisplayAttribute("({Start.LineNumber.Value}:{Start.LinePosition.Value}) - ({End.LineNumber.Value}:{End.LinePosition.Value})")]
internal class System.Activities.Debugger.DocumentRange : object {
    internal DocumentLocation Start { get; }
    internal DocumentLocation End { get; }
    internal DocumentRange(DocumentLocation start, DocumentLocation end);
    internal DocumentRange(int startLineNumber, int startLinePosition, int endLineNumber, int endLinePosition);
    internal DocumentLocation get_Start();
    internal DocumentLocation get_End();
    public sealed virtual bool Equals(DocumentRange other);
    public virtual int GetHashCode();
}
internal interface System.Activities.Debugger.ICharacterSpottingTextReaderForUnitTest {
    public int CurrentLine { get; }
    public int CurrentPosition { get; }
    public List`1<DocumentLocation> StartBrackets { get; }
    public List`1<DocumentLocation> EndBrackets { get; }
    public List`1<DocumentLocation> SingleQuotes { get; }
    public List`1<DocumentLocation> DoubleQuotes { get; }
    public abstract virtual int get_CurrentLine();
    public abstract virtual int get_CurrentPosition();
    public abstract virtual List`1<DocumentLocation> get_StartBrackets();
    public abstract virtual List`1<DocumentLocation> get_EndBrackets();
    public abstract virtual List`1<DocumentLocation> get_SingleQuotes();
    public abstract virtual List`1<DocumentLocation> get_DoubleQuotes();
}
public interface System.Activities.Debugger.IDebuggableWorkflowTree {
    public abstract virtual Activity GetWorkflowRoot();
}
internal class System.Activities.Debugger.InstrumentationTracker : object {
    public InstrumentationTracker(Activity root);
    public bool IsUninstrumentedSubRoot(Activity subRoot);
    public List`1<Activity> GetSameSourceSubRoots(Activity subRoot);
    public void MarkInstrumented(Activity subRoot);
}
[ExtensionAttribute]
internal static class System.Activities.Debugger.ListExtensions : object {
    [ExtensionAttribute]
internal static BinarySearchResult MyBinarySearch(List`1<T> input, T item);
}
[DebuggerNonUserCodeAttribute]
public class System.Activities.Debugger.LocalsItemDescription : object {
    public string Name { get; private set; }
    public Type Type { get; private set; }
    public LocalsItemDescription(string name, Type type);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    public virtual string ToString();
}
internal class System.Activities.Debugger.OneBasedCounter : object {
    internal int Value { get; }
    internal OneBasedCounter(int value);
    internal int get_Value();
}
[DebuggerNonUserCodeAttribute]
public class System.Activities.Debugger.SourceLocation : object {
    public string FileName { get; }
    public int StartLine { get; }
    public int StartColumn { get; }
    public int EndLine { get; }
    public int EndColumn { get; }
    internal Byte[] Checksum { get; }
    public bool IsSingleWholeLine { get; }
    public SourceLocation(string fileName, int line);
    public SourceLocation(string fileName, int startLine, int startColumn, int endLine, int endColumn);
    internal SourceLocation(string fileName, Byte[] checksum, int startLine, int startColumn, int endLine, int endColumn);
    public string get_FileName();
    public int get_StartLine();
    public int get_StartColumn();
    public int get_EndLine();
    public int get_EndColumn();
    internal Byte[] get_Checksum();
    public bool get_IsSingleWholeLine();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal static bool IsValidRange(int startLine, int startColumn, int endLine, int endColumn);
}
public class System.Activities.Debugger.SourceLocationFoundEventArgs : EventArgs {
    public object Target { get; }
    public SourceLocation SourceLocation { get; }
    internal bool IsValueNode { get; }
    public SourceLocationFoundEventArgs(object target, SourceLocation sourceLocation);
    internal SourceLocationFoundEventArgs(object target, SourceLocation sourceLocation, bool isValueNode);
    public object get_Target();
    public SourceLocation get_SourceLocation();
    internal bool get_IsValueNode();
}
internal enum System.Activities.Debugger.SourceLocationMemberType : Enum {
    public int value__;
    public static SourceLocationMemberType StartLine;
    public static SourceLocationMemberType StartColumn;
    public static SourceLocationMemberType EndLine;
    public static SourceLocationMemberType EndColumn;
}
[DebuggerNonUserCodeAttribute]
public static class System.Activities.Debugger.SourceLocationProvider : object {
    [SecuritySafeCriticalAttribute]
internal static Dictionary`2<object, SourceLocation> GetSourceLocations(Activity rootActivity, String& sourcePath, Boolean& isTemporaryFile, Byte[]& checksum);
    public static Dictionary`2<object, SourceLocation> GetSourceLocations(Activity rootActivity, WorkflowSymbol symbol);
    internal static Dictionary`2<object, SourceLocation> GetSourceLocations(Activity rootActivity, WorkflowSymbol symbol, bool translateInternalActivityToOrigin);
    internal static object Deserialize(Byte[] buffer, Assembly localAssembly);
    public static void CollectMapping(Activity rootActivity1, Activity rootActivity2, Dictionary`2<object, SourceLocation> mapping, string path);
    public static ICollection`1<ActivitySymbol> GetSymbols(Activity rootActivity, Dictionary`2<object, SourceLocation> sourceLocations);
}
[DebuggerNonUserCodeAttribute]
public class System.Activities.Debugger.State : object {
    internal SourceLocation Location { get; }
    internal string Name { get; }
    internal IEnumerable`1<LocalsItemDescription> EarlyLocals { get; }
    internal int NumberOfEarlyLocals { get; }
    internal bool DebuggingEnabled { get; internal set; }
    [SecuritySafeCriticalAttribute]
internal State(SourceLocation location, string name, IEnumerable`1<LocalsItemDescription> earlyLocals, int numberOfEarlyLocals);
    [SecuritySafeCriticalAttribute]
internal SourceLocation get_Location();
    [SecuritySafeCriticalAttribute]
internal string get_Name();
    internal IEnumerable`1<LocalsItemDescription> get_EarlyLocals();
    internal int get_NumberOfEarlyLocals();
    [SecuritySafeCriticalAttribute]
internal bool get_DebuggingEnabled();
    [SecuritySafeCriticalAttribute]
internal void set_DebuggingEnabled(bool value);
    [SecurityCriticalAttribute]
internal void CacheMethodInfo(Type type, string methodName);
    [SecurityCriticalAttribute]
internal MethodInfo GetMethodInfo(bool withPriming);
    internal static string ValidateIdentifierString(string input);
}
[DebuggerNonUserCodeAttribute]
public class System.Activities.Debugger.StateManager : object {
    internal static string MethodWithPrimingPrefix;
    internal Properties ManagerProperties { get; }
    internal bool IsPriming { get; internal set; }
    internal bool DebugStartedAtRoot { get; }
    internal StateManager(Properties properties, bool debugStartedAtRoot, DynamicModuleManager dynamicModuleManager);
    private static StateManager();
    internal Properties get_ManagerProperties();
    [CompilerGeneratedAttribute]
internal bool get_IsPriming();
    [CompilerGeneratedAttribute]
internal void set_IsPriming(bool value);
    internal bool get_DebugStartedAtRoot();
    internal State DefineState(SourceLocation location);
    internal State DefineState(SourceLocation location, string name);
    internal State DefineState(SourceLocation location, string name, LocalsItemDescription[] earlyLocals, int numberOfEarlyLocals);
    internal State DefineStateWithDebugInfo(SourceLocation location, string name);
    internal void Bake();
    internal void Bake(string typeName, Dictionary`2<string, Byte[]> checksumCache);
    internal int CreateLogicalThread(string threadName);
    internal void EnterState(int threadIndex, State state, IDictionary`2<string, object> locals);
    internal void EnterState(int threadIndex, VirtualStackFrame stackFrame);
    internal void LeaveState(int threadIndex, State state);
    internal void InvokeWorker(object islandArguments, VirtualStackFrame stackFrame);
    public sealed virtual void Dispose();
    internal void ExitThreads();
    public void Exit(int threadIndex);
}
public class System.Activities.Debugger.Symbol.ActivitySymbol : object {
    public int StartLine { get; internal set; }
    public int StartColumn { get; internal set; }
    public int EndLine { get; internal set; }
    public int EndColumn { get; internal set; }
    internal Byte[] QualifiedId { get; internal set; }
    public string Id { get; }
    internal ActivitySymbol(BinaryReader reader);
    [CompilerGeneratedAttribute]
public int get_StartLine();
    [CompilerGeneratedAttribute]
internal void set_StartLine(int value);
    [CompilerGeneratedAttribute]
public int get_StartColumn();
    [CompilerGeneratedAttribute]
internal void set_StartColumn(int value);
    [CompilerGeneratedAttribute]
public int get_EndLine();
    [CompilerGeneratedAttribute]
internal void set_EndLine(int value);
    [CompilerGeneratedAttribute]
public int get_EndColumn();
    [CompilerGeneratedAttribute]
internal void set_EndColumn(int value);
    [CompilerGeneratedAttribute]
internal Byte[] get_QualifiedId();
    [CompilerGeneratedAttribute]
internal void set_QualifiedId(Byte[] value);
    public string get_Id();
    internal void Write(BinaryWriter writer);
    public virtual string ToString();
}
public static class System.Activities.Debugger.Symbol.DebugSymbol : object {
    public static AttachableMemberIdentifier SymbolName;
    private static DebugSymbol();
    public static void SetSymbol(object instance, object value);
    public static object GetSymbol(object instance);
}
internal static class System.Activities.Debugger.Symbol.SymbolHelper : object {
    public static int ReadEncodedInt32(BinaryReader reader);
    public static void WriteEncodedInt32(BinaryWriter writer, int value);
    public static int GetEncodedSize(int value);
    public static Byte[] CalculateChecksum(string fileName);
    [SecuritySafeCriticalAttribute]
public static string GetHexStringFromChecksum(Byte[] checksum);
    [SecuritySafeCriticalAttribute]
internal static bool ValidateChecksum(Byte[] checksumToValidate);
}
public class System.Activities.Debugger.Symbol.WorkflowSymbol : object {
    internal static EncodingFormat DefaultEncodingFormat;
    public string FileName { get; public set; }
    public ICollection`1<ActivitySymbol> Symbols { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public ICollection`1<ActivitySymbol> get_Symbols();
    [CompilerGeneratedAttribute]
public void set_Symbols(ICollection`1<ActivitySymbol> value);
    public Byte[] GetChecksum();
    public static WorkflowSymbol Decode(string symbolString);
    public string Encode();
    internal string Encode(EncodingFormat encodingFormat);
    public virtual string ToString();
    public bool CalculateChecksum();
}
[DebuggerNonUserCodeAttribute]
public class System.Activities.Debugger.ThreadWorkerController : object {
    internal void Initialize(string threadName, StateManager manager);
    internal void Exit();
    [DebuggerHiddenAttribute]
public static void IslandWorker(ThreadWorkerController controller);
    [DebuggerHiddenAttribute]
internal void Worker(bool isAtStartup);
    internal void EnterState(VirtualStackFrame newFrame);
    internal void LeaveState();
    internal void Break();
}
internal static class System.Activities.Debugger.UnitTestUtility : object {
    internal static Func`2<string, Exception> AssertionExceptionFactory { get; internal set; }
    [CompilerGeneratedAttribute]
internal static Func`2<string, Exception> get_AssertionExceptionFactory();
    [CompilerGeneratedAttribute]
internal static void set_AssertionExceptionFactory(Func`2<string, Exception> value);
    internal static void TestInitialize(Func`2<string, Exception> createAssertionException);
    internal static void TestCleanup();
    internal static void Assert(bool condition, string assertionMessage);
}
[DebuggerNonUserCodeAttribute]
public class System.Activities.Debugger.VirtualStackFrame : object {
    public State State { get; }
    public IDictionary`2<string, object> Locals { get; }
    public VirtualStackFrame(State state, IDictionary`2<string, object> locals);
    public VirtualStackFrame(State state);
    public State get_State();
    public IDictionary`2<string, object> get_Locals();
    public virtual string ToString();
}
public class System.Activities.Debugger.XamlDebuggerXmlReader : XamlReader {
    public static AttachableMemberIdentifier StartLineName;
    public static AttachableMemberIdentifier StartColumnName;
    public static AttachableMemberIdentifier EndLineName;
    public static AttachableMemberIdentifier EndColumnName;
    public static AttachableMemberIdentifier FileNameName;
    public bool CollectNonActivitySourceLocation { get; public set; }
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public XamlNodeType NodeType { get; }
    public XamlType Type { get; }
    public XamlMember Member { get; }
    public object Value { get; }
    public bool IsEof { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlSchemaContext SchemaContext { get; }
    internal XamlMember StartLineMember { get; }
    internal XamlMember StartColumnMember { get; }
    internal XamlMember EndLineMember { get; }
    internal XamlMember EndColumnMember { get; }
    public XamlDebuggerXmlReader(TextReader underlyingTextReader);
    public XamlDebuggerXmlReader(TextReader underlyingTextReader, XamlSchemaContext schemaContext);
    internal XamlDebuggerXmlReader(TextReader underlyingTextReader, XamlSchemaContext schemaContext, Assembly localAssembly);
    [ObsoleteAttribute("Don't use this constructor. Use "public XamlDebuggerXmlReader(TextReader underlyingTextReader)" or "public XamlDebuggerXmlReader(TextReader underlyingTextReader, XamlSchemaContext schemaContext)" instead.")]
public XamlDebuggerXmlReader(XamlReader underlyingReader, TextReader textReader);
    [ObsoleteAttribute("Don't use this constructor. Use "public XamlDebuggerXmlReader(TextReader underlyingTextReader)" or "public XamlDebuggerXmlReader(TextReader underlyingTextReader, XamlSchemaContext schemaContext)" instead.")]
public XamlDebuggerXmlReader(XamlReader underlyingReader, IXamlLineInfo xamlLineInfo, TextReader textReader);
    private static XamlDebuggerXmlReader();
    public void add_SourceLocationFound(EventHandler`1<SourceLocationFoundEventArgs> value);
    public void remove_SourceLocationFound(EventHandler`1<SourceLocationFoundEventArgs> value);
    public bool get_CollectNonActivitySourceLocation();
    public void set_CollectNonActivitySourceLocation(bool value);
    public sealed virtual bool get_HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlType get_Type();
    public virtual XamlMember get_Member();
    public virtual object get_Value();
    public virtual bool get_IsEof();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlSchemaContext get_SchemaContext();
    internal XamlMember get_StartLineMember();
    internal XamlMember get_StartColumnMember();
    internal XamlMember get_EndLineMember();
    internal XamlMember get_EndColumnMember();
    [DesignerSerializationVisibilityAttribute("0")]
public static object GetStartLine(object instance);
    public static void SetStartLine(object instance, object value);
    [DesignerSerializationVisibilityAttribute("0")]
public static object GetStartColumn(object instance);
    public static void SetStartColumn(object instance, object value);
    [DesignerSerializationVisibilityAttribute("0")]
public static object GetEndLine(object instance);
    public static void SetEndLine(object instance, object value);
    [DesignerSerializationVisibilityAttribute("0")]
public static object GetEndColumn(object instance);
    public static void SetEndColumn(object instance, object value);
    public static void SetFileName(object instance, object value);
    public static object GetFileName(object instance);
    public static void CopyAttachedSourceLocation(object source, object destination);
    internal static void SetSourceLocation(object sender, SourceLocationFoundEventArgs args);
    public virtual bool Read();
    protected virtual void Dispose(bool disposing);
}
[ExtensionAttribute]
internal static class System.Activities.Debugger.XamlMemberExtensions : object {
    [ExtensionAttribute]
internal static XamlMember ReplaceXamlMemberInvoker(XamlMember originalXamlMember, XamlSchemaContext schemaContext, XamlMemberInvoker newInvoker);
}
internal class System.Activities.Debugger.XamlNode : object {
    public XamlMember Member { get; public set; }
    public NamespaceDeclaration Namespace { get; public set; }
    public XamlNodeType NodeType { get; public set; }
    public XamlType Type { get; public set; }
    public object Value { get; public set; }
    public int LineNumber { get; public set; }
    public int LinePosition { get; public set; }
    [CompilerGeneratedAttribute]
public XamlMember get_Member();
    [CompilerGeneratedAttribute]
public void set_Member(XamlMember value);
    [CompilerGeneratedAttribute]
public NamespaceDeclaration get_Namespace();
    [CompilerGeneratedAttribute]
public void set_Namespace(NamespaceDeclaration value);
    [CompilerGeneratedAttribute]
public XamlNodeType get_NodeType();
    [CompilerGeneratedAttribute]
public void set_NodeType(XamlNodeType value);
    [CompilerGeneratedAttribute]
public XamlType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(XamlType value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public void set_LineNumber(int value);
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
public void set_LinePosition(int value);
    public virtual string ToString();
}
internal class System.Activities.Debugger.XmlReaderWithSourceLocation : XmlWrappingReader {
    public Dictionary`2<DocumentLocation, DocumentRange> AttributeValueRanges { get; }
    public Dictionary`2<DocumentLocation, DocumentRange> ContentValueRanges { get; }
    public Dictionary`2<DocumentLocation, DocumentRange> EmptyElementRanges { get; }
    public Dictionary`2<DocumentLocation, DocumentLocation> StartElementLocations { get; }
    public Dictionary`2<DocumentLocation, DocumentLocation> EndElementLocations { get; }
    public XmlReaderWithSourceLocation(TextReader underlyingTextReader);
    public Dictionary`2<DocumentLocation, DocumentRange> get_AttributeValueRanges();
    public Dictionary`2<DocumentLocation, DocumentRange> get_ContentValueRanges();
    public Dictionary`2<DocumentLocation, DocumentRange> get_EmptyElementRanges();
    public Dictionary`2<DocumentLocation, DocumentLocation> get_StartElementLocations();
    public Dictionary`2<DocumentLocation, DocumentLocation> get_EndElementLocations();
    public virtual bool Read();
    protected virtual void Dispose(bool disposing);
}
[DefaultMemberAttribute("Item")]
internal class System.Activities.Debugger.XmlWrappingReader : XmlReader {
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public Type ValueType { get; }
    public int AttributeCount { get; }
    public bool CanResolveEntity { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public bool HasAttributes { get; }
    public XmlNameTable NameTable { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    unknown XmlReader BaseReader {protected set; }
    protected IXmlLineInfo BaseReaderAsLineInfo { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual Type get_ValueType();
    public virtual int get_AttributeCount();
    public virtual bool get_CanResolveEntity();
    public virtual bool get_EOF();
    public virtual ReadState get_ReadState();
    public virtual bool get_HasAttributes();
    public virtual XmlNameTable get_NameTable();
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    protected void set_BaseReader(XmlReader value);
    protected IXmlLineInfo get_BaseReaderAsLineInfo();
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool Read();
    public virtual void Close();
    public virtual void Skip();
    public virtual string LookupNamespace(string prefix);
    public virtual void ResolveEntity();
    public virtual bool ReadAttributeValue();
    public virtual bool HasLineInfo();
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    protected virtual void Dispose(bool disposing);
}
public abstract class System.Activities.DelegateArgument : LocationReference {
    [DefaultValueAttribute("")]
public string Name { get; public set; }
    protected string NameCore { get; }
    public ArgumentDirection Direction { get; internal set; }
    internal Activity Owner { get; private set; }
    internal bool IsInTree { get; }
    public string get_Name();
    public void set_Name(string value);
    protected virtual string get_NameCore();
    public ArgumentDirection get_Direction();
    internal void set_Direction(ArgumentDirection value);
    [CompilerGeneratedAttribute]
internal Activity get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(Activity value);
    internal bool get_IsInTree();
    internal void ThrowIfNotInTree();
    internal void Bind(RuntimeDelegateArgument runtimeArgument);
    internal bool InitializeRelationship(Activity parent, IList`1& validationErrors);
    public object Get(ActivityContext context);
    public virtual Location GetLocation(ActivityContext context);
    internal Location InternalGetLocation(LocationEnvironment environment);
    internal abstract virtual Location CreateLocation();
}
public class System.Activities.DelegateCompletionCallback : MulticastDelegate {
    public DelegateCompletionCallback(object object, IntPtr method);
    public virtual void Invoke(NativeActivityContext context, ActivityInstance completedInstance, IDictionary`2<string, object> outArguments);
    public virtual IAsyncResult BeginInvoke(NativeActivityContext context, ActivityInstance completedInstance, IDictionary`2<string, object> outArguments, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Activities.DelegateInArgument : DelegateArgument {
}
public class System.Activities.DelegateInArgument`1 : DelegateInArgument {
    protected Type TypeCore { get; }
    public DelegateInArgument`1(string name);
    protected virtual Type get_TypeCore();
    public T Get(ActivityContext context);
    public void Set(ActivityContext context, T value);
    internal virtual Location CreateLocation();
}
public abstract class System.Activities.DelegateOutArgument : DelegateArgument {
}
public class System.Activities.DelegateOutArgument`1 : DelegateOutArgument {
    protected Type TypeCore { get; }
    public DelegateOutArgument`1(string name);
    protected virtual Type get_TypeCore();
    public T Get(ActivityContext context);
    public Location`1<T> GetLocation(ActivityContext context);
    public void Set(ActivityContext context, T value);
    internal virtual Location CreateLocation();
}
public class System.Activities.DurableInstancing.ActivatableWorkflowsQueryResult : InstanceStoreQueryResult {
    public List`1<IDictionary`2<XName, object>> ActivationParameters { get; private set; }
    public ActivatableWorkflowsQueryResult(IDictionary`2<XName, object> parameters);
    public ActivatableWorkflowsQueryResult(IEnumerable`1<IDictionary`2<XName, object>> parameters);
    private static ActivatableWorkflowsQueryResult();
    [CompilerGeneratedAttribute]
public List`1<IDictionary`2<XName, object>> get_ActivationParameters();
    [CompilerGeneratedAttribute]
private void set_ActivationParameters(List`1<IDictionary`2<XName, object>> value);
}
public class System.Activities.DurableInstancing.CreateWorkflowOwnerCommand : InstancePersistenceCommand {
    public IDictionary`2<XName, InstanceValue> InstanceOwnerMetadata { get; }
    protected internal bool IsTransactionEnlistmentOptional { get; }
    public IDictionary`2<XName, InstanceValue> get_InstanceOwnerMetadata();
    protected internal virtual bool get_IsTransactionEnlistmentOptional();
    protected internal virtual void Validate(InstanceView view);
}
public class System.Activities.DurableInstancing.CreateWorkflowOwnerWithIdentityCommand : InstancePersistenceCommand {
    public IDictionary`2<XName, InstanceValue> InstanceOwnerMetadata { get; }
    protected internal bool IsTransactionEnlistmentOptional { get; }
    public IDictionary`2<XName, InstanceValue> get_InstanceOwnerMetadata();
    protected internal virtual bool get_IsTransactionEnlistmentOptional();
    protected internal virtual void Validate(InstanceView view);
}
public class System.Activities.DurableInstancing.DeleteWorkflowOwnerCommand : InstancePersistenceCommand {
    protected internal bool IsTransactionEnlistmentOptional { get; }
    protected internal virtual bool get_IsTransactionEnlistmentOptional();
    protected internal virtual void Validate(InstanceView view);
}
public class System.Activities.DurableInstancing.HasActivatableWorkflowEvent : InstancePersistenceEvent`1<HasActivatableWorkflowEvent> {
}
public class System.Activities.DurableInstancing.HasRunnableWorkflowEvent : InstancePersistenceEvent`1<HasRunnableWorkflowEvent> {
}
public class System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand : InstancePersistenceCommand {
    public bool AcceptUninitializedInstance { get; public set; }
    public Guid LookupInstanceKey { get; public set; }
    public Guid AssociateInstanceKeyToInstanceId { get; public set; }
    public IDictionary`2<Guid, IDictionary`2<XName, InstanceValue>> InstanceKeysToAssociate { get; }
    protected internal bool IsTransactionEnlistmentOptional { get; }
    protected internal bool AutomaticallyAcquiringLock { get; }
    [CompilerGeneratedAttribute]
public bool get_AcceptUninitializedInstance();
    [CompilerGeneratedAttribute]
public void set_AcceptUninitializedInstance(bool value);
    [CompilerGeneratedAttribute]
public Guid get_LookupInstanceKey();
    [CompilerGeneratedAttribute]
public void set_LookupInstanceKey(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_AssociateInstanceKeyToInstanceId();
    [CompilerGeneratedAttribute]
public void set_AssociateInstanceKeyToInstanceId(Guid value);
    public IDictionary`2<Guid, IDictionary`2<XName, InstanceValue>> get_InstanceKeysToAssociate();
    protected internal virtual bool get_IsTransactionEnlistmentOptional();
    protected internal virtual bool get_AutomaticallyAcquiringLock();
    protected internal virtual void Validate(InstanceView view);
}
public class System.Activities.DurableInstancing.LoadWorkflowCommand : InstancePersistenceCommand {
    public bool AcceptUninitializedInstance { get; public set; }
    protected internal bool IsTransactionEnlistmentOptional { get; }
    protected internal bool AutomaticallyAcquiringLock { get; }
    [CompilerGeneratedAttribute]
public bool get_AcceptUninitializedInstance();
    [CompilerGeneratedAttribute]
public void set_AcceptUninitializedInstance(bool value);
    protected internal virtual bool get_IsTransactionEnlistmentOptional();
    protected internal virtual bool get_AutomaticallyAcquiringLock();
    protected internal virtual void Validate(InstanceView view);
}
public class System.Activities.DurableInstancing.QueryActivatableWorkflowsCommand : InstancePersistenceCommand {
    protected internal bool IsTransactionEnlistmentOptional { get; }
    protected internal virtual bool get_IsTransactionEnlistmentOptional();
    protected internal virtual void Validate(InstanceView view);
}
public class System.Activities.DurableInstancing.SaveWorkflowCommand : InstancePersistenceCommand {
    public bool UnlockInstance { get; public set; }
    public bool CompleteInstance { get; public set; }
    public IDictionary`2<Guid, IDictionary`2<XName, InstanceValue>> InstanceKeysToAssociate { get; }
    public ICollection`1<Guid> InstanceKeysToComplete { get; }
    public ICollection`1<Guid> InstanceKeysToFree { get; }
    public IDictionary`2<XName, InstanceValue> InstanceMetadataChanges { get; }
    public IDictionary`2<Guid, IDictionary`2<XName, InstanceValue>> InstanceKeyMetadataChanges { get; }
    public IDictionary`2<XName, InstanceValue> InstanceData { get; }
    protected internal bool IsTransactionEnlistmentOptional { get; }
    protected internal bool AutomaticallyAcquiringLock { get; }
    [CompilerGeneratedAttribute]
public bool get_UnlockInstance();
    [CompilerGeneratedAttribute]
public void set_UnlockInstance(bool value);
    [CompilerGeneratedAttribute]
public bool get_CompleteInstance();
    [CompilerGeneratedAttribute]
public void set_CompleteInstance(bool value);
    public IDictionary`2<Guid, IDictionary`2<XName, InstanceValue>> get_InstanceKeysToAssociate();
    public ICollection`1<Guid> get_InstanceKeysToComplete();
    public ICollection`1<Guid> get_InstanceKeysToFree();
    public IDictionary`2<XName, InstanceValue> get_InstanceMetadataChanges();
    public IDictionary`2<Guid, IDictionary`2<XName, InstanceValue>> get_InstanceKeyMetadataChanges();
    public IDictionary`2<XName, InstanceValue> get_InstanceData();
    protected internal virtual bool get_IsTransactionEnlistmentOptional();
    protected internal virtual bool get_AutomaticallyAcquiringLock();
    protected internal virtual void Validate(InstanceView view);
}
public class System.Activities.DurableInstancing.TryLoadRunnableWorkflowCommand : InstancePersistenceCommand {
    protected internal bool IsTransactionEnlistmentOptional { get; }
    protected internal bool AutomaticallyAcquiringLock { get; }
    protected internal virtual bool get_IsTransactionEnlistmentOptional();
    protected internal virtual bool get_AutomaticallyAcquiringLock();
    protected internal virtual void Validate(InstanceView view);
}
[ContentPropertyAttribute("Implementation")]
public class System.Activities.DynamicActivity : Activity {
    public string Name { get; public set; }
    [DependsOnAttribute("Name")]
public Collection`1<Attribute> Attributes { get; }
    [BrowsableAttribute("False")]
[DependsOnAttribute("Attributes")]
public KeyedCollection`2<string, DynamicActivityProperty> Properties { get; }
    [DependsOnAttribute("Properties")]
public Collection`1<Constraint> Constraints { get; }
    [TypeConverterAttribute("System.Activities.XamlIntegration.ImplementationVersionConverter")]
[DefaultValueAttribute("")]
public Version ImplementationVersion { get; public set; }
    [XamlDeferLoadAttribute("System.Activities.XamlIntegration.FuncDeferringLoader", "System.Activities.Activity")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[AmbientAttribute]
public Func`1<Activity> Implementation { get; public set; }
    private KeyedCollection`2<string, DynamicActivityProperty> System.Activities.IDynamicActivity.Properties { get; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public Collection`1<Attribute> get_Attributes();
    public KeyedCollection`2<string, DynamicActivityProperty> get_Properties();
    public Collection`1<Constraint> get_Constraints();
    public Version get_ImplementationVersion();
    public void set_ImplementationVersion(Version value);
    public Func`1<Activity> get_Implementation();
    public void set_Implementation(Func`1<Activity> value);
    private sealed virtual override KeyedCollection`2<string, DynamicActivityProperty> System.Activities.IDynamicActivity.get_Properties();
    internal virtual void InternalExecute(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal sealed virtual void OnInternalCacheMetadata(bool createEmptyBindings);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[ContentPropertyAttribute("Implementation")]
public class System.Activities.DynamicActivity`1 : Activity`1<TResult> {
    public string Name { get; public set; }
    [DependsOnAttribute("Name")]
public Collection`1<Attribute> Attributes { get; }
    [BrowsableAttribute("False")]
[DependsOnAttribute("Attributes")]
public KeyedCollection`2<string, DynamicActivityProperty> Properties { get; }
    [DependsOnAttribute("Properties")]
public Collection`1<Constraint> Constraints { get; }
    [TypeConverterAttribute("System.Activities.XamlIntegration.ImplementationVersionConverter")]
[DefaultValueAttribute("")]
public Version ImplementationVersion { get; public set; }
    [XamlDeferLoadAttribute("System.Activities.XamlIntegration.FuncDeferringLoader", "System.Activities.Activity")]
[DefaultValueAttribute("")]
[BrowsableAttribute("False")]
[AmbientAttribute]
public Func`1<Activity> Implementation { get; public set; }
    private KeyedCollection`2<string, DynamicActivityProperty> System.Activities.IDynamicActivity.Properties { get; }
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public Collection`1<Attribute> get_Attributes();
    public KeyedCollection`2<string, DynamicActivityProperty> get_Properties();
    public Collection`1<Constraint> get_Constraints();
    public Version get_ImplementationVersion();
    public void set_ImplementationVersion(Version value);
    public Func`1<Activity> get_Implementation();
    public void set_Implementation(Func`1<Activity> value);
    private sealed virtual override KeyedCollection`2<string, DynamicActivityProperty> System.Activities.IDynamicActivity.get_Properties();
    internal virtual void InternalExecute(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal sealed virtual void OnInternalCacheMetadataExceptResult(bool createEmptyBindings);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
public class System.Activities.DynamicActivityProperty : object {
    public Collection`1<Attribute> Attributes { get; }
    [DefaultValueAttribute("")]
public string Name { get; public set; }
    [DefaultValueAttribute("")]
public Type Type { get; public set; }
    [DefaultValueAttribute("")]
public object Value { get; public set; }
    public Collection`1<Attribute> get_Attributes();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
    public virtual string ToString();
}
internal class System.Activities.DynamicActivityTypeDescriptor : object {
    public string Name { get; public set; }
    public KeyedCollection`2<string, DynamicActivityProperty> Properties { get; private set; }
    public DynamicActivityTypeDescriptor(Activity owner);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public KeyedCollection`2<string, DynamicActivityProperty> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(KeyedCollection`2<string, DynamicActivityProperty> value);
    public sealed virtual AttributeCollection GetAttributes();
    public sealed virtual string GetClassName();
    public sealed virtual string GetComponentName();
    public sealed virtual TypeConverter GetConverter();
    public sealed virtual EventDescriptor GetDefaultEvent();
    public sealed virtual PropertyDescriptor GetDefaultProperty();
    public sealed virtual object GetEditor(Type editorBaseType);
    public sealed virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
    public sealed virtual EventDescriptorCollection GetEvents();
    public sealed virtual PropertyDescriptorCollection GetProperties();
    public sealed virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    public sealed virtual object GetPropertyOwner(PropertyDescriptor pd);
}
[DataContractAttribute]
public class System.Activities.DynamicUpdate.ActivityBlockingUpdate : object {
    public Activity Activity { get; }
    public string ActivityInstanceId { get; private set; }
    public string OriginalActivityId { get; private set; }
    public string UpdatedActivityId { get; private set; }
    public string Reason { get; private set; }
    [DataMemberAttribute]
internal string SerializedActivityInstanceId { get; internal set; }
    [DataMemberAttribute]
internal string SerializedOriginalActivityId { get; internal set; }
    [DataMemberAttribute]
internal string SerializedUpdatedActivityId { get; internal set; }
    [DataMemberAttribute]
internal string SerializedReason { get; internal set; }
    public ActivityBlockingUpdate(Activity activity, string originalActivityId, string reason);
    public ActivityBlockingUpdate(Activity activity, string originalActivityId, string reason, string activityInstanceId);
    public ActivityBlockingUpdate(string updatedActivityId, string originalActivityId, string reason);
    public ActivityBlockingUpdate(string updatedActivityId, string originalActivityId, string reason, string activityInstanceId);
    public Activity get_Activity();
    public string get_ActivityInstanceId();
    private void set_ActivityInstanceId(string value);
    public string get_OriginalActivityId();
    private void set_OriginalActivityId(string value);
    public string get_UpdatedActivityId();
    private void set_UpdatedActivityId(string value);
    public string get_Reason();
    private void set_Reason(string value);
    internal string get_SerializedActivityInstanceId();
    internal void set_SerializedActivityInstanceId(string value);
    internal string get_SerializedOriginalActivityId();
    internal void set_SerializedOriginalActivityId(string value);
    internal string get_SerializedUpdatedActivityId();
    internal void set_SerializedUpdatedActivityId(string value);
    internal string get_SerializedReason();
    internal void set_SerializedReason(string value);
    internal static void AddBlockingActivity(Collection`1& blockingActivities, Activity activity, string originalActivityId, string reason, string activityInstanceId);
    internal static void AddBlockingActivity(Collection`1& blockingActivities, string updatedActivityId, string originalActivityId, string reason, string activityInstanceId);
}
internal static class System.Activities.DynamicUpdate.ActivityComparer : object {
    public static bool HasPrivateMemberOtherThanArgumentsChanged(NestedIdSpaceFinalizer nestedFinalizer, Activity currentElement, Activity originalElement, bool isMemberOfUpdatedIdSpace, DynamicUpdateMap& argumentChangesMap);
    public static bool ListEquals(IList`1<RuntimeDelegateArgument> currentArguments, IList`1<RuntimeDelegateArgument> originalArguments);
    public static bool ListEquals(IList`1<ArgumentInfo> currentArguments, IList`1<ArgumentInfo> originalArguments);
    public static bool ListEquals(IList`1<T> currentMembers, IList`1<T> originalMembers, Func`3<T, T, bool> comparer);
    public static bool SignatureEquals(Variable leftVar, Variable rightVar);
}
[DataContractAttribute]
internal class System.Activities.DynamicUpdate.ArgumentInfo : object {
    public string Name { get; private set; }
    public string FullAssemblyQualifiedTypeName { get; private set; }
    public ArgumentDirection Direction { get; private set; }
    [DataMemberAttribute]
internal string SerializedVersionlessAssemblyQualifiedTypeName { get; internal set; }
    [DataMemberAttribute]
internal string SerializedName { get; internal set; }
    [DataMemberAttribute]
internal string SerializedFullAssemblyQualifiedTypeName { get; internal set; }
    [DataMemberAttribute]
internal ArgumentDirection SerializedDirection { get; internal set; }
    public ArgumentInfo(RuntimeArgument argument);
    public string get_Name();
    private void set_Name(string value);
    public string get_FullAssemblyQualifiedTypeName();
    private void set_FullAssemblyQualifiedTypeName(string value);
    public ArgumentDirection get_Direction();
    private void set_Direction(ArgumentDirection value);
    internal string get_SerializedVersionlessAssemblyQualifiedTypeName();
    internal void set_SerializedVersionlessAssemblyQualifiedTypeName(string value);
    internal string get_SerializedName();
    internal void set_SerializedName(string value);
    internal string get_SerializedFullAssemblyQualifiedTypeName();
    internal void set_SerializedFullAssemblyQualifiedTypeName(string value);
    internal ArgumentDirection get_SerializedDirection();
    internal void set_SerializedDirection(ArgumentDirection value);
    public static bool Equals(ArgumentInfo left, ArgumentInfo right);
    public static IList`1<ArgumentInfo> List(Activity activity);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public static class System.Activities.DynamicUpdate.DynamicUpdateInfo : object {
    private static DynamicUpdateInfo();
    public static void SetMapItem(object instance, DynamicUpdateMapItem mapItem);
    public static DynamicUpdateMapItem GetMapItem(object instance);
    public static void SetOriginalDefinition(object instance, Activity originalDefinition);
    public static Activity GetOriginalDefinition(object instance);
    public static void SetOriginalActivityBuilder(object instance, ActivityBuilder originalActivityBuilder);
    public static ActivityBuilder GetOriginalActivityBuilder(object instance);
}
[DataContractAttribute]
[TypeConverterAttribute("System.Activities.XamlIntegration.DynamicUpdateMapConverter")]
public class System.Activities.DynamicUpdate.DynamicUpdateMap : object {
    internal EntryCollection entries;
    public static DynamicUpdateMap NoChanges { get; }
    [DataMemberAttribute]
internal EntryCollection SerializedEntries { get; internal set; }
    [DataMemberAttribute]
internal IList`1<ArgumentInfo> SerializedNewArguments { get; internal set; }
    [DataMemberAttribute]
internal IList`1<ArgumentInfo> SerializedOldArguments { get; internal set; }
    internal static DynamicUpdateMap DummyMap { get; }
    internal IList`1<ArgumentInfo> NewArguments { get; internal set; }
    internal IList`1<ArgumentInfo> OldArguments { get; internal set; }
    [DataMemberAttribute]
internal bool ArgumentsAreUnknown { get; internal set; }
    [DataMemberAttribute]
internal bool IsImplementationAsRoot { get; internal set; }
    [DataMemberAttribute]
internal int NewDefinitionMemberCount { get; internal set; }
    internal int OldDefinitionMemberCount { get; }
    [DataMemberAttribute]
internal bool IsForImplementation { get; internal set; }
    internal bool IsNoChanges { get; }
    private static DynamicUpdateMap();
    public static DynamicUpdateMap get_NoChanges();
    internal EntryCollection get_SerializedEntries();
    internal void set_SerializedEntries(EntryCollection value);
    internal IList`1<ArgumentInfo> get_SerializedNewArguments();
    internal void set_SerializedNewArguments(IList`1<ArgumentInfo> value);
    internal IList`1<ArgumentInfo> get_SerializedOldArguments();
    internal void set_SerializedOldArguments(IList`1<ArgumentInfo> value);
    internal static DynamicUpdateMap get_DummyMap();
    internal IList`1<ArgumentInfo> get_NewArguments();
    internal void set_NewArguments(IList`1<ArgumentInfo> value);
    internal IList`1<ArgumentInfo> get_OldArguments();
    internal void set_OldArguments(IList`1<ArgumentInfo> value);
    [CompilerGeneratedAttribute]
internal bool get_ArgumentsAreUnknown();
    [CompilerGeneratedAttribute]
internal void set_ArgumentsAreUnknown(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsImplementationAsRoot();
    [CompilerGeneratedAttribute]
internal void set_IsImplementationAsRoot(bool value);
    [CompilerGeneratedAttribute]
internal int get_NewDefinitionMemberCount();
    [CompilerGeneratedAttribute]
internal void set_NewDefinitionMemberCount(int value);
    internal int get_OldDefinitionMemberCount();
    [CompilerGeneratedAttribute]
internal bool get_IsForImplementation();
    [CompilerGeneratedAttribute]
internal void set_IsForImplementation(bool value);
    internal bool get_IsNoChanges();
    public static IDictionary`2<object, DynamicUpdateMapItem> CalculateMapItems(Activity workflowDefinitionToBeUpdated);
    public static IDictionary`2<object, DynamicUpdateMapItem> CalculateMapItems(Activity workflowDefinitionToBeUpdated, LocationReferenceEnvironment environment);
    public static IDictionary`2<object, DynamicUpdateMapItem> CalculateImplementationMapItems(Activity activityDefinitionToBeUpdated);
    public static IDictionary`2<object, DynamicUpdateMapItem> CalculateImplementationMapItems(Activity activityDefinitionToBeUpdated, LocationReferenceEnvironment environment);
    public static DynamicUpdateMap Merge(DynamicUpdateMap[] maps);
    public static DynamicUpdateMap Merge(IEnumerable`1<DynamicUpdateMap> maps);
    public DynamicUpdateMapQuery Query(Activity updatedWorkflowDefinition, Activity originalWorkflowDefinition);
    internal static bool CanUseImplementationMapAsRoot(Activity workflowDefinition);
    internal static DynamicUpdateMap Merge(DynamicUpdateMap first, DynamicUpdateMap second, MergeErrorContext errorContext);
    internal void AddEntry(DynamicUpdateMapEntry entry);
    internal DynamicUpdateMap AsRootMap();
    internal void ThrowIfInvalid(Activity updatedDefinition);
    internal bool TryGetUpdateEntryByNewId(int newId, DynamicUpdateMapEntry& entry);
    internal bool TryGetUpdateEntry(int oldId, DynamicUpdateMapEntry& entry);
    internal UpdatedActivity GetUpdatedActivity(QualifiedId oldQualifiedId, IdSpace rootIdSpace);
}
public class System.Activities.DynamicUpdate.DynamicUpdateMapBuilder : object {
    public bool ForImplementation { get; public set; }
    public ISet`1<Activity> DisallowUpdateInside { get; }
    public Func`2<object, DynamicUpdateMapItem> LookupMapItem { get; public set; }
    public Func`2<Activity, DynamicUpdateMap> LookupImplementationMap { get; public set; }
    public LocationReferenceEnvironment UpdatedEnvironment { get; public set; }
    public Activity UpdatedWorkflowDefinition { get; public set; }
    public LocationReferenceEnvironment OriginalEnvironment { get; public set; }
    public Activity OriginalWorkflowDefinition { get; public set; }
    internal Func`2<Activity, Exception> OnInvalidActivityToBlockUpdate { get; internal set; }
    internal Func`2<Activity, Exception> OnInvalidImplementationMapAssociation { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_ForImplementation();
    [CompilerGeneratedAttribute]
public void set_ForImplementation(bool value);
    public ISet`1<Activity> get_DisallowUpdateInside();
    [CompilerGeneratedAttribute]
public Func`2<object, DynamicUpdateMapItem> get_LookupMapItem();
    [CompilerGeneratedAttribute]
public void set_LookupMapItem(Func`2<object, DynamicUpdateMapItem> value);
    [CompilerGeneratedAttribute]
public Func`2<Activity, DynamicUpdateMap> get_LookupImplementationMap();
    [CompilerGeneratedAttribute]
public void set_LookupImplementationMap(Func`2<Activity, DynamicUpdateMap> value);
    [CompilerGeneratedAttribute]
public LocationReferenceEnvironment get_UpdatedEnvironment();
    [CompilerGeneratedAttribute]
public void set_UpdatedEnvironment(LocationReferenceEnvironment value);
    [CompilerGeneratedAttribute]
public Activity get_UpdatedWorkflowDefinition();
    [CompilerGeneratedAttribute]
public void set_UpdatedWorkflowDefinition(Activity value);
    [CompilerGeneratedAttribute]
public LocationReferenceEnvironment get_OriginalEnvironment();
    [CompilerGeneratedAttribute]
public void set_OriginalEnvironment(LocationReferenceEnvironment value);
    [CompilerGeneratedAttribute]
public Activity get_OriginalWorkflowDefinition();
    [CompilerGeneratedAttribute]
public void set_OriginalWorkflowDefinition(Activity value);
    [CompilerGeneratedAttribute]
internal Func`2<Activity, Exception> get_OnInvalidActivityToBlockUpdate();
    [CompilerGeneratedAttribute]
internal void set_OnInvalidActivityToBlockUpdate(Func`2<Activity, Exception> value);
    [CompilerGeneratedAttribute]
internal Func`2<Activity, Exception> get_OnInvalidImplementationMapAssociation();
    [CompilerGeneratedAttribute]
internal void set_OnInvalidImplementationMapAssociation(Func`2<Activity, Exception> value);
    public DynamicUpdateMap CreateMap();
    public DynamicUpdateMap CreateMap(IList`1& activitiesBlockingUpdate);
}
[DataContractAttribute]
internal class System.Activities.DynamicUpdate.DynamicUpdateMapEntry : object {
    internal static DynamicUpdateMapEntry DummyMapEntry { get; }
    public int OldActivityId { get; private set; }
    public int NewActivityId { get; private set; }
    [DataMemberAttribute]
public DynamicUpdateMapEntry Parent { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public UpdateBlockedReason BlockReason { get; public set; }
    [DataMemberAttribute]
public string BlockReasonMessage { get; public set; }
    public bool IsRuntimeUpdateBlocked { get; }
    [DataMemberAttribute]
public bool IsUpdateBlockedByUpdateAuthor { get; public set; }
    public bool IsParentRemovedOrBlocked { get; }
    [DataMemberAttribute]
public IDictionary`2<string, object> SavedOriginalValues { get; public set; }
    [DataMemberAttribute]
public object SavedOriginalValueFromParent { get; public set; }
    [DataMemberAttribute]
public EnvironmentUpdateMap EnvironmentUpdateMap { get; public set; }
    public DynamicUpdateMap ImplementationUpdateMap { get; internal set; }
    [DataMemberAttribute]
internal DynamicUpdateMap SerializedImplementationUpdateMap { get; internal set; }
    [DataMemberAttribute]
internal int SerializedOldActivityId { get; internal set; }
    [DataMemberAttribute]
internal int SerializedNewActivityId { get; internal set; }
    internal bool IsIdChange { get; }
    internal bool IsRemoval { get; }
    internal bool HasEnvironmentUpdates { get; }
    public DynamicUpdateMapEntry(int oldActivityId, int newActivityId);
    private static DynamicUpdateMapEntry();
    internal static DynamicUpdateMapEntry get_DummyMapEntry();
    public int get_OldActivityId();
    private void set_OldActivityId(int value);
    public int get_NewActivityId();
    private void set_NewActivityId(int value);
    [CompilerGeneratedAttribute]
public DynamicUpdateMapEntry get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(DynamicUpdateMapEntry value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public UpdateBlockedReason get_BlockReason();
    [CompilerGeneratedAttribute]
public void set_BlockReason(UpdateBlockedReason value);
    [CompilerGeneratedAttribute]
public string get_BlockReasonMessage();
    [CompilerGeneratedAttribute]
public void set_BlockReasonMessage(string value);
    public bool get_IsRuntimeUpdateBlocked();
    [CompilerGeneratedAttribute]
public bool get_IsUpdateBlockedByUpdateAuthor();
    [CompilerGeneratedAttribute]
public void set_IsUpdateBlockedByUpdateAuthor(bool value);
    public bool get_IsParentRemovedOrBlocked();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_SavedOriginalValues();
    [CompilerGeneratedAttribute]
public void set_SavedOriginalValues(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public object get_SavedOriginalValueFromParent();
    [CompilerGeneratedAttribute]
public void set_SavedOriginalValueFromParent(object value);
    [CompilerGeneratedAttribute]
public EnvironmentUpdateMap get_EnvironmentUpdateMap();
    [CompilerGeneratedAttribute]
public void set_EnvironmentUpdateMap(EnvironmentUpdateMap value);
    public DynamicUpdateMap get_ImplementationUpdateMap();
    internal void set_ImplementationUpdateMap(DynamicUpdateMap value);
    internal DynamicUpdateMap get_SerializedImplementationUpdateMap();
    internal void set_SerializedImplementationUpdateMap(DynamicUpdateMap value);
    internal int get_SerializedOldActivityId();
    internal void set_SerializedOldActivityId(int value);
    internal int get_SerializedNewActivityId();
    internal void set_SerializedNewActivityId(int value);
    internal bool get_IsIdChange();
    internal bool get_IsRemoval();
    internal bool get_HasEnvironmentUpdates();
    internal static DynamicUpdateMapEntry Merge(DynamicUpdateMapEntry first, DynamicUpdateMapEntry second, DynamicUpdateMapEntry newParent, MergeErrorContext errorContext);
    internal static IDictionary`2<string, object> Merge(IDictionary`2<string, object> first, IDictionary`2<string, object> second);
    internal DynamicUpdateMapEntry Clone(DynamicUpdateMapEntry newParent);
}
[TypeConverterAttribute("System.Activities.XamlIntegration.DynamicUpdateMapItemConverter")]
[DataContractAttribute]
public class System.Activities.DynamicUpdate.DynamicUpdateMapItem : object {
    [DataMemberAttribute]
internal int OriginalId { get; internal set; }
    [DataMemberAttribute]
internal int OriginalVariableOwnerId { get; internal set; }
    internal bool IsVariableMapItem { get; }
    internal DynamicUpdateMapItem(int originalId);
    internal DynamicUpdateMapItem(int originalVariableOwnerId, int originalVariableId);
    [CompilerGeneratedAttribute]
internal int get_OriginalId();
    [CompilerGeneratedAttribute]
internal void set_OriginalId(int value);
    [CompilerGeneratedAttribute]
internal int get_OriginalVariableOwnerId();
    [CompilerGeneratedAttribute]
internal void set_OriginalVariableOwnerId(int value);
    internal bool get_IsVariableMapItem();
}
public class System.Activities.DynamicUpdate.DynamicUpdateMapQuery : object {
    internal DynamicUpdateMapQuery(DynamicUpdateMap map, Activity updatedWorkflowDefinition, Activity originalWorkflowDefinition);
    public Activity FindMatch(Activity activity);
    public Variable FindMatch(Variable variable);
    public bool CanApplyUpdateWhileRunning(Activity activity);
}
public static class System.Activities.DynamicUpdate.DynamicUpdateServices : object {
    private static DynamicUpdateServices();
    public static void PrepareForUpdate(Activity workflowDefinitionToBeUpdated);
    public static void PrepareForUpdate(ActivityBuilder activityDefinitionToBeUpdated);
    public static DynamicUpdateMap CreateUpdateMap(Activity updatedWorkflowDefinition);
    public static DynamicUpdateMap CreateUpdateMap(Activity updatedWorkflowDefinition, IEnumerable`1<Activity> disallowUpdateInsideActivities);
    public static DynamicUpdateMap CreateUpdateMap(Activity updatedWorkflowDefinition, IEnumerable`1<Activity> disallowUpdateInsideActivities, IList`1& activitiesBlockingUpdate);
    public static DynamicUpdateMap CreateUpdateMap(ActivityBuilder updatedActivityDefinition);
    public static DynamicUpdateMap CreateUpdateMap(ActivityBuilder updatedActivityDefinition, IEnumerable`1<Activity> disallowUpdateInsideActivities);
    public static DynamicUpdateMap CreateUpdateMap(ActivityBuilder updatedActivityDefinition, IEnumerable`1<Activity> disallowUpdateInsideActivities, IList`1& activitiesBlockingUpdate);
    public static DynamicUpdateMap GetImplementationMap(Activity targetActivity);
    public static void SetImplementationMap(Activity targetActivity, DynamicUpdateMap implementationMap);
}
[DataContractAttribute]
internal class System.Activities.DynamicUpdate.EnvironmentUpdateMap : object {
    [DataMemberAttribute]
public int NewArgumentCount { get; public set; }
    [DataMemberAttribute]
public int OldArgumentCount { get; public set; }
    [DataMemberAttribute]
public int NewVariableCount { get; public set; }
    [DataMemberAttribute]
public int OldVariableCount { get; public set; }
    [DataMemberAttribute]
public int NewPrivateVariableCount { get; public set; }
    [DataMemberAttribute]
public int OldPrivateVariableCount { get; public set; }
    [DataMemberAttribute]
public int RuntimeDelegateArgumentCount { get; public set; }
    [DataMemberAttribute]
internal IList`1<EnvironmentUpdateMapEntry> SerializedVariableEntries { get; internal set; }
    [DataMemberAttribute]
internal IList`1<EnvironmentUpdateMapEntry> SerializedPrivateVariableEntries { get; internal set; }
    [DataMemberAttribute]
internal IList`1<EnvironmentUpdateMapEntry> SerializedArgumentEntries { get; internal set; }
    internal bool IsAdditionToNoSymbols { get; }
    internal bool HasVariableEntries { get; }
    internal bool HasPrivateVariableEntries { get; }
    internal bool HasArgumentEntries { get; }
    public IList`1<EnvironmentUpdateMapEntry> VariableEntries { get; }
    public IList`1<EnvironmentUpdateMapEntry> PrivateVariableEntries { get; }
    public IList`1<EnvironmentUpdateMapEntry> ArgumentEntries { get; }
    [CompilerGeneratedAttribute]
public int get_NewArgumentCount();
    [CompilerGeneratedAttribute]
public void set_NewArgumentCount(int value);
    [CompilerGeneratedAttribute]
public int get_OldArgumentCount();
    [CompilerGeneratedAttribute]
public void set_OldArgumentCount(int value);
    [CompilerGeneratedAttribute]
public int get_NewVariableCount();
    [CompilerGeneratedAttribute]
public void set_NewVariableCount(int value);
    [CompilerGeneratedAttribute]
public int get_OldVariableCount();
    [CompilerGeneratedAttribute]
public void set_OldVariableCount(int value);
    [CompilerGeneratedAttribute]
public int get_NewPrivateVariableCount();
    [CompilerGeneratedAttribute]
public void set_NewPrivateVariableCount(int value);
    [CompilerGeneratedAttribute]
public int get_OldPrivateVariableCount();
    [CompilerGeneratedAttribute]
public void set_OldPrivateVariableCount(int value);
    [CompilerGeneratedAttribute]
public int get_RuntimeDelegateArgumentCount();
    [CompilerGeneratedAttribute]
public void set_RuntimeDelegateArgumentCount(int value);
    internal IList`1<EnvironmentUpdateMapEntry> get_SerializedVariableEntries();
    internal void set_SerializedVariableEntries(IList`1<EnvironmentUpdateMapEntry> value);
    internal IList`1<EnvironmentUpdateMapEntry> get_SerializedPrivateVariableEntries();
    internal void set_SerializedPrivateVariableEntries(IList`1<EnvironmentUpdateMapEntry> value);
    internal IList`1<EnvironmentUpdateMapEntry> get_SerializedArgumentEntries();
    internal void set_SerializedArgumentEntries(IList`1<EnvironmentUpdateMapEntry> value);
    internal bool get_IsAdditionToNoSymbols();
    internal bool get_HasVariableEntries();
    internal bool get_HasPrivateVariableEntries();
    internal bool get_HasArgumentEntries();
    public IList`1<EnvironmentUpdateMapEntry> get_VariableEntries();
    public IList`1<EnvironmentUpdateMapEntry> get_PrivateVariableEntries();
    public IList`1<EnvironmentUpdateMapEntry> get_ArgumentEntries();
    internal static EnvironmentUpdateMap Merge(EnvironmentUpdateMap first, EnvironmentUpdateMap second, MergeErrorContext errorContext);
    internal Nullable`1<int> GetOldVariableIndex(int newIndex);
    internal Nullable`1<int> GetNewVariableIndex(int oldIndex);
    internal Nullable`1<int> GetNewPrivateVariableIndex(int oldIndex);
}
[DataContractAttribute]
internal class System.Activities.DynamicUpdate.EnvironmentUpdateMapEntry : object {
    internal static int NonExistent;
    [DataMemberAttribute]
public int OldOffset { get; public set; }
    [DataMemberAttribute]
public int NewOffset { get; public set; }
    [DataMemberAttribute]
public bool IsNewHandle { get; public set; }
    internal bool IsAddition { get; }
    [CompilerGeneratedAttribute]
public int get_OldOffset();
    [CompilerGeneratedAttribute]
public void set_OldOffset(int value);
    [CompilerGeneratedAttribute]
public int get_NewOffset();
    [CompilerGeneratedAttribute]
public void set_NewOffset(int value);
    [CompilerGeneratedAttribute]
public bool get_IsNewHandle();
    [CompilerGeneratedAttribute]
public void set_IsNewHandle(bool value);
    internal bool get_IsAddition();
    internal static EnvironmentUpdateMapEntry Merge(EnvironmentUpdateMapEntry first, EnvironmentUpdateMapEntry second);
}
internal interface System.Activities.DynamicUpdate.IInstanceUpdatable {
    public abstract virtual void InternalUpdateInstance(NativeActivityUpdateContext updateContext);
}
public class System.Activities.DynamicUpdate.InstanceUpdateException : Exception {
    public IList`1<ActivityBlockingUpdate> BlockingActivities { get; }
    public InstanceUpdateException(string message);
    public InstanceUpdateException(string message, Exception innerException);
    public InstanceUpdateException(IList`1<ActivityBlockingUpdate> blockingActivities);
    public InstanceUpdateException(string message, IList`1<ActivityBlockingUpdate> blockingActivities);
    public InstanceUpdateException(string message, IList`1<ActivityBlockingUpdate> blockingActivities, Exception innerException);
    protected InstanceUpdateException(SerializationInfo info, StreamingContext context);
    public IList`1<ActivityBlockingUpdate> get_BlockingActivities();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Activities.DynamicUpdate.NativeActivityUpdateContext : object {
    public string ActivityInstanceId { get; }
    public bool IsCancellationRequested { get; }
    public BookmarkScope DefaultBookmarkScope { get; }
    internal Activity CurrentActivity { get; }
    internal bool IsUpdateDisallowed { get; private set; }
    internal string DisallowedReason { get; private set; }
    internal NativeActivityUpdateContext(ActivityInstanceMap instanceMap, ActivityExecutor activityExecutor, ActivityInstance currentInstance, DynamicUpdateMap updateMap, DynamicUpdateMapEntry mapEntry, DynamicUpdateMap rootMap);
    public string get_ActivityInstanceId();
    public bool get_IsCancellationRequested();
    public BookmarkScope get_DefaultBookmarkScope();
    internal Activity get_CurrentActivity();
    [CompilerGeneratedAttribute]
internal bool get_IsUpdateDisallowed();
    [CompilerGeneratedAttribute]
private void set_IsUpdateDisallowed(bool value);
    [CompilerGeneratedAttribute]
internal string get_DisallowedReason();
    [CompilerGeneratedAttribute]
private void set_DisallowedReason(string value);
    public object FindExecutionProperty(string name);
    public void DisallowUpdate(string reason);
    public object GetSavedOriginalValue(Activity childActivity);
    public bool IsNewlyAdded(Activity childActivity);
    public object GetSavedOriginalValue(string propertyName);
    public object GetValue(Argument argument);
    public object GetValue(RuntimeArgument runtimeArgument);
    public void SetValue(Argument argument, object value);
    public T GetValue(Variable`1<T> variable);
    public object GetValue(Variable variable);
    public void SetValue(Variable`1<T> variable, T value);
    public void SetValue(Variable variable, object value);
    public Location`1<T> GetLocation(Variable variable);
    public Bookmark CreateBookmark(string name);
    public Bookmark CreateBookmark(string name, BookmarkCallback callback);
    public Bookmark CreateBookmark(string name, BookmarkCallback callback, BookmarkOptions options);
    public Bookmark CreateBookmark(string name, BookmarkCallback callback, BookmarkScope scope);
    public Bookmark CreateBookmark(string name, BookmarkCallback callback, BookmarkScope scope, BookmarkOptions options);
    public Bookmark CreateBookmark();
    public Bookmark CreateBookmark(BookmarkCallback callback);
    public Bookmark CreateBookmark(BookmarkCallback callback, BookmarkOptions options);
    public void RemoveAllBookmarks();
    public bool RemoveBookmark(string name);
    public bool RemoveBookmark(Bookmark bookmark);
    public bool RemoveBookmark(string name, BookmarkScope scope);
    public void ScheduleActivity(Activity activity);
    public void ScheduleActivity(Activity activity, CompletionCallback onCompleted);
    public void ScheduleActivity(Activity activity, FaultCallback onFaulted);
    public void ScheduleActivity(Activity activity, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleActivity(Activity`1<TResult> activity, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction activityAction, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`1<T> activityAction, T argument, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`2<T1, T2> activityAction, T1 argument1, T2 argument2, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`3<T1, T2, T3> activityAction, T1 argument1, T2 argument2, T3 argument3, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`4<T1, T2, T3, T4> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`5<T1, T2, T3, T4, T5> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`6<T1, T2, T3, T4, T5, T6> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`7<T1, T2, T3, T4, T5, T6, T7> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`8<T1, T2, T3, T4, T5, T6, T7, T8> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, T15 argument15, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleAction(ActivityAction`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, T15 argument15, T16 argument16, CompletionCallback onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`1<TResult> activityFunc, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`2<T, TResult> activityFunc, T argument, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`3<T1, T2, TResult> activityFunc, T1 argument1, T2 argument2, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`4<T1, T2, T3, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`5<T1, T2, T3, T4, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`6<T1, T2, T3, T4, T5, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`7<T1, T2, T3, T4, T5, T6, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`8<T1, T2, T3, T4, T5, T6, T7, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, T15 argument15, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleFunc(ActivityFunc`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, T15 argument15, T16 argument16, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public void ScheduleDelegate(ActivityDelegate activityDelegate, IDictionary`2<string, object> inputParameters, DelegateCompletionCallback onCompleted, FaultCallback onFaulted);
    internal void Dispose();
    internal void ThrowIfDisposed();
}
public class System.Activities.DynamicUpdate.NativeActivityUpdateMapMetadata : UpdateMapMetadata {
    internal NativeActivityUpdateMapMetadata(Finalizer finalizer, IDefinitionMatcher matcher, Activity targetActivity);
    public void SaveOriginalValue(Activity updatedChildActivity, object originalValue);
    public void SaveOriginalValue(string propertyName, object originalValue);
    internal static void ValidateOriginalValueAccess(Activity parent, Activity child, string paramName, Boolean& isReferencedChild);
}
internal enum System.Activities.DynamicUpdate.UpdateBlockedReason : Enum {
    public int value__;
    public static UpdateBlockedReason NotBlocked;
    public static UpdateBlockedReason Custom;
    public static UpdateBlockedReason TypeChange;
    public static UpdateBlockedReason PublicChildrenChange;
    public static UpdateBlockedReason InvalidImplementationMap;
    public static UpdateBlockedReason PrivateMembersHaveChanged;
    public static UpdateBlockedReason ChangeMatchesInImplementation;
    public static UpdateBlockedReason GeneratedAndProvidedMapConflict;
    public static UpdateBlockedReason SavedOriginalValuesForReferencedChildren;
    public static UpdateBlockedReason AddedIdleExpression;
    public static UpdateBlockedReason DelegateArgumentChange;
    public static UpdateBlockedReason DynamicArguments;
    public static UpdateBlockedReason NewHandle;
}
internal static class System.Activities.DynamicUpdate.UpdateBlockedReasonMessages : object {
    public static string Get(UpdateBlockedReason reason);
}
public class System.Activities.DynamicUpdate.UpdateMapMetadata : object {
    internal bool IsUpdateExplicitlyAllowedOrDisallowed { get; }
    internal Finalizer Finalizer { get; }
    internal Activity TargetActivity { get; }
    internal UpdateMapMetadata(Finalizer finalizer, IDefinitionMatcher matcher, Activity targetActivity);
    public void AllowUpdateInsideThisActivity();
    public void DisallowUpdateInsideThisActivity(string reason);
    public void AddMatch(Activity updatedChild, Activity originalChild);
    public void AddMatch(Variable updatedVariable, Variable originalVariable);
    public Activity GetMatch(Activity updatedChild);
    public Variable GetMatch(Variable updatedVariable);
    public bool IsReferenceToImportedChild(Activity childActivity);
    internal bool get_IsUpdateExplicitlyAllowedOrDisallowed();
    internal void Dispose();
    internal bool AreMatch(Activity updatedActivity, Activity originalActivity);
    internal bool AreMatch(ActivityDelegate updatedDelegate, ActivityDelegate originalDelegate);
    internal Finalizer get_Finalizer();
    internal Activity get_TargetActivity();
    internal void ThrowIfDisposed();
    internal static bool IsChild(Activity parent, Activity child, Boolean& isImport);
}
internal class System.Activities.EtwTrackingParticipantTrackRecords : object {
    internal static CultureInfo Culture { get; internal set; }
    private static EtwTrackingParticipantTrackRecords();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static bool ActivityScheduledRecordIsEnabled(EtwDiagnosticTrace trace);
    internal static bool ActivityScheduledRecord(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string Name, string ActivityId, string ActivityInstanceId, string ActivityTypeName, string ChildActivityName, string ChildActivityId, string ChildActivityInstanceId, string ChildActivityTypeName, string Annotations, string ProfileName, string reference);
    internal static bool ActivityStateRecordIsEnabled(EtwDiagnosticTrace trace);
    internal static bool ActivityStateRecord(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string State, string Name, string ActivityId, string ActivityInstanceId, string ActivityTypeName, string Arguments, string Variables, string Annotations, string ProfileName, string reference);
    internal static bool BookmarkResumptionRecordIsEnabled(EtwDiagnosticTrace trace);
    internal static bool BookmarkResumptionRecord(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string Name, Guid SubInstanceID, string OwnerActivityName, string OwnerActivityId, string OwnerActivityInstanceId, string OwnerActivityTypeName, string Annotations, string ProfileName, string reference);
    internal static bool CancelRequestedRecordIsEnabled(EtwDiagnosticTrace trace);
    internal static bool CancelRequestedRecord(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string Name, string ActivityId, string ActivityInstanceId, string ActivityTypeName, string ChildActivityName, string ChildActivityId, string ChildActivityInstanceId, string ChildActivityTypeName, string Annotations, string ProfileName, string reference);
    internal static bool FaultPropagationRecordIsEnabled(EtwDiagnosticTrace trace);
    internal static bool FaultPropagationRecord(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string FaultSourceActivityName, string FaultSourceActivityId, string FaultSourceActivityInstanceId, string FaultSourceActivityTypeName, string FaultHandlerActivityName, string FaultHandlerActivityId, string FaultHandlerActivityInstanceId, string FaultHandlerActivityTypeName, string Fault, bool IsFaultSource, string Annotations, string ProfileName, string reference);
    internal static bool CustomTrackingRecordInfoIsEnabled(EtwDiagnosticTrace trace);
    internal static bool CustomTrackingRecordInfo(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string Name, string ActivityName, string ActivityId, string ActivityInstanceId, string ActivityTypeName, string Data, string Annotations, string ProfileName, string reference);
    internal static bool CustomTrackingRecordErrorIsEnabled(EtwDiagnosticTrace trace);
    internal static bool CustomTrackingRecordError(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string Name, string ActivityName, string ActivityId, string ActivityInstanceId, string ActivityTypeName, string Data, string Annotations, string ProfileName, string reference);
    internal static bool CustomTrackingRecordWarningIsEnabled(EtwDiagnosticTrace trace);
    internal static bool CustomTrackingRecordWarning(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string Name, string ActivityName, string ActivityId, string ActivityInstanceId, string ActivityTypeName, string Data, string Annotations, string ProfileName, string reference);
    internal static bool WorkflowInstanceAbortedRecordIsEnabled(EtwDiagnosticTrace trace);
    internal static bool WorkflowInstanceAbortedRecord(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string ActivityDefinitionId, string Reason, string Annotations, string ProfileName, string reference);
    internal static bool WorkflowInstanceRecordIsEnabled(EtwDiagnosticTrace trace);
    internal static bool WorkflowInstanceRecord(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string ActivityDefinitionId, string State, string Annotations, string ProfileName, string reference);
    internal static bool WorkflowInstanceUnhandledExceptionRecordIsEnabled(EtwDiagnosticTrace trace);
    internal static bool WorkflowInstanceUnhandledExceptionRecord(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string ActivityDefinitionId, string SourceName, string SourceId, string SourceInstanceId, string SourceTypeName, string Exception, string Annotations, string ProfileName, string reference);
    internal static bool WorkflowInstanceSuspendedRecordIsEnabled(EtwDiagnosticTrace trace);
    internal static bool WorkflowInstanceSuspendedRecord(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string ActivityDefinitionId, string Reason, string Annotations, string ProfileName, string reference);
    internal static bool WorkflowInstanceTerminatedRecordIsEnabled(EtwDiagnosticTrace trace);
    internal static bool WorkflowInstanceTerminatedRecord(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string ActivityDefinitionId, string Reason, string Annotations, string ProfileName, string reference);
    internal static bool WorkflowInstanceRecordWithIdIsEnabled(EtwDiagnosticTrace trace);
    internal static bool WorkflowInstanceRecordWithId(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string ActivityDefinitionId, string State, string Annotations, string ProfileName, string WorkflowDefinitionIdentity, string reference);
    internal static bool WorkflowInstanceAbortedRecordWithIdIsEnabled(EtwDiagnosticTrace trace);
    internal static bool WorkflowInstanceAbortedRecordWithId(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string ActivityDefinitionId, string Reason, string Annotations, string ProfileName, string WorkflowDefinitionIdentity, string reference);
    internal static bool WorkflowInstanceSuspendedRecordWithIdIsEnabled(EtwDiagnosticTrace trace);
    internal static bool WorkflowInstanceSuspendedRecordWithId(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string ActivityDefinitionId, string Reason, string Annotations, string ProfileName, string WorkflowDefinitionIdentity, string reference);
    internal static bool WorkflowInstanceTerminatedRecordWithIdIsEnabled(EtwDiagnosticTrace trace);
    internal static bool WorkflowInstanceTerminatedRecordWithId(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string ActivityDefinitionId, string Reason, string Annotations, string ProfileName, string WorkflowDefinitionIdentity, string reference);
    internal static bool WorkflowInstanceUnhandledExceptionRecordWithIdIsEnabled(EtwDiagnosticTrace trace);
    internal static bool WorkflowInstanceUnhandledExceptionRecordWithId(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string ActivityDefinitionId, string SourceName, string SourceId, string SourceInstanceId, string SourceTypeName, string Exception, string Annotations, string ProfileName, string WorkflowDefinitionIdentity, string reference);
    internal static bool WorkflowInstanceUpdatedRecordIsEnabled(EtwDiagnosticTrace trace);
    internal static bool WorkflowInstanceUpdatedRecord(EtwDiagnosticTrace trace, EventTraceActivity eventTraceActivity, Guid InstanceId, long RecordNumber, long EventTime, string ActivityDefinitionId, string State, string OriginalDefinitionIdentity, string UpdatedDefinitionIdentity, string Annotations, string ProfileName, string reference);
}
public class System.Activities.ExceptionPersistenceExtension : object {
    public bool PersistExceptions { get; public set; }
    public bool get_PersistExceptions();
    public void set_PersistExceptions(bool value);
}
[DataContractAttribute]
public class System.Activities.ExclusiveHandle : Handle {
    public ReadOnlyCollection`1<BookmarkScopeHandle> RegisteredBookmarkScopes { get; }
    [DataMemberAttribute]
internal List`1<BookmarkScopeHandle> SerializedBookmarkScopes { get; internal set; }
    [DataMemberAttribute]
internal ActivityInstance SerializedOwningInstance { get; internal set; }
    [DataMemberAttribute]
internal ActivityExecutor SerializedExecutor { get; internal set; }
    [DataMemberAttribute]
internal ExclusiveHandleBookmarkList SerializedImportantBookmarks { get; internal set; }
    [DataMemberAttribute]
internal ExclusiveHandleBookmarkList SerializedUnimportantBookmarks { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedBookmarkScopesListIsDefault { get; internal set; }
    internal ExclusiveHandleBookmarkList ImportantBookmarks { get; internal set; }
    internal ExclusiveHandleBookmarkList UnimportantBookmarks { get; internal set; }
    public ReadOnlyCollection`1<BookmarkScopeHandle> get_RegisteredBookmarkScopes();
    internal List`1<BookmarkScopeHandle> get_SerializedBookmarkScopes();
    internal void set_SerializedBookmarkScopes(List`1<BookmarkScopeHandle> value);
    internal ActivityInstance get_SerializedOwningInstance();
    internal void set_SerializedOwningInstance(ActivityInstance value);
    internal ActivityExecutor get_SerializedExecutor();
    internal void set_SerializedExecutor(ActivityExecutor value);
    internal ExclusiveHandleBookmarkList get_SerializedImportantBookmarks();
    internal void set_SerializedImportantBookmarks(ExclusiveHandleBookmarkList value);
    internal ExclusiveHandleBookmarkList get_SerializedUnimportantBookmarks();
    internal void set_SerializedUnimportantBookmarks(ExclusiveHandleBookmarkList value);
    internal bool get_SerializedBookmarkScopesListIsDefault();
    internal void set_SerializedBookmarkScopesListIsDefault(bool value);
    public void RegisterBookmarkScope(NativeActivityContext context, BookmarkScopeHandle bookmarkScopeHandle);
    public void Reinitialize(NativeActivityContext context);
    protected virtual void OnInitialize(HandleInitializationContext context);
    internal ExclusiveHandleBookmarkList get_ImportantBookmarks();
    internal void set_ImportantBookmarks(ExclusiveHandleBookmarkList value);
    internal ExclusiveHandleBookmarkList get_UnimportantBookmarks();
    internal void set_UnimportantBookmarks(ExclusiveHandleBookmarkList value);
    internal void AddToImportantBookmarks(Bookmark bookmark);
    internal void AddToUnimportantBookmarks(Bookmark bookmark);
    internal void RemoveBookmark(Bookmark bookmark);
}
public class System.Activities.ExecutionProperties : object {
    public bool IsEmpty { get; }
    internal ExecutionProperties(ActivityContext currentContext, ActivityInstance scope, ExecutionPropertyManager properties);
    public bool get_IsEmpty();
    public void Add(string name, object property);
    public void Add(string name, object property, bool onlyVisibleToPublicChildren);
    internal void Add(string name, object property, bool skipValidations, bool onlyVisibleToPublicChildren);
    public bool Remove(string name);
    internal bool Remove(string name, bool skipValidations);
    public object Find(string name);
    internal object FindAtCurrentScope(string name);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Activities.ExpressionParser.SourceExpressionException : Exception {
    public IEnumerable`1<CompilerError> Errors { get; }
    public SourceExpressionException(string message);
    public SourceExpressionException(string message, Exception innerException);
    public SourceExpressionException(string message, CompilerErrorCollection errors);
    protected SourceExpressionException(SerializationInfo info, StreamingContext context);
    public IEnumerable`1<CompilerError> get_Errors();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Activities.Expressions.Add`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [DefaultValueAttribute("True")]
public bool Checked { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    public bool get_Checked();
    public void set_Checked(bool value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.And`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.AndAlso : Activity`1<bool> {
    [DefaultValueAttribute("")]
public Activity`1<bool> Left { get; public set; }
    [DefaultValueAttribute("")]
public Activity`1<bool> Right { get; public set; }
    [CompilerGeneratedAttribute]
public Activity`1<bool> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(Activity`1<bool> value);
    [CompilerGeneratedAttribute]
public Activity`1<bool> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(Activity`1<bool> value);
    protected virtual void OnCreateDynamicUpdateMap(UpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(ActivityMetadata metadata);
}
public class System.Activities.Expressions.ArgumentReference`1 : EnvironmentLocationReference`1<T> {
    public string ArgumentName { get; public set; }
    public LocationReference LocationReference { get; }
    public ArgumentReference`1(string argumentName);
    [CompilerGeneratedAttribute]
public string get_ArgumentName();
    [CompilerGeneratedAttribute]
public void set_ArgumentName(string value);
    public virtual LocationReference get_LocationReference();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    public virtual string ToString();
}
public class System.Activities.Expressions.ArgumentValue`1 : EnvironmentLocationValue`1<T> {
    public string ArgumentName { get; public set; }
    public LocationReference LocationReference { get; }
    public ArgumentValue`1(string argumentName);
    [CompilerGeneratedAttribute]
public string get_ArgumentName();
    [CompilerGeneratedAttribute]
public void set_ArgumentName(string value);
    public virtual LocationReference get_LocationReference();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    public virtual string ToString();
}
public class System.Activities.Expressions.ArrayItemReference`1 : CodeActivity`1<Location`1<TItem>> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TItem[]> Array { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<int> Index { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TItem[]> get_Array();
    [CompilerGeneratedAttribute]
public void set_Array(InArgument`1<TItem[]> value);
    [CompilerGeneratedAttribute]
public InArgument`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(InArgument`1<int> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual Location`1<TItem> Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.ArrayItemValue`1 : CodeActivity`1<TItem> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TItem[]> Array { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<int> Index { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TItem[]> get_Array();
    [CompilerGeneratedAttribute]
public void set_Array(InArgument`1<TItem[]> value);
    [CompilerGeneratedAttribute]
public InArgument`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(InArgument`1<int> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TItem Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.As`2 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TOperand> Operand { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TOperand> get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(InArgument`1<TOperand> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
internal class System.Activities.Expressions.AssemblyNameEqualityComparer : object {
    public sealed virtual bool Equals(object xparam, object yparam);
    public sealed virtual bool Equals(AssemblyName x, AssemblyName y);
    public sealed virtual int GetHashCode(object objparam);
    public sealed virtual int GetHashCode(AssemblyName obj);
    public static bool IsSameKeyToken(Byte[] reqKeyToken, Byte[] curKeyToken);
}
[TypeConverterAttribute("System.Activities.XamlIntegration.AssemblyReferenceConverter")]
public class System.Activities.Expressions.AssemblyReference : object {
    [DesignerSerializationVisibilityAttribute("0")]
public Assembly Assembly { get; public set; }
    public AssemblyName AssemblyName { get; public set; }
    internal AssemblyReference(Assembly assembly, AssemblyName assemblyName);
    private static AssemblyReference();
    public Assembly get_Assembly();
    public void set_Assembly(Assembly value);
    public AssemblyName get_AssemblyName();
    public void set_AssemblyName(AssemblyName value);
    public static AssemblyReference op_Implicit(Assembly assembly);
    public static AssemblyReference op_Implicit(AssemblyName assemblyName);
    public void LoadAssembly();
    internal static bool AssemblySatisfiesReference(AssemblyName assemblyName, AssemblyName reference);
    internal static Assembly GetAssembly(AssemblyName assemblyName);
    internal static AssemblyName GetFastAssemblyName(Assembly assembly);
}
internal static class System.Activities.Expressions.BinaryExpressionHelper : object {
    public static void OnGetArguments(CodeActivityMetadata metadata, InArgument`1<TLeft> left, InArgument`1<TRight> right);
    public static bool TryGenerateLinqDelegate(ExpressionType operatorType, Func`3& function, ValidationError& validationError);
}
public class System.Activities.Expressions.Cast`2 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TOperand> Operand { get; public set; }
    [DefaultValueAttribute("True")]
public bool Checked { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TOperand> get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(InArgument`1<TOperand> value);
    public bool get_Checked();
    public void set_Checked(bool value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.CompiledExpressionInvoker : object {
    public bool IsStaticallyCompiled { get; private set; }
    public CompiledExpressionInvoker(ITextExpression expression, bool isReference, CodeActivityMetadata metadata);
    private static CompiledExpressionInvoker();
    [CompilerGeneratedAttribute]
public bool get_IsStaticallyCompiled();
    [CompilerGeneratedAttribute]
private void set_IsStaticallyCompiled(bool value);
    public object InvokeExpression(ActivityContext activityContext);
    public static void SetCompiledExpressionRoot(object target, ICompiledExpressionRoot compiledExpressionRoot);
    public static object GetCompiledExpressionRoot(object target);
    public static void SetCompiledExpressionRootForImplementation(object target, ICompiledExpressionRoot compiledExpressionRoot);
    public static object GetCompiledExpressionRootForImplementation(object target);
    internal static bool TryGetCompiledExpressionRoot(Activity expression, Activity target, ICompiledExpressionRoot& compiledExpressionRoot);
    internal static bool TryGetCompiledExpressionRoot(Activity target, bool forImplementation, ICompiledExpressionRoot& compiledExpressionRoot);
    internal Expression GetExpressionTree();
}
[ContentPropertyAttribute("DelegateArgument")]
public class System.Activities.Expressions.DelegateArgumentReference`1 : EnvironmentLocationReference`1<T> {
    public DelegateArgument DelegateArgument { get; public set; }
    public LocationReference LocationReference { get; }
    public DelegateArgumentReference`1(DelegateArgument delegateArgument);
    [CompilerGeneratedAttribute]
public DelegateArgument get_DelegateArgument();
    [CompilerGeneratedAttribute]
public void set_DelegateArgument(DelegateArgument value);
    public virtual LocationReference get_LocationReference();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
}
[ContentPropertyAttribute("DelegateArgument")]
public class System.Activities.Expressions.DelegateArgumentValue`1 : EnvironmentLocationValue`1<T> {
    public DelegateArgument DelegateArgument { get; public set; }
    public LocationReference LocationReference { get; }
    public DelegateArgumentValue`1(DelegateArgument delegateArgument);
    [CompilerGeneratedAttribute]
public DelegateArgument get_DelegateArgument();
    [CompilerGeneratedAttribute]
public void set_DelegateArgument(DelegateArgument value);
    public virtual LocationReference get_LocationReference();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
}
public class System.Activities.Expressions.Divide`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.EnvironmentLocationReference`1 : CodeActivity`1<Location`1<T>> {
    public LocationReference LocationReference { get; }
    internal EnvironmentLocationReference`1(LocationReference locationReference);
    public virtual LocationReference get_LocationReference();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected sealed virtual Location`1<T> Execute(CodeActivityContext context);
    private sealed virtual override ActivityWithResult System.Activities.Expressions.ILocationReferenceExpression.CreateNewInstance(LocationReference locationReference);
}
public class System.Activities.Expressions.EnvironmentLocationValue`1 : CodeActivity`1<T> {
    public LocationReference LocationReference { get; }
    internal EnvironmentLocationValue`1(LocationReference locationReference);
    public virtual LocationReference get_LocationReference();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual T Execute(CodeActivityContext context);
    private sealed virtual override ActivityWithResult System.Activities.Expressions.ILocationReferenceExpression.CreateNewInstance(LocationReference locationReference);
}
public class System.Activities.Expressions.Equal`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public static class System.Activities.Expressions.ExpressionServices : object {
    private static ExpressionServices();
    public static Activity`1<TResult> Convert(Expression`1<Func`2<ActivityContext, TResult>> expression);
    public static bool TryConvert(Expression`1<Func`2<ActivityContext, TResult>> expression, Activity`1& result);
    public static Activity`1<Location`1<TResult>> ConvertReference(Expression`1<Func`2<ActivityContext, TResult>> expression);
    public static bool TryConvertReference(Expression`1<Func`2<ActivityContext, TResult>> expression, Activity`1& result);
}
public class System.Activities.Expressions.FieldReference`2 : CodeActivity`1<Location`1<TResult>> {
    [DefaultValueAttribute("")]
public string FieldName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<TOperand> Operand { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public InArgument`1<TOperand> get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(InArgument`1<TOperand> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual Location`1<TResult> Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.FieldValue`2 : CodeActivity`1<TResult> {
    [DefaultValueAttribute("")]
public string FieldName { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<TOperand> Operand { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public InArgument`1<TOperand> get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(InArgument`1<TOperand> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.GreaterThan`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.GreaterThanOrEqual`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
internal interface System.Activities.Expressions.ILocationReferenceExpression {
    public abstract virtual ActivityWithResult CreateNewInstance(LocationReference locationReference);
}
internal interface System.Activities.Expressions.ILocationReferenceWrapper {
    public LocationReference LocationReference { get; }
    public abstract virtual LocationReference get_LocationReference();
}
internal static class System.Activities.Expressions.IndexerHelper : object {
    public static void OnGetArguments(Collection`1<InArgument> indices, OutArgument`1<Location`1<TItem>> result, CodeActivityMetadata metadata);
    public static void CacheMethod(Collection`1<InArgument> indices, MethodInfo& getMethod, MethodInfo& setMethod);
}
[ContentPropertyAttribute("Indices")]
public class System.Activities.Expressions.IndexerReference`2 : CodeActivity`1<Location`1<TItem>> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TOperand> Operand { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public Collection`1<InArgument> Indices { get; }
    private static IndexerReference`2();
    [CompilerGeneratedAttribute]
public InArgument`1<TOperand> get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(InArgument`1<TOperand> value);
    public Collection`1<InArgument> get_Indices();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual Location`1<TItem> Execute(CodeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`1 : NativeActivity`1<TResult> {
    [DefaultValueAttribute("")]
public ActivityFunc`1<TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public ActivityFunc`1<TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`1<TResult> value);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`10 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`11 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`12 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`13 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T12> Argument12 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(InArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`14 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T12> Argument12 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T13> Argument13 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(InArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(InArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`15 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T12> Argument12 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T13> Argument13 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T14> Argument14 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(InArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(InArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(InArgument`1<T14> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`16 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T12> Argument12 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T13> Argument13 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T14> Argument14 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T15> Argument15 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(InArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(InArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(InArgument`1<T14> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T15> get_Argument15();
    [CompilerGeneratedAttribute]
public void set_Argument15(InArgument`1<T15> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`17 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T12> Argument12 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T13> Argument13 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T14> Argument14 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T15> Argument15 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T16> Argument16 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(InArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(InArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(InArgument`1<T14> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T15> get_Argument15();
    [CompilerGeneratedAttribute]
public void set_Argument15(InArgument`1<T15> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T16> get_Argument16();
    [CompilerGeneratedAttribute]
public void set_Argument16(InArgument`1<T16> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`2 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T> Argument { get; public set; }
    public ActivityFunc`2<T, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T> get_Argument();
    [CompilerGeneratedAttribute]
public void set_Argument(InArgument`1<T> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`2<T, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`2<T, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`3 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`3<T1, T2, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`3<T1, T2, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`3<T1, T2, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`4 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`4<T1, T2, T3, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`4<T1, T2, T3, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`4<T1, T2, T3, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`5 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`5<T1, T2, T3, T4, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`5<T1, T2, T3, T4, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`5<T1, T2, T3, T4, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`6 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`6<T1, T2, T3, T4, T5, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`6<T1, T2, T3, T4, T5, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`6<T1, T2, T3, T4, T5, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`7 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`7<T1, T2, T3, T4, T5, T6, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`7<T1, T2, T3, T4, T5, T6, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`7<T1, T2, T3, T4, T5, T6, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`8 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`8<T1, T2, T3, T4, T5, T6, T7, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`8<T1, T2, T3, T4, T5, T6, T7, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`8<T1, T2, T3, T4, T5, T6, T7, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Func")]
public class System.Activities.Expressions.InvokeFunc`9 : NativeActivity`1<TResult> {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityFunc`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Func { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public ActivityFunc`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> get_Func();
    [CompilerGeneratedAttribute]
public void set_Func(ActivityFunc`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Parameters")]
public class System.Activities.Expressions.InvokeMethod`1 : AsyncCodeActivity`1<TResult> {
    public Collection`1<Type> GenericTypeArguments { get; }
    public string MethodName { get; public set; }
    public Collection`1<Argument> Parameters { get; }
    [DefaultValueAttribute("")]
public InArgument TargetObject { get; public set; }
    [DefaultValueAttribute("")]
public Type TargetType { get; public set; }
    [DefaultValueAttribute("False")]
public bool RunAsynchronously { get; public set; }
    private static InvokeMethod`1();
    public Collection`1<Type> get_GenericTypeArguments();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    public Collection`1<Argument> get_Parameters();
    [CompilerGeneratedAttribute]
public InArgument get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(InArgument value);
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
public void set_TargetType(Type value);
    [CompilerGeneratedAttribute]
public bool get_RunAsynchronously();
    [CompilerGeneratedAttribute]
public void set_RunAsynchronously(bool value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual IAsyncResult BeginExecute(AsyncCodeActivityContext context, AsyncCallback callback, object state);
    protected virtual TResult EndExecute(AsyncCodeActivityContext context, IAsyncResult result);
}
public interface System.Activities.Expressions.ITextExpression {
    public string ExpressionText { get; }
    public string Language { get; }
    public bool RequiresCompilation { get; }
    public abstract virtual string get_ExpressionText();
    public abstract virtual string get_Language();
    public abstract virtual bool get_RequiresCompilation();
    public abstract virtual Expression GetExpressionTree();
}
[DebuggerStepThroughAttribute]
public class System.Activities.Expressions.LambdaReference`1 : CodeActivity`1<Location`1<T>> {
    internal Expression LambdaExpression { get; }
    public LambdaReference`1(Expression`1<Func`2<ActivityContext, T>> locationExpression);
    internal Expression get_LambdaExpression();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual Location`1<T> Execute(CodeActivityContext context);
    public sealed virtual bool CanConvertToString(IValueSerializerContext context);
    public sealed virtual string ConvertToString(IValueSerializerContext context);
}
public class System.Activities.Expressions.LambdaSerializationException : Exception {
    public LambdaSerializationException(string message);
    public LambdaSerializationException(string message, Exception innerException);
    protected LambdaSerializationException(SerializationInfo info, StreamingContext context);
}
[DebuggerStepThroughAttribute]
public class System.Activities.Expressions.LambdaValue`1 : CodeActivity`1<TResult> {
    internal Expression LambdaExpression { get; }
    public LambdaValue`1(Expression`1<Func`2<ActivityContext, TResult>> lambdaValue);
    internal Expression get_LambdaExpression();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
    public sealed virtual bool CanConvertToString(IValueSerializerContext context);
    public sealed virtual string ConvertToString(IValueSerializerContext context);
}
public class System.Activities.Expressions.LessThan`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.LessThanOrEqual`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
[DebuggerStepThroughAttribute]
[ContentPropertyAttribute("Value")]
public class System.Activities.Expressions.Literal`1 : CodeActivity`1<T> {
    public T Value { get; public set; }
    public Literal`1(T value);
    private static Literal`1();
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(T value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual T Execute(CodeActivityContext context);
    public virtual string ToString();
    public sealed virtual bool CanConvertToString(IValueSerializerContext context);
    public sealed virtual string ConvertToString(IValueSerializerContext context);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeValue();
}
internal class System.Activities.Expressions.LocationReferenceValue`1 : CodeActivity`1<T> {
    private LocationReference System.Activities.Expressions.ILocationReferenceWrapper.LocationReference { get; }
    internal LocationReferenceValue`1(LocationReference locationReference);
    private sealed virtual override LocationReference System.Activities.Expressions.ILocationReferenceWrapper.get_LocationReference();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual T Execute(CodeActivityContext context);
    private sealed virtual override ActivityWithResult System.Activities.Expressions.ILocationReferenceExpression.CreateNewInstance(LocationReference locationReference);
}
internal static class System.Activities.Expressions.MemberExpressionHelper : object {
    public static void AddOperandArgument(CodeActivityMetadata metadata, InArgument`1<TOperand> operand, bool isRequired);
    public static void AddOperandLocationArgument(CodeActivityMetadata metadata, InOutArgument`1<TOperand> operandLocation, bool isRequired);
    public static bool TryGenerateLinqDelegate(string memberName, bool isField, bool isStatic, Func`2& operation, ValidationError& validationError);
}
internal static class System.Activities.Expressions.MethodCallExpressionHelper : object {
    public static int FuncCacheCapacity;
    internal static bool NeedRetrieve(MethodBase newMethod, MethodBase oldMethod, Delegate func);
    internal static Func`3<object, Object[], object> GetFunc(CodeActivityMetadata metadata, MethodInfo methodInfo, MruCache`2<MethodInfo, Func`3<object, Object[], object>> cache, ReaderWriterLockSlim locker, bool valueTypeReference);
    internal static Func`2<Object[], TResult> GetFunc(CodeActivityMetadata metadata, ConstructorInfo constructorInfo, MruCache`2<ConstructorInfo, Func`2<Object[], TResult>> cache, ReaderWriterLockSlim locker);
}
[ContentPropertyAttribute("Indices")]
public class System.Activities.Expressions.MultidimensionalArrayItemReference`1 : CodeActivity`1<Location`1<TItem>> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<Array> Array { get; public set; }
    [DefaultValueAttribute("")]
public Collection`1<InArgument`1<int>> Indices { get; }
    [CompilerGeneratedAttribute]
public InArgument`1<Array> get_Array();
    [CompilerGeneratedAttribute]
public void set_Array(InArgument`1<Array> value);
    public Collection`1<InArgument`1<int>> get_Indices();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual Location`1<TItem> Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.Multiply`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [DefaultValueAttribute("True")]
public bool Checked { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    public bool get_Checked();
    public void set_Checked(bool value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
[ContentPropertyAttribute("Arguments")]
public class System.Activities.Expressions.New`1 : CodeActivity`1<TResult> {
    public Collection`1<Argument> Arguments { get; }
    private static New`1();
    public Collection`1<Argument> get_Arguments();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
[ContentPropertyAttribute("Bounds")]
public class System.Activities.Expressions.NewArray`1 : CodeActivity`1<TResult> {
    public Collection`1<Argument> Bounds { get; }
    public Collection`1<Argument> get_Bounds();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.Not`2 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TOperand> Operand { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TOperand> get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(InArgument`1<TOperand> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.NotEqual`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
internal static class System.Activities.Expressions.OperatorPermissionHelper : object {
    internal static Expression InjectReflectionPermissionIfNecessary(MethodInfo method, Expression expression);
}
public class System.Activities.Expressions.Or`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.OrElse : Activity`1<bool> {
    [DefaultValueAttribute("")]
public Activity`1<bool> Left { get; public set; }
    [DefaultValueAttribute("")]
public Activity`1<bool> Right { get; public set; }
    [CompilerGeneratedAttribute]
public Activity`1<bool> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(Activity`1<bool> value);
    [CompilerGeneratedAttribute]
public Activity`1<bool> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(Activity`1<bool> value);
    protected virtual void OnCreateDynamicUpdateMap(UpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(ActivityMetadata metadata);
}
public class System.Activities.Expressions.PropertyReference`2 : CodeActivity`1<Location`1<TResult>> {
    [DefaultValueAttribute("")]
public string PropertyName { get; public set; }
    public InArgument`1<TOperand> Operand { get; public set; }
    private static PropertyReference`2();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public InArgument`1<TOperand> get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(InArgument`1<TOperand> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual Location`1<TResult> Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.PropertyValue`2 : CodeActivity`1<TResult> {
    public InArgument`1<TOperand> Operand { get; public set; }
    [DefaultValueAttribute("")]
public string PropertyName { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TOperand> get_Operand();
    [CompilerGeneratedAttribute]
public void set_Operand(InArgument`1<TOperand> value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.Subtract`3 : CodeActivity`1<TResult> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TLeft> Left { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TRight> Right { get; public set; }
    [DefaultValueAttribute("True")]
public bool Checked { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TLeft> get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(InArgument`1<TLeft> value);
    [CompilerGeneratedAttribute]
public InArgument`1<TRight> get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(InArgument`1<TRight> value);
    public bool get_Checked();
    public void set_Checked(bool value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual TResult Execute(CodeActivityContext context);
}
public static class System.Activities.Expressions.TextExpression : object {
    public static IList`1<string> DefaultNamespaces { get; }
    public static IList`1<AssemblyReference> DefaultReferences { get; }
    private static TextExpression();
    public static IList`1<string> get_DefaultNamespaces();
    public static IList`1<AssemblyReference> get_DefaultReferences();
    public static IList`1<string> GetNamespacesInScope(Activity activity);
    public static IList`1<string> GetNamespaces(object target);
    public static void SetNamespaces(object target, IList`1<string> namespaces);
    public static void SetNamespaces(object target, String[] namespaces);
    public static bool ShouldSerializeNamespaces(object target);
    public static IList`1<string> GetNamespacesForImplementation(object target);
    public static void SetNamespacesForImplementation(object target, IList`1<string> namespaces);
    public static void SetNamespacesForImplementation(object target, String[] namespaces);
    public static bool ShouldSerializeNamespacesForImplementation(object target);
    public static IList`1<AssemblyReference> GetReferencesInScope(Activity activity);
    public static IList`1<AssemblyReference> GetReferences(object target);
    public static void SetReferences(object target, IList`1<AssemblyReference> references);
    public static void SetReferences(object target, AssemblyReference[] references);
    public static bool ShouldSerializeReferences(object target);
    public static IList`1<AssemblyReference> GetReferencesForImplementation(object target);
    public static void SetReferencesForImplementation(object target, IList`1<AssemblyReference> references);
    public static void SetReferencesForImplementation(object target, AssemblyReference[] references);
    public static bool ShouldSerializeReferencesForImplementation(object target);
    internal static bool LanguagesAreEqual(string left, string right);
}
internal static class System.Activities.Expressions.UnaryExpressionHelper : object {
    public static void OnGetArguments(CodeActivityMetadata metadata, InArgument`1<TOperand> operand);
    public static bool TryGenerateLinqDelegate(ExpressionType operatorType, Func`2& operation, ValidationError& validationError);
}
public class System.Activities.Expressions.ValueTypeFieldReference`2 : CodeActivity`1<Location`1<TResult>> {
    [DefaultValueAttribute("")]
public string FieldName { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<TOperand> OperandLocation { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FieldName();
    [CompilerGeneratedAttribute]
public void set_FieldName(string value);
    [CompilerGeneratedAttribute]
public InOutArgument`1<TOperand> get_OperandLocation();
    [CompilerGeneratedAttribute]
public void set_OperandLocation(InOutArgument`1<TOperand> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual Location`1<TResult> Execute(CodeActivityContext context);
}
[ContentPropertyAttribute("Indices")]
public class System.Activities.Expressions.ValueTypeIndexerReference`2 : CodeActivity`1<Location`1<TItem>> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InOutArgument`1<TOperand> OperandLocation { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public Collection`1<InArgument> Indices { get; }
    private static ValueTypeIndexerReference`2();
    [CompilerGeneratedAttribute]
public InOutArgument`1<TOperand> get_OperandLocation();
    [CompilerGeneratedAttribute]
public void set_OperandLocation(InOutArgument`1<TOperand> value);
    public Collection`1<InArgument> get_Indices();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual Location`1<TItem> Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.ValueTypePropertyReference`2 : CodeActivity`1<Location`1<TResult>> {
    [DefaultValueAttribute("")]
public string PropertyName { get; public set; }
    [DefaultValueAttribute("")]
public InOutArgument`1<TOperand> OperandLocation { get; public set; }
    private static ValueTypePropertyReference`2();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public InOutArgument`1<TOperand> get_OperandLocation();
    [CompilerGeneratedAttribute]
public void set_OperandLocation(InOutArgument`1<TOperand> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual Location`1<TResult> Execute(CodeActivityContext context);
}
public class System.Activities.Expressions.VariableReference`1 : EnvironmentLocationReference`1<T> {
    public Variable Variable { get; public set; }
    public LocationReference LocationReference { get; }
    public VariableReference`1(Variable variable);
    [CompilerGeneratedAttribute]
public Variable get_Variable();
    [CompilerGeneratedAttribute]
public void set_Variable(Variable value);
    public virtual LocationReference get_LocationReference();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    public virtual string ToString();
}
public class System.Activities.Expressions.VariableValue`1 : EnvironmentLocationValue`1<T> {
    public Variable Variable { get; public set; }
    public LocationReference LocationReference { get; }
    public VariableValue`1(Variable variable);
    [CompilerGeneratedAttribute]
public Variable get_Variable();
    [CompilerGeneratedAttribute]
public void set_Variable(Variable value);
    public virtual LocationReference get_LocationReference();
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    public virtual string ToString();
}
internal static class System.Activities.ExpressionUtilities : object {
    public static ParameterExpression RuntimeContextParameter;
    private static ExpressionUtilities();
    public static Expression CreateIdentifierExpression(LocationReference locationReference);
    public static bool IsLocation(LambdaExpression expression, Type targetType, String& extraErrorMessage);
    public static LocationFactory`1<T> CreateLocationFactory(LambdaExpression expression);
    internal static bool TryGetInlinedReference(CodeActivityPublicEnvironmentAccessor publicAccessor, LocationReference originalReference, bool isLocationExpression, LocationReference& inlinedReference);
    public static bool TryRewriteLambdaExpression(Expression expression, Expression& newExpression, CodeActivityPublicEnvironmentAccessor publicAccessor, bool isLocationExpression);
    internal static Expression RewriteNonCompiledExpressionTree(LambdaExpression originalLambdaExpression);
}
public class System.Activities.FaultCallback : MulticastDelegate {
    public FaultCallback(object object, IntPtr method);
    public virtual void Invoke(NativeActivityFaultContext faultContext, Exception propagatedException, ActivityInstance propagatedFrom);
    public virtual IAsyncResult BeginInvoke(NativeActivityFaultContext faultContext, Exception propagatedException, ActivityInstance propagatedFrom, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class System.Activities.FxTrace : object {
    public static bool ShouldTraceCritical { get; }
    public static bool TracingEnabled { get; }
    public static bool ShouldTraceError { get; }
    public static bool ShouldTraceInformation { get; }
    public static bool ShouldTraceVerbose { get; }
    public static bool ShouldTraceWarning { get; }
    public static bool ShouldTraceCriticalToTraceSource { get; }
    public static bool ShouldTraceErrorToTraceSource { get; }
    public static bool ShouldTraceInformationToTraceSource { get; }
    public static bool ShouldTraceVerboseToTraceSource { get; }
    public static bool ShouldTraceWarningToTraceSource { get; }
    public static ExceptionTrace Exception { get; }
    public static EtwDiagnosticTrace Trace { get; }
    public static EventLogger EventLog { get; }
    private static FxTrace();
    [SecuritySafeCriticalAttribute]
public static void UpdateEventDefinitions(EventDescriptor[] eventDescriptors, UInt16[] end2EndEvents);
    public static bool IsEventEnabled(int index);
    public static bool get_ShouldTraceCritical();
    public static bool get_TracingEnabled();
    public static bool get_ShouldTraceError();
    public static bool get_ShouldTraceInformation();
    public static bool get_ShouldTraceVerbose();
    public static bool get_ShouldTraceWarning();
    public static bool get_ShouldTraceCriticalToTraceSource();
    public static bool get_ShouldTraceErrorToTraceSource();
    public static bool get_ShouldTraceInformationToTraceSource();
    public static bool get_ShouldTraceVerboseToTraceSource();
    public static bool get_ShouldTraceWarningToTraceSource();
    public static ExceptionTrace get_Exception();
    public static EtwDiagnosticTrace get_Trace();
    public static EventLogger get_EventLog();
}
[DataContractAttribute]
public abstract class System.Activities.Handle : object {
    public ActivityInstance Owner { get; }
    public string ExecutionPropertyName { get; }
    [DataMemberAttribute]
internal ActivityInstance SerializedOwner { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedIsUninitialized { get; internal set; }
    [DataMemberAttribute]
internal bool CanBeRemovedWithExecutingChildren { get; internal set; }
    internal bool IsInitialized { get; }
    public ActivityInstance get_Owner();
    public string get_ExecutionPropertyName();
    internal ActivityInstance get_SerializedOwner();
    internal void set_SerializedOwner(ActivityInstance value);
    internal bool get_SerializedIsUninitialized();
    internal void set_SerializedIsUninitialized(bool value);
    [CompilerGeneratedAttribute]
internal bool get_CanBeRemovedWithExecutingChildren();
    [CompilerGeneratedAttribute]
internal void set_CanBeRemovedWithExecutingChildren(bool value);
    internal bool get_IsInitialized();
    internal static string GetPropertyName(Type handleType);
    internal void Initialize(HandleInitializationContext context);
    internal void Reinitialize(ActivityInstance owner);
    internal void Uninitialize(HandleInitializationContext context);
    protected virtual void OnInitialize(HandleInitializationContext context);
    protected virtual void OnUninitialize(HandleInitializationContext context);
    protected void ThrowIfUninitialized();
}
public class System.Activities.HandleInitializationContext : object {
    internal ActivityInstance OwningActivityInstance { get; }
    internal ActivityExecutor Executor { get; }
    internal HandleInitializationContext(ActivityExecutor executor, ActivityInstance scope);
    internal ActivityInstance get_OwningActivityInstance();
    internal ActivityExecutor get_Executor();
    public THandle CreateAndInitializeHandle();
    public T GetExtension();
    public void UninitializeHandle(Handle handle);
    internal object CreateAndInitializeHandle(Type handleType);
    internal BookmarkScope CreateAndRegisterBookmarkScope();
    internal void UnregisterBookmarkScope(BookmarkScope bookmarkScope);
    internal void Dispose();
}
[DataContractAttribute]
public class System.Activities.Hosting.BookmarkInfo : object {
    public string BookmarkName { get; private set; }
    public string OwnerDisplayName { get; private set; }
    public BookmarkScopeInfo ScopeInfo { get; private set; }
    [DataMemberAttribute]
internal string SerializedBookmarkName { get; internal set; }
    [DataMemberAttribute]
internal string SerializedOwnerDisplayName { get; internal set; }
    [DataMemberAttribute]
internal BookmarkScopeInfo SerializedScopeInfo { get; internal set; }
    internal BookmarkInfo(string bookmarkName, string ownerDisplayName, BookmarkScopeInfo scopeInfo);
    public string get_BookmarkName();
    private void set_BookmarkName(string value);
    public string get_OwnerDisplayName();
    private void set_OwnerDisplayName(string value);
    public BookmarkScopeInfo get_ScopeInfo();
    private void set_ScopeInfo(BookmarkScopeInfo value);
    internal string get_SerializedBookmarkName();
    internal void set_SerializedBookmarkName(string value);
    internal string get_SerializedOwnerDisplayName();
    internal void set_SerializedOwnerDisplayName(string value);
    internal BookmarkScopeInfo get_SerializedScopeInfo();
    internal void set_SerializedScopeInfo(BookmarkScopeInfo value);
}
[DataContractAttribute]
public class System.Activities.Hosting.BookmarkScopeInfo : object {
    public bool IsInitialized { get; }
    public Guid Id { get; private set; }
    public string TemporaryId { get; private set; }
    [DataMemberAttribute]
internal Guid SerializedId { get; internal set; }
    [DataMemberAttribute]
internal string SerializedTemporaryId { get; internal set; }
    internal BookmarkScopeInfo(Guid id);
    internal BookmarkScopeInfo(string temporaryId);
    public bool get_IsInitialized();
    public Guid get_Id();
    private void set_Id(Guid value);
    public string get_TemporaryId();
    private void set_TemporaryId(string value);
    internal Guid get_SerializedId();
    internal void set_SerializedId(Guid value);
    internal string get_SerializedTemporaryId();
    internal void set_SerializedTemporaryId(string value);
}
public interface System.Activities.Hosting.IWorkflowInstanceExtension {
    public abstract virtual IEnumerable`1<object> GetAdditionalExtensions();
    public abstract virtual void SetInstance(WorkflowInstanceProxy instance);
}
[DataContractAttribute]
public class System.Activities.Hosting.LocationInfo : object {
    public string Name { get; private set; }
    public string OwnerDisplayName { get; private set; }
    public object Value { get; private set; }
    [DataMemberAttribute]
internal string SerializedName { get; internal set; }
    [DataMemberAttribute]
internal string SerializedOwnerDisplayName { get; internal set; }
    [DataMemberAttribute]
internal object SerializedValue { get; internal set; }
    internal LocationInfo(string name, string ownerDisplayName, object value);
    public string get_Name();
    private void set_Name(string value);
    public string get_OwnerDisplayName();
    private void set_OwnerDisplayName(string value);
    public object get_Value();
    private void set_Value(object value);
    internal string get_SerializedName();
    internal void set_SerializedName(string value);
    internal string get_SerializedOwnerDisplayName();
    internal void set_SerializedOwnerDisplayName(string value);
    internal object get_SerializedValue();
    internal void set_SerializedValue(object value);
}
[DefaultMemberAttribute("Item")]
public class System.Activities.Hosting.SymbolResolver : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<object> Values { get; }
    public object Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<string> get_Keys();
    public sealed virtual ICollection`1<object> get_Values();
    public sealed virtual object get_Item(string key);
    public sealed virtual void set_Item(string key, object value);
    public sealed virtual void Add(string key, object value);
    public void Add(string key, Type type);
    public void Add(string key, object value, Type type);
    public sealed virtual void Add(KeyValuePair`2<string, object> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<string, object> item);
    public sealed virtual bool ContainsKey(string key);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    [IteratorStateMachineAttribute("System.Activities.Hosting.SymbolResolver/<GetEnumerator>d__22")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    [IteratorStateMachineAttribute("System.Activities.Hosting.SymbolResolver/<GetLocationReferenceEnumerator>d__23")]
internal IEnumerable`1<KeyValuePair`2<string, LocationReference>> GetLocationReferenceEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Remove(string key);
    public sealed virtual bool Remove(KeyValuePair`2<string, object> item);
    public sealed virtual bool TryGetValue(string key, Object& value);
    internal bool TryGetLocationReference(string name, LocationReference& result);
    internal bool IsVisible(LocationReference locationReference);
    public LocationReferenceEnvironment AsLocationReferenceEnvironment();
}
public abstract class System.Activities.Hosting.WorkflowInstance : object {
    public Guid Id { get; }
    internal bool HasTrackingParticipant { get; private set; }
    internal bool HasTrackedStarted { get; private set; }
    internal bool HasPersistenceModule { get; private set; }
    public SynchronizationContext SynchronizationContext { get; public set; }
    public LocationReferenceEnvironment HostEnvironment { get; public set; }
    public Activity WorkflowDefinition { get; private set; }
    public WorkflowIdentity DefinitionIdentity { get; private set; }
    protected bool IsReadOnly { get; }
    protected internal bool SupportsInstanceKeys { get; }
    internal TrackingProvider TrackingProvider { get; }
    protected WorkflowInstanceControl Controller { get; }
    private static WorkflowInstance();
    protected WorkflowInstance(Activity workflowDefinition);
    protected WorkflowInstance(Activity workflowDefinition, WorkflowIdentity definitionIdentity);
    public abstract virtual Guid get_Id();
    [CompilerGeneratedAttribute]
internal bool get_HasTrackingParticipant();
    [CompilerGeneratedAttribute]
private void set_HasTrackingParticipant(bool value);
    [CompilerGeneratedAttribute]
internal bool get_HasTrackedStarted();
    [CompilerGeneratedAttribute]
private void set_HasTrackedStarted(bool value);
    [CompilerGeneratedAttribute]
internal bool get_HasPersistenceModule();
    [CompilerGeneratedAttribute]
private void set_HasPersistenceModule(bool value);
    public SynchronizationContext get_SynchronizationContext();
    public void set_SynchronizationContext(SynchronizationContext value);
    public LocationReferenceEnvironment get_HostEnvironment();
    public void set_HostEnvironment(LocationReferenceEnvironment value);
    [CompilerGeneratedAttribute]
public Activity get_WorkflowDefinition();
    [CompilerGeneratedAttribute]
private void set_WorkflowDefinition(Activity value);
    [CompilerGeneratedAttribute]
public WorkflowIdentity get_DefinitionIdentity();
    [CompilerGeneratedAttribute]
private void set_DefinitionIdentity(WorkflowIdentity value);
    protected bool get_IsReadOnly();
    protected internal abstract virtual bool get_SupportsInstanceKeys();
    internal TrackingProvider get_TrackingProvider();
    protected WorkflowInstanceControl get_Controller();
    protected internal T GetExtension();
    protected internal IEnumerable`1<T> GetExtensions();
    protected void RegisterExtensionManager(WorkflowInstanceExtensionManager extensionManager);
    protected void DisposeExtensions();
    protected static IList`1<ActivityBlockingUpdate> GetActivitiesBlockingUpdate(object deserializedRuntimeState, DynamicUpdateMap updateMap);
    protected void Initialize(IDictionary`2<string, object> workflowArgumentValues, IList`1<Handle> workflowExecutionProperties);
    protected void Initialize(object deserializedRuntimeState);
    protected void Initialize(object deserializedRuntimeState, DynamicUpdateMap updateMap);
    protected void ThrowIfReadOnly();
    protected internal abstract virtual IAsyncResult OnBeginResumeBookmark(Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);
    protected internal abstract virtual BookmarkResumptionResult OnEndResumeBookmark(IAsyncResult result);
    protected internal abstract virtual IAsyncResult OnBeginPersist(AsyncCallback callback, object state);
    protected internal abstract virtual void OnEndPersist(IAsyncResult result);
    protected internal abstract virtual void OnDisassociateKeys(ICollection`1<InstanceKey> keys);
    protected internal abstract virtual IAsyncResult OnBeginAssociateKeys(ICollection`1<InstanceKey> keys, AsyncCallback callback, object state);
    protected internal abstract virtual void OnEndAssociateKeys(IAsyncResult result);
    internal IAsyncResult BeginFlushTrackingRecordsInternal(AsyncCallback callback, object state);
    internal void EndFlushTrackingRecordsInternal(IAsyncResult result);
    protected void FlushTrackingRecords(TimeSpan timeout);
    protected IAsyncResult BeginFlushTrackingRecords(TimeSpan timeout, AsyncCallback callback, object state);
    protected void EndFlushTrackingRecords(IAsyncResult result);
    protected virtual IAsyncResult OnBeginFlushTrackingRecords(AsyncCallback callback, object state);
    protected virtual void OnEndFlushTrackingRecords(IAsyncResult result);
    internal void NotifyPaused();
    protected abstract virtual void OnNotifyPaused();
    internal void NotifyUnhandledException(Exception exception, Activity source, string sourceInstanceId);
    protected abstract virtual void OnNotifyUnhandledException(Exception exception, Activity source, string sourceInstanceId);
    protected internal abstract virtual void OnRequestAbort(Exception reason);
    internal void OnDeserialized(bool hasTrackedStarted);
    internal void Abort(Exception reason);
}
internal class System.Activities.Hosting.WorkflowInstanceExtensionCollection : object {
    internal bool HasPersistenceModule { get; }
    internal bool HasTrackingParticipant { get; }
    public bool HasWorkflowInstanceExtensions { get; }
    public List`1<IWorkflowInstanceExtension> WorkflowInstanceExtensions { get; }
    internal WorkflowInstanceExtensionCollection(Activity workflowDefinition, WorkflowInstanceExtensionManager extensionManager);
    internal bool get_HasPersistenceModule();
    internal bool get_HasTrackingParticipant();
    public bool get_HasWorkflowInstanceExtensions();
    public List`1<IWorkflowInstanceExtension> get_WorkflowInstanceExtensions();
    internal void Initialize();
    public T Find();
    public IEnumerable`1<T> FindAll();
    public void Dispose();
    public void Cancel();
}
public class System.Activities.Hosting.WorkflowInstanceExtensionManager : object {
    internal static List`1<KeyValuePair`2<Type, WorkflowInstanceExtensionProvider>> EmptyExtensionProviders;
    internal static List`1<object> EmptySingletonExtensions;
    internal SymbolResolver SymbolResolver { get; private set; }
    internal List`1<object> SingletonExtensions { get; private set; }
    internal List`1<object> AdditionalSingletonExtensions { get; }
    internal List`1<KeyValuePair`2<Type, WorkflowInstanceExtensionProvider>> ExtensionProviders { get; private set; }
    internal bool HasSingletonIWorkflowInstanceExtensions { get; private set; }
    internal bool HasSingletonTrackingParticipant { get; }
    internal bool HasSingletonPersistenceModule { get; }
    internal bool HasAdditionalSingletonIWorkflowInstanceExtensions { get; private set; }
    private static WorkflowInstanceExtensionManager();
    [CompilerGeneratedAttribute]
internal SymbolResolver get_SymbolResolver();
    [CompilerGeneratedAttribute]
private void set_SymbolResolver(SymbolResolver value);
    [CompilerGeneratedAttribute]
internal List`1<object> get_SingletonExtensions();
    [CompilerGeneratedAttribute]
private void set_SingletonExtensions(List`1<object> value);
    internal List`1<object> get_AdditionalSingletonExtensions();
    [CompilerGeneratedAttribute]
internal List`1<KeyValuePair`2<Type, WorkflowInstanceExtensionProvider>> get_ExtensionProviders();
    [CompilerGeneratedAttribute]
private void set_ExtensionProviders(List`1<KeyValuePair`2<Type, WorkflowInstanceExtensionProvider>> value);
    [CompilerGeneratedAttribute]
internal bool get_HasSingletonIWorkflowInstanceExtensions();
    [CompilerGeneratedAttribute]
private void set_HasSingletonIWorkflowInstanceExtensions(bool value);
    internal bool get_HasSingletonTrackingParticipant();
    internal bool get_HasSingletonPersistenceModule();
    [CompilerGeneratedAttribute]
internal bool get_HasAdditionalSingletonIWorkflowInstanceExtensions();
    [CompilerGeneratedAttribute]
private void set_HasAdditionalSingletonIWorkflowInstanceExtensions(bool value);
    public virtual void Add(object singletonExtension);
    public virtual void Add(Func`1<T> extensionCreationFunction);
    internal List`1<object> GetAllSingletonExtensions();
    internal void AddAllExtensionTypes(HashSet`1<Type> extensionTypes);
    internal static WorkflowInstanceExtensionCollection CreateInstanceExtensions(Activity workflowDefinition, WorkflowInstanceExtensionManager extensionManager);
    internal static void AddExtensionClosure(object newExtension, List`1& targetCollection, Boolean& addedTrackingParticipant, Boolean& addedPersistenceModule);
    public void MakeReadOnly();
}
internal abstract class System.Activities.Hosting.WorkflowInstanceExtensionProvider : object {
    public Type Type { get; protected set; }
    protected bool GeneratedTypeMatchesDeclaredType { get; protected set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
protected void set_Type(Type value);
    [CompilerGeneratedAttribute]
protected bool get_GeneratedTypeMatchesDeclaredType();
    [CompilerGeneratedAttribute]
protected void set_GeneratedTypeMatchesDeclaredType(bool value);
    public abstract virtual object ProvideValue();
    public bool IsMatch(object value);
}
internal class System.Activities.Hosting.WorkflowInstanceExtensionProvider`1 : WorkflowInstanceExtensionProvider {
    public WorkflowInstanceExtensionProvider`1(Func`1<T> providerFunction);
    public virtual object ProvideValue();
}
public class System.Activities.Hosting.WorkflowInstanceProxy : object {
    public Guid Id { get; }
    public Activity WorkflowDefinition { get; }
    internal WorkflowInstanceProxy(WorkflowInstance instance);
    public Guid get_Id();
    public Activity get_WorkflowDefinition();
    public IAsyncResult BeginResumeBookmark(Bookmark bookmark, object value, AsyncCallback callback, object state);
    public IAsyncResult BeginResumeBookmark(Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);
    public BookmarkResumptionResult EndResumeBookmark(IAsyncResult result);
}
public enum System.Activities.Hosting.WorkflowInstanceState : Enum {
    public int value__;
    public static WorkflowInstanceState Idle;
    public static WorkflowInstanceState Runnable;
    public static WorkflowInstanceState Complete;
    public static WorkflowInstanceState Aborted;
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
internal class System.Activities.HybridCollection`1 : object {
    public T Item { get; }
    public int Count { get; }
    protected T SingleItem { get; }
    protected IList`1<T> MultipleItems { get; }
    [DataMemberAttribute]
internal List`1<T> SerializedMultipleItems { get; internal set; }
    [DataMemberAttribute]
internal T SerializedSingleItem { get; internal set; }
    public HybridCollection`1(T initialItem);
    public T get_Item(int index);
    public int get_Count();
    protected T get_SingleItem();
    protected IList`1<T> get_MultipleItems();
    internal List`1<T> get_SerializedMultipleItems();
    internal void set_SerializedMultipleItems(List`1<T> value);
    internal T get_SerializedSingleItem();
    internal void set_SerializedSingleItem(T value);
    public void Add(T item);
    public ReadOnlyCollection`1<T> AsReadOnly();
    public void Compress();
    public void Remove(T item);
    internal void Remove(T item, bool searchingFromEnd);
}
[DefaultMemberAttribute("Item")]
internal class System.Activities.HybridDictionary`2 : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ICollection`1<TValue> Values { get; }
    public ICollection`1<TKey> Keys { get; }
    public TValue Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    [IteratorStateMachineAttribute("System.Activities.HybridDictionary`2/<GetEnumerator>d__23")]
public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal interface System.Activities.IAsyncCodeActivity {
    public abstract virtual void FinishExecution(AsyncCodeActivityContext context, IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
internal class System.Activities.IdSpace : object {
    public IdSpace Parent { get; private set; }
    public int ParentId { get; private set; }
    public int MemberCount { get; }
    public Activity Owner { get; }
    public Activity Item { get; }
    public IdSpace(IdSpace parent, int parentId);
    [CompilerGeneratedAttribute]
public IdSpace get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(IdSpace value);
    [CompilerGeneratedAttribute]
public int get_ParentId();
    [CompilerGeneratedAttribute]
private void set_ParentId(int value);
    public int get_MemberCount();
    public Activity get_Owner();
    public Activity get_Item(int id);
    public void AddMember(Activity element);
    public void Dispose();
}
internal interface System.Activities.IDynamicActivity {
    public string Name { get; public set; }
    public KeyedCollection`2<string, DynamicActivityProperty> Properties { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual KeyedCollection`2<string, DynamicActivityProperty> get_Properties();
}
public interface System.Activities.IExecutionProperty {
    public abstract virtual void SetupWorkflowThread();
    public abstract virtual void CleanupWorkflowThread();
}
internal interface System.Activities.IExpressionContainer {
}
internal interface System.Activities.IInstanceNotificationListener {
    public abstract virtual void AbortInstance(Exception reason, bool isWorkflowThread);
    public abstract virtual void OnIdle();
    public abstract virtual bool OnUnhandledException(Exception exception, Activity exceptionSource);
}
public abstract class System.Activities.InArgument : Argument {
    public static InArgument CreateReference(InArgument argumentToReference, string referencedArgumentName);
    public static InArgument CreateReference(InOutArgument argumentToReference, string referencedArgumentName);
}
[ContentPropertyAttribute("Expression")]
[TypeConverterAttribute("System.Activities.XamlIntegration.InArgumentConverter")]
[ValueSerializerAttribute("System.Activities.XamlIntegration.ArgumentValueSerializer")]
public class System.Activities.InArgument`1 : InArgument {
    [DefaultValueAttribute("")]
public Activity`1<T> Expression { get; public set; }
    internal ActivityWithResult ExpressionCore { get; internal set; }
    public InArgument`1(Variable variable);
    public InArgument`1(DelegateArgument delegateArgument);
    public InArgument`1(T constValue);
    public InArgument`1(Expression`1<Func`2<ActivityContext, T>> expression);
    public InArgument`1(Activity`1<T> expression);
    [CompilerGeneratedAttribute]
public Activity`1<T> get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Activity`1<T> value);
    internal virtual ActivityWithResult get_ExpressionCore();
    internal virtual void set_ExpressionCore(ActivityWithResult value);
    public static InArgument`1<T> op_Implicit(Variable variable);
    public static InArgument`1<T> op_Implicit(DelegateArgument delegateArgument);
    public static InArgument`1<T> op_Implicit(Activity`1<T> expression);
    public static InArgument`1<T> op_Implicit(T constValue);
    public static InArgument`1<T> FromVariable(Variable variable);
    public static InArgument`1<T> FromDelegateArgument(DelegateArgument delegateArgument);
    public static InArgument`1<T> FromExpression(Activity`1<T> expression);
    public static InArgument`1<T> FromValue(T constValue);
    public T Get(ActivityContext context);
    public void Set(ActivityContext context, T value);
    internal virtual Location CreateDefaultLocation();
    internal virtual bool TryPopulateValue(LocationEnvironment targetEnvironment, ActivityInstance activityInstance, ActivityExecutor executor);
    internal virtual void Declare(LocationEnvironment targetEnvironment, ActivityInstance targetActivityInstance);
}
internal class System.Activities.InlinedLocationReference : LocationReference {
    protected string NameCore { get; }
    protected Type TypeCore { get; }
    private LocationReference System.Activities.Expressions.ILocationReferenceWrapper.LocationReference { get; }
    public InlinedLocationReference(LocationReference innerReference, Activity validAccessor, ArgumentDirection accessDirection);
    public InlinedLocationReference(LocationReference innerReference, Activity validAccessor);
    protected virtual string get_NameCore();
    protected virtual Type get_TypeCore();
    public virtual Location GetLocation(ActivityContext context);
    internal virtual Location GetLocationForRead(ActivityContext context);
    internal virtual Location GetLocationForWrite(ActivityContext context);
    private sealed virtual override LocationReference System.Activities.Expressions.ILocationReferenceWrapper.get_LocationReference();
}
public abstract class System.Activities.InOutArgument : Argument {
    public static InOutArgument CreateReference(InOutArgument argumentToReference, string referencedArgumentName);
}
[ContentPropertyAttribute("Expression")]
[TypeConverterAttribute("System.Activities.XamlIntegration.InOutArgumentConverter")]
[ValueSerializerAttribute("System.Activities.XamlIntegration.ArgumentValueSerializer")]
public class System.Activities.InOutArgument`1 : InOutArgument {
    [DefaultValueAttribute("")]
public Activity`1<Location`1<T>> Expression { get; public set; }
    internal ActivityWithResult ExpressionCore { get; internal set; }
    public InOutArgument`1(Variable variable);
    public InOutArgument`1(Variable`1<T> variable);
    public InOutArgument`1(Expression`1<Func`2<ActivityContext, T>> expression);
    public InOutArgument`1(Activity`1<Location`1<T>> expression);
    [CompilerGeneratedAttribute]
public Activity`1<Location`1<T>> get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Activity`1<Location`1<T>> value);
    internal virtual ActivityWithResult get_ExpressionCore();
    internal virtual void set_ExpressionCore(ActivityWithResult value);
    public static InOutArgument`1<T> op_Implicit(Variable`1<T> variable);
    public static InOutArgument`1<T> op_Implicit(Activity`1<Location`1<T>> expression);
    public static InOutArgument`1<T> FromVariable(Variable`1<T> variable);
    public static InOutArgument`1<T> FromExpression(Activity`1<Location`1<T>> expression);
    public Location`1<T> GetLocation(ActivityContext context);
    public T Get(ActivityContext context);
    public void Set(ActivityContext context, T value);
    internal virtual Location CreateDefaultLocation();
    internal virtual void Declare(LocationEnvironment targetEnvironment, ActivityInstance activityInstance);
    internal virtual bool TryPopulateValue(LocationEnvironment targetEnvironment, ActivityInstance targetActivityInstance, ActivityExecutor executor);
}
public class System.Activities.InvalidWorkflowException : Exception {
    public InvalidWorkflowException(string message);
    public InvalidWorkflowException(string message, Exception innerException);
    protected InvalidWorkflowException(SerializationInfo info, StreamingContext context);
}
public class System.Activities.InvokeCompletedEventArgs : AsyncCompletedEventArgs {
    public IDictionary`2<string, object> Outputs { get; private set; }
    internal InvokeCompletedEventArgs(Exception error, bool cancelled, AsyncInvokeContext context);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Outputs();
    [CompilerGeneratedAttribute]
private void set_Outputs(IDictionary`2<string, object> value);
}
public interface System.Activities.IPropertyRegistrationCallback {
    public abstract virtual void Register(RegistrationContext context);
    public abstract virtual void Unregister(RegistrationContext context);
}
[DataContractAttribute]
[DebuggerDisplayAttribute("{Value}")]
public abstract class System.Activities.Location : object {
    public Type LocationType { get; }
    public object Value { get; public set; }
    [DataMemberAttribute]
internal TemporaryResolutionData SerializedTemporaryResolutionData { get; internal set; }
    internal bool CanBeMapped { get; }
    internal LocationEnvironment TemporaryResolutionEnvironment { get; }
    internal bool BufferGetsOnCollapse { get; }
    protected object ValueCore { get; protected set; }
    public abstract virtual Type get_LocationType();
    public object get_Value();
    public void set_Value(object value);
    internal TemporaryResolutionData get_SerializedTemporaryResolutionData();
    internal void set_SerializedTemporaryResolutionData(TemporaryResolutionData value);
    internal virtual bool get_CanBeMapped();
    internal LocationEnvironment get_TemporaryResolutionEnvironment();
    internal bool get_BufferGetsOnCollapse();
    protected abstract virtual object get_ValueCore();
    protected abstract virtual void set_ValueCore(object value);
    internal void SetTemporaryResolutionData(LocationEnvironment resolutionEnvironment, bool bufferGetsOnCollapse);
    internal virtual Location CreateReference(bool bufferGets);
    internal virtual object CreateDefaultValue();
}
[DataContractAttribute]
public class System.Activities.Location`1 : Location {
    public Type LocationType { get; }
    public T Value { get; public set; }
    internal T TypedValue { get; internal set; }
    protected object ValueCore { get; protected set; }
    [DataMemberAttribute]
internal T SerializedValue { get; internal set; }
    public virtual Type get_LocationType();
    public virtual T get_Value();
    public virtual void set_Value(T value);
    internal T get_TypedValue();
    internal void set_TypedValue(T value);
    protected sealed virtual object get_ValueCore();
    protected sealed virtual void set_ValueCore(object value);
    internal T get_SerializedValue();
    internal void set_SerializedValue(T value);
    internal virtual Location CreateReference(bool bufferGets);
    internal virtual object CreateDefaultValue();
    public virtual string ToString();
}
internal abstract class System.Activities.LocationFactory : object {
    public Location CreateLocation(ActivityContext context);
    protected abstract virtual Location CreateLocationCore(ActivityContext context);
}
internal abstract class System.Activities.LocationFactory`1 : LocationFactory {
    public abstract virtual Location`1<T> CreateLocation(ActivityContext context);
    protected virtual Location CreateLocationCore(ActivityContext context);
}
public abstract class System.Activities.LocationReference : object {
    public string Name { get; }
    public Type Type { get; }
    internal int Id { get; internal set; }
    protected string NameCore { get; }
    protected Type TypeCore { get; }
    public string get_Name();
    public Type get_Type();
    [CompilerGeneratedAttribute]
internal int get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(int value);
    protected abstract virtual string get_NameCore();
    protected abstract virtual Type get_TypeCore();
    public abstract virtual Location GetLocation(ActivityContext context);
    internal virtual Location GetLocationForRead(ActivityContext context);
    internal virtual Location GetLocationForWrite(ActivityContext context);
}
public abstract class System.Activities.LocationReferenceEnvironment : object {
    public Activity Root { get; }
    public LocationReferenceEnvironment Parent { get; protected set; }
    public abstract virtual Activity get_Root();
    [CompilerGeneratedAttribute]
public LocationReferenceEnvironment get_Parent();
    [CompilerGeneratedAttribute]
protected void set_Parent(LocationReferenceEnvironment value);
    public abstract virtual bool IsVisible(LocationReference locationReference);
    public abstract virtual bool TryGetLocationReference(string name, LocationReference& result);
    public abstract virtual IEnumerable`1<LocationReference> GetLocationReferences();
}
public abstract class System.Activities.NativeActivity : Activity {
    protected internal Version ImplementationVersion { get; protected internal set; }
    [IgnoreDataMemberAttribute]
protected Func`1<Activity> Implementation { get; protected set; }
    protected bool CanInduceIdle { get; }
    internal bool InternalCanInduceIdle { get; }
    protected internal sealed virtual Version get_ImplementationVersion();
    protected internal sealed virtual void set_ImplementationVersion(Version value);
    protected sealed virtual Func`1<Activity> get_Implementation();
    protected sealed virtual void set_Implementation(Func`1<Activity> value);
    protected virtual bool get_CanInduceIdle();
    internal virtual bool get_InternalCanInduceIdle();
    protected abstract virtual void Execute(NativeActivityContext context);
    protected virtual void Abort(NativeActivityAbortContext context);
    protected virtual void Cancel(NativeActivityContext context);
    internal sealed virtual void OnInternalCacheMetadata(bool createEmptyBindings);
    protected sealed virtual void CacheMetadata(ActivityMetadata metadata);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    internal sealed virtual void OnInternalCreateDynamicUpdateMap(Finalizer finalizer, IDefinitionMatcher matcher, Activity originalActivity);
    protected sealed virtual void OnCreateDynamicUpdateMap(UpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    internal static bool DoPublicChildrenMatch(UpdateMapMetadata metadata, Activity updatedActivity, Activity originalActivity);
    private sealed virtual override void System.Activities.DynamicUpdate.IInstanceUpdatable.InternalUpdateInstance(NativeActivityUpdateContext updateContext);
    protected virtual void UpdateInstance(NativeActivityUpdateContext updateContext);
    internal virtual void InternalExecute(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal virtual void InternalAbort(ActivityInstance instance, ActivityExecutor executor, Exception terminationReason);
    internal virtual void InternalCancel(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
}
public abstract class System.Activities.NativeActivity`1 : Activity`1<TResult> {
    protected internal Version ImplementationVersion { get; protected internal set; }
    [IgnoreDataMemberAttribute]
protected Func`1<Activity> Implementation { get; protected set; }
    protected bool CanInduceIdle { get; }
    internal bool InternalCanInduceIdle { get; }
    protected internal sealed virtual Version get_ImplementationVersion();
    protected internal sealed virtual void set_ImplementationVersion(Version value);
    protected sealed virtual Func`1<Activity> get_Implementation();
    protected sealed virtual void set_Implementation(Func`1<Activity> value);
    protected virtual bool get_CanInduceIdle();
    internal virtual bool get_InternalCanInduceIdle();
    protected abstract virtual void Execute(NativeActivityContext context);
    protected virtual void Abort(NativeActivityAbortContext context);
    protected virtual void Cancel(NativeActivityContext context);
    internal sealed virtual void OnInternalCacheMetadataExceptResult(bool createEmptyBindings);
    protected sealed virtual void CacheMetadata(ActivityMetadata metadata);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    internal sealed virtual void OnInternalCreateDynamicUpdateMap(Finalizer finalizer, IDefinitionMatcher matcher, Activity originalActivity);
    protected sealed virtual void OnCreateDynamicUpdateMap(UpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    private sealed virtual override void System.Activities.DynamicUpdate.IInstanceUpdatable.InternalUpdateInstance(NativeActivityUpdateContext updateContext);
    protected virtual void UpdateInstance(NativeActivityUpdateContext updateContext);
    internal virtual void InternalExecute(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    internal virtual void InternalAbort(ActivityInstance instance, ActivityExecutor executor, Exception terminationReason);
    internal virtual void InternalCancel(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
}
public class System.Activities.NativeActivityAbortContext : ActivityContext {
    public Exception Reason { get; }
    internal NativeActivityAbortContext(ActivityInstance instance, ActivityExecutor executor, Exception reason);
    public Exception get_Reason();
}
public class System.Activities.NativeActivityContext : ActivityContext {
    public BookmarkScope DefaultBookmarkScope { get; }
    public bool IsCancellationRequested { get; }
    public ExecutionProperties Properties { get; }
    internal bool HasRuntimeTransaction { get; }
    internal bool RequiresTransactionContextWaiterExists { get; }
    internal bool IsInNoPersistScope { get; }
    internal NativeActivityContext(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    public BookmarkScope get_DefaultBookmarkScope();
    public bool get_IsCancellationRequested();
    public ExecutionProperties get_Properties();
    internal bool get_HasRuntimeTransaction();
    internal bool get_RequiresTransactionContextWaiterExists();
    internal bool get_IsInNoPersistScope();
    internal void Initialize(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarkManager);
    public T GetValue(Variable`1<T> variable);
    public object GetValue(Variable variable);
    public void SetValue(Variable`1<T> variable, T value);
    public void SetValue(Variable variable, object value);
    public void CancelChildren();
    public ReadOnlyCollection`1<ActivityInstance> GetChildren();
    public void AbortChildInstance(ActivityInstance activity);
    public void AbortChildInstance(ActivityInstance activity, Exception reason);
    public void Abort();
    public void Abort(Exception reason);
    internal void Terminate(Exception reason);
    public void Track(CustomTrackingRecord record);
    public void CancelChild(ActivityInstance activityInstance);
    internal void Cancel();
    public Bookmark CreateBookmark(string name);
    public Bookmark CreateBookmark(string name, BookmarkCallback callback);
    public Bookmark CreateBookmark(string name, BookmarkCallback callback, BookmarkOptions options);
    public Bookmark CreateBookmark(string name, BookmarkCallback callback, BookmarkScope scope);
    public Bookmark CreateBookmark(string name, BookmarkCallback callback, BookmarkScope scope, BookmarkOptions options);
    public Bookmark CreateBookmark();
    public Bookmark CreateBookmark(BookmarkCallback callback);
    public Bookmark CreateBookmark(BookmarkCallback callback, BookmarkOptions options);
    internal BookmarkScope CreateBookmarkScope();
    internal BookmarkScope CreateBookmarkScope(Guid scopeId);
    internal BookmarkScope CreateBookmarkScope(Guid scopeId, BookmarkScopeHandle scopeHandle);
    internal void UnregisterBookmarkScope(BookmarkScope scope);
    internal void InitializeBookmarkScope(BookmarkScope scope, Guid id);
    internal void RethrowException(FaultContext context);
    public void RemoveAllBookmarks();
    public void MarkCanceled();
    public bool RemoveBookmark(string name);
    public bool RemoveBookmark(Bookmark bookmark);
    public bool RemoveBookmark(string name, BookmarkScope scope);
    public BookmarkResumptionResult ResumeBookmark(Bookmark bookmark, object value);
    internal void RegisterMainRootCompleteCallback(Bookmark bookmark);
    internal ActivityInstance ScheduleSecondaryRoot(Activity activity, LocationEnvironment environment);
    public ActivityInstance ScheduleActivity(Activity activity);
    public ActivityInstance ScheduleActivity(Activity activity, CompletionCallback onCompleted);
    public ActivityInstance ScheduleActivity(Activity activity, FaultCallback onFaulted);
    public ActivityInstance ScheduleActivity(Activity activity, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction activityAction, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`1<T> activityAction, T argument, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`2<T1, T2> activityAction, T1 argument1, T2 argument2, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`3<T1, T2, T3> activityAction, T1 argument1, T2 argument2, T3 argument3, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`4<T1, T2, T3, T4> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`5<T1, T2, T3, T4, T5> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`6<T1, T2, T3, T4, T5, T6> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`7<T1, T2, T3, T4, T5, T6, T7> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`8<T1, T2, T3, T4, T5, T6, T7, T8> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, T15 argument15, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleAction(ActivityAction`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> activityAction, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, T15 argument15, T16 argument16, CompletionCallback onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleActivity(Activity`1<TResult> activity, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`1<TResult> activityFunc, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`2<T, TResult> activityFunc, T argument, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`3<T1, T2, TResult> activityFunc, T1 argument1, T2 argument2, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`4<T1, T2, T3, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`5<T1, T2, T3, T4, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`6<T1, T2, T3, T4, T5, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`7<T1, T2, T3, T4, T5, T6, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`8<T1, T2, T3, T4, T5, T6, T7, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`9<T1, T2, T3, T4, T5, T6, T7, T8, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, T15 argument15, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleFunc(ActivityFunc`17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> activityFunc, T1 argument1, T2 argument2, T3 argument3, T4 argument4, T5 argument5, T6 argument6, T7 argument7, T8 argument8, T9 argument9, T10 argument10, T11 argument11, T12 argument12, T13 argument13, T14 argument14, T15 argument15, T16 argument16, CompletionCallback`1<TResult> onCompleted, FaultCallback onFaulted);
    public ActivityInstance ScheduleDelegate(ActivityDelegate activityDelegate, IDictionary`2<string, object> inputParameters, DelegateCompletionCallback onCompleted, FaultCallback onFaulted);
    internal void EnterNoPersist(NoPersistHandle handle);
    internal void ExitNoPersist(NoPersistHandle handle);
    internal void RequestTransactionContext(bool isRequires, RuntimeTransactionHandle handle, Action`2<NativeActivityTransactionContext, object> callback, object state);
    internal void CompleteTransaction(RuntimeTransactionHandle handle, BookmarkCallback callback);
    internal void RequestPersist(BookmarkCallback onPersistComplete);
}
public class System.Activities.NativeActivityFaultContext : NativeActivityContext {
    internal bool IsFaultHandled { get; }
    internal NativeActivityFaultContext(ActivityInstance executingActivityInstance, ActivityExecutor executor, BookmarkManager bookmarkManager, Exception exception, ActivityInstanceReference source);
    internal bool get_IsFaultHandled();
    public void HandleFault();
    internal FaultContext CreateFaultContext();
}
public class System.Activities.NativeActivityMetadata : ValueType {
    private Activity activity;
    private LocationReferenceEnvironment environment;
    private bool createEmptyBindings;
    internal bool CreateEmptyBindings { get; }
    public LocationReferenceEnvironment Environment { get; }
    public bool HasViolations { get; }
    internal NativeActivityMetadata(Activity activity, LocationReferenceEnvironment environment, bool createEmptyBindings);
    internal bool get_CreateEmptyBindings();
    public LocationReferenceEnvironment get_Environment();
    public bool get_HasViolations();
    public static bool op_Equality(NativeActivityMetadata left, NativeActivityMetadata right);
    public static bool op_Inequality(NativeActivityMetadata left, NativeActivityMetadata right);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Bind(Argument binding, RuntimeArgument argument);
    public void SetValidationErrorsCollection(Collection`1<ValidationError> validationErrors);
    public void AddValidationError(string validationErrorMessage);
    public void AddValidationError(ValidationError validationError);
    public void SetArgumentsCollection(Collection`1<RuntimeArgument> arguments);
    public void AddArgument(RuntimeArgument argument);
    public void SetChildrenCollection(Collection`1<Activity> children);
    public void AddChild(Activity child);
    public void AddChild(Activity child, object origin);
    public void SetImplementationChildrenCollection(Collection`1<Activity> implementationChildren);
    public void AddImplementationChild(Activity implementationChild);
    public void SetImportedChildrenCollection(Collection`1<Activity> importedChildren);
    public void AddImportedChild(Activity importedChild);
    public void AddImportedChild(Activity importedChild, object origin);
    public void SetDelegatesCollection(Collection`1<ActivityDelegate> delegates);
    public void AddDelegate(ActivityDelegate activityDelegate);
    public void AddDelegate(ActivityDelegate activityDelegate, object origin);
    public void SetImplementationDelegatesCollection(Collection`1<ActivityDelegate> implementationDelegates);
    public void AddImplementationDelegate(ActivityDelegate implementationDelegate);
    public void SetImportedDelegatesCollection(Collection`1<ActivityDelegate> importedDelegates);
    public void AddImportedDelegate(ActivityDelegate importedDelegate);
    public void AddImportedDelegate(ActivityDelegate importedDelegate, object origin);
    public void SetVariablesCollection(Collection`1<Variable> variables);
    public void AddVariable(Variable variable);
    public void AddVariable(Variable variable, object origin);
    public void SetImplementationVariablesCollection(Collection`1<Variable> implementationVariables);
    public void AddImplementationVariable(Variable implementationVariable);
    public Collection`1<RuntimeArgument> GetArgumentsWithReflection();
    public Collection`1<Activity> GetChildrenWithReflection();
    public Collection`1<Variable> GetVariablesWithReflection();
    public Collection`1<ActivityDelegate> GetDelegatesWithReflection();
    public void AddDefaultExtensionProvider(Func`1<T> extensionProvider);
    public void RequireExtension();
    public void RequireExtension(Type extensionType);
    internal void Dispose();
}
public class System.Activities.NativeActivityTransactionContext : NativeActivityContext {
    internal NativeActivityTransactionContext(ActivityInstance instance, ActivityExecutor executor, BookmarkManager bookmarks, RuntimeTransactionHandle handle);
    public void SetRuntimeTransaction(Transaction transaction);
}
[DataContractAttribute]
public class System.Activities.NoPersistHandle : Handle {
    public void Enter(NativeActivityContext context);
    public void Exit(NativeActivityContext context);
}
internal class System.Activities.NoPersistProperty : object {
    public static string Name;
    public NoPersistProperty(ActivityExecutor executor);
    public void Enter();
    public bool Exit();
    public sealed virtual void Register(RegistrationContext context);
    public sealed virtual void Unregister(RegistrationContext context);
}
public abstract class System.Activities.OutArgument : Argument {
    public static OutArgument CreateReference(OutArgument argumentToReference, string referencedArgumentName);
    public static OutArgument CreateReference(InOutArgument argumentToReference, string referencedArgumentName);
}
[ContentPropertyAttribute("Expression")]
[TypeConverterAttribute("System.Activities.XamlIntegration.OutArgumentConverter")]
[ValueSerializerAttribute("System.Activities.XamlIntegration.ArgumentValueSerializer")]
public class System.Activities.OutArgument`1 : OutArgument {
    [DefaultValueAttribute("")]
public Activity`1<Location`1<T>> Expression { get; public set; }
    internal ActivityWithResult ExpressionCore { get; internal set; }
    public OutArgument`1(Variable variable);
    public OutArgument`1(DelegateArgument delegateArgument);
    public OutArgument`1(Expression`1<Func`2<ActivityContext, T>> expression);
    public OutArgument`1(Activity`1<Location`1<T>> expression);
    [CompilerGeneratedAttribute]
public Activity`1<Location`1<T>> get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Activity`1<Location`1<T>> value);
    internal virtual ActivityWithResult get_ExpressionCore();
    internal virtual void set_ExpressionCore(ActivityWithResult value);
    public static OutArgument`1<T> op_Implicit(Variable variable);
    public static OutArgument`1<T> op_Implicit(DelegateArgument delegateArgument);
    public static OutArgument`1<T> op_Implicit(Activity`1<Location`1<T>> expression);
    public static OutArgument`1<T> FromVariable(Variable variable);
    public static OutArgument`1<T> FromDelegateArgument(DelegateArgument delegateArgument);
    public static OutArgument`1<T> FromExpression(Activity`1<Location`1<T>> expression);
    public Location`1<T> GetLocation(ActivityContext context);
    public T Get(ActivityContext context);
    public void Set(ActivityContext context, T value);
    internal virtual Location CreateDefaultLocation();
    internal virtual void Declare(LocationEnvironment targetEnvironment, ActivityInstance activityInstance);
    internal virtual bool TryPopulateValue(LocationEnvironment targetEnvironment, ActivityInstance targetActivityInstance, ActivityExecutor executor);
}
[AttributeUsageAttribute("128")]
public class System.Activities.OverloadGroupAttribute : Attribute {
    public string GroupName { get; public set; }
    public object TypeId { get; }
    public OverloadGroupAttribute(string groupName);
    public string get_GroupName();
    public void set_GroupName(string value);
    public virtual object get_TypeId();
}
public enum System.Activities.PersistableIdleAction : Enum {
    public int value__;
    public static PersistableIdleAction None;
    public static PersistableIdleAction Unload;
    public static PersistableIdleAction Persist;
}
public abstract class System.Activities.Persistence.PersistenceIOParticipant : PersistenceParticipant {
    protected PersistenceIOParticipant(bool isSaveTransactionRequired, bool isLoadTransactionRequired);
    protected virtual IAsyncResult BeginOnSave(IDictionary`2<XName, object> readWriteValues, IDictionary`2<XName, object> writeOnlyValues, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void EndOnSave(IAsyncResult result);
    protected virtual IAsyncResult BeginOnLoad(IDictionary`2<XName, object> readWriteValues, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void EndOnLoad(IAsyncResult result);
    protected abstract virtual void Abort();
    internal virtual IAsyncResult InternalBeginOnSave(IDictionary`2<XName, object> readWriteValues, IDictionary`2<XName, object> writeOnlyValues, TimeSpan timeout, AsyncCallback callback, object state);
    internal virtual void InternalEndOnSave(IAsyncResult result);
    internal virtual IAsyncResult InternalBeginOnLoad(IDictionary`2<XName, object> readWriteValues, TimeSpan timeout, AsyncCallback callback, object state);
    internal virtual void InternalEndOnLoad(IAsyncResult result);
    internal virtual void InternalAbort();
}
public abstract class System.Activities.Persistence.PersistenceParticipant : object {
    private bool System.Runtime.IPersistencePipelineModule.IsIOParticipant { get; }
    private bool System.Runtime.IPersistencePipelineModule.IsSaveTransactionRequired { get; }
    private bool System.Runtime.IPersistencePipelineModule.IsLoadTransactionRequired { get; }
    internal PersistenceParticipant(bool isSaveTransactionRequired, bool isLoadTransactionRequired);
    protected virtual void CollectValues(IDictionary`2& readWriteValues, IDictionary`2& writeOnlyValues);
    protected virtual IDictionary`2<XName, object> MapValues(IDictionary`2<XName, object> readWriteValues, IDictionary`2<XName, object> writeOnlyValues);
    protected virtual void PublishValues(IDictionary`2<XName, object> readWriteValues);
    private sealed virtual override void System.Runtime.IPersistencePipelineModule.CollectValues(IDictionary`2& readWriteValues, IDictionary`2& writeOnlyValues);
    private sealed virtual override IDictionary`2<XName, object> System.Runtime.IPersistencePipelineModule.MapValues(IDictionary`2<XName, object> readWriteValues, IDictionary`2<XName, object> writeOnlyValues);
    private sealed virtual override void System.Runtime.IPersistencePipelineModule.PublishValues(IDictionary`2<XName, object> readWriteValues);
    private sealed virtual override bool System.Runtime.IPersistencePipelineModule.get_IsIOParticipant();
    private sealed virtual override bool System.Runtime.IPersistencePipelineModule.get_IsSaveTransactionRequired();
    private sealed virtual override bool System.Runtime.IPersistencePipelineModule.get_IsLoadTransactionRequired();
    private sealed virtual override IAsyncResult System.Runtime.IPersistencePipelineModule.BeginOnSave(IDictionary`2<XName, object> readWriteValues, IDictionary`2<XName, object> writeOnlyValues, TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override void System.Runtime.IPersistencePipelineModule.EndOnSave(IAsyncResult result);
    private sealed virtual override IAsyncResult System.Runtime.IPersistencePipelineModule.BeginOnLoad(IDictionary`2<XName, object> readWriteValues, TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override void System.Runtime.IPersistencePipelineModule.EndOnLoad(IAsyncResult result);
    private sealed virtual override void System.Runtime.IPersistencePipelineModule.Abort();
    internal virtual IAsyncResult InternalBeginOnSave(IDictionary`2<XName, object> readWriteValues, IDictionary`2<XName, object> writeOnlyValues, TimeSpan timeout, AsyncCallback callback, object state);
    internal virtual void InternalEndOnSave(IAsyncResult result);
    internal virtual IAsyncResult InternalBeginOnLoad(IDictionary`2<XName, object> readWriteValues, TimeSpan timeout, AsyncCallback callback, object state);
    internal virtual void InternalEndOnLoad(IAsyncResult result);
    internal virtual void InternalAbort();
}
internal class System.Activities.ProcessActivityTreeOptions : object {
    public CancellationToken CancellationToken { get; private set; }
    public bool SkipIfCached { get; private set; }
    public bool CreateEmptyBindings { get; private set; }
    public bool SkipPrivateChildren { get; private set; }
    public bool OnlyCallCallbackForDeclarations { get; private set; }
    public bool SkipConstraints { get; private set; }
    public bool OnlyVisitSingleLevel { get; private set; }
    public bool SkipRootConfigurationValidation { get; private set; }
    public bool StoreTempViolations { get; private set; }
    public bool IsRuntimeReadyOptions { get; }
    public static ProcessActivityTreeOptions FullCachingOptions { get; }
    public static ProcessActivityTreeOptions ValidationOptions { get; }
    public static ProcessActivityTreeOptions ValidationAndPrepareForRuntimeOptions { get; }
    public static ProcessActivityTreeOptions DynamicUpdateOptions { get; }
    public static ProcessActivityTreeOptions DynamicUpdateOptionsForImplementation { get; }
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
private void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public bool get_SkipIfCached();
    [CompilerGeneratedAttribute]
private void set_SkipIfCached(bool value);
    [CompilerGeneratedAttribute]
public bool get_CreateEmptyBindings();
    [CompilerGeneratedAttribute]
private void set_CreateEmptyBindings(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipPrivateChildren();
    [CompilerGeneratedAttribute]
private void set_SkipPrivateChildren(bool value);
    [CompilerGeneratedAttribute]
public bool get_OnlyCallCallbackForDeclarations();
    [CompilerGeneratedAttribute]
private void set_OnlyCallCallbackForDeclarations(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipConstraints();
    [CompilerGeneratedAttribute]
private void set_SkipConstraints(bool value);
    [CompilerGeneratedAttribute]
public bool get_OnlyVisitSingleLevel();
    [CompilerGeneratedAttribute]
private void set_OnlyVisitSingleLevel(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipRootConfigurationValidation();
    [CompilerGeneratedAttribute]
private void set_SkipRootConfigurationValidation(bool value);
    [CompilerGeneratedAttribute]
public bool get_StoreTempViolations();
    [CompilerGeneratedAttribute]
private void set_StoreTempViolations(bool value);
    public bool get_IsRuntimeReadyOptions();
    public static ProcessActivityTreeOptions get_FullCachingOptions();
    public static ProcessActivityTreeOptions get_ValidationOptions();
    public static ProcessActivityTreeOptions get_ValidationAndPrepareForRuntimeOptions();
    public static ProcessActivityTreeOptions get_DynamicUpdateOptions();
    public static ProcessActivityTreeOptions get_DynamicUpdateOptionsForImplementation();
    public static ProcessActivityTreeOptions GetFinishCachingSubtreeOptions(ProcessActivityTreeOptions originalOptions);
    public static ProcessActivityTreeOptions GetValidationOptions(ValidationSettings settings);
}
[DefaultMemberAttribute("Item")]
internal class System.Activities.Quack`1 : object {
    public int Count { get; }
    public T Item { get; }
    public Quack`1(T[] items);
    public int get_Count();
    public T get_Item(int index);
    public T[] ToArray();
    public void PushFront(T item);
    public void Enqueue(T item);
    public T Dequeue();
    public bool Remove(T item);
    public void Remove(int index);
}
internal class System.Activities.QualifiedId : object {
    public QualifiedId(Activity element);
    public QualifiedId(Byte[] bytes);
    public QualifiedId(Int32[] idArray);
    public static bool TryGetElementFromRoot(Activity root, QualifiedId id, Activity& targetElement);
    public static bool TryGetElementFromRoot(Activity root, Byte[] idBytes, Activity& targetElement);
    public static QualifiedId Parse(string value);
    public static bool TryParse(string value, QualifiedId& result);
    public static bool Equals(Byte[] lhs, Byte[] rhs);
    public Byte[] AsByteArray();
    public Int32[] AsIDArray();
    public sealed virtual bool Equals(QualifiedId rhs);
    public virtual string ToString();
}
public class System.Activities.RegistrationContext : object {
    internal RegistrationContext(ExecutionPropertyManager properties, IdSpace currentIdSpace);
    public object FindProperty(string name);
}
[AttributeUsageAttribute("128")]
public class System.Activities.RequiredArgumentAttribute : Attribute {
    public object TypeId { get; }
    public virtual object get_TypeId();
}
[DataContractAttribute]
internal class System.Activities.Runtime.ActivityCompletionCallbackWrapper : CompletionCallbackWrapper {
    public ActivityCompletionCallbackWrapper(CompletionCallback callback, ActivityInstance owningInstance);
    private static ActivityCompletionCallbackWrapper();
    [SecuritySafeCriticalAttribute]
protected internal virtual void Invoke(NativeActivityContext context, ActivityInstance completedInstance);
}
[DataContractAttribute]
internal abstract class System.Activities.Runtime.ActivityExecutionWorkItem : WorkItem {
    public bool IsValid { get; }
    public ActivityInstance PropertyManagerOwner { get; }
    public ActivityExecutionWorkItem(ActivityInstance activityInstance);
    public virtual bool get_IsValid();
    public virtual ActivityInstance get_PropertyManagerOwner();
    protected virtual void ClearForReuse();
    protected void SetExceptionToPropagateWithoutAbort(Exception exception);
    public virtual void PostProcess(ActivityExecutor executor);
}
[DataContractAttribute]
internal class System.Activities.Runtime.ActivityExecutor : object {
    public Pool`1<EmptyWorkItem> EmptyWorkItemPool { get; }
    public Pool`1<ExecuteSynchronousExpressionWorkItem> ExecuteSynchronousExpressionWorkItemPool { get; }
    public Pool`1<CompletionWorkItem> CompletionWorkItemPool { get; }
    public Pool`1<CodeActivityContext> CodeActivityContextPool { get; }
    public Pool`1<NativeActivityContext> NativeActivityContextPool { get; }
    public Pool`1<ResolveNextArgumentWorkItem> ResolveNextArgumentWorkItemPool { get; }
    public Activity RootActivity { get; }
    public bool IsInitialized { get; }
    public bool HasPendingTrackingRecords { get; }
    public bool ShouldTrack { get; }
    public bool ShouldTrackBookmarkResumptionRecords { get; }
    public bool ShouldTrackActivityScheduledRecords { get; }
    public bool ShouldTrackActivityStateRecords { get; }
    public bool ShouldTrackActivityStateRecordsExecutingState { get; }
    public bool ShouldTrackActivityStateRecordsClosedState { get; }
    public bool ShouldTrackCancelRequestedRecords { get; }
    public bool ShouldTrackFaultPropagationRecords { get; }
    public SymbolResolver SymbolResolver { get; }
    public LocationEnvironment EmptyEnvironment { get; }
    public ActivityInstanceState State { get; }
    [DataMemberAttribute]
public WorkflowIdentity WorkflowIdentity { get; internal set; }
    [DataMemberAttribute]
public Guid WorkflowInstanceId { get; internal set; }
    public Exception TerminationException { get; }
    public bool IsRunning { get; }
    public bool IsPersistable { get; }
    public bool IsAbortPending { get; }
    public bool IsIdle { get; }
    public bool IsTerminatePending { get; }
    public bool KeysAllowed { get; }
    public IDictionary`2<string, object> WorkflowOutputs { get; }
    internal BookmarkScopeManager BookmarkScopeManager { get; }
    internal BookmarkScopeManager RawBookmarkScopeManager { get; }
    internal BookmarkManager RawBookmarkManager { get; }
    internal MappableObjectManager MappableObjectManager { get; }
    public bool RequiresTransactionContextWaiterExists { get; }
    public bool HasRuntimeTransaction { get; }
    public Transaction CurrentTransaction { get; }
    [DataMemberAttribute]
internal BookmarkManager SerializedBookmarkManager { get; internal set; }
    [DataMemberAttribute]
internal BookmarkScopeManager SerializedBookmarkScopeManager { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedHasTrackedStarted { get; internal set; }
    [DataMemberAttribute]
internal long SerializedNextTrackingRecordNumber { get; internal set; }
    [DataMemberAttribute]
internal ActivityInstance SerializedRootInstance { get; internal set; }
    [DataMemberAttribute]
internal Scheduler SerializedScheduler { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedShouldRaiseMainBodyComplete { get; internal set; }
    [DataMemberAttribute]
internal long SerializedLastInstanceId { get; internal set; }
    [DataMemberAttribute]
internal LocationEnvironment SerializedRootEnvironment { get; internal set; }
    [DataMemberAttribute]
internal IDictionary`2<string, object> SerializedWorkflowOutputs { get; internal set; }
    [DataMemberAttribute]
internal Bookmark SerializedMainRootCompleteBookmark { get; internal set; }
    [DataMemberAttribute]
internal ActivityInstanceState SerializedExecutionState { get; internal set; }
    [DataMemberAttribute]
internal List`1<Handle> SerializedHandles { get; internal set; }
    internal bool PersistExceptions { get; }
    [DataMemberAttribute]
internal Exception SerializedCompletionException { get; internal set; }
    [DataMemberAttribute]
internal TransactionContextWaiter[] SerializedTransactionContextWaiters { get; internal set; }
    [DataMemberAttribute]
internal Queue`1<PersistenceWaiter> SerializedPersistenceWaiters { get; internal set; }
    [DataMemberAttribute]
internal List`1<ActivityInstance> SerializedExecutingSecondaryRootInstances { get; internal set; }
    [DataMemberAttribute]
internal MappableObjectManager SerializedMappableObjectManager { get; internal set; }
    [DataMemberAttribute]
internal ActivityInstanceMap SerializedProgramMapping { get; internal set; }
    internal ExecutionPropertyManager RootPropertyManager { get; }
    [DataMemberAttribute]
internal ExecutionPropertyManager SerializedPropertyManager { get; internal set; }
    internal List`1<Handle> Handles { get; }
    public ActivityExecutor(WorkflowInstance host);
    public Pool`1<EmptyWorkItem> get_EmptyWorkItemPool();
    public Pool`1<ExecuteSynchronousExpressionWorkItem> get_ExecuteSynchronousExpressionWorkItemPool();
    public Pool`1<CompletionWorkItem> get_CompletionWorkItemPool();
    public Pool`1<CodeActivityContext> get_CodeActivityContextPool();
    public Pool`1<NativeActivityContext> get_NativeActivityContextPool();
    public Pool`1<ResolveNextArgumentWorkItem> get_ResolveNextArgumentWorkItemPool();
    public Activity get_RootActivity();
    public bool get_IsInitialized();
    public bool get_HasPendingTrackingRecords();
    public bool get_ShouldTrack();
    public bool get_ShouldTrackBookmarkResumptionRecords();
    public bool get_ShouldTrackActivityScheduledRecords();
    public bool get_ShouldTrackActivityStateRecords();
    public bool get_ShouldTrackActivityStateRecordsExecutingState();
    public bool get_ShouldTrackActivityStateRecordsClosedState();
    public bool get_ShouldTrackCancelRequestedRecords();
    public bool get_ShouldTrackFaultPropagationRecords();
    public SymbolResolver get_SymbolResolver();
    public LocationEnvironment get_EmptyEnvironment();
    public ActivityInstanceState get_State();
    [CompilerGeneratedAttribute]
public WorkflowIdentity get_WorkflowIdentity();
    [CompilerGeneratedAttribute]
internal void set_WorkflowIdentity(WorkflowIdentity value);
    public Guid get_WorkflowInstanceId();
    internal void set_WorkflowInstanceId(Guid value);
    public Exception get_TerminationException();
    public bool get_IsRunning();
    public bool get_IsPersistable();
    public bool get_IsAbortPending();
    public bool get_IsIdle();
    public bool get_IsTerminatePending();
    public bool get_KeysAllowed();
    public IDictionary`2<string, object> get_WorkflowOutputs();
    internal BookmarkScopeManager get_BookmarkScopeManager();
    internal BookmarkScopeManager get_RawBookmarkScopeManager();
    internal BookmarkManager get_RawBookmarkManager();
    internal MappableObjectManager get_MappableObjectManager();
    public bool get_RequiresTransactionContextWaiterExists();
    public bool get_HasRuntimeTransaction();
    public Transaction get_CurrentTransaction();
    internal BookmarkManager get_SerializedBookmarkManager();
    internal void set_SerializedBookmarkManager(BookmarkManager value);
    internal BookmarkScopeManager get_SerializedBookmarkScopeManager();
    internal void set_SerializedBookmarkScopeManager(BookmarkScopeManager value);
    internal bool get_SerializedHasTrackedStarted();
    internal void set_SerializedHasTrackedStarted(bool value);
    internal long get_SerializedNextTrackingRecordNumber();
    internal void set_SerializedNextTrackingRecordNumber(long value);
    internal ActivityInstance get_SerializedRootInstance();
    internal void set_SerializedRootInstance(ActivityInstance value);
    internal Scheduler get_SerializedScheduler();
    internal void set_SerializedScheduler(Scheduler value);
    internal bool get_SerializedShouldRaiseMainBodyComplete();
    internal void set_SerializedShouldRaiseMainBodyComplete(bool value);
    internal long get_SerializedLastInstanceId();
    internal void set_SerializedLastInstanceId(long value);
    internal LocationEnvironment get_SerializedRootEnvironment();
    internal void set_SerializedRootEnvironment(LocationEnvironment value);
    internal IDictionary`2<string, object> get_SerializedWorkflowOutputs();
    internal void set_SerializedWorkflowOutputs(IDictionary`2<string, object> value);
    internal Bookmark get_SerializedMainRootCompleteBookmark();
    internal void set_SerializedMainRootCompleteBookmark(Bookmark value);
    internal ActivityInstanceState get_SerializedExecutionState();
    internal void set_SerializedExecutionState(ActivityInstanceState value);
    internal List`1<Handle> get_SerializedHandles();
    internal void set_SerializedHandles(List`1<Handle> value);
    internal bool get_PersistExceptions();
    internal Exception get_SerializedCompletionException();
    internal void set_SerializedCompletionException(Exception value);
    internal TransactionContextWaiter[] get_SerializedTransactionContextWaiters();
    internal void set_SerializedTransactionContextWaiters(TransactionContextWaiter[] value);
    internal Queue`1<PersistenceWaiter> get_SerializedPersistenceWaiters();
    internal void set_SerializedPersistenceWaiters(Queue`1<PersistenceWaiter> value);
    internal List`1<ActivityInstance> get_SerializedExecutingSecondaryRootInstances();
    internal void set_SerializedExecutingSecondaryRootInstances(List`1<ActivityInstance> value);
    internal MappableObjectManager get_SerializedMappableObjectManager();
    internal void set_SerializedMappableObjectManager(MappableObjectManager value);
    internal ActivityInstanceMap get_SerializedProgramMapping();
    internal void set_SerializedProgramMapping(ActivityInstanceMap value);
    internal ExecutionPropertyManager get_RootPropertyManager();
    internal ExecutionPropertyManager get_SerializedPropertyManager();
    internal void set_SerializedPropertyManager(ExecutionPropertyManager value);
    public void ThrowIfNonSerializable();
    public void MakeNonSerializable();
    public IList`1<ActivityBlockingUpdate> GetActivitiesBlockingUpdate(DynamicUpdateMap updateMap);
    public void UpdateInstancePhase1(DynamicUpdateMap updateMap, Activity targetDefinition, Collection`1& updateErrors);
    public void UpdateInstancePhase2(DynamicUpdateMap updateMap, Collection`1& updateErrors);
    internal List`1<Handle> get_Handles();
    public void ExecuteInResolutionContextUntyped(ActivityInstance parentInstance, ActivityWithResult expressionActivity, long instanceId, Location resultLocation);
    public T ExecuteInResolutionContext(ActivityInstance parentInstance, Activity`1<T> expressionActivity);
    internal void ExecuteSynchronousWorkItem(WorkItem workItem);
    internal void ExitNoPersistForExceptionPropagation();
    internal Location GetIgnorableResultLocation(RuntimeArgument resultArgument);
    public void DebugActivityCompleted(ActivityInstance instance);
    public void AddTrackingRecord(TrackingRecord record);
    public bool ShouldTrackActivity(string name);
    public IAsyncResult BeginTrackPendingRecords(AsyncCallback callback, object state);
    public void EndTrackPendingRecords(IAsyncResult result);
    internal IDictionary`2<string, LocationInfo> GatherMappableVariables();
    internal void OnSchedulerThreadAcquired();
    public void Dispose();
    public void PauseWhenPersistable();
    public void EnterNoPersist();
    public void ExitNoPersist();
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Commit(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.InDoubt(Enlistment enlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Prepare(PreparingEnlistment preparingEnlistment);
    private sealed virtual override void System.Transactions.IEnlistmentNotification.Rollback(Enlistment enlistment);
    public void RequestTransactionContext(ActivityInstance instance, bool isRequires, RuntimeTransactionHandle handle, Action`2<NativeActivityTransactionContext, object> callback, object state);
    public void SetTransaction(RuntimeTransactionHandle handle, Transaction transaction, ActivityInstance isolationScope, ActivityInstance transactionOwner);
    public void CompleteTransaction(RuntimeTransactionHandle handle, BookmarkCallback callback, ActivityInstance callbackOwner);
    public EmptyWorkItem CreateEmptyWorkItem(ActivityInstance instance);
    public bool IsCompletingTransaction(ActivityInstance instance);
    public void TerminateSpecialExecutionBlocks(ActivityInstance terminatedInstance, Exception terminationReason);
    public bool Abort(Exception reason);
    public void AbortWorkflowInstance(Exception reason);
    public void ScheduleTerminate(Exception reason);
    public void Terminate(Exception reason);
    public void CancelRootActivity();
    public void CancelActivity(ActivityInstance activityInstance);
    internal ActivityInstanceReference CreateActivityInstanceReference(ActivityInstance toReference, ActivityInstance referenceOwner);
    internal void RethrowException(ActivityInstance fromInstance, FaultContext context);
    internal void OnDeserialized(Activity workflow, WorkflowInstance workflowInstance);
    public T GetExtension();
    internal RequestedAction TryExecuteNonEmptyWorkItem(WorkItem workItem);
    internal RequestedAction OnExecuteWorkItem(WorkItem workItem);
    internal IAsyncResult BeginAssociateKeys(ICollection`1<InstanceKey> keysToAssociate, AsyncCallback callback, object state);
    internal void EndAssociateKeys(IAsyncResult result);
    internal void DisassociateKeys(ICollection`1<InstanceKey> keysToDisassociate);
    internal void FinishWorkItem(WorkItem workItem);
    internal void FinishWorkItemAfterTracking(WorkItem workItem);
    internal void AbortActivityInstance(ActivityInstance instance, Exception reason);
    internal Exception CompleteActivityInstance(ActivityInstance targetInstance);
    internal bool TryGetPendingOperation(ActivityInstance instance, AsyncOperationContext& asyncContext);
    internal void CancelPendingOperation(ActivityInstance instance);
    internal void HandleRootCompletion(ActivityInstance completedInstance);
    internal void NotifyUnhandledException(Exception exception, ActivityInstance source);
    internal void OnSchedulerIdle();
    public void Open(SynchronizationContext synchronizationContext);
    public void PauseScheduler();
    public object PrepareForSerialization();
    public void RequestPersist(Bookmark onPersistBookmark, ActivityInstance requestingInstance);
    internal BookmarkResumptionResult TryResumeHostBookmark(Bookmark bookmark, object value);
    internal BookmarkResumptionResult TryResumeUserBookmark(Bookmark bookmark, object value, bool isExternal);
    internal ReadOnlyCollection`1<BookmarkInfo> GetAllBookmarks();
    internal ReadOnlyCollection`1<BookmarkInfo> GetBookmarks(BookmarkScope scope);
    internal IAsyncResult BeginResumeBookmark(Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);
    internal BookmarkResumptionResult EndResumeBookmark(IAsyncResult result);
    internal BookmarkResumptionResult TryResumeBookmark(Bookmark bookmark, object value, BookmarkScope scope);
    public void MarkSchedulerRunning();
    public void Run();
    internal void ScheduleItem(WorkItem workItem);
    public void ScheduleRootActivity(Activity activity, IDictionary`2<string, object> argumentValueOverrides, IList`1<Handle> hostProperties);
    public void RegisterMainRootCompleteCallback(Bookmark bookmark);
    public ActivityInstance ScheduleSecondaryRootActivity(Activity activity, LocationEnvironment environment);
    public ActivityInstance ScheduleActivity(Activity activity, ActivityInstance parent, CompletionBookmark completionBookmark, FaultBookmark faultBookmark, LocationEnvironment parentEnvironment);
    public ActivityInstance ScheduleDelegate(ActivityDelegate activityDelegate, IDictionary`2<string, object> inputParameters, ActivityInstance parent, LocationEnvironment executionEnvironment, CompletionBookmark completionBookmark, FaultBookmark faultBookmark);
    internal void ScheduleExpression(ActivityWithResult activity, ActivityInstance parent, LocationEnvironment parentEnvironment, Location resultLocation, ResolveNextArgumentWorkItem nextArgumentWorkItem);
    internal void ScheduleExpressionFaultPropagation(Activity activity, long instanceId, ActivityInstance parent, Exception exception);
    internal void ScheduleBody(ActivityInstance activityInstance, bool requiresSymbolResolution, IDictionary`2<string, object> argumentValueOverrides, Location resultLocation);
    public NoPersistProperty CreateNoPersistProperty();
    public AsyncOperationContext SetupAsyncOperationBlock(ActivityInstance owningActivity);
    public void CompleteOperation(ActivityInstance owningInstance, BookmarkCallback callback, object state);
    public void CompleteOperation(WorkItem asyncCompletionWorkItem);
    public void CompleteOperation(ActivityInstance owningInstance);
    internal void AddHandle(Handle handleToAdd);
}
[DataContractAttribute]
internal class System.Activities.Runtime.ActivityInstanceMap : object {
    [DataMemberAttribute]
internal InstanceList[] SerializedInstanceLists { get; internal set; }
    internal InstanceList[] get_SerializedInstanceLists();
    internal void set_SerializedInstanceLists(InstanceList[] value);
    public void GetActivitiesBlockingUpdate(DynamicUpdateMap updateMap, List`1<ActivityInstance> secondaryRootInstances, Collection`1& updateErrors);
    public void UpdateRawInstance(DynamicUpdateMap updateMap, Activity targetDefinition, List`1<ActivityInstance> secondaryRootInstances, Collection`1& updateErrors);
    public void UpdateInstanceByActivityParticipation(ActivityExecutor activityExecutor, DynamicUpdateMap rootMap, Collection`1& updateErrors);
    public void AddEntry(IActivityReference reference, bool skipIfDuplicate);
    public void AddEntry(IActivityReference reference);
    public void LoadActivityTree(Activity rootActivity, ActivityInstance rootInstance, List`1<ActivityInstance> secondaryRootInstances, ActivityExecutor executor);
    public bool RemoveEntry(IActivityReference reference);
}
[DataContractAttribute]
internal class System.Activities.Runtime.ActivityInstanceReference : object {
    [DataMemberAttribute]
internal ActivityInstance SerializedActivityInstance { get; internal set; }
    public ActivityInstance ActivityInstance { get; }
    internal ActivityInstanceReference(ActivityInstance activity);
    internal ActivityInstance get_SerializedActivityInstance();
    internal void set_SerializedActivityInstance(ActivityInstance value);
    private sealed virtual override Activity System.Activities.Runtime.ActivityInstanceMap.IActivityReference.get_Activity();
    public ActivityInstance get_ActivityInstance();
    private sealed virtual override void System.Activities.Runtime.ActivityInstanceMap.IActivityReference.Load(Activity activity, ActivityInstanceMap instanceMap);
}
[DataContractAttribute]
internal class System.Activities.Runtime.BookmarkCallbackWrapper : CallbackWrapper {
    public BookmarkOptions Options { get; private set; }
    [DataMemberAttribute]
public Bookmark Bookmark { get; public set; }
    [DataMemberAttribute]
internal BookmarkOptions SerializedOptions { get; internal set; }
    public BookmarkCallbackWrapper(BookmarkCallback callback, ActivityInstance owningInstance);
    public BookmarkCallbackWrapper(BookmarkCallback callback, ActivityInstance owningInstance, BookmarkOptions bookmarkOptions);
    private static BookmarkCallbackWrapper();
    public BookmarkOptions get_Options();
    private void set_Options(BookmarkOptions value);
    [CompilerGeneratedAttribute]
public Bookmark get_Bookmark();
    [CompilerGeneratedAttribute]
public void set_Bookmark(Bookmark value);
    internal BookmarkOptions get_SerializedOptions();
    internal void set_SerializedOptions(BookmarkOptions value);
    [SecuritySafeCriticalAttribute]
public void Invoke(NativeActivityContext context, Bookmark bookmark, object value);
    public ActivityExecutionWorkItem CreateWorkItem(ActivityExecutor executor, bool isExternal, Bookmark bookmark, object value);
}
[DataContractAttribute]
internal class System.Activities.Runtime.BookmarkList : HybridCollection`1<Bookmark> {
    internal bool Contains(Bookmark bookmark);
    internal void TransferBookmarks(Bookmark& singleItem, IList`1& multipleItems);
}
[DataContractAttribute]
internal class System.Activities.Runtime.BookmarkManager : object {
    public bool HasBookmarks { get; }
    [DataMemberAttribute]
internal long SerializedNextId { get; internal set; }
    [DataMemberAttribute]
internal Dictionary`2<Bookmark, BookmarkCallbackWrapper> SerializedBookmarks { get; internal set; }
    [DataMemberAttribute]
internal BookmarkScope SerializedScope { get; internal set; }
    [DataMemberAttribute]
internal BookmarkScopeHandle SerializedScopeHandle { get; internal set; }
    internal BookmarkManager(BookmarkScope scope, BookmarkScopeHandle scopeHandle);
    public bool get_HasBookmarks();
    internal long get_SerializedNextId();
    internal void set_SerializedNextId(long value);
    internal Dictionary`2<Bookmark, BookmarkCallbackWrapper> get_SerializedBookmarks();
    internal void set_SerializedBookmarks(Dictionary`2<Bookmark, BookmarkCallbackWrapper> value);
    internal BookmarkScope get_SerializedScope();
    internal void set_SerializedScope(BookmarkScope value);
    internal BookmarkScopeHandle get_SerializedScopeHandle();
    internal void set_SerializedScopeHandle(BookmarkScopeHandle value);
    public Bookmark CreateBookmark(string name, BookmarkCallback callback, ActivityInstance owningInstance, BookmarkOptions options);
    public Bookmark CreateBookmark(BookmarkCallback callback, ActivityInstance owningInstance, BookmarkOptions options);
    public Bookmark GenerateTempBookmark();
    public bool TryGetBookmarkFromInternalList(Bookmark bookmark, Bookmark& internalBookmark, BookmarkCallbackWrapper& callbackWrapper);
    public BookmarkResumptionResult TryGenerateWorkItem(ActivityExecutor executor, bool isExternal, Bookmark& bookmark, object value, ActivityInstance isolationInstance, ActivityExecutionWorkItem& workItem);
    public void PopulateBookmarkInfo(List`1<BookmarkInfo> bookmarks);
    public void PurgeBookmarks(Bookmark singleBookmark, IList`1<Bookmark> multipleBookmarks);
    internal void PurgeSingleBookmark(Bookmark bookmark);
    public bool Remove(Bookmark bookmark, ActivityInstance instanceAttemptingRemove);
}
[DataContractAttribute]
internal class System.Activities.Runtime.BookmarkScopeManager : object {
    public BookmarkScope Default { get; }
    public bool HasKeysToUpdate { get; }
    [DataMemberAttribute]
internal BookmarkScope SerializedDefaultScope { get; internal set; }
    [DataMemberAttribute]
internal long SerializedNextTemporaryId { get; internal set; }
    [DataMemberAttribute]
internal Dictionary`2<BookmarkScope, BookmarkManager> SerializedBookmarkManagers { get; internal set; }
    [DataMemberAttribute]
internal List`1<BookmarkScope> SerializedUninitializedScopes { get; internal set; }
    public BookmarkScope get_Default();
    public bool get_HasKeysToUpdate();
    internal BookmarkScope get_SerializedDefaultScope();
    internal void set_SerializedDefaultScope(BookmarkScope value);
    internal long get_SerializedNextTemporaryId();
    internal void set_SerializedNextTemporaryId(long value);
    internal Dictionary`2<BookmarkScope, BookmarkManager> get_SerializedBookmarkManagers();
    internal void set_SerializedBookmarkManagers(Dictionary`2<BookmarkScope, BookmarkManager> value);
    internal List`1<BookmarkScope> get_SerializedUninitializedScopes();
    internal void set_SerializedUninitializedScopes(List`1<BookmarkScope> value);
    public Bookmark CreateBookmark(string name, BookmarkScope scope, BookmarkCallback callback, ActivityInstance owningInstance, BookmarkOptions options);
    public bool RemoveBookmark(Bookmark bookmark, BookmarkScope scope, ActivityInstance instanceAttemptingRemove);
    public BookmarkResumptionResult TryGenerateWorkItem(ActivityExecutor executor, Bookmark& bookmark, BookmarkScope scope, object value, ActivityInstance isolationInstance, bool nonScopedBookmarksExist, ActivityExecutionWorkItem& workItem);
    public void PopulateBookmarkInfo(List`1& bookmarks);
    public ReadOnlyCollection`1<BookmarkInfo> GetBookmarks(BookmarkScope scope);
    public ICollection`1<InstanceKey> GetKeysToAssociate();
    public ICollection`1<InstanceKey> GetKeysToDisassociate();
    public void InitializeScope(BookmarkScope scope, Guid id);
    public BookmarkScope InitializeBookmarkScopeWithoutKeyAssociation(BookmarkScope scope, Guid id);
    public BookmarkScope CreateAndRegisterScope(Guid scopeId);
    internal BookmarkScope CreateAndRegisterScope(Guid scopeId, BookmarkScopeHandle scopeHandle);
    public void UnregisterScope(BookmarkScope scope);
    public bool IsExclusiveScopeUnstable(Bookmark bookmark);
    public void PurgeBookmarks(BookmarkManager nonScopedBookmarkManager, Bookmark singleBookmark, IList`1<Bookmark> multipleBookmarks);
}
[DataContractAttribute]
internal class System.Activities.Runtime.BookmarkWorkItem : ActivityExecutionWorkItem {
    [DataMemberAttribute]
internal BookmarkCallbackWrapper SerializedCallbackWrapper { get; internal set; }
    [DataMemberAttribute]
internal Bookmark SerializedBookmark { get; internal set; }
    [DataMemberAttribute]
internal object SerializedState { get; internal set; }
    public BookmarkWorkItem(ActivityExecutor executor, bool isExternal, BookmarkCallbackWrapper callbackWrapper, Bookmark bookmark, object value);
    protected BookmarkWorkItem(BookmarkCallbackWrapper callbackWrapper, Bookmark bookmark, object value);
    internal BookmarkCallbackWrapper get_SerializedCallbackWrapper();
    internal void set_SerializedCallbackWrapper(BookmarkCallbackWrapper value);
    internal Bookmark get_SerializedBookmark();
    internal void set_SerializedBookmark(Bookmark value);
    internal object get_SerializedState();
    internal void set_SerializedState(object value);
    public virtual void TraceCompleted();
    public virtual void TraceScheduled();
    public virtual void TraceStarting();
    public virtual bool Execute(ActivityExecutor executor, BookmarkManager bookmarkManager);
}
[DataContractAttribute]
internal class System.Activities.Runtime.CallbackWrapper : object {
    public ActivityInstance ActivityInstance { get; private set; }
    protected bool IsCallbackNull { get; }
    protected Delegate Callback { get; }
    [DataMemberAttribute]
internal string SerializedCallbackName { get; internal set; }
    [DataMemberAttribute]
internal string SerializedDeclaringAssemblyName { get; internal set; }
    [DataMemberAttribute]
internal string SerializedDeclaringTypeName { get; internal set; }
    [DataMemberAttribute]
internal ActivityInstance SerializedActivityInstance { get; internal set; }
    public CallbackWrapper(Delegate callback, ActivityInstance owningInstance);
    private static CallbackWrapper();
    public ActivityInstance get_ActivityInstance();
    private void set_ActivityInstance(ActivityInstance value);
    protected bool get_IsCallbackNull();
    protected Delegate get_Callback();
    internal string get_SerializedCallbackName();
    internal void set_SerializedCallbackName(string value);
    internal string get_SerializedDeclaringAssemblyName();
    internal void set_SerializedDeclaringAssemblyName(string value);
    internal string get_SerializedDeclaringTypeName();
    internal void set_SerializedDeclaringTypeName(string value);
    internal ActivityInstance get_SerializedActivityInstance();
    internal void set_SerializedActivityInstance(ActivityInstance value);
    public static bool IsValidCallback(Delegate callback, ActivityInstance owningInstance);
    [SecurityCriticalAttribute]
protected void EnsureCallback(Type delegateType, Type[] parameterTypes, Type genericParameter);
    [SecuritySafeCriticalAttribute]
protected void ValidateCallbackResolution(Type delegateType, Type[] parameterTypes, Type genericParameter);
    [SecurityCriticalAttribute]
protected void EnsureCallback(Type delegateType, Type[] parameters);
    [OnSerializingAttribute]
internal void OnSerializing(StreamingContext context);
    protected virtual void OnSerializingGenericCallback();
}
[DataContractAttribute]
internal class System.Activities.Runtime.CollapseTemporaryResolutionLocationWorkItem : WorkItem {
    public bool IsValid { get; }
    public ActivityInstance PropertyManagerOwner { get; }
    [DataMemberAttribute]
internal Location SerializedLocation { get; internal set; }
    public CollapseTemporaryResolutionLocationWorkItem(Location location, ActivityInstance instance);
    public virtual bool get_IsValid();
    public virtual ActivityInstance get_PropertyManagerOwner();
    internal Location get_SerializedLocation();
    internal void set_SerializedLocation(Location value);
    public virtual void TraceScheduled();
    public virtual void TraceStarting();
    public virtual void TraceCompleted();
    public virtual bool Execute(ActivityExecutor executor, BookmarkManager bookmarkManager);
    public virtual void PostProcess(ActivityExecutor executor);
}
[DataContractAttribute]
internal class System.Activities.Runtime.CompletionBookmark : object {
    [DataMemberAttribute]
internal CompletionCallbackWrapper SerializedCallbackWrapper { get; internal set; }
    public CompletionBookmark(CompletionCallbackWrapper callbackWrapper);
    internal CompletionCallbackWrapper get_SerializedCallbackWrapper();
    internal void set_SerializedCallbackWrapper(CompletionCallbackWrapper value);
    public void CheckForCancelation();
    public WorkItem GenerateWorkItem(ActivityInstance completedInstance, ActivityExecutor executor);
}
[KnownTypeAttribute("System.Activities.Runtime.ActivityCompletionCallbackWrapper")]
[KnownTypeAttribute("System.Activities.Runtime.DelegateCompletionCallbackWrapper")]
[DataContractAttribute]
internal abstract class System.Activities.Runtime.CompletionCallbackWrapper : CallbackWrapper {
    protected bool NeedsToGatherOutputs { get; protected set; }
    [DataMemberAttribute]
internal bool SerializedCheckForCancelation { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedNeedsToGatherOutputs { get; internal set; }
    protected CompletionCallbackWrapper(Delegate callback, ActivityInstance owningInstance);
    private static CompletionCallbackWrapper();
    protected bool get_NeedsToGatherOutputs();
    protected void set_NeedsToGatherOutputs(bool value);
    internal bool get_SerializedCheckForCancelation();
    internal void set_SerializedCheckForCancelation(bool value);
    internal bool get_SerializedNeedsToGatherOutputs();
    internal void set_SerializedNeedsToGatherOutputs(bool value);
    public void CheckForCancelation();
    protected virtual void GatherOutputs(ActivityInstance completedInstance);
    internal WorkItem CreateWorkItem(ActivityInstance completedInstance, ActivityExecutor executor);
    [SecuritySafeCriticalAttribute]
protected internal abstract virtual void Invoke(NativeActivityContext context, ActivityInstance completedInstance);
}
[DataContractAttribute]
internal class System.Activities.Runtime.DelegateCompletionCallbackWrapper : CompletionCallbackWrapper {
    [DataMemberAttribute]
internal Dictionary`2<string, object> SerializedResults { get; internal set; }
    public DelegateCompletionCallbackWrapper(DelegateCompletionCallback callback, ActivityInstance owningInstance);
    private static DelegateCompletionCallbackWrapper();
    internal Dictionary`2<string, object> get_SerializedResults();
    internal void set_SerializedResults(Dictionary`2<string, object> value);
    protected virtual void GatherOutputs(ActivityInstance completedInstance);
    [SecuritySafeCriticalAttribute]
protected internal virtual void Invoke(NativeActivityContext context, ActivityInstance completedInstance);
}
[DataContractAttribute]
internal class System.Activities.Runtime.EmptyWithCancelationCheckWorkItem : ActivityExecutionWorkItem {
    [DataMemberAttribute]
internal ActivityInstance SerializedCompletedInstance { get; internal set; }
    public EmptyWithCancelationCheckWorkItem(ActivityInstance activityInstance, ActivityInstance completedInstance);
    internal ActivityInstance get_SerializedCompletedInstance();
    internal void set_SerializedCompletedInstance(ActivityInstance value);
    public virtual void TraceCompleted();
    public virtual void TraceScheduled();
    public virtual void TraceStarting();
    public virtual bool Execute(ActivityExecutor executor, BookmarkManager bookmarkManager);
    public virtual void PostProcess(ActivityExecutor executor);
}
[DataContractAttribute]
internal class System.Activities.Runtime.EmptyWorkItem : ActivityExecutionWorkItem {
    public void Initialize(ActivityInstance activityInstance);
    protected virtual void ReleaseToPool(ActivityExecutor executor);
    public virtual void TraceCompleted();
    public virtual void TraceScheduled();
    public virtual void TraceStarting();
    public virtual bool Execute(ActivityExecutor executor, BookmarkManager bookmarkManager);
}
[DataContractAttribute]
internal class System.Activities.Runtime.ExclusiveHandleList : HybridCollection`1<ExclusiveHandle> {
    internal bool Contains(ExclusiveHandle handle);
}
[DataContractAttribute]
internal class System.Activities.Runtime.ExecuteSynchronousExpressionWorkItem : ActivityExecutionWorkItem {
    [DataMemberAttribute]
internal long SerializedInstanceId { get; internal set; }
    [DataMemberAttribute]
internal ResolveNextArgumentWorkItem SerializedNextArgumentWorkItem { get; internal set; }
    [DataMemberAttribute]
internal Location SerializedResultLocation { get; internal set; }
    internal long get_SerializedInstanceId();
    internal void set_SerializedInstanceId(long value);
    internal ResolveNextArgumentWorkItem get_SerializedNextArgumentWorkItem();
    internal void set_SerializedNextArgumentWorkItem(ResolveNextArgumentWorkItem value);
    internal Location get_SerializedResultLocation();
    internal void set_SerializedResultLocation(Location value);
    private sealed virtual override Activity System.Activities.Runtime.ActivityInstanceMap.IActivityReference.get_Activity();
    public void Initialize(ActivityInstance parentInstance, ActivityWithResult expressionActivity, long instanceId, Location resultLocation, ResolveNextArgumentWorkItem nextArgumentWorkItem);
    public virtual void TraceScheduled();
    public virtual void TraceStarting();
    public virtual void TraceCompleted();
    public virtual bool Execute(ActivityExecutor executor, BookmarkManager bookmarkManager);
    private sealed virtual override void System.Activities.Runtime.ActivityInstanceMap.IActivityReference.Load(Activity activity, ActivityInstanceMap instanceMap);
    protected virtual void ReleaseToPool(ActivityExecutor executor);
}
[DataContractAttribute]
internal class System.Activities.Runtime.ExecutionPropertyManager : object {
    [DataMemberAttribute]
internal Dictionary`2<string, ExecutionProperty> SerializedProperties { get; internal set; }
    [DataMemberAttribute]
internal int SerializedExclusiveHandleCount { get; internal set; }
    internal Dictionary`2<string, ExecutionProperty> Properties { get; }
    internal bool HasExclusiveHandlesInScope { get; }
    public ExecutionPropertyManager(ActivityInstance owningInstance);
    public ExecutionPropertyManager(ActivityInstance owningInstance, ExecutionPropertyManager parentPropertyManager);
    internal ExecutionPropertyManager(ActivityInstance owningInstance, Dictionary`2<string, ExecutionProperty> properties);
    internal Dictionary`2<string, ExecutionProperty> get_SerializedProperties();
    internal void set_SerializedProperties(Dictionary`2<string, ExecutionProperty> value);
    internal int get_SerializedExclusiveHandleCount();
    internal void set_SerializedExclusiveHandleCount(int value);
    internal Dictionary`2<string, ExecutionProperty> get_Properties();
    internal bool get_HasExclusiveHandlesInScope();
    public object GetProperty(string name, IdSpace currentIdSpace);
    public IEnumerable`1<KeyValuePair`2<string, object>> GetFlattenedProperties(IdSpace currentIdSpace);
    internal List`1<T> FindAll();
    public void Add(string name, object property, IdSpace visibility);
    public void Remove(string name);
    public object GetPropertyAtCurrentScope(string name);
    public bool IsOwner(ActivityInstance instance);
    internal bool ShouldSerialize(ActivityInstance instance);
    public void SetupWorkflowThread();
    public void CleanupWorkflowThread(Exception& abortException);
    public void UnregisterProperties(ActivityInstance completedInstance, IdSpace currentIdSpace);
    public void UnregisterProperties(ActivityInstance completedInstance, IdSpace currentIdSpace, bool ignoreExceptions);
    public void ThrowIfAlreadyDefined(string name, ActivityInstance executingInstance);
    public void OnDeserialized(ActivityInstance owner, ActivityInstance parent, IdSpace visibility, ActivityExecutor executor);
}
[DataContractAttribute]
internal class System.Activities.Runtime.FaultBookmark : object {
    [DataMemberAttribute]
internal FaultCallbackWrapper SerializedCallbackWrapper { get; internal set; }
    public FaultBookmark(FaultCallbackWrapper callbackWrapper);
    internal FaultCallbackWrapper get_SerializedCallbackWrapper();
    internal void set_SerializedCallbackWrapper(FaultCallbackWrapper value);
    public WorkItem GenerateWorkItem(Exception propagatedException, ActivityInstance propagatedFrom, ActivityInstanceReference originalExceptionSource);
}
[DataContractAttribute]
internal class System.Activities.Runtime.FaultCallbackWrapper : CallbackWrapper {
    public FaultCallbackWrapper(FaultCallback callback, ActivityInstance owningInstance);
    private static FaultCallbackWrapper();
    [SecuritySafeCriticalAttribute]
public void Invoke(NativeActivityFaultContext faultContext, Exception propagatedException, ActivityInstance propagatedFrom);
    public WorkItem CreateWorkItem(Exception propagatedException, ActivityInstance propagatedFrom, ActivityInstanceReference originalExceptionSource);
}
[DataContractAttribute]
internal class System.Activities.Runtime.FaultContext : object {
    public Exception Exception { get; private set; }
    public ActivityInstanceReference Source { get; private set; }
    [DataMemberAttribute]
internal Exception SerializedException { get; internal set; }
    [DataMemberAttribute]
internal ActivityInstanceReference SerializedSource { get; internal set; }
    internal FaultContext(Exception exception, ActivityInstanceReference sourceReference);
    public Exception get_Exception();
    private void set_Exception(Exception value);
    public ActivityInstanceReference get_Source();
    private void set_Source(ActivityInstanceReference value);
    internal Exception get_SerializedException();
    internal void set_SerializedException(Exception value);
    internal ActivityInstanceReference get_SerializedSource();
    internal void set_SerializedSource(ActivityInstanceReference value);
}
[DataContractAttribute]
internal class System.Activities.Runtime.FuncCompletionCallbackWrapper`1 : CompletionCallbackWrapper {
    [DataMemberAttribute]
internal T SerializedResultValue { get; internal set; }
    public FuncCompletionCallbackWrapper`1(CompletionCallback`1<T> callback, ActivityInstance owningInstance);
    private static FuncCompletionCallbackWrapper`1();
    internal T get_SerializedResultValue();
    internal void set_SerializedResultValue(T value);
    protected virtual void GatherOutputs(ActivityInstance completedInstance);
    [SecuritySafeCriticalAttribute]
protected internal virtual void Invoke(NativeActivityContext context, ActivityInstance completedInstance);
    protected virtual void OnSerializingGenericCallback();
}
[DataContractAttribute]
internal class System.Activities.Runtime.LocationEnvironment : object {
    [DataMemberAttribute]
internal Location[] SerializedLocations { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedHasMappableLocations { get; internal set; }
    [DataMemberAttribute]
internal LocationEnvironment SerializedParent { get; internal set; }
    [DataMemberAttribute]
internal Location SerializedSingleLocation { get; internal set; }
    [DataMemberAttribute]
internal List`1<Handle> SerializedHandles { get; internal set; }
    [DataMemberAttribute]
internal int SerializedReferenceCountMinusOne { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedHasOwnerCompleted { get; internal set; }
    internal Activity Definition { get; private set; }
    internal LocationEnvironment Parent { get; internal set; }
    internal bool HasHandles { get; }
    internal bool ShouldDispose { get; }
    internal bool HasOwnerCompleted { get; }
    internal List`1<Handle> Handles { get; }
    internal LocationEnvironment(LocationEnvironment parent, int capacity);
    internal LocationEnvironment(ActivityExecutor executor, Activity definition);
    internal LocationEnvironment(ActivityExecutor executor, Activity definition, LocationEnvironment parent, int capacity);
    private static LocationEnvironment();
    internal Location[] get_SerializedLocations();
    internal void set_SerializedLocations(Location[] value);
    internal bool get_SerializedHasMappableLocations();
    internal void set_SerializedHasMappableLocations(bool value);
    internal LocationEnvironment get_SerializedParent();
    internal void set_SerializedParent(LocationEnvironment value);
    internal Location get_SerializedSingleLocation();
    internal void set_SerializedSingleLocation(Location value);
    internal List`1<Handle> get_SerializedHandles();
    internal void set_SerializedHandles(List`1<Handle> value);
    internal int get_SerializedReferenceCountMinusOne();
    internal void set_SerializedReferenceCountMinusOne(int value);
    internal bool get_SerializedHasOwnerCompleted();
    internal void set_SerializedHasOwnerCompleted(bool value);
    [CompilerGeneratedAttribute]
internal Activity get_Definition();
    [CompilerGeneratedAttribute]
private void set_Definition(Activity value);
    internal LocationEnvironment get_Parent();
    internal void set_Parent(LocationEnvironment value);
    internal bool get_HasHandles();
    internal bool get_ShouldDispose();
    internal bool get_HasOwnerCompleted();
    private sealed virtual override Activity System.Activities.Runtime.ActivityInstanceMap.IActivityReference.get_Activity();
    internal List`1<Handle> get_Handles();
    private sealed virtual override void System.Activities.Runtime.ActivityInstanceMap.IActivityReference.Load(Activity activity, ActivityInstanceMap instanceMap);
    private sealed virtual override void System.Activities.Runtime.ActivityInstanceMap.IActivityReferenceWithEnvironment.UpdateEnvironment(EnvironmentUpdateMap map, Activity activity);
    internal void AddReference();
    internal void RemoveReference(bool isOwner);
    internal void OnDeserialized(ActivityExecutor executor, ActivityInstance handleScope);
    internal void ReinitializeHandles(ActivityInstance handleScope);
    internal void Dispose();
    internal void AddHandle(Handle handleToAdd);
    internal void UninitializeHandles(ActivityInstance scope);
    internal void DeclareHandle(LocationReference locationReference, Location location, ActivityInstance activityInstance);
    internal void DeclareTemporaryLocation(LocationReference locationReference, ActivityInstance activityInstance, bool bufferGetsOnCollapse);
    internal void Declare(LocationReference locationReference, Location location, ActivityInstance activityInstance);
    internal Location`1<T> GetSpecificLocation(int id);
    internal Location GetSpecificLocation(int id);
    internal void CollapseTemporaryResolutionLocations();
    internal void CollapseTemporaryResolutionLocation(Location location);
    internal bool TryGetLocation(int id, Location& value);
    internal bool TryGetLocation(int id, Activity environmentOwner, Location& value);
    internal void Update(EnvironmentUpdateMap map, Activity activity);
}
[DataContractAttribute]
internal class System.Activities.Runtime.MappableObjectManager : object {
    public int Count { get; }
    [DataMemberAttribute]
internal List`1<MappableLocation> SerializedMappableLocations { get; internal set; }
    public int get_Count();
    internal List`1<MappableLocation> get_SerializedMappableLocations();
    internal void set_SerializedMappableLocations(List`1<MappableLocation> value);
    public IDictionary`2<string, LocationInfo> GatherMappableVariables();
    public void Register(Location location, Activity activity, LocationReference locationOwner, ActivityInstance activityInstance);
    public void Unregister(Location location);
}
internal abstract class System.Activities.Runtime.Pool`1 : object {
    public Pool`1(int poolSize);
    public T Acquire();
    protected abstract virtual T CreateNew();
    public void Release(T item);
}
[DataContractAttribute]
internal class System.Activities.Runtime.ResolveNextArgumentWorkItem : ActivityExecutionWorkItem {
    [DataMemberAttribute]
internal int SerializedNextArgumentIndex { get; internal set; }
    [DataMemberAttribute]
internal IDictionary`2<string, object> SerializedArgumentValueOverrides { get; internal set; }
    [DataMemberAttribute]
internal Location SerializedResultLocation { get; internal set; }
    internal int get_SerializedNextArgumentIndex();
    internal void set_SerializedNextArgumentIndex(int value);
    internal IDictionary`2<string, object> get_SerializedArgumentValueOverrides();
    internal void set_SerializedArgumentValueOverrides(IDictionary`2<string, object> value);
    internal Location get_SerializedResultLocation();
    internal void set_SerializedResultLocation(Location value);
    public virtual void TraceScheduled();
    public virtual void TraceStarting();
    public virtual void TraceCompleted();
    public void Initialize(ActivityInstance activityInstance, int nextArgumentIndex, IDictionary`2<string, object> argumentValueOverrides, Location resultLocation);
    internal bool CanExecuteUserCode();
    protected virtual void ReleaseToPool(ActivityExecutor executor);
    public virtual bool Execute(ActivityExecutor executor, BookmarkManager bookmarkManager);
}
[DataContractAttribute]
internal class System.Activities.Runtime.Scheduler : object {
    public static RequestedAction Continue { get; }
    public static RequestedAction YieldSilently { get; }
    public static RequestedAction Abort { get; }
    public bool IsRunning { get; }
    public bool IsIdle { get; }
    [DataMemberAttribute]
internal WorkItem SerializedFirstWorkItem { get; internal set; }
    [DataMemberAttribute]
internal WorkItem[] SerializedWorkItemQueue { get; internal set; }
    public Scheduler(Callbacks callbacks);
    private static Scheduler();
    public static RequestedAction get_Continue();
    public static RequestedAction get_YieldSilently();
    public static RequestedAction get_Abort();
    public bool get_IsRunning();
    public bool get_IsIdle();
    internal WorkItem get_SerializedFirstWorkItem();
    internal void set_SerializedFirstWorkItem(WorkItem value);
    internal WorkItem[] get_SerializedWorkItemQueue();
    internal void set_SerializedWorkItemQueue(WorkItem[] value);
    public void FillInstanceMap(ActivityInstanceMap instanceMap);
    public static RequestedAction CreateNotifyUnhandledExceptionAction(Exception exception, ActivityInstance sourceInstance);
    public void ClearAllWorkItems(ActivityExecutor executor);
    public void OnDeserialized(Callbacks callbacks);
    public void InternalResume(RequestedAction action);
    public void Open(SynchronizationContext synchronizationContext);
    internal void Open(Scheduler oldScheduler);
    public void Pause();
    public void MarkRunning();
    public void Resume();
    public void PushWork(WorkItem workItem);
    public void EnqueueWork(WorkItem workItem);
}
[DataContractAttribute]
internal abstract class System.Activities.Runtime.WorkItem : object {
    protected Exception workflowAbortException;
    public ActivityInstance ActivityInstance { get; }
    public Exception WorkflowAbortException { get; }
    public Exception ExceptionToPropagate { get; public set; }
    public ActivityInstance PropertyManagerOwner { get; }
    public ActivityInstance OriginalExceptionSource { get; }
    public bool IsEmpty { get; protected set; }
    public bool ExitNoPersistRequired { get; protected set; }
    protected bool IsPooled { get; protected set; }
    public bool IsValid { get; }
    [DataMemberAttribute]
internal ActivityInstance SerializedActivityInstance { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedIsEmpty { get; internal set; }
    protected WorkItem(ActivityInstance activityInstance);
    public ActivityInstance get_ActivityInstance();
    public Exception get_WorkflowAbortException();
    public Exception get_ExceptionToPropagate();
    public void set_ExceptionToPropagate(Exception value);
    public abstract virtual ActivityInstance get_PropertyManagerOwner();
    public virtual ActivityInstance get_OriginalExceptionSource();
    public bool get_IsEmpty();
    protected void set_IsEmpty(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExitNoPersistRequired();
    [CompilerGeneratedAttribute]
protected void set_ExitNoPersistRequired(bool value);
    [CompilerGeneratedAttribute]
protected bool get_IsPooled();
    [CompilerGeneratedAttribute]
protected void set_IsPooled(bool value);
    public abstract virtual bool get_IsValid();
    internal ActivityInstance get_SerializedActivityInstance();
    internal void set_SerializedActivityInstance(ActivityInstance value);
    internal bool get_SerializedIsEmpty();
    internal void set_SerializedIsEmpty(bool value);
    public void Dispose(ActivityExecutor executor);
    protected virtual void ClearForReuse();
    protected virtual void Reinitialize(ActivityInstance activityInstance);
    protected virtual void ReleaseToPool(ActivityExecutor executor);
    public void ExceptionPropagated();
    public void Release(ActivityExecutor executor);
    public abstract virtual void TraceScheduled();
    protected void TraceRuntimeWorkItemScheduled();
    public abstract virtual void TraceStarting();
    protected void TraceRuntimeWorkItemStarting();
    public abstract virtual void TraceCompleted();
    protected void TraceRuntimeWorkItemCompleted();
    public abstract virtual bool Execute(ActivityExecutor executor, BookmarkManager bookmarkManager);
    public abstract virtual void PostProcess(ActivityExecutor executor);
    public bool FlushBookmarkScopeKeys(ActivityExecutor executor);
    public bool FlushTracking(ActivityExecutor executor);
}
public class System.Activities.RuntimeArgument : LocationReference {
    internal static IComparer`1<RuntimeArgument> EvaluationOrderComparer { get; }
    protected string NameCore { get; }
    protected Type TypeCore { get; }
    public ArgumentDirection Direction { get; private set; }
    public bool IsRequired { get; private set; }
    public ReadOnlyCollection`1<string> OverloadGroupNames { get; }
    internal Activity Owner { get; private set; }
    internal bool IsInTree { get; }
    internal bool IsBound { get; }
    internal bool IsEvaluationOrderSpecified { get; }
    internal Argument BoundArgument { get; internal set; }
    internal bool IsResult { get; }
    public RuntimeArgument(string name, Type argumentType, ArgumentDirection direction);
    public RuntimeArgument(string name, Type argumentType, ArgumentDirection direction, List`1<string> overloadGroupNames);
    public RuntimeArgument(string name, Type argumentType, ArgumentDirection direction, bool isRequired);
    public RuntimeArgument(string name, Type argumentType, ArgumentDirection direction, bool isRequired, List`1<string> overloadGroupNames);
    internal RuntimeArgument(string name, Type argumentType, ArgumentDirection direction, bool isRequired, List`1<string> overloadGroups, PropertyDescriptor bindingProperty, object propertyOwner);
    internal RuntimeArgument(string name, Type argumentType, ArgumentDirection direction, bool isRequired, List`1<string> overloadGroups, Argument argument);
    internal static IComparer`1<RuntimeArgument> get_EvaluationOrderComparer();
    protected virtual string get_NameCore();
    protected virtual Type get_TypeCore();
    [CompilerGeneratedAttribute]
public ArgumentDirection get_Direction();
    [CompilerGeneratedAttribute]
private void set_Direction(ArgumentDirection value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
private void set_IsRequired(bool value);
    public ReadOnlyCollection`1<string> get_OverloadGroupNames();
    [CompilerGeneratedAttribute]
internal Activity get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(Activity value);
    internal bool get_IsInTree();
    internal bool get_IsBound();
    internal bool get_IsEvaluationOrderSpecified();
    internal Argument get_BoundArgument();
    internal void set_BoundArgument(Argument value);
    internal bool get_IsResult();
    internal void SetupBinding(Activity owningElement, bool createEmptyBinding);
    internal bool InitializeRelationship(Activity parent, IList`1& validationErrors);
    internal bool TryPopulateValue(LocationEnvironment targetEnvironment, ActivityInstance targetActivityInstance, ActivityExecutor executor, object argumentValueOverride, Location resultLocation, bool skipFastPath);
    public virtual Location GetLocation(ActivityContext context);
    public object Get(ActivityContext context);
    public T Get(ActivityContext context);
    public void Set(ActivityContext context, object value);
    internal Location InternalGetLocation(LocationEnvironment environment);
    internal void ThrowIfNotInTree();
}
public class System.Activities.RuntimeDelegateArgument : object {
    public string Name { get; private set; }
    public Type Type { get; private set; }
    public ArgumentDirection Direction { get; private set; }
    public DelegateArgument BoundArgument { get; private set; }
    public RuntimeDelegateArgument(string name, Type type, ArgumentDirection direction, DelegateArgument boundArgument);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(Type value);
    [CompilerGeneratedAttribute]
public ArgumentDirection get_Direction();
    [CompilerGeneratedAttribute]
private void set_Direction(ArgumentDirection value);
    [CompilerGeneratedAttribute]
public DelegateArgument get_BoundArgument();
    [CompilerGeneratedAttribute]
private void set_BoundArgument(DelegateArgument value);
}
[DataContractAttribute]
public class System.Activities.RuntimeTransactionHandle : Handle {
    public bool AbortInstanceOnTransactionFailure { get; public set; }
    public bool SuppressTransaction { get; public set; }
    [DataMemberAttribute]
internal ActivityExecutor SerializedExecutor { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedIsHandleInitialized { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedDoNotAbort { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedIsPropertyRegistered { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedIsSuppressed { get; internal set; }
    internal bool IsRuntimeOwnedTransaction { get; }
    public RuntimeTransactionHandle(Transaction rootTransaction);
    public bool get_AbortInstanceOnTransactionFailure();
    public void set_AbortInstanceOnTransactionFailure(bool value);
    public bool get_SuppressTransaction();
    public void set_SuppressTransaction(bool value);
    internal ActivityExecutor get_SerializedExecutor();
    internal void set_SerializedExecutor(ActivityExecutor value);
    internal bool get_SerializedIsHandleInitialized();
    internal void set_SerializedIsHandleInitialized(bool value);
    internal bool get_SerializedDoNotAbort();
    internal void set_SerializedDoNotAbort(bool value);
    internal bool get_SerializedIsPropertyRegistered();
    internal void set_SerializedIsPropertyRegistered(bool value);
    internal bool get_SerializedIsSuppressed();
    internal void set_SerializedIsSuppressed(bool value);
    internal bool get_IsRuntimeOwnedTransaction();
    public Transaction GetCurrentTransaction(NativeActivityContext context);
    public Transaction GetCurrentTransaction(CodeActivityContext context);
    public Transaction GetCurrentTransaction(AsyncCodeActivityContext context);
    protected virtual void OnInitialize(HandleInitializationContext context);
    protected virtual void OnUninitialize(HandleInitializationContext context);
    public void RequestTransactionContext(NativeActivityContext context, Action`2<NativeActivityTransactionContext, object> callback, object state);
    public void RequireTransactionContext(NativeActivityContext context, Action`2<NativeActivityTransactionContext, object> callback, object state);
    public void CompleteTransaction(NativeActivityContext context);
    public void CompleteTransaction(NativeActivityContext context, BookmarkCallback callback);
    private sealed virtual override void System.Activities.IExecutionProperty.SetupWorkflowThread();
    private sealed virtual override void System.Activities.IExecutionProperty.CleanupWorkflowThread();
    private sealed virtual override void System.Activities.IPropertyRegistrationCallback.Register(RegistrationContext context);
    private sealed virtual override void System.Activities.IPropertyRegistrationCallback.Unregister(RegistrationContext context);
}
internal class System.Activities.SR : object {
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string ActivityInstanceFixupFailed { get; }
    internal static string ActivityMapIsCorrupt { get; }
    internal static string AECDisposed { get; }
    internal static string HandleInitializationContextDisposed { get; }
    internal static string CannotGetValueOfOutArgument { get; }
    internal static string OverloadOnlyCallableFromWorkflowThread { get; }
    internal static string SameUserStateUsedForMultipleInvokes { get; }
    internal static string SendNotSupported { get; }
    internal static string InitializationIncomplete { get; }
    internal static string CannotSetValueOfInArgument { get; }
    internal static string CanOnlyCancelDirectChildren { get; }
    internal static string DictionaryIsReadOnly { get; }
    internal static string EnvironmentDisposed { get; }
    internal static string ResultCannotBeSetOnArgumentExpressions { get; }
    internal static string OutOfInternalBookmarks { get; }
    internal static string ConstVariableCannotBeSet { get; }
    internal static string InstanceStoreRequiredToPersist { get; }
    internal static string ControllerInvalidBeforeInitialize { get; }
    internal static string OperationAlreadyCompleted { get; }
    internal static string OnlyOneOperationPerActivity { get; }
    internal static string TrackingRelatedWorkflowAbort { get; }
    internal static string CannotUnregisterDefaultBookmarkScope { get; }
    internal static string DefaultAbortReason { get; }
    internal static string InstanceMustBePaused { get; }
    internal static string InstanceMustNotBePaused { get; }
    internal static string CannotSerializeVariableExpression { get; }
    internal static string RuntimeOperationInProgress { get; }
    internal static string RuntimeRunning { get; }
    internal static string BookmarksOnlyResumableWhileIdle { get; }
    internal static string CannotCompleteRuntimeOwnedTransaction { get; }
    internal static string OnlySingleCastDelegatesAllowed { get; }
    internal static string CannotPerformOperationFromHandlerThread { get; }
    internal static string InvalidIdleAction { get; }
    internal static string InvalidUnhandledExceptionAction { get; }
    internal static string MultiDimensionalArraysNotSupported { get; }
    internal static string WrongCacheMetadataForNativeActivity { get; }
    internal static string WrongOnCreateDynamicUpdateMapForNativeActivity { get; }
    internal static string WrongCacheMetadataForCodeActivity { get; }
    internal static string AsyncMethodsMustAllBeStaticOrInstance { get; }
    internal static string AsyncMethodsMustFromSameType { get; }
    internal static string InvalidStateForAsyncCallback { get; }
    internal static string EnumeratorNotStarted { get; }
    internal static string CannotInvokeOpenedActivity { get; }
    internal static string CannotPersistWhileDetached { get; }
    internal static string DirectLambdaParameterReference { get; }
    internal static string ActivityFailedToOpenBefore { get; }
    internal static string CannotAddHandlesUpdateError { get; }
    internal static string CopyToIndexOutOfRange { get; }
    internal static string CopyToRankMustBeOne { get; }
    internal static string CopyToNotEnoughSpaceInArray { get; }
    internal static string ArgumentNameRequired { get; }
    internal static string ProvidedStateInitializedForExecution { get; }
    internal static string OutOfIdSpaceIds { get; }
    internal static string InvalidActivityIdFormat { get; }
    internal static string InvalidLocationExpression { get; }
    internal static string InvalidTypeConverterUsage { get; }
    internal static string TooManyViolationsForExceptionMessage { get; }
    internal static string DefaultInvalidWorkflowExceptionMessage { get; }
    internal static string WrongNumberOfArgumentsForActivityDelegate { get; }
    internal static string AECForPropertiesHasBeenDisposed { get; }
    internal static string CannotAddOrRemoveWithChildren { get; }
    internal static string SetupOrCleanupWorkflowThreadThrew { get; }
    internal static string WorkItemAbortedInstance { get; }
    internal static string ValueMustBeAssignableToType { get; }
    internal static string ExternalLocationsGetOnly { get; }
    internal static string ResultArgumentMustBeBoundToResultProperty { get; }
    internal static string RootArgumentViolationsFoundNoInputs { get; }
    internal static string RootArgumentViolationsFound { get; }
    internal static string DefaultCancelationRequiresCancelHasBeenRequested { get; }
    internal static string AlreadySetupNoPersist { get; }
    internal static string HasExecutingChildrenNoPersist { get; }
    internal static string OutOfInstanceIds { get; }
    internal static string DelegateArgumentMustBeSet { get; }
    internal static string VariableMustBeSet { get; }
    internal static string CannotEnlistMultipleTransactions { get; }
    internal static string CannotPersistInsideIsolation { get; }
    internal static string CannotPersistInsideNoPersist { get; }
    internal static string CannotScheduleChildrenWhileEnteringIsolation { get; }
    internal static string CannotSetupIsolationInsideIsolation { get; }
    internal static string CannotSetupIsolationInsideNoPersist { get; }
    internal static string CannotSetupIsolationWithChildren { get; }
    internal static string EnlistedTransactionPropertiesRequireIsolationBlocks { get; }
    internal static string PrepareForSerializationRequiresPersistability { get; }
    internal static string PauseWhenPersistableInvalidIfPersistable { get; }
    internal static string CannotResetPropertyInDataContext { get; }
    internal static string CompilerError { get; }
    internal static string CannotModifyCatchAfterOpen { get; }
    internal static string BookmarkNotFoundGeneric { get; }
    internal static string BookmarkScopeAlreadyInitialized { get; }
    internal static string ExclusiveHandleRegisterBookmarkScopeFailed { get; }
    internal static string ExclusiveHandleReinitializeFailed { get; }
    internal static string CreateBookmarkScopeFailed { get; }
    internal static string CannotUnregisterNullBookmarkScope { get; }
    internal static string RegisteredBookmarkScopeRequired { get; }
    internal static string BookmarkScopesRequireKeys { get; }
    internal static string DebugInfoNotSkipArgumentResolution { get; }
    internal static string DebugInfoTryGetValueFailed { get; }
    internal static string RuntimeTransactionAlreadyExists { get; }
    internal static string RuntimeTransactionIsSuppressed { get; }
    internal static string NoRuntimeTransactionExists { get; }
    internal static string CannotSuppressAlreadyRegisteredHandle { get; }
    internal static string CannotSetRuntimeTransactionInNoPersist { get; }
    internal static string OnlyOneRequireTransactionContextAllowed { get; }
    internal static string ExtensionsCannotBeModified { get; }
    internal static string CannotWaitForIdleSynchronously { get; }
    internal static string BookmarkScopeHasBookmarks { get; }
    internal static string BookmarkScopeNotRegisteredForInitialize { get; }
    internal static string BookmarkScopeNotRegisteredForUnregister { get; }
    internal static string MarkCanceledOnlyCallableIfCancelRequested { get; }
    internal static string OnlyBookmarkOwnerCanRemove { get; }
    internal static string CanOnlyAbortDirectChildren { get; }
    internal static string DefaultWorkflowApplicationExceptionMessage { get; }
    internal static string BeginExecuteMustUseProvidedStateAsAsyncResultState { get; }
    internal static string BeginExecuteMustNotReturnANullAsyncResult { get; }
    internal static string CompensableActivityAlreadyConfirmedOrCompensated { get; }
    internal static string CannotCallAbortInstanceFromWorkflowThread { get; }
    internal static string BadCopyToArray { get; }
    internal static string ReadonlyNameScopeCannotBeUpdated { get; }
    internal static string SymbolResolverMustBeSingleton { get; }
    internal static string SymbolResolverAlreadyExists { get; }
    internal static string CanNotFindSymbolResolverInWorkflowInstanceExtensions { get; }
    internal static string UnmatchedNoPersistExit { get; }
    internal static string HandleNotInitialized { get; }
    internal static string TransactionHandleAlreadyHasTransaction { get; }
    internal static string CannotPerformOperationOnHandle { get; }
    internal static string SavingActivityToXamlNotSupported { get; }
    internal static string NoOverloadGroupsAreConfigured { get; }
    internal static string ErrorsEncounteredWhileProcessingTree { get; }
    internal static string RuntimeDelegateArgumentTypeIncorrect { get; }
    internal static string RuntimeDelegateArgumentDirectionIncorrect { get; }
    internal static string NoCAInSecondaryRoot { get; }
    internal static string CompensateWithNoTargetConstraint { get; }
    internal static string ConfirmWithNoTargetConstraint { get; }
    internal static string UnInitializedRuntimeTransactionHandle { get; }
    internal static string ArgumentTypeCannotBeNull { get; }
    internal static string AbortingDueToInstanceTimeout { get; }
    internal static string InvalidLValueExpression { get; }
    internal static string CantFindTimerExtension { get; }
    internal static string InstanceMethodCallRequiresTargetObject { get; }
    internal static string NewArrayBoundsRequiresIntegralArguments { get; }
    internal static string NewArrayRequiresArrayTypeAsResultType { get; }
    internal static string ExpressionRequiredForConversion { get; }
    internal static string OverloadingMethodMustBeStatic { get; }
    internal static string IsolationLevelValidation { get; }
    internal static string AbortInstanceOnTransactionFailureDoesNotMatch { get; }
    internal static string CannotChangeAbortInstanceFlagAfterPropertyRegistration { get; }
    internal static string CompensableActivityInsideTransactionScopeActivity { get; }
    internal static string WorkflowTerminatedExceptionDefaultMessage { get; }
    internal static string XamlElementExpected { get; }
    internal static string InvalidRuntimeState { get; }
    internal static string InstanceStoreFailed { get; }
    internal static string LoadingWorkflowApplicationRequiresInstanceStore { get; }
    internal static string WorkflowApplicationAlreadyHasId { get; }
    internal static string CannotUseInputsWithLoad { get; }
    internal static string ArgumentMustbePropertyofWorkflowElement { get; }
    internal static string TimerExtensionAlreadyAttached { get; }
    internal static string TimerExtensionRequiresWorkflowInstance { get; }
    internal static string RuntimeArgumentNotCreated { get; }
    internal static string InvalidEvaluationOrderValue { get; }
    internal static string LambdaNotXamlSerializable { get; }
    internal static string InvalidVisualBasicSettingsValue { get; }
    internal static string EmptyGuidOnDeserializedInstance { get; }
    internal static string NoRunnableInstances { get; }
    internal static string AbortingDueToLoadFailure { get; }
    internal static string TryLoadRequiresOwner { get; }
    internal static string GetRunnableRequiresOwner { get; }
    internal static string MustMatchReferenceExpressionReturnType { get; }
    internal static string PublicEnvironmentAccessToNonGenericActivity { get; }
    internal static string SavingFuncToXamlNotSupported { get; }
    internal static string CSharpExpressionsMustBeCompiled { get; }
    internal static string ActivityNotICompiledExpressionRoot { get; }
    internal static string BadWorkflowIdentityFormat { get; }
    internal static string IdentityNameSemicolon { get; }
    internal static string IdentityControlCharacter { get; }
    internal static string IdentityWhitespace { get; }
    internal static string CompiledExpressionsIgnoringUnnamedVariable { get; }
    internal static string PublicChildrenChangeBlockDU { get; }
    internal static string CannotSaveOriginalValueForActivity { get; }
    internal static string DelegateArgumentChangeBlockDU { get; }
    internal static string BlockedUpdateInsideActivityUpdateError { get; }
    internal static string CannotUpdateEnvironmentInTheMiddleOfResolvingVariables { get; }
    internal static string InstanceStoreDoesntMatchWorkflowApplication { get; }
    internal static string WorkflowApplicationInstanceLoaded { get; }
    internal static string WorkflowApplicationInstanceAbandoned { get; }
    internal static string MustCallPrepareBeforeFinalize { get; }
    internal static string ActivityIsUncached { get; }
    internal static string ActivityIsNotRoot { get; }
    internal static string QueryActivityIsNotInDefinition { get; }
    internal static string QueryVariableIsNotInDefinition { get; }
    internal static string QueryVariableIsNotPublic { get; }
    internal static string UpdateSymbolsMustMatch { get; }
    internal static string AssemblyReferenceIsImmutable { get; }
    internal static string TextExpressionCompilerActivityNameRequired { get; }
    internal static string TextExpressionCompilerActivityNamespaceRequired { get; }
    internal static string TextExpressionCompilerActivityRequired { get; }
    internal static string TextExpressionCompilerAddGeneratedFileRequired { get; }
    internal static string TextExpressionCompilerLanguageRequired { get; }
    internal static string TextExpressionCompilerOutputPathRequired { get; }
    internal static string ITextExpressionParameterMustBeActivity { get; }
    internal static string BlockedUpdateInsideActivityUpdateByUserError { get; }
    internal static string CannotUpdateEnvironmentInTheMiddleOfResolvingArguments { get; }
    internal static string InvalidImplementationAsWorkflowRoot { get; }
    internal static string InvalidOriginalWorkflowDefinitionForImplementationMapCreation { get; }
    internal static string InvalidUpdatedWorkflowDefinitionForImplementationMapCreation { get; }
    internal static string NoDynamicArgumentsInActivityDefinitionChange { get; }
    internal static string NoDynamicArgumentsInActivityDefinitionChangeRuntime { get; }
    internal static string InvalidImplementationMapRuntime { get; }
    internal static string InvalidImplementationAsWorkflowRootForRuntimeState { get; }
    internal static string InvalidImplementationAsWorkflowRootForRuntimeStateBecauseArgumentsChanged { get; }
    internal static string PrivateMembersHaveChanged { get; }
    internal static string BeforeInitializeComponentXBTExtensionResourceNotFound { get; }
    internal static string ActivityXamlServiceLineString { get; }
    internal static string NAUCDisposed { get; }
    internal static string WDCDisposed { get; }
    internal static string AddedIdleExpressionBlockDU { get; }
    internal static string AbortingDueToDynamicUpdateFailure { get; }
    internal static string AbortingDueToVersionMismatch { get; }
    internal static string CompiledLocationReferenceGetLocation { get; }
    internal static string InvalidMergeMapArgumentsChanged { get; }
    internal static string MultipleFlowNodesSharingSameChildBlockDU { get; }
    internal static string DUActivityTypeMismatchRuntime { get; }
    internal static string InstanceStoreHasDefaultOwner { get; }
    internal static string CannotCreateOwnerWithoutIdentity { get; }
    internal static string CannotSaveOriginalValuesForReferencedChildren { get; }
    internal static string ReferencedChildInIsNewlyAdded { get; }
    internal static string CannotChangeMatchesInImplementation { get; }
    internal static string GeneratedAndProvidedMapConflict { get; }
    internal static string GeneratedAndProvidedMapConflictRuntime { get; }
    internal static string SequenceDuplicateReferences { get; }
    internal static string FlowchartContainsReferences { get; }
    internal static string CannotMoveChildAcrossDifferentFlowNodeTypes { get; }
    internal static string PickBranchTriggerActionSwapped { get; }
    internal static string NoChangesMapQueryNotSupported { get; }
    internal static string LambdaExpressionReturnTypeInvalid { get; }
    internal static string LambdaExpressionTypeRequired { get; }
    internal static string UnsupportedLocationReferenceValue { get; }
    internal static string VariableOrArgumentAdditionToReferencedEnvironmentNoDUSupported { get; }
    internal static string InvalidPrepareForRuntimeValidationSettings { get; }
    internal static string DebugSymbolChecksumValueInvalid { get; }
    internal static string ChangeConditionalTransitionToUnconditionalBlockDU { get; }
    internal static string ChangeTransitionTypeDuringTransitioningBlockDU { get; }
    internal static string ChangingTriggerOrUseOriginalConditionActionBlockDU { get; }
    internal static string DUDisallowIfCannotFindingMatchingCondition { get; }
    internal static string DUTriggerOrConditionChangedDuringTransitioning { get; }
    internal static string RemovingTransitionsBlockDU { get; }
    internal static string TriggerOrConditionChangedDuringTransitioning { get; }
    internal static string TriggerOrConditionIsReferenced { get; }
    internal static string MovingActivitiesInStateBlockDU { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ActivityInstanceFixupFailed();
    internal static string get_ActivityMapIsCorrupt();
    internal static string get_AECDisposed();
    internal static string get_HandleInitializationContextDisposed();
    internal static string get_CannotGetValueOfOutArgument();
    internal static string get_OverloadOnlyCallableFromWorkflowThread();
    internal static string get_SameUserStateUsedForMultipleInvokes();
    internal static string get_SendNotSupported();
    internal static string get_InitializationIncomplete();
    internal static string get_CannotSetValueOfInArgument();
    internal static string get_CanOnlyCancelDirectChildren();
    internal static string get_DictionaryIsReadOnly();
    internal static string get_EnvironmentDisposed();
    internal static string get_ResultCannotBeSetOnArgumentExpressions();
    internal static string get_OutOfInternalBookmarks();
    internal static string get_ConstVariableCannotBeSet();
    internal static string get_InstanceStoreRequiredToPersist();
    internal static string get_ControllerInvalidBeforeInitialize();
    internal static string get_OperationAlreadyCompleted();
    internal static string get_OnlyOneOperationPerActivity();
    internal static string get_TrackingRelatedWorkflowAbort();
    internal static string get_CannotUnregisterDefaultBookmarkScope();
    internal static string get_DefaultAbortReason();
    internal static string get_InstanceMustBePaused();
    internal static string get_InstanceMustNotBePaused();
    internal static string get_CannotSerializeVariableExpression();
    internal static string get_RuntimeOperationInProgress();
    internal static string get_RuntimeRunning();
    internal static string get_BookmarksOnlyResumableWhileIdle();
    internal static string get_CannotCompleteRuntimeOwnedTransaction();
    internal static string get_OnlySingleCastDelegatesAllowed();
    internal static string get_CannotPerformOperationFromHandlerThread();
    internal static string get_InvalidIdleAction();
    internal static string get_InvalidUnhandledExceptionAction();
    internal static string get_MultiDimensionalArraysNotSupported();
    internal static string get_WrongCacheMetadataForNativeActivity();
    internal static string get_WrongOnCreateDynamicUpdateMapForNativeActivity();
    internal static string get_WrongCacheMetadataForCodeActivity();
    internal static string get_AsyncMethodsMustAllBeStaticOrInstance();
    internal static string get_AsyncMethodsMustFromSameType();
    internal static string get_InvalidStateForAsyncCallback();
    internal static string get_EnumeratorNotStarted();
    internal static string get_CannotInvokeOpenedActivity();
    internal static string get_CannotPersistWhileDetached();
    internal static string get_DirectLambdaParameterReference();
    internal static string get_ActivityFailedToOpenBefore();
    internal static string get_CannotAddHandlesUpdateError();
    internal static string get_CopyToIndexOutOfRange();
    internal static string get_CopyToRankMustBeOne();
    internal static string get_CopyToNotEnoughSpaceInArray();
    internal static string get_ArgumentNameRequired();
    internal static string get_ProvidedStateInitializedForExecution();
    internal static string get_OutOfIdSpaceIds();
    internal static string get_InvalidActivityIdFormat();
    internal static string get_InvalidLocationExpression();
    internal static string get_InvalidTypeConverterUsage();
    internal static string get_TooManyViolationsForExceptionMessage();
    internal static string get_DefaultInvalidWorkflowExceptionMessage();
    internal static string get_WrongNumberOfArgumentsForActivityDelegate();
    internal static string get_AECForPropertiesHasBeenDisposed();
    internal static string get_CannotAddOrRemoveWithChildren();
    internal static string get_SetupOrCleanupWorkflowThreadThrew();
    internal static string get_WorkItemAbortedInstance();
    internal static string get_ValueMustBeAssignableToType();
    internal static string get_ExternalLocationsGetOnly();
    internal static string get_ResultArgumentMustBeBoundToResultProperty();
    internal static string get_RootArgumentViolationsFoundNoInputs();
    internal static string get_RootArgumentViolationsFound();
    internal static string get_DefaultCancelationRequiresCancelHasBeenRequested();
    internal static string get_AlreadySetupNoPersist();
    internal static string get_HasExecutingChildrenNoPersist();
    internal static string get_OutOfInstanceIds();
    internal static string get_DelegateArgumentMustBeSet();
    internal static string get_VariableMustBeSet();
    internal static string get_CannotEnlistMultipleTransactions();
    internal static string get_CannotPersistInsideIsolation();
    internal static string get_CannotPersistInsideNoPersist();
    internal static string get_CannotScheduleChildrenWhileEnteringIsolation();
    internal static string get_CannotSetupIsolationInsideIsolation();
    internal static string get_CannotSetupIsolationInsideNoPersist();
    internal static string get_CannotSetupIsolationWithChildren();
    internal static string get_EnlistedTransactionPropertiesRequireIsolationBlocks();
    internal static string get_PrepareForSerializationRequiresPersistability();
    internal static string get_PauseWhenPersistableInvalidIfPersistable();
    internal static string get_CannotResetPropertyInDataContext();
    internal static string get_CompilerError();
    internal static string get_CannotModifyCatchAfterOpen();
    internal static string get_BookmarkNotFoundGeneric();
    internal static string get_BookmarkScopeAlreadyInitialized();
    internal static string get_ExclusiveHandleRegisterBookmarkScopeFailed();
    internal static string get_ExclusiveHandleReinitializeFailed();
    internal static string get_CreateBookmarkScopeFailed();
    internal static string get_CannotUnregisterNullBookmarkScope();
    internal static string get_RegisteredBookmarkScopeRequired();
    internal static string get_BookmarkScopesRequireKeys();
    internal static string get_DebugInfoNotSkipArgumentResolution();
    internal static string get_DebugInfoTryGetValueFailed();
    internal static string get_RuntimeTransactionAlreadyExists();
    internal static string get_RuntimeTransactionIsSuppressed();
    internal static string get_NoRuntimeTransactionExists();
    internal static string get_CannotSuppressAlreadyRegisteredHandle();
    internal static string get_CannotSetRuntimeTransactionInNoPersist();
    internal static string get_OnlyOneRequireTransactionContextAllowed();
    internal static string get_ExtensionsCannotBeModified();
    internal static string get_CannotWaitForIdleSynchronously();
    internal static string get_BookmarkScopeHasBookmarks();
    internal static string get_BookmarkScopeNotRegisteredForInitialize();
    internal static string get_BookmarkScopeNotRegisteredForUnregister();
    internal static string get_MarkCanceledOnlyCallableIfCancelRequested();
    internal static string get_OnlyBookmarkOwnerCanRemove();
    internal static string get_CanOnlyAbortDirectChildren();
    internal static string get_DefaultWorkflowApplicationExceptionMessage();
    internal static string get_BeginExecuteMustUseProvidedStateAsAsyncResultState();
    internal static string get_BeginExecuteMustNotReturnANullAsyncResult();
    internal static string get_CompensableActivityAlreadyConfirmedOrCompensated();
    internal static string get_CannotCallAbortInstanceFromWorkflowThread();
    internal static string get_BadCopyToArray();
    internal static string get_ReadonlyNameScopeCannotBeUpdated();
    internal static string get_SymbolResolverMustBeSingleton();
    internal static string get_SymbolResolverAlreadyExists();
    internal static string get_CanNotFindSymbolResolverInWorkflowInstanceExtensions();
    internal static string get_UnmatchedNoPersistExit();
    internal static string get_HandleNotInitialized();
    internal static string get_TransactionHandleAlreadyHasTransaction();
    internal static string get_CannotPerformOperationOnHandle();
    internal static string get_SavingActivityToXamlNotSupported();
    internal static string get_NoOverloadGroupsAreConfigured();
    internal static string get_ErrorsEncounteredWhileProcessingTree();
    internal static string get_RuntimeDelegateArgumentTypeIncorrect();
    internal static string get_RuntimeDelegateArgumentDirectionIncorrect();
    internal static string get_NoCAInSecondaryRoot();
    internal static string get_CompensateWithNoTargetConstraint();
    internal static string get_ConfirmWithNoTargetConstraint();
    internal static string get_UnInitializedRuntimeTransactionHandle();
    internal static string get_ArgumentTypeCannotBeNull();
    internal static string get_AbortingDueToInstanceTimeout();
    internal static string get_InvalidLValueExpression();
    internal static string get_CantFindTimerExtension();
    internal static string get_InstanceMethodCallRequiresTargetObject();
    internal static string get_NewArrayBoundsRequiresIntegralArguments();
    internal static string get_NewArrayRequiresArrayTypeAsResultType();
    internal static string get_ExpressionRequiredForConversion();
    internal static string get_OverloadingMethodMustBeStatic();
    internal static string get_IsolationLevelValidation();
    internal static string get_AbortInstanceOnTransactionFailureDoesNotMatch();
    internal static string get_CannotChangeAbortInstanceFlagAfterPropertyRegistration();
    internal static string get_CompensableActivityInsideTransactionScopeActivity();
    internal static string get_WorkflowTerminatedExceptionDefaultMessage();
    internal static string get_XamlElementExpected();
    internal static string get_InvalidRuntimeState();
    internal static string get_InstanceStoreFailed();
    internal static string get_LoadingWorkflowApplicationRequiresInstanceStore();
    internal static string get_WorkflowApplicationAlreadyHasId();
    internal static string get_CannotUseInputsWithLoad();
    internal static string get_ArgumentMustbePropertyofWorkflowElement();
    internal static string get_TimerExtensionAlreadyAttached();
    internal static string get_TimerExtensionRequiresWorkflowInstance();
    internal static string get_RuntimeArgumentNotCreated();
    internal static string get_InvalidEvaluationOrderValue();
    internal static string get_LambdaNotXamlSerializable();
    internal static string get_InvalidVisualBasicSettingsValue();
    internal static string get_EmptyGuidOnDeserializedInstance();
    internal static string get_NoRunnableInstances();
    internal static string get_AbortingDueToLoadFailure();
    internal static string get_TryLoadRequiresOwner();
    internal static string get_GetRunnableRequiresOwner();
    internal static string get_MustMatchReferenceExpressionReturnType();
    internal static string get_PublicEnvironmentAccessToNonGenericActivity();
    internal static string get_SavingFuncToXamlNotSupported();
    internal static string get_CSharpExpressionsMustBeCompiled();
    internal static string get_ActivityNotICompiledExpressionRoot();
    internal static string get_BadWorkflowIdentityFormat();
    internal static string get_IdentityNameSemicolon();
    internal static string get_IdentityControlCharacter();
    internal static string get_IdentityWhitespace();
    internal static string get_CompiledExpressionsIgnoringUnnamedVariable();
    internal static string get_PublicChildrenChangeBlockDU();
    internal static string get_CannotSaveOriginalValueForActivity();
    internal static string get_DelegateArgumentChangeBlockDU();
    internal static string get_BlockedUpdateInsideActivityUpdateError();
    internal static string get_CannotUpdateEnvironmentInTheMiddleOfResolvingVariables();
    internal static string get_InstanceStoreDoesntMatchWorkflowApplication();
    internal static string get_WorkflowApplicationInstanceLoaded();
    internal static string get_WorkflowApplicationInstanceAbandoned();
    internal static string get_MustCallPrepareBeforeFinalize();
    internal static string get_ActivityIsUncached();
    internal static string get_ActivityIsNotRoot();
    internal static string get_QueryActivityIsNotInDefinition();
    internal static string get_QueryVariableIsNotInDefinition();
    internal static string get_QueryVariableIsNotPublic();
    internal static string get_UpdateSymbolsMustMatch();
    internal static string get_AssemblyReferenceIsImmutable();
    internal static string get_TextExpressionCompilerActivityNameRequired();
    internal static string get_TextExpressionCompilerActivityNamespaceRequired();
    internal static string get_TextExpressionCompilerActivityRequired();
    internal static string get_TextExpressionCompilerAddGeneratedFileRequired();
    internal static string get_TextExpressionCompilerLanguageRequired();
    internal static string get_TextExpressionCompilerOutputPathRequired();
    internal static string get_ITextExpressionParameterMustBeActivity();
    internal static string get_BlockedUpdateInsideActivityUpdateByUserError();
    internal static string get_CannotUpdateEnvironmentInTheMiddleOfResolvingArguments();
    internal static string get_InvalidImplementationAsWorkflowRoot();
    internal static string get_InvalidOriginalWorkflowDefinitionForImplementationMapCreation();
    internal static string get_InvalidUpdatedWorkflowDefinitionForImplementationMapCreation();
    internal static string get_NoDynamicArgumentsInActivityDefinitionChange();
    internal static string get_NoDynamicArgumentsInActivityDefinitionChangeRuntime();
    internal static string get_InvalidImplementationMapRuntime();
    internal static string get_InvalidImplementationAsWorkflowRootForRuntimeState();
    internal static string get_InvalidImplementationAsWorkflowRootForRuntimeStateBecauseArgumentsChanged();
    internal static string get_PrivateMembersHaveChanged();
    internal static string get_BeforeInitializeComponentXBTExtensionResourceNotFound();
    internal static string get_ActivityXamlServiceLineString();
    internal static string get_NAUCDisposed();
    internal static string get_WDCDisposed();
    internal static string get_AddedIdleExpressionBlockDU();
    internal static string get_AbortingDueToDynamicUpdateFailure();
    internal static string get_AbortingDueToVersionMismatch();
    internal static string get_CompiledLocationReferenceGetLocation();
    internal static string get_InvalidMergeMapArgumentsChanged();
    internal static string get_MultipleFlowNodesSharingSameChildBlockDU();
    internal static string get_DUActivityTypeMismatchRuntime();
    internal static string get_InstanceStoreHasDefaultOwner();
    internal static string get_CannotCreateOwnerWithoutIdentity();
    internal static string get_CannotSaveOriginalValuesForReferencedChildren();
    internal static string get_ReferencedChildInIsNewlyAdded();
    internal static string get_CannotChangeMatchesInImplementation();
    internal static string get_GeneratedAndProvidedMapConflict();
    internal static string get_GeneratedAndProvidedMapConflictRuntime();
    internal static string get_SequenceDuplicateReferences();
    internal static string get_FlowchartContainsReferences();
    internal static string get_CannotMoveChildAcrossDifferentFlowNodeTypes();
    internal static string get_PickBranchTriggerActionSwapped();
    internal static string get_NoChangesMapQueryNotSupported();
    internal static string get_LambdaExpressionReturnTypeInvalid();
    internal static string get_LambdaExpressionTypeRequired();
    internal static string get_UnsupportedLocationReferenceValue();
    internal static string get_VariableOrArgumentAdditionToReferencedEnvironmentNoDUSupported();
    internal static string get_InvalidPrepareForRuntimeValidationSettings();
    internal static string get_DebugSymbolChecksumValueInvalid();
    internal static string get_ChangeConditionalTransitionToUnconditionalBlockDU();
    internal static string get_ChangeTransitionTypeDuringTransitioningBlockDU();
    internal static string get_ChangingTriggerOrUseOriginalConditionActionBlockDU();
    internal static string get_DUDisallowIfCannotFindingMatchingCondition();
    internal static string get_DUTriggerOrConditionChangedDuringTransitioning();
    internal static string get_RemovingTransitionsBlockDU();
    internal static string get_TriggerOrConditionChangedDuringTransitioning();
    internal static string get_TriggerOrConditionIsReferenced();
    internal static string get_MovingActivitiesInStateBlockDU();
    internal static string ActivityTypeMismatch(object param0, object param1);
    internal static string CanOnlyScheduleDirectChildren(object param0, object param1, object param2);
    internal static string CanOnlyGetOwnedArguments(object param0, object param1, object param2);
    internal static string RuntimeArgumentNotOpen(object param0);
    internal static string InvalidExecutionCallback(object param0, object param1);
    internal static string MissingSetAccessorForIndexer(object param0, object param1);
    internal static string StateCannotBeSerialized(object param0);
    internal static string InvalidUpdateMap(object param0);
    internal static string WrongMemberCount(object param0, object param1, object param2);
    internal static string ActivityNotFound(object param0);
    internal static string MapEntryNotFound(object param0);
    internal static string ActivityHasNoImplementation(object param0);
    internal static string ArgumentAlreadyInitialized(object param0, object param1);
    internal static string WrongEnvironmentCount(object param0, object param1, object param2, object param3, object param4, object param5, object param6, object param7, object param8);
    internal static string WrongOriginalEnvironmentCount(object param0, object param1, object param2, object param3, object param4, object param5, object param6);
    internal static string DelegateArgumentDoesNotExist(object param0);
    internal static string DelegateArgumentTypeInvalid(object param0, object param1, object param2);
    internal static string VariableIsReadOnly(object param0);
    internal static string VariableDoesNotExist(object param0);
    internal static string VariableOrArgumentDoesNotExist(object param0);
    internal static string WrongArgumentType(object param0, object param1);
    internal static string ArgumentIsAddedMoreThanOnce(object param0, object param1);
    internal static string ArgumentAlreadyInUse(object param0, object param1, object param2);
    internal static string RequireExtensionOnlyAcceptsReferenceTypes(object param0);
    internal static string WorkflowInstanceNotFoundInStore(object param0);
    internal static string WorkflowApplicationUnloaded(object param0);
    internal static string InvalidExpressionForLocation(object param0);
    internal static string ArgumentDoesNotExist(object param0);
    internal static string CannotPropagateExceptionWhileCanceling(object param0, object param1);
    internal static string ArgumentDirectionMismatch(object param0, object param1, object param2);
    internal static string ArgumentTypeMismatch(object param0, object param1, object param2);
    internal static string UnknownExpressionCompilationError(object param0);
    internal static string WorkflowApplicationCompleted(object param0);
    internal static string CannotDereferenceNull(object param0);
    internal static string IndexOutOfBounds(object param0, object param1);
    internal static string InsufficientArraySize(object param0);
    internal static string RootActivityAlreadyAssociatedWithInstance(object param0);
    internal static string ActivityNotPartOfThisTree(object param0, object param1);
    internal static string ActivityCannotReferenceItself(object param0);
    internal static string InvalidAsyncBeginMethodSignature(object param0, object param1);
    internal static string InvalidAsyncCancelMethodSignature(object param0, object param1);
    internal static string InvalidAsyncEndMethodSignature(object param0, object param1);
    internal static string OutArgumentCannotHaveInputValue(object param0);
    internal static string ActivityPropertyRequiresName(object param0);
    internal static string ActivityPropertyRequiresType(object param0);
    internal static string CannotRemoveExecutingActivityUpdateError(object param0, object param1);
    internal static string UnopenedActivitiesCannotBeExecuted(object param0);
    internal static string ArgumentTypeMustBeCompatible(object param0, object param1, object param2);
    internal static string ArgumentNotFound(object param0);
    internal static string CannotSerializeExpression(object param0);
    internal static string ResultArgumentMustBeSpecificType(object param0);
    internal static string ExecutionPropertyAlreadyDefined(object param0);
    internal static string ArgumentValueExpressionTypeMismatch(object param0, object param1);
    internal static string ArgumentLocationExpressionTypeMismatch(object param0, object param1);
    internal static string InvalidSourceLocationColumn(object param0, object param1);
    internal static string InvalidSourceLocationLineNumber(object param0, object param1);
    internal static string OutOfRangeSourceLocationEndColumn(object param0);
    internal static string OutOfRangeSourceLocationEndLine(object param0);
    internal static string SymbolResolverDoesNotHaveSymbol(object param0, object param1);
    internal static string SwitchCaseNullWithValueType(object param0);
    internal static string VariableNotVisible(object param0);
    internal static string ResultArgumentHasRequiredTypeAndDirection(object param0, object param1, object param2);
    internal static string IdNotFoundInWorkflow(object param0);
    internal static string ActivityDelegateHandlersMustBeDeclarations(object param0, object param1, object param2);
    internal static string ActivityCannotBeReferencedWithoutTarget(object param0, object param1, object param2);
    internal static string ActivityCannotBeReferenced(object param0, object param1, object param2, object param3);
    internal static string RootActivityCannotBeReferenced(object param0, object param1);
    internal static string ActivityDelegateCannotBeReferencedWithoutTarget(object param0, object param1, object param2);
    internal static string ActivityDelegateCannotBeReferenced(object param0, object param1, object param2, object param3);
    internal static string ActivityDelegateCannotBeReferencedWithoutTargetNoHandler(object param0, object param1);
    internal static string ActivityDelegateCannotBeReferencedNoHandler(object param0, object param1, object param2);
    internal static string ArgumentDoesNotExistInEnvironment(object param0);
    internal static string VariableAlreadyInUseOnActivity(object param0, object param1, object param2);
    internal static string VariableExpressionTypeMismatch(object param0, object param1, object param2);
    internal static string ArgumentNotInTree(object param0);
    internal static string VariableNotOpen(object param0, object param1);
    internal static string VariableTypeNotMatchLocationType(object param0, object param1);
    internal static string MissingNameProperty(object param0);
    internal static string DelegateArgumentAlreadyInUseOnActivity(object param0, object param1, object param2);
    internal static string DelegateArgumentNotVisible(object param0);
    internal static string DelegateArgumentMustBeReferenced(object param0);
    internal static string VariableShouldBeOpen(object param0);
    internal static string VariableTypeInvalid(object param0, object param1, object param2);
    internal static string CompensationHandlerFatalException(object param0);
    internal static string ConfirmationHandlerFatalException(object param0);
    internal static string CancellationHandlerFatalException(object param0);
    internal static string ConfirmWithoutCompensableActivity(object param0);
    internal static string CompensateWithoutCompensableActivity(object param0);
    internal static string DelegateHandlersCannotBeScheduledDirectly(object param0, object param1);
    internal static string WorkflowInstanceAborted(object param0);
    internal static string PropertyReadOnlyInWorkflowDataContext(object param0);
    internal static string CompilerErrorSpecificExpression(object param0, object param1);
    internal static string VariableNameNotAnIdentifier(object param0);
    internal static string BookmarkNotRegistered(object param0);
    internal static string InvalidCallbackState(object param0);
    internal static string VariableCannotBePopulatedInLocationEnvironment(object param0);
    internal static string DuplicateCatchClause(object param0);
    internal static string CatchOrFinallyExpected(object param0);
    internal static string FaultContextNotFound(object param0);
    internal static string RethrowMustBeAPublicChild(object param0);
    internal static string RethrowNotInATryCatch(object param0);
    internal static string BookmarkScopeNotFound(object param0);
    internal static string BookmarkAlreadyExists(object param0);
    internal static string CannotNestTransactionScopeWhenAmbientHandleIsSuppressed(object param0);
    internal static string OptionalExtensionTypeMatchedMultiple(object param0);
    internal static string RequiredExtensionTypeNotFound(object param0);
    internal static string PropertyReferenceNotFound(object param0);
    internal static string TimeoutOnOperation(object param0);
    internal static string DelegateInArgumentTypeMismatch(object param0, object param1, object param2);
    internal static string DelegateOutArgumentTypeMismatch(object param0, object param1, object param2);
    internal static string LiteralsMustBeValueTypesOrImmutableTypes(object param0, object param1);
    internal static string LocationTypeMismatch(object param0, object param1, object param2);
    internal static string CannotSetValueToLocation(object param0, object param1, object param2);
    internal static string BookmarkScopeWithIdAlreadyExists(object param0);
    internal static string ConvertVariableToValueExpressionFailed(object param0, object param1);
    internal static string NoNamespace(object param0);
    internal static string UnknownLanguage(object param0);
    internal static string InvalidCompensateActivityUsage(object param0);
    internal static string InvalidConfirmActivityUsage(object param0);
    internal static string IncorrectIndexForArgument(object param0, object param1, object param2);
    internal static string InvalidDirectionForArgument(object param0, object param1, object param2, object param3);
    internal static string InvalidTypeForArgument(object param0, object param1, object param2, object param3);
    internal static string UnexpectedArgumentCount(object param0, object param1, object param2);
    internal static string WorkflowApplicationAborted(object param0);
    internal static string WorkflowApplicationTerminated(object param0);
    internal static string WorkflowInstanceUnlocked(object param0);
    internal static string InvalidCompensationToken(object param0);
    internal static string ReadonlyPropertyCannotBeSet(object param0, object param1);
    internal static string WriteonlyPropertyCannotBeRead(object param0, object param1);
    internal static string AddValidationErrorMustBeCalledFromConstraint(object param0);
    internal static string CannotValidateNullObject(object param0, object param1);
    internal static string InternalConstraintException(object param0, object param1, object param2, object param3);
    internal static string PropertyCannotBeModified(object param0);
    internal static string NoOutputLocationWasFound(object param0);
    internal static string RequiredVariableCoundNotBeExtracted(object param0, object param1);
    internal static string LocationExpressionCouldNotBeResolved(object param0);
    internal static string DuplicateAnnotationName(object param0);
    internal static string MissingArgument(object param0, object param1);
    internal static string DebugInstrumentationFailed(object param0);
    internal static string NullReferencedMemberAccess(object param0, object param1);
    internal static string InvalidXamlMember(object param0);
    internal static string ActivityXamlServicesRequiresActivity(object param0);
    internal static string InvalidDynamicActivityProperty(object param0);
    internal static string PropertyMemberNotSupportedByActivityXamlServices(object param0);
    internal static string MemberNotSupportedByActivityXamlServices(object param0);
    internal static string InvalidPropertyType(object param0, object param1);
    internal static string InvalidProperty(object param0);
    internal static string DebugInfoCannotEvaluateExpression(object param0);
    internal static string ExtraOverloadGroupPropertiesConfigured(object param0, object param1, object param2);
    internal static string MultipleOverloadGroupsConfigured(object param0);
    internal static string RequiredArgumentValueNotSupplied(object param0);
    internal static string TypeConverterHelperCacheAddFailed(object param0);
    internal static string WorkflowInstanceIsReadOnly(object param0);
    internal static string ErrorExtractingValuesForLambdaRewrite(object param0, object param1, object param2);
    internal static string SubexpressionResultWasNull(object param0);
    internal static string SubexpressionResultWasNotVisible(object param0);
    internal static string InlinedLocationReferenceOnlyAccessibleByOwner(object param0, object param1);
    internal static string VariableOnlyAccessibleAtScopeOfDeclaration(object param0, object param1);
    internal static string ActivityDelegateAlreadyOpened(object param0, object param1, object param2);
    internal static string ActivityDelegateNotOpened(object param0);
    internal static string ActivityDelegateOwnerMissing(object param0);
    internal static string ActivityDelegateOwnerEnvironmentMissing(object param0, object param1);
    internal static string InputParametersCountMismatch(object param0, object param1);
    internal static string InputParametersMissing(object param0);
    internal static string InputParametersTypeMismatch(object param0, object param1);
    internal static string DelegateParameterDirectionalityMismatch(object param0, object param1, object param2);
    internal static string ValidationContextCannotBeNull(object param0, object param1);
    internal static string OverloadGroupHasSubsets(object param0, object param1);
    internal static string OverloadGroupsAreEquivalent(object param0);
    internal static string ArgumentViolationsFound(object param0, object param1);
    internal static string DelegateParameterCannotBeModifiedAfterOpen(object param0);
    internal static string ActivityDelegateOwnerNotInParentScope(object param0, object param1);
    internal static string ActivityDefinitionCannotBeShared(object param0);
    internal static string RuntimeArgumentBindingInvalid(object param0, object param1);
    internal static string DoWhileRequiresCondition(object param0);
    internal static string FlowchartContainsUnconnectedNodes(object param0);
    internal static string FlowSwitchRequiresExpression(object param0);
    internal static string FlowDecisionRequiresCondition(object param0);
    internal static string FlowNodeCannotBeShared(object param0, object param1);
    internal static string FlowNodeLockedForRuntime(object param0);
    internal static string PublicMethodWithMatchingParameterDoesNotExist(object param0, object param1, object param2, object param3);
    internal static string DuplicateMethodFound(object param0, object param1, object param2, object param3);
    internal static string ReturnTypeIncompatible(object param0, object param1, object param2, object param3, object param4);
    internal static string TargetTypeAndTargetObjectAreMutuallyExclusive(object param0, object param1);
    internal static string WhileRequiresCondition(object param0);
    internal static string PickBranchRequiresTrigger(object param0);
    internal static string ForEachRequiresNonNullValues(object param0);
    internal static string ParallelForEachRequiresNonNullValues(object param0);
    internal static string CompletionConditionSetButNoBody(object param0);
    internal static string SwitchCaseKeyTypesMustMatchExpressionType(object param0, object param1, object param2);
    internal static string CollectionActivityRequiresCollection(object param0);
    internal static string BinaryExpressionActivityRequiresArgument(object param0, object param1, object param2);
    internal static string UnsupportedExpressionType(object param0);
    internal static string UnsupportedReferenceExpressionType(object param0);
    internal static string UnsupportedMemberExpressionWithType(object param0);
    internal static string MemberNotFound(object param0, object param1);
    internal static string MethodInfoRequired(object param0);
    internal static string MethodNameRequired(object param0);
    internal static string ArgumentNumberRequiresTheSameAsParameterNumber(object param0);
    internal static string InvalidParameterInfo(object param0, object param1);
    internal static string InvalidGenericTypeInfo(object param0);
    internal static string InvalidArgumentExpression(object param0, object param1);
    internal static string InvalidExpressionProperty(object param0);
    internal static string FlowchartMissingStartNode(object param0);
    internal static string MemberCannotBeNull(object param0, object param1, object param2);
    internal static string DoNotSupportArrayIndexerOnNonArrayType(object param0);
    internal static string DoNotSupportArrayIndexerWithDifferentArrayTypeAndResultType(object param0, object param1);
    internal static string DoNotSupportArrayIndexerWithNonIntIndex(object param0);
    internal static string ConstructorInfoNotFound(object param0);
    internal static string ArgumentRequired(object param0, object param1);
    internal static string OneOfTwoPropertiesMustBeSet(object param0, object param1, object param2, object param3);
    internal static string SwitchCaseTypeMismatch(object param0, object param1);
    internal static string ActivityPropertyMustBeSet(object param0, object param1);
    internal static string TypeMismatchForAssign(object param0, object param1, object param2);
    internal static string RuntimeTransactionHandleNotRegisteredAsExecutionProperty(object param0);
    internal static string XamlElementExpectedAt(object param0, object param1);
    internal static string TargetTypeIsValueType(object param0, object param1);
    internal static string TargetTypeCannotBeEnum(object param0, object param1);
    internal static string DynamicActivityDuplicatePropertyDetected(object param0);
    internal static string IndicesAreNeeded(object param0, object param1);
    internal static string TypeMustbeValueType(object param0);
    internal static string DoNotSupportArrayIndexerValueWithIncompatibleArrayTypeAndResultType(object param0, object param1);
    internal static string DoNotSupportArrayIndexerReferenceWithDifferentArrayTypeAndResultType(object param0, object param1);
    internal static string SpecialMethodNotFound(object param0, object param1);
    internal static string CanInduceIdleActivityInArgumentExpression(object param0, object param1, object param2);
    internal static string CanInduceIdleNotSpecified(object param0);
    internal static string DuplicateEvaluationOrderValues(object param0, object param1);
    internal static string SymbolNamesMustBeUnique(object param0);
    internal static string UnusedInputArguments(object param0);
    internal static string MemberIsReadOnly(object param0, object param1);
    internal static string DurationIsNegative(object param0);
    internal static string IncompatibleTypeForMultidimensionalArrayItemReference(object param0, object param1);
    internal static string ActivityPropertyNotSet(object param0, object param1);
    internal static string AmbiguousVBVariableReference(object param0);
    internal static string WorkflowAbortedReason(object param0, object param1);
    internal static string CallbackExceptionFromHostGetExtension(object param0);
    internal static string CallbackExceptionFromHostAbort(object param0);
    internal static string ValidationErrorPrefixForHiddenActivity(object param0);
    internal static string ValidationErrorPrefixForPublicActivityWithHiddenParent(object param0, object param1);
    internal static string TypeNotAssignableTo(object param0, object param1);
    internal static string EmptyIdReturnedFromHost(object param0);
    internal static string HostIdDoesNotMatchInstance(object param0, object param1);
    internal static string DebugInfoExceptionCaught(object param0, object param1);
    internal static string DuplicateInstrumentation(object param0);
    internal static string PublicReferencesOnActivityRequiringArgumentResolution(object param0);
    internal static string ReadAccessToWriteOnlyPublicReference(object param0);
    internal static string WriteAccessToReadOnlyPublicReference(object param0);
    internal static string GetLocationOnPublicAccessReference(object param0);
    internal static string DuplicateImportAttribute(object param0, object param1);
    internal static string TextExpressionMetadataRequiresCompilation(object param0);
    internal static string CompiledExpressionIdNotFound(object param0);
    internal static string CompiledLocationNoDefaultConstructor(object param0);
    internal static string WorkflowIdentityNullHostId(object param0);
    internal static string WorkflowIdentityNullStateId(object param0);
    internal static string WorkflowIdentityStateIdHostIdMismatch(object param0, object param1);
    internal static string CompiledExpressionsIgnoringInvalidIdentifierVariable(object param0);
    internal static string CompiledExpressionsActivityException(object param0, object param1, object param2);
    internal static string CompiledExpressionsCacheMetadataException(object param0, object param1);
    internal static string CompiledExpressionsDuplicateName(object param0);
    internal static string CompiledExpressionsNoCompiledRoot(object param0);
    internal static string AddMatchActivityNewAndOldParentMismatch(object param0, object param1, object param2, object param3);
    internal static string AddMatchActivityNewParentMismatch(object param0, object param1, object param2);
    internal static string AddMatchActivityPrivateChild(object param0);
    internal static string AddMatchVariableNewAndOldParentMismatch(object param0, object param1, object param2, object param3);
    internal static string AddMatchVariableNewParentMismatch(object param0, object param1, object param2);
    internal static string AddMatchVariablePrivateChild(object param0);
    internal static string CannotSaveOriginalValueForNewActivity(object param0);
    internal static string RuntimeArgumentChangeBlockDU(object param0);
    internal static string AddedIdleArgumentBlockDU(object param0, object param1);
    internal static string InvalidActivityToBlockUpdate(object param0);
    internal static string InvalidActivityToBlockUpdateServices(object param0);
    internal static string NativeActivityUpdateInstanceThrewException(object param0);
    internal static string PermissionArgumentWrongType(object param0);
    internal static string QueryActivityIsInImplementation(object param0);
    internal static string QueryActivityIsPublic(object param0);
    internal static string QueryVariableIsInImplementation(object param0);
    internal static string QueryVariableIsPublic(object param0);
    internal static string UpdateMapBuilderRequiredProperty(object param0);
    internal static string CannotGenerateSchemaForXmlSerializable(object param0);
    internal static string ActivityBlockingUpdate(object param0, object param1);
    internal static string InvalidImplementationMapAssociationServices(object param0);
    internal static string InvalidImplementationMap(object param0, object param1);
    internal static string InvalidImplementationMapAssociation(object param0);
    internal static string XamlBuildTaskResourceNotFound(object param0);
    internal static string SchemaContextFromBeforeInitializeComponentXBTExtensionCannotBeGeneric(object param0);
    internal static string SchemaContextFromBeforeInitializeComponentXBTExtensionNotFound(object param0);
    internal static string DynamicActivityMultipleExpressionLanguages(object param0);
    internal static string UnableToLocateCompiledLocationContext(object param0);
    internal static string ActivityXamlServicesCompilationFailed(object param0);
    internal static string AddMatchVariableSignatureMismatch(object param0, object param1, object param2, object param3, object param4, object param5, object param6);
    internal static string AddedIdleVariableDefaultBlockDU(object param0, object param1);
    internal static string TextExpressionCompilerNoCodebase(object param0);
    internal static string TextExpressionCompilerUnableToLoadAssembly(object param0);
    internal static string OriginCannotBeRuntimeIntrinsic(object param0);
    internal static string DuplicateOriginActivityActivity(object param0, object param1, object param2);
    internal static string DuplicateOriginActivityVariable(object param0, object param1, object param2);
    internal static string DuplicateOriginVariableVariable(object param0, object param1, object param2);
    internal static string InvalidMergeMap(object param0, object param1, object param2);
    internal static string InvalidRootMergeMap(object param0, object param1);
    internal static string InvalidMergeMapForImplementation(object param0, object param1);
    internal static string InvalidMergeMapMemberCount(object param0, object param1);
    internal static string InvalidMergeMapArgumentCount(object param0, object param1);
    internal static string InvalidMergeMapEnvironmentCount(object param0, object param1, object param2, object param3, object param4, object param5);
    internal static string DUActivityTypeMismatch(object param0, object param1);
    internal static string TryCatchInvalidStateForUpdate(object param0);
    internal static string ImplementationVersionMismatch(object param0, object param1, object param2);
    internal static string OriginalActivityReusedInModifiedDefinition(object param0);
    internal static string OriginalVariableReusedInModifiedDefinition(object param0);
    internal static string UnexpectedExpressionNodeType(object param0, object param1);
    internal static string InvalidFileName(object param0);
    internal static string LineNumberTooLarge(object param0);
    internal static string ColumnNumberTooLarge(object param0);
    internal static string FinalStateCannotHaveProperty(object param0, object param1);
    internal static string FinalStateCannotHaveTransition(object param0);
    internal static string InitialStateCannotBeFinalState(object param0);
    internal static string InitialStateNotInStatesCollection(object param0);
    internal static string SimpleStateMustHaveOneTransition(object param0);
    internal static string StateCannotBeAddedTwice(object param0);
    internal static string StateMachineMustHaveInitialState(object param0);
    internal static string StateNotBelongToAnyParent(object param0, object param1);
    internal static string TransitionCannotBeAddedTwice(object param0, object param1, object param2);
    internal static string TransitionTargetCannotBeNull(object param0, object param1);
    internal static string UnconditionalTransitionShouldNotShareNullTriggersWithOthers(object param0, object param1);
    internal static string UnconditionalTransitionShouldNotShareTriggersWithOthers(object param0, object param1, object param2);
    internal static string NoPersistScopeCannotContainPersist(object param0, object param1);
    internal static string VBExpressionTamperedSinceLastCompiled(object param0);
}
[ContentPropertyAttribute("Collection")]
public class System.Activities.Statements.AddToCollection`1 : CodeActivity {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<ICollection`1<T>> Collection { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<T> Item { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<ICollection`1<T>> get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(InArgument`1<ICollection`1<T>> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T> get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(InArgument`1<T> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual void Execute(CodeActivityContext context);
}
public class System.Activities.Statements.Assign : CodeActivity {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public OutArgument To { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument Value { get; public set; }
    [CompilerGeneratedAttribute]
public OutArgument get_To();
    [CompilerGeneratedAttribute]
public void set_To(OutArgument value);
    [CompilerGeneratedAttribute]
public InArgument get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(InArgument value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual void Execute(CodeActivityContext context);
}
public class System.Activities.Statements.Assign`1 : CodeActivity {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public OutArgument`1<T> To { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<T> Value { get; public set; }
    [CompilerGeneratedAttribute]
public OutArgument`1<T> get_To();
    [CompilerGeneratedAttribute]
public void set_To(OutArgument`1<T> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T> get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(InArgument`1<T> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual void Execute(CodeActivityContext context);
}
[DefaultMemberAttribute("Item")]
[DataContractAttribute]
internal class System.Activities.Statements.BookmarkTable : object {
    public Bookmark Item { get; public set; }
    [DataMemberAttribute]
internal Bookmark[] SerializedBookmarkTable { get; internal set; }
    private static BookmarkTable();
    public Bookmark get_Item(CompensationBookmarkName bookmarkName);
    public void set_Item(CompensationBookmarkName bookmarkName, Bookmark value);
    internal Bookmark[] get_SerializedBookmarkTable();
    internal void set_SerializedBookmarkTable(Bookmark[] value);
}
[ContentPropertyAttribute("Body")]
public class System.Activities.Statements.CancellationScope : NativeActivity {
    public Collection`1<Variable> Variables { get; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Variables")]
public Activity Body { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Body")]
public Activity CancellationHandler { get; public set; }
    public Collection`1<Variable> get_Variables();
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    [CompilerGeneratedAttribute]
public Activity get_CancellationHandler();
    [CompilerGeneratedAttribute]
public void set_CancellationHandler(Activity value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
public abstract class System.Activities.Statements.Catch : object {
    public Type ExceptionType { get; }
    public abstract virtual Type get_ExceptionType();
    internal abstract virtual ActivityDelegate GetAction();
    internal abstract virtual void ScheduleAction(NativeActivityContext context, Exception exception, CompletionCallback completionCallback, FaultCallback faultCallback);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.Catch`1 : Catch {
    public Type ExceptionType { get; }
    [DefaultValueAttribute("")]
public ActivityAction`1<TException> Action { get; public set; }
    public virtual Type get_ExceptionType();
    [CompilerGeneratedAttribute]
public ActivityAction`1<TException> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`1<TException> value);
    internal virtual ActivityDelegate GetAction();
    internal virtual void ScheduleAction(NativeActivityContext context, Exception exception, CompletionCallback completionCallback, FaultCallback faultCallback);
}
[ContentPropertyAttribute("Collection")]
public class System.Activities.Statements.ClearCollection`1 : CodeActivity {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<ICollection`1<T>> Collection { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<ICollection`1<T>> get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(InArgument`1<ICollection`1<T>> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual void Execute(CodeActivityContext context);
}
[ContentPropertyAttribute("Body")]
public class System.Activities.Statements.CompensableActivity : NativeActivity`1<CompensationToken> {
    public Collection`1<Variable> Variables { get; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Variables")]
public Activity Body { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Body")]
public Activity CancellationHandler { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("CancellationHandler")]
public Activity CompensationHandler { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("CompensationHandler")]
public Activity ConfirmationHandler { get; public set; }
    protected bool CanInduceIdle { get; }
    private static CompensableActivity();
    public Collection`1<Variable> get_Variables();
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    [CompilerGeneratedAttribute]
public Activity get_CancellationHandler();
    [CompilerGeneratedAttribute]
public void set_CancellationHandler(Activity value);
    [CompilerGeneratedAttribute]
public Activity get_CompensationHandler();
    [CompilerGeneratedAttribute]
public void set_CompensationHandler(Activity value);
    [CompilerGeneratedAttribute]
public Activity get_ConfirmationHandler();
    [CompilerGeneratedAttribute]
public void set_ConfirmationHandler(Activity value);
    protected virtual bool get_CanInduceIdle();
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    internal virtual IList`1<Constraint> InternalGetConstraints();
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
public class System.Activities.Statements.Compensate : NativeActivity {
    [DefaultValueAttribute("")]
public InArgument`1<CompensationToken> Target { get; public set; }
    private static Compensate();
    [CompilerGeneratedAttribute]
public InArgument`1<CompensationToken> get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(InArgument`1<CompensationToken> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    internal virtual IList`1<Constraint> InternalGetConstraints();
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
internal static class System.Activities.Statements.CompensationActivityStrings : object {
    public static string WorkflowImplicitCompensationBehavior;
}
internal enum System.Activities.Statements.CompensationBookmarkName : Enum {
    public int value__;
    public static CompensationBookmarkName Confirmed;
    public static CompensationBookmarkName Canceled;
    public static CompensationBookmarkName Compensated;
    public static CompensationBookmarkName OnConfirmation;
    public static CompensationBookmarkName OnCompensation;
    public static CompensationBookmarkName OnCancellation;
    public static CompensationBookmarkName OnSecondaryRootScheduled;
}
public class System.Activities.Statements.CompensationExtension : PersistenceParticipant {
    internal Dictionary`2<long, CompensationTokenData> CompensationTokenTable { get; private set; }
    internal long Id { get; internal set; }
    internal Bookmark WorkflowCompensation { get; internal set; }
    internal Bookmark WorkflowConfirmation { get; internal set; }
    internal Bookmark WorkflowCompensationScheduled { get; private set; }
    internal bool IsWorkflowCompensationBehaviorScheduled { get; private set; }
    internal WorkflowInstanceProxy Instance { get; private set; }
    private static CompensationExtension();
    internal Dictionary`2<long, CompensationTokenData> get_CompensationTokenTable();
    private void set_CompensationTokenTable(Dictionary`2<long, CompensationTokenData> value);
    [CompilerGeneratedAttribute]
internal long get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(long value);
    [CompilerGeneratedAttribute]
internal Bookmark get_WorkflowCompensation();
    [CompilerGeneratedAttribute]
internal void set_WorkflowCompensation(Bookmark value);
    [CompilerGeneratedAttribute]
internal Bookmark get_WorkflowConfirmation();
    [CompilerGeneratedAttribute]
internal void set_WorkflowConfirmation(Bookmark value);
    [CompilerGeneratedAttribute]
internal Bookmark get_WorkflowCompensationScheduled();
    [CompilerGeneratedAttribute]
private void set_WorkflowCompensationScheduled(Bookmark value);
    [CompilerGeneratedAttribute]
internal bool get_IsWorkflowCompensationBehaviorScheduled();
    [CompilerGeneratedAttribute]
private void set_IsWorkflowCompensationBehaviorScheduled(bool value);
    [CompilerGeneratedAttribute]
internal WorkflowInstanceProxy get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(WorkflowInstanceProxy value);
    internal void Add(long compensationId, CompensationTokenData compensationToken);
    internal void Remove(long compensationId);
    internal CompensationTokenData Get(long compensationId);
    internal Bookmark FindBookmark(long compensationId, CompensationBookmarkName bookmarkName);
    internal void SetupWorkflowCompensationBehavior(NativeActivityContext context, BookmarkCallback callback, Activity workflowCompensationBehavior);
    internal long GetNextId();
    internal void NotifyMessage(NativeActivityContext context, long compensationId, CompensationBookmarkName compensationBookmark);
    private sealed virtual override IEnumerable`1<object> System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions();
    private sealed virtual override void System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy instance);
    protected virtual void CollectValues(IDictionary`2& readWriteValues, IDictionary`2& writeOnlyValues);
    protected virtual void PublishValues(IDictionary`2<XName, object> readWriteValues);
}
internal class System.Activities.Statements.CompensationParticipant : NativeActivity {
    public Activity CompensationHandler { get; public set; }
    public Activity ConfirmationHandler { get; public set; }
    public Activity CancellationHandler { get; public set; }
    protected bool CanInduceIdle { get; }
    public CompensationParticipant(Variable`1<long> compensationId);
    [CompilerGeneratedAttribute]
public Activity get_CompensationHandler();
    [CompilerGeneratedAttribute]
public void set_CompensationHandler(Activity value);
    [CompilerGeneratedAttribute]
public Activity get_ConfirmationHandler();
    [CompilerGeneratedAttribute]
public void set_ConfirmationHandler(Activity value);
    [CompilerGeneratedAttribute]
public Activity get_CancellationHandler();
    [CompilerGeneratedAttribute]
public void set_CancellationHandler(Activity value);
    protected virtual bool get_CanInduceIdle();
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
[DataContractAttribute]
internal enum System.Activities.Statements.CompensationState : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CompensationState Creating;
    [EnumMemberAttribute]
public static CompensationState Active;
    [EnumMemberAttribute]
public static CompensationState Completed;
    [EnumMemberAttribute]
public static CompensationState Confirming;
    [EnumMemberAttribute]
public static CompensationState Confirmed;
    [EnumMemberAttribute]
public static CompensationState Compensating;
    [EnumMemberAttribute]
public static CompensationState Compensated;
    [EnumMemberAttribute]
public static CompensationState Canceling;
    [EnumMemberAttribute]
public static CompensationState Canceled;
}
[DataContractAttribute]
public class System.Activities.Statements.CompensationToken : object {
    internal static string PropertyName;
    internal static long RootCompensationId;
    [DataMemberAttribute]
internal long CompensationId { get; internal set; }
    [DataMemberAttribute]
internal bool CompensateCalled { get; internal set; }
    [DataMemberAttribute]
internal bool ConfirmCalled { get; internal set; }
    internal CompensationToken(CompensationTokenData tokenData);
    [CompilerGeneratedAttribute]
internal long get_CompensationId();
    [CompilerGeneratedAttribute]
internal void set_CompensationId(long value);
    [CompilerGeneratedAttribute]
internal bool get_CompensateCalled();
    [CompilerGeneratedAttribute]
internal void set_CompensateCalled(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ConfirmCalled();
    [CompilerGeneratedAttribute]
internal void set_ConfirmCalled(bool value);
}
[DataContractAttribute]
internal class System.Activities.Statements.CompensationTokenData : object {
    [DataMemberAttribute]
internal long CompensationId { get; internal set; }
    [DataMemberAttribute]
internal long ParentCompensationId { get; internal set; }
    [DataMemberAttribute]
internal BookmarkTable BookmarkTable { get; internal set; }
    [DataMemberAttribute]
internal ExecutionTracker ExecutionTracker { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DataMemberAttribute]
internal CompensationState CompensationState { get; internal set; }
    [DataMemberAttribute]
internal string DisplayName { get; internal set; }
    [DataMemberAttribute]
internal bool IsTokenValidInSecondaryRoot { get; internal set; }
    internal CompensationTokenData(long compensationId, long parentCompensationId);
    [CompilerGeneratedAttribute]
internal long get_CompensationId();
    [CompilerGeneratedAttribute]
internal void set_CompensationId(long value);
    [CompilerGeneratedAttribute]
internal long get_ParentCompensationId();
    [CompilerGeneratedAttribute]
internal void set_ParentCompensationId(long value);
    [CompilerGeneratedAttribute]
internal BookmarkTable get_BookmarkTable();
    [CompilerGeneratedAttribute]
internal void set_BookmarkTable(BookmarkTable value);
    [CompilerGeneratedAttribute]
internal ExecutionTracker get_ExecutionTracker();
    [CompilerGeneratedAttribute]
internal void set_ExecutionTracker(ExecutionTracker value);
    [CompilerGeneratedAttribute]
internal CompensationState get_CompensationState();
    [CompilerGeneratedAttribute]
internal void set_CompensationState(CompensationState value);
    [CompilerGeneratedAttribute]
internal string get_DisplayName();
    [CompilerGeneratedAttribute]
internal void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsTokenValidInSecondaryRoot();
    [CompilerGeneratedAttribute]
internal void set_IsTokenValidInSecondaryRoot(bool value);
    internal void RemoveBookmark(NativeActivityContext context, CompensationBookmarkName bookmarkName);
}
public class System.Activities.Statements.Confirm : NativeActivity {
    public InArgument`1<CompensationToken> Target { get; public set; }
    private static Confirm();
    [CompilerGeneratedAttribute]
public InArgument`1<CompensationToken> get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(InArgument`1<CompensationToken> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    internal virtual IList`1<Constraint> InternalGetConstraints();
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
public class System.Activities.Statements.CreateBookmarkScope : NativeActivity`1<BookmarkScope> {
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
internal class System.Activities.Statements.DefaultCompensation : NativeActivity {
    public InArgument`1<CompensationToken> Target { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<CompensationToken> get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(InArgument`1<CompensationToken> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
internal class System.Activities.Statements.DefaultConfirmation : NativeActivity {
    public InArgument`1<CompensationToken> Target { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<CompensationToken> get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(InArgument`1<CompensationToken> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
[ContentPropertyAttribute("Duration")]
public class System.Activities.Statements.Delay : NativeActivity {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<TimeSpan> Duration { get; public set; }
    protected bool CanInduceIdle { get; }
    private static Delay();
    [CompilerGeneratedAttribute]
public InArgument`1<TimeSpan> get_Duration();
    [CompilerGeneratedAttribute]
public void set_Duration(InArgument`1<TimeSpan> value);
    protected virtual bool get_CanInduceIdle();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
    protected virtual void Abort(NativeActivityAbortContext context);
}
public class System.Activities.Statements.DeleteBookmarkScope : NativeActivity {
    public InArgument`1<BookmarkScope> Scope { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<BookmarkScope> get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(InArgument`1<BookmarkScope> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Body")]
public class System.Activities.Statements.DoWhile : NativeActivity {
    public Collection`1<Variable> Variables { get; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Variables")]
public Activity`1<bool> Condition { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Condition")]
public Activity Body { get; public set; }
    public DoWhile(Expression`1<Func`2<ActivityContext, bool>> condition);
    public DoWhile(Activity`1<bool> condition);
    public Collection`1<Variable> get_Variables();
    [CompilerGeneratedAttribute]
public Activity`1<bool> get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(Activity`1<bool> value);
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
public class System.Activities.Statements.DurableTimerExtension : TimerExtension {
    internal Action`1<object> OnTimerFiredCallback { get; }
    internal TimerTable RegisteredTimers { get; }
    private static DurableTimerExtension();
    internal Action`1<object> get_OnTimerFiredCallback();
    internal TimerTable get_RegisteredTimers();
    [IteratorStateMachineAttribute("System.Activities.Statements.DurableTimerExtension/<GetAdditionalExtensions>d__16")]
public virtual IEnumerable`1<object> GetAdditionalExtensions();
    public virtual void SetInstance(WorkflowInstanceProxy instance);
    protected virtual void OnRegisterTimer(TimeSpan timeout, Bookmark bookmark);
    protected virtual void OnCancelTimer(Bookmark bookmark);
    internal void OnSave(IDictionary`2& readWriteValues, IDictionary`2& writeOnlyValues);
    internal void PersistenceDone();
    internal void OnLoad(IDictionary`2<XName, object> readWriteValues);
    public sealed virtual void Dispose();
    private sealed virtual override void System.Runtime.ICancelable.Cancel();
}
[DataContractAttribute]
internal class System.Activities.Statements.ExecutionTracker : object {
    public int Count { get; }
    [DataMemberAttribute]
internal List`1<CompensationTokenData> SerializedExecutionOrderedList { get; internal set; }
    public int get_Count();
    internal List`1<CompensationTokenData> get_SerializedExecutionOrderedList();
    internal void set_SerializedExecutionOrderedList(List`1<CompensationTokenData> value);
    public void Add(CompensationTokenData compensationToken);
    public void Remove(CompensationTokenData compensationToken);
    public CompensationTokenData Get();
}
[ContentPropertyAttribute("Collection")]
public class System.Activities.Statements.ExistsInCollection`1 : CodeActivity`1<bool> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<ICollection`1<T>> Collection { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<T> Item { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<ICollection`1<T>> get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(InArgument`1<ICollection`1<T>> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T> get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(InArgument`1<T> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual bool Execute(CodeActivityContext context);
}
[ContentPropertyAttribute("Nodes")]
public class System.Activities.Statements.Flowchart : NativeActivity {
    [DefaultValueAttribute("False")]
public bool ValidateUnconnectedNodes { get; public set; }
    public Collection`1<Variable> Variables { get; }
    [DependsOnAttribute("Variables")]
public FlowNode StartNode { get; public set; }
    [DependsOnAttribute("StartNode")]
public Collection`1<FlowNode> Nodes { get; }
    [CompilerGeneratedAttribute]
public bool get_ValidateUnconnectedNodes();
    [CompilerGeneratedAttribute]
public void set_ValidateUnconnectedNodes(bool value);
    public Collection`1<Variable> get_Variables();
    [CompilerGeneratedAttribute]
public FlowNode get_StartNode();
    [CompilerGeneratedAttribute]
public void set_StartNode(FlowNode value);
    public Collection`1<FlowNode> get_Nodes();
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void UpdateInstance(NativeActivityUpdateContext updateContext);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    internal void OnSwitchCompleted(NativeActivityContext context, ActivityInstance completedInstance, T result);
}
public class System.Activities.Statements.FlowDecision : FlowNode {
    [DefaultValueAttribute("")]
public Activity`1<bool> Condition { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Condition")]
public FlowNode True { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("True")]
public FlowNode False { get; public set; }
    [DefaultValueAttribute("Decision")]
public string DisplayName { get; public set; }
    internal Activity ChildActivity { get; }
    public FlowDecision(Expression`1<Func`2<ActivityContext, bool>> condition);
    public FlowDecision(Activity`1<bool> condition);
    [CompilerGeneratedAttribute]
public Activity`1<bool> get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(Activity`1<bool> value);
    [CompilerGeneratedAttribute]
public FlowNode get_True();
    [CompilerGeneratedAttribute]
public void set_True(FlowNode value);
    [CompilerGeneratedAttribute]
public FlowNode get_False();
    [CompilerGeneratedAttribute]
public void set_False(FlowNode value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    internal virtual void OnOpen(Flowchart owner, NativeActivityMetadata metadata);
    internal virtual void GetConnectedNodes(IList`1<FlowNode> connections);
    internal virtual Activity get_ChildActivity();
    internal bool Execute(NativeActivityContext context, CompletionCallback`1<bool> onConditionCompleted);
}
public abstract class System.Activities.Statements.FlowNode : object {
    internal Activity ChildActivity { get; }
    internal int Index { get; internal set; }
    internal bool IsOpen { get; }
    internal Flowchart Owner { get; }
    internal abstract virtual Activity get_ChildActivity();
    [CompilerGeneratedAttribute]
internal int get_Index();
    [CompilerGeneratedAttribute]
internal void set_Index(int value);
    internal bool get_IsOpen();
    internal Flowchart get_Owner();
    internal bool Open(Flowchart owner, NativeActivityMetadata metadata);
    internal abstract virtual void OnOpen(Flowchart owner, NativeActivityMetadata metadata);
    internal void GetChildActivities(ICollection`1<Activity> children);
    internal abstract virtual void GetConnectedNodes(IList`1<FlowNode> connections);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.FlowStep : FlowNode {
    [DefaultValueAttribute("")]
public Activity Action { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Action")]
public FlowNode Next { get; public set; }
    internal Activity ChildActivity { get; }
    [CompilerGeneratedAttribute]
public Activity get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Activity value);
    [CompilerGeneratedAttribute]
public FlowNode get_Next();
    [CompilerGeneratedAttribute]
public void set_Next(FlowNode value);
    internal virtual void OnOpen(Flowchart owner, NativeActivityMetadata metadata);
    internal virtual void GetConnectedNodes(IList`1<FlowNode> connections);
    internal virtual Activity get_ChildActivity();
    internal bool Execute(NativeActivityContext context, CompletionCallback onCompleted, FlowNode& nextNode);
}
[ContentPropertyAttribute("Cases")]
public class System.Activities.Statements.FlowSwitch`1 : FlowNode {
    internal IDictionary`2<T, FlowNode> cases;
    [DefaultValueAttribute("")]
public Activity`1<T> Expression { get; public set; }
    [DefaultValueAttribute("")]
public FlowNode Default { get; public set; }
    public IDictionary`2<T, FlowNode> Cases { get; }
    [DefaultValueAttribute("Switch")]
public string DisplayName { get; public set; }
    internal Activity ChildActivity { get; }
    [CompilerGeneratedAttribute]
public Activity`1<T> get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(Activity`1<T> value);
    [CompilerGeneratedAttribute]
public FlowNode get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(FlowNode value);
    public IDictionary`2<T, FlowNode> get_Cases();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    internal virtual void OnOpen(Flowchart owner, NativeActivityMetadata metadata);
    internal virtual void GetConnectedNodes(IList`1<FlowNode> connections);
    internal virtual Activity get_ChildActivity();
    private sealed virtual override bool System.Activities.Statements.IFlowSwitch.Execute(NativeActivityContext context, Flowchart parent);
    private sealed virtual override FlowNode System.Activities.Statements.IFlowSwitch.GetNextNode(object value);
}
[ContentPropertyAttribute("Body")]
public class System.Activities.Statements.ForEach`1 : NativeActivity {
    [DefaultValueAttribute("")]
public ActivityAction`1<T> Body { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<IEnumerable`1<T>> Values { get; public set; }
    [CompilerGeneratedAttribute]
public ActivityAction`1<T> get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(ActivityAction`1<T> value);
    [CompilerGeneratedAttribute]
public InArgument`1<IEnumerable`1<T>> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(InArgument`1<IEnumerable`1<T>> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Body")]
public class System.Activities.Statements.HandleScope`1 : NativeActivity {
    public InArgument`1<THandle> Handle { get; public set; }
    public Activity Body { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<THandle> get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(InArgument`1<THandle> value);
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
public class System.Activities.Statements.If : NativeActivity {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<bool> Condition { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Condition")]
public Activity Then { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Then")]
public Activity Else { get; public set; }
    public If(Expression`1<Func`2<ActivityContext, bool>> condition);
    public If(Activity`1<bool> condition);
    public If(InArgument`1<bool> condition);
    [CompilerGeneratedAttribute]
public InArgument`1<bool> get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(InArgument`1<bool> value);
    [CompilerGeneratedAttribute]
public Activity get_Then();
    [CompilerGeneratedAttribute]
public void set_Then(Activity value);
    [CompilerGeneratedAttribute]
public Activity get_Else();
    [CompilerGeneratedAttribute]
public void set_Else(Activity value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
}
internal class System.Activities.Statements.IfExpression : CodeActivity`1<bool> {
    public InArgument`1<IEnumerable`1<Activity>> Elements { get; public set; }
    public InArgument`1<int> Index { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<IEnumerable`1<Activity>> get_Elements();
    [CompilerGeneratedAttribute]
public void set_Elements(InArgument`1<IEnumerable`1<Activity>> value);
    [CompilerGeneratedAttribute]
public InArgument`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(InArgument`1<int> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual bool Execute(CodeActivityContext context);
}
internal interface System.Activities.Statements.IFlowSwitch {
    public abstract virtual bool Execute(NativeActivityContext context, Flowchart parent);
    public abstract virtual FlowNode GetNextNode(object value);
}
internal class System.Activities.Statements.InternalCompensate : NativeActivity {
    public InArgument`1<CompensationToken> Target { get; public set; }
    protected bool CanInduceIdle { get; }
    [CompilerGeneratedAttribute]
public InArgument`1<CompensationToken> get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(InArgument`1<CompensationToken> value);
    protected virtual bool get_CanInduceIdle();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
internal class System.Activities.Statements.InternalConfirm : NativeActivity {
    public InArgument`1<CompensationToken> Target { get; public set; }
    protected bool CanInduceIdle { get; }
    [CompilerGeneratedAttribute]
public InArgument`1<CompensationToken> get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(InArgument`1<CompensationToken> value);
    protected virtual bool get_CanInduceIdle();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
internal class System.Activities.Statements.InternalState : NativeActivity`1<string> {
    [RequiredArgumentAttribute]
public InArgument`1<StateMachineEventManager> EventManager { get; public set; }
    public Activity Entry { get; }
    public Activity Exit { get; }
    [DefaultValueAttribute("False")]
public bool IsFinal { get; }
    public string StateId { get; }
    public Collection`1<Transition> Transitions { get; }
    public Collection`1<Variable> Variables { get; }
    public string StateMachineName { get; }
    protected bool CanInduceIdle { get; }
    public InternalState(State state);
    [CompilerGeneratedAttribute]
public InArgument`1<StateMachineEventManager> get_EventManager();
    [CompilerGeneratedAttribute]
public void set_EventManager(InArgument`1<StateMachineEventManager> value);
    public Activity get_Entry();
    public Activity get_Exit();
    public bool get_IsFinal();
    public string get_StateId();
    public Collection`1<Transition> get_Transitions();
    public Collection`1<Variable> get_Variables();
    public string get_StateMachineName();
    protected virtual bool get_CanInduceIdle();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Abort(NativeActivityAbortContext context);
    protected virtual void Cancel(NativeActivityContext context);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void UpdateInstance(NativeActivityUpdateContext updateContext);
}
internal class System.Activities.Statements.InternalTransition : object {
    public int InternalTransitionIndex { get; public set; }
    public bool IsUnconditional { get; }
    public Collection`1<TransitionData> TransitionDataList { get; }
    public Activity Trigger { get; public set; }
    [CompilerGeneratedAttribute]
public int get_InternalTransitionIndex();
    [CompilerGeneratedAttribute]
public void set_InternalTransitionIndex(int value);
    public bool get_IsUnconditional();
    public Collection`1<TransitionData> get_TransitionDataList();
    [CompilerGeneratedAttribute]
public Activity get_Trigger();
    [CompilerGeneratedAttribute]
public void set_Trigger(Activity value);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction : NativeActivity {
    [DefaultValueAttribute("")]
public ActivityAction Action { get; public set; }
    [CompilerGeneratedAttribute]
public ActivityAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`1 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T> Argument { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`1<T> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T> get_Argument();
    [CompilerGeneratedAttribute]
public void set_Argument(InArgument`1<T> value);
    [CompilerGeneratedAttribute]
public ActivityAction`1<T> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`1<T> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`10 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public ActivityAction`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`11 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public ActivityAction`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`12 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T12> Argument12 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(InArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public ActivityAction`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`13 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T12> Argument12 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T13> Argument13 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(InArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(InArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public ActivityAction`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`14 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T12> Argument12 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T13> Argument13 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T14> Argument14 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(InArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(InArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(InArgument`1<T14> value);
    [CompilerGeneratedAttribute]
public ActivityAction`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`15 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T12> Argument12 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T13> Argument13 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T14> Argument14 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T15> Argument15 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(InArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(InArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(InArgument`1<T14> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T15> get_Argument15();
    [CompilerGeneratedAttribute]
public void set_Argument15(InArgument`1<T15> value);
    [CompilerGeneratedAttribute]
public ActivityAction`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`16 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T10> Argument10 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T11> Argument11 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T12> Argument12 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T13> Argument13 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T14> Argument14 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T15> Argument15 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T16> Argument16 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T10> get_Argument10();
    [CompilerGeneratedAttribute]
public void set_Argument10(InArgument`1<T10> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T11> get_Argument11();
    [CompilerGeneratedAttribute]
public void set_Argument11(InArgument`1<T11> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T12> get_Argument12();
    [CompilerGeneratedAttribute]
public void set_Argument12(InArgument`1<T12> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T13> get_Argument13();
    [CompilerGeneratedAttribute]
public void set_Argument13(InArgument`1<T13> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T14> get_Argument14();
    [CompilerGeneratedAttribute]
public void set_Argument14(InArgument`1<T14> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T15> get_Argument15();
    [CompilerGeneratedAttribute]
public void set_Argument15(InArgument`1<T15> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T16> get_Argument16();
    [CompilerGeneratedAttribute]
public void set_Argument16(InArgument`1<T16> value);
    [CompilerGeneratedAttribute]
public ActivityAction`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`2 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`2<T1, T2> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public ActivityAction`2<T1, T2> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`2<T1, T2> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`3 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`3<T1, T2, T3> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public ActivityAction`3<T1, T2, T3> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`3<T1, T2, T3> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`4 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`4<T1, T2, T3, T4> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public ActivityAction`4<T1, T2, T3, T4> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`4<T1, T2, T3, T4> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`5 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`5<T1, T2, T3, T4, T5> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public ActivityAction`5<T1, T2, T3, T4, T5> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`5<T1, T2, T3, T4, T5> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`6 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`6<T1, T2, T3, T4, T5, T6> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public ActivityAction`6<T1, T2, T3, T4, T5, T6> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`6<T1, T2, T3, T4, T5, T6> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`7 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`7<T1, T2, T3, T4, T5, T6, T7> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public ActivityAction`7<T1, T2, T3, T4, T5, T6, T7> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`7<T1, T2, T3, T4, T5, T6, T7> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`8 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`8<T1, T2, T3, T4, T5, T6, T7, T8> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public ActivityAction`8<T1, T2, T3, T4, T5, T6, T7, T8> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`8<T1, T2, T3, T4, T5, T6, T7, T8> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.InvokeAction`9 : NativeActivity {
    [RequiredArgumentAttribute]
public InArgument`1<T1> Argument1 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T2> Argument2 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T3> Argument3 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T4> Argument4 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T5> Argument5 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T6> Argument6 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T7> Argument7 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T8> Argument8 { get; public set; }
    [RequiredArgumentAttribute]
public InArgument`1<T9> Argument9 { get; public set; }
    [DefaultValueAttribute("")]
public ActivityAction`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Action { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<T1> get_Argument1();
    [CompilerGeneratedAttribute]
public void set_Argument1(InArgument`1<T1> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T2> get_Argument2();
    [CompilerGeneratedAttribute]
public void set_Argument2(InArgument`1<T2> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T3> get_Argument3();
    [CompilerGeneratedAttribute]
public void set_Argument3(InArgument`1<T3> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T4> get_Argument4();
    [CompilerGeneratedAttribute]
public void set_Argument4(InArgument`1<T4> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T5> get_Argument5();
    [CompilerGeneratedAttribute]
public void set_Argument5(InArgument`1<T5> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T6> get_Argument6();
    [CompilerGeneratedAttribute]
public void set_Argument6(InArgument`1<T6> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T7> get_Argument7();
    [CompilerGeneratedAttribute]
public void set_Argument7(InArgument`1<T7> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T8> get_Argument8();
    [CompilerGeneratedAttribute]
public void set_Argument8(InArgument`1<T8> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T9> get_Argument9();
    [CompilerGeneratedAttribute]
public void set_Argument9(InArgument`1<T9> value);
    [CompilerGeneratedAttribute]
public ActivityAction`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(ActivityAction`9<T1, T2, T3, T4, T5, T6, T7, T8, T9> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Delegate")]
public class System.Activities.Statements.InvokeDelegate : NativeActivity {
    [DefaultValueAttribute("")]
public ActivityDelegate Delegate { get; public set; }
    public IDictionary`2<string, Argument> DelegateArguments { get; }
    [DefaultValueAttribute("")]
public Activity Default { get; public set; }
    [CompilerGeneratedAttribute]
public ActivityDelegate get_Delegate();
    [CompilerGeneratedAttribute]
public void set_Delegate(ActivityDelegate value);
    public IDictionary`2<string, Argument> get_DelegateArguments();
    [CompilerGeneratedAttribute]
public Activity get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(Activity value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Parameters")]
public class System.Activities.Statements.InvokeMethod : AsyncCodeActivity {
    public Collection`1<Type> GenericTypeArguments { get; }
    public string MethodName { get; public set; }
    public Collection`1<Argument> Parameters { get; }
    [DefaultValueAttribute("")]
public OutArgument Result { get; public set; }
    [DefaultValueAttribute("")]
public InArgument TargetObject { get; public set; }
    [DefaultValueAttribute("")]
public Type TargetType { get; public set; }
    [DefaultValueAttribute("False")]
public bool RunAsynchronously { get; public set; }
    private static InvokeMethod();
    public Collection`1<Type> get_GenericTypeArguments();
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    public Collection`1<Argument> get_Parameters();
    [CompilerGeneratedAttribute]
public OutArgument get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(OutArgument value);
    [CompilerGeneratedAttribute]
public InArgument get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(InArgument value);
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
public void set_TargetType(Type value);
    [CompilerGeneratedAttribute]
public bool get_RunAsynchronously();
    [CompilerGeneratedAttribute]
public void set_RunAsynchronously(bool value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual IAsyncResult BeginExecute(AsyncCodeActivityContext context, AsyncCallback callback, object state);
    protected virtual void EndExecute(AsyncCodeActivityContext context, IAsyncResult result);
}
internal abstract class System.Activities.Statements.MethodExecutor : object {
    protected Activity invokingActivity;
    public bool MethodIsStatic { get; }
    public MethodExecutor(Activity invokingActivity, Type targetType, InArgument targetObject, Collection`1<Argument> parameters, RuntimeArgument returnObject);
    public abstract virtual bool get_MethodIsStatic();
    protected abstract virtual IAsyncResult BeginMakeMethodCall(AsyncCodeActivityContext context, object target, AsyncCallback callback, object state);
    protected abstract virtual void EndMakeMethodCall(AsyncCodeActivityContext context, IAsyncResult result);
    protected Object[] EvaluateAndPackParameters(CodeActivityContext context, MethodInfo method, bool usingAsyncPattern);
    public IAsyncResult BeginExecuteMethod(AsyncCodeActivityContext context, AsyncCallback callback, object state);
    public void EndExecuteMethod(AsyncCodeActivityContext context, IAsyncResult result);
    internal object InvokeAndUnwrapExceptions(Func`3<object, Object[], object> func, object targetInstance, Object[] actualParameters);
    public void SetOutArgumentAndReturnValue(ActivityContext context, object state, Object[] actualParameters);
    public void Trace(Activity parent);
}
internal class System.Activities.Statements.MethodResolver : object {
    public Collection`1<Type> GenericTypeArguments { get; public set; }
    public string MethodName { get; public set; }
    public Collection`1<Argument> Parameters { get; public set; }
    public RuntimeArgument Result { get; public set; }
    public InArgument TargetObject { get; public set; }
    public Type TargetType { get; public set; }
    public bool RunAsynchronously { get; public set; }
    public Activity Parent { get; public set; }
    internal Type ResultType { get; internal set; }
    private static MethodResolver();
    [CompilerGeneratedAttribute]
public Collection`1<Type> get_GenericTypeArguments();
    [CompilerGeneratedAttribute]
public void set_GenericTypeArguments(Collection`1<Type> value);
    [CompilerGeneratedAttribute]
public string get_MethodName();
    [CompilerGeneratedAttribute]
public void set_MethodName(string value);
    [CompilerGeneratedAttribute]
public Collection`1<Argument> get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(Collection`1<Argument> value);
    [CompilerGeneratedAttribute]
public RuntimeArgument get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(RuntimeArgument value);
    [CompilerGeneratedAttribute]
public InArgument get_TargetObject();
    [CompilerGeneratedAttribute]
public void set_TargetObject(InArgument value);
    [CompilerGeneratedAttribute]
public Type get_TargetType();
    [CompilerGeneratedAttribute]
public void set_TargetType(Type value);
    [CompilerGeneratedAttribute]
public bool get_RunAsynchronously();
    [CompilerGeneratedAttribute]
public void set_RunAsynchronously(bool value);
    [CompilerGeneratedAttribute]
public Activity get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(Activity value);
    [CompilerGeneratedAttribute]
internal Type get_ResultType();
    [CompilerGeneratedAttribute]
internal void set_ResultType(Type value);
    public void RegisterParameters(IList`1<RuntimeArgument> arguments);
    public void Trace();
    public void DetermineMethodInfo(CodeActivityMetadata metadata, MruCache`2<MethodInfo, Func`3<object, Object[], object>> funcCache, ReaderWriterLockSlim locker, MethodExecutor& methodExecutor);
}
[ContentPropertyAttribute("Body")]
public class System.Activities.Statements.NoPersistScope : NativeActivity {
    [DefaultValueAttribute("")]
public Activity Body { get; public set; }
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Branches")]
public class System.Activities.Statements.Parallel : NativeActivity {
    public Collection`1<Variable> Variables { get; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Variables")]
public Activity`1<bool> CompletionCondition { get; public set; }
    [DependsOnAttribute("CompletionCondition")]
public Collection`1<Activity> Branches { get; }
    public Collection`1<Variable> get_Variables();
    [CompilerGeneratedAttribute]
public Activity`1<bool> get_CompletionCondition();
    [CompilerGeneratedAttribute]
public void set_CompletionCondition(Activity`1<bool> value);
    public Collection`1<Activity> get_Branches();
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void UpdateInstance(NativeActivityUpdateContext updateContext);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
[ContentPropertyAttribute("Body")]
public class System.Activities.Statements.ParallelForEach`1 : NativeActivity {
    [DefaultValueAttribute("")]
public ActivityAction`1<T> Body { get; public set; }
    [DefaultValueAttribute("")]
public Activity`1<bool> CompletionCondition { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<IEnumerable`1<T>> Values { get; public set; }
    [CompilerGeneratedAttribute]
public ActivityAction`1<T> get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(ActivityAction`1<T> value);
    [CompilerGeneratedAttribute]
public Activity`1<bool> get_CompletionCondition();
    [CompilerGeneratedAttribute]
public void set_CompletionCondition(Activity`1<bool> value);
    [CompilerGeneratedAttribute]
public InArgument`1<IEnumerable`1<T>> get_Values();
    [CompilerGeneratedAttribute]
public void set_Values(InArgument`1<IEnumerable`1<T>> value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
public class System.Activities.Statements.Persist : NativeActivity {
    protected bool CanInduceIdle { get; }
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual bool get_CanInduceIdle();
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Branches")]
public class System.Activities.Statements.Pick : NativeActivity {
    protected bool CanInduceIdle { get; }
    public Collection`1<PickBranch> Branches { get; }
    protected virtual bool get_CanInduceIdle();
    public Collection`1<PickBranch> get_Branches();
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void UpdateInstance(NativeActivityUpdateContext updateContext);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
[ContentPropertyAttribute("Action")]
public class System.Activities.Statements.PickBranch : object {
    public Collection`1<Variable> Variables { get; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Variables")]
public Activity Trigger { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Trigger")]
public Activity Action { get; public set; }
    [DefaultValueAttribute("PickBranch")]
public string DisplayName { get; public set; }
    public Collection`1<Variable> get_Variables();
    [CompilerGeneratedAttribute]
public Activity get_Trigger();
    [CompilerGeneratedAttribute]
public void set_Trigger(Activity value);
    [CompilerGeneratedAttribute]
public Activity get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Activity value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
}
[ContentPropertyAttribute("Collection")]
public class System.Activities.Statements.RemoveFromCollection`1 : CodeActivity`1<bool> {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<ICollection`1<T>> Collection { get; public set; }
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<T> Item { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<ICollection`1<T>> get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(InArgument`1<ICollection`1<T>> value);
    [CompilerGeneratedAttribute]
public InArgument`1<T> get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(InArgument`1<T> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual bool Execute(CodeActivityContext context);
}
public class System.Activities.Statements.Rethrow : NativeActivity {
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Activities")]
public class System.Activities.Statements.Sequence : NativeActivity {
    public Collection`1<Variable> Variables { get; }
    [DependsOnAttribute("Variables")]
public Collection`1<Activity> Activities { get; }
    public Collection`1<Variable> get_Variables();
    public Collection`1<Activity> get_Activities();
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
public class System.Activities.Statements.State : object {
    public string DisplayName { get; public set; }
    [DefaultValueAttribute("")]
public Activity Entry { get; public set; }
    [DependsOnAttribute("Entry")]
[DefaultValueAttribute("")]
public Activity Exit { get; public set; }
    [DependsOnAttribute("Exit")]
public Collection`1<Transition> Transitions { get; }
    [DependsOnAttribute("Transitions")]
public Collection`1<Variable> Variables { get; }
    [DefaultValueAttribute("False")]
public bool IsFinal { get; public set; }
    internal InternalState InternalState { get; }
    internal UInt32 PassNumber { get; internal set; }
    internal bool Reachable { get; internal set; }
    internal string StateId { get; internal set; }
    internal string StateMachineName { get; internal set; }
    internal NoOp NullTrigger { get; }
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Activity get_Entry();
    [CompilerGeneratedAttribute]
public void set_Entry(Activity value);
    [CompilerGeneratedAttribute]
public Activity get_Exit();
    [CompilerGeneratedAttribute]
public void set_Exit(Activity value);
    public Collection`1<Transition> get_Transitions();
    public Collection`1<Variable> get_Variables();
    [CompilerGeneratedAttribute]
public bool get_IsFinal();
    [CompilerGeneratedAttribute]
public void set_IsFinal(bool value);
    internal InternalState get_InternalState();
    [CompilerGeneratedAttribute]
internal UInt32 get_PassNumber();
    [CompilerGeneratedAttribute]
internal void set_PassNumber(UInt32 value);
    [CompilerGeneratedAttribute]
internal bool get_Reachable();
    [CompilerGeneratedAttribute]
internal void set_Reachable(bool value);
    [CompilerGeneratedAttribute]
internal string get_StateId();
    [CompilerGeneratedAttribute]
internal void set_StateId(string value);
    [CompilerGeneratedAttribute]
internal string get_StateMachineName();
    [CompilerGeneratedAttribute]
internal void set_StateMachineName(string value);
    internal void ClearInternalState();
    internal NoOp get_NullTrigger();
}
[ContentPropertyAttribute("States")]
public class System.Activities.Statements.StateMachine : NativeActivity {
    [DefaultValueAttribute("")]
public State InitialState { get; public set; }
    [DependsOnAttribute("InitialState")]
public Collection`1<State> States { get; }
    [DependsOnAttribute("States")]
public Collection`1<Variable> Variables { get; }
    private static StateMachine();
    [CompilerGeneratedAttribute]
public State get_InitialState();
    [CompilerGeneratedAttribute]
public void set_InitialState(State value);
    public Collection`1<State> get_States();
    public Collection`1<Variable> get_Variables();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
}
[DataContractAttribute]
internal class System.Activities.Statements.StateMachineEventManager : object {
    [DataMemberAttribute]
public TriggerCompletedEvent CurrentBeingProcessedEvent { get; public set; }
    [DataMemberAttribute]
public int CurrentConditionIndex { get; public set; }
    [DataMemberAttribute]
public bool OnTransition { get; public set; }
    public IEnumerable`1<TriggerCompletedEvent> Queue { get; }
    [DataMemberAttribute]
internal Queue`1<TriggerCompletedEvent> SerializedQueue { get; internal set; }
    [DataMemberAttribute]
internal Collection`1<Bookmark> SerializedActiveBookmarks { get; internal set; }
    [CompilerGeneratedAttribute]
public TriggerCompletedEvent get_CurrentBeingProcessedEvent();
    [CompilerGeneratedAttribute]
public void set_CurrentBeingProcessedEvent(TriggerCompletedEvent value);
    [CompilerGeneratedAttribute]
public int get_CurrentConditionIndex();
    [CompilerGeneratedAttribute]
public void set_CurrentConditionIndex(int value);
    [CompilerGeneratedAttribute]
public bool get_OnTransition();
    [CompilerGeneratedAttribute]
public void set_OnTransition(bool value);
    public IEnumerable`1<TriggerCompletedEvent> get_Queue();
    internal Queue`1<TriggerCompletedEvent> get_SerializedQueue();
    internal void set_SerializedQueue(Queue`1<TriggerCompletedEvent> value);
    internal Collection`1<Bookmark> get_SerializedActiveBookmarks();
    internal void set_SerializedActiveBookmarks(Collection`1<Bookmark> value);
    public void AddActiveBookmark(Bookmark bookmark);
    public TriggerCompletedEvent GetNextCompletedEvent();
    public bool IsReferredByBeingProcessedEvent(Bookmark bookmark);
    public void RegisterCompletedEvent(TriggerCompletedEvent completedEvent, Boolean& canBeProcessedImmediately);
    public void RemoveActiveBookmark(Bookmark bookmark);
}
internal class System.Activities.Statements.StateMachineExtension : object {
    public sealed virtual IEnumerable`1<object> GetAdditionalExtensions();
    public sealed virtual void SetInstance(WorkflowInstanceProxy instance);
    public void ResumeBookmark(Bookmark bookmark);
}
internal static class System.Activities.Statements.StateMachineIdHelper : object {
    internal static char StateIdSeparator;
    public static int GetChildStateIndex(string stateId, string descendantId);
    public static string GenerateStateId(string parentId, int index);
    public static string GenerateTransitionId(string stateid, int transitionIndex);
    public static bool IsAncestor(string state1Id, string state2Id);
}
[ContentPropertyAttribute("Cases")]
public class System.Activities.Statements.Switch`1 : NativeActivity {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<T> Expression { get; public set; }
    public IDictionary`2<T, Activity> Cases { get; }
    [DefaultValueAttribute("")]
public Activity Default { get; public set; }
    public Switch`1(Expression`1<Func`2<ActivityContext, T>> expression);
    public Switch`1(Activity`1<T> expression);
    public Switch`1(InArgument`1<T> expression);
    [CompilerGeneratedAttribute]
public InArgument`1<T> get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(InArgument`1<T> value);
    public IDictionary`2<T, Activity> get_Cases();
    [CompilerGeneratedAttribute]
public Activity get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(Activity value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
public class System.Activities.Statements.TerminateWorkflow : NativeActivity {
    [DefaultValueAttribute("")]
public InArgument`1<string> Reason { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<Exception> Exception { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<string> get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(InArgument`1<string> value);
    [CompilerGeneratedAttribute]
public InArgument`1<Exception> get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(InArgument`1<Exception> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
[ContentPropertyAttribute("Exception")]
public class System.Activities.Statements.Throw : CodeActivity {
    [RequiredArgumentAttribute]
[DefaultValueAttribute("")]
public InArgument`1<Exception> Exception { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<Exception> get_Exception();
    [CompilerGeneratedAttribute]
public void set_Exception(InArgument`1<Exception> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual void Execute(CodeActivityContext context);
}
public abstract class System.Activities.Statements.TimerExtension : object {
    public void RegisterTimer(TimeSpan timeout, Bookmark bookmark);
    public void CancelTimer(Bookmark bookmark);
    protected abstract virtual void OnRegisterTimer(TimeSpan timeout, Bookmark bookmark);
    protected abstract virtual void OnCancelTimer(Bookmark bookmark);
}
[DataContractAttribute]
internal class System.Activities.Statements.TimerTable : object {
    public int Count { get; }
    [DataMemberAttribute]
internal SortedTimerList SerializedSortedTimerList { get; internal set; }
    public TimerTable(DurableTimerExtension timerExtension);
    public int get_Count();
    internal SortedTimerList get_SerializedSortedTimerList();
    internal void set_SerializedSortedTimerList(SortedTimerList value);
    public void AddTimer(TimeSpan timeout, Bookmark bookmark);
    public void RemoveTimer(Bookmark bookmark);
    public void RetryTimer(Bookmark bookmark);
    public DateTime GetNextDueTime();
    public void OnLoad(DurableTimerExtension timerExtension);
    public void MarkAsImmutable();
    public void MarkAsMutable();
    public sealed virtual void Dispose();
}
public class System.Activities.Statements.Tracking.StateMachineStateQuery : CustomTrackingQuery {
    public string Name { get; }
    public string get_Name();
}
[DataContractAttribute]
public class System.Activities.Statements.Tracking.StateMachineStateRecord : CustomTrackingRecord {
    internal static string StateMachineStateRecordName;
    public string StateMachineName { get; internal set; }
    [DataMemberAttribute]
public string StateName { get; internal set; }
    internal StateMachineStateRecord(string name);
    internal StateMachineStateRecord(string name, TraceLevel level);
    internal StateMachineStateRecord(Guid instanceId, string name, TraceLevel level);
    private static StateMachineStateRecord();
    public string get_StateMachineName();
    internal void set_StateMachineName(string value);
    public string get_StateName();
    internal void set_StateName(string value);
    protected internal virtual TrackingRecord Clone();
}
[ContentPropertyAttribute("Body")]
public class System.Activities.Statements.TransactionScope : NativeActivity {
    [DefaultValueAttribute("")]
public Activity Body { get; public set; }
    [DefaultValueAttribute("True")]
public bool AbortInstanceOnTransactionFailure { get; public set; }
    public IsolationLevel IsolationLevel { get; public set; }
    public InArgument`1<TimeSpan> Timeout { get; public set; }
    protected bool CanInduceIdle { get; }
    private static TransactionScope();
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    public bool get_AbortInstanceOnTransactionFailure();
    public void set_AbortInstanceOnTransactionFailure(bool value);
    [CompilerGeneratedAttribute]
public IsolationLevel get_IsolationLevel();
    [CompilerGeneratedAttribute]
public void set_IsolationLevel(IsolationLevel value);
    public InArgument`1<TimeSpan> get_Timeout();
    public void set_Timeout(InArgument`1<TimeSpan> value);
    protected virtual bool get_CanInduceIdle();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeIsolationLevel();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeTimeout();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
public class System.Activities.Statements.Transition : object {
    [DependsOnAttribute("To")]
[DefaultValueAttribute("")]
public Activity Action { get; public set; }
    [DependsOnAttribute("Action")]
[DefaultValueAttribute("")]
public Activity`1<bool> Condition { get; public set; }
    public string DisplayName { get; public set; }
    [DependsOnAttribute("Trigger")]
[DefaultValueAttribute("")]
public State To { get; public set; }
    [DefaultValueAttribute("")]
public Activity Trigger { get; public set; }
    internal Activity ActiveTrigger { get; }
    internal string Id { get; internal set; }
    internal State Source { get; internal set; }
    [CompilerGeneratedAttribute]
public Activity get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Activity value);
    [CompilerGeneratedAttribute]
public Activity`1<bool> get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(Activity`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public State get_To();
    [CompilerGeneratedAttribute]
public void set_To(State value);
    [CompilerGeneratedAttribute]
public Activity get_Trigger();
    [CompilerGeneratedAttribute]
public void set_Trigger(Activity value);
    internal Activity get_ActiveTrigger();
    [CompilerGeneratedAttribute]
internal string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    [CompilerGeneratedAttribute]
internal State get_Source();
    [CompilerGeneratedAttribute]
internal void set_Source(State value);
}
internal class System.Activities.Statements.TransitionData : object {
    public Activity Action { get; public set; }
    public Activity`1<bool> Condition { get; public set; }
    public InternalState To { get; public set; }
    [CompilerGeneratedAttribute]
public Activity get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(Activity value);
    [CompilerGeneratedAttribute]
public Activity`1<bool> get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(Activity`1<bool> value);
    [CompilerGeneratedAttribute]
public InternalState get_To();
    [CompilerGeneratedAttribute]
public void set_To(InternalState value);
}
[DataContractAttribute]
internal class System.Activities.Statements.TriggerCompletedEvent : object {
    [DataMemberAttribute]
public Bookmark Bookmark { get; public set; }
    [DataMemberAttribute]
public int TriggedId { get; public set; }
    [CompilerGeneratedAttribute]
public Bookmark get_Bookmark();
    [CompilerGeneratedAttribute]
public void set_Bookmark(Bookmark value);
    [CompilerGeneratedAttribute]
public int get_TriggedId();
    [CompilerGeneratedAttribute]
public void set_TriggedId(int value);
}
public class System.Activities.Statements.TryCatch : NativeActivity {
    internal static string FaultContextId;
    public Collection`1<Variable> Variables { get; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Variables")]
public Activity Try { get; public set; }
    [DependsOnAttribute("Try")]
public Collection`1<Catch> Catches { get; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Catches")]
public Activity Finally { get; public set; }
    public Collection`1<Variable> get_Variables();
    [CompilerGeneratedAttribute]
public Activity get_Try();
    [CompilerGeneratedAttribute]
public void set_Try(Activity value);
    public Collection`1<Catch> get_Catches();
    [CompilerGeneratedAttribute]
public Activity get_Finally();
    [CompilerGeneratedAttribute]
public void set_Finally(Activity value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void UpdateInstance(NativeActivityUpdateContext updateContext);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    internal static Catch FindCatchActivity(Type typeToMatch, IList`1<Catch> catches);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
[ContentPropertyAttribute("Body")]
public class System.Activities.Statements.While : NativeActivity {
    public Collection`1<Variable> Variables { get; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Variables")]
public Activity`1<bool> Condition { get; public set; }
    [DefaultValueAttribute("")]
[DependsOnAttribute("Condition")]
public Activity Body { get; public set; }
    public While(Expression`1<Func`2<ActivityContext, bool>> condition);
    public While(Activity`1<bool> condition);
    public Collection`1<Variable> get_Variables();
    [CompilerGeneratedAttribute]
public Activity`1<bool> get_Condition();
    [CompilerGeneratedAttribute]
public void set_Condition(Activity`1<bool> value);
    [CompilerGeneratedAttribute]
public Activity get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(Activity value);
    protected virtual void OnCreateDynamicUpdateMap(NativeActivityUpdateMapMetadata metadata, Activity originalActivity);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
internal class System.Activities.Statements.WhileExpression : CodeActivity`1<bool> {
    public InArgument`1<bool> AssertFlag { get; public set; }
    public InArgument`1<int> Index { get; public set; }
    public InArgument`1<IEnumerable`1<Activity>> Elements { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<bool> get_AssertFlag();
    [CompilerGeneratedAttribute]
public void set_AssertFlag(InArgument`1<bool> value);
    [CompilerGeneratedAttribute]
public InArgument`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(InArgument`1<int> value);
    [CompilerGeneratedAttribute]
public InArgument`1<IEnumerable`1<Activity>> get_Elements();
    [CompilerGeneratedAttribute]
public void set_Elements(InArgument`1<IEnumerable`1<Activity>> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual bool Execute(CodeActivityContext context);
}
internal class System.Activities.Statements.WorkflowCompensationBehavior : NativeActivity {
    protected bool CanInduceIdle { get; }
    protected virtual bool get_CanInduceIdle();
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected virtual void Cancel(NativeActivityContext context);
}
public class System.Activities.Statements.WorkflowTerminatedException : Exception {
    public WorkflowTerminatedException(string message);
    public WorkflowTerminatedException(string message, Exception innerException);
    protected WorkflowTerminatedException(SerializationInfo info, StreamingContext context);
}
[ContentPropertyAttribute("Text")]
public class System.Activities.Statements.WriteLine : CodeActivity {
    [DefaultValueAttribute("")]
public InArgument`1<TextWriter> TextWriter { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> Text { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<TextWriter> get_TextWriter();
    [CompilerGeneratedAttribute]
public void set_TextWriter(InArgument`1<TextWriter> value);
    [CompilerGeneratedAttribute]
public InArgument`1<string> get_Text();
    [CompilerGeneratedAttribute]
public void set_Text(InArgument`1<string> value);
    protected virtual void CacheMetadata(CodeActivityMetadata metadata);
    protected virtual void Execute(CodeActivityContext context);
}
internal static class System.Activities.SynchronizationContextHelper : object {
    public static SynchronizationContext GetDefaultSynchronizationContext();
    public static SynchronizationContext CloneSynchronizationContext(SynchronizationContext context);
}
internal class System.Activities.TD : object {
    internal static CultureInfo Culture { get; internal set; }
    private static TD();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static bool TrackingRecordDroppedIsEnabled();
    internal static void TrackingRecordDropped(long RecordNumber, Guid ProviderId);
    internal static bool TrackingRecordRaisedIsEnabled();
    internal static void TrackingRecordRaised(string param0, string param1);
    internal static bool TrackingRecordTruncatedIsEnabled();
    internal static void TrackingRecordTruncated(long RecordNumber, Guid ProviderId);
    internal static bool TrackingDataExtractedIsEnabled();
    internal static void TrackingDataExtracted(string Data, string Activity);
    internal static bool SwitchCaseNotFoundIsEnabled();
    internal static void SwitchCaseNotFound(string param0);
    internal static bool TryCatchExceptionFromTryIsEnabled();
    internal static void TryCatchExceptionFromTry(string param0, string param1);
    internal static bool TryCatchExceptionDuringCancelationIsEnabled();
    internal static void TryCatchExceptionDuringCancelation(string param0);
    internal static bool TryCatchExceptionFromCatchOrFinallyIsEnabled();
    internal static void TryCatchExceptionFromCatchOrFinally(string param0);
    internal static bool CompleteBookmarkWorkItemIsEnabled();
    internal static void CompleteBookmarkWorkItem(string param0, string param1, string param2, string param3, string param4);
    internal static bool CompleteCancelActivityWorkItemIsEnabled();
    internal static void CompleteCancelActivityWorkItem(string param0, string param1, string param2);
    internal static bool CompleteCompletionWorkItemIsEnabled();
    internal static void CompleteCompletionWorkItem(string param0, string param1, string param2, string param3, string param4, string param5);
    internal static bool CompleteExecuteActivityWorkItemIsEnabled();
    internal static void CompleteExecuteActivityWorkItem(string param0, string param1, string param2);
    internal static bool CompleteFaultWorkItemIsEnabled();
    internal static void CompleteFaultWorkItem(string param0, string param1, string param2, string param3, string param4, string param5, Exception exception);
    internal static bool CompleteRuntimeWorkItemIsEnabled();
    internal static void CompleteRuntimeWorkItem(string param0, string param1, string param2);
    internal static bool CompleteTransactionContextWorkItemIsEnabled();
    internal static void CompleteTransactionContextWorkItem(string param0, string param1, string param2);
    internal static bool CreateBookmarkIsEnabled();
    internal static void CreateBookmark(string param0, string param1, string param2, string param3, string param4);
    internal static bool CreateBookmarkScopeIsEnabled();
    internal static void CreateBookmarkScope(string param0);
    internal static bool EnterNoPersistBlockIsEnabled();
    internal static void EnterNoPersistBlock();
    internal static bool ExitNoPersistBlockIsEnabled();
    internal static void ExitNoPersistBlock();
    internal static bool InArgumentBoundIsEnabled();
    internal static void InArgumentBound(string param0, string param1, string param2, string param3, string param4);
    internal static bool RuntimeTransactionCompleteIsEnabled();
    internal static void RuntimeTransactionComplete(string param0);
    internal static bool RuntimeTransactionCompletionRequestedIsEnabled();
    internal static void RuntimeTransactionCompletionRequested(string param0, string param1, string param2);
    internal static bool RuntimeTransactionSetIsEnabled();
    internal static void RuntimeTransactionSet(string param0, string param1, string param2, string param3, string param4, string param5);
    internal static bool ScheduleBookmarkWorkItemIsEnabled();
    internal static void ScheduleBookmarkWorkItem(string param0, string param1, string param2, string param3, string param4);
    internal static bool ScheduleCancelActivityWorkItemIsEnabled();
    internal static void ScheduleCancelActivityWorkItem(string param0, string param1, string param2);
    internal static bool ScheduleCompletionWorkItemIsEnabled();
    internal static void ScheduleCompletionWorkItem(string param0, string param1, string param2, string param3, string param4, string param5);
    internal static bool ScheduleExecuteActivityWorkItemIsEnabled();
    internal static void ScheduleExecuteActivityWorkItem(string param0, string param1, string param2);
    internal static bool ScheduleFaultWorkItemIsEnabled();
    internal static void ScheduleFaultWorkItem(string param0, string param1, string param2, string param3, string param4, string param5, Exception exception);
    internal static bool ScheduleRuntimeWorkItemIsEnabled();
    internal static void ScheduleRuntimeWorkItem(string param0, string param1, string param2);
    internal static bool ScheduleTransactionContextWorkItemIsEnabled();
    internal static void ScheduleTransactionContextWorkItem(string param0, string param1, string param2);
    internal static bool StartBookmarkWorkItemIsEnabled();
    internal static void StartBookmarkWorkItem(string param0, string param1, string param2, string param3, string param4);
    internal static bool StartCancelActivityWorkItemIsEnabled();
    internal static void StartCancelActivityWorkItem(string param0, string param1, string param2);
    internal static bool StartCompletionWorkItemIsEnabled();
    internal static void StartCompletionWorkItem(string param0, string param1, string param2, string param3, string param4, string param5);
    internal static bool StartExecuteActivityWorkItemIsEnabled();
    internal static void StartExecuteActivityWorkItem(string param0, string param1, string param2);
    internal static bool StartFaultWorkItemIsEnabled();
    internal static void StartFaultWorkItem(string param0, string param1, string param2, string param3, string param4, string param5, Exception exception);
    internal static bool StartRuntimeWorkItemIsEnabled();
    internal static void StartRuntimeWorkItem(string param0, string param1, string param2);
    internal static bool StartTransactionContextWorkItemIsEnabled();
    internal static void StartTransactionContextWorkItem(string param0, string param1, string param2);
    internal static bool BookmarkScopeInitializedIsEnabled();
    internal static void BookmarkScopeInitialized(string param0, string param1);
    internal static bool WorkflowActivityResumeIsEnabled();
    internal static void WorkflowActivityResume(Guid Id);
    internal static bool WorkflowActivityStartIsEnabled();
    internal static void WorkflowActivityStart(Guid Id);
    internal static bool WorkflowActivityStopIsEnabled();
    internal static void WorkflowActivityStop(Guid Id);
    internal static bool WorkflowActivitySuspendIsEnabled();
    internal static void WorkflowActivitySuspend(Guid Id);
    internal static bool ActivityCompletedIsEnabled();
    internal static void ActivityCompleted(string param0, string param1, string param2, string param3);
    internal static bool ActivityScheduledIsEnabled();
    internal static void ActivityScheduled(string param0, string param1, string param2, string param3, string param4, string param5);
    internal static bool WorkflowInstanceAbortedIsEnabled();
    internal static void WorkflowInstanceAborted(string param0, Exception exception);
    internal static bool WorkflowInstanceCanceledIsEnabled();
    internal static void WorkflowInstanceCanceled(string param0);
    internal static bool WorkflowApplicationCompletedIsEnabled();
    internal static void WorkflowApplicationCompleted(string param0);
    internal static bool WorkflowApplicationIdledIsEnabled();
    internal static void WorkflowApplicationIdled(string param0);
    internal static bool WorkflowApplicationPersistableIdleIsEnabled();
    internal static void WorkflowApplicationPersistableIdle(string param0, string param1);
    internal static bool WorkflowApplicationPersistedIsEnabled();
    internal static void WorkflowApplicationPersisted(string param0);
    internal static bool WorkflowApplicationTerminatedIsEnabled();
    internal static void WorkflowApplicationTerminated(string param0, Exception exception);
    internal static bool WorkflowApplicationUnhandledExceptionIsEnabled();
    internal static void WorkflowApplicationUnhandledException(string param0, string param1, string param2, string param3, Exception exception);
    internal static bool WorkflowApplicationUnloadedIsEnabled();
    internal static void WorkflowApplicationUnloaded(string param0);
    internal static bool InvokeMethodIsStaticIsEnabled();
    internal static void InvokeMethodIsStatic(string param0);
    internal static bool InvokeMethodIsNotStaticIsEnabled();
    internal static void InvokeMethodIsNotStatic(string param0);
    internal static bool InvokedMethodThrewExceptionIsEnabled();
    internal static void InvokedMethodThrewException(string param0, string param1);
    internal static bool InvokeMethodUseAsyncPatternIsEnabled();
    internal static void InvokeMethodUseAsyncPattern(string param0, string param1, string param2);
    internal static bool InvokeMethodDoesNotUseAsyncPatternIsEnabled();
    internal static void InvokeMethodDoesNotUseAsyncPattern(string param0);
    internal static bool FlowchartStartIsEnabled();
    internal static void FlowchartStart(string param0);
    internal static bool FlowchartEmptyIsEnabled();
    internal static void FlowchartEmpty(string param0);
    internal static bool FlowchartNextNullIsEnabled();
    internal static void FlowchartNextNull(string param0);
    internal static bool FlowchartSwitchCaseIsEnabled();
    internal static void FlowchartSwitchCase(string param0, string param1);
    internal static bool FlowchartSwitchDefaultIsEnabled();
    internal static void FlowchartSwitchDefault(string param0);
    internal static bool FlowchartSwitchCaseNotFoundIsEnabled();
    internal static void FlowchartSwitchCaseNotFound(string param0);
    internal static bool CompensationStateIsEnabled();
    internal static void CompensationState(string param0, string param1);
    internal static bool TrackingValueNotSerializableIsEnabled();
    internal static void TrackingValueNotSerializable(string name);
    internal static bool ExecuteWorkItemStartIsEnabled();
    internal static void ExecuteWorkItemStart();
    internal static bool ExecuteWorkItemStopIsEnabled();
    internal static void ExecuteWorkItemStop();
    internal static bool InternalCacheMetadataStartIsEnabled();
    internal static void InternalCacheMetadataStart(string id);
    internal static bool InternalCacheMetadataStopIsEnabled();
    internal static void InternalCacheMetadataStop(string id);
    internal static bool CompileVbExpressionStartIsEnabled();
    internal static void CompileVbExpressionStart(string expr);
    internal static bool CompileVbExpressionStopIsEnabled();
    internal static void CompileVbExpressionStop();
    internal static bool CacheRootMetadataStartIsEnabled();
    internal static void CacheRootMetadataStart(string activityName);
    internal static bool CacheRootMetadataStopIsEnabled();
    internal static void CacheRootMetadataStop(string activityName);
}
[DataContractAttribute]
public class System.Activities.Tracking.ActivityInfo : object {
    internal ActivityInstance Instance { get; private set; }
    [DataMemberAttribute]
public string Name { get; internal set; }
    [DataMemberAttribute]
public string Id { get; internal set; }
    [DataMemberAttribute]
public string InstanceId { get; internal set; }
    [DataMemberAttribute]
public string TypeName { get; internal set; }
    internal Activity Activity { get; private set; }
    public ActivityInfo(string name, string id, string instanceId, string typeName);
    internal ActivityInfo(ActivityInstance instance);
    internal ActivityInfo(Activity activity, long instanceId);
    [CompilerGeneratedAttribute]
internal ActivityInstance get_Instance();
    [CompilerGeneratedAttribute]
private void set_Instance(ActivityInstance value);
    public string get_Name();
    internal void set_Name(string value);
    public string get_Id();
    internal void set_Id(string value);
    public string get_InstanceId();
    internal void set_InstanceId(string value);
    public string get_TypeName();
    internal void set_TypeName(string value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
internal Activity get_Activity();
    [CompilerGeneratedAttribute]
private void set_Activity(Activity value);
}
public class System.Activities.Tracking.ActivityScheduledQuery : TrackingQuery {
    public string ActivityName { get; public set; }
    public string ChildActivityName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    [CompilerGeneratedAttribute]
public string get_ChildActivityName();
    [CompilerGeneratedAttribute]
public void set_ChildActivityName(string value);
}
[DataContractAttribute]
public class System.Activities.Tracking.ActivityScheduledRecord : TrackingRecord {
    public ActivityInfo Activity { get; private set; }
    public ActivityInfo Child { get; private set; }
    [DataMemberAttribute]
internal ActivityInfo SerializedActivity { get; internal set; }
    [DataMemberAttribute]
internal ActivityInfo SerializedChild { get; internal set; }
    internal ActivityScheduledRecord(Guid instanceId, ActivityInstance instance, ActivityInstance child);
    internal ActivityScheduledRecord(Guid instanceId, ActivityInstance instance, ActivityInfo child);
    public ActivityScheduledRecord(Guid instanceId, long recordNumber, ActivityInfo activity, ActivityInfo child);
    public ActivityInfo get_Activity();
    private void set_Activity(ActivityInfo value);
    public ActivityInfo get_Child();
    private void set_Child(ActivityInfo value);
    internal ActivityInfo get_SerializedActivity();
    internal void set_SerializedActivity(ActivityInfo value);
    internal ActivityInfo get_SerializedChild();
    internal void set_SerializedChild(ActivityInfo value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
}
public class System.Activities.Tracking.ActivityStateQuery : TrackingQuery {
    public string ActivityName { get; public set; }
    public Collection`1<string> Arguments { get; }
    public Collection`1<string> Variables { get; }
    public Collection`1<string> States { get; }
    internal bool HasStates { get; }
    internal bool HasArguments { get; }
    internal bool HasVariables { get; }
    [CompilerGeneratedAttribute]
public string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    public Collection`1<string> get_Arguments();
    public Collection`1<string> get_Variables();
    public Collection`1<string> get_States();
    internal bool get_HasStates();
    internal bool get_HasArguments();
    internal bool get_HasVariables();
}
[DataContractAttribute]
public class System.Activities.Tracking.ActivityStateRecord : TrackingRecord {
    public ActivityInfo Activity { get; private set; }
    public string State { get; private set; }
    public IDictionary`2<string, object> Variables { get; internal set; }
    public IDictionary`2<string, object> Arguments { get; internal set; }
    [DataMemberAttribute]
internal IDictionary`2<string, object> SerializedVariables { get; internal set; }
    [DataMemberAttribute]
internal IDictionary`2<string, object> SerializedArguments { get; internal set; }
    [DataMemberAttribute]
internal ActivityInfo SerializedActivity { get; internal set; }
    [DataMemberAttribute]
internal string SerializedState { get; internal set; }
    internal ActivityStateRecord(Guid instanceId, ActivityInstance instance, ActivityInstanceState state);
    internal ActivityStateRecord(Guid instanceId, ActivityInfo activity, ActivityInstanceState state);
    public ActivityStateRecord(Guid instanceId, long recordNumber, ActivityInfo activity, string state);
    private static ActivityStateRecord();
    public ActivityInfo get_Activity();
    private void set_Activity(ActivityInfo value);
    public string get_State();
    private void set_State(string value);
    public IDictionary`2<string, object> get_Variables();
    internal void set_Variables(IDictionary`2<string, object> value);
    public IDictionary`2<string, object> get_Arguments();
    internal void set_Arguments(IDictionary`2<string, object> value);
    internal IDictionary`2<string, object> get_SerializedVariables();
    internal void set_SerializedVariables(IDictionary`2<string, object> value);
    internal IDictionary`2<string, object> get_SerializedArguments();
    internal void set_SerializedArguments(IDictionary`2<string, object> value);
    internal ActivityInfo get_SerializedActivity();
    internal void set_SerializedActivity(ActivityInfo value);
    internal string get_SerializedState();
    internal void set_SerializedState(string value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
    internal IDictionary`2<string, object> GetVariables(ICollection`1<string> variables);
    internal IDictionary`2<string, object> GetArguments(ICollection`1<string> arguments);
}
public static class System.Activities.Tracking.ActivityStates : object {
    public static string Canceled;
    public static string Closed;
    public static string Executing;
    public static string Faulted;
}
public class System.Activities.Tracking.BookmarkResumptionQuery : TrackingQuery {
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[DataContractAttribute]
public class System.Activities.Tracking.BookmarkResumptionRecord : TrackingRecord {
    public Guid BookmarkScope { get; private set; }
    public string BookmarkName { get; private set; }
    public object Payload { get; internal set; }
    public ActivityInfo Owner { get; private set; }
    [DataMemberAttribute]
internal Guid SerializedBookmarkScope { get; internal set; }
    [DataMemberAttribute]
internal string SerializedBookmarkName { get; internal set; }
    [DataMemberAttribute]
internal object SerializedPayload { get; internal set; }
    [DataMemberAttribute]
internal ActivityInfo SerializedOwner { get; internal set; }
    internal BookmarkResumptionRecord(Guid instanceId, Bookmark bookmark, ActivityInstance ownerInstance, object payload);
    public BookmarkResumptionRecord(Guid instanceId, long recordNumber, Guid bookmarkScope, string bookmarkName, ActivityInfo owner);
    public Guid get_BookmarkScope();
    private void set_BookmarkScope(Guid value);
    public string get_BookmarkName();
    private void set_BookmarkName(string value);
    public object get_Payload();
    internal void set_Payload(object value);
    public ActivityInfo get_Owner();
    private void set_Owner(ActivityInfo value);
    internal Guid get_SerializedBookmarkScope();
    internal void set_SerializedBookmarkScope(Guid value);
    internal string get_SerializedBookmarkName();
    internal void set_SerializedBookmarkName(string value);
    internal object get_SerializedPayload();
    internal void set_SerializedPayload(object value);
    internal ActivityInfo get_SerializedOwner();
    internal void set_SerializedOwner(ActivityInfo value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
}
public class System.Activities.Tracking.CancelRequestedQuery : TrackingQuery {
    public string ActivityName { get; public set; }
    public string ChildActivityName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    [CompilerGeneratedAttribute]
public string get_ChildActivityName();
    [CompilerGeneratedAttribute]
public void set_ChildActivityName(string value);
}
[DataContractAttribute]
public class System.Activities.Tracking.CancelRequestedRecord : TrackingRecord {
    public ActivityInfo Activity { get; private set; }
    public ActivityInfo Child { get; private set; }
    [DataMemberAttribute]
internal ActivityInfo SerializedActivity { get; internal set; }
    [DataMemberAttribute]
internal ActivityInfo SerializedChild { get; internal set; }
    internal CancelRequestedRecord(Guid instanceId, ActivityInstance instance, ActivityInstance child);
    public CancelRequestedRecord(Guid instanceId, long recordNumber, ActivityInfo activity, ActivityInfo child);
    public ActivityInfo get_Activity();
    private void set_Activity(ActivityInfo value);
    public ActivityInfo get_Child();
    private void set_Child(ActivityInfo value);
    internal ActivityInfo get_SerializedActivity();
    internal void set_SerializedActivity(ActivityInfo value);
    internal ActivityInfo get_SerializedChild();
    internal void set_SerializedChild(ActivityInfo value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
}
public class System.Activities.Tracking.CustomTrackingQuery : TrackingQuery {
    public string Name { get; public set; }
    public string ActivityName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
}
[DataContractAttribute]
public class System.Activities.Tracking.CustomTrackingRecord : TrackingRecord {
    public string Name { get; private set; }
    public ActivityInfo Activity { get; internal set; }
    public IDictionary`2<string, object> Data { get; }
    [DataMemberAttribute]
internal IDictionary`2<string, object> SerializedData { get; internal set; }
    [DataMemberAttribute]
internal string SerializedName { get; internal set; }
    [DataMemberAttribute]
internal ActivityInfo SerializedActivity { get; internal set; }
    public CustomTrackingRecord(string name);
    public CustomTrackingRecord(string name, TraceLevel level);
    public CustomTrackingRecord(Guid instanceId, string name, TraceLevel level);
    protected CustomTrackingRecord(CustomTrackingRecord record);
    public string get_Name();
    private void set_Name(string value);
    public ActivityInfo get_Activity();
    internal void set_Activity(ActivityInfo value);
    public IDictionary`2<string, object> get_Data();
    internal IDictionary`2<string, object> get_SerializedData();
    internal void set_SerializedData(IDictionary`2<string, object> value);
    internal string get_SerializedName();
    internal void set_SerializedName(string value);
    internal ActivityInfo get_SerializedActivity();
    internal void set_SerializedActivity(ActivityInfo value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
}
public class System.Activities.Tracking.EtwTrackingParticipant : TrackingParticipant {
    public Guid EtwProviderId { get; public set; }
    public string ApplicationReference { get; public set; }
    private static EtwTrackingParticipant();
    public Guid get_EtwProviderId();
    public void set_EtwProviderId(Guid value);
    [CompilerGeneratedAttribute]
public string get_ApplicationReference();
    [CompilerGeneratedAttribute]
public void set_ApplicationReference(string value);
    protected internal virtual IAsyncResult BeginTrack(TrackingRecord record, TimeSpan timeout, AsyncCallback callback, object state);
    protected internal virtual void EndTrack(IAsyncResult result);
    protected internal virtual void Track(TrackingRecord record, TimeSpan timeout);
}
public class System.Activities.Tracking.FaultPropagationQuery : TrackingQuery {
    public string FaultHandlerActivityName { get; public set; }
    public string FaultSourceActivityName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FaultHandlerActivityName();
    [CompilerGeneratedAttribute]
public void set_FaultHandlerActivityName(string value);
    [CompilerGeneratedAttribute]
public string get_FaultSourceActivityName();
    [CompilerGeneratedAttribute]
public void set_FaultSourceActivityName(string value);
}
[DataContractAttribute]
public class System.Activities.Tracking.FaultPropagationRecord : TrackingRecord {
    public ActivityInfo FaultSource { get; private set; }
    public ActivityInfo FaultHandler { get; private set; }
    public bool IsFaultSource { get; private set; }
    public Exception Fault { get; private set; }
    [DataMemberAttribute]
internal ActivityInfo SerializedFaultSource { get; internal set; }
    [DataMemberAttribute]
internal ActivityInfo SerializedFaultHandler { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedIsFaultSource { get; internal set; }
    [DataMemberAttribute]
internal Exception SerializedFault { get; internal set; }
    internal FaultPropagationRecord(Guid instanceId, ActivityInstance source, ActivityInstance faultHandler, bool isFaultSource, Exception fault);
    public FaultPropagationRecord(Guid instanceId, long recordNumber, ActivityInfo faultSource, ActivityInfo faultHandler, bool isFaultSource, Exception fault);
    public ActivityInfo get_FaultSource();
    private void set_FaultSource(ActivityInfo value);
    public ActivityInfo get_FaultHandler();
    private void set_FaultHandler(ActivityInfo value);
    public bool get_IsFaultSource();
    private void set_IsFaultSource(bool value);
    public Exception get_Fault();
    private void set_Fault(Exception value);
    internal ActivityInfo get_SerializedFaultSource();
    internal void set_SerializedFaultSource(ActivityInfo value);
    internal ActivityInfo get_SerializedFaultHandler();
    internal void set_SerializedFaultHandler(ActivityInfo value);
    internal bool get_SerializedIsFaultSource();
    internal void set_SerializedIsFaultSource(bool value);
    internal Exception get_SerializedFault();
    internal void set_SerializedFault(Exception value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
}
public enum System.Activities.Tracking.ImplementationVisibility : Enum {
    public int value__;
    public static ImplementationVisibility RootScope;
    public static ImplementationVisibility All;
}
internal class System.Activities.Tracking.RuntimeTrackingProfile : object {
    internal TrackingRecordPreFilter Filter { get; }
    internal RuntimeTrackingProfile(TrackingProfile profile, Activity rootElement);
    internal TrackingRecordPreFilter get_Filter();
    internal IEnumerable`1<string> GetSubscribedActivityNames();
    internal static RuntimeTrackingProfile GetRuntimeTrackingProfile(TrackingProfile profile, Activity rootElement);
    internal TrackingRecord Match(TrackingRecord record, bool shouldClone);
}
public abstract class System.Activities.Tracking.TrackingParticipant : object {
    public TrackingProfile TrackingProfile { get; public set; }
    [CompilerGeneratedAttribute]
public virtual TrackingProfile get_TrackingProfile();
    [CompilerGeneratedAttribute]
public virtual void set_TrackingProfile(TrackingProfile value);
    protected internal virtual IAsyncResult BeginTrack(TrackingRecord record, TimeSpan timeout, AsyncCallback callback, object state);
    protected internal virtual void EndTrack(IAsyncResult result);
    protected internal abstract virtual void Track(TrackingRecord record, TimeSpan timeout);
}
[ContentPropertyAttribute("Queries")]
public class System.Activities.Tracking.TrackingProfile : object {
    [DefaultValueAttribute("")]
public string Name { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ImplementationVisibility ImplementationVisibility { get; public set; }
    [DefaultValueAttribute("")]
public string ActivityDefinitionId { get; public set; }
    public Collection`1<TrackingQuery> Queries { get; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public ImplementationVisibility get_ImplementationVisibility();
    [CompilerGeneratedAttribute]
public void set_ImplementationVisibility(ImplementationVisibility value);
    [CompilerGeneratedAttribute]
public string get_ActivityDefinitionId();
    [CompilerGeneratedAttribute]
public void set_ActivityDefinitionId(string value);
    public Collection`1<TrackingQuery> get_Queries();
}
internal class System.Activities.Tracking.TrackingProvider : object {
    public bool HasPendingRecords { get; }
    public long NextTrackingRecordNumber { get; }
    public bool ShouldTrack { get; private set; }
    public bool ShouldTrackWorkflowInstanceRecords { get; private set; }
    public bool ShouldTrackBookmarkResumptionRecords { get; private set; }
    public bool ShouldTrackActivityScheduledRecords { get; private set; }
    public bool ShouldTrackActivityStateRecords { get; private set; }
    public bool ShouldTrackActivityStateRecordsExecutingState { get; private set; }
    public bool ShouldTrackActivityStateRecordsClosedState { get; private set; }
    public bool ShouldTrackCancelRequestedRecords { get; private set; }
    public bool ShouldTrackFaultPropagationRecords { get; private set; }
    public TrackingProvider(Activity definition);
    public bool get_HasPendingRecords();
    public long get_NextTrackingRecordNumber();
    [CompilerGeneratedAttribute]
public bool get_ShouldTrack();
    [CompilerGeneratedAttribute]
private void set_ShouldTrack(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldTrackWorkflowInstanceRecords();
    [CompilerGeneratedAttribute]
private void set_ShouldTrackWorkflowInstanceRecords(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldTrackBookmarkResumptionRecords();
    [CompilerGeneratedAttribute]
private void set_ShouldTrackBookmarkResumptionRecords(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldTrackActivityScheduledRecords();
    [CompilerGeneratedAttribute]
private void set_ShouldTrackActivityScheduledRecords(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldTrackActivityStateRecords();
    [CompilerGeneratedAttribute]
private void set_ShouldTrackActivityStateRecords(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldTrackActivityStateRecordsExecutingState();
    [CompilerGeneratedAttribute]
private void set_ShouldTrackActivityStateRecordsExecutingState(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldTrackActivityStateRecordsClosedState();
    [CompilerGeneratedAttribute]
private void set_ShouldTrackActivityStateRecordsClosedState(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldTrackCancelRequestedRecords();
    [CompilerGeneratedAttribute]
private void set_ShouldTrackCancelRequestedRecords(bool value);
    [CompilerGeneratedAttribute]
public bool get_ShouldTrackFaultPropagationRecords();
    [CompilerGeneratedAttribute]
private void set_ShouldTrackFaultPropagationRecords(bool value);
    public void OnDeserialized(long nextTrackingRecordNumber);
    public void AddRecord(TrackingRecord record);
    public void AddParticipant(TrackingParticipant participant);
    public void ClearParticipants();
    public void FlushPendingRecords(TimeSpan timeout);
    public IAsyncResult BeginFlushPendingRecords(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndFlushPendingRecords(IAsyncResult result);
    public bool ShouldTrackActivity(string name);
}
public abstract class System.Activities.Tracking.TrackingQuery : object {
    public IDictionary`2<string, string> QueryAnnotations { get; }
    internal bool HasAnnotations { get; }
    public IDictionary`2<string, string> get_QueryAnnotations();
    internal bool get_HasAnnotations();
}
[DataContractAttribute]
public abstract class System.Activities.Tracking.TrackingRecord : object {
    [DataMemberAttribute]
public Guid InstanceId { get; internal set; }
    [DataMemberAttribute]
public long RecordNumber { get; internal set; }
    public DateTime EventTime { get; private set; }
    public TraceLevel Level { get; protected set; }
    public IDictionary`2<string, string> Annotations { get; internal set; }
    [DataMemberAttribute]
internal IDictionary`2<string, string> SerializedAnnotations { get; internal set; }
    [DataMemberAttribute]
internal DateTime SerializedEventTime { get; internal set; }
    [DataMemberAttribute]
internal TraceLevel SerializedLevel { get; internal set; }
    internal EventTraceActivity EventTraceActivity { get; }
    internal bool HasAnnotations { get; }
    protected TrackingRecord(Guid instanceId);
    protected TrackingRecord(Guid instanceId, long recordNumber);
    protected TrackingRecord(TrackingRecord record);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
internal void set_InstanceId(Guid value);
    [CompilerGeneratedAttribute]
public long get_RecordNumber();
    [CompilerGeneratedAttribute]
internal void set_RecordNumber(long value);
    public DateTime get_EventTime();
    private void set_EventTime(DateTime value);
    public TraceLevel get_Level();
    protected void set_Level(TraceLevel value);
    public IDictionary`2<string, string> get_Annotations();
    internal void set_Annotations(IDictionary`2<string, string> value);
    internal IDictionary`2<string, string> get_SerializedAnnotations();
    internal void set_SerializedAnnotations(IDictionary`2<string, string> value);
    internal DateTime get_SerializedEventTime();
    internal void set_SerializedEventTime(DateTime value);
    internal TraceLevel get_SerializedLevel();
    internal void set_SerializedLevel(TraceLevel value);
    internal EventTraceActivity get_EventTraceActivity();
    internal bool get_HasAnnotations();
    protected internal abstract virtual TrackingRecord Clone();
    public virtual string ToString();
}
internal class System.Activities.Tracking.TrackingRecordPreFilter : object {
    internal bool TrackingProviderInitialized { get; private set; }
    internal bool TrackWorkflowInstanceRecords { get; internal set; }
    internal bool TrackBookmarkResumptionRecords { get; internal set; }
    internal bool TrackActivityScheduledRecords { get; internal set; }
    internal bool TrackActivityStateRecordsClosedState { get; internal set; }
    internal bool TrackActivityStateRecordsExecutingState { get; internal set; }
    internal bool TrackActivityStateRecords { get; internal set; }
    internal bool TrackCancelRequestedRecords { get; internal set; }
    internal bool TrackFaultPropagationRecords { get; internal set; }
    public TrackingRecordPreFilter(bool trackingProviderInitialized);
    [CompilerGeneratedAttribute]
internal bool get_TrackingProviderInitialized();
    [CompilerGeneratedAttribute]
private void set_TrackingProviderInitialized(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TrackWorkflowInstanceRecords();
    [CompilerGeneratedAttribute]
internal void set_TrackWorkflowInstanceRecords(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TrackBookmarkResumptionRecords();
    [CompilerGeneratedAttribute]
internal void set_TrackBookmarkResumptionRecords(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TrackActivityScheduledRecords();
    [CompilerGeneratedAttribute]
internal void set_TrackActivityScheduledRecords(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TrackActivityStateRecordsClosedState();
    [CompilerGeneratedAttribute]
internal void set_TrackActivityStateRecordsClosedState(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TrackActivityStateRecordsExecutingState();
    [CompilerGeneratedAttribute]
internal void set_TrackActivityStateRecordsExecutingState(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TrackActivityStateRecords();
    [CompilerGeneratedAttribute]
internal void set_TrackActivityStateRecords(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TrackCancelRequestedRecords();
    [CompilerGeneratedAttribute]
internal void set_TrackCancelRequestedRecords(bool value);
    [CompilerGeneratedAttribute]
internal bool get_TrackFaultPropagationRecords();
    [CompilerGeneratedAttribute]
internal void set_TrackFaultPropagationRecords(bool value);
    internal void Merge(TrackingRecordPreFilter filter);
}
[DataContractAttribute]
public class System.Activities.Tracking.WorkflowInstanceAbortedRecord : WorkflowInstanceRecord {
    public string Reason { get; private set; }
    [DataMemberAttribute]
internal string SerializedReason { get; internal set; }
    public WorkflowInstanceAbortedRecord(Guid instanceId, string activityDefinitionId, string reason);
    public WorkflowInstanceAbortedRecord(Guid instanceId, long recordNumber, string activityDefinitionId, string reason);
    public WorkflowInstanceAbortedRecord(Guid instanceId, string activityDefinitionId, string reason, WorkflowIdentity workflowDefinitionIdentity);
    public WorkflowInstanceAbortedRecord(Guid instanceId, long recordNumber, string activityDefinitionId, string reason, WorkflowIdentity workflowDefinitionIdentity);
    public string get_Reason();
    private void set_Reason(string value);
    internal string get_SerializedReason();
    internal void set_SerializedReason(string value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
}
public class System.Activities.Tracking.WorkflowInstanceQuery : TrackingQuery {
    public Collection`1<string> States { get; }
    internal bool HasStates { get; }
    public Collection`1<string> get_States();
    internal bool get_HasStates();
}
[DataContractAttribute]
public class System.Activities.Tracking.WorkflowInstanceRecord : TrackingRecord {
    public WorkflowIdentity WorkflowDefinitionIdentity { get; protected set; }
    public string State { get; private set; }
    public string ActivityDefinitionId { get; private set; }
    [DataMemberAttribute]
internal WorkflowIdentity SerializedWorkflowDefinitionIdentity { get; internal set; }
    [DataMemberAttribute]
internal string SerializedState { get; internal set; }
    [DataMemberAttribute]
internal string SerializedActivityDefinitionId { get; internal set; }
    public WorkflowInstanceRecord(Guid instanceId, string activityDefinitionId, string state);
    public WorkflowInstanceRecord(Guid instanceId, long recordNumber, string activityDefinitionId, string state);
    public WorkflowInstanceRecord(Guid instanceId, string activityDefinitionId, string state, WorkflowIdentity workflowDefinitionIdentity);
    public WorkflowInstanceRecord(Guid instanceId, long recordNumber, string activityDefinitionId, string state, WorkflowIdentity workflowDefinitionIdentity);
    protected WorkflowInstanceRecord(WorkflowInstanceRecord record);
    public WorkflowIdentity get_WorkflowDefinitionIdentity();
    protected void set_WorkflowDefinitionIdentity(WorkflowIdentity value);
    public string get_State();
    private void set_State(string value);
    public string get_ActivityDefinitionId();
    private void set_ActivityDefinitionId(string value);
    internal WorkflowIdentity get_SerializedWorkflowDefinitionIdentity();
    internal void set_SerializedWorkflowDefinitionIdentity(WorkflowIdentity value);
    internal string get_SerializedState();
    internal void set_SerializedState(string value);
    internal string get_SerializedActivityDefinitionId();
    internal void set_SerializedActivityDefinitionId(string value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
}
public static class System.Activities.Tracking.WorkflowInstanceStates : object {
    public static string Aborted;
    public static string Canceled;
    public static string Completed;
    public static string Deleted;
    public static string Idle;
    public static string Persisted;
    public static string Resumed;
    public static string Started;
    public static string Suspended;
    public static string Terminated;
    public static string UnhandledException;
    public static string Unloaded;
    public static string Unsuspended;
    public static string Updated;
    public static string UpdateFailed;
}
[DataContractAttribute]
public class System.Activities.Tracking.WorkflowInstanceSuspendedRecord : WorkflowInstanceRecord {
    public string Reason { get; private set; }
    [DataMemberAttribute]
internal string SerializedReason { get; internal set; }
    public WorkflowInstanceSuspendedRecord(Guid instanceId, string activityDefinitionId, string reason);
    public WorkflowInstanceSuspendedRecord(Guid instanceId, long recordNumber, string activityDefinitionId, string reason);
    public WorkflowInstanceSuspendedRecord(Guid instanceId, string activityDefinitionId, string reason, WorkflowIdentity workflowDefinitionIdentity);
    public WorkflowInstanceSuspendedRecord(Guid instanceId, long recordNumber, string activityDefinitionId, string reason, WorkflowIdentity workflowDefinitionIdentity);
    public string get_Reason();
    private void set_Reason(string value);
    internal string get_SerializedReason();
    internal void set_SerializedReason(string value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
}
[DataContractAttribute]
public class System.Activities.Tracking.WorkflowInstanceTerminatedRecord : WorkflowInstanceRecord {
    public string Reason { get; private set; }
    [DataMemberAttribute]
internal string SerializedReason { get; internal set; }
    public WorkflowInstanceTerminatedRecord(Guid instanceId, string activityDefinitionId, string reason);
    public WorkflowInstanceTerminatedRecord(Guid instanceId, long recordNumber, string activityDefinitionId, string reason);
    public WorkflowInstanceTerminatedRecord(Guid instanceId, string activityDefinitionId, string reason, WorkflowIdentity workflowDefinitionIdentity);
    public WorkflowInstanceTerminatedRecord(Guid instanceId, long recordNumber, string activityDefinitionId, string reason, WorkflowIdentity workflowDefinitionIdentity);
    public string get_Reason();
    private void set_Reason(string value);
    internal string get_SerializedReason();
    internal void set_SerializedReason(string value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
}
[DataContractAttribute]
public class System.Activities.Tracking.WorkflowInstanceUnhandledExceptionRecord : WorkflowInstanceRecord {
    public Exception UnhandledException { get; private set; }
    public ActivityInfo FaultSource { get; private set; }
    [DataMemberAttribute]
internal Exception SerializedUnhandledException { get; internal set; }
    [DataMemberAttribute]
internal ActivityInfo SerializedFaultSource { get; internal set; }
    public WorkflowInstanceUnhandledExceptionRecord(Guid instanceId, string activityDefinitionId, ActivityInfo faultSource, Exception exception);
    public WorkflowInstanceUnhandledExceptionRecord(Guid instanceId, long recordNumber, string activityDefinitionId, ActivityInfo faultSource, Exception exception);
    public WorkflowInstanceUnhandledExceptionRecord(Guid instanceId, string activityDefinitionId, ActivityInfo faultSource, Exception exception, WorkflowIdentity workflowDefinitionIdentity);
    public WorkflowInstanceUnhandledExceptionRecord(Guid instanceId, long recordNumber, string activityDefinitionId, ActivityInfo faultSource, Exception exception, WorkflowIdentity workflowDefinitionIdentity);
    public Exception get_UnhandledException();
    private void set_UnhandledException(Exception value);
    public ActivityInfo get_FaultSource();
    private void set_FaultSource(ActivityInfo value);
    internal Exception get_SerializedUnhandledException();
    internal void set_SerializedUnhandledException(Exception value);
    internal ActivityInfo get_SerializedFaultSource();
    internal void set_SerializedFaultSource(ActivityInfo value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
}
[DataContractAttribute]
public class System.Activities.Tracking.WorkflowInstanceUpdatedRecord : WorkflowInstanceRecord {
    public WorkflowIdentity OriginalDefinitionIdentity { get; private set; }
    public bool IsSuccessful { get; }
    public IList`1<ActivityBlockingUpdate> BlockingActivities { get; private set; }
    [DataMemberAttribute]
internal WorkflowIdentity SerializedOriginalDefinitionIdentity { get; internal set; }
    [DataMemberAttribute]
internal IList`1<ActivityBlockingUpdate> SerializedBlockingActivities { get; internal set; }
    public WorkflowInstanceUpdatedRecord(Guid instanceId, string activityDefinitionId, WorkflowIdentity originalDefinitionIdentity, WorkflowIdentity updatedDefinitionIdentity);
    public WorkflowInstanceUpdatedRecord(Guid instanceId, string activityDefinitionId, WorkflowIdentity originalDefinitionIdentity, WorkflowIdentity updatedDefinitionIdentity, IList`1<ActivityBlockingUpdate> blockingActivities);
    public WorkflowInstanceUpdatedRecord(Guid instanceId, long recordNumber, string activityDefinitionId, WorkflowIdentity originalDefinitionIdentity, WorkflowIdentity updatedDefinitionIdentity);
    public WorkflowInstanceUpdatedRecord(Guid instanceId, long recordNumber, string activityDefinitionId, WorkflowIdentity originalDefinitionIdentity, WorkflowIdentity updatedDefinitionIdentity, IList`1<ActivityBlockingUpdate> blockingActivities);
    public WorkflowIdentity get_OriginalDefinitionIdentity();
    private void set_OriginalDefinitionIdentity(WorkflowIdentity value);
    public bool get_IsSuccessful();
    public IList`1<ActivityBlockingUpdate> get_BlockingActivities();
    private void set_BlockingActivities(IList`1<ActivityBlockingUpdate> value);
    internal WorkflowIdentity get_SerializedOriginalDefinitionIdentity();
    internal void set_SerializedOriginalDefinitionIdentity(WorkflowIdentity value);
    internal IList`1<ActivityBlockingUpdate> get_SerializedBlockingActivities();
    internal void set_SerializedBlockingActivities(IList`1<ActivityBlockingUpdate> value);
    protected internal virtual TrackingRecord Clone();
    public virtual string ToString();
}
[DataContractAttribute]
internal class System.Activities.TypedLocationWrapper`1 : Location`1<T> {
    internal bool CanBeMapped { get; }
    public T Value { get; public set; }
    [DataMemberAttribute]
internal Location SerializedInnerLocation { get; internal set; }
    public TypedLocationWrapper`1(Location innerLocation);
    internal virtual bool get_CanBeMapped();
    public virtual T get_Value();
    public virtual void set_Value(T value);
    internal Location get_SerializedInnerLocation();
    internal void set_SerializedInnerLocation(Location value);
    public virtual string ToString();
}
public enum System.Activities.UnhandledExceptionAction : Enum {
    public int value__;
    public static UnhandledExceptionAction Abort;
    public static UnhandledExceptionAction Cancel;
    public static UnhandledExceptionAction Terminate;
}
public static class System.Activities.Validation.ActivityValidationServices : object {
    internal static ReadOnlyCollection`1<Activity> EmptyChildren;
    internal static ReadOnlyCollection`1<ValidationError> EmptyValidationErrors;
    private static ActivityValidationServices();
    public static ValidationResults Validate(Activity toValidate);
    public static ValidationResults Validate(Activity toValidate, ValidationSettings settings);
    public static Activity Resolve(Activity root, string id);
    internal static void ThrowIfViolationsExist(IList`1<ValidationError> validationErrors, ExceptionReason reason);
    internal static List`1<Activity> GetChildren(ChildActivity root, ActivityCallStack parentChain, ProcessActivityTreeOptions options);
    internal static void ValidateRootInputs(Activity rootActivity, IDictionary`2<string, object> inputs);
    internal static void ValidateArguments(Activity activity, bool isRoot, IList`1& validationErrors);
    internal static string GenerateValidationErrorPrefix(Activity toValidate, ActivityCallStack parentChain, ProcessActivityTreeOptions options, Activity& source);
    internal static void RunConstraints(ChildActivity childActivity, ActivityCallStack parentChain, IList`1<Constraint> constraints, ProcessActivityTreeOptions options, bool suppressGetChildrenViolations, IList`1& validationErrors);
    internal static bool HasErrors(IList`1<ValidationError> validationErrors);
    internal static void ValidateEvaluationOrder(IList`1<RuntimeArgument> runtimeArguments, Activity referenceActivity, IList`1& validationErrors);
}
public class System.Activities.Validation.AddValidationError : NativeActivity {
    public InArgument`1<string> Message { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<bool> IsWarning { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PropertyName { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<string> get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(InArgument`1<string> value);
    [CompilerGeneratedAttribute]
public InArgument`1<bool> get_IsWarning();
    [CompilerGeneratedAttribute]
public void set_IsWarning(InArgument`1<bool> value);
    [CompilerGeneratedAttribute]
public InArgument`1<string> get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(InArgument`1<string> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
public class System.Activities.Validation.AssertValidation : NativeActivity {
    public InArgument`1<bool> Assertion { get; public set; }
    public InArgument`1<string> Message { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<bool> IsWarning { get; public set; }
    [DefaultValueAttribute("")]
public InArgument`1<string> PropertyName { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<bool> get_Assertion();
    [CompilerGeneratedAttribute]
public void set_Assertion(InArgument`1<bool> value);
    [CompilerGeneratedAttribute]
public InArgument`1<string> get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(InArgument`1<string> value);
    [CompilerGeneratedAttribute]
public InArgument`1<bool> get_IsWarning();
    [CompilerGeneratedAttribute]
public void set_IsWarning(InArgument`1<bool> value);
    [CompilerGeneratedAttribute]
public InArgument`1<string> get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(InArgument`1<string> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
}
public abstract class System.Activities.Validation.Constraint : NativeActivity {
    public static string ValidationErrorListPropertyName;
    internal static string ToValidateArgumentName;
    internal static string ValidationErrorListArgumentName;
    internal static string ToValidateContextArgumentName;
    public static void AddValidationError(NativeActivityContext context, ValidationError error);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void Execute(NativeActivityContext context);
    protected abstract virtual void OnExecute(NativeActivityContext context, object objectToValidate, ValidationContext objectToValidateContext);
}
[ContentPropertyAttribute("Body")]
public class System.Activities.Validation.Constraint`1 : Constraint {
    public ActivityAction`2<T, ValidationContext> Body { get; public set; }
    [CompilerGeneratedAttribute]
public ActivityAction`2<T, ValidationContext> get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(ActivityAction`2<T, ValidationContext> value);
    protected virtual void CacheMetadata(NativeActivityMetadata metadata);
    protected virtual void OnExecute(NativeActivityContext context, object objectToValidate, ValidationContext objectToValidateContext);
}
[ExtensionAttribute]
internal static class System.Activities.Validation.ExtensionMethods : object {
    [ExtensionAttribute]
public static bool IsNullOrEmpty(ICollection c);
    [ExtensionAttribute]
public static string AsCommaSeparatedValues(IEnumerable`1<string> c);
    [ExtensionAttribute]
public static int BinarySearch(IList`1<T> items, T value, IComparer`1<T> comparer);
    [ExtensionAttribute]
public static void QuickSort(IList`1<T> items, IComparer`1<T> comparer);
}
public class System.Activities.Validation.GetChildSubtree : CodeActivity`1<IEnumerable`1<Activity>> {
    public InArgument`1<ValidationContext> ValidationContext { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<ValidationContext> get_ValidationContext();
    [CompilerGeneratedAttribute]
public void set_ValidationContext(InArgument`1<ValidationContext> value);
    protected virtual IEnumerable`1<Activity> Execute(CodeActivityContext context);
}
public class System.Activities.Validation.GetParentChain : CodeActivity`1<IEnumerable`1<Activity>> {
    public InArgument`1<ValidationContext> ValidationContext { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<ValidationContext> get_ValidationContext();
    [CompilerGeneratedAttribute]
public void set_ValidationContext(InArgument`1<ValidationContext> value);
    protected virtual IEnumerable`1<Activity> Execute(CodeActivityContext context);
}
public class System.Activities.Validation.GetWorkflowTree : CodeActivity`1<IEnumerable`1<Activity>> {
    public InArgument`1<ValidationContext> ValidationContext { get; public set; }
    [CompilerGeneratedAttribute]
public InArgument`1<ValidationContext> get_ValidationContext();
    [CompilerGeneratedAttribute]
public void set_ValidationContext(InArgument`1<ValidationContext> value);
    protected virtual IEnumerable`1<Activity> Execute(CodeActivityContext context);
}
public class System.Activities.Validation.ValidationContext : object {
    internal LocationReferenceEnvironment Environment { get; }
    internal ValidationContext(ChildActivity owner, ActivityCallStack parentChain, ProcessActivityTreeOptions options, LocationReferenceEnvironment environment);
    internal LocationReferenceEnvironment get_Environment();
    internal IEnumerable`1<Activity> GetParents();
    internal IEnumerable`1<Activity> GetWorkflowTree();
    internal IEnumerable`1<Activity> GetChildren();
    internal void AddGetChildrenErrors(IList`1& validationErrors);
}
public class System.Activities.Validation.ValidationError : object {
    public string Message { get; internal set; }
    public bool IsWarning { get; private set; }
    public string PropertyName { get; private set; }
    public string Id { get; internal set; }
    public Activity Source { get; internal set; }
    public object SourceDetail { get; internal set; }
    public ValidationError(string message);
    public ValidationError(string message, bool isWarning);
    public ValidationError(string message, bool isWarning, string propertyName);
    public ValidationError(string message, bool isWarning, string propertyName, object sourceDetail);
    internal ValidationError(string message, Activity activity);
    internal ValidationError(string message, bool isWarning, Activity activity);
    internal ValidationError(string message, bool isWarning, string propertyName, Activity activity);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    [CompilerGeneratedAttribute]
public bool get_IsWarning();
    [CompilerGeneratedAttribute]
private void set_IsWarning(bool value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
private void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    public Activity get_Source();
    internal void set_Source(Activity value);
    [CompilerGeneratedAttribute]
public object get_SourceDetail();
    [CompilerGeneratedAttribute]
internal void set_SourceDetail(object value);
    public virtual string ToString();
}
internal static class System.Activities.Validation.ValidationHelper : object {
    public static void ValidateArguments(Activity activity, OverloadGroupEquivalenceInfo equivalenceInfo, Dictionary`2<string, List`1<RuntimeArgument>> overloadGroups, List`1<RuntimeArgument> requiredArgumentsNotInOverloadGroups, IDictionary`2<string, object> inputs, IList`1& validationErrors);
    public static bool GatherAndValidateOverloads(Activity activity, Dictionary`2& overloadGroups, List`1& requiredArgumentsNotInOverloadGroups, OverloadGroupEquivalenceInfo& equivalenceInfo, IList`1& validationErrors);
}
public class System.Activities.Validation.ValidationResults : object {
    public ReadOnlyCollection`1<ValidationError> Errors { get; }
    public ReadOnlyCollection`1<ValidationError> Warnings { get; }
    public ValidationResults(IList`1<ValidationError> allValidationErrors);
    public ReadOnlyCollection`1<ValidationError> get_Errors();
    public ReadOnlyCollection`1<ValidationError> get_Warnings();
}
public class System.Activities.Validation.ValidationSettings : object {
    public CancellationToken CancellationToken { get; public set; }
    public bool SingleLevel { get; public set; }
    public bool SkipValidatingRootConfiguration { get; public set; }
    public bool OnlyUseAdditionalConstraints { get; public set; }
    public bool PrepareForRuntime { get; public set; }
    public LocationReferenceEnvironment Environment { get; public set; }
    internal bool HasAdditionalConstraints { get; }
    public IDictionary`2<Type, IList`1<Constraint>> AdditionalConstraints { get; }
    [CompilerGeneratedAttribute]
public CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public void set_CancellationToken(CancellationToken value);
    [CompilerGeneratedAttribute]
public bool get_SingleLevel();
    [CompilerGeneratedAttribute]
public void set_SingleLevel(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipValidatingRootConfiguration();
    [CompilerGeneratedAttribute]
public void set_SkipValidatingRootConfiguration(bool value);
    [CompilerGeneratedAttribute]
public bool get_OnlyUseAdditionalConstraints();
    [CompilerGeneratedAttribute]
public void set_OnlyUseAdditionalConstraints(bool value);
    [CompilerGeneratedAttribute]
public bool get_PrepareForRuntime();
    [CompilerGeneratedAttribute]
public void set_PrepareForRuntime(bool value);
    [CompilerGeneratedAttribute]
public LocationReferenceEnvironment get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(LocationReferenceEnvironment value);
    internal bool get_HasAdditionalConstraints();
    public IDictionary`2<Type, IList`1<Constraint>> get_AdditionalConstraints();
}
public class System.Activities.ValidationException : SystemException {
    public ValidationException(string message);
    public ValidationException(string message, Exception innerException);
    protected ValidationException(SerializationInfo info, StreamingContext context);
}
[DebuggerDisplayAttribute("Name = {Name}, Type = {Type}")]
public abstract class System.Activities.Variable : LocationReference {
    internal bool IsHandle { get; internal set; }
    [DefaultValueAttribute("")]
public string Name { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public VariableModifiers Modifiers { get; public set; }
    [IgnoreDataMemberAttribute]
[DefaultValueAttribute("")]
public ActivityWithResult Default { get; public set; }
    protected string NameCore { get; }
    internal int CacheId { get; }
    internal ActivityWithResult DefaultCore { get; internal set; }
    internal bool IsPublic { get; internal set; }
    internal object Origin { get; internal set; }
    internal Activity Owner { get; private set; }
    internal bool IsInTree { get; }
    [CompilerGeneratedAttribute]
internal bool get_IsHandle();
    [CompilerGeneratedAttribute]
internal void set_IsHandle(bool value);
    public string get_Name();
    public void set_Name(string value);
    public VariableModifiers get_Modifiers();
    public void set_Modifiers(VariableModifiers value);
    public ActivityWithResult get_Default();
    public void set_Default(ActivityWithResult value);
    protected virtual string get_NameCore();
    internal int get_CacheId();
    internal abstract virtual ActivityWithResult get_DefaultCore();
    internal abstract virtual void set_DefaultCore(ActivityWithResult value);
    [CompilerGeneratedAttribute]
internal bool get_IsPublic();
    [CompilerGeneratedAttribute]
internal void set_IsPublic(bool value);
    [CompilerGeneratedAttribute]
internal object get_Origin();
    [CompilerGeneratedAttribute]
internal void set_Origin(object value);
    [CompilerGeneratedAttribute]
internal Activity get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(Activity value);
    internal bool get_IsInTree();
    public static Variable Create(string name, Type type, VariableModifiers modifiers);
    internal bool InitializeRelationship(Activity parent, bool isPublic, IList`1& validationErrors);
    internal void ThrowIfNotInTree();
    internal void ThrowIfHandle();
    public virtual Location GetLocation(ActivityContext context);
    public object Get(ActivityContext context);
    public void Set(ActivityContext context, object value);
    internal abstract virtual Location DeclareLocation(ActivityExecutor executor, ActivityInstance instance);
    internal Location InternalGetLocation(LocationEnvironment environment);
    internal abstract virtual void PopulateDefault(ActivityExecutor executor, ActivityInstance parentInstance, Location location);
    internal abstract virtual void SetIsWaitingOnDefaultValue(Location location);
    internal abstract virtual Location CreateLocation();
}
public class System.Activities.Variable`1 : Variable {
    protected Type TypeCore { get; }
    [DefaultValueAttribute("")]
public Activity`1<T> Default { get; public set; }
    internal ActivityWithResult DefaultCore { get; internal set; }
    public Variable`1(Expression`1<Func`2<ActivityContext, T>> defaultExpression);
    public Variable`1(string name, Expression`1<Func`2<ActivityContext, T>> defaultExpression);
    public Variable`1(string name);
    public Variable`1(string name, T defaultValue);
    protected virtual Type get_TypeCore();
    public Activity`1<T> get_Default();
    public void set_Default(Activity`1<T> value);
    internal virtual ActivityWithResult get_DefaultCore();
    internal virtual void set_DefaultCore(ActivityWithResult value);
    public Location`1<T> GetLocation(ActivityContext context);
    public T Get(ActivityContext context);
    public void Set(ActivityContext context, T value);
    internal virtual Location DeclareLocation(ActivityExecutor executor, ActivityInstance instance);
    internal virtual void PopulateDefault(ActivityExecutor executor, ActivityInstance parentInstance, Location location);
    internal virtual void SetIsWaitingOnDefaultValue(Location location);
    internal virtual Location CreateLocation();
}
[FlagsAttribute]
public enum System.Activities.VariableModifiers : Enum {
    public int value__;
    public static VariableModifiers None;
    public static VariableModifiers ReadOnly;
    public static VariableModifiers Mapped;
}
internal static class System.Activities.VariableModifiersHelper : object {
    public static bool IsReadOnly(VariableModifiers modifiers);
    public static bool IsMappable(VariableModifiers modifiers);
    public static void Validate(VariableModifiers modifiers, string argumentName);
}
public class System.Activities.VersionMismatchException : Exception {
    public WorkflowIdentity ExpectedVersion { get; private set; }
    public WorkflowIdentity ActualVersion { get; private set; }
    public VersionMismatchException(string message);
    public VersionMismatchException(string message, Exception innerException);
    public VersionMismatchException(WorkflowIdentity expectedVersion, WorkflowIdentity actualVersion);
    public VersionMismatchException(string message, WorkflowIdentity expectedVersion, WorkflowIdentity actualVersion);
    public VersionMismatchException(string message, WorkflowIdentity expectedVersion, WorkflowIdentity actualVersion, Exception innerException);
    protected VersionMismatchException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public WorkflowIdentity get_ExpectedVersion();
    [CompilerGeneratedAttribute]
private void set_ExpectedVersion(WorkflowIdentity value);
    [CompilerGeneratedAttribute]
public WorkflowIdentity get_ActualVersion();
    [CompilerGeneratedAttribute]
private void set_ActualVersion(WorkflowIdentity value);
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Activities.WorkflowApplication : WorkflowInstance {
    public InstanceStore InstanceStore { get; public set; }
    public WorkflowInstanceExtensionManager Extensions { get; }
    public Action`1<WorkflowApplicationAbortedEventArgs> Aborted { get; public set; }
    public Action`1<WorkflowApplicationEventArgs> Unloaded { get; public set; }
    public Action`1<WorkflowApplicationCompletedEventArgs> Completed { get; public set; }
    public Func`2<WorkflowApplicationUnhandledExceptionEventArgs, UnhandledExceptionAction> OnUnhandledException { get; public set; }
    public Action`1<WorkflowApplicationIdleEventArgs> Idle { get; public set; }
    public Func`2<WorkflowApplicationIdleEventArgs, PersistableIdleAction> PersistableIdle { get; public set; }
    public Guid Id { get; }
    protected internal bool SupportsInstanceKeys { get; }
    public WorkflowApplication(Activity workflowDefinition);
    public WorkflowApplication(Activity workflowDefinition, IDictionary`2<string, object> inputs);
    public WorkflowApplication(Activity workflowDefinition, WorkflowIdentity definitionIdentity);
    public WorkflowApplication(Activity workflowDefinition, IDictionary`2<string, object> inputs, WorkflowIdentity definitionIdentity);
    private static WorkflowApplication();
    public InstanceStore get_InstanceStore();
    public void set_InstanceStore(InstanceStore value);
    public WorkflowInstanceExtensionManager get_Extensions();
    public Action`1<WorkflowApplicationAbortedEventArgs> get_Aborted();
    public void set_Aborted(Action`1<WorkflowApplicationAbortedEventArgs> value);
    public Action`1<WorkflowApplicationEventArgs> get_Unloaded();
    public void set_Unloaded(Action`1<WorkflowApplicationEventArgs> value);
    public Action`1<WorkflowApplicationCompletedEventArgs> get_Completed();
    public void set_Completed(Action`1<WorkflowApplicationCompletedEventArgs> value);
    public Func`2<WorkflowApplicationUnhandledExceptionEventArgs, UnhandledExceptionAction> get_OnUnhandledException();
    public void set_OnUnhandledException(Func`2<WorkflowApplicationUnhandledExceptionEventArgs, UnhandledExceptionAction> value);
    public Action`1<WorkflowApplicationIdleEventArgs> get_Idle();
    public void set_Idle(Action`1<WorkflowApplicationIdleEventArgs> value);
    public Func`2<WorkflowApplicationIdleEventArgs, PersistableIdleAction> get_PersistableIdle();
    public void set_PersistableIdle(Func`2<WorkflowApplicationIdleEventArgs, PersistableIdleAction> value);
    public virtual Guid get_Id();
    protected internal virtual bool get_SupportsInstanceKeys();
    public void AddInitialInstanceValues(IDictionary`2<XName, object> writeOnlyValues);
    internal IEnumerable`1<T> InternalGetExtensions();
    protected virtual void OnNotifyPaused();
    internal void GetCompletionStatus(Exception& terminationException, Boolean& cancelled);
    protected internal virtual void OnRequestAbort(Exception reason);
    public void Abort();
    public void Abort(string reason);
    public void Terminate(string reason);
    public void Terminate(Exception reason);
    public void Terminate(string reason, TimeSpan timeout);
    public void Terminate(Exception reason, TimeSpan timeout);
    public IAsyncResult BeginTerminate(string reason, AsyncCallback callback, object state);
    public IAsyncResult BeginTerminate(Exception reason, AsyncCallback callback, object state);
    public IAsyncResult BeginTerminate(string reason, TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginTerminate(Exception reason, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndTerminate(IAsyncResult result);
    public void Cancel();
    public void Cancel(TimeSpan timeout);
    public IAsyncResult BeginCancel(AsyncCallback callback, object state);
    public IAsyncResult BeginCancel(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndCancel(IAsyncResult result);
    internal static IDictionary`2<string, object> Invoke(Activity activity, IDictionary`2<string, object> inputs, WorkflowInstanceExtensionManager extensions, TimeSpan timeout);
    internal static IAsyncResult BeginInvoke(Activity activity, IDictionary`2<string, object> inputs, WorkflowInstanceExtensionManager extensions, TimeSpan timeout, SynchronizationContext syncContext, AsyncInvokeContext invokeContext, AsyncCallback callback, object state);
    internal static IDictionary`2<string, object> EndInvoke(IAsyncResult result);
    public void Run();
    public void Run(TimeSpan timeout);
    public IAsyncResult BeginRun(AsyncCallback callback, object state);
    public IAsyncResult BeginRun(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndRun(IAsyncResult result);
    public static void CreateDefaultInstanceOwner(InstanceStore instanceStore, WorkflowIdentity definitionIdentity, WorkflowIdentityFilter identityFilter);
    public static void CreateDefaultInstanceOwner(InstanceStore instanceStore, WorkflowIdentity definitionIdentity, WorkflowIdentityFilter identityFilter, TimeSpan timeout);
    public static IAsyncResult BeginCreateDefaultInstanceOwner(InstanceStore instanceStore, WorkflowIdentity definitionIdentity, WorkflowIdentityFilter identityFilter, AsyncCallback callback, object state);
    public static IAsyncResult BeginCreateDefaultInstanceOwner(InstanceStore instanceStore, WorkflowIdentity definitionIdentity, WorkflowIdentityFilter identityFilter, TimeSpan timeout, AsyncCallback callback, object state);
    public static void EndCreateDefaultInstanceOwner(IAsyncResult asyncResult);
    public static void DeleteDefaultInstanceOwner(InstanceStore instanceStore);
    public static void DeleteDefaultInstanceOwner(InstanceStore instanceStore, TimeSpan timeout);
    public static IAsyncResult BeginDeleteDefaultInstanceOwner(InstanceStore instanceStore, AsyncCallback callback, object state);
    public static IAsyncResult BeginDeleteDefaultInstanceOwner(InstanceStore instanceStore, TimeSpan timeout, AsyncCallback callback, object state);
    public static void EndDeleteDefaultInstanceOwner(IAsyncResult asyncResult);
    public static WorkflowApplicationInstance GetRunnableInstance(InstanceStore instanceStore);
    public static WorkflowApplicationInstance GetRunnableInstance(InstanceStore instanceStore, TimeSpan timeout);
    public static IAsyncResult BeginGetRunnableInstance(InstanceStore instanceStore, AsyncCallback callback, object state);
    public static IAsyncResult BeginGetRunnableInstance(InstanceStore instanceStore, TimeSpan timeout, AsyncCallback callback, object state);
    public static WorkflowApplicationInstance EndGetRunnableInstance(IAsyncResult asyncResult);
    public static WorkflowApplicationInstance GetInstance(Guid instanceId, InstanceStore instanceStore);
    public static WorkflowApplicationInstance GetInstance(Guid instanceId, InstanceStore instanceStore, TimeSpan timeout);
    public static IAsyncResult BeginGetInstance(Guid instanceId, InstanceStore instanceStore, AsyncCallback callback, object state);
    public static IAsyncResult BeginGetInstance(Guid instanceId, InstanceStore instanceStore, TimeSpan timeout, AsyncCallback callback, object state);
    public static WorkflowApplicationInstance EndGetInstance(IAsyncResult asyncResult);
    public void Load(WorkflowApplicationInstance instance);
    public void Load(WorkflowApplicationInstance instance, TimeSpan timeout);
    public void Load(WorkflowApplicationInstance instance, DynamicUpdateMap updateMap);
    public void Load(WorkflowApplicationInstance instance, DynamicUpdateMap updateMap, TimeSpan timeout);
    public void LoadRunnableInstance();
    public void LoadRunnableInstance(TimeSpan timeout);
    public void Load(Guid instanceId);
    public void Load(Guid instanceId, TimeSpan timeout);
    internal static void DiscardInstance(PersistenceManagerBase persistanceManager, TimeSpan timeout);
    internal static IAsyncResult BeginDiscardInstance(PersistenceManagerBase persistanceManager, TimeSpan timeout, AsyncCallback callback, object state);
    internal static void EndDiscardInstance(IAsyncResult asyncResult);
    internal static IList`1<ActivityBlockingUpdate> GetActivitiesBlockingUpdate(WorkflowApplicationInstance instance, DynamicUpdateMap updateMap);
    public IAsyncResult BeginLoadRunnableInstance(AsyncCallback callback, object state);
    public IAsyncResult BeginLoadRunnableInstance(TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginLoad(Guid instanceId, AsyncCallback callback, object state);
    public IAsyncResult BeginLoad(Guid instanceId, TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginLoad(WorkflowApplicationInstance instance, AsyncCallback callback, object state);
    public IAsyncResult BeginLoad(WorkflowApplicationInstance instance, TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginLoad(WorkflowApplicationInstance instance, DynamicUpdateMap updateMap, AsyncCallback callback, object state);
    public IAsyncResult BeginLoad(WorkflowApplicationInstance instance, DynamicUpdateMap updateMap, TimeSpan timeout, AsyncCallback callback, object state);
    public void EndLoad(IAsyncResult result);
    public void EndLoadRunnableInstance(IAsyncResult result);
    protected virtual void OnNotifyUnhandledException(Exception exception, Activity exceptionSource, string exceptionSourceInstanceId);
    public void Persist();
    public void Persist(TimeSpan timeout);
    public IAsyncResult BeginPersist(AsyncCallback callback, object state);
    public IAsyncResult BeginPersist(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndPersist(IAsyncResult result);
    internal ReadOnlyCollection`1<BookmarkInfo> GetBookmarksForIdle();
    public ReadOnlyCollection`1<BookmarkInfo> GetBookmarks();
    public ReadOnlyCollection`1<BookmarkInfo> GetBookmarks(TimeSpan timeout);
    protected internal virtual IAsyncResult OnBeginPersist(AsyncCallback callback, object state);
    protected internal virtual void OnEndPersist(IAsyncResult result);
    protected internal virtual IAsyncResult OnBeginAssociateKeys(ICollection`1<InstanceKey> keys, AsyncCallback callback, object state);
    protected internal virtual void OnEndAssociateKeys(IAsyncResult result);
    protected internal virtual void OnDisassociateKeys(ICollection`1<InstanceKey> keys);
    public BookmarkResumptionResult ResumeBookmark(string bookmarkName, object value);
    public BookmarkResumptionResult ResumeBookmark(Bookmark bookmark, object value);
    public BookmarkResumptionResult ResumeBookmark(string bookmarkName, object value, TimeSpan timeout);
    public BookmarkResumptionResult ResumeBookmark(Bookmark bookmark, object value, TimeSpan timeout);
    public IAsyncResult BeginResumeBookmark(string bookmarkName, object value, AsyncCallback callback, object state);
    public IAsyncResult BeginResumeBookmark(string bookmarkName, object value, TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginResumeBookmark(Bookmark bookmark, object value, AsyncCallback callback, object state);
    public IAsyncResult BeginResumeBookmark(Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);
    public BookmarkResumptionResult EndResumeBookmark(IAsyncResult result);
    protected internal virtual IAsyncResult OnBeginResumeBookmark(Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);
    protected internal virtual BookmarkResumptionResult OnEndResumeBookmark(IAsyncResult result);
    public void Unload();
    public void Unload(TimeSpan timeout);
    public IAsyncResult BeginUnload(AsyncCallback callback, object state);
    public IAsyncResult BeginUnload(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndUnload(IAsyncResult result);
}
public class System.Activities.WorkflowApplicationAbortedEventArgs : WorkflowApplicationEventArgs {
    public Exception Reason { get; private set; }
    internal WorkflowApplicationAbortedEventArgs(WorkflowApplication application, Exception reason);
    [CompilerGeneratedAttribute]
public Exception get_Reason();
    [CompilerGeneratedAttribute]
private void set_Reason(Exception value);
}
public class System.Activities.WorkflowApplicationAbortedException : WorkflowApplicationException {
    public WorkflowApplicationAbortedException(string message);
    public WorkflowApplicationAbortedException(string message, Guid instanceId);
    public WorkflowApplicationAbortedException(string message, Exception innerException);
    public WorkflowApplicationAbortedException(string message, Guid instanceId, Exception innerException);
    protected WorkflowApplicationAbortedException(SerializationInfo info, StreamingContext context);
}
public class System.Activities.WorkflowApplicationCompletedEventArgs : WorkflowApplicationEventArgs {
    public ActivityInstanceState CompletionState { get; }
    public IDictionary`2<string, object> Outputs { get; }
    public Exception TerminationException { get; }
    internal WorkflowApplicationCompletedEventArgs(WorkflowApplication application, Exception terminationException, ActivityInstanceState completionState, IDictionary`2<string, object> outputs);
    public ActivityInstanceState get_CompletionState();
    public IDictionary`2<string, object> get_Outputs();
    public Exception get_TerminationException();
}
public class System.Activities.WorkflowApplicationCompletedException : WorkflowApplicationException {
    public WorkflowApplicationCompletedException(string message);
    public WorkflowApplicationCompletedException(string message, Guid instanceId);
    public WorkflowApplicationCompletedException(string message, Exception innerException);
    public WorkflowApplicationCompletedException(string message, Guid instanceId, Exception innerException);
    protected WorkflowApplicationCompletedException(SerializationInfo info, StreamingContext context);
}
public class System.Activities.WorkflowApplicationEventArgs : EventArgs {
    internal WorkflowApplication Owner { get; private set; }
    public Guid InstanceId { get; }
    internal WorkflowApplicationEventArgs(WorkflowApplication application);
    [CompilerGeneratedAttribute]
internal WorkflowApplication get_Owner();
    [CompilerGeneratedAttribute]
private void set_Owner(WorkflowApplication value);
    public Guid get_InstanceId();
    public IEnumerable`1<T> GetInstanceExtensions();
}
public class System.Activities.WorkflowApplicationException : Exception {
    public Guid InstanceId { get; }
    public WorkflowApplicationException(string message);
    public WorkflowApplicationException(string message, Guid instanceId);
    public WorkflowApplicationException(string message, Exception innerException);
    public WorkflowApplicationException(string message, Guid instanceId, Exception innerException);
    protected WorkflowApplicationException(SerializationInfo info, StreamingContext context);
    public Guid get_InstanceId();
    [SecurityCriticalAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Activities.WorkflowApplicationIdleEventArgs : WorkflowApplicationEventArgs {
    public ReadOnlyCollection`1<BookmarkInfo> Bookmarks { get; }
    internal WorkflowApplicationIdleEventArgs(WorkflowApplication application);
    public ReadOnlyCollection`1<BookmarkInfo> get_Bookmarks();
}
public class System.Activities.WorkflowApplicationInstance : object {
    public WorkflowIdentity DefinitionIdentity { get; private set; }
    public InstanceStore InstanceStore { get; }
    public Guid InstanceId { get; }
    internal PersistenceManagerBase PersistenceManager { get; private set; }
    internal IDictionary`2<XName, InstanceValue> Values { get; private set; }
    internal WorkflowApplicationInstance(PersistenceManagerBase persistenceManager, IDictionary`2<XName, InstanceValue> values, WorkflowIdentity definitionIdentity);
    [CompilerGeneratedAttribute]
public WorkflowIdentity get_DefinitionIdentity();
    [CompilerGeneratedAttribute]
private void set_DefinitionIdentity(WorkflowIdentity value);
    public InstanceStore get_InstanceStore();
    public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
internal PersistenceManagerBase get_PersistenceManager();
    [CompilerGeneratedAttribute]
private void set_PersistenceManager(PersistenceManagerBase value);
    [CompilerGeneratedAttribute]
internal IDictionary`2<XName, InstanceValue> get_Values();
    [CompilerGeneratedAttribute]
private void set_Values(IDictionary`2<XName, InstanceValue> value);
    public void Abandon();
    public void Abandon(TimeSpan timeout);
    public IAsyncResult BeginAbandon(AsyncCallback callback, object state);
    public IAsyncResult BeginAbandon(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndAbandon(IAsyncResult asyncResult);
    public bool CanApplyUpdate(DynamicUpdateMap updateMap, IList`1& activitiesBlockingUpdate);
    internal void MarkAsLoaded();
}
public class System.Activities.WorkflowApplicationTerminatedException : WorkflowApplicationCompletedException {
    public WorkflowApplicationTerminatedException(string message);
    public WorkflowApplicationTerminatedException(string message, Guid instanceId);
    public WorkflowApplicationTerminatedException(string message, Exception innerException);
    public WorkflowApplicationTerminatedException(string message, Guid instanceId, Exception innerException);
    protected WorkflowApplicationTerminatedException(SerializationInfo info, StreamingContext context);
}
public class System.Activities.WorkflowApplicationUnhandledExceptionEventArgs : WorkflowApplicationEventArgs {
    public Exception UnhandledException { get; private set; }
    public Activity ExceptionSource { get; private set; }
    public string ExceptionSourceInstanceId { get; private set; }
    internal WorkflowApplicationUnhandledExceptionEventArgs(WorkflowApplication application, Exception exception, Activity exceptionSource, string exceptionSourceInstanceId);
    [CompilerGeneratedAttribute]
public Exception get_UnhandledException();
    [CompilerGeneratedAttribute]
private void set_UnhandledException(Exception value);
    [CompilerGeneratedAttribute]
public Activity get_ExceptionSource();
    [CompilerGeneratedAttribute]
private void set_ExceptionSource(Activity value);
    [CompilerGeneratedAttribute]
public string get_ExceptionSourceInstanceId();
    [CompilerGeneratedAttribute]
private void set_ExceptionSourceInstanceId(string value);
}
public class System.Activities.WorkflowApplicationUnloadedException : WorkflowApplicationException {
    public WorkflowApplicationUnloadedException(string message);
    public WorkflowApplicationUnloadedException(string message, Guid instanceId);
    public WorkflowApplicationUnloadedException(string message, Exception innerException);
    public WorkflowApplicationUnloadedException(string message, Guid instanceId, Exception innerException);
    protected WorkflowApplicationUnloadedException(SerializationInfo info, StreamingContext context);
}
public class System.Activities.WorkflowDataContext : CustomTypeDescriptor {
    internal bool IncludesLocalVariables { get; internal set; }
    internal WorkflowDataContext(ActivityExecutor executor, ActivityInstance activityInstance, bool includeLocalVariables);
    [CompilerGeneratedAttribute]
internal bool get_IncludesLocalVariables();
    [CompilerGeneratedAttribute]
internal void set_IncludesLocalVariables(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void Dispose();
    internal void DisposeEnvironment();
    public virtual PropertyDescriptorCollection GetProperties();
}
[DataContractAttribute]
[TypeConverterAttribute("System.Activities.XamlIntegration.WorkflowIdentityConverter")]
public class System.Activities.WorkflowIdentity : object {
    public string Name { get; public set; }
    public Version Version { get; public set; }
    public string Package { get; public set; }
    [DataMemberAttribute]
internal string SerializedName { get; internal set; }
    [DataMemberAttribute]
internal string SerializedVersion { get; internal set; }
    [DataMemberAttribute]
internal string SerializedPackage { get; internal set; }
    public WorkflowIdentity(string name, Version version, string package);
    private static WorkflowIdentity();
    public string get_Name();
    public void set_Name(string value);
    public Version get_Version();
    public void set_Version(Version value);
    public string get_Package();
    public void set_Package(string value);
    public static WorkflowIdentity Parse(string identity);
    public static bool TryParse(string identity, WorkflowIdentity& result);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(WorkflowIdentity other);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal string get_SerializedName();
    internal void set_SerializedName(string value);
    internal string get_SerializedVersion();
    internal void set_SerializedVersion(string value);
    internal string get_SerializedPackage();
    internal void set_SerializedPackage(string value);
}
public enum System.Activities.WorkflowIdentityFilter : Enum {
    public int value__;
    public static WorkflowIdentityFilter Exact;
    public static WorkflowIdentityFilter Any;
    public static WorkflowIdentityFilter AnyRevision;
}
[ExtensionAttribute]
internal static class System.Activities.WorkflowIdentityFilterExtensions : object {
    [ExtensionAttribute]
public static bool IsValid(WorkflowIdentityFilter value);
}
public static class System.Activities.WorkflowInspectionServices : object {
    public static void CacheMetadata(Activity rootActivity);
    public static void CacheMetadata(Activity rootActivity, LocationReferenceEnvironment hostEnvironment);
    public static Activity Resolve(Activity root, string id);
    [IteratorStateMachineAttribute("System.Activities.WorkflowInspectionServices/<GetActivities>d__3")]
public static IEnumerable`1<Activity> GetActivities(Activity activity);
    public static Version GetImplementationVersion(Activity activity);
    public static bool CanInduceIdle(Activity activity);
}
public class System.Activities.WorkflowInvoker : object {
    public WorkflowInstanceExtensionManager Extensions { get; }
    public WorkflowInvoker(Activity workflow);
    [CompilerGeneratedAttribute]
public void add_InvokeCompleted(EventHandler`1<InvokeCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_InvokeCompleted(EventHandler`1<InvokeCompletedEventArgs> value);
    public WorkflowInstanceExtensionManager get_Extensions();
    public static IDictionary`2<string, object> Invoke(Activity workflow);
    public static IDictionary`2<string, object> Invoke(Activity workflow, TimeSpan timeout);
    public static IDictionary`2<string, object> Invoke(Activity workflow, IDictionary`2<string, object> inputs);
    public static IDictionary`2<string, object> Invoke(Activity workflow, IDictionary`2<string, object> inputs, TimeSpan timeout);
    public static TResult Invoke(Activity`1<TResult> workflow);
    public static TResult Invoke(Activity`1<TResult> workflow, IDictionary`2<string, object> inputs);
    public static TResult Invoke(Activity`1<TResult> workflow, IDictionary`2<string, object> inputs, TimeSpan timeout);
    public static TResult Invoke(Activity`1<TResult> workflow, IDictionary`2<string, object> inputs, IDictionary`2& additionalOutputs, TimeSpan timeout);
    public IAsyncResult BeginInvoke(AsyncCallback callback, object state);
    public IAsyncResult BeginInvoke(TimeSpan timeout, AsyncCallback callback, object state);
    public IAsyncResult BeginInvoke(IDictionary`2<string, object> inputs, AsyncCallback callback, object state);
    public IAsyncResult BeginInvoke(IDictionary`2<string, object> inputs, TimeSpan timeout, AsyncCallback callback, object state);
    public void CancelAsync(object userState);
    public IDictionary`2<string, object> EndInvoke(IAsyncResult result);
    public IDictionary`2<string, object> Invoke();
    public IDictionary`2<string, object> Invoke(TimeSpan timeout);
    public IDictionary`2<string, object> Invoke(IDictionary`2<string, object> inputs);
    public IDictionary`2<string, object> Invoke(IDictionary`2<string, object> inputs, TimeSpan timeout);
    public void InvokeAsync();
    public void InvokeAsync(TimeSpan timeout);
    public void InvokeAsync(object userState);
    public void InvokeAsync(TimeSpan timeout, object userState);
    public void InvokeAsync(IDictionary`2<string, object> inputs);
    public void InvokeAsync(IDictionary`2<string, object> inputs, TimeSpan timeout);
    public void InvokeAsync(IDictionary`2<string, object> inputs, object userState);
    public void InvokeAsync(IDictionary`2<string, object> inputs, TimeSpan timeout, object userState);
}
internal class System.Activities.WorkflowPersistenceContext : object {
    public Transaction PublicTransaction { get; }
    public WorkflowPersistenceContext(bool transactionRequired, TimeSpan transactionTimeout);
    public WorkflowPersistenceContext(bool transactionRequired, Transaction transactionToUse, TimeSpan transactionTimeout);
    public Transaction get_PublicTransaction();
    public void Abort();
    public void Complete();
    public bool TryBeginComplete(AsyncCallback callback, object state, IAsyncResult& result);
    public void EndComplete(IAsyncResult result);
}
internal class System.Activities.XamlIntegration.ActivityBuilderXamlWriter : XamlWriter {
    public XamlSchemaContext SchemaContext { get; }
    public ActivityBuilderXamlWriter(XamlWriter innerWriter);
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual void WriteNamespace(NamespaceDeclaration namespaceDeclaration);
    public virtual void WriteValue(object value);
    public virtual void WriteStartObject(XamlType xamlType);
    public virtual void WriteGetObject();
    public virtual void WriteEndObject();
    public virtual void WriteStartMember(XamlMember xamlMember);
    public virtual void WriteEndMember();
    protected virtual void Dispose(bool disposing);
}
public class System.Activities.XamlIntegration.ActivityWithResultConverter : TypeConverterBase {
    public ActivityWithResultConverter(Type type);
    internal static object GetRootTemplatedActivity(IServiceProvider serviceProvider);
}
public class System.Activities.XamlIntegration.ActivityWithResultValueSerializer : ValueSerializer {
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
    internal static bool CanConvertToStringWrapper(object value, IValueSerializerContext context);
    internal static string ConvertToStringWrapper(object value, IValueSerializerContext context);
}
public static class System.Activities.XamlIntegration.ActivityXamlServices : object {
    private static ActivityXamlServices();
    public static Activity Load(Stream stream);
    public static Activity Load(Stream stream, ActivityXamlServicesSettings settings);
    public static Activity Load(string fileName);
    public static Activity Load(string fileName, ActivityXamlServicesSettings settings);
    public static Activity Load(TextReader textReader);
    public static Activity Load(TextReader textReader, ActivityXamlServicesSettings settings);
    public static Activity Load(XmlReader xmlReader);
    public static Activity Load(XmlReader xmlReader, ActivityXamlServicesSettings settings);
    public static Activity Load(XamlReader xamlReader);
    public static Activity Load(XamlReader xamlReader, ActivityXamlServicesSettings settings);
    public static XamlReader CreateReader(Stream stream);
    public static XamlReader CreateReader(XamlReader innerReader);
    public static XamlReader CreateReader(XamlReader innerReader, XamlSchemaContext schemaContext);
    public static XamlReader CreateBuilderReader(XamlReader innerReader);
    public static XamlReader CreateBuilderReader(XamlReader innerReader, XamlSchemaContext schemaContext);
    public static XamlWriter CreateBuilderWriter(XamlWriter innerWriter);
    public static Func`1<object> CreateFactory(XamlReader reader, Type resultType);
    public static Func`1<T> CreateFactory(XamlReader reader);
    [SecuritySafeCriticalAttribute]
public static void InitializeComponent(Type componentType, object componentInstance);
}
public class System.Activities.XamlIntegration.ActivityXamlServicesSettings : object {
    public bool CompileExpressions { get; public set; }
    public LocationReferenceEnvironment LocationReferenceEnvironment { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_CompileExpressions();
    [CompilerGeneratedAttribute]
public void set_CompileExpressions(bool value);
    [CompilerGeneratedAttribute]
public LocationReferenceEnvironment get_LocationReferenceEnvironment();
    [CompilerGeneratedAttribute]
public void set_LocationReferenceEnvironment(LocationReferenceEnvironment value);
}
public class System.Activities.XamlIntegration.ArgumentValueSerializer : ValueSerializer {
    public virtual bool CanConvertToString(object value, IValueSerializerContext context);
    public virtual string ConvertToString(object value, IValueSerializerContext context);
}
public class System.Activities.XamlIntegration.AssemblyReferenceConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public abstract class System.Activities.XamlIntegration.CompiledDataContext : object {
    protected CompiledDataContext(IList`1<LocationReference> locationReferences, ActivityContext activityContext);
    protected CompiledDataContext(IList`1<Location> locations);
    protected CompiledDataContext(IList`1<LocationReference> locationReferences);
    protected object GetVariableValue(int index);
    protected void SetVariableValue(int index, object value);
    protected virtual void GetValueTypeValues();
    protected virtual void SetValueTypeValues();
    protected Expression RewriteExpressionTree(Expression originalExpression);
    public Location`1<T> GetLocation(Func`1<T> getMethod, Action`1<T> setMethod, int expressionId, Activity compiledRootActivity, ActivityContext activityContext);
    public Location`1<T> GetLocation(Func`1<T> getMethod, Action`1<T> setMethod);
    protected static object GetDataContextActivities(Activity compiledRoot, bool forImplementation);
    protected static CompiledDataContext[] GetCompiledDataContextCache(object dataContextActivities, ActivityContext activityContext, Activity compiledRoot, bool forImplementation, int compiledDataContextCount);
}
internal abstract class System.Activities.XamlIntegration.CompiledExpressionActivityVisitor : object {
    protected bool ForImplementation { get; private set; }
    [CompilerGeneratedAttribute]
protected bool get_ForImplementation();
    [CompilerGeneratedAttribute]
private void set_ForImplementation(bool value);
    public void Visit(Activity activity, bool forImplementation);
    protected virtual void Visit(Activity activity, Boolean& exit);
    protected virtual void VisitRoot(Activity activity, Boolean& exit);
    protected virtual void VisitRootImplementationArguments(Activity activity, Boolean& exit);
    protected virtual void VisitRootImplementationArgument(RuntimeArgument runtimeArgument, Boolean& exit);
    protected virtual void VisitVariableScope(Activity activity, Boolean& exit);
    protected virtual void VisitRootImplementationScope(Activity activity, Boolean& exit);
    protected virtual void VisitITextExpression(Activity activity, Boolean& exit);
    protected virtual void VisitChildren(Activity activity, Boolean& exit);
    protected virtual void VisitImportedChildren(Activity activity, Boolean& exit);
    protected virtual void VisitDelegates(Activity activity, Boolean& exit);
    protected virtual void VisitImportedDelegates(Activity activity, Boolean& exit);
    protected virtual void VisitDelegate(ActivityDelegate activityDelegate, Boolean& exit);
    protected virtual void VisitDelegateArguments(ActivityDelegate activityDelegate, Boolean& exit);
    protected virtual void VisitDelegateArgument(RuntimeDelegateArgument delegateArgument, Boolean& exit);
    protected virtual void VisitVariableScopeArguments(Activity activity, Boolean& exit);
    protected virtual void VisitVariableScopeArgument(RuntimeArgument runtimeArgument, Boolean& exit);
    protected virtual void VisitArguments(Activity activity, Boolean& exit);
    protected virtual void VisitArgument(RuntimeArgument runtimeArgument, Boolean& exit);
}
[DataContractAttribute]
internal class System.Activities.XamlIntegration.CompiledLocation`1 : Location`1<T> {
    public T Value { get; public set; }
    [DataMemberAttribute]
public Byte[] CompiledRootActivityQualifiedId { get; public set; }
    [DataMemberAttribute]
public Byte[] ExpressionActivityQualifiedId { get; public set; }
    [DataMemberAttribute]
public IList`1<Tuple`2<string, Type>> locationReferenceCache { get; public set; }
    [DataMemberAttribute]
internal int SerializedExpressionId { get; internal set; }
    [DataMemberAttribute]
internal IList`1<Location> SerializedLocations { get; internal set; }
    [DataMemberAttribute]
internal ActivityInstance SerializedRootInstance { get; internal set; }
    [DataMemberAttribute]
internal string SerializedExpressionText { get; internal set; }
    [DataMemberAttribute]
internal bool SerializedForImplementation { get; internal set; }
    public CompiledLocation`1(Func`1<T> getMethod, Action`1<T> setMethod, IList`1<LocationReference> locationReferences, IList`1<Location> locations, int expressionId, Activity compiledRootActivity, ActivityContext currentActivityContext);
    public CompiledLocation`1(Func`1<T> getMethod, Action`1<T> setMethod);
    public virtual T get_Value();
    public virtual void set_Value(T value);
    public Byte[] get_CompiledRootActivityQualifiedId();
    public void set_CompiledRootActivityQualifiedId(Byte[] value);
    public Byte[] get_ExpressionActivityQualifiedId();
    public void set_ExpressionActivityQualifiedId(Byte[] value);
    public IList`1<Tuple`2<string, Type>> get_locationReferenceCache();
    public void set_locationReferenceCache(IList`1<Tuple`2<string, Type>> value);
    internal int get_SerializedExpressionId();
    internal void set_SerializedExpressionId(int value);
    internal IList`1<Location> get_SerializedLocations();
    internal void set_SerializedLocations(IList`1<Location> value);
    internal ActivityInstance get_SerializedRootInstance();
    internal void set_SerializedRootInstance(ActivityInstance value);
    internal string get_SerializedExpressionText();
    internal void set_SerializedExpressionText(string value);
    internal bool get_SerializedForImplementation();
    internal void set_SerializedForImplementation(bool value);
}
internal class System.Activities.XamlIntegration.ConcatenatingXamlReader : XamlReader {
    public bool IsEof { get; }
    public XamlMember Member { get; }
    public NamespaceDeclaration Namespace { get; }
    public XamlNodeType NodeType { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlType Type { get; }
    public object Value { get; }
    public ConcatenatingXamlReader(XamlReader[] readers);
    public virtual bool get_IsEof();
    public virtual XamlMember get_Member();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual XamlNodeType get_NodeType();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual XamlType get_Type();
    public virtual object get_Value();
    protected virtual void Dispose(bool disposing);
    public virtual bool Read();
}
internal class System.Activities.XamlIntegration.DynamicActivityXamlReader : XamlReader {
    internal static XamlMember xPropertyType;
    internal static XamlMember xPropertyName;
    internal static XamlMember xPropertyAttributes;
    public XamlType Type { get; }
    public NamespaceDeclaration Namespace { get; }
    public object Value { get; }
    public bool IsEof { get; }
    public XamlMember Member { get; }
    public XamlSchemaContext SchemaContext { get; }
    public XamlNodeType NodeType { get; }
    public bool HasLineInfo { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public DynamicActivityXamlReader(XamlReader innerReader);
    public DynamicActivityXamlReader(XamlReader innerReader, XamlSchemaContext schemaContext);
    public DynamicActivityXamlReader(bool isBuilder, XamlReader innerReader, XamlSchemaContext schemaContext);
    private static DynamicActivityXamlReader();
    public virtual XamlType get_Type();
    public virtual NamespaceDeclaration get_Namespace();
    public virtual object get_Value();
    public virtual bool get_IsEof();
    public virtual XamlMember get_Member();
    public virtual XamlSchemaContext get_SchemaContext();
    public virtual XamlNodeType get_NodeType();
    public sealed virtual bool get_HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    protected virtual void Dispose(bool disposing);
    public virtual bool Read();
}
public class System.Activities.XamlIntegration.DynamicUpdateMapConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[ContentPropertyAttribute("XmlContent")]
public class System.Activities.XamlIntegration.DynamicUpdateMapExtension : MarkupExtension {
    public DynamicUpdateMap UpdateMap { get; }
    public IXmlSerializable XmlContent { get; }
    public DynamicUpdateMapExtension(DynamicUpdateMap updateMap);
    public DynamicUpdateMap get_UpdateMap();
    public IXmlSerializable get_XmlContent();
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class System.Activities.XamlIntegration.DynamicUpdateMapItemConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Activities.XamlIntegration.ExpressionTreeRewriter : ExpressionVisitor {
    public ExpressionTreeRewriter(IList`1<LocationReference> locationReferences);
    protected virtual Expression VisitMember(MemberExpression node);
    protected virtual Expression VisitConstant(ConstantExpression node);
}
public class System.Activities.XamlIntegration.FuncDeferringLoader : XamlDeferringLoader {
    public virtual object Load(XamlReader xamlReader, IServiceProvider context);
    public virtual XamlReader Save(object value, IServiceProvider serviceProvider);
}
internal abstract class System.Activities.XamlIntegration.FuncFactory : object {
    internal IList`1<NamespaceDeclaration> ParentNamespaces { get; internal set; }
    internal XamlNodeList Nodes { get; internal set; }
    internal bool IgnoreParentSettings { get; internal set; }
    public static Func`1<object> CreateFunc(XamlReader reader, Type returnType);
    public static Func`1<T> CreateFunc(XamlReader reader);
    [CompilerGeneratedAttribute]
internal IList`1<NamespaceDeclaration> get_ParentNamespaces();
    [CompilerGeneratedAttribute]
internal void set_ParentNamespaces(IList`1<NamespaceDeclaration> value);
    [CompilerGeneratedAttribute]
internal XamlNodeList get_Nodes();
    [CompilerGeneratedAttribute]
internal void set_Nodes(XamlNodeList value);
    [CompilerGeneratedAttribute]
internal bool get_IgnoreParentSettings();
    [CompilerGeneratedAttribute]
internal void set_IgnoreParentSettings(bool value);
    internal abstract virtual Func`1<object> GetFunc();
    internal static FuncFactory CreateFactory(XamlReader xamlReader, IServiceProvider context);
}
internal class System.Activities.XamlIntegration.FuncFactory`1 : FuncFactory {
    public FuncFactory`1(IXamlObjectWriterFactory objectWriterFactory, XamlReader reader);
    internal T Evaluate();
    internal virtual Func`1<object> GetFunc();
    internal Func`1<T> GetTypedFunc();
}
public interface System.Activities.XamlIntegration.ICompiledExpressionRoot {
    public abstract virtual string GetLanguage();
    public abstract virtual bool CanExecuteExpression(string expressionText, bool isReference, IList`1<LocationReference> locations, Int32& expressionId);
    public abstract virtual object InvokeExpression(int expressionId, IList`1<LocationReference> locations, ActivityContext activityContext);
    public abstract virtual object InvokeExpression(int expressionId, IList`1<Location> locations);
    public abstract virtual IList`1<string> GetRequiredLocations(int expressionId);
    public abstract virtual Expression GetExpressionTreeForExpression(int expressionId, IList`1<LocationReference> locationReferences);
}
public class System.Activities.XamlIntegration.ImplementationVersionConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Activities.XamlIntegration.InArgumentConverter : TypeConverterBase {
    public InArgumentConverter(Type type);
}
public class System.Activities.XamlIntegration.InOutArgumentConverter : TypeConverterBase {
    public InOutArgumentConverter(Type type);
}
public interface System.Activities.XamlIntegration.IValueSerializableExpression {
    public abstract virtual bool CanConvertToString(IValueSerializerContext context);
    public abstract virtual string ConvertToString(IValueSerializerContext context);
}
internal class System.Activities.XamlIntegration.NamespaceTable : object {
    public sealed virtual string GetNamespace(string prefix);
    public void ManageNamespace(XamlReader reader);
    public void AddNamespace(NamespaceDeclaration xamlNamespace);
    public void EnterScope();
    public void ExitScope();
    public sealed virtual IEnumerable`1<NamespaceDeclaration> GetNamespacePrefixes();
}
internal class System.Activities.XamlIntegration.NetDataContractXmlSerializable`1 : object {
    public T Value { get; private set; }
    public NetDataContractXmlSerializable`1(T value);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
private void set_Value(T value);
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
public class System.Activities.XamlIntegration.OutArgumentConverter : TypeConverterBase {
    public OutArgumentConverter(Type type);
}
[MarkupExtensionReturnTypeAttribute("System.Object")]
public class System.Activities.XamlIntegration.PropertyReferenceExtension`1 : MarkupExtension {
    public string PropertyName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    public virtual object ProvideValue(IServiceProvider serviceProvider);
}
public class System.Activities.XamlIntegration.SerializableFuncDeferringLoader : XamlDeferringLoader {
    public virtual object Load(XamlReader xamlReader, IServiceProvider context);
    public virtual XamlReader Save(object value, IServiceProvider serviceProvider);
}
public class System.Activities.XamlIntegration.TextExpressionCompiler : object {
    public TextExpressionCompiler(TextExpressionCompilerSettings settings);
    private static TextExpressionCompiler();
    public bool GenerateSource(TextWriter textWriter);
    public TextExpressionCompilerResults Compile();
}
public class System.Activities.XamlIntegration.TextExpressionCompilerError : object {
    public bool IsWarning { get; internal set; }
    public int SourceLineNumber { get; internal set; }
    public string Message { get; internal set; }
    public string Number { get; internal set; }
    [CompilerGeneratedAttribute]
public bool get_IsWarning();
    [CompilerGeneratedAttribute]
internal void set_IsWarning(bool value);
    [CompilerGeneratedAttribute]
public int get_SourceLineNumber();
    [CompilerGeneratedAttribute]
internal void set_SourceLineNumber(int value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Number();
    [CompilerGeneratedAttribute]
internal void set_Number(string value);
}
internal static class System.Activities.XamlIntegration.TextExpressionCompilerHelper : object {
    public static void GetNamespacesLineInfo(string sourceXamlFileName, Dictionary`2<string, int> lineNumbersForNSes, Dictionary`2<string, int> lineNumbersForNSesForImpl);
}
public class System.Activities.XamlIntegration.TextExpressionCompilerResults : object {
    public Type ResultType { get; internal set; }
    public bool HasErrors { get; internal set; }
    public bool HasSourceInfo { get; internal set; }
    public ReadOnlyCollection`1<TextExpressionCompilerError> CompilerMessages { get; }
    [CompilerGeneratedAttribute]
public Type get_ResultType();
    [CompilerGeneratedAttribute]
internal void set_ResultType(Type value);
    [CompilerGeneratedAttribute]
public bool get_HasErrors();
    [CompilerGeneratedAttribute]
internal void set_HasErrors(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasSourceInfo();
    [CompilerGeneratedAttribute]
internal void set_HasSourceInfo(bool value);
    public ReadOnlyCollection`1<TextExpressionCompilerError> get_CompilerMessages();
    internal void SetMessages(IList`1<TextExpressionCompilerError> messages, bool hasErrors);
}
public class System.Activities.XamlIntegration.TextExpressionCompilerSettings : object {
    public Activity Activity { get; public set; }
    public string ActivityName { get; public set; }
    public string ActivityNamespace { get; public set; }
    public bool AlwaysGenerateSource { get; public set; }
    public bool ForImplementation { get; public set; }
    public string Language { get; public set; }
    public string RootNamespace { get; public set; }
    public Action`1<string> LogSourceGenerationMessage { get; public set; }
    public bool GenerateAsPartialClass { get; public set; }
    [CompilerGeneratedAttribute]
public Activity get_Activity();
    [CompilerGeneratedAttribute]
public void set_Activity(Activity value);
    [CompilerGeneratedAttribute]
public string get_ActivityName();
    [CompilerGeneratedAttribute]
public void set_ActivityName(string value);
    [CompilerGeneratedAttribute]
public string get_ActivityNamespace();
    [CompilerGeneratedAttribute]
public void set_ActivityNamespace(string value);
    [CompilerGeneratedAttribute]
public bool get_AlwaysGenerateSource();
    [CompilerGeneratedAttribute]
public void set_AlwaysGenerateSource(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForImplementation();
    [CompilerGeneratedAttribute]
public void set_ForImplementation(bool value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_RootNamespace();
    [CompilerGeneratedAttribute]
public void set_RootNamespace(string value);
    [CompilerGeneratedAttribute]
public Action`1<string> get_LogSourceGenerationMessage();
    [CompilerGeneratedAttribute]
public void set_LogSourceGenerationMessage(Action`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_GenerateAsPartialClass();
    [CompilerGeneratedAttribute]
public void set_GenerateAsPartialClass(bool value);
}
public abstract class System.Activities.XamlIntegration.TypeConverterBase : TypeConverter {
    internal TypeConverterBase(Type baseType, Type helperType);
    internal TypeConverterBase(Type targetType, Type baseType, Type helperType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Activities.XamlIntegration.WorkflowIdentityConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[ExtensionAttribute]
internal static class System.Activities.XamlIntegration.XamlWriterExtensions : object {
    public static void PropagateLineInfo(XamlWriter targetWriter, IXamlLineInfo lineInfo);
    public static void PropagateLineInfo(XamlWriter targetWriter, int lineNumber, int linePosition);
    public static void Transform(XamlReader reader, XamlWriter writer, IXamlLineInfo readerLineInfo, bool closeWriter);
    [ExtensionAttribute]
public static void WriteNode(XamlWriter writer, XamlReader reader, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteEndMember(XamlWriter writer, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteEndObject(XamlWriter writer, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteGetObject(XamlWriter writer, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteNamespace(XamlWriter writer, NamespaceDeclaration namespaceDeclaration, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteStartMember(XamlWriter writer, XamlMember xamlMember, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteStartMember(XamlWriter writer, XamlMember xamlMember, int lineNumber, int linePosition);
    [ExtensionAttribute]
public static void WriteStartObject(XamlWriter writer, XamlType type, IXamlLineInfo lineInfo);
    [ExtensionAttribute]
public static void WriteValue(XamlWriter writer, object value, IXamlLineInfo lineInfo);
}
internal static class System.Activities.XD : object {
}
internal class System.TelemetryEventSource : EventSource {
    internal static EventKeywords Reserved44Keyword;
    internal static EventKeywords TelemetryKeyword;
    internal static EventKeywords MeasuresKeyword;
    internal static EventKeywords CriticalDataKeyword;
    internal static EventTags CoreData;
    internal static EventTags InjectXToken;
    internal static EventTags RealtimeLatency;
    internal static EventTags NormalLatency;
    internal static EventTags CriticalPersistence;
    internal static EventTags NormalPersistence;
    internal static EventTags DropPii;
    internal static EventTags HashPii;
    internal static EventTags MarkPii;
    internal static EventFieldTags DropPiiField;
    internal static EventFieldTags HashPiiField;
    internal TelemetryEventSource(string eventSourceName);
    private static TelemetryEventSource();
    internal static EventSourceOptions TelemetryOptions();
    internal static EventSourceOptions MeasuresOptions();
    internal static EventSourceOptions CriticalDataOptions();
    [EventAttribute("1")]
internal void V2Runtime();
}
