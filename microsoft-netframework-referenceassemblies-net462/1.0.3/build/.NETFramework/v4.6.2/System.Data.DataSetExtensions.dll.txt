public static class System.Data.DataRowComparer : object {
    public static DataRowComparer`1<DataRow> Default { get; }
    public static DataRowComparer`1<DataRow> get_Default();
}
public class System.Data.DataRowComparer`1 : object {
    public static DataRowComparer`1<TRow> Default { get; }
    private static DataRowComparer`1();
    public static DataRowComparer`1<TRow> get_Default();
    public sealed virtual bool Equals(TRow leftRow, TRow rightRow);
    public sealed virtual int GetHashCode(TRow row);
}
[ExtensionAttribute]
public static class System.Data.DataRowExtensions : object {
    [ExtensionAttribute]
public static T Field(DataRow row, string columnName);
    [ExtensionAttribute]
public static T Field(DataRow row, DataColumn column);
    [ExtensionAttribute]
public static T Field(DataRow row, int columnIndex);
    [ExtensionAttribute]
public static T Field(DataRow row, int columnIndex, DataRowVersion version);
    [ExtensionAttribute]
public static T Field(DataRow row, string columnName, DataRowVersion version);
    [ExtensionAttribute]
public static T Field(DataRow row, DataColumn column, DataRowVersion version);
    [ExtensionAttribute]
public static void SetField(DataRow row, int columnIndex, T value);
    [ExtensionAttribute]
public static void SetField(DataRow row, string columnName, T value);
    [ExtensionAttribute]
public static void SetField(DataRow row, DataColumn column, T value);
}
[ExtensionAttribute]
public static class System.Data.DataTableExtensions : object {
    [ExtensionAttribute]
public static EnumerableRowCollection`1<DataRow> AsEnumerable(DataTable source);
    [ExtensionAttribute]
public static DataTable CopyToDataTable(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static void CopyToDataTable(IEnumerable`1<T> source, DataTable table, LoadOption options);
    [ExtensionAttribute]
public static void CopyToDataTable(IEnumerable`1<T> source, DataTable table, LoadOption options, FillErrorEventHandler errorHandler);
    [ExtensionAttribute]
public static DataView AsDataView(DataTable table);
    [ExtensionAttribute]
public static DataView AsDataView(EnumerableRowCollection`1<T> source);
}
public abstract class System.Data.EnumerableRowCollection : object {
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Data.EnumerableRowCollection`1 : EnumerableRowCollection {
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TRow> GetEnumerator();
}
[ExtensionAttribute]
public static class System.Data.EnumerableRowCollectionExtensions : object {
    [ExtensionAttribute]
public static EnumerableRowCollection`1<TRow> Where(EnumerableRowCollection`1<TRow> source, Func`2<TRow, bool> predicate);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderBy(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderBy(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderByDescending(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderByDescending(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> ThenBy(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> ThenBy(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> ThenByDescending(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> ThenByDescending(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static EnumerableRowCollection`1<S> Select(EnumerableRowCollection`1<TRow> source, Func`2<TRow, S> selector);
    [ExtensionAttribute]
public static EnumerableRowCollection`1<TResult> Cast(EnumerableRowCollection source);
}
public class System.Data.OrderedEnumerableRowCollection`1 : EnumerableRowCollection`1<TRow> {
}
public abstract class System.Data.TypedTableBase`1 : DataTable {
    protected TypedTableBase`1(SerializationInfo info, StreamingContext context);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public EnumerableRowCollection`1<TResult> Cast();
}
[ExtensionAttribute]
public static class System.Data.TypedTableBaseExtensions : object {
    [ExtensionAttribute]
public static EnumerableRowCollection`1<TRow> Where(TypedTableBase`1<TRow> source, Func`2<TRow, bool> predicate);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderBy(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderBy(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderByDescending(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderByDescending(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static EnumerableRowCollection`1<S> Select(TypedTableBase`1<TRow> source, Func`2<TRow, S> selector);
    [ExtensionAttribute]
public static EnumerableRowCollection`1<TRow> AsEnumerable(TypedTableBase`1<TRow> source);
    [ExtensionAttribute]
public static TRow ElementAtOrDefault(TypedTableBase`1<TRow> source, int index);
}
