public class System.ServiceModel.Dispatcher.EndpointNameMessageFilter : MessageFilter {
    public EndpointNameMessageFilter(string endpointName);
    public virtual bool Match(Message message);
    public virtual bool Match(MessageBuffer buffer);
}
public class System.ServiceModel.Dispatcher.StrictAndMessageFilter : MessageFilter {
    public StrictAndMessageFilter(MessageFilter filter1, MessageFilter filter2);
    public virtual bool Match(Message message);
    public virtual bool Match(MessageBuffer buffer);
    protected internal virtual IMessageFilterTable`1<TFilterData> CreateFilterTable();
}
[ConfigurationCollectionAttribute("System.ServiceModel.Routing.Configuration.BackupEndpointElement")]
public class System.ServiceModel.Routing.Configuration.BackupEndpointCollection : ConfigurationElementCollection {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(BackupEndpointElement element);
    public void Clear();
    public void Remove(BackupEndpointElement element);
}
public class System.ServiceModel.Routing.Configuration.BackupEndpointElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("endpointName")]
public string EndpointName { get; public set; }
    public string get_EndpointName();
    public void set_EndpointName(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.ServiceModel.Routing.Configuration.BackupEndpointCollection")]
public class System.ServiceModel.Routing.Configuration.BackupListCollection : ConfigurationElementCollection {
    public BackupEndpointCollection Item { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(BackupEndpointCollection element);
    public void Clear();
    public void Remove(BackupEndpointCollection element);
    public BackupEndpointCollection get_Item(string name);
}
public class System.ServiceModel.Routing.Configuration.FilterElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("filterType")]
public FilterType FilterType { get; public set; }
    [ConfigurationPropertyAttribute("filterData")]
public string FilterData { get; public set; }
    [ConfigurationPropertyAttribute("filter1")]
public string Filter1 { get; public set; }
    [ConfigurationPropertyAttribute("filter2")]
public string Filter2 { get; public set; }
    [ConfigurationPropertyAttribute("customType")]
public string CustomType { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public FilterType get_FilterType();
    public void set_FilterType(FilterType value);
    public string get_FilterData();
    public void set_FilterData(string value);
    public string get_Filter1();
    public void set_Filter1(string value);
    public string get_Filter2();
    public void set_Filter2(string value);
    public string get_CustomType();
    public void set_CustomType(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.ServiceModel.Routing.Configuration.FilterElement")]
public class System.ServiceModel.Routing.Configuration.FilterElementCollection : ConfigurationElementCollection {
    public FilterElement Item { get; public set; }
    public FilterElement Item { get; }
    public virtual bool IsReadOnly();
    protected virtual bool IsElementRemovable(ConfigurationElement element);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(FilterElement element);
    public void Clear();
    public void Remove(FilterElement element);
    public FilterElement get_Item(int index);
    public void set_Item(int index, FilterElement value);
    public FilterElement get_Item(string name);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.ServiceModel.Routing.Configuration.FilterTableEntryCollection")]
public class System.ServiceModel.Routing.Configuration.FilterTableCollection : ConfigurationElementCollection {
    public FilterTableEntryCollection Item { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(FilterTableEntryCollection element);
    public void Clear();
    public void Remove(FilterTableEntryCollection element);
    public FilterTableEntryCollection get_Item(string name);
}
[ConfigurationCollectionAttribute("System.ServiceModel.Routing.Configuration.FilterTableEntryElement")]
public class System.ServiceModel.Routing.Configuration.FilterTableEntryCollection : ConfigurationElementCollection {
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(FilterTableEntryElement element);
    public void Clear();
    public void Remove(FilterTableEntryElement element);
}
public class System.ServiceModel.Routing.Configuration.FilterTableEntryElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("filterName")]
public string FilterName { get; public set; }
    [ConfigurationPropertyAttribute("endpointName")]
public string EndpointName { get; public set; }
    [ConfigurationPropertyAttribute("priority")]
public int Priority { get; public set; }
    [ConfigurationPropertyAttribute("backupList")]
public string BackupList { get; public set; }
    public string get_FilterName();
    public void set_FilterName(string value);
    public string get_EndpointName();
    public void set_EndpointName(string value);
    public int get_Priority();
    public void set_Priority(int value);
    public string get_BackupList();
    public void set_BackupList(string value);
}
public enum System.ServiceModel.Routing.Configuration.FilterType : Enum {
    public int value__;
    public static FilterType Action;
    public static FilterType EndpointAddress;
    public static FilterType PrefixEndpointAddress;
    public static FilterType And;
    public static FilterType Custom;
    public static FilterType EndpointName;
    public static FilterType MatchAll;
    public static FilterType XPath;
}
public class System.ServiceModel.Routing.Configuration.NamespaceElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("prefix")]
public string Prefix { get; public set; }
    [ConfigurationPropertyAttribute("namespace")]
public string Namespace { get; public set; }
    public string get_Prefix();
    public void set_Prefix(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.ServiceModel.Routing.Configuration.NamespaceElement")]
public class System.ServiceModel.Routing.Configuration.NamespaceElementCollection : ConfigurationElementCollection {
    public NamespaceElement Item { get; public set; }
    public NamespaceElement Item { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Add(NamespaceElement element);
    public void Clear();
    public void Remove(NamespaceElement element);
    public NamespaceElement get_Item(int index);
    public void set_Item(int index, NamespaceElement value);
    public NamespaceElement get_Item(string name);
}
public class System.ServiceModel.Routing.Configuration.RoutingExtensionElement : BehaviorExtensionElement {
    public Type BehaviorType { get; }
    [ConfigurationPropertyAttribute("routeOnHeadersOnly")]
public bool RouteOnHeadersOnly { get; public set; }
    [ConfigurationPropertyAttribute("filterTableName")]
public string FilterTableName { get; public set; }
    [ConfigurationPropertyAttribute("soapProcessingEnabled")]
public bool SoapProcessingEnabled { get; public set; }
    [ConfigurationPropertyAttribute("ensureOrderedDispatch")]
public bool EnsureOrderedDispatch { get; public set; }
    public virtual Type get_BehaviorType();
    public bool get_RouteOnHeadersOnly();
    public void set_RouteOnHeadersOnly(bool value);
    public string get_FilterTableName();
    public void set_FilterTableName(string value);
    public bool get_SoapProcessingEnabled();
    public void set_SoapProcessingEnabled(bool value);
    public bool get_EnsureOrderedDispatch();
    public void set_EnsureOrderedDispatch(bool value);
    protected internal virtual object CreateBehavior();
}
public class System.ServiceModel.Routing.Configuration.RoutingSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("filters")]
public FilterElementCollection Filters { get; }
    [ConfigurationPropertyAttribute("filterTables")]
public FilterTableCollection FilterTables { get; }
    [ConfigurationPropertyAttribute("backupLists")]
public BackupListCollection BackupLists { get; }
    [ConfigurationPropertyAttribute("namespaceTable")]
public NamespaceElementCollection NamespaceTable { get; }
    public FilterElementCollection get_Filters();
    public FilterTableCollection get_FilterTables();
    public BackupListCollection get_BackupLists();
    public NamespaceElementCollection get_NamespaceTable();
    public static MessageFilterTable`1<IEnumerable`1<ServiceEndpoint>> CreateFilterTable(string name);
}
public class System.ServiceModel.Routing.Configuration.SoapProcessingExtensionElement : BehaviorExtensionElement {
    public Type BehaviorType { get; }
    [ConfigurationPropertyAttribute("processMessages")]
public bool ProcessMessages { get; public set; }
    public virtual Type get_BehaviorType();
    protected internal virtual object CreateBehavior();
    public bool get_ProcessMessages();
    public void set_ProcessMessages(bool value);
}
internal class System.ServiceModel.Routing.GenericTransactionFlowAttribute : Attribute {
    public GenericTransactionFlowAttribute(TransactionFlowOption flowOption);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation);
    private sealed virtual override void System.ServiceModel.Description.IOperationBehavior.Validate(OperationDescription operationDescription);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Routing.IDuplexRouterCallback {
}
[ServiceContractAttribute]
public interface System.ServiceModel.Routing.IDuplexSessionRouter {
    [OperationContractAttribute]
[GenericTransactionFlowAttribute("1")]
public abstract virtual IAsyncResult BeginProcessMessage(Message message, AsyncCallback callback, object state);
    public abstract virtual void EndProcessMessage(IAsyncResult result);
}
[ServiceContractAttribute]
public interface System.ServiceModel.Routing.IRequestReplyRouter {
    [OperationContractAttribute]
[GenericTransactionFlowAttribute("1")]
public abstract virtual IAsyncResult BeginProcessRequest(Message message, AsyncCallback callback, object state);
    public abstract virtual Message EndProcessRequest(IAsyncResult result);
}
[ServiceContractAttribute]
public interface System.ServiceModel.Routing.ISimplexDatagramRouter {
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginProcessMessage(Message message, AsyncCallback callback, object state);
    public abstract virtual void EndProcessMessage(IAsyncResult result);
}
[ServiceContractAttribute]
public interface System.ServiceModel.Routing.ISimplexSessionRouter {
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginProcessMessage(Message message, AsyncCallback callback, object state);
    public abstract virtual void EndProcessMessage(IAsyncResult result);
}
public class System.ServiceModel.Routing.RoutingBehavior : object {
    public RoutingBehavior(RoutingConfiguration routingConfiguration);
    private sealed virtual override void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    private sealed virtual override void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    public static Type GetContractForDescription(ContractDescription description);
}
public class System.ServiceModel.Routing.RoutingConfiguration : object {
    public MessageFilterTable`1<IEnumerable`1<ServiceEndpoint>> FilterTable { get; }
    public bool RouteOnHeadersOnly { get; public set; }
    public bool SoapProcessingEnabled { get; public set; }
    public bool EnsureOrderedDispatch { get; public set; }
    public RoutingConfiguration(MessageFilterTable`1<IEnumerable`1<ServiceEndpoint>> filterTable, bool routeOnHeadersOnly);
    public MessageFilterTable`1<IEnumerable`1<ServiceEndpoint>> get_FilterTable();
    [CompilerGeneratedAttribute]
public bool get_RouteOnHeadersOnly();
    [CompilerGeneratedAttribute]
public void set_RouteOnHeadersOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_SoapProcessingEnabled();
    [CompilerGeneratedAttribute]
public void set_SoapProcessingEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_EnsureOrderedDispatch();
    [CompilerGeneratedAttribute]
public void set_EnsureOrderedDispatch(bool value);
}
public class System.ServiceModel.Routing.RoutingExtension : object {
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Attach(ServiceHostBase owner);
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Detach(ServiceHostBase owner);
    public void ApplyConfiguration(RoutingConfiguration routingConfiguration);
}
[ServiceBehaviorAttribute]
[AspNetCompatibilityRequirementsAttribute]
public class System.ServiceModel.Routing.RoutingService : object {
    private sealed virtual override void System.IDisposable.Dispose();
    [OperationBehaviorAttribute]
private sealed virtual override IAsyncResult System.ServiceModel.Routing.ISimplexSessionRouter.BeginProcessMessage(Message message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Routing.ISimplexSessionRouter.EndProcessMessage(IAsyncResult result);
    [OperationBehaviorAttribute]
private sealed virtual override IAsyncResult System.ServiceModel.Routing.IRequestReplyRouter.BeginProcessRequest(Message message, AsyncCallback callback, object state);
    private sealed virtual override Message System.ServiceModel.Routing.IRequestReplyRouter.EndProcessRequest(IAsyncResult result);
    [OperationBehaviorAttribute]
private sealed virtual override IAsyncResult System.ServiceModel.Routing.IDuplexSessionRouter.BeginProcessMessage(Message message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Routing.IDuplexSessionRouter.EndProcessMessage(IAsyncResult result);
    [OperationBehaviorAttribute]
private sealed virtual override IAsyncResult System.ServiceModel.Routing.ISimplexDatagramRouter.BeginProcessMessage(Message message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Routing.ISimplexDatagramRouter.EndProcessMessage(IAsyncResult result);
}
public class System.ServiceModel.Routing.SoapProcessingBehavior : object {
    public bool ProcessMessages { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ProcessMessages();
    [CompilerGeneratedAttribute]
public void set_ProcessMessages(bool value);
    public sealed virtual void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public sealed virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    public sealed virtual void Validate(ServiceEndpoint endpoint);
}
